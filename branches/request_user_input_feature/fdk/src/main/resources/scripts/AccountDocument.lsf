MODULE AccountDocument;

REQUIRE BaseLogicsModule, Store, Employee, Utils;

CLASS ABSTRACT accountDocumentLedger 'Учетный документ';
TABLE accountDocumentLedger (accountDocumentLedger);

CLASS ABSTRACT incAccountDocumentLedger 'Учетный документ (приход)' : accountDocumentLedger;
CLASS ABSTRACT outAccountDocumentLedger 'Учетный документ (расход)' : accountDocumentLedger;

dateTimeAccountDocumentLedger 'Дата/время' (ledger) = ABSTRACT DATETIME (accountDocumentLedger) PERSISTENT INDEXED;
dateAccountDocumentLedger 'Дата' (ledger) = dateInTime(dateTimeAccountDocumentLedger(ledger)) PERSISTENT;

isPostedAccountDocumentLedger 'Закрыт' (ledger) = ABSTRACT BOOLEAN (accountDocumentLedger) PERSISTENT;

departmentStoreAccountDocumentLedger (ledger) = ABSTRACT departmentStore (accountDocumentLedger) PERSISTENT;
nameDepartmentStoreAccountDocumentLedger 'Отдел магазина' (ledger) = name(departmentStoreAccountDocumentLedger(ledger));

descriptionAccountDocumentLedger 'Название документа' (ledger) = ABSTRACT STRING[200] (accountDocumentLedger) PERSISTENT;

GROUP ledgerGroup 'Суммы (всего)' : publicGroup;
sumIncAccountDocumentLedger 'Сумма прихода' (ledger) = ABSTRACT NUMERIC[16,2] (incAccountDocumentLedger) PERSISTENT IN ledgerGroup;
sumOutAccountDocumentLedger 'Сумма расхода' (ledger) = ABSTRACT NUMERIC[16,2] (outAccountDocumentLedger) PERSISTENT IN ledgerGroup;
sumAccountDocumentLedger 'Сумма' (ledger) = UNION EXCLUSIVE sumIncAccountDocumentLedger(ledger), -sumOutAccountDocumentLedger(ledger) PERSISTENT;

GROUP ledgerItemGroup 'Суммы по товару' : publicGroup;
sumItemIncAccountDocumentLedger 'Сумма прихода, товар' (ledger) = ABSTRACT NUMERIC[16,2] (incAccountDocumentLedger) PERSISTENT IN ledgerItemGroup;
sumItemOutAccountDocumentLedger 'Сумма расхода, товар' (ledger) = ABSTRACT NUMERIC[16,2] (outAccountDocumentLedger) PERSISTENT IN ledgerItemGroup;
sumItemAccountDocumentLedger 'Сумма, товар' (ledger) = UNION EXCLUSIVE sumItemIncAccountDocumentLedger(ledger), -sumItemOutAccountDocumentLedger(ledger) PERSISTENT;

GROUP ledgerContainerGroup 'Суммы по таре' : publicGroup;
sumContainerIncAccountDocumentLedger 'Сумма прихода, тара' (ledger) = ABSTRACT NUMERIC[16,2] (incAccountDocumentLedger) PERSISTENT IN ledgerContainerGroup;
sumContainerOutAccountDocumentLedger 'Сумма расхода, тара' (ledger) = ABSTRACT NUMERIC[16,2] (outAccountDocumentLedger) PERSISTENT IN ledgerContainerGroup;
sumContainerAccountDocumentLedger 'Сумма, тара' (ledger) = UNION EXCLUSIVE sumContainerIncAccountDocumentLedger(ledger), -sumContainerOutAccountDocumentLedger(ledger) PERSISTENT;

// -------------------------------------- Агрегированные суммы за интервал --------------------------------------------- //

countIncAccountDocumentDepartmentStoreDateInterval 'Количество приходных док-ов' (departmentStore, dtFrom, dtTo)=
    GROUP SUM 1 IF incAccountDocumentLedger AS incAccountDocumentLedger AND isPostedAccountDocumentLedger(incAccountDocumentLedger)
        AND dateAccountDocumentLedger(incAccountDocumentLedger) >= (dtFrom AS DATE) AND dateAccountDocumentLedger(incAccountDocumentLedger) <= (dtTo AS DATE)
            BY departmentStoreAccountDocumentLedger(incAccountDocumentLedger), dtFrom, dtTo IN ledgerGroup;

countOutAccountDocumentDepartmentStoreDateInterval 'Количество расходных док-ов' (departmentStore, dtFrom, dtTo)=
    GROUP SUM 1 IF outAccountDocumentLedger AS outAccountDocumentLedger AND isPostedAccountDocumentLedger(outAccountDocumentLedger)
        AND dateAccountDocumentLedger(outAccountDocumentLedger) >= (dtFrom AS DATE) AND dateAccountDocumentLedger(outAccountDocumentLedger) <= (dtTo AS DATE)
            BY departmentStoreAccountDocumentLedger(outAccountDocumentLedger), dtFrom, dtTo IN ledgerGroup;


sumItemIncAccountDocumentDepartmentStoreDateInterval 'Сумма прихода, товар' (departmentStore, dtFrom, dtTo)=
    GROUP SUM sumItemIncAccountDocumentLedger(incAccountDocumentLedger)  AND isPostedAccountDocumentLedger(incAccountDocumentLedger)
        AND dateAccountDocumentLedger(incAccountDocumentLedger) >= (dtFrom AS DATE) AND dateAccountDocumentLedger(incAccountDocumentLedger) <= (dtTo AS DATE)
            BY departmentStoreAccountDocumentLedger(incAccountDocumentLedger), dtFrom, dtTo IN ledgerItemGroup;

sumItemOutAccountDocumentDepartmentStoreDateInterval 'Сумма расхода, товар' (departmentStore, dtFrom, dtTo)=
    GROUP SUM sumItemOutAccountDocumentLedger(outAccountDocumentLedger) AND isPostedAccountDocumentLedger(outAccountDocumentLedger)
        AND dateAccountDocumentLedger(outAccountDocumentLedger) >= (dtFrom AS DATE) AND dateAccountDocumentLedger(outAccountDocumentLedger) <= (dtTo AS DATE)
            BY departmentStoreAccountDocumentLedger(outAccountDocumentLedger), dtFrom, dtTo IN ledgerItemGroup;


sumContainerIncAccountDocumentDepartmentStoreDateInterval 'Сумма прихода, тара' (departmentStore, dtFrom, dtTo)=
    GROUP SUM sumContainerIncAccountDocumentLedger(incAccountDocumentLedger) AND isPostedAccountDocumentLedger(incAccountDocumentLedger)
        AND dateAccountDocumentLedger(incAccountDocumentLedger) >= (dtFrom AS DATE) AND dateAccountDocumentLedger(incAccountDocumentLedger) <= (dtTo AS DATE)
            BY departmentStoreAccountDocumentLedger(incAccountDocumentLedger), dtFrom, dtTo IN ledgerContainerGroup;

sumContainerOutAccountDocumentDepartmentStoreDateInterval 'Сумма расхода, тара' (departmentStore, dtFrom, dtTo)=
    GROUP SUM sumContainerOutAccountDocumentLedger(outAccountDocumentLedger) AND isPostedAccountDocumentLedger(outAccountDocumentLedger)
        AND dateAccountDocumentLedger(outAccountDocumentLedger) >= (dtFrom AS DATE) AND dateAccountDocumentLedger(outAccountDocumentLedger) <= (dtTo AS DATE)
            BY departmentStoreAccountDocumentLedger(outAccountDocumentLedger), dtFrom, dtTo IN ledgerContainerGroup;

// -------------------------------------- Остатки по суммам --------------------------------------------- //

currentSumAccountDocumentLedger 'Текущий остаток по документам' (departmentStore) = GROUP SUM sumAccountDocumentLedger (ledger) AND isPostedAccountDocumentLedger(ledger)
                                                                                           BY departmentStoreAccountDocumentLedger(ledger) PERSISTENT;

sumAccountBDocumentLedgerDateTime 'Остаток на начало' (departmentStore, dateTime) = UNION SUM currentSumAccountDocumentLedger(departmentStore) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM sumAccountDocumentLedger (ledger) AND dateTimeAccountDocumentLedger(ledger) >= (dateTime AS DATETIME) AND isPostedAccountDocumentLedger(ledger)
                                                                         BY departmentStoreAccountDocumentLedger(ledger), dateTime](departmentStore, dateTime);

sumAccountADocumentLedgerDateTime 'Остаток на конец' (departmentStore, dateTime) = UNION SUM currentSumAccountDocumentLedger(departmentStore) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM sumAccountDocumentLedger (ledger) AND dateTimeAccountDocumentLedger(ledger) > (dateTime AS DATETIME) AND isPostedAccountDocumentLedger(ledger)
                                                                         BY departmentStoreAccountDocumentLedger(ledger), dateTime](departmentStore, dateTime);

sumAccountBDocumentLedgerDate 'Остаток на начало' (departmentStore, date) = UNION SUM currentSumAccountDocumentLedger(departmentStore) AND date IS DATE,
                                                                            -[GROUP SUM sumAccountDocumentLedger (ledger) AND dateAccountDocumentLedger(ledger) >= (date AS DATE) AND isPostedAccountDocumentLedger(ledger)
                                                                            BY departmentStoreAccountDocumentLedger(ledger), date](departmentStore, date) IN ledgerGroup;

sumAccountADocumentLedgerDate 'Остаток на конец' (departmentStore, date) = UNION SUM currentSumAccountDocumentLedger(departmentStore) AND date IS DATE,
                                                                           -[GROUP SUM sumAccountDocumentLedger (ledger) AND dateAccountDocumentLedger(ledger) > (date AS DATE) AND isPostedAccountDocumentLedger(ledger)
                                                                           BY departmentStoreAccountDocumentLedger(ledger), date](departmentStore, date) IN ledgerGroup;

// -------------------------------------- Остатки по суммам (товар) --------------------------------------------- //

currentSumItemAccountDocumentLedger 'Текущий остаток по документам, товар' (departmentStore) = GROUP SUM sumItemAccountDocumentLedger (ledger) AND isPostedAccountDocumentLedger(ledger)
                                                                                           BY departmentStoreAccountDocumentLedger(ledger) PERSISTENT;

sumItemAccountBDocumentLedgerDateTime 'Остаток на начало, товар' (departmentStore, dateTime) = UNION SUM currentSumItemAccountDocumentLedger(departmentStore) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM sumItemAccountDocumentLedger (ledger) AND dateTimeAccountDocumentLedger(ledger) >= (dateTime AS DATETIME) AND isPostedAccountDocumentLedger(ledger)
                                                                         BY departmentStoreAccountDocumentLedger(ledger), dateTime](departmentStore, dateTime);

sumItemAccountADocumentLedgerDateTime 'Остаток на конец, товар' (departmentStore, dateTime) = UNION SUM currentSumItemAccountDocumentLedger(departmentStore) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM sumItemAccountDocumentLedger (ledger) AND dateTimeAccountDocumentLedger(ledger) > (dateTime AS DATETIME) AND isPostedAccountDocumentLedger(ledger)
                                                                         BY departmentStoreAccountDocumentLedger(ledger), dateTime](departmentStore, dateTime);

sumItemAccountBDocumentLedgerDate 'Остаток на начало, товар' (departmentStore, date) = UNION SUM currentSumItemAccountDocumentLedger(departmentStore) AND date IS DATE,
                                                                            -[GROUP SUM sumItemAccountDocumentLedger (ledger) AND dateAccountDocumentLedger(ledger) >= (date AS DATE) AND isPostedAccountDocumentLedger(ledger)
                                                                            BY departmentStoreAccountDocumentLedger(ledger), date](departmentStore, date) IN ledgerItemGroup;

sumItemAccountADocumentLedgerDate 'Остаток на конец, товар' (departmentStore, date) = UNION SUM currentSumItemAccountDocumentLedger(departmentStore) AND date IS DATE,
                                                                           -[GROUP SUM sumItemAccountDocumentLedger (ledger) AND dateAccountDocumentLedger(ledger) > (date AS DATE) AND isPostedAccountDocumentLedger(ledger)
                                                                           BY departmentStoreAccountDocumentLedger(ledger), date](departmentStore, date) IN ledgerItemGroup;

// -------------------------------------- Остатки по суммам (тара) --------------------------------------------- //

currentSumContainerAccountDocumentLedger 'Текущий остаток по документам, тара' (departmentStore) = GROUP SUM sumContainerAccountDocumentLedger (ledger) AND isPostedAccountDocumentLedger(ledger)
                                                                                           BY departmentStoreAccountDocumentLedger(ledger) PERSISTENT;
sumContainerAccountBDocumentLedgerDateTime 'Остаток на начало, тара' (departmentStore, dateTime) = UNION SUM currentSumContainerAccountDocumentLedger(departmentStore) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM sumContainerAccountDocumentLedger (ledger) AND dateTimeAccountDocumentLedger(ledger) >= (dateTime AS DATETIME) AND isPostedAccountDocumentLedger(ledger)
                                                                         BY departmentStoreAccountDocumentLedger(ledger), dateTime](departmentStore, dateTime);

sumContainerAccountADocumentLedgerDateTime 'Остаток на конец, тара' (departmentStore, dateTime) = UNION SUM currentSumContainerAccountDocumentLedger(departmentStore) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM sumContainerAccountDocumentLedger (ledger) AND dateTimeAccountDocumentLedger(ledger) > (dateTime AS DATETIME) AND isPostedAccountDocumentLedger(ledger)
                                                                         BY departmentStoreAccountDocumentLedger(ledger), dateTime](departmentStore, dateTime);

sumContainerAccountBDocumentLedgerDate 'Остаток на начало, тара' (departmentStore, date) = UNION SUM currentSumContainerAccountDocumentLedger(departmentStore) AND date IS DATE,
                                                                            -[GROUP SUM sumContainerAccountDocumentLedger (ledger) AND dateAccountDocumentLedger(ledger) >= (date AS DATE) AND isPostedAccountDocumentLedger(ledger)
                                                                            BY departmentStoreAccountDocumentLedger(ledger), date](departmentStore, date) IN ledgerContainerGroup;

sumContainerAccountADocumentLedgerDate 'Остаток на конец, тара' (departmentStore, date) = UNION SUM currentSumContainerAccountDocumentLedger(departmentStore) AND date IS DATE,
                                                                           -[GROUP SUM sumContainerAccountDocumentLedger (ledger) AND dateAccountDocumentLedger(ledger) > (date AS DATE) AND isPostedAccountDocumentLedger(ledger)
                                                                           BY departmentStoreAccountDocumentLedger(ledger), date](departmentStore, date) IN ledgerContainerGroup;

// -------------------------------------- Подитоги --------------------------------------------- //

subtotalItemIncAccountDocumentDepartmentStoreDateInterval 'Итого с остатком, товар' (departmentStore, dtFrom, dtTo) = UNION SUM
    sumItemAccountBDocumentLedgerDate(departmentStore, dtFrom) AND dtTo AS DATE,
    sumItemIncAccountDocumentDepartmentStoreDateInterval(departmentStore, dtFrom, dtTo) IN ledgerItemGroup;

subtotalContainerIncAccountDocumentDepartmentStoreDateInterval 'Итого с остатком, тара' (departmentStore, dtFrom, dtTo) = UNION SUM
    sumContainerAccountBDocumentLedgerDate(departmentStore, dtFrom) AND dtTo AS DATE,
    sumContainerIncAccountDocumentDepartmentStoreDateInterval(departmentStore, dtFrom, dtTo) IN ledgerContainerGroup;


// ------------------------------------------- Ответственные лица --------------------------------------------- //

MRPDepartmentStore 'Материально ответственное лицо, подписывающее товарный отчет (ИД)' = DATA employee (departmentStore);
nameMRPDepartmentStore 'Материально ответственное лицо, подписывающее товарный отчет' (departmentStore) =
    commonName (MRPDepartmentStore(departmentStore));
namePositionMRPDepartmentStore 'Материально ответственное лицо, подписывающее товарный отчет (должность)' =
    namePositionEmployee(MRPDepartmentStore(departmentStore));
CONSTRAINT MRPDepartmentStore(departmentStore) AND NOT inEmployeeDivisionEmployee(departmentStore, MRPDepartmentStore(departmentStore))
    CHECKED BY MRPDepartmentStore MESSAGE 'МОЛ не сотрудник отдела';

bookkeeperDepartmentStore 'Бухгалтер, принимающий товарный отчет (ИД)' = DATA employee (departmentStore);
nameBookkeeperDepartmentStore 'Бухгалтер, принимающий товарный отчет' (departmentStore) = commonName(bookkeeperDepartmentStore(departmentStore));
namePositionBookkeeperDepartmentStore 'Бухгалтер, принимающий товарный отчет (должность)' =
    namePositionEmployee(bookkeeperDepartmentStore(departmentStore));
CONSTRAINT bookkeeperDepartmentStore(departmentStore) AND NOT inEmployeeDivisionEmployee(departmentStore, bookkeeperDepartmentStore(departmentStore))
    CHECKED BY bookkeeperDepartmentStore MESSAGE 'Бухгалтер не сотрудник отдела';

personCheckDepartmentStore 'Кто проверяет товарный отчет (ИД)' = DATA employee (departmentStore);
namePersonCheckDepartmentStore 'Кто проверяет товарный отчет' (departmentStore) = commonName(personCheckDepartmentStore(departmentStore));
namePositionPersonCheckDepartmentStore 'Кто проверяет товарный отчет (должность)' =
    namePositionEmployee(personCheckDepartmentStore(departmentStore));
CONSTRAINT personCheckDepartmentStore(departmentStore) AND NOT inEmployeeDivisionEmployee(departmentStore, personCheckDepartmentStore(departmentStore))
    CHECKED BY personCheckDepartmentStore MESSAGE 'Проверяющий не сотрудник отдела';

EXTEND FORM departmentStore
    PROPERTIES(d)   nameMRPDepartmentStore, nameBookkeeperDepartmentStore, namePersonCheckDepartmentStore //namePositionMRPDepartmentStore, namePositionBookkeeperDepartmentStore, namePositionPersonCheckDepartmentStore
;

// -------------------------------------- Формы --------------------------------------------- //

FORM sumAccountDocumentLedger 'Товарный отчет'
    OBJECTS params = (dtFrom = DATE, dtTo = DATE) FIXED PANEL,
            ds = departmentStore FIXED PANEL
    PROPERTIES objFrom = OBJVALUE(dtFrom), objTo = OBJVALUE(dtTo)
    PROPERTIES(ds) SELECTOR name, nameStoreDepartmentStore, nameCompanyDepartmentStore, UNPDepartmentStore,
    nameMRPDepartmentStore, namePositionMRPDepartmentStore, nameBookkeeperDepartmentStore,
    namePositionBookkeeperDepartmentStore, namePersonCheckDepartmentStore, namePositionPersonCheckDepartmentStore

    PROPERTIES sumAccountBDocumentLedgerDate(ds, dtFrom), sumItemAccountBDocumentLedgerDate(ds, dtFrom), sumContainerAccountBDocumentLedgerDate(ds, dtFrom),
               sumItemAccountADocumentLedgerDate(ds, dtTo), sumContainerAccountADocumentLedgerDate(ds, dtTo), sumAccountADocumentLedgerDate(ds, dtTo)
    PROPERTIES(ds, dtFrom, dtTo) countIncAccountDocumentDepartmentStoreDateInterval, countOutAccountDocumentDepartmentStoreDateInterval,
               sumItemIncAccountDocumentDepartmentStoreDateInterval, sumContainerIncAccountDocumentDepartmentStoreDateInterval,
               subtotalItemIncAccountDocumentDepartmentStoreDateInterval, subtotalContainerIncAccountDocumentDepartmentStoreDateInterval,
               sumItemOutAccountDocumentDepartmentStoreDateInterval, sumContainerOutAccountDocumentDepartmentStoreDateInterval

    OBJECTS il = incAccountDocumentLedger
    PROPERTIES(il) SELECTOR iDateTime = dateTimeAccountDocumentLedger, iObjName = objectClassName, iDescription = descriptionAccountDocumentLedger,
                   sumItemIncAccountDocumentLedger, sumContainerIncAccountDocumentLedger, sumIncAccountDocumentLedger
    FILTERS isPostedAccountDocumentLedger(il),
            departmentStoreAccountDocumentLedger(il) == ds,
            dateAccountDocumentLedger(il) >= dtFrom,
            dateAccountDocumentLedger(il) <= dtTo
    ORDER BY iDateTime

    OBJECTS ol = outAccountDocumentLedger
    PROPERTIES(ol) SELECTOR oDateTime = dateTimeAccountDocumentLedger, oObjName = objectClassName, oDescription = descriptionAccountDocumentLedger,
                   sumItemOutAccountDocumentLedger, sumContainerOutAccountDocumentLedger, sumOutAccountDocumentLedger
    FILTERS isPostedAccountDocumentLedger(ol),
            departmentStoreAccountDocumentLedger(ol) == ds,
            dateAccountDocumentLedger(ol) >= dtFrom,
            dateAccountDocumentLedger(ol) <= dtTo
    ORDER BY oDateTime
;


DESIGN sumAccountDocumentLedger FROM DEFAULT {
    NEW row{
        childConstraints = TO THE RIGHT;
        title = 'Комиссия';
        NEW row1 {
            title = 'МОЛ';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY (nameMRPDepartmentStore(ds)){
                caption = 'Имя';
            }
            ADD PROPERTY (namePositionMRPDepartmentStore(ds)){
                caption = 'Должность';
            }
        }
        NEW row2 {
            title = 'Проверяющий';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY (namePersonCheckDepartmentStore(ds)){
                caption = 'Имя';
            }
            ADD PROPERTY (namePositionPersonCheckDepartmentStore(ds)){
                caption = 'Должность';
            }
        }
        NEW row3{
            title = 'Бухгалтер';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY (nameBookkeeperDepartmentStore(ds)){
                caption = 'Имя';
            }
            ADD PROPERTY (namePositionBookkeeperDepartmentStore(ds)){
                caption = 'Должность';
            }
        }
    }

    NEW HeaderCase BEFORE row{
        title = 'Суммы';
        childConstraints = TO THE RIGHT;
        ADD ds.ledgerItemGroup;
        ADD ds.ledgerContainerGroup;
        ADD ds.ledgerGroup;
    }

    NEW OneCase BEFORE HeaderCase{
         childConstraints = TO THE BOTTOM;
         NEW container11 {
            childConstraints = TO THE RIGHT;
            NEW dateCase {
                title = 'Даты';
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(objFrom) {
                    caption = 'Дата (с)';
                }
                ADD PROPERTY(objTo) {
                    caption = 'Дата (по)';
                }
            }
            NEW departmentCase {
                title = 'Отдел';
                ADD PROPERTY (name(ds)) {
                    caption = 'Название';
                };
            }
         }
         NEW container12 {
            title = 'Организация';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY (nameCompanyDepartmentStore(ds));
            ADD PROPERTY (nameStoreDepartmentStore(ds));
            ADD PROPERTY (UNPDepartmentStore(ds));
         }
    }

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD il.box;
        ADD ol.box;
    }

    ADD functions.box;
}

// ------------------------------------------ Макросы ----------------------------------------------------- //
META implementAccountDocumentLedger (concrete)
    dateTimeAccountDocumentLedger (ledger) += dateTime###concrete(ledger);
    isPostedAccountDocumentLedger (ledger) += isPosted###concrete(ledger);
    departmentStoreAccountDocumentLedger (ledger) += departmentStore###concrete(ledger);
    descriptionAccountDocumentLedger (ledger) += description###concrete(ledger);
END

