MODULE Roman;

REQUIRE System, RomanLogicsModule;

CLASS supplierAndDocument 'Поставщик и документ' : supplier, document;
CLASS namedDocument : named, supplierAndDocument;

GROUP NewGroup '\'Новая группа\'';
GROUP NewGroup2 'new group 2' : baseGroup;

// DProps
typeInvoiceDataFreightArticle2 = DATA typeInvoice (freight, article) IN idGroup;
rateExchange2(type, currency, date) = DATA DOUBLE (typeExchange, currency, DATE);
nameOrigin2 = DATA ISTRING[50] (secondNameClass) IN baseGroup;
quantityPalletShipment2 = DATA INTEGER (shipment) IN baseGroup;
typeExchangeSTX2 =  DATA typeExchange () IN idGroup;
somePropertyName = DATA supplierAndDocument (namedDocument) IN NewGroup2;
mainCompositionFreightSku2(freight, sku) = DATA STRING[200] (freight, sku) IN baseGroup;


// JProps
nameCurrencyTypeExchange2(typeExchange) = name(currencyTypeExchange(typeExchange)) IN baseGroup;
nameTypeExchangeSTX2() = name(typeExchangeSTX()) IN NewGroup2;
equalsItemArticleComposite2(item1, item2) = (articleCompositeItem(item1) == item2) IN baseGroup;
numberListSIDArticle2(list, doc) = numberListArticle(list, articleSIDList(doc, list));
netWeightArticleSizeSku2(item) = netWeightArticleSize(articleSku(item), sizeSupplierItem(item)) IN intraAttributeGroup PERSISTENT;
orderedOrderInvoiceArticle2(order, invoice, param3) = and1(quantityListArticle(order, param3), inOrderInvoice(order, invoice));

// JProps without params
nameCurrencyTypeExchange3 = name(currencyTypeExchange($1)) IN baseGroup;
nameTypeExchangeSTX3 = name(typeExchangeSTX()) IN baseGroup;
numberListSIDArticle3 = numberListArticle($1, articleSIDList($2, $1));
netWeightArticleSizeSku3 = netWeightArticleSize(articleSku($1), sizeSupplierItem($1)) IN intraAttributeGroup PERSISTENT;
grossWeightFreightSkuAggr2 = sumGrossWeightFreightSku($1, $2) / quantityFreightSku($1, $2) IN baseGroup;
priceExpenseImporterFreightSku2 = priceInImporterFreightSku($1, $2, $3) + priceFreightImporterFreightSku($1, $2, $3) IN baseGroup;


// GProp
numberDocumentArticle2 = GROUP SUM numberListArticle(param1, param2) BY documentList(param1), param2 IN baseGroup;
orderedInvoiceArticle2(invoice, param3) = GROUP SUM orderedOrderInvoiceArticle2(order, invoice, param3) BY invoice, param3 IN baseGroup;
invoicedOrderArticle2 = GROUP SUM invoicedOrderSku($1, $2) BY $1, articleSku($2) IN baseGroup;
//compositionFreightArticleCompositionCountryCategory2 =
//    GROUP MAX mainCompositionFreightSku2(freight, sku) BY
//        freight,
//        articleSku(sku),
//        mainCompositionOriginFreightSku(freight, sku),
//        countryOfOriginFreightSku(freight, sku),
//        customCategory10FreightSku(freight, sku) IN baseGroup;


// UProp
typeInvoiceFreightArticle2(freight, article) = UNION OVERRIDE typeInvoiceCategoryFreightArticle(freight, article), typeInvoiceDataFreightArticle(freight, article) IN idGroup;
typeInvoiceFreightArticle3 = UNION OVERRIDE typeInvoiceCategoryFreightArticle($1, $2), typeInvoiceDataFreightArticle($1, $2) IN idGroup;
sumSku2 = UNION SUM sumStockedSku($1), sumDirectInvoicedSku($1) IN baseGroup;


// Nested
netWeightImporterFreightUnitSku2(freight, unit, sku) =
    quantityImporterStockSku(freight, unit, sku) * netWeightFreightSku(freightFreightUnit(unit), sku) IN baseGroup;
invoicedShipmentSku2 = GROUP SUM quantityDocumentSku(document, sku) AND inInvoiceShipment(document, shipment) BY shipment, sku IN baseGroup PERSISTENT;


// Constants
diffCountRelationCustomCategory10Sku2(sku) = countRelationCustomCategory10(customCategory10Sku(sku)) > 1.0;
oneShipmentSku2(shipment, sku) = quantityShipmentSku(shipment, sku) == 1.0;

// IS, IF
isArticle(object) = IS article;
typeInvoiceCategoryFreightArticle2(freight, article) = typeInvoiceCategoryArticle(article) AND freight IS RomanLogicsModule.freight IN idGroup;
testProp2 = between(date($1), $2 AS DATE, $3 AS DATE);
substring10s13 = substring10($1) IF $1 IS STRING[13];

// AND
testProp3(invoice, sku) = sumDocumentSku(invoice, sku) IF invoice IS directInvoice AND NOT freightShippedDirectInvoice(invoice);
invoicedSimpleInvoiceSimpleShipmentStockSku2(invoice, shipment, st, sku) =
    quantityDocumentSku(invoice, sku) IF
        inInvoiceShipment(invoice, shipment) AND
        invoice IS simpleInvoice AND
        shipment IS simpleShipment AND
        st IS stock;


// Forms
FORM ContractForm2 'ContractForm2'
OBJECTS seller, contract
PROPERTIES OBJVALUE(seller), SELECTION(seller), name(seller), objectClassName(seller),
           sidContract(contract), dateContract(contract), nameSubjectContract(contract), nameCurrencyContract(contract);

FORM rateCurrency2 'Обмен валют'
OBJECTS
    typeExchange INIT PANEL, currency INIT GRID, exchangeDate=DATE FIXED PANEL, exchangeDateRate=DATE
PROPERTIES
//    objectValue(typeExchange), objectValue(exchangeDate), objectValue(exchangeDateRate),
    name(typeExchange), name(currency), nameCurrencyTypeExchange(typeExchange),
    rateExchange(typeExchange, currency, exchangeDate),
    rateExchange(typeExchange, currency, exchangeDateRate)
FILTERS
    rateExchange(typeExchange, currency, exchangeDateRate);


