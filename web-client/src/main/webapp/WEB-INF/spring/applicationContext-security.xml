<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns="http://www.springframework.org/schema/security"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:b="http://www.springframework.org/schema/beans"
         xmlns:config="http://www.springframework.org/schema/context"
         xmlns:aop="http://www.springframework.org/schema/aop"
         xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                                 http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
                                 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                                 http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <config:annotation-config />

    <!-- API security-->
    <!-- API doesn't need to redirect to login.jsp and the real authentication process is on app server-->
    <!-- unlike ant matcher, regex respects ? so we need this odd regex-->
    <!-- we're trying to avoid creating sessions (it's important for REST requests, otherwise session will be created every time with authenticated request) -->
    <http request-matcher="regex" pattern="^/(exec|eval|eval/action)($|\?.*)" create-session="never">
        <http-basic/>
        <csrf disabled="true"/>
    </http>
    <!-- we need to show login.jsp -->
    <http pattern="/login.css" security="none"/>
    <!-- because we want to have logo even if app server is unavailable, that's why logo.png is on web-server, and it has to be shown before user is authenticated -->
    <http pattern="/images/logo.png" security="none"/>
    <!-- we need to download logo and icon -->
    <http pattern="/downloadFile" security="none"/>
    <!-- UI security -->
    <http entry-point-ref="entryPoint">
        <intercept-url pattern="/**" access="isAuthenticated()"/>

        <form-login login-page="/login" login-processing-url="/login_check" authentication-success-handler-ref="successLoginHandler" authentication-failure-handler-ref="failureLoginHandler"/>
        <logout logout-url="/logout" invalidate-session="false" success-handler-ref="successLogoutHandler"/> <!-- no invalidating session to give user opportunity to relogin, when another tab is opened-->
        
        <csrf disabled="true"/>

        <custom-filter ref="characterEncodingFilter" before="FORM_LOGIN_FILTER"/>
    </http>

    <!-- Security beans -->
    
    <b:bean id="characterEncodingFilter" class="org.springframework.web.filter.CharacterEncodingFilter">
        <b:property name="encoding" value="UTF-8"/>
        <b:property name="forceEncoding" value="true"/>
    </b:bean>

    <b:bean id="entryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <b:constructor-arg value="/login"/>
        <b:property name="useForward" value="true"/>
    </b:bean>

    <b:bean id="successLoginHandler" class="lsfusion.http.LSFSimpleUrlAuthenticationSuccessHandler"/>
    <b:bean id="failureLoginHandler" class="lsfusion.http.LSFSimpleUrlAuthenticationFailureHandler"/>

    <b:bean id="successLogoutHandler" class="lsfusion.http.LSFSimpleUrlLogoutSuccessHandler" >
    </b:bean>

    <!-- Authentication configuration -->
    
    <authentication-manager>
        <authentication-provider ref="authenticationProvider"/>
    </authentication-manager>

    <b:bean id="authenticationProvider" class="lsfusion.http.LSFRemoteAuthenticationProvider"/>

    <!-- lsFusion beans -->

    <!-- GWT request handler -->
    <b:bean id="mainDispatch" class="lsfusion.gwt.server.MainDispatchServlet"/>

    <!-- Beans need for GWT request handler, bean names are actually not used (except logicsProvider, autowiring can find name with its interface, there is no intersection of this interfaces) -->

    <!-- the name of that bean is used in main.jsp and login.jsp-->
    <b:bean id="logicsProvider" class="lsfusion.http.provider.logics.LogicsProviderImpl" />

    <b:bean id="logicsAndNavigatorProvider" scope="session" class="lsfusion.http.provider.navigator.NavigatorProviderImpl">
        <aop:scoped-proxy proxy-target-class="false" />
    </b:bean>

    <b:bean id="sessionProvider" scope="session" class="lsfusion.http.provider.session.SessionProviderImpl">
        <aop:scoped-proxy proxy-target-class="false" />
    </b:bean>

    <b:bean id="formProvider" scope="session" class="lsfusion.http.provider.form.FormProviderImpl">
        <aop:scoped-proxy proxy-target-class="false" />
    </b:bean>

    <!-- Custom request handlers -->

    <b:bean id="fileUploadHandler" class="lsfusion.http.UploadFileRequestHandler" />

    <b:bean id="fileDownloadHandler" class="lsfusion.http.DownloadFileRequestHandler" />

    <b:bean id="jnlpHandler" class="lsfusion.http.ClientJNLPRequestHandler" />

    <b:bean id="externalHandler" class="lsfusion.http.ExternalRequestHandler"/>

</b:beans>