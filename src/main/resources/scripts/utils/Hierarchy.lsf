MODULE Hierarchy;

META defineHierarchy(object)
    @defineHierarchy(object, ###object);
END

META defineHierarchyAbstract(object)
    @defineHierarchyAbstract(object, ###object);
END

META defineHierarchy (object, class)
    parent###object = DATA class (class) AUTOSET;
    @defineHierarchyCustom(object, class);
END

META defineHierarchyAbstract (object, class)
    parent###object = ABSTRACT class (class) PERSISTENT;
    @defineHierarchyCustom(object, class);
END

META defineHierarchyCustom (object, class)
    nameParent###object 'Родительский объект' = name###object(parent###object(object)) IN base;

    level###object###object 'Уровень' (child, parent) = RECURSION 1l IF child IS class AND parent == child
                                                                  STEP 2l IF parent == parent###object($parent) PERSISTENT;

    object###object##Level (child, level) = GROUP MAX parent IF level == level###object###object(child, parent)
                                                   BY child, level;

    level###object 'Уровень' (child) = GROUP SUM 1 IF level###object###object(child, parent) BY child;

    levelRoot###object###object 'Уровень' (child, parent) = PARTITION SUM 1 IF level###object###object(child, parent)
                                                                      BY child
                                                                      ORDER DESC level###object###object(child, parent) PERSISTENT;
    object###object##LevelRoot (child, level) = GROUP NAGGR parent BY child, levelRoot###object###object(child, parent);  

    isParent###object###object 'Является потомком' (child, parent) = TRUE IF level###object###object(child, parent);

    childNumber###object 'Кол-во непосредственных потомков' (object) = GROUP SUM 1 BY parent###object(child) PERSISTENT;

    descendantNumber###object 'Кол-во всех потомков' (object) = GROUP SUM 1 IF isParent###object###object(child, parent) BY parent PERSISTENT;

    isLeaf###object 'Лист' (object) = object IS class AND NOT childNumber###object(object) PERSISTENT;

    isParentLeaf###object###object (child, parent) = isParent###object###object(child, parent) AND isLeaf###object(child);

    canonicalName###object 'Полное имя' (object) = VARSTRING[255](
                           [= GROUP CONCAT name###object(parent), ' / ' BY child ORDER DESC level###object###object(child, parent)](object))
                           MINCHARWIDTH 50 MAXCHARWIDTH 100 PREFCHARWIDTH 100 PERSISTENT;
END

META defineHierarchyPlain(object)
    object##1###object (child) = object###object##LevelRoot(child, 1) PERSISTENT;    
    object##2###object (child) = object###object##LevelRoot(child, 2) PERSISTENT;    
    object##3###object (child) = object###object##LevelRoot(child, 3) PERSISTENT;    
    object##4###object (child) = object###object##LevelRoot(child, 4) PERSISTENT;    
    object##5###object (child) = object###object##LevelRoot(child, 5) PERSISTENT;    
    object##6###object (child) = object###object##LevelRoot(child, 6) PERSISTENT;    
END

META defineHierarchyPlainOrder(object, property, prefixName, prefix)
    order###property###object 'Порядок (внутри группы)' (g) = PARTITION SUM 1 BY parent###object(g) ORDER property###object(g);
    canonicalOrder###property###object 'Порядок (полный)' (g) = GROUP CONCAT lpad(VARSTRING[3](order###property###object(parent)), 3, '0') , '.' BY child ORDER DESC level###object###object(child, parent);

    prefixName###object 'Наименование (со сдвигом)' (g) = VARSTRING[100](repeat(prefix, INTEGER(level###object(g))-1)) + name###object(g);
END