MODULE SQLUtils;

REQUIRE System, Authentication, Utils, Time;

CLASS ProcessType 'Фильтр процессов' {
    all 'Все',
    activeAll 'Все активные',
    activeSQL 'Активные (SQL)',
    activeJava 'Активные (Java)'
}

getActiveTasksAction 'Обновить список активных процессов' = ACTION CUSTOM 'lsfusion.erp.utils.GetActiveTasksActionProperty' () TOOLBAR;
getAllTasksAction 'Обновить список всех процессов' = ACTION CUSTOM 'lsfusion.erp.utils.GetAllTasksActionProperty' () TOOLBAR;
cancelActiveTaskAction 'Снять процесс' = ACTION CUSTOM 'lsfusion.erp.utils.CancelActiveTaskActionProperty' (INTEGER);
killActiveTaskAction 'Убить процесс' = ACTION CUSTOM 'lsfusion.erp.utils.KillActiveTaskActionProperty' (INTEGER);

previousCountActiveTask =  DATA LOCAL INTEGER();
idActiveTask 'ID процесса' = DATA LOCAL INTEGER (INTEGER);
queryActiveTask 'Запрос' = DATA LOCAL TEXT (INTEGER);
computerActiveTask 'Компьютер' = DATA LOCAL VARSTRING[100] (INTEGER);
userActiveTask 'Пользователь' = DATA LOCAL VARSTRING[100] (INTEGER);
addressUserActiveTask 'Адрес пользователя' = DATA LOCAL VARSTRING[100] (INTEGER);
dateTimeActiveTask 'Время запуска' = DATA LOCAL DATETIME (INTEGER);

FORM activeTasks 'Активные процессы'
    OBJECTS i = INTEGER
    PROPERTIES(i) READONLY idActiveTask, queryActiveTask, computerActiveTask, userActiveTask, addressUserActiveTask, dateTimeActiveTask
    PROPERTIES(i) TOOLBAR cancelActiveTaskAction, killActiveTaskAction
    PROPERTIES() getActiveTasksAction TOOLBAR TODRAW i, getAllTasksAction TOOLBAR TODRAW i
    FILTERS idActiveTask(i)
;

getActiveBlocksAction 'Обновить список блокировок' = ACTION CUSTOM 'lsfusion.erp.utils.GetActiveBlocksActionProperty' () TOOLBAR;

previousCountActiveBlock =  DATA LOCAL INTEGER();
processIdActiveBlock 'ID процесса блокировки' = DATA LOCAL INTEGER (INTEGER);
typeLockedObjectActiveBlock 'Тип заблокированного объекта' = DATA LOCAL VARSTRING[100] (INTEGER);
idLockedObjectActiveBlock 'ID заблокированного объекта' = DATA LOCAL VARSTRING[100] (INTEGER);
modeActiveBlock 'Уровень блокировки' = DATA LOCAL VARSTRING[100] (INTEGER);
grantedActiveBlock 'Granted' = DATA LOCAL BOOLEAN (INTEGER);

FORM activeBlocks 'Активные блокировки'
    OBJECTS i = INTEGER
    PROPERTIES(i) READONLY processIdActiveBlock, typeLockedObjectActiveBlock, idLockedObjectActiveBlock, modeActiveBlock, grantedActiveBlock
    PROPERTIES() getActiveBlocksAction TOOLBAR TODRAW i
    FILTERS processIdActiveBlock(i)
;

CLASS StateProcess 'Статус процесса' {
    active 'Active',
    idle 'Idle in transaction'
}

updateProcessMonitorAction 'Обновить монитор процессов' = ACTION CUSTOM 'lsfusion.erp.utils.UpdateProcessMonitorActionProperty' () TOOLBAR;
killJavaProcess 'Убить java-процесс' = ACTION CUSTOM 'lsfusion.erp.utils.KillJavaProcessActionProperty' (INTEGER);
killSQLProcess 'Убить SQL-процесс' = ACTION CUSTOM 'lsfusion.erp.utils.KillSQLProcessActionProperty' (INTEGER);
cancelJavaProcess 'Снять java-процесс' = ACTION CUSTOM 'lsfusion.erp.utils.CancelJavaProcessActionProperty' (INTEGER);
cancelSQLProcess 'Снять SQL-процесс' = ACTION CUSTOM 'lsfusion.erp.utils.CancelSQLProcessActionProperty' (INTEGER);

processType 'Фильтр процессов'= DATA LOCAL ProcessType();// ON CHANGE updateProcessMonitorAction();
nameProcessType 'Фильтр процессов' () = staticName(processType()) PREFCHARWIDTH 15;
captionProcessType 'Фильтр процессов' () = staticCaption(processType());
WHEN SESSION CHANGED (processType()) DO EXEC updateProcessMonitorAction(); //выполняется 3 раза
 
idThreadProcess 'ID потока процесса' = DATA LOCAL VARSTRING[10] (INTEGER);
computerProcess 'Компьютер' = DATA LOCAL VARSTRING[100] (INTEGER);
userProcess 'Пользователь' = DATA LOCAL VARSTRING[100] (INTEGER);

idSQLProcess 'ID процесса (SQL)' = DATA LOCAL INTEGER (INTEGER);
querySQLProcess 'Запрос (SQL)' = DATA LOCAL TEXT (INTEGER);
fullQuerySQLProcess 'Полный запрос (SQL)' = DATA LOCAL TEXT (INTEGER);
addressUserSQLProcess 'Адрес пользователя (SQL)' = DATA LOCAL VARSTRING[100] (INTEGER);
dateTimeSQLProcess 'Время запуска (SQL)' = DATA LOCAL DATETIME (INTEGER);
isActiveSQLProcess 'Активный (SQL)' = DATA BOOLEAN (INTEGER);
inTransactionSQLProcess 'В транзакции (SQL)' = DATA BOOLEAN (INTEGER);

lsfStackTraceProcess 'LSF след потока' = DATA LOCAL TEXT (INTEGER);

stackTraceJavaProcess 'След java-потока (Java)' = DATA LOCAL TEXT (INTEGER);
hasStackTraceJavaProcess (i) = stackTraceJavaProcess(i) AND i IS INTEGER;
nameJavaProcess 'Имя java-потока (Java)' = DATA LOCAL VARSTRING[100] (INTEGER);
statusJavaProcess 'Статус (Java)' = DATA LOCAL VARSTRING[100] (INTEGER);
lockNameJavaProcess 'Блокировка (Java)' = DATA LOCAL VARSTRING[100] (INTEGER);

lockOwnerIdProcess 'ID блокирующего потока' = DATA LOCAL VARSTRING[10] (INTEGER);
lockOwnerNameProcess 'Блокирующий поток' = DATA LOCAL VARSTRING[100] (INTEGER);
isDisabledNestLoopProcess 'Disabled nested loop' = DATA LOCAL BOOLEAN (INTEGER);
queryTimeoutProcess 'Query Timeout' = DATA LOCAL INTEGER (INTEGER);
   
processIdThread (id) = GROUP AGGR process BY idThreadProcess(process) WHERE process IS INTEGER;
threadOwnerProcess (i) = processIdThread(lockOwnerIdProcess(i));
                                                                                                                                                                                                                                                          
blockingProcess 'Уровень' (child, parent) = RECURSION 1l IF idThreadProcess(child) AND parent == child
                                                        STEP 1l IF parent == threadOwnerProcess($parent);                                                                                                                                                                                                                                                       
isBlockingProcess 'Блокируется' (child, parent) = TRUE IF blockingProcess(child, parent);
sumPlusOneBlockedProcess  (process) = GROUP SUM 1 IF isBlockingProcess(child, parent) BY parent;
sumBlockedProcess 'Кол-во заблокированных процессов' (process) = sumPlusOneBlockedProcess(process) - 1;
deadlockProcess (process) = GROUP SUM 1 IF isBlockingProcess(parent, child) AND statusJavaProcess(child) != 'BLOCKED' BY parent;
isDeadlockProcess 'Deadlock' (process) = NOT deadlockProcess(process) AND process IS INTEGER;
sumPlusOneBlockingProcess 'Кол-во блокирующих процессов' (process) = GROUP SUM 1 IF isBlockingProcess(parent, child) BY parent;
sumBlockingProcess 'Глубина блокировки' (process) = sumPlusOneBlockingProcess(process) - 1;

activeSQLProcess (i) = querySQLProcess(i) AND isActiveSQLProcess(i);
activeJavaBlockingProcess (i) = statusJavaProcess(i) == 'RUNNABLE' AND hasStackTraceJavaProcess(i);
activeJavaProcess (i) = activeJavaBlockingProcess(i)
                                   AND NOT (startsWith(stackTraceJavaProcess(i), 'java.net.DualStackPlainSocketImpl') == 1)
                                   AND NOT (startsWith(stackTraceJavaProcess(i), 'sun.awt.windows.WToolkit.eventLoop') == 1)
                                   AND NOT (startsWith(stackTraceJavaProcess(i), 'java.net.SocketInputStream.socketRead0') == 1)
                                   AND NOT (startsWith(stackTraceJavaProcess(i), 'sun.management.ThreadImpl.dumpThreads0') == 1)
                                   AND NOT (startsWith(stackTraceJavaProcess(i), 'java.net.SocketOutputStream.socketWrite') == 1)                                        
                                   AND NOT (startsWith(stackTraceJavaProcess(i), 'java.net.PlainSocketImpl') == 1)
                                   AND NOT (startsWith(stackTraceJavaProcess(i), 'java.io.FileInputStream.readBytes') == 1)
                                   AND NOT (startsWith(stackTraceJavaProcess(i), 'java.lang.UNIXProcess.waitForProcessExit') == 1);
activeBlockingProcess 'Активный' (i) = activeSQLProcess(i) OR activeJavaBlockingProcess(i);
activeProcess 'Активный' (i) = activeSQLProcess(i) OR activeJavaProcess(i);

blockedProcess 'Заблокированный' (i) = statusJavaProcess(i) == 'BLOCKED' OR lockOwnerIdProcess(i);             

deltaDateTimeProcess(i) = subtractSeconds(dateTimeSQLProcess(i), currentDateTime());
sqlColorProcess(i) = CASE
                                    WHEN deltaDateTimeProcess(i) > 90 THEN RGB(255, 160, 0)
                                    WHEN deltaDateTimeProcess(i) > 80 THEN RGB(255, 255, 30)
                                    WHEN deltaDateTimeProcess(i) > 70 THEN RGB(255, 255, 60)
                                    WHEN deltaDateTimeProcess(i) > 60 THEN RGB(255, 255, 90)
                                    WHEN deltaDateTimeProcess(i) > 50 THEN RGB(255, 255, 120)
                                    WHEN deltaDateTimeProcess(i) > 40 THEN RGB(255, 255, 150)
                                    WHEN deltaDateTimeProcess(i) > 30 THEN RGB(255, 255, 180)
                                    WHEN deltaDateTimeProcess(i) > 20 THEN RGB(255, 255, 210)
                                    WHEN i IS INTEGER THEN RGB(255, 255, 240);
backgroundProcess(i) = IF isActiveSQLProcess(i) OR startsWith(idThreadProcess(i), 's') THEN sqlColorProcess(i) ELSE RGB(240, 255, 255);  
                   
cancelProcess 'Снять процесс' (i) = ACTION {
    IF idSQLProcess(i) THEN cancelSQLProcess(i) ELSE cancelJavaProcess(i);
    updateProcessMonitorAction();
}           
killProcess 'Убить процесс' (i) = ACTION { 
    IF isActiveSQLProcess(i) THEN killSQLProcess(i) ELSE killJavaProcess(i);
    updateProcessMonitorAction();
}
showExtraButtons(i) = idSQLProcess(i) AND NOT startsWith(idThreadProcess(i), 's');                             
FORM processMonitor 'Монитор процессов'
    OBJECTS i = INTEGER
    PROPERTIES(i) READONLY BACKGROUND backgroundProcess(i) activeProcess, idThreadProcess, computerProcess, userProcess,
                           querySQLProcess, dateTimeSQLProcess, isActiveSQLProcess, inTransactionSQLProcess, addressUserSQLProcess,
                           lsfStackTraceProcess, nameJavaProcess, statusJavaProcess, lockNameJavaProcess, stackTraceJavaProcess,
                           lockOwnerIdProcess, lockOwnerNameProcess, isDisabledNestLoopProcess, queryTimeoutProcess, idSQLProcess, fullQuerySQLProcess
    PROPERTIES(i) TOOLBAR cancelProcess, killProcess, cancelJavaProcess SHOWIF showExtraButtons(i), killJavaProcess SHOWIF showExtraButtons(i)                       
    FILTERS idThreadProcess(i)
    //FILTERGROUP active
    //    FILTER 'Все активные' activeProcess(i) DEFAULT
    //    FILTER 'Активные (Java)' activeJavaProcess(i)
    //    FILTER 'Активные (SQL)' activeSQLProcess(i)
    
    TREE blocking i2 = INTEGER PARENT threadOwnerProcess
    PROPERTIES(i2) READONLY BACKGROUND backgroundProcess(i2) sumBlockedProcess,
                            activeProcess, idThreadProcess, computerProcess, userProcess,
                            querySQLProcess, dateTimeSQLProcess, isActiveSQLProcess, inTransactionSQLProcess, addressUserSQLProcess,
                            lsfStackTraceProcess, nameJavaProcess, statusJavaProcess, lockNameJavaProcess, stackTraceJavaProcess,
                            lockOwnerIdProcess, lockOwnerNameProcess, isDisabledNestLoopProcess, queryTimeoutProcess, idSQLProcess, fullQuerySQLProcess
    PROPERTIES(i2) TOOLBAR cancelProcess, killProcess, cancelJavaProcess SHOWIF isActiveSQLProcess(i2), killJavaProcess SHOWIF isActiveSQLProcess(i2)  
    FILTERS idThreadProcess(i2), (activeBlockingProcess(i2) AND sumBlockedProcess(i2) > 0) OR (lockOwnerIdProcess(i2) AND lockOwnerIdProcess(i2) != '-1') 
    
    OBJECTS blocked = INTEGER, blocking = INTEGER
    PROPERTIES(blocked) READONLY idThreadProcess, isDeadlockProcess, 
                                 sumBlockingProcess, computerProcess, userProcess,
                                 querySQLProcess, dateTimeSQLProcess, isActiveSQLProcess, inTransactionSQLProcess,
                                 lsfStackTraceProcess, nameJavaProcess, statusJavaProcess, lockNameJavaProcess, stackTraceJavaProcess,
                                 lockOwnerIdProcess, lockOwnerNameProcess, isDisabledNestLoopProcess, queryTimeoutProcess, idSQLProcess, fullQuerySQLProcess
    PROPERTIES(blocking) READONLY activeProcess, idThreadProcess, sumBlockingProcess, computerProcess, userProcess,
                                 querySQLProcess, dateTimeSQLProcess, isActiveSQLProcess, inTransactionSQLProcess, addressUserSQLProcess,
                                 lsfStackTraceProcess, nameJavaProcess, statusJavaProcess, lockNameJavaProcess, stackTraceJavaProcess,
                                 lockOwnerIdProcess, lockOwnerNameProcess, isDisabledNestLoopProcess, queryTimeoutProcess, idSQLProcess, fullQuerySQLProcess
    PROPERTIES(blocking) TOOLBAR cancelProcess, killProcess, cancelJavaProcess SHOWIF isActiveSQLProcess(blocking), killJavaProcess SHOWIF isActiveSQLProcess(blocking)                                   
    FILTERS idThreadProcess(blocked), sumBlockingProcess(blocked) > 0, sumBlockedProcess(blocking) > 0, isBlockingProcess(blocked, blocking) AND blocked != blocking
    FILTERGROUP nonBlocking FILTER 'Только не блокирующие' sumBlockedProcess(blocked) == 0 OR isDeadlockProcess(blocked) DEFAULT 
    ORDER BY sumBlockingProcess(blocked) DESC, sumBlockingProcess(blocking) DESC
    
    PROPERTIES() captionProcessType, updateProcessMonitorAction
;

DESIGN processMonitor {
    NEW top {
        type = TABBED;
        fill = 1;
        NEW allProcesses {
            fill = 1;
            caption = 'Все процессы';
            MOVE i.box {
            caption = 'Процессы';
            }
        }
        NEW blockingProcesses {
            fill = 1;
            caption = 'Блокирующие';
            MOVE blocking.tree.box {
                caption = 'Блокирующие процессы';
            }
        }
        NEW blockedProcesses {
            fill = 1;
            caption = 'Блокированные';
            MOVE blocked.box {
                caption = 'Блокированные процессы';
            }
            MOVE blocking.box {
                caption = 'Блокирующие процессы';
            }
        }
    }    
    MOVE PROPERTY(captionProcessType());
    MOVE PROPERTY(updateProcessMonitorAction()) {
        align = TRAILING;
    }
    MOVE functions.box;
}

NAVIGATOR {
    systemEvents {
        ADD activeTasks;
        ADD activeBlocks;
        ADD processMonitor;
    }
}
