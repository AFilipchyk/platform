MODULE Utils;

REQUIRE System;

// --------------------------------------------- Стандартные группы --------------------------------- //

GROUP print 'Печатные формы' : public;

// --------------------------------------------- Работа со строками --------------------------------- //

stringEqualsAll(string) = string == STRING[3]('Все');

isWordInCSV = FORMULA INTEGER PG 'CASE WHEN CAST($1 AS text)=ANY(string_to_array($2,\',\')) THEN 1 ELSE NULL END' MS 'CASE WHEN CHARINDEX(\' \' + CAST($1 AS nvarchar(max)) + \' \',\' \' + REPLACE($2,\',\',\' \') + \' \') > 0 THEN 1 ELSE NULL END';

getWord = FORMULA '(string_to_array($1,$2))[($3)]';
wordCount = FORMULA 'array_length((string_to_array($1,$2)),1)';

istartsWith = FORMULA INTEGER PG 'CASE WHEN (($1) ILIKE (($2)||\'%\')) THEN 1 ELSE NULL END' MS 'CASE WHEN (($1) LIKE (($2)+\'%\')) THEN 1 ELSE NULL END';
startsWith = FORMULA INTEGER PG 'CASE WHEN (($1) LIKE (($2)||\'%\')) THEN 1 ELSE NULL END' MS 'CASE WHEN (($1) LIKE (($2)+\'%\')) THEN 1 ELSE NULL END';

// todo : для MS SQL пофиксить формулу, чтобы правильно работало, если в подстроке есть %
isISubstring = FORMULA INTEGER PG 'CASE WHEN position(lower($2) in lower($1)) > 0 THEN 1 ELSE NULL END' MS 'CASE WHEN (($1) LIKE (\'%\'+($2)+\'%\')) THEN 1 ELSE NULL END'; 
isSubstring = FORMULA INTEGER PG 'CASE WHEN position(($2) in ($1)) > 0 THEN 1 ELSE NULL END' MS 'CASE WHEN (($1) LIKE (\'%\'+($2)+\'%\')) THEN 1 ELSE NULL END';

replace = FORMULA TEXT 'replace($1,$2,$3)';

charLength = FORMULA INTEGER PG 'char_length($1)' MS 'len($1)';

substr = FORMULA TEXT 'substring($1, $2, $3)';
substrFrom = FORMULA TEXT 'substring($1, $2)'; 

ltrim = FORMULA TEXT 'ltrim($1)';
rtrim = FORMULA TEXT 'rtrim($1)';

ltrim = FORMULA TEXT 'ltrim($1,$2)';
rtrim = FORMULA TEXT 'rtrim($1,$2)';

left = FORMULA TEXT 'left($1,$2)';
right = FORMULA TEXT 'right($1,$2)';

lpad = FORMULA TEXT 'lpad($1,$2,$3)';
rpad = FORMULA TEXT 'rpad($1,$2,$3)';

// --------------------------------------------- Работа с числами --------------------------------- //

floor = FORMULA 'floor($1)';
ceil = FORMULA 'ceiling($1)';
ceil = FORMULA 'ceiling(($1)/($2))*($2)';
min = FORMULA '($1+$2-ABS($1-$2))/2';
max = FORMULA '($1+$2+ABS($1-$2))/2';

sqr = FORMULA '($1)*($1)';
sqrt = FORMULA 'sqrt($1)';
percent = FORMULA '(($1)*($2)/100)';
share = FORMULA '(($1)*100/($2))';
round = FORMULA PG 'round(CAST(($1) as numeric),$2)' MS 'round(CAST(($1) as numeric(38,19)),$2)';
delta = FORMULA 'abs(($1)-($2))';

divideInteger = FORMULA INTEGER PG 'CAST(CAST(trunc($1) AS integer)/CAST(trunc($2) as integer) as integer)' MS 'CAST(CAST($1 AS integer)/CAST($2 as integer) as integer)';
divideIntegerNeg = FORMULA INTEGER 'CASE WHEN CAST(($1) AS integer)<0 THEN -CAST(((-CAST(($1) as integer)-1)/CAST(($2) as integer)) as integer) ELSE CAST(CAST(($1) as integer)/CAST(($2) as integer) as integer) END';
divideIntegerRnd = FORMULA INTEGER 'CAST(round(($1)/($2),0) as integer)';

iterate(i, from, to) = RECURSION i==from AND from IS INTEGER AND to IS INTEGER STEP i==$i+1 AND i<=to CYCLES IMPOSSIBLE;
count(i, count) = iterate(i, 1, count);

toInteger (i) = FORMULA INTEGER PG 'convert_to_integer($1)' MS 'dbo.convert_to_integer($1)';

// --------------------------------------------- Округления --------------------------------- //
roundM1 (number) = round(number, -1);
round0 (number) = round(number, 0);
round1 (number) = round(number, 1);
round2 (number) = round(number, 2);
round3 (number) = round(number, 3);
round6 (number) = round(number, 6);

// --------------------------------------------- Yes/No --------------------------------- //
CLASS YesNo 'Логическое' {
    yes 'ДА',
    no 'НЕТ'
};

META defineHistorizableYesNo(property, defaultProperty, caption, object1, object1Identity, object2, object2Identity, group)
    @defineHistorizableCustomDefault(property, defaultProperty, caption, YesNo, staticCaption,
        object1, object1Identity, object2, object2Identity, 7, group);
END

META defineHistorizableYesNo(property, defaultProperty, caption, object1, object1Identity, object2, object2Identity, object3, object3Identity, group)
    @defineHistorizableCustomDefault(property, defaultProperty, caption, YesNo, staticCaption,
        object1, object1Identity, object2, object2Identity, object3, object3Identity, 7, group);
END

// --------------------------------------------- Диалоги --------------------------------- //

FORM dialogString 'Выбор строку'
    OBJECTS s = VARSTRING[200] FIXED PANEL
    PROPERTIES(s) objValue = OBJVALUE
;

DESIGN dialogString FROM DEFAULT {
    NEW string BEFORE functions.box {
        fill = 1;
        ADD PROPERTY (objValue) {
            fill = 1;
            caption = 'Введите строку';
            font = 'bold 64';
            panelLabelAbove = TRUE;
        }
    }
}

FORM dialogDate 'Выбор даты'
    OBJECTS d = DATE FIXED PANEL
    PROPERTIES(d) objValue = OBJVALUE
;

DESIGN dialogDate FROM DEFAULT {
    NEW date BEFORE functions.box {
        fill = 1;
        ADD PROPERTY (objValue) {
            fill = 1;
            caption = 'Введите дату';
            font = 'bold 64';
            panelLabelAbove = TRUE;
        }
    }

}

FORM dialogInteger 'Выбор числа'
    OBJECTS i = INTEGER FIXED PANEL
    PROPERTIES(i) objValue = OBJVALUE
;

DESIGN dialogInteger FROM DEFAULT {
    PROPERTY (objValue) {
        caption = 'Введите число';
        font = 'bold 64';
        panelLabelAbove = TRUE;
    }
}

FORM dialogNumeric 'Выбор числа'
    OBJECTS n = NUMERIC[20,7] FIXED PANEL
    PROPERTIES(n) objValue = OBJVALUE
;

DESIGN dialogNumeric FROM DEFAULT {
    PROPERTY (objValue) {
        caption = 'Введите число';
        font = 'bold 64';
        panelLabelAbove = TRUE;
    }
}

// --------------------------------------------- Печать --------------------------------- //

FORM printBlankPagePortrait;

FORM printBlankPageLandscape;

// --------------------------- Агрегации --------------------------------- //

// -- Агрегации для 1го объекта -- //

META defineAggregationCustom1 (primProperty, primObject, primClass, aggrObject, aggrClass, aggrProperty)
    aggrObject###primObject (primObject) =
        GROUP AGGR aggrObject BY primProperty(aggrObject)
        WHERE aggrObject IS aggrClass PERSISTENT INDEXED;

    aggrProperty###primClass(primObject) => aggrObject###primObject(primObject) RESOLVE LEFT;

    is###aggrObject(aggrObject) = aggrObject IS aggrClass;
    is###aggrObject(aggrObject) => aggrProperty###primClass(primProperty(aggrObject)) RESOLVE RIGHT;
END

META defineAggregationCustom (primProperty, primObject, aggrObject, aggrProperty)
    @defineAggregationCustom1(primProperty, primObject, ###primObject, aggrObject, ###aggrObject, aggrProperty);
END

META defineAggregationClass (primObject, primClass, aggrObject, aggrClass, aggrProperty)
    primObject###aggrObject = DATA primClass (aggrClass) INDEXED;

    @defineAggregationCustom1(primObject###aggrObject, primObject, primClass, aggrObject, aggrClass, aggrProperty);
END

META defineAggregation (primObject, aggrObject, aggrProperty)
    @defineAggregationClass(primObject, ###primObject, aggrObject, ###aggrObject, aggrProperty);
END

// -- Агрегации для 2х объектов -- //

META defineAggregationCustom (prim1Property, prim2Property, prim1Object, prim1Class, prim2Object, prim2Class, aggrObject, aggrClass, aggrProperty)
    aggrObject###prim1Object###prim2Object (prim1Object, prim2Object) =
        GROUP AGGR aggrObject BY prim1Property(aggrObject), prim2Property(aggrObject)
        WHERE aggrObject IS aggrClass;

    aggrProperty###prim1Class###prim2Class(prim1Object, prim2Object) => aggrObject###prim1Object###prim2Object(prim1Object, prim2Object) RESOLVE LEFT;

    is###aggrObject(aggrObject) = aggrObject IS aggrClass;
    is###aggrObject(aggrObject) => aggrProperty###prim1Class###prim2Class(prim1Property(aggrObject), prim2Property(aggrObject)) RESOLVE RIGHT;
END

META defineAggregationCustom (prim1Property, prim2Property, prim1Object, prim2Object, aggrObject, aggrProperty)
    @defineAggregationCustom(prim1Property, prim2Property, prim1Object, ###prim1Object, prim2Object, ###prim2Object, aggrObject, ###aggrObject, aggrProperty);
END

META defineAggregationClass (prim1Object, prim1Class, prim2Object, prim2Class, aggrObject, aggrClass, aggrProperty)
    prim1Object###aggrObject = DATA prim1Class (aggrClass) INDEXED;
    prim2Object###aggrObject = DATA prim2Class (aggrClass) INDEXED;

    @defineAggregationCustom(prim1Object###aggrObject, prim2Object###aggrObject, prim1Object, prim1Class, prim2Object, prim2Class, aggrObject, aggrClass, aggrProperty);
END

META defineAggregation (prim1Object, prim2Object, aggrObject, aggrProperty)
    @defineAggregationClass(prim1Object, ###prim1Object, prim2Object, ###prim2Object, aggrObject, ###aggrObject, aggrProperty);
END

// -- Агрегации для 3х объектов -- //

META defineAggregationCustom (prim1Property, prim2Property, prim3Property, prim1Object, prim1Class, prim2Object, prim2Class, prim3Object, prim3Class, aggrObject, aggrClass, aggrProperty)
    aggrObject###prim1Object###prim2Object###prim3Object (prim1Object, prim2Object, prim3Object) =
        GROUP AGGR aggrObject BY prim1Property(aggrObject), prim2Property(aggrObject), prim3Property(aggrObject)
        WHERE aggrObject IS aggrClass PERSISTENT INDEXED;

    aggrProperty(prim1Object, prim2Object, prim3Object) => aggrObject###prim1Object###prim2Object###prim3Object(prim1Object, prim2Object, prim3Object) RESOLVE LEFT;

    is###aggrObject(aggrObject) = aggrObject IS aggrClass;
    is###aggrObject(aggrObject) => aggrProperty(prim1Property(aggrObject), prim2Property(aggrObject), prim3Property(aggrObject)) RESOLVE RIGHT;
END

META defineAggregationCustom (prim1Property, prim2Property, prim3Property, prim1Object, prim2Object, prim3Object, aggrObject, aggrProperty)
    @defineAggregationCustom(prim1Property, prim2Property, prim3Property, prim1Object, ###prim1Object, prim2Object, ###prim2Object, prim3Object, ###prim3Object, aggrObject, ###aggrObject, aggrProperty);
END

META defineAggregationClass (prim1Object, prim1Class, prim2Object, prim2Class, prim3Object, prim3Class, aggrObject, aggrClass, aggrProperty)
    prim1Object###aggrObject = DATA prim1Class (aggrClass);
    prim2Object###aggrObject = DATA prim2Class (aggrClass);
    prim3Object###aggrObject = DATA prim3Class (aggrClass);

    @defineAggregationCustom(prim1Object###aggrObject, prim2Object###aggrObject, prim3Object###aggrObject, prim1Object, prim1Class, prim2Object, prim2Class, prim3Object, prim3Class, aggrObject, aggrClass, aggrProperty);
END

META defineAggregation (prim1Object, prim2Object, prim3Object, aggrObject, aggrProperty)
    @defineAggregationClass(prim1Object, ###prim1Object, prim2Object, ###prim2Object, prim3Object, ###prim3Object, aggrObject, ###aggrObject, aggrProperty);
END

// -- Агрегации для 4х объектов -- //   
META defineAggregationCustom (prim1Property, prim2Property, prim3Property, prim4Property, prim1Object, prim1Class, prim2Object, prim2Class, prim3Object, prim3Class, prim4Object, prim4Class, aggrObject, aggrClass, aggrProperty)
    aggrObject###prim1Object###prim2Object###prim3Object###prim4Object (prim1Object, prim2Object, prim3Object, prim4Object) =
        GROUP AGGR aggrObject BY prim1Property(aggrObject), prim2Property(aggrObject), prim3Property(aggrObject), prim4Property(aggrObject) 
        WHERE aggrObject IS aggrClass;// PERSISTENT INDEXED;

    aggrProperty###prim1Class###prim2Class###prim3Object###prim4Object(prim1Object, prim2Object, prim3Object, prim4Object) => aggrObject###prim1Object###prim2Object###prim3Object###prim4Object(prim1Object, prim2Object, prim3Object, prim4Object) RESOLVE LEFT;

    is###aggrObject(aggrObject) = aggrObject IS aggrClass;
    is###aggrObject(aggrObject) => aggrProperty###prim1Class###prim2Class###prim3Object###prim4Object(prim1Property(aggrObject), prim2Property(aggrObject), prim3Property(aggrObject), prim4Property(aggrObject)) RESOLVE RIGHT;
END

META defineAggregationCustom (prim1Property, prim2Property, prim3Property, prim4Property, prim1Object, prim2Object, prim3Object, prim4Object, aggrObject, aggrProperty)
    @defineAggregationCustom(prim1Property, prim2Property, prim3Property, prim4Property, prim1Object, ###prim1Object, prim2Object, ###prim2Object, prim3Object, ###prim3Object, prim4Object, ###prim4Object, aggrObject, ###aggrObject, aggrProperty);
END

META defineAggregationClass (prim1Object, prim1Class, prim2Object, prim2Class, prim3Object, prim3Class, prim4Object, prim4Class, aggrObject, aggrClass, aggrProperty)
    prim1Object###aggrObject = DATA prim1Class (aggrClass);
    prim2Object###aggrObject = DATA prim2Class (aggrClass);
    prim3Object###aggrObject = DATA prim3Class (aggrClass);
    prim4Object###aggrObject = DATA prim4Class (aggrClass);

    @defineAggregationCustom(prim1Object###aggrObject, prim2Object###aggrObject, prim3Object###aggrObject, prim4Object###aggrObject, prim1Object, prim1Class, prim2Object, prim2Class, prim3Object, prim3Class, prim4Object, prim4Class, aggrObject, aggrClass, aggrProperty);
END

META defineAggregation (prim1Object, prim2Object, prim3Object, prim4Object, aggrObject, aggrProperty)
    @defineAggregationClass(prim1Object, ###prim1Object, prim2Object, ###prim2Object, prim3Object, ###prim3Object, prim4Object, ###prim4Object, aggrObject, ###aggrObject, aggrProperty);
END

// --------------------------- Групповая корректировка на форме --------------------------------- //

isEditable 'Включить корректировку на форме' = DATA LOCAL BOOLEAN();

isReadonly = NOT isEditable();

META extendFormEditable (form)
    EXTEND FORM form
        PROPERTIES() isEditable
    ;
    EXTEND DESIGN form {
        functions.box {
            ADD PROPERTY(isEditable()) BEFORE rightControls;
        }
    }
END
