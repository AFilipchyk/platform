MODULE Hierarchy;

REQUIRE Utils;

META defineHierarchy(object)
    @defineHierarchy(object, ###object);
END

META defineHierarchyAbstract(object)
    @defineHierarchyAbstract(object, ###object);
END

META defineHierarchy (object, class)
    parent = DATA class (class) AUTOSET;
    @defineHierarchyCustom(object, class);
END

META defineHierarchyAbstract (object, class)
    parent = ABSTRACT class (class) MATERIALIZED;
    @defineHierarchyCustom(object, class);
END

META defineHierarchyCustom (object, class)
    nameParent 'Родительский объект' = name(parent(class object)) IN base;

    level 'Уровень' (class child, class parent) = RECURSION 1l IF child IS class AND parent == child
                                                                  STEP 2l IF parent == parent($parent) MATERIALIZED;

    object (child, level) = GROUP MAX class parent IF LONG level == level(class child, parent)
                                                   BY child, level;

    level 'Уровень' (child) = GROUP SUM 1 IF level(class child, class parent) BY child;

    levelRoot 'Уровень' (class child, class parent) = PARTITION SUM 1 IF level(child, parent)
                                                                      BY child
                                                                      ORDER DESC level(child, parent) MATERIALIZED;
    object##Root (child, level) = GROUP NAGGR class parent BY class child, levelRoot(child, parent);  

    isParent 'Является потомком' (class child, class parent) = TRUE IF level(child, parent);

    childNumber 'Кол-во непосредственных потомков' (object) = GROUP SUM 1 BY parent(class child) MATERIALIZED;

    descendantNumber 'Кол-во всех потомков' (object) = GROUP SUM 1 IF isParent(class child, class parent) BY parent MATERIALIZED;

    isLeaf 'Лист' (class object) = object IS class AND NOT childNumber(object) MATERIALIZED;

    isParentLeaf (class child, class parent) = isParent(child, parent) AND isLeaf(child);

    canonicalName 'Полное имя' (class object) = VARISTRING[255](
                           [= GROUP CONCAT name(class parent), ' / ' BY class child ORDER DESC level(child, parent)](object))
                           CHARWIDTH 50 MATERIALIZED;
END

META defineHierarchyFilter(object, class, property)
    // фильтры по имени
    filter###property###object 'Фильтр по наименованию' = DATA LOCAL NESTED VARSTRING[255] ();
    inFilterName = GROUP SUM 1 IF isParent(class child, class parent) AND isSubstring(name(child), filter###property###object()) BY parent; 
    inIFilterName = GROUP SUM 1 IF isParent(class child, class parent) AND isISubstring(name(child), filter###property###object()) BY parent; 
END

META defineHierarchyPlain(object)
    object##1 (###object child) = object##Root(child, 1) MATERIALIZED;    
    object##2 (###object child) = object##Root(child, 2) MATERIALIZED;    
    object##3 (###object child) = object##Root(child, 3) MATERIALIZED;    
    object##4 (###object child) = object##Root(child, 4) MATERIALIZED;    
    object##5 (###object child) = object##Root(child, 5) MATERIALIZED;    
    object##6 (###object child) = object##Root(child, 6) MATERIALIZED;    
END

META defineHierarchyPlainOrder(object, property, prefixName, prefix)
    order###property###object 'Порядок (внутри группы)' (g) = PARTITION SUM 1 BY parent###object(g) ORDER property###object(g);
    canonicalOrder###property###object 'Порядок (полный)' (g) = GROUP CONCAT lpad(VARSTRING[3](order###property###object(parent)), 3, '0') , '.' BY child ORDER DESC level###object###object(child, parent);

    prefixName###object 'Наименование (со сдвигом)' (g) = VARSTRING[100](repeat(prefix, INTEGER(level###object(g))-1)) + name###object(g);
END