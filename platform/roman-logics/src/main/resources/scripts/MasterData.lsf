MODULE MasterData;

REQUIRE System,
        Stock,
        Store,
        LegalEntity,
        Barcode,
        RetailCRM,
        AccountDocument,
        Employee,
        UserPriceChange,
        Contract,
        Supplier,
        Warehouse,
        ContractLedger,
        RomanLogicsModule;

PRIORITY Stock, LegalEntity, Store, RomanLogicsModule;

//--------------------------------- Дисконтные группы -------------------------------------------//

inDiscountSkuGroupSku (discountSkuGroup, sku) += brandSupplierArticleSku(sku) == discountSkuGroup;

// отбор артикулов
inBrandSupplier (supplier, brandSupplier) = supplierBrandSupplier(brandSupplier) == supplier;
inArticleBrand (brandSupplier, article) = brandSupplierArticle(article) == brandSupplier;

inArticleCategory (category, article) = UNION OVERRIDE categoryArticle(article) == category,
                                                       article == article AND NOT category;

//stringEqualsAll(string) = string == 'Все';

inSupplierBrandArticle(supplier, brand, article) = UNION OVERRIDE brandSupplierArticle(article) == brand AND supplier IS supplier,
                                                                  supplierArticle(article) == supplier AND NOT brand,
                                                                  article == article AND NOT supplier AND NOT brand;



// подбор курса обмена валют

META defineNearestRateExchangeObject(object, typeEx, typeCur, propDate, group)

    nearestPredDate###typeEx###typeCur###object(object) = GROUP MAX date IF rateExchange(typeExchange###typeEx###object(object), currency###typeCur###object(object), date) AND date < propDate(object) AND date IS DATE BY object;

    rateExchange###typeEx###typeCur###object 'Курс обмена' (object) = rateExchange(typeExchange###typeEx###object(object), currency###typeCur###object(object), nearestPredDate###typeEx###typeCur###object(object)) IF object IS object IN group;

END

//------------------------ Приведение штрих-кодов RomanLogicsModule к логике Barcode.lsf -----------------------------//

syncBarcodeSku 'Синхронизировать штрих-код' (sku) = ACTION (sku) {
//    SET dataBarcodeIdDate(barcode, date) IF barcode == barcode(sku AS RomanLogicsModule.sku) AND date == 2001_01_01 NOT NULL;

    LOCAL syncBarcode = barcode();
    SET syncBarcode() <- [GROUP MAX barcode BY skuBarcode(barcode)](sku AS RomanLogicsModule.sku); //dataBarcodeIdDate(barcode(sku), 2001_01_01);
    IF TRUE AND NOT syncBarcode() IS barcode THEN {
        ADDOBJ barcode;
        SET syncBarcode() <- addedObject();
        SET skuBarcode(barcode) IF barcode == syncBarcode() <- sku AS RomanLogicsModule.sku;
    }

    SET idBarcode(barcode) IF barcode == syncBarcode() <- barcode(sku AS RomanLogicsModule.sku);
} IN baseGroup;

WHEN CHANGED(barcode(sku) AND sku IS RomanLogicsModule.sku) DO EXEC syncBarcodeSku(sku);

FORM syncBarcodeSkuForm 'Синхронизация шрих-кодов'

    OBJECTS s = sku
    PROPERTIES(s) READONLY nameSku
    PROPERTIES(s) syncBarcodeSku
;

// ---------------------------------- Формы для выбора атрибутов ------------------------------------ //

FORM genders 'Пол'
    OBJECTS g = gender
    PROPERTIES(g) READONLY sidGender
    DIALOG gender OBJECT g;
;

FORM typeFabrics 'Типы одежды'
    OBJECTS t = typeFabric
    PROPERTIES(t) READONLY name
    DIALOG typeFabric OBJECT t
;

FORM unitOfMeasures 'Единицы измерений'
    OBJECTS u = unitOfMeasure
    PROPERTIES(u) READONLY name, shortName, nameOrigin
    DIALOG unitOfMeasure OBJECT u
;

//FORM countries 'Страны'
//    OBJECTS c = country
//    PROPERTIES(c) name, nameOriginCountry, sidCountry, sidOrigin2Country, sidOrigin3Country, sid3Country
//    DIALOG country OBJECT c
//;

//----------------------Определения себестоимости при создании оптового прайса  ----------------------//

// todo : это нужно убрать
priceCustomBatch 'Себестоимость (БУ)' (batch) = ABSTRACT NUMERIC[14,2] (batch) PERSISTENT;
priceManagerialBatch 'Себестоимость (УУ)' (batch) = ABSTRACT NUMERIC[14,2] (batch) PERSISTENT;


concatPriceCustomBatchArticleDateTime (article, dateTime) = GROUP MAX orderBatch(batch) AND priceCustomBatch(batch) AND
                                                                dateTimeBatch(batch) < (dateTime AS DATETIME)
                                                                BY articleSku(skuBatch(batch)), dateTime;

batchPriceCustomArticleDateTime (article, dateTime) = concatPriceCustomBatchArticleDateTime(article, dateTime)[2];
priceCustomDateTime(article, dateTime) = priceCustomBatch(batchPriceCustomArticleDateTime(article, dateTime));


concatPriceManagerialBatchArticleDateTime (article, dateTime) = GROUP MAX orderBatch(batch) AND priceManagerialBatch(batch) AND
                                                                dateTimeBatch(batch) < (dateTime AS DATETIME)
                                                                BY articleSku(skuBatch(batch)), dateTime;

batchPriceManagerialArticleDateTime (article, dateTime) = concatPriceManagerialBatchArticleDateTime(article, dateTime)[2];
priceManagerialDateTime(article, dateTime) = priceManagerialBatch(batchPriceManagerialArticleDateTime(article, dateTime));


//--------------------------------- Склады временного хранения -------------------------------------------//

TABLE customStore (customStore);
groupWarehouseCustomStore = DATA groupWarehouse(customStore);
nameGroupWarehouseCustomStore 'Группа складов' (customStore) = name(groupWarehouseCustomStore(customStore));

stockGroupStock (stock) += groupWarehouseCustomStore(stock);

FORM customStore 'Склад временного хранения'

    OBJECTS c=customStore FIXED PANEL

    PROPERTIES(c) name, nameGroupWarehouseCustomStore, fullNameLegalEntity, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity,
                  UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity,
                  addressLegalEntity, dialogAddressLegalEntity,
                  postAddressLegalEntity, dialogPostAddressLegalEntity,
                  managerLegalEntity, dialogManagerLegalEntity,
                  accountantLegalEntity, dialogAccountantLegalEntity,
                  phoneLegalEntity, dialogPhoneLegalEntity,
                  emailLegalEntity, siteLegalEntity, allowImportFromXLSLegalEntity

    EDIT customStore OBJECT c
;

DESIGN customStore FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        c.box {
            childConstraints = TO THE BOTTOM;

            NEW row1 {
                childConstraints = TO THE RIGHT;
                ADD c.lawGroup{
                    childConstraints = TO THE BOTTOM;
                }
            }
            NEW row2{
                childConstraints = TO THE RIGHT;
                ADD c.contactGroup {
                    childConstraints = TO THE BOTTOM;
                }
                ADD c.managementGroup {
                    childConstraints = TO THE BOTTOM;
                }
                ADD c.docGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }
        }

        ADD functions.box;
    }
}

FORM customStores 'Склады временного хранения'

    OBJECTS c=customStore

    PROPERTIES(c) READONLY name, fullNameLegalEntity, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity,
                  UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity,
                  addressLegalEntity, postAddressLegalEntity, managerLegalEntity, accountantLegalEntity, phoneLegalEntity,
                  emailLegalEntity, siteLegalEntity, allowImportFromXLSLegalEntity

    PROPERTIES(c) ADDFORM, EDITFORM, delete

;

EXTEND FORM company
    PROPERTIES(co) nameOrigin, addressOriginSubject, addressSubject, contractImporter, sidImporter
;

EXTEND DESIGN company {
    co.box {
        NEW column3 {
            title = 'Данные для Sintitex';
            childConstraints = TO THE BOTTOM;

            ADD PROPERTY (nameOrigin(co));
            ADD PROPERTY (addressOriginSubject(co));
            ADD PROPERTY (addressSubject(co));
            ADD PROPERTY (contractImporter(co));
            ADD PROPERTY (sidImporter(co));
        }
    }
}


@extendStockFormAccountDocumentLedger(warehouse, w);
@extendStockFormAccountDocumentLedger(departmentStore, d);
@extendStockFormAccountDocumentLedger(customStore, c);

//----------------------------Concat для фрахта и декларации--------------------------//

canonicalBrandFreight 'Бренды' (freight) = castToString255(
    [GROUP CONCAT commonName(brandSupplier) IF quantityFreightBrandSupplier(freight, brandSupplier), ' , ' BY freight](freight))
    MINCHARWIDTH 50 MAXCHARWIDTH 100 PREFCHARWIDTH 100 PERSISTENT;


@defineNumeratedObject(freight, 'Нумератор для фрахтов', 'ФР');

EXTEND FORM freightCreateForm
    PROPERTIES (freight) nameNumeratorObject BEFORE date, numberObject BEFORE date, seriesObject BEFORE date
;

EXTEND FORM freightListForm
    PROPERTIES (freight) READONLY numberObject BEFORE date, seriesObject BEFORE date, canonicalBrandFreight BEFORE dateArrivalFreight
;

FORM skuDialog 'SKU'

    OBJECTS s=sku

    PROPERTIES(s) READONLY barcode, nameSku, nameCategoryArticleSku, nameBrandSupplierArticleSku, sidArticleSku, shortNameUOMSku,
                           nameSupplierArticleSku, sidSizeSupplierItem FORCE GRID, sidColorSupplierItem FORCE GRID, nameColorSupplierItem FORCE GRID

    DIALOG sku OBJECT s
;

//----------------------------- для печати маркировок ----------------------------------------------------------------//

nameImporterSku 'Наименование' (importer, sku) = name(importer) AND importer IS company AND sku IS sku;
addressImporterSku 'Адрес' (importer, sku) = addressLegalEntity(importer) AND importer IS company AND sku IS sku;

//---------------------

//@implementSkuLedger(userPriceChange, sku, departmentStore);
//quantityInLIFOSkuLedger (ledger) += quantityUserPriceChangeDetail(ledger) (-) quantityUserPriceChangeDetail(ledger);
//limitInLIFOSkuLedgerBatch (ledger, batch) +=  (quantityUserPriceChangeDetail(ledger) (-) quantityUserPriceChangeDetail(ledger)) AND  batch IS batch;
//sumInSkuLedger(ledger) += (retailPriceUserPriceChangeDetail(ledger) (-) curRetailPriceUserPriceChangeDetail(ledger))*quantityUserPriceChangeDetail(ledger);


//---------------------------------------------- Контракты для инвойсов ----------------------------------------------//

userContractInvoice 'Договор инвойса' = DATA contractSkuSupplier (invoice);
numberUserContractInvoice 'Номер договора инвойса' (invoice) = numberContract(userContractInvoice(invoice));

contractDirectInvoice 'Договор инвойса напрямую' = DATA contractSkuSupplier (directInvoice);
numberContractDirectInvoice 'Номер договора инвойса напрямую' (directInvoice) = numberContract(contractDirectInvoice(directInvoice));

contractInvoice 'Договор' (invoice) = UNION OVERRIDE userContractInvoice(invoice), contractDirectInvoice(invoice);
numberContractInvoice 'Номер договора' (invoice) = numberContract(contractInvoice(invoice));

CONSTRAINT partyAContract(userContractInvoice(invoice)) != supplierDocument(invoice)
    CHECKED BY userContractInvoice MESSAGE 'Сторона А договора должна соответствовать поставщику инвойса';

CONSTRAINT partyAContract(contractDirectInvoice(directInvoice)) != supplierDocument(directInvoice)
    CHECKED BY contractDirectInvoice MESSAGE 'Сторона А договора должна соответствовать поставщику инвойса напрямую';

CONSTRAINT partyBContract(userContractInvoice(invoice)) != exporterInvoice(invoice)
    CHECKED BY userContractInvoice MESSAGE 'Сторона Б договора должна соответствовать экспортеру инвойса';

CONSTRAINT partyBContract(contractDirectInvoice(directInvoice)) != importerDirectInvoice(directInvoice)
    CHECKED BY contractDirectInvoice MESSAGE 'Сторона Б договора должна соответствовать импортеру инвойса напрямую';

// По коробам
EXTEND FORM boxInvoiceForm

PROPERTIES(invoice) numberUserContractInvoice AFTER nameExporterInvoice, numberContractDirectInvoice,
                    numberContractInvoice TODRAW invoice FORCE PANEL

;

//Без коробов
EXTEND FORM simpleInvoiceForm

PROPERTIES(invoice) numberUserContractInvoice AFTER nameExporterInvoice, numberContractDirectInvoice,
                    numberContractInvoice TODRAW invoice FORCE PANEL

;

//------------------------------------------------ Расчет с поставщиками ---------------------------------------------//

dateTimeInvoice 'Дата/время' (invoice) = timeDate(date((invoice))) AND invoice IS invoice;
dateInvoice 'Дата' (invoice) = date((invoice)) AND invoice IS invoice;
sumInvoice 'Сумма инвойса' (invoice) = sumDocument(invoice) AND invoice IS invoice;
descriptionInvoice 'Название документа' (invoice) =
    [FORMULA STRING[200] '\'Инвойс \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    sidDocument(invoice), date(invoice), name(supplierDocument(invoice))) AND invoice IS invoice;

@implementContractLedger(a, invoice);
sumContractALedger(contractALedger) += sumInvoice(contractALedger);

@implementContractPrepaymentLedger(invoice);
sumContractLedger(invoiceContractLedger) += sumInvoice(invoiceInvoiceContractLedger(invoiceContractLedger));
