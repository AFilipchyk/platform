MODULE MasterData;

REQUIRE System,
        Stock,
        Store,
        I18n,
        LegalEntity,
        Barcode,
        RetailCRM,
        AccountDocument,
        Employee,
        UserPriceChange,
        Contract,
        Supplier,
        Warehouse,
        RomanLogicsModule;

PRIORITY Stock, LegalEntity, Store, RomanLogicsModule;

//--------------------------------- Дисконтные группы -------------------------------------------//

inDiscountSkuGroupSku (discountSkuGroup, sku) += brandSupplierArticleSku(sku) == discountSkuGroup;

// для фильтров

inArticleSku(article, sku) = articleSku(sku)==article;

inBrandSupplier (supplier, brandSupplier) = supplierBrandSupplier(brandSupplier) == supplier;
inArticleBrand (brandSupplier, article) = brandSupplierArticle(article) == brandSupplier;
inSkuBrand(brandSupplier, sku) = brandSupplierArticleSku(sku) == brandSupplier;

inArticleCategory (category, article) = UNION OVERRIDE categoryArticle(article) == category,
                                                       article == article AND NOT category;

inSkuCategory (category, sku) = UNION OVERRIDE categoryArticleSku(sku) == category, sku == sku AND NOT category;

//stringEqualsAll(string) = string == 'Все';

inSupplierBrandArticle(supplier, brand, article) = UNION OVERRIDE brandSupplierArticle(article) == brand AND supplier IS supplier,
                                                                  supplierArticle(article) == supplier AND NOT brand,
                                                                  article == article AND NOT supplier AND NOT brand;

inSupplierBrandSku(supplier, brand, sku) = UNION OVERRIDE brandSupplierArticleSku(sku) == brand AND supplier IS supplier,
                                                          supplierArticleSku(sku) == supplier AND NOT brand,
                                                          sku == sku AND NOT supplier AND NOT brand;

// подбор курса обмена валют
META defineNearestRateExchangeObject(object, typeEx, typeCur, propDate, group)

    nearestPredDate###typeEx###typeCur###object(object) = GROUP MAX date IF rateExchange(typeExchange###typeEx###object(object), currency###typeCur###object(object), date) AND date < propDate(object) AND date IS DATE BY object;

    rateExchange###typeEx###typeCur###object 'Курс обмена' (object) = rateExchange(typeExchange###typeEx###object(object), currency###typeCur###object(object), nearestPredDate###typeEx###typeCur###object(object)) IF object IS object IN group;

END

//------------------------ Приведение штрих-кодов RomanLogicsModule к логике Barcode.lsf -----------------------------//

syncBarcodeSku 'Синхронизировать штрих-код' (sku) = ACTION (sku) {
//    SET dataBarcodeIdDate(barcode, date) IF barcode == barcode(sku AS RomanLogicsModule.sku) AND date == 2001_01_01 NOT NULL;

    LOCAL syncBarcode = barcode();
    SET syncBarcode() <- [GROUP MAX barcode BY skuBarcode(barcode)](sku AS RomanLogicsModule.sku); //dataBarcodeIdDate(barcode(sku), 2001_01_01);
    IF TRUE AND NOT syncBarcode() IS barcode THEN {
        ADDOBJ barcode;
        SET syncBarcode() <- addedObject();
        SET skuBarcode(barcode) IF barcode == syncBarcode() <- sku AS RomanLogicsModule.sku;
    }

    SET idBarcode(barcode) IF barcode == syncBarcode() <- barcode(sku AS RomanLogicsModule.sku);
} IN baseGroup;

WHEN CHANGED(barcode(sku) AND sku IS RomanLogicsModule.sku) DO EXEC syncBarcodeSku(sku);

FORM syncBarcodeSkuForm 'Синхронизация шрих-кодов'

    OBJECTS s = sku
    PROPERTIES(s) READONLY nameSku
    PROPERTIES(s) syncBarcodeSku
;

// ---------------------------------- Формы изменения атрибутов ------------------------------------- //
@defineHierarchy(category);

FORM category 'Товарная группа'
    OBJECTS c = category FIXED PANEL
    PROPERTIES(c) nameParentCategory, name, nameOrigin, nameTypeInvoiceCategory, warrantyCategory, nameUnitOfMeasureCategory, necessaryStampCategory

    OBJECTS l = language
    PROPERTIES name(l) READONLY, languageName(c, l)

    EDIT category OBJECT c
;

FORM categories 'Товарные группы'
    OBJECTS c = category
    PROPERTIES(c) READONLY name, nameOrigin, nameTypeInvoiceCategory, warrantyCategory, nameUnitOfMeasureCategory, necessaryStampCategory
    PROPERTIES(c)          nameParentCategory
    PROPERTIES(c) ADDFORM, EDITFORM, delete

    DIALOG category OBJECT c
;

//FORM country 'Страна'
//    OBJECTS c = country FIXED PANEL
//    PROPERTIES(c) name, nameOrigin
//
//    OBJECTS l = language
//    PROPERTIES name(l) READONLY, languageName(c, l)
//
//    EDIT country OBJECT c
//;
//
//FORM countries 'Страны'
//    OBJECTS c = country
//    PROPERTIES(c) name, nameOriginCountry, sidCountry, sidOrigin2Country, sidOrigin3Country, sid3Country
//    DIALOG country OBJECT c
//;


// ---------------------------------- Формы для выбора атрибутов ------------------------------------ //

FORM gender 'Пол'
    OBJECTS g = gender FIXED PANEL
    PROPERTIES(g) sidGender

    OBJECTS l= language
    PROPERTIES(l) READONLY name
    PROPERTIES(g, l) languageName

    EDIT gender OBJECT g;
;

FORM gendersDialog 'Пол'
    OBJECTS g = gender
    PROPERTIES(g) READONLY sidGender
    PROPERTIES(g) ADDFORM, EDITFORM, delete
    DIALOG gender OBJECT g;
;

FORM typeFabrics 'Типы одежды'
    OBJECTS t = typeFabric
    PROPERTIES(t) READONLY name
    DIALOG typeFabric OBJECT t
;

FORM unitOfMeasures 'Единицы измерений'
    OBJECTS u = unitOfMeasure
    PROPERTIES(u) READONLY name, shortName, nameOrigin
    DIALOG unitOfMeasure OBJECT u
;


//----------------------Определения себестоимости при создании оптового прайса  ----------------------//

// todo : это нужно убрать
priceCustomBatch 'Себестоимость (БУ)' (batch) = ABSTRACT NUMERIC[14,2] (batch) PERSISTENT;
priceManagerialBatch 'Себестоимость (УУ)' (batch) = ABSTRACT NUMERIC[14,2] (batch) PERSISTENT;


concatPriceCustomBatchArticleDateTime (article, dateTime) = GROUP MAX orderBatch(batch) AND priceCustomBatch(batch) AND
                                                                dateTimeBatch(batch) < (dateTime AS DATETIME)
                                                                BY articleSku(skuBatch(batch)), dateTime;

batchPriceCustomArticleDateTime (article, dateTime) = concatPriceCustomBatchArticleDateTime(article, dateTime)[2];
priceCustomDateTime(article, dateTime) = priceCustomBatch(batchPriceCustomArticleDateTime(article, dateTime));


concatPriceManagerialBatchArticleDateTime (article, dateTime) = GROUP MAX orderBatch(batch) AND priceManagerialBatch(batch) AND
                                                                dateTimeBatch(batch) < (dateTime AS DATETIME)
                                                                BY articleSku(skuBatch(batch)), dateTime;

batchPriceManagerialArticleDateTime (article, dateTime) = concatPriceManagerialBatchArticleDateTime(article, dateTime)[2];
priceManagerialDateTime(article, dateTime) = priceManagerialBatch(batchPriceManagerialArticleDateTime(article, dateTime));


//--------------------------------- Склады временного хранения -------------------------------------------//

TABLE customStore (customStore);
groupWarehouseCustomStore = DATA groupWarehouse(customStore);
nameGroupWarehouseCustomStore 'Группа складов' (customStore) = name(groupWarehouseCustomStore(customStore));

stockGroupStock (stock) += groupWarehouseCustomStore(stock);

FORM customStore 'Склад временного хранения'

    OBJECTS c=customStore FIXED PANEL

    PROPERTIES(c) name, nameGroupWarehouseCustomStore, fullNameLegalEntity, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity,
                  UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity,
                  addressLegalEntity, dialogAddressLegalEntity,
                  postAddressLegalEntity, dialogPostAddressLegalEntity,
                  managerLegalEntity, dialogManagerLegalEntity,
                  accountantLegalEntity, dialogAccountantLegalEntity,
                  phoneLegalEntity, dialogPhoneLegalEntity,
                  emailLegalEntity, siteLegalEntity, allowImportFromXLSLegalEntity

    EDIT customStore OBJECT c
;

DESIGN customStore FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        c.box {
            childConstraints = TO THE BOTTOM;

            NEW row1 {
                childConstraints = TO THE RIGHT;
                ADD c.lawGroup{
                    childConstraints = TO THE BOTTOM;
                }
            }
            NEW row2{
                childConstraints = TO THE RIGHT;
                ADD c.contactGroup {
                    childConstraints = TO THE BOTTOM;
                }
                ADD c.managementGroup {
                    childConstraints = TO THE BOTTOM;
                }
                ADD c.docGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }
        }

        ADD functions.box;
    }
}

FORM customStores 'Склады временного хранения'

    OBJECTS c=customStore

    PROPERTIES(c) READONLY name, fullNameLegalEntity, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity,
                  UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity,
                  addressLegalEntity, postAddressLegalEntity, managerLegalEntity, accountantLegalEntity, phoneLegalEntity,
                  emailLegalEntity, siteLegalEntity, allowImportFromXLSLegalEntity

    PROPERTIES(c) ADDFORM, EDITFORM, delete

;

EXTEND FORM company
    PROPERTIES(co) nameOrigin, addressOriginSubject, addressSubject, contractImporter, sidImporter
;

EXTEND DESIGN company {
    co.box {
        NEW column3 {
            title = 'Данные для Sintitex';
            childConstraints = TO THE BOTTOM;

            ADD PROPERTY (nameOrigin(co));
            ADD PROPERTY (addressOriginSubject(co));
            ADD PROPERTY (addressSubject(co));
            ADD PROPERTY (contractImporter(co));
            ADD PROPERTY (sidImporter(co));
        }
    }
}


@extendStockFormAccountDocumentLedger(warehouse, w);
@extendStockFormAccountDocumentLedger(departmentStore, d);
@extendStockFormAccountDocumentLedger(customStore, c);

//----------------------------Concat для фрахта и декларации--------------------------//

canonicalBrandFreight 'Бренды' (freight) = castToString255(
    [GROUP CONCAT commonName(brandSupplier) IF quantityFreightBrandSupplier(freight, brandSupplier), ' , ' BY freight](freight))
    MINCHARWIDTH 50 MAXCHARWIDTH 100 PREFCHARWIDTH 100 PERSISTENT;


@defineNumeratedObject(freight, 'Нумератор для фрахтов', 'ФР');

EXTEND FORM freightCreateForm
    PROPERTIES (freight) nameNumeratorObject BEFORE date, numberObject BEFORE date, seriesObject BEFORE date
;

EXTEND FORM freightListForm
    PROPERTIES (freight) READONLY numberObject BEFORE date, seriesObject BEFORE date, canonicalBrandFreight BEFORE dateArrivalFreight
;

FORM skuDialog 'SKU'

    OBJECTS s=sku

    PROPERTIES(s) READONLY barcode, nameSku, nameCategoryArticleSku, nameBrandSupplierArticleSku, sidArticleSku, shortNameUOMSku,
                           nameSupplierArticleSku, sidSizeSupplierItem FORCE GRID, sidColorSupplierItem FORCE GRID, nameColorSupplierItem FORCE GRID

    DIALOG sku OBJECT s
;

//----------------------------- для печати маркировок ----------------------------------------------------------------//

nameImporterSku 'Наименование' (importer, sku) = name(importer) AND importer IS company AND sku IS sku;
addressImporterSku 'Адрес' (importer, sku) = addressLegalEntity(importer) AND importer IS company AND sku IS sku;

localeLanguageCompany (company) = localeLanguage(languageLegalEntity(company));
mainCompositionSkuCompany 'Состав (перевод)' (sku, company) = mainCompositionSkuLanguage(sku, languageLegalEntity(company));
nameCategoryArticleSkuCompany 'Номенклатурная группа' (sku, company)= nameCategoryArticleSkuLanguage(sku, languageLegalEntity(company));
sidGenderArticleSkuCompany 'Пол' (sku, company) = sidGenderArticleSkuLanguage(sku, languageLegalEntity(company));
nameCountrySkuCompany 'Страна (сделано в)' (sku, company) = nameCountrySkuLanguage(sku, languageLegalEntity(company));
nameCountryBrandSupplierSkuCompany 'Страна поставки' (sku, company) =nameCountryBrandSupplierSkuLanguage(sku, languageLegalEntity(company));

//---------------------

mainCompositionSkuInvoice 'Состав (перевод)' (sku, invoice) = mainCompositionSkuLanguage(sku, languageInvoice(invoice));
additionalCompositionSkuInvoice 'Доп. состав (перевод)' (sku, invoice) = additionalCompositionSkuLanguage(sku, languageInvoice(invoice));
translateNameSkuInvoice 'Наименование (перевод)' (sku, invoice) = translateNameSkuLanguage(sku, languageInvoice(invoice));

mainCompositionSkuFreight 'Состав (перевод)' (sku, freight) = mainCompositionSkuLanguage(sku, languageFreight(freight));
additionalCompositionSkuFreight 'Доп. состав (перевод)' (sku, freight) = additionalCompositionSkuLanguage(sku, languageFreight(freight));

translationMainCompositionSkuInvoice 'Перевод' (sku, invoice) = translationMainCompositionSkuLanguage(sku, languageInvoice(invoice));
translationAdditionalCompositionSkuInvoice 'Перевод' (sku, invoice) = translationAdditionalCompositionSkuLanguage(sku, languageInvoice(invoice));
//translationNameSkuInvoice 'Перевод' (sku, invoice) = translationNameSkuLanguage(sku, languageInvoice(invoice));

EXTEND FORM boxInvoiceForm
    PROPERTIES (invoice) READONLY nameLanguageInvoice AFTER nameDestinationDestinationDocument
    PROPERTIES (sku, invoice) translateNameSkuInvoice, translationMainCompositionSkuInvoice,
               mainCompositionSkuInvoice, translationAdditionalCompositionSkuInvoice, additionalCompositionSkuInvoice
;

EXTEND FORM simpleInvoiceForm
    PROPERTIES (invoice) READONLY nameLanguageInvoice AFTER nameDestinationDestinationDocument
    PROPERTIES (sku, invoice) translateNameSkuInvoice, translationMainCompositionSkuInvoice,
               mainCompositionSkuInvoice, translationAdditionalCompositionSkuInvoice, additionalCompositionSkuInvoice
;

//importerFreight 'Импортёр фрахта (ИД)' = DATA importer(freight) IN idGroup;
//nameImporterFreight 'Импортёр фрахта' (freight) = name(importerFreight(freight));

mainCompositionLanguageFreightSku 'Состав' = DATA STRING[200] (freight, sku);
mainCompositionLanguageFreightSku (freight, sku) <- mainCompositionSkuFreight(sku, freight) WHEN ASSIGNED (freight IS freightChanged);

additionalCompositionLanguageFreightSku 'Доп. состав' = DATA STRING[200] (freight, sku);
additionalCompositionLanguageFreightSku (freight, sku) <- additionalCompositionSkuFreight(sku, freight) WHEN ASSIGNED (freight IS freightChanged);

nameCountryLanguageFreightSku 'Страна' (freight, sku) = languageName(countryOfOriginFreightSku(freight, sku), languageFreight(freight));

nameCategoryFreightLanguageSku 'Номенклатурная группа' (freight, sku) = nameCategoryArticleSkuLanguage(sku, languageFreight(freight));

EXTEND FORM freightListForm
    PROPERTIES (freight) READONLY nameCountryFreight BEFORE nameRouteFreight(freight), nameLanguageFreight BEFORE nameRouteFreight(freight)
;

EXTEND FORM freightCreateForm
    PROPERTIES (freight) nameCountryFreight BEFORE nameRouteFreight(freight), nameLanguageFreight BEFORE nameRouteFreight(freight)

;

EXTEND FORM freightChangeForm
    PROPERTIES (freight, sku) nameCategoryFreightLanguageSku AFTER nameCategoryArticleSku(sku) SHOWIF languageFreight(freight),
                              nameCountryLanguageFreightSku AFTER nameCountrySku(sku) SHOWIF languageFreight(freight),
                              translationMainCompositionLanguageFreightSku SHOWIF languageFreight(freight)
    PROPERTIES (sku, freight) mainCompositionSkuFreight SHOWIF languageFreight(freight)
    PROPERTIES (freight, sku) translationAdditionalCompositionLanguageFreightSku SHOWIF languageFreight(freight)
    PROPERTIES (sku, freight) additionalCompositionSkuFreight SHOWIF languageFreight(freight)
    PROPERTIES (freight, skuFreight) mainCompositionLanguageFreightSku SHOWIF languageFreight(freight),
                                     additionalCompositionLanguageFreightSku SHOWIF languageFreight(freight),
                                     nameCountryLanguageFreightSku AFTER nameCountryOfOriginFreightSku(freight, skuFreight) SHOWIF languageFreight(freight)
;

//@implementSkuLedger(userPriceChange, sku, departmentStore);
//quantityInLIFOSkuLedger (ledger) += quantityUserPriceChangeDetail(ledger) (-) quantityUserPriceChangeDetail(ledger);
//limitInLIFOSkuLedgerBatch (ledger, batch) +=  (quantityUserPriceChangeDetail(ledger) (-) quantityUserPriceChangeDetail(ledger)) AND  batch IS batch;
//sumInSkuLedger(ledger) += (retailPriceUserPriceChangeDetail(ledger) (-) curRetailPriceUserPriceChangeDetail(ledger))*quantityUserPriceChangeDetail(ledger);
