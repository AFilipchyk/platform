MODULE MasterData;

REQUIRE System,
        Stock,
        Store,
        I18n,
        ByLegalEntity,
        Barcode,
        RetailCRM,
        AccountDocument,
        Employee,
        UserPriceChange,
        Contract,
        Supplier,
        POS,
        Warehouse,
        RomanLogicsModule;

PRIORITY Stock, LegalEntity, Store, RomanLogicsModule;

//--------------------------------- Дисконтные группы -------------------------------------------//

inDiscountSkuGroupSku (discountSkuGroup, sku) += brandSupplierArticleSku(sku) == discountSkuGroup;

// для фильтров

inArticleSku(article, sku) = articleSku(sku)==article;

inBrandSupplier (supplier, brandSupplier) = supplierBrandSupplier(brandSupplier) == supplier;
inArticleBrand (brandSupplier, article) = brandSupplierArticle(article) == brandSupplier;
inSkuBrand(brandSupplier, sku) = brandSupplierArticleSku(sku) == brandSupplier;

inCategorySupplierSupplier (supplier, categorySupplier) = supplierCategorySupplier(categorySupplier) == supplier;

inSubCategorySupplierCategorySupplier (categorySupplier, subCategorySupplier) = categorySupplierSubCategorySupplier(subCategorySupplier) == categorySupplier;
inArticleSubCategorySupplier (subCategorySupplier, article) = subCategorySupplierArticle(article) == subCategorySupplier;
inArticleCategorySupplier (categorySupplier, article) = categorySupplierArticle(article) == categorySupplier;

inArticleCategory (category, article) = UNION OVERRIDE categoryArticle(article) == category,
                                                       article == article AND NOT category;

inSkuCategory (category, sku) = UNION OVERRIDE categoryArticleSku(sku) == category, sku == sku AND NOT category;

//stringEqualsAll(string) = string == 'Все';

inSupplierBrandArticle(supplier, brand, article) = UNION OVERRIDE brandSupplierArticle(article) == brand AND supplier IS supplier,
                                                                  supplierArticle(article) == supplier AND NOT brand,
                                                                  article == article AND NOT supplier AND NOT brand;

inSupplierBrandSku(supplier, brand, sku) = UNION OVERRIDE brandSupplierArticleSku(sku) == brand AND supplier IS supplier,
                                                          supplierArticleSku(sku) == supplier AND NOT brand,
                                                          sku == sku AND NOT supplier AND NOT brand;

inCategorySupplierSubCategorySupplierArticle(categorySupplier, subCategorySupplier, article) = UNION OVERRIDE subCategorySupplierArticle(article) == subCategorySupplier AND categorySupplier IS categorySupplier,
                                                                                                              categorySupplierArticle(article) == categorySupplier AND NOT subCategorySupplier,
                                                                                                              article == article AND NOT categorySupplier AND NOT subCategorySupplier;


// подбор курса обмена валют
META defineNearestRateExchangeObject(object, typeEx, typeCur, propDate, group)

    nearestPredDate###typeEx###typeCur###object(object) = GROUP MAX date IF rateExchange(typeExchange###typeEx###object(object), currency###typeCur###object(object), date) AND date <= propDate(object) AND date IS DATE BY object;

    rateExchange###typeEx###typeCur###object 'Курс обмена' (object) = rateExchange(typeExchange###typeEx###object(object), currency###typeCur###object(object), nearestPredDate###typeEx###typeCur###object(object)) IF object IS object IN group;

END

//------------------------ Приведение штрих-кодов RomanLogicsModule к логике Barcode.lsf -----------------------------//

syncBarcodeSku 'Синхронизировать штрих-код' (sku) = ACTION (sku) {
//    SET dataBarcodeIdDate(barcode, date) IF barcode == barcode(sku AS RomanLogicsModule.sku) AND date == 2001_01_01 NOT NULL;

    LOCAL syncBarcode = barcode();
    SET syncBarcode() <- [GROUP MAX barcode BY skuBarcode(barcode)](sku AS RomanLogicsModule.sku); //dataBarcodeIdDate(barcode(sku), 2001_01_01);
    IF TRUE AND NOT syncBarcode() IS barcode THEN {
        ADDOBJ barcode;
        SET syncBarcode() <- addedObject();
        SET skuBarcode(barcode) IF barcode == syncBarcode() <- sku AS RomanLogicsModule.sku;
    }

    SET idBarcode(barcode) IF barcode == syncBarcode() <- barcode(sku AS RomanLogicsModule.sku);
} IN baseGroup;

WHEN CHANGED(barcode(sku) AND sku IS RomanLogicsModule.sku) DO EXEC syncBarcodeSku(sku);

EXTEND FORM migrationData
    OBJECTS s = sku
    PROPERTIES(s) READONLY nameSku
    PROPERTIES(s) syncBarcodeSku
;
EXTEND DESIGN migrationData {
    pane {
        ADD s.box;
    }
}

// ---------------------------------- Формы изменения атрибутов ------------------------------------- //
@defineHierarchy(category);

FORM category 'Товарная группа'
    OBJECTS g = category FIXED PANEL
    PROPERTIES(g) nameParentCategory, name, nameOrigin, nameTypeInvoiceCategory, warrantyCategory, nameUnitOfMeasureCategory, necessaryStampCategory

    OBJECTS l = language
    PROPERTIES name(l) READONLY, languageName(g, l)

    EDIT category OBJECT g
;

DESIGN category FROM DEFAULT {
    main {
        childConstraints = TO THE BOTTOM;
        ADD g.box {
            childConstraints = TO THE BOTTOM;
            NEW row1 {
                title = 'Родитель';
                ADD PROPERTY (nameParentCategory);
            }
            NEW row2 {
                childConstraints = TO THE RIGHT;
                title = 'Название';
                ADD PROPERTY (name);
                ADD PROPERTY (nameOrigin);
            }
            NEW row3 {
                title = 'Доп. информация';
                childConstraints = TO THE RIGHT;
                ADD PROPERTY (nameTypeInvoiceCategory) {preferredCharWidth = 15;}
                ADD PROPERTY (warrantyCategory);
                ADD PROPERTY (nameUnitOfMeasureCategory) {preferredCharWidth = 15;}
                ADD PROPERTY (necessaryStampCategory);
            }
        };
        ADD l.box;
    }
    ADD functions.box;
}

addCategory 'Добавить' = ACTION (category) NEWSESSION {
    ADDOBJ category;
    FOR g == addedObject() DO {
        SET parentCategory(g) <- category AS category;
        FORM category OBJECTS g=addedObject() MODAL;
        IF formResult() == formResult.ok THEN
            EXEC apply();
    };
} TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

FORM categories 'Товарные группы'
    TREE treeGroups g=category PARENT parentCategory
    PROPERTIES READONLY name(g)
    PROPERTIES(g) addCategory, EDITFORM
    ORDER BY name

    OBJECTS cg=category
    PROPERTIES(cg) READONLY canonicalNameCategory, name, nameOrigin, nameTypeInvoiceCategory, warrantyCategory, nameUnitOfMeasureCategory, necessaryStampCategory
    PROPERTIES(cg)          delete

    ORDER BY canonicalNameCategory

    FILTERGROUP filters
        FILTER 'Все листья' 'F10' isParentLeafCategoryCategory(cg, g) DEFAULT
        FILTER 'Всех потомков' 'F9' isParentCategoryCategory(cg, g)
        FILTER 'Только непосредственных потомков' 'F8' parentCategory(cg) == g
;

DESIGN categories FROM DEFAULT {

    NEW topContainer {
        childConstraints = TO THE RIGHT;
        type = SPLITH;

        ADD treeGroups.tree.box ;

        ADD cg.box{
            fillHorizontal = 4;
        }
    }

    ADD functions.box;
}

FORM categoryDialog 'Товарные группы'
    TREE treeGroups g=category PARENT parentCategory
    PROPERTIES(g) READONLY name
    PROPERTIES(g) addCategory, EDITFORM
    ORDER BY name

    DIALOG category OBJECT g
;

//FORM country 'Страна'
//    OBJECTS c = country FIXED PANEL
//    PROPERTIES(c) name, nameOrigin
//
//    OBJECTS l = language
//    PROPERTIES name(l) READONLY, languageName(c, l)
//
//    EDIT country OBJECT c
//;
//
//FORM countries 'Страны'
//    OBJECTS c = country
//    PROPERTIES(c) name, nameOriginCountry, sidCountry, sidOrigin2Country, sidOrigin3Country, sid3Country
//    DIALOG country OBJECT c
//;


// ---------------------------------- Формы для выбора атрибутов ------------------------------------ //

FORM gender 'Пол'
    OBJECTS g = gender FIXED PANEL
    PROPERTIES(g) sidGender

    OBJECTS l= language
    PROPERTIES(l) READONLY name
    PROPERTIES(g, l) languageName

    EDIT gender OBJECT g;
;

FORM gendersDialog 'Пол'

    OBJECTS g = gender
    PROPERTIES(g) READONLY sidGender
    PROPERTIES(g) ADDFORM, EDITFORM, delete
    DIALOG gender OBJECT g;
;

FORM typeFabric 'Тип одежды'

    OBJECTS t = typeFabric FIXED PANEL
    PROPERTIES(t) name

    OBJECTS l= language
    PROPERTIES(l) READONLY name
    PROPERTIES(t, l) languageName

    EDIT typeFabric OBJECT t;
;

FORM typeFabrics 'Типы одежды'
    OBJECTS t = typeFabric
    PROPERTIES(t) READONLY name
    PROPERTIES(t) ADDFORM, EDITFORM, delete
    DIALOG typeFabric OBJECT t
;

FORM seasonYear 'Сезон'

    OBJECTS s = seasonYear FIXED PANEL
    PROPERTIES(s) nameSeasonSeasonYear, yearSeasonYear, nameSeasonYear

    EDIT seasonYear OBJECT s;
;

FORM seasonYears 'Сезоны'
    OBJECTS ss = season
    PROPERTIES(ss) READONLY name
    OBJECTS s = seasonYear
    PROPERTIES(s) READONLY nameSeasonSeasonYear, yearSeasonYear, nameSeasonYear
    PROPERTIES(s) ADDFORM, EDITFORM, delete
    //DIALOG seasonYear OBJECT s;
;

FORM dialogSeasonYear 'Сезон'
    OBJECTS s = seasonYear
    PROPERTIES(s) READONLY nameSeasonSeasonYear, yearSeasonYear, nameSeasonYear
    DIALOG seasonYear OBJECT s;
;

FORM unitOfMeasures 'Единицы измерений'
    OBJECTS u = unitOfMeasure
    PROPERTIES(u) READONLY name, shortName, nameOrigin
    DIALOG unitOfMeasure OBJECT u
;


//----------------------Определения себестоимости при создании оптового прайса  ----------------------//

// todo : это нужно убрать
priceCustomBatch 'Себестоимость (БУ)' (batch) = ABSTRACT NUMERIC[14,2] (batch) PERSISTENT;
priceManagerialBatch 'Себестоимость (УУ)' (batch) = ABSTRACT NUMERIC[14,2] (batch) PERSISTENT;


concatPriceCustomBatchArticleDateTime (article, dateTime) = GROUP MAX orderBatch(batch) AND priceCustomBatch(batch) AND
                                                                dateTimeBatch(batch) < (dateTime AS DATETIME)
                                                                BY articleSku(skuBatch(batch)), dateTime;

batchPriceCustomArticleDateTime (article, dateTime) = concatPriceCustomBatchArticleDateTime(article, dateTime)[2];
priceCustomDateTime(article, dateTime) = priceCustomBatch(batchPriceCustomArticleDateTime(article, dateTime));


concatPriceManagerialBatchArticleDateTime (article, dateTime) = GROUP MAX orderBatch(batch) AND priceManagerialBatch(batch) AND
                                                                dateTimeBatch(batch) < (dateTime AS DATETIME)
                                                                BY articleSku(skuBatch(batch)), dateTime;

batchPriceManagerialArticleDateTime (article, dateTime) = concatPriceManagerialBatchArticleDateTime(article, dateTime)[2];
priceManagerialDateTime(article, dateTime) = priceManagerialBatch(batchPriceManagerialArticleDateTime(article, dateTime));


//--------------------------------- Склады временного хранения -------------------------------------------//

TABLE customStore (customStore);
groupWarehouseCustomStore = DATA groupWarehouse(customStore);
nameGroupWarehouseCustomStore 'Группа складов' (customStore) = name(groupWarehouseCustomStore(customStore));

stockGroupStock (stock) += groupWarehouseCustomStore(stock);

allowImportExportXLSLegalEntityUA 'Разрешить импорт/экспорт из/в Excel(Украина)' = DATA BOOLEAN (legalEntity) IN lawGroup;
allowImportExportXLSLegalEntityBY 'Разрешить импорт/экспорт из/в Excel(Беларусь)' = DATA BOOLEAN (legalEntity) IN lawGroup;

FORM customStore 'Склад временного хранения'

    OBJECTS c=customStore FIXED PANEL

    PROPERTIES(c) name, nameGroupWarehouseCustomStore, fullNameLegalEntity, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity,
                  UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity,
                  addressLegalEntity, dialogAddressLegalEntity,
                  postAddressLegalEntity, dialogPostAddressLegalEntity,
                  managerLegalEntity, dialogManagerLegalEntity,
                  accountantLegalEntity, dialogAccountantLegalEntity,
                  phoneLegalEntity, dialogPhoneLegalEntity,
                  emailLegalEntity, siteLegalEntity, allowImportExportXLSLegalEntityUA, allowImportExportXLSLegalEntityBY

    EDIT customStore OBJECT c
;

DESIGN customStore FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        c.box {
            childConstraints = TO THE BOTTOM;

            NEW row1 {
                childConstraints = TO THE RIGHT;
                ADD c.lawGroup{
                    childConstraints = TO THE BOTTOM;
                }
            }
            NEW row2{
                childConstraints = TO THE RIGHT;
                ADD c.contactGroup {
                    childConstraints = TO THE BOTTOM;
                }
                ADD c.managementGroup {
                    childConstraints = TO THE BOTTOM;
                }
                ADD c.docGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }
        }

        ADD functions.box;
    }
}

FORM customStores 'Склады временного хранения'

    OBJECTS c=customStore

    PROPERTIES(c) READONLY name, fullNameLegalEntity, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity,
                  UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity,
                  addressLegalEntity, postAddressLegalEntity, managerLegalEntity, accountantLegalEntity, phoneLegalEntity,
                  emailLegalEntity, siteLegalEntity, allowImportExportXLSLegalEntityUA, allowImportExportXLSLegalEntityBY

    PROPERTIES(c) ADDFORM, EDITFORM, delete

;

EXTEND FORM company
    PROPERTIES(co) nameOrigin, addressOriginSubject, addressSubject, contractImporter, sidImporter
;

EXTEND DESIGN company {
    co.box {
        NEW column3 {
            title = 'Данные для Sintitex';
            childConstraints = TO THE BOTTOM;

            ADD PROPERTY (nameOrigin(co));
            ADD PROPERTY (addressOriginSubject(co));
            ADD PROPERTY (addressSubject(co));
            ADD PROPERTY (contractImporter(co));
            ADD PROPERTY (sidImporter(co));
        }
    }
}


@extendStockFormAccountDocumentLedger(warehouse, w);
@extendStockFormAccountDocumentLedger(departmentStore, d);
@extendStockFormAccountDocumentLedger(customStore, c);

//----------------------------Concat для фрахта и декларации--------------------------//

canonicalBrandFreight 'Бренды' (freight) = castToString255(
    [GROUP CONCAT commonName(brandSupplier) IF quantityFreightBrandSupplier(freight, brandSupplier), ' , ' BY freight](freight))
    MINCHARWIDTH 50 MAXCHARWIDTH 100 PREFCHARWIDTH 100 PERSISTENT;


@defineNumeratedObject(freight, 'Нумератор для фрахтов', 'ФР');

EXTEND FORM freightListForm
    PROPERTIES (freight) READONLY numberObject BEFORE date, seriesObject BEFORE date, canonicalBrandFreight BEFORE dateArrivalFreight
;

FORM skuDialog 'SKU'

    OBJECTS s=sku

    PROPERTIES(s) READONLY barcode, nameSku, nameCategoryArticleSku, nameBrandSupplierArticleSku, sidArticleSku, shortNameUOMSku,
                           nameSupplierArticleSku, sidSizeSupplierItem FORCE GRID, sidColorSupplierItem FORCE GRID, nameColorSupplierItem FORCE GRID

    DIALOG sku OBJECT s
;

//----------------------------- для печати маркировок ----------------------------------------------------------------//

nameImporterSku 'Наименование' (importer, sku) = name(importer) AND importer IS company AND sku IS sku;
addressImporterSku 'Адрес' (importer, sku) = addressLegalEntity(importer) AND importer IS company AND sku IS sku;

localeLanguageCompany (company) = localeLanguage(languageLegalEntity(company));
mainCompositionSkuCompany 'Состав (иностр.)' (sku, company) = mainCompositionSkuLanguage(sku, languageLegalEntity(company)) MINCHARWIDTH 20 MAXCHARWIDTH 50 PREFCHARWIDTH 50;
additionalCompositionSkuCompany 'Доп. состав (иностр.)' (sku, company) = additionalCompositionSkuLanguage(sku, languageLegalEntity(company)) MINCHARWIDTH 20 MAXCHARWIDTH 50 PREFCHARWIDTH 50;
nameCategoryArticleSkuCompany 'Номенклатурная группа' (sku, company)= nameCategoryArticleSkuLanguage(sku, languageLegalEntity(company)) MINCHARWIDTH 20 MAXCHARWIDTH 50 PREFCHARWIDTH 50;
sidGenderArticleSkuCompany 'Пол' (sku, company) = sidGenderArticleSkuLanguage(sku, languageLegalEntity(company)) MINCHARWIDTH 10 MAXCHARWIDTH 30 PREFCHARWIDTH 30;
nameCountrySkuCompany 'Страна (сделано в)' (sku, company) = nameCountrySkuLanguage(sku, languageLegalEntity(company)) MINCHARWIDTH 20 MAXCHARWIDTH 50 PREFCHARWIDTH 50;
nameCountryBrandSupplierSkuCompany 'Страна поставки' (sku, company) =nameCountryBrandSupplierSkuLanguage(sku, languageLegalEntity(company)) MINCHARWIDTH 20 MAXCHARWIDTH 50 PREFCHARWIDTH 50;

META defineCompositionSkuLanguageDetailCustom (detail, stockProp)
    mainComposition###detail 'Состав (иностр.)' (detail) = mainCompositionSkuLanguage(sku###detail(detail), languageStock(stockProp###detail(detail))) MINCHARWIDTH 20 MAXCHARWIDTH 50 PREFCHARWIDTH 50;
    additionalComposition###detail 'Доп. состав (иностр.)' (detail) = additionalCompositionSkuLanguage(sku###detail(detail), languageStock(stockProp###detail(detail))) MINCHARWIDTH 20 MAXCHARWIDTH 50 PREFCHARWIDTH 50;
    nameCategoryArticle###detail 'Номенклатурная группа' (detail)= nameCategoryArticleSkuLanguage(sku###detail(detail), languageStock(stockProp###detail(detail))) MINCHARWIDTH 20 MAXCHARWIDTH 50 PREFCHARWIDTH 50;
    sidGenderArticle###detail 'Пол' (detail) = sidGenderArticleSkuLanguage(sku###detail(detail), languageStock(stockProp###detail(detail))) MINCHARWIDTH 10 MAXCHARWIDTH 30 PREFCHARWIDTH 30;
    nameCountry###detail 'Страна (сделано в)' (detail) = nameCountrySkuLanguage(sku###detail(detail), languageStock(stockProp###detail(detail))) MINCHARWIDTH 20 MAXCHARWIDTH 50 PREFCHARWIDTH 50;
    nameCountryBrandSupplier###detail 'Страна поставки' (detail) =nameCountryBrandSupplierSkuLanguage(sku###detail(detail), languageStock(stockProp###detail(detail))) MINCHARWIDTH 20 MAXCHARWIDTH 50 PREFCHARWIDTH 50;
END

//-------------------------------- НДС на кассе ------------------------- //

VATRetailSkuDepartmentStoreDateTime(sku, departmentStore, dateTime) += retailVATBLedgerDateTime(sku, departmentStore, dateTime);

//@implementSkuLedger(userPriceChange, sku, departmentStore);
//quantityInLIFOSkuLedger (ledger) += quantityUserPriceChangeDetail(ledger) (-) quantityUserPriceChangeDetail(ledger);
//limitInLIFOSkuLedgerBatch (ledger, batch) +=  (quantityUserPriceChangeDetail(ledger) (-) quantityUserPriceChangeDetail(ledger)) AND  batch IS batch;
//sumInSkuLedger(ledger) += (retailPriceUserPriceChangeDetail(ledger) (-) curRetailPriceUserPriceChangeDetail(ledger))*quantityUserPriceChangeDetail(ledger);

// ------------------------------------------------------------ Глобальные параметры --------------------------------- //

EXTEND FORM options
    PROPERTIES() barcodePrefix,
                 nameDictionaryComposition, nameDictionaryName,
                 nameTypeExchangeSTX, nameTypeExchangeCustom, nameTypeExchangePayCustom, nameTypeExchangePayManagerial,
                 nameCurrencyPayFreights, nameCurrencyCustom,
                 NDSPercentCustom, percentCostFreights, tariffVolumeFreights,
                 sidTypeDutyDuty, nameTypeDutyDuty,
                 sidTypeDutyNDS, nameTypeDutyNDS,
                 sidTypeDutyRegistration, nameTypeDutyRegistration
;
EXTEND DESIGN options {
    commons {
        ADD PROPERTY(barcodePrefix);
        ADD PROPERTY(nameDictionaryComposition);
        ADD PROPERTY(nameDictionaryName);
        ADD PROPERTY(nameTypeExchangeSTX);
        ADD PROPERTY(nameTypeExchangeCustom);
        ADD PROPERTY(nameTypeExchangePayCustom);
        ADD PROPERTY(nameTypeExchangePayManagerial);
        ADD PROPERTY(nameCurrencyPayFreights);
        ADD PROPERTY(nameCurrencyCustom);
        ADD PROPERTY(NDSPercentCustom);
        ADD PROPERTY(percentCostFreights);
        ADD PROPERTY(tariffVolumeFreights);
        ADD PROPERTY(sidTypeDutyDuty);
        ADD PROPERTY(nameTypeDutyDuty);
        ADD PROPERTY(sidTypeDutyNDS);
        ADD PROPERTY(nameTypeDutyNDS);
        ADD PROPERTY(sidTypeDutyRegistration);
        ADD PROPERTY(nameTypeDutyRegistration);
    }
}

EXTEND FORM migrationData

    OBJECTS l = language FIXED PANEL
    PROPERTIES(l) SELECTOR name

    OBJECTS m = multiLanguageNamed
    PROPERTIES(m) name TODRAW m FORCE GRID
    PROPERTIES(m, l) languageName

;

EXTEND DESIGN migrationData {
    pane {
        NEW lm {
            caption = 'Перевод';
            ADD l.box{
                caption = 'Язык перевода(иностр.)';
            }
            ADD m.box{
                caption = 'Наименования';
            }
        }
    }
}