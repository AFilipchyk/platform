MODULE MasterData;

REQUIRE System,
        Stock,
        Store,
        LegalEntity,
        Barcode,
        CRM,
        RomanLogicsModule;

PRIORITY Stock, LegalEntity, Store, RomanLogicsModule;

//--------------------------------- Дисконтные группы -------------------------------------------//

inDiscountCardBrandSupplier 'Вкл.' (discountCard, brandSupplier) = DATA BOOLEAN (discountCard, brandSupplier);

inDiscountSkuGroupSku (discountSkuGroup, sku) += brandSupplierArticleSku(sku) == discountSkuGroup;
inDiscountCardDiscountSkuGroup (discountCard, discountSkuGroup) += inDiscountCardBrandSupplier(discountCard, discountSkuGroup);


// отбор артикулов
inBrandSupplier (supplier, brandSupplier) = supplierBrandSupplier(brandSupplier) == supplier;
inArticleBrand (brandSupplier, article) = brandSupplierArticle(article) == brandSupplier;

inArticleCategory (category, article) = UNION OVERRIDE categoryArticle(article) == category,
                                                       article == article AND NOT category;

//stringEqualsAll(string) = string == 'Все';

inSupplierBrandArticle(supplier, brand, article) = UNION OVERRIDE brandSupplierArticle(article) == brand AND supplier IS supplier,
                                                                  supplierArticle(article) == supplier AND NOT brand,
                                                                  article == article AND NOT supplier AND NOT brand;



// подбор курса обмена валют

META defineNearestRateExchangeObject(object, propDate, group)

    nearestPredDate###object(object) = GROUP MAX date IF rateExchange(typeExchange###object(object), currency###object(object), date) AND date < propDate(object) AND date IS DATE BY object;

    rateExchange###object 'Курс обмена' (object) = rateExchange(typeExchange###object(object), currency###object(object), nearestPredDate###object(object)) IF object IS object IN group;

END

//------------------------ Приведение штрих-кодов RomanLogicsModule к логике Barcode.lsf -----------------------------//

syncBarcodeSku 'Синхронизировать штрих-код' (sku) = ACTION (sku) {
//    SET dataBarcodeIdDate(barcode, date) IF barcode == barcode(sku AS RomanLogicsModule.sku) AND date == 2001_01_01 NOT NULL;

    LOCAL syncBarcode = barcode();
    SET syncBarcode() <- [GROUP MAX barcode BY skuBarcode(barcode)](sku AS RomanLogicsModule.sku); //dataBarcodeIdDate(barcode(sku), 2001_01_01);
    IF TRUE AND NOT syncBarcode() IS barcode THEN {
        ADDOBJ barcode;
        SET syncBarcode() <- addedObject();
        SET skuBarcode(barcode) IF barcode == syncBarcode() <- sku AS RomanLogicsModule.sku;
    }

    SET idBarcode(barcode) IF barcode == syncBarcode() <- barcode(sku AS RomanLogicsModule.sku);
} IN baseGroup;

syncBarcodeSku(sku) WHEN CHANGED(barcode(sku) AND sku IS RomanLogicsModule.sku);

FORM syncBarcodeSkuForm 'Синхронизация шрих-кодов'

    OBJECTS s = sku
    PROPERTIES(s) READONLY nameSku
    PROPERTIES(s) syncBarcodeSku
;

//----------------------Определения себестоимости при создании оптового прайса  ----------------------//

priceCustomBatch 'Себестоимость (БУ)' (batch) = ABSTRACT NUMERIC[14,2] (batch) PERSISTENT;
priceManagerialBatch 'Себестоимость (УУ)' (batch) = ABSTRACT NUMERIC[14,2] (batch) PERSISTENT;


concatPriceCustomBatchArticleDateTime (article, dateTime) = GROUP MAX orderBatch(batch) AND priceCustomBatch(batch) AND
                                                                dateTimeBatch(batch) < (dateTime AS DATETIME)
                                                                BY articleSku(skuBatch(batch)), dateTime;

batchPriceCustomArticleDateTime (article, dateTime) = concatPriceCustomBatchArticleDateTime(article, dateTime)[2];
priceCustomDateTime(article, dateTime) = priceCustomBatch(batchPriceCustomArticleDateTime(article, dateTime));


concatPriceManagerialBatchArticleDateTime (article, dateTime) = GROUP MAX orderBatch(batch) AND priceManagerialBatch(batch) AND
                                                                dateTimeBatch(batch) < (dateTime AS DATETIME)
                                                                BY articleSku(skuBatch(batch)), dateTime;

batchPriceManagerialArticleDateTime (article, dateTime) = concatPriceManagerialBatchArticleDateTime(article, dateTime)[2];
priceManagerialDateTime(article, dateTime) = priceManagerialBatch(batchPriceManagerialArticleDateTime(article, dateTime));


//---------------------------------  -------------------------------------------//
CLASS warehouse 'Склад' : Stock.stock;
CLASS groupWarehouse 'Группа складов' : stockGroup;

@defineHierarchy(groupWarehouse);
parentStockGroup (stockGroup) += parentGroupWarehouse (stockGroup);

companyWarehouse (warehouse) = DATA company(warehouse);
nameCompanyWarehouse 'Импортер ' (warehouse) = name(companyWarehouse(warehouse)) IN baseGroup;
companyStock (stock) += companyWarehouse(stock);

groupWarehouseWarehouse (warehouse) = DATA groupWarehouse(warehouse);
nameGroupWarehouseWarehouse 'Группа складов' (warehouse) = name(groupWarehouseWarehouse(warehouse)) IN baseGroup;

stockGroupStock (stock) += groupWarehouseWarehouse (stock);

addressWarehouse 'Адрес' (warehouse) = DATA STRING[100] (warehouse);
addressStock(stock) += addressWarehouse(stock);

FORM warehouse 'Оптовый склад'

    OBJECTS           w=warehouse FIXED PANEL
    PROPERTIES(w)     name, nameGroupWarehouseWarehouse, addressWarehouse, nameCompanyWarehouse

    ORDER BY          name
    EDIT warehouse OBJECT w
;

FORM warehouses 'Оптовые склады'

    OBJECTS           w=warehouse
    PROPERTIES(w)     READONLY name, addressWarehouse, nameCompanyWarehouse
    PROPERTIES(w)     ADDFORM, EDITFORM, delete

    ORDER BY          name
;

groupWarehouseCustomStore = DATA groupWarehouse(customStore);
nameGroupWarehouseCustomStore 'Группа складов' (customStore) = name(groupWarehouseCustomStore(customStore));

stockGroupStock (stock) += groupWarehouseCustomStore(stock);

FORM customStore 'Склад временного хранения'

    OBJECTS c=customStore FIXED PANEL

    PROPERTIES(c) name, nameGroupWarehouseCustomStore, fullNameLegalEntity, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity,
                  UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity,
                  addressLegalEntity, dialogAddressLegalEntity,
                  postAddressLegalEntity, dialogPostAddressLegalEntity,
                  managerLegalEntity, dialogManagerLegalEntity,
                  accountantLegalEntity, dialogAccountantLegalEntity,
                  phoneLegalEntity, dialogPhoneLegalEntity,
                  emailLegalEntity, siteLegalEntity

    EDIT customStore OBJECT c
;

DESIGN customStore FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        c.box {
            childConstraints = TO THE BOTTOM;

            NEW row1 {
                childConstraints = TO THE RIGHT;
                ADD c.lawGroup{
                    childConstraints = TO THE BOTTOM;
                }
            }
            NEW row2{
                childConstraints = TO THE RIGHT;
                ADD c.contactGroup {
                    childConstraints = TO THE BOTTOM;
                }
                ADD c.managementGroup {
                    childConstraints = TO THE BOTTOM;
                }
                ADD c.docGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }
        }

        ADD functions.box;
    }
}

FORM customStores 'Склады временного хранения'

    OBJECTS c=customStore

    PROPERTIES(c) READONLY name, fullNameLegalEntity, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity,
                  UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity,
                  addressLegalEntity, postAddressLegalEntity, managerLegalEntity, accountantLegalEntity, phoneLegalEntity,
                  emailLegalEntity, siteLegalEntity

    PROPERTIES(c) ADDFORM, EDITFORM, delete

;

FORM importer 'Компания'
    OBJECTS co=company FIXED PANEL
    PROPERTIES(co) name, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity, fullNameLegalEntity, addressLegalEntity,
                   dialogAddressLegalEntity, postAddressLegalEntity, dialogPostAddressLegalEntity, managerLegalEntity,
                   dialogManagerLegalEntity, accountantLegalEntity, dialogAccountantLegalEntity, phoneLegalEntity, dialogPhoneLegalEntity,
                   UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity, emailLegalEntity, siteLegalEntity,
                   nameOrigin, addressOriginSubject, addressSubject, contractImporter, sidImporter

    OBJECTS c=contract

    PROPERTIES(c)  READONLY sidContract, dateContract, nameSellerContract, nameCurrencyContract, conditionShipmentContract, conditionPaymentContract
    PROPERTIES(c)  ADDFORM, EDITFORM, delete
    ORDER BY       nameSellerContract

    OBJECTS a=account
    PROPERTIES(a)  numberAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount, MFOBankAccount, noteAccount, ADDOBJ, delete
    FILTERS legalEntityAccount(a) == co

    FILTERS subjectContract(c) == co

    EDIT company OBJECT co
;

DESIGN importer FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        co.box {
            childConstraints = TO THE BOTTOM;

            NEW row1 {
                childConstraints = TO THE RIGHT;
                ADD co.lawGroup{
                    childConstraints = TO THE BOTTOM;
                }

                NEW row11 {
                    title = 'Оригинал';
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY (nameOrigin(co));
                    ADD PROPERTY (addressOriginSubject(co));
                    ADD PROPERTY (addressSubject(co));
                    ADD PROPERTY (contractImporter(co));
                    ADD PROPERTY (sidImporter(co));
                }
            }
            NEW row2{
                childConstraints = TO THE RIGHT;
                ADD co.contactGroup {
                    childConstraints = TO THE BOTTOM;
                }
                ADD co.managementGroup {
                    childConstraints = TO THE BOTTOM;
                }
                ADD co.docGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }
        }
        ADD c.box;
        ADD a.box;
        ADD functions.box;

    }
}

FORM importers 'Компании'
    OBJECTS co=company
    PROPERTIES(co) READONLY name, fullNameLegalEntity, shortNameOwnershipLegalEntity, UNPLegalEntity, numberAccountLegalEntity, addressLegalEntity, phoneLegalEntity
    PROPERTIES(co) ADDFORM, EDITFORM, delete
;