MODULE InnerOrder;

REQUIRE System,
        Document,
        RomanDocument,
        Stock,
        RomanStock,
        RetailPrice,
        DocumentTransfer,
        Move,
        Transfer,
        RomanLogicsModule;

PRIORITY Stock, RomanLogicsModule;

// ---------------------------------------- Внутренний заказ ------------------------------------ //
CLASS innerOrder 'Внутренний заказ': historyObject, numeratedObject;
CLASS innerOrderDetail 'Строка внутреннего заказа';

defaultNumeratorInnerOrders = DATA numerator ();
nameDefaultNumeratorInnerOrder 'Нумератор для внутренних заказов' = name(defaultNumeratorInnerOrders());

//numeratorInnerOrder 'Нумератор (ИД)' = DATA numerator (innerOrder);
//nameNumeratorInnerOrder 'Нумератор' = name(numeratorInnerOrder(innerOrder));

initValueNumeratorObject(object) += defaultNumeratorInnerOrders() IF object IS innerOrder;
initWhenNumeratorObject(object) += ASSIGNED(object IS innerOrder);

defaultNumeratorOrderPickings = DATA numerator ();
nameDefaultNumeratorOrderPicking 'Нумератор для подборок товара по заказу' = name(defaultNumeratorOrderPickings());

initValueNumeratorObject(object) += defaultNumeratorOrderPickings() IF object IS orderPicking;
initWhenNumeratorObject(object) += ASSIGNED(object IS orderPicking);

@defineDocument(innerOrder);

@defineDocumentStock(innerOrder, stock, 'Склад-отправитель');
@defineDocumentStockPrefix(innerOrder, stock, 'Склад-получатель', destination);

@defineDocumentDescription (innerOrder, 'Внутренний заказ');

@defineDocumentDetailNumbered(innerOrder);

@defineDocumentDetailSku(innerOrder, sku);

@defineDocumentDetailQuantity(innerOrder);

@defineDocumentDetailPackWeightSku(innerOrder);

@defineDocumentDetailSkuBalance(innerOrder, sku, stock);

@defineDocumentHeaderQuantity(innerOrder);
@defineDocumentHeaderSkuQuantity(innerOrder, sku);

@defineDocumentDetailSkuArticle(innerOrder);

// Кнопки подбора
@defineAddDetailDialogSkuStock(innerOrder, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(innerOrder, sku);

FORM innerOrder 'Внутренний заказ'
    OBJECTS o = innerOrder FIXED PANEL

    PROPERTIES (o) nameNumeratorObject, numberObject, seriesObject, dateInnerOrder, timeInnerOrder,
        nameStockInnerOrder, nameDestinationStockInnerOrder, noteInnerOrder,
        countInnerOrderDetailInnerOrder, quantityInnerOrderDetailInnerOrder

    OBJECTS d = innerOrderDetail

    PROPERTIES(o) TODRAW d addDetailDialogSkuStockInnerOrderDetailInnerOrder, addDetailDialogBarcodeInnerOrderDetailInnerOrder,
                           deleteInnerOrderDetailInnerOrder

    FILTERS innerOrderInnerOrderDetail(d) == o

    EDIT innerOrder OBJECT o
;

DESIGN innerOrder FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
            o.box {
//                childConstraints = TO THE RIGHT;
                    NEW columnHeaderPrm {
                    childConstraints = TO THE BOTTOM;
                    ADD o.documentHeaderGroup {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY (nameStockInnerOrder);
                        ADD PROPERTY (nameDestinationStockInnerOrder);
                        ADD PROPERTY (nameNumeratorObject);
                        ADD PROPERTY (numberObject);
                        ADD PROPERTY (seriesObject);
                        ADD PROPERTY (dateInnerOrder);
                        ADD PROPERTY (timeInnerOrder);
                    }
                    ADD o.documentPrmGroup;
                    ADD o.documentSumGroup {
                        childConstraints = TO THE BOTTOM;
                    }
                }
        }
    }
}

FORM innerOrders 'Внутренние заказы'
    OBJECTS o = innerOrder
    PROPERTIES (o) READONLY numberObject, seriesObject, dateInnerOrder, timeInnerOrder,
                            nameStockInnerOrder, nameDestinationStockInnerOrder, noteInnerOrder,
                            countInnerOrderDetailInnerOrder, quantityInnerOrderDetailInnerOrder

    PROPERTIES (o) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES (o) ADDFORM, EDITFORM, delete FORCE PANEL

    OBJECTS d = innerOrderDetail

    FILTERS innerOrderInnerOrderDetail(d) == o
;

DESIGN innerOrders FROM DEFAULT {
    PROPERTY (delete(o)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }

    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD o.box {
            fillVertical = 1;
        };

        NEW documentDetail {
            type = TABBED;
            fillVertical = 2.5;
            ADD d.box {
                title = 'Спецификация';
            }
            NEW documentHistory {
                title = 'История';

                ADD o.historyGroup;
                ADD o.postedGroup;
            }
        }
    }
}

@extendDocumentFormDetailSkuArticle(innerOrder, d, innerOrder);
@extendDocumentFormDetailSkuArticleReadonly(innerOrders, d, innerOrder);

// ---------------------------------------- Подбор товара ------------------------------------ //
CLASS orderPicking 'Подбор товара по заказу': historyObject, numeratedObject;
CLASS orderPickingPosted 'Проведенный подбор товара по заказу': orderPicking, postedObject;

CLASS orderPickingDetail 'Строка подбора товара по заказу';

innerOrderOrderPicking 'Подбор товара по заказу (ИД)' (orderPicking) = DATA innerOrder (orderPicking) IN idGroup AUTOSET;
//orderPickingInnerOrder 'Подбор заказа (ИД)' (innerOrder) = GROUP UNIQUE  orderPicking BY innerOrderOrderPicking(orderPicking);

inInnerOrderOrderPicking (innerOrder, orderPicking) = innerOrderOrderPicking(orderPicking) == innerOrder;

//CONSTRAINT innerOrderOrderPicking(p1) == innerOrderOrderPicking(p2) AND p1 != p2 CHECKED BY innerOrderOrderPicking
//    MESSAGE 'Заказ задествован в другом подборе';

@defineDocument(orderPicking);
@defineDocumentPosted(orderPicking);

@defineDocumentAggregationHeaderStockPrefix(innerOrder, orderPicking, stock, 'Склад-получатель', destination, destination);
@defineDocumentAggregationHeaderStockPrefix(innerOrder, orderPicking, stock, 'Склад-отправитель', , );



@defineDocumentAggregationHeaderNumber(innerOrder, orderPicking);

@defineDocumentDescriptionCustom(orderPicking, orderPickingDetail, seriesNumberObject, 'Подбор товара по заказу');

@defineDocumentDetailSku(orderPicking, sku);

@defineDocumentDetailQuantity(orderPicking);

@defineDocumentDetailSkuArticle(orderPicking);

@defineDocumentHeaderQuantity(orderPicking);
@defineDocumentHeaderSkuQuantity(orderPicking, sku);

retailPriceOrderPickingDetail 'Цена розничная' = DATA NUMERIC[14,2] (orderPickingDetail);
retailSumOrderPickingDetail 'Сумма розничная' (detail) = quantityOrderPickingDetail(detail) * retailPriceOrderPickingDetail(detail);

retailPriceOrderPickingDetail(orderPickingDetail) <- priceDiscountPriceSetDocumentArticleDateTime(articleSku(skuOrderPickingDetail(orderPickingDetail)), dateTimeOrderPickingDetail(orderPickingDetail))
                                                        WHEN CHANGED(dateTimeOrderPickingDetail(orderPickingDetail))
                                                             OR CHANGED(skuOrderPickingDetail(orderPickingDetail));

// Кнопки подбора
@defineAddDetailDialogSkuStock(orderPicking, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(orderPicking, sku);

//postOrderPickingInnerOrder 'Закрыть подборку' (innerOrder) = postOrderPicking(orderPickingInnerOrder(innerOrder)) TOOLBAR;
//isDraftOrderPickingInnerOrder (innerOrder) = isDraftOrderPicking(orderPickingInnerOrder(innerOrder));
//isPostedOrderPickingInnerOrder (innerOrder) = isPostedOrderPicking(orderPickingInnerOrder(innerOrder));
//
//quantityOrderPickingInnerOrderSku 'Количество подобрано' (sku, innerOrder) =
//    quantityOrderPickingDetailSkuOrderPicking (sku, orderPickingInnerOrder(innerOrder));
//
//quantityOrderPickingInnerOrderDetail 'Количество подобрано' (innerOrderDetail) =
//    quantityOrderPickingInnerOrderSku(skuInnerOrderDetail(innerOrderDetail), innerOrderInnerOrderDetail(innerOrderDetail));

quantitySkuInnerOrder 'Количество подобрано по всем подборкам' (sku, innerOrder) = GROUP SUM
    quantityOrderPickingDetailSkuOrderPicking (sku, orderPicking) BY sku, innerOrderOrderPicking(orderPicking);

quantityOrderPickingInnerOrderDetail 'Количество подобрано' (innerOrderDetail) =
    quantitySkuInnerOrder(skuInnerOrderDetail(innerOrderDetail), innerOrderInnerOrderDetail(innerOrderDetail));

FORM orderPicking 'Подбор товара'
    OBJECTS o = innerOrder
    OBJECTS p = orderPicking FIXED PANEL

    PROPERTIES (p) nameNumeratorObject, numberObject, seriesObject, dateOrderPicking, timeOrderPicking,
        nameStockOrderPicking, nameDestinationStockOrderPicking, noteOrderPicking,
        countOrderPickingDetailOrderPicking, quantityOrderPickingDetailOrderPicking


    OBJECTS s = sku
    PROPERTIES(s) READONLY barcode, nameSku, nameCategoryArticleSku, nameBrandSupplierArticleSku, sidArticleSku,
                           sidSizeSupplierItem FORCE GRID, sidColorSupplierItem FORCE GRID, nameColorSupplierItem FORCE GRID, shortNameUOMSku
    PROPERTIES(s, o) quantityInnerOrderDetailSkuInnerOrder, quantitySkuInnerOrder
    PROPERTIES(s, p) quantityOrderPickingDetailSkuOrderPicking

    FILTERS quantityInnerOrderDetailSkuInnerOrder(s, o)

    FILTERGROUP filters1
        FILTER 'Неподобранные товары' 'F10' (quantityInnerOrderDetailSkuInnerOrder(s, o) (-) quantitySkuInnerOrder(s, o)) > 0 DEFAULT

    OBJECTS d = orderPickingDetail

    PROPERTIES(p) TODRAW d addDetailDialogSkuStockOrderPickingDetailOrderPicking, addDetailDialogBarcodeOrderPickingDetailOrderPicking,
                           deleteOrderPickingDetailOrderPicking

    FILTERS orderPickingOrderPickingDetail(d) == p

    EDIT orderPicking OBJECT p
;

@extendDocumentFormDetailSkuArticle(orderPicking, d, orderPicking);

EXTEND FORM orderPicking
    PROPERTIES(d) retailPriceOrderPickingDetail
;

DESIGN orderPicking FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
            p.box {
                childConstraints = TO THE RIGHT;
                    NEW columnHeaderPrm {
                    childConstraints = TO THE BOTTOM;
                    ADD p.documentHeaderGroup {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY (nameStockOrderPicking);
                        ADD PROPERTY (nameDestinationStockOrderPicking);
                        ADD PROPERTY (nameNumeratorObject);
                        ADD PROPERTY (numberObject);
                        ADD PROPERTY (seriesObject);
                        ADD PROPERTY (dateOrderPicking);
                        ADD PROPERTY (timeOrderPicking);
                    }
                    ADD p.documentPrmGroup;
                }
                NEW columnHeaderSum {
                    ADD p.documentSumGroup {
                        childConstraints = TO THE BOTTOM;
                    }
            }
        }
        NEW details.box BEFORE functions.box {
            type = SPLITH;
            ADD s.box;
            ADD d.box;
            POSITION s.box TO THE LEFT d.box;
        }
        PROPERTY (quantityInnerOrderDetailSkuInnerOrder(s, o))  {caption = 'Количество товара в заказе'; }
    }
}

//pickUpInnerOrder 'Подобрать' (innerOrder) = ACTION (innerOrder) NEWSESSION {
//    IF orderPickingInnerOrder(innerOrder) IS orderPicking THEN {
//        FOR p == orderPickingInnerOrder(innerOrder) DO {
//            IF p IS orderPickingPosted THEN {
//                CHANGECLASS p TO orderPicking;
//            }
//            FORM orderPicking OBJECTS p = p MODAL;
//        }
//    } ELSE {
//        ADDOBJ orderPicking;
//        FOR p == addedObject() DO {
//            SET innerOrderOrderPicking (p) <- innerOrder AS innerOrder;
//            FORM orderPicking OBJECTS p = p MODAL;
//        }
//    }
//    IF formResult() == formResult.ok THEN EXEC apply();
//} TOOLBAR;

//Свойства генерируемых документов
orderPickingInnerDocument (innerDocument) = ABSTRACT orderPicking (innerDocument);

orderPickingMoveOut (moveOut) = DATA orderPicking (moveOut);

quantityInnerDocumentOrderPicking 'Количество документов' (orderPicking) =
    GROUP SUM 1 IF orderPickingInnerDocument (innerDocument) == orderPicking BY orderPicking;

needInnerDocumentOrderPicking 'Необходимо создать документы по заказу' (orderPicking) =
    orderPicking IS orderPickingPosted AND NOT quantityInnerDocumentOrderPicking(orderPicking);

quantityPostedInnerDocumentOrderPicking 'Количество проведенных документов' (orderPicking) =
    GROUP SUM 1 IF orderPickingInnerDocument (innerDocument) == orderPicking AND innerDocument IS postedObject BY orderPicking;;

quantityDraftInnerDocumentOrderPicking 'Количество непроведенных документов' (orderPicking) =
    quantityInnerDocumentOrderPicking(orderPicking) (-) quantityPostedInnerDocumentOrderPicking(orderPicking);


quantityInnerDocumentInnerOrder 'Количество документов' (innerOrder) = GROUP SUM quantityInnerDocumentOrderPicking(orderPicking)
    BY innerOrderOrderPicking(orderPicking);

quantityPostedInnerDocumentInnerOrder 'Количество проведенных документов' (innerOrder) = GROUP SUM quantityPostedInnerDocumentOrderPicking(orderPicking)
    BY innerOrderOrderPicking(orderPicking);

quantityDraftInnerDocumentInnerOrder 'Количество непроведенных документов' (innerOrder) = GROUP SUM quantityDraftInnerDocumentOrderPicking(orderPicking)
    BY innerOrderOrderPicking(orderPicking);

orderPickingInnerDocument (innerDocument) += orderPickingMoveOut (innerDocument);
stockInnerDocument (innerDocument) += stockMoveOut (innerDocument);
destinationStockInnerDocument (innerDocument) += destinationStockMoveOut (innerDocument);

countDetailInnerDocument (innerDocument) += countTransferOutDetailTransferOut (innerDocument);
countDetailInnerDocument (innerDocument) += countMoveOutDetailMoveOut (innerDocument);

quantityDetailInnerDocument (innerDocument) += quantityTransferOutDetailTransferOut (innerDocument);
quantityDetailInnerDocument (innerDocument) += quantityMoveOutDetailMoveOut (innerDocument);

isPostedInnerDocument (innerDocument) += isPostedTransferOut (innerDocument);
isPostedInnerDocument (innerDocument) += isPostedMoveOut (innerDocument);

isDraftInnerDocument (innerDocument) += isDraftTransferOut (innerDocument);
isDraftInnerDocument (innerDocument) += isDraftMoveOut (innerDocument);

createDocumentsOrderPicking 'Создать документы' (orderPicking) = ACTION (orderPicking) {
    IF isPostedOrderPicking (orderPicking)
    THEN {
        ADDOBJ moveOut;
        FOR m == addedObject() DO {
            SET stockMoveOut(m) <- stockOrderPicking(orderPicking);
            SET destinationStockMoveOut(m) <- destinationStockOrderPicking(orderPicking);
            SET orderPickingMoveOut(m) <- orderPicking;

            FOR orderPickingOrderPickingDetail(orderPickingDetail) == orderPicking DO {
                ADDOBJ moveOutDetail;
                FOR d == addedObject() DO {
                     SET moveOutMoveOutDetail(d) <- m;
                     SET skuMoveOutDetail(d) <- skuOrderPickingDetail (orderPickingDetail);
                     SET quantityMoveOutDetail(d) <- quantityOrderPickingDetail (orderPickingDetail);
                }
            }
        }
        EXEC apply();
    }
} TOOLBAR CONFIRM;

editInnerDocument 'Редактировать' (innerDocument) = ACTION (innerDocument) {
    IF innerDocument IS moveOut THEN {
        FORM moveOut OBJECTS t = innerDocument MODAL;
    } ELSE {
        IF innerDocument IS transferOut THEN {
            FORM transferOut OBJECTS t = innerDocument MODAL;
        }
    }
} IMAGE 'edit.png';

postInnerDocument 'Провести' (innerDocument) = ACTION (innerDocument) {
    IF innerDocument IS moveOut THEN {
        CHANGECLASS innerDocument TO moveOutPosted;
        EXEC apply();
    } ELSE {
        IF innerDocument IS transferOut THEN {
            CHANGECLASS innerDocument TO transferOutPosted;
            EXEC apply();
        }
    }
} CONFIRM;

unpostInnerDocument 'Распровести' (innerDocument) = ACTION (innerDocument) {
    IF innerDocument IS moveOut THEN {
        CHANGECLASS innerDocument TO moveOut;
        EXEC apply();
    } ELSE {
        IF innerDocument IS transferOut THEN {
            CHANGECLASS innerDocument TO transferOut;
            EXEC apply();
        }
    }
} CONFIRM;

quantityOrderPickingPostedInnerOrder (innerOrder) = GROUP SUM 1 IF orderPicking IS orderPickingPosted BY innerOrderOrderPicking(orderPicking);
quantityOrderPickingInnerOrder (innerOrder) = GROUP SUM 1 IF orderPicking IS orderPicking BY innerOrderOrderPicking(orderPicking);

statusInnerOrder 'Статус' (innerOrder) =
    IF quantityInnerDocumentInnerOrder (innerOrder) AND NOT quantityDraftInnerDocumentInnerOrder (innerOrder) THEN 'Документы выверены' IF innerOrder IS innerOrder ELSE
    IF quantityPostedInnerDocumentInnerOrder (innerOrder) > 0 THEN 'Документы выверяются' IF innerOrder IS innerOrder ELSE
    IF quantityInnerDocumentInnerOrder (innerOrder)  THEN 'Документы сформированы' IF innerOrder IS innerOrder ELSE
    IF quantityOrderPickingPostedInnerOrder (innerOrder) == quantityOrderPickingInnerOrder(innerOrder)  THEN 'Товары подобраны частично' IF innerOrder IS innerOrder ELSE
    IF quantityOrderPickingPostedInnerOrder (innerOrder) != quantityOrderPickingInnerOrder(innerOrder) AND quantityOrderPickingInnerOrder (innerOrder) THEN 'Товары подобираются' IF innerOrder IS innerOrder ELSE
    'Требуется подборка' IF innerOrder IS innerOrder IN documentPrmGroup PREFCHARWIDTH 25 MINCHARWIDTH 25;


statusOrderPicking 'Статус' (orderPicking) =
    IF quantityInnerDocumentOrderPicking (orderPicking) AND NOT quantityDraftInnerDocumentOrderPicking (orderPicking) THEN 'Документы выверены' IF orderPicking IS orderPicking ELSE
    IF quantityPostedInnerDocumentOrderPicking (orderPicking) > 0 THEN 'Документы выверяются' IF orderPicking IS orderPicking ELSE
    IF quantityInnerDocumentOrderPicking (orderPicking)  THEN 'Документы сформированы' IF orderPicking IS orderPicking ELSE
    IF orderPicking IS orderPickingPosted THEN 'Товары подобраны' IF orderPicking IS orderPicking ELSE
    IF quantityOrderPickingDetailOrderPicking(orderPicking) AND orderPicking IS orderPicking THEN 'Товары подобираются' IF orderPicking IS orderPicking ELSE
    'Требуется подборка' IF orderPicking IS orderPicking PREFCHARWIDTH 25 MINCHARWIDTH 25;


EXTEND FORM innerOrders
    OBJECTS p = orderPicking

    PROPERTIES (p) READONLY isPostedOrderPicking FORCE GRID, numberObject, seriesObject, dateOrderPicking, timeOrderPicking,
        nameStockOrderPicking, nameDestinationStockOrderPicking, noteOrderPicking,
        countOrderPickingDetailOrderPicking, quantityOrderPickingDetailOrderPicking, quantityInnerDocumentOrderPicking,
        quantityPostedInnerDocumentOrderPicking, quantityDraftInnerDocumentOrderPicking, statusOrderPicking

    PROPERTIES(p) ADDFORM, EDITFORM SHOWIF isDraftOrderPicking(p), delete FORCE PANEL SHOWIF isDraftOrderPicking(p),
                  postOrderPicking SHOWIF isDraftOrderPicking(p), unpostOrderPicking SHOWIF isPostedOrderPicking(p)

    OBJECTS pd=orderPickingDetail

    PROPERTIES (o) READONLY  quantityInnerDocumentInnerOrder, quantityPostedInnerDocumentInnerOrder, quantityDraftInnerDocumentInnerOrder,
        statusInnerOrder

    FILTERS innerOrderOrderPicking(p)== o,
            orderPickingOrderPickingDetail (pd) == p


    OBJECTS id = innerDocument

    PROPERTIES (id) READONLY isPostedInnerDocument, objectClassName, seriesObject, numberObject, dateInnerDocument,
                    nameStockInnerDocument, nameDestinationStockInnerDocument, countDetailInnerDocument, quantityDetailInnerDocument
    PROPERTIES (id) editInnerDocument SHOWIF isDraftInnerDocument(id), postInnerDocument SHOWIF isDraftInnerDocument(id),
                    unpostInnerDocument SHOWIF isPostedInnerDocument(id)
    PROPERTIES (p) TODRAW id FORCE PANEL  createDocumentsOrderPicking SHOWIF needInnerDocumentOrderPicking(p)

    FILTERS orderPickingInnerDocument(id)==p
;

@extendDocumentFormDetailSkuArticleReadonly(innerOrders, pd, orderPicking);

EXTEND DESIGN innerOrders {
    documentDetail {
        NEW picking  {
            title = 'Подборка';
            ADD p.box {
                PROPERTY (delete(p)) {
                    panelLocation = TOOLBAR;
                    askConfirm = TRUE;
                }
            };
            NEW picking1 {
                type = TABBED;
                ADD pd.box;
                ADD id.box {
                    title = 'Документы';
                }
            }
        }

    }
}

// ---------------------------------------- Приемка ------------------------------------ //

CLASS innerOrderRec 'Приемка товаров по внутреннему заказу' : historyObject, numberedObject;
CLASS innerOrderRecPosted 'Проведенная приемка товаров по внутреннему заказу' : innerOrderRec, postedObject;

CLASS innerOrderRecDetail 'Строка приемки товаров по внутреннему заказу';

@defineDocument(innerOrderRec);

orderPickingInnerOrderRec (innerOrderRec) = DATA orderPicking (innerOrderRec);
innerOrderRecOrderPicking (orderPicking) = GROUP UNIQUE innerOrderRec BY orderPickingInnerOrderRec(innerOrderRec) WHERE innerOrderRec IS innerOrderRec;

orderPickingInnerOrderRecDetail (detail) = orderPickingInnerOrderRec(innerOrderRecInnerOrderRecDetail(detail));
innerOrderRecOrderPickingDetail (detail) = innerOrderRecOrderPicking(orderPickingOrderPickingDetail(detail));



@defineDocumentAggregationHeaderStockPrefix(orderPicking, innerOrderRec, stock, 'Склад-получатель', destination, );

@defineDocumentPosted(innerOrderRec);

@defineDocumentDetailSku(innerOrderRec, sku);

@defineDocumentDetailQuantity(innerOrderRec);

@defineAddDetailDialogSkuStock(innerOrderRec, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(innerOrderRec, sku);

@defineDocumentHeaderQuantity(innerOrderRec);
@defineDocumentHeaderSkuQuantity(innerOrderRec, sku);

FORM innerOrderRec 'Приемка товаров по внутреннему заказу'
    OBJECTS t = innerOrderRec FIXED PANEL

    PROPERTIES (t) dateInnerOrderRec, timeInnerOrderRec,
                   nameStockInnerOrderRec, noteInnerOrderRec,
                   countInnerOrderRecDetailInnerOrderRec, quantityInnerOrderRecDetailInnerOrderRec

    OBJECTS d = innerOrderRecDetail

    PROPERTIES(t) TODRAW d addDetailDialogSkuStockInnerOrderRecDetailInnerOrderRec, addDetailDialogBarcodeInnerOrderRecDetailInnerOrderRec,
                           deleteInnerOrderRecDetailInnerOrderRec

    FILTERS innerOrderRecInnerOrderRecDetail(d) == t

    EDIT innerOrderRec OBJECT t
;

DESIGN innerOrderRec FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        t.box {
            childConstraints = TO THE RIGHT;
            NEW column1 {
                childConstraints = TO THE BOTTOM;
                ADD t.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY (nameStockInnerOrderRec);
                    ADD PROPERTY (dateInnerOrderRec);
                    ADD PROPERTY (timeInnerOrderRec);
                }
                ADD t.documentPrmGroup;
            }
            ADD t.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    }
}

receiveOrderPicking 'Принять' (orderPicking) = ACTION (orderPicking) NEWSESSION {
    IF innerOrderRecOrderPicking(orderPicking) IS innerOrderRec THEN {
        FOR r == innerOrderRecOrderPicking(orderPicking) DO {
            IF r IS innerOrderRecPosted THEN {
                CHANGECLASS r TO innerOrderRec;
            }
            FORM innerOrderRec OBJECTS t = r MODAL;
        }
    } ELSE {
        ADDOBJ innerOrderRec;
        FOR t == addedObject() DO {
            SET orderPickingInnerOrderRec (t) <- orderPicking AS orderPicking;
            FORM innerOrderRec OBJECTS t = t MODAL;
        }
    }
    IF formResult() == formResult.ok THEN EXEC apply();
} TOOLBAR;



postRecOrderPicking 'Пометить как принятое' (orderPicking) = postInnerOrderRec(innerOrderRecOrderPicking(orderPicking)) TOOLBAR;
isDraftRecOrderPicking (orderPicking) = isDraftInnerOrderRec(innerOrderRecOrderPicking(orderPicking));

statusRecOrderPicking 'Статус приемки' (orderPicking) =
    IF innerOrderRecOrderPicking (orderPicking) IS innerOrderRecPosted THEN 'Принят' IF orderPicking IS orderPicking ELSE
    IF innerOrderRecOrderPicking (orderPicking) IS innerOrderRec THEN 'Принимается' IF orderPicking IS orderPicking ELSE
    'Не принят' IF orderPicking IS orderPicking PREFCHARWIDTH 15 MINCHARWIDTH 15;

quantityInnerOrderRecDetailOrderPicking 'Кол-во принятое' (orderPicking) = quantityInnerOrderRecDetailInnerOrderRec(innerOrderRecOrderPicking(orderPicking));

EXTEND FORM innerOrders
    PROPERTIES(p) quantityInnerOrderRecDetailOrderPicking, statusRecOrderPicking

    OBJECTS r = innerOrderRecDetail
    PROPERTIES(p) TODRAW r receiveOrderPicking, postRecOrderPicking SHOWIF isDraftRecOrderPicking(p)
    FILTERS orderPickingInnerOrderRecDetail(r) == p
;

EXTEND DESIGN innerOrders {
    picking1 {
        ADD r.box {
            title = 'Приемка';
        }
    }
}
///

@defineDocumentDetailSkuArticle(innerOrderRec);
@extendDocumentFormDetailSkuArticle(innerOrderRec, d, innerOrderRec);

@extendDocumentFormDetailSkuArticleReadonly(innerOrders, r, innerOrderRec);

// ---------------------------------------- Акт расхождений ------------------------------------ //

CLASS innerOrderDiff 'Акт расхождений приемки товаров по внутреннему заказу' : historyObject;

CLASS ABSTRACT innerOrderDiffDetail 'Строка расхождений акта приемки товаров по по внутреннему заказу';
CLASS innerOrderDiffEDetail 'Строка расхождений акта приемки товаров по внутреннему заказу (излишек)' : innerOrderDiffDetail, batchB;
CLASS innerOrderDiffSDetail 'Строка расхождений акта приемки товаров по внутреннему заказу (недостача)' : innerOrderDiffDetail, outFIFOSkuLedger;

//@defineDocumentTransferDiff(transfer, 'Акт расхождений приемки товаров по накладной (перемещение)', sku, stock);
//@defineDocumentFormTransferDiff(transfer);

diffSkuInnerOrderRec(sku, innerOrderRec) = (quantityInnerOrderRecDetailSkuInnerOrderRec(sku, innerOrderRec) (-)
                                        quantityOrderPickingDetailSkuOrderPicking(sku, orderPickingInnerOrderRec(innerOrderRec)))
                                        AND isPostedInnerOrderRec(innerOrderRec);

hasDiffSkuInnerOrderRec(sku, innerOrderRec) = diffSkuInnerOrderRec(sku, innerOrderRec) != 0;

countDiffInnerOrderRec 'Расхождение (позиции)' (innerOrderRec) = GROUP SUM 1 IF hasDiffSkuInnerOrderRec(sku, innerOrderRec) BY innerOrderRec;
quantityDiffInnerOrderRec 'Расхождение (кол-во)' (innerOrderRec) = GROUP SUM diffSkuInnerOrderRec(sku, innerOrderRec) BY innerOrderRec;

countDiffOrderPicking 'Расхождение (позиции)' (orderPicking) = countDiffInnerOrderRec(innerOrderRecOrderPicking(orderPicking));
quantityDiffOrderPicking 'Расхождение (кол-во)' (orderPicking) = quantityDiffInnerOrderRec(innerOrderRecOrderPicking(orderPicking));

hasShortageSkuInnerOrderRec(sku, innerOrderRec) = diffSkuInnerOrderRec(sku, innerOrderRec) < 0;
hasExcessSkuInnerOrderRec(sku, innerOrderRec) = diffSkuInnerOrderRec(sku, innerOrderRec) > 0;

// Создание документов

@defineDocumentTables(innerOrderDiff);
TABLE innerOrderDiffSDetail (innerOrderDiffSDetail);
TABLE innerOrderDiffEDetail (innerOrderDiffEDetail);

@defineAggregation(innerOrderRec, innerOrderDiff, countDiffInnerOrderRec);

@defineAggregationDouble(sku, innerOrderRec, innerOrderDiffEDetail, hasExcessSkuInnerOrderRec);
quantityInnerOrderDiffEDetail 'Кол-во' (detail) = diffSkuInnerOrderRec(skuInnerOrderDiffEDetail(detail),
                                                                   innerOrderRecInnerOrderDiffEDetail(detail)) PERSISTENT;

@defineAggregationDouble(sku, innerOrderRec, innerOrderDiffSDetail, hasShortageSkuInnerOrderRec);
quantityInnerOrderDiffSDetail 'Кол-во' (detail) =-diffSkuInnerOrderRec(skuInnerOrderDiffSDetail(detail),
                                                                   innerOrderRecInnerOrderDiffSDetail(detail)) PERSISTENT;

innerOrderRecInnerOrderDiffDetail (detail) = UNION EXCLUSIVE innerOrderRecInnerOrderDiffEDetail(detail), innerOrderRecInnerOrderDiffSDetail(detail) PERSISTENT;
orderPickingInnerOrderDiffDetail (detail) = orderPickingInnerOrderRec(innerOrderRecInnerOrderDiffDetail(detail));
innerOrderDiffInnerOrderDiffDetail (detail) = innerOrderDiffInnerOrderRec(innerOrderRecInnerOrderDiffDetail(detail)) PERSISTENT;

orderPickingInnerOrderDiffSDetail (detail) = orderPickingInnerOrderRec(innerOrderRecInnerOrderDiffSDetail(detail)) PERSISTENT;

innerOrderDiffInnerOrderDiffEDetail (detail) = innerOrderDiffInnerOrderRec(innerOrderRecInnerOrderDiffEDetail(detail));
innerOrderDiffInnerOrderDiffSDetail (detail) = innerOrderDiffInnerOrderRec(innerOrderRecInnerOrderDiffSDetail(detail));

@defineDocumentAggregationHeaderTime(innerOrderRec, innerOrderDiff);
@defineDocumentDetailTimeCustom(innerOrderDiff, innerOrderDiffEDetail);
@defineDocumentDetailTimeCustom(innerOrderDiff, innerOrderDiffSDetail);

@defineDocumentAggregationHeaderNumber(innerOrderRec, innerOrderDiff);

@defineDocumentHeaderDescriptionCustom(innerOrderDiff, seriesNumberInnerOrderDiff, 'Акт расхождений приемки товаров по внутреннему заказу');
@defineDocumentDetailDescriptionCustom(innerOrderDiff, innerOrderDiffEDetail);
@defineDocumentDetailDescriptionCustom(innerOrderDiff, innerOrderDiffSDetail);

@defineDocumentAggregationHeaderStock(innerOrderRec, innerOrderDiff, stock, 'Склад-получатель');
@defineDocumentDetailStockCustom(innerOrderDiff, innerOrderDiffEDetail, stock, 'Склад-получатель');
@defineDocumentDetailStockCustom(innerOrderDiff, innerOrderDiffSDetail, stock, 'Склад-получатель');

@defineDocumentAggregationHeaderPosted(innerOrderRec, innerOrderDiff);
@defineDocumentDetailPostedCustom(innerOrderDiff, innerOrderDiffEDetail);
@defineDocumentDetailPostedCustom(innerOrderDiff, innerOrderDiffSDetail);

skuInnerOrderDiffDetail (detail) = UNION EXCLUSIVE skuInnerOrderDiffEDetail(detail), skuInnerOrderDiffSDetail(detail) PERSISTENT;
quantityInnerOrderDiffDetail 'Кол-во' (detail) = UNION EXCLUSIVE quantityInnerOrderDiffEDetail(detail), quantityInnerOrderDiffSDetail(detail) PERSISTENT;
signedQuantityInnerOrderDiffDetail 'Кол-во' (detail) = UNION EXCLUSIVE quantityInnerOrderDiffEDetail(detail), -quantityInnerOrderDiffSDetail(detail) PERSISTENT;

@defineDocumentDetailIndex(innerOrderDiff);

EXTEND FORM innerOrders
    OBJECTS f = innerOrderDiffDetail
    PROPERTIES(p) READONLY countDiffOrderPicking, quantityDiffOrderPicking
    FILTERS orderPickingInnerOrderDiffDetail(f) == p
;

EXTEND DESIGN innerOrders {
    picking1 {
        ADD f.box {
            title = 'Акт расхождений';
        }
    }
}

@defineDocumentDetailSkuArticle(innerOrderDiff);
@extendDocumentFormDetailSkuArticleReadonlyQuantity(innerOrders, f, innerOrderDiff, signedQuantityInnerOrderDiffDetail);

costInnerOrderDiffEDetail(detail) = 0.0 IF detail IS innerOrderDiffEDetail;
@implementBatch(innerOrderDiffE, sku, stock, cost);
quantityBatch (batch) += quantityInnerOrderDiffEDetail(batch);
skipASkuLedger (ledger) += ledger IS innerOrderDiffEDetail;

@implementSkuLedger(innerOrderDiffS, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantityInnerOrderDiffSDetail(ledger);

@implementSkuLedgerOutFIFOBalance (innerOrderDiffS, sku, stock);
orderOutFIFOSkuLedgerBatch (ledger, batch) += orderBBatch(batch) IF ledger IS innerOrderDiffSDetail;

//accountPriceInnerOrderRecBatchA (innerOrderRec, batchA) = GROUP MAX accountPriceInnerOrderDetailBatchA(detail, batchA) BY innerOrderRecInnerOrderDetail(detail), batchA;
//accountSumTransferDiffSDetail (detail) = GROUP SUM costDataSkuLedgerBatch(detail, batch) * accountPriceInnerOrderRecBatchA(innerOrderRecInnerOrderDiffSDetail(detail), batch) BY detail PERSISTENT;
//sumOutSkuLedger(ledger) += accountSumInnerOrderDiffSDetail(ledger);

skipASkuLedger (ledger) += ledger IS innerOrderDiffSDetail;

descriptionInnerOrderOrderPicking 'Внутренний заказ' (orderPicking) =
    [FORMULA STRING[200] '\'Внутр. заказ \' ||  \' \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'](
    seriesNumberObject(innerOrderOrderPicking(orderPicking)), dateInnerOrder(innerOrderOrderPicking(orderPicking)));

FORM orderPickings 'Подборки товара'
//    OBJECTS o = innerOrder
    OBJECTS p = orderPicking

    PROPERTIES (p) READONLY isPostedOrderPicking FORCE GRID, descriptionInnerOrderOrderPicking, numberObject, seriesObject, dateOrderPicking, timeOrderPicking,
        nameStockOrderPicking, nameDestinationStockOrderPicking, noteOrderPicking,
        countOrderPickingDetailOrderPicking, quantityOrderPickingDetailOrderPicking, statusOrderPicking,
        quantityInnerDocumentOrderPicking, quantityPostedInnerDocumentOrderPicking, quantityDraftInnerDocumentOrderPicking
    ORDER BY descriptionInnerOrderOrderPicking
//    PROPERTIES (p) FORCE PANEL  createDocumentsOrderPicking

    OBJECTS id = innerDocument
    PROPERTIES(p) TODRAW id createDocumentsOrderPicking

    PROPERTIES (id) READONLY isPostedInnerDocument, objectClassName, seriesObject, numberObject, dateInnerDocument,
                    nameStockInnerDocument, nameDestinationStockInnerDocument, countDetailInnerDocument, quantityDetailInnerDocument
    FILTERS orderPickingInnerDocument(id)==p

    FILTERGROUP filters1
        FILTER 'Без сгенерированных документов' 'F10'needInnerDocumentOrderPicking(p) DEFAULT

;

notDraftOrderPicking 'Непринятые' (orderPicking) = orderPicking IS orderPicking  AND NOT innerOrderRecOrderPicking (orderPicking) IS innerOrderRecPosted;

FORM innerOrderRecs 'Приемка по внутр. заказам'
    OBJECTS st = stock FIXED PANEL
    PROPERTIES (st) SELECTOR name
    OBJECTS p = orderPicking

    PROPERTIES (p) READONLY isPostedOrderPicking FORCE GRID, descriptionInnerOrderOrderPicking, numberObject, seriesObject, dateOrderPicking, timeOrderPicking,
        nameStockOrderPicking, nameDestinationStockOrderPicking, noteOrderPicking,
        countOrderPickingDetailOrderPicking, quantityOrderPickingDetailOrderPicking, statusRecOrderPicking,
//        quantityInnerDocumentOrderPicking, quantityPostedInnerDocumentOrderPicking, quantityDraftInnerDocumentOrderPicking,
        quantityInnerOrderRecDetailOrderPicking
    ORDER BY descriptionInnerOrderOrderPicking

    OBJECTS r = innerOrderRecDetail
    PROPERTIES(p) TODRAW r receiveOrderPicking, postRecOrderPicking SHOWIF isDraftRecOrderPicking(p)
    FILTERS orderPickingInnerOrderRecDetail(r) == p,
            destinationStockOrderPicking(p) == st

    FILTERGROUP filters1
        FILTER 'Только непринятые' 'F10' notDraftOrderPicking(p) DEFAULT

;
@extendDocumentFormDetailSkuArticleReadonly(innerOrderRecs, r, innerOrderRec);

FORM orderPickingPrint 'Подборочный лист' PRINT
    OBJECTS p = orderPicking FIXED PANEL

    PROPERTIES (p) numberObject, seriesObject, dateOrderPicking, timeOrderPicking,
        nameStockOrderPicking, nameDestinationStockOrderPicking, noteOrderPicking,
        countOrderPickingDetailOrderPicking, quantityOrderPickingDetailOrderPicking,
        descriptionInnerOrderOrderPicking

    OBJECTS d = orderPickingDetail
    FILTERS orderPickingOrderPickingDetail(d) == p
;

@extendDocumentFormDetailSkuArticleReadonly(orderPickingPrint, d, orderPicking);

printOrderPicking 'Подборочный лист' (priceChangeDocument) = ACTION FORM orderPickingPrint OBJECTS p IMAGE 'print.png' IN printGroup TOOLBAR;

EXTEND FORM innerOrders

    PROPERTIES(p)  FORCE PANEL printOrderPicking
;