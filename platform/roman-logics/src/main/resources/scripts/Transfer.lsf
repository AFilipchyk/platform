MODULE Transfer;

REQUIRE System,
        Document,
        RomanDocument,
        Stock,
        RomanStock,
        DocumentTransfer,
        ListRegister,
        RetailPrice,
        Employee,
        StorePriceTransfer,
        RomanLogicsModule;

PRIORITY Stock, RomanLogicsModule;

// ---------------------------------------- Перемещение ------------------------------------ //

CLASS transferOut 'Перемещение товаров по накладным' : historyObject, numberedObject;
CLASS transferOutPosted 'Проведенное перемещение товаров по накладным' : transferOut, postedObject;
CLASS transferOutDetail 'Строка перемещения товаров по накладным' : outFIFOSkuLedger;
CLASS transferOutBatchDetail 'Строка перемещения товаров по накладным (по партиям)';

@defineDocumentTransferOut(transfer, 'Перемещение товаров по накладным', sku, stock);
@defineDocumentFormTransferOut(transfer, 'Перемещение товаров по накладным');

companyTransferOut (transferOut) = companyStock(stockTransferOut(transferOut));

CONSTRAINT companyTransferOut(saleOut) != companyStock(destinationStockTransferOut(saleOut)) CHECKED BY destinationStockTransferOut
    MESSAGE 'Перемещение товаров должно идти между складами одной компании';

@defineDocumentDetailSkuArticle(transferOut);
@extendDocumentFormDetailSkuArticle(transferOut, d, transferOut);
@extendDocumentFormDetailSkuArticleReadonly(transferOuts, d, transferOut);

// Перемещение по договорам комиссии
commissionContractSkuTransferOut = DATA contractSku (transferOut);
numberCommissionContractSkuTransferOut 'Номер договора комиссии' (transferOut) = numberContract(commissionContractSkuTransferOut(transferOut)) IN documentPrmGroup;

CONSTRAINT typeContractSkuDate(commissionContractSkuTransferOut(transferOut), dateTransferOut(transferOut)) != contractSkuType.commission
    CHECKED BY commissionContractSkuTransferOut MESSAGE 'Для перемещения выбран договор, который не является договором комиссии';

CONSTRAINT partyBContract(commissionContractSkuTransferOut(transferOut)) != companyTransferOut(transferOut)
    CHECKED BY commissionContractSkuTransferOut MESSAGE 'Для перемещения выбран договор комиссии, у которого покупатель не совпадает с компанией склада';

EXTEND FORM transferOut
    PROPERTIES(t) READONLY numberCommissionContractSkuTransferOut
;

EXTEND FORM transferOuts
    PROPERTIES(t) READONLY numberCommissionContractSkuTransferOut
;

commissionContractSkuTransferOutDetail (detail) = commissionContractSkuTransferOut(transferOutTransferOutDetail(detail)) PERSISTENT;

@defineDocumentTransferOutBatch(transfer, sku);
@defineDocumentFormTransferOutBatch(transfer);

@extendDocumentFormDetailSkuArticleReadonly(transferOuts, o, transferOutBatch);

@defineDocumentTransferRetail(transferOut);

useRetailPriceTransferOutDetail(detail) = stockTransferOutDetail(detail) IS departmentStore OR commissionContractSkuTransferOutDetail(detail) IS contractSku;
@defineDocumentTransferAccount(transferOut, useRetailPriceTransferOutDetail);

// Проводим по регистру
@implementSkuLedger(transferOut, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantityTransferOutDetail (ledger);
limitOutFIFOSkuLedgerBatch(ledger, batch) += IF commissionContractSkuTransferOutDetail(ledger)
                                                THEN currentBalanceBatchStock(batch, stockTransferOutDetail(ledger)) AND commissionContractSkuBatchA(batch) == commissionContractSkuTransferOutDetail(ledger)
                                                ELSE currentBalanceBatchStock(batch, stockTransferOutDetail(ledger)) AND NOT commissionContractSkuBatchA(batch);
sumOutSkuLedger(ledger) += accountSumTransferOutDetail(ledger);

//CONSTRAINT isPostedTransferOutDetail(detail) AND NOT quantityTransferOutDetail(detail) == costedDataSkuLedger(detail)
//    MESSAGE 'Не хватает остатков по партиям для перемещения товаров';

// ---------------------------------------- Поступление ------------------------------------ //

CLASS transferIn 'Поступление товаров по накладным' : historyObject;
CLASS transferInDetail 'Строка поступления товаров по накладным' : inLIFOSkuLedger;

@defineDocumentTransferIn(transfer, 'Поступление товаров по накладным', sku, stock);
@defineDocumentFormTransferIn(transfer, 'Поступление товаров по накладным');

@defineDocumentDetailSkuArticle(transferIn);
@extendDocumentFormDetailSkuArticleReadonly(transferIns, d, transferIn);

costTransferInBatch(transferIn, batch) = GROUP SUM costSkuLedgerBatch(ledger, batch) BY transferInTransferInDetail(ledger), batch;

retailPriceTransferInDetail 'Цена розничная' (detail) = retailPriceTransferOutDetail(transferOutDetailTransferInDetail(detail));
retailSumTransferInDetail 'Сумма розничная' (detail) = quantityTransferInDetail(detail) * retailPriceTransferInDetail(detail);

commissionContractSkuTransferInDetail (detail) = commissionContractSkuTransferOutDetail(transferOutDetailTransferInDetail(detail));

useRetailPriceTransferInDetail(detail) = stockTransferOutDetail(detail) IS departmentStore OR commissionContractSkuTransferInDetail(detail) IS contractSku;
@defineDocumentTransferAccount(transferIn, useRetailPriceTransferInDetail);

@implementSkuLedger(transferIn, sku, stock);
quantityInLIFOSkuLedger (ledger) += quantityTransferInDetail(ledger);
limitInLIFOSkuLedgerBatch (ledger, batch) += costSkuLedgerBatch(transferOutDetailTransferInDetail(ledger), batch);
sumInSkuLedger(ledger) += accountSumTransferInDetail(ledger);

// ---------------------------------------- Приемка ------------------------------------ //

CLASS transferRec 'Приемка товаров по накладной (перемещение)' : historyObject;
CLASS transferRecPosted 'Проведенная приемка товаров по накладной (перемещение)' : transferRec, postedObject;

CLASS transferRecDetail 'Строка приемки товаров по накладной (перемещение)';

@defineDocumentTransferRec(transfer, 'Приемка товаров по накладным (перемещение)', sku, stock);
@defineDocumentFormTransferRec(transfer, 'Приемка товаров по накладным (перемещение)');

@defineDocumentDetailSkuArticle(transferRec);
@extendDocumentFormDetailSkuArticle(transferRec, d, transferRec);

@extendDocumentFormDetailSkuArticleReadonly(transferIns, r, transferRec);

// ---------------------------------------- Акт расхождений ------------------------------------ //
CLASS transferDiff 'Акт расхождений приемки товаров по накладной (перемещение)' : historyObject;

CLASS ABSTRACT transferDiffDetail 'Строка расхождений акта приемки товаров по накладной (перемещение)';
CLASS transferDiffEDetail 'Строка расхождений акта приемки товаров по накладной (перемещение, излишек)' : transferDiffDetail, batchB;
CLASS transferDiffSDetail 'Строка расхождений акта приемки товаров по накладной (перемещение, недостача)' : transferDiffDetail, outFIFOSkuLedger;

@defineDocumentTransferDiff(transfer, 'Акт расхождений приемки товаров по накладной (перемещение)', sku, stock);
@defineDocumentFormTransferDiff(transfer);

@defineDocumentDetailSkuArticle(transferDiff);
@extendDocumentFormDetailSkuArticleReadonlyQuantity(transferIns, f, transferDiff, signedQuantityTransferDiffDetail);

costTransferDiffEDetail(detail) = 0.0 IF detail IS transferDiffEDetail;
@implementBatch(transferDiffE, sku, stock, cost);
quantityBatch (batch) += quantityTransferDiffEDetail(batch);
skipASkuLedger (ledger) += ledger IS transferDiffEDetail;

@implementSkuLedger(transferDiffS, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantityTransferDiffSDetail(ledger);
limitOutFIFOSkuLedgerBatch (ledger, batch) += costTransferInBatch(transferInTransferDiffSDetail(ledger), batch);
orderOutFIFOSkuLedgerBatch (ledger, batch) += orderBBatch(batch) IF ledger IS transferDiffSDetail;

skipASkuLedger (ledger) += ledger IS transferDiffSDetail;

// ---------------------------------------- Акт расценки ------------------------------------ //
CLASS transferPriceActTransfer 'Акт расценки' : transferPriceAct;
CLASS transferPriceActTransferDetail 'Строка акта расценки': transferPriceActDetail;

importerPricePropBatch (batch) = PREV(importerPriceBatchA(batch)) AND batch IS batch;
rangeVATPropBatch (batch) = PREV(rangeVATBatchA(batch)) AND batch IS batch;

@defineDocumentTransferPriceAct (transfer, 'Акт расценки (перемещение)', 'Строка акта расценки (перемещение)', sku, stock, importerPricePropBatch, rangeVATPropBatch);
