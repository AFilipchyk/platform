MODULE Transfer;

REQUIRE System,
        Document,
        RomanDocument,
        Stock,
        RomanStock,
        DocumentTransfer,
        ListRegister,
        RetailPrice,
        Employee,
        RomanLogicsModule;

PRIORITY Stock, RomanLogicsModule;

// ---------------------------------------- Перемещение ------------------------------------ //

CLASS transferOut 'Перемещение товаров по накладным' : historyObject, numberedObject;
CLASS transferOutPosted 'Проведенное перемещение товаров по накладным' : transferOut, postedObject;
CLASS transferOutDetail 'Строка перемещения товаров по накладным' : outFIFOSkuLedger;
CLASS transferOutBatchDetail 'Строка перемещения товаров по накладным (по партиям)';

@defineDocumentTransferOut(transfer, 'Перемещение товаров по накладным', sku, stock);
@defineDocumentFormTransferOut(transfer, 'Перемещение товаров по накладным');

CONSTRAINT companyStock(stockTransferOut(saleOut)) != companyStock(destinationStockTransferOut(saleOut)) CHECKED BY destinationStockTransferOut
    MESSAGE 'Перемещение товаров должно идти между складами одной компании';

@defineDocumentDetailSkuArticle(transferOut);
@extendDocumentFormDetailSkuArticle(transferOut, d, transferOut);
@extendDocumentFormDetailSkuArticleReadonly(transferOuts, d, transferOut);

@defineDocumentTransferOutBatch(transfer, sku);
@defineDocumentFormTransferOutBatch(transfer);

@extendDocumentFormDetailSkuArticleReadonly(transferOuts, o, transferOutBatch);

// Проводим по регистру
@implementSkuLedger(transferOut, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantityTransferOutDetail (ledger);
@implementSkuLedgerOutFIFOBalanceA(transferOut, sku, stock);

// Фиксируем розничную цену
retailPriceTransferOutDetail 'Розничная цена' (transferOutDetail) = DATA NUMERIC[14,2] (transferOutDetail);

retailPriceChangeTransferOutDetail(transferOutDetail) = UNION OVERRIDE priceBasePriceSetDocumentArticleDateTime(articleSku(skuTransferOutDetail(transferOutDetail)), dateTimeTransferOutDetail(transferOutDetail)),
                                                               priceDiscountPriceSetDocumentArticleDateTime(articleSku(skuTransferOutDetail(transferOutDetail)), dateTimeTransferOutDetail(transferOutDetail));

retailPriceTransferOutDetail(transferOutDetail) <- retailPriceChangeTransferOutDetail(transferOutDetail) WHEN ASSIGNED (dateTimeTransferOutDetail(transferOutDetail))
                                                                                           OR ASSIGNED (skuTransferOutDetail(transferOutDetail));

EXTEND FORM transferOuts
    PROPERTIES (d) READONLY retailPriceTransferOutDetail
;

EXTEND FORM transferOut
    PROPERTIES (d) retailPriceTransferOutDetail
;

// ---------------------------------------- Поступление ------------------------------------ //

CLASS transferIn 'Поступление товаров по накладным' : historyObject;
CLASS transferInDetail 'Строка поступления товаров по накладным' : inLIFOSkuLedger;

@defineDocumentTransferIn(transfer, 'Поступление товаров по накладным', sku, stock);
@defineDocumentFormTransferIn(transfer, 'Поступление товаров по накладным');

@defineDocumentDetailSkuArticle(transferIn);
@extendDocumentFormDetailSkuArticleReadonly(transferIns, d, transferIn);

costTransferInBatch(transferIn, batch) = GROUP SUM costSkuLedgerBatch(ledger, batch) BY transferInTransferInDetail(ledger), batch;

@implementSkuLedger(transferIn, sku, stock);
quantityInLIFOSkuLedger (ledger) += quantityTransferInDetail(ledger);
limitInLIFOSkuLedgerBatch (ledger, batch) += costSkuLedgerBatch(transferOutDetailTransferInDetail(ledger), batch);

// ---------------------------------------- Приемка ------------------------------------ //

CLASS transferRec 'Приемка товаров по накладной (перемещение)' : historyObject;
CLASS transferRecPosted 'Проведенная приемка товаров по накладной (перемещение)' : transferRec, postedObject;

CLASS transferRecDetail 'Строка приемки товаров по накладной (перемещение)';

@defineDocumentTransferRec(transfer, 'Приемка товаров по накладным (перемещение)', sku, stock);
@defineDocumentFormTransferRec(transfer, 'Приемка товаров по накладным (перемещение)');

@defineDocumentDetailSkuArticle(transferRec);
@extendDocumentFormDetailSkuArticle(transferRec, d, transferRec);

@extendDocumentFormDetailSkuArticleReadonly(transferIns, r, transferRec);

// ---------------------------------------- Акт расхождений ------------------------------------ //
CLASS transferDiff 'Акт расхождений приемки товаров по накладной (перемещение)' : historyObject;

CLASS ABSTRACT transferDiffDetail 'Строка расхождений акта приемки товаров по накладной (перемещение)';
CLASS transferDiffEDetail 'Строка расхождений акта приемки товаров по накладной (перемещение, излишек)' : transferDiffDetail, batchB;
CLASS transferDiffSDetail 'Строка расхождений акта приемки товаров по накладной (перемещение, недостача)' : transferDiffDetail, outFIFOSkuLedger;

@defineDocumentTransferDiff(transfer, 'Акт расхождений приемки товаров по накладной (перемещение)', sku, stock);
@defineDocumentFormTransferDiff(transfer);

@defineDocumentDetailSkuArticle(transferDiff);
@extendDocumentFormDetailSkuArticleReadonlyQuantity(transferIns, f, transferDiff, signedQuantityTransferDiffDetail);

costTransferDiffEDetail(detail) = 0.0 IF detail IS transferDiffEDetail;
@implementBatch(transferDiffE, sku, stock, cost);
quantityBatch (batch) += quantityTransferDiffEDetail(batch);
skipASkuLedger (ledger) += ledger IS transferDiffEDetail;

@implementSkuLedger(transferDiffS, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantityTransferDiffSDetail(ledger);
limitOutFIFOSkuLedgerBatch (ledger, batch) += costTransferInBatch(transferInTransferDiffSDetail(ledger), batch);
orderOutFIFOSkuLedgerBatch (ledger, batch) += orderBBatch(batch) IF ledger IS transferDiffSDetail;

skipASkuLedger (ledger) += ledger IS transferDiffSDetail;

// ---------------------------------------- Акт расценки ------------------------------------ //

isStoreDestinationStockTransferOut 'Перемещение на магазин' (transferOut) = destinationStockTransferOut(transferOut) IS departmentStore;

needPriceActDetailTransferOutDetailBatch (transferOutDetail, batch) = costSkuLedgerBatch(transferOutDetail, batch)
    AND destinationStockTransferOut(transferOutTransferOutDetail(transferOutDetail)) IS departmentStore;

CLASS priceAct 'Акт расценки' : inputListRegister, historyObject;
CLASS priceActDetail 'Строка акта расценки': inputListRegisterDetail, importerPriceLedger, supplierPriceLedger, retailVATLedger, retailPriceLedger, warePriceLedger;

@defineDocumentTables (priceAct);

@defineAggregation (transferOut, priceAct, isStoreDestinationStockTransferOut);
@defineAggregationDouble(transferOutDetail, batch, priceActDetail, needPriceActDetailTransferOutDetailBatch);
priceActPriceActDetail (priceActDetail) = priceActTransferOut(transferOutTransferOutDetail(transferOutDetailPriceActDetail(priceActDetail)));

@defineDocumentAggregationTime(transferOut, priceAct);
@defineDocumentAggregationPosted(transferOut, priceAct);

@defineDocumentAggregationStockPrefix(transferOut, priceAct, stock, 'Склад-получатель', destination, );
@defineDocumentAggregationStockPrefix(transferOut, priceAct, stock, 'Склад-отправитель', , destination);

@defineDocumentAggregationHeaderNumber(transferOut, priceAct);
@defineDocumentAggregationHeaderNote(transferOut, priceAct);

@defineDocumentDescriptionCustom(priceAct, priceActDetail, seriesNumberPriceAct, 'Акт расценки');

@defineDocumentDetailIndex(priceAct);

@defineDocumentAggregationDetailSku(transferOut, priceAct, sku);

quantityPriceActDetail 'Количество' (priceActDetail) = costSkuLedgerBatch(transferOutDetailPriceActDetail(priceActDetail), batchPriceActDetail(priceActDetail));

@defineDocumentHeaderQuantity(priceAct);
@defineDocumentHeaderSkuQuantity(priceAct, sku);

departmentStorePriceAct (priceAct) = destinationStockTransferOut(transferOutPriceAct(priceAct)) AS departmentStore;

departmentStorePriceActDetail (priceActDetail) =
    destinationStockTransferOut(transferOutTransferOutDetail(transferOutDetailPriceActDetail(priceActDetail))) AS departmentStore;

@defineDocumentDetailSkuArticle(priceAct);

importerPricePriceActDetail 'Цена импортера' (priceActDetail) = DATA NUMERIC[14,2] (priceActDetail);
importerPricePriceActDetail (detail) <- [PREV(importerPriceBatchA(batch))](batchPriceActDetail(detail)) WHEN ASSIGNED(isPostedPriceActDetail(detail));

rangeRetailVATPriceActDetail (priceActDetail) = DATA range (priceActDetail);
rangeRetailVATPriceActDetail (detail) <- [PREV(rangeVATBatchA(batch))](batchPriceActDetail(detail)) WHEN ASSIGNED(isPostedPriceActDetail(detail));

numberRetailVATPriceActDetail 'НДС, номер' (priceActDetail) = numberRange(rangeRetailVATPriceActDetail(priceActDetail));
valueRetailVATPriceActDetail 'НДС,%' (priceActDetail) = valueRateRangeDate
    (rangeRetailVATPriceActDetail(priceActDetail), datePriceActDetail(priceActDetail));

retailPricePriceActDetail 'Цена розничная' (priceActDetail) = retailPriceTransferOutDetail(transferOutDetailPriceActDetail(priceActDetail));

printInputListRegisterTransferIn 'Реестр цен' (transferIn) = printInputListRegister(priceActTransferOut(transferOutTransferIn(transferIn))) TOOLBAR;

// Расчет сумм и показателей для реестра цен
importerSumPriceActDetail (priceActDetail) = importerPricePriceActDetail(priceActDetail) * quantityPriceActDetail(priceActDetail);
retailSumPriceActDetail (priceActDetail) = retailPricePriceActDetail(priceActDetail) * quantityPriceActDetail(priceActDetail);
retailVATSumPriceActDetail (priceActDetail) = [X*Y/(100+Y)] (retailSumPriceActDetail(priceActDetail), valueRetailVATPriceActDetail(priceActDetail));
markupSumPriceActDetail (priceActDetail) = retailSumPriceActDetail(priceActDetail) (-) importerSumPriceActDetail(priceActDetail) (-) retailVATSumPriceActDetail(priceActDetail);

markupSumPriceActDetailPriceAct (priceAct) = GROUP SUM markupSumPriceActDetail(priceActDetail) BY priceActPriceActDetail(priceActDetail);
retailVATSumPriceActDetailPriceAct (priceAct) = GROUP SUM retailVATSumPriceActDetail(priceActDetail) BY priceActPriceActDetail(priceActDetail);
retailSumPriceActDetailPriceAct (priceAct) = GROUP SUM retailSumPriceActDetail(priceActDetail) BY priceActPriceActDetail(priceActDetail);

importerMarkupPriceActDetail (priceActDetail) = round2 (markupSumPriceActDetail(priceActDetail)*100/retailSumPriceActDetail(priceActDetail));

// Свойства реестра цен
@defineDocumentHeaderListRegister (priceAct);
registerCommitteeTransferIn (transferIn) = registerCommitteePriceAct(priceActTransferOut(transferOutTransferIn(transferIn)));
registerCommitteeListRegister (inputListRegister) += registerCommitteePriceAct(inputListRegister);

dateListRegister (inputListRegister) += datePriceAct (inputListRegister);
departmentStoreListRegister (inputListRegister) += departmentStorePriceAct (inputListRegister);
senderListRegister (inputListRegister) += companyStock (stockTransferOut(transferOutPriceAct(inputListRegister)));
shipperListRegister (inputListRegister) += nameStockTransferOut(transferOutPriceAct(inputListRegister));

quantityListRegisterDetailListRegister (inputListRegister) += quantityPriceActDetailPriceAct (inputListRegister);
wareSumListRegisterDetailListRegister (inputListRegister) += 0.0 IF inputListRegister IS priceAct;
wareVATSumListRegisterDetailListRegister (inputListRegister) += 0.0 IF inputListRegister IS priceAct;
markupSumListRegisterDetailListRegister (inputListRegister) +=  markupSumPriceActDetailPriceAct (inputListRegister);
retailVATSumListRegisterDetailListRegister (inputListRegister) += retailVATSumPriceActDetailPriceAct (inputListRegister);
retailSumListRegisterDetailListRegister (inputListRegister) += retailSumPriceActDetailPriceAct (inputListRegister);

numberListRegister (inputListRegister) += numberObject (transferOutPriceAct(inputListRegister));
seriesListRegister (inputListRegister) += seriesObject (transferOutPriceAct(inputListRegister));

listRegisterListRegisterDetail(inputListRegisterDetail) += priceActPriceActDetail (inputListRegisterDetail);
indexListRegisterDetail (inputListRegisterDetail) += indexPriceActDetail (inputListRegisterDetail);
skuListRegisterDetail  (inputListRegisterDetail) += skuPriceActDetail (inputListRegisterDetail);
quantityListRegisterDetail (inputListRegisterDetail) += quantityPriceActDetail (inputListRegisterDetail);
importerPriceListRegisterDetail (inputListRegisterDetail) += importerPricePriceActDetail (inputListRegisterDetail);
supplierMarkupListRegisterDetail (inputListRegisterDetail) += 0.0 IF inputListRegisterDetail IS priceActDetail;
wareSumListRegisterDetail (inputListRegisterDetail) += 0.0 IF inputListRegisterDetail IS priceActDetail;
warePriceListRegisterDetail (inputListRegisterDetail) += 0.0 IF inputListRegisterDetail IS priceActDetail;
wareVATSumListRegisterDetail (inputListRegisterDetail) += 0.0 IF inputListRegisterDetail IS priceActDetail;
valueWareRangeListRegisterDetail (inputListRegisterDetail) += 0.0 IF inputListRegisterDetail IS priceActDetail;
importerMarkupListRegisterDetail (inputListRegisterDetail) += importerMarkupPriceActDetail (inputListRegisterDetail);
markupSumListRegisterDetail (inputListRegisterDetail) += markupSumPriceActDetail (inputListRegisterDetail);
valueRetailVATListRegisterDetail (inputListRegisterDetail) += valueRetailVATPriceActDetail (inputListRegisterDetail);
retailVATSumListRegisterDetail (inputListRegisterDetail) += retailVATSumPriceActDetail (inputListRegisterDetail);
retailPriceListRegisterDetail (inputListRegisterDetail) += retailPricePriceActDetail (inputListRegisterDetail);
retailSumListRegisterDetail (inputListRegisterDetail) += retailSumPriceActDetail (inputListRegisterDetail);


EXTEND FORM transferIns

    OBJECTS pd=priceActDetail
    PROPERTIES (pd) READONLY indexPriceActDetail, barcodePriceActDetail,
                    nameCategoryPriceActDetail, nameBrandPriceActDetail,
                    sidArticlePriceActDetail, sidSizePriceActDetail,
                    sidColorPriceActDetail, nameColorPriceActDetail,
                    quantityPriceActDetail, shortNameUOMPriceActDetail,
                    importerPricePriceActDetail, numberRetailVATPriceActDetail, //retailMarkupPriceActDetail,
                    valueRetailVATPriceActDetail, retailPricePriceActDetail

    FILTERS transferInTransferOut(transferOutTransferOutDetail(transferOutDetailPriceActDetail(pd)))==t

    PROPERTIES (t) printInputListRegisterTransferIn//, registerCommitteeTransferIn TODRAW pd FORCE PANEL
;

EXTEND DESIGN transferIns {
    documentDetail {
        ADD pd.box {
            title = 'Расценка';
        }
    }
}