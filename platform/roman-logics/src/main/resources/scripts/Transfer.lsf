MODULE Transfer;

REQUIRE System,
        Document,
        RomanDocument,
        Stock,
        RomanStock,
        DocumentTransfer,
        RomanLogicsModule;

PRIORITY Stock, RomanLogicsModule;

// ---------------------------------------- Перемещение ------------------------------------ //

CLASS transferOut 'Перемещение товаров по накладным' : historyObject, numberedObject;
CLASS transferOutPosted 'Проведенное перемещение товаров по накладным' : transferOut, postedObject;
CLASS transferOutDetail 'Строка перемещения товаров по накладным' : outFIFOSkuLedger;

@defineDocumentTransferOut(transfer, 'Перемещение товаров по накладным', sku, stock);
@defineDocumentFormTransferOut(transfer, 'Перемещение товаров по накладным');

@defineDocumentDetailSkuArticle(transferOut);
@extendDocumentFormDetailSkuArticle(transferOut, d, transferOut);
@extendDocumentFormDetailSkuArticleReadonly(transferOuts, d, transferOut);

// Проводим по регистру
@implementSkuLedger(transferOut, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantityTransferOutDetail (ledger);
@implementSkuLedgerOutFIFOBalanceA(transferOut, sku, stock);

// ---------------------------------------- Поступление ------------------------------------ //

CLASS transferIn 'Поступление товаров по накладным' : historyObject;
CLASS transferInDetail 'Строка поступления товаров по накладным' : inLIFOSkuLedger;

@defineDocumentTransferIn(transfer, 'Поступление товаров по накладным', sku, stock);
@defineDocumentFormTransferIn(transfer, 'Поступление товаров по накладным');

@defineDocumentDetailSkuArticle(transferIn);
@extendDocumentFormDetailSkuArticleReadonly(transferIns, d, transferIn);

@implementSkuLedger(transferIn, sku, stock);
quantityInLIFOSkuLedger (ledger) += quantityTransferInDetail(ledger);
limitInLIFOSkuLedgerBatch (ledger, batch) += costSkuLedgerBatch(transferOutDetailTransferInDetail(ledger), batch);

// ---------------------------------------- Приемка ------------------------------------ //

CLASS transferRec 'Приемка товаров по накладной' : historyObject;
CLASS transferRecPosted 'Проведенная приемка товаров по накладной' : transferRec, postedObject;

CLASS transferRecDetail 'Строка приемки товаров по накладной';

@defineDocumentTransferRec(transfer, 'Приемка товаров по накладным', sku, stock);
@defineDocumentFormTransferRec(transfer, 'Приемка товаров по накладным');

@defineDocumentDetailSkuArticle(transferRec);
@extendDocumentFormDetailSkuArticle(transferRec, d, transferRec);

@extendDocumentFormDetailSkuArticleReadonly(transferIns, r, transferRec);

// ---------------------------------------- Акт расхождений ------------------------------------ //
CLASS transferDiff 'Акт расхождений приемки товаров по накладной' : historyObject;

CLASS ABSTRACT transferDiffDetail 'Строка расхождений акта приемки товаров по накладной';
CLASS transferDiffEDetail 'Строка расхождений акта приемки товаров по накладной (излишек)' : transferDiffDetail, batch;
CLASS transferDiffSDetail 'Строка расхождений акта приемки товаров по накладной (недостача)' : transferDiffDetail, outFIFOSkuLedger;

@defineDocumentTransferDiff(transfer, 'Акт расхождений приемки товаров по накладной', sku, stock);
@defineDocumentFormTransferDiff(transfer);

@defineDocumentDetailSkuArticle(transferDiff);
@extendDocumentFormDetailSkuArticleReadonly(transferIns, r, transferDiff);

@implementSkuLedger(transferDiffE, sku, stock);
supplierPriceTransferDiffEDetail(detail) = 0.0 IF detail IS transferDiffEDetail;
@implementBBatch(transferDiffE, sku);
quantityBatch (batch) += quantityTransferDiffEDetail(batch);
skipASkuLedger (ledger) += ledger IS transferDiffEDetail;

@implementSkuLedger(transferDiffS, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantityTransferDiffSDetail(ledger);
limitOutFIFOSkuLedgerBatch (ledger, batch) += costTransferInBatch(transferInTransferDiffSDetail(ledger), batch);
skipASkuLedger (ledger) += ledger IS transferDiffSDetail;
