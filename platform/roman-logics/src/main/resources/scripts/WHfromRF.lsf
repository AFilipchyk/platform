MODULE WHfromRF;

REQUIRE System,

        Utils,
        Stock,
        Country,
        Numerator,
        Document,
        RomanDocument,
        Consignment,
        RomanStock,
        RetailPrice,
        Barcode,
        MasterData,
        RomanLogicsModule;

PRIORITY Stock, RomanLogicsModule;

CLASS WHfromRF 'Приход из РФ' : historyObject, numeratedObject;
CLASS WHfromRFPosted 'Закрытый приход из РФ' : WHfromRF, postedObject;
CLASS WHfromRFDetail 'Строка прихода из РФ' : batchB;

@defineDocumentTables(WHfromRF);

@defineNumeratedObject(WHfromRF, 'Нумератор для прихода из РФ', 'РФ');

// расходы для фрахтов РФ
currencyPayFreight 'Валюта платежей за РФ (ИД)' (freight) = currencyPayFreights() IF routeFreight(freight) == route.rf;
typeExchangePayFreight 'Тип обмена (ИД)' (freight) = typeExchangeSTX() IF routeFreight(freight) == route.rf;

@defineNearestRateExchangeObject(freight, pay, pay, dateArrivalFreight, baseGroup);

tariffVolumeFreight 'Тариф для перевозок (м3)' = DATA NUMERIC[14,2](freight);
percentCostFreight 'Процент расходов за оформление' = DATA NUMERIC[14,2](freight);
rateExchangeDataPayFreight 'Курс обмена' = DATA NUMERIC[14,2](freight);

tariffVolumeFreight(freight) <- tariffVolumeFreights() WHEN freight IS freight;
percentCostFreight(freight) <- percentCostFreights() WHEN freight IS freight;
rateExchangeDataPayFreight(freight) <- rateExchangePayPayFreight(freight) WHEN CHANGED (dateArrivalFreight(freight));

isWHfromRFFreight(freight) = TRUE IF (routeFreight(freight) == route.rf AND freight IS freightArrived);

sumRateRegistrationFreightSku 'Затраты на оформление' (freight, sku) = (priceInFullFreightSku(freight, sku) * percentCostFreight(freight))/100 IF routeFreight(freight) == route.rf;
sumRegistrationFreightSku 'Затраты на оформление' (freight, sku) = sumRateRegistrationFreightSku(freight, sku)/rateExchangeDataPayFreight(freight);

sumDeliveryFreight 'Затраты на доставку' (freight) = volumeDataFreight(freight) * tariffVolumeFreight(freight) IF routeFreight(freight) == route.rf;
sumRateDeliveryFreight 'Затраты на доставку (конверт.)' (freight) = sumDeliveryFreight(freight) * rateExchangeDataPayFreight(freight);

sumDeliveryFreightSku 'Затраты на доставку' (freight, sku) = (sumRateDeliveryFreight(freight) * sumGrossWeightFreightSku(freight, sku))/grossWeightFreight(freight);

priceRFFreightSku 'Себестоимость' (freight, sku) = UNION SUM priceInFullFreightSku(freight, sku), sumRateRegistrationFreightSku(freight, sku), sumDeliveryFreightSku(freight, sku);

EXTEND FORM freightInvoiceForm
    PROPERTIES tariffVolumeFreight(freight), percentCostFreight(freight), rateExchangeDataPayFreight(freight)
    PROPERTIES FORCE GRID sumRateRegistrationFreightSku(freight, sku), sumDeliveryFreightSku(freight, sku), priceRFFreightSku(freight, sku)
;

//@defineAggregation(freight, WHfromRF, isWHfromRFFreight);

freightWHfromRF (WHfromRF) = DATA freightArrived (WHfromRF);
nameFreightWHfromRF 'Фрахт' (WHfromRF) =  name(freightWHfromRF(WHfromRF)) IN documentPrmGroup MINCHARWIDTH 20 PREFCHARWIDTH 40;
castFreightWHfromRF = FORMULA STRING[100] '\'Фрахт от \' || CAST($1 AS TEXT) || \' (\' || CAST($2 AS TEXT) || \')\'';
descriptionFreightWHfromRF 'Фрахт' (WHfromRF) = castFreightWHfromRF(dateArrivalFreight(freightWHfromRF(WHfromRF)), nameExporterFreight(freightWHfromRF(WHfromRF)));

companyWHfromRF 'Импортёр (ИД)' = DATA company(WHfromRF) IN idGroup;
nameCompanyWHfromRF 'Импортёр' = name(companyWHfromRF(WHfromRF)) IN documentPrmGroup MINCHARWIDTH 20 PREFCHARWIDTH 40;


//@defineDocumentAggregationHeaderStock(freight, WHfromRF, warehouse, 'Оптовый склад');

@defineDocumentRelation(WHfromRF);
@defineDocumentPosted(WHfromRF);
@defineDocumentDetailIndex(WHfromRF);
@defineDocumentTime(WHfromRF);
@defineDocumentHeaderNote(WHfromRF);
@defineDocumentDetailActions(WHfromRF);
@defineDocumentStock(WHfromRF, stock, 'Склад');
@defineDocumentDetailSku(WHfromRF, sku);
@defineDocumentDetailQuantity(WHfromRF);
@defineDocumentDescription(WHfromRF, 'Поступление товара из РФ');

@defineAddDetailDialogSkuStock(WHfromRF, sku, stock, dialogSku);

@defineDocumentHeaderQuantity(WHfromRF);
@defineDocumentHeaderSkuQuantity(WHfromRF, sku);

@defineDocumentDetailSkuArticle(WHfromRF);

priceRFWHfromRFDetail 'Себестоимость' (WHfromRFDetail) = priceRFFreightSku(freightWHfromRF(WHfromRFWHfromRFDetail(WHfromRFDetail)), skuWHfromRFDetail(WHfromRFDetail));

//для учета по коробам
freightUnitWHfromRFDetail 'Короб (ИД)' (WHfromRFDetail) = DATA freightUnit(WHfromRFDetail);
barcodeFreightUnitWHfromRFDetail 'Короб' (WHfromRFDetail) = barcode (freightUnitWHfromRFDetail(WHfromRFDetail));

quantitySkuFreightUnitFreight(sku, freightUnit, freight) = quantityFreightUnitSku(freightUnit, sku) IF freightFreightUnit(freightUnit) == freight;

quantityWHfromRFDetailsSkuFreightUnit 'Количество принятое (в коробе)' (sku, freightUnit, WHfromRF) =
    GROUP SUM quantityWHfromRFDetail(WHfromRFDetail)
    BY skuWHfromRFDetail(WHfromRFDetail), freightUnitWHfromRFDetail(WHfromRFDetail), WHfromRFWHfromRFDetail(WHfromRFDetail);

isNotShippedSkuFreightUnitWHfromRF (sku, freightUnit, WHfromRF) = quantitySkuFreightUnitFreight (sku, freightUnit, freightWHfromRF(WHfromRF))
    AND NOT quantityWHfromRFDetailsSkuFreightUnit(sku, freightUnit, WHfromRF);

//приемка по коробам

currentFreightUnit 'Тек. короб (ИД)' (WHfromRF) = SESSION DATA freightUnit (WHfromRF);
barcodeCurrentFreightUnit 'Тек. короб (штрих-код)' (WHfromRF) = barcode(currentFreightUnit(WHfromRF));

withOutBarcodeSku (sku) = sku IS RomanLogicsModule.item AND NOT barcode(sku);

quantityOriginWHfromRFSku 'Ожидаемое к-во (тек. короб)' (WHfromRF, sku) = quantitySkuFreightUnitFreight(sku, currentFreightUnit(WHfromRF), freightWHfromRF(WHfromRF));
quantityWHfromRFSku 'Принятое к-во (тек. короб)' (WHfromRF, sku)=  quantityWHfromRFDetailsSkuFreightUnit(sku, currentFreightUnit(WHfromRF), WHfromRF);


diffQuantityWHfromRFSku 'Расхождение (тек. короб)' (WHfromRF, sku)= quantityWHfromRFSku(WHfromRF, sku) (-) quantityOriginWHfromRFSku(WHfromRF, sku);

quantityOriginWHfromRFDetail 'Ожидаемое к-во (тек. короб)' (WHfromRFDetail) = quantityOriginWHfromRFSku(WHfromRFWHfromRFDetail(WHfromRFDetail), skuWHfromRFDetail(WHfromRFDetail));

backgroundSkuWHfromRFDetail 'Цвет' (WHfromRFDetail) = RGB(255, 255, 0) IF quantityWHfromRFDetail(WHfromRFDetail) > quantityOriginWHfromRFDetail(WHfromRFDetail);



FORM addBarcodeWHfromRFFreightUnitSku 'Поиск товара(с коробами и выбором шрих-кода)'

    OBJECTS w = WHfromRF

    OBJECTS f = freightUnit FIXED PANEL
    PROPERTIES(f) READONLY sidSupplierBox, barcode

    OBJECTS s = RomanLogicsModule.item
    PROPERTIES(s) READONLY sidArticleSku, barcode, sidColorSupplierItem, nameColorSupplierItem, sidSizeSupplierItem

    FILTERS quantityFreightSku(freightWHfromRF(w), s) > 0

    FILTERGROUP filters1
        FILTER 'Товар без шрих-кода' 'F9' withOutBarcodeSku(s) DEFAULT

    FILTERGROUP filters2
        FILTER 'Только из текущего короба' 'F10' quantitySkuFreightUnitFreight(s, f, freightWHfromRF(w)) > 0

;

DESIGN addBarcodeWHfromRFFreightUnitSku FROM DEFAULT {

    f.box{
        caption = 'Короб';
    }
}

FORM addBarcodeWHfromRFSku 'Поиск товара(с выбором шрих-кода)'

    OBJECTS w = WHfromRF

    OBJECTS s = RomanLogicsModule.item
    PROPERTIES(s) READONLY sidArticleSku, barcode, sidColorSupplierItem, nameColorSupplierItem, sidSizeSupplierItem

    FILTERS quantityFreightSku(freightWHfromRF(w), s) > 0

    FILTERGROUP filters1
        FILTER 'Товар без шрих-кода' 'F9' withOutBarcodeSku(s) DEFAULT

;

FORM addSkuWHfromRF 'Ввод товара'

    OBJECTS i = RomanLogicsModule.item FIXED PANEL
    PROPERTIES(i) READONLY barcode
    PROPERTIES(i) sidArticleSku, sidColorSupplierItem, nameColorSupplierItem, sidSizeSupplierItem

;

DESIGN addSkuWHfromRF FROM DEFAULT {

    i.box{
        caption = 'Свойства нового товара';
        childConstraints = TO THE BOTTOM;
        ADD PROPERTY(sidArticleSku);
        ADD PROPERTY(sidColorSupplierItem);
        ADD PROPERTY(nameColorSupplierItem);
        ADD PROPERTY(sidSizeSupplierItem);
    }
}

createSkuWHfromRF = ACTION (barcode) NEWSESSION {

    ADDOBJ RomanLogicsModule.item;
    FOR s == addedObject() DO {
        SET barcode(s) <- (barcode AS STRING[14]);
        FORM addSkuWHfromRF OBJECTS i = s MODAL;
        IF formResult() == formResult.ok THEN {
            EXEC apply();
        }
    }
}

detailWHfromRFFreightUnitSku (WHfromRF, freightUnit, sku) = GROUP MAX WHfromRFDetail BY WHfromRFWHfromRFDetail(WHfromRFDetail), freightUnitWHfromRFDetail(WHfromRFDetail), skuWHfromRFDetail(WHfromRFDetail);


addDialogSkuFreightUnitWHfromRFBarcode 'Ввод штрих-кода' = ACTION (WHfromRF, barcode) {

    LOCAL dialogBarcodeSku = sku();
    LOCAL dialogBarcodeDetail = WHfromRFDetail();


    IF barcodeToObject(barcode) IS freightUnit THEN {
        SET currentFreightUnit (WHfromRF) <- barcodeToObject(barcode);
    } ELSE {

        SET dialogBarcodeSku() <- skuBarcodeIdDate(barcode, dateWHfromRF (WHfromRF));
        SET dialogBarcodeDetail() <- detailWHfromRFFreightUnitSku(WHfromRF, currentFreightUnit(WHfromRF), dialogBarcodeSku());

        IF barcode IS STRING[14] AND NOT dialogBarcodeSku() IS sku THEN {

            IF currentFreightUnit(WHfromRF) THEN {
                FORM addBarcodeWHfromRFFreightUnitSku OBJECTS f = currentFreightUnit(WHfromRF), w = WHfromRF MODAL;
            } ELSE {
                FORM addBarcodeWHfromRFSku OBJECTS w = WHfromRF MODAL;
            }
            IF formResult() == formResult.ok THEN {
                SET barcode(sku) IF sku == chosenObject('s') <- barcode;
                SET dialogBarcodeSku() <- chosenObject('s');
            } ELSE {
                EXEC createSkuWHfromRF(barcode);
                SET dialogBarcodeSku() <- skuBarcodeIdDate(barcode, dateWHfromRF (WHfromRF));
            }
        }

        IF dialogBarcodeSku() IS sku THEN {

            IF dialogBarcodeDetail() IS WHfromRFDetail THEN {
                SET quantityWHfromRFDetail(detail) IF detail == dialogBarcodeDetail() <-
                    quantityWHfromRFDetail(detail) (+) (1.0 IF detail IS WHfromRFDetail);
                } ELSE {

                    ADDOBJ WHfromRFDetail;
                    FOR w == addedObject() DO {
                        SET WHfromRFWHfromRFDetail(w) <- WHfromRF AS WHfromRF;
                        SET skuWHfromRFDetail(w) <- dialogBarcodeSku();
                        SET freightUnitWHfromRFDetail(w) <- currentFreightUnit(WHfromRF);
                        SET quantityWHfromRFDetail(w) <- 1.0;
                    }
                }
        }
    }
};

changeAddDetailInputBarcodeWHfromRFDetailWHfromRF = ACTION (WHfromRF) {
    REQUEST STRING[14] INPUT;
    EXEC addDialogSkuFreightUnitWHfromRFBarcode(WHfromRF, requestedString());
};
addDetailInputBarcodeWHfromRFDetailWHfromRF 'Ввод штрих-кода :' (WHfromRF) = SESSION DATA STRING[14] (WHfromRF) TOOLBAR EDITKEY 'F4'
                                                                        ON CHANGE EXEC changeAddDetailInputBarcodeWHfromRFDetailWHfromRF(WHfromRF);

fillWHfromRFDetailsSkuFreightUnit 'Заполнить строки из короба' (WHfromRF) = ACTION (WHfromRF) {
    FOR isNotShippedSkuFreightUnitWHfromRF (sku AS sku, currentFreightUnit(WHfromRF), WHfromRF AS WHfromRF) DO {
        ADDOBJ WHfromRFDetail;
        FOR w == addedObject() DO {
            SET WHfromRFWHfromRFDetail(w) <- WHfromRF AS WHfromRF;
            SET skuWHfromRFDetail (w) <- sku AS sku;
            SET quantityWHfromRFDetail (w) <- quantitySkuFreightUnitFreight (sku AS sku, currentFreightUnit(WHfromRF), freightWHfromRF(WHfromRF));
            SET freightUnitWHfromRFDetail(w) <- currentFreightUnit(WHfromRF);
        }
    }
} EDITKEY 'F5' CONFIRM;

shouldBePrintWHfromRF = SESSION DATA BOOLEAN (sku);
countSku = SESSION DATA INTEGER (sku);

quantitySkuFreightUnitWHfromRF (sku, freightUnit, WHfromRF) = quantitySkuFreightUnitFreight(sku, freightUnit, freightWHfromRF(WHfromRF));
quantityPositionsSkuInWHfromRFFreightUnit 'Кол-во позиций в коробе' (WHfromRF, freightUnit) =
    GROUP SUM 1 IF quantitySkuFreightUnitWHfromRF(sku, freightUnit, WHfromRF) BY WHfromRF, freightUnit;
quantityPositionsSkuInFreightUnitWHfromRF 'Кол-во позиций в коробе' (WHfromRF) = quantityPositionsSkuInWHfromRFFreightUnit(WHfromRF, currentFreightUnit(WHfromRF));

quantitySkuInWHfromRFFreightUnit 'Кол-во товара в коробе' (WHfromRF, freightUnit) =
    GROUP SUM quantitySkuFreightUnitWHfromRF(sku, freightUnit, WHfromRF) BY WHfromRF, freightUnit;
quantitySkuInFreightUnitWHfromRF 'Кол-во товара в коробе' (WHfromRF) = quantitySkuInWHfromRFFreightUnit(WHfromRF, currentFreightUnit(WHfromRF));

quantityPositionsSkuWHfromRFFreightUnit 'Кол-во позиций в документе' (WHfromRF, freightUnit) =
    GROUP SUM 1 IF quantityWHfromRFDetail(WHfromRFDetail) BY WHfromRFWHfromRFDetail(WHfromRFDetail), freightUnitWHfromRFDetail(WHfromRFDetail);
quantityPositionsSkuWHfromRF 'Кол-во позиций в документе' (WHfromRF) =
    quantityPositionsSkuWHfromRFFreightUnit(WHfromRF, currentFreightUnit(WHfromRF));

quantitySkuWHfromRFFreightUnit 'Кол-во товара в документе' (WHfromRF, freightUnit) =
    GROUP SUM quantityWHfromRFDetail(WHfromRFDetail) BY WHfromRFWHfromRFDetail(WHfromRFDetail), freightUnitWHfromRFDetail(WHfromRFDetail);
quantitySkuWHfromRF 'Кол-во товара в документе' (WHfromRF) =
    quantitySkuWHfromRFFreightUnit(WHfromRF, currentFreightUnit(WHfromRF));

quantityRemainedPositionSkuWHfromRF 'Кол-во оставшихся позиций в коробе' (WHfromRF) =
    UNION OVERRIDE 0 AND WHfromRF, quantityPositionsSkuInFreightUnitWHfromRF(WHfromRF) (-) quantityPositionsSkuWHfromRF(WHfromRF);

quantityRemainedSkuWHfromRF 'Кол-во оставшегося товара в коробе' (WHfromRF) =
    UNION OVERRIDE 0 AND WHfromRF, quantitySkuInFreightUnitWHfromRF(WHfromRF) (-) quantitySkuWHfromRF(WHfromRF);

quantitySkuInWHfromRF 'Кол-во товара' (WHfromRF, sku) = GROUP SUM quantityWHfromRFDetail(WHfromRFDetail)
    BY WHfromRFWHfromRFDetail(WHfromRFDetail), skuWHfromRFDetail(WHfromRFDetail);

CONSTRAINT currentFreightUnit(WHfromRF) IS freightUnit AND NOT quantitySkuInFreightUnitWHfromRF(WHfromRF) CHECKED BY currentFreightUnit MESSAGE 'Короб должен быть из текущей поставки';

CONSTRAINT WHfromRF IS WHfromRF AND NOT isWHfromRFFreight(freightWHfromRF(WHfromRF)) CHECKED BY freightWHfromRF MESSAGE 'Фрахт должен быть прибывшим из РФ';

FORM printMarksWHfromRF 'Печать маркировок товара' PRINT

    OBJECTS dt = DATETIME FIXED PANEL
    PROPERTIES(dt) OBJVALUE

    OBJECTS imp = company FIXED PANEL
    PROPERTIES(imp) OBJVALUE, name, addressLegalEntity, languageLegalEntity, localeLanguageCompany

    OBJECTS c = currency FIXED PANEL
    PROPERTIES(c) name, shortNameCurrency

    OBJECTS s = sku
    PROPERTIES(s) READONLY sidArticleSku, sidSizeSupplierItem, nameCommonSizeSku, sidGenderArticleSku, nameCategoryArticleSku,
                           mainCompositionSku, additionalCompositionSku, nameCountryBrandSupplierSku, nameBrandSupplierArticleSku, barcode, nameCountrySku,
                           sidColorSupplierItem, nameColorSupplierItem, nameSupplierArticleSku, addressSupplierArticleSku, warrantySku, countSku

    PROPERTIES(s, imp)     READONLY mainCompositionSkuCompany, additionalCompositionSkuCompany, nameCategoryArticleSkuCompany, sidGenderArticleSkuCompany,
                           nameCountrySkuCompany, nameCountryBrandSupplierSkuCompany

    PROPERTIES(s, c, dt)   priceABasePriceSetDocumentSkuCurrencyDateTime, priceADiscountPriceSetDocumentSkuCurrencyDateTime
    PROPERTIES(imp, s)     nameImporterSku, addressImporterSku

    FILTERS shouldBePrintWHfromRF(s)
;

printMarksSkuFreightUnit 'Печать маркировок товаров' (WHfromRF) = ACTION (WHfromRF) {

    SET shouldBePrintWHfromRF(sku) <- NULL;
    SET countSku(sku) <- NULL;
    SET shouldBePrintWHfromRF(sku) <- TRUE IF quantitySkuFreightUnitWHfromRF(sku, currentFreightUnit(WHfromRF), WHfromRF);
    SET countSku(sku) <- castToInteger(quantitySkuFreightUnitWHfromRF(sku, currentFreightUnit(WHfromRF), WHfromRF));
    FORM printMarksWHfromRF OBJECTS dt = dateTimeWHfromRF(WHfromRF), imp = companyWHfromRF(WHfromRF), c = currencyStock(stockWHfromRF(WHfromRF)) MODAL;

} CONFIRM;

printMarksSkuWHfromRF 'Печать маркировок товаров' (WHfromRF) = ACTION (WHfromRF) {

    SET shouldBePrintWHfromRF(sku) <- NULL;
    SET countSku(sku) <- NULL;
    SET shouldBePrintWHfromRF(sku) <- TRUE IF quantitySkuInWHfromRF(WHfromRF, sku);
    SET countSku(sku) <- castToInteger(quantitySkuInWHfromRF(WHfromRF, sku));
    FORM printMarksWHfromRF OBJECTS dt = dateTimeWHfromRF(WHfromRF), imp = companyWHfromRF(WHfromRF), c = currencyStock(stockWHfromRF(WHfromRF)) MODAL;

} CONFIRM TOOLBAR;

// Атрибуты поставщика

originalNameArticleSkuWHfromRFDetail 'Наименование(ориг.)' (WHfromRFDetail) = originalNameArticleSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;
nameCountryOfOriginArticleSkuWHfromRFDetail 'Страна происхождения' (WHfromRFDetail) = nameCountryOfOriginArticleSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;
nameBrandSupplierArticleSkuWHfromRFDetail 'Бренд' (WHfromRFDetail) = nameBrandSupplierArticleSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;
netWeightArticleSkuWHfromRFDetail 'Весс нетто(ориг.)' (WHfromRFDetail) = netWeightArticleSku(skuWHfromRFDetail(WHfromRFDetail));
mainCompositionOriginArticleSkuWHfromRFDetail 'Состав(ориг.)' (WHfromRFDetail) = mainCompositionOriginArticleSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;

// Внутренние атрибуты

languageWHfromRF (WHfromRF) = languageStock(stockWHfromRF(WHfromRF));
//stockWHfromRFDetail (WHfromRFDetail) = stockWHfromRF(WHfromRFWHfromRFDetail(WHfromRFDetail));
languageWHfromRFDetail (WHfromRFDetail) = languageWHfromRF(WHfromRFWHfromRFDetail(WHfromRFDetail));
@defineCompositionSkuLanguageDetailCustom (WHfromRFDetail, stock);

sidGenderArticleSkuWHfromRFDetail 'Пол товара' (WHfromRFDetail) = sidGenderArticleSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;
changeGenderArticleSkuWHfromRFDetail = ACTION (WHfromRFDetail) {
    REQUEST OBJECT g FORM gendersDialog MODAL;
    IF formResult() == formResult.ok THEN {
        SET genderArticle(article) IF article == articleSku(skuWHfromRFDetail(WHfromRFDetail)) <- chosenObject('g');
    }
}

nameCategoryArticleSkuWHfromRFDetail 'Номенклатурная группа' (WHfromRFDetail) = nameCategoryArticleSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;
changeCategoryArticleSkuWHfromRFDetail = ACTION (WHfromRFDetail) {
    REQUEST OBJECT c FORM categories MODAL;
    IF formResult() == formResult.ok THEN {
        SET categoryArticle(article) IF article == articleSku(skuWHfromRFDetail(WHfromRFDetail)) <- chosenObject('c');
    }
}

nameTypeFabricArticleSkuWHfromRFDetail 'Тип одежды' (WHfromRFDetail) = nameTypeFabricArticleSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;
changeTypeFabricArticleSkuWHfromRFDetail = ACTION (WHfromRFDetail) {
    REQUEST OBJECT t FORM typeFabrics MODAL;
    IF formResult() == formResult.ok THEN {
        SET typeFabricArticle(article) IF article == articleSku(skuWHfromRFDetail(WHfromRFDetail)) <- chosenObject('t');
    }
}

nameUnitOfMeasureArticleSkuWHfromRFDetail 'Ед. измерения товара' (WHfromRFDetail) = nameUnitOfMeasureArticleSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 15 MINCHARWIDTH 10;
changeUnitOfMeasureArticleSkuWHfromRFDetail = ACTION (WHfromRFDetail) {
    REQUEST OBJECT u FORM unitOfMeasures MODAL;
    IF formResult() == formResult.ok THEN {
        SET unitOfMeasureArticle(article) IF article == articleSku(skuWHfromRFDetail(WHfromRFDetail)) <- chosenObject('u');
    }
}

netWeightSkuWHfromRFDetail 'Весс нетто(ед.)' (WHfromRFDetail) = netWeightSku(skuWHfromRFDetail(WHfromRFDetail));
changeNetWeightSkuWHfromRFDetail = ACTION (WHfromRFDetail) {
    REQUEST NUMERIC[14,6] INPUT;
    SET netWeightSku(sku) IF sku == skuWHfromRFDetail(WHfromRFDetail) <- requestedNumeric();
}

nameCountryOfOriginSkuWHfromRFDetail 'Страна происхождения' (WHfromRFDetail) = nameCountryOfOriginSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;
changeCountryOfOriginSkuWHfromRFDetail = ACTION (WHfromRFDetail) {
    REQUEST OBJECT c FORM countries MODAL;
    IF formResult() == formResult.ok THEN {
        SET countryOfOriginSku(sku) IF sku == skuWHfromRFDetail(WHfromRFDetail) <- chosenObject('c');
    }
}

mainCompositionOriginSkuWHfromRFDetail 'Состав (ориг.)' (WHfromRFDetail) = mainCompositionOriginSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;
changeMainCompositionOriginSkuWHfromRFDetail = ACTION (WHfromRFDetail) {
    REQUEST STRING[200] INPUT;
    SET mainCompositionOriginSku(sku) IF sku == skuWHfromRFDetail(WHfromRFDetail) <- requestedString();
    EXEC translationMainCompositionSkuLanguage(skuWHfromRFDetail(WHfromRFDetail), languageWHfromRFDetail(WHfromRFDetail));
    EXEC translationMainCompositionSku(skuWHfromRFDetail(WHfromRFDetail));
}


additionalCompositionOriginSkuWHfromRFDetail 'Дополнительный состав (ориг.)' (WHfromRFDetail) = additionalCompositionOriginSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;
changeAdditionalCompositionOriginSkuWHfromRFDetail = ACTION (WHfromRFDetail) {
    REQUEST STRING[200] INPUT;
    SET additionalCompositionOriginSku(sku) IF sku == skuWHfromRFDetail(WHfromRFDetail) <- requestedString();
    EXEC translationAdditionalCompositionSkuLanguage(skuWHfromRFDetail(WHfromRFDetail), languageWHfromRFDetail(WHfromRFDetail));
    EXEC translationAdditionalCompositionSku(skuWHfromRFDetail(WHfromRFDetail));
}

coefficientArticleSkuWHfromRFDetail 'Кол-во в комплекте' (WHfromRFDetail) = coefficientArticleSku(skuWHfromRFDetail(WHfromRFDetail));
changeCoefficientArticleSkuWHfromRFDetail = ACTION (WHfromRFDetail) {
    REQUEST INTEGER INPUT;
    SET coefficientArticle(article) IF article == articleSku(skuWHfromRFDetail(WHfromRFDetail)) <- requestedInteger();
}

mainCompositionSkuWHfromRFDetail 'Состав' (WHfromRFDetail) = mainCompositionSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;
changeMainCompositionSkuWHfromRFDetail = ACTION (WHfromRFDetail) {
    REQUEST STRING[200] INPUT;
    SET mainCompositionSku(sku) IF sku == skuWHfromRFDetail(WHfromRFDetail) <- requestedString();
}

additionalCompositionSkuWHfromRFDetail 'Дополнительный состав' (WHfromRFDetail) = additionalCompositionSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;
changeAdditionalCompositionSkuWHfromRFDetail = ACTION (WHfromRFDetail) {
    REQUEST STRING[200] INPUT;
    SET additionalCompositionSku(sku) IF sku == skuWHfromRFDetail(WHfromRFDetail) <- requestedString();
}

quantityArticleWHfromRF (article, WHfromRF) = GROUP SUM quantityWHfromRFDetail(WHfromRFDetail)
    BY articleSku(skuWHfromRFDetail(WHfromRFDetail)), WHfromRFWHfromRFDetail(WHfromRFDetail);

quantityArticleWHfromRFDetail (WHfromRFDetail) =
    quantityArticleWHfromRF(articleSku(skuWHfromRFDetail(WHfromRFDetail)), WHfromRFWHfromRFDetail(WHfromRFDetail));

backgroundArticleWHfromRFDetail 'Цвет' (WHfromRFDetail) = RGB(255, 128, 128) IF quantityArticleWHfromRFDetail(WHfromRFDetail) == 1;

quantityArticleSizeWHfromRF (article, sizeSupplier, WHfromRF) = GROUP SUM quantityWHfromRFDetail(WHfromRFDetail)
    BY articleSku(skuWHfromRFDetail(WHfromRFDetail)), sizeSupplierItem(skuWHfromRFDetail(WHfromRFDetail)), WHfromRFWHfromRFDetail(WHfromRFDetail);

quantityArticleSizeWHfromRFDetail (WHfromRFDetail) =
    quantityArticleSizeWHfromRF(articleSku(skuWHfromRFDetail(WHfromRFDetail)),
                                sizeSupplierItem(skuWHfromRFDetail(WHfromRFDetail)),
                                WHfromRFWHfromRFDetail(WHfromRFDetail));

backgroundArticleSizeWHfromRFDetail 'Цвет' (WHfromRFDetail) = RGB(255, 128, 128) IF quantityArticleSizeWHfromRFDetail(WHfromRFDetail) == 1;

quantityArticleColorWHfromRF (article, colorSupplier, WHfromRF) = GROUP SUM quantityWHfromRFDetail(WHfromRFDetail)
    BY articleSku(skuWHfromRFDetail(WHfromRFDetail)), colorSupplierItem(skuWHfromRFDetail(WHfromRFDetail)), WHfromRFWHfromRFDetail(WHfromRFDetail);

quantityArticleColorWHfromRFDetail (WHfromRFDetail) =
    quantityArticleColorWHfromRF(articleSku(skuWHfromRFDetail(WHfromRFDetail)),
                                colorSupplierItem(skuWHfromRFDetail(WHfromRFDetail)),
                                WHfromRFWHfromRFDetail(WHfromRFDetail));

backgroundArticleColorWHfromRFDetail 'Цвет' (WHfromRFDetail) = RGB(255, 128, 128) IF quantityArticleColorWHfromRFDetail(WHfromRFDetail) == 1;

costWHfromRFDetail(WHfromRFDetail) =
    priceInFreightSku(freightWHfromRF(WHfromRFWHfromRFDetail(WHfromRFDetail)), skuWHfromRFDetail(WHfromRFDetail));
@implementBatch(WHfromRF, sku, stock, cost);
quantityBatch (batch) += quantityWHfromRFDetail(batch);
skipASkuLedger (ledger) += ledger IS WHfromRFDetail;

FORM WHfromRF 'Приход товара из РФ'

    OBJECTS w = WHfromRF FIXED PANEL, d = WHfromRFDetail
    PROPERTIES(w) objectClassName, nameNumeratorObject, numberObject, seriesObject, dateWHfromRF, timeWHfromRF, nameCompanyWHfromRF, nameFreightWHfromRF, nameStockWHfromRF, barcodeCurrentFreightUnit,
                  fillWHfromRFDetailsSkuFreightUnit, printMarksSkuFreightUnit, printMarksSkuWHfromRF TODRAW d FORCE PANEL
    PROPERTIES(w) READONLY quantityRemainedPositionSkuWHfromRF SHOWIF barcodeCurrentFreightUnit(w),
                           quantityRemainedSkuWHfromRF SHOWIF barcodeCurrentFreightUnit(w)

    PROPERTIES(d) READONLY indexWHfromRFDetail, barcodeWHfromRFDetail, nameCategoryArticleSkuWHfromRFDetail,
                           nameBrandWHfromRFDetail, sidArticleWHfromRFDetail, sidSizeWHfromRFDetail,
                           sidColorWHfromRFDetail, nameColorWHfromRFDetail, barcodeFreightUnitWHfromRFDetail

    PROPERTIES(d) quantityWHfromRFDetail BACKGROUND backgroundSkuWHfromRFDetail(d)

    PROPERTIES(d) READONLY nameUnitOfMeasureArticleSkuWHfromRFDetail

    PROPERTIES(d) delete

    PROPERTIES(w) TODRAW d addDetailInputBarcodeWHfromRFDetailWHfromRF, deleteWHfromRFDetailWHfromRF

    PROPERTIES(d) READONLY FORCE PANEL originalNameArticleSkuWHfromRFDetail, nameCountryOfOriginArticleSkuWHfromRFDetail,
                                       nameBrandSupplierArticleSkuWHfromRFDetail, netWeightArticleSkuWHfromRFDetail,
                                       mainCompositionOriginArticleSkuWHfromRFDetail

    PROPERTIES(d) FORCE PANEL sidGenderArticleSkuWHfromRFDetail BACKGROUND backgroundArticleWHfromRFDetail(d) ON CHANGE EXEC changeGenderArticleSkuWHfromRFDetail(d),
                              c = nameCategoryArticleSkuWHfromRFDetail BACKGROUND backgroundArticleWHfromRFDetail(d) ON CHANGE EXEC changeCategoryArticleSkuWHfromRFDetail(d),
                              nameTypeFabricArticleSkuWHfromRFDetail BACKGROUND backgroundArticleWHfromRFDetail(d) ON CHANGE EXEC changeTypeFabricArticleSkuWHfromRFDetail(d),
                              u = nameUnitOfMeasureArticleSkuWHfromRFDetail BACKGROUND backgroundArticleWHfromRFDetail(d) ON CHANGE EXEC changeUnitOfMeasureArticleSkuWHfromRFDetail(d),
                              netWeightSkuWHfromRFDetail BACKGROUND backgroundArticleSizeWHfromRFDetail(d) ON CHANGE EXEC changeNetWeightSkuWHfromRFDetail(d),
                              nameCountryOfOriginSkuWHfromRFDetail BACKGROUND backgroundArticleColorWHfromRFDetail(d) ON CHANGE EXEC changeCountryOfOriginSkuWHfromRFDetail(d),
                              mainCompositionOriginSkuWHfromRFDetail BACKGROUND backgroundArticleColorWHfromRFDetail(d) ON CHANGE EXEC changeMainCompositionOriginSkuWHfromRFDetail(d),
                              mainCompositionSkuWHfromRFDetail BACKGROUND backgroundArticleColorWHfromRFDetail(d) ON CHANGE EXEC changeMainCompositionSkuWHfromRFDetail(d),
                              additionalCompositionOriginSkuWHfromRFDetail BACKGROUND backgroundArticleColorWHfromRFDetail(d) ON CHANGE EXEC changeAdditionalCompositionOriginSkuWHfromRFDetail(d),
                              additionalCompositionSkuWHfromRFDetail BACKGROUND backgroundArticleColorWHfromRFDetail(d) ON CHANGE EXEC changeAdditionalCompositionSkuWHfromRFDetail(d),
                              coefficientArticleSkuWHfromRFDetail BACKGROUND backgroundArticleWHfromRFDetail(d) ON CHANGE EXEC changeCoefficientArticleSkuWHfromRFDetail(d)

    PROPERTIES(d) FORCE PANEL SHOWIF languageWHfromRF(w) BACKGROUND backgroundArticleColorWHfromRFDetail(d) mainCompositionWHfromRFDetail, additionalCompositionWHfromRFDetail

    OBJECTS s = sku
    PROPERTIES(s) READONLY barcode, nameCategoryArticleSku, nameBrandSupplierArticleSku, sidArticleSku,
                           sidSizeSupplierItem FORCE GRID, sidColorSupplierItem FORCE GRID, nameColorSupplierItem FORCE GRID, shortNameUOMSku
    PROPERTIES(w, s) quantityWHfromRFSku, quantityOriginWHfromRFSku, diffQuantityWHfromRFSku

    FILTERGROUP filtersQuantityOrigin
        FILTER 'Показывать с расхождением' 'F8' diffQuantityWHfromRFSku(w, s) DEFAULT
        FILTER 'Показывать ожидаемые/принятые' 'F7' quantityOriginWHfromRFSku(w, s) OR quantityWHfromRFSku(w, s)


    FILTERS inWHfromRFWHfromRFDetail(w, d)

    FILTERGROUP filtersQuantity
        FILTER 'Показывать принятые' 'F9' quantityWHfromRFDetail(d) DEFAULT

    EVENTS
        ON OK EXEC prePostWHfromRF(w)

    EDIT WHfromRF OBJECT w
;

DESIGN WHfromRF FROM DEFAULT {

    main {
        preferredSize = (1024, 768);
        NEW top {
            childConstraints =  TO THE BOTTOM;

            w.box{
                NEW head{
                    caption = 'Шапка документа';
                    childConstraints = TO THE RIGHTBOTTOM;
                    ADD PROPERTY(objectClassName){preferredCharWidth = 15;}
                    ADD PROPERTY(nameStockWHfromRF);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateWHfromRF);
                    ADD PROPERTY(timeWHfromRF);
                }
                ADD w.documentPrmGroup {
                    childConstraints = TO THE RIGHTBOTTOM;
                }
                NEW freightUnit{
                    caption = 'Короб';
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(quantityRemainedPositionSkuWHfromRF);
                    ADD PROPERTY(quantityRemainedSkuWHfromRF);
                    ADD PROPERTY(barcodeCurrentFreightUnit);
                    ADD PROPERTY(fillWHfromRFDetailsSkuFreightUnit);
                    ADD PROPERTY(printMarksSkuFreightUnit);
                }
            }
        }

        NEW wor {
            type = TABBED;
            ADD d.box {
                NEW firstCase {
                    caption = 'Атрибуты поставщика';
                    childConstraints = TO THE RIGHTBOTTOM;
                    ADD PROPERTY(originalNameArticleSkuWHfromRFDetail);
                    ADD PROPERTY(nameCountryOfOriginArticleSkuWHfromRFDetail);
                    ADD PROPERTY(nameBrandSupplierArticleSkuWHfromRFDetail);
                    ADD PROPERTY(netWeightArticleSkuWHfromRFDetail);
                    ADD PROPERTY(mainCompositionOriginArticleSkuWHfromRFDetail);
                }

                NEW row {
                    title = 'Внутренние атрибуты';
                    childConstraints =  TO THE BOTTOM;
                    NEW row1 {
                        caption = 'Общие';
                        childConstraints =  TO THE RIGHTBOTTOM;
                        ADD PROPERTY(sidGenderArticleSkuWHfromRFDetail);
                        ADD PROPERTY(c);
                        ADD PROPERTY(nameTypeFabricArticleSkuWHfromRFDetail);
                        ADD PROPERTY(u);
                        ADD PROPERTY(netWeightSkuWHfromRFDetail);
                        ADD PROPERTY(nameCountryOfOriginSkuWHfromRFDetail);
                        ADD PROPERTY(coefficientArticleSkuWHfromRFDetail);
                    }
                    NEW row2 {
                        caption = 'Состав';
                        childConstraints =  TO THE RIGHTBOTTOM;
                        ADD PROPERTY(mainCompositionOriginSkuWHfromRFDetail);
                        ADD PROPERTY(mainCompositionSkuWHfromRFDetail);
                        ADD PROPERTY(mainCompositionWHfromRFDetail);
                    }
                    NEW row3 {
                        caption = 'Доп. состав';
                        childConstraints =  TO THE RIGHTBOTTOM;
                        ADD PROPERTY(additionalCompositionOriginSkuWHfromRFDetail);
                        ADD PROPERTY(additionalCompositionSkuWHfromRFDetail);
                        ADD PROPERTY(additionalCompositionWHfromRFDetail);
                    }

                }
            }
            ADD s.box {title = 'Содержимое короба';}
        }

        PROPERTY(formOkAction) {
            caption = 'Провести';
        }
        ADD functions.box;
    }
}

statusRecWHfromRF 'Статус приемки' (WHfromRF) =
    IF WHfromRF IS WHfromRFPosted THEN 'Проведен' ELSE 'Не проведен' IF (WHfromRF IS WHfromRF) PREFCHARWIDTH 15 MINCHARWIDTH 15;

FORM WHfromRFs 'Приход товара из РФ'

    OBJECTS w = WHfromRF

    PROPERTIES(w) READONLY objectClassName, numberObject, seriesObject, dateWHfromRF, timeWHfromRF, nameFreightWHfromRF, nameStockWHfromRF,
                           countWHfromRFDetailWHfromRF, quantityWHfromRFDetailWHfromRF, statusRecWHfromRF,
                           descriptionFreightWHfromRF, nameCompanyWHfromRF

    PROPERTIES(w) ADDFORM, EDITFORM, delete FORCE PANEL DRAWTOTOOLBAR

    PROPERTIES (w) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed,
                                        hostnameComputerClosed

    OBJECTS d = WHfromRFDetail
    PROPERTIES(d) READONLY indexWHfromRFDetail, barcodeWHfromRFDetail, nameCategoryArticleSkuWHfromRFDetail,
                           nameBrandWHfromRFDetail, sidArticleWHfromRFDetail, sidSizeWHfromRFDetail,
                           sidColorWHfromRFDetail, nameColorWHfromRFDetail, barcodeFreightUnitWHfromRFDetail,
                           quantityWHfromRFDetail, nameUnitOfMeasureArticleSkuWHfromRFDetail

    FILTERS WHfromRFWHfromRFDetail(d) == w
;

DESIGN WHfromRFs FROM DEFAULT{

    NEW topContainer {

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD w.box;
        NEW docDetail{

            type = TABBED;
            ADD d.box{
                title = 'Спецификация';
            };
            NEW documentHistory {

                title = 'История';
                ADD w.historyGroup;
                ADD w.postedGroup;
            }

        }
    }
    ADD functions.box;

    PROPERTY (delete(w)) {
        caption = 'Удалить';
        askConfirm = TRUE;
    }
}
