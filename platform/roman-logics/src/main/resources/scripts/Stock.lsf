MODULE Stock;

IMPORT BaseLogicsModule;

IMPORT Utils;

CLASS ABSTRACT stockGroup 'Группа складов' : named;
TABLE stockGroup(stockGroup);

parentStockGroup = ABSTRACT stockGroup (stockGroup);

hasParentStockGroupLevel 'Уровень' (child, parent) = RECURSION 1l AND child IS stockGroup AND parent == child
                                                                  STEP 2l AND parent == parentStockGroup($parent) PERSISTENT;

hasParentStockGroup 'Уровень' (child, parent) = TRUE AND hasParentStockGroupLevel(child, parent);


CLASS ABSTRACT stock2 'Склад' : named;
TABLE stock2(stock2);

stockGroupStock (stock2) = ABSTRACT stockGroup (stock2);

CLASS ABSTRACT sku2 'SKU';
TABLE sku2(sku2);

nameSku 'Наименование' (sku2) = ABSTRACT STRING[200] (sku2) PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 80 INDEXED AGGPROP;


CLASS ABSTRACT balanceSkuLedger 'Изменение остатка по товару';
TABLE balanceSkuLedger (balanceSkuLedger);

CLASS ABSTRACT inBalanceSkuLedger 'Приход' : balanceSkuLedger;
CLASS ABSTRACT outBalanceSkuLedger 'Расход' : balanceSkuLedger;

CLASS ABSTRACT batch 'Партия' : inBalanceSkuLedger;
TABLE batch(batch);
TABLE balanceSkuLedgerBatch (balanceSkuLedger, batch);

CLASS ABSTRACT outUserBalanceSkuLedger 'Внешний расход с указанной партией' : outBalanceSkuLedger;
CLASS ABSTRACT outAutoBalanceSkuLedger 'Внешний расход с автоматической себестоимостью' : outBalanceSkuLedger;

CLASS ABSTRACT inAutoBalanceSkuLedger 'Внутренний приход с автоматической себестоимостью' : inBalanceSkuLedger;

CLASS ABSTRACT inTransferBalanceSkuLedger 'Внутренний приход по перемещению' : inBalanceSkuLedger;

//---------------------------- Количественные регистры (конкретная реализация) ----------------------------------------//

dateTimeBalanceSkuLedger 'Дата/время' = ABSTRACT DATETIME (balanceSkuLedger) PERSISTENT INDEXED;
dateBalanceSkuLedger'Дата' (ledger) = dateInTime(dateTimeBalanceSkuLedger(ledger)) PERSISTENT;

orderBalanceSkuLedger (ledger) = LIST(dateTimeBalanceSkuLedger(ledger), ledger);

isPostedBalanceSkuLedger 'Закрыт' = ABSTRACT BOOLEAN (balanceSkuLedger) PERSISTENT;

skuBalanceSkuLedger = ABSTRACT sku2 (balanceSkuLedger) PERSISTENT INDEXED;
nameSkuBalanceSkuLedger 'SKU' (ledger) = nameSku(skuBalanceSkuLedger(ledger));

stockBalanceSkuLedger = ABSTRACT stock2(balanceSkuLedger) PERSISTENT INDEXED;
nameStockBalanceSkuLedger 'Склад' (ledger) = name(stockBalanceSkuLedger(ledger));

descriptionBalanceSkuLedger 'Название документа' = ABSTRACT STRING[200] (balanceSkuLedger);

quantityBatch 'Кол-во в партии' = ABSTRACT NUMERIC[14,3] (batch) PERSISTENT;

quantityOutAutoBalanceSkuLedger 'Кол-во' = ABSTRACT NUMERIC[14,3] (outAutoBalanceSkuLedger);

quantityOutUserBalanceSkuLedger 'Кол-во' = ABSTRACT NUMERIC[14,3] (outUserBalanceSkuLedger);
batchOutUserBalanceSkuLedger 'Партия' = ABSTRACT batch (outUserBalanceSkuLedger);

quantityOutBalanceSkuLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityOutAutoBalanceSkuLedger(ledger),
                                                                 quantityOutUserBalanceSkuLedger(ledger) PERSISTENT;

quantityInAutoBalanceSkuLedger 'Кол-во' (ledger) = ABSTRACT NUMERIC[14,3] (inAutoBalanceSkuLedger);

quantityInTransferBalanceSkuLedger 'Кол-во' (ledger) = ABSTRACT NUMERIC[14,3] (inTransferBalanceSkuLedger);

quantityInBalanceSkuLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityBatch(ledger),
                                                                quantityInAutoBalanceSkuLedger(ledger),
                                                                quantityInTransferBalanceSkuLedger(ledger) PERSISTENT;

quantityBalanceSkuLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityInBalanceSkuLedger(ledger),
                                                              quantityOutBalanceSkuLedger(ledger) PERSISTENT;

signedQuantityBalanceSkuLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityInBalanceSkuLedger(ledger),
                                                                    -quantityOutBalanceSkuLedger(ledger) PERSISTENT;

// ---------------------------- Остаток по товару -------------------------------- //

currentBalanceSkuLedger 'Текущий остаток' (sku2, stock2) = GROUP SUM signedQuantityBalanceSkuLedger (ledger) AND isPostedBalanceSkuLedger(ledger)
                                                          BY skuBalanceSkuLedger(ledger), stockBalanceSkuLedger(ledger) PERSISTENT;
countBalanceSkuLedger 'Кол-во движений' (sku2, stock2) = GROUP SUM 1 AND signedQuantityBalanceSkuLedger (ledger) AND isPostedBalanceSkuLedger(ledger)
                                                          BY skuBalanceSkuLedger(ledger), stockBalanceSkuLedger(ledger) PERSISTENT;

quantityInSkuStockDate (sku2, stock2, date) = GROUP SUM quantityInBalanceSkuLedger(ledger) AND isPostedBalanceSkuLedger(ledger)
                                                  BY skuBalanceSkuLedger(ledger), stockBalanceSkuLedger(ledger), dateBalanceSkuLedger(ledger) PERSISTENT;

quantityOutSkuStockDate (sku2, stock2, date) = GROUP SUM quantityOutBalanceSkuLedger(ledger) AND isPostedBalanceSkuLedger(ledger)
                                                   BY skuBalanceSkuLedger(ledger), stockBalanceSkuLedger(ledger), dateBalanceSkuLedger(ledger) PERSISTENT;

quantitySkuStockDate (sku2, stock2, date) = quantityInSkuStockDate(sku2, stock2, date)
                                          (+)
                                          quantityOutSkuStockDate(sku2, stock2, date) PERSISTENT;

signedQuantitySkuStockDate (sku2, stock2, date) = quantityInSkuStockDate(sku2, stock2, date)
                                                (-)
                                                quantityOutSkuStockDate(sku2, stock2, date) PERSISTENT;

// без учета текущей даты/времени
balanceBSkuLedgerDate 'Остаток на начало дня' (sku2, stock2, date) = UNION SUM currentBalanceSkuLedger(sku2, stock2) AND date IS DATE,
                                                                                         -[GROUP SUM signedQuantitySkuStockDate (sku2, stock2, dateIn) AND dateIn >= (date AS DATE)
                                                                                                 BY sku2, stock2, date](sku2, stock2, date);

// с учетом текущей даты/времени
balanceASkuLedgerDate 'Остаток на конец дня' (sku2, stock2, date) = UNION SUM currentBalanceSkuLedger(sku2, stock2) AND date IS DATE,
                                                                                         -[GROUP SUM signedQuantitySkuStockDate (sku2, stock2, dateIn) AND dateIn > (date AS DATE)
                                                                                                 BY sku2, stock2, date](sku2, stock2, date);

// без учета текущей даты/времени
balanceBSkuLedgerDateTime 'Остаток на начало дня' (sku2, stock2, dateTime) = UNION SUM currentBalanceSkuLedger(sku2, stock2) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM signedQuantityBalanceSkuLedger (ledger) AND dateTimeBalanceSkuLedger(ledger) >= (dateTime AS DATETIME) AND isPostedBalanceSkuLedger(ledger)
                                                                         BY skuBalanceSkuLedger(ledger), stockBalanceSkuLedger(ledger), dateTime](sku2, stock2, dateTime);

// с учетом текущей даты/времени
balanceASkuLedgerDateTime 'Остаток на конец дня' (sku2, stock2, dateTime) = UNION SUM currentBalanceSkuLedger(sku2, stock2) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM signedQuantityBalanceSkuLedger (ledger) AND dateTimeBalanceSkuLedger(ledger) > (dateTime AS DATETIME) AND isPostedBalanceSkuLedger(ledger)
                                                                         BY skuBalanceSkuLedger(ledger), stockBalanceSkuLedger(ledger), dateTime](sku2, stock2, dateTime);

dateLastMovedSkuStock 'Дата последнего движения товара' (sku2, stock2) =
    GROUP MAX dateTimeBalanceSkuLedger(ledger)
    BY skuBalanceSkuLedger(ledger), stockBalanceSkuLedger(ledger) PERSISTENT;

costBalanceSkuLedgerBatch 'Расписано' (ledger, batch) = DATA NUMERIC[14,3] (balanceSkuLedger, batch);

signedCostBalanceSkuLedgerBatch (ledger, batch) = IF ledger IS outBalanceSkuLedger
                                                        THEN -costBalanceSkuLedgerBatch(ledger, batch)
                                                        ELSE costBalanceSkuLedgerBatch(ledger, batch);

currentBalanceBatchLedger 'Текущий остаток' (batch, stock2) = GROUP SUM signedCostBalanceSkuLedgerBatch (ledger, batch) AND isPostedBalanceSkuLedger(ledger)
                                                          BY batch, stockBalanceSkuLedger(ledger) PERSISTENT;

costedBalanceSkuLedger 'Расписано' (ledger) = GROUP SUM costBalanceSkuLedgerBatch (ledger, batch) BY ledger PERSISTENT;
needToCostBalanceSkuLedger 'Требуется расчет себестоимости' (ledger) = quantityBalanceSkuLedger(ledger) > 0 AND isPostedBalanceSkuLedger(ledger)
                                                                        AND NOT quantityBalanceSkuLedger(ledger) == costedBalanceSkuLedger(ledger);

quantityBatchBatch 'Кол-во' (ledger, batch) = quantityBatch(ledger) AND batch == ledger;

dateTimeBatch 'Дата/время' (batch) = ABSTRACT DATETIME (batch) PERSISTENT INDEXED;
isPostedBatch 'Закрыт' (batch) = ABSTRACT BOOLEAN (batch) PERSISTENT;
skuBatch 'SKU (ИД)' (batch) = ABSTRACT sku2 (batch) PERSISTENT INDEXED;
supplierPriceBatch 'Цена поставщика' (batch) = ABSTRACT NUMERIC[14,2] (batch) PERSISTENT;
descriptionBatch 'Описание' (batch) = ABSTRACT STRING[200] (batch) PERSISTENT;

orderBatch (batch) = LIST (dateTimeBatch(batch), batch) PERSISTENT;

currentBalanceBatch 'Остаток (всего)' = GROUP SUM currentBalanceBatchLedger(batch, stock2) BY batch PERSISTENT;

quantityOutUserBalanceSkuLedgerBatch (ledger, batch) = quantityOutUserBalanceSkuLedger(ledger) AND batch == batchOutUserBalanceSkuLedger(ledger);
quantityOutAutoBalanceSkuLedgerBatch (ledger, batch) =
        PARTITION UNGROUP quantityOutAutoBalanceSkuLedger
                  LIMIT currentBalanceBatchLedger(batch, stockBalanceSkuLedger(ledger)) AND skuBatch(batch) == skuBalanceSkuLedger(ledger)
                  BY ledger
                  ORDER orderBatch(batch);

quantityOutBalanceSkuLedgerBatch (ledger, batch) = UNION EXCLUSIVE quantityOutUserBalanceSkuLedgerBatch(ledger, batch),
                                                                    quantityOutAutoBalanceSkuLedgerBatch(ledger, batch);

quantityInBalanceSkuLedgerBatch (ledger, batch) =
        PARTITION UNGROUP quantityInAutoBalanceSkuLedger
                  LIMIT (quantityBatch(batch) (-) currentBalanceBatch(batch))
                    AND countBalanceSkuLedger(skuBalanceSkuLedger(ledger), stockBalanceSkuLedger(ledger))
                    AND skuBatch(batch) == skuBalanceSkuLedger(ledger)
                  BY ledger
                  ORDER DESC orderBatch(batch);

limitInTransferBalanceSkuLedgerBatch = ABSTRACT NUMERIC[14,3] (inTransferBalanceSkuLedger, batch);

quantityInTransferBalanceSkuLedgerBatch (ledger, batch) =
        PARTITION UNGROUP quantityInTransferBalanceSkuLedger
                  LIMIT limitInTransferBalanceSkuLedgerBatch(ledger, batch)
                    AND skuBatch(batch) == skuBalanceSkuLedger(ledger)
                  BY ledger
                  ORDER DESC orderBatch(batch);

quantityBalanceSkuLedgerBatch (ledger, batch) = UNION EXCLUSIVE quantityBatchBatch(ledger, batch),
                                                                 quantityOutBalanceSkuLedgerBatch(ledger, batch),
                                                                 quantityInBalanceSkuLedgerBatch(ledger, batch),
                                                                 quantityInTransferBalanceSkuLedgerBatch(ledger, batch);

supplierSumBalanceSkuLedgerBatch 'Сумма поставщика без НДС' (ledger, batch) = costBalanceSkuLedgerBatch(ledger, batch) * supplierPriceBatch(batch);
supplierSumBalanceSkuLedger 'Сумма поставщика без НДС' = GROUP SUM supplierSumBalanceSkuLedgerBatch(ledger, batch) BY ledger;

resetCostBalanceSkuLedgerBatch 'Перерассчитать себестоимость' = ACTION (ledger) NEWSESSION AUTOAPPLY {
    IF costedBalanceSkuLedger(ledger) THEN {
        SET costBalanceSkuLedgerBatch(ledger, batch) <- NULL;
        EXEC apply(); // todo : здесь apply не нужен, но без этого следующая команда повиснет
    }
    SET costBalanceSkuLedgerBatch(ledger, batch) <- quantityBalanceSkuLedgerBatch(ledger, batch);
}

// мгновенный расчет себестоимости
resetCostBalanceSkuLedgerBatch (ledger) WHEN ASSIGNED(isPostedBalanceSkuLedger(ledger));

setBalanceSkuLedgerBatchCost 'Дорассчитать себестоимость' = ACTION () NEWSESSION {

    SET costBalanceSkuLedgerBatch(ledger, batch) AND needToCostBalanceSkuLedger(ledger) <- NULL;
    EXEC apply();

    FOR needToCostBalanceSkuLedger(ledger) ORDER orderBalanceSkuLedger(ledger) DO {
        SET costBalanceSkuLedgerBatch(ledger, batch) <- quantityBalanceSkuLedgerBatch(ledger, batch);
        EXEC apply();
    }
} CONFIRM;

resetBalanceSkuLedgerBatchCost 'Перерассчитать себестоимость' = ACTION () NEWSESSION {

    FORM dialogDate MODAL;
    IF formResult() == formResult.ok THEN {

        FOR d == chosenDate('d') DO {
            SET costBalanceSkuLedgerBatch(ledger, batch) AND dateBalanceSkuLedger(ledger) >= (d AS DATE) <- NULL;
            EXEC apply();

            FOR dateBalanceSkuLedger(ledger) >= (d AS DATE) AND isPostedBalanceSkuLedger(ledger) ORDER orderBalanceSkuLedger(ledger) DO {
                SET costBalanceSkuLedgerBatch(ledger, batch) <- quantityBalanceSkuLedgerBatch(ledger, batch);
                EXEC apply();
            }
        }
    }
} CONFIRM;

clearBalanceSkuLedgerBatchCost 'Сбросить всю себестоимость' = ACTION() NEWSESSION AUTOAPPLY {
    SET costBalanceSkuLedgerBatch(ledger, batch) <- NULL;
} CONFIRM;

FORM costItemLedger 'Себестоимость'
    OBJECTS bil = balanceSkuLedger
    PROPERTIES(bil) READONLY dateTimeBalanceSkuLedger, descriptionBalanceSkuLedger, nameSkuBalanceSkuLedger, nameStockBalanceSkuLedger,
                             quantityBalanceSkuLedger, costedBalanceSkuLedger
    PROPERTIES(bil)          resetCostBalanceSkuLedgerBatch
    ORDER BY dateTimeBalanceSkuLedger

    FILTERGROUP needToCostBalanceSkuLedger
        FILTER 'Нерасписанные строки' 'F9' needToCostBalanceSkuLedger(bil)

    OBJECTS bt = batch
    PROPERTIES(bt) READONLY dateTimeBatch, descriptionBatch, quantityBatch, supplierPriceBatch, currentBalanceBatch
    PROPERTIES(bil, bt)     costBalanceSkuLedgerBatch FORCE GRID
    FILTERS skuBatch(bt) == skuBalanceSkuLedger(bil)
    ORDER BY dateTimeBatch DESC

    FILTERGROUP inBalanceSkuLedgerBatch
        FILTER 'Только расписанные партии' 'F10' costBalanceSkuLedgerBatch (bil, bt) DEFAULT

    PROPERTIES() setBalanceSkuLedgerBatchCost, resetBalanceSkuLedgerBatchCost, clearBalanceSkuLedgerBatchCost
;
