MODULE RetailPrice;

REQUIRE System,
        MasterData,
        POS,
        RomanStock,
        PriceInterval,
        UserPriceChange,
        Currency,
        RomanLogicsModule;

PRIORITY MasterData, Stock, RomanLogicsModule;

// -------------------------------------- Надбавки --------------------------------------- //

CLASS coefficientRetail 'Надбавка';
TABLE coefficientRetail (coefficientRetail);

dateCoefficientRetail 'Дата введения' = DATA DATE(coefficientRetail) IN baseGroup;
markupCoefficientRetail 'Множитель' = DATA NUMERIC[14,3](coefficientRetail) IN baseGroup;

brandSupplierCoefficientRetail = DATA brandSupplier(coefficientRetail) IN idGroup AUTOSET;
nameBrandSupplierCoefficientRetail 'Бренд' (coefficientRetail) = name(brandSupplierCoefficientRetail(coefficientRetail)) IN baseGroup;

uniqueCoefficientRetailBrandSupplierDate (brandSupplier, date) = GROUP UNIQUE coefficientRetail
                                                                       BY brandSupplierCoefficientRetail(coefficientRetail), dateCoefficientRetail(coefficientRetail)
                                                                       WHERE coefficientRetail IS coefficientRetail;

coefficientRetailBrandSupplierDate (brandSupplier, date) = uniqueCoefficientRetailBrandSupplierDate(
                                                              brandSupplier,
                                                              [GROUP MAX dateCoefficientRetail(coefficientRetail)
                                                                         IF dateCoefficientRetail(coefficientRetail) <= date AND date IS DATE AND
                                                                         brandSupplierCoefficientRetail(coefficientRetail) == brandSupplier
                                                                     BY brandSupplier, date] (brandSupplier, date));

FORM coefficientRetail 'Надбавка'

    OBJECTS c=coefficientRetail FIXED PANEL
    PROPERTIES(c) nameBrandSupplierCoefficientRetail, dateCoefficientRetail, markupCoefficientRetail

    EDIT coefficientRetail OBJECT c
;

FORM coefficientRetails 'Надбавки'

    OBJECTS b=brandSupplier
    PROPERTIES(b) READONLY name, nameSupplierBrandSupplier
    ORDER BY nameSupplierBrandSupplier

    OBJECTS c=coefficientRetail
    PROPERTIES(c) READONLY dateCoefficientRetail, markupCoefficientRetail
    PROPERTIES(c) ADDFORM, EDITFORM, delete
    ORDER BY dateCoefficientRetail

    FILTERS brandSupplierCoefficientRetail(c) == b
;

// ------------------------------------------------ Прайсы -------------------------------- //

CLASS STATIC methodPrice 'Метод расчёта'
{
    coefficient 'С надбавкой',
    RRP 'Рекомендуемая',
    previous 'Предыдущая'
};


CLASS ABSTRACT priceSetDocument 'Документ изменения цен' : numeratedObject;
CLASS basePriceSetDocument 'Базовый прайс' : priceSetDocument;
CLASS discountPriceSetDocument 'Распродажа' : priceSetDocument;
CLASS mixPriceSetDocument 'Базовый прайс с распродажей' : basePriceSetDocument, discountPriceSetDocument;

TABLE priceSetDocument (priceSetDocument);
TABLE basePriceSetDocument (basePriceSetDocument);
TABLE discountPriceSetDocument (discountPriceSetDocument);

@defineNumeratedObject(priceSetDocument, 'Нумератор для розничных прайсов', 'РП');

// Сроки действия прайсов
@defineDocumentHeaderTime(priceSetDocument);

dateTimeToDataPriceSetDocument 'Дата/время окончания' = DATA DATETIME(priceSetDocument) IN documentPrmGroup;

maxDateTime 'Максимальная дата' = DATA DATETIME();
EXTEND FORM globalParamForm
     PROPERTIES() maxDateTime
;
dateTimeToPriceSetDocument 'Дата/время окончания' (priceSetDocument) = UNION OVERRIDE maxDateTime() IF priceSetDocument IS priceSetDocument,
                                                                                            dateTimeToDataPriceSetDocument(priceSetDocument) IN baseGroup PERSISTENT;

CONSTRAINT dateTimeToPriceSetDocument(document) < dateTimePriceSetDocument(document) MESSAGE 'Дата/время окончания действия документа меньше даты/времени его начала';

// Проведение
isPostedPriceSetDocument 'Проведен' (priceSetDocument) = DATA BOOLEAN (priceSetDocument);
isDraftPriceSetDocument 'Не проведен' (priceSetDocument) = priceSetDocument IS priceSetDocument AND NOT isPostedPriceSetDocument(priceSetDocument);

prePostPriceSetDocument 'Провести' (priceSetDocument) = ACTION SET isPostedPriceSetDocument(priceSetDocument) <- TRUE;

statusPriceSetDocument 'Статус' (priceSetDocument) = IF isPostedPriceSetDocument(priceSetDocument)
                                                      THEN ('Проведен' AND priceSetDocument IS priceSetDocument)
                                                      ELSE ('Не проведен' AND priceSetDocument IS priceSetDocument) MINCHARWIDTH 11;

// Основание
freightBasePriceSetDocument = DATA freight(basePriceSetDocument);

userReasonPriceSetDocument 'Основание прайса' = DATA STRING[100] (priceSetDocument);
reasonPriceSetDocument 'Основание прайса' (priceSetDocument) = UNION OVERRIDE seriesNumberObject(freightBasePriceSetDocument (priceSetDocument)),
                                                                              userReasonPriceSetDocument(priceSetDocument) IN recognizeGroup;

// Валюта

currencyPriceSetDocument = DATA currency (priceSetDocument);
nameCurrencyPriceSetDocument 'Валюта' (priceSetDocument) = name(currencyPriceSetDocument(priceSetDocument)) MINCHARWIDTH 3 PREFCHARWIDTH 8;

// ----------------------------------------------- Спецификация --------------------------------------- //

// По артикулам
TABLE priceSetDocumentArticle(priceSetDocument, article);

inPriceSetDocumentArticle 'Артикул в документе' = DATA BOOLEAN(priceSetDocument, article);

userDateTimePriceSetDocumentArticle 'Дата/время (начало)' = DATA DATETIME(priceSetDocument, article);
userDateTimePriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

userDateTimeToPriceSetDocumentArticle 'Дата/время (конец)' = DATA DATETIME(priceSetDocument, article);
userDateTimeToPriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

dateTimePriceSetDocumentArticle 'Дата/время (начало)' (priceSetDocument, article) = (dateTimePriceSetDocument(priceSetDocument) AND inPriceSetDocumentArticle(priceSetDocument, article)) OR
                                                                                    userDateTimePriceSetDocumentArticle(priceSetDocument, article) PERSISTENT;
dateTimeToPriceSetDocumentArticle 'Дата/время (конец)' (priceSetDocument, article) = (dateTimeToPriceSetDocument(priceSetDocument) AND inPriceSetDocumentArticle(priceSetDocument, article)) OR
                                                                                    userDateTimeToPriceSetDocumentArticle(priceSetDocument, article) PERSISTENT;

// Базовые цены
priceInBasePriceSetDocumentArticle 'Цена поставщика' = DATA NUMERIC[14,2](basePriceSetDocument, article);
priceInBasePriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

currencyBasePriceSetDocumentArticle = DATA currency (basePriceSetDocument, article);
nameCurrencyBasePriceSetDocumentArticle 'Валюта' (basePriceSetDocument, article) = name(currencyBasePriceSetDocumentArticle(basePriceSetDocument, article));
currencyBasePriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

RRPBasePriceSetDocumentArticle 'Рекомендуемая цена' = DATA NUMERIC[14,2](basePriceSetDocument, article);
hasNotRRPBasePriceSetDocumentArticle 'Нет рекомендуемой цены' (basePriceSetDocument, article) =
    basePriceSetDocument IS basePriceSetDocument AND article IS article AND NOT RRPBasePriceSetDocumentArticle(basePriceSetDocument, article);
RRPBasePriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

typeExchangeBasePriceSetDocumentArticle = DATA typeExchange (basePriceSetDocument, article);
nameTypeExchangeBasePriceSetDocumentArticle 'Тип обмена' (basePriceSetDocument, article) = name(typeExchangeBasePriceSetDocumentArticle(basePriceSetDocument, article));
CONSTRAINT currencyTypeExchange(typeExchangeBasePriceSetDocumentArticle(basePriceSetDocument, article)) != currencyPriceSetDocument(basePriceSetDocument)
           CHECKED BY typeExchangeBasePriceSetDocumentArticle
           MESSAGE 'Валюта типа обмена должна совпадать с валютой прайса';
typeExchangeBasePriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;


rateBasePriceSetDocumentArticle 'Обменный курс' = DATA NUMERIC[14,2](basePriceSetDocument, article);
rateBasePriceSetDocumentArticle(basePriceSetDocument, article) <- rateTypeExchangeCurrencyDate(typeExchangeBasePriceSetDocumentArticle(basePriceSetDocument, article),
                                                                                               currencyBasePriceSetDocumentArticle(basePriceSetDocument, article),
                                                                                               datePriceSetDocument(basePriceSetDocument))
                                                          WHEN CHANGED(typeExchangeBasePriceSetDocumentArticle(basePriceSetDocument, article)) OR
                                                               CHANGED(currencyBasePriceSetDocumentArticle(basePriceSetDocument, article)) OR
                                                               CHANGED(datePriceSetDocument(basePriceSetDocument) AND inPriceSetDocumentArticle(basePriceSetDocument, article));
rateBasePriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

markupBasePriceSetDocumentArticle 'Наценка' = DATA NUMERIC[14,2] (basePriceSetDocument, article);
markupBasePriceSetDocumentArticle (basePriceSetDocument, article) <- markupCoefficientRetail(
                                                                        coefficientRetailBrandSupplierDate(brandSupplierArticle(article),
                                                                                                           datePriceSetDocument(basePriceSetDocument)))
                                                                     WHEN ASSIGNED(inPriceSetDocumentArticle(basePriceSetDocument, article)) OR
                                                                        CHANGED(datePriceSetDocument(basePriceSetDocument) AND inPriceSetDocumentArticle(basePriceSetDocument, article));
markupBasePriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

priceOutBasePriceSetDocumentArticle 'Цена с надбавкой' (basePriceSetDocument, article) = round2(priceInBasePriceSetDocumentArticle(basePriceSetDocument, article) *
                                                                                                markupBasePriceSetDocumentArticle(basePriceSetDocument, article));

priceOutRateBasePriceSetDocumentArticle 'Цена с надбавкой (руб.)' (basePriceSetDocument, article) = round2(priceOutBasePriceSetDocumentArticle(basePriceSetDocument, article) *
                                                                                                           rateBasePriceSetDocumentArticle(basePriceSetDocument, article));

RRPRateBasePriceSetDocumentArticle 'Рекомендуемая (руб.)' (basePriceSetDocument, article) = round2(RRPBasePriceSetDocumentArticle(basePriceSetDocument, article) *
                                                                                                   rateBasePriceSetDocumentArticle(basePriceSetDocument, article));

methodBasePriceSetDocumentArticle = DATA methodPrice(basePriceSetDocument, article);
nameMethodBasePriceSetDocumentArticle 'Метод расчёта' (basePriceSetDocument, article) = name(methodBasePriceSetDocumentArticle(basePriceSetDocument, article)) MAXCHARWIDTH 20;
methodBasePriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

priceBasePriceSetDocumentArticle 'Базовая цена' = DATA NUMERIC[14,2](basePriceSetDocument, article);
priceBasePriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

// Уценки
percentDiscountPriceSetDocumentArticle 'Процент уценки' = DATA NUMERIC[14,2](discountPriceSetDocument, article) IN baseGroup;
percentDiscountPriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

priceDiscountPriceSetDocumentArticle 'Цена со скидкой' = DATA NUMERIC[14,2](discountPriceSetDocument, article);
priceDiscountPriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

// По товарам
TABLE priceSetDocumentSku(priceSetDocument, sku);

inPriceSetDocumentSku 'Товар в документе' = DATA BOOLEAN(priceSetDocument, sku);

userDateTimePriceSetDocumentSku 'Дата/время (начало)' = DATA DATETIME(priceSetDocument, sku);
userDateTimePriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

userDateTimeToPriceSetDocumentSku 'Дата/время (конец)' = DATA DATETIME(priceSetDocument, sku);
userDateTimeToPriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

dateTimePriceSetDocumentSku 'Дата/время (начало)' (priceSetDocument, sku) = (dateTimePriceSetDocument(priceSetDocument) AND inPriceSetDocumentSku(priceSetDocument, sku)) OR
                                                                            userDateTimePriceSetDocumentSku(priceSetDocument, sku) PERSISTENT;
dateTimeToPriceSetDocumentSku 'Дата/время (конец)' (priceSetDocument, sku) = (dateTimeToPriceSetDocument(priceSetDocument) AND inPriceSetDocumentSku(priceSetDocument, sku)) OR
                                                                             userDateTimeToPriceSetDocumentSku(priceSetDocument, sku) PERSISTENT;

// Базовые цены
priceInBasePriceSetDocumentSku 'Цена поставщика' = DATA NUMERIC[14,2](basePriceSetDocument, sku);
priceInBasePriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

RRPBasePriceSetDocumentSku 'Рекомендуемая цена' = DATA NUMERIC[14,2](basePriceSetDocument, sku);
RRPBasePriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

currencyBasePriceSetDocumentSku = DATA currency (basePriceSetDocument, sku);
nameCurrencyBasePriceSetDocumentSku 'Валюта' (basePriceSetDocument, sku) = name(currencyBasePriceSetDocumentSku(basePriceSetDocument, sku));
currencyBasePriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

typeExchangeBasePriceSetDocumentSku = DATA typeExchange (basePriceSetDocument, sku);
nameTypeExchangeBasePriceSetDocumentSku 'Тип обмена' (basePriceSetDocument, sku) = name(typeExchangeBasePriceSetDocumentSku(basePriceSetDocument, sku));
CONSTRAINT currencyTypeExchange(typeExchangeBasePriceSetDocumentSku(basePriceSetDocument, sku)) != currencyPriceSetDocument(basePriceSetDocument)
           CHECKED BY typeExchangeBasePriceSetDocumentSku
           MESSAGE 'Валюта типа обмена должна совпадать с валютой прайса';
typeExchangeBasePriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

rateBasePriceSetDocumentSku 'Обменный курс' = DATA NUMERIC[14,2] (basePriceSetDocument, sku);
rateBasePriceSetDocumentSku(basePriceSetDocument, sku) <- rateTypeExchangeCurrencyDate(typeExchangeBasePriceSetDocumentSku(basePriceSetDocument, sku),
                                                                                       currencyBasePriceSetDocumentSku(basePriceSetDocument, sku),
                                                                                       datePriceSetDocument(basePriceSetDocument))
                                                          WHEN CHANGED(typeExchangeBasePriceSetDocumentSku(basePriceSetDocument, sku)) OR
                                                               CHANGED(currencyBasePriceSetDocumentSku(basePriceSetDocument, sku)) OR
                                                               CHANGED(datePriceSetDocument(basePriceSetDocument) AND inPriceSetDocumentSku(basePriceSetDocument, sku));
rateBasePriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

priceSetDocumentSeriesNumberShortNameCurrency (series, number, currency) = GROUP UNIQUE priceSetDocument BY seriesObject(priceSetDocument), numberObject(priceSetDocument), shortNameCurrency(currencyPriceSetDocument(priceSetDocument))
                                                                                        WHERE priceSetDocument IS priceSetDocument;

markupBasePriceSetDocumentSku 'Наценка' = DATA NUMERIC[14,2] (basePriceSetDocument, article);
markupBasePriceSetDocumentSku (basePriceSetDocument, sku) <- markupCoefficientRetail(
                                                                    coefficientRetailBrandSupplierDate(brandSupplierArticleSku(sku),
                                                                                                       datePriceSetDocument(basePriceSetDocument)))
                                                             WHEN ASSIGNED(inPriceSetDocumentSku(basePriceSetDocument, sku)) OR
                                                                  CHANGED(datePriceSetDocument(basePriceSetDocument) AND inPriceSetDocumentSku(basePriceSetDocument, sku));
markupBasePriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

priceOutBasePriceSetDocumentSku 'Цена с надбавкой' (basePriceSetDocument, sku) = round2(priceInBasePriceSetDocumentSku(basePriceSetDocument, sku) *
                                                                                        markupBasePriceSetDocumentSku(basePriceSetDocument, sku));

priceOutRateBasePriceSetDocumentSku 'Цена с надбавкой (руб.)' (basePriceSetDocument, sku) = round2(priceOutBasePriceSetDocumentSku(basePriceSetDocument, sku) *
                                                                                                   rateBasePriceSetDocumentSku(basePriceSetDocument, sku));

RRPRateBasePriceSetDocumentSku 'Рекомендуемая (руб.)' (basePriceSetDocument, sku) = round2(RRPBasePriceSetDocumentSku(basePriceSetDocument, sku) *
                                                                                           rateBasePriceSetDocumentSku(basePriceSetDocument, sku));

methodBasePriceSetDocumentSku = DATA methodPrice(basePriceSetDocument, sku);
nameMethodBasePriceSetDocumentSku 'Метод расчёта' (basePriceSetDocument, sku) = name(methodBasePriceSetDocumentSku(basePriceSetDocument, sku)) MAXCHARWIDTH 20;
methodBasePriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

priceBasePriceSetDocumentSku 'Базовая цена' = DATA NUMERIC[14,2](basePriceSetDocument, sku);
priceBasePriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

// Уценки
percentDiscountPriceSetDocumentSku 'Процент уценки' = DATA NUMERIC[14,2](discountPriceSetDocument, sku) IN baseGroup;
percentDiscountPriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

priceDiscountPriceSetDocumentSku 'Цена со скидкой' = DATA NUMERIC[14,2](discountPriceSetDocument, sku);
priceDiscountPriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

// -------------------------------- Сводная по артикулам / товарам --------------------------------- //
overInPriceSetDocumentSku 'Товар в документе' (priceSetDocument, sku) = inPriceSetDocumentArticle(priceSetDocument, articleSku(sku)) OR
                                                                        inPriceSetDocumentSku(priceSetDocument, sku) PERSISTENT;

overDateTimePriceSetDocumentSku 'Дата/время (начало)' (priceSetDocument, sku) = dateTimePriceSetDocumentArticle(priceSetDocument, articleSku(sku)) OR
                                                                                dateTimePriceSetDocumentSku(priceSetDocument, sku) PERSISTENT;
overDateTimeToPriceSetDocumentSku 'Дата/время (конец)' (priceSetDocument, sku) = dateTimeToPriceSetDocumentArticle(priceSetDocument, articleSku(sku)) OR
                                                                                 dateTimeToPriceSetDocumentSku(priceSetDocument, sku) PERSISTENT;

// Базовые прайс
overPriceInBasePriceSetDocumentSku 'Цена поставщика' (basePriceSetDocument, sku) = priceInBasePriceSetDocumentArticle(basePriceSetDocument, articleSku(sku)) OR
                                                                                   priceInBasePriceSetDocumentSku(basePriceSetDocument, sku) PERSISTENT;
overRRPBasePriceSetDocumentSku 'Рекомендуемая цена' (basePriceSetDocument, sku) = RRPBasePriceSetDocumentArticle(basePriceSetDocument, articleSku(sku)) OR
                                                                                  RRPBasePriceSetDocumentSku(basePriceSetDocument, sku) PERSISTENT;
overCurrencyBasePriceSetDocumentSku (basePriceSetDocument, sku) = currencyBasePriceSetDocumentArticle(basePriceSetDocument, articleSku(sku)) OR
                                                                  currencyBasePriceSetDocumentSku(basePriceSetDocument, sku) PERSISTENT;
overTypeExchangeBasePriceSetDocumentSku (basePriceSetDocument, sku) = typeExchangeBasePriceSetDocumentArticle(basePriceSetDocument, articleSku(sku)) OR
                                                                      typeExchangeBasePriceSetDocumentSku(basePriceSetDocument, sku) PERSISTENT;
overMarkupBasePriceSetDocumentSku (basePriceSetDocument, sku) = markupBasePriceSetDocumentArticle(basePriceSetDocument, articleSku(sku)) OR
                                                                markupBasePriceSetDocumentSku(basePriceSetDocument, sku) PERSISTENT;
overMethodBasePriceSetDocumentSku (basePriceSetDocument, sku) = methodBasePriceSetDocumentArticle(basePriceSetDocument, articleSku(sku)) OR
                                                                methodBasePriceSetDocumentSku(basePriceSetDocument, sku) PERSISTENT;
overPriceBasePriceSetDocumentSku 'Базовая цена' (basePriceSetDocument, sku) = priceBasePriceSetDocumentArticle(basePriceSetDocument, articleSku(sku)) OR
                                                                              priceBasePriceSetDocumentSku(basePriceSetDocument, sku) PERSISTENT;

// Уценки
overPercentDiscountPriceSetDocumentSku 'Процент уценки' (discountPriceSetDocument, sku) = percentDiscountPriceSetDocumentArticle(discountPriceSetDocument, articleSku(sku)) OR
                                                                                          percentDiscountPriceSetDocumentSku(discountPriceSetDocument, sku);
overPriceDiscountPriceSetDocumentSku 'Цена со скидкой' (discountPriceSetDocument, sku) = priceDiscountPriceSetDocumentArticle(discountPriceSetDocument, articleSku(sku)) OR
                                                                                         priceDiscountPriceSetDocumentSku(discountPriceSetDocument, sku) PERSISTENT;

//--------------------------------------------- Агрегации ----------------------------------------------- //

META definePriceSetDocumentAggregations(document, caption)

    // ---------------------------------------- Артикулы ---------------------------------------- //
    order###document##Article = LIST(dateTimePriceSetDocumentArticle(document, article), document) IF inPriceSetDocumentArticle(document, article) PERSISTENT;

    concatB###document##ArticleCurrencyDateTime (article, currency, dateTime) = GROUP MAX order###document##Article(document, article) AND
                                                                                          price###document##Article(document, article) AND
                                                                                          dateTimePriceSetDocumentArticle(document, article) < (dateTime AS DATETIME) AND
                                                                                          dateTimeToPriceSetDocumentArticle(document, article) > (dateTime AS DATETIME) AND
                                                                                          isPostedPriceSetDocument(document)
                                                                                      BY article, currencyPriceSetDocument(document), dateTime;
    document##BArticleCurrencyDateTime (article, currency, dateTime) = concatB###document##ArticleCurrencyDateTime(article, currency, dateTime)[2];

    concatA###document##ArticleCurrencyDateTime (article, currency, dateTime) = GROUP MAX order###document##Article(document, article) AND
                                                                                          price###document##Article(document, article) AND
                                                                                          dateTimePriceSetDocumentArticle(document, article) <= (dateTime AS DATETIME) AND
                                                                                          dateTimeToPriceSetDocumentArticle(document, article) > (dateTime AS DATETIME) AND
                                                                                          isPostedPriceSetDocument(document)
                                                                                      BY article, currencyPriceSetDocument(document), dateTime;
    document##AArticleCurrencyDateTime (article, currency, dateTime) = concatA###document##ArticleCurrencyDateTime(article, currency, dateTime)[2];

    // Цены на дату
    priceB###document##ArticleCurrencyDateTime(article, currency, dateTime) = price###document##Article(document##BArticleCurrencyDateTime(article, currency, dateTime), article);
    prevPriceB###document##ArticleCurrencyDateTime(article, currency, dateTime) = PREV(price###document##Article(document##BArticleCurrencyDateTime(article, currency, dateTime), article));

    priceA###document##ArticleCurrencyDateTime(article, currency, dateTime) = price###document##Article(document##AArticleCurrencyDateTime(article, currency, dateTime), article);

    // Предыдущие цены
    priceB###document##Article caption###' (предыдущая)' (document, article) = priceB###document##ArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article)) MINCHARWIDTH 15;
    prevPriceB###document##Article caption###' (предыдущая)' (document, article) = prevPriceB###document##ArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article)) MINCHARWIDTH 15;

    priceDocumentB###document##Article caption###' (предыдущая)' (document, article) = priceB###document##ArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocument(document)) MINCHARWIDTH 15;
    prevPriceDocumentB###document##Article caption###' (предыдущая)' (document, article) = prevPriceB###document##ArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocument(document)) MINCHARWIDTH 15;

    priceA###document##Article caption###' (предыдущая)' (document, article) = priceA###document##ArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocument(document)) MINCHARWIDTH 15;

    // ---------------------------------------- Sku ---------------------------------------- //
    order###document##Sku = LIST(overDateTimePriceSetDocumentSku(document, sku), document) IF overInPriceSetDocumentSku(document, sku) PERSISTENT;

    concatB###document##SkuCurrencyDateTime (sku, currency, dateTime) = GROUP MAX order###document##Sku(document, sku) AND
                                                                                  overPrice###document##Sku (document, sku) AND
                                                                                  overDateTimePriceSetDocumentSku(document, sku) < (dateTime AS DATETIME) AND
                                                                                  overDateTimeToPriceSetDocumentSku(document, sku) > (dateTime AS DATETIME) AND
                                                                                  isPostedPriceSetDocument(document)
                                                                              BY sku, currencyPriceSetDocument(document), dateTime;

    document##BSkuCurrencyDateTime (sku, currency, dateTime) = concatB###document##SkuCurrencyDateTime(sku, currency, dateTime)[2];

    concatA###document##SkuCurrencyDateTime (sku, currency, dateTime) = GROUP MAX order###document##Sku(document, sku) AND
                                                                                  overPrice###document##Sku (document, sku) AND
                                                                                  overDateTimePriceSetDocumentSku(document, sku) <= (dateTime AS DATETIME) AND
                                                                                  overDateTimeToPriceSetDocumentSku(document, sku) > (dateTime AS DATETIME) AND
                                                                                  isPostedPriceSetDocument(document)
                                                                              BY sku, currencyPriceSetDocument(document), dateTime;

    document##ASkuCurrencyDateTime (sku, currency, dateTime) = concatA###document##SkuCurrencyDateTime(sku, currency, dateTime)[2];

    // Цены на дату
    priceB###document##SkuCurrencyDateTime(sku, currency, dateTime) = overPrice###document##Sku(document##BSkuCurrencyDateTime(sku, currency, dateTime), sku);
    prevPriceB###document##SkuCurrencyDateTime(sku, currency, dateTime) = PREV(overPrice###document##Sku(document##BSkuCurrencyDateTime(sku, currency, dateTime), sku));

    priceA###document##SkuCurrencyDateTime(sku, currency, dateTime) = overPrice###document##Sku(document##ASkuCurrencyDateTime(sku, currency, dateTime), sku);

    // Предыдущие цены
    priceB###document##Sku caption###' (предыдущая)' (document, sku) = priceB###document##SkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku)) MINCHARWIDTH 15;
    prevPriceB###document##Sku caption###' (предыдущая)' (document, sku) = prevPriceB###document##SkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku)) MINCHARWIDTH 15;

    priceDocumentB###document##Sku caption###' (предыдущая)' (document, sku) = priceB###document##SkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocument(document)) MINCHARWIDTH 15;
    prevPriceDocumentB###document##Sku caption###' (предыдущая)' (document, sku) = prevPriceB###document##SkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocument(document)) MINCHARWIDTH 15;

    priceA###document##Sku caption###' (предыдущая)' (document, sku) = priceA###document##SkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocument(document)) MINCHARWIDTH 15;

END

@definePriceSetDocumentAggregations(basePriceSetDocument, 'Базовая цена');
@definePriceSetDocumentAggregations(discountPriceSetDocument, 'Цена со скидкой');

// ----------------------------------------------- Последние параметры для базовых цен --------------------------------- //

// ----------------------------------------------- Артикулы --------------------------------- //

// Цены на дату
priceInBBasePriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = priceInBasePriceSetDocumentArticle(basePriceSetDocumentBArticleCurrencyDateTime(article, currency, dateTime), article);
prevPriceInBBasePriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = PREV(priceInBasePriceSetDocumentArticle(basePriceSetDocumentBArticleCurrencyDateTime(article, currency, dateTime), article));

RRPBBasePriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = RRPBasePriceSetDocumentArticle(basePriceSetDocumentBArticleCurrencyDateTime(article, currency, dateTime), article);
prevRRPBBasePriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = PREV(RRPBasePriceSetDocumentArticle(basePriceSetDocumentBArticleCurrencyDateTime(article, currency, dateTime), article));

prevCurrencyBBasePriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = PREV(currencyBasePriceSetDocumentArticle(basePriceSetDocumentBArticleCurrencyDateTime(article, currency, dateTime), article));
prevTypeExchangeBBasePriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = PREV(typeExchangeBasePriceSetDocumentArticle(basePriceSetDocumentBArticleCurrencyDateTime(article, currency, dateTime), article));

prevMarkupBBasePriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = PREV(markupBasePriceSetDocumentArticle(basePriceSetDocumentBArticleCurrencyDateTime(article, currency, dateTime), article));

prevMethodBBasePriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = PREV(methodBasePriceSetDocumentArticle(basePriceSetDocumentBArticleCurrencyDateTime(article, currency, dateTime), article));

// Предыдущие цены
priceInBPriceSetDocumentArticle 'Цена поставщика (предыдущая)' (document, article) = priceInBBasePriceSetDocumentArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article));
prevPriceInBPriceSetDocumentArticle 'Цена поставщика (предыдущая)' (document, article) = prevPriceInBBasePriceSetDocumentArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article));

priceInRateBBasePriceSetDocumentArticle 'Цена поставщика (руб.)' (document, article) = priceInBPriceSetDocumentArticle(document, article) *
                                                                                       rateBasePriceSetDocumentArticle (document, article);

RRPBPriceSetDocumentArticle 'Рекомендуемая цена (предыдущая)' (document, article) = RRPBBasePriceSetDocumentArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article));
prevRRPBPriceSetDocumentArticle 'Рекомендуемая цена (предыдущая)' (document, article) = prevRRPBBasePriceSetDocumentArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article));

prevCurrencyBPriceSetDocumentArticle 'Метод расчёта (предыдущий)' (document, article) = prevCurrencyBBasePriceSetDocumentArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article));
prevTypeExchangeBPriceSetDocumentArticle 'Метод расчёта (предыдущий)' (document, article) = prevTypeExchangeBBasePriceSetDocumentArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article));

prevMarkupBPriceSetDocumentArticle 'Наценка (предыдущая)' (document, article) = prevMarkupBBasePriceSetDocumentArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article));

prevMethodBPriceSetDocumentArticle 'Метод расчёта (предыдущий)' (document, article) = prevMethodBBasePriceSetDocumentArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article));

// ----------------------------------------------- Sku --------------------------------- //

// Цены на дату
priceInBBasePriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = overPriceInBasePriceSetDocumentSku(basePriceSetDocumentBSkuCurrencyDateTime(sku, currency, dateTime), sku);
prevPriceInBBasePriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = PREV(overPriceInBasePriceSetDocumentSku(basePriceSetDocumentBSkuCurrencyDateTime(sku, currency, dateTime), sku));

RRPBBasePriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = overRRPBasePriceSetDocumentSku(basePriceSetDocumentBSkuCurrencyDateTime(sku, currency, dateTime), sku);
prevRRPBBasePriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = PREV(overRRPBasePriceSetDocumentSku(basePriceSetDocumentBSkuCurrencyDateTime(sku, currency, dateTime), sku));

prevCurrencyBBasePriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = PREV(overCurrencyBasePriceSetDocumentSku(basePriceSetDocumentBSkuCurrencyDateTime(sku, currency, dateTime), sku));
prevTypeExchangeBBasePriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = PREV(overTypeExchangeBasePriceSetDocumentSku(basePriceSetDocumentBSkuCurrencyDateTime(sku, currency, dateTime), sku));

prevMarkupBBasePriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = PREV(overMarkupBasePriceSetDocumentSku(basePriceSetDocumentBSkuCurrencyDateTime(sku, currency, dateTime), sku));

prevMethodBBasePriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = PREV(overMethodBasePriceSetDocumentSku(basePriceSetDocumentBSkuCurrencyDateTime(sku, currency, dateTime), sku));

// Предыдущие цены
priceInBPriceSetDocumentSku 'Цена поставщика (предыдущая)' (document, sku) = priceInBBasePriceSetDocumentSkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku));
prevPriceInBPriceSetDocumentSku 'Цена поставщика (предыдущая)' (document, sku) = prevPriceInBBasePriceSetDocumentSkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku));

priceInRateBPriceSetDocumentSku 'Цена поставщика (руб.)' (document, sku) = priceInBPriceSetDocumentSku(document, sku) *
                                                                               rateBasePriceSetDocumentSku(document, sku);

RRPBPriceSetDocumentSku 'Рекомендуемая цена (предыдущая)' (document, sku) = RRPBBasePriceSetDocumentSkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku));
prevRRPBPriceSetDocumentSku 'Рекомендуемая цена (предыдущая)' (document, sku) = prevRRPBBasePriceSetDocumentSkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku));

prevCurrencyBPriceSetDocumentSku 'Метод расчёта (предыдущий)' (document, sku) = prevCurrencyBBasePriceSetDocumentSkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku));
prevTypeExchangeBPriceSetDocumentSku 'Метод расчёта (предыдущий)' (document, sku) = prevTypeExchangeBBasePriceSetDocumentSkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku));

prevMarkupBPriceSetDocumentSku 'Наценка (предыдущая)' (document, sku) = prevMarkupBBasePriceSetDocumentSkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku));

prevMethodBPriceSetDocumentSku 'Метод расчёта (предыдущий)' (document, sku) = prevMethodBBasePriceSetDocumentSkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku));

// ----------------------------------------------- Последние параметры для цен с уценкой --------------------------------- //

// ----------------------------------------------- Артикулы --------------------------------- //

// Цены на дату
prevPercentBDiscountPriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = PREV(percentDiscountPriceSetDocumentArticle(discountPriceSetDocumentBArticleCurrencyDateTime(article, currency, dateTime), article));

// Предыдущие цены
prevPercentBPriceSetDocumentArticle 'Процент скидки (предыдущий)' (document, article) = prevPercentBDiscountPriceSetDocumentArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article));

// ----------------------------------------------- Sku --------------------------------- //

// Цены на дату
prevPercentBDiscountPriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = PREV(overPercentDiscountPriceSetDocumentSku(discountPriceSetDocumentBSkuCurrencyDateTime(sku, currency, dateTime), sku));

// Предыдущие цены
prevPercentBPriceSetDocumentSku 'Процент скидки (предыдущий)' (document, sku) = prevPercentBDiscountPriceSetDocumentSkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku));

// -------------------------------------- Записываем значения по умолчанию ------------------------------------- //

// Подставление значений для базового прайса

// --------------- Артикулы ---------------- //

priceInBasePriceSetDocumentArticle(basePriceSetDocument, article) <- prevPriceInBPriceSetDocumentArticle (basePriceSetDocument, article)
    WHEN ASSIGNED(inPriceSetDocumentArticle(basePriceSetDocument, article));

RRPBasePriceSetDocumentArticle(basePriceSetDocument, article) <- prevRRPBPriceSetDocumentArticle (basePriceSetDocument, article)
    WHEN ASSIGNED(inPriceSetDocumentArticle(basePriceSetDocument, article));

currencyBasePriceSetDocumentArticle(basePriceSetDocument, article) <- prevCurrencyBPriceSetDocumentArticle (basePriceSetDocument, article)
    WHEN ASSIGNED (inPriceSetDocumentArticle(basePriceSetDocument, article));

typeExchangeBasePriceSetDocumentArticle(basePriceSetDocument, article) <- prevTypeExchangeBPriceSetDocumentArticle (basePriceSetDocument, article)
    WHEN ASSIGNED (inPriceSetDocumentArticle(basePriceSetDocument, article));

markupBasePriceSetDocumentArticle (basePriceSetDocument, article) <- prevMarkupBPriceSetDocumentArticle (basePriceSetDocument, article)
    WHEN ASSIGNED(inPriceSetDocumentArticle(basePriceSetDocument, article));

methodBasePriceSetDocumentArticle (basePriceSetDocument, article) <- prevMethodBPriceSetDocumentArticle (basePriceSetDocument, article)
    WHEN ASSIGNED(inPriceSetDocumentArticle(basePriceSetDocument, article));

priceBasePriceSetDocumentArticle(basePriceSetDocument, article) <-
                            IF methodBasePriceSetDocumentArticle(basePriceSetDocument, article) == methodPrice.coefficient THEN roundPriceCurrency(priceOutRateBasePriceSetDocumentArticle(basePriceSetDocument, article), currencyPriceSetDocument(basePriceSetDocument)) ELSE
                               IF methodBasePriceSetDocumentArticle(basePriceSetDocument, article) == methodPrice.RRP THEN roundPriceCurrency(RRPRateBasePriceSetDocumentArticle(basePriceSetDocument, article), currencyPriceSetDocument(basePriceSetDocument)) ELSE
                                  PREV(priceBBasePriceSetDocumentArticle(basePriceSetDocument, article)) IF methodBasePriceSetDocumentArticle(basePriceSetDocument, article) == methodPrice.previous
                            WHEN CHANGED (methodBasePriceSetDocumentArticle(basePriceSetDocument, article)) OR
                                 CHANGED (priceOutRateBasePriceSetDocumentArticle(basePriceSetDocument, article)) OR
                                 CHANGED (RRPRateBasePriceSetDocumentArticle(basePriceSetDocument, article));

// Уценка
percentDiscountPriceSetDocumentArticle (document, article) <- prevPercentBPriceSetDocumentArticle (document, article)
    WHEN ASSIGNED(inPriceSetDocumentArticle(document, article));

priceAllowancePriceSetDocumentArticle (discountPriceSetDocument, article) =
                         IF article IS article AND
                            discountPriceSetDocument IS discountPriceSetDocument AND
                            NOT discountPriceSetDocument IS basePriceSetDocument
                         THEN prevPriceBBasePriceSetDocumentArticle(discountPriceSetDocument, article)
                         ELSE priceBasePriceSetDocumentArticle(discountPriceSetDocument, article);

calcPriceDiscountPriceSetDocumentArticle 'Цена без процентов' (discountPriceSetDocument, article) = [X*(100-Y)/100]
                                                                                                       (priceAllowancePriceSetDocumentArticle(discountPriceSetDocument, article),
                                                                                                       percentDiscountPriceSetDocumentArticle(discountPriceSetDocument, article));

priceDiscountPriceSetDocumentArticle(discountPriceSetDocument, article) <- roundPriceCurrency(calcPriceDiscountPriceSetDocumentArticle(discountPriceSetDocument, article), currencyPriceSetDocument(discountPriceSetDocument))
                                        WHEN CHANGED(priceBasePriceSetDocumentArticle(discountPriceSetDocument, article)) OR
                                             CHANGED(percentDiscountPriceSetDocumentArticle(discountPriceSetDocument, article)) OR
                                             CHANGED(dateTimePriceSetDocumentArticle(discountPriceSetDocument, article));

// --------------- Sku ---------------- //

priceInBasePriceSetDocumentSku(basePriceSetDocument, sku) <- prevPriceInBPriceSetDocumentSku (basePriceSetDocument, sku)
    WHEN ASSIGNED(inPriceSetDocumentSku(basePriceSetDocument, sku));

RRPBasePriceSetDocumentSku(basePriceSetDocument, sku) <- prevRRPBPriceSetDocumentSku (basePriceSetDocument, sku)
    WHEN ASSIGNED(inPriceSetDocumentSku(basePriceSetDocument, sku));

currencyBasePriceSetDocumentSku(basePriceSetDocument, sku) <- prevCurrencyBPriceSetDocumentSku (basePriceSetDocument, sku)
    WHEN ASSIGNED(inPriceSetDocumentSku(basePriceSetDocument, sku));

typeExchangeBasePriceSetDocumentSku(basePriceSetDocument, sku) <- prevTypeExchangeBPriceSetDocumentSku (basePriceSetDocument, sku)
    WHEN ASSIGNED(inPriceSetDocumentSku(basePriceSetDocument, sku));

methodBasePriceSetDocumentSku (basePriceSetDocument, sku) <- prevMethodBPriceSetDocumentSku (basePriceSetDocument, sku)
    WHEN ASSIGNED(inPriceSetDocumentSku(basePriceSetDocument, sku));

priceBasePriceSetDocumentSku(basePriceSetDocument, sku) <-
                            IF methodBasePriceSetDocumentSku(basePriceSetDocument, sku) == methodPrice.coefficient THEN roundPriceCurrency(priceOutRateBasePriceSetDocumentSku(basePriceSetDocument, sku), currencyPriceSetDocument(basePriceSetDocument)) ELSE
                                IF methodBasePriceSetDocumentSku(basePriceSetDocument, sku) == methodPrice.RRP THEN roundPriceCurrency(RRPRateBasePriceSetDocumentSku(basePriceSetDocument, sku), currencyPriceSetDocument(basePriceSetDocument)) ELSE
                                   PREV(priceBBasePriceSetDocumentSku(basePriceSetDocument, sku)) IF methodBasePriceSetDocumentSku(basePriceSetDocument, sku) == methodPrice.previous
                            WHEN CHANGED (methodBasePriceSetDocumentSku(basePriceSetDocument, sku)) OR
                                 CHANGED (priceOutRateBasePriceSetDocumentSku(basePriceSetDocument, sku)) OR
                                 CHANGED (RRPRateBasePriceSetDocumentSku(basePriceSetDocument, sku));

// Уценка

percentDiscountPriceSetDocumentSku (document, sku) <- prevPercentBPriceSetDocumentSku (document, sku)
    WHEN ASSIGNED(inPriceSetDocumentSku(document, sku));

priceAllowancePriceSetDocumentSku (discountPriceSetDocument, sku) =
                         IF sku IS sku AND
                            discountPriceSetDocument IS discountPriceSetDocument AND
                            NOT discountPriceSetDocument IS basePriceSetDocument
                         THEN prevPriceBBasePriceSetDocumentSku(discountPriceSetDocument, sku)
                         ELSE priceBasePriceSetDocumentSku(discountPriceSetDocument, sku);

calcPriceDiscountPriceSetDocumentSku 'Цена без процентов' (discountPriceSetDocument, sku) = [X*(100-Y)/100]
                                                                                               (priceAllowancePriceSetDocumentSku (discountPriceSetDocument, sku),
                                                                                               overPercentDiscountPriceSetDocumentSku(discountPriceSetDocument, sku));

priceDiscountPriceSetDocumentSku(discountPriceSetDocument, sku) <- roundPriceCurrency(calcPriceDiscountPriceSetDocumentSku(discountPriceSetDocument, sku), currencyPriceSetDocument(discountPriceSetDocument))
                                        WHEN CHANGED(priceBasePriceSetDocumentSku(discountPriceSetDocument, sku)) OR
                                             CHANGED(percentDiscountPriceSetDocumentSku(discountPriceSetDocument, sku)) OR
                                             CHANGED(dateTimePriceSetDocumentSku(discountPriceSetDocument, sku));

// Состав фрахта
quantityPriceSetDocumentBrandSupplierArticle (priceSetDocument, brandSupplier) = GROUP SUM 1 IF inPriceSetDocumentArticle(priceSetDocument, article)
    BY priceSetDocument, brandSupplierArticle(article);

quantityPriceSetDocumentBrandSupplierSku (priceSetDocument, brandSupplier) = GROUP SUM 1 IF inPriceSetDocumentSku(priceSetDocument, sku)
    BY priceSetDocument, brandSupplierArticleSku(sku);

canonicalBrandPriceSetDocument 'Бренды' (priceSetDocument) = castToString255(
    [GROUP CONCAT commonName(brandSupplier) IF (quantityPriceSetDocumentBrandSupplierArticle(priceSetDocument, brandSupplier) OR quantityPriceSetDocumentBrandSupplierSku(priceSetDocument, brandSupplier)), ' , '
               BY priceSetDocument](priceSetDocument)) MINCHARWIDTH 50 MAXCHARWIDTH 100 PREFCHARWIDTH 100 PERSISTENT;

// ------------------------------------------------- Значения для использования в операциях -------------------------------- //

// Артикул
priceBPriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = priceBBasePriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) OR priceBDiscountPriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime);

priceAPriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = priceABasePriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) OR priceADiscountPriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime);

// Sku
priceBPriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = priceBBasePriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) OR priceBDiscountPriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime);

priceAPriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = priceABasePriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) OR priceADiscountPriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime);

// Цена на кассе
POSPriceSkuDepartmentStoreDateTime(sku, departmentStore, dateTime) += priceBPriceSetDocumentSkuCurrencyDateTime(sku, currencyStock(departmentStore), dateTime) IF departmentStore IS departmentStore;

// -------------------------------------------------- Форма истории изменения цен ------------------------------------- //

FORM logPriceArticle 'История цен'

    OBJECTS a=article
    OBJECTS d=discountPriceSetDocument
    PROPERTIES(d, a) READONLY dateTimePriceSetDocumentArticle
    PROPERTIES(d, a) READONLY priceDiscountPriceSetDocumentArticle

    FILTERS inPriceSetDocumentArticle(d, a)

;

showFormLogPriceArticle 'История' (article) = ACTION FORM logPriceArticle OBJECTS a NEWSESSION MODAL;

// ------------------------------------------------- Форма по редактированию розничных прайсов --------------------------------- //

FORM priceSetDocument 'Розничный прайс'
    OBJECTS p=priceSetDocument FIXED PANEL
    PROPERTIES(p) isPostedPriceSetDocument, objectClassName, nameNumeratorObject, numberObject, seriesObject, datePriceSetDocument, timePriceSetDocument,
                  dateTimeToPriceSetDocument, nameCurrencyPriceSetDocument, reasonPriceSetDocument

    TREE treeSupplierBrand v=STRING[3], s=supplier, b=brandSupplier
    PROPERTIES READONLY OBJVALUE(v), supplierName = name(s), name(b)
    ORDER BY supplierName

    TREE treeCategory vv=STRING[3], c=category
    PROPERTIES READONLY OBJVALUE(vv), categoryName = name(c)
    ORDER BY categoryName

    OBJECTS aa=article
    PROPERTIES (aa)    READONLY sidArticle, nameCategoryArticle, nameBrandSupplierArticle, currentBalanceArticle
    PROPERTIES (p, aa) READONLY prevPriceDocumentBBasePriceSetDocumentArticle, prevPriceDocumentBDiscountPriceSetDocumentArticle
    PROPERTIES (p, aa) inPriceSetDocumentArticle

    FILTERS stringEqualsAll(v), inBrandSupplier(s, b), inSupplierBrandArticle(s, b, aa), stringEqualsAll(vv),
            inArticleCategory(c, aa)

    OBJECTS ss=sku
    PROPERTIES (ss)    READONLY FORCE GRID sidArticleSku, nameCategoryArticleSku, nameBrandSupplierArticleSku, sidSizeSupplierItem, sidColorSupplierItem, currentBalanceSku
    PROPERTIES (p, ss) READONLY prevPriceDocumentBBasePriceSetDocumentSku, prevPriceDocumentBDiscountPriceSetDocumentSku
    PROPERTIES (p, ss) inPriceSetDocumentSku

    FILTERS stringEqualsAll(v), inBrandSupplier(s, b), inSupplierBrandSku(s, b, ss), stringEqualsAll(vv),
            inSkuCategory(c, ss)

    FILTERGROUP filtersArticleSku
        FILTER 'Текущего артикула' 'F6' inArticleSku(aa, ss) DEFAULT

    OBJECTS a=article
    PROPERTIES (p, a) inPriceSetDocumentArticle,
                      dateTimePriceSetDocumentArticle, dateTimeToPriceSetDocumentArticle
    PROPERTIES(a) READONLY sidArticle, nameCategoryArticle, nameBrandSupplierArticle
    PROPERTIES (p, a) priceInBasePriceSetDocumentArticle,
                      RRPBasePriceSetDocumentArticle, markupBasePriceSetDocumentArticle, priceOutBasePriceSetDocumentArticle,
                      nameCurrencyBasePriceSetDocumentArticle, nameTypeExchangeBasePriceSetDocumentArticle,
                      rateBasePriceSetDocumentArticle, RRPRateBasePriceSetDocumentArticle, priceOutRateBasePriceSetDocumentArticle,
                      priceBBasePriceSetDocumentArticle, nameMethodBasePriceSetDocumentArticle,
                      priceBasePriceSetDocumentArticle

    PROPERTIES (p, a) percentDiscountPriceSetDocumentArticle, calcPriceDiscountPriceSetDocumentArticle, priceBDiscountPriceSetDocumentArticle,
                      priceDiscountPriceSetDocumentArticle

    FILTERS inPriceSetDocumentArticle(p, a), inSupplierBrandArticle(s, b, a), inArticleCategory(c, a)

    FILTERGROUP filters
        FILTER 'Есть рекомендуемая цена' 'F7' RRPBasePriceSetDocumentArticle(p, a)
        FILTER 'Нет рекомендуемой цены' 'shift F7' hasNotRRPBasePriceSetDocumentArticle(p, a)

    FILTERGROUP filtersBalanceArticle
        FILTER 'Ненулевые остатки' 'F8' currentBalanceArticle(aa) DEFAULT

    FILTERGROUP filtersMethod
        FILTER 'Показывать без метода' 'F9' TRUE IF NOT methodBasePriceSetDocumentArticle(p, a)

    FILTERGROUP filtersCategory
        FILTER 'Показывать артикулы ном. группы' 'F10' inArticleCategory(c, a)
    FILTERGROUP filtersBrand
        FILTER 'Показывать артикулы бренда' 'F11' inArticleBrand(b, a)

     FILTERGROUP filtersBalanceSku
        FILTER 'Ненулевые остатки' 'F5' currentBalanceSku(ss) DEFAULT

    OBJECTS sk=sku
    PROPERTIES (p, sk) inPriceSetDocumentSku,
                       dateTimePriceSetDocumentSku, dateTimeToPriceSetDocumentSku
    PROPERTIES(sk) READONLY FORCE GRID barcode, sidArticleSku, nameCategoryArticleSku, nameBrandSupplierArticleSku, sidSizeSupplierItem, sidColorSupplierItem
    PROPERTIES (p, sk) priceInBasePriceSetDocumentSku, overRRPBasePriceSetDocumentSku, markupBasePriceSetDocumentSku, priceOutBasePriceSetDocumentSku,
                       nameCurrencyBasePriceSetDocumentSku, nameTypeExchangeBasePriceSetDocumentSku, rateBasePriceSetDocumentSku, RRPRateBasePriceSetDocumentSku,
                       priceOutRateBasePriceSetDocumentSku, priceBBasePriceSetDocumentSku, nameMethodBasePriceSetDocumentSku,
                       priceBasePriceSetDocumentSku

    PROPERTIES (p, sk) overPercentDiscountPriceSetDocumentSku, calcPriceDiscountPriceSetDocumentSku, priceBDiscountPriceSetDocumentSku,
                      priceDiscountPriceSetDocumentSku

    FILTERS inPriceSetDocumentSku(p, sk)

    EVENTS
        ON OK EXEC prePostPriceSetDocument(p)

    EDIT priceSetDocument OBJECT p
;

DESIGN priceSetDocument FROM DEFAULT {
    main {
        preferredSize = (1600, 1200);
        NEW headerContainer {
            childConstraints = TO THE BOTTOM;
            NEW headerRow1 {
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(isPostedPriceSetDocument);
                ADD PROPERTY(objectClassName) {
                    preferredCharWidth = 15;
                }
                ADD PROPERTY(nameNumeratorObject);
                ADD PROPERTY(numberObject);
                ADD PROPERTY(seriesObject);
                ADD PROPERTY(datePriceSetDocument);
                ADD PROPERTY(timePriceSetDocument);
                ADD PROPERTY(dateTimeToPriceSetDocument);
            }
            NEW headerRow2 {
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(nameCurrencyPriceSetDocument);
                ADD PROPERTY(reasonPriceSetDocument);
            }
        }

        NEW allContainer {
            childConstraints = TO THE BOTTOM;
            type = SPLITV;

            NEW topContainer {

                childConstraints = TO THE RIGHT;
                type = SPLITH;

                ADD treeSupplierBrand.tree.box {
                    fillHorizontal = 1;
                    fillVertical = 1;
                }

                NEW checkContainer {
                    childConstraints = TO THE RIGHT;
                    type = SPLITH;

                    ADD aa.box {
                        fillHorizontal = 2;
                        fillVertical = 1;
                    }

                    ADD ss.box {
                        fillHorizontal = 2;
                        fillVertical = 1;
                    }
                }
            }

            NEW bottomContainer {
                childConstraints = TO THE RIGHT;

                ADD treeCategory.tree.box {
                    fillHorizontal = 1;
                    fillVertical = 2;
                }

                NEW articleSkuContainer {

                    type = TABBED;
                    ADD a.box {
                        fillHorizontal = 4;
                        fillVertical = 2;
                    }

                    ADD sk.box {
                        fillHorizontal = 4;
                        fillVertical = 2;
                    }
                }
            }
        }
    }

    ADD functions.box;

    PROPERTY(formOkAction) {
        caption = 'Провести';
    }

    PROPERTY(formCloseAction) {
        askConfirm = TRUE;
    }
}

// ------------------------------------------------ Формирование документов переоценки ----------------------------------- //

TABLE stockPriceSetDocument(stock, priceSetDocument);

userPriceChangeStockPriceSetDocument (stock, priceSetDocument) = DATA userPriceChange (stock, priceSetDocument);
nameUserPriceChangeStockPriceSetDocument 'Документ переоценки' (stock, priceSetDocument) = descriptionUserPriceChange(
    userPriceChangeStockPriceSetDocument (stock, priceSetDocument)) MINCHARWIDTH 30 MAXCHARWIDTH 30 PREFCHARWIDTH 30;

createUserPriceChangeStockPriceSetDocument 'Создать документ переоценки' =  [ACTION (stock, priceSetDocument) NEWSESSION {
    LOCAL priceDateTime = DATETIME ();
    SET priceDateTime() <- dateTimePriceSetDocument(priceSetDocument);

    ADDOBJ userPriceChangePosted;
    FOR p == addedObject() DO {
        SET userPriceChangeStockPriceSetDocument(stock, priceSetDocument) <- p AS userPriceChange;
        SET departmentStoreUserPriceChange(p) <- stock;
        SET dateUserPriceChange(p) <- datePriceSetDocument(priceSetDocument);
        SET timeUserPriceChange(p) <- timePriceSetDocument(priceSetDocument);
        SET noteUserPriceChange(p) <- [FORMULA STRING[200] 'CAST($1 AS TEXT) || \' \' || CAST($2 AS TEXT) ||  \' от \' || CAST($3 AS TEXT)'](
                                      objectClassName(priceSetDocument), seriesNumberObject(priceSetDocument), datePriceSetDocument(priceSetDocument));

        FOR balanceBASkuStockDateTime(sku, stock, priceDateTime()) !=0 AND overInPriceSetDocumentSku(priceSetDocument, sku)
            AND priceAPriceSetDocumentSkuCurrencyDateTime(sku, currencyStock(stock), priceDateTime()) != retailPriceBLedgerDateTime(sku, stock, priceDateTime())
            AND isPostedPriceSetDocument(priceSetDocument) DO {
            ADDOBJ userPriceChangeDetail;
            FOR  d == addedObject() DO {
                SET userPriceChangeUserPriceChangeDetail(d) <- p AS userPriceChange;
                SET skuUserPriceChangeDetail(d) <- sku AS sku;
                SET quantityUserPriceChangeDetail(d) <- balanceBASkuStockDateTime(sku, stock, priceDateTime());

                SET curImporterPriceUserPriceChangeDetail(d) <- importerPriceBLedgerDateTime(sku, stock, priceDateTime());
                SET curSupplierPriceUserPriceChangeDetail(d) <- supplierPriceBLedgerDateTime(sku, stock, priceDateTime());
                SET curRetailVATUserPriceChangeDetail(d) <- retailVATBLedgerDateTime(sku, stock, priceDateTime());
                SET curWareUserPriceChangeDetail(d) <- wareBLedgerDateTime(sku, stock, priceDateTime());
                SET curWarePriceUserPriceChangeDetail(d) <- warePriceBLedgerDateTime(sku, stock, priceDateTime());
                SET curRetailPriceUserPriceChangeDetail(d) <- retailPriceBLedgerDateTime(sku, stock, priceDateTime());

                SET importerPriceUserPriceChangeDetail(d) <- importerPriceBLedgerDateTime(sku, stock, priceDateTime());
                SET supplierPriceUserPriceChangeDetail(d) <- supplierPriceBLedgerDateTime(sku, stock, priceDateTime());
                SET retailVATUserPriceChangeDetail(d) <- retailVATBLedgerDateTime(sku, stock, priceDateTime());
                SET wareUserPriceChangeDetail(d) <- wareBLedgerDateTime(sku, stock, priceDateTime());
                SET warePriceUserPriceChangeDetail(d) <- warePriceBLedgerDateTime(sku, stock, priceDateTime());
                SET retailPriceUserPriceChangeDetail(d) <- priceAPriceSetDocumentSkuCurrencyDateTime(sku, currencyStock(stock), priceDateTime());

            }
        }
    }
    FORM userPriceChange OBJECTS u = userPriceChangeStockPriceSetDocument (stock, priceSetDocument) MODAL;
    IF formResult() == formResult.ok THEN {
        EXEC apply();
    }

}] (stock, priceSetDocument) AND NOT userPriceChangeStockPriceSetDocument(stock, priceSetDocument) AND isPostedPriceSetDocument(priceSetDocument) AND stock IS departmentStore CONFIRM;

// ------------------------------------------- Печать маркировки article -------------------------------------- //

quantityStockPriceSetDocumentArticle 'Кол-во' (stock, priceSetDocument, article) =
    GROUP SUM balanceBSkuStockDateTime(sku, stock, dateTimePriceSetDocument(priceSetDocument))
    BY stock, priceSetDocument, articleSku(sku);


quantityStockPriceSetDocument (stock, priceSetDocument) =
    GROUP SUM balanceBSkuStockDateTime(sku, stock, dateTimePriceSetDocument(priceSetDocument))
    IF overInPriceSetDocumentSku(priceSetDocument, sku)
    BY stock, priceSetDocument;
    
countStockPriceSetDocumentArticle(stock, priceSetDocument, article) = castToInteger(quantityStockPriceSetDocumentArticle(stock, priceSetDocument, article));

shouldBePrintArticle(article) = SESSION DATA BOOLEAN (article);

FORM priceArticlePriceSetDocumentPrint 'Цены для маркировки' PRINT

    OBJECTS s = stock FIXED PANEL, p = priceSetDocument FIXED PANEL, a = article
    PROPERTIES(p, a) READONLY priceABasePriceSetDocumentArticle, priceADiscountPriceSetDocumentArticle
    PROPERTIES(s, p, a) READONLY countStockPriceSetDocumentArticle

    FILTERS shouldBePrintArticle(a)
;

printPricePriceSetDocumentArticle 'Печать цен для маркировки' = [ACTION (stock, priceSetDocument, article) {
    SET shouldBePrintArticle(a) <- NULL;
    SET shouldBePrintArticle(a) <- TRUE IF (a == (article AS article));
    FORM priceArticlePriceSetDocumentPrint OBJECTS s = stock, p = priceSetDocument MODAL;
}](stock, priceSetDocument, article) AND isPostedPriceSetDocument(priceSetDocument);

printAllPricePriceSetDocumentArticle 'Печать цен для маркировки' = ACTION (stock, priceSetDocument) {
    SET shouldBePrintArticle(article) <- NULL;
    SET shouldBePrintArticle(article) <- TRUE IF (quantityStockPriceSetDocumentArticle(stock, priceSetDocument, article) AND
                                                  inPriceSetDocumentArticle(priceSetDocument, article));
    FORM priceArticlePriceSetDocumentPrint OBJECTS s = stock, p = priceSetDocument MODAL;
} TOOLBAR;

importPriceList 'Импорт (TEDDY)'= ACTION CUSTOM 'roman.actions.ImportPriceListActionProperty' TOOLBAR;

// ------------------------------------------- Печать маркировки sku -------------------------------------- //

quantityStockPriceSetDocumentSku 'Кол-во' (stock, priceSetDocument, sku) =
    GROUP SUM balanceBSkuStockDateTime(sku, stock, dateTimePriceSetDocument(priceSetDocument))
    BY stock, priceSetDocument, sku;

countStockPriceSetDocumentSku(stock, priceSetDocument, sku) = castToInteger(quantityStockPriceSetDocumentSku(stock, priceSetDocument, sku));

shouldBePrintSku(sku) = SESSION DATA BOOLEAN (sku);

FORM priceSkuPriceSetDocumentPrint 'Цены для маркировки' PRINT

    OBJECTS s = stock FIXED PANEL, p = priceSetDocument FIXED PANEL, sk = sku
    PROPERTIES(p, sk) READONLY priceABasePriceSetDocumentSku, priceADiscountPriceSetDocumentSku
    PROPERTIES(s, p, sk) READONLY countStockPriceSetDocumentSku

    FILTERS shouldBePrintSku(sk)
;

printPricePriceSetDocumentSku 'Печать цен для маркировки' = [ACTION (stock, priceSetDocument, sku) {
    SET shouldBePrintSku(sk) <- NULL;
    SET shouldBePrintSku(sk) <- TRUE IF (sk == (sku AS sku));
    FORM priceSkuPriceSetDocumentPrint OBJECTS s = stock, p = priceSetDocument MODAL;
}](stock, priceSetDocument, sku) AND isPostedPriceSetDocument(priceSetDocument);

printAllPricePriceSetDocumentSku 'Печать цен для маркировки' = ACTION (stock, priceSetDocument) {
    SET shouldBePrintSku(sku) <- NULL;
    SET shouldBePrintSku(sku) <- TRUE IF (quantityStockPriceSetDocumentSku(stock, priceSetDocument, sku) AND
                                                  inPriceSetDocumentSku(priceSetDocument, sku));
    FORM priceSkuPriceSetDocumentPrint OBJECTS s = stock, p = priceSetDocument MODAL;
} TOOLBAR;


FORM priceSetDocuments 'Розничные прайсы'

    OBJECTS p=priceSetDocument
    PROPERTIES(p) READONLY statusPriceSetDocument, objectClassName, numberObject, seriesObject, datePriceSetDocument,
                           timePriceSetDocument, dateTimeToPriceSetDocument, nameCurrencyPriceSetDocument, canonicalBrandPriceSetDocument, reasonPriceSetDocument
    PROPERTIES() importPriceList FORCE PANEL TODRAW p
    PROPERTIES(p) ADDFORM, EDITFORM, delete FORCE PANEL

    TREE stockTree sg = stockGroup PARENT parentStockGroup
    PROPERTIES READONLY sgTreeName = name(sg)

    OBJECTS ts = Stock.stock
    PROPERTIES    READONLY tsTreeName = name(ts)

    FILTERS isParentStockGroupStock(sg, ts)

    OBJECTS a=article
    PROPERTIES(a) READONLY sidArticle, nameCategoryArticle, nameBrandSupplierArticle
    PROPERTIES (p, a) READONLY priceInBasePriceSetDocumentArticle,
                               RRPBasePriceSetDocumentArticle, markupBasePriceSetDocumentArticle, priceOutBasePriceSetDocumentArticle,
                               nameCurrencyBasePriceSetDocumentArticle, nameTypeExchangeBasePriceSetDocumentArticle,
                               rateBasePriceSetDocumentArticle, priceBBasePriceSetDocumentArticle,
                               priceBasePriceSetDocumentArticle, priceInRateBBasePriceSetDocumentArticle, percentDiscountPriceSetDocumentArticle,
                               priceBDiscountPriceSetDocumentArticle, priceDiscountPriceSetDocumentArticle

    PROPERTIES(ts, p) createUserPriceChangeStockPriceSetDocument FORCE GRID
    PROPERTIES(ts, p) READONLY nameUserPriceChangeStockPriceSetDocument

    PROPERTIES(ts, p, a) READONLY quantityStockPriceSetDocumentArticle

    PROPERTIES(ts, p, a) printPricePriceSetDocumentArticle

    PROPERTIES(ts, p) printAllPricePriceSetDocumentArticle TODRAW a FORCE PANEL

    FILTERS inPriceSetDocumentArticle(p, a)
    FILTERGROUP filters1
        FILTER 'Склады с остатками' 'F10' quantityStockPriceSetDocument(ts, p) DEFAULT

    OBJECTS sk=sku
    PROPERTIES(sk) READONLY FORCE GRID barcode, sidArticleSku, nameCategoryArticleSku, nameBrandSupplierArticleSku, sidSizeSupplierItem, sidColorSupplierItem
    PROPERTIES (p, sk) READONLY priceInBasePriceSetDocumentSku, overRRPBasePriceSetDocumentSku, markupBasePriceSetDocumentSku, priceOutBasePriceSetDocumentSku,
                       rateBasePriceSetDocumentSku, RRPRateBasePriceSetDocumentSku, priceOutRateBasePriceSetDocumentSku, priceBBasePriceSetDocumentSku,
                       nameMethodBasePriceSetDocumentSku, priceBasePriceSetDocumentSku,
                       priceInRateBPriceSetDocumentSku, percentDiscountPriceSetDocumentSku, priceBDiscountPriceSetDocumentSku,
                       priceDiscountPriceSetDocumentSku
    PROPERTIES(ts, p, sk) READONLY quantityStockPriceSetDocumentSku
    PROPERTIES(ts, p, sk) printPricePriceSetDocumentSku
    PROPERTIES(ts, p) printAllPricePriceSetDocumentSku TODRAW sk FORCE PANEL

    FILTERS inPriceSetDocumentSku(p, sk)
;

DESIGN priceSetDocuments FROM DEFAULT {

    NEW topContainer {

        type = SPLITV;
        ADD p.box;
        NEW firstContainer{
            type = SPLITV;
            NEW secondContainer{
                type = SPLITH;
                childConstraints = TO THE RIGHT;
                ADD stockTree.tree.box {title = 'Склады';};
                ADD ts.box {title = 'Склад';};
                fillVertical = 1;
            }

            NEW bottomContainer {
                type = TABBED;
                ADD a.box {
                    fillVertical = 3;
                };

                ADD sk.box {
                    fillVertical = 3;
                };
            }
        }
    }

    ADD functions.box;
    PROPERTY (delete(p)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
    PROPERTY(objectClassName) {
        preferredCharWidth = 10;
    }
}

// -------------------------------------------- Расценка фрахтов ------------------------------------------ //

quantityPriceSetDocumentFreight (freight) = GROUP SUM 1 IF freightBasePriceSetDocument(basePriceSetDocument) BY freightBasePriceSetDocument(basePriceSetDocument);
hasPriceSetDocumentFreight (freight) = TRUE IF NOT quantityPriceSetDocumentFreight(freight) AND freight IS freight;

isPriceSetFreight 'Статус' (freight) = IF hasPriceSetDocumentFreight(freight)
                                     THEN 'Не расценен' AND freight IS freight
                                     ELSE 'Расценен' AND freight IS freight MINCHARWIDTH 11;

backgroundPriceSetDocument 'Цвет' (freight) = RGB(212,255,212) IF hasPriceSetDocumentFreight(freight);

// розничный прайс по фрахту
createPriceSetDocument 'Расценить по артикулам' =  ACTION (freight) NEWSESSION {
    ADDOBJ basePriceSetDocument;
    FOR p == addedObject() DO {
        SET freightBasePriceSetDocument(p) <- freight;
        SET currencyPriceSetDocument(p) <- currencyCountryFreight(freight);
        SET inPriceSetDocumentArticle(p, article) <- TRUE IF quantityFreightArticle(freight, article);
        SET priceInBasePriceSetDocumentArticle(p, article) <- priceInFreightArticle(freight, article);
        SET currencyBasePriceSetDocumentArticle(p, article) <- currencyFreight(freight) WHERE inPriceSetDocumentArticle(p, article);
        SET typeExchangeBasePriceSetDocumentArticle(p, article) <- typeExchangeRetail() WHERE inPriceSetDocumentArticle(p, article);
        SET RRPBasePriceSetDocumentArticle(p, article) <- RRPFreightArticle(freight, article);

        FORM priceSetDocument OBJECTS p=addedObject() MODAL;
        IF formResult() == formResult.ok THEN {
            EXEC apply();
        };
    };
} TOOLBAR;


createPriceSetDocumentSku 'Расценить по товарам' =  ACTION (freight) NEWSESSION {
    ADDOBJ basePriceSetDocument;
    FOR p == addedObject() DO {
        SET freightBasePriceSetDocument(p) <- freight AS freight;
        SET currencyPriceSetDocument(p) <- currencyCountryFreight(freight);
        SET inPriceSetDocumentSku(p, sku) <- TRUE IF quantityFreightSku(freight, sku);
        SET priceInBasePriceSetDocumentSku(p, sku) <- priceInFreightSku(freight, sku);
        SET currencyBasePriceSetDocumentSku(p, sku) <- currencyFreight(freight) WHERE inPriceSetDocumentSku(p, sku);
        SET typeExchangeBasePriceSetDocumentSku(p, sku) <- typeExchangeRetail() WHERE inPriceSetDocumentSku(p, sku);
        SET RRPBasePriceSetDocumentSku(p, sku) <- RRPFreightSku(freight, sku);

        FORM priceSetDocument OBJECTS p=addedObject() MODAL;
        IF formResult() == formResult.ok THEN {
            EXEC apply();
        };
    };
} TOOLBAR;


FORM freights 'Расценка фрахтов'

    OBJECTS f = freightPriced
    PROPERTIES(f) READONLY isPriceSetFreight BACKGROUND backgroundPriceSetDocument(f), numberObject, seriesObject, date, objectClassName,
                  canonicalBrandFreight, dateArrivalFreight, nameRouteFreight, nameExporterFreight, grossWeightFreight
    PROPERTIES(f) FORCE PANEL createPriceSetDocument SHOWIF hasPriceSetDocumentFreight(f), createPriceSetDocumentSku SHOWIF hasPriceSetDocumentFreight(f)

    FILTERGROUP filtersDocument
        FILTER 'Показывать нерасценённые фрахты' 'F11' hasPriceSetDocumentFreight(f) DEFAULT
;
