MODULE RetailPrice;

REQUIRE System,
        MasterData,
        POS,
        RomanStock,
        PriceInterval,
        UserPriceChange,
        RomanLogicsModule;

PRIORITY MasterData, RomanLogicsModule;

// -------------------------------------- Надбавки --------------------------------------- //

CLASS coefficientRetail 'Надбавка';

dateCoefficientRetail 'Дата введения' = DATA DATE(coefficientRetail) IN baseGroup;
markupCoefficientRetail 'Множитель' = DATA NUMERIC[14,3](coefficientRetail) IN baseGroup;

uniqueCoefficientRetail() = GROUP UNIQUE coefficientRetail BY dateCoefficientRetail(coefficientRetail)
                                                        WHERE coefficientRetail IS coefficientRetail;

coefficientRetailDate(coefficientRetail, date) = coefficientRetail IF dateCoefficientRetail(coefficientRetail) <= date AND date AS DATE;
actingCoefficientRetailDate(date) = GROUP MAX dateCoefficientRetail(coefficientRetailDate(coefficientRetail, date)) BY date;

FORM coefficientRetail 'Надбавка'

    OBJECTS c=coefficientRetail FIXED PANEL
    PROPERTIES(c) dateCoefficientRetail, markupCoefficientRetail

    EDIT coefficientRetail OBJECT c
;

FORM coefficientRetails 'Надбавки'

    OBJECTS c=coefficientRetail
    PROPERTIES(c) READONLY dateCoefficientRetail, markupCoefficientRetail
    PROPERTIES(c) ADDFORM, EDITFORM, delete
;

// ------------------------------------------------ Прайсы -------------------------------- //

META metaCodePriceBaseDiscount(document, caption)

    priceData###document##Article caption = DATA NUMERIC[14,2](document, article) IN baseGroup;

    order###document = LIST(dateTimePriceSetDocument(document), document) PERSISTENT;

    concat###document##ArticleDateTime (article, dateTime) = GROUP MAX order###document(document) AND
                                                                       priceData###document##Article(document, article) AND
                                                                       dateTimePriceSetDocument(document) <= (dateTime AS DATETIME) AND
                                                                       dateTimeToPriceSetDocument(document) > (dateTime AS DATETIME) AND
                                                                       isPostedPriceSetDocument(document)
                                                                    BY article, dateTime;

    document##ArticleDateTime (article, dateTime) = concat###document##ArticleDateTime(article, dateTime)[2];

    price###document##ArticleDateTime(article, dateTime) = priceData###document##Article(document##ArticleDateTime(article, dateTime), article);
    priceIn###document##ArticleDateTime(article, dateTime) = priceInPriceSetDocumentArticle(document##ArticleDateTime(article, dateTime), article);
    prevPriceIn###document##ArticleDateTime(article, dateTime) = PREV(priceInPriceSetDocumentArticle(document##ArticleDateTime(article, dateTime), article));

    RRP###document##ArticleDateTime(article, dateTime) = RRPPriceSetDocumentArticle(document##ArticleDateTime(article, dateTime), article);
    prevRRP###document##ArticleDateTime(article, dateTime) = PREV(RRPPriceSetDocumentArticle(document##ArticleDateTime(article, dateTime), article));

    priceB###document##Article caption###' (предыдущая)' (document, article) = price###document##ArticleDateTime(article, dateTimePriceSetDocument(document)) MINCHARWIDTH 15;
    priceInB###document##Article 'Цена поставщика (предыдущая)' (document, article) = prevPriceIn###document##ArticleDateTime(article, dateTimePriceSetDocument(document));
    prevPriceInB###document##Article 'Цена поставщика (предыдущая)' (document, article) = prevPriceIn###document##ArticleDateTime(article, dateTimePriceSetDocument(document));

    prevRRPB###document##Article 'Рекомендуемая цена (предыдущая)' (document, article) = prevRRP###document##ArticleDateTime(article, dateTimePriceSetDocument(document));
    RRPB###document##Article 'Рекомендуемая цена (предыдущая)' (document, article) = RRP###document##ArticleDateTime(article, dateTimePriceSetDocument(document));

END


maxDateTime 'Максимальная дата' = DATA DATETIME();

EXTEND FORM globalParamForm
     PROPERTIES() maxDateTime
;

CLASS STATIC methodPrice 'Метод расчёта'
{
    coefficient 'С надбавкой',
    RRP 'Рекомендуемая',
    previous 'Предыдущая'
};


CLASS ABSTRACT priceSetDocument 'Документ изменения цен' : numeratedObject;
CLASS basePriceSetDocument 'Базовый прайс' : priceSetDocument;
CLASS discountPriceSetDocument 'Распродажа' : priceSetDocument;
CLASS mixPriceSetDocument 'Базовый прайс с распродажей' : basePriceSetDocument, discountPriceSetDocument;

TABLE priceSetDocument (priceSetDocument);
TABLE basePriceSetDocument (basePriceSetDocument);
TABLE discountPriceSetDocument (discountPriceSetDocument);

@defineDocumentHeaderTime(priceSetDocument);

TABLE priceSetDocumentArticle(priceSetDocument, article);

defaultNumeratorPriceSetDocuments = DATA numerator ();
nameDefaultNumeratorPriceSetDocument 'Нумератор для розничных прайсов' = name(defaultNumeratorPriceSetDocuments());

initValueNumeratorObject(object) += defaultNumeratorPriceSetDocuments() IF object IS priceSetDocument;
initWhenNumeratorObject(object) += ASSIGNED(object IS priceSetDocument);

dateTimeToDataPriceSetDocument 'Дата/время окончания' = DATA DATETIME(priceSetDocument) IN documentPrmGroup;
dateTimeToPriceSetDocument 'Дата/время окончания' (priceSetDocument) = UNION OVERRIDE maxDateTime() IF priceSetDocument IS priceSetDocument,
                                                                                            dateTimeToDataPriceSetDocument(priceSetDocument) IN baseGroup PERSISTENT;

CONSTRAINT dateTimeToPriceSetDocument(document) < dateTimePriceSetDocument(document) MESSAGE 'Дата/время окончания действия документа меньше даты/времени его начала';

isDiscountPriceSetDocument 'Распродажа' = DATA BOOLEAN(priceSetDocument) IN baseGroup;
keepDiscountPriceSetDocument 'Учитывать скидки' = DATA BOOLEAN(priceSetDocument) IN baseGroup;

//связь документа и фрахта
freightPriceSetDocument 'Фрахт документа (ИД)' = DATA freight(basePriceSetDocument) IN idGroup;

reasonPriceSetDocument 'Основание прайса' (priceSetDocument) = UNION OVERRIDE descriptionFreight(freightPriceSetDocument (priceSetDocument)),
                                                                                [DATA STRING[20] (priceSetDocument)](priceSetDocument);

quantityPriceSetDocumentFreight (freight) = GROUP SUM 1 IF freightPriceSetDocument(basePriceSetDocument) BY freightPriceSetDocument(basePriceSetDocument);
isPriceSetDocumentFreight (freight) = TRUE IF NOT quantityPriceSetDocumentFreight(freight) AND freight IS freight;

isPriceSetFreight 'Статус' (freight) = IF isPriceSetDocumentFreight(freight)
                                     THEN 'Не расценен' AND freight IS freight
                                     ELSE 'Расценен' AND freight IS freight MINCHARWIDTH 11;

backgroundPriceSetDocument 'Цвет' (freight) = RGB(212,255,212) IF isPriceSetDocumentFreight(freight);

priceInPriceSetDocumentArticle 'Цена поставщика' = DATA NUMERIC[14,2](basePriceSetDocument, article) IN baseGroup;

RRPPriceSetDocumentArticle 'Рекомендуемая цена' = DATA NUMERIC[14,2](basePriceSetDocument, article) IN baseGroup;

isNotRRPPriceSetDocumentArticle 'Нет рекомендуемой цены' (basePriceSetDocument, article) =
    basePriceSetDocument IS basePriceSetDocument AND article IS article AND NOT RRPPriceSetDocumentArticle(basePriceSetDocument, article);

typeExchangePriceSetDocument (priceSetDocument) = typeExchangeRetail() AND priceSetDocument IS priceSetDocument;
currencyPriceSetDocument (priceSetDocument) = currencyTypeExchange(typeExchangeSTX()) AND priceSetDocument IS priceSetDocument;
@defineNearestRateExchangeObject(priceSetDocument, , datePriceSetDocument, publicGroup);

rateDataPriceSetDocumentArticle 'Обменный курс' = DATA NUMERIC[14,2](priceSetDocument, article) IN baseGroup;

ratePriceSetDocumentArticle 'Обменный курс' (basePriceSetDocument, article) = UNION OVERRIDE rateExchangePriceSetDocument(basePriceSetDocument) AND article IS article,
                                                                                             rateDataPriceSetDocumentArticle(basePriceSetDocument, article);

coefficientRetailPriceSetDocument 'Коэффициент документа' (basePriceSetDocument) = uniqueCoefficientRetail(actingCoefficientRetailDate(datePriceSetDocument(basePriceSetDocument))) IN idGroup;
markupCoefficientRetailPriceSetDocumentArticle 'Коэффициент документа' (basePriceSetDocument, article) = markupCoefficientRetail(coefficientRetailPriceSetDocument(basePriceSetDocument))
                                                                                                               AND article IS article IN baseGroup;

markupPriceSetDocumentArticle 'Коэффициент артикула' = DATA NUMERIC[14,2] (basePriceSetDocument, article);
markupPriceSetDocumentArticle (basePriceSetDocument, article) <- markupCoefficientRetailPriceSetDocumentArticle(basePriceSetDocument, article) WHEN ASSIGNED(basePriceSetDocument IS basePriceSetDocument);

priceOutPriceSetDocumentArticle 'Цена с надбавкой' (basePriceSetDocument, article) = round2(priceInPriceSetDocumentArticle(basePriceSetDocument, article) *
                                                                                                  markupPriceSetDocumentArticle(basePriceSetDocument, article));

isPostedPriceSetDocument 'Закрыт' (priceSetDocument) = DATA BOOLEAN (priceSetDocument);
isDraftPriceSetDocument 'Открыт' (priceSetDocument) = priceSetDocument IS priceSetDocument AND NOT isPostedPriceSetDocument(priceSetDocument);

postPriceSetDocument 'Провести' (priceSetDocument) = [ACTION (priceSetDocument) NEWSESSION AUTOAPPLY {
    IF priceSetDocument IS priceSetDocument AND NOT isPostedPriceSetDocument(priceSetDocument) THEN
    SET isPostedPriceSetDocument(priceSetDocument) <- TRUE; } ] (priceSetDocument) TOOLBAR CONFIRM;

unpostPriceSetDocument 'Распровести' (priceSetDocument) = [ACTION (priceSetDocument) NEWSESSION AUTOAPPLY {
    IF isPostedPriceSetDocument(priceSetDocument) THEN
    SET isPostedPriceSetDocument(priceSetDocument) <- NULL; } ] (priceSetDocument) TOOLBAR CONFIRM;

statusPriceSetDocument 'Статус' (priceSetDocument) = IF isPostedPriceSetDocument(priceSetDocument)
                                                      THEN ('Закрыт' AND priceSetDocument IS priceSetDocument)
                                                      ELSE ('Открыт' AND priceSetDocument IS priceSetDocument);

@metaCodePriceBaseDiscount(basePriceSetDocument, 'Базовая цена');
@metaCodePriceBaseDiscount(discountPriceSetDocument, 'Цена с уценкой');

methodPriceSetDocumentArticle 'Метод расчёта (ИД)' = DATA methodPrice(basePriceSetDocument, article);
notMethodPriceSetDocumentArticle = TRUE IF NOT methodPriceSetDocumentArticle(basePriceSetDocument, article);

nameMethodPriceSetDocumentArticle 'Метод расчёта' (basePriceSetDocument, article) = name(methodPriceSetDocumentArticle(basePriceSetDocument, article)) MAXCHARWIDTH 20;

prevMethodPriceSetDocumentArticleDateTime(article, dateTime) = PREV(methodPriceSetDocumentArticle(basePriceSetDocumentArticleDateTime(article, dateTime), article));
prevMethodPriceSetDocumentArticle 'Метод расчёта (предыдущий)' (document, article) = prevMethodPriceSetDocumentArticleDateTime(article, dateTimePriceSetDocument(document));

RRPRatePriceSetDocumentArticle 'Рекомендуемая (руб.)' (basePriceSetDocument, article) = round0(RRPPriceSetDocumentArticle(basePriceSetDocument, article) *
                                                                                                     ratePriceSetDocumentArticle(basePriceSetDocument, article)) MINCHARWIDTH 15;

priceOutRatePriceSetDocumentArticle 'Цена с надбавкой (руб.)' (basePriceSetDocument, article) = round0(priceOutPriceSetDocumentArticle(basePriceSetDocument, article) *
                                                                                                        ratePriceSetDocumentArticle(basePriceSetDocument, article)) MINCHARWIDTH 15;


priceRetailPriceSetDocumentArticle 'Цена розничная' (basePriceSetDocument, article) =
           IF methodPriceSetDocumentArticle(basePriceSetDocument, article) == methodPrice.coefficient THEN roundPrice(priceOutRatePriceSetDocumentArticle(basePriceSetDocument, article)) ELSE
             IF methodPriceSetDocumentArticle(basePriceSetDocument, article) == methodPrice.RRP THEN roundPrice(RRPRatePriceSetDocumentArticle(basePriceSetDocument, article)) ELSE
                PREV(priceBBasePriceSetDocumentArticle(basePriceSetDocument, article)) IF methodPriceSetDocumentArticle(basePriceSetDocument, article) == methodPrice.previous;

priceDataBasePriceSetDocumentArticle(basePriceSetDocument, article) <- priceRetailPriceSetDocumentArticle(basePriceSetDocument, article)
                            WHEN CHANGED (methodPriceSetDocumentArticle(basePriceSetDocument, article)) OR
                                 CHANGED (priceOutRatePriceSetDocumentArticle(basePriceSetDocument, article)) OR
                                 CHANGED (RRPRatePriceSetDocumentArticle(basePriceSetDocument, article));

// для уценки
priceInRateBBasePriceSetDocumentArticle 'Цена поставщика (руб.)' (discountPriceSetDocument, article) = ratePriceSetDocumentArticle (discountPriceSetDocument, article) *
                                                                                                             priceInBBasePriceSetDocumentArticle(discountPriceSetDocument, article) MINCHARWIDTH 15;

percentDiscountPriceSetDocumentArticle 'Процент уценки' = DATA NUMERIC[14,2](discountPriceSetDocument, article) IN baseGroup;

prevPercentDiscountPriceSetDocumentArticleDateTime(article, dateTime) = PREV(percentDiscountPriceSetDocumentArticle(discountPriceSetDocumentArticleDateTime(article, dateTime), article));
prevPercentDiscountPriceSetDocumentArticle 'Процент скидки (предыдущий)' (document, article) = prevPercentDiscountPriceSetDocumentArticleDateTime(article, dateTimePriceSetDocument(document));

priceAllowancePriceSetDocumentArticle (discountPriceSetDocument, article) = IF article IS article AND discountPriceSetDocument IS discountPriceSetDocument AND NOT discountPriceSetDocument IS basePriceSetDocument
                         THEN priceBBasePriceSetDocumentArticle(discountPriceSetDocument, article)
                         ELSE priceDataBasePriceSetDocumentArticle(discountPriceSetDocument, article);

priceDiscountPriceSetDocumentArticle 'Цена без процентов' (discountPriceSetDocument, article) = [roundM1(X*(100-Y)/100)]
                                                                                                         (priceAllowancePriceSetDocumentArticle (discountPriceSetDocument, article),
                                                                                                         percentDiscountPriceSetDocumentArticle(discountPriceSetDocument, article)) IN baseGroup;

priceDataDiscountPriceSetDocumentArticle(discountPriceSetDocument, article) <- roundPrice(priceDiscountPriceSetDocumentArticle(discountPriceSetDocument, article))
                                        WHEN CHANGED (priceDiscountPriceSetDocumentArticle(discountPriceSetDocument, article));

inArticlePriceSetDocument 'Артикул в документе' = DATA BOOLEAN(priceSetDocument, article);
inFreightArticle (freight, article) = TRUE IF quantityFreightArticle(freight, article);

quantityPriceSetDocumentBrandSupplier (priceSetDocument, brandSupplier) = GROUP SUM 1 IF inArticlePriceSetDocument(priceSetDocument, article)
    BY priceSetDocument, brandSupplierArticle(article);

canonicalBrandPriceSetDocument 'Бренды' (priceSetDocument) = castToString255(
    [GROUP CONCAT commonName(brandSupplier) IF quantityPriceSetDocumentBrandSupplier(priceSetDocument, brandSupplier), ' , ' BY priceSetDocument](priceSetDocument))
    MINCHARWIDTH 50 MAXCHARWIDTH 100 PREFCHARWIDTH 100 PERSISTENT;

typeExchangePriceSetDocumentArticle 'Тип обмена ИД' = DATA typeExchange (priceSetDocument, article) IN idGroup;
nameTypeExchangePriceSetDocumentArticle 'Тип обмена' (priceSetDocument, article) = name(typeExchangePriceSetDocumentArticle(priceSetDocument, article));
typeExchangePriceSetDocumentArticle(priceSetDocument, article) <- typeExchangeRetail() AND priceSetDocument IS priceSetDocument AND article IS article
                                                                  WHEN ASSIGNED (inArticlePriceSetDocument(priceSetDocument, article));

currencyPriceSetDocumentArticle 'Валюта ИД' = DATA currency (priceSetDocument, article) IN idGroup;
nameCurrencyPriceSetDocumentArticle 'Валюта' = name(currencyPriceSetDocumentArticle(priceSetDocument, article));
currencyPriceSetDocumentArticle(priceSetDocument, article) <- currencyTypeExchange(typeExchangeSTX()) AND priceSetDocument IS priceSetDocument AND article IS article
                                                                  WHEN ASSIGNED (inArticlePriceSetDocument(priceSetDocument, article));

//проставление текущих значений при расценке
priceInPriceSetDocumentArticle(basePriceSetDocument, article) <- prevPriceInBBasePriceSetDocumentArticle (basePriceSetDocument, article)
    WHEN ASSIGNED(inArticlePriceSetDocument(basePriceSetDocument, article));

RRPPriceSetDocumentArticle(basePriceSetDocument, article) <- prevRRPBBasePriceSetDocumentArticle (basePriceSetDocument, article)
    WHEN ASSIGNED(inArticlePriceSetDocument(basePriceSetDocument, article));

percentDiscountPriceSetDocumentArticle (document, article) <- prevPercentDiscountPriceSetDocumentArticle (document, article)
    WHEN ASSIGNED(inArticlePriceSetDocument(document, article));

methodPriceSetDocumentArticle (document, article) <- prevMethodPriceSetDocumentArticle (document, article)
    WHEN ASSIGNED(inArticlePriceSetDocument(document, article));

pricePriceSetDocumentArticleDateTime(article, dateTime) = priceBasePriceSetDocumentArticleDateTime(article, dateTime) OR priceDiscountPriceSetDocumentArticleDateTime(article, dateTime);

POSPriceSkuDepartmentStoreDateTime(sku, departmentStore, dateTime) += pricePriceSetDocumentArticleDateTime(articleSku(sku), dateTime) IF departmentStore IS departmentStore;

//уценки
FORM logPriceArticle 'История цен'

    OBJECTS a=article
    OBJECTS d=discountPriceSetDocument
    PROPERTIES(d) READONLY dateTimePriceSetDocument
    PROPERTIES (d, a) READONLY priceDataDiscountPriceSetDocumentArticle

    FILTERS inArticlePriceSetDocument(d, a)

;

showFormLogPriceArticle 'История' (article) = ACTION FORM logPriceArticle OBJECTS a NEWSESSION MODAL;



createUserPriceChangeDepartmentStorePriceSetDocument 'Создать документ переоценки' =  ACTION (departmentStore, priceSetDocument) NEWSESSION AUTOAPPLY {
    LOCAL priceDateTime = DATETIME ();
    SET priceDateTime() <- dateTimePriceSetDocument(priceSetDocument);
        ADDOBJ userPriceChange;
        FOR p == addedObject() DO {
            SET departmentStoreUserPriceChange(p) <- departmentStore AS departmentStore;
            SET dateUserPriceChange(p) <- datePriceSetDocument(priceSetDocument);
            SET timeUserPriceChange(p) <- timePriceSetDocument(priceSetDocument);

            FOR balanceBASkuStockDateTime(sku, departmentStore, priceDateTime()) !=0 AND inArticlePriceSetDocument(priceSetDocument, articleSku(sku))
                AND pricePriceSetDocumentArticleDateTime(articleSku(sku), priceDateTime()) != retailPriceBLedgerDateTime(sku, departmentStore, priceDateTime())
                AND isPostedPriceSetDocument(priceSetDocument) DO {
                ADDOBJ userPriceChangeDetail;
                FOR  d == addedObject() DO {
                    SET userPriceChangeUserPriceChangeDetail(d) <- p AS userPriceChange;
                    SET skuUserPriceChangeDetail(d) <- sku AS sku;
                    SET quantityUserPriceChangeDetail(d) <- balanceBASkuStockDateTime(sku, departmentStore, priceDateTime());

                    SET curImporterPriceUserPriceChangeDetail(d) <- importerPriceBLedgerDateTime(sku, departmentStore, priceDateTime());
                    SET curSupplierPriceUserPriceChangeDetail(d) <- supplierPriceBLedgerDateTime(sku, departmentStore, priceDateTime());
                    SET curRetailVATUserPriceChangeDetail(d) <- retailVATBLedgerDateTime(sku, departmentStore, priceDateTime());
                    SET curWareUserPriceChangeDetail(d) <- wareBLedgerDateTime(sku, departmentStore, priceDateTime());
                    SET curWarePriceUserPriceChangeDetail(d) <- warePriceBLedgerDateTime(sku, departmentStore, priceDateTime());
                    SET curRetailPriceUserPriceChangeDetail(d) <- retailPriceBLedgerDateTime(sku, departmentStore, priceDateTime());

                    SET importerPriceUserPriceChangeDetail(d) <- importerPriceBLedgerDateTime(sku, departmentStore, priceDateTime());
                    SET supplierPriceUserPriceChangeDetail(d) <- supplierPriceBLedgerDateTime(sku, departmentStore, priceDateTime());
                    SET retailVATUserPriceChangeDetail(d) <- retailVATBLedgerDateTime(sku, departmentStore, priceDateTime());
                    SET wareUserPriceChangeDetail(d) <- wareBLedgerDateTime(sku, departmentStore, priceDateTime());
                    SET warePriceUserPriceChangeDetail(d) <- warePriceBLedgerDateTime(sku, departmentStore, priceDateTime());
                    SET retailPriceUserPriceChangeDetail(d) <- pricePriceSetDocumentArticleDateTime(articleSku(sku), priceDateTime());

                }
            }
        }
} CONFIRM;

FORM priceSetDocument 'Розничный прайс'
    OBJECTS p=priceSetDocument FIXED PANEL
    PROPERTIES(p) nameNumeratorObject, numberObject, seriesObject, datePriceSetDocument, timePriceSetDocument,
                  dateTimeToPriceSetDocument, reasonPriceSetDocument

    TREE treeSupplierBrand v=STRING[3], s=supplier, b=brandSupplier
    PROPERTIES READONLY OBJVALUE(v), name(s), name(b)

    TREE treeCategory vv=STRING[3], c=category
    PROPERTIES READONLY OBJVALUE(vv), name(c)

    OBJECTS aa=article
    PROPERTIES (aa) READONLY sidArticle, nameCategoryArticle, nameBrandSupplierArticle, currentBalanceArticle
    PROPERTIES (p, aa) READONLY priceBBasePriceSetDocumentArticle, priceBDiscountPriceSetDocumentArticle
    PROPERTIES (p, aa) inArticlePriceSetDocument

    FILTERS stringEqualsAll(v), inBrandSupplier(s, b), inSupplierBrandArticle(s, b, aa), stringEqualsAll(vv),
            inArticleCategory(c, aa)

    OBJECTS a=article
    PROPERTIES(a) READONLY sidArticle, nameCategoryArticle, nameBrandSupplierArticle
    PROPERTIES (p, a) priceInPriceSetDocumentArticle,
                      RRPPriceSetDocumentArticle, markupPriceSetDocumentArticle, priceOutPriceSetDocumentArticle,
                      nameTypeExchangePriceSetDocumentArticle, nameCurrencyPriceSetDocumentArticle,
                      ratePriceSetDocumentArticle, RRPRatePriceSetDocumentArticle, priceOutRatePriceSetDocumentArticle,
                      priceBBasePriceSetDocumentArticle, nameMethodPriceSetDocumentArticle, priceRetailPriceSetDocumentArticle,
                      priceDataBasePriceSetDocumentArticle

    PROPERTIES (p, a) percentDiscountPriceSetDocumentArticle, priceDiscountPriceSetDocumentArticle, priceBDiscountPriceSetDocumentArticle,
                      priceDataDiscountPriceSetDocumentArticle//, priceRetailPriceSetDocumentArticle

    FILTERS inArticlePriceSetDocument(p, a), inSupplierBrandArticle(s, b, a), inArticleCategory(c, a)

    FILTERGROUP filters
        FILTER 'Есть рекомендуемая цена' 'F7' RRPPriceSetDocumentArticle(p, a)
        FILTER 'Нет рекомендуемой цены' 'shift F7' isNotRRPPriceSetDocumentArticle(p, a)

    FILTERGROUP filtersBalance
        FILTER 'Ненулевые остатки' 'F8' currentBalanceArticle(aa) DEFAULT

    FILTERGROUP filtersMethod
        FILTER 'Показывать без метода' 'F9' notMethodPriceSetDocumentArticle(p, a)

    FILTERGROUP filtersCategory
        FILTER 'Показывать артикулы ном. группы' 'F10' inArticleCategory(c, a)
    FILTERGROUP filtersBrand
        FILTER 'Показывать артикулы бренда' 'F11' inArticleBrand(b, a)

    EDIT priceSetDocument OBJECT p
;

DESIGN priceSetDocument FROM DEFAULT {
    main {

        ADD p.box{
            childConstraints = TO THE RIGHT;
            ADD PROPERTY(nameNumeratorObject);
            ADD PROPERTY(numberObject);
            ADD PROPERTY(seriesObject);
            ADD PROPERTY(datePriceSetDocument);
            ADD PROPERTY(timePriceSetDocument);
            ADD PROPERTY(dateTimeToPriceSetDocument);
            ADD PROPERTY(reasonPriceSetDocument);
        }

        NEW allContainer {
            childConstraints = TO THE BOTTOM;
            type = SPLITV;

            NEW topContainer {

                childConstraints = TO THE RIGHT;
                type = SPLITH;

                NEW treeContainer {

                    childConstraints = TO THE RIGHT;
                    type = SPLITH;
                    fillHorizontal = 2;
                    ADD treeSupplierBrand.tree.box {
                        fillHorizontal = 1.5;
                    }

                    ADD treeCategory.tree.box {
                        fillHorizontal = 1.5;
                    }
                }

                ADD aa.box {
                    fillHorizontal = 3;
                }
            }

            ADD a.box {
                fillVertical = 1.5;
            }
        }
    }

    ADD functions.box;
}

quantityStorePriceSetDocumentArticle 'Кол-во' (store, priceSetDocument, article) =
    GROUP SUM balanceBSkuStockDateTime(sku, departmentStore, dateTimePriceSetDocument(priceSetDocument))
    BY storeDepartmentStore(departmentStore), priceSetDocument, articleSku(sku);

quantityDepartmentStorePriceSetDocument (departmentStore, priceSetDocument) =
    GROUP SUM balanceBSkuStockDateTime(sku, departmentStore, dateTimePriceSetDocument(priceSetDocument))
    IF inArticlePriceSetDocument(priceSetDocument, articleSku(sku))
    BY departmentStore, priceSetDocument;
quantityStorePriceSetDocument (store, priceSetDocument) = GROUP SUM balanceBSkuStockDateTime(sku, departmentStore, dateTimePriceSetDocument(priceSetDocument))
    IF inArticlePriceSetDocument(priceSetDocument, articleSku(sku))
    BY storeDepartmentStore(departmentStore), priceSetDocument;

countStorePriceSetDocumentArticle(store, priceSetDocument, article) = castToInteger(quantityStorePriceSetDocumentArticle(store, priceSetDocument, article));

shouldBePrintArticle(article) = SESSION DATA BOOLEAN (article);

printPriceBasePriceSetDocumentArticle 'Базовая цена' (priceSetDocument, article) =
    priceBasePriceSetDocumentArticleDateTime(article, dateTimePriceSetDocument(priceSetDocument));
printPriceDiscountPriceSetDocumentArticle 'Скидочная цена' (priceSetDocument, article) =
    priceDiscountPriceSetDocumentArticleDateTime(article, dateTimePriceSetDocument(priceSetDocument));

FORM priceArticlePriceSetDocumentPrint 'Цены для маркировки' PRINT

    OBJECTS s = store FIXED PANEL, p = priceSetDocument FIXED PANEL, a = article
    PROPERTIES(p, a) READONLY printPriceBasePriceSetDocumentArticle, printPriceDiscountPriceSetDocumentArticle
    PROPERTIES(s, p, a) READONLY countStorePriceSetDocumentArticle

    FILTERS shouldBePrintArticle(a)
;

printPricePriceSetDocumentArticle 'Печать цен для маркировки' = [ACTION (store, priceSetDocument, article) {
    SET shouldBePrintArticle(a) <- NULL;
    SET shouldBePrintArticle(a) <- TRUE IF (a == (article AS article));
    FORM priceArticlePriceSetDocumentPrint OBJECTS s = store, p = priceSetDocument MODAL;
}](store, priceSetDocument, article) AND isPostedPriceSetDocument(priceSetDocument);

printAllPricePriceSetDocumentArticle 'Печать цен для маркировки' = ACTION (store, priceSetDocument) {
    SET shouldBePrintArticle(article) <- NULL;
    SET shouldBePrintArticle(article) <- TRUE IF (quantityStorePriceSetDocumentArticle(store, priceSetDocument, article) AND
                                                  inArticlePriceSetDocument(priceSetDocument, article));
    FORM priceArticlePriceSetDocumentPrint OBJECTS s = store, p = priceSetDocument MODAL;
} TOOLBAR;

FORM priceSetDocuments 'Розничные прайсы'

    OBJECTS p=priceSetDocument
    PROPERTIES(p) READONLY statusPriceSetDocument, objectClassName, numberObject, seriesObject, datePriceSetDocument,
                           timePriceSetDocument, dateTimeToPriceSetDocument, canonicalBrandPriceSetDocument, reasonPriceSetDocument
    PROPERTIES(p) FORCE PANEL postPriceSetDocument SHOWIF isDraftPriceSetDocument(p),
                              unpostPriceSetDocument SHOWIF isPostedPriceSetDocument(p), ADDFORM,
                              EDITFORM SHOWIF isDraftPriceSetDocument(p), delete SHOWIF isDraftPriceSetDocument(p)

    OBJECTS s = RomanLogicsModule.store
    PROPERTIES(s) READONLY name

    OBJECTS a=article
    PROPERTIES(a) READONLY sidArticle, nameCategoryArticle, nameBrandSupplierArticle
    PROPERTIES (p, a) READONLY priceInPriceSetDocumentArticle,
                               RRPPriceSetDocumentArticle, markupPriceSetDocumentArticle, priceOutPriceSetDocumentArticle,
                               nameTypeExchangePriceSetDocumentArticle, nameCurrencyPriceSetDocumentArticle,
                               ratePriceSetDocumentArticle, priceBBasePriceSetDocumentArticle, priceRetailPriceSetDocumentArticle,
                               priceDataBasePriceSetDocumentArticle, priceInRateBBasePriceSetDocumentArticle, percentDiscountPriceSetDocumentArticle,
                               priceBDiscountPriceSetDocumentArticle, priceDataDiscountPriceSetDocumentArticle

    OBJECTS d=departmentStore
    PROPERTIES(d) READONLY name
    PROPERTIES(d, p) createUserPriceChangeDepartmentStorePriceSetDocument

    PROPERTIES(s, p, a) READONLY quantityStorePriceSetDocumentArticle

    PROPERTIES(s, p, a) printPricePriceSetDocumentArticle

    PROPERTIES(s, p) printAllPricePriceSetDocumentArticle TODRAW a FORCE PANEL

    FILTERS inArticlePriceSetDocument(p, a)
    FILTERGROUP filters1
        FILTER 'Магазины с остатками' 'F10' quantityStorePriceSetDocument(s, p) DEFAULT
    FILTERGROUP filters2
        FILTER 'Отделы с остатками' 'F9' quantityDepartmentStorePriceSetDocument(d, p) DEFAULT
;

DESIGN priceSetDocuments FROM DEFAULT {

    NEW topContainer {

        type = SPLITV;
        ADD p.box;
        NEW firstContainer{
            type = SPLITV;
            NEW secondContainer{
                type = SPLITH;
                ADD s.box;
                ADD d.box;
                POSITION d.box TO THE RIGHT s.box;
                fillVertical = 1;
            }
            ADD a.box {
                fillVertical = 3;
            };
        }
    }

    ADD functions.box;
    PROPERTY (delete(p)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
    PROPERTY(objectClassName) {
        preferredCharWidth = 10;
    }

}

// розничный прайс по фрахту
createPriceSetDocument 'Расценить' =  ACTION (freight) NEWSESSION {
    ADDOBJ basePriceSetDocument;
    FOR p == addedObject() DO {
        SET freightPriceSetDocument(p) <- freight AS freight;
        SET priceInPriceSetDocumentArticle(p, article) <- priceInFreightArticle(freight, article);
        SET RRPPriceSetDocumentArticle(p, article) <- RRPFreightArticle(freight, article);
        SET inArticlePriceSetDocument(p, article) <- inFreightArticle(freight, article);
        FORM priceSetDocument OBJECTS p=addedObject() MODAL;
        IF formResult() == formResult.ok THEN {
            EXEC apply();
        };
    };
} TOOLBAR;

FORM freights 'Расценка фрахтов'

    OBJECTS f = freightPriced
    PROPERTIES(f) READONLY isPriceSetFreight BACKGROUND backgroundPriceSetDocument(f), date, objectClassName, canonicalBrandFreight, dateArrivalFreight,
                           nameRouteFreight, nameExporterFreight, freightGrossWeight
    PROPERTIES(f) FORCE PANEL createPriceSetDocument SHOWIF isPriceSetDocumentFreight(f)

    FILTERGROUP filtersDocument
        FILTER 'Показывать нерасценённые фрахты' 'F11' isPriceSetDocumentFreight(f) DEFAULT
;
