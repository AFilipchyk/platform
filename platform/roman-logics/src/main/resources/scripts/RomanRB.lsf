MODULE RB;

IMPORT BaseLogicsModule;
IMPORT RomanLogicsModule;

//--------------------------------- Сертификаты --------------------------------------------------------------------//
CLASS ABSTRACT certificate 'Сертификат';
CLASS temporalCertificate 'Временный сертификат' : certificate;
CLASS permanentCertificate 'Постоянный сертификат' : certificate;

sidCertificate 'Номер' = DATA STRING[20] (certificate) IN baseGroup;
dateIssueCertificate 'Дата выдачи' = DATA DATE (certificate) IN baseGroup;
dateValidityCertificate 'Действует до' = DATA DATE (certificate) IN baseGroup;

FORM certificate 'Сертификат'
    OBJECTS c=certificate FIXED PANEL
    PROPERTIES(c) sidCertificate, dateIssueCertificate, dateValidityCertificate
    EDIT certificate OBJECT c
;

FORM certificates 'Сертификаты'
    OBJECTS c=certificate
    PROPERTIES(c) READONLY sidCertificate, dateIssueCertificate, dateValidityCertificate
    PROPERTIES(c) ADDFORM, EDITFORM, delete
;

//--------------------------------- Инвойсы -------------------------------------------------------------------------//
CLASS formedInvoice 'Инвойс от STX' : innerInvoice;

freightFormedInvoice 'Фрахт инвойса (ИД)' = DATA freight(formedInvoice) IN idGroup;
freightInnerInvoice 'Фрахт инвойса (ИД)' (innerInvoice) = UNION EXCLUSIVE freightFormedInvoice(innerInvoice),
                                                                          freightDirectInvoice(innerInvoice) IN idGroup;
dateFreightInnerInvoice 'Фрахт инвойса' (innerInvoice) = dateArrivalFreight(freightInnerInvoice(innerInvoice)) IN baseGroup;

importerFormedInvoice 'Импортер инвойса (ИД)' = DATA importer(formedInvoice) IN idGroup;
importerInnerInvoice 'Импортер инвойса (ИД)' (innerInvoice) = UNION EXCLUSIVE importerFormedInvoice(innerInvoice),
                                                                              importerDirectInvoice(innerInvoice) IN idGroup;
nameImporterInnerInvoice 'Импортер инвойса' (innerInvoice) = name(importerInnerInvoice(innerInvoice)) IN baseGroup;

sidFormedInvoice 'Номер инвойса' (formedInvoice) = sidImporterFreight(importerFormedInvoice(formedInvoice),
                                                                      freightFormedInvoice(formedInvoice)) IN baseGroup;

uniqueFormedInvoiceImporterFreight (importer, freight) = GROUP UNIQUE formedInvoice
                                                                   BY importerFormedInvoice(formedInvoice),
                                                                      freightFormedInvoice(formedInvoice)
                                                                WHERE formedInvoice IS formedInvoice;

includeImporterFreight(importer, freight) = quantityProxyImporterFreight(importer, freight) AND freight IS freightArrived;
includeImporterFreight(importer, freight) => uniqueFormedInvoiceImporterFreight(importer, freight) RESOLVE TRUE;

quantityFormedInvoiceSku 'Кол-во в инвойсе' (formedInvoice, sku) = quantityProxyImporterFreightSku(importerFormedInvoice(formedInvoice),
                                                                                                   freightFormedInvoice(formedInvoice),
                                                                                                   sku);

quantityInnerInvoiceSku 'Кол-во в инвойсе' (innerInvoice, sku) = UNION EXCLUSIVE quantityDocumentSku(innerInvoice, sku),
                                                                                 quantityFormedInvoiceSku(innerInvoice, sku);

quantityFormedInvoice 'Кол-во в инвойсе' (innerInvoice) = GROUP SUM quantityInnerInvoiceSku(innerInvoice, sku)
                                                                 BY innerInvoice IN baseGroup;


//--------------------------------- Декларации ----------------------------------------------------------------------//
CLASS declaration 'Таможенная декларация' : transaction;
CLASS preparedDeclaration 'Подготовленная декларация' : declaration;
CLASS registeredDeclaration 'Зарегистрованная декларация' : preparedDeclaration;
CLASS declarationDetail 'Позиция декларации';

CLASS correction 'КТС' : transaction;

sidDeclaration 'Номер' = DATA STRING[10] (declaration) IN baseGroup;
beginDeclaration 'Начало обработки' = DATA TIME (declaration) IN baseGroup;
endDeclaration 'Конец обработки' = DATA TIME (declaration) IN baseGroup;

importerDeclaration 'Импортер (ИД)' = DATA importer (declaration) IN idGroup;
nameImporterDeclaration 'Импортёр' = name(importerDeclaration(declaration)) IN baseGroup;

dateCorrectionDeclaration 'Дата оплаты КТС' = DATA DATE (declaration) IN baseGroup;

declarationInnerInvoice 'Декларация инвойса (ИД)' = DATA declaration(innerInvoice) IN idGroup;
sidDeclarationInnerInvoice 'Декларация инвойса' (innerInvoice) = sidDeclaration(declarationInnerInvoice(innerInvoice)) IN baseGroup;

CONSTRAINT CHECKED importerDeclaration(declarationInnerInvoice(innerInvoice)) != importerInnerInvoice(innerInvoice)
    MESSAGE 'Инвойс для другого импортёра';

innerInvoiceDeclarationSku 'Инвойс для декларации' (declaration, sku) = GROUP MAX innerInvoice IF quantityInnerInvoiceSku(innerInvoice, sku)
                                                                               BY declarationInnerInvoice(innerInvoice), sku;

quantityDeclarationSku 'Кол-во в декларации' (declaration, sku) = GROUP SUM quantityInnerInvoiceSku(innerInvoice, sku)
                                                                         BY declarationInnerInvoice(innerInvoice), sku IN baseGroup;

//quantityDirectDeclarationSku 'Кол-во в декларации (напр.)' (declaration, sku) = GROUP SUM quantityDocumentSku(innerInvoice, sku)
//                                                                                       BY declarationInnerInvoice(innerInvoice), sku IN baseGroup;

//quantityDeclarationSku 'Кол-во в декларации' (declaration, sku) = quantityFormedDeclarationSku(declaration, sku) +
//                                                                  quantityDirectDeclarationSku(declaration, sku) IN baseGroup;

declarationDeclarationDetail 'Декларация позиции' = DATA declaration(declarationDetail) IN idGroup;
dateDeclarationDetail 'Дата декларации' (declarationDetail) = date(declarationDeclarationDetail(declarationDetail)) IN baseGroup;

numberDeclarationDetail 'Номер строки' (declarationDetail) =
        PARTITION SUM 1 IF declarationDetail IS declarationDetail BY declarationDeclarationDetail(declarationDetail)
        ORDER declarationDetail;

skuDeclarationDetail 'Товар позиции (ИД)' = DATA sku(declarationDetail) IN idGroup;
barcodeSkuDeclarationDetail 'Штрих-код' = barcode(skuDeclarationDetail(declarationDetail)) IN baseGroup;

inDeclarationDeclarationDetail (declaration, declarationDetail) = declarationDeclarationDetail(declarationDetail)==declaration;

uniqueDeclarationDetailDeclarationSku (declaration, sku) = GROUP UNIQUE declarationDetail
                                                                     BY declarationDeclarationDetail(declarationDetail),
                                                                        skuDeclarationDetail(declarationDetail)
                                                                  WHERE declarationDetail IS declarationDetail;

quantityDeclarationSku(declaration, sku) => uniqueDeclarationDetailDeclarationSku(declaration, sku) RESOLVE TRUE;
//uniqueDeclarationDetailDeclarationSku(declaration, sku) => quantityDeclarationSku(declaration, sku) RESOLVE FALSE;

quantityDeclarationDetail 'Кол-во' (declarationDetail) = quantityDeclarationSku(declarationDeclarationDetail(declarationDetail),
                                                                                skuDeclarationDetail(declarationDetail)
                                                                               ) IN baseGroup;

freightDeclarationDetail 'Фрахт позиции (ИД)' (declarationDetail) = freightInnerInvoice(innerInvoiceDeclarationSku(
                                                                                declarationDeclarationDetail(declarationDetail),
                                                                                skuDeclarationDetail(declarationDetail))) IN idGroup;

importerDeclarationDetail 'Импортёр позиции (ИД)' (declarationDetail) = importerInnerInvoice(innerInvoiceDeclarationSku(
                                                                                declarationDeclarationDetail(declarationDetail),
                                                                                skuDeclarationDetail(declarationDetail))) IN idGroup;

articleDeclarationDetail 'Артикул товара (ИД)' (declarationDetail) = articleSku(skuDeclarationDetail(declarationDetail)) IN idGroup;
sidArticleDeclarationDetail 'Артикул товара' (declarationDetail) = sidArticle(articleDeclarationDetail(declarationDetail));
nameCategoryArticleDeclarationDetail 'Ном. группа товара' (declarationDetail) = nameCategoryArticle(articleDeclarationDetail(declarationDetail));

netWeightDeclarationDetail 'Вес товара' (declarationDetail) = netWeightFreightSku(freightDeclarationDetail(declarationDetail),
                                                                                  skuDeclarationDetail(declarationDetail));

mainCompositionDeclarationDetail 'Состав товара' (declarationDetail) = mainCompositionFreightSku(freightDeclarationDetail(declarationDetail),
                                                                                                 skuDeclarationDetail(declarationDetail));

// Для таможенного оформления
countryDeclarationDetail 'Страна товара (ИД)' (declarationDetail) = countryOfOriginFreightSku(freightDeclarationDetail(declarationDetail),
                                                                                              skuDeclarationDetail(declarationDetail)) IN idGroup;

nameCountryDeclarationDetail 'Страна товара' (declarationDetail) = name(countryDeclarationDetail(declarationDetail));

customCategory10InvoicedDeclarationDetail 'ТН ВЭД товара (ИД)' (declarationDetail) = customCategory10FreightSku(freightDeclarationDetail(declarationDetail),
                                                                                                                skuDeclarationDetail(declarationDetail)) IN idGroup;

customCategory10DataDeclarationDetail 'ТН ВЭД товара (ИД)' = DATA customCategory10(declarationDetail) IN idGroup;

customCategory10DeclarationDetail 'ТН ВЭД товара (ИД)' (declarationDetail) = UNION OVERRIDE customCategory10InvoicedDeclarationDetail(declarationDetail),
                                                                                            customCategory10DataDeclarationDetail(declarationDetail) IN idGroup;

sidCustomCategory10DeclarationDetail 'ТН ВЭД товара' (declarationDetail) = sidCustomCategory10(customCategory10DeclarationDetail(declarationDetail));

// сертификация
certificatedDeclarationDetail 'Необходимость сертификации' (declarationDetail) = certificatedCustomCategory10(customCategory10DeclarationDetail(declarationDetail)) IN baseGroup;

quantityCertificatedDeclarationDetail 'Кол-во для экспертизы' = DATA DOUBLE(declarationDetail);

certificateDeclarationDetail 'Сертификат партии (ИД)' = DATA certificate(declarationDetail) IN idGroup;
temporalCertificateDeclarationDetail 'Временный сертификат партии (ИД)' = DATA temporalCertificate(declarationDetail) IN idGroup;
permanentCertificateDeclarationDetail 'Постоянный сертификат партии (ИД)' = DATA temporalCertificate(declarationDetail) IN idGroup;

sidTemporalCertificateDeclarationDetail 'Временный сертификат партии' (declarationDetail) = sidCertificate(temporalCertificateDeclarationDetail(declarationDetail)) IN baseGroup;
sidPermanentCertificateDeclarationDetail 'Постоянный сертификат партии' (declarationDetail) = sidCertificate(permanentCertificateDeclarationDetail(declarationDetail)) IN baseGroup;

sidCertificateDeclarationDetail 'Сертификат партии' (declarationDetail) = sidCertificate(certificateDeclarationDetail(declarationDetail)) IN baseGroup;

isCertificateDeclarationDetail 'Отсутствие сертификата' (declarationDetail) = certificatedDeclarationDetail(declarationDetail) AND
                                                                              NOT certificateDeclarationDetail(declarationDetail);

isTemporalCertificateDeclarationDetail 'Отсутствие временного сертификата' (declarationDetail) = certificatedDeclarationDetail(declarationDetail) AND
                                                                                                 NOT temporalCertificateDeclarationDetail(declarationDetail);

quantityNoCertificateDeclaration 'Кол-во без сертификатов' (declaration) = GROUP SUM quantityDeclarationDetail(declarationDetail)
                                                                                  IF isCertificateDeclarationDetail(declarationDetail)
                                                                                  BY declarationDeclarationDetail(declarationDetail);

CONSTRAINT quantityNoCertificateDeclaration(declaration)>0 AND endDeclaration(declaration)
   MESSAGE 'Не у всех товаров требующих сертификации заданы сертификаты';

// Для таможенных платежей
rateExchangeDeclaration 'Курс обмена' (declaration) = nearestRateExchange(typeExchangePayCustom(),
                                                                          currencyTypeExchange(typeExchangeSTX()),
                                                                          declaration);

rateExchangeDeclarationDetail 'Курс обмена' (declarationDetail) = rateExchangeDeclaration(declarationDeclarationDetail(declarationDetail)) IN baseGroup;

priceDeclarationDetail 'Цена товара' (declarationDetail) = priceFullImporterFreightSku(importerDeclarationDetail(declarationDetail),
                                                                                       freightDeclarationDetail(declarationDetail),
                                                                                       skuDeclarationDetail(declarationDetail));

priceRateDeclarationDetail 'Цена товара (конверт.)' (declarationDetail) = round0(priceDeclarationDetail(declarationDetail) *
                                                                                 rateExchangeDeclarationDetail(declarationDetail)) IN baseGroup;

// пошлины
dutyDeclarationDetail 'Пошлина (расч.)' (declarationDetail) = UNION MAX
                      netWeightDeclarationDetail(declarationDetail) * dutySumCustomCategory10TypeDuty(customCategory10DeclarationDetail(declarationDetail), typeDutyDuty()),
                      priceDeclarationDetail(declarationDetail) * (dutyPercentCustomCategory10TypeDuty(customCategory10DeclarationDetail(declarationDetail), typeDutyDuty())/100);

dutyDataDeclarationDetail 'Пошлина товара' = DATA DOUBLE(declarationDetail) IN baseGroup;
dutyDataDeclarationDetail (declarationDetail) <- dutyDeclarationDetail(declarationDetail) ON CHANGE dateDeclarationDetail(declarationDetail);

rateDutyDeclarationDetail 'Пошлина товара (конверт.)' (declarationDetail) = round0(dutyDataDeclarationDetail(declarationDetail) *
                                                                                   rateExchangeDeclarationDetail(declarationDetail)) IN baseGroup;

dutyDeclaration 'Сумма пошлин' (declaration) = GROUP SUM rateDutyDeclarationDetail(declarationDetail) * quantityDeclarationDetail(declarationDetail)
                                                      BY declarationDeclarationDetail(declarationDetail) IN baseGroup;

// НДС
priceDutyDeclarationDetail 'Стоимость с пошлиной' (declarationDetail) = priceDeclarationDetail(declarationDetail) +
                                                                        dutyDataDeclarationDetail(declarationDetail);

NDSPercentOriginDeclarationDetail 'НДС (%)' (declarationDetail) = dutyPercentCustomCategory10TypeDuty(customCategory10DeclarationDetail(declarationDetail), typeDutyNDS());
NDSPercentCustomDeclarationDetail 'НДС (%)' (declarationDetail) = NDSPercentCustom() AND declarationDetail IS declarationDetail;
NDSPercentDeclarationDetail 'НДС (%)' (declarationDetail) = UNION OVERRIDE NDSPercentCustomDeclarationDetail(declarationDetail),
                                                                           NDSPercentOriginDeclarationDetail(declarationDetail);

NDSDeclarationDetail 'НДС товара (расч.)' (declarationDetail) = round2(priceDutyDeclarationDetail(declarationDetail) *
                                                                       NDSPercentDeclarationDetail(declarationDetail)/100);

NDSDataDeclarationDetail 'НДС товара' = DATA DOUBLE(declarationDetail) IN baseGroup;
NDSDataDeclarationDetail (declarationDetail) <- NDSDeclarationDetail(declarationDetail) ON CHANGE dateDeclarationDetail(declarationDetail);

rateNDSDeclarationDetail 'НДС товара (конверт.)' (declarationDetail) = round0(NDSDataDeclarationDetail(declarationDetail) *
                                                                              rateExchangeDeclarationDetail(declarationDetail)) IN baseGroup;

NDSDeclaration 'НДС декларации' (declaration) = GROUP SUM rateNDSDeclarationDetail(declarationDetail) * quantityDeclarationDetail(declarationDetail)
                                                       BY declarationDeclarationDetail(declarationDetail) IN baseGroup;

// за оформление
sumRegistrationDeclarationDetail 'За оформление' (declarationDetail) = sumRegistrationFreightSku(freightDeclarationDetail(declarationDetail),
                                                                                                 skuDeclarationDetail(declarationDetail)) IN baseGroup;

sumRegistrationDeclaration 'За оформление (расч.)' (declaration) = GROUP MAX sumRegistrationDeclarationDetail(declarationDetail)
                                                                          BY declarationDeclarationDetail(declarationDetail) IN baseGroup;

sumRegistrationDataDeclaration 'За оформление' = DATA DOUBLE(declaration) IN baseGroup;
sumRegistrationDataDeclaration (declaration) <- sumRegistrationDeclaration(declaration) ON CHANGE date(declaration);

rateSumRegistrationDeclaration 'За оформление (конверт.)' (declaration) = round0(sumRegistrationDataDeclaration(declaration) *
                                                                      rateExchangeDeclaration(declaration)) IN baseGroup;

totalCustomSum 'Сумма платежей' (declaration) = dutyDeclaration(declaration) + NDSDeclaration(declaration) + rateSumRegistrationDeclaration(declaration) IN baseGroup;

// корректировка таможенной стоимости
declarationCorrection 'Декларация КТС (ИД)' = DATA declaration(correction) IN idGroup;
inDeclarationCorrection (declaration, correction) = declarationCorrection(correction)==declaration;

priceCorrectionDeclarationDetail 'Скорректированная стоимость' = DATA DOUBLE(correction, declarationDetail) IN baseGroup;

correctionPriceDeclarationDetail 'Скорректированная стоимость' (declarationDetail) = GROUP MAX priceCorrectionDeclarationDetail(correction, declarationDetail) BY declarationDetail;

//correctionPriceDeclarationDetail 'Скорректированная стоимость' = DATA DOUBLE(declarationDetail) IN baseGroup;

correctionDutyDeclarationDetail 'Скорректированная пошлина (расч.)' (declarationDetail) = (UNION MAX
                                netWeightDeclarationDetail(declarationDetail) * dutySumCustomCategory10TypeDuty(customCategory10DeclarationDetail(declarationDetail), typeDutyDuty()),
                                correctionPriceDeclarationDetail(declarationDetail) * (dutyPercentCustomCategory10TypeDuty(customCategory10DeclarationDetail(declarationDetail), typeDutyDuty())/100))
                                IF correctionPriceDeclarationDetail(declarationDetail);

correctionDutyDataDeclarationDetail 'Скорректированная пошлина' = DATA DOUBLE(declarationDetail) IN baseGroup;
correctionDutyDataDeclarationDetail(declarationDetail) <- correctionDutyDeclarationDetail(declarationDetail) ON CHANGE dateDeclarationDetail(declarationDetail);

correctionPriceDutyDeclarationDetail 'Стоимость с пошлиной'(declarationDetail) = correctionPriceDeclarationDetail(declarationDetail) +
                                                                                 correctionDutyDataDeclarationDetail(declarationDetail);

correctionNDSDeclarationDetail 'Скорректированный НДС (расч.)' (declarationDetail) = round2(correctionPriceDutyDeclarationDetail(declarationDetail) *
                                                                                            NDSPercentDeclarationDetail(declarationDetail)/100);

correctionNDSDataDeclarationDetail 'Скорректированный НДС' = DATA DOUBLE(declarationDetail) IN baseGroup;
correctionNDSDataDeclarationDetail(declarationDetail) <- correctionNDSDeclarationDetail(declarationDetail) ON CHANGE dateDeclarationDetail(declarationDetail);

diffDutyDeclarationDetail 'Разница пошлин' (declarationDetail) = correctionDutyDataDeclarationDetail(declarationDetail) - dutyDataDeclarationDetail(declarationDetail)
                                                                 IF correctionPriceDeclarationDetail(declarationDetail);

diffDutyDeclararion 'Разница пошлин' (declaration) = GROUP SUM diffDutyDeclarationDetail(declarationDetail) *
                                                               quantityDeclarationDetail(declarationDetail) *
                                                               rateExchangeDeclarationDetail(declarationDetail)
                                                            BY declarationDeclarationDetail(declarationDetail);

diffNDSDeclarationDetail 'Разница НДС' (declarationDetail) = correctionNDSDataDeclarationDetail(declarationDetail) - NDSDataDeclarationDetail(declarationDetail)
                                                             IF correctionPriceDeclarationDetail(declarationDetail);

diffNDSDeclararion 'Разница НДС' (declaration) = GROUP SUM diffNDSDeclarationDetail(declarationDetail) *
                                                           quantityDeclarationDetail(declarationDetail) *
                                                           rateExchangeDeclarationDetail(declarationDetail)
                                                        BY declarationDeclarationDetail(declarationDetail);

diffDeclaration 'Сумма доп. платежей' (declaration) = diffDutyDeclararion(declaration) + diffNDSDeclararion(declaration);

// учёт расходов на сертификацию
declarationPriceDeclarationDetail 'Cтоимость' (declarationDetail) = UNION OVERRIDE priceDeclarationDetail(declarationDetail),
                                                                                   correctionPriceDeclarationDetail(declarationDetail) IN baseGroup;

expenseCertificateDeclaration 'Расходы на сертификацию' (declaration) = GROUP SUM declarationPriceDeclarationDetail(declarationDetail) *
                                                                                  quantityCertificatedDeclarationDetail(declarationDetail)
                                                                               IF certificatedDeclarationDetail(declarationDetail)
                                                                               BY declarationDeclarationDetail(declarationDetail) IN baseGroup;

FORM declaration 'Декларация'
    OBJECTS d=declaration FIXED PANEL
    PROPERTIES(d) objectClassName, sidDeclaration, date, beginDeclaration, endDeclaration, rateExchangeDeclaration, nameImporterDeclaration,
                  dateCorrectionDeclaration, sumRegistrationDataDeclaration, rateSumRegistrationDeclaration,
                  dutyDeclaration, NDSDeclaration, totalCustomSum, diffDutyDeclararion,
                  diffNDSDeclararion, diffDeclaration, quantityNoCertificateDeclaration, expenseCertificateDeclaration

    OBJECTS dd=declarationDetail
    PROPERTIES (dd) numberDeclarationDetail, barcodeSkuDeclarationDetail, sidArticleDeclarationDetail, mainCompositionDeclarationDetail,
                    nameCountryDeclarationDetail, sidCustomCategory10DeclarationDetail, netWeightDeclarationDetail,
                    quantityDeclarationDetail, priceDeclarationDetail, dutyDeclarationDetail, dutyDataDeclarationDetail,
                    rateDutyDeclarationDetail, NDSDeclarationDetail, NDSDataDeclarationDetail, rateNDSDeclarationDetail,
                    certificatedDeclarationDetail, quantityCertificatedDeclarationDetail, sidTemporalCertificateDeclarationDetail,
                    sidPermanentCertificateDeclarationDetail, correctionPriceDeclarationDetail, correctionDutyDeclarationDetail,
                    correctionDutyDataDeclarationDetail, diffDutyDeclarationDetail, ADDOBJ, delete

    FILTERS inDeclarationDeclarationDetail(d, dd)
    EDIT declaration OBJECT d
;

FORM declarations 'Декларации'
    OBJECTS d=declaration
    PROPERTIES(d) READONLY objectClassName, sidDeclaration, date, beginDeclaration, endDeclaration, rateExchangeDeclaration, nameImporterDeclaration,
                           dateCorrectionDeclaration, sumRegistrationDataDeclaration, rateSumRegistrationDeclaration,
                           dutyDeclaration, NDSDeclaration, totalCustomSum, diffDutyDeclararion, diffNDSDeclararion, diffDeclaration,
                           quantityNoCertificateDeclaration, expenseCertificateDeclaration
    PROPERTIES(d) ADDFORM, EDITFORM, delete

    OBJECTS dd=declarationDetail
    PROPERTIES (dd) numberDeclarationDetail, barcodeSkuDeclarationDetail, sidArticleDeclarationDetail, mainCompositionDeclarationDetail,
                    nameCountryDeclarationDetail, sidCustomCategory10DeclarationDetail, netWeightDeclarationDetail,
                    quantityDeclarationDetail, priceDeclarationDetail, dutyDeclarationDetail, dutyDataDeclarationDetail,
                    rateDutyDeclarationDetail, NDSDeclarationDetail, NDSDataDeclarationDetail, rateNDSDeclarationDetail,
                    certificatedDeclarationDetail, quantityCertificatedDeclarationDetail,
                    sidTemporalCertificateDeclarationDetail HIGHLIGHTIF isTemporalCertificateDeclarationDetail(dd),
                    sidPermanentCertificateDeclarationDetail, correctionPriceDeclarationDetail, correctionDutyDeclarationDetail,
                    correctionDutyDataDeclarationDetail, diffDutyDeclarationDetail
    FILTERS inDeclarationDeclarationDetail(d, dd)

    OBJECTS c=correction
    PROPERTIES(c) date, ADDOBJ, delete
    PROPERTIES (c, dd) priceCorrectionDeclarationDetail
    FILTERS inDeclarationCorrection(d, c)

;

DESIGN declarations FROM DEFAULT {
    d.grid {
        fillVertical = 0.5;
    }

    c.grid {
        fillVertical = 0.4;
    }
}


FORM innerInvoices 'Инвойсы'
    OBJECTS i=innerInvoice
    PROPERTIES(i) READONLY sidFormedInvoice, nameImporterInnerInvoice, dateFreightInnerInvoice
    PROPERTIES(i) sidDeclarationInnerInvoice, delete

    OBJECTS s=sku
    PROPERTIES(s) READONLY barcode, sidArticleSku
    PROPERTIES (i, s) quantityInnerInvoiceSku
    FILTERS quantityInnerInvoiceSku(i, s)
;


NAVIGATOR {

    customs 'Для таможни' {
        ADD certificate;
        ADD certificates;
        ADD declaration;
        ADD declarations;
        ADD innerInvoices;

     }
}