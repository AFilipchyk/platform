MODULE RB;

REQUIRE System,

        Utils,
        Stock,
        Barcode,
        Numerator,
        Document,
        Historizable,
        Consignment,
        Declaration,
        WHfromCS,
        WHfromRF,
        Contract,
        Transfer,
        Sale,
        Return,
        Move,
        WholesalePrice,
        RetailPrice,
        RetailCRM,
        POS,
        PriceChange,
        Terminal,
        UserPriceChange,
        WHtoLegalEntity,
        InnerOrder,
        PriceInterval,
        WriteOff,
        Customer,
        Inventory,
        Surplus,
        DisparityBatch,
        RomanContractLedger,
        PriceChangeDiscount,
        CustomCategory,
        RomanLogicsModule;

PRIORITY RomanLogicsModule, Utils, Stock, Store;

EXTEND FORM stores

    PROPERTIES(s) READONLY sidDestination FORCE GRID

    OBJECTS su=supplier
    PROPERTIES(su)    READONLY name
    PROPERTIES(s, su) READONLY sidDestinationSupplier, relationStoreSupplier
    FILTERGROUP filtersDocument
        FILTER 'Связь маг./пост.' 'F11' relationStoreSupplier(s, su) DEFAULT
;

EXTEND DESIGN stores {
    main {
        preferredSize = (1024, 768);

        firstCase {
            NEW supDep {
                type = TABBED;
                ADD d.box;
                ADD su.box;
            }
        }
    }
}

EXTEND FORM store

    PROPERTIES(s) sidDestination

    OBJECTS su=supplier
    PROPERTIES(su)    READONLY name
    PROPERTIES(s, su) sidDestinationSupplier, relationStoreSupplier
    FILTERGROUP filtersDocument
        FILTER 'Связь маг./пост.' 'F11' relationStoreSupplier(s, su) DEFAULT
;

DESIGN store FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        childConstraints = TO THE BOTTOM;
        ADD s.box {
            childConstraints = TO THE RIGHTBOTTOM;
        }
        NEW row1 {
            childConstraints = TO THE RIGHT;
            ADD d.box;
            ADD su.box;
        }
        ADD functions.box;
    }
}

NAVIGATOR {
    itemClassifier {
        ADD categories;
        ADD UOMs;
    }

    contragentClassifier {
        ADD companies;
        ADD employees;
        ADD banks;
    }

    taxClassifier {
        ADD taxes;
    }

    purchase{
        NEW accounting 'Взаиморасчеты'{
            ADD contractSkus;
            ADD contractLedger;
            ADD payments;
            ADD commercialInvoices;
            ADD writeOutContractLedger;
        }

    }

    customs {
        customClassifier {
            ADD customStores;
            ADD certificates;
            ADD customsZones;
            ADD customCategoryZones;
            ADD customCategoryOrigins;
        }

        NEW customDocument 'Документы' TO leftToolbar {
            ADD declarations;
            ADD CStoWHs;
        }

        NEW customReport 'Сводная информация' TO leftToolbar {
            ADD innerInvoices;
        }
    }

    prices {
        NEW pricesDocument 'Документы' {
            NEW retailPriceBase 'Розничное ценообразование'{
                ADD coefficientRetails;
                ADD priceIntervals;
                ADD priceSetDocuments;
                ADD freights;
            }

            NEW wholesalePrice 'Оптовое ценообразование' {
                ADD wholesalePriceDocuments;
                ADD priceDeclaration;
            }

        }
    }

    stock {
        stockClassifier {
            ADD warehouses;
        }
        NEW inventory 'Инвентаризация' {
            ADD inventories;
            ADD inventoryCommittees;
        }
        NEW retirement 'Списание' {
            ADD writeOffs;
            ADD writeOffCommittees;
        }
    }

    logistics {
        NEW transfers 'Трансферы' {
            ADD innerOrders;
            ADD orderPickings;
            ADD innerOrderRecs;
        }

        NEW logisticsIncome 'Приходы' {
            ADD WHfromCSIs;
            ADD WHfromRFs;
            ADD transferIns;
            ADD saleIns;
            ADD returnIns;
            ADD moveIns;
        }

        NEW logisticsOutcome 'Расходы' {
            ADD transferOuts;
            ADD saleOuts;
            ADD returnOuts;
            ADD moveOuts;
            ADD invoiceWHOuts;
        }

        NEW logisticsAggregations 'Сводная информация' {
            ADD stockCost;
            ADD stockBalance;
            NEW disparityDocument 'Пересорт' {
                ADD disparityBatches;
                ADD disparityBatchAs;
                ADD surplusOuts;
            }
        }
    }

    retailClassifier {
        ADD gendersDialog;
        ADD stores;
        ADD groupsCashRegister;
    }

    retail {
        NEW retailPriceDocument 'Документы расценки' {
            ADD inputListRegisters;
            ADD userPriceChanges;
            ADD priceChangeDocuments;
        }
        NEW POSSales 'Розничные продажи' {
            ADD zReports;
            ADD operationCashRegister;
            ADD POS;
        }
        NEW retailCRM 'CRM' {
            ADD clients;
            ADD discountCards;
            ADD promotionGroups;
            ADD promotions;
        }
        NEW retailAggregations 'Сводная информация' {
            ADD sumAccountDocumentLedger;
        }
    }
    wholesaleTrade {
        NEW tradeClassifier  'Справочники' TO leftToolbar {
            ADD customers;
        }
        NEW tradeDocument 'Отгрузки' TO leftToolbar {
            ADD invoiceWHOuts;
        }
    }

    printForms{
        ADD consignmentVerticalA;
        ADD consignmentHorizontalA;
        ADD consignmentVerticalB;
        ADD consignmentHorizontalB;
        ADD consignmentAttach;
        ADD consignmentSimpleHorizontal;
        ADD consignmentSimpleVertical;
        ADD consignmentSimpleAttach;
        ADD consignment;
        ADD priceArticlePriceSetDocumentPrint;
        ADD priceSkuPriceSetDocumentPrint;
        ADD writeOffPrint;
        ADD orderPickingPrint;
    }
}
