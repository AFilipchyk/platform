MODULE RB;

IMPORT BaseLogicsModule;
IMPORT RomanLogicsModule;

IMPORT Utils;
IMPORT Stock;
IMPORT Numerator;
IMPORT Document;

maxDateTime 'Максимальная дата' = DATA DATETIME();

META metaCodePriceBaseDiscount(document, caption)

    priceData###document##Article caption = DATA NUMERIC[14,2](document, article) IN baseGroup;

    order###document = LIST(dateTimePriceChangeDocument(document), document) PERSISTENT;

    concat###document##ArticleDateTime (article, dateTime) = GROUP MAX order###document(document) AND
                                                                       priceData###document##Article(document, article) AND
                                                                       dateTimePriceChangeDocument(document) < (dateTime AS DATETIME) AND
                                                                       dateTimeToPriceChangeDocument(document) > (dateTime AS DATETIME)
                                                                    BY article, dateTime;

    document##ArticleDateTime (article, dateTime) = concat###document##ArticleDateTime(article, dateTime)[2];

    price###document##ArticleDateTime(article, dateTime) = priceData###document##Article(document##ArticleDateTime(article, dateTime), article);
    priceIn###document##ArticleDateTime(article, dateTime) = priceInPriceChangeDocumentArticle(document##ArticleDateTime(article, dateTime), article);
    RRP###document##ArticleDateTime(article, dateTime) = RRPPriceChangeDocumentArticle(document##ArticleDateTime(article, dateTime), article);

    priceB###document##Article 'Предыдущая цена'(document, article) = price###document##ArticleDateTime(article, dateTimePriceChangeDocument(document)) MINCHARWIDTH 15;
    priceInB###document##Article 'Предыдущая поставщика'(document, article) = priceIn###document##ArticleDateTime(article, dateTimePriceChangeDocument(document));
    RRPB###document##Article 'Предыдущая рекомендуемая'(document, article) = RRP###document##ArticleDateTime(article, dateTimePriceChangeDocument(document));

END

//--------------------------------- Сертификаты --------------------------------------------------------------------//
CLASS ABSTRACT certificate 'Сертификат';
CLASS temporalCertificate 'Временный сертификат' : certificate;
CLASS permanentCertificate 'Постоянный сертификат' : certificate;

TABLE certificate (certificate);

sidCertificate 'Номер' = DATA STRING[20] (certificate) IN baseGroup AGGPROP;
dateIssueCertificate 'Дата выдачи' = DATA DATE (certificate) IN baseGroup;
dateValidityCertificate 'Действует до' = DATA DATE (certificate) IN baseGroup;

FORM certificate 'Сертификат'
    OBJECTS c=certificate FIXED PANEL
    PROPERTIES(c) sidCertificate, objectClassName, dateIssueCertificate, dateValidityCertificate
    EDIT certificate OBJECT c
;

FORM certificates 'Сертификаты'
    OBJECTS c=certificate
    PROPERTIES(c) READONLY sidCertificate, objectClassName, dateIssueCertificate, dateValidityCertificate
    PROPERTIES(c) ADDFORM, EDITFORM, delete
;

//--------------------------------- Инвойсы -------------------------------------------------------------------------//
CLASS formedInvoice 'Инвойс от STX' : innerInvoice;

TABLE innerInvoice (innerInvoice);

includeImporterFreight(importer, freight) = quantityProxyImporterFreight(importer, freight) AND freight IS freightArrived;

@defineAggregationDouble(importer, freight, formedInvoice, includeImporterFreight);

freightInnerInvoice 'Фрахт инвойса (ИД)' (innerInvoice) = UNION EXCLUSIVE freightFormedInvoice(innerInvoice),
                                                                          freightDirectInvoice(innerInvoice) IN idGroup;

dateFreightInnerInvoice 'Дата инвойса' (formedInvoice) = dateArrivalFreight(freightInnerInvoice(formedInvoice)) IN baseGroup;

freightArrivedInnerInvoice 'Прибыл фрахт инвойса' (innerInvoice) = freightInnerInvoice(innerInvoice) IS freightArrived;

customStoreInnerInvoice 'СВХ (ИД)' (innerInvoice) = customStoreFreight(freightInnerInvoice(innerInvoice)) IN idGroup;
nameCustomStoreInnerInvoice 'СВХ' (innerInvoice) = name(customStoreInnerInvoice(innerInvoice)) IN baseGroup;

importerInnerInvoice 'Импортер инвойса (ИД)' (innerInvoice) = UNION EXCLUSIVE importerFormedInvoice(innerInvoice),
                                                                              importerDirectInvoice(innerInvoice) IN idGroup;
nameImporterInnerInvoice 'Импортер инвойса' (innerInvoice) = name(importerInnerInvoice(innerInvoice)) IN baseGroup;

sidFormedInvoice 'Номер инвойса' (formedInvoice) = sidImporterFreight(importerFormedInvoice(formedInvoice),
                                                                      freightFormedInvoice(formedInvoice)) IN baseGroup;

sidDirectInvoice = sidDocument(innerInvoice) AND innerInvoice IS directInvoice;

sidInnerInvoice 'Номер инвойса' (innerInvoice) = UNION EXCLUSIVE sidDirectInvoice(innerInvoice), sidFormedInvoice(innerInvoice) IN baseGroup;

dateFormedInvoice 'Дата инвойса' (formedInvoice) = dateImporterFreight(importerInnerInvoice(formedInvoice),
                                                                       freightInnerInvoice(formedInvoice)) IN baseGroup;

dateDirectInvoice = date(innerInvoice) AND innerInvoice IS directInvoice;

dateInnerInvoice 'Дата инвойса' (innerInvoice) = UNION EXCLUSIVE dateDirectInvoice(innerInvoice), dateFormedInvoice(innerInvoice) IN baseGroup;

contractFormedInvoice 'Договор инвойса (ИД)' (formedInvoice) = contractImporterFreight(importerFormedInvoice(formedInvoice),
                                                                                       freightFormedInvoice(formedInvoice)) IN idGroup;

quantityFormedInvoiceSku 'Кол-во в инвойсе' (formedInvoice, sku) = quantityProxyImporterFreightSku(importerFormedInvoice(formedInvoice),
                                                                                                   freightFormedInvoice(formedInvoice),
                                                                                                   sku);

quantityDirectInvoiceSku = quantityDocumentSku(innerInvoice, sku) AND innerInvoice IS directInvoice;

quantityInnerInvoiceSku 'Кол-во в инвойсе' (innerInvoice, sku) = UNION EXCLUSIVE quantityDirectInvoiceSku(innerInvoice, sku),
                                                                                 quantityFormedInvoiceSku(innerInvoice, sku);

quantityFormedInvoice 'Кол-во в инвойсе' (innerInvoice) = GROUP SUM quantityInnerInvoiceSku(innerInvoice, sku)
                                                                 BY innerInvoice IN baseGroup PERSISTENT;


//--------------------------------- Декларации ----------------------------------------------------------------------//
CLASS declaration 'Таможенная декларация' : transaction;
CLASS preparedDeclaration 'Подготовленная декларация' : declaration;
CLASS registeredDeclaration 'Зарегистрованная декларация' : preparedDeclaration;

CLASS declarationDetail 'Позиция декларации';

TABLE declarationSku (declaration, sku);
TABLE declarationDetail (declarationDetail);
TABLE declarationDetailInnerInvoice (declarationDetail, innerInvoice);


CLASS correction 'КТС' : transaction;

customStoreDeclaration 'СВХ (ИД)' = DATA customStore(declaration) IN idGroup;
nameCustomStoreDeclaration 'СВХ' (declaration) = name(customStoreDeclaration(declaration)) IN baseGroup;

sidDeclaration 'Номер' = DATA STRING[10] (declaration) IN baseGroup MINCHARWIDTH 10;
beginDeclaration 'Начало обработки' = DATA TIME (declaration) IN baseGroup;
endDeclaration 'Конец обработки' = DATA TIME (declaration) IN baseGroup;
exportDeclaration 'Экспортировать декларацию' = ACTION CUSTOM 'roman.actions.ExportDeclarationActionProperty' IN baseGroup;

importerDeclaration 'Импортер (ИД)' = DATA importer (declaration) IN idGroup;
nameImporterDeclaration 'Импортёр' = name(importerDeclaration(declaration)) IN baseGroup;

dateCorrectionDeclaration 'Дата оплаты КТС' = DATA DATE (declaration) IN baseGroup;

declarationInnerInvoice 'Декларация инвойса (ИД)' = DATA declaration(innerInvoice) IN idGroup;
sidDeclarationInnerInvoice 'Декларация инвойса' (innerInvoice) = sidDeclaration(declarationInnerInvoice(innerInvoice)) IN baseGroup;

inDeclarationInnerInvoice 'Инвойс в декларации' (declaration, innerInvoice) = declarationInnerInvoice(innerInvoice) == declaration;

CONSTRAINT declarationInnerInvoice(innerInvoice) AND NOT(freightInnerInvoice(innerInvoice) IS freightArrived)
    MESSAGE 'Инвойс используется в декларации';


forDeclaration(declaration, innerInvoice) = inDeclarationInnerInvoice(declaration, innerInvoice) OR declaration AS declaration AND NOT declarationInnerInvoice(innerInvoice);

CONSTRAINT customStoreDeclaration(declarationInnerInvoice(innerInvoice)) != customStoreInnerInvoice(innerInvoice) CHECKED
    MESSAGE 'Инвойс для другого СВХ';

CONSTRAINT importerDeclaration(declarationInnerInvoice(innerInvoice)) != importerInnerInvoice(innerInvoice) CHECKED
    MESSAGE 'Инвойс для другого импортёра';

innerInvoiceDeclarationSku 'Инвойс для декларации' (declaration, sku) = GROUP MAX innerInvoice IF quantityInnerInvoiceSku(innerInvoice, sku)
                                                                               BY declarationInnerInvoice(innerInvoice), sku PERSISTENT;

quantityDeclarationSku 'Кол-во в декларации' (declaration, sku) = GROUP SUM quantityInnerInvoiceSku(innerInvoice, sku)
                                                                         BY declarationInnerInvoice(innerInvoice), sku IN baseGroup PERSISTENT;

@defineAggregationDouble(declaration, sku, declarationDetail, quantityDeclarationSku);

dateDeclarationDetail 'Дата декларации' (declarationDetail) = date(declarationDeclarationDetail(declarationDetail)) IN baseGroup;

numberDeclarationDetail 'Номер строки' (declarationDetail) =
        PARTITION SUM 1 IF declarationDetail IS declarationDetail BY declarationDeclarationDetail(declarationDetail)
        ORDER declarationDetail;

barcodeSkuDeclarationDetail 'Штрих-код' = barcode(skuDeclarationDetail(declarationDetail)) IN baseGroup;

inDeclarationDeclarationDetail (declaration, declarationDetail) = declarationDeclarationDetail(declarationDetail)==declaration;

quantityDeclarationDetail 'Кол-во' (declarationDetail) = quantityDeclarationSku(declarationDeclarationDetail(declarationDetail),
                                                                                skuDeclarationDetail(declarationDetail)
                                                                               ) IN baseGroup;

freightDeclarationDetail 'Фрахт позиции (ИД)' (declarationDetail) = freightInnerInvoice(innerInvoiceDeclarationSku(
                                                                                declarationDeclarationDetail(declarationDetail),
                                                                                skuDeclarationDetail(declarationDetail))) IN idGroup;

importerDeclarationDetail 'Импортёр позиции (ИД)' (declarationDetail) = importerInnerInvoice(innerInvoiceDeclarationSku(
                                                                                declarationDeclarationDetail(declarationDetail),
                                                                                skuDeclarationDetail(declarationDetail))) IN idGroup;

articleDeclarationDetail 'Артикул товара (ИД)' (declarationDetail) = articleSku(skuDeclarationDetail(declarationDetail)) IN idGroup;
sidArticleDeclarationDetail 'Артикул товара' (declarationDetail) = sidArticle(articleDeclarationDetail(declarationDetail));

categoryArticleDeclarationDetail 'Ном. группа (ИД)' (declarationDetail) = categoryArticle(articleDeclarationDetail(declarationDetail));
nameCategoryArticleDeclarationDetail 'Ном. группа' (declarationDetail) = name(categoryArticleDeclarationDetail(declarationDetail));

brandArticleDeclarationDetail 'Бренд (ИД)' (declarationDetail) = brandSupplierArticle(articleDeclarationDetail(declarationDetail));
nameBrandArticleDeclarationDetail 'Бренд' (declarationDetail) = name(brandArticleDeclarationDetail(declarationDetail));

netWeightDeclarationDetail 'Вес нетто товара' (declarationDetail) = netWeightFreightSku(freightDeclarationDetail(declarationDetail),
                                                                                        skuDeclarationDetail(declarationDetail));

sumNetWeightDeclarationDetail 'Суммарный вес нетто' (declarationDetail) = netWeightDeclarationDetail(declarationDetail) *
                                                                          quantityDeclarationDetail(declarationDetail) IN baseGroup;

grossWeightDeclarationDetail 'Вес брутто товара' (declarationDetail) = grossWeightFreightSku(freightDeclarationDetail(declarationDetail),
                                                                                             skuDeclarationDetail(declarationDetail));

sumGrossWeightDeclarationDetail 'Суммарный вес брутто' (declarationDetail) = grossWeightDeclarationDetail(declarationDetail) *
                                                                             quantityDeclarationDetail(declarationDetail) IN baseGroup;

mainCompositionDeclarationDetail 'Состав товара' (declarationDetail) = mainCompositionFreightSku(freightDeclarationDetail(declarationDetail),
                                                                                                 skuDeclarationDetail(declarationDetail));

// Для таможенного оформления
countryDeclarationDetail 'Страна товара (ИД)' (declarationDetail) = countryOfOriginFreightSku(freightDeclarationDetail(declarationDetail),
                                                                                              skuDeclarationDetail(declarationDetail)) IN idGroup;

nameCountryDeclarationDetail 'Страна товара' (declarationDetail) = name(countryDeclarationDetail(declarationDetail));

customCategory10InvoicedDeclarationDetail 'ТН ВЭД товара (ИД)' (declarationDetail) = customCategory10FreightSku(freightDeclarationDetail(declarationDetail),
                                                                                                                skuDeclarationDetail(declarationDetail)) IN idGroup;

customCategory10DataDeclarationDetail 'ТН ВЭД товара (ИД)' = DATA customCategory10(declarationDetail) IN idGroup;

customCategory10DeclarationDetail 'ТН ВЭД товара (ИД)' (declarationDetail) = UNION OVERRIDE customCategory10InvoicedDeclarationDetail(declarationDetail),
                                                                                            customCategory10DataDeclarationDetail(declarationDetail) IN idGroup PERSISTENT;

sidCustomCategory10DeclarationDetail 'ТН ВЭД товара' (declarationDetail) = sidCustomCategory10(customCategory10DeclarationDetail(declarationDetail));

// сертификация
certificatedDeclarationDetail 'Необходимость сертификации' (declarationDetail) = certificatedCustomCategory10(customCategory10DeclarationDetail(declarationDetail)) IN baseGroup;

quantityCertificatedDeclarationDetail 'Кол-во для экспертизы' = DATA INTEGER(declarationDetail);

certificateDeclarationDetail 'Сертификат партии (ИД)' = DATA certificate(declarationDetail) IN idGroup;
temporalCertificateDeclarationDetail 'Временный сертификат партии (ИД)' = DATA temporalCertificate(declarationDetail) IN idGroup;
permanentCertificateDeclarationDetail 'Постоянный сертификат партии (ИД)' = DATA permanentCertificate(declarationDetail) IN idGroup;

certificatePreparedDeclarationDetail 'Сертификат партии (ИД)' (declarationDetail) = UNION OVERRIDE temporalCertificateDeclarationDetail(declarationDetail),
                                                                                                   permanentCertificateDeclarationDetail(declarationDetail) IN idGroup PERSISTENT;

sidTemporalCertificateDeclarationDetail 'Временный сертификат партии' (declarationDetail) = sidCertificate(temporalCertificateDeclarationDetail(declarationDetail)) IN baseGroup;
sidPermanentCertificateDeclarationDetail 'Постоянный сертификат партии' (declarationDetail) = sidCertificate(permanentCertificateDeclarationDetail(declarationDetail)) IN baseGroup;

sidCertificateDeclarationDetail 'Сертификат партии' (declarationDetail) = sidCertificate(certificateDeclarationDetail(declarationDetail)) IN baseGroup;

isCertificatePreparedDeclarationDetail 'Отсутствие сертификата' (declarationDetail) = certificatedDeclarationDetail(declarationDetail) AND
                                                                                      NOT certificatePreparedDeclarationDetail(declarationDetail);

quantityNoCertificateDeclaration 'Кол-во без сертификатов' (declaration) = GROUP SUM quantityDeclarationDetail(declarationDetail)
                                                                                  IF isCertificatePreparedDeclarationDetail(declarationDetail)
                                                                                  BY declarationDeclarationDetail(declarationDetail) PERSISTENT;

//CONSTRAINT quantityNoCertificateDeclaration(declaration)>0 AND declaration IS preparedDeclaration
//   MESSAGE 'Не у всех товаров требующих сертификации заданы сертификаты';

// Для таможенных платежей
rateExchangeDeclaration 'Курс обмена' (declaration) = nearestRateExchange(typeExchangePayCustom(),
                                                                          currencyTypeExchange(typeExchangeSTX()),
                                                                          declaration);

rateExchangeDeclarationDetail 'Курс обмена' (declarationDetail) = rateExchangeDeclaration(declarationDeclarationDetail(declarationDetail)) IN baseGroup;

priceDeclarationDetail 'Цена товара (БУ)' (declarationDetail) = priceFullImporterFreightSku(importerDeclarationDetail(declarationDetail),
                                                                                            freightDeclarationDetail(declarationDetail),
                                                                                            skuDeclarationDetail(declarationDetail));

priceManagerialDeclarationDetail 'Цена товара (УУ)' (declarationDetail) = priceInFullImporterFreightSku(importerDeclarationDetail(declarationDetail),
                                                                                                        freightDeclarationDetail(declarationDetail),
                                                                                                        skuDeclarationDetail(declarationDetail));

priceRateDeclarationDetail 'Цена товара (конверт.)' (declarationDetail) = round0(priceDeclarationDetail(declarationDetail) *
                                                                                 rateExchangeDeclarationDetail(declarationDetail)) IN baseGroup PERSISTENT;

// пошлины
dutyDeclarationDetail 'Пошлина (расч.)' (declarationDetail) = UNION MAX
                      netWeightDeclarationDetail(declarationDetail) * dutySumCustomCategory10TypeDuty(customCategory10DeclarationDetail(declarationDetail), typeDutyDuty()),
                      priceDeclarationDetail(declarationDetail) * (dutyPercentCustomCategory10TypeDuty(customCategory10DeclarationDetail(declarationDetail), typeDutyDuty())/100) PERSISTENT;

dutyDataDeclarationDetail 'Пошлина товара' = DATA NUMERIC[14,2](declarationDetail) IN baseGroup;
dutyDataDeclarationDetail (declarationDetail) <- dutyDeclarationDetail(declarationDetail) WHEN ASSIGNED(declarationDeclarationDetail(declarationDetail) IS preparedDeclaration);   //dateDeclarationDetail(declarationDetail);

rateDutyDeclarationDetail 'Пошлина товара (конверт.)' (declarationDetail) = round0(dutyDataDeclarationDetail(declarationDetail) *
                                                                                   rateExchangeDeclarationDetail(declarationDetail)) IN baseGroup PERSISTENT;

dutyDeclaration 'Сумма пошлин' (declaration) = GROUP SUM rateDutyDeclarationDetail(declarationDetail) * quantityDeclarationDetail(declarationDetail)
                                                      BY declarationDeclarationDetail(declarationDetail) IN baseGroup PERSISTENT;

// НДС
priceDutyDeclarationDetail 'Стоимость с пошлиной' (declarationDetail) = UNION SUM priceDeclarationDetail(declarationDetail),
                                                                                  dutyDataDeclarationDetail(declarationDetail);

NDSPercentOriginDeclarationDetail 'НДС (%)' (declarationDetail) = dutyPercentCustomCategory10TypeDuty(customCategory10DeclarationDetail(declarationDetail), typeDutyNDS());
NDSPercentCustomDeclarationDetail 'НДС (%)' (declarationDetail) = NDSPercentCustom() AND declarationDetail IS declarationDetail;
NDSPercentDeclarationDetail 'НДС (%)' (declarationDetail) = UNION OVERRIDE NDSPercentCustomDeclarationDetail(declarationDetail),
                                                                           NDSPercentOriginDeclarationDetail(declarationDetail);

NDSDeclarationDetail 'НДС товара (расч.)' (declarationDetail) = round2(priceDutyDeclarationDetail(declarationDetail) *
                                                                       NDSPercentDeclarationDetail(declarationDetail)/100) PERSISTENT;

NDSDataDeclarationDetail 'НДС товара' = DATA NUMERIC[14,2](declarationDetail) IN baseGroup;
NDSDataDeclarationDetail (declarationDetail) <- NDSDeclarationDetail(declarationDetail) WHEN ASSIGNED(declarationDeclarationDetail(declarationDetail) IS preparedDeclaration);

rateNDSDeclarationDetail 'НДС товара (конверт.)' (declarationDetail) = round0(NDSDataDeclarationDetail(declarationDetail) *
                                                                              rateExchangeDeclarationDetail(declarationDetail)) IN baseGroup PERSISTENT;

NDSDeclaration 'НДС декларации' (declaration) = GROUP SUM rateNDSDeclarationDetail(declarationDetail) * quantityDeclarationDetail(declarationDetail)
                                                       BY declarationDeclarationDetail(declarationDetail) IN baseGroup PERSISTENT;

// за оформление
sumRegistrationDeclarationDetail 'За оформление' (declarationDetail) = dutyPercentCustomCategory10TypeDuty(customCategory10DeclarationDetail(declarationDetail), typeDutyRegistration()) IN baseGroup;

sumRegistrationDeclaration 'За оформление (расч.)' (declaration) = GROUP MAX sumRegistrationDeclarationDetail(declarationDetail)
                                                                          BY declarationDeclarationDetail(declarationDetail) IN baseGroup PERSISTENT;

sumRegistrationDataDeclaration 'За оформление' = DATA NUMERIC[14,2](declaration) IN baseGroup;
sumRegistrationDataDeclaration (declaration) <- sumRegistrationDeclaration(declaration) WHEN ASSIGNED(declaration IS preparedDeclaration);

rateSumRegistrationDeclaration 'За оформление (конверт.)' (declaration) = round0(sumRegistrationDataDeclaration(declaration) *
                                                                                 rateExchangeDeclaration(declaration)) IN baseGroup PERSISTENT;

totalCustomSum 'Сумма платежей' (declaration) = UNION SUM dutyDeclaration(declaration), NDSDeclaration(declaration), rateSumRegistrationDeclaration(declaration) IN baseGroup;


// корректировка таможенной стоимости
declarationCorrection 'Декларация КТС (ИД)' = DATA declaration(correction) IN idGroup;
inDeclarationCorrection (declaration, correction) = declarationCorrection(correction)==declaration;

priceCorrectionDeclarationDetail 'Скорректированная стоимость' = DATA NUMERIC[14,2](correction, declarationDetail) IN baseGroup;

correctionPriceDeclarationDetail 'Скорректированная стоимость' (declarationDetail) = GROUP MAX priceCorrectionDeclarationDetail(correction, declarationDetail) BY declarationDetail PERSISTENT;

correctionDutyDeclarationDetail 'Скорректированная пошлина (расч.)' (declarationDetail) = (UNION MAX
                                netWeightDeclarationDetail(declarationDetail) * dutySumCustomCategory10TypeDuty(customCategory10DeclarationDetail(declarationDetail), typeDutyDuty()),
                                correctionPriceDeclarationDetail(declarationDetail) * (dutyPercentCustomCategory10TypeDuty(customCategory10DeclarationDetail(declarationDetail), typeDutyDuty())/100))
                                IF correctionPriceDeclarationDetail(declarationDetail) PERSISTENT;

correctionDutyDataDeclarationDetail 'Скорректированная пошлина' = DATA NUMERIC[14,2](declarationDetail) IN baseGroup;
correctionDutyDataDeclarationDetail(declarationDetail) <- correctionDutyDeclarationDetail(declarationDetail) WHEN ASSIGNED(declarationDeclarationDetail(declarationDetail) IS preparedDeclaration);

correctionPriceDutyDeclarationDetail 'Стоимость с пошлиной'(declarationDetail) = UNION SUM correctionPriceDeclarationDetail(declarationDetail),
                                                                                           correctionDutyDataDeclarationDetail(declarationDetail);

correctionNDSDeclarationDetail 'Скорректированный НДС (расч.)' (declarationDetail) = round2(correctionPriceDutyDeclarationDetail(declarationDetail) *
                                                                                            NDSPercentDeclarationDetail(declarationDetail)/100) PERSISTENT;

correctionNDSDataDeclarationDetail 'Скорректированный НДС' = DATA NUMERIC[14,2](declarationDetail) IN baseGroup;
correctionNDSDataDeclarationDetail(declarationDetail) <- correctionNDSDeclarationDetail(declarationDetail) WHEN ASSIGNED(declarationDeclarationDetail(declarationDetail) IS preparedDeclaration);

diffDutyDeclarationDetail 'Разница пошлин' (declarationDetail) = correctionDutyDataDeclarationDetail(declarationDetail) - dutyDataDeclarationDetail(declarationDetail)
                                                                 IF correctionPriceDeclarationDetail(declarationDetail);

diffDutyDeclararion 'Разница пошлин' (declaration) = GROUP SUM diffDutyDeclarationDetail(declarationDetail) *
                                                               quantityDeclarationDetail(declarationDetail) *
                                                               rateExchangeDeclarationDetail(declarationDetail)
                                                            BY declarationDeclarationDetail(declarationDetail) PERSISTENT;

diffNDSDeclarationDetail 'Разница НДС' (declarationDetail) = correctionNDSDataDeclarationDetail(declarationDetail) - NDSDataDeclarationDetail(declarationDetail)
                                                             IF correctionPriceDeclarationDetail(declarationDetail);

diffNDSDeclararion 'Разница НДС' (declaration) = GROUP SUM diffNDSDeclarationDetail(declarationDetail) *
                                                           quantityDeclarationDetail(declarationDetail) *
                                                           rateExchangeDeclarationDetail(declarationDetail)
                                                        BY declarationDeclarationDetail(declarationDetail) PERSISTENT;

diffDeclaration 'Сумма доп. платежей' (declaration) = UNION SUM diffDutyDeclararion(declaration), diffNDSDeclararion(declaration);


declarationPriceDeclarationDetail 'Cтоимость' (declarationDetail) = UNION OVERRIDE priceDeclarationDetail(declarationDetail),
                                                                                   correctionPriceDeclarationDetail(declarationDetail) IN baseGroup;

// за оформление
sumDeclarationDetail 'Сумма' (declarationDetail) = declarationPriceDeclarationDetail(declarationDetail) * quantityDeclarationDetail(declarationDetail);

sumDeclaration 'Сумма' (declaration) = GROUP SUM sumDeclarationDetail(declarationDetail) BY declarationDeclarationDetail(declarationDetail) PERSISTENT;

registrationDeclarationDetail 'За оформление' (declarationDetail) = (sumDeclarationDetail(declarationDetail) * sumRegistrationDataDeclaration(declarationDeclarationDetail(declarationDetail)))/
                                                                    (quantityDeclarationDetail(declarationDetail) * sumDeclaration(declarationDeclarationDetail(declarationDetail))) PERSISTENT;

// учёт расходов на сертификацию
expenseCertificateDeclaration 'Расходы на сертификацию (БУ)' (declaration) = GROUP SUM priceDeclarationDetail(declarationDetail) *
                                                                                       quantityCertificatedDeclarationDetail(declarationDetail)
                                                                                    IF certificatedDeclarationDetail(declarationDetail)
                                                                                    BY declarationDeclarationDetail(declarationDetail) IN baseGroup PERSISTENT;

expenseCertificateManagerialDeclaration 'Расходы на сертификацию (УУ)' (declaration) = GROUP SUM priceManagerialDeclarationDetail(declarationDetail) *
                                                                                                 quantityCertificatedDeclarationDetail(declarationDetail)
                                                                                              IF certificatedDeclarationDetail(declarationDetail)
                                                                                              BY declarationDeclarationDetail(declarationDetail) IN baseGroup PERSISTENT;

priceCustomDeclarationDetail 'Цена с расходами (БУ)' (declarationDetail) = UNION SUM priceDeclarationDetail(declarationDetail),
                                                                                     correctionDutyDataDeclarationDetail(declarationDetail),
                                                                                     correctionNDSDataDeclarationDetail(declarationDetail),
                                                                                     registrationDeclarationDetail(declarationDetail) PERSISTENT;

priceManagerialCustomDeclarationDetail 'Цена с расходами (УУ)' (declarationDetail) = UNION SUM priceManagerialDeclarationDetail(declarationDetail),
                                                                                               correctionDutyDataDeclarationDetail(declarationDetail),
                                                                                               correctionNDSDataDeclarationDetail(declarationDetail),
                                                                                               registrationDeclarationDetail(declarationDetail) PERSISTENT;

// для экспорта в Декларант
TABLE groupDeclaration (groupDeclaration);
TABLE groupDeclarationInnerInvoice (groupDeclaration, innerInvoice);
TABLE declarationArticleCustomCategoryCompositionCountry(declaration, article, customCategory10, STRING[200], country);

quantityDeclarationGroup 'Кол-во' = GROUP SUM quantityDeclarationDetail(declarationDetail)
                                           BY declarationDeclarationDetail(declarationDetail),
                                              articleDeclarationDetail(declarationDetail),
                                              customCategory10DeclarationDetail(declarationDetail),
                                              mainCompositionDeclarationDetail(declarationDetail),
                                              countryDeclarationDetail(declarationDetail) IN baseGroup PERSISTENT;

CLASS groupDeclaration 'Группировка';

declarationGroupDeclaration 'Декларация (ИД)' = DATA declaration(groupDeclaration) IN idGroup;
articleGroupDeclaration 'Артикул (ИД)' = DATA article(groupDeclaration) IN idGroup;
customCategory10GroupDeclaration 'ТН ВЭД (ИД)' = DATA customCategory10(groupDeclaration) IN idGroup;
mainCompositionGroupDeclaration 'Состав' = DATA STRING[200](groupDeclaration) IN baseGroup;
countryGroupDeclaration 'Страна (ИД)' = DATA country(groupDeclaration) IN idGroup;

certificatedGroupDeclaration 'Необходимость сертификации' (groupDeclaration) = certificatedCustomCategory10(customCategory10GroupDeclaration(groupDeclaration)) IN baseGroup;

sidArticleGroupDeclaration 'Артикул' (groupDeclaration) = sidArticle(articleGroupDeclaration(groupDeclaration)) IN baseGroup;
sidCustomCategory10GroupDeclaration 'ТН ВЭД' (groupDeclaration) = sidCustomCategory10(customCategory10GroupDeclaration(groupDeclaration)) IN baseGroup;
nameCountryGroupDeclaration 'Страна' (groupDeclaration) = name(countryGroupDeclaration(groupDeclaration)) IN baseGroup;
sidCountryGroupDeclaration 'Цифровой код страны' (groupDeclaration) = sidCountry(countryGroupDeclaration(groupDeclaration)) IN baseGroup;
sidOrigin2CountryGroupDeclaration 'Буквенный код страны' (groupDeclaration) = sidOrigin2Country(countryGroupDeclaration(groupDeclaration)) IN baseGroup MINCHARWIDTH 3;


numberGroupDeclaration 'Номер' (groupDeclaration) =
        PARTITION SUM 1 IF groupDeclaration IS groupDeclaration BY declarationGroupDeclaration(groupDeclaration)
        ORDER groupDeclaration;

inDeclarationGroupDeclaration (declaration, groupDeclaration) = declarationGroupDeclaration(groupDeclaration)==declaration;

dutyGroupDeclaration 'Пошлина' = DATA NUMERIC[14,2](groupDeclaration) IN baseGroup;
NDSGroupDeclaration 'НДС' = DATA NUMERIC[14,2](groupDeclaration) IN baseGroup;

TABLE groupstring (object, object, object, object, STRING[200]);

uniqueGroupDeclaration() = GROUP UNIQUE groupDeclaration BY declarationGroupDeclaration(groupDeclaration),
                                                            articleGroupDeclaration(groupDeclaration),
                                                            customCategory10GroupDeclaration(groupDeclaration),
                                                            mainCompositionGroupDeclaration(groupDeclaration),
                                                            countryGroupDeclaration(groupDeclaration)
                                                      WHERE groupDeclaration IS groupDeclaration PERSISTENT;

quantityDeclarationGroup(declaration, article, customCategory10, STRING, country) => uniqueGroupDeclaration(declaration, article, customCategory10, STRING, country) RESOLVE TRUE;
isGroupDeclaration(group) = group IS groupDeclaration;
isGroupDeclaration(group) => quantityDeclarationGroup(declarationGroupDeclaration(group),
                                                      articleGroupDeclaration(group),
                                                      customCategory10GroupDeclaration(group),
                                                      mainCompositionGroupDeclaration(group),
                                                      countryGroupDeclaration(group)) RESOLVE FALSE;

// свойства от артикула
nameBrandGroupDeclaration 'Бренд' (groupDeclaration) = nameBrandSupplierArticle(articleGroupDeclaration(groupDeclaration));
nameCategoryGroupDeclaration 'Ном. группа' (groupDeclaration) = nameCategoryArticle(articleGroupDeclaration(groupDeclaration));
sidGenderGroupDeclaration 'Пол' (groupDeclaration) = sidGenderArticle(articleGroupDeclaration(groupDeclaration));
nameTypeFabricGroupDeclaration 'Тип одежды' (groupDeclaration) = nameTypeFabricArticle(articleGroupDeclaration(groupDeclaration));

unitOfMeasureGroupDeclaration 'Ед. изм.(ИД)' (groupDeclaration) = unitOfMeasureArticle(articleGroupDeclaration(groupDeclaration));
sidUnitOfMeasureGroupDeclaration 'Ед. изм.(код)' (groupDeclaration) = sidUnitOfMeasure(unitOfMeasureGroupDeclaration(groupDeclaration));
nameUnitOfMeasureGroupDeclaration 'Ед. изм.' (groupDeclaration) = name(unitOfMeasureGroupDeclaration(groupDeclaration));


groupDeclarationDeclarationDetail 'Группа строки декларации (ИД)'(declarationDetail) = uniqueGroupDeclaration(
                                                                                       declarationDeclarationDetail(declarationDetail),
                                                                                       articleDeclarationDetail(declarationDetail),
                                                                                       customCategory10DeclarationDetail(declarationDetail),
                                                                                       mainCompositionDeclarationDetail(declarationDetail),
                                                                                       countryDeclarationDetail(declarationDetail)) IN idGroup;

numberGroupDeclarationDeclarationDetail 'Группа строки декларации'(declarationDetail) = numberGroupDeclaration(groupDeclarationDeclarationDetail(declarationDetail)) IN baseGroup;


inDeclarationDetailInnerInvoice 'Связка' (declarationDetail, innerInvoice) = quantityInnerInvoiceSku(innerInvoice, skuDeclarationDetail(declarationDetail)) IF
                                                                             declarationDeclarationDetail(declarationDetail) == declarationInnerInvoice(innerInvoice) PERSISTENT;

inGroupDeclarationInnerInvoice 'Связка' (groupDeclaration, innerInvoice) = GROUP SUM inDeclarationDetailInnerInvoice(declarationDetail, innerInvoice)
                                                                                  BY groupDeclarationDeclarationDetail(declarationDetail), innerInvoice PERSISTENT;


quantityGroupDeclaration 'Кол-во' (groupDeclaration) = GROUP SUM quantityDeclarationDetail(declarationDetail)
                                                              BY groupDeclarationDeclarationDetail(declarationDetail) IN baseGroup PERSISTENT;

netWeightGroupDeclaration 'Вес нетто' (groupDeclaration) = GROUP SUM sumNetWeightDeclarationDetail(declarationDetail)
                                                                  BY groupDeclarationDeclarationDetail(declarationDetail) IN baseGroup PERSISTENT;

grossWeightGroupDeclaration 'Вес брутто' (groupDeclaration) = GROUP SUM sumGrossWeightDeclarationDetail(declarationDetail)
                                                                     BY groupDeclarationDeclarationDetail(declarationDetail) IN baseGroup PERSISTENT;

sumGroupDeclaration 'Стоимость' (groupDeclaration) = GROUP SUM sumDeclarationDetail(declarationDetail)
                                                            BY groupDeclarationDeclarationDetail(declarationDetail) IN baseGroup PERSISTENT;


FORM customStores 'Склады временного хранения'
    OBJECTS c=customStore
    PROPERTIES(c) name, ADDOBJ, delete
;


FORM declarationInvoices 'Присоединение инвойсов'
    OBJECTS d=declaration FIXED PANEL
    PROPERTIES(d) objectClassName, nameCustomStoreDeclaration, sidDeclaration, date, beginDeclaration, endDeclaration,
                  nameImporterDeclaration

    OBJECTS ii=innerInvoice
    PROPERTIES (ii) sidInnerInvoice
    PROPERTIES (d, ii) inDeclarationInnerInvoice
    FILTERS freightArrivedInnerInvoice(ii), forDeclaration(d, ii)
;

showFormDeclarationInvoices 'Присоединить инвойсы' (declaration) = ACTION FORM declarationInvoices OBJECTS d NEWSESSION MODAL TOOLBAR;

FORM declaration 'Декларация'
    OBJECTS d=declaration FIXED PANEL
    PROPERTIES(d) objectClassName, nameCustomStoreDeclaration, sidDeclaration, date, beginDeclaration, endDeclaration,
                  rateExchangeDeclaration, nameImporterDeclaration, rateSumRegistrationDeclaration,
                  dutyDeclaration, NDSDeclaration, totalCustomSum, diffDutyDeclararion,
                  diffNDSDeclararion, diffDeclaration, expenseCertificateDeclaration, exportDeclaration

//    OBJECTS ii=innerInvoice
//    PROPERTIES (ii) sidInnerInvoice
//    PROPERTIES (d, ii) inDeclarationInnerInvoice
//    FILTERS freightArrivedInnerInvoice(ii), forDeclaration(d, ii)

    OBJECTS c=correction
    PROPERTIES(c) date, ADDOBJ, delete
    FILTERS inDeclarationCorrection(d, c)

    OBJECTS dd=declarationDetail
    PROPERTIES (dd) numberDeclarationDetail, barcodeSkuDeclarationDetail, nameBrandArticleDeclarationDetail, sidArticleDeclarationDetail,
                    nameCategoryArticleDeclarationDetail, mainCompositionDeclarationDetail,
                    nameCountryDeclarationDetail, sidCustomCategory10DeclarationDetail,
                    netWeightDeclarationDetail, sumNetWeightDeclarationDetail, sumGrossWeightDeclarationDetail,
                    quantityDeclarationDetail, priceDeclarationDetail, dutyDeclarationDetail, dutyDataDeclarationDetail,
                    rateDutyDeclarationDetail, NDSDeclarationDetail, NDSDataDeclarationDetail, rateNDSDeclarationDetail,
                    certificatedDeclarationDetail, quantityCertificatedDeclarationDetail,
                    sidTemporalCertificateDeclarationDetail BACKGROUND isCertificatePreparedDeclarationDetail(dd),
                    sidPermanentCertificateDeclarationDetail BACKGROUND isCertificatePreparedDeclarationDetail(dd),
                    correctionPriceDeclarationDetail, correctionDutyDeclarationDetail, correctionDutyDataDeclarationDetail,
                    diffDutyDeclarationDetail, registrationDeclarationDetail, ADDOBJ, delete

    FILTERS inDeclarationDeclarationDetail(d, dd)
    PROPERTIES (c, dd) priceCorrectionDeclarationDetail

    OBJECTS gd=groupDeclaration
    PROPERTIES (gd) numberGroupDeclaration, nameBrandGroupDeclaration, nameCategoryGroupDeclaration, sidArticleGroupDeclaration,
                    sidGenderGroupDeclaration, nameTypeFabricGroupDeclaration,
                    sidCustomCategory10GroupDeclaration, mainCompositionGroupDeclaration, nameCountryGroupDeclaration,
                    sidCountryGroupDeclaration, sidOrigin2CountryGroupDeclaration, quantityGroupDeclaration,
                    sidUnitOfMeasureGroupDeclaration, nameUnitOfMeasureGroupDeclaration,
                    sumGroupDeclaration, netWeightGroupDeclaration, grossWeightGroupDeclaration

    //PROPERTIES (gd, ii) inGroupDeclarationInnerInvoice

    OBJECTS ii2=innerInvoice
    PROPERTIES (ii2) sidInnerInvoice, dateInnerInvoice

    FILTERS inDeclarationGroupDeclaration(d, gd), inGroupDeclarationInnerInvoice(gd, ii2)

    EDIT declaration OBJECT d
;


DESIGN declaration FROM DEFAULT{
    main {
//        NEW document.box BEFORE dd.box {
//            type = TABBED;
//            ADD ii.box;
//            ADD c.box;
//        }

        POSITION d.box TO THE LEFT c.box;
        POSITION gd.box TO THE LEFT ii2.box;

//        ii.grid {
//            fillHorizontal = 0.5;
//        }

        c.grid {
            fillHorizontal = 0.5;
        }

        dd.grid {
            fillVertical = 3;
        }

        gd.grid {
            fillVertical = 2;
        }

        ii2.grid {
            fillVertical = 2;
            fillHorizontal = 0.4;
        }
    }
};



FORM declarations 'Декларации'
    OBJECTS d=declaration
    PROPERTIES(d) READONLY objectClassName, nameCustomStoreDeclaration, sidDeclaration, date, beginDeclaration, endDeclaration,
                           rateExchangeDeclaration, nameImporterDeclaration, rateSumRegistrationDeclaration,
                           dutyDeclaration, NDSDeclaration, totalCustomSum, diffDutyDeclararion, diffNDSDeclararion, diffDeclaration,
                           expenseCertificateDeclaration
    PROPERTIES(d) ADDFORM, EDITFORM, delete, showFormDeclarationInvoices

    OBJECTS dd=declarationDetail
    PROPERTIES(dd) READONLY numberDeclarationDetail, barcodeSkuDeclarationDetail, nameBrandArticleDeclarationDetail,
                            sidArticleDeclarationDetail, nameCategoryArticleDeclarationDetail, sidGenderGroupDeclaration, nameTypeFabricGroupDeclaration, mainCompositionDeclarationDetail,
                            nameCountryDeclarationDetail, sidCustomCategory10DeclarationDetail,
                            netWeightDeclarationDetail, sumNetWeightDeclarationDetail, sumGrossWeightDeclarationDetail,
                            quantityDeclarationDetail, priceDeclarationDetail, dutyDeclarationDetail, dutyDataDeclarationDetail,
                            rateDutyDeclarationDetail, NDSDeclarationDetail, NDSDataDeclarationDetail, rateNDSDeclarationDetail,
                            certificatedDeclarationDetail, quantityCertificatedDeclarationDetail,
                            sidTemporalCertificateDeclarationDetail BACKGROUND isCertificatePreparedDeclarationDetail(dd),
                            sidPermanentCertificateDeclarationDetail BACKGROUND isCertificatePreparedDeclarationDetail(dd),
                            correctionPriceDeclarationDetail, correctionDutyDeclarationDetail,
                            correctionDutyDataDeclarationDetail, diffDutyDeclarationDetail, registrationDeclarationDetail,
                            priceCustomDeclarationDetail, priceManagerialCustomDeclarationDetail
    FILTERS inDeclarationDeclarationDetail(d, dd)
;

DESIGN declarations FROM DEFAULT {
    d.grid {
        fillVertical = 0.3;
    }
}


FORM innerInvoices 'Инвойсы РБ'
    OBJECTS i=innerInvoice
    PROPERTIES(i) READONLY nameCustomStoreInnerInvoice, sidInnerInvoice, nameImporterInnerInvoice, dateInnerInvoice
    PROPERTIES(i) sidDeclarationInnerInvoice, delete
    FILTERS freightArrivedInnerInvoice(i)


    OBJECTS s=sku
    PROPERTIES(s) READONLY barcode, sidArticleSku
    PROPERTIES (i, s) quantityInnerInvoiceSku
    FILTERS quantityInnerInvoiceSku(i, s)
;

// документы расценки
CLASS STATIC methodPrice 'Метод расчёта'
{
    coefficient 'С надбавкой',
    RRP 'Рекомендемая',
    previous 'Предыдущая'
};

//
EXTEND FORM globalParamForm
     PROPERTIES() maxDateTime
;


CLASS ABSTRACT priceChangeDocument 'Документ изменения цен' : transaction;
CLASS basePriceChangeDocument 'Изменение базовой цены' : priceChangeDocument;
CLASS discountPriceChangeDocument 'Изменение цены продажи' : priceChangeDocument;
CLASS mixPriceChangeDocument 'Изменение базовой и продажи' : basePriceChangeDocument, discountPriceChangeDocument;

CLASS coefficientRetail 'Коэффициент надбавки';

//CLASS diapasonPrices 'Диапазон цен';
//priceFromDiapasonPrices 'от' = DATA NUMERIC[14,3](diapasonPrices) IN baseGroup;
//priceToDiapasonPrices 'до' = DATA NUMERIC[14,3](diapasonPrices) IN baseGroup;
//priceConversionDiapasonPrices 'Округлённая цена' = DATA NUMERIC[14,3](diapasonPrices) IN baseGroup;

TABLE priceChangeDocumentArticle(priceChangeDocument, article);

dateCoefficientRetail 'Дата введения' = DATA DATE(coefficientRetail) IN baseGroup;
markupCoefficientRetail 'Множитель' = DATA NUMERIC[14,3](coefficientRetail) IN baseGroup;

uniqueCoefficientRetail() = GROUP UNIQUE coefficientRetail BY dateCoefficientRetail(coefficientRetail)
                                                        WHERE coefficientRetail IS coefficientRetail;

sidPriceChangeDocument 'Номер' = DATA STRING[10] (priceChangeDocument) IN baseGroup;
//timePriceChangeDocument 'Время документа' = DATA TIME(priceChangeDocument) IN baseGroup;

timePriceChangeDocument 'Время документа' = DATA TIME (priceChangeDocument);
timePriceChangeDocument (priceChangeDocument) <- currentTime() WHEN ASSIGNED(priceChangeDocument AS priceChangeDocument);

dateTimePriceChangeDocument 'Дата/время документа' (priceChangeDocument) = toDateTime(date(priceChangeDocument), timePriceChangeDocument(priceChangeDocument));

dateTimeToDataPriceChangeDocument 'Дата/время окончания' = DATA DATETIME(priceChangeDocument) IN baseGroup;
dateTimeToPriceChangeDocument 'Дата/время окончания' (priceChangeDocument) = UNION OVERRIDE maxDateTime() IF priceChangeDocument IS priceChangeDocument,
                                                                                            dateTimeToDataPriceChangeDocument(priceChangeDocument) IN baseGroup;

isDiscountPriceChangeDocument 'Распродажа' = DATA BOOLEAN(priceChangeDocument) IN baseGroup;
keepDiscountPriceChangeDocument 'Учитывать скидки' = DATA BOOLEAN(priceChangeDocument) IN baseGroup;

//связь документа и фрахта
freightPriceChangeDocument 'Фрахт документа (ИД)' = DATA freight(basePriceChangeDocument) IN idGroup;

quantityPriceChangeDocumentFreight (freight) = GROUP SUM 1 IF freightPriceChangeDocument(basePriceChangeDocument) BY freightPriceChangeDocument(basePriceChangeDocument);
isPriceChangeDocumentFreight (freight) = TRUE IF NOT quantityPriceChangeDocumentFreight(freight) AND freight IS freight;


priceInPriceChangeDocumentArticle 'Цена поставщика' = DATA NUMERIC[14,2](basePriceChangeDocument, article) IN baseGroup;
RRPPriceChangeDocumentArticle 'Рекомендуемая цена' = DATA NUMERIC[14,2](basePriceChangeDocument, article) IN baseGroup;

ratePriceChangeDocument 'Обменный курс' (priceChangeDocument, article) = nearestRateExchange(typeExchangeRetail(),
                                                                                             currencyTypeExchange(typeExchangeSTX()),
                                                                                             priceChangeDocument) AND article IS article;

rateDataPriceChangeDocumentArticle 'Обменный курс' = DATA NUMERIC[14,2](priceChangeDocument, article) IN baseGroup;

ratePriceChangeDocumentArticle 'Обменный курс' (basePriceChangeDocument, article) = UNION OVERRIDE ratePriceChangeDocument(basePriceChangeDocument, article),
                                                                                                   rateDataPriceChangeDocumentArticle(basePriceChangeDocument, article);

coefficientRetailDate(coefficientRetail, date) = coefficientRetail IF dateCoefficientRetail(coefficientRetail) <= date AND date AS DATE;
actingCoefficientRetailDate(date) = GROUP MAX dateCoefficientRetail(coefficientRetailDate(coefficientRetail, date)) BY date;

coefficientRetailPriceChangeDocument 'Коэффициент документа' (basePriceChangeDocument) = uniqueCoefficientRetail(actingCoefficientRetailDate(date(basePriceChangeDocument))) IN idGroup;
markupCoefficientRetailPriceChangeDocumentArticle 'Коэффициент документа' (basePriceChangeDocument, article) = markupCoefficientRetail(coefficientRetailPriceChangeDocument(basePriceChangeDocument))
                                                                                                               AND article IS article IN baseGroup;

markupPriceChangeDocumentArticle 'Коэффициент артикула' = DATA NUMERIC[14,2] (basePriceChangeDocument, article);
markupPriceChangeDocumentArticle (basePriceChangeDocument, article) <- markupCoefficientRetailPriceChangeDocumentArticle(basePriceChangeDocument, article) WHEN ASSIGNED(basePriceChangeDocument IS basePriceChangeDocument);

priceOutPriceChangeDocumentArticle 'Цена с надбавкой' (basePriceChangeDocument, article) = round2(priceInPriceChangeDocumentArticle(basePriceChangeDocument, article) *
                                                                                                  markupCoefficientRetailPriceChangeDocumentArticle(basePriceChangeDocument, article));

isRRPPriceChangeDocumentArticle 'Взять рекомендованную' = DATA BOOLEAN (basePriceChangeDocument, article);
isPreviousPriceChangeDocumentArticle 'Взять предыдущую' = DATA BOOLEAN (basePriceChangeDocument, article);

@metaCodePriceBaseDiscount(basePriceChangeDocument, 'Базовая цена');
@metaCodePriceBaseDiscount(discountPriceChangeDocument, 'Цена с уценкой');

methodPriceChangeDocumentArticle 'Метод расчёта (ИД)' = DATA methodPrice(basePriceChangeDocument, article);
notMethodPriceChangeDocumentArticle = TRUE IF NOT methodPriceChangeDocumentArticle(basePriceChangeDocument, article);

nameMethodPriceChangeDocumentArticle 'Метод расчёта' (basePriceChangeDocument, article) = name(methodPriceChangeDocumentArticle(basePriceChangeDocument, article)) MAXCHARWIDTH 20;

RRPRatePriceChangeDocumentArticle 'Рекомендуемая (руб.)' (basePriceChangeDocument, article) = round0(RRPPriceChangeDocumentArticle(basePriceChangeDocument, article) *
                                                                                                     ratePriceChangeDocumentArticle(basePriceChangeDocument, article)) MINCHARWIDTH 15;

priceOutRatePriceChangeDocumentArticle 'С надбавкой (руб.)' (basePriceChangeDocument, article) = round0(priceOutPriceChangeDocumentArticle(basePriceChangeDocument, article) *
                                                                                                        ratePriceChangeDocumentArticle(basePriceChangeDocument, article)) MINCHARWIDTH 15;


priceRetailPriceChangeDocumentArticle 'Цена розничная' (basePriceChangeDocument, article) =
           CASE
               WHEN methodPriceChangeDocumentArticle(basePriceChangeDocument, article) == methodPrice.coefficient THEN priceOutRatePriceChangeDocumentArticle(basePriceChangeDocument, article)
               WHEN methodPriceChangeDocumentArticle(basePriceChangeDocument, article) == methodPrice.RRP THEN RRPRatePriceChangeDocumentArticle(basePriceChangeDocument, article)
               WHEN methodPriceChangeDocumentArticle(basePriceChangeDocument, article) == methodPrice.previous THEN PREV(priceBBasePriceChangeDocumentArticle(basePriceChangeDocument, article))
               DEFAULT 0 AND basePriceChangeDocument IS basePriceChangeDocument AND article IS article
           END MINCHARWIDTH 15;


priceDataBasePriceChangeDocumentArticle(basePriceChangeDocument, article) <- priceRetailPriceChangeDocumentArticle(basePriceChangeDocument, article)
                            WHEN CHANGED (methodPriceChangeDocumentArticle(basePriceChangeDocument, article)) OR
                                 CHANGED (priceOutRatePriceChangeDocumentArticle(basePriceChangeDocument, article)) OR
                                 CHANGED (RRPRatePriceChangeDocumentArticle(basePriceChangeDocument, article));


//setPreviousPriceChangeDocumentArticle 'Цена в документе' = ACTION (basePriceChangeDocument, article) {
//    SET priceDataBasePriceChangeDocumentArticle(basePriceChangeDocument, article) <- priceRetailPriceChangeDocumentArticle(basePriceChangeDocument, article);
//} IN baseGroup;

//priceRetailPriceChangeDocumentArticle 'Новая цена' = UNION OVERRIDE priceRetailRatePriceChangeDocumentArticle(basePriceChangeDocument, article),
//                                                                    priceDataBasePriceChangeDocumentArticle(basePriceChangeDocument, article);

percentNDSPriceChangeDocumentArticle 'НДС (%)' = DATA NUMERIC[14,3](basePriceChangeDocument, article) IN baseGroup;
sumNDSPriceChangeDocumentArticle 'НДС (руб.)' = [round0(X*Y/(Y+100))](priceDataBasePriceChangeDocumentArticle(basePriceChangeDocument, article),
                                                                      percentNDSPriceChangeDocumentArticle(basePriceChangeDocument, article));

// для уценки
//basePriceDiscountPriceChangeDocumentArticle 'Цена без уценки' = DATA NUMERIC[14,2](discountPriceChangeDocument, article) IN baseGroup;

priceInRateBBasePriceChangeDocumentArticle 'Цена поставщика (руб.)' (discountPriceChangeDocument, article) = ratePriceChangeDocumentArticle (discountPriceChangeDocument, article) *
                                                                                                             priceInBBasePriceChangeDocumentArticle(discountPriceChangeDocument, article) MINCHARWIDTH 15;

percentDiscountPriceChangeDocumentArticle 'Процент уценки' = DATA NUMERIC[14,2](discountPriceChangeDocument, article) IN baseGroup;

priceDiscountPriceChangeDocumentArticle 'Цена без процентов' (discountPriceChangeDocument, article) = [roundM1(X*(100-Y)/100)]
                                                                                                        (priceBBasePriceChangeDocumentArticle(discountPriceChangeDocument, article),
                                                                                                         percentDiscountPriceChangeDocumentArticle(discountPriceChangeDocument, article)) IN baseGroup;


priceDataDiscountPriceChangeDocumentArticle(discountPriceChangeDocument, article) <- priceDiscountPriceChangeDocumentArticle(discountPriceChangeDocument, article)
                                        WHEN CHANGED (priceDiscountPriceChangeDocumentArticle(discountPriceChangeDocument, article));

//rateExchangeFreightSku 'Курс обмена' (freight, sku) = nearestRateExchange(typeExchangeRetail(),
//                                                                          currencyFreight(freight),
//                                                                          freight) AND sku IS sku;

inBrandSupplier (supplier, brandSupplier) = supplierBrandSupplier(brandSupplier) == supplier;
inArticleBrand (brandSupplier, article) = brandSupplierArticle(article) == brandSupplier;

inArticleCategory (category, article) = UNION OVERRIDE categoryArticle(article) == category,
                                                       article == article AND NOT category;

inArticlePriceChangeDocument 'Артикул в документе' = DATA BOOLEAN(priceChangeDocument, article);
inArticleFreight (freight, article) = TRUE IF quantityFreightArticle(freight, article);

stringEqualsAll(string) = string == 'Все';

inSupplierBrandArticle(supplier, brand, article) = UNION OVERRIDE brandSupplierArticle(article) == brand AND supplier,
                                                                  supplierArticle(article) == supplier AND NOT brand,
                                                                  article == article AND NOT supplier AND NOT brand;

toSetPricesPriceChangeDocument 'Взять цены поставщика' =  ACTION (basePriceChangeDocument) {
    FOR p == basePriceChangeDocument AND inArticlePriceChangeDocument(p, article) DO {
        SET priceInPriceChangeDocumentArticle(p, article) <- priceInBBasePriceChangeDocumentArticle (p, article);
        SET RRPPriceChangeDocumentArticle(p, article) <- RRPBBasePriceChangeDocumentArticle (p, article);
    };
};


FORM coefficientRetail 'Коэффициент надбавки'

    OBJECTS c=coefficientRetail FIXED PANEL
    PROPERTIES(c) dateCoefficientRetail, markupCoefficientRetail

    EDIT coefficientRetail OBJECT c
;

FORM coefficientRetails 'История коэффициентов'

    OBJECTS c=coefficientRetail
    PROPERTIES(c) READONLY dateCoefficientRetail, markupCoefficientRetail
    PROPERTIES(c) ADDFORM, EDITFORM, delete
;


FORM priceChangeDocument 'Документ базовых цен'

    OBJECTS p=basePriceChangeDocument FIXED PANEL
    PROPERTIES(p) sidPriceChangeDocument, date, timePriceChangeDocument, toSetPricesPriceChangeDocument

    TREE treeSupplierBrand v=STRING[3], s=supplier, b=brandSupplier
    PROPERTIES READONLY OBJVALUE(v), name(s), name(b)

    TREE treeCategory vv=STRING[3], c=category
    PROPERTIES READONLY OBJVALUE(vv), name(c)

    OBJECTS aa=article
    PROPERTIES (aa) READONLY sidArticle, nameCategoryArticle, nameBrandSupplierArticle
    PROPERTIES (p, aa) inArticlePriceChangeDocument

    FILTERS stringEqualsAll(v), inBrandSupplier(s, b), inSupplierBrandArticle(s, b, aa), stringEqualsAll(vv), inArticleCategory(c, aa)

    OBJECTS a=article
    PROPERTIES(a) READONLY sidArticle, nameCategoryArticle, nameBrandSupplierArticle
    PROPERTIES (p, a) priceInPriceChangeDocumentArticle,
                      RRPPriceChangeDocumentArticle, markupPriceChangeDocumentArticle, priceOutPriceChangeDocumentArticle,
                      ratePriceChangeDocumentArticle, RRPRatePriceChangeDocumentArticle, priceOutRatePriceChangeDocumentArticle,
                      priceBBasePriceChangeDocumentArticle, nameMethodPriceChangeDocumentArticle, priceRetailPriceChangeDocumentArticle,
                      priceDataBasePriceChangeDocumentArticle, percentNDSPriceChangeDocumentArticle, sumNDSPriceChangeDocumentArticle

    FILTERS inArticlePriceChangeDocument(p, a)

    FILTERGROUP filtersMethod
        FILTER 'Показывать без метода' 'F9' notMethodPriceChangeDocumentArticle(p, a)

    FILTERGROUP filtersCategory
        FILTER 'Показывать артикулы ном. группы' 'F10' inArticleCategory(c, a)
    FILTERGROUP filtersBrand
        FILTER 'Показывать артикулы бренда' 'F11' inArticleBrand(b, a)

    EDIT basePriceChangeDocument OBJECT p
;

DESIGN priceChangeDocument FROM DEFAULT {
    POSITION treeSupplierBrand.box TO THE LEFT treeCategory.box;
    POSITION treeCategory.box TO THE LEFT aa.box;

    treeSupplierBrand.tree {
        fillHorizontal = 1.5;
    }

    aa.box {
        fillHorizontal = 1.5;
    }

}

FORM priceChangeDocuments 'Документы базовых цен'

    OBJECTS p=basePriceChangeDocument
    PROPERTIES(p) READONLY sidPriceChangeDocument, date, timePriceChangeDocument, dateTimeToPriceChangeDocument
    PROPERTIES(p) ADDFORM, EDITFORM, delete

    OBJECTS a=article
    PROPERTIES(a) READONLY sidArticle, nameCategoryArticle, nameBrandSupplierArticle
    PROPERTIES (p, a) READONLY priceInPriceChangeDocumentArticle,
                               RRPPriceChangeDocumentArticle, markupPriceChangeDocumentArticle, priceOutPriceChangeDocumentArticle,
                               isRRPPriceChangeDocumentArticle, ratePriceChangeDocumentArticle,
                               priceBBasePriceChangeDocumentArticle, priceRetailPriceChangeDocumentArticle,
                               priceDataBasePriceChangeDocumentArticle, percentNDSPriceChangeDocumentArticle, sumNDSPriceChangeDocumentArticle

    FILTERS inArticlePriceChangeDocument(p, a)
;


//уценки
FORM logPriceArticle 'История цен'

    OBJECTS a=article
    OBJECTS d=discountPriceChangeDocument
    PROPERTIES(d) READONLY dateTimePriceChangeDocument
    PROPERTIES (d, a) READONLY priceDataDiscountPriceChangeDocumentArticle

    FILTERS inArticlePriceChangeDocument(d, a)

;

showFormLogPriceArticle 'История' (article) = ACTION FORM logPriceArticle OBJECTS a NEWSESSION MODAL;

FORM discountPriceChangeDocument 'Распродажа'

    OBJECTS d=discountPriceChangeDocument FIXED PANEL
    PROPERTIES(d) sidPriceChangeDocument, date, timePriceChangeDocument, dateTimeToPriceChangeDocument

    TREE treeSupplierBrand v=STRING[3], s=supplier, b=brandSupplier
    PROPERTIES READONLY OBJVALUE(v), name(s), name(b)

    TREE treeCategory vv=STRING[3], c=category
    PROPERTIES READONLY OBJVALUE(vv), name(c)

    OBJECTS aa=article
    PROPERTIES (aa) READONLY sidArticle, nameCategoryArticle, nameBrandSupplierArticle
    PROPERTIES (d, aa) inArticlePriceChangeDocument

    FILTERS stringEqualsAll(v), inBrandSupplier(s, b), inSupplierBrandArticle(s, b, aa), stringEqualsAll(vv), inArticleCategory(c, aa)

    OBJECTS a=article
    PROPERTIES(a) READONLY sidArticle, nameCategoryArticle, nameBrandSupplierArticle, showFormLogPriceArticle
    PROPERTIES (d, a) ratePriceChangeDocumentArticle, priceInRateBBasePriceChangeDocumentArticle, priceBBasePriceChangeDocumentArticle,
                      percentDiscountPriceChangeDocumentArticle, priceDiscountPriceChangeDocumentArticle, priceBDiscountPriceChangeDocumentArticle,
                      priceDataDiscountPriceChangeDocumentArticle//, priceRetailPriceChangeDocumentArticle

    FILTERS inArticlePriceChangeDocument(d, a)
     FILTERGROUP filtersCategory
        FILTER 'Показывать артикулы ном. группы' 'F10' inArticleCategory(c, a)
    FILTERGROUP filtersBrand
        FILTER 'Показывать артикулы бренда' 'F11' inArticleBrand(b, a)
    EDIT discountPriceChangeDocument OBJECT d
;

DESIGN discountPriceChangeDocument FROM DEFAULT {
    POSITION treeSupplierBrand.box TO THE LEFT treeCategory.box;
    POSITION treeCategory.box TO THE LEFT aa.box;

    treeSupplierBrand.tree {
        fillHorizontal = 1.5;
    }

    aa.box {
        fillHorizontal = 1.5;
    }
}


FORM discountPriceChangeDocuments 'Распродажи'

    OBJECTS d=discountPriceChangeDocument
    PROPERTIES(d) READONLY sidPriceChangeDocument, date, timePriceChangeDocument, dateTimeToPriceChangeDocument
    PROPERTIES(d) ADDFORM, EDITFORM, delete

    OBJECTS a=article
    PROPERTIES(a) READONLY sidArticle, nameCategoryArticle, nameBrandSupplierArticle
    PROPERTIES (d, a) READONLY ratePriceChangeDocumentArticle, priceInRateBBasePriceChangeDocumentArticle, priceBBasePriceChangeDocumentArticle, priceBDiscountPriceChangeDocumentArticle, priceDataDiscountPriceChangeDocumentArticle//, priceRetailPriceChangeDocumentArticle

    FILTERS inArticlePriceChangeDocument(d, a)
;



toCreatePriceChangeDocument 'Расценка фрахта' =  ACTION (freight) NEWSESSION {
    ADDOBJ basePriceChangeDocument;
    FOR p == addedObject() DO {
        SET freightPriceChangeDocument(p) <- freight AS freight;
        SET priceInPriceChangeDocumentArticle(p, article) <- priceInFreightArticle(freight, article);
        SET RRPPriceChangeDocumentArticle(p, article) <- RRPFreightArticle(freight, article);
        SET inArticlePriceChangeDocument(p, article) <- inArticleFreight(freight, article);
        FORM priceChangeDocument OBJECTS p=addedObject() MODAL;
        IF formResult() == formResult.ok THEN {
            EXEC apply();
        };
    };
} CONFIRM;


FORM freights 'Ценообразование по фрахтам'

    OBJECTS f=freight
    PROPERTIES(f) READONLY date BACKGROUND isPriceChangeDocumentFreight(f), objectClassName, dateArrivalFreight, nameCustomStoreFreight, nameRouteFreight, nameExporterFreight
    PROPERTIES(f) FORCE PANEL toCreatePriceChangeDocument SHOWIF isPriceChangeDocumentFreight(f)

    FILTERGROUP filtersDocument
        FILTER 'Показывать нерасценённые фрахты' 'F11' isPriceChangeDocumentFreight(f)
;

// Акции, распродажи
CLASS ABSTRACT action 'Акция';
CLASS saleAction 'Распродажа': action;
CLASS articleAction 'Акция по позициям': action;

dateFromAction 'Дата с' = DATA DATE(action) IN baseGroup;
dateToAction 'Дата по' = DATA DATE(action) IN baseGroup;

inActionStore 'Магазин в акции' = DATA BOOLEAN(action, store);
inActionArticle 'Артикул в акции' = DATA BOOLEAN(action, article);

minSumClientArticleAction 'Мин. накопленная сумма' = DATA NUMERIC[14,2](articleAction) IN baseGroup;
minSumCheckArticleAction 'Мин. сумма чека' = DATA NUMERIC[14,2](articleAction) IN baseGroup;

// документы товародвижения
CLASS customsFlow 'Расход с СВХ' : historyObject, numberedObject;
CLASS customsFlowDetail 'Строка расхода с СВХ' : outUserBalanceSkuLedger;
CLASS customsFlowPosted 'Закрытый расход с СВХ' : customsFlow, postedObject;

@defineDocumentBasePosted(customsFlow);

@defineDocumentStock(customsFlow, customStore, 'СВХ');



NAVIGATOR {

    customs {
        ADD customStores;
        ADD certificates;
        ADD declarations;
        ADD innerInvoices;
    }

    prices {
        ADD priceChangeDocuments;
        ADD discountPriceChangeDocuments;
        ADD freights;
        ADD coefficientRetails;
    }

    shipment {
        ADD freights;
    }

    adminElement {
        ADD certificate;
        ADD declaration;
        ADD priceChangeDocument;
        ADD discountPriceChangeDocument;
        ADD declarationInvoices;
        ADD coefficientRetail;
        ADD logPriceArticle;
        ADD dialogDate;
        ADD numerators;
        ADD numerator;
        ADD costItemLedger;
    }
}