MODULE RB;

REQUIRE System,

        Utils,
        Stock,
        Barcode,
        Numerator,
        Document,
        Historizable,
        Consignment,
        Declaration,
        CustomsFlow,
        RomanLogicsModule;

PRIORITY Utils, Stock, RomanLogicsModule;

maxDateTime 'Максимальная дата' = DATA DATETIME();


META metaCodePriceBaseDiscount(document, caption)

    priceData###document##Article caption = DATA NUMERIC[14,2](document, article) IN baseGroup;

    order###document = LIST(dateTimePriceChangeDocument(document), document) PERSISTENT;

    concat###document##ArticleDateTime (article, dateTime) = GROUP MAX order###document(document) AND
                                                                       priceData###document##Article(document, article) AND
                                                                       dateTimePriceChangeDocument(document) < (dateTime AS DATETIME) AND
                                                                       dateTimeToPriceChangeDocument(document) > (dateTime AS DATETIME)
                                                                    BY article, dateTime;

    document##ArticleDateTime (article, dateTime) = concat###document##ArticleDateTime(article, dateTime)[2];

    price###document##ArticleDateTime(article, dateTime) = priceData###document##Article(document##ArticleDateTime(article, dateTime), article);
    priceIn###document##ArticleDateTime(article, dateTime) = priceInPriceChangeDocumentArticle(document##ArticleDateTime(article, dateTime), article);
    RRP###document##ArticleDateTime(article, dateTime) = RRPPriceChangeDocumentArticle(document##ArticleDateTime(article, dateTime), article);

    priceB###document##Article 'Предыдущая цена'(document, article) = price###document##ArticleDateTime(article, dateTimePriceChangeDocument(document)) MINCHARWIDTH 15;
    priceInB###document##Article 'Предыдущая поставщика'(document, article) = priceIn###document##ArticleDateTime(article, dateTimePriceChangeDocument(document));
    RRPB###document##Article 'Предыдущая рекомендуемая'(document, article) = RRP###document##ArticleDateTime(article, dateTimePriceChangeDocument(document));

END

//--------------------------------- Наименование товара --------------------------------------------------------------------//

// документы расценки
CLASS STATIC methodPrice 'Метод расчёта'
{
    coefficient 'С надбавкой',
    RRP 'Рекомендемая',
    previous 'Предыдущая'
};

//
EXTEND FORM globalParamForm
     PROPERTIES() maxDateTime
;


CLASS ABSTRACT priceChangeDocument 'Документ изменения цен' : transaction;
CLASS basePriceChangeDocument 'Изменение базовой цены' : priceChangeDocument;
CLASS discountPriceChangeDocument 'Изменение цены продажи' : priceChangeDocument;
CLASS mixPriceChangeDocument 'Изменение базовой и продажи' : basePriceChangeDocument, discountPriceChangeDocument;

CLASS coefficientRetail 'Коэффициент надбавки';

//CLASS diapasonPrices 'Диапазон цен';
//priceFromDiapasonPrices 'от' = DATA NUMERIC[14,3](diapasonPrices) IN baseGroup;
//priceToDiapasonPrices 'до' = DATA NUMERIC[14,3](diapasonPrices) IN baseGroup;
//priceConversionDiapasonPrices 'Округлённая цена' = DATA NUMERIC[14,3](diapasonPrices) IN baseGroup;

TABLE priceChangeDocumentArticle(priceChangeDocument, article);

dateCoefficientRetail 'Дата введения' = DATA DATE(coefficientRetail) IN baseGroup;
markupCoefficientRetail 'Множитель' = DATA NUMERIC[14,3](coefficientRetail) IN baseGroup;

uniqueCoefficientRetail() = GROUP UNIQUE coefficientRetail BY dateCoefficientRetail(coefficientRetail)
                                                        WHERE coefficientRetail IS coefficientRetail;

sidPriceChangeDocument 'Номер' = DATA STRING[10] (priceChangeDocument) IN baseGroup;

timePriceChangeDocument 'Время документа' = DATA TIME (priceChangeDocument);
timePriceChangeDocument (priceChangeDocument) <- currentTime() WHEN ASSIGNED(priceChangeDocument AS priceChangeDocument);

dateTimePriceChangeDocument 'Дата/время документа' (priceChangeDocument) = toDateTime(date(priceChangeDocument), timePriceChangeDocument(priceChangeDocument));

dateTimeToDataPriceChangeDocument 'Дата/время окончания' = DATA DATETIME(priceChangeDocument) IN baseGroup;
dateTimeToPriceChangeDocument 'Дата/время окончания' (priceChangeDocument) = UNION OVERRIDE maxDateTime() IF priceChangeDocument IS priceChangeDocument,
                                                                                            dateTimeToDataPriceChangeDocument(priceChangeDocument) IN baseGroup;

isDiscountPriceChangeDocument 'Распродажа' = DATA BOOLEAN(priceChangeDocument) IN baseGroup;
keepDiscountPriceChangeDocument 'Учитывать скидки' = DATA BOOLEAN(priceChangeDocument) IN baseGroup;

//связь документа и фрахта
freightPriceChangeDocument 'Фрахт документа (ИД)' = DATA freight(basePriceChangeDocument) IN idGroup;

quantityPriceChangeDocumentFreight (freight) = GROUP SUM 1 IF freightPriceChangeDocument(basePriceChangeDocument) BY freightPriceChangeDocument(basePriceChangeDocument);
isPriceChangeDocumentFreight (freight) = TRUE IF NOT quantityPriceChangeDocumentFreight(freight) AND freight IS freight;


priceInPriceChangeDocumentArticle 'Цена поставщика' = DATA NUMERIC[14,2](basePriceChangeDocument, article) IN baseGroup;
RRPPriceChangeDocumentArticle 'Рекомендуемая цена' = DATA NUMERIC[14,2](basePriceChangeDocument, article) IN baseGroup;

ratePriceChangeDocument 'Обменный курс' (priceChangeDocument, article) = nearestRateExchange(typeExchangeRetail(),
                                                                                             currencyTypeExchange(typeExchangeSTX()),
                                                                                             priceChangeDocument) AND article IS article;

rateDataPriceChangeDocumentArticle 'Обменный курс' = DATA NUMERIC[14,2](priceChangeDocument, article) IN baseGroup;

ratePriceChangeDocumentArticle 'Обменный курс' (basePriceChangeDocument, article) = UNION OVERRIDE ratePriceChangeDocument(basePriceChangeDocument, article),
                                                                                                   rateDataPriceChangeDocumentArticle(basePriceChangeDocument, article);

coefficientRetailDate(coefficientRetail, date) = coefficientRetail IF dateCoefficientRetail(coefficientRetail) <= date AND date AS DATE;
actingCoefficientRetailDate(date) = GROUP MAX dateCoefficientRetail(coefficientRetailDate(coefficientRetail, date)) BY date;

coefficientRetailPriceChangeDocument 'Коэффициент документа' (basePriceChangeDocument) = uniqueCoefficientRetail(actingCoefficientRetailDate(date(basePriceChangeDocument))) IN idGroup;
markupCoefficientRetailPriceChangeDocumentArticle 'Коэффициент документа' (basePriceChangeDocument, article) = markupCoefficientRetail(coefficientRetailPriceChangeDocument(basePriceChangeDocument))
                                                                                                               AND article IS article IN baseGroup;

markupPriceChangeDocumentArticle 'Коэффициент артикула' = DATA NUMERIC[14,2] (basePriceChangeDocument, article);
markupPriceChangeDocumentArticle (basePriceChangeDocument, article) <- markupCoefficientRetailPriceChangeDocumentArticle(basePriceChangeDocument, article) WHEN ASSIGNED(basePriceChangeDocument IS basePriceChangeDocument);

priceOutPriceChangeDocumentArticle 'Цена с надбавкой' (basePriceChangeDocument, article) = round2(priceInPriceChangeDocumentArticle(basePriceChangeDocument, article) *
                                                                                                  markupCoefficientRetailPriceChangeDocumentArticle(basePriceChangeDocument, article));

isRRPPriceChangeDocumentArticle 'Взять рекомендованную' = DATA BOOLEAN (basePriceChangeDocument, article);
isPreviousPriceChangeDocumentArticle 'Взять предыдущую' = DATA BOOLEAN (basePriceChangeDocument, article);

@metaCodePriceBaseDiscount(basePriceChangeDocument, 'Базовая цена');
@metaCodePriceBaseDiscount(discountPriceChangeDocument, 'Цена с уценкой');

methodPriceChangeDocumentArticle 'Метод расчёта (ИД)' = DATA methodPrice(basePriceChangeDocument, article);
notMethodPriceChangeDocumentArticle = TRUE IF NOT methodPriceChangeDocumentArticle(basePriceChangeDocument, article);

nameMethodPriceChangeDocumentArticle 'Метод расчёта' (basePriceChangeDocument, article) = name(methodPriceChangeDocumentArticle(basePriceChangeDocument, article)) MAXCHARWIDTH 20;

RRPRatePriceChangeDocumentArticle 'Рекомендуемая (руб.)' (basePriceChangeDocument, article) = round0(RRPPriceChangeDocumentArticle(basePriceChangeDocument, article) *
                                                                                                     ratePriceChangeDocumentArticle(basePriceChangeDocument, article)) MINCHARWIDTH 15;

priceOutRatePriceChangeDocumentArticle 'С надбавкой (руб.)' (basePriceChangeDocument, article) = round0(priceOutPriceChangeDocumentArticle(basePriceChangeDocument, article) *
                                                                                                        ratePriceChangeDocumentArticle(basePriceChangeDocument, article)) MINCHARWIDTH 15;


priceRetailPriceChangeDocumentArticle 'Цена розничная' (basePriceChangeDocument, article) =
           CASE
               WHEN methodPriceChangeDocumentArticle(basePriceChangeDocument, article) == methodPrice.coefficient THEN priceOutRatePriceChangeDocumentArticle(basePriceChangeDocument, article)
               WHEN methodPriceChangeDocumentArticle(basePriceChangeDocument, article) == methodPrice.RRP THEN RRPRatePriceChangeDocumentArticle(basePriceChangeDocument, article)
               WHEN methodPriceChangeDocumentArticle(basePriceChangeDocument, article) == methodPrice.previous THEN PREV(priceBBasePriceChangeDocumentArticle(basePriceChangeDocument, article))
               DEFAULT 0 AND basePriceChangeDocument IS basePriceChangeDocument AND article IS article
           END MINCHARWIDTH 15;


priceDataBasePriceChangeDocumentArticle(basePriceChangeDocument, article) <- priceRetailPriceChangeDocumentArticle(basePriceChangeDocument, article)
                            WHEN CHANGED (methodPriceChangeDocumentArticle(basePriceChangeDocument, article)) OR
                                 CHANGED (priceOutRatePriceChangeDocumentArticle(basePriceChangeDocument, article)) OR
                                 CHANGED (RRPRatePriceChangeDocumentArticle(basePriceChangeDocument, article));

percentNDSPriceChangeDocumentArticle 'НДС (%)' = DATA NUMERIC[14,3](basePriceChangeDocument, article) IN baseGroup;
sumNDSPriceChangeDocumentArticle 'НДС (руб.)' = [round0(X*Y/(Y+100))](priceDataBasePriceChangeDocumentArticle(basePriceChangeDocument, article),
                                                                      percentNDSPriceChangeDocumentArticle(basePriceChangeDocument, article));

// для уценки
priceInRateBBasePriceChangeDocumentArticle 'Цена поставщика (руб.)' (discountPriceChangeDocument, article) = ratePriceChangeDocumentArticle (discountPriceChangeDocument, article) *
                                                                                                             priceInBBasePriceChangeDocumentArticle(discountPriceChangeDocument, article) MINCHARWIDTH 15;

percentDiscountPriceChangeDocumentArticle 'Процент уценки' = DATA NUMERIC[14,2](discountPriceChangeDocument, article) IN baseGroup;

priceDiscountPriceChangeDocumentArticle 'Цена без процентов' (discountPriceChangeDocument, article) = [roundM1(X*(100-Y)/100)]
                                                                                                        (priceBBasePriceChangeDocumentArticle(discountPriceChangeDocument, article),
                                                                                                         percentDiscountPriceChangeDocumentArticle(discountPriceChangeDocument, article)) IN baseGroup;


priceDataDiscountPriceChangeDocumentArticle(discountPriceChangeDocument, article) <- priceDiscountPriceChangeDocumentArticle(discountPriceChangeDocument, article)
                                        WHEN CHANGED (priceDiscountPriceChangeDocumentArticle(discountPriceChangeDocument, article));


inBrandSupplier (supplier, brandSupplier) = supplierBrandSupplier(brandSupplier) == supplier;
inArticleBrand (brandSupplier, article) = brandSupplierArticle(article) == brandSupplier;

inArticleCategory (category, article) = UNION OVERRIDE categoryArticle(article) == category,
                                                       article == article AND NOT category;

inArticlePriceChangeDocument 'Артикул в документе' = DATA BOOLEAN(priceChangeDocument, article);
inArticleFreight (freight, article) = TRUE IF quantityFreightArticle(freight, article);

stringEqualsAll(string) = string == 'Все';

inSupplierBrandArticle(supplier, brand, article) = UNION OVERRIDE brandSupplierArticle(article) == brand AND supplier,
                                                                  supplierArticle(article) == supplier AND NOT brand,
                                                                  article == article AND NOT supplier AND NOT brand;

toSetPricesPriceChangeDocument 'Взять цены поставщика' =  ACTION (basePriceChangeDocument) {
    FOR p == basePriceChangeDocument AND inArticlePriceChangeDocument(p, article) DO {
        SET priceInPriceChangeDocumentArticle(p, article) <- priceInBBasePriceChangeDocumentArticle (p, article);
        SET RRPPriceChangeDocumentArticle(p, article) <- RRPBBasePriceChangeDocumentArticle (p, article);
    };
};


FORM coefficientRetail 'Коэффициент надбавки'

    OBJECTS c=coefficientRetail FIXED PANEL
    PROPERTIES(c) dateCoefficientRetail, markupCoefficientRetail

    EDIT coefficientRetail OBJECT c
;

FORM coefficientRetails 'История коэффициентов'

    OBJECTS c=coefficientRetail
    PROPERTIES(c) READONLY dateCoefficientRetail, markupCoefficientRetail
    PROPERTIES(c) ADDFORM, EDITFORM, delete
;


FORM priceChangeDocument 'Документ базовых цен'

    OBJECTS p=basePriceChangeDocument FIXED PANEL
    PROPERTIES(p) sidPriceChangeDocument, date, timePriceChangeDocument, toSetPricesPriceChangeDocument

    TREE treeSupplierBrand v=STRING[3], s=supplier, b=brandSupplier
    PROPERTIES READONLY OBJVALUE(v), name(s), name(b)

    TREE treeCategory vv=STRING[3], c=category
    PROPERTIES READONLY OBJVALUE(vv), name(c)

    OBJECTS aa=article
    PROPERTIES (aa) READONLY sidArticle, nameCategoryArticle, nameBrandSupplierArticle
    PROPERTIES (p, aa) inArticlePriceChangeDocument

    FILTERS stringEqualsAll(v), inBrandSupplier(s, b), inSupplierBrandArticle(s, b, aa), stringEqualsAll(vv), inArticleCategory(c, aa)

    OBJECTS a=article
    PROPERTIES(a) READONLY sidArticle, nameCategoryArticle, nameBrandSupplierArticle
    PROPERTIES (p, a) priceInPriceChangeDocumentArticle,
                      RRPPriceChangeDocumentArticle, markupPriceChangeDocumentArticle, priceOutPriceChangeDocumentArticle,
                      ratePriceChangeDocumentArticle, RRPRatePriceChangeDocumentArticle, priceOutRatePriceChangeDocumentArticle,
                      priceBBasePriceChangeDocumentArticle, nameMethodPriceChangeDocumentArticle, priceRetailPriceChangeDocumentArticle,
                      priceDataBasePriceChangeDocumentArticle, percentNDSPriceChangeDocumentArticle, sumNDSPriceChangeDocumentArticle

    FILTERS inArticlePriceChangeDocument(p, a)

    FILTERGROUP filtersMethod
        FILTER 'Показывать без метода' 'F9' notMethodPriceChangeDocumentArticle(p, a)

    FILTERGROUP filtersCategory
        FILTER 'Показывать артикулы ном. группы' 'F10' inArticleCategory(c, a)
    FILTERGROUP filtersBrand
        FILTER 'Показывать артикулы бренда' 'F11' inArticleBrand(b, a)

    EDIT basePriceChangeDocument OBJECT p
;

DESIGN priceChangeDocument FROM DEFAULT {
    POSITION treeSupplierBrand.box TO THE LEFT treeCategory.box;
    POSITION treeCategory.box TO THE LEFT aa.box;

    treeSupplierBrand.tree {
        fillHorizontal = 1.5;
    }

    aa.box {
        fillHorizontal = 1.5;
    }

}

FORM priceChangeDocuments 'Документы базовых цен'

    OBJECTS p=basePriceChangeDocument
    PROPERTIES(p) READONLY sidPriceChangeDocument, date, timePriceChangeDocument, dateTimeToPriceChangeDocument
    PROPERTIES(p) ADDFORM, EDITFORM, delete

    OBJECTS a=article
    PROPERTIES(a) READONLY sidArticle, nameCategoryArticle, nameBrandSupplierArticle
    PROPERTIES (p, a) READONLY priceInPriceChangeDocumentArticle,
                               RRPPriceChangeDocumentArticle, markupPriceChangeDocumentArticle, priceOutPriceChangeDocumentArticle,
                               isRRPPriceChangeDocumentArticle, ratePriceChangeDocumentArticle,
                               priceBBasePriceChangeDocumentArticle, priceRetailPriceChangeDocumentArticle,
                               priceDataBasePriceChangeDocumentArticle, percentNDSPriceChangeDocumentArticle, sumNDSPriceChangeDocumentArticle

    FILTERS inArticlePriceChangeDocument(p, a)
;


//уценки
FORM logPriceArticle 'История цен'

    OBJECTS a=article
    OBJECTS d=discountPriceChangeDocument
    PROPERTIES(d) READONLY dateTimePriceChangeDocument
    PROPERTIES (d, a) READONLY priceDataDiscountPriceChangeDocumentArticle

    FILTERS inArticlePriceChangeDocument(d, a)

;

showFormLogPriceArticle 'История' (article) = ACTION FORM logPriceArticle OBJECTS a NEWSESSION MODAL;

FORM discountPriceChangeDocument 'Распродажа'

    OBJECTS d=discountPriceChangeDocument FIXED PANEL
    PROPERTIES(d) sidPriceChangeDocument, date, timePriceChangeDocument, dateTimeToPriceChangeDocument

    TREE treeSupplierBrand v=STRING[3], s=supplier, b=brandSupplier
    PROPERTIES READONLY OBJVALUE(v), name(s), name(b)

    TREE treeCategory vv=STRING[3], c=category
    PROPERTIES READONLY OBJVALUE(vv), name(c)

    OBJECTS aa=article
    PROPERTIES (aa) READONLY sidArticle, nameCategoryArticle, nameBrandSupplierArticle
    PROPERTIES (d, aa) inArticlePriceChangeDocument

    FILTERS stringEqualsAll(v), inBrandSupplier(s, b), inSupplierBrandArticle(s, b, aa), stringEqualsAll(vv), inArticleCategory(c, aa)

    OBJECTS a=article
    PROPERTIES(a) READONLY sidArticle, nameCategoryArticle, nameBrandSupplierArticle, showFormLogPriceArticle
    PROPERTIES (d, a) ratePriceChangeDocumentArticle, priceInRateBBasePriceChangeDocumentArticle, priceBBasePriceChangeDocumentArticle,
                      percentDiscountPriceChangeDocumentArticle, priceDiscountPriceChangeDocumentArticle, priceBDiscountPriceChangeDocumentArticle,
                      priceDataDiscountPriceChangeDocumentArticle//, priceRetailPriceChangeDocumentArticle

    FILTERS inArticlePriceChangeDocument(d, a)
     FILTERGROUP filtersCategory
        FILTER 'Показывать артикулы ном. группы' 'F10' inArticleCategory(c, a)
    FILTERGROUP filtersBrand
        FILTER 'Показывать артикулы бренда' 'F11' inArticleBrand(b, a)
    EDIT discountPriceChangeDocument OBJECT d
;

DESIGN discountPriceChangeDocument FROM DEFAULT {
    POSITION treeSupplierBrand.box TO THE LEFT treeCategory.box;
    POSITION treeCategory.box TO THE LEFT aa.box;

    treeSupplierBrand.tree {
        fillHorizontal = 1.5;
    }

    aa.box {
        fillHorizontal = 1.5;
    }
}


FORM discountPriceChangeDocuments 'Распродажи'

    OBJECTS d=discountPriceChangeDocument
    PROPERTIES(d) READONLY sidPriceChangeDocument, date, timePriceChangeDocument, dateTimeToPriceChangeDocument
    PROPERTIES(d) ADDFORM, EDITFORM, delete

    OBJECTS a=article
    PROPERTIES(a) READONLY sidArticle, nameCategoryArticle, nameBrandSupplierArticle
    PROPERTIES (d, a) READONLY ratePriceChangeDocumentArticle, priceInRateBBasePriceChangeDocumentArticle, priceBBasePriceChangeDocumentArticle,
                               priceBDiscountPriceChangeDocumentArticle, priceDataDiscountPriceChangeDocumentArticle//, priceRetailPriceChangeDocumentArticle

    FILTERS inArticlePriceChangeDocument(d, a)
;


toCreatePriceChangeDocument 'Расценка фрахта' =  ACTION (freight) NEWSESSION {
    ADDOBJ basePriceChangeDocument;
    FOR p == addedObject() DO {
        SET freightPriceChangeDocument(p) <- freight AS freight;
        SET priceInPriceChangeDocumentArticle(p, article) <- priceInFreightArticle(freight, article);
        SET RRPPriceChangeDocumentArticle(p, article) <- RRPFreightArticle(freight, article);
        SET inArticlePriceChangeDocument(p, article) <- inArticleFreight(freight, article);
        FORM priceChangeDocument OBJECTS p=addedObject() MODAL;
        IF formResult() == formResult.ok THEN {
            EXEC apply();
        };
    };
} CONFIRM;


FORM freights 'Ценообразование по фрахтам'

    OBJECTS f=freight
    PROPERTIES(f) READONLY date BACKGROUND isPriceChangeDocumentFreight(f), objectClassName, dateArrivalFreight, nameCustomStoreFreight, nameRouteFreight, nameExporterFreight
    PROPERTIES(f) FORCE PANEL toCreatePriceChangeDocument SHOWIF isPriceChangeDocumentFreight(f)

    FILTERGROUP filtersDocument
        FILTER 'Показывать нерасценённые фрахты' 'F11' isPriceChangeDocumentFreight(f)
;

// Акции, распродажи
CLASS ABSTRACT action 'Акция';
CLASS saleAction 'Распродажа': action;
CLASS articleAction 'Акция по позициям': action;

dateFromAction 'Дата с' = DATA DATE(action) IN baseGroup;
dateToAction 'Дата по' = DATA DATE(action) IN baseGroup;

inActionStore 'Магазин в акции' = DATA BOOLEAN(action, store);
inActionArticle 'Артикул в акции' = DATA BOOLEAN(action, article);

minSumClientArticleAction 'Мин. накопленная сумма' = DATA NUMERIC[14,2](articleAction) IN baseGroup;
minSumCheckArticleAction 'Мин. сумма чека' = DATA NUMERIC[14,2](articleAction) IN baseGroup;

// Приход на склад

CLASS inWarehouseFlow 'Приход на склад' : historyObject, numberedObject;
CLASS inWarehouseFlowPosted 'Закрытый приход с СВХ' : inWarehouseFlow, postedObject;

CLASS inWarehouseFlowDetail 'Строка прихода на склад' : inTransferBalanceSkuLedger;

CLASS inWarehouseScan 'Сканирование';


@defineDocumentBasePosted(inWarehouseFlow);

@defineDocumentStock(inWarehouseFlow, warehouse, 'Оптовый склад');

@defineDocumentDetailQuantity(inWarehouseFlow);


importerWarehouse 'Импортер ИД' (warehouse) = DATA importer(warehouse);

customFlowInWarehouseFlow 'Расход прихода (ИД)' = DATA customsFlow(inWarehouseFlow) IN idGroup;
numberCustomFlowInWarehouseFlow 'Расход прихода (номер)' (inWarehouseFlow) = numberObject(customFlowInWarehouseFlow(inWarehouseFlow)) IN baseGroup;
seriesCustomFlowInWarehouseFlow 'Расход прихода (серия)' (inWarehouseFlow) = seriesObject(customFlowInWarehouseFlow(inWarehouseFlow)) IN baseGroup;

inCustomsFlowInWarehouseFlow (inWarehouseFlow, customsFlow) = customFlowInWarehouseFlow(inWarehouseFlow) == customsFlow;

skuInWarehouseFlowDetail 'Товар (ИД)' (inWarehouseFlowDetail) = DATA sku(inWarehouseFlowDetail) IN idGroup;

descriptionInWarehouseFlowDetail 'Описание' (inWarehouseFlowDetail) = DATA STRING[100](inWarehouseFlowDetail);

quantityInWarehouseFlowBatch (inWarehouseFlow, batch) = quantityCustomsFlowBatch(customFlowInWarehouseFlow(inWarehouseFlow), batch);
quantityInWarehouseFlowDetailBatch (inWarehouseFlowDetail, batch) = quantityInWarehouseFlowBatch(inWarehouseFlowInWarehouseFlowDetail(inWarehouseFlowDetail), batch);

limitInTransferBalanceSkuLedgerBatch (inWarehouseFlowDetail, batch) += quantityInWarehouseFlowDetailBatch (inWarehouseFlowDetail, batch);

quantityDCustomFlowSku (customFlow, sku) = GROUP SUM quantityCustomsFlowDetail(customsFlowDetail)
                                                  BY customsFlowCustomsFlowDetail(customsFlowDetail), skuCustomsFlowDetail(customsFlowDetail);

articleInWarehouseFlowDetail 'Артикул (ИД)' (inWarehouseFlowDetail) = articleSku(skuInWarehouseFlowDetail(inWarehouseFlowDetail));
sidArticleInWarehouseFlowDetail 'Артикул' (inWarehouseFlowDetail) = sidArticle(articleInWarehouseFlowDetail(inWarehouseFlowDetail));

quantityOriginInWarehouseFlowDetail 'Кол-во плановое' (inWarehouseFlowDetail) = DATA NUMERIC[14,2](inWarehouseFlowDetail) IN baseGroup;

inWarehouseFlowDetailInWarehouseFlowSku (inWarehouseFlow, sku) = GROUP MAX inWarehouseFlowDetail BY inWarehouseFlowInWarehouseFlowDetail(inWarehouseFlowDetail),
                                                                                                    skuInWarehouseFlowDetail(inWarehouseFlowDetail);


@implementBalanceSkuLedger (inWarehouseFlow, sku, warehouse);

currentBalanceDeclaration 'Остаток по декларации' (declaration) = GROUP SUM currentBalanceBatch(declarationDetail)
    BY declarationDeclarationDetail (declarationDetail);

toFillInWarehouseDetailsInWarehouseFlow 'Заполнить приход по расходу' =  ACTION (inWarehouseFlow) {
    FOR quantityDCustomFlowSku (customFlowInWarehouseFlow(inWarehouseFlow), sku) DO {
        ADDOBJ inWarehouseFlowDetail;
        FOR w == addedObject() DO {
            SET skuInWarehouseFlowDetail(w) <- sku AS sku;
            SET inWarehouseFlowInWarehouseFlowDetail(w) <- inWarehouseFlow AS inWarehouseFlow;
            SET quantityOriginInWarehouseFlowDetail(w) <- quantityDCustomFlowSku(customFlowInWarehouseFlow(inWarehouseFlowInWarehouseFlowDetail(w)), sku);
        };
    };
} CONFIRM;


idBarcodeInWarehouseScan 'Штрих-код' = DATA STRING[13] (inWarehouseScan);
inWarehouseFlowInWarehouseScan 'Приход (ИД)' = DATA inWarehouseFlow(inWarehouseScan) IN idGroup;
skuInWarehouseScan 'Товар (ИД)' = DATA sku(inWarehouseScan) IN idGroup;


@defineAddDetailDialogBarcode(inWarehouseFlow);
//addInWarehouseScanBarcodeFill 'Добавить' = ACTION (inWarehouseFlow) {
//     FORM barcodeInput MODAL;
//
//     IF formResult() == formResult.ok THEN {
//         SET tmpSku() <- barcodeToObject(chosenString('barcode'));
//
//         IF tmpSku() IS sku THEN {
//              IF inWarehouseFlowDetailInWarehouseFlowSku(inWarehouseFlow, tmpSku()) IS inWarehouseFlowDetail THEN {
//                 SET quantityDataInWarehouseFlowDetail(detail) IF detail == inWarehouseFlowDetailInWarehouseFlowSku(inWarehouseFlow, tmpSku()) <-
//                     quantityDataInWarehouseFlowDetail(inWarehouseFlowDetailInWarehouseFlowSku(inWarehouseFlow, tmpSku())) (+) (1 IF (inWarehouseFlow IS inWarehouseFlow));
//              }
//
//              ELSE {
//                 ADDOBJ inWarehouseFlowDetail;
//                 FOR w == addedObject() DO {
//                     SET inWarehouseFlowInWarehouseFlowDetail(w) <- inWarehouseFlow AS inWarehouseFlow;
//                     SET skuInWarehouseFlowDetail(w) <- tmpSku();
//                     SET quantityDataInWarehouseFlowDetail(w) <- 1;
//                 };
//              };
//         }
//
//         ELSE
//            MESSAGE 'Не найден штрих-код';
//
//     };
//} TOOLBAR EDITKEY 'F4';

FORM declarationsCustomsFlow 'Декларации'
    OBJECTS c=customsFlow FIXED PANEL
    PROPERTIES (c) READONLY numberObject, seriesObject, dateCustomsFlow, nameCustomStoreCustomsFlow//, nameStoreCustomsFlow

    OBJECTS de=declaration

    PROPERTIES (c, de) inCustomsFlowDeclaration
    PROPERTIES (de) READONLY sidDeclaration, date, nameImporterDeclaration, currentBalanceDeclaration
    FILTERS isCustomsDeclarationCustomsFlow (de, c)
;


FORM inWarehouseFlow 'Приход на оптовый склад'

    OBJECTS w = inWarehouseFlow FIXED PANEL
    PROPERTIES (w) numberObject, seriesObject, dateInWarehouseFlow, timeInWarehouseFlow, nameWarehouseInWarehouseFlow,
                   numberCustomFlowInWarehouseFlow, seriesCustomFlowInWarehouseFlow, toFillInWarehouseDetailsInWarehouseFlow, addDetailDialogBarcodeInWarehouseFlow

    OBJECTS d = inWarehouseFlowDetail
    PROPERTIES(d) indexInWarehouseFlowDetail, barcodeLedger, nameBrandLedger, sidArticleInWarehouseFlowDetail,
                  sidColorLedger, nameColorLedger, sidSizeLedger, quantityOriginInWarehouseFlowDetail, quantityInWarehouseFlowDetail
    PROPERTIES(d) ADDOBJ, delete

    FILTERS inInWarehouseFlowInWarehouseFlowDetail(w, d)

    EDIT inWarehouseFlow OBJECT w
;

FORM inWarehouseFlows 'Приходы на оптовый склад'
    OBJECTS w = inWarehouseFlow
    PROPERTIES (w) READONLY numberObject, seriesObject, dateInWarehouseFlow, timeInWarehouseFlow, nameWarehouseInWarehouseFlow

    PROPERTIES (w) ADDFORM, EDITFORM SHOWIF isDraftInWarehouseFlow(w), delete FORCE PANEL SHOWIF isDraftInWarehouseFlow(w),
                   postInWarehouseFlow SHOWIF isDraftInWarehouseFlow(w), unpostInWarehouseFlow SHOWIF isPostedInWarehouseFlow(w)

    OBJECTS d = inWarehouseFlowDetail
    PROPERTIES(d) READONLY isPostedBalanceSkuLedger, indexInWarehouseFlowDetail, barcodeLedger,
                           nameBrandLedger, sidArticleInWarehouseFlowDetail, sidColorLedger, nameColorLedger, sidSizeLedger,
                           quantityOriginInWarehouseFlowDetail, quantityInWarehouseFlowDetail

    FILTERS inInWarehouseFlowInWarehouseFlowDetail(w, d)
;

DESIGN inWarehouseFlows FROM DEFAULT {
    PROPERTY (delete(w)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
}

DESIGN importer FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        co.box {
        childConstraints = TO THE BOTTOM;

        NEW row1 {
            childConstraints = TO THE RIGHT;
            ADD co.lawGroup{
                childConstraints = TO THE BOTTOM;
            }

            NEW row11 {
                title = 'Оригинал';
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY (nameOrigin(co));
                ADD PROPERTY (addressOriginSubject(co));
                ADD PROPERTY (addressSubject(co));
                ADD PROPERTY (contractImporter(co));
                ADD PROPERTY (sidImporter(co));
            }
        }
        NEW row2{
            childConstraints = TO THE RIGHT;
            ADD co.contactGroup {
                childConstraints = TO THE BOTTOM;
            }
            ADD co.managementGroup {
                childConstraints = TO THE BOTTOM;
            }
            ADD co.docGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
}

//       co.box {
//            childConstraints = TO THE RIGHT;
//
//            NEW oneCase {
//                childConstraints = TO THE BOTTOM;
//                ADD PROPERTY(name(co));
//                ADD PROPERTY(fullNameLegalEntity(co));
//                ADD PROPERTY(addressLegalEntity(co));
//                ADD PROPERTY(phoneLegalEntity(co));
//                ADD PROPERTY(UNPLegalEntity(co));
//                ADD co.contactGroup;
//            };
//
//            NEW twoCase{
//                childConstraints = TO THE BOTTOM;
//                ADD co.docGroup;
//            }
//            NEW threeCase {
//                title = 'Оригинал';
//                childConstraints = TO THE RIGHTBOTTOM;
//                ADD PROPERTY (commonName(co));
//                ADD PROPERTY (nameOrigin(co));
//                ADD PROPERTY (addressOriginSubject(co));
//                ADD PROPERTY (addressSubject(co));
//                ADD PROPERTY (contractImporter(co));
//                ADD PROPERTY (sidImporter(co));
//            }
//       }

        NEW firstCase BEFORE functions.box {
            type = TABBED;
            ADD a.box;
            NEW v.box { title = 'Поставщик-договор'; }
            ADD s.box IN v.box;
        //            ADD c.box IN v.box;
        //            POSITION s.box TO THE LEFT c.box;
        }
    }
}


NAVIGATOR {
    classifier {
        ADD UOM;
        ADD taxes;
        ADD banks;
        ADD employees;
    }
    customs {
        ADD customStores;
        ADD certificates;
        ADD declarations;
        ADD innerInvoices;
        ADD customsFlows;
        ADD inWarehouseFlows;
    }

    prices {
        ADD priceChangeDocuments;
        ADD discountPriceChangeDocuments;
        ADD freights;
        ADD coefficientRetails;
    }

    accountInfo {
        ADD currentBalanceSkuStock;
        ADD costSkuLedger;
        ADD costSkuBatchLedger;
        ADD balanceSkuStock;
        ADD currentBalanceBatchStock;
        ADD balanceBatchStock;
    }

    printForms{
        ADD consignmentVerticalA;
        ADD consignmentHorizontalA;
        ADD consignmentVerticalB;
        ADD consignmentHorizontalB;
        ADD consignmentAttach;
        ADD consignmentSimpleHorizontal;
        ADD consignmentSimpleVertical;
        ADD consignmentSimpleAttach;
        ADD consignment;
    }
    adminElement {
        ADD certificate;
        ADD declaration;
        ADD priceChangeDocument;
        ADD discountPriceChangeDocument;
        ADD declarationInvoices;
        ADD coefficientRetail;
        ADD logPriceArticle;
        ADD dialogDate;
        ADD numerators;
        ADD numerator;
        ADD customsFlow;
        ADD inWarehouseFlow;
        ADD declarationDetailCustomsFlowInput;
        ADD unitsOfMeasure;
        ADD tax;
        ADD ware;
        ADD wares;
        ADD ownership;
        ADD addWarePrice;
        ADD dialogWarePrice;
        ADD addRangeWare;
        ADD dialogRangeWare;
        ADD addAddressLegalEntity;
        ADD dialogAddressLegalEntity;
        ADD addPostAddressLegalEntity;
        ADD dialogPostAddressLegalEntity;
        ADD addManagerLegalEntity;
        ADD dialogManagerLegalEntity;
        ADD addAccountantLegalEntity;
        ADD dialogAccountantLegalEntity;
        ADD addPhoneLegalEntity;
        ADD dialogPhoneLegalEntity;
        ADD addAddressBank;
        ADD dialogAddressBank;
        ADD bank;
        ADD position;
        ADD employee;
        ADD employeeDialog;
        ADD barcodeInput;
        ADD declarationsCustomsFlow;
    }
}