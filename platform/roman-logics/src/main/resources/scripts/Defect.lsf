MODULE Defect;

REQUIRE System,
        Document,
        RomanDocument,
        Stock,
        RomanStock,
        DocumentTransfer,
        RetailPrice,
        WriteOff,
        StorePriceTransfer,
        WholesalePrice,
        Consignment;

PRIORITY Stock;

// ----------------------------------------- Группы складов ------------------------------ //
CLASS groupDefectStock 'Группа складов брака' : stockGroup, employeeDivisionGroup;

@defineHierarchy(groupDefectStock);
parentStockGroup (stockGroup) += parentGroupDefectStock (stockGroup);

// ----------------------------------------- Склады ------------------------------ //

CLASS defectStock 'Склад брака' : stock, employeeDivision;
TABLE defectStock (defectStock);

groupDefectStockDefectStock (defectStock) = DATA groupDefectStock (defectStock);
nameGroupDefectStockDefectStock 'Группа складов' (defectStock) = name(groupDefectStockDefectStock(defectStock)) IN baseGroup;
stockGroupStock (stock) += groupDefectStockDefectStock (stock);

companyDefectStock (defectStock) = DATA company (defectStock);
nameCompanyDefectStock 'Компания' (defectStock) = name(companyDefectStock(defectStock)) IN baseGroup;
companyStock (stock) += companyDefectStock(stock);

addressDefectStock 'Адрес' (defectStock) = DATA STRING[100] (defectStock);
addressStock(stock) += addressDefectStock(stock);

employeeDivisionGroupEmployeeDivision (employeeDivision) += groupDefectStockDefectStock(employeeDivision);

// -------------------------------------------------- Формы ----------------------------------------- //
FORM defectStock 'Склад брака'
    OBJECTS           d=defectStock FIXED PANEL
    PROPERTIES(d)     name, nameGroupDefectStockDefectStock, addressDefectStock, nameCompanyDefectStock, nameWriteOffCommitteeStock

    ORDER BY          name
    EDIT defectStock OBJECT d
;

FORM defectStocks 'Склады брака'
    OBJECTS           d=defectStock
    PROPERTIES(d)     READONLY name, addressDefectStock, nameCompanyDefectStock
    PROPERTIES(d)     ADDFORM, EDITFORM, delete

    ORDER BY          name
;

// -------------------------------------- Внешние склады ------------------------------- //

CLASS ABSTRACT externalStock 'Внешний склад' : named;
TABLE externalStock(externalStock);

CLASS repairShop 'Ремонтная мастерская' : externalStock;
TABLE repairShop(repairShop);

CLASS cleaningStock 'Химчистка' : externalStock;
TABLE cleaningStock(cleaningStock);

addressExternalStock 'Адрес' = DATA STRING[100] (externalStock) IN lawGroup MINCHARWIDTH 30 PREFCHARWIDTH 50;
phoneExternalStock 'Телефон' = DATA STRING[100] (externalStock) IN lawGroup MINCHARWIDTH 30 PREFCHARWIDTH 50;
siteExternalStock 'Сайт' = DATA STRING[100] (externalStock) IN lawGroup MINCHARWIDTH 30 PREFCHARWIDTH 50;
workingTimeExternalStock 'Время работы' = DATA STRING[100] (externalStock) IN contactGroup MINCHARWIDTH 30 PREFCHARWIDTH 50;
contactNameExternalStock 'Контактное лицо' = DATA STRING[100] (externalStock) IN contactGroup MINCHARWIDTH 30 PREFCHARWIDTH 50;

infoExternalStock 'Дополнительная информация' = DATA STRING[300] (externalStock) IN contactGroup MINCHARWIDTH 30 PREFCHARWIDTH 50;

// -------------------------------------- Ремонт ------------------------------- //

CLASS repair 'Передача в ремонт' : historyObject, numberedObject, consignment, outAccountDocumentLedger;
CLASS repairPosted 'Проведенная передача в ремонт' : repair, postedObject;
CLASS repairDetail 'Строка передачи в ремонт' : outFIFOSkuLedger, consignmentDetail;

@defineDocument(repair);

@defineDocumentDetailNote(repair);

@defineDocumentStock(repair, stock, 'Склад-отправитель');
@defineDocumentStockPrefix(repair, repairShop, 'Ремонтная мастерская', destination);


@defineDocumentPosted(repair);

@defineDocumentCurrency(repair);
@deriveDocumentCurrency(repair, stock);

@defineDocumentDescription (repair, 'Передача в ремонт');

@defineDocumentDetailNumbered(repair);

@defineDocumentDetailSku(repair, sku);

@defineDocumentDetailQuantity(repair);

@defineDocumentDetailPackWeightSku(repair);

@defineDocumentDetailSkuBalance(repair, sku, stock);

@defineDocumentHeaderQuantity(repair);
@defineDocumentHeaderSkuQuantity(repair, sku);

// Кнопки подбора
@defineAddDetailDialogSkuStock(repair, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(repair, sku);


META defineDocumentFormDefectProcess(object, stockProp1, stockProp2, formCaption, formsCaption)

    FORM object formCaption
        OBJECTS t = object FIXED PANEL

        PROPERTIES (t) objectClassName, numberObject, seriesObject, date###object, time###object,
                       name###stockProp1###object, nameDestination###stockProp2###object, note###object,
                       count###object##Detail###object, quantity###object##Detail###object

        OBJECTS d = object##Detail

//        PROPERTIES(t) TODRAW d addDetailDialogSkuStock###object##Detail###object, addDetailInputBarcode###object##Detail###object,
//                               delete###object##Detail###object

        FILTERS object###object##Detail(d) == t

        EVENTS
            ON OK EXEC prePost###object(t)

        EDIT object OBJECT t
    ;

    DESIGN object FROM DEFAULT {
        main {
            preferredSize = (1024, 768);
            t.box {
                childConstraints = TO THE RIGHT;
                NEW columnHeaderPrm {
                    childConstraints = TO THE BOTTOM;
                    ADD t.documentHeaderGroup {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY (objectClassName);
                        ADD PROPERTY (name###stockProp1###object);
                        ADD PROPERTY (nameDestination###stockProp2###object);
                        ADD PROPERTY (numberObject);
                        ADD PROPERTY (seriesObject);
                        ADD PROPERTY (date###object);
                        ADD PROPERTY (time###object);
                    }
                    ADD t.documentPrmGroup {
                        childConstraints = TO THE RIGHT;
                    }
                }
                NEW columnHeaderSum {
                    ADD t.documentSumGroup {
                        childConstraints = TO THE BOTTOM;
                    }
                }
            }

            PROPERTY(formOkAction) {
                caption = 'Провести';
            }
        }
    }

    FORM object##s formsCaption
        OBJECTS t = object
        PROPERTIES (t) READONLY isPosted###object FORCE GRID, numberObject, seriesObject, date###object, time###object,
                                name###stockProp1###object, nameDestination###stockProp2###object, note###object,
                                count###object##Detail###object, quantity###object##Detail###object

        PROPERTIES (t) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

        PROPERTIES (t) ADDFORM, EDITFORM, delete FORCE PANEL DRAWTOTOOLBAR

        OBJECTS d = object##Detail

        FILTERS object###object##Detail(d) == t
    ;

    DESIGN object##s FROM DEFAULT {
        PROPERTY (delete(t)) {
            askConfirm = TRUE;
        }

        NEW documentContainer BEFORE functions.box {
            type = SPLITV;
            childConstraints = TO THE BOTTOM;

            ADD t.box;

            NEW documentDetail {
                type = TABBED;

                ADD d.box {
                    title = 'Спецификация';
                }
                NEW documentHistory {
                    childConstraints = TO THE RIGHT;
                    title = 'История';

                    ADD t.historyGroup {
                        childConstraints = TO THE BOTTOM;
                    }
                    ADD t.postedGroup {
                        childConstraints = TO THE BOTTOM;
                    }
                }
            }
        }
    }

    

    @defineDocumentDetailSkuArticle(object);
    @extendDocumentFormDetailSkuArticle(object, d, object);
    @extendDocumentFormDetailSkuArticleReadonly(object##s, d, object);

    @defineDocumentRetailPrice(object, d);
    useRetailPrice###object##Detail(detail) = stock###object##Detail(detail) IS departmentStore;
    @defineDocumentTransferAccount(object, useRetailPrice###object##Detail);


    @defineDocumentSkipSkuLedgerCustom(object, object##Detail);
    @extendDocumentFormSkipSkuLedgerCustom(object, t, object);
    @extendDocumentFormSkipSkuLedgerCustomReadonly(object##s, t, object);
    
END
META extendFormDefectProcessButtonSelection (object)

    EXTEND FORM object
        PROPERTIES(t) TODRAW d addDetailDialogSkuStock###object##Detail###object, addDetailInputBarcode###object##Detail###object,
                               delete###object##Detail###object
    ;
END
META defineDocumentHeaderDescriptionRowCustom(object, caption)
    descriptionRow###object##Detail caption (object##Detail) =
        [FORMULA STRING[200]  ' CAST($1 AS TEXT) || \', \' || \' \' || CAST($2 AS TEXT)'](
        description###object##Detail(object##Detail), nameSku(sku###object##Detail(object##Detail))) MINCHARWIDTH 40 PREFCHARWIDTH 50;
END

META defineDocumentCourierAndDateTo(object)

    courier###object = DATA customUser (object);
    nameCourier###object 'Курьер' (object) = commonName(courier###object(object)) IN documentPrmGroup MINCHARWIDTH 30 PREFCHARWIDTH 50;

    dateTo###object##Detail 'Дата исполнения' = DATA DATE (object##Detail);
END
META extendFormDocumentCourierAndDateTo (object)

    EXTEND FORM object
        PROPERTIES(t) nameCourier###object BEFORE skipSkuLedger###object
        PROPERTIES(d) dateTo###object##Detail
    ;
    EXTEND DESIGN object {
        t.documentPrmGroup {
            POSITION PROPERTY(nameCourier###object) TO THE LEFT PROPERTY(skipSkuLedger###object);
        }
    }

    EXTEND FORM object##s
        PROPERTIES(t) READONLY nameCourier###object BEFORE skipSkuLedger###object
        PROPERTIES(d) READONLY dateTo###object##Detail
    ;
END




@defineDocumentFormDefectProcess(repair, stock, repairShop, 'Передача в ремонт', 'Передачи в ремонт');
@extendFormDefectProcessButtonSelection(repair);
@defineDocumentHeaderDescriptionRowCustom(repair, 'Строка передачи в ремонт');
@defineDocumentCourierAndDateTo(repair);
@extendFormDocumentCourierAndDateTo(repair);



// Проводим по регистру
@implementSkuLedger(repair, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantityRepairDetail (ledger);
limitOutFIFOSkuLedgerBatch(ledger, batch) += currentBalanceBatchStock(batch, stockRepairDetail(ledger));

sumOutSkuLedger(ledger) += accountSumRepairDetail(ledger);

skipASkuLedger (ledger) += skipSkuLedgerRepairDetail(ledger);

// -------------------------------------- Возврат из ремонта ------------------------------- //

CLASS returnRepair 'Возврат из ремонта' : historyObject, numberedObject, outAccountDocumentLedger;
CLASS returnRepairPosted 'Проведенный возврат из ремонта' : returnRepair, postedObject;
CLASS returnRepairDetail 'Строка возврата из ремонта' : inLIFOSkuLedger;

@defineDocument(returnRepair);

@defineDocumentDetailNote(returnRepair);

@defineDocumentStock(returnRepair, stock, 'Склад-получатель');
@defineDocumentStockPrefix(returnRepair, repairShop, 'Ремонтная мастерская', destination);


@defineDocumentPosted(returnRepair);

@defineDocumentCurrency(returnRepair);
@deriveDocumentCurrency(returnRepair, stock);

@defineDocumentDescription (returnRepair, 'Возврат из ремонта');

@defineDocumentDetailNumbered(returnRepair);

@defineDocumentDetailSku(returnRepair, sku);

@defineDocumentDetailQuantity(returnRepair);

@defineDocumentDetailSkuBalance(returnRepair, sku, stock);

@defineDocumentHeaderQuantity(returnRepair);
@defineDocumentHeaderSkuQuantity(returnRepair, sku);

// Кнопки подбора
@defineAddDetailDialogSkuStock(returnRepair, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(returnRepair, sku);

@defineDocumentFormDefectProcess(returnRepair, stock, repairShop, 'Возврат из ремонта', 'Возвраты из ремонта');
@extendFormDefectProcessButtonSelection(returnRepair);

repairDetailReturnRepairDetail = DATA repairDetail (returnRepairDetail);
descriptionRowRepairDetailReturnRepairDetail 'Строка передачи в ремонт' (returnRepairDetail) = descriptionRowRepairDetail(repairDetailReturnRepairDetail(returnRepairDetail));

CONSTRAINT detail IS returnRepairDetail AND NOT repairDetailReturnRepairDetail(detail) CHECKED BY repairDetailReturnRepairDetail
    MESSAGE 'Для строки возврата из ремонта не задана строка передачи в ремонт';

CONSTRAINT skuRepairDetail(repairDetailReturnRepairDetail(detail)) != skuReturnRepairDetail(detail) CHECKED BY repairDetailReturnRepairDetail
    MESSAGE 'Товар передачи и возврата из ремонта не соответствуют друд другу';

CONSTRAINT destinationRepairShopRepairDetail(repairDetailReturnRepairDetail(detail)) != destinationRepairShopReturnRepairDetail(detail) CHECKED BY repairDetailReturnRepairDetail
    MESSAGE 'Ремонтная мастерская передачи и возврата не соответствуют друд другу';

CONSTRAINT stockRepairDetail(repairDetailReturnRepairDetail(detail)) != stockReturnRepairDetail(detail) CHECKED BY repairDetailReturnRepairDetail
    MESSAGE 'Склад передачи и возврата из ремонта не соответствуют друд другу';

quantityReturnQuantityRepairDetail 'К-во (возврат)' (repairDetail) = GROUP SUM  quantityReturnRepairDetail(detail) IF repairDetailReturnRepairDetail(detail)
    AND  isPostedRepairDetail(repairDetailReturnRepairDetail(detail)) AND isPostedReturnRepairDetail(detail)
    BY repairDetailReturnRepairDetail(detail) PERSISTENT;

diffQuantityRepairDetail 'К-во (в ремонте)' (repairDetail) =  quantityRepairDetail(repairDetail) (-) quantityReturnQuantityRepairDetail(repairDetail) AND isPostedRepairDetail(repairDetail);
quantityOverdueRepairDetail 'К-во (просрочено)' (repairDetail) = diffQuantityRepairDetail(repairDetail) AND diffQuantityRepairDetail(repairDetail) > 0 AND dateToRepairDetail(repairDetail) < currentDate();
quantityOverdueRepairShopSku 'К-во (просрочено)' (repairShop, sku)= GROUP SUM  quantityOverdueRepairDetail(detail) BY destinationRepairShopRepairDetail(detail), skuRepairDetail(detail) PERSISTENT;
quantityOverdueRepairShop 'К-во (просрочено)' (repairShop) = GROUP SUM  quantityOverdueRepairShopSku(repairShop, sku) BY repairShop;

usefulRepair 'Был товар в отгрузке' (repair) = GROUP SUM 1 IF skuRepairDetail(idetail) == skuReturnRepairDetail(detail) AND
    stockRepairDetail(idetail) == stockReturnRepairDetail(detail) AND
    destinationRepairShopRepairDetail(idetail) == destinationRepairShopReturnRepairDetail(detail) AND
    diffQuantityRepairDetail(idetail) >0
        BY repairRepairDetail(idetail) PERSISTENT;

FORM repairDetailReturnRepairDetail 'Передачи в ремонт'

    OBJECTS rd = returnRepairDetail FIXED PANEL

    OBJECTS dc = repair
    PROPERTIES (dc) READONLY isPostedRepair FORCE GRID, numberObject, seriesObject, dateRepair, timeRepair,
                            nameStockRepair, nameDestinationRepairShopRepair, noteRepair


    OBJECTS dd = repairDetail

    FILTERGROUP skuFilters
            FILTER 'Документ с этим товаром' 'F10' usefulRepair(dc) DEFAULT

    FILTERGROUP rowFilters
            FILTER 'Пригодные строки' 'F9' diffQuantityRepairDetail(dd) >0 DEFAULT

    FILTERS skuRepairDetail(dd) == skuReturnRepairDetail(rd),
            repairRepairDetail(dd) == dc

;

DESIGN repairDetailReturnRepairDetail FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
    }
}

@extendDocumentFormDetailSkuArticleReadonly(repairDetailReturnRepairDetail, dd, repair);

EXTEND FORM repairDetailReturnRepairDetail
    PROPERTIES(dd) READONLY quantityReturnQuantityRepairDetail, diffQuantityRepairDetail
;

dialogRowReturnRepairDetail 'Строка передачи в ремонт' (returnRepairDetail) = ACTION (returnRepairDetail) {
    FORM repairDetailReturnRepairDetail OBJECTS rd = returnRepairDetail MODAL;
    IF formResult() == formResult.ok THEN {
        SET repairDetailReturnRepairDetail(returnRepairDetail) <- chosenObject('dd');
    }
}


EXTEND FORM returnRepair
    PROPERTIES(d) descriptionRowRepairDetailReturnRepairDetail ON CHANGE EXEC dialogRowReturnRepairDetail(d)//, currentBalanceReturnOutDetail READONLY

;

EXTEND FORM returnRepairs
    PROPERTIES(d) READONLY descriptionRowRepairDetailReturnRepairDetail
;

// Проводим по регистру

@implementSkuLedger(returnRepair, sku, stock);
quantityInLIFOSkuLedger (ledger) += quantityReturnRepairDetail(ledger);
limitInLIFOSkuLedgerBatch (ledger, batch) += costDataSkuLedgerBatch(repairDetailReturnRepairDetail(ledger), batch);

sumInSkuLedger(ledger) += accountSumReturnRepairDetail(ledger);
skipASkuLedger (ledger) += skipSkuLedgerReturnRepairDetail(ledger);

// Подсчет текущего остатка  Рем.мастерская

expenseRepairShopSku 'Расход' (repairShop, sku) = GROUP SUM quantityReturnRepairDetail(detail) IF isPostedReturnRepairDetail(detail)
    BY destinationRepairShopReturnRepairDetail(detail), skuReturnRepairDetail(detail);

parishRepairShopSku 'Приход' (repairShop, sku) = GROUP SUM quantityRepairDetail(detail) IF isPostedRepairDetail(detail)
    BY destinationRepairShopRepairDetail(detail), skuRepairDetail(detail);

currentBalanceRepairShopSku 'Текущий остаток' (repairShop, sku) =
    parishRepairShopSku(repairShop, sku) (-)
    expenseRepairShopSku(repairShop, sku);

currentBalanceRepairShop 'Текущий остаток' (repairShop) =  GROUP SUM currentBalanceRepairShopSku(repairShop, sku) BY repairShop;

FORM repairShop 'Ремонтная мастерская'

    OBJECTS s=repairShop FIXED PANEL
    PROPERTIES(s)  name, addressExternalStock, phoneExternalStock, siteExternalStock, workingTimeExternalStock, contactNameExternalStock, infoExternalStock
    EDIT repairShop OBJECT s
;
DESIGN repairShop FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        s.box {
            childConstraints = TO THE BOTTOM;
            ADD s.lawGroup;
            ADD s.contactGroup;

        }
        ADD functions.box;
    }
}

FORM repairShops 'Ремонтные мастерские'

    OBJECTS s=repairShop
    PROPERTIES(s)  READONLY name, addressExternalStock, phoneExternalStock, siteExternalStock, workingTimeExternalStock,
                   contactNameExternalStock, infoExternalStock, currentBalanceRepairShop, quantityOverdueRepairShop
    PROPERTIES(s)  ADDFORM, EDITFORM, delete

    OBJECTS sk=sku
    PROPERTIES(sk)  READONLY nameSku, idBarcodeSku

    PROPERTIES(s, sk)  READONLY currentBalanceRepairShopSku, parishRepairShopSku, expenseRepairShopSku, quantityOverdueRepairShopSku

    OBJECTS d=repairDetail
    PROPERTIES(d)  READONLY descriptionRepairDetail, dateTimeRepairDetail, quantityRepairDetail, diffQuantityRepairDetail,
                   dateToRepairDetail, quantityOverdueRepairDetail

    OBJECTS dd=returnRepairDetail
    PROPERTIES(dd)  READONLY descriptionReturnRepairDetail, dateTimeReturnRepairDetail, quantityReturnRepairDetail


    FILTERS  skuRepairDetail(d) == sk,
             destinationRepairShopRepairDetail(d) == s,
             isPostedRepairDetail(d),
             skuReturnRepairDetail(dd) == sk,
             destinationRepairShopReturnRepairDetail(dd)==s,
             isPostedReturnRepairDetail(dd)

    FILTERGROUP filters
        FILTER 'Товары с остатком' 'F10' currentBalanceRepairShopSku(s, sk) DEFAULT
        FILTER 'Товары просроченные' 'F9'quantityOverdueRepairShopSku(s, sk)
        FILTER 'Товары с приходом' 'F8' parishRepairShopSku(s, sk)
        FILTER 'Товары с расходом' 'F7' expenseRepairShopSku(s, sk)

;
DESIGN repairShops FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        ADD s.box {fillVertical = 1;}
        NEW wor {
            title = 'Остатки';
            fillVertical = 2;
            childConstraints = TO THE RIGHT;
            type = SPLITH;
            ADD sk.box {fillHorizontal = 2;}

            NEW row1 {
                title = 'Движение';
                childConstraints = TO THE BOTTOM;
                ADD d.box {
                    title = 'Приход';
                    fillVertical = 1;
                    fillHorizontal = 3;
                }
                ADD dd.box {
                    title = 'Расход';
                    fillVertical = 1;
                    fillHorizontal = 3;
                }
            }
        }
    }
    ADD functions.box;
}

// -------------------------------------- Химчистка ------------------------------- //

CLASS dryCleaning 'Передача в химчистку' : historyObject, numberedObject, consignment, outAccountDocumentLedger;
CLASS dryCleaningPosted 'Проведенная передача в химчистку' : dryCleaning, postedObject;
CLASS dryCleaningDetail 'Строка передачи в химчистку' : outFIFOSkuLedger, consignmentDetail;

@defineDocument(dryCleaning);

@defineDocumentDetailNote(dryCleaning);

@defineDocumentStock(dryCleaning, stock, 'Склад-отправитель');
@defineDocumentStockPrefix(dryCleaning, cleaningStock, 'Химчистка', destination);


@defineDocumentPosted(dryCleaning);

@defineDocumentCurrency(dryCleaning);
@deriveDocumentCurrency(dryCleaning, stock);

@defineDocumentDescription (dryCleaning, 'Передача в химчистку');

@defineDocumentDetailNumbered(dryCleaning);

@defineDocumentDetailSku(dryCleaning, sku);

@defineDocumentDetailQuantity(dryCleaning);

@defineDocumentDetailPackWeightSku(dryCleaning);

@defineDocumentDetailSkuBalance(dryCleaning, sku, stock);

@defineDocumentHeaderQuantity(dryCleaning);
@defineDocumentHeaderSkuQuantity(dryCleaning, sku);

// Кнопки подбора
@defineAddDetailDialogSkuStock(dryCleaning, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(dryCleaning, sku);

@defineDocumentFormDefectProcess(dryCleaning, stock, cleaningStock, 'Передача в химчистку', 'Передачи в химчистку');
@extendFormDefectProcessButtonSelection(dryCleaning);
@defineDocumentHeaderDescriptionRowCustom(dryCleaning, 'Строка передачи в ремонт');

@defineDocumentCourierAndDateTo(dryCleaning);
@extendFormDocumentCourierAndDateTo(dryCleaning);

// Проводим по регистру
@implementSkuLedger(dryCleaning, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantityDryCleaningDetail (ledger);
limitOutFIFOSkuLedgerBatch(ledger, batch) += currentBalanceBatchStock(batch, stockDryCleaningDetail(ledger));

sumOutSkuLedger(ledger) += accountSumDryCleaningDetail(ledger);

skipASkuLedger (ledger) += skipSkuLedgerDryCleaningDetail(ledger);

// -------------------------------------- Возврат из химчистки ------------------------------- //

CLASS returnDryCleaning 'Возврат из химчистки' : historyObject, numberedObject, outAccountDocumentLedger;
CLASS returnDryCleaningPosted 'Проведенный возврат из химчистки' : returnDryCleaning, postedObject;
CLASS returnDryCleaningDetail 'Строка возврата из химчистки' : inLIFOSkuLedger;

@defineDocument(returnDryCleaning);

@defineDocumentDetailNote(returnDryCleaning);

@defineDocumentStock(returnDryCleaning, stock, 'Склад-получатель');
@defineDocumentStockPrefix(returnDryCleaning, cleaningStock, 'Химчистка', destination);


@defineDocumentPosted(returnDryCleaning);

@defineDocumentCurrency(returnDryCleaning);
@deriveDocumentCurrency(returnDryCleaning, stock);

@defineDocumentDescription (returnDryCleaning, 'Возврат из химчистки');

@defineDocumentDetailNumbered(returnDryCleaning);

@defineDocumentDetailSku(returnDryCleaning, sku);

@defineDocumentDetailQuantity(returnDryCleaning);

@defineDocumentDetailSkuBalance(returnDryCleaning, sku, stock);

@defineDocumentHeaderQuantity(returnDryCleaning);
@defineDocumentHeaderSkuQuantity(returnDryCleaning, sku);

// Кнопки подбора
@defineAddDetailDialogSkuStock(returnDryCleaning, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(returnDryCleaning, sku);

@defineDocumentFormDefectProcess(returnDryCleaning, stock, cleaningStock, 'Возврат из химчистки', 'Возвраты из химчистки');
@extendFormDefectProcessButtonSelection(returnDryCleaning);

dryCleaningDetailReturnDryCleaningDetail = DATA dryCleaningDetail (returnDryCleaningDetail);
descriptionRowDryCleaningDetailReturnDryCleaningDetail 'Строка передачи в химчистку' (returnDryCleaningDetail) = descriptionRowDryCleaningDetail(dryCleaningDetailReturnDryCleaningDetail(returnDryCleaningDetail));

CONSTRAINT detail IS returnDryCleaningDetail AND NOT dryCleaningDetailReturnDryCleaningDetail(detail) CHECKED BY dryCleaningDetailReturnDryCleaningDetail
    MESSAGE 'Для строки возврата из химчистки не задана строка передачи в химчистку';

CONSTRAINT skuDryCleaningDetail(dryCleaningDetailReturnDryCleaningDetail(detail)) != skuReturnDryCleaningDetail(detail) CHECKED BY dryCleaningDetailReturnDryCleaningDetail
    MESSAGE 'Товар передачи и возврата из химчистки не соответствуют друд другу';

CONSTRAINT destinationCleaningStockDryCleaningDetail(dryCleaningDetailReturnDryCleaningDetail(detail)) != destinationCleaningStockReturnDryCleaningDetail(detail) CHECKED BY dryCleaningDetailReturnDryCleaningDetail
    MESSAGE 'Химчистка передачи и возврата не соответствуют друд другу';

CONSTRAINT stockDryCleaningDetail(dryCleaningDetailReturnDryCleaningDetail(detail)) != stockReturnDryCleaningDetail(detail) CHECKED BY dryCleaningDetailReturnDryCleaningDetail
    MESSAGE 'Склад передачи и возврата из химчистки не соответствуют друд другу';

quantityReturnQuantityDryCleaningDetail 'К-во (возврат)' (dryCleaningDetail) = GROUP SUM  quantityReturnDryCleaningDetail(detail) IF dryCleaningDetailReturnDryCleaningDetail(detail)
    AND  isPostedDryCleaningDetail(dryCleaningDetailReturnDryCleaningDetail(detail)) AND isPostedReturnDryCleaningDetail(detail)
    BY dryCleaningDetailReturnDryCleaningDetail(detail) PERSISTENT;

diffQuantityDryCleaningDetail 'К-во в химчистке' (dryCleaningDetail) =  quantityDryCleaningDetail(dryCleaningDetail) (-) quantityReturnQuantityDryCleaningDetail(dryCleaningDetail) AND isPostedDryCleaningDetail(dryCleaningDetail);
quantityOverdueDryCleaningDetail 'К-во (просрочено)' (dryCleaningDetail) = diffQuantityDryCleaningDetail(dryCleaningDetail) AND diffQuantityDryCleaningDetail(dryCleaningDetail) >0 AND dateToDryCleaningDetail(dryCleaningDetail) < currentDate();
quantityOverdueCleaningStockSku 'К-во (просрочено)' (cleaningStock, sku)= GROUP SUM  quantityOverdueDryCleaningDetail(detail) BY destinationCleaningStockDryCleaningDetail(detail), skuDryCleaningDetail(detail) PERSISTENT;
quantityOverdueCleaningStock 'К-во (просрочено)' (cleaningStock) = GROUP SUM  quantityOverdueCleaningStockSku(cleaningStock, sku) BY cleaningStock;

usefulDryCleaning 'Был товар в отгрузке' (dryCleaning) = GROUP SUM 1 IF skuDryCleaningDetail(idetail) == skuReturnDryCleaningDetail(detail) AND
    stockDryCleaningDetail(idetail) == stockReturnDryCleaningDetail(detail) AND
    destinationCleaningStockDryCleaningDetail(idetail) == destinationCleaningStockReturnDryCleaningDetail(detail) AND
    diffQuantityDryCleaningDetail(idetail) >0
        BY dryCleaningDryCleaningDetail(idetail) PERSISTENT;

FORM dryCleaningDetailReturnDryCleaningDetail 'Передачи в химчистку'

    OBJECTS rd = returnDryCleaningDetail FIXED PANEL

    OBJECTS dc = dryCleaning
    PROPERTIES (dc) READONLY isPostedDryCleaning FORCE GRID, numberObject, seriesObject, dateDryCleaning, timeDryCleaning,
                            nameStockDryCleaning, nameDestinationCleaningStockDryCleaning, noteDryCleaning


    OBJECTS dd = dryCleaningDetail

    FILTERGROUP skuFilters
            FILTER 'Документ с этим товаром' 'F10' usefulDryCleaning(dc) DEFAULT

    FILTERGROUP rowFilters
            FILTER 'Пригодные строки' 'F9' diffQuantityDryCleaningDetail(dd) >0 DEFAULT

    FILTERS skuDryCleaningDetail(dd) == skuReturnDryCleaningDetail(rd),
            dryCleaningDryCleaningDetail(dd) == dc
;

DESIGN dryCleaningDetailReturnDryCleaningDetail FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
    }
}

@extendDocumentFormDetailSkuArticleReadonly(dryCleaningDetailReturnDryCleaningDetail, dd, dryCleaning);

EXTEND FORM dryCleaningDetailReturnDryCleaningDetail
    PROPERTIES(dd) READONLY quantityReturnQuantityDryCleaningDetail, diffQuantityDryCleaningDetail
;

dialogRowReturnDryCleaningDetail 'Строка передачи в химчистку' (returnDryCleaningDetail) = ACTION (returnDryCleaningDetail) {
    FORM dryCleaningDetailReturnDryCleaningDetail OBJECTS rd = returnDryCleaningDetail MODAL;
    IF formResult() == formResult.ok THEN {
        SET dryCleaningDetailReturnDryCleaningDetail(returnDryCleaningDetail) <- chosenObject('dd');
    }
}


EXTEND FORM returnDryCleaning
    PROPERTIES(d) descriptionRowDryCleaningDetailReturnDryCleaningDetail ON CHANGE EXEC dialogRowReturnDryCleaningDetail(d)
;

EXTEND FORM returnDryCleanings
    PROPERTIES(d) READONLY descriptionRowDryCleaningDetailReturnDryCleaningDetail
;

// Проводим по регистру

@implementSkuLedger(returnDryCleaning, sku, stock);
quantityInLIFOSkuLedger (ledger) += quantityReturnDryCleaningDetail(ledger);
limitInLIFOSkuLedgerBatch (ledger, batch) += costDataSkuLedgerBatch(dryCleaningDetailReturnDryCleaningDetail(ledger), batch);

sumInSkuLedger(ledger) += accountSumReturnDryCleaningDetail(ledger);
skipASkuLedger (ledger) += skipSkuLedgerReturnDryCleaningDetail(ledger);

// Подсчет текущего остатка  Химчистка

expenseCleaningStockSku 'Расход' (cleaningStock, sku) = GROUP SUM quantityReturnDryCleaningDetail(detail) IF isPostedReturnDryCleaningDetail(detail)
    BY destinationCleaningStockReturnDryCleaningDetail(detail), skuReturnDryCleaningDetail(detail);

parishCleaningStockSku 'Приход' (cleaningStock, sku) = GROUP SUM quantityDryCleaningDetail(detail) IF isPostedDryCleaningDetail(detail)
    BY destinationCleaningStockDryCleaningDetail(detail), skuDryCleaningDetail(detail);

currentBalanceCleaningStockSku 'Текущий остаток' (cleaningStock, sku) =
    parishCleaningStockSku(cleaningStock, sku) (-)
    expenseCleaningStockSku(cleaningStock, sku);

currentBalanceCleaningStock 'Текущий остаток' (cleaningStock) =  GROUP SUM currentBalanceCleaningStockSku(cleaningStock, sku) BY cleaningStock;

FORM cleaningStock 'Химчистка'

    OBJECTS s=cleaningStock FIXED PANEL
    PROPERTIES(s)  name, addressExternalStock, phoneExternalStock, siteExternalStock, workingTimeExternalStock, contactNameExternalStock, infoExternalStock
    EDIT cleaningStock OBJECT s
;
DESIGN cleaningStock FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        s.box {
            childConstraints = TO THE BOTTOM;
            ADD s.lawGroup;
            ADD s.contactGroup;

        }
        ADD functions.box;
    }
}

FORM cleaningStocks 'Химчистки'

    OBJECTS s=cleaningStock
    PROPERTIES(s)  READONLY name, addressExternalStock, phoneExternalStock, siteExternalStock, workingTimeExternalStock,
                   contactNameExternalStock, infoExternalStock, currentBalanceCleaningStock, quantityOverdueCleaningStock
    PROPERTIES(s)  ADDFORM, EDITFORM, delete

    OBJECTS sk=sku
    PROPERTIES(sk)  READONLY nameSku, idBarcodeSku

    PROPERTIES(s, sk)  READONLY currentBalanceCleaningStockSku, parishCleaningStockSku, expenseCleaningStockSku, quantityOverdueCleaningStockSku

    OBJECTS d=dryCleaningDetail
    PROPERTIES(d)  READONLY descriptionDryCleaningDetail, dateTimeDryCleaningDetail, quantityDryCleaningDetail, diffQuantityDryCleaningDetail,
                   dateToDryCleaningDetail, quantityOverdueDryCleaningDetail

    OBJECTS dd=returnDryCleaningDetail
    PROPERTIES(dd)  READONLY descriptionReturnDryCleaningDetail, dateTimeReturnDryCleaningDetail, quantityReturnDryCleaningDetail


    FILTERS  skuDryCleaningDetail(d) == sk,
             destinationCleaningStockDryCleaningDetail(d) == s,
             isPostedDryCleaningDetail(d),
             skuReturnDryCleaningDetail(dd) == sk,
             destinationCleaningStockReturnDryCleaningDetail(dd)==s,
             isPostedReturnDryCleaningDetail(dd)

    FILTERGROUP filters
        FILTER 'Товары с остатком' 'F10' currentBalanceCleaningStockSku(s, sk) DEFAULT
        FILTER 'Товары просроченные' 'F9'quantityOverdueCleaningStockSku(s, sk)
        FILTER 'Товары с приходом' 'F8' parishCleaningStockSku(s, sk)
        FILTER 'Товары с расходом' 'F7' expenseCleaningStockSku(s, sk)


;
DESIGN cleaningStocks FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        ADD s.box {fillVertical = 1;}
        NEW wor {
            title = 'Остатки';
            fillVertical = 2;
            childConstraints = TO THE RIGHT;
            type = SPLITH;
            ADD sk.box {fillHorizontal = 2;}

            NEW row1 {
                title = 'Движение';
                childConstraints = TO THE BOTTOM;
                ADD d.box {
                    title = 'Приход';
                    fillVertical = 1;
                    fillHorizontal = 3;
                }
                ADD dd.box {
                    title = 'Расход';
                    fillVertical = 1;
                    fillHorizontal = 3;
                }
            }
        }
    }
    ADD functions.box;
}