//Store from WareHouse
MODULE SfromWH;

REQUIRE System,

        Stock,
        Numerator,
        Document,
        RomanDocument,
        Consignment,
        AccountDocument,
        PriceChange,
        StorePrice,
        Declaration,
        RetailPrice,
        WholesalePrice,
        MasterData,
        RomanLogicsModule,
        WHtoSDirect,
        WHtoSTransit;

PRIORITY RomanLogicsModule, Stock;

CLASS SfromWH 'Приход на магазин' : historyObject, numberedObject;
CLASS SfromWHDetail 'Строка прихода на магазин' : inTransferSkuLedger, priceChangeDocumentDetail, importerPriceLedger, supplierPriceLedger, retailPriceLedger, retailVATLedger, warePriceLedger;
CLASS SfromWHPosted 'Закрытый приход на магазин' : SfromWH, postedObject;

skuSfromWHDetail 'Товар (ИД)' (SfromWHDetail) = DATA sku(SfromWHDetail) IN idGroup;
nameSkuSfromWHDetail 'Наименование товара' (SfromWHDetail) = nameSku(skuSfromWHDetail(SfromWHDetail));

@defineRBCorrespondingDocumentWithRetailPrices(SfromWH, departmentStore, 'Отдел документа', sku, 'Приход на магазин', warehouse, 'Оптовый склад');
quantityInTransferSkuLedger (ledger) += quantitySfromWHDetail(ledger);

WHtoSPostedSfromWH 'Расход прихода (ИД)' (SfromWH) = DATA WHtoSPosted(SfromWH) IN idGroup;
SfromWHWHtoSPosted (WHtoSPosted) = GROUP UNIQUE SfromWH BY WHtoSPostedSfromWH (SfromWH);
CONSTRAINT WHtoSPostedSfromWH(p1) == WHtoSPostedSfromWH(p2) AND p1 != p2 CHECKED BY WHtoSPostedSfromWH MESSAGE 'Расход задействован в другом приходе';

numberSfromWH 'Номер док. расхода' (SfromWH) = numberObject(WHtoSPostedSfromWH(SfromWH)) IN documentHeaderGroup;
seriesSfromWH 'Серия' (SfromWH) = seriesObject(WHtoSPostedSfromWH(SfromWH)) IN documentHeaderGroup;
seriesNumberSfromWH 'Серия/Номер' (SfromWH) = seriesNumberObject(WHtoSPostedSfromWH(SfromWH));
warehouseWarehouseSfromWH 'Оптовый склад(ИД)' (SfromWH) = warehouseWHtoSPosted(WHtoSPostedSfromWH(SfromWH));


numberObject (SfromWH) <- PREV(numberSfromWH (SfromWH)) WHEN CHANGED (WHtoSPostedSfromWH(SfromWH));
seriesObject (SfromWH) <- PREV(seriesSfromWH (SfromWH)) WHEN CHANGED (WHtoSPostedSfromWH(SfromWH));
seriesNumberObject (SfromWH) <- PREV(seriesNumberSfromWH (SfromWH)) WHEN CHANGED (WHtoSPostedSfromWH(SfromWH));
warehouseSfromWH (SfromWH) <- warehouseWarehouseSfromWH (SfromWH) WHEN CHANGED (WHtoSPostedSfromWH(SfromWH));

//todo: Леша должен переделать ,чтобы подставлялись нужные значения.

companyWarehouseSfromWH (SfromWH) = companyWarehouse(warehouseSfromWH(SfromWH));
nameCompanyWarehouseSfromWH 'Поставщик' (SfromWH) = name(companyWarehouseSfromWH(SfromWH));
storeSfromWH (SfromWH) = storeDepartmentStore(departmentStoreSfromWH(SfromWH));
nameStoreSfromWH 'Магазин' (SfromWH) = name(storeSfromWH(SfromWH));


CONSTRAINT storeSfromWH(SfromWH) != storeWHtoSPosted(WHtoSPostedSfromWH(SfromWH))
    CHECKED BY WHtoSPostedSfromWH MESSAGE  'ошибка: Магазин из расхода должен совпадать с магазином из прихода';

quantitySfromWHSku 'Количество принятое' (SfromWH, sku) = GROUP SUM quantitySfromWHDetail(SfromWHDetail)
                                          BY SfromWHSfromWHDetail(SfromWHDetail), skuSfromWHDetail(SfromWHDetail);

quantityOriginSfromWHSku 'Кол-во плановое' (SfromWH, sku) = quantityWHtoSPostedSku (WHtoSPostedSfromWH(SfromWH), sku);

diffQuantitySfromWHSku 'Разница' (SfromWH, sku) = quantitySfromWHSku(SfromWH, sku) (-) quantityOriginSfromWHSku(SfromWH, sku);

retailPriceChangeSfromWHDetail(SfromWHDetail) = UNION OVERRIDE priceBasePriceSetDocumentArticleDateTime(articleSku(skuSfromWHDetail(SfromWHDetail)), dateTimeSfromWHDetail(SfromWHDetail)),
                                                               priceDiscountPriceSetDocumentArticleDateTime(articleSku(skuSfromWHDetail(SfromWHDetail)), dateTimeSfromWHDetail(SfromWHDetail));

retailPriceSfromWHDetail(SfromWHDetail) <- retailPriceChangeSfromWHDetail(SfromWHDetail) WHEN CHANGED (dateTimeSfromWHDetail(SfromWHDetail))
                                                                                           OR CHANGED (skuSfromWHDetail(SfromWHDetail));

balanceBSkuSfromWHDetail 'Остаток до' (SfromWHDetail) = balanceBSkuStockDateTime(skuSfromWHDetail(SfromWHDetail), departmentStoreSfromWHDetail(SfromWHDetail), dateTimeSfromWHDetail(SfromWHDetail));


toFillSfromWHDetailsSfromWH 'Заполнить документ из расхода' =  ACTION (SfromWH) {
    FOR SfromWHWHtoSPosted(WHtoSPostedWHtoSPostedDetail(WHtoSPostedDetail)) == SfromWH DO {
        ADDOBJ SfromWHDetail;
        FOR d == addedObject() DO {
            SET SfromWHSfromWHDetail(d) <- SfromWH AS SfromWH;
            SET quantitySfromWHDetail (d) <- quantityWHtoSPostedDetail(WHtoSPostedDetail);
            SET skuSfromWHDetail (d) <- skuWHtoSPostedDetail(WHtoSPostedDetail);
            SET UOMSfromWHDetail (d) <- UOMWHtoSPostedDetail(WHtoSPostedDetail);
            SET importerPriceSfromWHDetail (d) <- importerPriceWHtoSPostedDetail(WHtoSPostedDetail);
            SET supplierPriceSfromWHDetail (d) <- supplierPriceWHtoSPostedDetail(WHtoSPostedDetail);
            SET supplierVATSfromWHDetail (d) <- supplierVATWHtoSPostedDetail(WHtoSPostedDetail);
        };
    };
} CONFIRM;

FORM SfromWH 'Приход на магазин'
    OBJECTS sf = SfromWH FIXED PANEL
    PROPERTIES (sf) nameDepartmentStoreSfromWH, dateSfromWH, timeSfromWH, quantitySfromWHDetailSfromWH, invoiceVATSumSfromWHDetailSfromWH,
                    invoiceSumSfromWHDetailSfromWH, retailSumSfromWHDetailSfromWH, noteSfromWH, numberSfromWH, toFillSfromWHDetailsSfromWH
    PROPERTIES (sf) READONLY seriesObject, nameWarehouseSfromWH

    OBJECTS d = SfromWHDetail
    PROPERTIES(d) indexSfromWHDetail, barcodeSfromWHDetail, nameSkuSfromWHDetail, nameBrandSfromWHDetail, sidArticleSfromWHDetail,
                  nameCategorySfromWHDetail, sidColorSfromWHDetail, nameColorSfromWHDetail, shortNameUOMSfromWHDetail, balanceBSkuSfromWHDetail,
                  quantitySfromWHDetail, importerPriceSfromWHDetail, supplierPriceSfromWHDetail,
                  numberSupplierVATSfromWHDetail, valueSupplierVATSfromWHDetail,
                  supplierVATISumSfromWHDetail, invoiceISumSfromWHDetail,
                  numberRetailVATSfromWHDetail, valueRetailVATSfromWHDetail,
                  retailPriceSfromWHDetail


    PROPERTIES(sf) TODRAW d addDetailDialogSkuSfromWHDetailSfromWH, addDetailDialogBarcodeSfromWHDetailSfromWH,
                  deleteSfromWHDetailSfromWH

    PROPERTIES(d) ADDOBJ, delete

    OBJECTS i=sku
    PROPERTIES(i) nameSku
    PROPERTIES(sf,i) quantitySfromWHSku, quantityOriginSfromWHSku, diffQuantitySfromWHSku

    FILTERS inSfromWHSfromWHDetail(sf, d)
    FILTERS quantityOriginSfromWHSku(sf,i) OR quantitySfromWHSku(sf,i)

    FILTERGROUP filtersDiff
        FILTER 'Показать отличающиеся' 'F10' diffQuantitySfromWHSku(sf,i) !=0

    EDIT SfromWH OBJECT sf
;

DESIGN SfromWH FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        ADD sf.box {
            childConstraints = TO THE RIGHT;
            NEW row1 {
                childConstraints = TO THE BOTTOM;
                ADD sf.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY (nameDepartmentStoreSfromWH);
                    ADD PROPERTY (numberSfromWH);
                    ADD PROPERTY (seriesObject);
                    ADD PROPERTY (dateSfromWH);
                    ADD PROPERTY (timeSfromWH);
                }
                NEW row11 {
                childConstraints = TO THE RIGHT;
                    NEW row111 {
                        title = 'Контрагент-поставщик';
                        ADD PROPERTY (nameWarehouseSfromWH);
                    }
                    NEW row112{
                        title = 'Расход';
                        ADD PROPERTY (toFillSfromWHDetailsSfromWH);
                    }
                }
                ADD sf.documentPrmGroup;
            }
            NEW row2 {
                ADD sf.documentSumGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }
        };
        NEW row3 {
            type = TABBED;
            ADD d.box;
            ADD i.box;
        }
        ADD functions.box;
    }
}

FORM SfromWHs 'Приходы на магазин'
    OBJECTS sf = SfromWH
    PROPERTIES (sf) READONLY objectClassName, numberObject, seriesObject, dateSfromWH, timeSfromWH, nameWarehouseSfromWH, nameDepartmentStoreSfromWH, nameStoreSfromWH,
                   countSfromWHDetailSfromWH, quantitySfromWHDetailSfromWH, invoiceVATSumSfromWHDetailSfromWH, invoiceSumSfromWHDetailSfromWH, retailSumSfromWHDetailSfromWH

    PROPERTIES (sf) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed


    PROPERTIES (sf) ADDFORM, EDITFORM SHOWIF isDraftSfromWH(sf), delete FORCE PANEL SHOWIF isDraftSfromWH(sf),
                   postSfromWH SHOWIF isDraftSfromWH(sf), unpostSfromWH SHOWIF isPostedSfromWH(sf)

    OBJECTS d = SfromWHDetail
    PROPERTIES(d) READONLY  indexSfromWHDetail, barcodeSfromWHDetail, nameSkuSfromWHDetail, shortNameUOMSfromWHDetail, balanceBSkuSfromWHDetail,
                  quantitySfromWHDetail, importerPriceSfromWHDetail, supplierPriceSfromWHDetail,
                  numberSupplierVATSfromWHDetail, valueSupplierVATSfromWHDetail,
                  supplierVATISumSfromWHDetail, invoiceISumSfromWHDetail,
                  numberRetailVATSfromWHDetail, valueRetailVATSfromWHDetail,
                  retailPriceSfromWHDetail

    FILTERS inSfromWHSfromWHDetail(sf, d)
;

DESIGN SfromWHs FROM DEFAULT {
    ADD sf.box{
        PROPERTY (delete(sf)) {
            panelLocation = TOOLBAR;
            askConfirm = TRUE;
        PROPERTY (objectClassName(sf)) {
            preferredCharWidth = 15;
        }
        }
    }
    ADD d.box;

    NEW footer.container {
        childConstraints = TO THE BOTTOM;

        NEW cont3 {
            childConstraints = TO THE RIGHT;
            ADD sf.historyGroup {
                childConstraints = TO THE BOTTOM;
            }

            ADD sf.postedGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    }
    ADD functions.box;
}

