//Store from WareHouse
MODULE SfromWH;

REQUIRE System,

        Stock,
        Numerator,
        Document,
        RomanDocument,
        Consignment,
        AccountDocument,
        PriceChange,
        StorePrice,
        Declaration,
        RetailPrice,
        WholesalePrice,
        MasterData,
        RomanLogicsModule,
        WHtoSDirect;

PRIORITY RomanLogicsModule, Stock;

CLASS SfromWH 'Приход на магазин' : historyObject, numberedObject;
CLASS SfromWHDetail 'Строка прихода на магазин' : inTransferSkuLedger, priceChangeDocumentDetail, importerPriceLedger, supplierPriceLedger, retailPriceLedger, retailVATLedger;
CLASS SfromWHPosted 'Закрытый приход на магазин' : SfromWH, postedObject;

@defineDocumentBasePosted(SfromWH);
@defineDocumentStock(SfromWH, departmentStore, 'Отдел документа');

WHtoSDirSfromWH 'Расход прихода (ИД)' (SfromWH) = DATA WHtoSDirPosted(SfromWH) IN idGroup;
SfromWHWHtoSDir (WHtoSDir) = GROUP UNIQUE SfromWH BY WHtoSDirSfromWH (SfromWH);
CONSTRAINT WHtoSDirSfromWH(p1) == WHtoSDirSfromWH(p2) AND p1 != p2 CHECKED BY WHtoSDirSfromWH MESSAGE 'Расход задействован в другом приходе';

numberSfromWH 'Номер' (SfromWH) = numberObject(WHtoSDirSfromWH(SfromWH)) IN documentHeaderGroup PERSISTENT;
seriesSfromWH 'Серия' (SfromWH) = seriesObject(WHtoSDirSfromWH(SfromWH)) IN baseGroup PERSISTENT;
seriesNumberSfromWH 'Серия/Номер' (SfromWH) = seriesNumberObject(WHtoSDirSfromWH(SfromWH)) PERSISTENT;
warehouseSfromWH 'Оптовый склад(ИД)' (SfromWH) = warehouseWHtoSDir(WHtoSDirSfromWH(SfromWH));
nameWarehouseSfromWH 'Оптовый склад' (SfromWH) = name(warehouseSfromWH(SfromWH));
//nameImporterSfromWH 'Поставщик' (SfromWH) = name(importerWarehouse(warehouseSfromWH(SfromWH)));

//numberObject (SfromWH) <- PREV (numberSfromWH (SfromWH)) WHEN ASSIGNED (WHtoSDirSfromWH(SfromWH));

storeSfromWH (SfromWH) = storeDepartmentStore(departmentStoreSfromWH(SfromWH));
nameStoreSfromWH 'Магазин' (SfromWH) = name(storeSfromWH(SfromWH));


CONSTRAINT storeSfromWH(SfromWH) != storeWHtoSDir(WHtoSDirSfromWH(SfromWH))
    CHECKED BY WHtoSDirSfromWH MESSAGE  'ошибка: Магазин из расхода должен совпадать с магазином из прихода';

@defineDocumentDetailQuantity(SfromWH); // к-во детайл
@defineDocumentHeaderQuantity(SfromWH); // к-во всего

descriptionSfromWH 'Название документа' (SfromWH) =
    [FORMULA STRING[200]  ' CAST($1 AS TEXT) || \' № \' || CAST($2 AS TEXT) || \' от \' || CAST($3 AS TEXT)'](
    'Приход на магазин', seriesNumberSfromWH(SfromWH), dateSfromWH(SfromWH));

inWHtoSDirSfromWH (SfromWH, WHtoSDir) = WHtoSDirSfromWH(SfromWH) == WHtoSDir;

skuSfromWHDetail 'Товар (ИД)' (SfromWHDetail) = DATA sku(SfromWHDetail) IN idGroup;
@defineDocumentDetailProps (SfromWH);  // ш-к, цвет, бренд, и т.д.

descriptionSfromWHDetail 'Название документа' (SfromWHDetail) = descriptionSfromWH(SfromWHSfromWHDetail(SfromWHDetail));

quantitySfromWHSku 'Количество принятое' (SfromWH, sku) = GROUP SUM quantitySfromWHDetail(SfromWHDetail)
                                          BY SfromWHSfromWHDetail(SfromWHDetail), skuSfromWHDetail(SfromWHDetail);

quantityOriginSfromWHSku 'Кол-во плановое' (SfromWH, sku) = quantityWHtoSDirSku (WHtoSDirSfromWH(SfromWH), sku);

diffQuantitySfromWHSku 'Разница' (SfromWH, sku) = quantitySfromWHSku(SfromWH, sku) (-) quantityOriginSfromWHSku(SfromWH, sku);


@defineAddDetailDialogSkuStock(SfromWH, sku, warehouse, dialogSku);

@implementSkuLedger (SfromWH, sku, departmentStore);

nameSkuSfromWHDetail 'Наименование товара' (SfromWHDetail) = nameSku(skuSfromWHDetail(SfromWHDetail));

quantityInAutoSkuLedger (ledger) += quantitySfromWHDetail (ledger);

UOMSfromWHDetail 'Единица измерения (ИД)' (SfromWHDetail) = DATA UOM (SfromWHDetail) IN idGroup;
shortNameUOMSfromWHDetail 'Единица измерения' (SfromWHDetail) = shortName(UOMSfromWHDetail(SfromWHDetail));

supplierPriceSfromWHDetail 'Цена без НДС (ед.)' (SfromWHDetail) = DATA NUMERIC[14,3] (SfromWHDetail);

importerPriceSfromWHDetail 'Цена первого импортёра' (SfromWHDetail) = DATA NUMERIC[14,3] (SfromWHDetail);

importerPriceSfromWHDetail(SfromWHDetail) <- importerPriceWHtoSDirSku(WHtoSDirSfromWH(SfromWHSfromWHDetail(SfromWHDetail)), skuSfromWHDetail(SfromWHDetail))
                                WHEN CHANGED (WHtoSDirSfromWH(SfromWHSfromWHDetail(SfromWHDetail))) OR CHANGED (skuSfromWHDetail(SfromWHDetail));

retailPriceSfromWHDetail 'Розничная цена' =  DATA NUMERIC[14,3] (SfromWHDetail);


retailPriceChangeSfromWHDetail(SfromWHDetail) = UNION OVERRIDE priceBasePriceChangeDocumentArticleDateTime(articleSku(skuSfromWHDetail(SfromWHDetail)), dateTimeSfromWHDetail(SfromWHDetail)),
                                                               priceDiscountPriceChangeDocumentArticleDateTime(articleSku(skuSfromWHDetail(SfromWHDetail)), dateTimeSfromWHDetail(SfromWHDetail));

retailPriceSfromWHDetail(SfromWHDetail) <- retailPriceChangeSfromWHDetail(SfromWHDetail) WHEN CHANGED (dateTimeSfromWHDetail(SfromWHDetail))
                                                                                           OR CHANGED (skuSfromWHDetail(SfromWHDetail));


importerSumSfromWHDetail 'Стоимость без НДС' (SfromWHDetail) = supplierPriceSfromWHDetail(SfromWHDetail) * quantitySfromWHDetail(SfromWHDetail);

importerSumSfromWHDetailSfromWH 'Стоимость без НДС' (SfromWH)= GROUP SUM importerSumSfromWHDetail(SfromWHDetail) BY SfromWHSfromWHDetail(SfromWHDetail) IN documentSumGroup;

retailSumSfromWHDetail 'Стоимость с НДС' (SfromWHDetail) = retailPriceSfromWHDetail(SfromWHDetail) * quantitySfromWHDetail(SfromWHDetail);

// НДС поставщика
supplierVATSfromWHDetail(SfromWHDetail) = DATA range (SfromWHDetail);
numberSupplierVATSfromWHDetail 'НДС, номер' (SfromWHDetail) = numberRange(supplierVATSfromWHDetail(SfromWHDetail));
valueSupplierVATSfromWHDetail 'НДС, %' (SfromWHDetail) = valueRateRangeDate
    (supplierVATSfromWHDetail(SfromWHDetail), dateSfromWHDetail(SfromWHDetail));

CONSTRAINT taxRange(supplierVATSfromWHDetail(SfromWHDetail)) != tax.taxVAT CHECKED BY supplierVATSfromWHDetail MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

sumSupplierVATSfromWHDetail 'Сумма НДС' (SfromWHDetail) = [X*Y/100](
    importerSumSfromWHDetail(SfromWHDetail), valueSupplierVATSfromWHDetail(SfromWHDetail));

sumSupplierVATSfromWHDetailSfromWH 'Сумма НДС' (SfromWH) = GROUP SUM sumSupplierVATSfromWHDetail(SfromWHDetail) BY SfromWHSfromWHDetail(SfromWHDetail) IN documentSumGroup;

sumInvoiceSfromWHDetail 'Стоимость с НДС' (SfromWHDetail) = importerSumSfromWHDetail(SfromWHDetail) (+) sumSupplierVATSfromWHDetail(SfromWHDetail);

sumInvoiceSfromWHDetailSfromWH 'Стоимость с НДС' (SfromWH)= GROUP SUM sumInvoiceSfromWHDetail(SfromWHDetail) BY SfromWHSfromWHDetail(SfromWHDetail) IN documentSumGroup;


// НДС розничный
retailVATSfromWHDetail(SfromWHDetail) = DATA range (SfromWHDetail);
numberRetailVATSfromWHDetail 'НДС, номер' (SfromWHDetail) = numberRange(retailVATSfromWHDetail(SfromWHDetail));
valueRetailVATSfromWHDetail 'НДС, %' (SfromWHDetail) = valueRateRangeDate
    (retailVATSfromWHDetail(SfromWHDetail), dateSfromWHDetail(SfromWHDetail));

CONSTRAINT taxRange(retailVATSfromWHDetail(SfromWHDetail)) != tax.taxVAT CHECKED BY retailVATSfromWHDetail MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';


sumRetailVATSfromWHDetail 'Сумма НДС' (SfromWHDetail) = [X*Y/(100+Y)](
    retailSumSfromWHDetail(SfromWHDetail), valueRetailVATSfromWHDetail(SfromWHDetail));

sumRetailVATSfromWHDetailSfromWH 'Сумма НДС' (SfromWH) = GROUP SUM sumRetailVATSfromWHDetail(SfromWHDetail) BY SfromWHSfromWHDetail(SfromWHDetail) IN documentSumGroup;

sumRetailInvoiceSfromWHDetail 'Стоимость без НДС' (SfromWHDetail) = retailSumSfromWHDetail(SfromWHDetail) (-) sumRetailVATSfromWHDetail(SfromWHDetail);

sumRetailInvoiceSfromWHDetailSfromWH 'Стоимость без НДС' (SfromWH)= GROUP SUM sumRetailInvoiceSfromWHDetail(SfromWHDetail) BY SfromWHSfromWHDetail(SfromWHDetail) IN documentSumGroup;

noteSfromWHDetail 'Примечание' (SfromWHDetail) = DATA STRING[100] (SfromWHDetail) MINCHARWIDTH 30 PREFCHARWIDTH 80;

balanceBSkuSfromWHDetail 'Остаток до' (SfromWHDetail) = balanceBSkuStockDateTime(skuSfromWHDetail(SfromWHDetail), departmentStoreSfromWHDetail(SfromWHDetail), dateTimeSfromWHDetail(SfromWHDetail));

///////
wareSfromWHDetail 'Посуда (ИД)' (SfromWHDetail) = DATA ware(SfromWHDetail) IN idGroup;
warePriceSfromWHDetail 'Цена' (SfromWHDetail) = DATA NUMERIC[14,3](SfromWHDetail);
@deriveBasePriceLedgerOnSkuChange(SfromWH, sku);


@defineAddDetailDialogBarcode(SfromWH, sku);

FORM SfromWH 'Приход на магазин'
    OBJECTS sf = SfromWH FIXED PANEL
    PROPERTIES (sf) nameDepartmentStoreSfromWH, dateSfromWH, timeSfromWH, quantitySfromWHDetailSfromWH, importerSumSfromWHDetailSfromWH, sumRetailVATSfromWHDetailSfromWH,
                    sumInvoiceSfromWHDetailSfromWH, noteSfromWH
    PROPERTIES (sf) numberSfromWH, seriesSfromWH, nameWarehouseSfromWH//, nameImporterSfromWH

    OBJECTS d = SfromWHDetail
    PROPERTIES(d) indexSfromWHDetail, retailPriceChangeSfromWHDetail, barcodeSfromWHDetail, nameSkuSfromWHDetail, nameBrandSfromWHDetail, sidArticleSfromWHDetail,
                  nameCategorySfromWHDetail, sidColorSfromWHDetail, nameColorSfromWHDetail, shortNameUOMSfromWHDetail, balanceBSkuSfromWHDetail,
                  quantitySfromWHDetail, importerPriceSfromWHDetail, importerSumSfromWHDetail, supplierPriceSfromWHDetail, numberSupplierVATSfromWHDetail, numberRetailVATSfromWHDetail, valueRetailVATSfromWHDetail,
                  sumRetailVATSfromWHDetail, sumInvoiceSfromWHDetail, retailPriceSfromWHDetail

    PROPERTIES(sf) TODRAW d addDetailDialogSkuSfromWHDetailSfromWH, addDetailDialogBarcodeSfromWHDetailSfromWH,
                  deleteSfromWHDetailSfromWH

    PROPERTIES(d) ADDOBJ, delete

    OBJECTS i=sku
    PROPERTIES(i) nameSku
    PROPERTIES(sf,i) quantitySfromWHSku, quantityOriginSfromWHSku, diffQuantitySfromWHSku

    FILTERS inSfromWHSfromWHDetail(sf, d)
    FILTERS quantityOriginSfromWHSku(sf,i) OR quantitySfromWHSku(sf,i)

    FILTERGROUP filtersDiff
        FILTER 'Показать отличающиеся' 'F10' diffQuantitySfromWHSku(sf,i) !=0

    EDIT SfromWH OBJECT sf
;

DESIGN SfromWH FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        ADD sf.box {
            childConstraints = TO THE RIGHT;
            NEW row1 {
                childConstraints = TO THE BOTTOM;
                ADD sf.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY (nameDepartmentStoreSfromWH);
                    ADD PROPERTY (numberSfromWH);
                    ADD PROPERTY (seriesSfromWH);
                    ADD PROPERTY (dateSfromWH);
                    ADD PROPERTY (timeSfromWH);
                }
                NEW row11 {
                childConstraints = TO THE RIGHT;
                    title = 'Контрагент-поставщик';
                    ADD PROPERTY (nameWarehouseSfromWH);
                   // ADD PROPERTY (nameImporterSfromWH);
                }
                ADD sf.documentPrmGroup;
            }
            NEW row2 {
                ADD sf.documentSumGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }
        };
        NEW row3 {
            type = TABBED;
            ADD d.box;
            ADD i.box;
        }
        ADD functions.box;
    }
}

FORM SfromWHs 'Приходы на магазин'
    OBJECTS sf = SfromWH
    PROPERTIES (sf) READONLY objectClassName, numberSfromWH, seriesSfromWH, dateSfromWH, timeSfromWH, nameWarehouseSfromWH, nameDepartmentStoreSfromWH, nameStoreSfromWH,
                   countSfromWHDetailSfromWH, quantitySfromWHDetailSfromWH, supplierPriceSfromWHDetail, importerSumSfromWHDetailSfromWH, sumRetailVATSfromWHDetailSfromWH,
                   sumInvoiceSfromWHDetailSfromWH

    PROPERTIES (sf) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed


    PROPERTIES (sf) ADDFORM, EDITFORM SHOWIF isDraftSfromWH(sf), delete FORCE PANEL SHOWIF isDraftSfromWH(sf),
                   postSfromWH SHOWIF isDraftSfromWH(sf), unpostSfromWH SHOWIF isPostedSfromWH(sf)

    OBJECTS d = SfromWHDetail
    PROPERTIES(d) READONLY indexSfromWHDetail, barcodeSfromWHDetail, nameSkuSfromWHDetail, shortNameUOMSfromWHDetail, balanceBSkuSfromWHDetail,
                  quantitySfromWHDetail, importerPriceSfromWHDetail, supplierPriceSfromWHDetail, importerSumSfromWHDetail, numberRetailVATSfromWHDetail, valueRetailVATSfromWHDetail,
                  sumRetailVATSfromWHDetail, sumInvoiceSfromWHDetail, retailPriceSfromWHDetail

    FILTERS inSfromWHSfromWHDetail(sf, d)
;

DESIGN SfromWHs FROM DEFAULT {
    ADD sf.box{
        PROPERTY (delete(sf)) {
            panelLocation = TOOLBAR;
            askConfirm = TRUE;
        PROPERTY (objectClassName(sf)) {
            preferredCharWidth = 15;
        }
        }
    }
    ADD d.box;

    NEW footer.container {
        childConstraints = TO THE BOTTOM;

        NEW cont3 {
            childConstraints = TO THE RIGHT;
            ADD sf.historyGroup {
                childConstraints = TO THE BOTTOM;
            }

            ADD sf.postedGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    }
    ADD functions.box;
}

