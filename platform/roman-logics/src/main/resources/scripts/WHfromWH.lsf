//From WareHouse to WareHouse
MODULE WHfromWH;

REQUIRE System,

        Stock,
        Numerator,
        Document,
        RomanDocument,
        Consignment,
        Declaration,
        WholesalePrice,
        WHtoWH,
        PriceChange,
        StorePrice,
        MasterData,
        RomanLogicsModule;


PRIORITY RomanLogicsModule, Stock;

CLASS WHfromWH 'Приход на склад со склада' : historyObject, numberedObject;
CLASS WHfromWHDetail 'Строка прихода на склад со склада' : inLIFOSkuLedger, priceChangeDocumentDetail, importerPriceLedger, supplierPriceLedger, retailPriceLedger, retailVATLedger, warePriceLedger;
CLASS WHfromWHPosted 'Закрытый приход на склад со склада' : WHfromWH, postedObject;

skuWHfromWHDetail 'Товар (ИД)' (WHfromWHDetail) = DATA sku(WHfromWHDetail) IN idGroup;
nameSkuWHfromWHDetail 'Наименование товара' (WHfromWHDetail) = nameSku(skuWHfromWHDetail(WHfromWHDetail));

@defineRBCorrespondingDocumentWithRetailPrices(WHfromWH, warehouse, 'Склад-получатель', sku, 'Приход на склад', warehouse, 'Склад-отправитель');
@defineDocumentDetailPackWeightSku(WHfromWH);
@defineDocumentHeaderSkuQuantity(WHfromWH);
@defineUniqueDocumentComingByExpense(WHfromWH, WHtoWH);
@defineDocumentHeaderOriginSkuQuantity(WHfromWH, WHtoWH);

//@implementSkuLedger(WHfromWH, sku, warehouse);
quantityInLIFOSkuLedger (ledger) += quantityWHfromWHDetail(ledger);
@implementSkuLedgerInLIFOBalance(WHfromWH, sku, warehouse);

companyCorrWarehouseWHfromWH (WHfromWH) = companyWarehouse(corrWarehouseWHfromWH(WHfromWH));
nameCompanyCorrWarehouseWHfromWH 'Поставщик' (WHfromWH) = name(companyCorrWarehouseWHfromWH(WHfromWH));

identityWHfromWH (WHfromWH) =  warehouseWHfromWH(WHfromWH) == destinationWarehouseWHtoWH(WHtoWHWHfromWH(WHfromWH)) AND corrWarehouseWHfromWH(WHfromWH) == warehouseWHtoWH(WHtoWHWHfromWH(WHfromWH));

CONSTRAINT WHfromWH IS WHfromWH AND NOT identityWHfromWH(WHfromWH) CHECKED BY WHtoWHWHfromWH MESSAGE  'Склад-отправитель и склад-получатель из расхода и приход должны совпадать';

initValueNumberObject (WHfromWH) += [PREV(numberObject(WHtoWH))](WHtoWHWHfromWH(WHfromWH));
initValueSeriesObject (WHfromWH) += [PREV(seriesObject(WHtoWH))](WHtoWHWHfromWH(WHfromWH));

initWhenNumberedObject(WHfromWH) += CHANGED(WHtoWHWHfromWH(WHfromWH));


numberWHfromWH 'Номер док-та расхода' (WHfromWH) = numberObject(WHtoWHWHfromWH(WHfromWH));

documentFlowWHfromWH 'Документ расхода' (WHfromWH) =
    [FORMULA STRING[500] 'CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \', \' || CAST($3 AS TEXT)'] (
    seriesNumberObject(WHtoWHWHfromWH(WHfromWH)), dateWHtoWH(WHtoWHWHfromWH(WHfromWH)), name(warehouseWHtoWH(WHtoWHWHfromWH(WHfromWH)))) MINCHARWIDTH 30 PREFCHARWIDTH 30;

contractSkuCompanyWHfromWH 'Договор ИД' (WHfromWH) = DATA contractSkuCompany(WHfromWH);
numberContractSkuCompanyWHfromWH 'Номер договора' (WHfromWH) = numberContract(contractSkuCompanyWHfromWH(WHfromWH)) IN documentPrmGroup;

isCompanyABWHfromWH (WHfromWH)= companyAContractSkuCompany(contractSkuCompanyWHfromWH(WHfromWH))== companyWarehouse(corrWarehouseWHfromWH(WHfromWH)) AND
    companyBContractSkuCompany(contractSkuCompanyWHfromWH(WHfromWH))== companyWarehouse(warehouseWHfromWH(WHfromWH)) AND
    activeContract(contractSkuCompanyWHfromWH(WHfromWH), dateWHfromWH(WHfromWH));

CONSTRAINT contractSkuCompanyWHfromWH(WHfromWH) AND NOT isCompanyABWHfromWH(WHfromWH)
    CHECKED BY contractSkuCompanyWHfromWH MESSAGE 'Договор не является договором между выбранными контрагентами или не действующий';

CONSTRAINT contractSkuCompanyWHfromWH(WHfromWH) AND NOT contractSkuCompanyWHfromWH(WHfromWH) == contractSkuCompanyWHtoWH(WHtoWHWHfromWH(WHfromWH))
  CHECKED BY contractSkuCompanyWHfromWH MESSAGE  'Договор из расхода и приход должны совпадать';

toFillWHfromWHDetailsWHfromWH 'Заполнить документ из расхода' =  ACTION (WHfromWH) {
    FOR WHfromWHWHtoWH(WHtoWHWHtoWHDetail(WHtoWHDetail)) == WHfromWH DO {
        ADDOBJ WHfromWHDetail;
        FOR d == addedObject() DO {
            SET WHfromWHWHfromWHDetail(d) <- WHfromWH AS WHfromWH;
            SET quantityWHfromWHDetail (d) <- quantityWHtoWHDetail(WHtoWHDetail);
            SET skuWHfromWHDetail (d) <- skuWHtoWHDetail(WHtoWHDetail);
            SET UOMWHfromWHDetail (d) <- UOMWHtoWHDetail(WHtoWHDetail);
            SET importerPriceWHfromWHDetail (d) <- importerPriceWHtoWHDetail(WHtoWHDetail);
            SET supplierPriceWHfromWHDetail (d) <- supplierPriceWHtoWHDetail(WHtoWHDetail);
            SET supplierVATWHfromWHDetail (d) <- supplierVATWHtoWHDetail(WHtoWHDetail);
        };
        SET contractSkuCompanyWHfromWH(WHfromWH) <- contractSkuCompanyWHtoWH(WHtoWHWHfromWH(WHfromWH));
    };
} CONFIRM;


FORM WHfromWH 'Приход на склад со склада'
    OBJECTS w = WHfromWH FIXED PANEL
    PROPERTIES (w) numberObject, seriesObject, dateWHfromWH, timeWHfromWH, numberWHfromWH, nameWarehouseWHfromWH,
                   nameCorrWarehouseWHfromWH, quantityWHfromWHDetailWHfromWH, supplierSumWHfromWHDetailWHfromWH,
                   invoiceVATSumWHfromWHDetailWHfromWH, invoiceSumWHfromWHDetailWHfromWH, noteWHfromWH,
                   numberContractSkuCompanyWHfromWH, toFillWHfromWHDetailsWHfromWH

    OBJECTS d = WHfromWHDetail
    PROPERTIES(d) indexWHfromWHDetail, barcodeWHfromWHDetail, nameSkuWHfromWHDetail, shortNameUOMWHfromWHDetail,
                  sidSizeWHfromWHDetail, nameBrandWHfromWHDetail, sidArticleWHfromWHDetail, nameCategoryWHfromWHDetail,
                  sidColorWHfromWHDetail, nameColorWHfromWHDetail, balanceBSkuWHfromWHDetail, quantityWHfromWHDetail,
                  importerPriceWHfromWHDetail, supplierPriceWHfromWHDetail, supplierSumWHfromWHDetail,
                  numberSupplierVATWHfromWHDetail, valueSupplierVATWHfromWHDetail, supplierVATSumWHfromWHDetail,
                  invoiceSumWHfromWHDetail

    PROPERTIES(w) TODRAW d addDetailDialogSkuWHfromWHDetailWHfromWH, addDetailDialogBarcodeWHfromWHDetailWHfromWH,
                  deleteWHfromWHDetailWHfromWH

    PROPERTIES(d) ADDOBJ, delete

    OBJECTS i=sku
    PROPERTIES(i) nameSku
    PROPERTIES(i, w) quantityWHfromWHDetailSkuWHfromWH, quantityOriginWHfromWHDetailSkuWHfromWH, diffQuantityWHfromWHDetailSkuWHfromWH

    FILTERS inWHfromWHWHfromWHDetail(w, d)
    FILTERS quantityOriginWHfromWHDetailSkuWHfromWH(i, w) OR quantityWHfromWHDetailSkuWHfromWH(i, w)

    FILTERGROUP filtersDiff
        FILTER 'Показать отличающиеся' 'F10' diffQuantityWHfromWHDetailSkuWHfromWH(i, w) !=0

    FILTERGROUP filtersQuantity
        FILTER 'Показывать принятые' 'F9' quantityWHfromWHDetail(d) DEFAULT

    EDIT WHfromWH OBJECT w
;

DESIGN WHfromWH FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        ADD w.box {
            childConstraints = TO THE RIGHT;
            NEW row1 {
                childConstraints = TO THE BOTTOM;
                ADD w.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY (nameWarehouseWHfromWH);
                    ADD PROPERTY (numberObject);
                    ADD PROPERTY (seriesObject);
                    ADD PROPERTY (dateWHfromWH);
                    ADD PROPERTY (timeWHfromWH);
                }
                NEW row11 {
                childConstraints = TO THE RIGHT;

                    NEW row111 {
                        title = 'Контрагент-поставщик';
                        ADD PROPERTY (nameCorrWarehouseWHfromWH);
                    }
                    NEW row112{
                        title = 'Расход';
                        ADD PROPERTY (numberWHfromWH);
                        ADD PROPERTY (toFillWHfromWHDetailsWHfromWH);
                    }
                }
                ADD w.documentPrmGroup;
            }
            NEW row2 {
                ADD w.documentSumGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }
        }
        NEW row3 {
            type = TABBED;
            ADD d.box;
            ADD i.box;
        }
        ADD functions.box;
    }
}

FORM WHfromWHs 'Приходы на склад со склада'
    OBJECTS w = WHfromWH
    PROPERTIES (w) READONLY objectClassName, numberObject, seriesObject, dateWHfromWH, timeWHfromWH, nameWarehouseWHfromWH,
                            nameCorrWarehouseWHfromWH, numberContractSkuCompanyWHfromWH, countWHfromWHDetailWHfromWH,
                            quantityWHfromWHDetailWHfromWH, supplierSumWHfromWHDetailWHfromWH,
                            invoiceVATSumWHfromWHDetailWHfromWH, invoiceSumWHfromWHDetailWHfromWH, noteWHfromWH

    PROPERTIES (w) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES (w) ADDFORM, EDITFORM SHOWIF isDraftWHfromWH(w), delete FORCE PANEL SHOWIF isDraftWHfromWH(w),
                   postWHfromWH SHOWIF isDraftWHfromWH(w), unpostWHfromWH SHOWIF isPostedWHfromWH(w)

    OBJECTS d = WHfromWHDetail
    PROPERTIES(d) READONLY indexWHfromWHDetail, barcodeWHfromWHDetail, nameSkuWHfromWHDetail, shortNameUOMWHfromWHDetail,
                           sidSizeWHfromWHDetail, nameBrandWHfromWHDetail, sidArticleWHfromWHDetail, nameCategoryWHfromWHDetail,
                           sidColorWHfromWHDetail, nameColorWHfromWHDetail, balanceBSkuWHfromWHDetail, quantityWHfromWHDetail,
                           importerPriceWHfromWHDetail, supplierPriceWHfromWHDetail, supplierSumWHfromWHDetail,
                           numberSupplierVATWHfromWHDetail, valueSupplierVATWHfromWHDetail, supplierVATSumWHfromWHDetail,
                           invoiceSumWHfromWHDetail

    FILTERS inWHfromWHWHfromWHDetail(w, d)
;

DESIGN WHfromWHs FROM DEFAULT {
    ADD w.box{
        PROPERTY (delete(w)) {
            panelLocation = TOOLBAR;
            askConfirm = TRUE;
        PROPERTY (objectClassName(w)) {
            preferredCharWidth = 15;
        }
        }
    }
    ADD d.box;

    NEW footer.container {
        childConstraints = TO THE BOTTOM;

        NEW cont3 {
            childConstraints = TO THE RIGHT;
            ADD w.historyGroup {
                childConstraints = TO THE BOTTOM;
            }

            ADD w.postedGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    }
    ADD functions.box;
}

