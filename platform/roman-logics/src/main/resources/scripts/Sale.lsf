MODULE Sale;

REQUIRE System,
        Document,
        RomanDocument,
        Stock,
        RomanStock,
        DocumentTransfer,
        Contract,
        RomanLogicsModule;

PRIORITY Stock, RomanLogicsModule;

// ---------------------------------------- Перемещение ------------------------------------ //

CLASS saleOut 'Продажа товаров по накладным' : historyObject, numberedObject;
CLASS saleOutPosted 'Проведенная продажа товаров по накладным' : saleOut, postedObject;
CLASS saleOutDetail 'Строка продажи товаров по накладным' : outFIFOSkuLedger;

@defineDocumentTransferOut(sale, 'Продажа товаров по накладным', sku, stock);
@defineDocumentFormTransferOut(sale, 'Продажа товаров по накладным');

CONSTRAINT companyStock(stockSaleOut(saleOut)) == companyStock(destinationStockSaleOut(saleOut)) CHECKED BY destinationStockSaleOut
    MESSAGE 'Продажа товаров должна идти между складами разных компаний';

@defineDocumentDetailSkuArticle(saleOut);
@extendDocumentFormDetailSkuArticle(saleOut, d, saleOut);
@extendDocumentFormDetailSkuArticleReadonly(saleOuts, d, saleOut);

// Проводим по регистру
@implementSkuLedger(saleOut, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantitySaleOutDetail (ledger);
@implementSkuLedgerOutFIFOBalanceA(saleOut, sku, stock);

companySaleOut (saleOut) = companyStock(stockSaleOut(saleOut));
destinationCompanySaleOut(saleOut) = companyStock(destinationStockSaleOut(saleOut));

@defineDocumentContract(saleOut, contractSkuCompany, singleContractSkuCompanyCompanyCompany, companySaleOut, destinationCompanySaleOut,
                        'Сторона A договора продажи товаров не соответствуют компании склада-отправителя',
                        'Сторона B договора продажи товаров не соответствуют компании склада-получателя');

supplierPriceSaleOutDetail 'Цена оптовая' = DATA NUMERIC[14,2] (saleOutDetail);

EXTEND FORM saleOut
    PROPERTIES(t) numberContractSkuCompanySaleOut
    PROPERTIES(d) supplierPriceSaleOutDetail
;

EXTEND FORM saleOuts
    PROPERTIES(t) isCommissionSaleOut
    PROPERTIES(d) supplierPriceSaleOutDetail
;

// ---------------------------------------- Поступление ------------------------------------ //

CLASS saleIn 'Покупка товаров по накладным' : historyObject;
CLASS saleInDetail 'Строка покупки товаров по накладным';
CLASS saleInBatchDetail 'Строка покупки товаров по накладным (по партиям)' : batchA;

@defineDocumentTransferIn(sale, 'Покупка товаров по накладным', sku, stock);
@defineDocumentFormTransferIn(sale, 'Покупка товаров по накладным');

@defineDocumentDetailSkuArticle(saleIn);
@extendDocumentFormDetailSkuArticleReadonly(saleIns, d, saleIn);

costSaleOutDetailBatch (ledger, batch) = costDataSkuLedgerBatch(ledger, batch) AND ledger IS saleOutDetail;
@defineAggregationDouble(saleOutDetail, batch, saleInBatchDetail, costSaleOutDetailBatch);

saleOutSaleInBatchDetail (detail) = saleOutSaleOutDetail(saleOutDetailSaleInBatchDetail(detail));
saleInSaleInBatchDetail (detail) = saleInSaleOut(saleOutSaleInBatchDetail(detail));

@defineDocumentDetailIndexCustom(saleIn, saleInBatchDetail);

@defineDocumentAggregationDetailTime(saleOut, saleInBatch);
@defineDocumentAggregationDetailStockPrefix(saleOut, saleInBatch, stock, 'Склад-получатель', destination, );
@defineDocumentAggregationDetailStockPrefix(saleOut, saleInBatch, stock, 'Склад-отправитель', , destination);
@defineDocumentAggregationDetailPosted(saleOut, saleInBatch);
@defineDocumentAggregationDetailSku(saleOut, saleInBatch, sku);
@defineDocumentDetailDescriptionCustom(saleIn, saleInBatchDetail);

quantitySaleInBatchDetail 'Кол-во' (detail) = costDataSkuLedgerBatch(saleOutDetailSaleInBatchDetail(detail), batchSaleInBatchDetail(detail));

costSaleInBatchDetail = DATA NUMERIC[14,2] (saleInBatchDetail);
costSaleInBatchDetail (detail) <- [PREV(costBatch(batch))](batchSaleInBatchDetail(detail)) WHEN ASSIGNED(isPostedSaleInBatchDetail(detail));

importerPriceSaleInBatchDetail = DATA NUMERIC[14,2] (saleInBatchDetail);
importerPriceSaleInBatchDetail (detail) <- IF batchSaleInBatchDetail(detail) IS saleInBatchDetail THEN
                                                [PREV(importerPriceBatchA(batch))](batchSaleInBatchDetail(detail)) ELSE
                                                supplierPriceSaleOutDetail(saleOutDetailSaleInBatchDetail(detail))
                                            WHEN ASSIGNED(isPostedSaleInBatchDetail(detail));

supplierPriceSaleInBatchDetail (detail) = supplierPriceSaleOutDetail(saleOutDetailSaleInBatchDetail(detail));

rangeVATSaleInBatchDetail (detail) = DATA range (saleInBatchDetail);
rangeVATSaleInBatchDetail (detail) <- [PREV(rangeVATBatchA(batch))](batchSaleInBatchDetail(detail)) WHEN ASSIGNED(isPostedSaleInBatchDetail(detail));

isCommissionSaleInBatchDetail 'Продажа на комиссию' (detail) = isCommissionSaleOut(saleOutSaleInBatchDetail(detail));

@implementBatch(saleInBatch, sku, stock, cost);
quantityBatch(batch) += quantitySaleInBatchDetail(batch);
ownerBatchA (batch) += IF isCommissionSaleInBatchDetail(batch) THEN companyStock(destinationStockSaleInBatchDetail(batch)) ELSE companyStock(stockSaleInBatchDetail(batch));
isCommissionBatchA(batch) += isCommissionSaleInBatchDetail(batch);
importerPriceBatchA(batch) += importerPriceSaleInBatchDetail(batch);
supplierPriceBatchA(batch) += supplierPriceSaleInBatchDetail(batch);
rangeVATBatchA(batch) += rangeVATSaleInBatchDetail(batch);

contractSkuCompanySaleInBatchDetail (detail) = contractSkuCompanySaleOut(saleOutSaleInBatchDetail(detail));

costSaleInBatch (saleIn, batch) = quantitySaleInBatchDetail(batch) AND saleIn == saleInSaleInBatchDetail(batch);

EXTEND FORM saleIns
    OBJECTS b = saleInBatchDetail
    FILTERS saleInSaleInBatchDetail(b) == t
;

EXTEND DESIGN saleIns {
    documentDetail {
        ADD b.box {
            title = 'Партии';
        }
    }
}

@defineDocumentDetailSkuArticle(saleInBatch);
@extendDocumentFormDetailSkuArticleReadonly(saleIns, b, saleInBatch);

EXTEND FORM saleIns
    PROPERTIES(b) READONLY descriptionBatch, importerPriceBatchA, supplierPriceBatchA, valueSupplierVATBatchA
;

// ---------------------------------------- Приемка ------------------------------------ //

CLASS saleRec 'Приемка товаров по накладной (продажа)' : historyObject;
CLASS saleRecPosted 'Проведенная приемка товаров по накладной (продажа)' : saleRec, postedObject;

CLASS saleRecDetail 'Строка приемки товаров по накладной (продажа)';

@defineDocumentTransferRec(sale, 'Приемка товаров по накладным (продажа)', sku, stock);
@defineDocumentFormTransferRec(sale, 'Приемка товаров по накладным (продажа)');

@defineDocumentDetailSkuArticle(saleRec);
@extendDocumentFormDetailSkuArticle(saleRec, d, saleRec);

@extendDocumentFormDetailSkuArticleReadonly(saleIns, r, saleRec);

// ---------------------------------------- Акт расхождений ------------------------------------ //
CLASS saleDiff 'Акт расхождений приемки товаров по накладной (продажа)' : historyObject;

CLASS ABSTRACT saleDiffDetail 'Строка расхождений акта приемки товаров по накладной (продажа)';
CLASS saleDiffEDetail 'Строка расхождений акта приемки товаров по накладной (продажа, излишек)' : saleDiffDetail, batchB;
CLASS saleDiffSDetail 'Строка расхождений акта приемки товаров по накладной (продажа, недостача)' : saleDiffDetail, outFIFOSkuLedger;

@defineDocumentTransferDiff(sale, 'Акт расхождений приемки товаров по накладной (продажа)', sku, stock);
@defineDocumentFormTransferDiff(sale);

@defineDocumentDetailSkuArticle(saleDiff);
@extendDocumentFormDetailSkuArticleReadonlyQuantity(saleIns, f, saleDiff, signedQuantitySaleDiffDetail);

costSaleDiffEDetail(detail) = 0.0 IF detail IS saleDiffEDetail;
@implementBatch(saleDiffE, sku, stock, cost);
quantityBatch (batch) += quantitySaleDiffEDetail(batch);
skipASkuLedger (ledger) += ledger IS saleDiffEDetail;

@implementSkuLedger(saleDiffS, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantitySaleDiffSDetail(ledger);
limitOutFIFOSkuLedgerBatch (ledger, batch) += costSaleInBatch(saleInSaleDiffSDetail(ledger), batch);
orderOutFIFOSkuLedgerBatch (ledger, batch) += orderBBatch(batch) IF ledger IS saleDiffSDetail;

skipASkuLedger (ledger) += ledger IS saleDiffSDetail;
