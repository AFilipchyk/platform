MODULE Sale;

REQUIRE System,
        Document,
        RomanDocument,
        Stock,
        RomanStock,
        DocumentTransfer,
        Contract,
        RetailPrice,
        StorePriceTransfer,
        WholesalePrice,
        Consignment,
        RomanLogicsModule;

PRIORITY Stock, RomanLogicsModule;

// ---------------------------------------- Перемещение ------------------------------------ //

CLASS saleOut 'Продажа товаров по накладным' : historyObject, numberedObject, consignment, outAccountDocumentLedger, innerDocument;
CLASS saleOutPosted 'Проведенная продажа товаров по накладным' : saleOut, postedObject;
CLASS saleOutDetail 'Строка продажи товаров по накладным' : outFIFOSkuLedger;
CLASS saleOutBatchDetail 'Строка продажи товаров по накладным (по партиям)': consignmentDetail;

@defineDocumentTransferOut(sale, 'Продажа товаров по накладным', sku, stock);
@defineDocumentFormTransferOut(sale, 'Продажа товаров по накладным');

@defineDocumentTransferOutBatch(sale, sku);
@defineDocumentFormTransferOutBatch(sale);

@extendDocumentFormDetailSkuArticleReadonly(saleOuts, o, saleOutBatch);

importerPriceSaleOutBatchDetail 'Цена импортера' (detail) = importerPriceBatchA(batchSaleOutBatchDetail(detail));
supplierPriceSaleOutBatchDetail 'Цена поставщика' (detail) = supplierPriceBatchA(batchSaleOutBatchDetail(detail));
EXTEND FORM saleOuts
    PROPERTIES(o) READONLY importerPriceSaleOutBatchDetail, supplierPriceSaleOutBatchDetail
;

CONSTRAINT companyStock(stockSaleOut(saleOut)) == companyStock(destinationStockSaleOut(saleOut)) CHECKED BY destinationStockSaleOut
    MESSAGE 'Продажа товаров должна идти между складами разных компаний';

@defineDocumentDetailSkuArticle(saleOut);
@extendDocumentFormDetailSkuArticle(saleOut, d, saleOut);
@extendDocumentFormDetailSkuArticleReadonly(saleOuts, d, saleOut);

companySaleOut (saleOut) = companyStock(stockSaleOut(saleOut));
destinationCompanySaleOut(saleOut) = companyStock(destinationStockSaleOut(saleOut));

@defineDocumentContract(saleOut, contractSkuCompany, singleContractSkuCompanyCompanyCompany, companySaleOut, destinationCompanySaleOut,
                        'Сторона A договора продажи товаров не соответствуют компании склада-отправителя',
                        'Сторона B договора продажи товаров не соответствуют компании склада-получателя');

supplierPriceSaleOutDetail 'Цена оптовая' = DATA NUMERIC[14,2] (saleOutDetail);
supplierPriceSaleOutDetail (saleOutDetail) <- priceWholesaleArticleDateTime(articleSku(skuSaleOutDetail(saleOutDetail)), dateTimeSaleOutDetail(saleOutDetail))
    WHEN CHANGED(skuSaleOutDetail(saleOutDetail)) OR CHANGED(dateTimeSaleOutDetail(saleOutDetail));

EXTEND FORM saleOut
    PROPERTIES(t) numberContractSkuCompanySaleOut
    PROPERTIES(d) supplierPriceSaleOutDetail
;

EXTEND FORM saleOuts
    PROPERTIES(t) READONLY isCommissionSaleOut
    PROPERTIES(d) READONLY supplierPriceSaleOutDetail
;

@defineDocumentTransferRetail(saleOut);

isCommissionSaleOutDetail(detail) = isCommissionSaleOut(saleOutSaleOutDetail(detail));

useRetailPriceSaleOutDetail(detail) = stockSaleOutDetail(detail) IS departmentStore OR isCommissionSaleOutDetail(detail);
@defineDocumentTransferAccount(saleOut, useRetailPriceSaleOutDetail);

// Проводим по регистру
@implementSkuLedger(saleOut, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantitySaleOutDetail (ledger);
limitOutFIFOSkuLedgerBatch(ledger, batch) += currentBalanceABatchStock(batch, stockSaleOutDetail(ledger)) AND NOT commissionContractSkuBatchA(batch)
                                             AND batch IS batchA;
sumOutSkuLedger(ledger) += accountSumSaleOutDetail(ledger);

@defineConstraintSkuLedgerCosted(saleOut, 'Не хватает остатков по партиям для продажи товаров');

// Товарные накладные
@defineDocumentDetailPackWeightSku(saleOutBatch);

@defineConsignment(saleOut);
@implementConsignmentHeader(saleOut, stock);
isCommissionSaleOutBatchDetail 'Продажа на комиссию' (saleOutBatchDetail) = isCommissionSaleOut(saleOutSaleOutBatchDetail(saleOutBatchDetail));

senderConsignment (consignment) += companyStock(stockSaleOut(consignment));
recipientConsignment (consignment) += companyStock(destinationStockSaleOut(consignment));
consignmentConsignmentDetail (consignmentDetail) += saleOutSaleOutBatchDetail (consignmentDetail);
skuConsignmentDetail (consignmentDetail) += skuSaleOutBatchDetail (consignmentDetail);
quantityConsignmentDetail (consignmentDetail) += quantitySaleOutBatchDetail (consignmentDetail);

priceSaleOutBatchDetailC (saleOutBatchDetail) = retailPriceSaleOutDetail(saleOutDetailSaleOutBatchDetail(saleOutBatchDetail));
priceSaleOutBatchDetailS (saleOutBatchDetail) = supplierPriceBatchA(batchSaleOutBatchDetail(saleOutBatchDetail));

supplierSumSaleOutBatchDetailC (saleOutBatchDetail) = priceSaleOutBatchDetailC(saleOutBatchDetail) *
    quantitySaleOutBatchDetail (saleOutBatchDetail);
supplierSumSaleOutBatchDetailS (saleOutBatchDetail) = priceSaleOutBatchDetailS(saleOutBatchDetail) *
    quantitySaleOutBatchDetail (saleOutBatchDetail);

sumVATSaleOutBatchDetailS (saleOutBatchDetail) =  [round0(X*Y/100)](supplierSumSaleOutBatchDetailS(saleOutBatchDetail),
    valueSupplierVATBatchA(batchSaleOutBatchDetail(saleOutBatchDetail)));


priceConsignmentDetail (consignmentDetail) += IF isCommissionSaleOutBatchDetail(consignmentDetail) THEN priceSaleOutBatchDetailC(consignmentDetail)
    ELSE priceSaleOutBatchDetailS(consignmentDetail);

sumConsignmentDetail (consignmentDetail) += IF isCommissionSaleOutBatchDetail(consignmentDetail) THEN supplierSumSaleOutBatchDetailC(consignmentDetail)
    ELSE supplierSumSaleOutBatchDetailS(consignmentDetail);

vatConsignmentDetail (consignmentDetail) += valueSupplierVATBatchA(batchSaleOutBatchDetail(consignmentDetail))
    AND NOT isCommissionSaleOutBatchDetail(consignmentDetail);

sumVATConsignmentDetail (consignmentDetail) +=  sumVATSaleOutBatchDetailS(consignmentDetail)
    AND NOT isCommissionSaleOutBatchDetail(consignmentDetail);

sumInvoiceConsignmentDetail (consignmentDetail) += IF isCommissionSaleOutBatchDetail(consignmentDetail) THEN supplierSumSaleOutBatchDetailC(consignmentDetail)
    ELSE supplierSumSaleOutBatchDetailS(consignmentDetail) (+) sumVATSaleOutBatchDetailS(consignmentDetail);

grossWeightConsignmentDetail (consignmentDetail) += grossWeightSaleOutBatchDetail (consignmentDetail);
packQuantityConsignmentDetail (consignmentDetail) += packQuantitySaleOutBatchDetail (consignmentDetail);
shortNameUOMConsignmentDetail (consignmentDetail) += shortNameUOMSaleOutBatchDetail (consignmentDetail);


noteSaleOutBatchDetail (saleOutBatchDetail) = [FORMULA STRING[30] '\'Цена импортера:\' ||  \' \' || CAST($1 AS TEXT)'](
    importerPriceBatchA(batchSaleOutBatchDetail(saleOutBatchDetail)));

noteConsignmentDetail (consignmentDetail) += noteSaleOutBatchDetail(consignmentDetail) IF
    supplierPriceBatchA(batchSaleOutBatchDetail(consignmentDetail)) != importerPriceBatchA(batchSaleOutBatchDetail(consignmentDetail));

@defineDocumentFormTransferOutConsignment(sale, t);
// todo: заполнить необходимыми данными

// ---------------------------------------- Поступление ------------------------------------ //

CLASS saleIn 'Покупка товаров по накладным' : historyObject, incAccountDocumentLedger;
CLASS saleInDetail 'Строка покупки товаров по накладным';
CLASS saleInBatchDetail 'Строка покупки товаров по накладным (по партиям)' : batchA;

@defineDocumentTransferIn(sale, 'Покупка товаров по накладным', sku, stock);
@defineDocumentFormTransferIn(sale, 'Покупка товаров по накладным');

@defineDocumentDetailSkuArticle(saleIn);
@extendDocumentFormDetailSkuArticleReadonly(saleIns, d, saleIn);

TABLE saleInBatchDetail(saleInBatchDetail);

@defineAggregationDouble(saleOutDetail, batch, saleInBatchDetail, costSaleOutDetailBatch);

saleOutSaleInBatchDetail (detail) = saleOutSaleOutDetail(saleOutDetailSaleInBatchDetail(detail));
saleInSaleInBatchDetail (detail) = saleInSaleOut(saleOutSaleInBatchDetail(detail));

@defineDocumentDetailIndexCustom(saleIn, saleInBatchDetail);

@defineDocumentAggregationDetailTime(saleOut, saleInBatch);
@defineDocumentAggregationDetailStockPrefix(saleOut, saleInBatch, stock, 'Склад-получатель', destination, );
@defineDocumentAggregationDetailStockPrefix(saleOut, saleInBatch, stock, 'Склад-отправитель', , destination);
@defineDocumentAggregationDetailPosted(saleOut, saleInBatch);
@defineDocumentAggregationDetailSku(saleOut, saleInBatch, sku);
@defineDocumentDetailDescriptionCustom(saleIn, saleInBatchDetail);

quantitySaleInBatchDetail 'Кол-во' (detail) = costDataSkuLedgerBatch(saleOutDetailSaleInBatchDetail(detail), batchSaleInBatchDetail(detail));

contractSkuCompanySaleInBatchDetail (detail) = contractSkuCompanySaleOut(saleOutSaleInBatchDetail(detail));
isCommissionSaleInBatchDetail 'Продажа на комиссию' (detail) = isCommissionSaleOut(saleOutSaleInBatchDetail(detail));

isCommissionSaleIn 'Продажа на комиссию' (saleIn) = isCommissionSaleOut(saleOutSaleIn(saleIn));

costSaleInBatchDetail = DATA NUMERIC[14,2] (saleInBatchDetail);
costSaleInBatchDetail (detail) <- [PREV(costBatch(batch))](batchSaleInBatchDetail(detail)) WHEN ASSIGNED(isPostedSaleInBatchDetail(detail));

importerPriceSaleInBatchDetail = DATA NUMERIC[14,2] (saleInBatchDetail);
importerPriceSaleInBatchDetail (detail) <- IF batchSaleInBatchDetail(detail) IS saleInBatchDetail THEN
                                                [PREV(importerPriceBatchA(batch))](batchSaleInBatchDetail(detail)) ELSE
                                                supplierPriceSaleOutDetail(saleOutDetailSaleInBatchDetail(detail))
                                            WHEN ASSIGNED(isPostedSaleInBatchDetail(detail));

supplierPriceSaleInBatchDetail (detail) = supplierPriceSaleOutDetail(saleOutDetailSaleInBatchDetail(detail));

rangeVATSaleInBatchDetail (detail) = DATA range (saleInBatchDetail);
rangeVATSaleInBatchDetail (detail) <- [PREV(rangeVATBatchA(batch))](batchSaleInBatchDetail(detail)) WHEN ASSIGNED(isPostedSaleInBatchDetail(detail));

accountPriceSaleInBatchDetail (detail) = IF isCommissionSaleInBatchDetail(detail) THEN retailPriceSaleOutDetail(saleOutDetailSaleInBatchDetail(detail))
                                                                                  ELSE supplierPriceSaleOutDetail(saleOutDetailSaleInBatchDetail(detail));

costSaleInBatch (saleIn, batch) = quantitySaleInBatchDetail(batch) AND saleIn == saleInSaleInBatchDetail(batch) PERSISTENT;

EXTEND FORM saleIns
    PROPERTIES(t) READONLY isCommissionSaleIn BEFORE countSaleInDetailSaleIn
    OBJECTS b = saleInBatchDetail
    FILTERS saleInSaleInBatchDetail(b) == t
;

EXTEND DESIGN saleIns {
    documentDetail {
        ADD b.box {
            title = 'Партии';
        }
    }
}

@defineDocumentDetailSkuArticle(saleInBatch);
@extendDocumentFormDetailSkuArticleReadonly(saleIns, b, saleInBatch);

EXTEND FORM saleIns
    PROPERTIES(b) READONLY descriptionBatch, importerPriceBatchA, supplierPriceBatchA, valueSupplierVATBatchA
;

retailPriceSaleInBatchDetail 'Цена розничная' (detail) = retailPriceSaleOutDetail(saleOutDetailSaleInBatchDetail(detail));
retailSumSaleInBatchDetail 'Сумма розничная' (detail) = quantitySaleInBatchDetail(detail) * retailPriceSaleInBatchDetail(detail);

useRetailPriceSaleInBatchDetail(detail) = stockSaleInBatchDetail(detail) IS departmentStore OR isCommissionSaleInBatchDetail(detail);
@defineDocumentTransferAccountCustom(saleIn, useRetailPriceSaleInBatchDetail, saleInBatchDetail, b);

@implementBatch(saleInBatch, sku, stock, cost);
quantityBatch(batch) += quantitySaleInBatchDetail(batch);
ownerBatchA (batch) += IF isCommissionSaleInBatchDetail(batch) THEN companyStock(destinationStockSaleInBatchDetail(batch)) ELSE companyStock(stockSaleInBatchDetail(batch));
commissionContractSkuBatchA (batch) += contractSkuCompanySaleInBatchDetail(batch) AND isCommissionSaleInBatchDetail(batch);
importerPriceBatchA(batch) += importerPriceSaleInBatchDetail(batch);
supplierPriceBatchA(batch) += supplierPriceSaleInBatchDetail(batch);
rangeVATBatchA(batch) += rangeVATSaleInBatchDetail(batch);
sumInSkuLedger(batch) += accountSumSaleInBatchDetail(batch);

// ---------------------------------------- Приемка ------------------------------------ //

CLASS saleRec 'Приемка товаров по накладной (продажа)' : historyObject;
CLASS saleRecPosted 'Проведенная приемка товаров по накладной (продажа)' : saleRec, postedObject;

CLASS saleRecDetail 'Строка приемки товаров по накладной (продажа)';

@defineDocumentTransferRec(sale, 'Приемка товаров по накладным (продажа)', sku, stock);
@defineDocumentFormTransferRec(sale, 'Приемка товаров по накладным (продажа)');

@defineDocumentDetailSkuArticle(saleRec);
@extendDocumentFormDetailSkuArticle(saleRec, d, saleRec);

@extendDocumentFormDetailSkuArticleReadonly(saleIns, r, saleRec);

saleRecSaleInBatchDetail (detail) = saleRecSaleIn(saleInSaleInBatchDetail(detail));

// ---------------------------------------- Акт расхождений ------------------------------------ //
CLASS saleDiff 'Акт расхождений приемки товаров по накладной (продажа)' : historyObject;

CLASS ABSTRACT saleDiffDetail 'Строка расхождений акта приемки товаров по накладной (продажа)';
CLASS saleDiffEDetail 'Строка расхождений акта приемки товаров по накладной (продажа, излишек)' : saleDiffDetail, batchB;
CLASS saleDiffSDetail 'Строка расхождений акта приемки товаров по накладной (продажа, недостача)' : saleDiffDetail, outFIFOSkuLedger;

@defineDocumentTransferDiff(sale, 'Акт расхождений приемки товаров по накладной (продажа)', sku, stock);
@defineDocumentFormTransferDiff(sale);

@defineDocumentDetailSkuArticle(saleDiff);
@extendDocumentFormDetailSkuArticleReadonlyQuantity(saleIns, f, saleDiff, signedQuantitySaleDiffDetail);

costSaleDiffEDetail(detail) = 0.0 IF detail IS saleDiffEDetail;
@implementBatch(saleDiffE, sku, stock, cost);
quantityBatch (batch) += quantitySaleDiffEDetail(batch);
skipASkuLedger (ledger) += ledger IS saleDiffEDetail;

@implementSkuLedger(saleDiffS, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantitySaleDiffSDetail(ledger);
limitOutFIFOSkuLedgerBatch (ledger, batch) += costSaleInBatch(saleInSaleDiffSDetail(ledger), batch);
orderOutFIFOSkuLedgerBatch (ledger, batch) += orderBBatch(batch) IF ledger IS saleDiffSDetail;

accountPriceSaleRecBatchA (saleRec, batchA) = GROUP MAX accountPriceSaleInBatchDetailBatchA(detail, batchA) BY saleRecSaleInBatchDetail(detail), batchA;
accountSumSaleDiffSDetail (detail) = GROUP SUM costDataSkuLedgerBatch(detail, batch) * accountPriceSaleRecBatchA(saleRecSaleDiffSDetail(detail), batch) BY detail PERSISTENT;
sumOutSkuLedger(ledger) += accountSumSaleDiffSDetail(ledger);

skipASkuLedger (ledger) += ledger IS saleDiffSDetail;

// ---------------------------------------- Акт расценки ------------------------------------ //
CLASS transferPriceActSale 'Акт расценки' : transferPriceAct;
CLASS transferPriceActSaleDetail 'Строка акта расценки': transferPriceActDetail;

prevImporterPriceBatch (batch) = PREV(importerPriceBatchA(batch)) AND batch IS batch;
prevSupplierPriceBatch (batch) = PREV(supplierPriceBatchA(batch)) AND batch IS batch;
prevRangeVATBatch (batch) = PREV(rangeVATBatchA(batch)) AND batch IS batch;

@defineDocumentTransferPriceAct (sale, 'Акт расценки (продажа)', 'Строка акта расценки (продажа)', sku, stock, prevImporterPriceBatch, prevSupplierPriceBatch, prevRangeVATBatch);

notPassToBookkeepingListRegister (inputListRegister) += isCommissionSaleOut(saleOutTransferPriceActSale(inputListRegister));

//---------------------------------------- Товарный отчет ------------------------- //

dateTimeAccountDocumentLedger (ledger) += dateTimeSaleOut(ledger);
isPostedAccountDocumentLedger (ledger) += isPostedSaleOut(ledger);
stockAccountDocumentLedger (ledger) += stockSaleOut(ledger);
descriptionAccountDocumentLedger (ledger) += descriptionSaleOut(ledger);

sumOutAccountDocumentLedger (ledger) += accountSumSaleOut(ledger);
sumItemOutAccountDocumentLedger (ledger) += accountSumSaleOut(ledger);
sumContainerOutAccountDocumentLedger (ledger) += 0.0 IF ledger IS saleOut;

// приход
dateTimeAccountDocumentLedger (ledger) += dateTimeSaleIn(ledger);
isPostedAccountDocumentLedger (ledger) += isPostedSaleIn(ledger);
stockAccountDocumentLedger (ledger) += stockSaleIn(ledger);
descriptionAccountDocumentLedger (ledger) += descriptionSaleIn(ledger);

sumIncAccountDocumentLedger (ledger) += accountSumSaleIn(ledger);
sumItemIncAccountDocumentLedger (ledger) += accountSumSaleIn(ledger);
sumContainerIncAccountDocumentLedger (ledger) += 0.0 IF ledger IS saleIn;
