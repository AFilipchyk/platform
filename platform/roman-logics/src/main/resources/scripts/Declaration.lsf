MODULE Declaration;

REQUIRE System,
        Utils,
        Historizable,
        Tax,
        Stock,
        Numerator,
        Document,
        RomanDocument,
        Historizable,
        RetailPrice,
        MasterData,
        RomanStock,
        RomanLogicsModule;

PRIORITY Utils, Stock, RomanLogicsModule;

NAMESPACE RB;

//barcodeLedger 'Штрих-код' (ledger) = barcode(skuBalanceSkuLedger(ledger));
//sidSizeLedger 'Размер' (ledger) = sidSizeSupplierItem(skuBalanceSkuLedger(ledger));
//sidColorLedger 'Цвет (код)' (ledger) = sidColorSupplierItem(skuBalanceSkuLedger(ledger));
//nameColorLedger 'Цвет' (ledger) = nameColorSupplierItem(skuBalanceSkuLedger(ledger));
//
//articleLedger 'Артикул (ИД)' (ledger) = articleSku(skuBalanceSkuLedger(ledger)) IN idGroup;
//sidArticleLedger 'Артикул' (ledger) = sidArticle(articleLedger(ledger));
//brandLedger 'Бренд (ИД)' (ledger) = brandSupplierArticle(articleLedger(ledger)) IN idGroup;
//nameBrandLedger 'Бренд' (ledger) = name(brandLedger(ledger));
//categoryLedger 'Номенклатурная группа (ИД)' (ledger) = categoryArticle(articleLedger(ledger)) IN idGroup;
//nameCategoryLedger 'Номенклатурная группа' (ledger) = name(categoryLedger(ledger));

//--------------------------------- Сертификаты --------------------------------------------------------------------//
CLASS ABSTRACT certificate 'Сертификат';
CLASS temporalCertificate 'Временный сертификат' : certificate;
CLASS permanentCertificate 'Постоянный сертификат' : certificate;

TABLE certificate (certificate);

sidCertificate 'Номер' = DATA STRING[20] (certificate) IN baseGroup AGGPROP;
dateIssueCertificate 'Дата выдачи' = DATA DATE (certificate) IN baseGroup;
dateValidityCertificate 'Действует до' = DATA DATE (certificate) IN baseGroup;

FORM certificate 'Сертификат'
    OBJECTS c=certificate FIXED PANEL
    PROPERTIES(c) sidCertificate, objectClassName, dateIssueCertificate, dateValidityCertificate
    EDIT certificate OBJECT c
;

FORM certificates 'Сертификаты'
    OBJECTS c=certificate
    PROPERTIES(c) READONLY sidCertificate, objectClassName, dateIssueCertificate, dateValidityCertificate
    PROPERTIES(c) ADDFORM, EDITFORM, delete
;

//--------------------------------- Инвойсы -------------------------------------------------------------------------//
CLASS formedInvoice 'Инвойс от STX' : innerInvoice;

TABLE innerInvoice (innerInvoice);

includeImporterFreight(importer, freight) = quantityProxyImporterFreight(importer, freight) AND freight IS freightArrived;

@defineAggregationDouble(importer, freight, formedInvoice, includeImporterFreight);

freightInnerInvoice 'Фрахт инвойса (ИД)' (innerInvoice) = UNION EXCLUSIVE freightFormedInvoice(innerInvoice),
                                                                          freightDirectInvoice(innerInvoice) IN idGroup;

dateFreightInnerInvoice 'Дата инвойса' (formedInvoice) = dateArrivalFreight(freightInnerInvoice(formedInvoice)) IN baseGroup;

freightArrivedInnerInvoice 'Прибыл фрахт инвойса' (innerInvoice) = freightInnerInvoice(innerInvoice) IS freightArrived;

customStoreInnerInvoice 'СВХ (ИД)' (innerInvoice) = customStoreFreight(freightInnerInvoice(innerInvoice)) IN idGroup;
nameCustomStoreInnerInvoice 'СВХ' (innerInvoice) = name(customStoreInnerInvoice(innerInvoice)) IN baseGroup;

importerInnerInvoice 'Импортер инвойса (ИД)' (innerInvoice) = UNION EXCLUSIVE importerFormedInvoice(innerInvoice),
                                                                              importerDirectInvoice(innerInvoice) IN idGroup;
nameImporterInnerInvoice 'Импортер инвойса' (innerInvoice) = name(importerInnerInvoice(innerInvoice)) IN baseGroup;

sidFormedInvoice 'Номер инвойса' (formedInvoice) = sidImporterFreight(importerFormedInvoice(formedInvoice),
                                                                      freightFormedInvoice(formedInvoice)) IN baseGroup;

sidDirectInvoice = sidDocument(innerInvoice) AND innerInvoice IS directInvoice;

sidInnerInvoice 'Номер инвойса' (innerInvoice) = UNION EXCLUSIVE sidDirectInvoice(innerInvoice), sidFormedInvoice(innerInvoice) IN baseGroup;

dateFormedInvoice 'Дата инвойса' (formedInvoice) = dateImporterFreight(importerInnerInvoice(formedInvoice),
                                                                       freightInnerInvoice(formedInvoice)) IN baseGroup;

dateDirectInvoice = date(innerInvoice) AND innerInvoice IS directInvoice;

dateInnerInvoice 'Дата инвойса' (innerInvoice) = UNION EXCLUSIVE dateDirectInvoice(innerInvoice), dateFormedInvoice(innerInvoice) IN baseGroup;

contractFormedInvoice 'Договор инвойса (ИД)' (formedInvoice) = contractImporterFreight(importerFormedInvoice(formedInvoice),
                                                                                       freightFormedInvoice(formedInvoice)) IN idGroup;

quantityFormedInvoiceSku 'Кол-во в инвойсе' (formedInvoice, sku) = quantityProxyImporterFreightSku(importerFormedInvoice(formedInvoice),
                                                                                                   freightFormedInvoice(formedInvoice),
                                                                                                   sku);

quantityDirectInvoiceSku = quantityDocumentSku(innerInvoice, sku) AND innerInvoice IS directInvoice;

quantityInnerInvoiceSku 'Кол-во в инвойсе' (innerInvoice, sku) = UNION EXCLUSIVE quantityDirectInvoiceSku(innerInvoice, sku),
                                                                                 quantityFormedInvoiceSku(innerInvoice, sku);

quantityFormedInvoice 'Кол-во в инвойсе' (innerInvoice) = GROUP SUM quantityInnerInvoiceSku(innerInvoice, sku)
                                                                 BY innerInvoice IN baseGroup PERSISTENT;



//--------------------------------- Декларации ----------------------------------------------------------------------//
CLASS declaration 'Таможенная декларация' : transaction;
CLASS preparedDeclaration 'Подготовленная декларация' : declaration;
CLASS registeredDeclaration 'Зарегистрованная декларация' : preparedDeclaration;

CLASS declarationDetail 'Позиция декларации' : batchA;

TABLE declarationSku (declaration, sku);
TABLE declarationDetail (declarationDetail);
TABLE declarationDetailInnerInvoice (declarationDetail, innerInvoice);

CLASS correction 'КТС' : transaction;

GROUP sumGroup 'Суммы' : baseGroup;;
GROUP docGroup 'Описание' : baseGroup;;

customStoreDeclaration 'СВХ (ИД)' = DATA customStore(declaration) IN idGroup;
nameCustomStoreDeclaration 'СВХ' (declaration) = name(customStoreDeclaration(declaration)) IN docGroup;

sidDeclaration 'Номер' = DATA STRING[10] (declaration) IN docGroup MINCHARWIDTH 10;
beginTimeDeclaration 'Начало обработки' = DATA DATETIME (declaration) IN docGroup;
endTimeDeclaration 'Конец обработки' = DATA DATETIME (declaration) IN docGroup;

dateRegistrationDeclaration 'Дата регистрации' = DATA DATE(declaration) IN docGroup;
timeRegistrationDeclaration 'Время регистрации' = DATA TIME(declaration) IN docGroup;
dateTimeRegistrationDeclaration 'Дата/время' (declaration) = toDateTime(dateRegistrationDeclaration(declaration), timeRegistrationDeclaration(declaration));


exportDeclaration 'Экспортировать декларацию' = ACTION CUSTOM 'roman.actions.ExportDeclarationActionProperty' IN docGroup;

importerDeclaration 'Импортер (ИД)' = DATA importer (declaration) IN idGroup;
nameImporterDeclaration 'Импортёр' = name(importerDeclaration(declaration)) IN docGroup;

dateCorrectionDeclaration 'Дата оплаты КТС' = DATA DATE (declaration) IN baseGroup;

declarationInnerInvoice 'Декларация инвойса (ИД)' = DATA declaration(innerInvoice) IN idGroup;
sidDeclarationInnerInvoice 'Декларация инвойса' (innerInvoice) = sidDeclaration(declarationInnerInvoice(innerInvoice)) IN baseGroup;

inDeclarationInnerInvoice 'Инвойс в декларации' (declaration, innerInvoice) = declarationInnerInvoice(innerInvoice) == declaration;

CONSTRAINT declarationInnerInvoice(innerInvoice) AND NOT(freightInnerInvoice(innerInvoice) IS freightArrived)
    MESSAGE 'Инвойс используется в декларации';


forDeclaration(declaration, innerInvoice) = inDeclarationInnerInvoice(declaration, innerInvoice) OR declaration AS declaration AND NOT declarationInnerInvoice(innerInvoice);

CONSTRAINT customStoreDeclaration(declarationInnerInvoice(innerInvoice)) != customStoreInnerInvoice(innerInvoice) CHECKED
    MESSAGE 'Инвойс для другого СВХ';

CONSTRAINT importerDeclaration(declarationInnerInvoice(innerInvoice)) != importerInnerInvoice(innerInvoice) CHECKED
    MESSAGE 'Инвойс для другого импортёра';

innerInvoiceDeclarationSku 'Инвойс для декларации' (declaration, sku) = GROUP MAX innerInvoice IF quantityInnerInvoiceSku(innerInvoice, sku)
                                                                               BY declarationInnerInvoice(innerInvoice), sku PERSISTENT;

quantityDeclarationSku 'Кол-во в декларации' (declaration, sku) = GROUP SUM quantityInnerInvoiceSku(innerInvoice, sku)
                                                                         BY declarationInnerInvoice(innerInvoice), sku IN baseGroup PERSISTENT;

@defineAggregationDouble(declaration, sku, declarationDetail, quantityDeclarationSku);

dateTimeDeclarationDetail 'Дата/время декларации' (declarationDetail) = endTimeDeclaration(declarationDeclarationDetail(declarationDetail)) IN baseGroup;

customStoreDeclarationDetail 'СВХ (ИД)' (declarationDetail) = customStoreDeclaration(declarationDeclarationDetail(declarationDetail)) IN idGroup;
nameCustomStoreDeclarationDetail 'СВХ' (declarationDetail) = name(customStoreDeclarationDetail(declarationDetail)) IN baseGroup;

numberDeclarationDetail 'Номер строки' (declarationDetail) =
        PARTITION SUM 1 IF declarationDetail IS declarationDetail BY declarationDeclarationDetail(declarationDetail)
        ORDER declarationDetail;

@defineDocumentDetailSkuArticle (declaration);

inDeclarationDeclarationDetail (declaration, declarationDetail) = declarationDeclarationDetail(declarationDetail)==declaration;

quantityDeclarationDetail 'Кол-во' (declarationDetail) = quantityDeclarationSku(declarationDeclarationDetail(declarationDetail),
                                                                                skuDeclarationDetail(declarationDetail)
                                                                               ) IN baseGroup;

freightDeclarationDetail 'Фрахт позиции (ИД)' (declarationDetail) = freightInnerInvoice(innerInvoiceDeclarationSku(
                                                                                declarationDeclarationDetail(declarationDetail),
                                                                                skuDeclarationDetail(declarationDetail))) IN idGroup;

importerDeclarationDetail 'Импортёр позиции (ИД)' (declarationDetail) = importerInnerInvoice(innerInvoiceDeclarationSku(
                                                                                declarationDeclarationDetail(declarationDetail),
                                                                                skuDeclarationDetail(declarationDetail))) IN idGroup;


netWeightDeclarationDetail 'Вес нетто товара' (declarationDetail) = netWeightFreightSku(freightDeclarationDetail(declarationDetail),
                                                                                        skuDeclarationDetail(declarationDetail));

sumNetWeightDeclarationDetail 'Суммарный вес нетто' (declarationDetail) = netWeightDeclarationDetail(declarationDetail) *
                                                                          quantityDeclarationDetail(declarationDetail) IN baseGroup;

grossWeightDeclarationDetail 'Вес брутто товара' (declarationDetail) = grossWeightFreightSku(freightDeclarationDetail(declarationDetail),
                                                                                             skuDeclarationDetail(declarationDetail));

sumGrossWeightDeclarationDetail 'Суммарный вес брутто' (declarationDetail) = grossWeightDeclarationDetail(declarationDetail) *
                                                                             quantityDeclarationDetail(declarationDetail) IN baseGroup;

mainCompositionDeclarationDetail 'Состав товара' (declarationDetail) = mainCompositionFreightSku(freightDeclarationDetail(declarationDetail),
                                                                                                 skuDeclarationDetail(declarationDetail)) MINCHARWIDTH 20;

// Для таможенного оформления
countryDeclarationDetail 'Страна товара (ИД)' (declarationDetail) = countryOfOriginFreightSku(freightDeclarationDetail(declarationDetail),
                                                                                              skuDeclarationDetail(declarationDetail)) IN idGroup;

nameCountryDeclarationDetail 'Страна товара' (declarationDetail) = name(countryDeclarationDetail(declarationDetail)) MINCHARWIDTH 15;

customCategory10InvoicedDeclarationDetail 'ТН ВЭД товара (ИД)' (declarationDetail) = customCategory10FreightSku(freightDeclarationDetail(declarationDetail),
                                                                                                                skuDeclarationDetail(declarationDetail)) IN idGroup;

customCategory10DataDeclarationDetail 'ТН ВЭД товара (ИД)' = DATA customCategory10(declarationDetail) IN idGroup;

customCategory10DeclarationDetail 'ТН ВЭД товара (ИД)' (declarationDetail) = UNION OVERRIDE customCategory10InvoicedDeclarationDetail(declarationDetail),
                                                                                            customCategory10DataDeclarationDetail(declarationDetail) IN idGroup PERSISTENT;

sidCustomCategory10DeclarationDetail 'ТН ВЭД товара' (declarationDetail) = sidCustomCategory10(customCategory10DeclarationDetail(declarationDetail));

// сертификация
certificatedCategoryDeclarationDetail 'Необходимость сертификации' (declarationDetail) = certificatedCustomCategory10(customCategory10DeclarationDetail(declarationDetail)) IN baseGroup;
certificatedDataDeclarationDetail 'Необходимость сертификации' = DATA BOOLEAN(declarationDetail);

certificatedDeclarationDetail 'Необходимость сертификации' (declarationDetail) = UNION OVERRIDE certificatedCategoryDeclarationDetail(declarationDetail),
                                                                                                certificatedDataDeclarationDetail(declarationDetail);

certificatedDeclarationSku 'Необходимость сертификации' (declaration, sku) = certificatedDeclarationDetail(declarationDetailDeclarationSku(declaration, sku));


quantityCertificatedDeclarationFreightUnitSku 'Кол-во для экспертизы' = DATA NUMERIC[14,3] (declaration, freightUnit, sku);

quantityCertificatedFreightUnitDeclarationDetail 'Кол-во для экспертизы' (freightUnit, declarationDetail) = quantityCertificatedDeclarationFreightUnitSku(declarationDeclarationDetail(declarationDetail), freightUnit, skuDeclarationDetail(declarationDetail));

quantityCertificatedDeclarationDetail 'Кол-во для экспертизы' (declarationDetail) = GROUP SUM quantityCertificatedDeclarationFreightUnitSku(declaration, freightUnit, skuDeclarationDetail(declarationDetail))
    BY declarationDetail;

quantityCertificatedDeclarationFreightUnit 'Кол-во для экспертизы' (declaration, freightUnit) = GROUP SUM quantityCertificatedDeclarationFreightUnitSku(declaration, freightUnit, sku)
                                                                                       BY declaration, freightUnit;

quantityCertificatedDeclarationSku 'Кол-во для экспертизы' (declaration, sku) = GROUP SUM quantityCertificatedDeclarationFreightUnitSku(declaration, freightUnit, sku)
                                                                                       BY declaration, sku;

certificateDeclarationDetail 'Сертификат партии (ИД)' = DATA certificate(declarationDetail) IN idGroup;
temporalCertificateDeclarationDetail 'Временный сертификат партии (ИД)' = DATA temporalCertificate(declarationDetail) IN idGroup;
permanentCertificateDeclarationDetail 'Постоянный сертификат партии (ИД)' = DATA permanentCertificate(declarationDetail) IN idGroup;

certificatePreparedDeclarationDetail 'Сертификат партии (ИД)' (declarationDetail) = UNION OVERRIDE temporalCertificateDeclarationDetail(declarationDetail),
                                                                                                   permanentCertificateDeclarationDetail(declarationDetail) IN idGroup PERSISTENT;

sidTemporalCertificateDeclarationDetail 'Временный сертификат партии' (declarationDetail) = sidCertificate(temporalCertificateDeclarationDetail(declarationDetail)) IN baseGroup;
sidPermanentCertificateDeclarationDetail 'Постоянный сертификат партии' (declarationDetail) = sidCertificate(permanentCertificateDeclarationDetail(declarationDetail)) IN baseGroup;

sidCertificateDeclarationDetail 'Сертификат партии' (declarationDetail) = sidCertificate(certificateDeclarationDetail(declarationDetail)) IN baseGroup;

isCertificatePreparedDeclarationDetail 'Отсутствие сертификата' (declarationDetail) = certificatedDeclarationDetail(declarationDetail) AND
                                                                                      NOT certificatePreparedDeclarationDetail(declarationDetail);

quantityNoCertificateDeclaration 'Кол-во без сертификатов' (declaration) = GROUP SUM quantityDeclarationDetail(declarationDetail)
                                                                                  IF isCertificatePreparedDeclarationDetail(declarationDetail)
                                                                                  BY declarationDeclarationDetail(declarationDetail) PERSISTENT;

//CONSTRAINT quantityNoCertificateDeclaration(declaration)>0 AND declaration IS preparedDeclaration
//   MESSAGE 'Не у всех товаров требующих сертификации заданы сертификаты';

// Для таможенных платежей
typeExchangeDeclaration (declaration) = typeExchangePayCustom() IF declaration IS declaration;
currencyDeclaration (declaration) = currencyTypeExchange(typeExchangeSTX()) IF declaration IS declaration;

@defineNearestRateExchangeObject(declaration, dateRegistrationDeclaration, sumGroup);

//rateExchangeDeclaration 'Курс обмена' (declaration) = nearestRateExchange(typeExchangePayCustom(),
//                                                                          currencyTypeExchange(typeExchangeSTX()),
//                                                                          declaration);

rateExchangeDeclarationDetail 'Курс обмена' (declarationDetail) = rateExchangeDeclaration(declarationDeclarationDetail(declarationDetail)) IN baseGroup;

priceContractDeclarationDetail 'Цена контракта' (declarationDetail) = priceInvoiceImporterFreightSku(importerDeclarationDetail(declarationDetail),
                                                                                                     freightDeclarationDetail(declarationDetail),
                                                                                                     skuDeclarationDetail(declarationDetail));

priceContractDeclarationArticle 'Цена поставщика' (declaration, article) = GROUP MAX priceContractDeclarationDetail(declarationDetail)
                                                                                  BY declarationDeclarationDetail(declarationDetail), articleDeclarationDetail(declarationDetail);

RRPDeclarationArticle 'Рекомендованная цена' (declaration, article) = GROUP MAX RRPFreightArticle(freightDeclarationDetail(declarationDetail), articleDeclarationDetail(declarationDetail))
                                                                             BY declarationDeclarationDetail(declarationDetail), articleDeclarationDetail(declarationDetail);

priceContractRateDeclarationDetail 'Цена контракта (руб.)' (declarationDetail) = priceContractDeclarationDetail(declarationDetail) *
                                                                                 rateExchangeDeclarationDetail(declarationDetail);


declarationPriceDeclarationDetail 'Цена товара (БУ)' (declarationDetail) = priceFullImporterFreightSku(importerDeclarationDetail(declarationDetail),
                                                                                                       freightDeclarationDetail(declarationDetail),
                                                                                                       skuDeclarationDetail(declarationDetail));

priceManagerialDeclarationDetail 'Цена товара (УУ)' (declarationDetail) = priceInFullImporterFreightSku(importerDeclarationDetail(declarationDetail),
                                                                                                        freightDeclarationDetail(declarationDetail),
                                                                                                        skuDeclarationDetail(declarationDetail));

priceManagerialRateDeclarationDetail 'Цена товара (конверт.)' (declarationDetail) = priceManagerialDeclarationDetail(declarationDetail) *
                                                                                    rateExchangeDeclarationDetail(declarationDetail);

declarationSumDeclarationDetail 'Стоимость товара' (declarationDetail) = declarationPriceDeclarationDetail(declarationDetail) *
                                                                              quantityDeclarationDetail(declarationDetail);

declarationSumRateDeclarationDetail 'Стоимость товара (руб.)' (declarationDetail) = declarationSumDeclarationDetail(declarationDetail) *
                                                                                    rateExchangeDeclarationDetail(declarationDetail);

priceRateDeclarationDetail 'Цена товара (конверт.)' (declarationDetail) = round0(declarationPriceDeclarationDetail(declarationDetail) *
                                                                                 rateExchangeDeclarationDetail(declarationDetail)) IN baseGroup PERSISTENT;

isPostedDeclarationDetail (declarationDetail) = TRUE IF declarationDetail IS declarationDetail;

descriptionDeclaration 'Название документа' (declaration) =
    [FORMULA STRING[200] '\'Декларация \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    sidDeclaration(declaration), date(declaration), nameCustomStoreDeclaration(declaration));

descriptionDeclarationDetail = descriptionDeclaration(declarationDeclarationDetail(declarationDetail));

declarationCorrection 'Декларация КТС (ИД)' = DATA declaration(correction) IN idGroup;
inDeclarationCorrection (declaration, correction) = declarationCorrection(correction)==declaration;

dateTimePayCorrection 'Дата/время оплаты' = DATA DATETIME(correction) IN baseGroup;

sumCorrectionDeclarationDetail 'Скорректированная стоимость' = DATA NUMERIC[14,2](correction, declarationDetail) IN baseGroup;
//priceCorrectionDeclarationDetail 'Скорректированная цена' (correction, declarationDetail) = sumCorrectionDeclarationDetail(correction, declarationDetail)/quantityDeclarationDetail(declarationDetail) IN baseGroup;

correctionSumDeclarationDetail 'Скорректированная стоимость' (declarationDetail) = GROUP MAX sumCorrectionDeclarationDetail(correction, declarationDetail) BY declarationDetail PERSISTENT;
correctionPriceDeclarationDetail 'Скорректированная цена' (declarationDetail) = correctionSumDeclarationDetail(declarationDetail)/quantityDeclarationDetail(declarationDetail);

supplierSumDeclarationDetail 'Стоимость' (declarationDetail) = UNION OVERRIDE declarationSumRateDeclarationDetail(declarationDetail),
                                                                              correctionSumDeclarationDetail(declarationDetail) IN baseGroup;

supplierPriceDeclarationDetail 'Цена' (declarationDetail) = supplierSumDeclarationDetail(declarationDetail)/quantityDeclarationDetail(declarationDetail) IN baseGroup;

@implementBatch(declaration, sku, customStore);
quantityBatch (batch) += quantityDeclarationDetail(batch);
ownerBatchA (batch) += importerDeclarationDetail(batch);
importerPriceBatchA (batch) +=  supplierPriceDeclarationDetail(batch);

// пошлины
dutyDeclarationDetail 'Пошлина (расч.)' (declarationDetail) = UNION MAX
                      rateExchangeDeclarationDetail(declarationDetail) * sumNetWeightDeclarationDetail(declarationDetail) * dutySumCustomCategory10TypeDuty(customCategory10DeclarationDetail(declarationDetail), typeDutyDuty()),
                      declarationSumRateDeclarationDetail(declarationDetail) * (dutyPercentCustomCategory10TypeDuty(customCategory10DeclarationDetail(declarationDetail), typeDutyDuty())/100) PERSISTENT;

dutyDataDeclarationDetail 'Пошлина товара' = DATA NUMERIC[14,2](declarationDetail) IN baseGroup;
dutyDataDeclarationDetail (declarationDetail) <- dutyDeclarationDetail(declarationDetail) WHEN ASSIGNED(declarationDeclarationDetail(declarationDetail) IS preparedDeclaration);   //dateDeclarationDetail(declarationDetail);

dutyDeclaration 'Сумма пошлин' (declaration) = GROUP SUM dutyDataDeclarationDetail(declarationDetail)
                                                      BY declarationDeclarationDetail(declarationDetail) IN sumGroup PERSISTENT;

// НДС
TABLE customCategory10Data(customCategory10, DATE);
@defineHistorizableCustom(supplierVATCustomCategory10, 'НДС таможни', range, numberRange, customCategory10, sidCustomCategory10, baseGroup);

CONSTRAINT taxRange(dataSupplierVATCustomCategory10Date(customCategory10, date)) != tax.taxVAT CHECKED BY dataSupplierVATCustomCategory10Date MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

dataValueSupplierVATCustomCategory10Date 'НДС поставщика, %' (customCategory10, date) = valueRateRangeDate(dataSupplierVATCustomCategory10Date(customCategory10, date), date);
valueCurrentRateSupplierVATCustomCategory10 'НДС поставщика, %' (customCategory10) = valueCurrentRateRange(supplierVATCustomCategory10(customCategory10));

rangeVATBatchA (batch) += supplierVATCustomCategory10(customCategory10DeclarationDetail(batch));

EXTEND FORM addSupplierVATCustomCategory10
    PROPERTIES READONLY FORCE GRID dataValueSupplierVATCustomCategory10Date(a, d)
;
EXTEND FORM dialogSupplierVATCustomCategory10
    PROPERTIES dataValueSupplierVATCustomCategory10Date(a, d)
;


EXTEND FORM customCategoryForm
    PROPERTIES numberRangeSupplierVATCustomCategory10(customCategory10), dialogSupplierVATCustomCategory10(customCategory10), valueCurrentRateSupplierVATCustomCategory10(customCategory10)
;


sumDutyDeclarationDetail 'Стоимость с пошлиной' (declarationDetail) = UNION SUM declarationSumRateDeclarationDetail(declarationDetail),
                                                                                dutyDataDeclarationDetail(declarationDetail);

VATPercentOriginDeclarationDetail 'НДС (%)' (declarationDetail) = dutyPercentCustomCategory10TypeDuty(customCategory10DeclarationDetail(declarationDetail), typeDutyNDS());
VATPercentCategoryDeclarationDetail 'НДС (%)' (declarationDetail) =  valueCurrentRateSupplierVATCustomCategory10(customCategory10DeclarationDetail(declarationDetail));
VATPercentCustomDeclarationDetail 'НДС (%)' (declarationDetail) = NDSPercentCustom() AND declarationDetail IS declarationDetail;
VATPercentDeclarationDetail 'НДС (%)' (declarationDetail) = UNION OVERRIDE VATPercentCustomDeclarationDetail(declarationDetail),
                                                                           VATPercentOriginDeclarationDetail(declarationDetail),
                                                                           VATPercentCategoryDeclarationDetail(declarationDetail);

VATDeclarationDetail 'НДС товара (расч.)' (declarationDetail) = round0(sumDutyDeclarationDetail(declarationDetail) *
                                                                       VATPercentDeclarationDetail(declarationDetail)/100) PERSISTENT;

VATDataDeclarationDetail 'НДС товара' = DATA NUMERIC[14,2](declarationDetail) IN baseGroup;
VATDataDeclarationDetail (declarationDetail) <- VATDeclarationDetail(declarationDetail) WHEN ASSIGNED(declarationDeclarationDetail(declarationDetail) IS preparedDeclaration);

VATDeclaration 'НДС декларации' (declaration) = GROUP SUM VATDeclarationDetail(declarationDetail)
                                                       BY declarationDeclarationDetail(declarationDetail) IN sumGroup PERSISTENT;

// за оформление
sumRegistrationDeclarationDetail 'Таможенный сбор' (declarationDetail) = dutyPercentCustomCategory10TypeDuty(customCategory10DeclarationDetail(declarationDetail), typeDutyRegistration()) IN baseGroup;

sumRegistrationDeclaration 'Таможенный сбор (расч.)' (declaration) = GROUP MAX sumRegistrationDeclarationDetail(declarationDetail)
                                                                            BY declarationDeclarationDetail(declarationDetail) IN baseGroup PERSISTENT;

sumRegistrationDataDeclaration 'Таможенный сбор' = DATA NUMERIC[14,2](declaration) IN baseGroup;
sumRegistrationDataDeclaration (declaration) <- sumRegistrationDeclaration(declaration) WHEN ASSIGNED(declaration IS preparedDeclaration);

rateSumRegistrationDeclaration 'Таможенный сбор (конверт.)' (declaration) = round0(sumRegistrationDataDeclaration(declaration) *
                                                                                 rateExchangeDeclaration(declaration)) IN sumGroup PERSISTENT;

totalCustomSum 'Сумма платежей' (declaration) = UNION SUM dutyDeclaration(declaration), VATDeclaration(declaration), rateSumRegistrationDeclaration(declaration) IN sumGroup;


// корректировка таможенной стоимости
correctionDutyDeclarationDetail 'Скорректированная пошлина (расч.)' (declarationDetail) = (UNION MAX
                                rateExchangeDeclarationDetail(declarationDetail) * sumNetWeightDeclarationDetail(declarationDetail) * dutySumCustomCategory10TypeDuty(customCategory10DeclarationDetail(declarationDetail), typeDutyDuty()),
                                correctionSumDeclarationDetail(declarationDetail) * (dutyPercentCustomCategory10TypeDuty(customCategory10DeclarationDetail(declarationDetail), typeDutyDuty())/100))
                                IF correctionPriceDeclarationDetail(declarationDetail) PERSISTENT;

correctionDutyDataDeclarationDetail 'Скорректированная пошлина' = DATA NUMERIC[14,2](declarationDetail) IN baseGroup;
correctionDutyDataDeclarationDetail(declarationDetail) <- correctionDutyDeclarationDetail(declarationDetail) WHEN ASSIGNED(declarationDeclarationDetail(declarationDetail) IS preparedDeclaration);

correctionSumDutyDeclarationDetail 'Стоимость с пошлиной'(declarationDetail) = UNION SUM correctionSumDeclarationDetail(declarationDetail),
                                                                                         correctionDutyDataDeclarationDetail(declarationDetail);

correctionVATDeclarationDetail 'Скорректированный НДС (расч.)' (declarationDetail) = round0(correctionSumDutyDeclarationDetail(declarationDetail) *
                                                                                            VATPercentDeclarationDetail(declarationDetail)/100) PERSISTENT;

correctionVATDataDeclarationDetail 'Скорректированный НДС' = DATA NUMERIC[14,2](declarationDetail) IN baseGroup;
correctionVATDataDeclarationDetail(declarationDetail) <- correctionVATDeclarationDetail(declarationDetail) WHEN ASSIGNED(declarationDeclarationDetail(declarationDetail) IS preparedDeclaration);

diffDutyDeclarationDetail 'Разница пошлин' (declarationDetail) = correctionDutyDataDeclarationDetail(declarationDetail) - dutyDataDeclarationDetail(declarationDetail)
                                                                 IF correctionPriceDeclarationDetail(declarationDetail);

diffDutyDeclararion 'Разница пошлин' (declaration) = GROUP SUM diffDutyDeclarationDetail(declarationDetail)
                                                            BY declarationDeclarationDetail(declarationDetail) IN sumGroup PERSISTENT;

diffVATDeclarationDetail 'Разница НДС' (declarationDetail) = correctionVATDataDeclarationDetail(declarationDetail) - VATDataDeclarationDetail(declarationDetail)
                                                             IF correctionPriceDeclarationDetail(declarationDetail);

diffVATDeclararion 'Разница НДС' (declaration) = GROUP SUM diffVATDeclarationDetail(declarationDetail)
                                                        BY declarationDeclarationDetail(declarationDetail) IN sumGroup PERSISTENT;

diffDeclaration 'Сумма доп. платежей' (declaration) = UNION SUM diffDutyDeclararion(declaration), diffVATDeclararion(declaration) IN sumGroup;


sumDeclarationDetail 'Стоимость' (declarationDetail) = supplierPriceDeclarationDetail(declarationDetail) * quantityDeclarationDetail(declarationDetail);

sumDeclaration 'Сумма' (declaration) = GROUP SUM sumDeclarationDetail(declarationDetail) BY declarationDeclarationDetail(declarationDetail) IN sumGroup PERSISTENT;

registrationDeclarationDetail 'Таможенный сбор' (declarationDetail) = round0((sumDeclarationDetail(declarationDetail) * rateSumRegistrationDeclaration(declarationDeclarationDetail(declarationDetail)))/
                                                                            (quantityDeclarationDetail(declarationDetail) * sumDeclaration(declarationDeclarationDetail(declarationDetail)))) PERSISTENT;

// учёт расходов на сертификацию
expenseCertificateDeclaration 'Расходы на сертификацию (БУ)' (declaration) = GROUP SUM priceRateDeclarationDetail(declarationDetail) *
                                                                                       quantityCertificatedDeclarationSku(declarationDeclarationDetail(declarationDetail), skuDeclarationDetail(declarationDetail))
                                                                                    IF certificatedDeclarationDetail(declarationDetail)
                                                                                    BY declarationDeclarationDetail(declarationDetail) IN sumGroup PERSISTENT;

expenseCertificateManagerialDeclaration 'Расходы на сертификацию (УУ)' (declaration) = GROUP SUM priceManagerialDeclarationDetail(declarationDetail) *
                                                                                                 quantityCertificatedDeclarationSku(declarationDeclarationDetail(declarationDetail), skuDeclarationDetail(declarationDetail))
                                                                                              IF certificatedDeclarationDetail(declarationDetail)
                                                                                              BY declarationDeclarationDetail(declarationDetail) IN sumGroup PERSISTENT;


dutyFinDeclarationDetail 'Пошлина' = (UNION OVERRIDE dutyDataDeclarationDetail(declarationDetail), correctionDutyDataDeclarationDetail(declarationDetail))/quantityDeclarationDetail(declarationDetail);
VATFinDeclarationDetail 'НДС' = (UNION OVERRIDE VATDataDeclarationDetail(declarationDetail), correctionVATDataDeclarationDetail(declarationDetail))/quantityDeclarationDetail(declarationDetail);

priceCustomDeclarationDetail 'Себестоимость (БУ)' (declarationDetail) = UNION SUM priceRateDeclarationDetail(declarationDetail),
                                                                                  dutyFinDeclarationDetail(declarationDetail),
                                                                                  VATFinDeclarationDetail(declarationDetail),
                                                                                  registrationDeclarationDetail(declarationDetail) PERSISTENT;

priceManagerialCustomDeclarationDetail 'Себестоимость (УУ)' (declarationDetail) = UNION SUM priceManagerialRateDeclarationDetail(declarationDetail),
                                                                                            dutyFinDeclarationDetail(declarationDetail),
                                                                                            VATFinDeclarationDetail(declarationDetail),
                                                                                            registrationDeclarationDetail(declarationDetail) PERSISTENT;


priceCustomBatch (batch) += priceCustomDeclarationDetail(batch);
priceManagerialBatch (batch) += priceManagerialCustomDeclarationDetail(batch);

quantityDeclarationArticle 'Кол-во' (declaration, article) = GROUP SUM quantityDeclarationSku(declaration, sku) BY declaration, articleSku(sku);
inDeclarationArticle (declaration, article) = TRUE IF quantityDeclarationArticle(declaration, article);

priceCustomDeclarationSku 'Себестоимость (БУ)' (declaration, sku) = priceCustomDeclarationDetail(declarationDetailDeclarationSku(declaration, sku));
priceManagerialDeclarationSku 'Себестоимость (УУ)' (declaration, sku) = priceManagerialDeclarationDetail(declarationDetailDeclarationSku(declaration, sku));

priceCustomDeclarationArticle 'Себестоимость (БУ)' (declaration, article) = GROUP MAX priceCustomDeclarationSku(declaration, sku)
                                                                                   BY declaration, articleSku(sku);

priceManagerialDeclarationArticle 'Себестоимость (УУ)' (declaration, article) = GROUP MAX priceManagerialDeclarationSku(declaration, sku)
                                                                                       BY declaration, articleSku(sku);


// для экспорта в Декларант
TABLE groupDeclaration (groupDeclaration);
TABLE groupDeclarationInnerInvoice (groupDeclaration, innerInvoice);
TABLE declarationArtCatCompCountry(declaration, article, customCategory10, STRING[200], country);

quantityDeclarationGroup 'Кол-во' = GROUP SUM quantityDeclarationDetail(declarationDetail)
                                           BY declarationDeclarationDetail(declarationDetail),
                                              articleDeclarationDetail(declarationDetail),
                                              customCategory10DeclarationDetail(declarationDetail),
                                              mainCompositionDeclarationDetail(declarationDetail),
                                              countryDeclarationDetail(declarationDetail) IN baseGroup PERSISTENT;

CLASS groupDeclaration 'Группировка';

declarationGroupDeclaration 'Декларация (ИД)' = DATA declaration(groupDeclaration) IN idGroup;
articleGroupDeclaration 'Артикул (ИД)' = DATA article(groupDeclaration) IN idGroup;
customCategory10GroupDeclaration 'ТН ВЭД (ИД)' = DATA customCategory10(groupDeclaration) IN idGroup;
mainCompositionGroupDeclaration 'Состав' = DATA STRING[200](groupDeclaration) IN baseGroup;
countryGroupDeclaration 'Страна (ИД)' = DATA country(groupDeclaration) IN idGroup;

certificatedGroupDeclaration 'Необходимость сертификации' (groupDeclaration) = certificatedCustomCategory10(customCategory10GroupDeclaration(groupDeclaration)) IN baseGroup;

sidArticleGroupDeclaration 'Артикул' (groupDeclaration) = sidArticle(articleGroupDeclaration(groupDeclaration)) IN baseGroup;
sidCustomCategory10GroupDeclaration 'ТН ВЭД' (groupDeclaration) = sidCustomCategory10(customCategory10GroupDeclaration(groupDeclaration)) IN baseGroup;
nameCountryGroupDeclaration 'Страна' (groupDeclaration) = name(countryGroupDeclaration(groupDeclaration)) IN baseGroup;
sidCountryGroupDeclaration 'Цифровой код страны' (groupDeclaration) = sidCountry(countryGroupDeclaration(groupDeclaration)) IN baseGroup;
sidOrigin2CountryGroupDeclaration 'Буквенный код страны' (groupDeclaration) = sidOrigin2Country(countryGroupDeclaration(groupDeclaration)) IN baseGroup MINCHARWIDTH 3;


numberGroupDeclaration 'Номер' (groupDeclaration) =
        PARTITION SUM 1 IF groupDeclaration IS groupDeclaration BY declarationGroupDeclaration(groupDeclaration)
        ORDER groupDeclaration;

inDeclarationGroupDeclaration (declaration, groupDeclaration) = declarationGroupDeclaration(groupDeclaration)==declaration;

dutyGroupDeclaration 'Пошлина' = DATA NUMERIC[14,2](groupDeclaration) IN baseGroup;
VATGroupDeclaration 'НДС' = DATA NUMERIC[14,2](groupDeclaration) IN baseGroup;

TABLE groupstring (object, object, object, object, STRING[200]);

uniqueGroupDeclaration = GROUP UNIQUE groupDeclaration BY declarationGroupDeclaration(groupDeclaration),
                                                          articleGroupDeclaration(groupDeclaration),
                                                          customCategory10GroupDeclaration(groupDeclaration),
                                                          mainCompositionGroupDeclaration(groupDeclaration),
                                                          countryGroupDeclaration(groupDeclaration)
                                                      WHERE groupDeclaration IS groupDeclaration PERSISTENT;

quantityDeclarationGroup(declaration, article, customCategory10, STRING, country) => uniqueGroupDeclaration(declaration, article, customCategory10, STRING, country) RESOLVE TRUE;
isGroupDeclaration(group) = group IS groupDeclaration;
isGroupDeclaration(group) => quantityDeclarationGroup(declarationGroupDeclaration(group),
                                                      articleGroupDeclaration(group),
                                                      customCategory10GroupDeclaration(group),
                                                      mainCompositionGroupDeclaration(group),
                                                      countryGroupDeclaration(group)) RESOLVE FALSE;

// свойства от артикула
nameBrandGroupDeclaration 'Бренд' (groupDeclaration) = nameBrandSupplierArticle(articleGroupDeclaration(groupDeclaration));
nameCategoryGroupDeclaration 'Ном. группа' (groupDeclaration) = nameCategoryArticle(articleGroupDeclaration(groupDeclaration));
sidGenderGroupDeclaration 'Пол' (groupDeclaration) = sidGenderArticle(articleGroupDeclaration(groupDeclaration));
nameTypeFabricGroupDeclaration 'Тип одежды' (groupDeclaration) = nameTypeFabricArticle(articleGroupDeclaration(groupDeclaration));

unitOfMeasureGroupDeclaration 'Ед. изм.(ИД)' (groupDeclaration) = unitOfMeasureArticle(articleGroupDeclaration(groupDeclaration));
sidUnitOfMeasureGroupDeclaration 'Ед. изм.(код)' (groupDeclaration) = sidUnitOfMeasure(unitOfMeasureGroupDeclaration(groupDeclaration));
nameUnitOfMeasureGroupDeclaration 'Ед. изм.' (groupDeclaration) = name(unitOfMeasureGroupDeclaration(groupDeclaration));


groupDeclarationDeclarationDetail 'Группа строки декларации (ИД)'(declarationDetail) = uniqueGroupDeclaration(
                                                                                       declarationDeclarationDetail(declarationDetail),
                                                                                       articleDeclarationDetail(declarationDetail),
                                                                                       customCategory10DeclarationDetail(declarationDetail),
                                                                                       mainCompositionDeclarationDetail(declarationDetail),
                                                                                       countryDeclarationDetail(declarationDetail)) IN idGroup;

numberGroupDeclarationDeclarationDetail 'Группа строки декларации'(declarationDetail) = numberGroupDeclaration(groupDeclarationDeclarationDetail(declarationDetail)) IN baseGroup;


inDeclarationDetailInnerInvoice 'Связка' (declarationDetail, innerInvoice) = quantityInnerInvoiceSku(innerInvoice, skuDeclarationDetail(declarationDetail)) IF
                                                                             declarationDeclarationDetail(declarationDetail) == declarationInnerInvoice(innerInvoice) PERSISTENT;

inGroupDeclarationInnerInvoice 'Связка' (groupDeclaration, innerInvoice) = GROUP SUM inDeclarationDetailInnerInvoice(declarationDetail, innerInvoice)
                                                                                  BY groupDeclarationDeclarationDetail(declarationDetail), innerInvoice PERSISTENT;

quantityFreightDeclarationSku 'Кол-во' (freight, declaration, sku) = GROUP SUM quantityInnerInvoiceSku(innerInvoice, sku) BY freightInnerInvoice(innerInvoice),
                                                                                                                             declarationInnerInvoice(innerInvoice),
                                                                                                                             sku PERSISTENT;

quantityFreightDeclaration 'Кол-во' (freight, declaration) = GROUP SUM quantityFreightDeclarationSku (freight, declaration, sku) BY freight, declaration;

sidFreightDeclaration 'Номер' (freight, declaration) = sidImporterFreight(importerDeclaration(declaration), freight);

quantityImporterFreightUnitSku 'Кол-во' (importer, freightUnit, sku) = UNION EXCLUSIVE quantityImporterStockSku(importer, freightUnit, sku),
                                                                                       quantityImporterDirectSupplierBoxSku(importer, freightUnit, sku);

inFreightUnitDeclarationDetail 'Кол-во' (freightUnit, declarationDetail) = quantityImporterFreightUnitSku(importerDeclarationDetail(declarationDetail),
                                                                                                          freightUnit AS freightUnit,
                                                                                                          skuDeclarationDetail(declarationDetail)) AND
                                                                                             quantityFreightDeclarationSku(freightFreightUnit(freightUnit),
                                                                                                                           declarationDeclarationDetail(declarationDetail),
                                                                                                                           skuDeclarationDetail(declarationDetail));

inFreightUnitDeclaration 'Кол-во' (freightUnit, declaration) = GROUP SUM inFreightUnitDeclarationDetail(freightUnit, declarationDetail)
                                                                      BY freightUnit, declarationDeclarationDetail(declarationDetail);

quantityGroupDeclaration 'Кол-во' (groupDeclaration) = GROUP SUM quantityDeclarationDetail(declarationDetail)
                                                              BY groupDeclarationDeclarationDetail(declarationDetail) IN baseGroup PERSISTENT;

netWeightGroupDeclaration 'Вес нетто' (groupDeclaration) = GROUP SUM sumNetWeightDeclarationDetail(declarationDetail)
                                                                  BY groupDeclarationDeclarationDetail(declarationDetail) IN baseGroup PERSISTENT;

grossWeightGroupDeclaration 'Вес брутто' (groupDeclaration) = GROUP SUM sumGrossWeightDeclarationDetail(declarationDetail)
                                                                     BY groupDeclarationDeclarationDetail(declarationDetail) IN baseGroup PERSISTENT;

sumGroupDeclaration 'Стоимость' (groupDeclaration) = GROUP SUM sumDeclarationDetail(declarationDetail)
                                                            BY groupDeclarationDeclarationDetail(declarationDetail) IN baseGroup PERSISTENT;


FORM declarationInvoices 'Присоединение инвойсов'
    OBJECTS d=declaration FIXED PANEL
    PROPERTIES(d) objectClassName, nameCustomStoreDeclaration, sidDeclaration, date, beginTimeDeclaration, endTimeDeclaration,
                  nameImporterDeclaration

    OBJECTS ii=innerInvoice
    PROPERTIES (ii) sidInnerInvoice
    PROPERTIES (d, ii) inDeclarationInnerInvoice
    FILTERS freightArrivedInnerInvoice(ii), forDeclaration(d, ii)
;

showFormDeclarationInvoices 'Присоединить инвойсы' (declaration) = ACTION FORM declarationInvoices OBJECTS d NEWSESSION MODAL IN docGroup TOOLBAR;

// розничный прайс по декларации
toCreateDeclarationPriceSetDocument 'Расценка декларации' =  ACTION (declaration) NEWSESSION {
    ADDOBJ basePriceSetDocument;
    FOR p == addedObject() DO {
        SET priceInPriceSetDocumentArticle(p, article) <- priceContractDeclarationArticle(declaration, article);
        SET RRPPriceSetDocumentArticle(p, article) <- RRPDeclarationArticle(declaration, article);
        SET inArticlePriceSetDocument(p, article) <- inDeclarationArticle(declaration, article);
        FORM priceSetDocument OBJECTS p=addedObject() MODAL;
        IF formResult() == formResult.ok THEN {
            EXEC apply();
        };
    };
} CONFIRM IN docGroup;


FORM declaration 'Декларация'
    OBJECTS d=declaration FIXED PANEL
    PROPERTIES(d) objectClassName, nameCustomStoreDeclaration, nameImporterDeclaration, sidDeclaration, beginTimeDeclaration, endTimeDeclaration,
                  dateRegistrationDeclaration, timeRegistrationDeclaration, rateExchangeDeclaration, rateSumRegistrationDeclaration,
                  dutyDeclaration, VATDeclaration, totalCustomSum, diffDutyDeclararion,
                  diffVATDeclararion, diffDeclaration, expenseCertificateDeclaration, showFormDeclarationInvoices,
                  exportDeclaration

    OBJECTS c=correction
    PROPERTIES(c) date, dateTimePayCorrection, ADDOBJ, delete
    FILTERS inDeclarationCorrection(d, c)

    OBJECTS f=freight
    PROPERTIES (f, d) sidFreightDeclaration
    PROPERTIES (f) date, toCreatePriceSetDocument SHOWIF isPriceSetDocumentFreight(f)
    FILTERS quantityFreightDeclaration (f, d)

    OBJECTS dd=declarationDetail
    PROPERTIES (dd) READONLY numberDeclarationDetail, barcodeDeclarationDetail, nameBrandDeclarationDetail, sidArticleDeclarationDetail,
                    nameCategoryDeclarationDetail, mainCompositionDeclarationDetail,
                    nameCountryDeclarationDetail, sidCustomCategory10DeclarationDetail,
                    netWeightDeclarationDetail, sumNetWeightDeclarationDetail, sumGrossWeightDeclarationDetail,
                    quantityDeclarationDetail, priceContractDeclarationDetail, declarationPriceDeclarationDetail, supplierPriceDeclarationDetail,
                    declarationSumRateDeclarationDetail, dutyDeclarationDetail, dutyDataDeclarationDetail,
                    VATDeclarationDetail, VATDataDeclarationDetail
    PROPERTIES (dd) certificatedDeclarationDetail,
                    sidTemporalCertificateDeclarationDetail BACKGROUND isCertificatePreparedDeclarationDetail(dd),
                    sidPermanentCertificateDeclarationDetail BACKGROUND isCertificatePreparedDeclarationDetail(dd)

    FILTERS inDeclarationDeclarationDetail(d, dd)
    PROPERTIES (c, dd) sumCorrectionDeclarationDetail

    PROPERTIES (dd) correctionPriceDeclarationDetail, correctionDutyDeclarationDetail, correctionDutyDataDeclarationDetail,
                    diffDutyDeclarationDetail, registrationDeclarationDetail, priceCustomDeclarationDetail,
                    priceManagerialCustomDeclarationDetail, ADDOBJ, delete

    OBJECTS gd=groupDeclaration
    PROPERTIES (gd) READONLY numberGroupDeclaration, nameBrandGroupDeclaration, nameCategoryGroupDeclaration, sidArticleGroupDeclaration,
                    sidGenderGroupDeclaration, nameTypeFabricGroupDeclaration,
                    sidCustomCategory10GroupDeclaration, mainCompositionGroupDeclaration, nameCountryGroupDeclaration,
                    sidCountryGroupDeclaration, sidOrigin2CountryGroupDeclaration, quantityGroupDeclaration,
                    sidUnitOfMeasureGroupDeclaration, nameUnitOfMeasureGroupDeclaration,
                    sumGroupDeclaration, netWeightGroupDeclaration, grossWeightGroupDeclaration

    OBJECTS ii2=innerInvoice
    PROPERTIES (ii2) sidInnerInvoice, dateInnerInvoice

    FILTERS inDeclarationGroupDeclaration(d, gd), inGroupDeclarationInnerInvoice(gd, ii2)



    OBJECTS sf=(s=sku, fu=freightUnit)
    PROPERTIES READONLY FORCE GRID barcodeSku = barcode(s), nameBrandSupplierArticleSku(s), sidArticleSku(s), nameCategoryArticleSku(s),
                                   mainCompositionSku(s), sidColorSupplierItem(s), nameColorSupplierItem(s), sidSizeSupplierItem(s),
                                   barcodeFreightUnit = barcode(fu), nameDestinationFreightBox(fu)

    PROPERTIES (d, s) quantityDeclarationSku
    PROPERTIES (fu, s) quantityFreightUnitSku
    PROPERTIES (d, fu, s) quantityCertificatedDeclarationFreightUnitSku

    FILTERS inFreightUnitDeclaration(fu, d), certificatedDeclarationSku(d, s), quantityFreightUnitSku(fu, s)

    EDIT declaration OBJECT d
;


DESIGN declaration FROM DEFAULT{
    main {
          NEW allContainer {
            type = SPLITV;
            childConstraints = TO THE BOTTOM;

            NEW topContainer {
                fillVertical = 2;
                childConstraints = TO THE RIGHT;
                type = SPLITH;

                NEW decContainer {
                    childConstraints = TO THE RIGHT;
                    fillHorizontal = 2;

                    ADD d.docGroup {
                        childConstraints = TO THE BOTTOM;
                    }

                    ADD d.sumGroup {
                        childConstraints = TO THE BOTTOM;
                    }
                }

                NEW topContainer2 {
                    childConstraints = TO THE RIGHT;
                    type = SPLITH;

                    ADD c.box {
                        fillHorizontal = 1;
                    }

                    ADD f.box {
                        fillHorizontal = 1;
                    }
                }
            }


            NEW primary.box {
                type = TABBED;
                fillVertical = 5;

                NEW general.box {
                  type = SPLITV;
                  childConstraints = TO THE BOTTOM;
                  title = 'Основные данные';

                  ADD dd.box {
                      fillVertical = 5;
                  };

                  NEW firstCase {

                      type = SPLITH;
                      childConstraints = TO THE RIGHT;
                      ADD gd.box {
                          fillVertical = 1;
                          fillHorizontal = 3;
                      }

                      ADD ii2.box {
                          fillVertical = 1;
                          fillHorizontal = 1;
                      }
                  }

                }

              NEW certification.box {
                  title = 'Сертификация';
                  ADD sf.box;
              }
            }
          }
    }

    ADD functions.box;
};

FORM declarations 'Декларации'
    OBJECTS d=declaration
    PROPERTIES(d) READONLY objectClassName, nameCustomStoreDeclaration, nameImporterDeclaration, sidDeclaration,
                           beginTimeDeclaration, endTimeDeclaration, rateExchangeDeclaration, rateSumRegistrationDeclaration,
                           dutyDeclaration, VATDeclaration, totalCustomSum, diffDutyDeclararion, diffVATDeclararion, diffDeclaration,
                           expenseCertificateDeclaration
    PROPERTIES(d) ADDFORM, EDITFORM, delete

    OBJECTS dd=declarationDetail
    PROPERTIES(dd) READONLY numberDeclarationDetail, barcodeDeclarationDetail, nameBrandDeclarationDetail,
                            sidArticleDeclarationDetail, nameCategoryDeclarationDetail, sidGenderGroupDeclaration,
                            nameTypeFabricGroupDeclaration, mainCompositionDeclarationDetail,
                            nameCountryDeclarationDetail, sidCustomCategory10DeclarationDetail,
                            netWeightDeclarationDetail, sumNetWeightDeclarationDetail, sumGrossWeightDeclarationDetail,
                            quantityDeclarationDetail, priceContractDeclarationDetail, declarationPriceDeclarationDetail, supplierPriceDeclarationDetail,
                            dutyDeclarationDetail, dutyDataDeclarationDetail, VATDeclarationDetail, VATDataDeclarationDetail,
                            certificatedDeclarationDetail,
                            sidTemporalCertificateDeclarationDetail BACKGROUND isCertificatePreparedDeclarationDetail(dd),
                            sidPermanentCertificateDeclarationDetail BACKGROUND isCertificatePreparedDeclarationDetail(dd),
                            correctionPriceDeclarationDetail, correctionDutyDeclarationDetail,
                            correctionDutyDataDeclarationDetail, diffDutyDeclarationDetail, registrationDeclarationDetail,
                            priceCustomDeclarationDetail, priceManagerialCustomDeclarationDetail
    FILTERS inDeclarationDeclarationDetail(d, dd)

    OBJECTS s=sku
    PROPERTIES (s) READONLY FORCE GRID barcode, nameBrandSupplierArticleSku, sidArticleSku, nameCategoryArticleSku, mainCompositionSku,
                            sidColorSupplierItem, nameColorSupplierItem, sidSizeSupplierItem

    PROPERTIES (d, s) quantityCertificatedDeclarationSku

    FILTERS certificatedDeclarationSku(d, s)
;

DESIGN declarations FROM DEFAULT {
    d.grid {
        fillVertical = 0.3;
    }

    NEW primary.box {
        type = TABBED;

        NEW general.box {
            title = 'Основные данные';
            ADD dd.box;
        }

        NEW certification.box {
            title = 'Сертификация';
            ADD s.box;
        }
    }

    ADD functions.box;
}



FORM priceDeclaration 'Расценка деклараций'
    OBJECTS d=declaration
    PROPERTIES(d) READONLY sidDeclaration, nameCustomStoreDeclaration, nameImporterDeclaration
    PROPERTIES(d) toCreateDeclarationPriceSetDocument
;

FORM innerInvoices 'Инвойсы РБ'
    OBJECTS i=innerInvoice
    PROPERTIES(i) READONLY nameCustomStoreInnerInvoice, sidInnerInvoice, nameImporterInnerInvoice, dateInnerInvoice
    PROPERTIES(i) sidDeclarationInnerInvoice, delete
    FILTERS freightArrivedInnerInvoice(i)


    OBJECTS s=sku
    PROPERTIES(s) READONLY barcode, sidArticleSku
    PROPERTIES (i, s) quantityInnerInvoiceSku
    FILTERS quantityInnerInvoiceSku(i, s)
;

