MODULE Declaration;

REQUIRE System,
        Utils,
        Historizable,
        Tax,
        Stock,
        Numerator,
        Document,
        RomanDocument,
        Historizable,
        RetailPrice,
        MasterData,
        Freight,
        RomanStock,
        RomanLogicsModule;

PRIORITY Utils, Stock, RomanLogicsModule;

NAMESPACE RB;

//---------------------------------- НДС для ТН ВЭД ---------------------------------------------------------------//
TABLE customCategory10Data(customCategory10, DATE);
@defineHistorizableCustom(supplierVATCustomCategory10, 'НДС таможни', range, numberRange, customCategory10, sidCustomCategory10, baseGroup);

CONSTRAINT taxRange(dataSupplierVATCustomCategory10Date(customCategory10, date)) != tax.taxVAT CHECKED BY dataSupplierVATCustomCategory10Date MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

dataValueSupplierVATCustomCategory10Date 'НДС поставщика, %' (customCategory10, date) = valueRateRangeDate(dataSupplierVATCustomCategory10Date(customCategory10, date), date);
valueCurrentRateSupplierVATCustomCategory10 'НДС поставщика, %' (customCategory10) = valueCurrentRateRange(supplierVATCustomCategory10(customCategory10));

EXTEND FORM addSupplierVATCustomCategory10
    PROPERTIES READONLY FORCE GRID dataValueSupplierVATCustomCategory10Date(a, d)
;
EXTEND FORM dialogSupplierVATCustomCategory10
    PROPERTIES dataValueSupplierVATCustomCategory10Date(a, d)
;

toSetRangeCustomCategories10 'Взять шкалы' = ACTION () NEWSESSION AUTOAPPLY {
    SET dataSupplierVATCustomCategory10Date(c, d) <- valueCurrentVATCountryValue(countrySID(112), dutyPercentCustomCategory10TypeDuty(c, typeDutyNDS())) WHERE d == 2011_01_01;
    SET dataSupplierVATCustomCategory10Date(c, d) <- valueCurrentVATCountryValue(countrySID(112), NDSPercentCustom()) WHERE d == 2011_01_01 AND NOT dutyPercentCustomCategory10TypeDuty(c, typeDutyNDS());
};

//--------------------------------- Инвойсы -------------------------------------------------------------------------//
CLASS formedInvoice 'Инвойс от STX' : innerInvoice;

TABLE innerInvoice (innerInvoice);

includeImporterFreight(importer, freight) = quantityProxyImporterFreight(importer, freight) AND freight IS freightArrived AND routeFreight(freight) == route.rb;

@defineAggregationDouble(importer, freight, formedInvoice, includeImporterFreight);

freightInnerInvoice 'Фрахт инвойса (ИД)' (innerInvoice) = UNION EXCLUSIVE freightFormedInvoice(innerInvoice),
                                                                          freightDirectInvoice(innerInvoice) IN idGroup;

dateFreightInnerInvoice 'Дата прихода' (innerInvoice) = dateArrivalFreight(freightInnerInvoice(innerInvoice)) IN baseGroup;

languageInnerInvoice 'Язык инвойса (ИД)' (innerInvoice) = languageFreight(freightInnerInvoice(innerInvoice)) IN idGroup;
nameLanguageInnerInvoice 'Язык инвойса' (innerInvoice) = name(languageInnerInvoice(innerInvoice));

currencyFormedInvoice 'Валюта инвойса (ИД)' (formedInvoice) = currencyFreight(freightInnerInvoice(formedInvoice)) IN idGroup;
currencyInnerInvoice 'Валюта инвойса (ИД)' (innerInvoice) = UNION EXCLUSIVE currencyDocument(innerInvoice), currencyFormedInvoice(innerInvoice) IN idGroup;
nameCurrencyInnerInvoice 'Валюта инвойса' (innerInvoice) = name(currencyInnerInvoice(innerInvoice)) IN baseGroup;

freightArrivedInnerInvoice 'Прибыл фрахт инвойса' (innerInvoice) = freightInnerInvoice(innerInvoice) IS freightArrived;

importerInnerInvoice 'Импортер инвойса (ИД)' (innerInvoice) = UNION EXCLUSIVE importerFormedInvoice(innerInvoice),
                                                                              importerDirectInvoice(innerInvoice) IN idGroup;
nameImporterInnerInvoice 'Импортер инвойса' (innerInvoice) = name(importerInnerInvoice(innerInvoice)) IN baseGroup;

sidFormedInvoice 'Номер инвойса' (formedInvoice) = sidImporterFreight(importerFormedInvoice(formedInvoice),
                                                                      freightFormedInvoice(formedInvoice)) IN baseGroup;

sidDirectInvoice = sidDocument(innerInvoice) AND innerInvoice IS directInvoice;

sidInnerInvoice 'Номер инвойса' (innerInvoice) = UNION EXCLUSIVE sidDirectInvoice(innerInvoice), sidFormedInvoice(innerInvoice) IN baseGroup;

dateFormedInvoice 'Дата инвойса' (formedInvoice) = dateImporterFreight(importerInnerInvoice(formedInvoice),
                                                                       freightInnerInvoice(formedInvoice)) IN baseGroup;

dateDirectInvoice = date(innerInvoice) AND innerInvoice IS directInvoice;

dateInnerInvoice 'Дата инвойса' (innerInvoice) = UNION EXCLUSIVE dateDirectInvoice(innerInvoice), dateFormedInvoice(innerInvoice) IN baseGroup;

contractFormedInvoice 'Договор инвойса (ИД)' (formedInvoice) = contractImporterFreight(importerFormedInvoice(formedInvoice),
                                                                                       freightFormedInvoice(formedInvoice)) IN idGroup;

quantityFormedInvoiceSku 'Кол-во в инвойсе' (formedInvoice, sku) = quantityProxyImporterFreightSku(importerFormedInvoice(formedInvoice),
                                                                                                   freightFormedInvoice(formedInvoice),
                                                                                                   sku);

quantityDirectInvoiceSku = quantityDocumentSku(innerInvoice, sku) AND innerInvoice IS directInvoice;

quantityInnerInvoiceSku 'Кол-во в инвойсе' (innerInvoice, sku) = UNION EXCLUSIVE quantityDirectInvoiceSku(innerInvoice, sku),
                                                                                 quantityFormedInvoiceSku(innerInvoice, sku);

quantityFormedInvoice 'Кол-во в инвойсе' (innerInvoice) = GROUP SUM quantityInnerInvoiceSku(innerInvoice, sku)
                                                                 BY innerInvoice IN baseGroup PERSISTENT;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typeExchangeExpensesDirectInvoice 'Тип обмена (ИД)' (directInvoice) = typeExchangeSTX() IF directInvoice IS directInvoice IN idGroup;
currencyDirectInvoice '' (directInvoice) = currencyInnerInvoice(directInvoice) IF directInvoice IS directInvoice;
@defineNearestRateExchangeObject(directInvoice, expenses, , date, baseGroup);

priceFormedInvoiceSku 'Цена в инвойсе' (formedInvoice, sku) = priceFullImporterFreightSku(importerFormedInvoice(formedInvoice),
                                                                                          freightFormedInvoice(formedInvoice),
                                                                                          sku);

priceContractFormedInvoiceSku 'Цена контракта' (formedInvoice, sku) = priceInvoiceImporterFreightSku(importerFormedInvoice(formedInvoice),
                                                                                                     freightFormedInvoice(formedInvoice),
                                                                                                     sku);

priceManagerialFormedInvoiceSku 'Цена (УУ)' (formedInvoice, sku) = priceInFullImporterFreightSku(importerFormedInvoice(formedInvoice),
                                                                                                freightFormedInvoice(formedInvoice),
                                                                                                sku);

expensesDirectInvoiceSku 'Расходы' (directInvoice, sku) = priceFreightInsuranceImporterFreightSku(importerDirectInvoice(directInvoice),
                                                                                                  freightDirectInvoice(directInvoice),
                                                                                                  sku)/rateExchangeExpensesDirectInvoice(directInvoice);

priceDirectInvoiceSku 'Цена в инвойсе' (directInvoice, sku) = priceDocumentSku(directInvoice, sku) (+) expensesDirectInvoiceSku(directInvoice, sku);

priceInnerInvoiceSku 'Цена в инвойсе' (innerInvoice, sku) = UNION EXCLUSIVE priceFormedInvoiceSku(innerInvoice, sku),
                                                                            priceDirectInvoiceSku(innerInvoice, sku);

priceContractInnerInvoiceSku 'Цена контракта' (innerInvoice, sku) = UNION EXCLUSIVE priceContractFormedInvoiceSku(innerInvoice, sku),
                                                                                    priceDocumentSku(innerInvoice, sku);

priceManagerialInnerInvoiceSku 'Цена (УУ)' (innerInvoice, sku) = UNION EXCLUSIVE priceManagerialFormedInvoiceSku(innerInvoice, sku),
                                                                                 priceDirectInvoiceSku(innerInvoice, sku);

//--------------------------------- Декларации ----------------------------------------------------------------------//
CLASS declaration 'Таможенная декларация';
CLASS preparedDeclaration 'Подготовленная декларация' : declaration;
CLASS registeredDeclaration 'Зарегистрованная декларация' : preparedDeclaration;

CLASS declarationDetail 'Позиция декларации' : batchA;

@defineDocumentTables(declaration);

TABLE declarationSku (declaration, sku);
TABLE declarationDetailInnerInvoice (declarationDetail, innerInvoice);

CLASS correction 'КТС' : transaction;
TABLE correction (correction);

GROUP sumGroup 'Итого' : publicGroup;
GROUP corrGroup 'Доплата' : publicGroup;
GROUP docGroup 'Описание' : publicGroup;
GROUP datetimeGroup 'Даты' : publicGroup;
GROUP exchangeGroup 'Курсы обмена' : publicGroup;

customStoreDeclaration 'СВХ (ИД)' = DATA customStore(declaration) IN idGroup;
nameCustomStoreDeclaration 'СВХ' (declaration) = name(customStoreDeclaration(declaration)) IN docGroup;

sidDeclaration 'Номер' = DATA STRING[10] (declaration) IN docGroup MINCHARWIDTH 10;
beginTimeDeclaration 'Начало обработки' = DATA DATETIME (declaration) IN datetimeGroup;
endTimeDeclaration 'Конец обработки' = DATA DATETIME (declaration) IN datetimeGroup;

allowImportFromXLSDeclaration(declaration) = allowImportFromXLSLegalEntity(customStoreDeclaration(declaration));

exportDeclaration 'Экспортировать декларацию' = ACTION CUSTOM 'roman.actions.ExportDeclarationActionProperty' IN docGroup;

importerDeclaration 'Импортер (ИД)' = DATA importer (declaration) IN idGroup;
nameImporterDeclaration 'Импортёр' = name(importerDeclaration(declaration)) IN docGroup;

languageDeclaration 'Язык декларации (ИД)' (declaration) = languageLegalEntity(importerDeclaration(declaration)) IN idGroup;
nameLanguageDeclaration 'Язык декларации' (declaration) = name(languageDeclaration(declaration)) IN docGroup;

currencyDeclaration 'Валюта декларации (ИД)' = DATA currency(declaration) IN idGroup;
nameCurrencyDeclaration 'Валюта декларации' = name(currencyDeclaration(declaration)) IN exchangeGroup;

dateCorrectionDeclaration 'Дата оплаты КТС' = DATA DATE (declaration) IN baseGroup;

declarationInnerInvoice 'Декларация инвойса (ИД)' = DATA declaration(innerInvoice) IN idGroup;
sidDeclarationInnerInvoice 'Декларация инвойса' (innerInvoice) = sidDeclaration(declarationInnerInvoice(innerInvoice)) IN baseGroup;

inDeclarationInnerInvoice 'Инвойс в декларации' (declaration, innerInvoice) = declarationInnerInvoice(innerInvoice) == declaration;

CONSTRAINT declarationInnerInvoice(innerInvoice) AND NOT(freightInnerInvoice(innerInvoice) IS freightArrived)
    MESSAGE 'Инвойс используется в декларации';

forDeclaration(declaration, innerInvoice) = inDeclarationInnerInvoice(declaration, innerInvoice) OR declaration AS declaration AND NOT declarationInnerInvoice(innerInvoice);

CONSTRAINT importerDeclaration(declarationInnerInvoice(innerInvoice)) != importerInnerInvoice(innerInvoice) CHECKED
    MESSAGE 'Инвойс для другого импортёра';

importerDeclarationInnerInvoice (declaration, innerInvoice) = importerDeclaration(declaration) == importerInnerInvoice(innerInvoice);

CONSTRAINT currencyDeclaration(declarationInnerInvoice(innerInvoice)) != currencyInnerInvoice(innerInvoice) CHECKED
    MESSAGE 'Инвойс с другой валютой';

currencyDeclarationInnerInvoice (declaration, innerInvoice) = currencyDeclaration(declaration) == currencyInnerInvoice(innerInvoice);

CONSTRAINT languageDeclaration(declarationInnerInvoice(innerInvoice)) != languageInnerInvoice(innerInvoice) CHECKED
    MESSAGE 'Инвойс с другим языком';

languageDeclarationInnerInvoice (declaration, innerInvoice) = languageDeclaration(declaration) == languageInnerInvoice(innerInvoice) OR
                                                              (declaration IS declaration AND innerInvoice IS innerInvoice AND NOT languageDeclaration(declaration) AND NOT languageInnerInvoice(innerInvoice));

innerInvoiceDeclarationSku 'Инвойс для декларации' (declaration, sku) = GROUP MAX innerInvoice IF quantityInnerInvoiceSku(innerInvoice, sku)
                                                                               BY declarationInnerInvoice(innerInvoice), sku PERSISTENT;

quantityDeclarationSku 'Кол-во в декларации' (declaration, sku) = GROUP SUM quantityInnerInvoiceSku(innerInvoice, sku)
                                                                         BY declarationInnerInvoice(innerInvoice), sku IN baseGroup PERSISTENT;

@defineAggregationDouble(declaration, sku, declarationDetail, quantityDeclarationSku);

@defineDocumentDetailIndex(declaration);
@defineDocumentTime(declaration);

customStoreDeclarationDetail 'СВХ (ИД)' (declarationDetail) = customStoreDeclaration(declarationDeclarationDetail(declarationDetail)) IN idGroup;
nameCustomStoreDeclarationDetail 'СВХ' (declarationDetail) = name(customStoreDeclarationDetail(declarationDetail)) IN baseGroup;

descriptionDeclaration 'Название документа' (declaration) =
    [FORMULA STRING[200] '\'Декларация \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    sidDeclaration(declaration), dateDeclaration(declaration), nameCustomStoreDeclaration(declaration));

declarationCorrection 'Декларация КТС (ИД)' = DATA declaration(correction) IN idGroup;
inDeclarationCorrection (declaration, correction) = declarationCorrection(correction)==declaration;

dateTimePayCorrection 'Дата/время оплаты' = DATA DATETIME(correction) IN baseGroup;

numberDeclarationDetail 'Номер строки' (declarationDetail) =
        PARTITION SUM 1 IF declarationDetail IS declarationDetail BY declarationDeclarationDetail(declarationDetail)
        ORDER declarationDetail;

@defineDocumentDetailSkuArticle (declaration);

quantityDeclarationDetail 'Кол-во' (declarationDetail) = quantityDeclarationSku(declarationDeclarationDetail(declarationDetail),
                                                                                skuDeclarationDetail(declarationDetail)
                                                                               ) IN baseGroup;

freightDeclarationDetail 'Фрахт позиции (ИД)' (declarationDetail) = freightInnerInvoice(innerInvoiceDeclarationSku(
                                                                                declarationDeclarationDetail(declarationDetail),
                                                                                skuDeclarationDetail(declarationDetail))) IN idGroup;

//importerDeclarationDetail 'Импортёр позиции (ИД)' (declarationDetail) = importerInnerInvoice(innerInvoiceDeclarationSku(
//                                                                                declarationDeclarationDetail(declarationDetail),
//                                                                                skuDeclarationDetail(declarationDetail))) IN idGroup;

importerDeclarationDetail 'Импортёр позиции (ИД)' (declarationDetail) = importerDeclaration(declarationDeclarationDetail(declarationDetail)) IN idGroup;

//--------------------------------------- Свойства товаров ---------------------------------------------------------//
translateNameDeclarationDetail 'Наименование' (declarationDetail) = translateNameArticle(articleDeclarationDetail(declarationDetail));

nameInvoiceDeclarationDetail 'Наименование' (declarationDetail) = UNION OVERRIDE translateNameDeclarationDetail(declarationDetail),
                                                                                 nameCategoryDeclarationDetail(declarationDetail);


netWeightDeclarationDetail 'Вес нетто товара' (declarationDetail) = netWeightFreightSku(freightDeclarationDetail(declarationDetail),
                                                                                        skuDeclarationDetail(declarationDetail));

sumNetWeightDeclarationDetail 'Суммарный вес нетто' (declarationDetail) = netWeightDeclarationDetail(declarationDetail) *
                                                                          quantityDeclarationDetail(declarationDetail) IN baseGroup;

grossWeightDeclarationDetail 'Вес брутто товара' (declarationDetail) = grossWeightFreightSku(freightDeclarationDetail(declarationDetail),
                                                                                             skuDeclarationDetail(declarationDetail));

sumGrossWeightDeclarationDetail 'Суммарный вес брутто' (declarationDetail) = grossWeightDeclarationDetail(declarationDetail) *
                                                                             quantityDeclarationDetail(declarationDetail) IN baseGroup;

mainCompositionDeclarationDetail 'Состав товара' (declarationDetail) = mainCompositionFreightSku(freightDeclarationDetail(declarationDetail),
                                                                                                 skuDeclarationDetail(declarationDetail)) MINCHARWIDTH 20;

mainCompositionLanguageDeclarationDetail 'Состав товара (иностр.)' (declarationDetail) = mainCompositionLanguageFreightSku(freightDeclarationDetail(declarationDetail),
                                                                                                                 skuDeclarationDetail(declarationDetail)) MINCHARWIDTH 20;

userNumberDeclarationDetail 'Пользовательский номер' (declarationDetail) = userNumberFreightSku(freightDeclarationDetail(declarationDetail),
                                                                                                 skuDeclarationDetail(declarationDetail)) MINCHARWIDTH 20;

countryDeclarationDetail 'Страна товара (ИД)' (declarationDetail) = countryOfOriginFreightSku(freightDeclarationDetail(declarationDetail),
                                                                                              skuDeclarationDetail(declarationDetail)) IN idGroup;

nameCountryDeclarationDetail 'Страна товара' (declarationDetail) = name(countryDeclarationDetail(declarationDetail)) MINCHARWIDTH 15;

nameCountryLanguageDeclarationDetail 'Страна товара (иностр.)' (declarationDetail) = languageName(countryDeclarationDetail(declarationDetail), languageDeclaration(declarationDeclarationDetail(declarationDetail))) MINCHARWIDTH 15;

customCategory10InvoicedDeclarationDetail 'ТН ВЭД товара (ИД)' (declarationDetail) = customCategory10FreightSku(freightDeclarationDetail(declarationDetail),
                                                                                                                skuDeclarationDetail(declarationDetail)) IN idGroup;

customCategory10DataDeclarationDetail 'ТН ВЭД товара (ИД)' = DATA customCategory10(declarationDetail) IN idGroup;

customCategory10DeclarationDetail 'ТН ВЭД товара (ИД)' (declarationDetail) = UNION OVERRIDE customCategory10InvoicedDeclarationDetail(declarationDetail),
                                                                                            customCategory10DataDeclarationDetail(declarationDetail) IN idGroup PERSISTENT;

sidCustomCategory10DeclarationDetail 'ТН ВЭД товара' (declarationDetail) = sidCustomCategory10(customCategory10DeclarationDetail(declarationDetail));

customCategoryOriginInvoicedDeclarationDetail 'ТН ВЭД товара (ИД)' (declarationDetail) = customCategoryOriginFreightSku(freightDeclarationDetail(declarationDetail),
                                                                                                                        skuDeclarationDetail(declarationDetail)) IN idGroup;

customCategoryOriginDataDeclarationDetail 'ТН ВЭД товара (ИД)' = DATA customCategoryOrigin(declarationDetail) IN idGroup;

customCategoryOriginDeclarationDetail 'ТН ВЭД товара (ИД)' (declarationDetail) = UNION OVERRIDE customCategoryOriginInvoicedDeclarationDetail(declarationDetail),
                                                                                                customCategoryOriginDataDeclarationDetail(declarationDetail) IN idGroup PERSISTENT;

sidCustomCategoryOriginDeclarationDetail 'ТН ВЭД товара (иностр.)' (declarationDetail) = sidCustomCategoryOrigin(customCategoryOriginDeclarationDetail(declarationDetail));

//--------------------------------- Сертификаты и сертификация -------------------------------------------------------//
CLASS ABSTRACT certificate 'Сертификат';
CLASS temporalCertificate 'Временный сертификат' : certificate;
CLASS permanentCertificate 'Постоянный сертификат' : certificate;

TABLE certificate (certificate);

sidCertificate 'Номер' = DATA STRING[30] (certificate) IN baseGroup AGGPROP;
dateIssueCertificate 'Дата выдачи' = DATA DATE (certificate) IN baseGroup;
dateValidityCertificate 'Действует до' = DATA DATE (certificate) IN baseGroup;

FORM certificate 'Сертификат'
    OBJECTS c=certificate FIXED PANEL
    PROPERTIES(c) sidCertificate, objectClassName, dateIssueCertificate, dateValidityCertificate
    EDIT certificate OBJECT c
;

FORM certificates 'Сертификаты'
    OBJECTS c=certificate
    PROPERTIES(c) READONLY sidCertificate, objectClassName, dateIssueCertificate, dateValidityCertificate
    PROPERTIES(c) ADDFORM, EDITFORM, delete
;

certificatedCategoryDeclarationDetail 'Необходимость сертификации' (declarationDetail) = certificatedCustomCategory10(customCategory10DeclarationDetail(declarationDetail)) IN baseGroup;
certificatedDataDeclarationDetail 'Необходимость сертификации' = DATA BOOLEAN(declarationDetail);

certificatedDeclarationDetail 'Необходимость сертификации' (declarationDetail) = UNION OVERRIDE certificatedCategoryDeclarationDetail(declarationDetail),
                                                                                                certificatedDataDeclarationDetail(declarationDetail);

certificatedDeclarationSku 'Необходимость сертификации' (declaration, sku) = certificatedDeclarationDetail(declarationDetailDeclarationSku(declaration, sku));


quantityCertificatedDeclarationFreightUnitSku 'Кол-во для экспертизы' = DATA NUMERIC[14,3] (declaration, freightUnit, sku);

quantityCertificatedFreightUnitDeclarationDetail 'Кол-во для экспертизы' (freightUnit, declarationDetail) = quantityCertificatedDeclarationFreightUnitSku(declarationDeclarationDetail(declarationDetail), freightUnit, skuDeclarationDetail(declarationDetail));

quantityCertificatedDeclarationDetail 'Кол-во для экспертизы' (declarationDetail) = GROUP SUM quantityCertificatedDeclarationFreightUnitSku(declaration, freightUnit, skuDeclarationDetail(declarationDetail))
    BY declarationDetail;

quantityCertificatedDeclarationFreightUnit 'Кол-во для экспертизы' (declaration, freightUnit) = GROUP SUM quantityCertificatedDeclarationFreightUnitSku(declaration, freightUnit, sku)
                                                                                                       BY declaration, freightUnit;

quantityCertificatedDeclarationSku 'Кол-во для экспертизы' (declaration, sku) = GROUP SUM quantityCertificatedDeclarationFreightUnitSku(declaration, freightUnit, sku)
                                                                                       BY declaration, sku;

certificateDeclarationDetail 'Сертификат партии (ИД)' = DATA certificate(declarationDetail) IN idGroup;
temporalCertificateDeclarationDetail 'Временный сертификат партии (ИД)' = DATA temporalCertificate(declarationDetail) IN idGroup;
permanentCertificateDeclarationDetail 'Постоянный сертификат партии (ИД)' = DATA permanentCertificate(declarationDetail) IN idGroup;

certificatePreparedDeclarationDetail 'Сертификат партии (ИД)' (declarationDetail) = UNION OVERRIDE temporalCertificateDeclarationDetail(declarationDetail),
                                                                                                   permanentCertificateDeclarationDetail(declarationDetail) IN idGroup PERSISTENT;

sidTemporalCertificateDeclarationDetail 'Временный сертификат партии' (declarationDetail) = sidCertificate(temporalCertificateDeclarationDetail(declarationDetail)) IN baseGroup;
sidPermanentCertificateDeclarationDetail 'Постоянный сертификат партии' (declarationDetail) = sidCertificate(permanentCertificateDeclarationDetail(declarationDetail)) IN baseGroup;

sidCertificateDeclarationDetail 'Сертификат партии' (declarationDetail) = sidCertificate(certificateDeclarationDetail(declarationDetail)) IN baseGroup;

isCertificatePreparedDeclarationDetail 'Отсутствие сертификата' (declarationDetail) = certificatedDeclarationDetail(declarationDetail) AND
                                                                                      NOT certificatePreparedDeclarationDetail(declarationDetail);

quantityNoCertificateDeclaration 'Кол-во без сертификатов' (declaration) = GROUP SUM quantityDeclarationDetail(declarationDetail)
                                                                                  IF isCertificatePreparedDeclarationDetail(declarationDetail)
                                                                                  BY declarationDeclarationDetail(declarationDetail) PERSISTENT;

//CONSTRAINT quantityNoCertificateDeclaration(declaration)>0 AND declaration IS preparedDeclaration
//   MESSAGE 'Не у всех товаров требующих сертификации заданы сертификаты';

//--------------------------------------- Курсы валют и цены --------------------------------------------------------//
rateExchangeCustomDataDeclaration 'Курс (БУ)' = DATA NUMERIC[14,3] (declaration) IN exchangeGroup;
rateExchangeManagerialDataDeclaration 'Курс (УУ)' = DATA NUMERIC[14,3] (declaration) IN exchangeGroup;

typeExchangeCustomDeclaration 'Тип обмена (ИД)' = DATA typeExchange(declaration) IN idGroup;
typeExchangeManagerialDeclaration 'Тип обмена (ИД)' = DATA typeExchange(declaration) IN idGroup;
typeExchangeDutyDeclaration 'Тип обмена (ИД)' = typeExchangeSTX() IF declaration IS declaration IN idGroup;

nameTypeExchangeCustomDeclaration 'Тип обмена (БУ)' (declaration) = name(typeExchangeCustomDeclaration(declaration)) IN exchangeGroup;
nameTypeExchangeManagerialDeclaration 'Тип обмена (УУ)' (declaration) = name(typeExchangeManagerialDeclaration(declaration)) IN exchangeGroup;

typeExchangeCustomDeclaration(declaration) <- typeExchangePayCustom() WHEN CHANGED (dateDeclaration(declaration));
typeExchangeManagerialDeclaration(declaration) <- typeExchangePayManagerial() WHEN CHANGED (dateDeclaration(declaration));

@defineNearestRateExchangeObject(declaration, custom, , dateDeclaration, baseGroup);
@defineNearestRateExchangeObject(declaration, managerial, , dateDeclaration, baseGroup);
@defineNearestRateExchangeObject(declaration, duty, , dateDeclaration, baseGroup);

rateExchangeCustomDataDeclaration(declaration) <- rateExchangeCustomDeclaration(declaration) WHEN (CHANGED (dateDeclaration(declaration)) OR CHANGED (currencyDeclaration(declaration)));
rateExchangeManagerialDataDeclaration(declaration) <- rateExchangeManagerialDeclaration(declaration) WHEN (CHANGED (dateDeclaration(declaration)) OR CHANGED (currencyDeclaration(declaration)));

rateExchangeCustomDeclarationDetail 'Курс обмена (БУ)' (declarationDetail) = rateExchangeCustomDataDeclaration(declarationDeclarationDetail(declarationDetail)) IN baseGroup;
rateExchangeManagerialDeclarationDetail 'Курс обмена (УУ)' (declarationDetail) = rateExchangeManagerialDataDeclaration(declarationDeclarationDetail(declarationDetail)) IN baseGroup;

coeffRateDeclaration '' (declaration) = rateExchangeCustomDeclaration(declaration)/rateExchangeDutyDeclaration(declaration);

//priceContractDeclarationDetail 'Цена контракта' (declarationDetail) = priceInvoiceImporterFreightSku(importerDeclarationDetail(declarationDetail),
//                                                                                                     freightDeclarationDetail(declarationDetail),
//                                                                                                     skuDeclarationDetail(declarationDetail));

priceContractDeclarationDetail 'Цена контракта' (declarationDetail) = priceContractInnerInvoiceSku(innerInvoiceDeclarationSku(declarationDeclarationDetail(declarationDetail),
                                                                                                                              skuDeclarationDetail(declarationDetail)),
                                                                                                   skuDeclarationDetail(declarationDetail));

priceContractDeclarationArticle 'Цена поставщика' (declaration, article) = GROUP MAX priceContractDeclarationDetail(declarationDetail)
                                                                                  BY declarationDeclarationDetail(declarationDetail), articleDeclarationDetail(declarationDetail);

RRPDeclarationArticle 'Рекомендованная цена' (declaration, article) = GROUP MAX RRPFreightArticle(freightDeclarationDetail(declarationDetail), articleDeclarationDetail(declarationDetail))
                                                                             BY declarationDeclarationDetail(declarationDetail), articleDeclarationDetail(declarationDetail);

priceContractRateDeclarationDetail 'Цена контракта (руб.)' (declarationDetail) = priceContractDeclarationDetail(declarationDetail) *
                                                                                 rateExchangeCustomDeclarationDetail(declarationDetail);


//declarationPriceDeclarationDetail 'Цена товара (БУ)' (declarationDetail) = priceFullImporterFreightSku(importerDeclarationDetail(declarationDetail),
//                                                                                                       freightDeclarationDetail(declarationDetail),
//                                                                                                       skuDeclarationDetail(declarationDetail));

declarationPriceDeclarationDetail 'Цена товара (БУ)' (declarationDetail) = priceInnerInvoiceSku(innerInvoiceDeclarationSku(declarationDeclarationDetail(declarationDetail),
                                                                                                                           skuDeclarationDetail(declarationDetail)),
                                                                                                skuDeclarationDetail(declarationDetail));

//priceManagerialDeclarationDetail 'Цена товара (УУ)' (declarationDetail) = priceInFullImporterFreightSku(importerDeclarationDetail(declarationDetail),
//                                                                                                        freightDeclarationDetail(declarationDetail),
//                                                                                                        skuDeclarationDetail(declarationDetail));

priceManagerialDeclarationDetail 'Цена товара (УУ)' (declarationDetail) = priceManagerialInnerInvoiceSku(innerInvoiceDeclarationSku(declarationDeclarationDetail(declarationDetail),
                                                                                                                                    skuDeclarationDetail(declarationDetail)),
                                                                                                         skuDeclarationDetail(declarationDetail));

priceManagerialRateDeclarationDetail 'Цена товара (конверт.)' (declarationDetail) = priceManagerialDeclarationDetail(declarationDetail) *
                                                                                    rateExchangeManagerialDeclarationDetail(declarationDetail);

declarationSumDeclarationDetail 'Стоимость товара' (declarationDetail) = declarationPriceDeclarationDetail(declarationDetail) *
                                                                         quantityDeclarationDetail(declarationDetail);

declarationSumRateDeclarationDetail 'Стоимость товара (расч.)' (declarationDetail) = round2(declarationSumDeclarationDetail(declarationDetail) *
                                                                                            rateExchangeCustomDeclarationDetail(declarationDetail));

priceRateDeclarationDetail 'Цена товара (конверт.)' (declarationDetail) = round2(declarationSumRateDeclarationDetail(declarationDetail)/
                                                                                 quantityDeclarationDetail(declarationDetail)) IN baseGroup PERSISTENT;

isPostedDeclarationDetail (declarationDetail) = TRUE IF declarationDetail IS declarationDetail;




descriptionDeclarationDetail = descriptionDeclaration(declarationDeclarationDetail(declarationDetail));

// для экспорта в Декларант
TABLE groupDeclaration(groupDeclaration);
TABLE groupDeclarationInnerInvoice(groupDeclaration, innerInvoice);
TABLE groupDeclarationDeclarationDetail(groupDeclaration, declarationDetail);
TABLE correctionGroupDeclaration(correction, groupDeclaration);
TABLE declarationArtCatCompCountry(declaration, article, customCategory10, STRING[200], country);

quantityDeclarationGroup 'Кол-во' = GROUP SUM quantityDeclarationDetail(declarationDetail)
                                           BY declarationDeclarationDetail(declarationDetail),
                                              articleDeclarationDetail(declarationDetail),
                                              customCategory10DeclarationDetail(declarationDetail),
                                              mainCompositionDeclarationDetail(declarationDetail),
                                              countryDeclarationDetail(declarationDetail) IN baseGroup PERSISTENT;

CLASS groupDeclaration 'Строка декларации';

declarationGroupDeclaration 'Декларация (ИД)' = DATA declaration(groupDeclaration) IN idGroup NOT NULL DELETE;

articleGroupDeclaration 'Артикул (ИД)' = DATA article(groupDeclaration) IN idGroup;
customCategory10GroupDeclaration 'ТН ВЭД (ИД)' = DATA customCategory10(groupDeclaration) IN idGroup;
mainCompositionGroupDeclaration 'Состав' = DATA STRING[200](groupDeclaration) IN baseGroup;
countryGroupDeclaration 'Страна (ИД)' = DATA country(groupDeclaration) IN idGroup;

certificatedGroupDeclaration 'Необходимость сертификации' (groupDeclaration) = certificatedCustomCategory10(customCategory10GroupDeclaration(groupDeclaration)) IN baseGroup;

sidArticleGroupDeclaration 'Артикул' (groupDeclaration) = sidArticle(articleGroupDeclaration(groupDeclaration)) IN baseGroup;
sidCustomCategory10GroupDeclaration 'ТН ВЭД' (groupDeclaration) = sidCustomCategory10(customCategory10GroupDeclaration(groupDeclaration)) IN baseGroup;
nameCountryGroupDeclaration 'Страна' (groupDeclaration) = name(countryGroupDeclaration(groupDeclaration)) IN baseGroup MINCHARWIDTH 10;
sidCountryGroupDeclaration 'Цифровой код страны' (groupDeclaration) = sidCountry(countryGroupDeclaration(groupDeclaration)) IN baseGroup;
sidOrigin2CountryGroupDeclaration 'Буквенный код страны' (groupDeclaration) = sidOrigin2Country(countryGroupDeclaration(groupDeclaration)) IN baseGroup MINCHARWIDTH 3;

numberGroupDeclaration 'Номер' (groupDeclaration) =
        PARTITION SUM 1 IF groupDeclaration IS groupDeclaration BY declarationGroupDeclaration(groupDeclaration)
        ORDER groupDeclaration;
userNumberGroupDeclaration 'Пользовательский номер' (groupDeclaration) = DATA INTEGER (groupDeclaration) IN idGroup;
overNumberGroupDeclaration 'Номер' (groupDeclaration) = UNION OVERRIDE numberGroupDeclaration(groupDeclaration), userNumberGroupDeclaration(groupDeclaration);
uniqueGroupDeclaration = GROUP UNIQUE groupDeclaration BY userNumberGroupDeclaration (groupDeclaration),
                                                          declarationGroupDeclaration (groupDeclaration)
                                                          WHERE groupDeclaration IS groupDeclaration;
inDeclarationGroupDeclaration (declaration, groupDeclaration) = declarationGroupDeclaration(groupDeclaration)==declaration;

TABLE groupstring (object, object, object, object, STRING[200]);

//quantityDeclarationGroup(declaration, article, customCategory10, STRING, country) => uniqueGroupDeclaration(declaration, article, customCategory10, STRING, country) RESOLVE TRUE;
//isGroupDeclaration(group) = group IS groupDeclaration;
//isGroupDeclaration(group) => quantityDeclarationGroup(declarationGroupDeclaration(group),
//                                                      articleGroupDeclaration(group),
//                                                      customCategory10GroupDeclaration(group),
//                                                      mainCompositionGroupDeclaration(group),
//                                                      countryGroupDeclaration(group)) RESOLVE FALSE;

// свойства от артикула
nameBrandGroupDeclaration 'Бренд' (groupDeclaration) = nameBrandSupplierArticle(articleGroupDeclaration(groupDeclaration));
nameCategoryGroupDeclaration 'Ном. группа' (groupDeclaration) = nameCategoryArticle(articleGroupDeclaration(groupDeclaration));
translateNameGroupDeclaration 'Наименование' (groupDeclaration) = translateNameArticle(articleGroupDeclaration(groupDeclaration));

nameInvoiceGroupDeclaration 'Наименование' (groupDeclaration) = UNION OVERRIDE translateNameGroupDeclaration(groupDeclaration),
                                                                               nameCategoryGroupDeclaration(groupDeclaration);

genderArticleGroupDeclaration 'Пол (ИД)' (groupDeclaration) = genderArticle(articleGroupDeclaration(groupDeclaration)) IN idGroup;
genderDataGroupDeclaration 'Пол (ИД)' = DATA gender(groupDeclaration) IN idGroup;
genderGroupDeclaration'Пол (ИД)' (groupDeclaration) = UNION OVERRIDE genderArticleGroupDeclaration(groupDeclaration), genderDataGroupDeclaration(groupDeclaration) IN idGroup;
sidGenderGroupDeclaration 'Пол' (groupDeclaration) = sidGender(genderGroupDeclaration(groupDeclaration)) MINCHARWIDTH 3;

typeFabricArticleGroupDeclaration 'Тип одежды (ИД)' (groupDeclaration) = typeFabricArticle(articleGroupDeclaration(groupDeclaration)) IN idGroup;
typeFabricDataGroupDeclaration 'Тип одежды (ИД)' = DATA typeFabric(groupDeclaration) IN idGroup;
typeFabricGroupDeclaration 'Тип одежды (ИД)' (groupDeclaration) = UNION OVERRIDE typeFabricArticleGroupDeclaration(groupDeclaration),
                                                                                 typeFabricDataGroupDeclaration(groupDeclaration) IN idGroup;
nameTypeFabricGroupDeclaration 'Тип одежды' (groupDeclaration) = name(typeFabricGroupDeclaration(groupDeclaration)) MINCHARWIDTH 10;

unitOfMeasureArticleGroupDeclaration 'Ед. изм.(ИД)' (groupDeclaration) = unitOfMeasureArticle(articleGroupDeclaration(groupDeclaration));
unitOfMeasureDataGroupDeclaration 'Ед. изм.(ИД)' = DATA unitOfMeasure(groupDeclaration);
unitOfMeasureGroupDeclaration 'Ед. изм.(ИД)' = UNION OVERRIDE unitOfMeasureArticleGroupDeclaration(groupDeclaration),
                                                              unitOfMeasureDataGroupDeclaration(groupDeclaration);

sidUnitOfMeasureGroupDeclaration 'Ед. изм.(код)' (groupDeclaration) = sidUnitOfMeasure(unitOfMeasureGroupDeclaration(groupDeclaration));
nameUnitOfMeasureGroupDeclaration 'Ед. изм.' (groupDeclaration) = name(unitOfMeasureGroupDeclaration(groupDeclaration)) MINCHARWIDTH 5;

//stringGroupDeclaration 'Наименование' (groupDeclaration) =
//    [FORMULA STRING[200] 'CAST($1 AS TEXT) ||  \',\' || CAST($2 AS TEXT) || \',\' || CAST($3 AS TEXT) ||  \',Торговая марка \' || CAST($4 AS TEXT) || \', Состав: \' || CAST($5 AS TEXT)'] (
//    nameInvoiceGroupDeclaration(groupDeclaration), sidGenderGroupDeclaration(groupDeclaration), nameTypeFabricGroupDeclaration(groupDeclaration),
//    nameBrandGroupDeclaration(groupDeclaration), mainCompositionGroupDeclaration(groupDeclaration));

stringGroupDeclaration 'Наименование' (groupDeclaration) = ustring5CM(string2(nameInvoiceGroupDeclaration(groupDeclaration), ''),
                                                                      string2(sidGenderGroupDeclaration(groupDeclaration), ''),
                                                                      string2(nameTypeFabricGroupDeclaration(groupDeclaration), ''),
                                                                      string2('Торговая марка: ', nameBrandGroupDeclaration(groupDeclaration)),
                                                                      string2('Состав:', mainCompositionGroupDeclaration(groupDeclaration))
                                                                      ) PERSISTENT;


nameDataGroupDeclaration 'Наименование' = DATA STRING[200] (groupDeclaration);
nameGroupDeclaration 'Наименование' (groupDeclaration) = UNION OVERRIDE stringGroupDeclaration(groupDeclaration), nameDataGroupDeclaration(groupDeclaration);

inDeclarationDeclarationDetail (declaration, declarationDetail) = declarationDeclarationDetail(declarationDetail)==declaration;

inGroupDeclarationDeclarationDetail 'Связь' = DATA BOOLEAN (groupDeclaration, declarationDetail);
inDeclarationDetailGroupDeclaration 'Связь' (declarationDetail, groupDeclaration) = inGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail);

// todo определение основной строки для позиции декларации
primaryGroupDeclarationDeclarationDetail 'Главная строка для позиции (ИД)' (declarationDetail) = GROUP MAX groupDeclaration IF inGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail)
                                                                                                        BY declarationDetail;

percentDataGroupDeclarationDeclarationDetail '%' = DATA NUMERIC[14,2] (groupDeclaration, declarationDetail);
percentGroupDeclarationDeclarationDetail '%' (groupDeclaration, declarationDetail) =
                         (UNION OVERRIDE 100.0 IF (groupDeclaration IS groupDeclaration AND declarationDetail IS declarationDetail),
                                         percentDataGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail)) IF inGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail);

groupDeclarationDeclarationDetail 'Группа строки декларации (ИД)'(declarationDetail) = uniqueGroupDeclaration(
                                                                                       userNumberDeclarationDetail(declarationDetail),
                                                                                       declarationDeclarationDetail(declarationDetail))
                                                                                       IN idGroup;

numberGroupDeclarationDeclarationDetail 'Группа строки декларации'(declarationDetail) = numberGroupDeclaration(groupDeclarationDeclarationDetail(declarationDetail)) IN baseGroup;


inDeclarationDetailInnerInvoice 'Связка' (declarationDetail, innerInvoice) = quantityInnerInvoiceSku(innerInvoice, skuDeclarationDetail(declarationDetail)) IF
                                                                             declarationDeclarationDetail(declarationDetail) == declarationInnerInvoice(innerInvoice) PERSISTENT;

inGroupDeclarationInnerInvoice 'Связка' (groupDeclaration, innerInvoice) = GROUP SUM inDeclarationDetailInnerInvoice(declarationDetail, innerInvoice)
                                                                                  BY groupDeclarationDeclarationDetail(declarationDetail), innerInvoice PERSISTENT;

TABLE freightDeclarationSku(freight, declaration, sku);
TABLE declarationFreightUnitSku(declaration, freightUnit, sku);

quantityFreightDeclarationSku 'Кол-во' (freight, declaration, sku) = GROUP SUM quantityInnerInvoiceSku(innerInvoice, sku) BY freightInnerInvoice(innerInvoice),
                                                                                                                             declarationInnerInvoice(innerInvoice),
                                                                                                                             sku PERSISTENT;

quantityFreightDeclaration 'Кол-во' (freight, declaration) = GROUP SUM quantityFreightDeclarationSku (freight, declaration, sku) BY freight, declaration;

sidFreightDeclaration 'Номер' (freight, declaration) = sidImporterFreight(importerDeclaration(declaration), freight);

quantityImporterFreightUnitSku 'Кол-во' (importer, freightUnit, sku) = UNION EXCLUSIVE quantityImporterStockSku(importer, freightUnit, sku),
                                                                                       quantityImporterDirectSupplierBoxSku(importer, freightUnit, sku);

inFreightUnitDeclarationDetail 'Кол-во' (freightUnit, declarationDetail) = quantityImporterFreightUnitSku(importerDeclarationDetail(declarationDetail),
                                                                                                          freightUnit AS freightUnit,
                                                                                                          skuDeclarationDetail(declarationDetail)) AND
                                                                                             quantityFreightDeclarationSku(freightFreightUnit(freightUnit),
                                                                                                                           declarationDeclarationDetail(declarationDetail),
                                                                                                                           skuDeclarationDetail(declarationDetail));

inFreightUnitDeclaration 'Кол-во' (freightUnit, declaration) = GROUP SUM inFreightUnitDeclarationDetail(freightUnit, declarationDetail)
                                                                      BY freightUnit, declarationDeclarationDetail(declarationDetail);

quantityGroupDeclaration 'Кол-во' (groupDeclaration) = GROUP SUM quantityDeclarationDetail(declarationDetail) IF inGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail)
                                                              BY groupDeclaration PERSISTENT;

netWeightGroupDeclarationDeclarationDetail 'Доля' (groupDeclaration, declarationDetail) = (sumNetWeightDeclarationDetail(declarationDetail) *
                                                                                           percentGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail))/100
                                                                                          IF inGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail);

netWeightGroupDeclaration 'Вес нетто' (groupDeclaration) = GROUP SUM netWeightGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail)
                                                                  BY groupDeclaration IN baseGroup PERSISTENT;

grossWeightGroupDeclarationDeclarationDetail 'Доля' (groupDeclaration, declarationDetail) = (sumGrossWeightDeclarationDetail(declarationDetail) *
                                                                                           percentGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail))/100
                                                                                          IF inGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail);

grossWeightGroupDeclaration 'Вес брутто' (groupDeclaration) = GROUP SUM grossWeightGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail)
                                                                     BY groupDeclaration IN baseGroup PERSISTENT;

sumPercentDeclarationDetail 'Сумма процентов' (declarationDetail) = GROUP SUM percentGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail) BY declarationDetail;
CONSTRAINT sumPercentDeclarationDetail(declarationDetail) != 100 CHECKED MESSAGE 'ошибка: сумма процентов по позиции не равна 100';

sumGroupDeclarationDeclarationDetail 'Доля' (groupDeclaration, declarationDetail) = (declarationSumRateDeclarationDetail(declarationDetail) *
                                                                                     percentGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail))/100
                                                                                 IF inGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail);

sumGroupDeclaration 'Стоимость (расч.)' (groupDeclaration) = GROUP SUM sumGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail)
                                                                    BY groupDeclaration IN baseGroup PERSISTENT MINCHARWIDTH 15;

dutyGroupDeclaration 'Пошлина (расч.)' (groupDeclaration) = UNION MAX
                                coeffRateDeclaration(declarationGroupDeclaration(groupDeclaration)) * netWeightGroupDeclaration(groupDeclaration) * dutySumCustomCategory10TypeDuty(customCategory10GroupDeclaration(groupDeclaration), typeDutyDuty()),
                                sumGroupDeclaration(groupDeclaration) * (dutyPercentCustomCategory10TypeDuty(customCategory10GroupDeclaration(groupDeclaration), typeDutyDuty())/100) PERSISTENT MINCHARWIDTH 15;

//--------------------------------------- импорт из Декларанта ------------------------------------------------------//
// стоимости и пошлины
sumDataGroupDeclaration 'Стоимость' = DATA NUMERIC[14,2](groupDeclaration) MINCHARWIDTH 15;

sumCorrectionGroupDeclaration 'Скорректированная стоимость' = DATA NUMERIC[14,2](correction, groupDeclaration) MINCHARWIDTH 15;
correctionSumGroupDeclaration 'Скорректированная стоимость' (groupDeclaration) = GROUP MAX sumCorrectionGroupDeclaration(correction, groupDeclaration) BY groupDeclaration PERSISTENT;

dutyDataGroupDeclaration 'Пошлина' = DATA NUMERIC[14,2](groupDeclaration) MINCHARWIDTH 15;
dutyImportDeclaration 'Пошлина' (declaration) = GROUP SUM dutyDataGroupDeclaration(groupDeclaration) BY declarationGroupDeclaration(groupDeclaration) PERSISTENT MINCHARWIDTH 15;

coeffGroupDeclarationDeclarationDetail '' (groupDeclaration, declarationDetail) = sumGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail)/
                                                                                  sumGroupDeclaration(groupDeclaration);

sumReverseGroupDeclarationDetail 'Часть стоимости' (groupDeclaration, declarationDetail) = sumDataGroupDeclaration(groupDeclaration) * coeffGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail)
                                                                                           IF inGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail);

sumReverseDeclarationDetail 'Стоимость' (declarationDetail) = GROUP SUM sumReverseGroupDeclarationDetail(groupDeclaration, declarationDetail) BY declarationDetail PERSISTENT MINCHARWIDTH 15;

priceReverseDeclarationDetail 'Цена' (declarationDetail) = sumReverseDeclarationDetail(declarationDetail)/quantityDeclarationDetail(declarationDetail);

correctionSumReverseGroupDeclarationDetail 'Часть корр. стоимости' (groupDeclaration, declarationDetail) = correctionSumGroupDeclaration(groupDeclaration) * coeffGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail)
                                                                                                           IF inGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail);

correctionSumReverseDeclarationDetail 'Корр. стоимость' (declarationDetail) = GROUP SUM correctionSumReverseGroupDeclarationDetail(groupDeclaration, declarationDetail) BY declarationDetail PERSISTENT MINCHARWIDTH 15;

supplierSumDeclarationDetail 'Стоимость' (declarationDetail) = UNION OVERRIDE sumReverseDeclarationDetail(declarationDetail),
                                                                              correctionSumReverseDeclarationDetail(declarationDetail);

dutyReverseGroupDeclarationDetail 'Часть пошлины' (groupDeclaration, declarationDetail) = dutyDataGroupDeclaration(groupDeclaration) * coeffGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail)
                                                                                          IF inGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail);

dutyReverseDeclarationDetail 'Пошлина' (declarationDetail) = GROUP SUM dutyReverseGroupDeclarationDetail(groupDeclaration, declarationDetail) BY declarationDetail PERSISTENT MINCHARWIDTH 15;

dutyReverseDeclaration 'Сумма пошлин' (declaration) = GROUP SUM dutyReverseDeclarationDetail(declarationDetail) BY declarationDeclarationDetail(declarationDetail) IN sumGroup PERSISTENT;

sumDutyReverseDeclarationDetail 'Стоимость с пошлиной' (declarationDetail) = UNION SUM supplierSumDeclarationDetail(declarationDetail),
                                                                                       dutyReverseDeclarationDetail(declarationDetail);

// НДС
VATRangeDataGroupDeclaration 'Шкала НДС (ИД)' = DATA range(groupDeclaration);
VATRangeGroupDeclaration 'Шкала НДС (ИД)' (groupDeclaration) = supplierVATCustomCategory10Date(customCategory10GroupDeclaration(groupDeclaration),
                                                                                               dateDeclaration(declarationGroupDeclaration(groupDeclaration)));

CONSTRAINT taxRange(VATRangeDataGroupDeclaration(groupDeclaration)) != tax.taxVAT OR
           countryRange(VATRangeDataGroupDeclaration(groupDeclaration)) != countryLegalEntity(importerDeclaration(declarationGroupDeclaration(groupDeclaration)))
           CHECKED BY VATRangeDataGroupDeclaration
           MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС и стране импортера';

VATRangeDataGroupDeclaration(groupDeclaration) <- VATRangeGroupDeclaration(groupDeclaration) WHEN CHANGED (customCategory10GroupDeclaration(groupDeclaration));

numberVATRangeGroupDeclaration 'Шкала НДС' (groupDeclaration) = numberRange(VATRangeDataGroupDeclaration(groupDeclaration));
valueVATRangeGroupDeclaration 'НДС (%)' (groupDeclaration) = valueRateRangeDate(VATRangeDataGroupDeclaration(groupDeclaration),
                                                                                dateDeclaration(declarationGroupDeclaration(groupDeclaration)));

VATRangeReverseDeclarationDetail 'Шкала НДС (ИД)' (declarationDetail) = VATRangeDataGroupDeclaration(primaryGroupDeclarationDeclarationDetail(declarationDetail));
numberVATRangeReverseDeclarationDetail 'Шкала НДС' (declarationDetail) = numberRange(VATRangeReverseDeclarationDetail(declarationDetail));
valueVATRangeReverseDeclarationDetail 'НДС (%)' (declarationDetail) = valueRateRangeDate(VATRangeReverseDeclarationDetail(declarationDetail), dateDeclaration(declarationDeclarationDetail(declarationDetail)));

VATReverseDeclarationDetail 'НДС' (declarationDetail) = sumDutyReverseDeclarationDetail(declarationDetail) * valueVATRangeReverseDeclarationDetail(declarationDetail)/100;

VATReverseDeclaration 'Сумма НДС' (declaration) = GROUP SUM VATReverseDeclarationDetail(declarationDetail) BY declarationDeclarationDetail(declarationDetail) IN sumGroup PERSISTENT MINCHARWIDTH 15;

supplierPriceDeclarationDetail 'Цена' (declarationDetail) = supplierSumDeclarationDetail(declarationDetail)/quantityDeclarationDetail(declarationDetail);

quantityDiffDeclarationDetail 'Кол-во' (declarationDetail) = quantityDeclarationDetail(declarationDetail) (-) quantityCertificatedDeclarationDetail(declarationDetail);

sumDiffDeclarationDetail 'Сумма' (declarationDetail) = supplierPriceDeclarationDetail(declarationDetail) * quantityDiffDeclarationDetail(declarationDetail);

@implementBatch(declaration, sku, customStore, supplierPrice);
quantityBatch (batch) += quantityDiffDeclarationDetail(batch);
ownerBatchA (batch) += importerDeclarationDetail(batch);
importerPriceBatchA (batch) += supplierPriceDeclarationDetail(batch);
supplierPriceBatchA (batch) += supplierPriceDeclarationDetail(batch);
rangeVATBatchA (batch) += VATRangeReverseDeclarationDetail(batch);
sumInSkuLedger(batch) += sumDiffDeclarationDetail(batch);


setSumGroupDeclaration 'Расчитать стоимость и пошлину' = ACTION (declaration) {
   FOR declarationGroupDeclaration(groupDeclaration) == declaration DO {
      SET sumDataGroupDeclaration(groupDeclaration) <- sumGroupDeclaration(groupDeclaration);
      SET dutyDataGroupDeclaration(groupDeclaration) <- dutyGroupDeclaration(groupDeclaration);
   };
};

toCreateGroupsDeclaration 'Создать строки' = ACTION (declaration) {
    FOR quantityDeclarationGroup(declaration, article, customCategory10, mainComposition, country) DO {
        ADDOBJ groupDeclaration;
        FOR g == addedObject() DO {
            SET declarationGroupDeclaration(g) <- declaration;
            SET articleGroupDeclaration(g) <- article;
            SET customCategory10GroupDeclaration(g) <- customCategory10;
            SET mainCompositionGroupDeclaration(g) <- mainComposition;
            SET countryGroupDeclaration(g) <- country;

            SET inGroupDeclarationDeclarationDetail(g, declarationDetail) <- declarationDeclarationDetail(declarationDetail) == declaration AND
                articleDeclarationDetail(declarationDetail) == article AND customCategory10DeclarationDetail(declarationDetail) == customCategory10 AND
                mainCompositionDeclarationDetail(declarationDetail) == mainComposition AND countryDeclarationDetail(declarationDetail) == country;
        };
    };

    EXEC setSumGroupDeclaration(declaration AS declaration);

} TOOLBAR;

isSubstringGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail) = isSubstring(nameGroupDeclaration(groupDeclaration), sidArticleDeclarationDetail (declarationDetail));

fillInGroupDeclarationDeclarationDetail 'Связать позиции декларации по артикулам' = ACTION(declaration) {
    SET inGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail) <-
        isSubstringGroupDeclarationDeclarationDetail(groupDeclaration, declarationDetail)
        WHERE declarationGroupDeclaration(groupDeclaration) == declaration AND declarationDeclarationDetail(declarationDetail) == declaration;
}

importGroupsDeclaration 'Импортировать строки декларации' = ACTION CUSTOM 'roman.actions.ImportGroupsDeclarationActionProperty' IN docGroup;

//
sumDeclaration 'Сумма' (declaration) = GROUP SUM declarationSumRateDeclarationDetail(declarationDetail) BY declarationDeclarationDetail(declarationDetail) IN sumGroup PERSISTENT;

// Таможенный сбор
sumRegistrationDeclarationDetail 'Таможенный сбор' (declarationDetail) = dutyPercentCustomCategory10TypeDuty(customCategory10DeclarationDetail(declarationDetail), typeDutyRegistration()) IN baseGroup;

sumRegistrationDeclaration 'Таможенный сбор (расч.)' (declaration) = GROUP MAX sumRegistrationDeclarationDetail(declarationDetail)
                                                                            BY declarationDeclarationDetail(declarationDetail) IN baseGroup PERSISTENT;

rateSumRegistrationDeclaration 'Сумма таможенного сбора' (declaration) = round2(sumRegistrationDeclaration(declaration) *
                                                                                coeffRateDeclaration(declaration)) IN sumGroup PERSISTENT MINCHARWIDTH 12;

sumRegistrationDataDeclaration 'Таможенный сбор' = DATA NUMERIC[14,2](declaration);
sumRegistrationUnionDeclaration 'Таможенный сбор' = UNION OVERRIDE rateSumRegistrationDeclaration(declaration), sumRegistrationDataDeclaration(declaration) IN sumGroup;
sumRegistrationDataDeclaration(declaration) <- rateSumRegistrationDeclaration(declaration) WHEN ASSIGNED (declaration IS preparedDeclaration);

totalCustomSum 'Сумма платежей' (declaration) = round2(UNION SUM dutyReverseDeclaration(declaration), VATReverseDeclaration(declaration), sumRegistrationDataDeclaration(declaration)) IN sumGroup MINCHARWIDTH 17;

coeffDeclarationDetailDeclaration 'Удельный вес' (declarationDetail) = declarationSumRateDeclarationDetail(declarationDetail)/sumDeclaration(declarationDeclarationDetail(declarationDetail));

registrationSumDeclarationDetail 'Таможенный сбор' (declarationDetail) = round2(rateSumRegistrationDeclaration(declarationDeclarationDetail(declarationDetail)) *
                                                                                coeffDeclarationDetailDeclaration(declarationDetail));

registrationSumDataDeclarationDetail 'Таможенный сбор' = DATA NUMERIC[14,2](declarationDetail);
registrationSumDataDeclarationDetail(declarationDetail) <- registrationSumDeclarationDetail(declarationDetail) WHEN ASSIGNED (declarationDeclarationDetail(declarationDetail) IS preparedDeclaration);

registrationSumUnionDeclarationDetail 'Таможенный сбор' = UNION OVERRIDE registrationSumDeclarationDetail(declarationDetail),
                                                                         registrationSumDataDeclarationDetail(declarationDetail);

registrationDeclarationDetail 'Таможенный сбор (ед.)' (declarationDetail) = round2(registrationSumUnionDeclarationDetail(declarationDetail)/quantityDeclarationDetail(declarationDetail)) PERSISTENT;

registrationRateDeclarationDetail 'Таможенный сбор (в валюте)' (declarationDetail) = round2(registrationDeclarationDetail(declarationDetail)/rateExchangeManagerialDeclarationDetail(declarationDetail));


// учёт расходов на сертификацию и консультации
expenseCertificateDeclaration 'Расходы на сертификацию (БУ)' (declaration) = GROUP SUM priceRateDeclarationDetail(declarationDetail) *
                                                                                       quantityCertificatedDeclarationSku(declarationDeclarationDetail(declarationDetail), skuDeclarationDetail(declarationDetail))
                                                                                    IF certificatedDeclarationDetail(declarationDetail)
                                                                                    BY declarationDeclarationDetail(declarationDetail) IN corrGroup PERSISTENT;

expenseCertificateManagerialDeclarationDetail 'Расходы на сертификацию' (declarationDetail) = priceManagerialDeclarationDetail(declarationDetail) *
                                                                                              quantityCertificatedDeclarationSku(declarationDeclarationDetail(declarationDetail), skuDeclarationDetail(declarationDetail))
                                                                                              IF certificatedDeclarationDetail(declarationDetail);

TABLE declarationCertificate (declaration, certificate);
quantityDeclarationCertificate 'Кол-во на сертификат' (declaration, certificate) = GROUP SUM quantityDiffDeclarationDetail(declarationDetail)
                                                                                          BY declarationDeclarationDetail(declarationDetail),
                                                                                             certificatePreparedDeclarationDetail(declarationDetail) PERSISTENT;

sumExpenseDeclarationCertificate '' (declaration, certificate) = GROUP SUM expenseCertificateManagerialDeclarationDetail(declarationDetail)
                                                                        BY declarationDeclarationDetail(declarationDetail),
                                                                           certificatePreparedDeclarationDetail(declarationDetail) PERSISTENT;

expenseDeclarationCertificate '' (declaration, certificate) = sumExpenseDeclarationCertificate(declaration, certificate)/quantityDeclarationCertificate(declaration, certificate);

expenseDeclarationDetail 'Затраты' (declarationDetail) = expenseDeclarationCertificate(declarationDeclarationDetail(declarationDetail), certificatePreparedDeclarationDetail(declarationDetail));

expenseCertificateManagerialDeclaration 'Расходы на сертификацию (УУ)' (declaration) = GROUP SUM expenseCertificateManagerialDeclarationDetail(declarationDetail)
                                                                                              BY declarationDeclarationDetail(declarationDetail) PERSISTENT;

consultationDeclarationDetail 'Консультация' = DATA BOOLEAN(declarationDetail);
sumConsultationDeclaration 'Сумма за консультацию' = DATA NUMERIC[14,3](declaration) IN sumGroup;

//quantityConsultationDetailDeclaration '' (declaration) = GROUP SUM 1 IF consultationDeclarationDetail(declarationDetail)
//                                                                BY declarationDeclarationDetail(declarationDetail);

//consultationDeclaration '' (declaration) = sumConsultationDeclaration(declaration)/quantityConsultationDetailDeclaration(declaration);

sumConsultationDeclarationDetail 'За консультацию' (declarationDetail) = sumConsultationDeclaration(declarationDeclarationDetail(declarationDetail)) *
                                                                         coeffDeclarationDetailDeclaration(declarationDetail);

sumConsultationRateDeclarationDetail 'За консультацию (в валюте)' = sumConsultationDeclarationDetail(declarationDetail)/rateExchangeManagerialDeclarationDetail(declarationDetail);

// для себестоимости
dutyFinDeclarationDetail 'Пошлина' = round2(dutyReverseDeclarationDetail(declarationDetail)/quantityDeclarationDetail(declarationDetail));
VATFinDeclarationDetail 'НДС' = round2(VATReverseDeclarationDetail(declarationDetail)/quantityDeclarationDetail(declarationDetail));

dutyRateDeclarationDetail 'Пошлина (в валюте)' (declarationDetail) = round2(dutyFinDeclarationDetail(declarationDetail)/rateExchangeManagerialDeclarationDetail(declarationDetail));
VATRateDeclarationDetail 'НДС (в валюте)' (declarationDetail) = round2(VATFinDeclarationDetail(declarationDetail)/rateExchangeManagerialDeclarationDetail(declarationDetail));

priceCustomDeclarationDetail 'Себестоимость (БУ)' (declarationDetail) = UNION SUM priceReverseDeclarationDetail(declarationDetail),
                                                                                  dutyFinDeclarationDetail(declarationDetail),
                                                                                  registrationDeclarationDetail(declarationDetail) PERSISTENT;

priceManagerialCustomDeclarationDetail 'Себестоимость (УУ)' (declarationDetail) = UNION SUM priceManagerialDeclarationDetail(declarationDetail),
                                                                                            dutyRateDeclarationDetail(declarationDetail),
                                                                                            registrationRateDeclarationDetail(declarationDetail),
                                                                                            expenseDeclarationDetail(declarationDetail),
                                                                                            sumConsultationRateDeclarationDetail(declarationDetail) PERSISTENT;

priceCustomBatch (batch) += priceCustomDeclarationDetail(batch);
priceManagerialBatch (batch) += priceManagerialCustomDeclarationDetail(batch);

quantityDeclarationArticle 'Кол-во' (declaration, article) = GROUP SUM quantityDeclarationSku(declaration, sku) BY declaration, articleSku(sku);
inDeclarationArticle (declaration, article) = TRUE IF quantityDeclarationArticle(declaration, article);

priceCustomDeclarationSku 'Себестоимость (БУ)' (declaration, sku) = priceCustomDeclarationDetail(declarationDetailDeclarationSku(declaration, sku));
priceManagerialDeclarationSku 'Себестоимость (УУ)' (declaration, sku) = priceManagerialDeclarationDetail(declarationDetailDeclarationSku(declaration, sku));

priceCustomDeclarationArticle 'Себестоимость (БУ)' (declaration, article) = GROUP MAX priceCustomDeclarationSku(declaration, sku)
                                                                                   BY declaration, articleSku(sku);

priceManagerialDeclarationArticle 'Себестоимость (УУ)' (declaration, article) = GROUP MAX priceManagerialDeclarationSku(declaration, sku)
                                                                                       BY declaration, articleSku(sku);

stringInnerInvoice (innerInvoice) =
    [FORMULA STRING[30] 'CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) '] (
    sidInnerInvoice(innerInvoice), dateInnerInvoice(innerInvoice));

innerInvoicesDeclaration 'Инвойсы' (declaration) = GROUP CONCAT stringInnerInvoice(innerInvoice)
    IF inDeclarationInnerInvoice (declaration, innerInvoice), ', ' BY declaration IN docGroup MINCHARWIDTH 10 PREFCHARWIDTH 20;


quantityDeclarationBrandSupplier (declaration, brandSupplier) = GROUP SUM quantityDeclarationDetail(declarationDetail)
    BY declarationDeclarationDetail(declarationDetail), brandDeclarationDetail(declarationDetail);

canonicalBrandDeclaration 'Бренды' (declaration) = castToString255(
    [GROUP CONCAT commonName(brandSupplier) IF quantityDeclarationBrandSupplier(declaration, brandSupplier), ' , ' BY declaration](declaration))
    MINCHARWIDTH 50 MAXCHARWIDTH 100 PREFCHARWIDTH 100 PERSISTENT;


FORM declarationInvoices 'Присоединение инвойсов'
    OBJECTS d=declaration FIXED PANEL
    PROPERTIES(d) objectClassName, sidDeclaration, nameCustomStoreDeclaration, nameImporterDeclaration, nameLanguageDeclaration,
                  nameCurrencyDeclaration, dateTimeDeclaration, beginTimeDeclaration, endTimeDeclaration

    OBJECTS ii=innerInvoice
    PROPERTIES (ii) sidInnerInvoice, dateInnerInvoice, nameImporterInnerInvoice, dateFreightInnerInvoice
    PROPERTIES (d, ii) inDeclarationInnerInvoice
    FILTERS freightArrivedInnerInvoice(ii), forDeclaration(d, ii)

    FILTERGROUP filtersLanguage
        FILTER 'Только с языком декларации' 'F9' languageDeclarationInnerInvoice(d, ii) DEFAULT

    FILTERGROUP filtersCurrency
        FILTER 'Только с валютой декларации' 'F10' currencyDeclarationInnerInvoice(d, ii) DEFAULT

    FILTERGROUP filtersImporter
        FILTER 'Только импортёра декларации' 'F11' importerDeclarationInnerInvoice(d, ii) DEFAULT
;

showFormDeclarationInvoices 'Присоединить инвойсы' = ACTION (declaration) {
    FORM declarationInvoices OBJECTS d=declaration MODAL;
} IN docGroup TOOLBAR;

FORM declaration 'Декларация'
    OBJECTS d=declaration FIXED PANEL
    PROPERTIES(d) objectClassName, sidDeclaration, nameCustomStoreDeclaration, nameImporterDeclaration, nameLanguageDeclaration,
                  nameCurrencyDeclaration, innerInvoicesDeclaration, dateDeclaration, timeDeclaration, beginTimeDeclaration, endTimeDeclaration,
                  nameTypeExchangeCustomDeclaration, rateExchangeCustomDataDeclaration, nameTypeExchangeManagerialDeclaration,
                  rateExchangeManagerialDataDeclaration, sumRegistrationUnionDeclaration, dutyReverseDeclaration, VATReverseDeclaration, totalCustomSum,
                  expenseCertificateDeclaration, sumConsultationDeclaration

    OBJECTS c=correction
    PROPERTIES(c) date, dateTimePayCorrection, ADDOBJ, delete
    FILTERS inDeclarationCorrection(d, c)

    OBJECTS dd=declarationDetail
    PROPERTIES (dd) READONLY numberDeclarationDetail, barcodeDeclarationDetail, nameInvoiceDeclarationDetail, nameBrandDeclarationDetail,
                    sidArticleDeclarationDetail, sidSizeDeclarationDetail, sidColorDeclarationDetail, nameColorDeclarationDetail,
                    sidGenderGroupDeclaration, nameTypeFabricGroupDeclaration, mainCompositionDeclarationDetail, mainCompositionLanguageDeclarationDetail SHOWIF languageDeclaration(d),
                    nameCountryDeclarationDetail, nameCountryLanguageDeclarationDetail SHOWIF languageDeclaration(d)
    PROPERTIES (dd) sidCustomCategoryOriginDeclarationDetail SHOWIF languageDeclaration(d), sidCustomCategory10DeclarationDetail
    PROPERTIES (dd) READONLY netWeightDeclarationDetail, sumNetWeightDeclarationDetail,
                    sumGrossWeightDeclarationDetail, quantityDeclarationDetail, shortNameUOMDeclarationDetail, priceContractDeclarationDetail,
                    declarationPriceDeclarationDetail, priceRateDeclarationDetail, declarationSumRateDeclarationDetail,
                    supplierSumDeclarationDetail, dutyReverseDeclarationDetail, numberVATRangeReverseDeclarationDetail,
                    valueVATRangeReverseDeclarationDetail, VATReverseDeclarationDetail, registrationSumUnionDeclarationDetail,
                    priceCustomDeclarationDetail, priceManagerialDeclarationDetail, expenseDeclarationDetail, sumConsultationRateDeclarationDetail,
                    priceManagerialCustomDeclarationDetail

    PROPERTIES (dd) certificatedDeclarationDetail,
                    sidTemporalCertificateDeclarationDetail BACKGROUND isCertificatePreparedDeclarationDetail(dd),
                    sidPermanentCertificateDeclarationDetail BACKGROUND isCertificatePreparedDeclarationDetail(dd)

    FILTERS inDeclarationDeclarationDetail(d, dd)

    OBJECTS gd=groupDeclaration
    PROPERTIES (gd, dd) inGroupDeclarationDeclarationDetail, percentGroupDeclarationDeclarationDetail
    PROPERTIES (gd) READONLY overNumberGroupDeclaration, nameInvoiceGroupDeclaration, nameBrandGroupDeclaration
    PROPERTIES (gd) sidArticleGroupDeclaration, sidGenderGroupDeclaration, nameTypeFabricGroupDeclaration
    PROPERTIES (gd) mainCompositionGroupDeclaration, nameGroupDeclaration,
                    nameCountryGroupDeclaration, sidCountryGroupDeclaration, sidOrigin2CountryGroupDeclaration, sidCustomCategory10GroupDeclaration,
                    quantityGroupDeclaration, sidUnitOfMeasureGroupDeclaration, nameUnitOfMeasureGroupDeclaration,
                    netWeightGroupDeclaration, grossWeightGroupDeclaration, sumGroupDeclaration, dutyGroupDeclaration,
                    sumDataGroupDeclaration, dutyDataGroupDeclaration, numberVATRangeGroupDeclaration, valueVATRangeGroupDeclaration, ADDOBJ, delete
    PROPERTIES (c, gd) sumCorrectionGroupDeclaration

    PROPERTIES (d) showFormDeclarationInvoices TODRAW dd FORCE PANEL
    PROPERTIES (d) toCreateGroupsDeclaration TODRAW gd FORCE PANEL, setSumGroupDeclaration TODRAW gd FORCE PANEL
    PROPERTIES (d) importGroupsDeclaration TODRAW gd FORCE PANEL SHOWIF allowImportFromXLSDeclaration(d)
    PROPERTIES (d) fillInGroupDeclarationDeclarationDetail  TODRAW gd FORCE PANEL SHOWIF allowImportFromXLSDeclaration(d)

    FILTERGROUP filterDetail
        FILTER 'Для текущей позиции' 'F11' inGroupDeclarationDeclarationDetail(gd, dd)

    OBJECTS gd2=groupDeclaration
    PROPERTIES (gd2) READONLY overNumberGroupDeclaration, nameCategoryGroupDeclaration, nameBrandGroupDeclaration
    PROPERTIES (gd2) sidArticleGroupDeclaration
    PROPERTIES (gd2) READONLY sidGenderGroupDeclaration, nameTypeFabricGroupDeclaration
    PROPERTIES (gd2) mainCompositionGroupDeclaration, nameGroupDeclaration,
                    nameCountryGroupDeclaration, sidCountryGroupDeclaration, sidOrigin2CountryGroupDeclaration, sidCustomCategory10GroupDeclaration,
                    quantityGroupDeclaration, sidUnitOfMeasureGroupDeclaration, nameUnitOfMeasureGroupDeclaration,
                    netWeightGroupDeclaration, grossWeightGroupDeclaration, sumGroupDeclaration, dutyGroupDeclaration,
                    sumDataGroupDeclaration, dutyDataGroupDeclaration, numberVATRangeGroupDeclaration, valueVATRangeGroupDeclaration, delete
    PROPERTIES (c, gd2) sumCorrectionGroupDeclaration

    OBJECTS dd2=declarationDetail
    PROPERTIES (gd2, dd2) inGroupDeclarationDeclarationDetail, percentGroupDeclarationDeclarationDetail
    PROPERTIES (dd2) READONLY numberDeclarationDetail, barcodeDeclarationDetail, nameInvoiceDeclarationDetail, nameBrandDeclarationDetail,
                    sidArticleDeclarationDetail, sidSizeDeclarationDetail, sidColorDeclarationDetail, nameColorDeclarationDetail,
                    sidGenderGroupDeclaration, nameTypeFabricGroupDeclaration, mainCompositionDeclarationDetail, mainCompositionLanguageDeclarationDetail SHOWIF languageDeclaration(d),
                    nameCountryDeclarationDetail, nameCountryLanguageDeclarationDetail SHOWIF languageDeclaration(d)
    PROPERTIES (dd2) sidCustomCategoryOriginDeclarationDetail SHOWIF languageDeclaration(d), sidCustomCategory10DeclarationDetail
    PROPERTIES (dd2) READONLY netWeightDeclarationDetail, sumNetWeightDeclarationDetail,
                    sumGrossWeightDeclarationDetail, quantityDeclarationDetail, shortNameUOMDeclarationDetail, priceContractDeclarationDetail,
                    declarationPriceDeclarationDetail, priceRateDeclarationDetail, declarationSumRateDeclarationDetail,
                    supplierSumDeclarationDetail, dutyReverseDeclarationDetail, numberVATRangeReverseDeclarationDetail,
                    valueVATRangeReverseDeclarationDetail, VATReverseDeclarationDetail, registrationSumUnionDeclarationDetail,
                    priceCustomDeclarationDetail, priceManagerialDeclarationDetail, priceManagerialCustomDeclarationDetail

    PROPERTIES (dd2) certificatedDeclarationDetail,
                    sidTemporalCertificateDeclarationDetail BACKGROUND isCertificatePreparedDeclarationDetail(dd2),
                    sidPermanentCertificateDeclarationDetail BACKGROUND isCertificatePreparedDeclarationDetail(dd2)

    FILTERS inDeclarationDeclarationDetail(d, dd2)

    FILTERGROUP filterGroup
        FILTER 'Для текущей строки' 'F10' inGroupDeclarationDeclarationDetail(gd2, dd2) DEFAULT


    OBJECTS sf=(s=sku, fu=freightUnit)
    PROPERTIES READONLY FORCE GRID barcodeSku = barcode(s), nameCategoryArticleSku(s), nameBrandSupplierArticleSku(s), sidArticleSku(s),
                        sidSizeSupplierItem(s), sidColorSupplierItem(s), nameColorSupplierItem(s), mainCompositionSku(s),
                        barcodeFreightUnit = barcode(fu), nameDestinationFreightUnit(fu)

    PROPERTIES (d, s) quantityDeclarationSku
    PROPERTIES (fu, s) quantityFreightUnitSku
    PROPERTIES (d, fu, s) quantityCertificatedDeclarationFreightUnitSku

    FILTERS inDeclarationGroupDeclaration(d, gd), inDeclarationGroupDeclaration(d, gd2), inFreightUnitDeclaration(fu, d), certificatedDeclarationSku(d, s), quantityFreightUnitSku(fu, s)

    EDIT declaration OBJECT d
;


DESIGN declaration FROM DEFAULT{
    main {
          NEW allContainer {
            type = SPLITV;
            childConstraints = TO THE BOTTOM;

            NEW topContainer {
                fillVertical = 2;
                childConstraints = TO THE RIGHT;
                type = SPLITH;

                NEW decContainer {
                    childConstraints = TO THE RIGHT;
                    fillHorizontal = 2;

                    NEW descrContainer {

                        childConstraints = TO THE BOTTOM;

                        NEW headContainer {

                            caption = 'Шапка документа';
                            childConstraints = TO THE BOTTOM;
                            ADD PROPERTY(objectClassName);
                            ADD PROPERTY(sidDeclaration);
                            ADD PROPERTY(nameCustomStoreDeclaration);
                            ADD PROPERTY(nameImporterDeclaration);
                            ADD PROPERTY(nameLanguageDeclaration);
                            ADD PROPERTY(innerInvoicesDeclaration);
                            ADD PROPERTY(showFormDeclarationInvoices);
                        }

                        NEW datetimeContainer {

                            caption = 'Даты';
                            childConstraints = TO THE BOTTOM;
                            ADD PROPERTY(dateDeclaration);
                            ADD PROPERTY(timeDeclaration);
                            ADD PROPERTY(beginTimeDeclaration);
                            ADD PROPERTY(endTimeDeclaration);
                        }
                    }

                    NEW sumContainer {

                        childConstraints = TO THE BOTTOM;

                        ADD d.exchangeGroup {
                            childConstraints = TO THE BOTTOM;
                        }

                        ADD d.sumGroup {
                            childConstraints = TO THE BOTTOM;
                        }

                        ADD d.corrGroup {
                            childConstraints = TO THE BOTTOM;
                        }
                    }
                }

                ADD c.box {
                    fillHorizontal = 1;
                }
            }

            NEW primary.box {
                type = TABBED;
                fillVertical = 5;

                NEW general.box {
                    type = SPLITV;
                    childConstraints = TO THE BOTTOM;
                    title = 'Позиции декларации';

                    ADD dd.box {
                        fillVertical = 3.5;
                        PROPERTY (showFormDeclarationInvoices(d)) {
                            panelLocation = TOOLBAR;
                        }
                    };

                    ADD gd.box {
                        fillVertical = 1.5;
                        PROPERTY (toCreateGroupsDeclaration(d)) {
                            panelLocation = TOOLBAR;
                        }

                        PROPERTY (importGroupsDeclaration(d)) {
                            panelLocation = TOOLBAR;
                        }
                        PROPERTY (fillInGroupDeclarationDeclarationDetail(d)) {
                            panelLocation = TOOLBAR;
                        }

                        PROPERTY (setSumGroupDeclaration(d)) {
                            panelLocation = TOOLBAR;
                        }
                    }
                }

                NEW groupDeclaration.box {

                    type = SPLITV;
                    childConstraints = TO THE BOTTOM;
                    title = 'Строки декларации';

                    ADD gd2.box {
                        fillVertical = 3;
                    };

                    ADD dd2.box {
                        fillVertical = 2;
                    }
                }

                NEW certification.box {
                    title = 'Сертификация';
                    ADD sf.box;
                }
            }
          }
    }

    PROPERTY(priceContractDeclarationDetail) { background = #AAFFCC; }
    PROPERTY(declarationPriceDeclarationDetail) { background = #AAFFCC; }
    PROPERTY(priceRateDeclarationDetail) { background = #AAFFCC; }
    PROPERTY(declarationSumRateDeclarationDetail) { background = #AAFFCC; }

    PROPERTY(supplierSumDeclarationDetail) { background = #AAFFFF; }
    PROPERTY(dutyReverseDeclarationDetail) { background = #AAFFFF; }
    PROPERTY(numberVATRangeReverseDeclarationDetail) { background = #AAFFFF; }
    PROPERTY(valueVATRangeReverseDeclarationDetail) { background = #AAFFFF; }
    PROPERTY(VATReverseDeclarationDetail) { background = #AAFFFF; }
    PROPERTY(registrationSumUnionDeclarationDetail) { background = #AAFFFF; }


    ADD functions.box;
};

FORM declarations 'Декларации'
    OBJECTS d=declaration
    PROPERTIES(d) READONLY sidDeclaration, objectClassName, nameCustomStoreDeclaration, nameImporterDeclaration, nameLanguageDeclaration,
                           dateDeclaration, timeDeclaration, nameCurrencyDeclaration,
                           rateExchangeCustomDataDeclaration, rateExchangeManagerialDataDeclaration, sumRegistrationUnionDeclaration,
                           dutyReverseDeclaration, VATReverseDeclaration, totalCustomSum,
                           expenseCertificateDeclaration, canonicalBrandDeclaration
    PROPERTIES(d) FORCE PANEL exportDeclaration, ADDFORM, EDITFORM, delete

    OBJECTS dd=declarationDetail
    PROPERTIES(dd) READONLY numberDeclarationDetail, barcodeDeclarationDetail, nameInvoiceDeclarationDetail, nameBrandDeclarationDetail,
                   sidArticleDeclarationDetail, sidSizeDeclarationDetail, sidColorDeclarationDetail, nameColorDeclarationDetail,
                   sidGenderGroupDeclaration, nameTypeFabricGroupDeclaration, mainCompositionDeclarationDetail, mainCompositionLanguageDeclarationDetail SHOWIF languageDeclaration(d),
                   nameCountryDeclarationDetail, nameCountryLanguageDeclarationDetail SHOWIF languageDeclaration(d),
                   sidCustomCategoryOriginDeclarationDetail SHOWIF languageDeclaration(d), sidCustomCategory10DeclarationDetail,
                   netWeightDeclarationDetail, sumNetWeightDeclarationDetail, sumGrossWeightDeclarationDetail,
                   quantityDeclarationDetail, shortNameUOMDeclarationDetail, priceContractDeclarationDetail, declarationPriceDeclarationDetail,
                   priceRateDeclarationDetail, declarationSumRateDeclarationDetail,
                   supplierSumDeclarationDetail, dutyReverseDeclarationDetail, numberVATRangeReverseDeclarationDetail,
                   valueVATRangeReverseDeclarationDetail, VATReverseDeclarationDetail, registrationSumUnionDeclarationDetail,
                   priceCustomDeclarationDetail, priceManagerialDeclarationDetail, priceManagerialCustomDeclarationDetail

    PROPERTIES(dd) READONLY certificatedDeclarationDetail,
                            sidTemporalCertificateDeclarationDetail BACKGROUND isCertificatePreparedDeclarationDetail(dd),
                            sidPermanentCertificateDeclarationDetail BACKGROUND isCertificatePreparedDeclarationDetail(dd)

    FILTERS inDeclarationDeclarationDetail(d, dd)

    OBJECTS s=sku
    PROPERTIES (s) READONLY FORCE GRID barcode, nameCategoryArticleSku, nameBrandSupplierArticleSku, sidArticleSku,
                            sidSizeSupplierItem, sidColorSupplierItem, nameColorSupplierItem,  mainCompositionSku

    PROPERTIES (d, s) quantityCertificatedDeclarationSku

    FILTERS certificatedDeclarationSku(d, s)

    OBJECTS gd=groupDeclaration
    //PROPERTIES (gd, dd) inGroupDeclarationDeclarationDetail, percentGroupDeclarationDeclarationDetail
    PROPERTIES (gd) READONLY overNumberGroupDeclaration, nameCategoryGroupDeclaration, nameBrandGroupDeclaration, sidArticleGroupDeclaration,
                    sidGenderGroupDeclaration, nameTypeFabricGroupDeclaration, mainCompositionGroupDeclaration, nameGroupDeclaration,
                    nameCountryGroupDeclaration, sidCountryGroupDeclaration, sidOrigin2CountryGroupDeclaration, sidCustomCategory10GroupDeclaration,
                    quantityGroupDeclaration, sidUnitOfMeasureGroupDeclaration, nameUnitOfMeasureGroupDeclaration,
                    netWeightGroupDeclaration, grossWeightGroupDeclaration, sumGroupDeclaration, dutyGroupDeclaration,
                    sumDataGroupDeclaration, dutyDataGroupDeclaration, numberVATRangeGroupDeclaration, valueVATRangeGroupDeclaration

     FILTERS inDeclarationGroupDeclaration(d, gd)
;

DESIGN declarations FROM DEFAULT {
    d.grid {
        fillVertical = 0.3;
    }

    PROPERTY (delete(d)) {
        caption = 'Удалить';
        panelLocation = TOOLBAR;
    }

    PROPERTY (exportDeclaration(d)) {
        panelLocation = TOOLBAR;
    }

    NEW primary.box {
        type = TABBED;

        NEW general.box {
            title = 'Позиции декларации';
            ADD dd.box;
        }

        NEW declarant.box {
            title = 'Строки декларации';
            ADD gd.box;
        }

        NEW certification.box {
            title = 'Сертификация';
            ADD s.box;
        }
    }

    PROPERTY(priceContractDeclarationDetail) { background = #AAFFCC; }
    PROPERTY(declarationPriceDeclarationDetail) { background = #AAFFCC; }
    PROPERTY(priceRateDeclarationDetail) { background = #AAFFCC; }
    PROPERTY(declarationSumRateDeclarationDetail) { background = #AAFFCC; }

    PROPERTY(supplierSumDeclarationDetail) { background = #AAFFFF; }
    PROPERTY(dutyReverseDeclarationDetail) { background = #AAFFFF; }
    PROPERTY(numberVATRangeReverseDeclarationDetail) { background = #AAFFFF; }
    PROPERTY(valueVATRangeReverseDeclarationDetail) { background = #AAFFFF; }
    PROPERTY(VATReverseDeclarationDetail) { background = #AAFFFF; }
    PROPERTY(registrationSumUnionDeclarationDetail) { background = #AAFFFF; }

    ADD functions.box;
}


FORM innerInvoices 'Инвойсы РБ'
    OBJECTS i=innerInvoice
    PROPERTIES(i) READONLY sidInnerInvoice, nameImporterInnerInvoice, dateInnerInvoice, nameLanguageInnerInvoice,
                  nameCurrencyInnerInvoice, rateExchangeExpensesDirectInvoice
    PROPERTIES(i) sidDeclarationInnerInvoice, delete
    FILTERS freightArrivedInnerInvoice(i)

    OBJECTS s=sku
    PROPERTIES(s) READONLY barcode, sidArticleSku
    PROPERTIES (i, s) quantityInnerInvoiceSku, priceInnerInvoiceSku, expensesDirectInvoiceSku
    FILTERS quantityInnerInvoiceSku(i, s)
;

