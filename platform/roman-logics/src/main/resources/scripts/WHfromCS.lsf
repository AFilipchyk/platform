MODULE WHfromCS;

REQUIRE System,

        Utils,
        Stock,
        Numerator,
        Document,
        RomanDocument,
        Consignment,
        CStoWH,
        InnerOrder,
        Barcode,
        MasterData,
        RomanLogicsModule;

PRIORITY RomanLogicsModule, Stock;

//--------------------------------------------- Поступление ---------------------------------------------------------- //

CLASS WHfromCSI 'Приход на склад с СВХ' : historyObject;
CLASS WHfromCSIDetail 'Строка прихода на склад' : inLIFOSkuLedger;

@defineDocumentTables(WHfromCSI);

@defineDocumentAggregation(CStoWH, WHfromCSI, isPostedCStoWH);

@defineDocumentAggregationStock(CStoWH, WHfromCSI, customStore, 'СВХ');
@defineDocumentAggregationStock(CStoWH, WHfromCSI, warehouse, 'Оптовый склад');

@defineDocumentAggregationPosted(CStoWH, WHfromCSI);

@defineDocumentAggregationHeaderNumber(CStoWH, WHfromCSI);

@defineDocumentDescriptionCustom(WHfromCSI, WHfromCSIDetail, seriesNumberWHfromCSI, 'Поступление товара с СВХ');

@defineDocumentDetailIndex(WHfromCSI);

@defineDocumentAggregationDetailSku(CStoWH, WHfromCSI, sku);
@defineDocumentAggregationDetailQuantity(CStoWH, WHfromCSI);

@defineDocumentHeaderQuantity(WHfromCSI);
@defineDocumentHeaderSkuQuantity(WHfromCSI, sku);

@defineDocumentDetailSkuArticle(WHfromCSI);

costWHfromCSIBatch(WHfromCSI, batch) = GROUP SUM costSkuLedgerBatch(ledger, batch) BY WHfromCSIWHfromCSIDetail(ledger), batch;

sumWHfromCSIDetail 'Сумма' (detail) = sumCStoWHDetail(CStoWHDetailWHfromCSIDetail(detail)) PERSISTENT;

destinationWHfromCSIDetail(WHfromCSIDetail) = destinationCStoWHDetail(CStoWHDetailWHfromCSIDetail(WHfromCSIDetail));
nameDestinationWHfromCSIDetail 'Пункт назначения' (WHfromCSIDetail) = nameDestinationCStoWHDetail(CStoWHDetailWHfromCSIDetail(WHfromCSIDetail));

@implementSkuLedger(WHfromCSI, sku, warehouse);
quantityInLIFOSkuLedger (ledger) += quantityWHfromCSIDetail(ledger);
limitInLIFOSkuLedgerBatch (ledger, batch) += quantityWHfromCSIDetail(ledger) AND batch == declarationDetailCStoWHDetail(CStoWHDetailWHfromCSIDetail(ledger));
sumInSkuLedger(ledger) += sumWHfromCSIDetail(ledger);

nameCategoryArticleSkuWHfromCSIDetail 'Номенклатурная группа' (WHfromCSIDetail) = nameCategoryArticleSku(skuWHfromCSIDetail(WHfromCSIDetail));
nameUnitOfMeasureArticleSkuWHfromCSIDetail 'Ед. измерения товара' (WHfromCSIDetail) = nameUnitOfMeasureArticleSku(skuWHfromCSIDetail(WHfromCSIDetail));
barcodeFreightUnitWHfromCSIDetail 'Штрих-код короба' (WHfromCSIDetail) = barcode(freightUnitCStoWHDetail(CStoWHDetailWHfromCSIDetail(WHfromCSIDetail)));

CLASS WHfromCSR 'Приемка на склад с СВХ' : historyObject;
CLASS WHfromCSRPosted 'Закрытая приемка на склад с СВХ' : WHfromCSR, postedObject;
CLASS WHfromCSRDetail 'Строка приемки на склад с СВХ';

@defineDocument(WHfromCSR);

WHfromCSIWHfromCSR = DATA WHfromCSI (WHfromCSR);
WHfromCSRWHfromCSI(WHfrom) = GROUP UNIQUE WHfromCSR BY WHfromCSIWHfromCSR(WHfromCSR) WHERE WHfromCSR IS WHfromCSR;

WHfromCSIWHfromCSRDetail (WHfromCSRDetail) = WHfromCSIWHfromCSR(WHfromCSRWHfromCSRDetail(WHfromCSRDetail));

@defineDocumentAggregationHeaderStock(WHfromCSI, WHfromCSR, warehouse, 'Оптовый склад');

@defineDocumentPosted(WHfromCSR);

@defineDocumentAggregationHeaderNumberCustom(WHfromCSI, WHfromCSR, WHfromCSI);

@defineDocumentDetailSku(WHfromCSR, sku);

@defineDocumentDetailQuantity(WHfromCSR);

@defineAddDetailDialogSkuStock(WHfromCSR, sku, warehouse, dialogSku);
@defineAddDetailDialogBarcode(WHfromCSR, sku);

@defineDocumentHeaderQuantity(WHfromCSR);
@defineDocumentHeaderSkuQuantity(WHfromCSR, sku);

@defineDocumentDetailSkuArticle(WHfromCSR);

//для учета по коробам
freightUnitWHfromCSRDetail 'Короб (ИД)' (WHfromCSRDetail) = DATA freightUnit(WHfromCSRDetail);
barcodeFreightUnitWHfromCSRDetail 'Короб' (WHfromCSRDetail) = barcode (freightUnitWHfromCSRDetail(WHfromCSRDetail));

quantityWHfromCSRDetailsSkuFreightUnit 'Количество принятое (в коробе)' (sku, freightUnit, WHfromCSR) =
    GROUP SUM quantityWHfromCSRDetail(WHfromCSRDetail)
    BY skuWHfromCSRDetail(WHfromCSRDetail), freightUnitWHfromCSRDetail(WHfromCSRDetail), WHfromCSRWHfromCSRDetail(WHfromCSRDetail);

isNotShippedSkuFreightUnitWHfromCSR (sku, freightUnit, WHfromCSR) = quantitySkuFreightUnitCStoWH (sku, freightUnit, CStoWHWHfromCSI(WHfromCSIWHfromCSR(WHfromCSR)))
    AND NOT quantityWHfromCSRDetailsSkuFreightUnit(sku, freightUnit, WHfromCSR);

//приемка по коробам

currentFreightUnit 'Тек. короб (ИД)' (WHfromCSR) = SESSION DATA freightUnit (WHfromCSR);
barcodeCurrentFreightUnit 'Тек. короб (штрих-код)' (WHfromCSR) = barcode(currentFreightUnit(WHfromCSR));

withOutBarcodeSku (sku) = sku IS RomanLogicsModule.item AND NOT barcode(sku);

destinationWHfromCSRDetail (WHfromCSRDetail) = destinationFreightBox(freightUnitWHfromCSRDetail(WHfromCSRDetail));
nameDestinationWHfromCSRDetail 'Пункт назначения' (WHfromCSRDetail) = nameDestinationFreightBox(freightUnitWHfromCSRDetail(WHfromCSRDetail));

quantitySkuStoreWHfromCSI (store, WHfromCSI) = GROUP SUM quantityWHfromCSRDetail(WHfromCSRDetail)
                                               BY destinationWHfromCSRDetail(WHfromCSRDetail),
                                                  WHfromCSIWHfromCSR(WHfromCSRWHfromCSRDetail(WHfromCSRDetail));

innerOrderStoreWHfromCSI (store, WHfromCSI) = DATA innerOrder (RomanLogicsModule.store, WHfromCSI);

createInnerOrderStoreWHfromCSI 'Создать внутренний заказ' = [ACTION (store, WHfromCSI) NEWSESSION {

    ADDOBJ innerOrder;
    FOR i == addedObject() DO {
        SET innerOrderStoreWHfromCSI(store, WHfromCSI) <- i AS innerOrder;
        SET stockInnerOrder(i) <- warehouseWHfromCSI(WHfromCSI);
        SET destinationStockInnerOrder(i) <- primaryDepartmentStoreStore(store AS RomanLogicsModule.store);
        ADDOBJ orderPickingPosted;
        FOR p == addedObject() DO {
            SET innerOrderOrderPicking (p) <- i AS innerOrder;
            FOR WHfromCSIWHfromCSR(WHfromCSRWHfromCSRDetail(WHfromCSRDetail)) == WHfromCSI DO {
                ADDOBJ innerOrderDetail;
                FOR d == addedObject() DO {
                    SET skuInnerOrderDetail(d) <- skuWHfromCSRDetail(WHfromCSRDetail);
                    SET innerOrderInnerOrderDetail(d) <- i AS innerOrder;
                    SET quantityInnerOrderDetail(d) <- quantityWHfromCSRDetail(WHfromCSRDetail);
                    ADDOBJ orderPickingDetail;
                    FOR pd == addedObject() DO {
                        SET skuOrderPickingDetail(pd) <- skuWHfromCSRDetail(WHfromCSRDetail);
                        SET orderPickingOrderPickingDetail(pd) <- p AS orderPickingPosted;
                        SET quantityOrderPickingDetail(pd) <- quantityWHfromCSRDetail(WHfromCSRDetail);
                    }
                }
            }
        }
    }
    EXEC apply();
}] (store, WHfromCSI) AND NOT innerOrderStoreWHfromCSI(store, WHfromCSI);

FORM addBarcodeWHfromCSRFreightUnitSku 'Поиск товара(с коробами и выбором шрих-кода)'

    OBJECTS w = WHfromCSR

    OBJECTS f = freightUnit FIXED PANEL
    PROPERTIES(f) READONLY sidSupplierBox, barcode

    OBJECTS s = RomanLogicsModule.item
    PROPERTIES(s) READONLY sidArticleSku, barcode, sidColorSupplierItem, nameColorSupplierItem, sidSizeSupplierItem

    FILTERS quantitySkuCStoWH (s, CStoWHWHfromCSI(WHfromCSIWHfromCSR(w))) > 0

    FILTERGROUP filters1
        FILTER 'Товар без шрих-кода' 'F9' withOutBarcodeSku(s) DEFAULT

    FILTERGROUP filters2
        FILTER 'Только из текущего короба' 'F10' quantitySkuFreightUnitCStoWH(s, f, CStoWHWHfromCSI(WHfromCSIWHfromCSR(w))) > 0

;

DESIGN addBarcodeWHfromCSRFreightUnitSku FROM DEFAULT {

    f.box{
        caption = 'Короб';
    }
}

FORM addBarcodeWHfromCSRSku 'Поиск товара(с выбором шрих-кода)'

    OBJECTS w = WHfromCSR

    OBJECTS s = RomanLogicsModule.item
    PROPERTIES(s) READONLY sidArticleSku, barcode, sidColorSupplierItem, nameColorSupplierItem, sidSizeSupplierItem

    FILTERS quantitySkuCStoWH (s, CStoWHWHfromCSI(WHfromCSIWHfromCSR(w))) > 0

    FILTERGROUP filters1
        FILTER 'Товар без шрих-кода' 'F9' withOutBarcodeSku(s) DEFAULT

;

FORM addSkuWHfromCSR 'Ввод товара'

    OBJECTS i = RomanLogicsModule.item FIXED PANEL
    PROPERTIES(i) READONLY barcode
    PROPERTIES(i) sidArticleSku, sidColorSupplierItem, nameColorSupplierItem, sidSizeSupplierItem

;

DESIGN addSkuWHfromCSR FROM DEFAULT {

    i.box{
        caption = 'Свойства нового товара';
        childConstraints = TO THE BOTTOM;
        ADD PROPERTY(sidArticleSku);
        ADD PROPERTY(sidColorSupplierItem);
        ADD PROPERTY(nameColorSupplierItem);
        ADD PROPERTY(sidSizeSupplierItem);
    }
}

createSkuWHfromCSR = ACTION (barcode) NEWSESSION {

    ADDOBJ RomanLogicsModule.item;
    FOR s == addedObject() DO {
        SET barcode(s) <- (barcode AS STRING[14]);
        FORM addSkuWHfromCSR OBJECTS i = s MODAL;
        IF formResult() == formResult.ok THEN {
            EXEC apply();
        }
    }
}

addDialogSkuFreightUnitBarcode 'Ввод штрих-кода' (WHfromCSR) = ACTION (WHfromCSR) {

    LOCAL selectedBarcode = STRING[14] ();
    LOCAL dialogBarcodeSku = sku();
    LOCAL dialogBarcodeDetail = WHfromCSRDetail();

    FORM barcodeInput MODAL;

    IF formResult() == formResult.ok THEN {

        SET selectedBarcode() <- chosenString('barcode');

        IF barcodeToObject(selectedBarcode()) IS freightUnit THEN {
            SET currentFreightUnit (WHfromCSR) <- barcodeToObject(selectedBarcode());
        } ELSE {

            SET dialogBarcodeSku() <- skuBarcodeIdDate(selectedBarcode(), dateWHfromCSR (WHfromCSR));
            SET dialogBarcodeDetail() <- detailWHfromCSRSku(WHfromCSR, dialogBarcodeSku());

            IF selectedBarcode() IS STRING[14] AND NOT dialogBarcodeSku() IS sku THEN {

                IF currentFreightUnit(WHfromCSR) THEN {
                    FORM addBarcodeWHfromCSRFreightUnitSku OBJECTS f = currentFreightUnit(WHfromCSR), w = WHfromCSR MODAL;
                } ELSE {
                    FORM addBarcodeWHfromCSRSku OBJECTS w = WHfromCSR MODAL;
                }
                IF formResult() == formResult.ok THEN {
                    SET barcode(sku) IF sku == chosenObject('s') <- selectedBarcode();
                    SET dialogBarcodeSku() <- chosenObject('s');
                } ELSE {
                    EXEC createSkuWHfromCSR(selectedBarcode());
                    SET dialogBarcodeSku() <- skuBarcodeIdDate(selectedBarcode(), dateWHfromCSR (WHfromCSR));
                }
            }

            IF dialogBarcodeSku() IS sku THEN {

                IF dialogBarcodeDetail() IS WHfromCSRDetail THEN {
                    SET quantityWHfromCSRDetail(detail) IF detail == dialogBarcodeDetail() <-
                        quantityWHfromCSRDetail(detail) (+) (1.0 IF detail IS WHfromCSRDetail);
                    } ELSE {

                        ADDOBJ WHfromCSRDetail;
                        FOR w == addedObject() DO {
                            SET WHfromCSRWHfromCSRDetail(w) <- WHfromCSR AS WHfromCSR;
                            SET skuWHfromCSRDetail(w) <- dialogBarcodeSku();
                            SET freightUnitWHfromCSRDetail(w) <- currentFreightUnit(WHfromCSR);
                            SET quantityWHfromCSRDetail(w) <- 1.0;
                        }
                    }
            }
        }
    }
} TOOLBAR EDITKEY 'F4';

fillWHfromCSRDetailsSkuFreightUnit 'Заполнить строки из короба' (WHfromCSR) = ACTION (WHfromCSR) {
    FOR isNotShippedSkuFreightUnitWHfromCSR (sku AS sku, currentFreightUnit(WHfromCSR), WHfromCSR AS WHfromCSR) DO {
        ADDOBJ WHfromCSRDetail;
        FOR w == addedObject() DO {
            SET WHfromCSRWHfromCSRDetail(w) <- WHfromCSR AS WHfromCSR;
            SET skuWHfromCSRDetail (w) <- sku AS sku;
            SET quantityWHfromCSRDetail (w) <- quantitySkuFreightUnitCStoWH (sku AS sku, currentFreightUnit(WHfromCSR), CStoWHWHfromCSI(WHfromCSIWHfromCSR(WHfromCSR)));
            SET freightUnitWHfromCSRDetail(w) <- currentFreightUnit(WHfromCSR);
        }
    }
} EDITKEY 'F5' CONFIRM;

shouldBePrintWHfromCSR = SESSION DATA BOOLEAN (sku);
countSku = SESSION DATA INTEGER (sku);

priceBaseWHfromCSRDateTimeSku 'Цена' (sku, dateTime) = priceBasePriceSetDocumentArticleDateTime(articleSku(sku), dateTime);
priceDiscountWHfromCSRDateTimeSku 'Цена скидочная' (sku, dateTime) = priceDiscountPriceSetDocumentArticleDateTime(articleSku(sku), dateTime);

quantityWHfromCSRFreightUnitSku (WHfromCSR, freightUnit, sku) = quantityCStoWHFreightUnitSku(CStoWHWHfromCSI(WHfromCSIWHfromCSR(WHfromCSR)), freightUnit, sku);

quantityPositionsSkuInWHFromCSRFreightUnit 'Кол-во позиций в коробе' (WHfromCSR, freightUnit) =
    GROUP SUM 1 IF quantityWHfromCSRFreightUnitSku(WHfromCSR, freightUnit, sku) BY WHfromCSR, freightUnit;
quantityPositionsSkuInFreightUnitWHfromCSR 'Кол-во позиций в коробе' (WHfromCSR) = quantityPositionsSkuInWHFromCSRFreightUnit(WHfromCSR, currentFreightUnit(WHfromCSR));

quantitySkuInWHFromCSRFreightUnit 'Кол-во товара в коробе' (WHfromCSR, freightUnit) =
    GROUP SUM quantityWHfromCSRFreightUnitSku(WHfromCSR, freightUnit, sku) BY WHfromCSR, freightUnit;
quantitySkuInFreightUnitWHfromCSR 'Кол-во товара в коробе' (WHfromCSR) = quantitySkuInWHFromCSRFreightUnit(WHfromCSR, currentFreightUnit(WHfromCSR));

quantityPositionsSkuWHfromCSRFreightUnit 'Кол-во позиций в документе' (WHfromCSR, freightUnit) =
    GROUP SUM 1 IF quantityWHfromCSRDetail(WHfromCSRDetail) BY WHfromCSRWHfromCSRDetail(WHfromCSRDetail), freightUnitWHfromCSRDetail(WHfromCSRDetail);
quantityPositionsSkuWHfromCSR 'Кол-во позиций в документе' (WHfromCSR) =
    quantityPositionsSkuWHfromCSRFreightUnit(WHfromCSR, currentFreightUnit(WHfromCSR));

quantitySkuWHfromCSRFreightUnit 'Кол-во товара в документе' (WHfromCSR, freightUnit) =
    GROUP SUM quantityWHfromCSRDetail(WHfromCSRDetail) BY WHfromCSRWHfromCSRDetail(WHfromCSRDetail), freightUnitWHfromCSRDetail(WHfromCSRDetail);
quantitySkuWHfromCSR 'Кол-во товара в документе' (WHfromCSR) =
    quantitySkuWHfromCSRFreightUnit(WHfromCSR, currentFreightUnit(WHfromCSR));

quantityRemainedPositionSkuWHfromCSR 'Кол-во оставшихся позиций в коробе' (WHfromCSR) =
    UNION OVERRIDE 0 AND WHfromCSR, quantityPositionsSkuInFreightUnitWHfromCSR(WHfromCSR) (-) quantityPositionsSkuWHfromCSR(WHfromCSR);

quantityRemainedSkuWHfromCSR 'Кол-во оставшегося товара в коробе' (WHfromCSR) =
    UNION OVERRIDE 0 AND WHfromCSR, quantitySkuInFreightUnitWHfromCSR(WHfromCSR) (-) quantitySkuWHfromCSR(WHfromCSR);

quantitySkuInWHfromCSR 'Кол-во товара' (WHfromCSR, sku) = GROUP SUM quantityWHfromCSRDetail(WHfromCSRDetail)
    BY WHfromCSRWHfromCSRDetail(WHfromCSRDetail), skuWHfromCSRDetail(WHfromCSRDetail);

CONSTRAINT currentFreightUnit(WHfromCSR) IS freightUnit AND NOT quantitySkuInFreightUnitWHfromCSR(WHfromCSR) CHECKED BY currentFreightUnit MESSAGE 'Короб должен быть из текущей поставки';

FORM printMarksWHfromCSR 'Печать маркировок товара' PRINT

    OBJECTS dt = DATETIME FIXED PANEL
    PROPERTIES(dt) OBJVALUE

    OBJECTS s = sku
    PROPERTIES(s) READONLY sidArticleSku, nameCommonSizeSku, sidGenderArticleSku, nameCategoryArticleSku,
                           mainCompositionSku, nameCountryBrandSupplier, nameBrandSupplierArticleSku,
                           barcode, nameCountrySku, nameColorSupplierItem, nameSupplierArticleSku, countSku

    PROPERTIES(s, dt)      priceBaseWHfromCSRDateTimeSku, priceDiscountWHfromCSRDateTimeSku

    FILTERS shouldBePrintWHfromCSR(s)
;

printMarksSkuFreightUnit 'Печать маркировок товаров' (WHfromCSR) = ACTION (WHfromCSR) {

    SET shouldBePrintWHfromCSR(sku) <- NULL;
    SET countSku(sku) <- NULL;
    SET shouldBePrintWHfromCSR(sku) <- TRUE IF quantitySkuFreightUnitCStoWH(sku, currentFreightUnit(WHfromCSR), CStoWHWHfromCSI(WHfromCSIWHfromCSR(WHfromCSR)));
    SET countSku(sku) <- castToInteger(quantitySkuFreightUnitCStoWH(sku, currentFreightUnit(WHfromCSR), CStoWHWHfromCSI(WHfromCSIWHfromCSR(WHfromCSR))));
    FORM printMarksWHfromCSR OBJECTS dt = dateTimeWHfromCSR(WHfromCSR) MODAL;

} CONFIRM;

printMarksSkuWHfromCSR 'Печать маркировок товаров' (WHfromCSR) = ACTION (WHfromCSR) {

    SET shouldBePrintWHfromCSR(sku) <- NULL;
    SET countSku(sku) <- NULL;
    SET shouldBePrintWHfromCSR(sku) <- TRUE IF quantitySkuInWHfromCSR(WHfromCSR, sku);
    SET countSku(sku) <- castToInteger(quantitySkuInWHfromCSR(WHfromCSR, sku));
    FORM printMarksWHfromCSR OBJECTS dt = dateTimeWHfromCSR(WHfromCSR) MODAL;

} CONFIRM TOOLBAR;

// Атрибуты поставщика

originalNameArticleSkuWHfromCSRDetail 'Наименование(ориг.)' (WHfromCSRDetail) = originalNameArticleSku(skuWHfromCSRDetail(WHfromCSRDetail));
nameCountryOfOriginArticleSkuWHfromCSRDetail 'Страна происхождения' (WHfromCSRDetail) = nameCountryOfOriginArticleSku(skuWHfromCSRDetail(WHfromCSRDetail));
nameBrandSupplierArticleSkuWHfromCSRDetail 'Бренд' (WHfromCSRDetail) = nameBrandSupplierArticleSku(skuWHfromCSRDetail(WHfromCSRDetail));
netWeightArticleSkuWHfromCSRDetail 'Весс нетто(ориг.)' (WHfromCSRDetail) = netWeightArticleSku(skuWHfromCSRDetail(WHfromCSRDetail));
mainCompositionOriginArticleSkuWHfromCSRDetail 'Состав(ориг.)' (WHfromCSRDetail) = mainCompositionOriginArticleSku(skuWHfromCSRDetail(WHfromCSRDetail));

// Внутренние атрибуты

sidGenderArticleSkuWHfromCSRDetail 'Пол товара' (WHfromCSRDetail) = sidGenderArticleSku(skuWHfromCSRDetail(WHfromCSRDetail));

nameCategoryArticleSkuWHfromCSRDetail 'Номенклатурная группа' (WHfromCSRDetail) = nameCategoryArticleSku(skuWHfromCSRDetail(WHfromCSRDetail));
changeNameCategoryArticleSkuWHfromCSRDetail = ACTION (WHfromCSRDetail) {
    MESSAGE 'Change';
    REQUEST OBJECT c FORM categories MODAL;
    IF formResult() == formResult.ok THEN {
        SET categoryArticle(article) IF article == articleSku(skuWHfromCSRDetail(WHfromCSRDetail)) <- chosenObject('c');
    }
}

nameTypeFabricArticleSkuWHfromCSRDetail 'Тип одежды' (WHfromCSRDetail) = nameTypeFabricArticleSku(skuWHfromCSRDetail(WHfromCSRDetail));
nameUnitOfMeasureArticleSkuWHfromCSRDetail 'Ед. измерения товара' (WHfromCSRDetail) = nameUnitOfMeasureArticleSku(skuWHfromCSRDetail(WHfromCSRDetail));
netWeightSkuWHfromCSRDetail 'Весс нетто(ед.)' (WHfromCSRDetail) = netWeightSku(skuWHfromCSRDetail(WHfromCSRDetail));
nameCountryOfOriginSkuWHfromCSRDetail 'Страна происхождения' (WHfromCSRDetail) = nameCountryOfOriginSku(skuWHfromCSRDetail(WHfromCSRDetail));
mainCompositionOriginSkuWHfromCSRDetail 'Состав' (WHfromCSRDetail) = mainCompositionOriginSku(skuWHfromCSRDetail(WHfromCSRDetail));
additionalCompositionOriginSkuWHfromCSRDetail 'Дополнительный состав' (WHfromCSRDetail) = additionalCompositionOriginSku(skuWHfromCSRDetail(WHfromCSRDetail));
coefficientArticleSkuWHfromCSRDetail 'Кол-во в комплекте' (WHfromCSRDetail) = coefficientArticleSku(skuWHfromCSRDetail(WHfromCSRDetail));

backgroundWHfromCSRDetail 'Цвет' (WHfromCSRDetail) = RGB(255, 128, 128) IF quantityWHfromCSRDetail(WHfromCSRDetail) == 1;

FORM WHfromCSR 'Приемка на оптовый склад'

    OBJECTS w = WHfromCSR FIXED PANEL, d = WHfromCSRDetail

    PROPERTIES(w)          numberObject, seriesObject, dateWHfromCSR, timeWHfromCSR, nameWarehouseWHfromCSR,
                           barcodeCurrentFreightUnit, fillWHfromCSRDetailsSkuFreightUnit, printMarksSkuFreightUnit,
                           printMarksSkuWHfromCSR TODRAW d FORCE PANEL
    PROPERTIES(w) READONLY quantityRemainedPositionSkuWHfromCSR SHOWIF barcodeCurrentFreightUnit(w),
                           quantityRemainedSkuWHfromCSR SHOWIF barcodeCurrentFreightUnit(w)

    PROPERTIES(d) READONLY indexWHfromCSRDetail, barcodeWHfromCSRDetail, nameCategoryArticleSkuWHfromCSRDetail,
                           nameBrandWHfromCSRDetail, sidArticleWHfromCSRDetail, sidSizeWHfromCSRDetail,
                           sidColorWHfromCSRDetail, nameColorWHfromCSRDetail, barcodeFreightUnitWHfromCSRDetail,
                           nameDestinationWHfromCSRDetail

    PROPERTIES(d) quantityWHfromCSRDetail

    PROPERTIES(d) READONLY nameUnitOfMeasureArticleSkuWHfromCSRDetail

    PROPERTIES(d) delete

    PROPERTIES(w) TODRAW d addDialogSkuFreightUnitBarcode, deleteWHfromCSRDetailWHfromCSR

    PROPERTIES(d) READONLY FORCE PANEL originalNameArticleSkuWHfromCSRDetail, nameCountryOfOriginArticleSkuWHfromCSRDetail,
                                       nameBrandSupplierArticleSkuWHfromCSRDetail, netWeightArticleSkuWHfromCSRDetail,
                                       mainCompositionOriginArticleSkuWHfromCSRDetail

    PROPERTIES(d) FORCE PANEL sidGenderArticleSkuWHfromCSRDetail BACKGROUND backgroundWHfromCSRDetail(d),
                              c = nameCategoryArticleSkuWHfromCSRDetail BACKGROUND backgroundWHfromCSRDetail(d) ON CHANGE EXEC changeNameCategoryArticleSkuWHfromCSRDetail(d),
                              nameTypeFabricArticleSkuWHfromCSRDetail BACKGROUND backgroundWHfromCSRDetail(d),
                              u = nameUnitOfMeasureArticleSkuWHfromCSRDetail BACKGROUND backgroundWHfromCSRDetail(d),
                              netWeightSkuWHfromCSRDetail BACKGROUND backgroundWHfromCSRDetail(d),
                              nameCountryOfOriginSkuWHfromCSRDetail BACKGROUND backgroundWHfromCSRDetail(d),
                              mainCompositionOriginSkuWHfromCSRDetail BACKGROUND backgroundWHfromCSRDetail(d),
                              additionalCompositionOriginSkuWHfromCSRDetail BACKGROUND backgroundWHfromCSRDetail(d),
                              coefficientArticleSkuWHfromCSRDetail BACKGROUND backgroundWHfromCSRDetail(d)

    FILTERS inWHfromCSRWHfromCSRDetail(w, d)

    FILTERGROUP filtersQuantity
        FILTER 'Показывать принятые' 'F9' quantityWHfromCSRDetail(d) DEFAULT

//    FILTERGROUP filtersDiff
//        FILTER 'Показывать отличающиеся' 'F10' diffQuantityWHfromCSRDetail(d)

    EDIT WHfromCSR OBJECT w
;

DESIGN WHfromCSR FROM DEFAULT {

    main {

        NEW top {
            childConstraints =  TO THE BOTTOM;

            w.box{
                NEW head{
                    caption = 'Шапка документа';
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateWHfromCSR);
                    ADD PROPERTY(timeWHfromCSR);
                    ADD PROPERTY(nameWarehouseWHfromCSR);
                }

                NEW freightUnit{
                    caption = 'Короб';
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(quantityRemainedPositionSkuWHfromCSR);
                    ADD PROPERTY(quantityRemainedSkuWHfromCSR);
                    ADD PROPERTY(barcodeCurrentFreightUnit);
                    ADD PROPERTY(fillWHfromCSRDetailsSkuFreightUnit);
                    ADD PROPERTY(printMarksSkuFreightUnit);
                }
            }
        }

        preferredSize = (1024, 768);
        NEW firstCase {
            caption = 'Атрибуты поставщика';
            ADD PROPERTY(originalNameArticleSkuWHfromCSRDetail);
            ADD PROPERTY(nameCountryOfOriginArticleSkuWHfromCSRDetail);
            ADD PROPERTY(nameBrandSupplierArticleSkuWHfromCSRDetail);
            ADD PROPERTY(netWeightArticleSkuWHfromCSRDetail);
            ADD PROPERTY(mainCompositionOriginArticleSkuWHfromCSRDetail);
        }

        NEW secondCase {
            caption = 'Внутренние атрибуты';
            ADD PROPERTY(sidGenderArticleSkuWHfromCSRDetail);
            ADD PROPERTY(c);
            ADD PROPERTY(nameTypeFabricArticleSkuWHfromCSRDetail);
            ADD PROPERTY(u);
            ADD PROPERTY(netWeightSkuWHfromCSRDetail);
            ADD PROPERTY(nameCountryOfOriginSkuWHfromCSRDetail);
            ADD PROPERTY(mainCompositionOriginSkuWHfromCSRDetail);
            ADD PROPERTY(additionalCompositionOriginSkuWHfromCSRDetail);
            ADD PROPERTY(coefficientArticleSkuWHfromCSRDetail);
        }

        ADD functions.box;
    }
}

// прием приемки)

receiveWHfromCSI 'Принять' (WHfromCSI) = ACTION (WHfromCSI) NEWSESSION {
    IF WHfromCSRWHfromCSI(WHfromCSI) IS WHfromCSR THEN {
        FOR r == WHfromCSRWHfromCSI(WHfromCSI) DO {
            IF r IS WHfromCSRPosted THEN {
                CHANGECLASS r TO WHfromCSR;
            }
            FORM WHfromCSR OBJECTS w = r MODAL;
        }
    } ELSE {
        ADDOBJ WHfromCSR;
        FOR t == addedObject() DO {
            SET WHfromCSIWHfromCSR (t) <- WHfromCSI AS WHfromCSI;
            FORM WHfromCSR OBJECTS w = t MODAL;
        }
    }
    IF formResult() == formResult.ok THEN EXEC apply();
} TOOLBAR;

postRecWHfromCSI 'Пометить как принятое' (WHfromCSI) = postWHfromCSR(WHfromCSRWHfromCSI(WHfromCSI)) TOOLBAR;
isDraftRecWHfromCSI (WHfromCSI) = isDraftWHfromCSR(WHfromCSRWHfromCSI(WHfromCSI));

statusRecWHfromCSI 'Статус приемки' (WHfromCSI) =
    IF WHfromCSRWHfromCSI(WHfromCSI) IS WHfromCSRPosted THEN 'Принят' IF WHfromCSI IS WHfromCSI ELSE
    IF WHfromCSRWHfromCSI(WHfromCSI) IS WHfromCSR THEN 'Принимается' IF WHfromCSI IS WHfromCSI ELSE
    'Не принят' IF WHfromCSI IS WHfromCSI PREFCHARWIDTH 15 MINCHARWIDTH 15;

quantityWHfromCSRDetailWHfromCSI 'Кол-во принятое' (WHfromCSI) = quantityWHfromCSRDetailWHfromCSR(WHfromCSRWHfromCSI(WHfromCSI));

// Излишки / Недостачи

CLASS WHfromCSD 'Акт расхождений на приемке на склад с СВХ' : historyObject, numberedObject;
CLASS ABSTRACT WHfromCSDDetail 'Строка акта расхождений на приемке на склад с СВХ';

CLASS WHfromCSDEDetail 'Строка акта расхождений на приемке на склад с СВХ (излишек)' : batchB, WHfromCSDDetail;
CLASS WHfromCSDSDetail 'Строка акта расхождений на приемке на склад с СВХ (недостача)' : outFIFOSkuLedger, WHfromCSDDetail;
TABLE WHfromCSDEDetail (WHfromCSDEDetail);
TABLE WHfromCSDSDetail (WHfromCSDSDetail);

diffSkuWHfromCSR(sku, WHfromCSR) = (quantityWHfromCSRDetailSkuWHfromCSR(sku, WHfromCSR) (-)
                                            quantityWHfromCSIDetailSkuWHfromCSI(sku, WHfromCSIWHfromCSR(WHfromCSR)))
                                            AND isPostedWHfromCSR(WHfromCSR);

hasDiffSkuWHfromCSR(sku, WHfromCSR) = diffSkuWHfromCSR(sku, WHfromCSR) != 0;

countDiffWHfromCSR 'Расхождение (позиции)' (WHfromCSR) = GROUP SUM 1 IF hasDiffSkuWHfromCSR(sku, WHfromCSR) BY WHfromCSR;
quantityDiffWHfromCSR 'Расхождение (кол-во)' (WHfromCSR) = GROUP SUM diffSkuWHfromCSR(sku, WHfromCSR) BY WHfromCSR;

countDiffWHfromCSI 'Расхождение (позиции)' (WHfromCSI) = countDiffWHfromCSR(WHfromCSRWHfromCSI(WHfromCSI));
quantityDiffWHfromCSI 'Расхождение (кол-во)' (WHfromCSI) = quantityDiffWHfromCSR(WHfromCSRWHfromCSI(WHfromCSI));

hasShortageSkuWHfromCSR(sku, WHfromCSR) = diffSkuWHfromCSR(sku, WHfromCSR) < 0;
hasExcessSkuWHfromCSR(sku, WHfromCSR) = diffSkuWHfromCSR(sku, WHfromCSR) > 0;

// Непосредственное определение самого документа

@defineDocumentTables(WHfromCSD);

@defineAggregation(WHfromCSR, WHfromCSD, countDiffWHfromCSR);

@defineAggregationDouble(sku, WHfromCSR, WHfromCSDEDetail, hasExcessSkuWHfromCSR);
quantityWHfromCSDEDetail 'Кол-во' (WHfromCSDDetail) = diffSkuWHfromCSR(skuWHfromCSDEDetail(WHfromCSDDetail),
                                                                       WHfromCSRWHfromCSDEDetail(WHfromCSDDetail)) PERSISTENT;

@defineAggregationDouble(sku, WHfromCSR, WHfromCSDSDetail, hasShortageSkuWHfromCSR);
quantityWHfromCSDSDetail 'Кол-во' (WHfromCSDDetail) = -diffSkuWHfromCSR(skuWHfromCSDSDetail(WHfromCSDDetail),
                                                                       WHfromCSRWHfromCSDSDetail(WHfromCSDDetail)) PERSISTENT;

WHfromCSRWHfromCSDDetail (WHfromCSDDetail) = UNION EXCLUSIVE WHfromCSRWHfromCSDEDetail(WHfromCSDDetail), WHfromCSRWHfromCSDSDetail(WHfromCSDDetail) PERSISTENT;
WHfromCSIWHfromCSDDetail (WHfromCSDDetail) = WHfromCSIWHfromCSR(WHfromCSRWHfromCSDDetail(WHfromCSDDetail));
WHfromCSDWHfromCSDDetail (WHfromCSDDetail) = WHfromCSDWHfromCSR(WHfromCSRWHfromCSDDetail(WHfromCSDDetail));

WHfromCSIWHfromCSDSDetail (WHfromCSDDetail) = WHfromCSIWHfromCSR(WHfromCSRWHfromCSDSDetail(WHfromCSDDetail));

WHfromCSDWHfromCSDEDetail (WHfromCSDDetail) = WHfromCSDWHfromCSR(WHfromCSRWHfromCSDEDetail(WHfromCSDDetail));
WHfromCSDWHfromCSDSDetail (WHfromCSDDetail) = WHfromCSDWHfromCSR(WHfromCSRWHfromCSDSDetail(WHfromCSDDetail));

@defineDocumentAggregationHeaderTime(WHfromCSR, WHfromCSD);
@defineDocumentDetailTimeCustom(WHfromCSD, WHfromCSDEDetail);
@defineDocumentDetailTimeCustom(WHfromCSD, WHfromCSDSDetail);

@defineDocumentAggregationHeaderNumberCustom(WHfromCSR, WHfromCSD, WHfromCSR);

@defineDocumentHeaderDescriptionCustom(WHfromCSD, seriesNumberWHfromCSD, 'Акт расхождений на приемке на склад с СВХ');
@defineDocumentDetailDescriptionCustom(WHfromCSD, WHfromCSDEDetail);
@defineDocumentDetailDescriptionCustom(WHfromCSD, WHfromCSDSDetail);

@defineDocumentAggregationHeaderStock(WHfromCSR, WHfromCSD, warehouse, 'Оптовый склад');
@defineDocumentDetailStockCustom(WHfromCSD, WHfromCSDEDetail, warehouse, 'Оптовый склад');
@defineDocumentDetailStockCustom(WHfromCSD, WHfromCSDSDetail, warehouse, 'Оптовый склад');

@defineDocumentAggregationHeaderPosted(WHfromCSR, WHfromCSD);
@defineDocumentDetailPostedCustom(WHfromCSD, WHfromCSDEDetail);
@defineDocumentDetailPostedCustom(WHfromCSD, WHfromCSDSDetail);

skuWHfromCSDDetail (WHfromCSDDetail) = UNION EXCLUSIVE skuWHfromCSDEDetail(WHfromCSDDetail), skuWHfromCSDSDetail(WHfromCSDDetail) PERSISTENT;
quantityWHfromCSDDetail 'Кол-во' (WHfromCSDDetail) = UNION EXCLUSIVE quantityWHfromCSDEDetail(WHfromCSDDetail), quantityWHfromCSDSDetail(WHfromCSDDetail) PERSISTENT;
signedQuantityWHfromCSDDetail 'Кол-во' (WHfromCSDDetail) = UNION EXCLUSIVE quantityWHfromCSDEDetail(WHfromCSDDetail), -quantityWHfromCSDSDetail(WHfromCSDDetail) PERSISTENT;

@defineDocumentDetailIndex(WHfromCSD);

@defineDocumentDetailSkuArticle(WHfromCSD);

costWHfromCSDEDetail(WHfromCSDDetail) = 0.0 IF WHfromCSDDetail IS WHfromCSDEDetail;
@implementBatch(WHfromCSDE, sku, warehouse, cost);
quantityBatch (batch) += quantityWHfromCSDEDetail(batch);
skipASkuLedger (ledger) += ledger IS WHfromCSDEDetail;

@implementSkuLedger(WHfromCSDS, sku, warehouse);
quantityOutFIFOSkuLedger (ledger) += quantityWHfromCSDSDetail(ledger);
limitOutFIFOSkuLedgerBatch (ledger, batch) += costWHfromCSIBatch(WHfromCSIWHfromCSDSDetail(ledger), batch);
orderOutFIFOSkuLedgerBatch (ledger, batch) += orderBBatch(batch) IF ledger IS WHfromCSDSDetail;

skipASkuLedger (ledger) += ledger IS WHfromCSDSDetail;

// Внутренние аттрибуты

nameCategoryArticleSkuWHfromCSDDetail 'Номенклатурная группа' (WHfromCSDDetail) = nameCategoryArticleSku(skuWHfromCSDDetail(WHfromCSDDetail));
nameUnitOfMeasureArticleSkuWHfromCSDDetail 'Ед. измерения товара' (WHfromCSDDetail) = nameUnitOfMeasureArticleSku(skuWHfromCSDDetail(WHfromCSDDetail));

FORM WHfromCSIs 'Поступления товара с СВХ'
    OBJECTS w = WHfromCSI
    PROPERTIES (w) READONLY isPostedWHfromCSI FORCE GRID, numberWHfromCSI, seriesWHfromCSI, dateWHfromCSI, timeWHfromCSI,
                            nameWarehouseWHfromCSI, nameCustomStoreWHfromCSI, countWHfromCSIDetailWHfromCSI,
                            quantityWHfromCSIDetailWHfromCSI, quantityWHfromCSRDetailWHfromCSI,
                            statusRecWHfromCSI, countDiffWHfromCSI, quantityDiffWHfromCSI

    PROPERTIES(w) FORCE PANEL receiveWHfromCSI, postRecWHfromCSI SHOWIF isDraftRecWHfromCSI(w)

    PROPERTIES (w) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    OBJECTS di = WHfromCSIDetail
    PROPERTIES(di) READONLY indexWHfromCSIDetail, barcodeWHfromCSIDetail, nameCategoryArticleSkuWHfromCSIDetail,
                            nameBrandWHfromCSIDetail, sidArticleWHfromCSIDetail, sidSizeWHfromCSIDetail,
                            sidColorWHfromCSIDetail, nameColorWHfromCSIDetail, barcodeFreightUnitWHfromCSIDetail,
                            nameDestinationWHfromCSIDetail, quantityWHfromCSIDetail, nameUnitOfMeasureArticleSkuWHfromCSIDetail

    FILTERS WHfromCSIWHfromCSIDetail(di) == w

    OBJECTS dr = WHfromCSRDetail
    PROPERTIES(dr) READONLY indexWHfromCSRDetail, barcodeWHfromCSRDetail, nameCategoryArticleSkuWHfromCSRDetail,
                            nameBrandWHfromCSRDetail, sidArticleWHfromCSRDetail, sidSizeWHfromCSRDetail,
                            sidColorWHfromCSRDetail, nameColorWHfromCSRDetail, barcodeFreightUnitWHfromCSRDetail,
                            nameDestinationWHfromCSRDetail, quantityWHfromCSRDetail, nameUnitOfMeasureArticleSkuWHfromCSRDetail

    FILTERS WHfromCSIWHfromCSR(WHfromCSRWHfromCSRDetail(dr)) == w

    OBJECTS df = WHfromCSDDetail
    PROPERTIES (df) READONLY indexWHfromCSDDetail, barcodeWHfromCSDDetail, nameCategoryArticleSkuWHfromCSDDetail,
                             nameBrandWHfromCSDDetail, sidArticleWHfromCSDDetail, sidSizeWHfromCSDDetail,
                             sidColorWHfromCSDDetail, nameColorWHfromCSDDetail, //barcodeFreightUnitWHfromCSDDetail,
                             signedQuantityWHfromCSDDetail, nameUnitOfMeasureArticleSkuWHfromCSDDetail

    FILTERS WHfromCSIWHfromCSDDetail(df)==w

    OBJECTS s = RomanLogicsModule.store
    PROPERTIES(s) READONLY name
    PROPERTIES createInnerOrderStoreWHfromCSI(s, w)

    FILTERS quantitySkuStoreWHfromCSI(s, w) > 0

;

DESIGN WHfromCSIs FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD w.box;
        NEW docDetail{

            type = TABBED;
            ADD di.box {
               title = 'Спецификация';
            }

            NEW documentHistory {

                title = 'История';
                ADD w.historyGroup;
                ADD w.postedGroup;
            }

            ADD dr.box {
                title = 'Приемка';
            }

            ADD df.box {
                 title = 'Акт расхождений';
            }

            ADD s.box{
                title = 'Внутренние заказы';
            }
        }
    }

    ADD functions.box;
}
