MODULE WHfromCS;

REQUIRE System,

        Stock,
        Numerator,
        Document,
        RomanDocument,
        Consignment,
        CStoWH,
        Barcode,
        MasterData,
        RomanLogicsModule;

PRIORITY RomanLogicsModule, Stock;

// Приход на склад
CLASS WHfromCS 'Приход на склад' : historyObject, numberedObject;
CLASS WHfromCSPosted 'Закрытый приход с СВХ' : WHfromCS, postedObject;

CLASS WHfromCSDetail 'Строка прихода на склад' : inTransferSkuLedger;

//CLASS inWarehouseScan 'Сканирование';

//создание документа через метакод
skuWHfromCSDetail 'Товар (ИД)' (WHfromCSDetail) = DATA sku(WHfromCSDetail) IN idGroup;
@defineRBCorrespondingDocument(WHfromCS, warehouse, 'Оптовый склад', sku, 'Расход с СВХ', customStore, 'СВХ');
@defineUniqueDocumentComingByExpense(WHfromCS, CStoWH);

quantityInTransferSkuLedger (ledger) += quantityWHfromCSDetail(ledger);

initValueNumberObject (WHfromCS) += [PREV(numberObject(WHfromCS))](CStoWHWHfromCS(WHfromCS));
initValueSeriesObject (WHfromCS) += [PREV(seriesObject(WHfromCS))](CStoWHWHfromCS(WHfromCS));

initWhenNumberedObject(WHfromCS) += CHANGED(CStoWHWHfromCS(WHfromCS));

inCStoWHWHfromCS (WHfromCS, CStoWH) = CStoWHWHfromCS(WHfromCS) == CStoWH;

//для учета по коробам
freightUnitWHfromCSDetail 'Короб (ИД)' (WHfromCSDetail) = DATA freightUnit(WHfromCSDetail);
barcodeFreightUnitWHfromCSDetail 'Короб' (WHfromCSDetail) = barcode (freightUnitWHfromCSDetail(WHfromCSDetail));

quantityWHfromCSDetailsSkuFreightUnit 'Количество принятое' (sku, freightUnit, WHfromCS) =
    GROUP SUM quantityWHfromCSDetail(WHfromCSDetail)
    BY skuWHfromCSDetail(WHfromCSDetail), freightUnitWHfromCSDetail(WHfromCSDetail), WHfromCSWHfromCSDetail(WHfromCSDetail);

isNotShippedSkuFreightUnitWHfromCS (sku, freightUnit, WHfromCS) = quantitySkuFreightUnitCStoWH (sku, freightUnit, CStoWHWHfromCS(WHfromCS))
    AND NOT quantityWHfromCSDetailsSkuFreightUnit(sku, freightUnit, WHfromCS);


quantityWHfromCSBatch (WHfromCS, batch) = quantityCStoWHBatch(CStoWHWHfromCS(WHfromCS), batch);
quantityWHfromCSDetailBatch (WHfromCSDetail, batch) = quantityWHfromCSBatch(WHfromCSWHfromCSDetail(WHfromCSDetail), batch);

limitInTransferSkuLedgerBatch (WHfromCSDetail, batch) += quantityWHfromCSDetailBatch (WHfromCSDetail, batch);

quantityDCStoWHSku (CStoWH, sku) = GROUP SUM quantityCStoWHDetail(CStoWHDetail)
                                          BY CStoWHCStoWHDetail(CStoWHDetail), skuCStoWHDetail(CStoWHDetail);

quantityOriginWHfromCSDetail 'Кол-во плановое' (WHfromCSDetail) = DATA NUMERIC[14,2](WHfromCSDetail) IN baseGroup;

diffQuantityWHfromCSDetail (WHfromCSDetail) = quantityOriginWHfromCSDetail(WHfromCSDetail)!= quantityWHfromCSDetail(WHfromCSDetail);
//
//idBarcodeInWarehouseScan 'Штрих-код' = DATA STRING[13] (inWarehouseScan);
//WHfromCSInWarehouseScan 'Приход (ИД)' = DATA WHfromCS(inWarehouseScan) IN idGroup;
//skuInWarehouseScan 'Товар (ИД)' = DATA sku(inWarehouseScan) IN idGroup;

//приемка по коробам

currentFreightUnit 'Тек. короб (ИД)' = SESSION DATA freightUnit (WHfromCS);
barcodeCurrentFreightUnit 'Тек. короб (штрих-код)' = barcode(currentFreightUnit(WHfromCS));


addDialogSkuFreightUnitBarcode 'Ввод штрих-кода' (WHfromCS) = ACTION (WHfromCS) {

    FORM barcodeInput MODAL;

        IF formResult() == formResult.ok THEN {
            LOCAL dialogBarcodeSku = sku();
          //  LOCAL dialogBarcodeFreightUnit = freightUnit();

            IF skuBarcodeIdDate(chosenString('barcode'), dateWHfromCS (WHfromCS)) IS sku THEN {

                SET dialogBarcodeSku() <- skuBarcodeIdDate(chosenString('barcode'), dateWHfromCS (WHfromCS));

                LOCAL dialogBarcodeDetail = WHfromCSDetail();
                SET dialogBarcodeDetail() <- detailWHfromCSSku(WHfromCS, dialogBarcodeSku());
                IF dialogBarcodeDetail() IS WHfromCSDetail THEN {
                    SET quantityWHfromCSDetail(detail) IF detail == dialogBarcodeDetail() <-
                        quantityWHfromCSDetail(detail) (+) (1.0 IF detail IS WHfromCSDetail);
                } ELSE {
                    ADDOBJ WHfromCSDetail;
                    FOR w == addedObject() DO {
                        SET WHfromCSWHfromCSDetail(w) <- WHfromCS AS WHfromCS;
                        SET skuWHfromCSDetail(w) <- dialogBarcodeSku();
                        SET freightUnitWHfromCSDetail(w) <- currentFreightUnit(WHfromCS);
                        SET quantityWHfromCSDetail(w) <- 1.0;
                    }
                }
            } ELSE {

            IF barcodeToObject(chosenString('barcode')) IS freightUnit THEN {
                SET currentFreightUnit (WHfromCS) <- barcodeToObject(chosenString('barcode'));
            } ELSE {

            MESSAGE 'Не найден штрих-код'; }
          }
    }
} TOOLBAR EDITKEY 'F4';


fillWHfromCSDetailsSkuFreightUnit 'Заполнить строки из короба' (WHfromCS) = ACTION (WHfromCS) {
    FOR isNotShippedSkuFreightUnitWHfromCS (sku AS sku, currentFreightUnit(WHfromCS), WHfromCS AS WHfromCS) DO {
        ADDOBJ WHfromCSDetail;
        FOR w == addedObject() DO {
            SET skuWHfromCSDetail (w) <- sku AS sku;
            SET quantityWHfromCSDetail (w) <- quantitySkuFreightUnitCStoWH (sku AS sku, currentFreightUnit(WHfromCS), CStoWHWHfromCS(WHfromCS));
            SET freightUnitWHfromCSDetail(w) <- currentFreightUnit(WHfromCS);
        }
    }
} EDITKEY 'F5' CONFIRM;

shouldBePrintWHfromCS = SESSION DATA BOOLEAN (sku);

priceBaseWHfromCSDateTimeSku 'Цена' (sku, dateTime) = priceBasePriceSetDocumentArticleDateTime(articleSku(sku), dateTime);
priceDiscountWHfromCSDateTimeSku 'Цена скидочная' (sku, dateTime) = priceDiscountPriceSetDocumentArticleDateTime(articleSku(sku), dateTime);

quantityWHfromCSFreightUnitSku (WHfromCS, freightUnit, sku) = quantityCStoWHFreightUnitSku(CStoWHWHfromCS(WHfromCS), freightUnit, sku);

quantityPositionsSkuInWHFromCSFreightUnit 'Кол-во позиций в коробе' (WHfromCS, freightUnit) =
    GROUP SUM 1 IF quantityWHfromCSFreightUnitSku(WHfromCS, freightUnit, sku) BY WHfromCS, freightUnit;
quantityPositionsSkuInFreightUnitWHfromCS 'Кол-во позиций в коробе' (WHfromCS) = quantityPositionsSkuInWHFromCSFreightUnit(WHfromCS, currentFreightUnit(WHfromCS));

quantitySkuInWHFromCSFreightUnit 'Кол-во позиций в документе' (WHfromCS, freightUnit) =
    GROUP SUM quantityWHfromCSFreightUnitSku(WHfromCS, freightUnit, sku) BY WHfromCS, freightUnit;
quantitySkuInFreightUnitWHfromCS 'Кол-во позиций в документе' (WHfromCS) = quantitySkuInWHFromCSFreightUnit(WHfromCS, currentFreightUnit(WHfromCS));

//quantityPositionsSkuInFreightUnit 'Кол-во позиций в коробе' (freightUnit) = GROUP SUM 1 IF quantityFreightUnitSku(freightUnit, sku) BY freightUnit;
//quantityPositionsSkuInFreightUnitWHfromCS 'Кол-во позиций в коробе' (WHfromCS) = quantityPositionsSkuInFreightUnit(currentFreightUnit(WHfromCS));

//quantitySkuInFreightUnit 'Кол-во товара в коробе' (freightUnit) = GROUP SUM quantityFreightUnitSku(freightUnit, sku) BY freightUnit;
//quantitySkuInFreightUnitWHfromCS 'Кол-во товара в коробе' (WHfromCS) = quantitySkuInFreightUnit(currentFreightUnit(WHfromCS));

quantityPositionsSkuWHfromCSFreightUnit 'Кол-во позиций в документе' (WHfromCS, freightUnit) =
    GROUP SUM 1 IF quantityWHfromCSDetail(WHfromCSDetail) BY WHfromCSWHfromCSDetail(WHfromCSDetail), freightUnitWHfromCSDetail(WHfromCSDetail);
quantityPositionsSkuWHfromCS 'Кол-во позиций в документе' (WHfromCS) =
    quantityPositionsSkuWHfromCSFreightUnit(WHfromCS, currentFreightUnit(WHfromCS));

quantitySkuWHfromCSFreightUnit 'Кол-во товара в документе' (WHfromCS, freightUnit) =
    GROUP SUM quantityWHfromCSDetail(WHfromCSDetail) BY WHfromCSWHfromCSDetail(WHfromCSDetail), freightUnitWHfromCSDetail(WHfromCSDetail);
quantitySkuWHfromCS 'Кол-во товара в документе' (WHfromCS) =
    quantitySkuWHfromCSFreightUnit(WHfromCS, currentFreightUnit(WHfromCS));

quantityRemainedPositionSkuWHfromCS 'Кол-во оставшихся позиций в коробе' (WHfromCS) =
    UNION OVERRIDE 0 AND WHfromCS, quantityPositionsSkuInFreightUnitWHfromCS(WHfromCS) (-) quantityPositionsSkuWHfromCS(WHfromCS);

quantityRemainedSkuWHfromCS 'Кол-во оставшегося товара в коробе' (WHfromCS) =
    UNION OVERRIDE 0 AND WHfromCS, quantitySkuInFreightUnitWHfromCS(WHfromCS) (-) quantitySkuWHfromCS(WHfromCS);

quantitySkuInWHfromCS 'Кол-во товара' (WHfromCS, sku) = GROUP SUM quantityWHfromCSDetail(WHfromCSDetail)
    BY WHfromCSWHfromCSDetail(WHfromCSDetail), skuWHfromCSDetail(WHfromCSDetail);

FORM printMarksWHfromCS 'Печать маркировок товара' PRINT

    OBJECTS dt = DATETIME FIXED PANEL
    PROPERTIES(dt) OBJVALUE

    OBJECTS s = sku
    PROPERTIES(s) READONLY sidArticleSku, nameCommonSizeSku, sidGenderArticleSku, nameCategoryArticleSku,
                           mainCompositionSku, nameCountryBrandSupplier, nameBrandSupplierArticleSku,
                           barcode, nameCountrySku, nameColorSupplierItem, nameSupplierArticleSku

    PROPERTIES(s, dt)      priceBaseWHfromCSDateTimeSku, priceDiscountWHfromCSDateTimeSku

    FILTERS shouldBePrintWHfromCS(s)
;

printMarksSkuFreightUnit 'Печать маркировок товаров' (WHfromCS) = ACTION (WHfromCS) {

    SET shouldBePrintWHfromCS(sku) <- NULL;
    SET shouldBePrintWHfromCS(sku) <- TRUE IF quantitySkuFreightUnitCStoWH(sku, currentFreightUnit(WHfromCS), CStoWHWHfromCS(WHfromCS));
    FORM printMarksWHfromCS OBJECTS dt = dateTimeWHfromCS(WHfromCS) MODAL;

} CONFIRM;

printMarksSkuWHfromCS 'Печать маркировок товаров' (WHfromCS) = ACTION (WHfromCS) {

    SET shouldBePrintWHfromCS(sku) <- NULL;
    SET shouldBePrintWHfromCS(sku) <- TRUE IF quantitySkuInWHfromCS(WHfromCS, sku);
    FORM printMarksWHfromCS OBJECTS dt = dateTimeWHfromCS(WHfromCS) MODAL;

} CONFIRM TOOLBAR;

FORM WHfromCS 'Приход на оптовый склад'

    OBJECTS w = WHfromCS FIXED PANEL, d = WHfromCSDetail

    PROPERTIES(w)          numberObject, seriesObject, dateWHfromCS, timeWHfromCS, nameWarehouseWHfromCS,
                           barcodeCurrentFreightUnit, fillWHfromCSDetailsSkuFreightUnit, printMarksSkuFreightUnit,
                           printMarksSkuWHfromCS TODRAW d FORCE PANEL
    PROPERTIES(w) READONLY quantityRemainedPositionSkuWHfromCS SHOWIF barcodeCurrentFreightUnit(w),
                           quantityRemainedSkuWHfromCS SHOWIF barcodeCurrentFreightUnit(w)

    PROPERTIES(d) READONLY indexWHfromCSDetail, barcodeWHfromCSDetail, nameBrandWHfromCSDetail, sidArticleWHfromCSDetail,
                           sidColorWHfromCSDetail, nameColorWHfromCSDetail, sidSizeWHfromCSDetail, barcodeFreightUnitWHfromCSDetail

    PROPERTIES(d) quantityOriginWHfromCSDetail, quantityWHfromCSDetail
    PROPERTIES(d) delete

    PROPERTIES(w) TODRAW d addDialogSkuFreightUnitBarcode, deleteWHfromCSDetailWHfromCS

    FILTERS inWHfromCSWHfromCSDetail(w, d)

    FILTERGROUP filtersQuantity
        FILTER 'Показывать принятые' 'F9' quantityWHfromCSDetail(d) DEFAULT

    FILTERGROUP filtersDiff
        FILTER 'Показывать отличающиеся' 'F10' diffQuantityWHfromCSDetail(d)

    EDIT WHfromCS OBJECT w
;

DESIGN WHfromCS FROM DEFAULT {

    NEW topContainer {
        title = 'Приход на оптовый склад';
        childConstraints = TO THE BOTTOM;

        NEW firstCase {
            title = 'Шапка документа';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY(numberObject);
            ADD PROPERTY(seriesObject);
            ADD PROPERTY(dateWHfromCS);
            ADD PROPERTY(timeWHfromCS);
            ADD PROPERTY(nameWarehouseWHfromCS);
        }

        NEW secondCase {
            title = 'Короб';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY(quantityRemainedPositionSkuWHfromCS);
            ADD PROPERTY(quantityRemainedSkuWHfromCS);
            ADD PROPERTY(barcodeCurrentFreightUnit);
            ADD PROPERTY(fillWHfromCSDetailsSkuFreightUnit);
            ADD PROPERTY(printMarksSkuFreightUnit);
        }
    }

    ADD d.box;
    ADD functions.box;
}

FORM WHfromCSs 'Приходы на оптовый склад'
    OBJECTS w = WHfromCS
    PROPERTIES (w) READONLY numberObject, seriesObject, dateWHfromCS, timeWHfromCS, nameWarehouseWHfromCS

    PROPERTIES (w) printMarksSkuWHfromCS, ADDFORM, EDITFORM SHOWIF isDraftWHfromCS(w), delete FORCE PANEL SHOWIF isDraftWHfromCS(w),
                   postWHfromCS SHOWIF isDraftWHfromCS(w), unpostWHfromCS SHOWIF isPostedWHfromCS(w)

    OBJECTS d = WHfromCSDetail
    PROPERTIES(d) READONLY indexWHfromCSDetail, barcodeWHfromCSDetail, nameBrandWHfromCSDetail, sidArticleWHfromCSDetail,
                            sidColorWHfromCSDetail, nameColorWHfromCSDetail, sidSizeWHfromCSDetail,
                           quantityOriginWHfromCSDetail, quantityWHfromCSDetail

    FILTERS inWHfromCSWHfromCSDetail(w, d)
;

DESIGN WHfromCSs FROM DEFAULT {
    PROPERTY (delete(w)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
}