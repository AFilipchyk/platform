MODULE WHfromCS;

REQUIRE System,

        Utils,
        Stock,
        Numerator,
        Document,
        RomanDocument,
        Consignment,
        CStoWH,
        Barcode,
        MasterData,
        RomanLogicsModule;

PRIORITY RomanLogicsModule, Stock;

// Приход на склад (по схеме документ расхода - акт приемки - акт расхождений)
CLASS WHfromCSI 'Приход на склад с СВХ' : historyObject, numberedObject;
CLASS WHfromCSIPosted 'Закрытый приход с СВХ' : WHfromCSI, postedObject;
CLASS WHfromCSIDetail 'Строка прихода на склад' : inFIFOSkuLedger;

@defineDocumentTables(WHfromCSI);

@defineDocumentAggregation(CStoWH, WHfromCSI, isPostedCStoWH);

@defineDocumentAggregationStock(CStoWH, WHfromCSI, customStore, 'СВХ');
@defineDocumentAggregationStock(CStoWH, WHfromCSI, warehouse, 'Оптовый склад');

@defineDocumentAggregationPosted(CStoWH, WHfromCSI);

@defineDocumentAggregationDetailSku(CStoWH, WHfromCSI, sku);

@defineDocumentAggregationDetailQuantity(CStoWH, WHfromCSI);

@defineDocumentHeaderQuantity(WHfromCSI);

@defineDocumentDetailIndex(WHfromCSI);
@defineDocumentDescription(WHfromCSI, 'Приход с СВХ');

@defineDocumentDetailSkuArticle(WHfromCSI);

initValueNumberObject (WHfromCSI) += [PREV(numberObject(WHfromCSI))](CStoWHWHfromCSI(WHfromCSI));
initValueSeriesObject (WHfromCSI) += [PREV(seriesObject(WHfromCSI))](CStoWHWHfromCSI(WHfromCSI));

initWhenNumberedObject(WHfromCSI) += CHANGED(CStoWHWHfromCSI(WHfromCSI));

@implementSkuLedger(WHfromCSI, sku, warehouse);
quantityInFIFOSkuLedger (ledger) += quantityWHfromCSIDetail(ledger);
limitInFIFOSkuLedgerBatch (ledger, batch) += quantityWHfromCSIDetail(ledger) AND batch == declarationDetailCStoWHDetail(CStoWHDetailWHfromCSIDetail(ledger));

FORM WHfromCSI 'Приход на оптовый склад'

    OBJECTS w = WHfromCSI FIXED PANEL, d = WHfromCSIDetail

    PROPERTIES(w)          initValueNumberObject, initValueSeriesObject, dateWHfromCSI, timeWHfromCSI,
                           nameWarehouseWHfromCSI, nameCustomStoreWHfromCSI

    PROPERTIES(d) READONLY indexWHfromCSIDetail, barcodeWHfromCSIDetail, nameBrandWHfromCSIDetail, sidArticleWHfromCSIDetail,
                           sidColorWHfromCSIDetail, nameColorWHfromCSIDetail, sidSizeWHfromCSIDetail

    PROPERTIES(d) quantityWHfromCSIDetail

    FILTERS WHfromCSIWHfromCSIDetail(d) == w

    EDIT WHfromCSI OBJECT w
;

DESIGN WHfromCSI FROM DEFAULT {

    NEW topContainer {
        title = 'Приход на оптовый склад';
        childConstraints = TO THE BOTTOM;

        NEW firstCase {
            title = 'Шапка документа';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY(initValueNumberObject);
            ADD PROPERTY(initValueSeriesObject);
            ADD PROPERTY(dateWHfromCSI);
            ADD PROPERTY(timeWHfromCSI);
            ADD PROPERTY(nameWarehouseWHfromCSI);
        }
    }

    ADD d.box;
    ADD functions.box;
}

//FORM WHfromCSIs 'Приходы на оптовый склад'
//    OBJECTS w = WHfromCSI
//    PROPERTIES (w) READONLY objectClassName, numberObject, seriesObject, dateWHfromCSI, timeWHfromCSI,
//                            nameWarehouseWHfromCSI, nameCustomStoreWHfromCSI, countWHfromCSIDetailWHfromCSI, quantityWHfromCSIDetailWHfromCSI
//
//    PROPERTIES (w) EDITFORM
//
//    OBJECTS d = WHfromCSIDetail
//    PROPERTIES(d) READONLY indexWHfromCSIDetail, barcodeWHfromCSIDetail, nameBrandWHfromCSIDetail, sidArticleWHfromCSIDetail,
//                           sidColorWHfromCSIDetail, nameColorWHfromCSIDetail, sidSizeWHfromCSIDetail,
//                           quantityWHfromCSIDetail
//
//    FILTERS WHfromCSIWHfromCSIDetail(d) == w
//;

CLASS WHfromCSR 'Приемка на склад с СВХ' : historyObject, numberedObject;
CLASS WHfromCSRPosted 'Закрытая приемка на склад с СВХ' : WHfromCSR, postedObject;
CLASS WHfromCSRDetail 'Строка приемки на склад с СВХ';

CLASS WHfromCSD 'Акт расхождений на приемке на склад с СВХ' : historyObject, numberedObject;
CLASS WHfromCSDPosted 'Закрытый акт расхождений на приемке на склад с СВХ' : WHfromCSD, postedObject;
CLASS WHfromCSDDetail 'Строка акта расхождений на приемке на склад с СВХ' : inFIFOSkuLedger;

@defineDocument(WHfromCSR);
@defineDocumentStock(WHfromCSR, warehouse, 'Оптовый склад');
@defineDocumentPosted(WHfromCSR);

@defineDocumentDetailNumbered(WHfromCSR);
@defineDocumentDetailQuantity(WHfromCSR);

@defineDocumentDetailSku(WHfromCSR, sku);
@defineDocumentDetailSkuArticle(WHfromCSR);

@defineDocumentDetailSkuBalance(WHfromCSR, sku, warehouse);

@defineDocumentHeaderQuantity(WHfromCSR);

@defineDocumentDescription (WHfromCSR, 'Расход с СВХ');

@defineAddDetailDialogSkuStock(WHfromCSR, sku, warehouse, dialogSku);
@defineAddDetailDialogBarcode(WHfromCSR, sku);

customStoreWHfromCSR (WHfromCSR) = DATA customStore (WHfromCSR) IN idGroup;
nameCustomStoreWHfromCSR 'СВХ' (WHfromCSR) = name (customStoreWHfromCSR(WHfromCSR)) IN documentHeaderGroup;

//связь расхода и приемки
WHfromCSIWHfromCSR 'Документ приемки (ИД)' (WHfromCSR) = DATA WHfromCSI(WHfromCSR);
WHfromCSRWHfromCSI 'Документ прихода (ИД)' (WHfromCSI) = GROUP UNIQUE WHfromCSR BY WHfromCSIWHfromCSR(WHfromCSR) WHERE WHfromCSR IS WHfromCSR;

isAcceptedWHfromCSI 'Документ с приемкой' (WHfromCSI) =  WHfromCSI IS WHfromCSI AND WHfromCSRWHfromCSI(WHfromCSI);
notAcceptedWHfromCSI 'Документ без приемки' (WHfromCSI) =  WHfromCSI IS WHfromCSI AND NOT WHfromCSRWHfromCSI(WHfromCSI);

CStoWHWHfromCSR (WHfromCSR) = CStoWHWHfromCSI (WHfromCSIWHfromCSR(WHfromCSR));


initValueNumberObject (WHfromCSR) += [PREV(numberObject(WHfromCSR))](WHfromCSIWHfromCSR(WHfromCSR));
initValueSeriesObject (WHfromCSR) += [PREV(seriesObject(WHfromCSR))](WHfromCSIWHfromCSR(WHfromCSR));

initWhenNumberedObject (WHfromCSR) +=  CHANGED(WHfromCSIWHfromCSR(WHfromCSR));

//для учета по коробам
freightUnitWHfromCSRDetail 'Короб (ИД)' (WHfromCSRDetail) = DATA freightUnit(WHfromCSRDetail);
barcodeFreightUnitWHfromCSRDetail 'Короб' (WHfromCSRDetail) = barcode (freightUnitWHfromCSRDetail(WHfromCSRDetail));

quantityWHfromCSRDetailsSkuFreightUnit 'Количество принятое' (sku, freightUnit, WHfromCSR) =
    GROUP SUM quantityWHfromCSRDetail(WHfromCSRDetail)
    BY skuWHfromCSRDetail(WHfromCSRDetail), freightUnitWHfromCSRDetail(WHfromCSRDetail), WHfromCSRWHfromCSRDetail(WHfromCSRDetail);

isNotShippedSkuFreightUnitWHfromCSR (sku, freightUnit, WHfromCSR) = quantitySkuFreightUnitCStoWH (sku, freightUnit, CStoWHWHfromCSR(WHfromCSR))
    AND NOT quantityWHfromCSRDetailsSkuFreightUnit(sku, freightUnit, WHfromCSR);

//quantityWHfromCSBatch (WHfromCS, batch) = quantityCStoWHBatch(CStoWHWHfromCS(WHfromCS), batch);
//quantityWHfromCSDetailBatch (WHfromCSDetail, batch) = quantityWHfromCSBatch(WHfromCSWHfromCSDetail(WHfromCSDetail), batch);
//
//limitInTransferSkuLedgerBatch (WHfromCSDetail, batch) += quantityWHfromCSDetailBatch (WHfromCSDetail, batch);
//
@defineDocumentHeaderSkuQuantity (WHfromCSR);
@defineDocumentHeaderOriginSkuQuantity (WHfromCSR, CStoWH);

//quantityDCStoWHSku (CStoWH, sku) = GROUP SUM quantityCStoWHDetail(CStoWHDetail)
//                                          BY CStoWHCStoWHDetail(CStoWHDetail), skuCStoWHDetail(CStoWHDetail);

//diffQuantityWHfromCSRDetail (WHfromCSRDetail) = quantityOriginWHfromCSRDetail(WHfromCSRDetail)!= quantityWHfromCSRDetail(WHfromCSRDetail);

//приемка по коробам

currentFreightUnit 'Тек. короб (ИД)' (WHfromCSR) = SESSION DATA freightUnit (WHfromCSR);
barcodeCurrentFreightUnit 'Тек. короб (штрих-код)' (WHfromCSR) = barcode(currentFreightUnit(WHfromCSR));


addDialogSkuFreightUnitBarcode 'Ввод штрих-кода' (WHfromCSR) = ACTION (WHfromCSR) {

    FORM barcodeInput MODAL;

        IF formResult() == formResult.ok THEN {
            LOCAL dialogBarcodeSku = sku();
          //  LOCAL dialogBarcodeFreightUnit = freightUnit();

            IF skuBarcodeIdDate(chosenString('barcode'), dateWHfromCSR (WHfromCSR)) IS sku THEN {

                SET dialogBarcodeSku() <- skuBarcodeIdDate(chosenString('barcode'), dateWHfromCSR (WHfromCSR));

                LOCAL dialogBarcodeDetail = WHfromCSRDetail();
                SET dialogBarcodeDetail() <- detailWHfromCSRSku(WHfromCSR, dialogBarcodeSku());
                IF dialogBarcodeDetail() IS WHfromCSRDetail THEN {
                    SET quantityWHfromCSRDetail(detail) IF detail == dialogBarcodeDetail() <-
                        quantityWHfromCSRDetail(detail) (+) (1.0 IF detail IS WHfromCSRDetail);
                } ELSE {
                    ADDOBJ WHfromCSRDetail;
                    FOR w == addedObject() DO {
                        SET WHfromCSRWHfromCSRDetail(w) <- WHfromCSR AS WHfromCSR;
                        SET skuWHfromCSRDetail(w) <- dialogBarcodeSku();
                        SET freightUnitWHfromCSRDetail(w) <- currentFreightUnit(WHfromCSR);
                        SET quantityWHfromCSRDetail(w) <- 1.0;
                    }
                }
            } ELSE {

            IF barcodeToObject(chosenString('barcode')) IS freightUnit THEN {
                SET currentFreightUnit (WHfromCSR) <- barcodeToObject(chosenString('barcode'));
            } ELSE {

            MESSAGE 'Не найден штрих-код'; }
          }
    }
} TOOLBAR EDITKEY 'F4';

fillWHfromCSRDetailsSkuFreightUnit 'Заполнить строки из короба' (WHfromCSR) = ACTION (WHfromCSR) {
    FOR isNotShippedSkuFreightUnitWHfromCSR (sku AS sku, currentFreightUnit(WHfromCSR), WHfromCSR AS WHfromCSR) DO {
        ADDOBJ WHfromCSRDetail;
        FOR w == addedObject() DO {
            SET skuWHfromCSRDetail (w) <- sku AS sku;
            SET quantityWHfromCSRDetail (w) <- quantitySkuFreightUnitCStoWH (sku AS sku, currentFreightUnit(WHfromCSR), CStoWHWHfromCSR(WHfromCSR));
            SET freightUnitWHfromCSRDetail(w) <- currentFreightUnit(WHfromCSR);
        }
    }
} EDITKEY 'F5' CONFIRM;

shouldBePrintWHfromCSR = SESSION DATA BOOLEAN (sku);

priceBaseWHfromCSRDateTimeSku 'Цена' (sku, dateTime) = priceBasePriceSetDocumentArticleDateTime(articleSku(sku), dateTime);
priceDiscountWHfromCSRDateTimeSku 'Цена скидочная' (sku, dateTime) = priceDiscountPriceSetDocumentArticleDateTime(articleSku(sku), dateTime);

quantityWHfromCSRFreightUnitSku (WHfromCSR, freightUnit, sku) = quantityCStoWHFreightUnitSku(CStoWHWHfromCSR(WHfromCSR), freightUnit, sku);

quantityPositionsSkuInWHFromCSRFreightUnit 'Кол-во позиций в коробе' (WHfromCSR, freightUnit) =
    GROUP SUM 1 IF quantityWHfromCSRFreightUnitSku(WHfromCSR, freightUnit, sku) BY WHfromCSR, freightUnit;
quantityPositionsSkuInFreightUnitWHfromCSR 'Кол-во позиций в коробе' (WHfromCSR) = quantityPositionsSkuInWHFromCSRFreightUnit(WHfromCSR, currentFreightUnit(WHfromCSR));

quantitySkuInWHFromCSRFreightUnit 'Кол-во товара в коробе' (WHfromCSR, freightUnit) =
    GROUP SUM quantityWHfromCSRFreightUnitSku(WHfromCSR, freightUnit, sku) BY WHfromCSR, freightUnit;
quantitySkuInFreightUnitWHfromCSR 'Кол-во товара в коробе' (WHfromCSR) = quantitySkuInWHFromCSRFreightUnit(WHfromCSR, currentFreightUnit(WHfromCSR));

quantityPositionsSkuWHfromCSRFreightUnit 'Кол-во позиций в документе' (WHfromCSR, freightUnit) =
    GROUP SUM 1 IF quantityWHfromCSRDetail(WHfromCSRDetail) BY WHfromCSRWHfromCSRDetail(WHfromCSRDetail), freightUnitWHfromCSRDetail(WHfromCSRDetail);
quantityPositionsSkuWHfromCSR 'Кол-во позиций в документе' (WHfromCSR) =
    quantityPositionsSkuWHfromCSRFreightUnit(WHfromCSR, currentFreightUnit(WHfromCSR));

quantitySkuWHfromCSRFreightUnit 'Кол-во товара в документе' (WHfromCSR, freightUnit) =
    GROUP SUM quantityWHfromCSRDetail(WHfromCSRDetail) BY WHfromCSRWHfromCSRDetail(WHfromCSRDetail), freightUnitWHfromCSRDetail(WHfromCSRDetail);
quantitySkuWHfromCSR 'Кол-во товара в документе' (WHfromCSR) =
    quantitySkuWHfromCSRFreightUnit(WHfromCSR, currentFreightUnit(WHfromCSR));

quantityRemainedPositionSkuWHfromCSR 'Кол-во оставшихся позиций в коробе' (WHfromCSR) =
    UNION OVERRIDE 0 AND WHfromCSR, quantityPositionsSkuInFreightUnitWHfromCSR(WHfromCSR) (-) quantityPositionsSkuWHfromCSR(WHfromCSR);

quantityRemainedSkuWHfromCSR 'Кол-во оставшегося товара в коробе' (WHfromCSR) =
    UNION OVERRIDE 0 AND WHfromCSR, quantitySkuInFreightUnitWHfromCSR(WHfromCSR) (-) quantitySkuWHfromCSR(WHfromCSR);

quantitySkuInWHfromCSR 'Кол-во товара' (WHfromCSR, sku) = GROUP SUM quantityWHfromCSRDetail(WHfromCSRDetail)
    BY WHfromCSRWHfromCSRDetail(WHfromCSRDetail), skuWHfromCSRDetail(WHfromCSRDetail);

FORM printMarksWHfromCSR 'Печать маркировок товара' PRINT

    OBJECTS dt = DATETIME FIXED PANEL
    PROPERTIES(dt) OBJVALUE

    OBJECTS s = sku
    PROPERTIES(s) READONLY sidArticleSku, nameCommonSizeSku, sidGenderArticleSku, nameCategoryArticleSku,
                           mainCompositionSku, nameCountryBrandSupplier, nameBrandSupplierArticleSku,
                           barcode, nameCountrySku, nameColorSupplierItem, nameSupplierArticleSku

    PROPERTIES(s, dt)      priceBaseWHfromCSRDateTimeSku, priceDiscountWHfromCSRDateTimeSku

    FILTERS shouldBePrintWHfromCSR(s)
;

printMarksSkuFreightUnit 'Печать маркировок товаров' (WHfromCSR) = ACTION (WHfromCSR) {

    SET shouldBePrintWHfromCSR(sku) <- NULL;
    SET shouldBePrintWHfromCSR(sku) <- TRUE IF quantitySkuFreightUnitCStoWH(sku, currentFreightUnit(WHfromCSR), CStoWHWHfromCSR(WHfromCSR));
    FORM printMarksWHfromCSR OBJECTS dt = dateTimeWHfromCSR(WHfromCSR) MODAL;

} CONFIRM;

printMarksSkuWHfromCSR 'Печать маркировок товаров' (WHfromCSR) = ACTION (WHfromCSR) {

    SET shouldBePrintWHfromCSR(sku) <- NULL;
    SET shouldBePrintWHfromCSR(sku) <- TRUE IF quantitySkuInWHfromCSR(WHfromCSR, sku);
    FORM printMarksWHfromCSR OBJECTS dt = dateTimeWHfromCSR(WHfromCSR) MODAL;

} CONFIRM TOOLBAR;

FORM WHfromCSR 'Приемка на оптовый склад'

    OBJECTS w = WHfromCSR FIXED PANEL, d = WHfromCSRDetail

    PROPERTIES(w)          numberObject, seriesObject,
                           dateWHfromCSR, timeWHfromCSR, nameWarehouseWHfromCSR,
                           barcodeCurrentFreightUnit, fillWHfromCSRDetailsSkuFreightUnit, printMarksSkuFreightUnit, delete,
                           printMarksSkuWHfromCSR TODRAW d FORCE PANEL
    PROPERTIES(w) READONLY quantityRemainedPositionSkuWHfromCSR SHOWIF barcodeCurrentFreightUnit(w),
                           quantityRemainedSkuWHfromCSR SHOWIF barcodeCurrentFreightUnit(w)

    PROPERTIES(d) READONLY indexWHfromCSRDetail, barcodeWHfromCSRDetail, nameBrandWHfromCSRDetail, sidArticleWHfromCSRDetail,
                           sidColorWHfromCSRDetail, nameColorWHfromCSRDetail, sidSizeWHfromCSRDetail, barcodeFreightUnitWHfromCSRDetail, quantityWHfromCSRDetail

    //PROPERTIES(d) quantityOriginWHfromCSRDetailSkuWHfromCSR, quantityWHfromCSRDetail
    PROPERTIES(d) delete

    PROPERTIES(w) TODRAW d addDialogSkuFreightUnitBarcode, deleteWHfromCSRDetailWHfromCSR

    FILTERS inWHfromCSRWHfromCSRDetail(w, d)

    FILTERGROUP filtersQuantity
        FILTER 'Показывать принятые' 'F9' quantityWHfromCSRDetail(d) DEFAULT

//    FILTERGROUP filtersDiff
//        FILTER 'Показывать отличающиеся' 'F10' diffQuantityWHfromCSRDetail(d)

    EDIT WHfromCSR OBJECT w
;

toSSSS (WHfromCSR) = ACTION FORM WHfromCSR OBJECTS w = WHfromCSR MODAL;

toAcceptCStoWHWHfromCSR 'Создать приемку' (WHfromCSI)= ACTION (WHfromCSI){
    ADDOBJ WHfromCSR;
    FOR w == addedObject() DO {
        SET WHfromCSIWHfromCSR (w) <- WHfromCSI AS WHfromCSI;
        SET warehouseWHfromCSR (w) <- warehouseWHfromCSI(WHfromCSI);
        EXEC toSSSS (w);
    }
};

toModifyCStoWHWHfromCSR 'Редактировать приемку' (WHfromCSI)= ACTION (WHfromCSI){
//    FOR w == addedObject() DO {
        EXEC toSSSS (WHfromCSRWHfromCSI(WHfromCSI));
        EXEC apply();
//    }
} IMAGE 'edit.png';

toDeleteCStoWHWHfromCSR 'Удалить приемку' (WHfromCSI)= ACTION (WHfromCSI){
    FOR w == WHfromCSRWHfromCSI(WHfromCSI) DO {
        EXEC delete(w);
        EXEC apply();
    }
} IMAGE 'delete.png';

DESIGN WHfromCSR FROM DEFAULT {

    NEW topContainer {
        title = 'Приход на оптовый склад';
        childConstraints = TO THE BOTTOM;

        NEW firstCase {
            title = 'Шапка документа';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY(numberObject);
            ADD PROPERTY(seriesObject);
            ADD PROPERTY(dateWHfromCSR);
            ADD PROPERTY(timeWHfromCSR);
            ADD PROPERTY(nameWarehouseWHfromCSR);
            ADD PROPERTY(delete);
        }

        NEW secondCase {
            title = 'Короб';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY(quantityRemainedPositionSkuWHfromCSR);
            ADD PROPERTY(quantityRemainedSkuWHfromCSR);
            ADD PROPERTY(barcodeCurrentFreightUnit);
            ADD PROPERTY(fillWHfromCSRDetailsSkuFreightUnit);
            ADD PROPERTY(printMarksSkuFreightUnit);
        }
    }

    ADD d.box;
    ADD functions.box;
}

//FORM WHfromCSs 'Приходы на оптовый склад'
//    OBJECTS w = WHfromCS
//    PROPERTIES (w) READONLY numberObject, seriesObject, dateWHfromCS, timeWHfromCS, nameWarehouseWHfromCS
//
//    PROPERTIES (w) printMarksSkuWHfromCS, ADDFORM, EDITFORM SHOWIF isDraftWHfromCS(w), delete FORCE PANEL SHOWIF isDraftWHfromCS(w),
//                   postWHfromCS SHOWIF isDraftWHfromCS(w), unpostWHfromCS SHOWIF isPostedWHfromCS(w)
//
//    OBJECTS d = WHfromCSDetail
//    PROPERTIES(d) READONLY indexWHfromCSDetail, barcodeWHfromCSDetail, nameBrandWHfromCSDetail, sidArticleWHfromCSDetail,
//                            sidColorWHfromCSDetail, nameColorWHfromCSDetail, sidSizeWHfromCSDetail,
//                           quantityOriginWHfromCSDetail, quantityWHfromCSDetail
//
//    FILTERS inWHfromCSWHfromCSDetail(w, d)
//;
//
//DESIGN WHfromCSs FROM DEFAULT {
//    PROPERTY (delete(w)) {
//        panelLocation = TOOLBAR;
//        askConfirm = TRUE;
//    }
//}

FORM WHfromCSIs 'Приходы на оптовый склад'
    OBJECTS w = WHfromCSI
    PROPERTIES (w) READONLY objectClassName, numberObject, seriesObject, dateWHfromCSI, timeWHfromCSI,
                            nameWarehouseWHfromCSI, nameCustomStoreWHfromCSI, countWHfromCSIDetailWHfromCSI, quantityWHfromCSIDetailWHfromCSI

    PROPERTIES (w) FORCE PANEL toAcceptCStoWHWHfromCSR SHOWIF notAcceptedWHfromCSI(w), toModifyCStoWHWHfromCSR SHOWIF isAcceptedWHfromCSI(w),
                               toDeleteCStoWHWHfromCSR SHOWIF isAcceptedWHfromCSI(w)

    OBJECTS d = WHfromCSIDetail
    PROPERTIES(d) READONLY indexWHfromCSIDetail, barcodeWHfromCSIDetail, nameBrandWHfromCSIDetail, sidArticleWHfromCSIDetail,
                           sidColorWHfromCSIDetail, nameColorWHfromCSIDetail, sidSizeWHfromCSIDetail,
                           quantityWHfromCSIDetail

    FILTERS WHfromCSIWHfromCSIDetail(d)
;