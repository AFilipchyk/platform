MODULE WHfromCS;

REQUIRE System,

        Stock,
        Numerator,
        Document,
        RomanDocument,
        Consignment,
        CStoWH,
        Barcode,
        MasterData,
        RomanLogicsModule;

PRIORITY RomanLogicsModule, Stock;

// Приход на склад
CLASS WHfromCS 'Приход на склад' : historyObject, numberedObject;
CLASS WHfromCSPosted 'Закрытый приход с СВХ' : WHfromCS, postedObject;

CLASS WHfromCSDetail 'Строка прихода на склад' : inTransferSkuLedger;

//CLASS inWarehouseScan 'Сканирование';

//создание документа через метакод
skuWHfromCSDetail 'Товар (ИД)' (WHfromCSDetail) = DATA sku(WHfromCSDetail) IN idGroup;
@defineRBCorrespondingDocument(WHfromCS, warehouse, 'Оптовый склад', sku, 'Расход с СВХ', customStore, 'СВХ');

quantityInTransferSkuLedger (ledger) += quantityWHfromCSDetail(ledger);
//задание связки расход-приход
CStoWHWHfromCS 'Расход прихода (ИД)' = DATA CStoWHPosted(WHfromCS) IN idGroup;
WHfromCSCStoWH (CStoWH) = GROUP UNIQUE WHfromCS BY CStoWHWHfromCS (WHfromCS);
CONSTRAINT CStoWHWHfromCS(p1) == CStoWHWHfromCS(p2) AND p1 != p2 CHECKED BY CStoWHWHfromCS MESSAGE 'Расход задействован в другом приходе';

numberCStoWHWHfromCS 'Номер' (WHfromCS) = numberObject(CStoWHWHfromCS(WHfromCS)) IN baseGroup PERSISTENT;
seriesCStoWHWHfromCS 'Серия' (WHfromCS) = seriesObject(CStoWHWHfromCS(WHfromCS)) IN baseGroup PERSISTENT;
seriesNumberWHfromCS 'Серия/Номер' (WHfromCS) = seriesNumberObject(CStoWHWHfromCS(WHfromCS)) PERSISTENT;

numberObject (WHfromCS) <- PREV (numberCStoWHWHfromCS (WHfromCS)) WHEN ASSIGNED (CStoWHWHfromCS(WHfromCS));

inCStoWHWHfromCS (WHfromCS, CStoWH) = CStoWHWHfromCS(WHfromCS) == CStoWH;

//для учета по коробам
freightUnitWHfromCSDetail 'Короб (ИД)' (WHfromCSDetail) = DATA freightUnit(WHfromCSDetail);
barcodeFreightUnitWHfromCSDetail 'Короб' (WHfromCSDetail) = barcode (freightUnitWHfromCSDetail(WHfromCSDetail));

quantityWHfromCSDetailsSkuFreightUnit 'Количество принятое' (sku, freightUnit, WHfromCS) =
    GROUP SUM quantityWHfromCSDetail(WHfromCSDetail)
    BY skuWHfromCSDetail(WHfromCSDetail), freightUnitWHfromCSDetail(WHfromCSDetail), WHfromCSWHfromCSDetail(WHfromCSDetail);

isNotShippedSkuFreightUnitWHfromCS (sku, freightUnit, WHfromCS) = quantitySkuFreightUnitCStoWH (sku, freightUnit, CStoWHWHfromCS(WHfromCS))
    AND NOT quantityWHfromCSDetailsSkuFreightUnit(sku, freightUnit, WHfromCS);


quantityWHfromCSBatch (WHfromCS, batch) = quantityCStoWHBatch(CStoWHWHfromCS(WHfromCS), batch);
quantityWHfromCSDetailBatch (WHfromCSDetail, batch) = quantityWHfromCSBatch(WHfromCSWHfromCSDetail(WHfromCSDetail), batch);

limitInTransferSkuLedgerBatch (WHfromCSDetail, batch) += quantityWHfromCSDetailBatch (WHfromCSDetail, batch);

quantityDCStoWHSku (CStoWH, sku) = GROUP SUM quantityCStoWHDetail(CStoWHDetail)
                                          BY CStoWHCStoWHDetail(CStoWHDetail), skuCStoWHDetail(CStoWHDetail);

quantityOriginWHfromCSDetail 'Кол-во плановое' (WHfromCSDetail) = DATA NUMERIC[14,2](WHfromCSDetail) IN baseGroup;

diffQuantityWHfromCSDetail (WHfromCSDetail) = quantityOriginWHfromCSDetail(WHfromCSDetail)!= quantityWHfromCSDetail(WHfromCSDetail);
//
//idBarcodeInWarehouseScan 'Штрих-код' = DATA STRING[13] (inWarehouseScan);
//WHfromCSInWarehouseScan 'Приход (ИД)' = DATA WHfromCS(inWarehouseScan) IN idGroup;
//skuInWarehouseScan 'Товар (ИД)' = DATA sku(inWarehouseScan) IN idGroup;

//приемка по коробам

currentFreightUnit 'Тек. короб (ИД)' = SESSION DATA freightUnit (WHfromCS);
barcodeCurrentFreightUnit 'Тек. короб (штрих-код)' = barcode(currentFreightUnit(WHfromCS));

detailWHfromCSSku(WHfromCS, sku) = GROUP MAX detail BY WHfromCSWHfromCSDetail(detail), skuWHfromCSDetail(detail);

addDialogSkuFreightUnitBarcode 'Ввод штрих-кода' (WHfromCS) = ACTION (WHfromCS) {

    FORM barcodeInput MODAL;

        IF formResult() == formResult.ok THEN {
            LOCAL dialogBarcodeSku = sku();
          //  LOCAL dialogBarcodeFreightUnit = freightUnit();

            IF skuBarcodeIdDate(chosenString('barcode'), dateWHfromCS (WHfromCS)) IS sku THEN {

                SET dialogBarcodeSku() <- skuBarcodeIdDate(chosenString('barcode'), dateWHfromCS (WHfromCS));

                LOCAL dialogBarcodeDetail = WHfromCSDetail();
                SET dialogBarcodeDetail() <- detailWHfromCSSku(WHfromCS, dialogBarcodeSku());
                IF dialogBarcodeDetail() IS WHfromCSDetail THEN {
                    SET quantityWHfromCSDetail(detail) IF detail == dialogBarcodeDetail() <-
                        quantityWHfromCSDetail(detail) (+) (1.0 IF detail IS WHfromCSDetail);
                } ELSE {
                    ADDOBJ WHfromCSDetail;
                    FOR w == addedObject() DO {
                        SET WHfromCSWHfromCSDetail(w) <- WHfromCS AS WHfromCS;
                        SET skuWHfromCSDetail(w) <- dialogBarcodeSku();
                        SET freightUnitWHfromCSDetail(w) <- currentFreightUnit(WHfromCS);
                        SET quantityWHfromCSDetail(w) <- 1.0;
                    }
                }
            } ELSE {

            IF barcodeToObject(chosenString('barcode')) IS freightUnit THEN {
                SET currentFreightUnit (WHfromCS) <- barcodeToObject(chosenString('barcode'));
            } ELSE {

            MESSAGE 'Не найден штрих-код'; }
          }
    }
} TOOLBAR EDITKEY 'F4';


fillWHfromCSDetailsSkuFreightUnit 'Заполнить строки из короба' (WHfromCS) = ACTION (WHfromCS) {
    FOR isNotShippedSkuFreightUnitWHfromCS (sku AS sku, currentFreightUnit(WHfromCS), WHfromCS AS WHfromCS) DO {
        ADDOBJ WHfromCSDetail;
        FOR w == addedObject() DO {
            SET skuWHfromCSDetail (w) <- sku AS sku;
            SET quantityWHfromCSDetail (w) <- quantitySkuFreightUnitCStoWH (sku AS sku, currentFreightUnit(WHfromCS), CStoWHWHfromCS(WHfromCS));
            SET freightUnitWHfromCSDetail(w) <- currentFreightUnit(WHfromCS);
        }
    }
} EDITKEY 'F5' CONFIRM;

FORM WHfromCS 'Приход на оптовый склад'

    OBJECTS w = WHfromCS FIXED PANEL
    PROPERTIES (w) numberCStoWHWHfromCS, seriesCStoWHWHfromCS, dateWHfromCS, timeWHfromCS, nameWarehouseWHfromCS,
                   barcodeCurrentFreightUnit, fillWHfromCSDetailsSkuFreightUnit

    OBJECTS d = WHfromCSDetail
    PROPERTIES (d) READONLY indexWHfromCSDetail, barcodeWHfromCSDetail, nameBrandWHfromCSDetail, sidArticleWHfromCSDetail,
                            sidColorWHfromCSDetail, nameColorWHfromCSDetail, sidSizeWHfromCSDetail, barcodeFreightUnitWHfromCSDetail

    PROPERTIES(d) quantityOriginWHfromCSDetail, quantityWHfromCSDetail
    PROPERTIES(d) ADDOBJ, delete

   PROPERTIES(w) TODRAW d addDialogSkuFreightUnitBarcode, deleteWHfromCSDetailWHfromCS

    FILTERS inWHfromCSWHfromCSDetail(w, d)

    FILTERGROUP filtersQuantity
        FILTER 'Показывать принятые' 'F9' quantityWHfromCSDetail(d) DEFAULT

    FILTERGROUP filtersDiff
        FILTER 'Показывать отличающиеся' 'F10' diffQuantityWHfromCSDetail(d)

    EDIT WHfromCS OBJECT w
;

FORM WHfromCSs 'Приходы на оптовый склад'
    OBJECTS w = WHfromCS
    PROPERTIES (w) READONLY numberObject, seriesObject, dateWHfromCS, timeWHfromCS, nameWarehouseWHfromCS

    PROPERTIES (w) ADDFORM, EDITFORM SHOWIF isDraftWHfromCS(w), delete FORCE PANEL SHOWIF isDraftWHfromCS(w),
                   postWHfromCS SHOWIF isDraftWHfromCS(w), unpostWHfromCS SHOWIF isPostedWHfromCS(w)

    OBJECTS d = WHfromCSDetail
    PROPERTIES(d) READONLY indexWHfromCSDetail, barcodeWHfromCSDetail, nameBrandWHfromCSDetail, sidArticleWHfromCSDetail,
                            sidColorWHfromCSDetail, nameColorWHfromCSDetail, sidSizeWHfromCSDetail,
                           quantityOriginWHfromCSDetail, quantityWHfromCSDetail

    FILTERS inWHfromCSWHfromCSDetail(w, d)
;

DESIGN WHfromCSs FROM DEFAULT {
    PROPERTY (delete(w)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
}