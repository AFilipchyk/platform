MODULE Rublevski;

IMPORT BaseLogicsModule;

castToString255 = FORMULA STRING[255] 'CAST($1 AS character(255))';

CLASS doubleNamed 'Объект с кратким наименованием' : named;

shortName 'Краткое наименование' = DATA STRING[5] (doubleNamed) IN baseGroup;

CLASS STATIC yesNo 'Логическое' {
    yes 'ДА',
    no 'НЕТ'
};
CLASS language 'Язык' : doubleNamed;

stringEqualsAll(string) = string == 'Все';
dateDiffersCurrent(date) = date != currentDate();

CLASS ABSTRACT postedObject 'Объект с возможностью закрытия';

timeClosed 'Время закрытия' = DATA DATETIME (postedObject);
userClosed 'Закрыт пользователем' = DATA customUser (postedObject) IN idGroup;
commonNameUserClosed 'Закрыт пользователем' (postedObject) = commonName(userClosed(postedObject));
timeClosed(postedObject) <- currentDateTime() ON ASSIGN postedObject IS postedObject;
userClosed(postedObject) <- currentUser() ON ASSIGN postedObject IS postedObject;

// ----------------------------------- Шаблоны ------------------------------------------ //

// ----------------------------------- Свойство объект-дата------------------------------------------ //
META metaCodeObjectDateProperty(prop, object, caption, type, group)

    prop##Date caption = DATA type (object, DATE) IN group;
    date##prop (object, date) = GROUP MAX dateIn AND prop##Date(object, dateIn) AND dateIn <= (date AS DATE) BY object, date;
    prop caption (object) = prop##Date(object, date##prop(object, currentDate())) IN group;

    FORM add##prop caption
    OBJECTS a=object FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, OBJVALUE(d), prop##Date(a, d);
    DESIGN add##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
    }

    showFormAdd##prop 'Добавить' (object) = ACTION FORM add##prop OBJECTS a MODAL;

    FORM prop caption
    OBJECTS a=object FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, showFormAdd##prop(a), OBJVALUE(d), prop##Date(a, d)
    FILTERS NOT NULL prop##Date(a, d);
    DESIGN prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
    }

    showForm##prop caption (object) = ACTION FORM prop OBJECTS a MODAL SHORTCUT prop DEFAULT;

END

// ---------------------------------- Свойство объект-дата для (пример, стат.класса)------------------------------------------ //

META metaCodeNameObjectDateProperty(prop, object, caption, type, group)

    prop##Date caption = DATA type (object, DATE) IN group;
    name##prop##Date caption (object, date) = name(prop##Date(object, date));
    date##prop (object, date) = GROUP MAX dateIn AND prop##Date(object, dateIn) AND dateIn <= (date AS DATE) BY object, date;
    prop caption (object) = prop##Date(object, date##prop(object, currentDate()));
    name##prop caption (object) = name(prop(object)) IN group;

    FORM addName##prop caption
    OBJECTS a=object FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, OBJVALUE(d), name##prop##Date(a, d);
    DESIGN addName##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
    }

    showFormAddName##prop 'Добавить' (object) = ACTION FORM addName##prop OBJECTS a MODAL;

    FORM name##prop caption
    OBJECTS a=object FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, showFormAddName##prop(a), OBJVALUE(d), name##prop##Date(a, d)
    FILTERS NOT NULL prop##Date(a, d);
    DESIGN name##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
    }

    showFormName##prop caption (object) = ACTION FORM name##prop OBJECTS a MODAL SHORTCUT name##prop DEFAULT;

END

// ----------------------------------- Свойство объект1-объект2-дата------------------------------------------ //
META metaCodeDoubleObjectDateProperty(prop, object1, object2, caption, type, group)

    prop##Date caption = DATA type (object1, object2, DATE) IN group;
    date##prop (object1, object2, date) = GROUP MAX dateIn AND prop##Date(object1, object2, dateIn) AND dateIn <= (date AS DATE) BY object1, object2, date;
    prop##Val caption (object1, object2, date) = prop##Date(object1, object2, date##prop(object1, object2, date));
    prop caption (object1, object2) = prop##Val(object1, object2, currentDate()) IN group;
    prop##Over caption = UNION OVERRIDE prop##Val(object1, object2, date), prop##Date(object1, object2, date);

    FORM add##prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, name(b) READONLY, OBJVALUE(d), prop##Date(a, b, d);
    DESIGN add##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
    }

    showFormAdd##prop 'Добавить' (object1, object2) = ACTION FORM add##prop OBJECTS a, b MODAL;

    FORM prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, name(b) READONLY, showFormAdd##prop(a, b), OBJVALUE(d), prop##Date(a, b, d)
    FILTERS NOT NULL prop##Date(a, b, d);
    DESIGN prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
    }

    showForm##prop caption (object1, object2) = ACTION FORM prop OBJECTS a, b MODAL SHORTCUT prop DEFAULT;
    showForm##prop##Over caption (object1, object2) = ACTION FORM prop OBJECTS a, b MODAL SHORTCUT prop##Over;

END
// ----------------------------------- Свойство объект1-объект2-дата для yesNo со значением по-умолчанию НЕТ------------------------------------------ //

META metaCodeNameDoubleObjectDateProperty(prop, object1, object2, caption, type, group)

    prop##Date caption = DATA type (object1, object2, DATE) IN group;
    name##prop##Date caption (object1, object2, date) = name(prop##Date(object1, object2, date));
    date##prop (object1, object2, date) = GROUP MAX dateIn AND prop##Date(object1, object2, dateIn) AND dateIn <= (date AS DATE) BY object1, object2, date;
    prop##Val caption (object1, object2, date) = prop##Date(object1, object2, date##prop(object1, object2, date));
    prop caption (object1, object2) = UNION OVERRIDE yesNo.no AND object1 IS object1 AND object2 IS object2,
                                                     prop##Date(object1, object2, date##prop(object1, object2, currentDate()));
    name##prop caption (object1, object2) = name(prop(object1, object2)) IN group;

    prop##Over caption = UNION OVERRIDE yesNo.no AND object1 IS object1 AND object2 IS object2 AND date IS DATE, prop##Val(object1, object2, date), prop##Date(object1, object2, date);
    name##prop##Over caption (object1, object2, date) = name(prop##Over(object1, object2, date)) FIXEDCHARWIDTH 7;

    FORM addName##prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, name(b) READONLY, OBJVALUE(d), name##prop##Date(a, b, d);
    DESIGN addName##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
    }

    showFormAddName##prop 'Добавить' (object1, object2) = ACTION FORM addName##prop OBJECTS a, b MODAL;

    FORM name##prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, name(b) READONLY,  showFormAddName##prop(a, b), OBJVALUE(d), name##prop##Date(a, b, d)
    FILTERS NOT NULL prop##Date(a, b, d);
    DESIGN name##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
    }

    showFormName##prop caption (object1, object2) = ACTION FORM name##prop OBJECTS a, b MODAL SHORTCUT name##prop DEFAULT;
    showFormName##prop##Over caption (object1, object2) = ACTION FORM name##prop OBJECTS a, b MODAL SHORTCUT name##prop##Over;

END

// ----------------------------------- Свойство объект1-объект2-объект3-дата------------------------------------------ //
META metaCodeTripleObjectDateProperty(prop, object1, object2, object3, caption, type, group)

    prop##Date caption = DATA type (object1, object2, object3, DATE) IN group;
    date##prop (object1, object2, object3, date) = GROUP MAX dateIn AND prop##Date(object1, object2, object3, dateIn) AND dateIn <= (date AS DATE) BY object1, object2, object3, date;
    prop##Val caption (object1, object2, object3, date) = prop##Date(object1, object2, object3, date##prop(object1, object2, object3, date));
    prop caption (object1, object2, object3) = prop##Val(object1, object2, object3, currentDate()) IN group;
    prop##Over caption = UNION OVERRIDE prop##Val(object1, object2, object3, date), prop##Date(object1, object2, object3, date);

    FORM add##prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, c=object3  FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, name(b) READONLY, name(c) READONLY, OBJVALUE(d), prop##Date(a, b, c, d);
    DESIGN add##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
        PROPERTY(name(c)) { focusable = FALSE; }
    }

    showFormAdd##prop 'Добавить' (object1, object2, object3) = ACTION FORM add##prop OBJECTS a, b, c MODAL;

    FORM prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, c=object3 FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, name(b) READONLY, name(c) READONLY, showFormAdd##prop(a, b, c), OBJVALUE(d), prop##Date(a, b, c, d)
    FILTERS NOT NULL prop##Date(a, b, c, d);
    DESIGN prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
        PROPERTY(name(c)) { focusable = FALSE; }
    }

    showForm##prop caption (object1, object2, object3) = ACTION FORM prop OBJECTS a, b, c MODAL SHORTCUT prop DEFAULT;
    showForm##prop##Over caption (object1, object2, object3) = ACTION FORM prop OBJECTS a, b, c MODAL SHORTCUT prop##Over;

END
// -------------------- Свойство объект1-объект2-объект3-дата для yesNo со значением по-умолчанию НЕТ---------------------------- //

META metaCodeNameTripleObjectDateProperty(prop, object1, object2, object3, caption, type, group)

    prop##Date caption = DATA type (object1, object2, object3, DATE) IN group;
    name##prop##Date caption (object1, object2, object3, date) = name(prop##Date(object1, object2, object3, date));
    date##prop (object1, object2, object3, date) = GROUP MAX dateIn AND prop##Date(object1, object2, object3, dateIn) AND dateIn <= (date AS DATE) BY object1, object2, object3, date;
    prop##Val caption (object1, object2, object3, date) = prop##Date(object1, object2, object3, date##prop(object1, object2, object3, date));
    prop caption (object1, object2, object3) = UNION OVERRIDE yesNo.no AND object1 IS object1 AND object2 IS object2 AND  object3 IS object3,
                                                     prop##Val(object1, object2, object3, currentDate());
    name##prop caption (object1, object2, object3) = name(prop(object1, object2, object3)) IN group;

    prop##Over caption = UNION OVERRIDE yesNo.no AND object1 IS object1 AND object2 IS object2 AND object3 IS object3 AND date IS DATE,
                                        prop##Val(object1, object2, object3, date), prop##Date(object1, object2, object3, date);
    name##prop##Over caption (object1, object2, object3, date) = name(prop##Over(object1, object2, object3, date)) FIXEDCHARWIDTH 7;

    FORM addName##prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL,  c=object3 FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, name(b) READONLY, name(c) READONLY, OBJVALUE(d), name##prop##Date(a, b, c, d);
    DESIGN addName##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
        PROPERTY(name(c)) { focusable = FALSE; }
    }

    showFormAddName##prop 'Добавить' (object1, object2, object3) = ACTION FORM addName##prop OBJECTS a, b, c MODAL;

    FORM name##prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, c=object3 FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, name(b) READONLY, name(c) READONLY, showFormAddName##prop(a, b, c), OBJVALUE(d), name##prop##Date(a, b, c, d)
    FILTERS NOT NULL prop##Date(a, b, c, d);
    DESIGN name##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
        PROPERTY(name(c)) { focusable = FALSE; }
    }

    showFormName##prop caption (object1, object2, object3) = ACTION FORM name##prop OBJECTS a, b, c MODAL SHORTCUT name##prop DEFAULT;
    showFormName##prop##Over caption (object1, object2, object3) = ACTION FORM name##prop OBJECTS a, b, c MODAL SHORTCUT name##prop##Over;

END

// ----------------------------------- Отображение атрибутов товаров по свойству товарной группы ------------------------------------------ //
META metaCodeShowItemAttribute (attribute, caption, group)

show##attribute##ItemGroup caption (itemGroup) = DATA BOOLEAN (itemGroup) IN group;
toShow##attribute caption (item) = show##attribute##ItemGroup(itemGroupSku(item));
show##attribute##ItemGroup(itemGroup) <- TRUE ON ASSIGN itemGroup IS itemGroup;

END

// ----------------------------------- Товарный классификатор ------------------------------------------ //
CLASS itemGroup 'Товарная группа' : named, externalObject;

parentItemGroup = DATA itemGroup (itemGroup) AUTOSET;
nameParentItemGroup 'Родительская группа' = name(parentItemGroup(itemGroup));
maxTurnoverItemGroup 'Максимально допустимая товарооборачиваемость' (itemGroup) = DATA INTEGER (itemGroup);
minTurnoverItemGroup 'Минимально допустимая товарооборачиваемость' (itemGroup) = DATA INTEGER (itemGroup);

// формы за формами товара

// ----------------------------------- Единицы измерения ------------------------------------------ //
CLASS unitOfMeasure 'Единица измерения' : doubleNamed;

unitOfMeasureUnitOfMeasure 'Базовая ед.изм. ИД' = DATA unitOfMeasure(unitOfMeasure) IN idGroup;
shortNameUnitOfMeasureUnitOfMeasure 'Базовая ед.изм.' (unitOfMeasure) = shortName(unitOfMeasureUnitOfMeasure(unitOfMeasure)) IN baseGroup;
rightUnitOfMeasure 'Разместить от значения: справа' = DATA BOOLEAN (unitOfMeasure) IN baseGroup;
useUnitOfMeasure 'Используется' = DATA BOOLEAN (unitOfMeasure) IN baseGroup;
factorUnitOfMeasure 'Коэффициент пересчета в баз.ед.' = DATA DOUBLE (unitOfMeasure) IN baseGroup;
weightUnitOfMeasure 'Для весовых товаров/услуг' = DATA BOOLEAN (unitOfMeasure) IN baseGroup;
pieceUnitOfMeasure 'Для штучных товаров/услуг' = DATA BOOLEAN (unitOfMeasure) IN baseGroup;


FORM unitOfMeasure 'Единица измерения'
OBJECTS u=unitOfMeasure FIXED PANEL
PROPERTIES(u) name, shortName, shortNameUnitOfMeasureUnitOfMeasure, factorUnitOfMeasure, rightUnitOfMeasure,
              useUnitOfMeasure, weightUnitOfMeasure, pieceUnitOfMeasure
EDIT unitOfMeasure OBJECT u;

FORM unitsOfMeasure 'Единицы измерений'
OBJECTS u=unitOfMeasure
PROPERTIES(u) READONLY name, shortName, shortNameUnitOfMeasureUnitOfMeasure, factorUnitOfMeasure, rightUnitOfMeasure,
              useUnitOfMeasure, weightUnitOfMeasure, pieceUnitOfMeasure
PROPERTIES(u) ADDFORM, EDITFORM, delete;

// ------------------------------------ Цвета ------------------------------------------------ //
CLASS color 'Цвет' : named;

FORM color 'Цвет'
OBJECTS c=color FIXED PANEL
PROPERTIES(c) name;

// ------------------------------------ Вкусы ------------------------------------------------------ //
CLASS taste 'Вкус' : named;

FORM taste 'Вкус'
OBJECTS t=taste FIXED PANEL
PROPERTIES(t) name;

// ----------------------------------- Производители ---------------------------------- //
//CLASS manufacturer 'Производитель' : named;

//------------------------------------ Сорта-категории --------------------------------- //
CLASS sort 'Сорт/Категория' : named;

FORM sort 'Сорт/Категория'
OBJECTS s=sort FIXED PANEL
PROPERTIES(s) name;

//------------------------------------ Упаковки ----------------------------------------//
CLASS pack 'Упаковка' : doubleNamed;

FORM pack 'Упаковка'
OBJECTS p=pack FIXED PANEL
PROPERTIES(p) name, shortName;

//------------------------------------ Особенности изготовления ------------------------//
CLASS specialty 'Особенность' : doubleNamed;

FORM specialty 'Особенность'
OBJECTS s=specialty FIXED PANEL
PROPERTIES(s) name, shortName;

//------------------------------------ Размеры/Калибры/Габариты ------------------------//
CLASS size 'Размер/калибр' : doubleNamed;

FORM size 'Размер/калибр'
OBJECTS s=size FIXED PANEL
PROPERTIES(s) name, shortName;

//------------------------------------ Степень охлаждения ------------------------//
CLASS coolingDegree 'Степень охлаждения' : doubleNamed;

FORM coolingDegree 'Степень охлаждения'
OBJECTS c=coolingDegree FIXED PANEL
PROPERTIES(c) name, shortName;

//------------------------------- Ценники ------------------------------------//
CLASS tag 'Ценник' : named;

FORM tag 'Ценник'
OBJECTS t=tag FIXED PANEL
PROPERTIES(t) name;

//------------------------------- Строки 1-торг ------------------------------------//
CLASS rowTorg1 'Строка формы 1-торг' : named;

FORM rowTorg1 'Строка формы 1-торг'
OBJECTS r=rowTorg1 FIXED PANEL
PROPERTIES(r) name;

//------------------------------- Виды ------------------------------------//
CLASS typeItem 'Вид' : named;

FORM typeItem 'Вид'
OBJECTS t=typeItem FIXED PANEL
PROPERTIES(t) name;

//--------------------------------- Форма товара (особенности нарезки/разделки)  --------------------------//
CLASS formItem 'Форма товара' : named;

FORM formItem 'Форма товара'
OBJECTS f=formItem FIXED PANEL
PROPERTIES(f) name;

//--------------------------------- Кол-во в упаковке --------------------------//
CLASS numberInPack 'Кол-во в упаковке' : named;

FORM numberInPack 'Кол-во в упаковке'
OBJECTS n=numberInPack FIXED PANEL
PROPERTIES(n) name;

//---------------------------------- Норма отходов ------------------------------------//
CLASS rateWaste 'Норма отходов' : named;

percentRateWaste 'Норма,%' = DATA DOUBLE (rateWaste) IN baseGroup;

FORM rateWaste 'Норма отходов'
OBJECTS r=rateWaste FIXED PANEL
PROPERTIES(r) name, percentRateWaste;

// ----------------------------------- Товар ------------------------------------------ //
GROUP descriptionGroup 'Для наименования' : publicGroup;
GROUP rateGroup 'Нормы' : publicGroup;
GROUP headGroup 'Базовые свойства' : baseGroup;
GROUP sizeGroup 'Ячеистое хранение' : publicGroup;
GROUP retailGroup 'Ценообразование' : publicGroup;
GROUP discountGroup 'Скидки' : retailGroup;
GROUP expiryGroup 'Контроль сроков годности' : publicGroup;
GROUP equipmentGroup 'Внешние устройства' : publicGroup;
GROUP substanceGroup 'Пищевые характеристики' : publicGroup;
GROUP tagGroup 'Ценник' : publicGroup;

GROUP manufactoryGroup 'Производство' : publicGroup;
GROUP orderGroup 'Заказ' : publicGroup;
GROUP barGroup 'Бар' : publicGroup;
GROUP documentGroup 'Для документов' : publicGroup;
GROUP displayGroup 'Свойства для отображения' : baseGroup;

CLASS ABSTRACT sku 'SKU' : named;
CLASS item 'Товар' : sku;
CLASS ware 'Посуда' : sku, named;

CLASS brand 'Бренд' : named;

CLASS STATIC groupProduct 'Группа изделий для печати заборного листа'
{
   hot 'Горячее',
   cold  'Холодное'
};

//baseGroup
itemGroupSku = DATA itemGroup(sku) IN idGroup AUTOSET;
nameItemGroupSku 'Группа товара' = name(itemGroupSku(sku)) IN baseGroup;

//descriptionGroup
captionItem 'Наименование' = DATA STRING[100](item) IN descriptionGroup;
@metaCodeShowItemAttribute(Caption, 'Показывать наименование', displayGroup);

brandItem = DATA brand(item);
nameBrandItem 'Бренд' (item) = name(brandItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Brand, 'Показывать бренд', displayGroup);

typeItemItem = DATA typeItem(item) IN idGroup;
nameTypeItemItem 'Вид' = name(typeItemItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Type, 'Показывать тип', displayGroup);

unitOfMeasureItem = DATA unitOfMeasure (item) IN idGroup;
shortNameUnitOfMeasureItem 'Единица измерения' (item) = shortName(unitOfMeasureItem(item)) IN headGroup;
@metaCodeShowItemAttribute(UnitOfMeasure, 'Показывать ед.измерения', displayGroup);

sortItem = DATA sort(item) IN idGroup;
nameSortItem 'Сорт/категория товара' = name(sortItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Sort, 'Показывать сорт', displayGroup);

packItem = DATA pack(item) IN idGroup;
shortNamePackItem 'Упаковка' = shortName(packItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Pack, 'Показывать упаковку', displayGroup);

specialtyItem = DATA specialty(item) IN idGroup;
shortNameSpecialtyItem 'Особенности' = shortName(specialtyItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Specialty, 'Показывать особенности', displayGroup);

sizeItem = DATA size(item) IN idGroup;
shortNameSizeItem 'Размер/калибр' = shortName(sizeItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Size, 'Показывать размер', displayGroup);

colorItem = DATA color (item) IN idGroup;
nameColorItem 'Цвет' = name(colorItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Color, 'Показывать цвет', displayGroup);

tasteItem = DATA taste (item) IN idGroup;
nameTasteItem 'Вкус' = name(tasteItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Taste, 'Показывать вкус', displayGroup);

hallmarkItem 'Отличительный признак (особенности)' = DATA STRING[100] (item) IN descriptionGroup;
@metaCodeShowItemAttribute(Hallmark, 'Показывать отличительный признак', displayGroup);

articleItem 'Артикул поставщика/производителя' = DATA STRING[100] (item) IN descriptionGroup;

coolingDegreeItem 'Степень охлаждения (ИД)' = DATA coolingDegree (item) IN idGroup;
nameCoolingDegreeItem 'Степень охлаждения' = name(coolingDegreeItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(CoolingDegree, 'Показывать степень охлаждения', displayGroup);

countryItem = DATA country (item) IN idGroup;
nameCountryItem 'Страна' = name(countryItem(item)) IN headGroup;
@metaCodeShowItemAttribute(Country, 'Показывать страну', displayGroup);

isManufacturedItem 'Товар производится' = DATA BOOLEAN (item) IN manufactoryGroup;
hintItem 'Подсказка по товару' = DATA STRING[200] (item) IN documentGroup;

formItemItem = DATA formItem (item) IN idGroup;
nameFormItemItem 'Форма товара (особенности нарезки/разделки)' = name(formItemItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(FormItem, 'Показывать форму', displayGroup);

numberInPackItem = DATA numberInPack (item) IN idGroup;
nameNumberInPackItem 'Кол-во в упаковке' = name(numberInPackItem(item)) IN orderGroup;
@metaCodeShowItemAttribute(NumberInPack, 'Показывать кол-во в упаковке', displayGroup);

rateWasteItem = DATA rateWaste(item) IN idGroup;
nameRateWasteItem 'Норма отходов' = name(rateWasteItem(item)) IN rateGroup;
percentRateWasteItem 'Норма отходов,%' = percentRateWaste(rateWasteItem(item)) IN rateGroup;
@metaCodeShowItemAttribute(RateWaste, 'Показывать норму отходов', displayGroup);

wareItem = DATA ware (item) IN idGroup;
nameWareItem 'Посуда' = name(wareItem(item)) IN retailGroup;
@metaCodeShowItemAttribute(Ware, 'Показывать посуду', displayGroup);

//equipmentGroup
isWeightItem 'Весовой товар' = DATA BOOLEAN (item) IN equipmentGroup;
isWeightedItem 'Признак взвешиваемого товара' = DATA BOOLEAN (item) IN equipmentGroup;
compositionScalesItem 'Состав товара (ингредиенты) для весов' = DATA TEXT (item) IN equipmentGroup;
isMarkItem 'Маркировать товар' = DATA BOOLEAN (item) IN equipmentGroup;
isLoafCutItem 'Буханка разрезается' = DATA BOOLEAN (item) IN equipmentGroup;
passScalesItem 'Передавать на весы' = DATA BOOLEAN (item) IN equipmentGroup;

//substanceGroup
percentFatItem '% жирности' =  DATA DOUBLE (item) IN substanceGroup;
percentAlcoholItem '% алкоголя' =  DATA DOUBLE (item) IN substanceGroup;
nutritionalValueItem 'Энергетическая и пищевая ценность' = DATA STRING[400] (item) IN substanceGroup MINCHARWIDTH 50;
energyItem 'Энергетическая ценность на 100г, ккал' = DATA DOUBLE (item) IN substanceGroup;
fatsItem 'Жиры на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
carbohydratesItem 'Углеводы на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
proteinsItem 'Белки на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
isContainGMOItem 'Содержит ГМО' = DATA BOOLEAN (item) IN substanceGroup;

//tagGroup
tagItem 'Ценник (ИД)' = DATA tag (item) IN idGroup;
nameTagItem 'Ценник' = name(tagItem(item)) IN tagGroup;
multiplierItem 'Множитель для печати ценника' = DATA DOUBLE (item) IN tagGroup;

//sizeGroup
lengthItem 'Длина товара' = DATA INTEGER (item) IN sizeGroup;
widthItem 'Ширина товара' = DATA INTEGER (item) IN sizeGroup;
heightItem 'Высота товара' = DATA INTEGER (item) IN sizeGroup;
grossWeightItem 'Вес брутто товара' = DATA DOUBLE (item) IN manufactoryGroup;
lengthPackItem 'Длина упаковки' = DATA INTEGER (item) IN sizeGroup;
widthPackItem 'Ширина упаковки' = DATA INTEGER (item) IN sizeGroup;
heightPackItem 'Высота упаковки' = DATA DOUBLE (item) IN sizeGroup;
grossWeightPackItem 'Вес брутто упаковки' = DATA DOUBLE (item) IN manufactoryGroup;
volumeItem 'Объём' = DATA DOUBLE (item) IN sizeGroup;
netWeightItem 'Вес нетто' = DATA DOUBLE (item) IN orderGroup;
quantityPackItem 'Количество в грузовом месте' = DATA DOUBLE (item) IN orderGroup;

//retailGroup
minQuantityOrderItem 'Минимальный заказ' = DATA INTEGER (item) IN orderGroup;
minReserveItem 'Минимальный резерв' = DATA INTEGER (item) IN orderGroup;
bonusReturnItem 'Уценка (бонус) по товару при возврате поставщику' = DATA DOUBLE (item) IN documentGroup;
nameReturnItem 'Наименование для уценки, бонуса по товару в возврат' = DATA STRING[200] (item) IN documentGroup;
quantityDiscountItem 'Количество товара, при котором предост-ся скидка' = DATA INTEGER (item) IN discountGroup;
fixPriceItem 'Фиксированная цена при соотв.типе скидки' = DATA INTEGER (item) IN discountGroup;
isFixPriceItem 'Товар с фиксированной ценой' = DATA BOOLEAN (item) IN retailGroup;
banMarkdownItem 'Запретить уценку товара' = DATA BOOLEAN (item) IN retailGroup;
oldPriceItem 'Старая цена для печати на ценник' = DATA DOUBLE (item) IN retailGroup;
minTradeAllowanceItem 'MIN допустимая торговая надбавка, %' = DATA DOUBLE (item) IN retailGroup;
maxTradeAllowanceItem 'MAX допустимая торговая надбавка, %' = DATA DOUBLE (item) IN retailGroup;
minAllowedRetailPriceItem 'MIN допустимая розн.цена' = DATA INTEGER (item) IN retailGroup;
bonusItem 'Бонус получаемый по товару' = DATA DOUBLE (item) IN documentGroup;
percentWholesaleMarkItem '% оптовой надбавки' = DATA DOUBLE (item) IN retailGroup;
banSailItem 'Запрет продаж товара в указанное время' = DATA STRING[200] (item) IN equipmentGroup;


//manufactoryGroup
isCrudeItem 'Товар-сырьё для калькуляции?' = DATA BOOLEAN (item) IN manufactoryGroup;

groupProductItem = DATA groupProduct (item) IN idGroup;
nameGroupProductItem 'Группа изделий для печати заборного листа' = name(groupProductItem(item)) IN manufactoryGroup;

compositionMenuItem 'Состав изделия для печати в меню' = DATA STRING[400] (item)IN manufactoryGroup MINCHARWIDTH 50;
standartItem 'Стандарт изготовления изделия (СТБ и пр.)' = DATA STRING[100] (item) IN manufactoryGroup MINCHARWIDTH 50;
normOutItem 'Норма выхода для печати в меню и калькуляцию' = DATA STRING[100] (item) IN manufactoryGroup MINCHARWIDTH 50;
groupMenuItem 'Группа для печати в меню' = DATA STRING[100] (item) IN manufactoryGroup MINCHARWIDTH 50;
isCutedItem 'Товар разрубается/прорабатывается' = DATA BOOLEAN (item) IN manufactoryGroup;
storageTemperatureItem 'Температура хранения' =  DATA STRING[100] (item) IN equipmentGroup MINCHARWIDTH 50;

//expiryGroup
controlExpiryItem 'Контролировать сроки годности товара?' = DATA BOOLEAN (item) IN expiryGroup;
daysExpiryItem 'Срок годности в днях' = DATA DOUBLE (item) IN expiryGroup;
daysExpiryPackItem 'Срок годности в днях с момента фасовки' = DATA DOUBLE (item) IN expiryGroup;
hoursExpiryPackItem 'Срок годности в часах с момента фасовки' = DATA INTEGER (item) IN expiryGroup;

rowTorg1Item 'Строка формы 1-торг (ИД)' = DATA rowTorg1(item) IN idGroup;

// ----------------------------------- Атрибуты ------------------------------------------ //

CLASS ABSTRACT itemAttribute 'Атрибут товара' : named;

CLASS STATIC stringItemAttribute 'Строковый атрибут' {
    captionItem 'Наименование',
    article 'Артикул'
} : itemAttribute;

valueCaptionItemAttribute(item, attribute) = castToString255(captionItem(item)) AND attribute == stringItemAttribute.captionItem;
valueArticleItemAttribute(item, attribute) = castToString255(articleItem(item)) AND attribute == stringItemAttribute.article;

valueStringItemAttribute(item, attribute) = UNION EXCLUSIVE  valueCaptionItemAttribute(item, attribute),
                                                             valueArticleItemAttribute(item, attribute);

CLASS STATIC integerItemAttribute 'Целочисленный атрибут' {
    length 'Длина',
    width 'Ширина',
    height 'Высота'
} : itemAttribute;

valueLengthItemAttribute(item, attribute) = lengthItem(item) AND attribute == integerItemAttribute.length;
valueWidthItemAttribute(item, attribute) = widthItem(item) AND attribute == integerItemAttribute.width;
valueHeightItemAttribute(item, attribute) = heightItem(item) AND attribute == integerItemAttribute.height;

valueIntegerItemAttribute(item, attribute) = UNION EXCLUSIVE valueLengthItemAttribute(item, attribute),
                                                             valueWidthItemAttribute(item, attribute),
                                                             valueHeightItemAttribute(item, attribute);
stringIntegerItemAttribute(item, attribute) = castToString255(valueIntegerItemAttribute(item, attribute));

CLASS STATIC doubleItemAttribute 'Дробный атрибут' {
    netWeight 'Вес нетто',
    grossWeight 'Вес брутто'
} : itemAttribute;

valueNetWeightItemAttribute(item, attribute) = netWeightItem(item) AND attribute == doubleItemAttribute.netWeight;
valueGrossWeightItemAttribute(item, attribute) = grossWeightItem(item) AND attribute == doubleItemAttribute.grossWeight;

valueDoubleItemAttribute(item, attribute) = UNION EXCLUSIVE valueNetWeightItemAttribute(item, attribute),
                                                            valueGrossWeightItemAttribute(item, attribute);
stringDoubleItemAttribute(item, attribute) = castToString255(valueDoubleItemAttribute(item, attribute));

CLASS STATIC booleanItemAttribute 'Логический атрибут' {
    fixPrice 'Товар с фиксированной ценой',
    manufactured 'Товар производится'
} : itemAttribute;

valueFixPriceWeightItemAttribute(item, attribute) = isFixPriceItem(item) AND attribute == booleanItemAttribute.fixPrice;
valueManufacturedItemAttribute(item, attribute) = isManufacturedItem(item) AND attribute == booleanItemAttribute.manufactured;

valueBooleanItemAttribute(item, attribute) = UNION EXCLUSIVE valueFixPriceWeightItemAttribute(item, attribute),
                                                             valueManufacturedItemAttribute(item, attribute);
stringBooleanItemAttribute(item, attribute) = castToString255(valueBooleanItemAttribute(item, attribute));

CLASS STATIC objectItemAttribute 'Объектный атрибут' {
    unitOfMeasure 'Единица измерения',
    brand 'Брэнд',
    typeItem 'Вид',
    sort 'Сорт/категория',
    pack 'Упаковка',
    specialty 'Особенность',
    size 'Размер/калибр',
    coolingDegree 'Степень охлаждения',
    color 'Цвет',
    taste 'Вкус'

} : itemAttribute;

valueUOMItemAttribute(item, attribute) = unitOfMeasureItem(item) AND attribute == objectItemAttribute.unitOfMeasure;
valueBrandItemAttribute(item, attribute) = brandItem(item) AND attribute == objectItemAttribute.brand;
valueTypeItemAttribute(item, attribute) = typeItemItem(item) AND attribute == objectItemAttribute.typeItem;
valueSortItemAttribute(item, attribute) = sortItem(item) AND attribute == objectItemAttribute.sort;
valuePackItemAttribute(item, attribute) = packItem(item) AND attribute == objectItemAttribute.pack;
valueSpecialtyItemAttribute(item, attribute) = specialtyItem(item) AND attribute == objectItemAttribute.specialty;
valueSizeItemAttribute(item, attribute) = sizeItem(item) AND attribute == objectItemAttribute.size;
valueCoolingDegreeItemAttribute(item, attribute) = coolingDegreeItem(item) AND attribute == objectItemAttribute.coolingDegree;
valueColorItemAttribute(item, attribute) = colorItem(item) AND attribute == objectItemAttribute.color;
valueTasteItemAttribute(item, attribute) = tasteItem(item) AND attribute == objectItemAttribute.taste;

valueObjectItemAttribute(item, attribute) = UNION EXCLUSIVE valueUOMItemAttribute(item, attribute),
                                                            valueBrandItemAttribute(item, attribute),
                                                            valueTypeItemAttribute(item, attribute),
                                                            valueSortItemAttribute(item, attribute),
                                                            valuePackItemAttribute(item, attribute),
                                                            valueSpecialtyItemAttribute(item, attribute),
                                                            valueSizeItemAttribute(item, attribute),
                                                            valueCoolingDegreeItemAttribute(item, attribute),
                                                            valueColorItemAttribute(item, attribute),
                                                            valueTasteItemAttribute(item, attribute) PERSISTENT;
nameObjectItemAttribute(item, attribute) = name(valueObjectItemAttribute(item, attribute));

valueItemAttribute(item, attribute) = UNION EXCLUSIVE valueStringItemAttribute(item, attribute),
                                                      stringIntegerItemAttribute(item, attribute),
                                                      stringDoubleItemAttribute(item, attribute),
                                                      stringBooleanItemAttribute(item, attribute),
                                                      nameObjectItemAttribute(item, attribute) PERSISTENT;

numberInNameItemAttribute 'Порядковый номер в наименовании' = DATA INTEGER (itemAttribute) IN baseGroup;

nameAttributeItem 'Имя' (item) = GROUP CONCAT valueItemAttribute(item, attribute), ' ' BY item ORDER numberInNameItemAttribute(attribute) IN recognizeGroup PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 80;

// ----------------------------------- Штрих код ------------------------------------------ //
GROUP barcodeGroup : baseGroup;

CLASS barcode 'Штрих код' : barcodeObject;

inSkuBarcode 'Присоединение штрих-кода к товару' = DATA BOOLEAN (sku, barcode) IN baseGroup;

titleScalesBarcode 'Наименование для весов' = DATA STRING[100] (barcode) IN barcodeGroup;
titleCashBarcode 'Наименование для касс' = DATA STRING[100] (barcode) IN barcodeGroup;
unitOfMeasureBarcode = DATA unitOfMeasure (barcode) IN idGroup;
shortNameUnitOfMeasureBarcode 'Единица измерения' (barcode) = shortName(unitOfMeasureBarcode(barcode)) IN barcodeGroup;
amountBarcode 'Количество (сколько списать при продаже)' = DATA INTEGER (barcode) IN barcodeGroup;
removeBarcode 'Заблокирован (удален с оборудования)' = DATA BOOLEAN (barcode) IN barcodeGroup;
commentRemoveBarcode 'Причина блокировки' = DATA STRING[100] (barcode) IN barcodeGroup;

userBarcodeSku = DATA barcode(sku) IN idGroup;
//barcodeUserBarcodeSku 'Установленный штрих-код' = barcode(userBarcodeSku(sku)) IN baseGroup;

defaultBarcodeSku(sku) = GROUP MAX barcode IF inSkuBarcode(sku, barcode) BY sku IN idGroup;
barcodeSku(sku) = UNION OVERRIDE defaultBarcodeSku(sku), userBarcodeSku(sku) IN baseGroup;

CONSTRAINT CHECKED item IS item AND NOT inSkuBarcode(item, barcodeSku(item)) MSG 'Товар основного штрих-кода должен совпадать с товаром';

barcodeBarcodeSku  'Основной штрих-код' = barcode(barcodeSku(sku)) IN baseGroup;

barcodeToBarcode (barcode) = GROUP UNIQUE barcode BY barcode(barcode);

FORM barcode 'Штрих-код'
OBJECTS b=barcode
PROPERTIES(b) barcode;


// ----------------------------------- Компоненты ------------------------------------------ //
CLASS component 'Компонент' : sku;

nettoBruttoCoeffComponent 'Сезонный коэффициент пересчета сырья из нетто в брутто' (component) = DATA DOUBLE (component) IN manufactoryGroup;
percentHumidityFlourDepartmentStoreComponent '% влажности муки' = DATA DOUBLE (departmentStore, component) IN manufactoryGroup;

FORM component 'Компонент'
OBJECTS c=component FIXED PANEL
PROPERTIES(c) name, nettoBruttoCoeffComponent
EDIT component OBJECT c;

FORM components 'Компоненты'
OBJECTS c=component
PROPERTIES(c) READONLY name, nettoBruttoCoeffComponent
PROPERTIES(c) ADDFORM, EDITFORM, delete;


// ----------------------------------- Генерация графика --------------------------------------- //

CLASS STATIC genType 'Тип генерации' {
    genWeek 'Генерация каждые N недель',
    genDays 'Генерация через N дней',
    genNumber 'Генерация по числам',
    genDayMonth 'Генерация по дням недели и месяца'
};

CLASS genTimeTable 'Генерация графика' : named;

genTimeTableType 'Тип генерации графика (ИД)' = DATA genType (genTimeTable);
nameGenTimeTableType 'Тип генерации графика' (genTimeTable) = name(genTimeTableType(genTimeTable)) IN baseGroup;
startDateGenTimeTable 'Дата начала' = DATA DATE (genTimeTable) IN baseGroup;
endDateGenTimeTable 'Дата окончания' = DATA DATE (genTimeTable) IN baseGroup;
supplierGenTimeTable 'Поставщик (ИД)' = DATA supplier (genTimeTable);
nameSupplierGenTimeTable 'Поставщик' (genTimeTable) = name(supplierGenTimeTable(genTimeTable)) IN baseGroup;
departmentStoreGenTimeTable 'Подразделение (ИД)' =DATA departmentStore (genTimeTable);
nameDepartmentStoreGenTimeTable 'Подразделение' (genTimeTable) = name(departmentStoreGenTimeTable(genTimeTable)) IN baseGroup;
dayBeforeGenTimeTable 'За сколько дней формировать заказ' = DATA INTEGER (genTimeTable);
dayAfterGenTimeTable 'Через сколько дней после последней поставки делать заказ' = DATA INTEGER (genTimeTable);
periodGenTimeTable 'По прошествии скольки недель будет осуществится следующая поставка' = DATA INTEGER (genTimeTable);
stringNumberGenTimeTable 'Числа месяца поставок (указывать через запятую)' = DATA STRING[100] (genTimeTable);
transferDayGenTimeTable 'День на который переносить поставки с Субботы и Воскресенья (ИД)' = DATA DOW (genTimeTable);
nameTransferDayGenTimeTable 'День на который переносить поставки с Субботы и Воскресенья' (genTimeTable) = name(transferDayGenTimeTable(genTimeTable));
CONSTRAINT CHECKED numberDOW(transferDayGenTimeTable(genTimeTable))!=5 AND numberDOW(transferDayGenTimeTable(genTimeTable))!=1 MSG 'Выберите день с ПН по ПТ';
dayLastOrderGenTimeTable 'Дата последнего заказа' = DATA DATE (genTimeTable);

inMonthGenTimeTable 'Включать' = DATA BOOLEAN (genTimeTable, month);
inDayGenTimeTable 'Включать' = DATA BOOLEAN (genTimeTable, DOW);
inAllMonthGenTable 'Включить все месяцы' = DATA BOOLEAN (genTimeTable);
inMonthGenTimeTable(genTimeTable, month) <- inAllMonthGenTable(genTimeTable) ON ASSIGN inAllMonthGenTable(genTimeTable) AND month IS month;

toShowGenWeek (genTimeTable) = genTimeTableType(genTimeTable) == genType.genWeek;
toShowGenDay (genTimeTable) = genTimeTableType(genTimeTable) == genType.genDays;
toShowGenNumber (genTimeTable) = genTimeTableType(genTimeTable) == genType.genNumber;
toShowGenDayMonth (genTimeTable) = genTimeTableType(genTimeTable) == genType.genDayMonth;
toShowGenWeekOrDayMonth (genTimeTable) = UNION OVERRIDE toShowGenWeek(genTimeTable), toShowGenDayMonth(genTimeTable);

FORM genTimeTable 'Генерация графика'
OBJECTS g=genTimeTable FIXED PANEL, m=month, d=DOW
PROPERTIES(g) nameGenTimeTableType, nameSupplierGenTimeTable, nameDepartmentStoreGenTimeTable, startDateGenTimeTable,
              endDateGenTimeTable, dayBeforeGenTimeTable,inAllMonthGenTable SHOWIF toShowGenDayMonth(g),
              dayAfterGenTimeTable SHOWIF toShowGenDay(g), periodGenTimeTable SHOWIF toShowGenWeek(g),
              stringNumberGenTimeTable SHOWIF toShowGenNumber(g), nameTransferDayGenTimeTable SHOWIF toShowGenNumber(g),
              dayLastOrderGenTimeTable SHOWIF toShowGenNumber(g)
PROPERTIES(m) READONLY name SHOWIF toShowGenDayMonth(g)
PROPERTIES(d) READONLY name SHOWIF toShowGenWeekOrDayMonth(g)
PROPERTIES(g, m) inMonthGenTimeTable SHOWIF toShowGenDayMonth(g)
PROPERTIES(g, d) inDayGenTimeTable SHOWIF toShowGenWeekOrDayMonth(g)
EDIT genTimeTable OBJECT g;

FORM genTimeTables 'Графики' //служит для добавления сущности "генерации графиков" и в дальнейшем будет удалена
OBJECTS g=genTimeTable
PROPERTIES(g) READONLY name
PROPERTIES(g) ADDFORM, EDITFORM, delete;

showFormGenTimeTable 'Добавить график' (genTimeTable) = ACTION FORM genTimeTable OBJECTS g MODAL;

// ----------------------------------- Склад ------------------------------------------ //

CLASS ABSTRACT stock 'Склад' : named;

// ----------------------------------- Магазин ----------------------------------------- //

CLASS store 'Магазин' : named;
CLASS tradingNetwork 'Торговая сеть' : named; // "Рублевский", "Базар"
CLASS storeType 'Формат магазина' : named; //Мини, Супер, ...

companyStore 'Юридическое лицо магазина (ИД)' = DATA company (store);
nameCompanyStore 'Юридическое лицо магазина' (store) = name(companyStore(store)) IN baseGroup;
addressStore 'Адрес магазина' = DATA STRING[100] (store);

storeTypeStore 'Формат магазина (ИД)' = DATA storeType (store) AUTOSET;
nameStoreTypeStore 'Формат магазина' (store) = name(storeTypeStore(store)) IN baseGroup;
inStoreTypeStore (storeType, store) = storeTypeStore (store) == storeType;

tradingNetworkStoreType 'Торговая сеть формата магазина (ИД)' = DATA tradingNetwork (storeType);
nameTradingNetworkStoreType 'Торговая сеть формата магазина' (storeType) = name(tradingNetworkStoreType(storeType)) IN baseGroup;

tradingNetworkStore 'Торговая сеть магазина (ИД)' (store) = tradingNetworkStoreType(storeTypeStore(store));
nameTradingNetworkStore 'Торговая сеть магазина' (store) = name(tradingNetworkStore(store)) IN baseGroup;
inTradingNetworkStore (tradingNetwork, store) = tradingNetworkStore(store) == tradingNetwork;

inTradingNetworkStoreTypeStore (tradingNetwork, storeType, store) = UNION OVERRIDE
    storeTypeStore(store) == storeType AND tradingNetwork,
    tradingNetworkStore(store) == tradingNetwork AND NOT storeType,
    store IS store AND NOT storeType AND NOT tradingNetwork;

inStoreTypeTradingNetwork(storeType, tradingNetwork) = tradingNetworkStoreType(storeType) == tradingNetwork;

// ----------------------------------- Физические лица -------------------------------------------------- //

GROUP employeeGroup 'Пользовательская информация' : baseGroup;

CLASS ABSTRACT person 'Физическое лицо';
CLASS employee 'Сотрудник' : person, customUser;
CLASS employeeSystem 'Операционная система';


nameEmployeeSystem 'Операционная система' = DATA STRING[100] (employeeSystem) IN employeeGroup;
employeeSystemEmployee(employee) = DATA employeeSystem (employee) IN idGroup;
nameEmployeeSystemEmployee 'Операционная система на рабочем месте пользователя' (employee) = nameEmployeeSystem(employeeSystemEmployee(employee)) IN employeeGroup;

languageEmployee(employee) = DATA language (employee) IN idGroup;
nameLanguageEmployee 'Язык интерфейса' = name(languageEmployee(employee)) IN employeeGroup;
shortNameLanguageEmployee 'Язык интерфейса сокр.' = shortName(languageEmployee(employee)) IN employeeGroup;
numberEmployee 'Номер кассира для касс' = DATA STRING[10] (employee) IN employeeGroup;
passwordEmployee 'Пароль для касс' = DATA STRING[20] (employee) IN employeeGroup;
dataEmployee 'Данные для регистрации на кассе (штрих-код)' = DATA STRING[20] (employee) IN employeeGroup;


departmentStoreEmployee 'Сотрудник отдела' = DATA BOOLEAN (departmentStore, employee);
phoneEmployee 'Телефон' = DATA STRING[50] (employee) IN employeeGroup;


FORM employee 'Сотрудник'
OBJECTS e=employee FIXED PANEL, d=departmentStore
PROPERTIES(e) userFirstName, userLastName, phoneEmployee, nameEmployeeSystemEmployee, shortNameLanguageEmployee, numberEmployee,
              passwordEmployee, dataEmployee
PROPERTIES(d) name
PROPERTIES(d, e) departmentStoreEmployee
FILTERGROUP filterEmployeeDepartmentStore
    FILTER 'Показывать только отделы данного сотрудника' 'F10' NOT NULL departmentStoreEmployee(d, e)
EDIT employee OBJECT e;

FORM employees 'Сотрудники'
OBJECTS e=employee, d=departmentStore
PROPERTIES(e) READONLY userFirstName, userLastName
PROPERTIES(e) ADDFORM, EDITFORM, delete
PROPERTIES(d) READONLY name
FILTERS NOT NULL departmentStoreEmployee(d, e);

// ----------------------------------- Торговая площадь -------------------------------------------------- //

CLASS tradingSquare 'Торговая площадь' : named;
squareTradingSquare 'Размер торговой площади' = DATA DOUBLE (tradingSquare) IN baseGroup;
departmentStoreTradingSquare 'Отдел торговой площади (ИД)' = DATA departmentStore (tradingSquare);
nameDepartmentStoreTradingSquare 'Отдел торговой площади' (tradingSquare) = name(departmentStoreTradingSquare(tradingSquare)) IN baseGroup;
dateTradingSquare 'Дата' = DATA DATE (tradingSquare) IN baseGroup;

FORM tradingSquare 'Торговая площадь'
OBJECTS s=tradingSquare FIXED PANEL
PROPERTIES(s) name, squareTradingSquare, nameDepartmentStoreTradingSquare, dateTradingSquare
EDIT tradingSquare OBJECT s;

// ------------------------------------- Скидки ---------------------------------------------------------- //

TABLE departmentStoreDate (object, DATE);

@metaCodeNameObjectDateProperty(discount, departmentStore, 'Разрешать скидки', yesNo, baseGroup);

// ----------------------------------- Отдел магазина (Подразделение) ----------------------------------- //

CLASS departmentStore 'Отдел магазина' : stock;
CLASS kafeteria 'Кафетерий' : departmentStore;
CLASS tradingFloar 'Торговый зал' : departmentStore;
CLASS wholesaleStock 'Оптовый склад' : departmentStore;
CLASS placeOfAcceptance 'Приемный пункт' : departmentStore;
CLASS restaurant 'Ресторан' : departmentStore;
//CLASS stock 'Склад' : departmentStore; в дальнейшем будет распределительный центр
CLASS manufactory 'Цех' : departmentStore;

CLASS STATIC itemStatus 'Статус товара'
{
    notTransfer '0',
    transfer '1',
    delete '2',
    requireTransfer '3',
    requireDelete '4'
};

storeDepartmentStore 'Магазин отдела (ИД)' = DATA store (departmentStore);
nameStoreDepartmentStore 'Магазин' (departmentStore) = name(storeDepartmentStore(departmentStore)) IN baseGroup;
revaluationCommitteeDepartmentStore 'Комиссия отдела (ИД)' = DATA revaluationCommittee (departmentStore);
nameRevaluationCommitteeDepartmentStore 'Комиссия отдела' (departmentStore) = name(revaluationCommitteeDepartmentStore(departmentStore));
controlMinusRestsDepartmentStore 'Контроль за минусовыми остатками' = DATA BOOLEAN (departmentStore);
deleteItemMinusRestsDepartmentStore 'Удалять товары с отрицательным остатком с весов и касс?' = DATA BOOLEAN (departmentStore);
controlMinusRestsContainerDepartmentStore 'Контроль за минусовыми остатками тары' = DATA BOOLEAN (departmentStore);
// controlAssortmentProviderDepartmentStore 'Контролировать ассортимент поставщиков в подразделении?' = DATA BOOLEAN (departmentStore);
verifyOrderArrivalDepartmentStore 'Сверять заказ и приход в подразделении?' = DATA BOOLEAN (departmentStore);
maxQuantityDeliveryHourDepartmentStore 'Максимальное допустимое число поставок в час' = DATA INTEGER (departmentStore);
resolveMaxQuantityDeliveryHourAssortmentLessDepartmentStore 'Разрешить превысить количество поставок/час при ассортименте <' = DATA DOUBLE (departmentStore);
resolveOrderItemDepartmentStore 'Разрешить заказ товара в подразделение?' = DATA BOOLEAN (departmentStore);
quantityCashChangeOneOperationAccountDepartmentStore ' Количество кассовых смен в одном оперативном отчете' = DATA INTEGER (departmentStore);
materiallyResponsiblePersonItemReportDepartmentStore 'Материально ответственное лицо, подписывающее товарный отчет (ИД)' = DATA employee (departmentStore);
commonNameMateriallyResponsiblePersonItemReportDepartmentStore 'Материально ответственное лицо, подписывающее товарный отчет' (departmentStore) = commonName (materiallyResponsiblePersonItemReportDepartmentStore(departmentStore));
bookkeeperItemReportDepartmentStore 'Бухгалтер, принимающий товарный отчет (ИД)' = DATA employee (departmentStore);
commonNameBookkeeperItemReportDepartmentStore 'Бухгалтер, принимающий товарный отчет' (departmentStore) = commonName(bookkeeperItemReportDepartmentStore(departmentStore));
personCheckReportDepartmentStore 'Кто проверяет товарный отчет (ИД)' = DATA employee (departmentStore);
commonNamePersonCheckReportDepartmentStore 'Кто проверяет товарный отчет' (departmentStore) = commonName(personCheckReportDepartmentStore(departmentStore));
idTradingSquareDepartmentStore 'Торговая площадь отдела магазина' (departmentStore) = GROUP MAX tradingSquare BY departmentStoreTradingSquare(tradingSquare);   //максимизирует только по ID, переделать после расширения функционала
defaultTradingSquareDepartmentStore 'Торговая площадь отдела магазина, кв.м.' (departmentStore) = squareTradingSquare(idTradingSquareDepartmentStore(departmentStore));
tradingSquareStore 'Торговая площадь магазина' = GROUP SUM defaultTradingSquareDepartmentStore(departmentStore) BY storeDepartmentStore(departmentStore);

inStoreDepartment(store, departmentStore) = storeDepartmentStore(departmentStore) == store;
inTradingSquareDepartmentStore(departmentStore, tradingSquare) = departmentStoreTradingSquare(tradingSquare) == departmentStore;

storeTypeDepartmentStore(departmentStore) = storeTypeStore(storeDepartmentStore(departmentStore)) PERSISTENT;
tradingNetworkDepartmentStore(departmentStore) = tradingNetworkStoreType(storeTypeDepartmentStore(departmentStore)) PERSISTENT;

inTradingNetworkStoreTypeStoreDepartment (tradingNetwork, storeType, store, department) = UNION OVERRIDE
    storeDepartmentStore(department) == store AND storeType AND tradingNetwork,
    storeTypeDepartmentStore(department) == storeType AND tradingNetwork AND NOT store,
    tradingNetworkDepartmentStore(department) == tradingNetwork AND NOT store AND NOT storeType,
    department IS departmentStore AND NOT store AND NOT storeType AND NOT tradingNetwork;


// ----------------------------------- Цех ----------------------------------- //

outDepartmentManufactory 'Подразделение, куда передаются изделия (ИД)' (manufactory) = DATA departmentStore(manufactory) IN idGroup;
nameOutDepartmentManufactory 'Подразделение, куда передаются изделия' (manufactory) = name(outDepartmentManufactory(manufactory)) IN manufactoryGroup;
inPriceDepartmentManufactory 'Подразделение, откуда брать цены (ИД)' (manufactory) = DATA departmentStore(manufactory) IN idGroup;
nameInPriceDepartmentManufactory 'Подразделение, откуда брать цены ' (manufactory) = name(inPriceDepartmentManufactory(manufactory)) IN manufactoryGroup;
marginPublicCateringManufactory 'Наценка общепита по умолчанию для формирования цены в подразделении' (manufactory) = DATA DOUBLE (manufactory) IN manufactoryGroup;
rawDepartmentStore 'Подразделения, из которых можно получить сырье' = DATA BOOLEAN (manufactory, departmentStore);

inRawDepartmentStore(manufactory, departmentStore) = storeDepartmentStore(manufactory) == storeDepartmentStore(departmentStore);

//----------------------------------- Для товара и подразделения ------------------------------------------//
additionPriceDepartmentStoreItem 'Торговая надбавка в рублях' = DATA DOUBLE (departmentStore, item) IN baseGroup;
boundCertificateDepartmentStoreItem 'Сертификат / удостоверение обязательны для товара?' = DATA BOOLEAN (departmentStore, item) IN baseGroup;
maxAllowedRetailPriceDepartmentStoreItem 'MAX допустимая розн.цена' = DATA INTEGER (departmentStore, item) IN retailGroup;
netWeightManufacturerDepartmentStoreItem 'Вес нетто продукта для производства' = DATA DOUBLE (departmentStore, item) IN manufactoryGroup;
statusCashDepartmentStoreItem 'Статус товара на кассах (ИД)' = DATA itemStatus (departmentStore, item) IN idGroup;
nameStatusCashDepartmentStoreItem 'Статус товара на кассах' = name(statusCashDepartmentStoreItem (departmentStore, item)) IN equipmentGroup;

dateManufactureDepartmentStoreItem 'Дата изготовления' = DATA DATE (departmentStore, item) IN baseGroup;
dateFitToDepartmentStoreItem 'Годен до' = DATA DATE (departmentStore, item) IN baseGroup;
fromDateDeliveryDepartmentStoreItem 'Дату [Годен до] рассчитывать от даты поставки?' = DATA BOOLEAN (departmentStore, item) IN baseGroup;
banSaleDepartmentStoreItem 'Запрет продаж товара в подразделении' = DATA BOOLEAN (departmentStore, item) IN equipmentGroup;
banMovementDepartmentStoreItem 'Запрет на внутреннее перемещение товара' = DATA BOOLEAN (departmentStore, item) IN baseGroup;
reserveDepartmentStoreItem 'Резерв по товару' = DATA DOUBLE (departmentStore, item) IN baseGroup;

topDepartmentStoreItem 'Топ' = DATA DOUBLE (departmentStore, item) IN orderGroup;
quantityRealizationDepartmentStoreItem 'Продаж в день' = DATA DOUBLE (departmentStore, item) IN orderGroup;
balanceDepartmentStoreItem 'Текущий остаток' = DATA DOUBLE (departmentStore, item) IN orderGroup;

//------------------------------------ Товар с историей -------------------------------------------------------------//
GROUP historyGroup 'Изменяемые характеристики' : baseGroup;

@metaCodeNameObjectDateProperty(isPortionBarItem, item, 'Порционный товар для бара', yesNo, barGroup);

@metaCodeNameObjectDateProperty(banDiscountItem, item, 'Запретить скидки по товару', yesNo, discountGroup);

@metaCodeObjectDateProperty(coefficientNetGrossItem, item, 'Сезонный коэффициент пересчета сырья из нетто в брутто', DOUBLE, manufactoryGroup);

//defaultCoefficientNetGrossItem(item) = GROUP MAX coefficientNetGrossItem BY item;

@metaCodeObjectDateProperty(rateNaturalLossItem, item, 'Норма естественной убыли,%', DOUBLE, rateGroup);

//@metaCodeObjectDateProperty(NDSSupplierItem, item, 'НДС поставщика,%', DOUBLE, historyGroup);

@metaCodeObjectDateProperty(importerPriceItem, item, 'Цена импортёра', DOUBLE, retailGroup);


//---------------------------- Налоги ----------------------------------------//

CLASS STATIC tax 'Налоги'
{
    taxNDS 'НДС'
};

nameTax 'Наименование налога' = DATA STRING[200] (tax) IN baseGroup;

CLASS range 'Шкала';
dataRange 'Шкала' = DATA INTEGER (range);

CLASS rate 'История изменений шкалы' : historyObject;
rangeRate 'Шкала ИД' = DATA range (rate) IN idGroup;
taxRange 'Налог ИД' = DATA tax (range) IN idGroup;
nameTaxRange 'Налог' (range) = name(taxRange(range)) IN baseGroup;

maxDataRangeTax(tax) = UNION OVERRIDE 0 IF tax IS tax, [GROUP MAX dataRange(range) BY taxRange(range)](tax);
nextDataRangeTax(tax) = maxDataRangeTax(tax) + 1;

addNewRange 'Добавить шкалу' = ACTION (tax) {
    [ADDOBJ range]();
    dataRange(r) IF r == addedObject() <- nextDataRangeTax(tax);
} TOOLBAR IMAGE 'add.png';

CLASS STATIC rangeType 'Для каких подразделений действует шкала'
{
    common 'Общий',
    units 'Для подразделений'
};
rangeTypeRange 'Тип ИД' = DATA rangeType (range) IN idGroup;
nameRangeTypeRange 'Тип действия' = name(rangeTypeRange(range)) IN baseGroup;
inRangeStoreDefault 'Вкл.' (range, store) = DATA BOOLEAN (range, store) IN baseGroup;
inRangeStore 'Вкл.' (range, store) = inRangeStoreDefault(range, store)  IF rangeTypeRange(range) == rangeType.units IN baseGroup;

rangeTypeRange(range) <- rangeType.common ON ASSIGN range IS range;     /// потом согласовать, какое значение должно быть по-умолчанию ///

dataRate 'Значение ставки' = DATA DOUBLE (rate) IN baseGroup;
dateFromRate 'Действует с' = DATA DATE (rate) IN baseGroup;
dateToRate 'Действует по' = DATA DATE (rate) IN baseGroup;

quantityRateRange 'Количество историй' (range) = GROUP SUM 1 IF rate BY rangeRate(rate);
CONSTRAINT CHECKED range IS range AND NOT rangeTypeRange(range)  MSG 'ошибка: Не выбран тип действия для шкалы';
CONSTRAINT CHECKED rate IS rate AND NOT dataRate(rate)  MSG 'ошибка: Не указано значение ставки';


inRangeRate(range, rate) = rangeRate(rate) == range;
inTaxRange(tax, range) = taxRange(range) == tax;

actingRateDate(rate, date) = rate IF dateFromRate(rate) <= date AND NOT dateToRate(rate) < date AND date AS DATE;
actingRateRangeDate(range, date) = GROUP MAX actingRateDate(rate, date) BY rangeRate(rate), date;
dataActingRateRangeDate 'На дату' (range, date) = dataRate(actingRateRangeDate(range, date));  // в последствии, если надо можно сделать проверку на одну ставку на дату
actingRateRange 'Действующая ИД' (range) = actingRateRangeDate(range, currentDate()) IN idGroup;
dataActingRateRange 'Действующая ставка' (range) = dataRate(actingRateRange(range)) IN baseGroup;
dateFromActingRateRange 'Действует с' (range) = dateFromRate(actingRateRange(range)) IN baseGroup;
dateToActingRateRange 'Действует по' (range) = dateToRate(actingRateRange(range)) IN baseGroup;
nameUserRateRange 'Создан пользователем' (range) = nameUserCreated(actingRateRange(range)) IN baseGroup;

quantityActingRateRangeDate(range, date) = GROUP SUM 1 IF actingRateDate(rate, date) BY rangeRate(rate), date;
quantityActingRateRange 'Количество действующих историй' (range) = quantityActingRateRangeDate(range, currentDate());
CONSTRAINT CHECKED quantityActingRateRange(range) > 1 MSG 'ошибка: Одновременно не может быть несколько действующих ставок';

suppliersTaxNDSItem(item) = tax.taxNDS IF item IS item IN idGroup;
nameSuppliersTaxNDSItem(item) = name(suppliersTaxNDSItem(item));
suppliersRangeItem(item) = DATA range (item) IN idGroup;
dataSuppliersRateRangeItem 'НДС поставщика,%' (item) = dataActingRateRange(suppliersRangeItem(item)) IN retailGroup;
CONSTRAINT CHECKED suppliersTaxNDSItem(item) != taxRange(suppliersRangeItem(item))  MSG 'ошибка: Шкала должна соответствовать шкале НДС';


retailTaxNDSItem(item) = tax.taxNDS IF item IS item IN idGroup;
nameRetailTaxNDSItem(item) = name(retailTaxNDSItem(item));
retailRangeItem(item) = DATA range (item) IN idGroup;
dataRetailRateRangeItem 'Розничный НДС' (item) = dataActingRateRange(retailRangeItem(item)) IN retailGroup;
CONSTRAINT CHECKED retailTaxNDSItem(item) != taxRange(retailRangeItem(item))  MSG 'ошибка: Шкала должна соответствовать шкале НДС';
overrideRateRangeItem 'НДС (ИД)' (item) = UNION OVERRIDE retailRangeItem(item), suppliersRangeItem(item) IN idGroup;
dataOverrideRateRangeItem 'Значение НДС' (item) = dataActingRateRange(overrideRateRangeItem(item)) IN retailGroup;
toShowDataRangeItem(item) = TRUE IF item IS item AND dataSuppliersRateRangeItem(item);

FORM tax 'Налог'
OBJECTS t=tax FIXED PANEL
OBJECTS ra=range, rt=rate, s=store
PROPERTIES(t)     name, nameTax, addNewRange TODRAW ra
PROPERTIES(ra)    dataRange, nameRangeTypeRange, delete
PROPERTIES(ra)    READONLY dataActingRateRange, dateFromActingRateRange, dateToActingRateRange
PROPERTIES(rt)    dataRate, dateFromRate, dateToRate, timeCreated, nameUserCreated, ADDOBJ, delete
PROPERTIES(s)     name, addressStore//, ADDOBJ, delete
PROPERTIES(ra, s) inRangeStore
FILTERS NOT NULL  inRangeRate(ra, rt),
        NOT NULL  inTaxRange(t, ra)
FILTERGROUP filters6
    FILTER 'Показывать магазины только для данного налога' 'F10' NOT NULL inRangeStore(ra, s) DEFAULT

EDIT tax OBJECT t;

DESIGN tax FROM DEFAULT {
    main {
       ADD pax.box BEFORE functions.box {
            ADD s.box;
       }
       ADD sax.box BEFORE pax.box {
            ADD ra.box;
            ADD rt.box;
            POSITION ra.box TO THE LEFT rt.box;
       }

    }
}

FORM taxes 'Налоги'
OBJECTS t=tax, ra=range, s=store
PROPERTIES(t)     READONLY name, nameTax
PROPERTIES(t)     EDITFORM, delete
PROPERTIES(s)     READONLY name, addressStore
PROPERTIES(ra, s) READONLY inRangeStore
PROPERTIES(ra)  READONLY dataRange, dataActingRateRange, dateFromActingRateRange, dateToActingRateRange, nameUserRateRange, nameRangeTypeRange, quantityRateRange
FILTERS NOT NULL inTaxRange(t, ra),
        NOT NULL inRangeStore(ra, s);


//------------------------------------ Товар для подразделения с историей -------------------------------------------//
//maxReserveItemDepartmentDate 'Максимально допустимый товарный запас в днях' = DATA DOUBLE (item, departmentStore, DATE) IN baseGroup;
//minReserveItemDepartmentDate 'Минимально допустимый товарный запас в днях' = DATA DOUBLE (item, departmentStore, DATE) IN baseGroup;
//banRevaluationItemDepartmentDate 'Запрет на переоценку' = DATA BOOLEAN (item, departmentStore, DATE) IN baseGroup;
//inActionItemDepartmentDate 'Товар акции' = DATA BOOLEAN (item, departmentStore, DATE) IN baseGroup;
//marginProductionItemDepartmentDate 'Наценка производства' = DATA DOUBLE (item, departmentStore, DATE) IN baseGroup;
//discountItemDepartmentDate 'Скидка для товара' = DATA STRING[100] (item, departmentStore, DATE) IN baseGroup;

TABLE itemDepartmentStoreDate (item, departmentStore, DATE);

@metaCodeDoubleObjectDateProperty(maxReserveItemDepartment, item, departmentStore, 'Максимально допустимый товарный запас в днях', DOUBLE, orderGroup);
@metaCodeDoubleObjectDateProperty(minReserveItemDepartment, item, departmentStore, 'Минимально допустимый товарный запас в днях', DOUBLE, orderGroup);

@metaCodeNameDoubleObjectDateProperty(banRevaluationItemDepartment, item, departmentStore, 'Запрет на переоценку', yesNo, retailGroup);

@metaCodeNameDoubleObjectDateProperty(inActionItemDepartment, item, departmentStore, 'Товар акции', yesNo, discountGroup);

@metaCodeDoubleObjectDateProperty(marginProductionItemDepartment, item, departmentStore, 'Наценка производства', DOUBLE, retailGroup);

@metaCodeDoubleObjectDateProperty(retailPriceItemDepartment, item, departmentStore, 'Розничная цена', DOUBLE, retailGroup);

@metaCodeDoubleObjectDateProperty(discountItemDepartment, item, departmentStore, 'Скидка для товара', STRING[100], discountGroup);

TABLE supplierItemDepartmentStoreDate (supplier, item, departmentStore, DATE);

@metaCodeNameTripleObjectDateProperty(isSupplierItemDepartment, supplier, item, departmentStore, 'Поставляется', yesNo, orderGroup);

@metaCodeTripleObjectDateProperty(priceSupplierItemDepartment, supplier, item, departmentStore, 'Цена поставщика', DOUBLE, retailGroup);

@metaCodeTripleObjectDateProperty(markupSupplierItemDepartment, supplier, item, departmentStore, 'Торговая надбавка', DOUBLE, retailGroup);

@metaCodeNameTripleObjectDateProperty(banSupplierItemDepartment, supplier, item, departmentStore, 'Запретить закупку', yesNo, orderGroup);

FORM item 'Товар'
OBJECTS i=item FIXED PANEL, b=barcode
TREE treeStore a=STRING[3], t=tradingNetwork, st=storeType, s=store
OBJECTS dt=DATE FIXED PANEL, sp=supplier FIXED PANEL, d=departmentStore
PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
FILTERS NOT NULL stringEqualsAll(a)
FILTERS NOT NULL inStoreTypeTradingNetwork (st, t)
FILTERS NOT NULL inStoreTypeStore (st, s)
FILTERS NOT NULL inTradingNetworkStoreTypeStoreDepartment(t, st, s, d)
PROPERTIES(i) nameAttributeItem, nameItemGroupSku, barcodeBarcodeSku, isManufacturedItem, nameBrandItem SHOWIF toShowBrand(i), shortNameUnitOfMeasureItem SHOWIF toShowUnitOfMeasure(i), nameTypeItemItem SHOWIF toShowType(i),
 nameSortItem SHOWIF toShowSort(i), shortNamePackItem SHOWIF toShowPack(i), shortNameSizeItem SHOWIF toShowSize(i), shortNameSpecialtyItem SHOWIF toShowSpecialty(i),
 isWeightedItem, isWeightItem, passScalesItem, volumeItem, netWeightItem, nameColorItem SHOWIF toShowColor(i), nameTasteItem SHOWIF toShowTaste(i),
 hallmarkItem SHOWIF toShowHallmark(i), articleItem, quantityPackItem, nameCoolingDegreeItem SHOWIF toShowCoolingDegree(i), minQuantityOrderItem, minReserveItem, compositionScalesItem, compositionMenuItem,
 percentFatItem, percentAlcoholItem, lengthItem, widthItem, heightItem, grossWeightItem, lengthPackItem, widthPackItem, heightPackItem, grossWeightPackItem,
 nameCountryItem SHOWIF toShowCountry(i),
 bonusReturnItem, nameReturnItem, quantityDiscountItem, fixPriceItem, isFixPriceItem, banMarkdownItem, oldPriceItem, isMarkItem, hintItem,
 isCrudeItem, nameGroupProductItem, nameNumberInPackItem, nameFormItemItem, nameRateWasteItem, percentRateWasteItem,
 nameWareItem SHOWIF toShowWare(i), standartItem, normOutItem, groupMenuItem,
 isCutedItem, isLoafCutItem, storageTemperatureItem, controlExpiryItem, daysExpiryItem, daysExpiryPackItem, hoursExpiryPackItem,
 bonusItem, percentWholesaleMarkItem, minTradeAllowanceItem, maxTradeAllowanceItem, minAllowedRetailPriceItem, banSailItem,
 dataRetailRateRangeItem, dataSuppliersRateRangeItem
PROPERTIES(i) nameisPortionBarItem, showFormNameisPortionBarItem,
              importerPriceItem, showFormimporterPriceItem,
              namebanDiscountItem, showFormNamebanDiscountItem,
              coefficientNetGrossItem, showFormcoefficientNetGrossItem,
              rateNaturalLossItem, showFormrateNaturalLossItem,         //     NDSSupplierItem, showFormNDSSupplierItem,
              nutritionalValueItem, energyItem, fatsItem, carbohydratesItem, proteinsItem, isContainGMOItem, nameTagItem, multiplierItem

PROPERTIES (b) barcode, titleScalesBarcode, titleCashBarcode, shortNameUnitOfMeasureBarcode, amountBarcode, removeBarcode, commentRemoveBarcode
PROPERTIES (d) name
PROPERTIES (dt) OBJVALUE HIGHLIGHTIF dateDiffersCurrent(dt)
PROPERTIES (sp) READONLY name
PROPERTIES nameisSupplierItemDepartmentOver(sp, i, d, dt) HIGHLIGHTIF nameisSupplierItemDepartmentDate(sp, i, d, dt), showFormNameisSupplierItemDepartmentOver(sp, i, d),
           namebanSupplierItemDepartmentOver(sp, i, d, dt) HIGHLIGHTIF namebanSupplierItemDepartmentDate(sp, i, d, dt), showFormNamebanSupplierItemDepartmentOver(sp, i, d),
           priceSupplierItemDepartmentOver(sp, i, d, dt) HIGHLIGHTIF priceSupplierItemDepartmentDate(sp, i, d, dt), showFormpriceSupplierItemDepartmentOver(sp, i, d),
           markupSupplierItemDepartmentOver(sp, i, d, dt) HIGHLIGHTIF markupSupplierItemDepartmentDate(sp, i, d, dt), showFormmarkupSupplierItemDepartmentOver(sp, i, d)
PROPERTIES retailPriceItemDepartmentOver(i, d, dt) HIGHLIGHTIF retailPriceItemDepartmentDate(i, d, dt), showFormretailPriceItemDepartmentOver(i, d),
           maxReserveItemDepartmentOver(i, d, dt) HIGHLIGHTIF maxReserveItemDepartmentDate(i, d, dt), showFormmaxReserveItemDepartmentOver(i, d),
           minReserveItemDepartmentOver(i, d, dt) HIGHLIGHTIF minReserveItemDepartmentDate(i, d, dt), showFormminReserveItemDepartmentOver(i, d),
           namebanRevaluationItemDepartmentOver(i, d, dt) HIGHLIGHTIF namebanRevaluationItemDepartmentDate(i, d, dt), showFormNamebanRevaluationItemDepartmentOver(i, d),
           nameinActionItemDepartmentOver(i, d, dt) HIGHLIGHTIF nameinActionItemDepartmentDate(i, d, dt), showFormNameinActionItemDepartmentOver(i, d),
           marginProductionItemDepartmentOver(i, d, dt) HIGHLIGHTIF marginProductionItemDepartmentDate(i, d, dt), showFormmarginProductionItemDepartmentOver(i, d),
           discountItemDepartmentOver(i, d, dt) HIGHLIGHTIF discountItemDepartmentDate(i, d, dt), showFormdiscountItemDepartmentOver(i, d)

FILTERS NOT NULL inStoreTypeTradingNetwork (st, t)
FILTERS NOT NULL inStoreTypeStore (st, s)
FILTERS NOT NULL inSkuBarcode(i, b)
PROPERTIES(b) ADDOBJ, delete
EDIT item OBJECT i
EDIT barcode OBJECT b;

DESIGN item FROM DEFAULT {
    main {
     ADD item.box BEFORE b.box {
            tabbedPane = TRUE;
            ADD primary.box{
                title = 'Основные данные';
                fillVertical = 1.0;
                fillHorizontal = 1.0;
                ADD containerLeft {
                    childConstraints = TO THE BOTTOM;
                    ADD i.descriptionGroup {
                        fillVertical = 0.4;
                        ADD small.box {
                            ADD PROPERTY(shortNamePackItem(i));
                            ADD PROPERTY(shortNameSizeItem(i));
                            ADD PROPERTY(shortNameSpecialtyItem(i));
                            POSITION PROPERTY(shortNamePackItem(i)) TO THE LEFT PROPERTY(shortNameSizeItem(i));
                            POSITION PROPERTY(shortNameSizeItem(i)) TO THE LEFT PROPERTY(shortNameSpecialtyItem(i));
                        };
                    }
                    ADD i.manufactoryGroup;
                }

                ADD containerRight {
                    childConstraints = TO THE BOTTOM;
                    ADD i.headGroup;
                    ADD i.rateGroup;
                    ADD i.sizeGroup;
                    ADD i.barGroup;
                }
                POSITION containerLeft TO THE LEFT containerRight;
                ADD b.box;
            }

            ADD additional.box {

                title = 'Дополнительные';
                fillVertical = 1.0;
                fillHorizontal = 1.0;

                ADD containerALeft {
                    childConstraints = TO THE BOTTOM;
                    ADD i.equipmentGroup;
                    ADD i.retailGroup;
                };

                ADD containerARight {
                    childConstraints = TO THE BOTTOM;
                    ADD i.substanceGroup;
                    ADD i.tagGroup;
                    ADD i.expiryGroup;
                    ADD i.orderGroup;
                    ADD i.documentGroup;
                };

                POSITION containerALeft TO THE LEFT containerARight;
            }

            ADD d.box {

                fillVertical = 1.0;
                fillHorizontal = 1.0;
                ADD dt.box BEFORE d.grid.box;
                ADD sp.box BEFORE d.grid.box;
                ADD treeStore.box BEFORE d.grid.box;
                POSITION treeStore.box TO THE LEFT d.grid.box;
                POSITION d.grid.box TO THE LEFT d.panel;
                d.grid.box {
                    fillHorizontal = 3;
                };
            }
       }
    }
}

inItemGroupSku(itemGroup, sku) = itemGroupSku(sku) == itemGroup;

FORM items 'Товары'
TREE treeGroup g=itemGroup PARENT parentItemGroup
OBJECTS i=item
PROPERTIES(g) READONLY name
PROPERTIES(i) READONLY nameAttributeItem, shortNameUnitOfMeasureItem, barcodeBarcodeSku
PROPERTIES(i) ADDFORM, EDITFORM, delete
FILTERS NOT NULL inItemGroupSku(g, i);

DESIGN items FROM DEFAULT {
    POSITION treeGroup.box TO THE LEFT i.box;

    i.box {
        fillHorizontal = 2.0;

    }
}

FORM itemGroup 'Товарная группа'
OBJECTS g=itemGroup FIXED PANEL
PROPERTIES(g) name, nameParentItemGroup, maxTurnoverItemGroup, minTurnoverItemGroup, extSID
PROPERTIES(g) showCaptionItemGroup, showBrandItemGroup, showTypeItemGroup, showUnitOfMeasureItemGroup, showSortItemGroup, showPackItemGroup,
showSpecialtyItemGroup, showSizeItemGroup, showColorItemGroup, showTasteItemGroup, showHallmarkItemGroup, showCoolingDegreeItemGroup, showCountryItemGroup,
showFormItemItemGroup, showNumberInPackItemGroup, showRateWasteItemGroup, showWareItemGroup
EDIT itemGroup OBJECT g;

DESIGN itemGroup FROM DEFAULT {
     g.displayGroup {
    }
}

FORM itemGroups 'Товарные группы'
TREE g=itemGroup PARENT parentItemGroup
PROPERTIES(g) READONLY name, extSID
PROPERTIES(g) ADDFORM, EDITFORM, delete
DIALOG itemGroup OBJECT g;

// ----------------------------------- Ассортимент -------------------------------------------------------- //

CLASS assortment 'Ассортимент' : named;
itemAssortment 'Товар включен в ассортимент' = DATA BOOLEAN (assortment, item);
infoAssortment 'Описание' = DATA STRING[100] (assortment) IN baseGroup;

FORM assortment 'Ассортимент'
OBJECTS a=assortment FIXED PANEL, i=item
PROPERTIES(a) name, infoAssortment
PROPERTIES(a, i) itemAssortment
PROPERTIES(i) nameAttributeItem
PROPERTIES(i) ADDSESSIONFORM, EDITSESSIONFORM, delete
FILTERGROUP assortment
    FILTER 'Только товары ассортимента' 'F10' NOT NULL itemAssortment(a, i) DEFAULT
EDIT assortment OBJECT a;

FORM assortments 'Ассортименты'
OBJECTS a=assortment, i=item
PROPERTIES(a) READONLY name, infoAssortment
PROPERTIES(a) ADDFORM, EDITFORM, delete
PROPERTIES(i) READONLY nameAttributeItem
FILTERS NOT NULL itemAssortment(a, i);

// ----------------------------------- Комиссии ---------------------------------------------------------- //

CLASS ABSTRACT committee 'Комиссия' : named;
CLASS revaluationCommittee 'Комиссия переоценки' : committee;
CLASS inventoryCommittee 'Комиссия для инвентаризации' : committee;

chairmanCommittee 'Председатель комиссии (ИД)' = DATA employee (committee);
commonNameChairmanCommittee 'Председатель комиссии' (committee) = commonName(chairmanCommittee(committee)) IN baseGroup;
departmentStoreCommittee 'Отдел комиссии (ИД)' = DATA departmentStore (committee);
nameDepartmentStoreCommittee 'Отдел комиссии' (committee) = commonName(departmentStoreCommittee(committee)) IN baseGroup;
CONSTRAINT CHECKED chairmanCommittee(revaluationCommittee) AND NOT departmentStoreEmployee(departmentStoreCommittee(revaluationCommittee), chairmanCommittee(revaluationCommittee)) MSG 'Отдел комиссии должен соответствовать отделу председателя комиссии';
CONSTRAINT CHECKED departmentStoreCommittee(revaluationCommitteeDepartmentStore(departmentStore)) != departmentStore MSG 'Отдел комиссии должен соответствовать текущему отделу';

inDepartmentStoreEmployeeRevaluationCommittee (revaluationCommittee, employee) = departmentStoreEmployee(departmentStoreCommittee(revaluationCommittee), employee);
inCommitteeEmployee 'Является членом комиссии' (committee, employee) = DATA BOOLEAN (committee, employee);

FORM committee 'Комиссия'
OBJECTS c=committee FIXED PANEL, e=employee
PROPERTIES(c) name, nameDepartmentStoreCommittee, commonNameChairmanCommittee
PROPERTIES(e) READONLY name
PROPERTIES(e) userFirstName, userLastName, ADDSESSIONFORM, EDITSESSIONFORM, delete
PROPERTIES(c, e) inCommitteeEmployee
FILTERS NOT NULL inDepartmentStoreEmployeeRevaluationCommittee(c, e)
EDIT committee OBJECT c;

FORM employeesCommittees 'Комиссии'
OBJECTS c=committee, e=employee
PROPERTIES(c) READONLY name, nameDepartmentStoreCommittee, commonNameChairmanCommittee
PROPERTIES(c) ADDFORM, EDITFORM, delete
PROPERTIES(e) READONLY userFirstName, userLastName
FILTERS NOT NULL inCommitteeEmployee(c, e);

// ----------------------------------- Банк ------------------------------------------- //

GROUP banksGroup 'Информация о банке' : baseGroup;

CLASS bank 'Банк' : named;

MFOBank 'Код МФО' = DATA STRING[9] (bank) IN banksGroup;
departmentBank 'Отдел банка' = DATA STRING[100] (bank) IN banksGroup;
CBUBank 'ЦБУ' = DATA STRING[3] (bank) IN banksGroup;
infoBank 'Дополнительные сведения' = DATA STRING[100] (bank) IN banksGroup;

@metaCodeObjectDateProperty(addressBank, bank, 'Адрес банка', STRING[150], banksGroup);

FORM bank 'Банк'
OBJECTS b=bank FIXED PANEL
PROPERTIES(b)  name, addressBank, showFormaddressBank, MFOBank, departmentBank, CBUBank, infoBank
EDIT bank OBJECT b;

FORM banks 'Банки'
OBJECTS b=bank
PROPERTIES(b) READONLY name, addressBank, MFOBank, departmentBank, CBUBank, infoBank
PROPERTIES(b) ADDFORM, EDITFORM, delete;

// ----------------------------------- Расчетный счет ------------------------------------------ //

GROUP accountGroup 'Банковская информация' : baseGroup;

CLASS account 'Расчетный счет';

bankAccount 'Банк (ИД)' = DATA bank (account) IN idGroup;

dataAccount 'Номер расчетного счета'  = DATA STRING[13] (account) IN accountGroup;
nameBankAccount 'Наименование банка' (account) = name(bankAccount(account)) IN accountGroup;
addressBankAccount 'Адрес банка' (account) = addressBank(bankAccount(account)) IN accountGroup;
MFOBankAccount 'Код МФО банка' (account) = MFOBank(bankAccount(account)) IN accountGroup;
departmentBankAccount 'Отдел банка' (account) = departmentBank(bankAccount(account)) IN accountGroup;
CBUBankAccount 'ЦБУ банка' (account) = CBUBank(bankAccount(account)) IN accountGroup;
noteAccount 'Примечание'  = DATA STRING[50] (account) IN accountGroup;

// ----------------------------------- Форма собственности ------------------------------------------ //
CLASS ownership 'Форма собственности' : named;
shortNameOwnership 'Cокращенное название' = DATA STRING[10] (ownership) IN baseGroup FIXEDCHARWIDTH 6;

FORM ownership 'Форма собственности'
OBJECTS o=ownership FIXED PANEL
PROPERTIES(o) name, shortNameOwnership;

// ----------------------------------- Лицензия ------------------------------------------ //
GROUP licensGroup 'Лицензиионная информация' : baseGroup;
CLASS license 'Лицензия' ;

dataLicense 'Номер лицензии' = DATA STRING[100] (license) IN licensGroup;
dateFromLicense 'Действует с ' = DATA DATE (license) IN licensGroup;
dateToLicense 'Действует по ' = DATA DATE (license) IN licensGroup;

//tabaccoLicense 'Табачная' = DATA BOOLEAN  (license) IN licensGroup;

// ----------------------------------- Юридическое лицо ------------------------------------------ //

GROUP lawGroup 'Юридическая информация' : baseGroup;
GROUP contactGroup 'Контактная информация' : baseGroup;
GROUP docGroup 'Для договора' : baseGroup;

CLASS ABSTRACT legalEntity 'Юридическое лицо' : named;

ownershipLegalEntity 'Форма собственности (ИД)' = DATA ownership (legalEntity) IN licensGroup;

nameOwnershipLegalEntity 'Форма собственности' = name(ownershipLegalEntity(legalEntity)) IN lawGroup;
shortNameOwnershipLegalEntity 'Форма собственности (сокр.)' = shortNameOwnership(ownershipLegalEntity(legalEntity)) IN lawGroup;
fullNameLegalEntity 'Наименование для накладных' = DATA STRING[200] (legalEntity) IN lawGroup;
UNPLegalEntity 'УНП' = DATA STRING[9] (legalEntity) IN docGroup FIXEDCHARWIDTH 9;
UNPLegalEntityToLegalEntity (UNPLegalEntity) = GROUP UNIQUE legalEntity BY UNPLegalEntity(legalEntity);
OKPOLegalEntity 'Код по ОКПО' = DATA STRING[20] (legalEntity) IN docGroup;
OKYLPLegalEntity 'Код ОКЮЛП' = DATA STRING[20] (legalEntity) IN docGroup;
emailLegalEntity 'e-mail' = DATA STRING[100] (legalEntity) IN contactGroup;
siteLegalEntity 'Сайт' = DATA STRING[100] (legalEntity) IN contactGroup;
contactsLegalEntity 'Дополнительная информация' = DATA STRING[300] (legalEntity) IN contactGroup;
residentLegalEntity 'Резидент РБ' = DATA BOOLEAN (legalEntity) IN lawGroup;
manufacturerLegalEntity 'Производитель' = DATA BOOLEAN (legalEntity) IN lawGroup;

legalEntityAccount 'Ю.Л. (ИД)' = DATA legalEntity (account) IN idGroup;
userAccountLegalEntity 'Р/сч. (ИД)' = DATA account (legalEntity) IN idGroup;
defaultAccountLegalEntity(legalEntity) = GROUP MAX account AS account BY legalEntityAccount(account);
overrideAccountLegalEntity 'Основной р/сч.' (legalEntity) = UNION OVERRIDE defaultAccountLegalEntity(legalEntity), userAccountLegalEntity(legalEntity);
dataOverrideAccountLegalEntity 'Основной р/сч.' (legalEntity) = dataAccount(overrideAccountLegalEntity(legalEntity)) IN lawGroup;

CONSTRAINT CHECKED legalEntity != legalEntityAccount(userAccountLegalEntity(legalEntity)) MSG 'ошибка: Р/сч. по умолчанию должен соответствовать р/сч. Ю.Л.';
equalsLegalEntityAccount 'Основной р/сч.' (legalEntity, account) = userAccountLegalEntity(legalEntity) == account;

legalEntityLicense 'ЮЛ (ИД)' = DATA legalEntity (license) IN idGroup;

//userLicenseLegalEntity 'ЮЛ (ИД)' = DATA license (legalEntity) IN idGroup;
//actingLicense 'Действующая, м/у датами' (license) = license AS license IF dateFromLicense(license) <= currentDate() AND NOT dateToLicense(license) < currentDate();
actingLicenseDate 'Действующая между датами' (license, date) = license AS license IF dateFromLicense(license) <= date AND NOT dateToLicense(license) < date AND date AS DATE;
actingLicenseLegalEntityDate 'Действующая на дату' (legalEntity, date) = GROUP MAX actingLicenseDate(license, date) BY legalEntityLicense(license), date;
actingLicenseLegalEntity 'Действующая' (legalEntity) = actingLicenseLegalEntityDate(legalEntity, currentDate());
dataActingLicenseLegalEntity 'Действующая лицензия' (legalEntity) = dataLicense(actingLicenseLegalEntity(legalEntity)) IN lawGroup;

//actingLicenseLegalEntity (legalEntity) = GROUP MAX actingLicense(license) BY legalEntityLicense(license);        // сгруппировали по ID
//overrideLicenseLegalEntity 'Действующая' (legalEntity) = UNION OVERRIDE defaultLicenseLegalEntity(legalEntity) IF dateFromLicense(defaultLicenseLegalEntity(legalEntity)) < currentDate() AND dateToLicense(defaultLicenseLegalEntity(legalEntity)) > currentDate(),
//                                                                        userLicenseLegalEntity(legalEntity) IF dateFromLicense(userLicenseLegalEntity(legalEntity)) < currentDate() AND dateToLicense(userLicenseLegalEntity(legalEntity)) > currentDate();
                        // работает как то не так, надо проверить //
//CONSTRAINT CHECKED legalEntity != legalEntityLicense(userLicenseLegalEntity(legalEntity)) MSG 'ошибка: Лицензия по умолчанию должен соответствовать лицензии Ю.Л.';
//CONSTRAINT  dateFromLicense(overrideLicenseLegalEntity(legalEntity)) > currentDate() MSG 'ошибка: действие лицензии еще не началось';
//CONSTRAINT  dateToLicense(overrideLicenseLegalEntity(legalEntity)) < currentDate() MSG 'ошибка: действие выбранной лицензии уже окончилось';
//equalsLegalEntityLicense 'Действующая' (legalEntity, license) = userLicenseLegalEntity(legalEntity) == license IN lawGroup;

// ----------------------------------- Юридическое лицо-дата ------------------------------------------ //

TABLE legalEntityDate (legalEntity, DATE);

@metaCodeObjectDateProperty(addressLegalEntity, legalEntity, 'Юридический адрес', STRING[150], baseGroup);
@metaCodeObjectDateProperty(managerLegalEntity, legalEntity, 'Руководитель', STRING[100], baseGroup);
@metaCodeObjectDateProperty(accountantLegalEntity, legalEntity, 'Главный бухгалтер', STRING[100], baseGroup);
@metaCodeObjectDateProperty(postAddressLegalEntity, legalEntity, 'Почтовый адрес', STRING[150], baseGroup);
@metaCodeObjectDateProperty(phoneLegalEntity, legalEntity, 'Телефон/факс', STRING[100], baseGroup);


// ----------------------------------- Договор ------------------------------------------ //

GROUP contractGroup 'Общая информация' : baseGroup;

CLASS ABSTRACT contract 'Договор';
CLASS contractProvider 'Договор с поставщиком' : contract;

CLASS STATIC contractType 'Тип договора'
{
    sale 'договор купли-продажи',
    commission 'договор комиссии'
};

CLASS STATIC contractForm 'Порядок оплаты'
{
    prepayment 'с отсрочкой платежа',
    implement 'По факту реализации',
    instruction 'Платежное поручение',
    requirement 'Платежное требование'
};

dataContract 'Номер договора' = DATA STRING[30] (contract) IN contractGroup;
//formContract(contract) = DATA contractForm (contract) IN contractGroup;
//nameFormContract 'Порядок оплаты по договору' (contract) = name(formContract(contract)) IN contractGroup;
typeContract(contract) = DATA contractType (contract) IN contractGroup;
nameTypeContract 'Тип договора' (contract) = name(UNION OVERRIDE contractType.sale IF contract IS contract,
                                                                 typeContract(contract)) IN contractGroup;
dateFromContract 'Дата начала договора' = DATA DATE (contract) IN contractGroup;
dateToContract 'Дата окончания договора' = DATA DATE (contract) IN contractGroup;
currencyContract 'Валюта взаиморасчетов' = DATA STRING[20] (contract) IN contractGroup; // может и не надо   или справочником
warnContract 'За сколько дней предупредить об окончании' = DATA INTEGER (contract) IN contractGroup;
banContract 'За сколько дней запретить закупку товара' = DATA INTEGER (contract) IN contractGroup;
//delayContract 'Отсрочка платежа, дней' = DATA INTEGER (contract) IN contractGroup;
requestContract 'Форма оплаты: Платежное требование' = DATA BOOLEAN (contract) IN contractGroup;
noteContract 'Примечание' = DATA STRING[100] (contract) IN contractGroup;

@metaCodeNameObjectDateProperty(formContract, contract, 'Порядок оплаты по договору', contractForm, contractGroup);
CONSTRAINT contract IS contract AND NOT formContract(contract)  MSG 'ошибка: Не выбран порядок оплаты по договору';
@metaCodeObjectDateProperty(delayContract, contract, 'Отсрочка платежа(кален. дней),при "-" предоплата', DOUBLE, baseGroup);


// ----------------------------------- Поставщик ------------------------------------------ //

GROUP supplierGroup 'Информация о поставщике' : baseGroup;
CLASS supplier 'Поставщик' : legalEntity;
CLASS company 'Компания' : legalEntity;

companyContract 'Организация (ИД)' = DATA company (contract) IN idGroup;
supplierContract 'Поставщик (ИД)' = DATA supplier (contract) IN idGroup;
userContractSupplier 'Контракт (ИД)' = DATA contract (supplier) IN idGroup;
//companySupplier 'Организация (ИД)' = DATA company (supplier) IN idGroup;

payerSupplier 'Плательщик НДС' = DATA BOOLEAN (supplier) IN supplierGroup;
scheduleSupplier 'Разрешить доп.заказ товаров вне графика' = DATA BOOLEAN (supplier) IN supplierGroup;
surePercentSupplier 'Обязательный % заказанных товаров в прих. накладной' = DATA INTEGER (supplier) IN supplierGroup;
allowablePercentSupplier 'Допустимый % изменения цен 1го поставщика' = DATA INTEGER (supplier) IN supplierGroup;
afterDaysSupplier 'Максимальное число дней до поставки после заказа' = DATA INTEGER (supplier) IN supplierGroup;
forHoursSupplier 'За сколько часов до поставки закрыть заказ' = DATA INTEGER (supplier) IN supplierGroup;
limitSupplier 'Кредитный лимит' = DATA INTEGER (supplier) IN docGroup;
prioritySupplier 'Приоритет оплаты (1 - в первую очередь)' = DATA INTEGER (supplier) IN docGroup;
signsSupplier 'Число знаков после запятой для строки накладной' = DATA INTEGER (supplier) IN supplierGroup;
marksSupplier 'Число знаков после зап.в сумме к оплате по накладной' = DATA INTEGER (supplier) IN supplierGroup;

emailOrderSupplierDepartmentStore 'e-mail для передачи заказа' = DATA STRING[100] (supplier, departmentStore)IN supplierGroup;
contactSupplierDepartmentStore 'Контактная информация' = DATA STRING[500] (supplier, departmentStore)IN supplierGroup;
controlSupplierDepartmentStore(supplier, departmentStore) = DATA yesNo (supplier, departmentStore)IN idGroup;
nameControlSupplierDepartmentStore 'Контролировать ассортимент поставщика, ДА/НЕТ' (supplier, departmentStore) = name(UNION OVERRIDE yesNo.no IF supplier IS supplier AND departmentStore IS departmentStore,
                                                                                                                                controlSupplierDepartmentStore(supplier, departmentStore)) IN supplierGroup;

@metaCodeNameDoubleObjectDateProperty(sureSupplierDepartmentStore, supplier, departmentStore, 'Обязателен заказ поставщику, ДА/НЕТ', yesNo, orderGroup);

overrideSupplierDepartmentStoreDate(supplier, departmentStore, date) = UNION OVERRIDE (TRUE IF UNION OVERRIDE emailOrderSupplierDepartmentStore(supplier, departmentStore) AND date IS DATE, contactSupplierDepartmentStore(supplier, departmentStore) AND date IS DATE),
                                                                                  controlSupplierDepartmentStore(supplier, departmentStore) == yesNo.yes AND date IS DATE,
                                                                                  sureSupplierDepartmentStoreOver(supplier, departmentStore, date) == yesNo.yes;

//dataContractSupplier 'Договор по умолчанию' (supplier) = dataContract(userContractSupplier(supplier));
defaultContractSupplier(supplier) = GROUP MAX contract AS contract BY supplierContract(contract);
//dataDefaultContractSupplier(supplier) = dataContract(defaultContractSupplier(supplier));

overrideContractSupplier 'Основной договор' (supplier) = UNION OVERRIDE defaultContractSupplier(supplier), userContractSupplier(supplier);
dataOverrideContractSupplier 'Основной договор' (supplier) = dataContract(overrideContractSupplier(supplier)) IN lawGroup;
CONSTRAINT CHECKED supplier != supplierContract(userContractSupplier(supplier)) MSG 'ошибка: Договор по умолчанию для поставщика должен соответствовать договорам поставщика';
equalsSupplierContract 'Основной договор' (supplier, contract) = userContractSupplier(supplier) == contract;

inSupplierContract(supplier, contract) = supplierContract(contract) == supplier;
inSupplierAccount(supplier, account) = legalEntityAccount(account) == supplier;
inSupplierLicense(supplier, license) = legalEntityLicense(license) == supplier;

inCompanyContract(company, contract) = companyContract(contract) == company;
inCompanyAccount(company, account) = legalEntityAccount(account) == company;

nameSupplierContract 'Контрагент' (contract) = name(supplierContract(contract));
nameCompanyContract 'Контрагент' (contract) = name(companyContract(contract));

userContractCompanySupplier 'Контракт (ИД)' = DATA contract (company, supplier) IN idGroup;
//dataContractCompanySupplier 'Договор по умолчанию' (company, supplier) = dataContract(userContractCompany(company));
actingContract(contract) = contract IF dateFromContract(contract) <= currentDate() AND NOT dateToContract(contract) < currentDate();
actingContractCompanySupplier(company, supplier) = GROUP MAX actingContract(contract) BY companyContract(contract), supplierContract(contract);

overrideContractCompanySupplier 'Основной договор' (company, supplier) = UNION OVERRIDE actingContractCompanySupplier(company, supplier), userContractCompanySupplier(company, supplier);
dataOverrideContractCompanySupplier 'Основной договор' (company, supplier) = dataContract(overrideContractCompanySupplier(company, supplier)) IN lawGroup;
CONSTRAINT CHECKED supplier != supplierContract(userContractCompanySupplier(company, supplier)) MSG 'ошибка: Договор по умолчанию для поставщика должен соответствовать договорам поставщика';
CONSTRAINT CHECKED company != companyContract(userContractCompanySupplier(company, supplier)) MSG 'ошибка: Договор по умолчанию для компании должен соответствовать договорам компании';
equalsCompanySupplierContract 'Основной договор' (company, supplier, contract) = userContractCompanySupplier(company, supplier) == contract;


FORM supplier 'Поставщик'
OBJECTS s=supplier FIXED PANEL
TREE treeStore y=STRING[3], t=tradingNetwork, st=storeType, so=store
OBJECTS a=account, c=contractProvider, l=license, dt=DATE FIXED PANEL, d=departmentStore
PROPERTIES READONLY OBJVALUE(y), name(t), name(st), name(so)
FILTERS NOT NULL stringEqualsAll(y)
FILTERS NOT NULL inStoreTypeTradingNetwork (st, t)
FILTERS NOT NULL inStoreTypeStore (st, so)
FILTERS NOT NULL inTradingNetworkStoreTypeStoreDepartment(t, st, so, d)
PROPERTIES(s) nameOwnershipLegalEntity, name, fullNameLegalEntity, addressLegalEntity, showFormaddressLegalEntity, postAddressLegalEntity, showFormpostAddressLegalEntity,
              managerLegalEntity, showFormmanagerLegalEntity, accountantLegalEntity, showFormaccountantLegalEntity,
              phoneLegalEntity, showFormphoneLegalEntity, UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity, emailLegalEntity, siteLegalEntity, payerSupplier,
              residentLegalEntity, manufacturerLegalEntity, surePercentSupplier, allowablePercentSupplier,
              afterDaysSupplier, forHoursSupplier, limitSupplier, prioritySupplier, signsSupplier, marksSupplier //dataActingLicenseLegalEntity, dataOverrideContractSupplier, dataOverrideAccountLegalEntity
PROPERTIES(a) dataAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount, MFOBankAccount, noteAccount, ADDOBJ, delete
PROPERTIES(c) dataContract, nameCompanyContract, nameformContract, showFormNameformContract, nameTypeContract, dateFromContract, dateToContract, currencyContract, warnContract, banContract,   // nameFormContract
              delayContract, showFormdelayContract, requestContract, noteContract, ADDOBJ, delete
PROPERTIES(l) dataLicense, dateFromLicense, dateToLicense, ADDOBJ, delete   //        tabaccoLicense
PROPERTIES(d) nameStoreDepartmentStore, name
PROPERTIES (dt) OBJVALUE HIGHLIGHTIF dateDiffersCurrent(dt)
PROPERTIES (s, d, dt) namesureSupplierDepartmentStoreOver HIGHLIGHTIF namesureSupplierDepartmentStoreDate(s, d, dt)
PROPERTIES(s,d) emailOrderSupplierDepartmentStore, contactSupplierDepartmentStore, nameControlSupplierDepartmentStore, showFormNamesureSupplierDepartmentStoreOver //namesureSupplierDepartmentStore, showFormNamesureSupplierDepartmentStore
PROPERTIES(s,c) equalsSupplierContract
PROPERTIES(s,a) equalsLegalEntityAccount
//PROPERTIES(s,l) equalsLegalEntityLicense
FILTERS NOT NULL inSupplierContract(s, c),
        NOT NULL inSupplierAccount(s, a),
        NOT NULL inSupplierLicense(s, l)
FILTERGROUP filters9
    FILTER 'Показывать только с заполненными полями' 'F10' NOT NULL overrideSupplierDepartmentStoreDate(s, d, dt) DEFAULT
EDIT supplier OBJECT s;

DESIGN supplier FROM DEFAULT {
//PROPERTY (showFormaddressLegalEntity){panelLocation = SHORTCUT addressLegalEntity DEFAULT;}
    main{
       ADD prop.box BEFORE functions.box{
            tabbedPane = TRUE;
            ADD a.box;
            ADD c.box;
            ADD l.box;
            ADD d.box {
               ADD dt.box BEFORE d.grid.box;
                   ADD treeStore.box BEFORE d.grid.box;
                   POSITION treeStore.box TO THE LEFT d.grid.box;
                   d.grid.box {
                   fillHorizontal = 3;
                   };
            }
    }
   }
}

FORM suppliers 'Поставщики'
OBJECTS s=supplier
PROPERTIES(s) READONLY shortNameOwnershipLegalEntity, name, fullNameLegalEntity, managerLegalEntity, phoneLegalEntity, UNPLegalEntity, emailLegalEntity, siteLegalEntity
PROPERTIES(s) ADDFORM, EDITFORM, delete;

FORM company 'Компания'
OBJECTS co=company FIXED PANEL
OBJECTS a=account
OBJECTS s=supplier
OBJECTS c=contractProvider
PROPERTIES(co) nameOwnershipLegalEntity, shortNameOwnershipLegalEntity, name, fullNameLegalEntity, addressLegalEntity, showFormaddressLegalEntity, postAddressLegalEntity, showFormpostAddressLegalEntity,
               managerLegalEntity, showFormmanagerLegalEntity, accountantLegalEntity, showFormaccountantLegalEntity, phoneLegalEntity, showFormphoneLegalEntity, UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity, emailLegalEntity, siteLegalEntity
PROPERTIES(a) dataAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount, MFOBankAccount, noteAccount, ADDOBJ, delete
PROPERTIES(c) dataContract, nameSupplierContract, nameformContract, showFormNameformContract, nameTypeContract, dateFromContract, dateToContract, currencyContract, noteContract, delayContract, showFormdelayContract, ADDOBJ, delete
PROPERTIES(s) name, fullNameLegalEntity
PROPERTIES(co, s)    dataOverrideContractCompanySupplier
PROPERTIES(co, s, c) equalsCompanySupplierContract
FILTERS NOT NULL inCompanyContract(co, c),
        NOT NULL inCompanyAccount(co, a),
        NOT NULL inSupplierContract(s, c)

EDIT company OBJECT co;

DESIGN company FROM DEFAULT {
    main{
       ADD prop.box BEFORE functions.box {
            tabbedPane = TRUE;
            ADD a.box;
            ADD v.box { title = 'Поставщик-договор'; }
            ADD s.box IN v.box;
            ADD c.box IN v.box;
            POSITION s.box TO THE LEFT c.box;
       }
   }
}
FORM companies 'Компании'
OBJECTS co=company
PROPERTIES(co) READONLY shortNameOwnershipLegalEntity, name, fullNameLegalEntity, managerLegalEntity, phoneLegalEntity, UNPLegalEntity, emailLegalEntity, siteLegalEntity, dataOverrideAccountLegalEntity
PROPERTIES(co) ADDFORM, EDITFORM, delete;

// ----------------------------------- Ассортимент поставщиков-------------------------------------------- //

itemAssortmentSupplier 'Товар в ассортименте поставщика' = DATA BOOLEAN (departmentStore, supplier, item);
minCountItemAssortment 'Минимальный заказ' = DATA INTEGER (departmentStore, supplier, item);

FORM assortmentSupplier 'Ассортимент поставщика'
OBJECTS d=departmentStore FIXED PANEL, s=supplier, i=item
PROPERTIES(d) READONLY name
PROPERTIES(s) name
PROPERTIES(s) ADDFORM, EDITFORM, delete
PROPERTIES(i) nameAttributeItem
PROPERTIES(i) ADDFORM, EDITFORM, delete
PROPERTIES(d, s, i)  itemAssortmentSupplier, minCountItemAssortment;

//---------------------------- по поставщикам и товарам ----------------------------------------

//--------------------------------------Заказ------------------------------------------------------------------//

TABLE supplierDepartmentStoreDate (supplier, departmentStore, DATE);

@metaCodeDoubleObjectDateProperty(timeTable, supplier, departmentStore, 'Поставка', BOOLEAN, baseGroup);

CLASS ABSTRACT order 'Заказ' : named, historyObject;
CLASS orderSupplier 'Заказ поставщику' : order;
CLASS orderPost 'Одобренный заказ поставщику' :orderSupplier;
//CLASS orderStock 'Заказ складу' :order;

dataOrderSupplier 'Номер заказа' (orderSupplier) = DATA INTEGER (orderSupplier) IN baseGroup;
maxDataOrderSupplier = UNION OVERRIDE 0, [GROUP MAX dataOrderSupplier(orderSupplier)]();
nextDataOrderSupplier = maxDataOrderSupplier() + 1;
dataOrderSupplier (orderSupplier) <- OLD nextDataOrderSupplier() ON ASSIGN orderSupplier IS orderSupplier;
curDateOrderSupplier 'Дата заказа' = DATA DATE (orderSupplier);
dateOrderSupplier 'Дата поставки' = DATA DATE (orderSupplier);
departmentStoreOrderSupplier 'Отдел заказа (ИД)' = DATA departmentStore (orderSupplier);
nameDepartmentStoreOrderSupplier 'Отдел заказа' (orderSupplier) = name(departmentStoreOrderSupplier(orderSupplier));
supplierOrderSupplier 'Поставщик заказа (ИД)' = DATA supplier (orderSupplier);
nameSupplierOrderSupplier 'Поставщик заказ' (orderSupplier) = name(supplierOrderSupplier(orderSupplier));
completePercentageOrderSupplier 'Процент выполнения' (orderSupplier) = DATA DOUBLE (orderSupplier) IN baseGroup;

quantityPackItem2 'Количество в грузовом месте' (item) = UNION OVERRIDE 1 IF item IS item, quantityPackItem(item);
itemAssortmentOrderSupplier 'Ассортимент заказа' (orderSupplier, item) = itemAssortmentSupplier(departmentStoreOrderSupplier(orderSupplier), supplierOrderSupplier(orderSupplier), item);
packQuantityItemOrderSupplier 'Количество мест' = DATA INTEGER (orderSupplier, item);
sumQuantityItemOrderSupplier 'Сумарное количество товара' (orderSupplier, item) = quantityPackItem2(item) * packQuantityItemOrderSupplier(orderSupplier, item);
fullPriceItemOrderSupplier 'Цена с НДС' (orderSupplier, item) = DATA DOUBLE (orderSupplier, item) IN baseGroup;
fullSumItemOrderSupplier 'Сумма с НДС' (orderSupplier, item) =  sumQuantityItemOrderSupplier(orderSupplier, item) * fullPriceItemOrderSupplier(orderSupplier, item) IN baseGroup;
fullSumOrderSupplier 'Сумма с НДС' (orderSupplier) = GROUP SUM fullSumItemOrderSupplier(orderSupplier, item) BY orderSupplier;
//minQuantityOrderSupplier 'Минимальный заказ' (orderSupplier, item) = minCountItemAssortment(departmentStoreOrderSupplier(orderSupplier), supplierOrderSupplier(orderSupplier), item);
//CONSTRAINT packQuantityItemOrderSupplier(orderSupplier, item) < minQuantityOrderSupplier(orderSupplier, item) AND packQuantityItemOrderSupplier(orderSupplier, item) != 0  MSG 'Заказ должен быть больше минимального';
quantityDaysNextOrder 'Количество дней до поставки' (orderSupplier) = UNION MAX 0 IF orderSupplier IS orderSupplier, daysInclBetweenDates(curDateOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier));
quantityOrderSupplier 'Количество заказов для поставщика' (supplier, departmentStore, dateOrderSupplier) = GROUP SUM 1 IF orderSupplier BY supplierOrderSupplier(orderSupplier), departmentStoreOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier);
nextDateOrder 'Следующая дата поставки' (supplier, departmentStore, date) = GROUP MIN dateIN IF timeTableDate(supplier, departmentStore, dateIN) AND dateIN > (date AS DATE) BY supplier, departmentStore, date;
nextDateOrderSupplier 'Следующая дата поставки' = DATA DATE (orderSupplier);
quantityDaysNext2Order 'Количество дней до следующей поставки' (orderSupplier) = daysInclBetweenDates(curDateOrderSupplier(orderSupplier), nextDateOrderSupplier(orderSupplier));
quantityRealizationItemNextOrder 'Предполагаемое количество реализации товара до следующей поставки' (orderSupplier, item) = quantityDaysNext2Order(orderSupplier)*quantityRealizationDepartmentStoreItem(departmentStoreOrderSupplier(orderSupplier), item);
balance2DepartmentStoreItem 'Величина остатков товара и минимального резерва' (orderSupplier, item) = balanceDepartmentStoreItem(departmentStoreOrderSupplier(orderSupplier), item)+minReserveItem(item);
isEnoughItem 'Достаточно ли остатков товара' (orderSupplier, item) = balanceDepartmentStoreItem(departmentStoreOrderSupplier(orderSupplier), item)-quantityRealizationItemNextOrder(orderSupplier, item)<minReserveItem(item);
recommendCountOrderSupplier 'Рекомендцемое количество товара для заказа' (orderSupplier, item) = UNION MAX (quantityRealizationItemNextOrder(orderSupplier, item)-balance2DepartmentStoreItem(orderSupplier, item)), minQuantityOrderItem(item) AND orderSupplier IS orderSupplier IF isEnoughItem(orderSupplier, item);

createOrderSupplier 'Создать заказ' = ACTION (sup, dep, dt, dt2) {
    [ADDOBJ orderSupplier]();
    (dateOrderSupplier(o) IF o == addedObject()) <- (dt AS DATE);
    departmentStoreOrderSupplier(o) IF o == addedObject() <- dep AS departmentStore;
    supplierOrderSupplier(o) IF o == addedObject() <- sup AS supplier;
    curDateOrderSupplier(o) IF o == addedObject() <- (dt2 AS DATE);
    nextDateOrderSupplier(o) IF o == addedObject() <- nextDateOrder(sup, dep, dt);
    apply();
};

FORM orderSupplier 'Заказ поставщику'
OBJECTS o=orderSupplier FIXED PANEL, i=item
PROPERTIES(o) dataOrderSupplier READONLY, curDateOrderSupplier, dateOrderSupplier, nameDepartmentStoreOrderSupplier,
              nameSupplierOrderSupplier, completePercentageOrderSupplier, fullSumOrderSupplier, timeCreated, nameUserCreated
PROPERTIES(i) nameAttributeItem, quantityPackItem2, minQuantityOrderItem READONLY
PROPERTIES(o, i) packQuantityItemOrderSupplier, sumQuantityItemOrderSupplier, fullPriceItemOrderSupplier, fullSumItemOrderSupplier, recommendCountOrderSupplier
FILTERS NOT NULL itemAssortmentOrderSupplier(o, i)
FILTERGROUP filters1
    FILTER 'Показывать только заказанные позиции' 'F10' NOT NULL sumQuantityItemOrderSupplier(o, i) DEFAULT
EDIT orderSupplier OBJECT o;

FORM orderSuppliers 'Заказы поставщику'
OBJECTS o=orderSupplier, i=item
PROPERTIES(o) READONLY name, curDateOrderSupplier, dateOrderSupplier, nameDepartmentStoreOrderSupplier, quantityDaysNextOrder,
                       nameSupplierOrderSupplier, completePercentageOrderSupplier, fullSumOrderSupplier, timeCreated, nameUserCreated,
                       nextDateOrderSupplier
PROPERTIES(o) ADDFORM, EDITFORM, delete
PROPERTIES(i) READONLY nameAttributeItem
PROPERTIES(o, i) READONLY  packQuantityItemOrderSupplier, sumQuantityItemOrderSupplier, fullPriceItemOrderSupplier, fullSumItemOrderSupplier
FILTERS NOT NULL sumQuantityItemOrderSupplier(o, i);

// ----------------------------------- Разрешать поставки ------------------------------------------- //

FORM timeTableDate 'График поставок'
OBJECTS t=DATE FIXED PANEL, t2=DATE FIXED PANEL,d=departmentStore FIXED PANEL, g=genTimeTable FIXED PANEL, s=supplier
PROPERTIES(t) OBJVALUE
PROPERTIES(t2) OBJVALUE
PROPERTIES(g) showFormGenTimeTable
PROPERTIES(d) READONLY name
PROPERTIES(s) READONLY name
PROPERTIES(s, d, t) timeTableDate
PROPERTIES(s, d, t) READONLY quantityOrderSupplier, nextDateOrder
PROPERTIES(s, d, t, t2) createOrderSupplier
FILTERGROUP filters
    FILTER 'Показывать с поставкой на дату' 'F10' NOT NULL timeTableDate(s, d, t) DEFAULT;

DESIGN timeTableDate FROM DEFAULT {
        t2.box {title = 'Дата заказа';}
        t.box {title = 'Дата поставки';}
        POSITION t2.box TO THE LEFT t.box;
        POSITION g.box TO THE RIGHT d.box;
}

//--------------------------------------Формы--------------------------------------------------------------------------//

isManufactory (departmentStore) = departmentStore IS manufactory;

FORM departmentStore 'Отдел магазина'
OBJECTS d=departmentStore FIXED PANEL, e=employee, t=tradingSquare, s=supplier, tm=DATE, d2=departmentStore
PROPERTIES(d) name, nameStoreDepartmentStore, controlMinusRestsDepartmentStore, deleteItemMinusRestsDepartmentStore, controlMinusRestsContainerDepartmentStore,
              verifyOrderArrivalDepartmentStore, // controlAssortmentProviderDepartmentStore это св-во для пересечения поставщ. и отдела, создано ниже
              maxQuantityDeliveryHourDepartmentStore, resolveMaxQuantityDeliveryHourAssortmentLessDepartmentStore, resolveOrderItemDepartmentStore,
              quantityCashChangeOneOperationAccountDepartmentStore, commonNameMateriallyResponsiblePersonItemReportDepartmentStore,
              commonNameBookkeeperItemReportDepartmentStore, commonNamePersonCheckReportDepartmentStore, nameRevaluationCommitteeDepartmentStore
              //nameOutDepartmentManufactory, nameInPriceDepartmentManufactory, marginPublicCateringManufactory
PROPERTIES(e) READONLY userFirstName, userLastName
PROPERTIES(e) ADDSESSIONFORM, EDITSESSIONFORM, delete
PROPERTIES(t) squareTradingSquare, dateTradingSquare
PROPERTIES(t) ADDOBJ, delete
PROPERTIES(d2) READONLY name
PROPERTIES(d, d2) rawDepartmentStore
FILTERS NOT NULL inRawDepartmentStore(d, d2)
FILTERGROUP rawFilter
    FILTER 'Подразделения из которых полуется сырье' 'F10' NOT NULL rawDepartmentStore(d, d2)
PROPERTIES(d) namediscount, showFormNamediscount
PROPERTIES(s) READONLY name
//PROPERTIES(s, d) timeTable
PROPERTIES(tm) OBJVALUE
PROPERTIES(s, d, tm) READONLY timeTableDate
FILTERS NOT NULL timeTableDate(s, d, tm)
FILTERS NOT NULL inTradingSquareDepartmentStore(d, t)
FILTERS NOT NULL departmentStoreEmployee(d, e)
EDIT departmentStore OBJECT d;

DESIGN departmentStore FROM DEFAULT {
    main{
       ADD prop.box BEFORE functions.box{
            tabbedPane = TRUE;
            ADD e.box;
            ADD t.box;
            ADD d2.box;
            ADD s.box{
                ADD tm.box;
            };
      }
   }
}

FORM store 'Магазин'
OBJECTS s=store FIXED PANEL, d=departmentStore, t=tradingSquare
PROPERTIES(s) name, addressStore, nameStoreTypeStore, tradingSquareStore, nameCompanyStore
PROPERTIES(d) READONLY name, defaultTradingSquareDepartmentStore
PROPERTIES(d) ADDSESSIONFORM, EDITSESSIONFORM, delete
FILTERS NOT NULL inStoreDepartment(s, d)
EDIT store OBJECT s;

FORM stores 'Магазины'
TREE treeStore a=STRING[3], t=tradingNetwork, st=storeType
OBJECTS s=store, d=departmentStore
PROPERTIES READONLY OBJVALUE(a), name(t), name(st)
FILTERS NOT NULL stringEqualsAll(a)
FILTERS NOT NULL inStoreTypeTradingNetwork (st, t)
FILTERS NOT NULL inTradingNetworkStoreTypeStore(t, st, s)
PROPERTIES(s) name, addressStore, nameStoreTypeStore, nameCompanyStore
PROPERTIES(s) ADDFORM, EDITFORM, delete
PROPERTIES(d) READONLY name
FILTERS NOT NULL inStoreDepartment(s, d);

DESIGN stores FROM DEFAULT {
    POSITION treeStore.box TO THE LEFT s.box;
    POSITION treeStore.box TO THE LEFT d.box;

    s.box {
        fillHorizontal = 3.0;
    }

    d.box {
        fillHorizontal = 3.0;
    }
}

FORM tradingNetwork 'Торговая сеть'
OBJECTS n=tradingNetwork FIXED PANEL, s=storeType
PROPERTIES(n) name
PROPERTIES(s) name
PROPERTIES(s) ADDOBJ, delete
FILTERS NOT NULL inStoreTypeTradingNetwork(s, n)
EDIT tradingNetwork OBJECT n;

FORM qualifier 'Классификатор магазинов'
OBJECTS n=tradingNetwork, s=storeType
PROPERTIES(n) READONLY name
PROPERTIES(n) ADDFORM, EDITFORM
PROPERTIES(s) READONLY name
FILTERS NOT NULL inStoreTypeTradingNetwork(s, n);

//---------------------------- Модели оборудования ----------------------------------------//
CLASS ABSTRACT model 'Модель' : named;
CLASS cashModel 'Модель касс' : model;
CLASS scalesModel 'Модель весов' : model;
CLASS checkModel 'Модель прайс чекеров' : model;

CLASS frontOffice 'Фронт офис';
nameFrontOffice 'Версия фронт офиса на кассе' = DATA STRING[100] (frontOffice) IN baseGroup;

noteModel 'Примечание' = DATA STRING[200] (model) IN baseGroup;
useModel 'Модель используется' = DATA BOOLEAN (model) IN baseGroup;
lettersModel 'Преобразовать наименование товара В ЗАГЛАВНЫЕ БУКВЫ' = DATA BOOLEAN (model) IN baseGroup;


frontOfficeCashModel 'Модель касс (ИД)' = DATA frontOffice (cashModel) IN idGroup;
nameFrontOfficeCashModel 'Версия фронт офиса на кассе' (cashModel) = nameFrontOffice(frontOfficeCashModel(cashModel)) IN baseGroup;
dateToCashModel 'Дата, до которой модель внесена в реестр' = DATA DATE (cashModel) IN baseGroup;
maxProductModel 'MAX допустимое колич.товаров' = DATA INTEGER (model) IN baseGroup;

CLASS flash 'Прошивка';
nameFlash 'Модель весов/версия прошивки' = DATA STRING[100] (flash) IN baseGroup;

flashScalesModel 'Прошивка (ИД)' = DATA flash (scalesModel) IN idGroup;
nameFlashScalesModel 'Модель весов/версия прошивки' = nameFlash(flashScalesModel(scalesModel)) IN baseGroup;
maxTextScalesModel 'MAX допустимое колич.дополнительных текстов' = DATA INTEGER (scalesModel) IN baseGroup;
folderScalesModel 'Папка на сервере весов с драйвером весов' = DATA STRING[200] (scalesModel) IN baseGroup;
compositionScalesModel 'Число знаков в доп.тексте(составе товара)' = DATA INTEGER (scalesModel) IN baseGroup;

CLASS modelCheck 'Модель чекера';
nameModelCheck 'Модель прайс чекера' = DATA STRING[100] (modelCheck) IN baseGroup;

modelCheckModel 'Модель (ИД)' = DATA modelCheck (checkModel) IN idGroup;
nameModelCheckModel 'Модель прайс чекера' = nameModelCheck(modelCheckModel(checkModel)) IN baseGroup;

FORM models 'Модели оборудования'
OBJECTS m=model
PROPERTIES(m) READONLY objectClassName, name, useModel, maxProductModel, noteModel
PROPERTIES(m) ADDFORM, EDITFORM, delete;                // либо так как ниже//
//OBJECTS s=scalesModel, ch=checkModel, c=cashModel
//PROPERTIES(ch) READONLY name, nameModelCheckModel, noteModel, useModel, maxProductModel
//PROPERTIES(s)  READONLY name, nameFlashScalesModel, noteModel, useModel, maxProductModel, maxTextScalesModel,
//               folderScalesModel, lettersModel, compositionScalesModel
//PROPERTIES(c)  READONLY name, nameFrontOfficeCashModel, noteModel, useModel, dateToCashModel, lettersModel
//PROPERTIES(s) ADDFORM, EDITFORM, delete
//PROPERTIES(c) ADDFORM, EDITFORM, delete
//PROPERTIES(ch) ADDFORM, EDITFORM, delete;

//DESIGN models FROM DEFAULT {
//    main{
//       ADD prop1.box BEFORE functions.box{
//            tabbedPane = TRUE;
//            ADD c.box;
//            ADD s.box;
//            ADD ch.box;
//    }
//   }
//}

FORM checkModel 'Модель прайс чекера'
OBJECTS ch=checkModel FIXED PANEL
PROPERTIES(ch) name, nameModelCheckModel, noteModel, useModel, maxProductModel
EDIT checkModel OBJECT ch;

FORM cashModel 'Модель касс'
OBJECTS c=cashModel FIXED PANEL
PROPERTIES(c) name, nameFrontOfficeCashModel, noteModel, useModel, dateToCashModel, lettersModel
EDIT cashModel OBJECT c;

FORM scalesModel 'Модель весов'
OBJECTS s=scalesModel FIXED PANEL
PROPERTIES(s) name, nameFlashScalesModel, noteModel, useModel, maxProductModel, maxTextScalesModel,
              folderScalesModel, lettersModel, compositionScalesModel
EDIT scalesModel OBJECT s;


//---------------------------- группы оборудования ----------------------------------------//

CLASS ABSTRACT groupMachinery 'Группы оборудования';
CLASS groupScales 'Группы весов' : groupMachinery;
CLASS groupCash 'Группы касс' : groupMachinery;
CLASS groupCheck 'Группы прайс чекеров' : groupMachinery;

nameGroupMachinery 'Наименование группы' = DATA STRING[200] (groupMachinery) IN baseGroup;
transferGroupMachinery 'Передать товар на группу оборудования' = DATA BOOLEAN (groupMachinery) IN baseGroup;

cellGroupScales 'Помещать на ценники номера ячеек с этой группы' = DATA BOOLEAN (groupScales) IN baseGroup;
sidSectionGroupScales 'Код отдела в Set Retail' = DATA INTEGER (groupScales) IN baseGroup;
directoryGroupScales 'Директория сервера Set Retail' = DATA STRING[200] (groupScales) IN baseGroup;

departmentStoreGroupMachinery 'Подразделение ИД' = DATA departmentStore (groupMachinery) IN baseGroup;
nameDepartmentStoreGroupMachinery 'Подразделение' (groupMachinery) = name(departmentStoreGroupMachinery(groupMachinery)) IN baseGroup;

//---------------------------- типы оборудования  ----------------------------------------//
CLASS ABSTRACT machinery 'Оборудование';
CLASS cash 'Касса' : machinery;
CLASS scales 'Весы' : machinery;
CLASS check 'Прайс чекер' : machinery;


groupCashCash 'Группа ИД' = DATA groupCash (cash) IN idGroup;
isGroupCashCash (groupCash, cash) = groupCashCash(cash) == groupCash;

groupScalesScales 'Группа ИД' = DATA groupScales (scales) IN idGroup;
isGroupScalesScales (groupScales, scales) = groupScalesScales(scales) == groupScales;

groupCheckCheck 'Группа ИД' = DATA groupCheck (check) IN idGroup;
isGroupCheckCheck (groupCheck, check) = groupCheckCheck(check) == groupCheck;

nameGroupMachineryCash 'Наименование группы' (cash) = nameGroupMachinery(groupCashCash(cash)) IN baseGroup;
nameGroupMachineryScales 'Наименование группы' (scales) = nameGroupMachinery(groupScalesScales(scales)) IN baseGroup;
nameGroupMachineryCheck 'Наименование группы' (check) = nameGroupMachinery(groupCheckCheck(check)) IN baseGroup;

dataGroupMachineryMachinery 'Наименование группы' (machinery) = UNION EXCLUSIVE nameGroupMachineryCash(machinery), nameGroupMachineryScales(machinery), nameGroupMachineryCheck(machinery);

descriptionMachinery 'Описание' = DATA STRING[200] (machinery) IN baseGroup;
portMachinery 'Адрес/порт' = DATA STRING[100] (machinery) IN baseGroup;
useMachinery 'Оборудование используется' = DATA BOOLEAN (machinery) IN baseGroup;

cashModelCash 'Модель ИД' = DATA cashModel (cash) IN idGroup;
numberCash 'Регистрационный номер кассы' = DATA STRING[100] (cash) IN baseGroup;
directoryCash 'Директория обмена с кассой' = DATA STRING[100] (cash) IN baseGroup;
nameCashModelCash 'Модель кассы' (cash) = name(cashModelCash(cash)) IN baseGroup;
statusCash 'Статус кассы (на момент посл.передачи)' = DATA STRING[200] (cash) IN baseGroup;
resultCash 'Результат передачи на кассу товаров' = DATA STRING[200] (cash) IN baseGroup;
dateCash 'Дата фискализации кассового аппарата' = DATA DATE (cash) IN baseGroup;
nppCash 'Порядковый номер кассы в торговом объекте ' = DATA INTEGER (cash) IN baseGroup;

CLASS STATIC feature 'Свойство для оборудования'
{
    never 'HET,(пример: для годен это значит - печатаем в поле этикетки "Годен до")',
    always 'ДА для ВСЕХ товаров поместить в состав',
    sometimes 'ДА (для товаров с признаком [Контролировать срок годности по товару?]'
};

scalesModelScales 'Модель ИД' = DATA scalesModel (scales) IN idGroup;
numberScales 'Заводской(серийный) номер ' = DATA STRING[100] (scales) IN baseGroup;
nameScalesModelScales 'Модель весов' (scales) = name(scalesModelScales(scales)) IN baseGroup;
dateScales 'Дата следующей обязательной поверки' = DATA DATE (scales) IN baseGroup;
passScales 'свойство ИД' = DATA feature (scales) IN idGroup;
namePassScales 'Свойство товара [Годен до] помещать в ингредиенты' (scales) = name(UNION OVERRIDE feature.always IF scales IS scales,
                                                                                                  passScales(scales)) IN baseGroup;
manufactureScales 'свойство ИД' = DATA feature (scales) IN idGroup;
nameManufactureScales 'Свойство товара [Дата изг.] помещать в ингредиенты' (scales) = name(UNION OVERRIDE feature.always IF scales IS scales,
                                                                                                  manufactureScales(scales)) IN baseGroup;
productionScales 'свойство ИД' = DATA feature (scales) IN idGroup;
nameProductionScales 'Св-во товара[Срок годн.в часах] поместить в ингр-ты' (scales) = name(UNION OVERRIDE feature.always IF scales IS scales,
                                                                                                  productionScales(scales)) IN baseGroup;
sidScales 'ID весов для Set Retail' = DATA INTEGER (scales) IN baseGroup;


FORM machineries 'Оборудование'
OBJECTS m=machinery
PROPERTIES(m) READONLY objectClassName, descriptionMachinery, dataGroupMachineryMachinery, portMachinery, useMachinery
PROPERTIES(m) ADDFORM, EDITFORM, delete;

FORM cash 'Касса'
OBJECTS c=cash FIXED PANEL
PROPERTIES(c) numberCash, descriptionMachinery, nameGroupMachineryCash, portMachinery, useMachinery, directoryCash, nameCashModelCash,
              dateCash, nppCash, statusCash, resultCash
EDIT cash OBJECT c;

FORM scales 'Весы'
OBJECTS s=scales FIXED PANEL
PROPERTIES(s) numberScales, descriptionMachinery, nameGroupMachineryScales, portMachinery, useMachinery, nameScalesModelScales,
              dateScales, namePassScales, nameManufactureScales, nameProductionScales, sidScales
EDIT scales OBJECT s;

FORM check 'Прайс чекер'
OBJECTS ch=check FIXED PANEL
PROPERTIES(ch) descriptionMachinery, dataGroupMachineryMachinery, portMachinery, useMachinery
EDIT check OBJECT ch;

FORM groupScales 'Группа весов'
OBJECTS grs=groupScales FIXED PANEL
OBJECTS s=scales
PROPERTIES(grs) nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery, cellGroupScales, sidSectionGroupScales, directoryGroupScales
PROPERTIES(s)   numberScales, descriptionMachinery, nameGroupMachineryScales, portMachinery, useMachinery, nameScalesModelScales,
                dateScales, namePassScales, nameManufactureScales, nameProductionScales, sidScales, ADDOBJ, delete
FILTERGROUP filters1
    FILTER 'Показывать только для данной группы' 'F10' NOT NULL isGroupScalesScales(grs, s) DEFAULT
EDIT groupScales OBJECT grs;

FORM groupsScales 'Группы весов'
OBJECTS grs=groupScales, s=scales
PROPERTIES(grs) READONLY nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery, cellGroupScales, sidSectionGroupScales, directoryGroupScales
PROPERTIES(grs) ADDFORM, EDITFORM, delete
PROPERTIES(s)   READONLY numberScales, descriptionMachinery, nameGroupMachineryScales, portMachinery, useMachinery, nameScalesModelScales,
                dateScales, namePassScales, nameManufactureScales, nameProductionScales, sidScales
FILTERS NOT NULL isGroupScalesScales(grs, s);

FORM groupCash 'Группа касс'
OBJECTS grc=groupCash FIXED PANEL
OBJECTS c=cash
PROPERTIES(grc) nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery
PROPERTIES(c)   numberCash, descriptionMachinery, nameGroupMachineryCash, portMachinery, useMachinery, directoryCash, nameCashModelCash,
                dateCash, nppCash, statusCash, resultCash, ADDOBJ, delete
FILTERGROUP filters2
    FILTER 'Показывать только для данной группы' 'F10' NOT NULL isGroupCashCash(grc, c) DEFAULT
EDIT groupCash OBJECT grc;


FORM groupsCash 'Группы касс'
OBJECTS grc=groupCash, c=cash
PROPERTIES(grc)  READONLY nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery
PROPERTIES(grc)  ADDFORM, EDITFORM, delete
PROPERTIES(c)    READONLY numberCash, descriptionMachinery, nameGroupMachineryCash, portMachinery, useMachinery, directoryCash, nameCashModelCash,
                 dateCash, nppCash, statusCash, resultCash
FILTERS NOT NULL isGroupCashCash(grc, c);

FORM groupCheck 'Группа прайс чекеров'
OBJECTS grch=groupCheck FIXED PANEL
OBJECTS ch=check
PROPERTIES(grch) nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery
PROPERTIES(ch)   descriptionMachinery, dataGroupMachineryMachinery, portMachinery, useMachinery, ADDOBJ, delete
FILTERGROUP filters3
    FILTER 'Показывать только для данной группы' 'F10' NOT NULL isGroupCheckCheck(grch, ch) DEFAULT
EDIT groupCheck OBJECT grch;

FORM groupsCheck 'Группы прайс чекеров'
OBJECTS grch=groupCheck, ch=check
PROPERTIES(grch) READONLY nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery
PROPERTIES(grch) ADDFORM, EDITFORM, delete
PROPERTIES(ch)   READONLY descriptionMachinery, dataGroupMachineryMachinery, portMachinery, useMachinery
FILTERS NOT NULL isGroupCheckCheck(grch, ch);

// ----------------------------------- Группы пользователей -------------------------------------------------- //

CLASS groupUser 'Группы пользователей';

nameGroupUser 'Наименование группы' = DATA STRING[100] (groupUser) IN baseGroup;
sidGroupUser 'Идентификатор' = DATA STRING[20] (groupUser) IN baseGroup;

groupUserEmployee(employee) = DATA groupUser (employee)  IN idGroup;
nameGroupUserEmployee 'Наименование группы' (employee) = nameGroupUser(groupUserEmployee(employee)) IN baseGroup;

includedEmployeeCash 'Подключить'  = DATA BOOLEAN (employee, cash) IN baseGroup;
dateFromEmployeeCash 'Дата с'  = DATA DATE (employee, cash) IN baseGroup;
dateToEmployeeCash 'Дата по'  = DATA DATE (employee, cash) IN baseGroup;

CLASS STATIC typeAction 'Тип действия'
{
    all 'Все подразделения',
    notAll 'Отдельные подразделения'
};
actionEmployee(employee) = DATA typeAction (employee)  IN idGroup;
nameActionEmployee 'доступ к подразделениям' (employee) = name(UNION OVERRIDE typeAction.all IF employee IS employee,       // по-умолчанию все подразделения
                                                                              actionEmployee(employee)) IN baseGroup;

inEmployeeDepartmentStoreDefault(employee, departmentStore) = DATA BOOLEAN (employee, departmentStore);
inEmployeeDepartmentStore 'Подключить' (employee, departmentStore) = inEmployeeDepartmentStoreDefault(employee, departmentStore) IF actionEmployee(employee) == typeAction.notAll IN baseGroup;
dateFromEmployeeDepartmentStore 'Начало доступа'  = DATA DATE (employee, departmentStore) IN baseGroup;
dateToEmployeeDepartmentStore 'Окончание доступа'  = DATA DATE (employee, departmentStore) IN baseGroup;

isGroupUserEmployee(groupUser, employee) =  groupUserEmployee(employee) == groupUser;

departmentStoreCash(cash) = departmentStoreGroupMachinery(groupCashCash(cash)) IN idGroup;
nameDepartmentStoreCash 'Наименование отдела' (cash) = name(departmentStoreCash(cash)) IN baseGroup;
nameStoreDepartmentStoreCash 'Наименование магазина' (cash) = name(storeDepartmentStore(departmentStoreCash(cash)))  IN baseGroup;

CONSTRAINT  groupUserEmployee(employee) AND NOT nameActionEmployee(employee) MSG 'Для сотрудника не выбран доступ к подразделениям';
// todo: надо сделать проверку для сотрудника на доступ к подразделению//


FORM groupUser 'Группa пользователей'
OBJECTS gru=groupUser FIXED PANEL
OBJECTS e=employee, c=cash, d=departmentStore
PROPERTIES(gru)  nameGroupUser, sidGroupUser
PROPERTIES(e)    nameGroupUserEmployee, userFirstName, userLastName, phoneEmployee, nameActionEmployee, nameEmployeeSystemEmployee,
                 shortNameLanguageEmployee, numberEmployee, passwordEmployee, dataEmployee
PROPERTIES(c)    READONLY nameStoreDepartmentStoreCash, nameDepartmentStoreCash, nameGroupMachineryCash, numberCash, nppCash
PROPERTIES(e, c) includedEmployeeCash, dateFromEmployeeCash, dateToEmployeeCash
PROPERTIES(d)    READONLY nameStoreDepartmentStore, name
PROPERTIES(e, d) dateFromEmployeeDepartmentStore, dateToEmployeeDepartmentStore, inEmployeeDepartmentStore
FILTERGROUP filters1
    FILTER 'Показывать кассы только для данного пользователя' 'F10' NOT NULL includedEmployeeCash(e, c) DEFAULT
FILTERGROUP filters2
    FILTER 'Показывать сотрудников только для данной группы пользователей' 'F9' NOT NULL isGroupUserEmployee(gru, e) DEFAULT
FILTERGROUP filters3
    FILTER 'Показывать подразделения только для данного пользователя' 'F8' NOT NULL inEmployeeDepartmentStore(e, d) DEFAULT
EDIT groupUser OBJECT gru;

DESIGN groupUser FROM DEFAULT {
    main{
       ADD prop.box BEFORE functions.box {
            ADD c.box;
            ADD d.box;
            POSITION c.box TO THE LEFT d.box;
       }
       ADD xrop.box BEFORE prop.box {
            ADD e.box;
       }

    }
}

FORM groupsUser 'Группы пользователей'
OBJECTS gru=groupUser, e=employee, c=cash, d=departmentStore
PROPERTIES(gru)  READONLY nameGroupUser, sidGroupUser
PROPERTIES(gru)  ADDFORM, EDITFORM, delete
PROPERTIES(e)    READONLY userFirstName, userLastName, phoneEmployee, nameActionEmployee
PROPERTIES(c)    READONLY nameStoreDepartmentStoreCash, nameDepartmentStoreCash, numberCash, nameGroupMachineryCash, nppCash
PROPERTIES(e, c) includedEmployeeCash, dateFromEmployeeCash, dateToEmployeeCash
PROPERTIES(d)    READONLY nameStoreDepartmentStore, name
PROPERTIES(e, d) READONLY dateFromEmployeeDepartmentStore, dateToEmployeeDepartmentStore, inEmployeeDepartmentStore
FILTERS NOT NULL includedEmployeeCash(e, c),
        NOT NULL isGroupUserEmployee(gru, e),
        NOT NULL inEmployeeDepartmentStore(e, d);

DESIGN groupsUser FROM DEFAULT {
    main{
       ADD prop.box BEFORE functions.box {
            tabbedPane = TRUE;
            ADD c.box;
            ADD d.box;
       }
       ADD case.box BEFORE prop.box {
            ADD gru.box;
            ADD e.box;
            POSITION gru.box TO THE LEFT e.box;
       }
   }
}

 //---------------------------- Карты проработки (разруба) ----------------------------------------//
GROUP cutGroup 'Разделка' : baseGroup;
CLASS cutting 'Карта пророботки (разделки)' : named;
CLASS detailCutting 'Компоненты';

sidCutting 'Номер карты (из сборника и прочее)' = DATA INTEGER (cutting) IN cutGroup;
dateCutting 'Дата создания' = DATA DATE (cutting) IN cutGroup;
useCutting 'Используется' = DATA BOOLEAN (cutting) IN cutGroup;
//             номер из сборника.....
descriptionCutting 'Описание' = DATA STRING[200] (cutting) IN cutGroup;
percAllowancesCutting 'Процент надбавок' = DATA DOUBLE (cutting) IN cutGroup;
percLossesCutting 'Процент потерь' = DATA DOUBLE (cutting) IN cutGroup;
percSweepsCutting 'Процент зачисток' = DATA DOUBLE (cutting) IN cutGroup;
InDepartmentStoreCutting 'В каких подразделениях разрешено использовать карту' = DATA BOOLEAN (departmentStore, cutting) IN baseGroup;

cuttingDetailCutting 'Строка ИД' = DATA cutting (detailCutting) IN idGroup;
sidCuttingDetailCutting 'Номер карты' (detailCutting) =  sidCutting(cuttingDetailCutting(detailCutting)) IN cutGroup;
itemDetailCutting 'Товар ИД' = DATA item (detailCutting) IN idGroup;
shortNameUnitOfMeasureItemDetailCutting 'Ед.изм.' (detailCutting) = shortNameUnitOfMeasureItem(itemDetailCutting(detailCutting)) IN cutGroup;
nameItemDetailCutting 'Наименование товара' (detailCutting) = name(itemDetailCutting(detailCutting)) IN cutGroup;
factorDetailCutting 'Рассчетный коэффициент цены' = DATA DOUBLE (detailCutting) IN cutGroup;
percGoodsDetailCutting '% выхода товара' = DATA DOUBLE (detailCutting) IN cutGroup;

uniqueDetailCuttingCutting(cutting, item) = GROUP UNIQUE detailCutting BY cuttingDetailCutting(detailCutting), itemDetailCutting(detailCutting);
isCuttingDetailCutting(cutting, detailCutting) = cuttingDetailCutting(detailCutting) == cutting;

inItemCutting 'Вкл.' = DATA BOOLEAN (item, cutting) IN cutGroup;

FORM cutting 'Карта проработки'
OBJECTS c=cutting FIXED PANEL
OBJECTS d=detailCutting, dep=departmentStore, i=item
PROPERTIES(c)      sidCutting, descriptionCutting, dateCutting, useCutting, percAllowancesCutting, percLossesCutting, percSweepsCutting
PROPERTIES(d)      nameItemDetailCutting, shortNameUnitOfMeasureItemDetailCutting, factorDetailCutting, percGoodsDetailCutting, ADDOBJ, delete
PROPERTIES(dep)    nameStoreDepartmentStore, name
PROPERTIES(i)      nameAttributeItem, shortNameUnitOfMeasureItem, nameBrandItem
PROPERTIES(dep, c) InDepartmentStoreCutting
PROPERTIES(i, c)   inItemCutting

FILTERS NOT NULL isCuttingDetailCutting(c, d)
FILTERGROUP filters7
    FILTER 'Показывать подразделения только для данной карты' 'F10' NOT NULL InDepartmentStoreCutting(dep, c) DEFAULT
FILTERGROUP filters8
    FILTER 'Показывать товар только для данной карты' 'F9' NOT NULL inItemCutting(i, c) DEFAULT

EDIT cutting OBJECT c;

DESIGN cutting FROM DEFAULT {
    main{
       ADD cut.box BEFORE functions.box{
            tabbedPane = TRUE;
            ADD d.box;
            ADD dep.box { title = 'Подразделение'; }
            ADD i.box { title = 'Товар, для которого действует карта'; }
       }
   }
}

FORM cuttings 'Карты проработки'
OBJECTS c=cutting, d=detailCutting, dep=departmentStore, i=item
PROPERTIES(c)      READONLY sidCutting, descriptionCutting, dateCutting, useCutting, percAllowancesCutting, percLossesCutting, percSweepsCutting
PROPERTIES(c)      ADDFORM, EDITFORM, delete
PROPERTIES(d)      READONLY nameItemDetailCutting, shortNameUnitOfMeasureItemDetailCutting, factorDetailCutting, percGoodsDetailCutting
PROPERTIES(dep)    READONLY nameStoreDepartmentStore, name
PROPERTIES(i)      READONLY nameAttributeItem, shortNameUnitOfMeasureItem, nameBrandItem
PROPERTIES(dep, c) READONLY InDepartmentStoreCutting
PROPERTIES(i, c) READONLY inItemCutting
FILTERS NOT NULL   isCuttingDetailCutting(c, d),
        NOT NULL   InDepartmentStoreCutting(dep, c),
        NOT NULL   inItemCutting(i, c)
ORDER BY           nameStoreDepartmentStore, sidCutting, nameItemDetailCutting, name;


DESIGN cuttings FROM DEFAULT {
    main{

       ADD cut2.box BEFORE functions.box{
            ADD dep.box { title = 'Подразделение'; }

            ADD i.box { title = 'Товар, для которого действует карта'; }
            POSITION dep.box TO THE LEFT i.box;
       }
       ADD cut1.box BEFORE cut2.box{
            ADD d.box;

       }
   }
}

//---------------------------- Рецепты блюд ----------------------------------------//
CLASS recipe 'Рецепт' : named;
CLASS recipeDetail 'Сырье рецепта';

dishRecipe  'Блюдо (ИД)' = DATA item (recipe) IN idGroup;
CONSTRAINT CHECKED dishRecipe (recipe) AND NOT isManufacturedItem(dishRecipe(recipe)) MSG 'Блюдо должно производиться';
nameDishRecipe 'Блюдо' = name(dishRecipe(recipe)) IN baseGroup;

beginDateRecipe 'Используется с' = DATA DATE (recipe) IN baseGroup;
isUsedRecipe 'Используется' = DATA BOOLEAN (recipe) IN baseGroup;
numberRecipe 'Номер рецептуры (из сборника и пр.)' = DATA STRING[40] (recipe) IN baseGroup;
notesRecipe 'Технология приготовления' = DATA STRING[100] (recipe) IN baseGroup;
outWeightRecipe 'Количество выхода изделия' = DATA DOUBLE (recipe) IN baseGroup;

recipeRecipeDetail 'Рецепт (ИД)' = DATA recipe(recipeDetail) IN baseGroup;
componentRecipeDetail 'Компонент (ИД)' = DATA component(recipeDetail) IN idGroup;
nameComponentRecipeDetail 'Компонент' = name(componentRecipeDetail(recipeDetail)) IN baseGroup;
normQuantityRecipeDetail 'Норма закладки (брутто)' = DATA DOUBLE (recipeDetail) IN baseGroup;

inRecipeRecipeDetail(recipe, recipeDetail) = recipeRecipeDetail(recipeDetail) == recipe;

FORM recipe 'Рецепт блюда'
OBJECTS r=recipe FIXED PANEL
OBJECTS rd=recipeDetail
PROPERTIES(r) nameDishRecipe, numberRecipe, beginDateRecipe, isUsedRecipe, notesRecipe, outWeightRecipe
PROPERTIES(rd) nameComponentRecipeDetail, normQuantityRecipeDetail, ADDOBJ, delete
FILTERS NOT NULL inRecipeRecipeDetail(r, rd)
EDIT recipe OBJECT r;

FORM recipes 'Рецепты блюд'
OBJECTS r=recipe
OBJECTS rd=recipeDetail
PROPERTIES(r) READONLY nameDishRecipe, numberRecipe, isUsedRecipe
PROPERTIES(r) ADDFORM, EDITFORM, delete
PROPERTIES(rd) READONLY nameComponentRecipeDetail, normQuantityRecipeDetail
FILTERS NOT NULL inRecipeRecipeDetail(r, rd);


//---------------------------- Товар на оборудовании ----------------------------------------//

CLASS stage 'Ячейка';
valueStage 'Ячейка' = DATA INTEGER (stage) IN baseGroup;
barcodeStageGroupMachinery 'Штрих-код ИД' = DATA barcode (stage, groupMachinery) IN idGroup;
priceStageGroupMachinery 'Розничная цена для штрих-кода' (stage, groupMachinery) = DATA DOUBLE (stage, groupMachinery) IN baseGroup;
dateStageGroupMachinery 'Дата истечения срока годности' (stage, groupMachinery) = DATA DATE (stage, groupMachinery) IN baseGroup;
timeStageGroupMachinery 'Время истечения срока годности' (stage, groupMachinery) = DATA INTEGER (stage, groupMachinery) IN baseGroup;
stockStageGroupMachinery 'Остаток на момент передачи' (stage, groupMachinery) = DATA DOUBLE (stage, groupMachinery) IN baseGroup;

barcodeBarcodeStageGroupMachinery 'Штрих-код' (stage, groupMachinery) = barcode(barcodeStageGroupMachinery(stage, groupMachinery)) IN baseGroup;
//nameSkuBarcodeStageGroupMachinery 'Товар' (stage, groupMachinery) = nameSkuBarcode(barcodeStageGroupMachinery(stage, groupMachinery)) IN baseGroup;
//titleScalesBarcodeStageGroupMachinery 'Наименование для весов' (stage, groupMachinery) = titleScalesBarcode(barcodeStageGroupMachinery(stage, groupMachinery));
//titleCashBarcodeStageGroupMachinery 'Наименование для касс' (stage, groupMachinery) = titleCashBarcode(barcodeStageGroupMachinery(stage, groupMachinery));
//amountBarcodeStageGroupMachinery 'Количество (сколько списать при продаже)' (stage, groupMachinery) = amountBarcode(barcodeStageGroupMachinery(stage, groupMachinery));
//removeBarcodeStageGroupMachinery 'Заблокирован (удален с оборудования)' (stage, groupMachinery) = removeBarcode(barcodeStageGroupMachinery(stage, groupMachinery));
//commentRemoveBarcodeStageGroupMachinery 'Причина блокировки' (stage, groupMachinery) = commentRemoveBarcode(barcodeStageGroupMachinery(stage, groupMachinery));

FORM stages 'Товары на оборудовании'
OBJECTS gr=groupMachinery
OBJECTS st=stage
PROPERTIES(gr) READONLY nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery
PROPERTIES(st) valueStage
PROPERTIES(st, gr)  barcodeBarcodeStageGroupMachinery, priceStageGroupMachinery, dateStageGroupMachinery,
                    timeStageGroupMachinery, stockStageGroupMachinery
FILTERS  NOT NULL barcodeStageGroupMachinery(st, gr);

//---------------------------- Проведение инвентаризации ----------------------------------------//

CLASS inventory 'Ивнентаризация' : historyObject, postedObject;
CLASS listInventory 'Опись';
CLASS listInventoryPosted 'Закрытая опись' : listInventory;
CLASS collationSheet 'Сличительная ведомость';
CLASS pageList 'Страница описи';
CLASS detailPage 'Строка';

nameInventory 'Инвенторизация (номер, название)' = DATA STRING[100] (inventory) IN baseGroup;
dateToInventory 'Остатки выставить на (утро) дату' = DATA DATE (inventory) IN baseGroup;
timeToInventory 'Выставить остатки на время' = DATA STRING[10] (inventory) IN baseGroup;        // переделать: должен быть класс - время
noteInventory 'Примечание (основание)' = DATA STRING[500] (inventory) IN baseGroup;
dateClosedInventory 'Дата закрытия инвенторизации' = DATA DATE (inventory) IN baseGroup;
timeClosedInventory 'Время закрытия инвенторизации' = DATA STRING[10] (inventory) IN baseGroup;// переделать: должен быть класс - время
// userCreated кто создал
//  timeClosed, commonNameUserClosed     кто закрыл
infoInventory 'Дополнительная информация по инвенторизации' = DATA STRING[500] (inventory) IN baseGroup;
IPInventory 'IP адрес, с которого закрыта инвенторизация' = DATA STRING[100] (inventory) IN baseGroup;

storeInventory 'Магазин ИД' = DATA store (inventory) IN idGroup;
nameStoreInventory 'Магазин' = name(storeInventory(inventory)) IN baseGroup;

nameCollationSheet 'Номер (название сличит. ведомости)' = DATA STRING[100] (collationSheet) IN baseGroup;
inventoryCollationSheet(collationSheet) = DATA inventory (collationSheet) IN idGroup;
inInventoryCollationSheet(inventory, collationSheet) = inventoryCollationSheet(collationSheet) == inventory;
departmentStoreCollationSheet(collationSheet) = DATA departmentStore (collationSheet) IN idGroup;
nameDepartmentStoreCollationSheet 'Отдел' (collationSheet) = name(departmentStoreCollationSheet(collationSheet)) IN baseGroup;
//inDepartmentStoreCollationSheet(departmentStore, collationSheet) = departmentStoreCollationSheet(collationSheet) == departmentStore;
//storeInventoryCollationSheet(collationSheet) = storeInventory(inventoryCollationSheet(collationSheet)) IN idGroup;
CONSTRAINT CHECKED  storeInventory(inventoryCollationSheet(collationSheet)) != storeDepartmentStore(departmentStoreCollationSheet(collationSheet))  MSG 'Отдел для слич. ведомости не соответствует магазину по инвентаризации';

collationSheetListInventory(listInventory) = DATA collationSheet (listInventory) IN idGroup;
inCollationSheetListInventory(collationSheet, listInventory) = collationSheetListInventory(listInventory) == collationSheet;
//departmentStoreCollationSheetListInventory(listInventory) = departmentStoreCollationSheet(collationSheetListInventory(listInventory)) IN idGroup;

sidListInventory 'Номер описи' = DATA INTEGER (listInventory) IN baseGroup;
maxSidCollationSheet(collationSheet) = UNION OVERRIDE 0 IF collationSheet IS collationSheet, [GROUP MAX sidListInventory(listInventory) BY collationSheetListInventory(listInventory)](collationSheet);
nextSidCollationSheet(collationSheet) = maxSidCollationSheet(collationSheet) + 1;
addNewListInventory 'Добавить опись' = ACTION (collationSheet) {       //  listInventoryPosted  заменить на listInventory
    [ADDOBJ listInventoryPosted]();
    sidListInventory(li) IF li == addedObject() <- nextSidCollationSheet(collationSheet);
} TOOLBAR IMAGE 'add.png';

noteListInventory 'Примечание (наименование описи)' = DATA STRING[100] (listInventory) IN baseGroup;
committeeListInventory(listInventory) = DATA inventoryCommittee (listInventory) IN idGroup;
inCommitteeListInventoryEmployee 'Сотрудник комиссии' (listInventory, employee) = inCommitteeEmployee(committeeListInventory(listInventory), employee);

nameCommitteeListInventory 'Название комиссии' (listInventory) = name(committeeListInventory(listInventory)) IN baseGroup;
commonNameChairmanCommitteeListInventory 'Председатель комиссии' (listInventory) = commonNameChairmanCommittee(committeeListInventory(listInventory)) IN baseGroup;
nameDepartmentStoreListInventory 'Подразделение' (listInventory) = name(departmentStoreCollationSheet(collationSheetListInventory(listInventory))) IN baseGroup;
closeListInventory 'Закрыть' = DATA BOOLEAN (listInventory) IN baseGroup;

listInventoryPageList(pageList) = DATA listInventory (pageList) IN baseGroup;
inListInventoryPageList(listInventory, pageList) = listInventoryPageList(pageList) == listInventory;
sumPageListInventory 'К-во страниц' (listInventory) = GROUP SUM 1 IF pageList IS pageList BY listInventoryPageList(pageList);
sidPageList 'Номер страницы' = DATA INTEGER (pageList) IN baseGroup;
maxSidListInventory(listInventory) = UNION OVERRIDE 0 IF listInventory IS listInventory, [GROUP MAX sidPageList(pageList) BY listInventoryPageList(pageList)](listInventory);
nextSidListInventory(listInventory) = maxSidListInventory(listInventory) + 1;
addNewPageList 'Добавить страницу' = ACTION (listInventory) {
    [ADDOBJ pageList]();
    sidPageList(pl) IF pl == addedObject() <- nextSidListInventory(listInventory);
} TOOLBAR IMAGE 'add.png';

notePageList 'Примечание к странице' = DATA STRING[100] (pageList) IN baseGroup;

pageListDetailPage(detailPage) = DATA pageList (detailPage) IN idGroup;
inPageListDetailPage(pageList, detailPage) = pageListDetailPage(detailPage) == pageList;
barcodeDetailPage(detailPage) = DATA barcode (detailPage) IN idGroup;

sidDetailPage 'Номер строки' = DATA INTEGER (detailPage) IN baseGroup;
maxSidDetailListInventory(listInventory) = UNION OVERRIDE 0 IF listInventory IS listInventory, [GROUP MAX sidDetailPage(detailPage) BY listInventoryPageList(pageListDetailPage(detailPage))](listInventory);
nextSidDetailListInventory(listInventory) = maxSidDetailListInventory(listInventory) + 1;
addNewDetailPage 'Добавить строку' = ACTION (listInventory) {
    [ADDOBJ detailPage]();
    sidDetailPage(dp) IF dp == addedObject() <- nextSidDetailListInventory(listInventory);
} TOOLBAR IMAGE 'add.png';

nameBarcodeDetailPage 'Штрих-код' (detailPage) = barcode(barcodeDetailPage(detailPage)) IN baseGroup;
// по Ш-К выбрать товар
itemDetailPage(detailPage) = DATA item (detailPage) IN idGroup;       // потом переделаеть от Ш-К
nameAttributeItemDetailPage 'Товар' (detailPage) = nameAttributeItem(itemDetailPage(detailPage)) IN baseGroup;

quantityCountedDetailPage 'Количество посчитано' = DATA DOUBLE (detailPage) IN baseGroup;
priceDetailPage 'Цена за ед.' = DATA INTEGER (detailPage) IN baseGroup;
totalDetailPage 'Сумма' (detailPage) = priceDetailPage(detailPage) * quantityCountedDetailPage(detailPage) IN baseGroup;

quantityDetailPageList 'Количество строк' (pageList) = GROUP SUM 1 IF detailPage IS detailPage BY pageListDetailPage(detailPage) IN baseGroup;
quantityCountedPageList 'Количество посчитано' (pageList) = GROUP SUM quantityCountedDetailPage(detailPage) BY pageListDetailPage(detailPage) IN baseGroup;
totalPageList 'Сумма посчитанного' (pageList) = GROUP SUM totalDetailPage(detailPage) BY pageListDetailPage(detailPage) IN baseGroup;

quantityDetailListInventory 'Количество строк' (listInventory) = GROUP SUM quantityDetailPageList(pageList) BY listInventoryPageList(pageList) IN baseGroup;
quantityCountedListInventory 'Количество посчитано' (listInventory) = GROUP SUM quantityCountedPageList(pageList) BY listInventoryPageList(pageList) IN baseGroup;
totalDetailListInventory 'Сумма посчитанного' (listInventory) = GROUP SUM totalPageList(pageList) BY listInventoryPageList(pageList) IN baseGroup;

quantityDetailCollationSheet 'Количество строк' (collationSheet) = GROUP SUM quantityDetailListInventory(listInventory) BY collationSheetListInventory(listInventory) IN baseGroup;
quantityCountedCollationSheet 'Количество посчитано' (collationSheet) = GROUP SUM quantityCountedListInventory(listInventory) BY collationSheetListInventory(listInventory) IN baseGroup;
totalDetailCollationSheet 'Сумма посчитанного' (collationSheet) = GROUP SUM totalDetailListInventory(listInventory) BY collationSheetListInventory(listInventory) IN baseGroup;

includeCollationSheetItem 'Вкл в ведомость' = DATA BOOLEAN (collationSheet, item) IN baseGroup;

quantityCountedCollationSheetItem 'Количество посчитано' (collationSheet, item) = GROUP SUM quantityCountedDetailPage(detailPage)  BY collationSheetListInventory(listInventoryPageList(pageListDetailPage(detailPage))), itemDetailPage(detailPage);
totalCollationSheetItem 'Сумма посчитанного' (collationSheet, item) = GROUP SUM totalDetailPage(detailPage) BY collationSheetListInventory(listInventoryPageList(pageListDetailPage(detailPage))), itemDetailPage(detailPage);

//quantityCountedCollationSheetItem 'Количество посчитано' (collationSheet, item) = GROUP SUM quantityCountedDetailPage(detailPage)  BY itemDetailPage(detailPage), collationSheetListInventory(listInventoryPageList(pageListDetailPage(detailPage)));



balanceCollationSheetItem 'Остаток' (collationSheet, item) = balanceDepartmentStoreItem(departmentStoreCollationSheet(collationSheet), item) IN baseGroup;
retailPriceCollationSheetItem 'Учетная цена' (collationSheet, item) = retailPriceItemDepartmentVal(item, departmentStoreCollationSheet(collationSheet), dateToInventory(inventoryCollationSheet(collationSheet)));
totalBalansCollationSheetItem 'Сумма по учетным данным ' (collationSheet, item) = retailPriceCollationSheetItem(collationSheet, item) * balanceCollationSheetItem(collationSheet, item);

//inCollationSheetItem (collationSheet, item) =  TRUE IF quantityCountedCollationSheetItem(collationSheet, item) AND includeCollationSheetItem(collationSheet, item);
//priceCollationSheetItem 'Цена за ед.'  (collationSheet, item) =  GROUP MAX priceDetailPage(detailPage) BY itemDetailPage(detailPage), collationSheetListInventory(listInventoryPageList(pageListDetailPage(detailPage)));
//totalCollationSheetItem 'Сумма посчитанного' (collationSheet, item) = quantityCountedCollationSheetItem(collationSheet, item) * priceCollationSheetItem(collationSheet, item);   наверное не правильно

FORM inventory 'Ивнентаризация'
OBJECTS in=inventory FIXED PANEL
OBJECTS cs=collationSheet, li=listInventory, i=item
PROPERTIES (in) nameInventory, nameStoreInventory, dateToInventory, timeToInventory, nameUserCreated, timeClosed, commonNameUserClosed, noteInventory, infoInventory, IPInventory
PROPERTIES (cs) nameCollationSheet, nameDepartmentStoreCollationSheet, addNewListInventory TODRAW li, ADDOBJ, delete
PROPERTIES (li) sidListInventory, nameDepartmentStoreListInventory, noteListInventory, nameCommitteeListInventory, commonNameChairmanCommitteeListInventory, closeListInventory,
                quantityDetailListInventory, quantityCountedListInventory, totalDetailListInventory, delete
PROPERTIES (i)  nameAttributeItem
PROPERTIES (cs, i) quantityCountedCollationSheetItem, totalCollationSheetItem, balanceCollationSheetItem, totalBalansCollationSheetItem, includeCollationSheetItem
FILTERS NOT NULL inInventoryCollationSheet(in,cs),
        NOT NULL inCollationSheetListInventory(cs, li)
FILTERGROUP filterInventory
    FILTER 'Показывать только посчитанные товары' 'F10' NOT NULL quantityCountedCollationSheetItem(cs, i)
    FILTER 'Показывать только товары с остатком' 'F9' NOT NULL balanceCollationSheetItem(cs, i)
EDIT inventory OBJECT in;


FORM listInventory 'Опись'
OBJECTS     li=listInventory FIXED PANEL         // заменить на listInventory
OBJECTS     pl=pageList, dp=detailPage, e=employee
PROPERTIES (li) sidListInventory, nameDepartmentStoreListInventory, noteListInventory, nameCommitteeListInventory, commonNameChairmanCommitteeListInventory, closeListInventory,
                quantityDetailListInventory, quantityCountedListInventory, totalDetailListInventory, addNewPageList TODRAW pl, addNewDetailPage TODRAW dp
PROPERTIES      sidPageList(pl) READONLY, sidDetailPage(dp) READONLY
PROPERTIES (pl) notePageList, quantityDetailPageList, quantityCountedPageList, totalPageList, delete
PROPERTIES (dp) nameBarcodeDetailPage, nameAttributeItemDetailPage, quantityCountedDetailPage, priceDetailPage, totalDetailPage, delete
PROPERTIES (e)  commonName
FILTERS NOT NULL inListInventoryPageList(li, pl),
        NOT NULL inPageListDetailPage(pl, dp),
        NOT NULL inCommitteeListInventoryEmployee(li, e)
EDIT listInventory OBJECT li;

DESIGN listInventory FROM DEFAULT {
    main{
       ADD yrop.box BEFORE functions.box {
            ADD x.box BEFORE dp.box;
            ADD pl.box IN x.box;
            ADD e.box IN x.box { title = 'Члены комиссии' ;}
            POSITION pl.box TO THE LEFT e.box;
       }
    }
}


FORM inventories 'Ивнентаризации'
OBJECTS in=inventory, cs=collationSheet, li=listInventory, pl=pageList, dp=detailPage
PROPERTIES (in) READONLY nameInventory, nameStoreInventory
PROPERTIES (in) ADDFORM, EDITFORM, delete
PROPERTIES (cs) READONLY nameCollationSheet, nameDepartmentStoreCollationSheet  // добавить св-ва по строкам
PROPERTIES (cs) addNewListInventory TODRAW li
PROPERTIES (li) READONLY sidListInventory, nameDepartmentStoreListInventory, sumPageListInventory, quantityDetailListInventory, quantityCountedListInventory, totalDetailListInventory
PROPERTIES (li) EDITFORM, delete
PROPERTIES (pl) READONLY sidPageList, quantityDetailPageList, quantityCountedPageList, totalPageList
//PROPERTIES (dp) READONLY sidDetailPage, nameBarcodeDetailPage, nameAttributeItemDetailPage, quantityCountedDetailPage, priceDetailPage, totalDetailPage
FILTERS NOT NULL inInventoryCollationSheet(in,cs),
        NOT NULL inCollationSheetListInventory(cs, li),
        NOT NULL inListInventoryPageList(li, pl);
//        NOT NULL inPageListDetailPage(pl, dp);

DESIGN inventories FROM DEFAULT {
    main{
       ADD prop.box BEFORE functions.box {
            ADD in.box;
            ADD cs.box; //{ title = 'Поставщик-договор'; }
            POSITION in.box TO THE LEFT cs.box;
            ADD li.box;
            ADD pl.box;
            POSITION li.box TO THE LEFT pl.box;
         //   ADD dp.box;
          //  POSITION s.box TO THE LEFT c.box;
       }
   }
}


//---------------------------- Кассовые отчеты ----------------------------------------//
CLASS cashReport 'Кассовый отчет' : transaction;
CLASS cashDocument 'Кассовый документ';
CLASS incomeCashOrder 'ПКО': cashDocument;
CLASS outcomeCashOrder 'РКО': cashDocument;
CLASS bankCardsReport 'Отчет по банковским карточкам': cashDocument;

numberCashReport 'Номер кассового отчета' (cashReport) = DATA INTEGER (cashReport) IN baseGroup;
startDateCashReport 'Дата начала' (cashReport) = DATA DATE (cashReport) IN baseGroup;
endDateCashReport 'Дата окончания' (cashReport) = DATA DATE (cashReport) IN baseGroup;

reportCashDocument 'Отчет документа (ИД)' (cashDocument) = DATA cashReport (cashDocument) IN idGroup;
numberCashDocument 'Номер документа' (cashDocument) = DATA INTEGER (cashDocument) IN baseGroup;
sumCashDocument 'Сумма документа' (cashDocument) = DATA DOUBLE (cashDocument) IN baseGroup;
cashIncomeCashOrder 'Выручка кассы (ИД)' (incomeCashOrder) = DATA cash(incomeCashOrder) IN idGroup;
numberCashIncomeCashOrder 'Выручка кассы' (incomeCashOrder) = numberCash(cashIncomeCashOrder(incomeCashOrder)) IN baseGroup;
dopInfoCashDocument 'Описание' (cashDocument) = DATA STRING[10] (cashDocument) IN baseGroup;
infoCashDocument 'Основание документа' (cashDocument) = UNION EXCLUSIVE numberCashIncomeCashOrder(cashDocument) IF cashDocument IS incomeCashOrder, dopInfoCashDocument (cashDocument);

inCashReportDocument 'Документ в текущем кассовом отчете' (cashReport, cashDocument) = reportCashDocument(cashDocument)==cashReport;

FORM cashReport 'Кассовый отчет'
OBJECTS r=cashReport FIXED PANEL
OBJECTS d=cashDocument
PROPERTIES (r) numberCashReport, startDateCashReport, endDateCashReport
PROPERTIES (d) objectClassName, numberCashDocument, infoCashDocument, sumCashDocument, ADDOBJ, delete
FILTERS NOT NULL inCashReportDocument(r,d)
EDIT cashReport OBJECT r;

FORM cashReports 'Кассовые отчеты'
OBJECTS r=cashReport, d=cashDocument
PROPERTIES (r) startDateCashReport, endDateCashReport
PROPERTIES (r) ADDFORM, EDITFORM, delete
PROPERTIES (d) READONLY numberCashDocument, sumCashDocument
FILTERS NOT NULL inCashReportDocument(r,d);

//---------------------------- Приход товара от поставщика ----------------------------------------//
CLASS shipment 'Поставка': historyObject;
CLASS shipmentPosted 'Поставка (закрытая)': shipment;
CLASS batch 'Партия';
CLASS shipmentDetail 'Строка документа поставки': batch;

waybillShipment 'Номер накладной' (shipment) = DATA STRING[7] (shipment) IN baseGroup;
dateWaybillShipment 'Дата поставки' (shipment) = DATA DATE (shipment) IN baseGroup;
departmentStoreShipment 'Отдел поставки (ИД)' (shipment) = DATA departmentStore(shipment) IN idGroup;
nameDepartmentStoreShipment 'Отдел поставки' (shipment) = name(departmentStoreShipment(shipment)) IN baseGroup;
supplierShipment 'Поставщик (ИД)' (shipment) = DATA supplier (shipment) IN idGroup;
nameSupplierShipment 'Поставщик' (shipment) = name(supplierShipment(shipment)) IN baseGroup;
noteShipment 'Примечание' (shipment) = DATA STRING[100] (shipment) IN baseGroup;
carryingChargesShipment 'Транспортные расходы' (shipment) = DATA DOUBLE (shipment) IN baseGroup;
inShipmentOrder 'Поставка по заказу' (shipment, orderSupplier) = DATA BOOLEAN (shipment, orderSupplier) IN idGroup;
ordersShipment 'Заявка' (shipment) = GROUP CONCAT castToString255(dataOrderSupplier(orderSupplier)) IF inShipmentOrder(shipment, orderSupplier), ', ' BY shipment MINCHARWIDTH 10 PREFCHARWIDTH 10;
isSupplierShipmentOrder 'Заявка поставщика поставки' (shipment, orderSupplier) = supplierShipment(shipment)== supplierOrderSupplier(orderSupplier);
isDepartmentStoreShipmentOrder 'Заявка отдела поставки' (shipment, orderSupplier) = departmentStoreShipment(shipment)== departmentStoreOrderSupplier(orderSupplier);

shipmentShipmentDetail 'Строка в поставке' (shipmentDetail) = DATA shipment(shipmentDetail) IN idGroup;
inShipmentShipmentDetail(shipment, shipmentDetail) = shipmentShipmentDetail(shipmentDetail) == shipment;
itemShipmentDetail 'Товар строки документа поставки (ИД)' (shipmentDetail) = DATA item (shipmentDetail) IN idGroup;
nameAttributeItemShipmentDetail 'Товар строки документа поставки' (shipmentDetail) =  nameAttributeItem(itemShipmentDetail(shipmentDetail)) IN baseGroup;
quantityShipmentDetail 'Количество товара' (shipmentDetail) = DATA DOUBLE (shipmentDetail) IN baseGroup;
priceShipmentDetail 'Цена товара'(shipmentDetail) = DATA DOUBLE (shipmentDetail) IN baseGroup;
supplierMarkupShipmentDetail 'Оптовая надбавка/торговая скидка, %' (shipmentDetail) = DATA DOUBLE (shipmentDetail) IN baseGroup;
dateFitToShipmentDetail 'Годен до' (shipmentDetail) = DATA DATE(shipmentDetail) IN baseGroup;

suppliersRangeShipmentDetail(shipmentDetail) = DATA range (shipmentDetail) IN idGroup;
dataSuppliersRangeShipmentDetail 'НДС поставщика,%' (shipmentDetail) = dataActingRateRange(suppliersRangeShipmentDetail(shipmentDetail)) IN baseGroup;
suppliersRangeShipmentDetail(shipmentDetail) <- suppliersRangeItem(itemShipmentDetail(shipmentDetail)) ON CHANGE itemShipmentDetail(shipmentDetail);

retailRangeShipmentDetail(shipmentDetail) = DATA range (shipmentDetail) IN idGroup;
dataRetailRangeShipmentDetail 'НДС розничный,%' (shipmentDetail) = dataActingRateRange(retailRangeShipmentDetail(shipmentDetail)) IN baseGroup;
retailRangeShipmentDetail(shipmentDetail) <- overrideRateRangeItem(itemShipmentDetail(shipmentDetail)) ON CHANGE itemShipmentDetail(shipmentDetail);

wareShipmentDetail 'Посуда (ИД)' (shipmentDetail) = DATA ware(shipmentDetail) IN baseGroup;
nameWareShipmentDetail 'Посуда' (shipmentDetail) = name(wareShipmentDetail(shipmentDetail)) IN baseGroup MINCHARWIDTH 10 PREFCHARWIDTH 15;
wareShipmentDetail(shipmentDetail) <- wareItem(itemShipmentDetail(shipmentDetail)) ON CHANGE itemShipmentDetail(shipmentDetail);

retailMarkupShipmentDetail 'Торговая надбавка, %'(shipmentDetail) = DATA DOUBLE (shipmentDetail) IN baseGroup;
retailMarkupShipmentDetail(shipmentDetail) <- markupSupplierItemDepartmentOver (supplierShipment(shipmentShipmentDetail(shipmentDetail)), itemShipmentDetail(shipmentDetail),
                                                                                departmentStoreShipment(shipmentShipmentDetail(shipmentDetail)), dateWaybillShipment(shipmentShipmentDetail(shipmentDetail))) ON CHANGE itemShipmentDetail(shipmentDetail);

oldRetailPriceShipmentDetail 'Старая розничная цена' (shipmentDetail) = DATA DOUBLE (shipmentDetail) IN baseGroup;
oldRetailPriceShipmentDetail (shipmentDetail) <- retailPriceItemDepartmentDate(itemShipmentDetail(shipmentDetail), departmentStoreShipment(shipmentShipmentDetail(shipmentDetail)),
                                                              dateWaybillShipment(shipmentShipmentDetail(shipmentDetail))-1) ON CHANGE itemShipmentDetail(shipmentDetail);

retailPriceShipmentDetail 'Новая розничная цена' (shipmentDetail) = priceShipmentDetail(shipmentDetail)*(100 + retailMarkupShipmentDetail(shipmentDetail))/100*(100+dataRetailRangeShipmentDetail(shipmentDetail))/100  IN baseGroup;


FORM ordersShipment 'Заказы'
OBJECTS s=shipment FIXED PANEL, o=orderSupplier
PROPERTIES (s) READONLY waybillShipment, dateWaybillShipment
PROPERTIES (s, o) inShipmentOrder
PROPERTIES (o) READONLY dataOrderSupplier, curDateOrderSupplier, dateOrderSupplier, nameDepartmentStoreOrderSupplier,
               nameSupplierOrderSupplier, completePercentageOrderSupplier, fullSumOrderSupplier, timeCreated, nameUserCreated
FILTERS NOT NULL isSupplierShipmentOrder (s, o),
        NOT NULL isDepartmentStoreShipmentOrder (s, o);

showFormOrdersShipment 'Заказы' (shipment) = ACTION FORM ordersShipment OBJECTS s MODAL SHORTCUT ordersShipment DEFAULT;

FORM shipment 'Поставка'
OBJECTS s=shipment FIXED PANEL
OBJECTS d=shipmentDetail
PROPERTIES (s) waybillShipment, dateWaybillShipment, nameDepartmentStoreShipment, nameSupplierShipment, carryingChargesShipment, ordersShipment, showFormOrdersShipment
PROPERTIES (d) nameAttributeItemShipmentDetail, quantityShipmentDetail, priceShipmentDetail, supplierMarkupShipmentDetail,
                dateFitToShipmentDetail, nameWareShipmentDetail READONLY, dataSuppliersRangeShipmentDetail READONLY, dataRetailRangeShipmentDetail READONLY,
                retailMarkupShipmentDetail READONLY, oldRetailPriceShipmentDetail READONLY, retailPriceShipmentDetail READONLY, ADDOBJ, delete
FILTERS NOT NULL inShipmentShipmentDetail(s, d)
EDIT shipment OBJECT s;

FORM shipments 'Поставки'
OBJECTS s=shipment, d=shipmentDetail
PROPERTIES (s) READONLY waybillShipment, dateWaybillShipment, nameDepartmentStoreShipment, nameSupplierShipment, carryingChargesShipment, ordersShipment
PROPERTIES (s) ADDFORM, EDITFORM, delete
//PROPERTIES (s, o) inShipmentOrder
PROPERTIES (d) READONLY nameAttributeItemShipmentDetail, quantityShipmentDetail, priceShipmentDetail, supplierMarkupShipmentDetail, dateFitToShipmentDetail,
                        nameWareShipmentDetail, dataSuppliersRangeShipmentDetail, dataRetailRangeShipmentDetail, retailMarkupShipmentDetail, oldRetailPriceShipmentDetail, retailPriceShipmentDetail
FILTERS NOT NULL inShipmentShipmentDetail(s, d);

//---------------------------- Импорт данных ----------------------------------------//

importDataAction 'Импортировать данные' = ACTION 'rublevski.actions.ImportDataActionProperty';
importUrl 'URL' = DATA STRING[200] ();
importLogin 'Логин' = DATA STRING[200] ();
importPassword 'Пароль' = DATA STRING[200] ();

FORM importData 'Импорт данных'
PROPERTIES() importDataAction, importUrl, importLogin, importPassword;

//---------------------------- Настройка навигатора ----------------------------------------//

WINDOW TOOLBAR topToolbar 'Папки' VERTICAL HIDETITLE HIDESCROLLBARS POSITION(0, 0, 20, 5);
WINDOW TOOLBAR formsToolbar 'Формы' VERTICAL HIDETITLE POSITION (0, 5, 20, 65);
WINDOW TREE formsTree 'Формы' HIDETITLE POSITION (0, 5, 20, 65);

HIDE WINDOW BaseLogicsModule.relevantForms;
HIDE WINDOW BaseLogicsModule.relevantClassForms;

NAVIGATOR {

    baseElement TO topToolbar;

    NEW lists 'Справочники' TO formsToolbar {
        NEW goods 'Товары' {
            ADD items;
            ADD components;
            ADD itemGroups;
            ADD unitsOfMeasure;
            ADD assortments;
        }
        NEW shopStructure 'Магазины' {
            ADD companies;
            ADD qualifier;
            ADD stores;
        }
        NEW employeeRelations 'Сотрудники' {
            ADD employees;
            ADD employeesCommittees;
            ADD groupsUser;
        }
        NEW supplierRelation 'Поставщики'{
            ADD suppliers;
            ADD banks;
            ADD assortmentSupplier;
        }
        NEW equipment 'Оборудование' {
            ADD groupsCash;
            ADD groupsScales;
            ADD groupsCheck;
            ADD machineries;
            ADD models;
            ADD stages;
            ADD cashReports;
        }
        NEW producing 'Производство'{
            ADD cuttings;
            ADD recipes;
        }
        NEW pricing 'Ценообразование'{
            ADD taxes;
        }
    }

    NEW processes 'Бизнес-процессы' TO formsToolbar{
        NEW orders 'Заказы' {
            ADD orderSuppliers;
            ADD genTimeTables;
            ADD timeTableDate;
        }
        NEW incomeShipments 'Поставки' {
            ADD shipments;
        }
    }

    NEW documents 'Документы' TO formsToolbar {

    }

    ADD adminElement TO formsTree {
        NEW objects 'Карточки' {
            ADD itemGroup;
            ADD unitOfMeasure;
            ADD item;
            ADD barcode;
            ADD employee;
            ADD groupUser;
            ADD tradingSquare;
            ADD departmentStore;
            ADD store;
            ADD tradingNetwork;
            ADD committee;
            ADD bank;
            ADD ownership;
            ADD supplier;
            ADD company;
            ADD cashModel;
            ADD scalesModel;
            ADD checkModel;
            ADD assortment;
            ADD typeItem;
            ADD tag;
            ADD rowTorg1;
            ADD color;
            ADD taste;
            ADD pack;
            ADD sort;
            ADD size;
            ADD specialty;
            ADD coolingDegree;
            ADD formItem;
            ADD numberInPack;
            ADD rateWaste;
            ADD addNameisPortionBarItem;
            ADD nameisPortionBarItem;
            ADD addNamebanDiscountItem;
            ADD namebanDiscountItem;
            ADD addcoefficientNetGrossItem;
            ADD coefficientNetGrossItem;
            ADD addrateNaturalLossItem;
            ADD rateNaturalLossItem;
//            ADD addNDSSupplierItem;
//            ADD NDSSupplierItem;
            ADD addimporterPriceItem;
            ADD importerPriceItem;
            ADD addmaxReserveItemDepartment;
            ADD maxReserveItemDepartment;
            ADD addminReserveItemDepartment;
            ADD minReserveItemDepartment;
            ADD addNamebanRevaluationItemDepartment;
            ADD namebanRevaluationItemDepartment;
            ADD addNameinActionItemDepartment;
            ADD nameinActionItemDepartment;
            ADD addmarginProductionItemDepartment;
            ADD marginProductionItemDepartment;
            ADD addretailPriceItemDepartment;
            ADD retailPriceItemDepartment;
            ADD adddiscountItemDepartment;
            ADD discountItemDepartment;
            ADD addNameisSupplierItemDepartment;
            ADD nameisSupplierItemDepartment;
            ADD addpriceSupplierItemDepartment;
            ADD priceSupplierItemDepartment;
            ADD addmarkupSupplierItemDepartment;
            ADD markupSupplierItemDepartment;
            ADD addNamebanSupplierItemDepartment;
            ADD namebanSupplierItemDepartment;

            ADD cash;
            ADD scales;
            ADD check;
            ADD tax;
            ADD cutting;
            ADD recipe;
            ADD groupCash;
            ADD groupScales;
            ADD groupCheck;
            ADD component;
            ADD addaddressLegalEntity;
            ADD addressLegalEntity;
            ADD addpostAddressLegalEntity;
            ADD postAddressLegalEntity;
            ADD addmanagerLegalEntity;
            ADD managerLegalEntity;
            ADD addaccountantLegalEntity;
            ADD accountantLegalEntity;
            ADD addphoneLegalEntity;
            ADD phoneLegalEntity;
            ADD addNamesureSupplierDepartmentStore;
            ADD namesureSupplierDepartmentStore;
            ADD addressBank;
            ADD addaddressBank;
            ADD nameformContract;
            ADD addNameformContract;
            ADD delayContract;
            ADD adddelayContract;
            ADD genTimeTable;
            ADD addNamediscount;
            ADD addtimeTable;
            ADD orderSupplier;
            ADD timeTable;
            ADD cashReport;
            ADD namediscount;
            ADD rateWaste;
            ADD ordersShipment;
            ADD shipment;
        }
        ADD importData;
    }
}

