MODULE Rublevski;

IMPORT BaseLogicsModule;

CLASS doubleNamed 'Объект с кратким наименованием' : named;

shortName 'Краткое наименование' = DATA STRING[5] (doubleNamed) IN baseGroup;

// ----------------------------------- Товарный классификатор ------------------------------------------ //
CLASS itemGroup 'Товарная группа' : named;

parentItemGroup = DATA itemGroup (itemGroup);
nameParentItemGroup 'Родительская группа' = name(parentItemGroup(itemGroup));

FORM itemGroup 'Товарная группа'
OBJECTS g=itemGroup
PROPERTIES(g) name, nameParentItemGroup;

FORM itemGroups 'Товарные группы'
OBJECTS g=itemGroup
PROPERTIES(g) READONLY name, nameParentItemGroup
PROPERTIES(g) ADDFORM, EDITFORM, delete;

// ----------------------------------- Единицы измерения ------------------------------------------ //
CLASS unitOfMeasure 'Единица измерения' : doubleNamed;

FORM unitOfMeasure 'Единица измерения'
OBJECTS u=unitOfMeasure FIXED PANEL
PROPERTIES(u) name, shortName;

FORM unitsOfMeasure 'Единицы измерений'
OBJECTS u=unitOfMeasure
PROPERTIES(u) READONLY name, shortName
PROPERTIES(u) ADDFORM, EDITFORM, delete;

// ------------------------------------ Цвета ------------------------------------------------ //
CLASS color 'Цвет' : named;

FORM color 'Цвет'
OBJECTS c=color FIXED PANEL
PROPERTIES(c) name;

FORM colors 'Цвета'
OBJECTS c=color
PROPERTIES(c) READONLY name
PROPERTIES(c) ADDFORM, EDITFORM, delete;

// ------------------------------------ Вкусы ------------------------------------------------------ //

CLASS taste 'Вкус' : named;

FORM taste 'Вкус'
OBJECTS t=taste FIXED PANEL
PROPERTIES(t) name;

FORM tastes 'Вкусы'
OBJECTS t=taste
PROPERTIES(t) READONLY name
PROPERTIES(t) ADDFORM, EDITFORM, delete;

// ----------------------------------- Производители ---------------------------------- //

CLASS manufacturer 'Производитель' : named;

FORM manufacturer 'Производитель'
OBJECTS m=manufacturer FIXED PANEL
PROPERTIES(m) name;

FORM manufacturers 'Производители'
OBJECTS m=manufacturer
PROPERTIES(m) READONLY name
PROPERTIES(m) ADDFORM, EDITFORM, delete;

// ----------------------------------- Товар ------------------------------------------ //
CLASS ABSTRACT sku 'SKU' : named;
CLASS item 'Товар' : sku;
CLASS dish 'Блюдо' : sku;
CLASS component 'Компонент' : sku;

CLASS brand 'Бренд' : named;

brandItem = DATA brand(item);
nameBrandItem 'Брэнд' (item) = name(brandItem(item));

unitOfMeasureItem = DATA unitOfMeasure (item) IN idGroup;
shortNameUnitOfMeasureItem 'Единица измерения' (item) = shortName(unitOfMeasureItem(item)) IN baseGroup;

isWeightItem 'Весовой товар' = DATA BOOLEAN (item) IN baseGroup;
volumeItem 'Объём' = DATA DOUBLE (item) IN baseGroup;
netWeightItem 'Вес нетто' = DATA DOUBLE (item) IN baseGroup;

colorItem = DATA color (item) IN idGroup;
nameColorItem 'Цвет' = name(colorItem(item)) IN baseGroup;
tasteItem = DATA taste (item) IN idGroup;
nameTasteItem 'Вкус' = name(tasteItem(item)) IN baseGroup;

percentFatItem '% жирности' =  DATA DOUBLE (item) IN baseGroup;
percentAlcoholItem '% алкоголя' =  DATA DOUBLE (item) IN baseGroup;

lengthItem 'Длина товара' = DATA INTEGER (item) IN baseGroup;
widthItem 'Ширина товара' = DATA INTEGER (item) IN baseGroup;
heightItem 'Высота товара' = DATA INTEGER (item) IN baseGroup;
grossWeightItem 'Вес брутто товара' = DATA DOUBLE (item) IN baseGroup;

lengthPackItem 'Длина упаковки' = DATA INTEGER (item) IN baseGroup;
widthPackItem 'Ширина упаковки' = DATA INTEGER (item) IN baseGroup;
heightPackItem 'Высота упаковки' = DATA INTEGER (item) IN baseGroup;
grossWeightPackItem 'Вес брутто упаковки' = DATA DOUBLE (item) IN baseGroup;

articleItem 'Артикул поставщика/производителя' = DATA STRING[50] (item)IN baseGroup;
manufacturerItem = DATA manufacturer (item) IN idGroup;
nameManufacturerItem 'Производитель' = name(manufacturerItem(item)) IN baseGroup;
countryItem = DATA country (item) IN idGroup;
nameCountryItem 'Страна' = name(countryItem(item)) IN baseGroup;

minResourceItem 'Минимальный запас' = DATA INTEGER (item) IN baseGroup;
minReserveItem 'Минимальный резерв' = DATA INTEGER (item) IN baseGroup;

isFixPriceItem 'Товар с фиксированной ценой' = DATA BOOLEAN (item) IN baseGroup;

isManufacteredItem 'Товар производится' = DATA BOOLEAN (item) IN baseGroup;

energyItem 'Энергетическая ценность на 100г, ккал' = DATA DOUBLE (item) IN baseGroup;
fatsItem 'Жиры на 100г, г' = DATA DOUBLE (item) IN baseGroup;
carbohydratesItem 'Углеводы на 100г, г' = DATA DOUBLE (item) IN baseGroup;
proteinsItem 'Белки на 100г, г' = DATA DOUBLE (item) IN baseGroup;

// ----------------------------------- Атрибуты ------------------------------------------ //

CLASS ABSTRACT itemAttribute 'Атрибут товара' : named;

CLASS stringItemAttribute 'Строковый атрибут' : itemAttribute;
valueStringItemAttribute = DATA STRING[255] (item, stringItemAttribute);

CLASS STATIC customStringItemAttribute 'Предопределенный строковый атрибут' {
    caption 'Название',
    storageConditions 'Условия хранения'
} : stringItemAttribute;

CLASS STATIC objectItemAttribute 'Объектный атрибут' {
    unitOfMeasure 'Единица измерения',
    brand 'Брэнд',
    color 'Цвет',
    taste 'Вкус'
} : itemAttribute;

valueUOMItemAttribute(item, attribute) = unitOfMeasureItem(item) AND attribute == objectItemAttribute.unitOfMeasure;
valueBrandItemAttribute(item, attribute) = brandItem(item) AND attribute == objectItemAttribute.brand;
valueColorItemAttribute(item, attribute) = colorItem(item) AND attribute == objectItemAttribute.color;
valueTasteItemAttribute(item, attribute) = tasteItem(item) AND attribute == objectItemAttribute.taste;

valueObjectItemAttribute(item, attribute) = UNION EXCLUSIVE valueUOMItemAttribute(item, attribute),
                                                            valueBrandItemAttribute(item, attribute),
                                                            valueColorItemAttribute(item, attribute),
                                                            valueTasteItemAttribute(item, attribute);
nameObjectItemAttribute(item, attribute) = name(valueObjectItemAttribute(item, attribute));

valueItemAttribute(item, attribute) = UNION EXCLUSIVE valueStringItemAttribute(item, attribute),
                                                      nameObjectItemAttribute(item, attribute);

FORM item 'Товар'
OBJECTS i=item FIXED PANEL, a=itemAttribute
PROPERTIES(i) name, shortNameUnitOfMeasureItem, nameBrandItem
PROPERTIES name(a), valueItemAttribute(i, a);

//FORM items 'Товары'
//OBJECTS i=item
//PROPERTIES(i) READONLY name, shortNameUnitOfMeasureItem, isWeightItem, volumeItem, netWeightItem, nameColorItem, nameTasteItem,
// percentFatItem, percentAlcoholItem, lengthItem
//PROPERTIES(i) ADDFORM, EDITFORM, delete;


// ----------------------------------- Штрих код ------------------------------------------ //
GROUP barcodeGroup : baseGroup;

CLASS barcode 'Штрих код' : barcodeObject;

skuBarcode = DATA sku (barcode) IN idGroup;
nameSkuBarcode = name(skuBarcode(barcode)) IN baseGroup;

titleScalesBarcode 'Наименование для весов' = DATA STRING[100] (barcode) IN barcodeGroup;
titleCashBarcode 'Наименование для касс' = DATA STRING[100] (barcode) IN barcodeGroup;
unitOfMeasureBarcode = DATA unitOfMeasure (barcode) IN idGroup;
shortNameUnitOfMeasureBarcode 'Единица измерения' (barcode) = shortName(unitOfMeasureBarcode(barcode)) IN barcodeGroup;
amountBarcode 'Количество (сколько списать при продаже)' = DATA INTEGER (barcode) IN barcodeGroup;
removeBarcode 'Заблокирован (удален с оборудования)' = DATA BOOLEAN (barcode) IN barcodeGroup;
commentRemoveBarcode 'Причина блокировки' = DATA STRING[100] (barcode) IN barcodeGroup;

userBarcodeSku = DATA barcode(sku) IN idGroup;
barcodeUserBarcodeSku 'Установленный штрих-код' = barcode(userBarcodeSku(sku)) IN baseGroup;
defaultBarcodeSku(sku) = GROUP MAX barcode BY skuBarcode(barcode) IN idGroup;
barcodeSku(sku) = UNION OVERRIDE defaultBarcodeSku(sku), userBarcodeSku(sku);

CONSTRAINT CHECKED skuBarcode(userBarcodeSku(sku)) != sku AS sku  MSG 'Товар основного штрих-кода должен совпадать с товаром';

barcodeBarcodeSku  'Действующий штрих-код' = barcode(barcodeSku(sku)) IN baseGroup;

FORM barcode 'Штрих-код'
OBJECTS b=barcode
PROPERTIES(b) barcode, nameSkuBarcode;

FORM barcodes 'Штрих-кода'
OBJECTS b=barcode
PROPERTIES(b) READONLY barcode, nameSkuBarcode, titleScalesBarcode, titleCashBarcode, shortNameUnitOfMeasureBarcode, amountBarcode, removeBarcode, commentRemoveBarcode
PROPERTIES(b) ADDFORM, EDITFORM, delete;

FORM items 'Товары'
OBJECTS i=item
PROPERTIES(i) READONLY name, shortNameUnitOfMeasureItem, isWeightItem, volumeItem, netWeightItem, nameColorItem, nameTasteItem,
 percentFatItem, percentAlcoholItem, lengthItem, nameManufacturerItem, nameCountryItem, energyItem, fatsItem, carbohydratesItem, proteinsItem, barcodeUserBarcodeSku, barcodeBarcodeSku
PROPERTIES(i) ADDFORM, EDITFORM, delete;


// ----------------------------------- Склад ------------------------------------------ //

CLASS ABSTRACT stock 'Склад' : named;

// ----------------------------------- Магазин ----------------------------------------- //

GROUP storeGroup : baseGroup;

CLASS store 'Магазин' : named;
CLASS tradingNetwork 'Торговая сеть' : named; // "Рублевский", "Базар"
CLASS storeType 'Формат магазина' : named; //Мини, Супер, ...

addressStore 'Адрес магазина' = DATA STRING[100] (store) IN storeGroup;

storeTypeStore 'Формат магазина (ИД)' = DATA storeType (store) IN idGroup;
nameStoreTypeStore 'Формат магазина' (store) = name(storeTypeStore(store)) IN storeGroup;

tradingNetworkStoreType 'Торговая сеть формата магазина (ИД)' = DATA tradingNetwork (storeType) IN idGroup;
nameTradingNetworkStoreType 'Торговая сеть формата магазина' (storeType) = name(tradingNetworkStoreType(storeType)) IN storeGroup;

inStoreTypeTradingNetwork(storeType, tradingNetwork) = tradingNetworkStoreType(storeType) == tradingNetwork;

// ----------------------------------- Физические лица -------------------------------------------------- //

CLASS ABSTRACT person 'Физическое лицо' : named;
CLASS employee 'Сотрудник' : person;
departmentStoreEmployee 'Отдел сотрудника (ИД)' = DATA departmentStore (employee) IN idGroup;
nameDepartmentStoreEmployee 'Отдел сотрудника' (employee) = name(departmentStoreEmployee(employee)) IN storeGroup; //в далнейшем переделать с привязкой к дате приема на работу

FORM employee 'Сотрудник'
OBJECTS e=employee FIXED PANEL
PROPERTIES(e) name, nameDepartmentStoreEmployee
EDIT employee OBJECT e;

FORM employees 'Сотрудники'
OBJECTS e=employee
PROPERTIES(e) READONLY name, nameDepartmentStoreEmployee
PROPERTIES(e) ADDFORM, EDITFORM, delete;

// ----------------------------------- Торговая площадь -------------------------------------------------- //

CLASS tradingSquare 'Торговая площадь' : named;
squareTradingSquare 'Размер торговой площади' = DATA DOUBLE (tradingSquare) IN storeGroup;
departmentStoreTradingSquare 'Отдел торговой площади (ИД)' = DATA departmentStore (tradingSquare) IN idGroup;
nameDepartmentStoreTradingSquare 'Отдел торговой площади' (tradingSquare) = name(departmentStoreTradingSquare(tradingSquare)) IN storeGroup;
dateTradingSquare 'Дата' = DATA DATE (tradingSquare) IN storeGroup;

FORM tradingSquare 'Торговая площадь'
OBJECTS s=tradingSquare FIXED PANEL
PROPERTIES(s) name, squareTradingSquare, nameDepartmentStoreTradingSquare, dateTradingSquare
EDIT tradingSquare OBJECT s;

FORM tradingSquares 'Торговые площади'
OBJECTS s=tradingSquare
PROPERTIES(s) READONLY name, squareTradingSquare, nameDepartmentStoreTradingSquare, dateTradingSquare
PROPERTIES(s) ADDFORM, EDITFORM, delete;

// ------------------------------------- Скидки ---------------------------------------------------------- //

CLASS discount 'Скидка' : named;
dateDiscount 'Дата разрещения/запрещения скидок' = DATA DATE (discount) IN storeGroup;
agreeDiscount 'Разрешать скидку?' = DATA BOOLEAN (discount) IN storeGroup;
departmentStoreDiscount 'Отдел скидки (ИД)' = DATA departmentStore (discount) IN idGroup;
nameDepartmentStoreDiscount (discount) = name(departmentStoreDiscount(discount)) IN storeGroup;

FORM discount 'Скидка'
OBJECTS d=discount FIXED PANEL
PROPERTIES(d) name, dateDiscount, agreeDiscount, nameDepartmentStoreDiscount
EDIT discount OBJECT d;

FORM discounts 'Скидки'
OBJECTS d=discount
PROPERTIES(d) READONLY name, dateDiscount, agreeDiscount, nameDepartmentStoreDiscount
PROPERTIES(d) ADDFORM, EDITFORM, delete;

// ----------------------------------- Отдел магазина (Подразделение) ----------------------------------- //

CLASS departmentStore 'Отдел магазина' : stock;
CLASS kafeteria 'Кафетерий' : departmentStore;
CLASS tradingFloar 'Торговый зал' : departmentStore;
CLASS wholesaleStock 'Оптовый склад' : departmentStore;
CLASS placeOfAcceptance 'Приемный пункт' : departmentStore;
CLASS restaurant 'Ресторан' : departmentStore;
//CLASS stock 'Склад' : departmentStore; в дальнейшем будет распределительный центр
CLASS manufactory 'Цех' : departmentStore;

storeDepartmentStore 'Магазин отдела (ИД)' = DATA store (departmentStore) IN idGroup;
nameStoreDepartmentStore 'Магазин отдела' (departmentStore) = name(storeDepartmentStore(departmentStore)) IN storeGroup;
revaluationCommitteeDepartmentStore 'Комиссия отдела (ИД)' = DATA revaluationCommittee (departmentStore) IN idGroup;
nameRevaluationCommitteeDepartmentStore 'Комиссия отдела' (departmentStore) = name(revaluationCommitteeDepartmentStore(departmentStore)) IN storeGroup;
controlMinusRestsDepartmentStore 'Контроль за минусовыми остатками' = DATA BOOLEAN (departmentStore) IN storeGroup;
deleteItemMinusRestsDepartmentStore 'Удалять товары с отрицательным остатком с весов и касс?' = DATA BOOLEAN (departmentStore) IN storeGroup;
controlMinusRestsContainerDepartmentStore 'Контроль за минусовыми остатками тары' = DATA BOOLEAN (departmentStore) IN storeGroup;
controlAssortmentProviderDepartmentStore 'Контролировать ассортимент поставщиков в подразделении?' = DATA BOOLEAN (departmentStore) IN storeGroup;
verifyOrderArrivalDepartmentStore 'Сверять заказ и приход в подразделении?' = DATA BOOLEAN (departmentStore) IN storeGroup;
maxQuantityDeliveryHourDepartmentStore 'Максимальное допустимое число поставок в час' = DATA INTEGER (departmentStore) IN storeGroup;
resolveMaxQuantityDeliveryHourAssortmentLessDepartmentStore 'Разрешить превысить количество поставок/час при ассортименте <' = DATA DOUBLE (departmentStore) IN storeGroup;
resolveOrderItemDepartmentStore 'Разрешить заказ товара в подразделение?' = DATA BOOLEAN (departmentStore) IN storeGroup;
marginPublicCateringDepartmentStore 'Наценка общепита по умолчанию для формирования цены в подразделении' = DATA DOUBLE (departmentStore) IN storeGroup;
quantityCashChangeOneOperationAccountDepartmentStore ' Количество кассовых смен в одном оперативном отчете' = DATA INTEGER (departmentStore) IN storeGroup;
materiallyResponsiblePersonItemReportDepartmentStore 'Материально ответственное лицо, подписывающее товарный отчет' = DATA employee (departmentStore) IN storeGroup;
bookkeeperItemReportDepartmentStore 'Бухгалтер, принимающий товарный отчет' = DATA employee (departmentStore) IN storeGroup;
personCheckReportDepartmentStore 'Кто проверяет товарный отчет' = DATA employee (departmentStore) IN storeGroup;
idTradingSquareDepartmentStore 'Торговая площадь отдела магазина' (departmentStore) = GROUP MAX tradingSquare BY departmentStoreTradingSquare(tradingSquare);   //максимизирует только по ID, переделать после расширения функционала
defaultTradingSquareDepartmentStore 'Торговая площадь отдела магазина, кв.м.' (departmentStore) = squareTradingSquare(idTradingSquareDepartmentStore(departmentStore)) IN storeGroup;
idResolveDiscountDepartmentStore 'Разрешать скидку в подразделении?' (discount) = GROUP MAX discount AS discount BY departmentStoreDiscount(discount);  //максимизирует только по ID, переделать после расширения функционала
resolveDiscountDepartmentStore 'Разрешать скидку в подразделении?' (discount) = agreeDiscount(idResolveDiscountDepartmentStore(discount)) IN storeGroup;
tradingSquareStore 'Торговая площадь магазина' = GROUP SUM defaultTradingSquareDepartmentStore(departmentStore) BY storeDepartmentStore(departmentStore) IN storeGroup;

inStoreDepartment(store, departmentStore) = storeDepartmentStore(departmentStore) == store;

FORM departmentStore 'Отдел магазина'
OBJECTS d=departmentStore FIXED PANEL
PROPERTIES(d) name, nameStoreDepartmentStore, controlMinusRestsDepartmentStore, deleteItemMinusRestsDepartmentStore, controlMinusRestsContainerDepartmentStore,
              resolveDiscountDepartmentStore, controlAssortmentProviderDepartmentStore, verifyOrderArrivalDepartmentStore,
              maxQuantityDeliveryHourDepartmentStore, resolveMaxQuantityDeliveryHourAssortmentLessDepartmentStore, resolveOrderItemDepartmentStore,
              marginPublicCateringDepartmentStore, quantityCashChangeOneOperationAccountDepartmentStore, materiallyResponsiblePersonItemReportDepartmentStore,
              bookkeeperItemReportDepartmentStore, personCheckReportDepartmentStore, nameRevaluationCommitteeDepartmentStore
EDIT departmentStore OBJECT d;

FORM departmentStores 'Отделы магазина'
OBJECTS d=departmentStore
PROPERTIES(d) READONLY name, nameStoreDepartmentStore
PROPERTIES(d) ADDFORM, EDITFORM, delete;

FORM store 'Магазин'
OBJECTS s=store FIXED PANEL, d=departmentStore
PROPERTIES(s) name, addressStore, nameStoreTypeStore, tradingSquareStore
PROPERTIES(d) name, ADDFORM, EDITFORM, delete
FILTERS NOT NULL inStoreDepartment(s, d)
EDIT store OBJECT s;

FORM stores 'Магазины'
OBJECTS s=store
PROPERTIES(s) READONLY name, addressStore, nameStoreTypeStore
PROPERTIES(s) ADDFORM, EDITFORM, delete;

FORM storeType 'Формат магазина'
OBJECTS s=storeType FIXED PANEL, n=tradingNetwork
PROPERTIES(s) name
PROPERTIES(n) name, ADDOBJ, delete
FILTERS NOT NULL inStoreTypeTradingNetwork(s, n)
EDIT storeType OBJECT s;

FORM storeTypes 'Форматы магазинов'
OBJECTS s=storeType
PROPERTIES(s) READONLY name, nameTradingNetworkStoreType
PROPERTIES(s) ADDFORM, EDITFORM, delete;

FORM tradingNetwork 'Торговая сеть'
OBJECTS n=tradingNetwork FIXED PANEL
PROPERTIES(n) name
EDIT tradingNetwork OBJECT n;

FORM tradingNetworks 'Торговые сети'
OBJECTS n= tradingNetwork
PROPERTIES(n) READONLY name
PROPERTIES(n) ADDFORM, EDITFORM, delete;

// ----------------------------------- Ассортимент -------------------------------------------------------- //

CLASS assortment 'Ассортимент' : named;
itemAssortment 'Товар ассортимента' = DATA BOOLEAN (assortment, item);
infoAssortment 'Описание' = DATA STRING[100] (assortment) IN storeGroup;

FORM assortment 'Ассортимент'
OBJECTS a=assortment FIXED PANEL, i=item
PROPERTIES(a) name, infoAssortment
PROPERTIES(a, i) itemAssortment
PROPERTIES(i) name
PROPERTIES(i) ADDFORM, EDITFORM, delete
EDIT assortment OBJECT a;

FORM assortments 'Ассортименты'
OBJECTS a=assortment
PROPERTIES(a) READONLY name, infoAssortment
PROPERTIES(a) ADDFORM, EDITFORM, delete;

// ----------------------------------- Комиссии ---------------------------------------------------------- //

CLASS ABSTRACT committee 'Комиссия' : named;
CLASS revaluationCommittee 'Комиссия переоценки' : committee;

chairmanRevaluationCommittee 'Председатель комиссии (ИД)' = DATA employee (revaluationCommittee) IN idGroup;
nameChairmanRevaluationCommittee 'Председатель комиссии' (revaluationCommittee) = name(chairmanRevaluationCommittee(revaluationCommittee)) IN storeGroup;
departmentStoreRevaluationCommittee 'Отдел комиссии (ИД)' = DATA departmentStore (revaluationCommittee) IN idGroup;
nameDepartmentStoreRevaluationCommittee 'Отдел комиссии' (revaluationCommittee) = name(departmentStoreRevaluationCommittee(revaluationCommittee)) IN storeGroup;
CONSTRAINT CHECKED departmentStoreEmployee(chairmanRevaluationCommittee(revaluationCommittee))!=departmentStoreRevaluationCommittee(revaluationCommittee) MSG 'Отдел комиссии должен соответствовать отделу председателя комиссии';
CONSTRAINT CHECKED departmentStoreRevaluationCommittee(revaluationCommitteeDepartmentStore(departmentStore))!=departmentStore MSG 'Отдел комиссии должен соответствовать текущему отделу';

inDepartmentStoreEmployeeRevaluationCommittee (revaluationCommittee, employee) = departmentStoreRevaluationCommittee(revaluationCommittee)==departmentStoreEmployee(employee);
inCommitteeDepartmentStore 'Является членом комиссии' (revaluationCommittee, employee) = DATA BOOLEAN (revaluationCommittee, employee) IN storeGroup;

FORM revaluationCommittee 'Комиссия переоценки'
OBJECTS c=revaluationCommittee FIXED PANEL, e=employee
PROPERTIES(c) name, nameDepartmentStoreRevaluationCommittee, nameChairmanRevaluationCommittee
PROPERTIES(e) READONLY name
PROPERTIES(c, e) inCommitteeDepartmentStore
FILTERS NOT NULL inDepartmentStoreEmployeeRevaluationCommittee(c, e)
PROPERTIES(e) ADDFORM, EDITFORM, delete
EDIT revaluationCommittee OBJECT c;

FORM revaluationCommittees 'Комиссии переоценки'
OBJECTS c=revaluationCommittee
PROPERTIES(c) READONLY name, nameDepartmentStoreRevaluationCommittee, nameChairmanRevaluationCommittee
PROPERTIES(c) ADDFORM, EDITFORM, delete;

// ----------------------------------- Банк ------------------------------------------- //

GROUP banksGroup : baseGroup;

CLASS bank 'Банк' : named;

addressBank 'Адрес банка' = DATA STRING[100] (bank) IN banksGroup;
MFOBank 'Код МФО' = DATA STRING[9] (bank) IN banksGroup;
departmentBank 'Отдел банка' = DATA STRING[100] (bank) IN banksGroup;
CBUBank 'ЦБУ' = DATA STRING[3] (bank) IN banksGroup;
infoBank 'Дополнительные сведения' = DATA STRING[100] (bank) IN banksGroup;

FORM banks 'Банки'
OBJECTS b=bank
PROPERTIES(b) name, addressBank, MFOBank, departmentBank, CBUBank, infoBank, ADDOBJ, delete;

// ----------------------------------- Расчетный счет ------------------------------------------ //

GROUP accountGroup 'Банковская информация' : baseGroup;

CLASS account 'Расчетный счет';

bankAccount 'Банк (ИД)' = DATA bank (account) IN idGroup;

dataAccount 'Номер расчетного счета'  = DATA STRING[13] (account) IN accountGroup;
nameBankAccount 'Наименование банка' (account) = name(bankAccount(account)) IN accountGroup;
addressBankAccount 'Адрес банка' (account) = addressBank(bankAccount(account)) IN accountGroup;
MFOBankAccount 'Код МФО банка' (account) = MFOBank(bankAccount(account)) IN accountGroup;
departmentBankAccount 'Отдел банка' (account) = departmentBank(bankAccount(account)) IN accountGroup;
CBUBankAccount 'ЦБУ банка' (account) = CBUBank(bankAccount(account)) IN accountGroup;
noteAccount 'Примечание'  = DATA STRING[50] (account) IN accountGroup;

// ----------------------------------- Форма собственности ------------------------------------------ //
CLASS ownership 'Форма собственности' : named;
shortNameOwnership 'Cокращенное название' = DATA STRING[10] (ownership) IN baseGroup;

FORM ownership 'Форма собственности'
OBJECTS o=ownership FIXED PANEL
PROPERTIES(o) name, shortNameOwnership;

FORM ownerships 'Формы собственности'
OBJECTS o=ownership
PROPERTIES(o) READONLY name, shortNameOwnership
PROPERTIES(o) ADDFORM, EDITFORM, delete;

// ----------------------------------- Лицензия ------------------------------------------ //
GROUP licensGroup 'Лицензиионная информация' : baseGroup;
CLASS license 'Лицензия' ;

dataLicense 'Номер лицензии' = DATA STRING[100] (license) IN licensGroup;
dateFromLicense 'Действует с ' = DATA DATE (license) IN licensGroup;
dateToLicense 'Действует по ' = DATA DATE (license) IN licensGroup;
//tabaccoLicense 'Табачная' = DATA BOOLEAN  (license) IN licensGroup;

// ----------------------------------- Юридическое лицо ------------------------------------------ //

GROUP lawGroup 'Юридическая информация' : baseGroup;
GROUP contactGroup 'Контактная информация' : baseGroup;
GROUP docGroup 'Для договора' : baseGroup;


CLASS ABSTRACT legalEntity 'Юридическое лицо' : named;

ownershipLegalEntity 'Форма собственности (ИД)' = DATA ownership (legalEntity) IN licensGroup;

nameOwnershipLegalEntity 'Форма собственности' = name(ownershipLegalEntity(legalEntity)) IN lawGroup;
shortNameOwnershipLegalEntity 'Форма собственности (сокр.)' = shortNameOwnership(ownershipLegalEntity(legalEntity)) IN lawGroup;
fullNameLegalEntity 'Наименование для накладных' = DATA STRING[200] (legalEntity) IN lawGroup;
addressLegalEntity 'Фактический адрес' = DATA STRING[100] (legalEntity) IN lawGroup;
lawLegalEntity 'Юридический адрес' = DATA STRING[100] (legalEntity) IN lawGroup;
postAddressLegalEntity 'Почтовый адрес' = DATA STRING[100] (legalEntity) IN contactGroup;
managerLegalEntity 'Руководитель' = DATA STRING[100] (legalEntity) IN contactGroup;
accountantLegalEntity 'Главный бухгалтер' = DATA STRING[100] (legalEntity) IN contactGroup;
phoneLegalEntity 'Телефон/факс' = DATA STRING[100] (legalEntity) IN contactGroup;
UNPLegalEntity 'УНП' = DATA STRING[9] (legalEntity) IN docGroup;
OKPOLegalEntity 'Код по ОКПО' = DATA STRING[20] (legalEntity) IN docGroup;
OKYLPLegalEntity 'Код ОКЮЛП' = DATA STRING[20] (legalEntity) IN docGroup;
emailLegalEntity 'e-mail' = DATA STRING[100] (legalEntity) IN contactGroup;
siteLegalEntity 'Сайт' = DATA STRING[100] (legalEntity) IN contactGroup;
contactsLegalEntity 'Дополнительная информация' = DATA STRING[300] (legalEntity) IN contactGroup;
residentLegalEntity 'Резидент РБ' = DATA BOOLEAN (legalEntity) IN lawGroup;
manufacturerLegalEntity 'Производитель' = DATA BOOLEAN (legalEntity) IN lawGroup;

legalEntityAccount 'Ю.Л. (ИД)' = DATA legalEntity (account) IN idGroup;
userAccountLegalEntity 'Р/сч. (ИД)' = DATA account (legalEntity) IN idGroup;
defaultAccountLegalEntity(legalEntity) = GROUP MAX account AS account BY legalEntityAccount(account);
overrideAccountLegalEntity 'Основной р/сч.' (legalEntity) = UNION OVERRIDE defaultAccountLegalEntity(legalEntity), userAccountLegalEntity(legalEntity);
dataOverrideAccountLegalEntity 'Основной р/сч.' (legalEntity) = dataAccount(overrideAccountLegalEntity(legalEntity)) IN lawGroup;

CONSTRAINT CHECKED legalEntity != legalEntityAccount(userAccountLegalEntity(legalEntity)) MSG 'ошибка: Р/сч. по умолчанию должен соответствовать р/сч. Ю.Л.';
equalsLegalEntityAccount 'Основной р/сч.' (legalEntity, account) = userAccountLegalEntity(legalEntity) == account;

legalEntityLicense 'ЮЛ (ИД)' = DATA legalEntity (license) IN idGroup;
//userLicenseLegalEntity 'ЮЛ (ИД)' = DATA license (legalEntity) IN idGroup;
actingLicense 'Действующая, м/у датами' (license) = license AS license IF dateFromLicense(license) <= currentDate() AND dateToLicense(license) >= currentDate();
actingLicenseLegalEntity (legalEntity) = GROUP MAX actingLicense(license) BY legalEntityLicense(license);        // сгруппировали по ID
//overrideLicenseLegalEntity 'Действующая' (legalEntity) = UNION OVERRIDE defaultLicenseLegalEntity(legalEntity) IF dateFromLicense(defaultLicenseLegalEntity(legalEntity)) < currentDate() AND dateToLicense(defaultLicenseLegalEntity(legalEntity)) > currentDate(),
//                                                                        userLicenseLegalEntity(legalEntity) IF dateFromLicense(userLicenseLegalEntity(legalEntity)) < currentDate() AND dateToLicense(userLicenseLegalEntity(legalEntity)) > currentDate();
dataActingLicenseLegalEntity 'Действующая лицензия' (legalEntity) = dataLicense(actingLicenseLegalEntity(legalEntity)) IN lawGroup;
                        // работает как то не так, надо проверить //
//CONSTRAINT CHECKED legalEntity != legalEntityLicense(userLicenseLegalEntity(legalEntity)) MSG 'ошибка: Лицензия по умолчанию должен соответствовать лицензии Ю.Л.';
//CONSTRAINT  dateFromLicense(overrideLicenseLegalEntity(legalEntity)) > currentDate() MSG 'ошибка: действие лицензии еще не началось';
//CONSTRAINT  dateToLicense(overrideLicenseLegalEntity(legalEntity)) < currentDate() MSG 'ошибка: действие выбранной лицензии уже окончилось';
//equalsLegalEntityLicense 'Действующая' (legalEntity, license) = userLicenseLegalEntity(legalEntity) == license IN lawGroup;

// ----------------------------------- Договор ------------------------------------------ //

GROUP contractGroup '' : baseGroup;

CLASS ABSTRACT contract 'Договор';
CLASS contractProvider 'Договор с поставщиком' : contract;

CLASS STATIC contractType 'Тип договора'
{
    sale 'договор купли-продажи',
    commission 'договор комиссии'
};

CLASS STATIC contractForm 'Порядок оплаты'
{
    prepayment 'с отсрочкой платежа',
    implement 'По факту реализации',
    instruction 'Платежное поручение',
    requirement 'Платежное требование'
};

dataContract 'Номер договора' = DATA STRING[30] (contract) IN contractGroup;
formContract 'Порядок оплаты договора' (contract) = DATA contractForm (contract) IN contractGroup;
typeContract 'Тип договора' (contract) = DATA contractType (contract) IN contractGroup;
nameFormContract 'Порядок оплаты по договору' (contract) = name(formContract(contract)) IN contractGroup;
nameTypeContract 'Тип договора' (contract) = name(typeContract(contract)) IN contractGroup;
dateFromContract 'Дата начала договора' = DATA DATE (contract) IN contractGroup;
dateToContract 'Дата окончания договора' = DATA DATE (contract) IN contractGroup;
currencyContract 'Валюта взаиморасчетов' = DATA STRING[20] (contract) IN contractGroup; // может и не надо   или справочником
warnContract 'За сколько дней предупредить об окончании' = DATA INTEGER (contract) IN contractGroup;
banContract 'За сколько дней запретить закупку товара' = DATA INTEGER (contract) IN contractGroup;
delayContract 'Отсрочка платежа, дней' = DATA INTEGER (contract) IN contractGroup;
requestContract 'Форма оплаты: Платежное требование' = DATA BOOLEAN (contract) IN contractGroup;
noteContract 'Примечание' = DATA STRING[100] (contract) IN contractGroup;

// ----------------------------------- Поставщик ------------------------------------------ //

GROUP supplierGroup : baseGroup;
CLASS supplier 'Поставщик' : legalEntity;
CLASS company 'Компания' : legalEntity;

companyContract 'Организация (ИД)' = DATA company (contract) IN idGroup;
supplierContract 'Поставщик (ИД)' = DATA supplier (contract) IN idGroup;
userContractSupplier 'Контракт (ИД)' = DATA contract (supplier) IN idGroup;
companySupplier 'Организация (ИД)' = DATA company (supplier) IN idGroup;

sureSupplier 'Обязателен заказ поставщику' = DATA BOOLEAN (supplier) IN supplierGroup;
payerSupplier 'Плательщик НДС' = DATA BOOLEAN (supplier) IN supplierGroup;
scheduleSupplier 'Разрешить доп.заказ товаров вне графика' = DATA BOOLEAN (supplier) IN supplierGroup;
controlSupplier 'Контролировать ассортимент поставщика' = DATA BOOLEAN (supplier) IN supplierGroup;
surePercentSupplier 'Обязательный % заказанных товаров в прих. накладной' = DATA INTEGER (supplier) IN supplierGroup;
allowablePercentSupplier 'Допустимый % изменения цен 1го поставщика' = DATA INTEGER (supplier) IN supplierGroup;
afterDaysSupplier 'Максимальное число дней до поставки после заказа' = DATA INTEGER (supplier) IN supplierGroup;
forHoursSupplier 'За сколько часов до поставки закрыть заказ' = DATA INTEGER (supplier) IN supplierGroup;
limitSupplier 'Кредитный лимит' = DATA INTEGER (supplier) IN docGroup;
prioritySupplier 'Приоритет оплаты (1 - в первую очередь)' = DATA INTEGER (supplier) IN docGroup;
signsSupplier 'Число знаков после запятой для строки накладной' = DATA INTEGER (supplier) IN supplierGroup;
marksSupplier 'Число знаков после зап.в сумме к оплате по накладной' = DATA INTEGER (supplier) IN supplierGroup;

dataContractSupplier 'Договор по умолчанию' (supplier) = dataContract(userContractSupplier(supplier));
defaultContractSupplier(supplier) = GROUP MAX contract AS contract BY supplierContract(contract);
dataDefaultContractSupplier(supplier) = dataContract(defaultContractSupplier(supplier));

overrideContractSupplier 'Основной договор' (supplier) = UNION OVERRIDE defaultContractSupplier(supplier), userContractSupplier(supplier);
dataOverrideContractSupplier 'Основной договор' (supplier) = dataContract(overrideContractSupplier(supplier)) IN lawGroup;
CONSTRAINT CHECKED supplier != supplierContract(userContractSupplier(supplier)) MSG 'ошибка: Договор по умолчанию для поставщика должен соответствовать договорам поставщика';
equalsSupplierContract 'Основной договор' (supplier, contract) = userContractSupplier(supplier) == contract;

inSupplierContract(supplier, contract) = supplierContract(contract) == supplier;
inSupplierAccount(supplier, account) = legalEntityAccount(account) == supplier;
inSupplierLicense(supplier, license) = legalEntityLicense(license) == supplier;

inCompanyContract(company, contract) = companyContract(contract) == company;
inCompanyAccount(company, account) = legalEntityAccount(account) == company;

nameSupplierContract 'Контрагент' (contract) = name(supplierContract(contract));
nameCompanyContract 'Контрагент' (contract) = name(companyContract(contract));

FORM supplier 'Поставщик'
OBJECTS s=supplier FIXED PANEL
OBJECTS a=account
OBJECTS c=contractProvider
OBJECTS l=license
PROPERTIES(s) nameOwnershipLegalEntity, name, fullNameLegalEntity, addressLegalEntity, lawLegalEntity, postAddressLegalEntity, managerLegalEntity, accountantLegalEntity,
              phoneLegalEntity, UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity, emailLegalEntity, siteLegalEntity, payerSupplier,
              dataOverrideAccountLegalEntity, residentLegalEntity, manufacturerLegalEntity, dataOverrideContractSupplier, sureSupplier, controlSupplier, surePercentSupplier, allowablePercentSupplier,
              afterDaysSupplier, forHoursSupplier, limitSupplier, prioritySupplier, signsSupplier, marksSupplier, dataActingLicenseLegalEntity
PROPERTIES(a) dataAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount, MFOBankAccount, noteAccount, ADDOBJ, delete
PROPERTIES(c) dataContract, nameCompanyContract, nameFormContract, nameTypeContract, dateFromContract, dateToContract, currencyContract, warnContract, banContract, delayContract,
              requestContract, noteContract, ADDOBJ, delete
PROPERTIES(l) dataLicense, dateFromLicense, dateToLicense, ADDOBJ, delete   //        tabaccoLicense
PROPERTIES(s,c) equalsSupplierContract
PROPERTIES(s,a) equalsLegalEntityAccount
//PROPERTIES(s,l) equalsLegalEntityLicense
FILTERS NOT NULL inSupplierContract(s, c),
        NOT NULL inSupplierAccount(s, a),
        NOT NULL inSupplierLicense(s, l)
EDIT supplier OBJECT s;

DESIGN supplier FROM DEFAULT {
    main{
       ADD prop.box BEFORE functions.box{
            tabbedPane = TRUE;
            ADD a.box;
            ADD c.box;
            ADD l.box;

    }
   }
}

FORM suppliers 'Поставщики'
OBJECTS s=supplier
PROPERTIES(s) READONLY shortNameOwnershipLegalEntity, name, fullNameLegalEntity, lawLegalEntity, managerLegalEntity, phoneLegalEntity, UNPLegalEntity, emailLegalEntity, siteLegalEntity
PROPERTIES(s) ADDFORM, EDITFORM, delete;

FORM company 'Компания'
OBJECTS co=company FIXED PANEL
OBJECTS a=account
OBJECTS c=contract
PROPERTIES(co) nameOwnershipLegalEntity, shortNameOwnershipLegalEntity, name, fullNameLegalEntity, addressLegalEntity, lawLegalEntity, postAddressLegalEntity, managerLegalEntity, accountantLegalEntity,
              phoneLegalEntity, UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity, emailLegalEntity, siteLegalEntity
PROPERTIES(a) dataAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount, MFOBankAccount, noteAccount, ADDOBJ, delete
PROPERTIES(c) dataContract, nameSupplierContract, nameFormContract, nameTypeContract, dateFromContract, dateToContract, currencyContract, noteContract, ADDOBJ, delete
FILTERS NOT NULL inCompanyContract(co, c),
        NOT NULL inCompanyAccount(co, a);

FORM companies 'Компании'
OBJECTS co=company
PROPERTIES(co) READONLY shortNameOwnershipLegalEntity, name, fullNameLegalEntity, lawLegalEntity, managerLegalEntity, phoneLegalEntity, UNPLegalEntity, emailLegalEntity, siteLegalEntity
PROPERTIES(co) ADDFORM, EDITFORM, delete;

// ----------------------------------- Ассортимент поставщиков-------------------------------------------- //

itemAssortmentSupplier 'Товар поставщика в ассортименте' = DATA BOOLEAN (departmentStore, supplier, item);

FORM assortmentSupplier 'Ассортимент поставщика'
OBJECTS d=departmentStore FIXED PANEL, s=supplier, i=item
PROPERTIES(d) READONLY name
PROPERTIES(s) name
PROPERTIES(s) ADDFORM, EDITFORM, delete
PROPERTIES(i) name
PROPERTIES(i) ADDFORM, EDITFORM, delete
PROPERTIES(d, s, i)  itemAssortmentSupplier;

//---------------------------- по поставщикам и товарам ----------------------------------------

//---------------------------- Модели внешних устройств ----------------------------------------//
CLASS ABSTRACT model 'Модель' : named;
CLASS cashModel 'Модель касс' : model;
CLASS scalesModel 'Модель весов' : model;
CLASS checkModel 'Модель прайс чекеров' : model;

CLASS frontOffice 'Фронт офис';
nameFrontOffice 'Версия фронт офиса на кассе' = DATA STRING[100] (frontOffice) IN baseGroup;

noteModel 'Примечание' = DATA STRING[200] (model) IN baseGroup;
useModel 'Модель используется' = DATA BOOLEAN (model) IN baseGroup;
lettersModel 'Преобразовать наименование товара В ЗАГЛАВНЫЕ БУКВЫ' = DATA BOOLEAN (model) IN baseGroup;


frontOfficeCashModel 'Модель касс (ИД)' = DATA frontOffice (cashModel) IN idGroup;
nameFrontOfficeCashModel 'Версия фронт офиса на кассе' (cashModel) = nameFrontOffice(frontOfficeCashModel(cashModel)) IN baseGroup;
dateToCashModel 'Дата, до которой модель внесена в реестр' = DATA DATE (cashModel) IN baseGroup;
maxProductModel 'MAX допустимое колич.товаров' = DATA INTEGER (model) IN baseGroup;

CLASS flash 'Прошивка';
nameFlash 'Модель весов/версия прошивки' = DATA STRING[100] (flash) IN baseGroup;

flashScalesModel 'Прошивка (ИД)' = DATA flash (scalesModel) IN idGroup;
nameFlashScalesModel 'Модель весов/версия прошивки' = nameFlash(flashScalesModel(scalesModel)) IN baseGroup;
maxTextScalesModel 'MAX допустимое колич.дополнительных текстов' = DATA INTEGER (scalesModel) IN baseGroup;
folderScalesModel 'Папка на сервере весов с драйвером весов' = DATA STRING[200] (scalesModel) IN baseGroup;
compositionScalesModel 'Число знаков в доп.тексте(составе товара)' = DATA INTEGER (scalesModel) IN baseGroup;

CLASS modelCheck 'Модель чекера';
nameModelCheck 'Модель прайс чекера' = DATA STRING[100] (modelCheck) IN baseGroup;

modelCheckModel 'Модель (ИД)' = DATA modelCheck (checkModel) IN idGroup;
nameModelCheckModel 'Модель прайс чекера' = nameModelCheck(modelCheckModel(checkModel)) IN baseGroup;

FORM models 'Модели оборудования'
OBJECTS s=scalesModel, ch=checkModel, c=cashModel
PROPERTIES(ch) READONLY name, nameModelCheckModel, noteModel, useModel, maxProductModel
PROPERTIES(s)  READONLY name, nameFlashScalesModel, noteModel, useModel, maxProductModel, maxTextScalesModel,
               folderScalesModel, lettersModel, compositionScalesModel
PROPERTIES(c)  READONLY name, nameFrontOfficeCashModel, noteModel, useModel, dateToCashModel, lettersModel
PROPERTIES(s) ADDFORM, EDITFORM, delete
PROPERTIES(c) ADDFORM, EDITFORM, delete
PROPERTIES(ch) ADDFORM, EDITFORM, delete;


FORM checkModel 'Модель прайс чекера'
OBJECTS ch=checkModel FIXED PANEL
PROPERTIES(ch) name, nameModelCheckModel, noteModel, useModel, maxProductModel
EDIT checkModel OBJECT ch;

FORM cashModel 'Модель касс'
OBJECTS c=cashModel FIXED PANEL
PROPERTIES(c) name, nameFrontOfficeCashModel, noteModel, useModel, dateToCashModel, lettersModel
EDIT cashModel OBJECT c;

FORM scalesModel 'Модель весов'
OBJECTS s=scalesModel FIXED PANEL
PROPERTIES(s) name, nameFlashScalesModel, noteModel, useModel, maxProductModel, maxTextScalesModel,
              folderScalesModel, lettersModel, compositionScalesModel
EDIT scalesModel OBJECT s;


//---------------------------- группы оборудования ----------------------------------------//

CLASS ABSTRACT groupMachinery 'Группы оборудования';
CLASS groupScales 'Группы весов' : groupMachinery;
CLASS groupCash 'Группы касс' : groupMachinery;

nameGroupMachinery 'Наименование группы' = DATA STRING[200] (groupMachinery) IN baseGroup;

cellGroupScales 'Помещать на ценники номера ячеек с этой группы' = DATA BOOLEAN (groupScales) IN baseGroup;
transferGroupScales 'Передать товар на группу весов' = DATA BOOLEAN (groupScales) IN baseGroup;
sidSectionGroupScales 'Код отдела в Set Retail' = DATA INTEGER (groupScales) IN baseGroup;
directoryGroupScales 'Директория сервера Set Retail' = DATA STRING[200] (groupScales) IN baseGroup;

InDepartmentStoreGroupMachinery 'Вкл.' = DATA BOOLEAN (departmentStore, groupMachinery) IN baseGroup;

//---------------------------- типы оборудования оборудования ----------------------------------------//
CLASS ABSTRACT machinery 'Оборудование';
CLASS cash 'Кассы' : machinery;
CLASS scales 'Весы' : machinery;

groupCashCash 'Группа ИД' = DATA groupCash (cash) IN idGroup;
groupScalesScales 'Группа ИД' = DATA groupScales (scales) IN idGroup;
nameGroupMachineryCash 'Наименование группы' (cash) = nameGroupMachinery(groupCashCash(cash)) IN baseGroup;
nameGroupMachineryScales 'Наименование группы' (scales) = nameGroupMachinery(groupScalesScales(scales)) IN baseGroup;
//dataGroupMachineryMachinery 'Наименование группы' (machinery) = UNION EXCLUSIVE nameGroupMachineryCash(machinery), nameGroupMachineryScales(machinery);

descriptionMachinery 'Описание' = DATA STRING[200] (machinery) IN baseGroup;
portMachinery 'Адрес/порт' = DATA STRING[100] (machinery) IN baseGroup;
useMachinery 'Оборудование используется' = DATA BOOLEAN (machinery) IN baseGroup;

cashModelCash 'Модель ИД' = DATA cashModel (cash) IN idGroup;
numberCash 'Регистрационный номер кассы' = DATA STRING[100] (cash) IN baseGroup;
directoryCash 'Директория обмена с кассой' = DATA STRING[100] (cash) IN baseGroup;
nameCashModelCash 'Модель кассы' (cash) = name(cashModelCash(cash)) IN baseGroup;
statusCash 'Статус кассы (на момент посл.передачи)' = DATA STRING[200] (cash) IN baseGroup;
resultCash 'Результат передачи на кассу товаров' = DATA STRING[200] (cash) IN baseGroup;
dateCash 'Дата фискализации кассового аппарата' = DATA DATE (cash) IN baseGroup;
nppCash 'Порядковый номер кассы в торговом объекте ' = DATA INTEGER (cash) IN baseGroup;


CLASS STATIC feature 'Свойства для оборудования'
{
    no 'HET,(пример: для годен это значит - печатаем в поле этикетки "Годен до")',
    yes 'ДА для ВСЕХ товаров поместить в состав',
    sometimes 'ДА (для товаров с признаком [Контролировать срок годности по товару?]'
};

scalesModelScales 'Модель ИД' = DATA scalesModel (scales) IN idGroup;
numberScales 'Заводской(серийный) номер ' = DATA STRING[100] (scales) IN baseGroup;
nameScalesModelScales 'Модель весов' (scales) = name(scalesModelScales(scales)) IN baseGroup;
dateScales 'Дата следующей обязательной поверки' = DATA DATE (scales) IN baseGroup;
passScales 'свойство ИД' = DATA feature (scales) IN idGroup;
namePassScales 'Свойство товара [Годен до] помещать в ингредиенты' (scales) = name(passScales(scales)) IN baseGroup;
manufactureScales 'свойство ИД' = DATA feature (scales) IN idGroup;
nameManufactureScales 'Свойство товара [Дата изг.] помещать в ингредиенты' (scales) = name(manufactureScales(scales)) IN baseGroup;
productionScales 'свойство ИД' = DATA feature (scales) IN idGroup;
nameProductionScales 'Св-во товара[Срок годн.в часах] поместить в ингр-ты' (scales) = name(productionScales(scales)) IN baseGroup;
sidScales 'ID весов для Set Retail' = DATA INTEGER (scales) IN baseGroup;


FORM machinerys 'Типы оборудования'
OBJECTS c=cash, s=scales
PROPERTIES(c) READONLY numberCash, descriptionMachinery, nameCashModelCash, nameGroupMachineryCash, portMachinery, useMachinery
PROPERTIES(s) READONLY numberScales, descriptionMachinery, nameGroupMachineryScales, portMachinery, useMachinery
PROPERTIES(c) ADDFORM, EDITFORM, delete
PROPERTIES(s) ADDFORM, EDITFORM, delete;

FORM cash 'Касса'
OBJECTS c=cash FIXED PANEL
PROPERTIES(c) numberCash, descriptionMachinery, nameGroupMachineryCash, portMachinery, useMachinery, directoryCash, nameCashModelCash,
              dateCash, nppCash, statusCash, resultCash
EDIT cash OBJECT c;

FORM scales 'Весы'
OBJECTS s=scales FIXED PANEL
PROPERTIES(s) numberScales, descriptionMachinery, nameGroupMachineryScales, portMachinery, useMachinery, nameScalesModelScales,
              dateScales, namePassScales, nameManufactureScales, nameProductionScales, sidScales
EDIT scales OBJECT s;

 //---------------------------- Карты проработки (разруба) ----------------------------------------//
GROUP cutGroup 'Разделка' : baseGroup;
CLASS cutting 'Карта разруба' : named;

sidCutting 'Номер корты (из сборника и прочее)' = DATA INTEGER (cutting) IN cutGroup;
dateCutting 'Дата создания' = DATA DATE (cutting) IN cutGroup;
useCutting 'Используется' = DATA BOOLEAN (cutting) IN cutGroup;
//             номер из сборника.....
descriptionCutting 'Описание' = DATA STRING[200] (cutting) IN cutGroup;
percAllowancesCutting 'Процент надбавок' = DATA DOUBLE (cutting) IN cutGroup;
percLossesCutting 'Процент потерь' = DATA DOUBLE (cutting) IN cutGroup;
percSweepsCutting 'Процент зачисток' = DATA DOUBLE (cutting) IN cutGroup;

//---------------------------- Рецепты блюд ----------------------------------------//
CLASS recipe 'Рецепт' : named;
CLASS recipeDetail 'Сырье рецепта';

dishRecipe  'Блюдо (ИД)' = DATA dish (recipe) IN idGroup;
nameDishRecipe 'Блюдо' = name(dishRecipe(recipe)) IN baseGroup;

beginDateRecipe 'Используется с' = DATA DATE (recipe) IN baseGroup;
isUsedRecipe 'Используется' = DATA BOOLEAN (recipe) IN baseGroup;
numberRecipe 'Номер рецептуры (из сборника и пр.)' = DATA STRING[40] (recipe) IN baseGroup;
notesRecipe 'Технология приготовления' = DATA STRING[100] (recipe) IN baseGroup;
outWeightRecipe 'Количество выхода изделия' = DATA DOUBLE (recipe) IN baseGroup;

recipeRecipeDetail 'Рецепт (ИД)' = DATA recipe(recipeDetail) IN baseGroup;
componentRecipeDetail 'Компонент (ИД)' = DATA component(recipeDetail) IN idGroup;
nameComponentRecipeDetail 'Компонент' = name(componentRecipeDetail(recipeDetail)) IN baseGroup;
normQuantityRecipeDetail 'Норма закладки (брутто)' = DATA DOUBLE (recipeDetail) IN baseGroup;

inRecipeRecipeDetail(recipe, recipeDetail) = recipeRecipeDetail(recipeDetail) == recipe;

FORM recipe 'Рецепт блюда'
OBJECTS r=recipe FIXED PANEL
OBJECTS rd=recipeDetail
PROPERTIES(r) nameDishRecipe, numberRecipe, beginDateRecipe, isUsedRecipe, notesRecipe, outWeightRecipe
PROPERTIES(rd) nameComponentRecipeDetail, normQuantityRecipeDetail, ADDOBJ, delete
FILTERS NOT NULL inRecipeRecipeDetail(r, rd)
EDIT recipe OBJECT r;

FORM recipes 'Рецепты блюд'
OBJECTS r=recipe
OBJECTS rd=recipeDetail
PROPERTIES(r) READONLY nameDishRecipe, numberRecipe, isUsedRecipe
PROPERTIES(r) ADDFORM, EDITFORM, delete
PROPERTIES(rd) READONLY nameComponentRecipeDetail, normQuantityRecipeDetail
FILTERS NOT NULL inRecipeRecipeDetail(r, rd);

//---------------------------- Настройка навигатора ----------------------------------------//

WINDOW TOOLBAR topToolbar 'Папки' VERTICAL HIDETITLE HIDESCROLLBARS POSITION(0, 0, 20, 5);
WINDOW TOOLBAR formsToolbar 'Формы' VERTICAL HIDETITLE POSITION (0, 5, 20, 65);
WINDOW TREE formsTree 'Формы' HIDETITLE POSITION (0, 5, 20, 65);

HIDE WINDOW BaseLogicsModule.relevantForms;
HIDE WINDOW BaseLogicsModule.relevantClassForms;

NAVIGATOR {

    baseElement TO topToolbar;

    ADD lists 'Справочники' TO formsToolbar {
        ADD itemGroups;
        ADD unitsOfMeasure;
        ADD items;
        ADD barcodes;
        ADD employees;
        ADD tradingSquares;
        ADD discounts;
        ADD departmentStores;
        ADD stores;
        ADD storeTypes;
        ADD tradingNetworks;
        ADD revaluationCommittees;
        ADD banks;
        ADD ownerships;
        ADD suppliers;
        ADD companies;
        ADD models;
//        ADD cashModels;
//        ADD scalesModels;
//        ADD checkModels;
        ADD assortments;
        ADD colors;
        ADD tastes;
        ADD manufacturers;
        ADD recipes;
    }

    ADD documents 'Документы' TO formsToolbar {

    }

    ADD adminElement TO formsTree {
        ADD objects 'Карточки' {
            ADD itemGroup;
            ADD unitOfMeasure;
            ADD item;
            ADD barcode;
            ADD employee;
            ADD tradingSquare;
            ADD discount;
            ADD departmentStore;
            ADD store;
            ADD storeType;
            ADD tradingNetwork;
            ADD revaluationCommittee;
            ADD ownership;
            ADD supplier;
            ADD company;
            ADD cashModel;
            ADD scalesModel;
            ADD checkModel;
            ADD assortment;
            ADD color;
            ADD taste;
            ADD manufacturer;
            ADD cash;
            ADD scales;
            ADD recipe;
        }
    }
}
