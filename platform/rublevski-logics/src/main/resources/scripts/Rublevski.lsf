MODULE Rublevski;

IMPORT BaseLogicsModule;

// ----------------------------------- Товарный классификатор ------------------------------------------ //
CLASS itemGroup 'Товарная группа' : named;

parentItemGroup = DATA itemGroup (itemGroup);
nameParentItemGroup 'Родительская группа' = name(parentItemGroup(itemGroup));

FORM itemGroup 'Товарная группа'
OBJECTS g=itemGroup
PROPERTIES(g) name, nameParentItemGroup;

FORM itemGroups 'Товарные группы'
OBJECTS g=itemGroup
PROPERTIES(g) READONLY name, nameParentItemGroup
PROPERTIES(g) ADDFORM, EDITFORM, delete;

// ----------------------------------- Единицы измерения ------------------------------------------ //
CLASS unitOfMeasure 'Единица измерения' : named;
shortNameUnitOfMeasure 'Краткое наименование' = DATA STRING[4] (unitOfMeasure) IN baseGroup;

FORM unitOfMeasure 'Единица измерения'
OBJECTS u=unitOfMeasure FIXED PANEL
PROPERTIES(u) name, shortNameUnitOfMeasure;

FORM unitsOfMeasure 'Единицы измерений'
OBJECTS u=unitOfMeasure
PROPERTIES(u) READONLY name, shortNameUnitOfMeasure
PROPERTIES(u) ADDFORM, EDITFORM, delete;

// ----------------------------------- Товар ------------------------------------------ //
CLASS ABSTRACT sku 'SKU' : named;
CLASS item 'Товар' : sku;
CLASS brand 'Бренд' : named;

brandItem = DATA brand(item);
nameBrandItem 'Брэнд' (item) = name(brandItem(item));

unitOfMeasureItem = DATA unitOfMeasure (item) IN idGroup;
shortNameUnitOfMeasureItem 'Единица измерения' (item) = shortNameUnitOfMeasure(unitOfMeasureItem(item)) IN baseGroup;

// ----------------------------------- Атрибуты ------------------------------------------ //

CLASS ABSTRACT itemAttribute 'Атрибут товара' : named;

CLASS stringItemAttribute 'Строковый атрибут' : itemAttribute;
valueStringItemAttribute = DATA STRING[255] (item, stringItemAttribute);

CLASS STATIC customStringItemAttribute 'Предопределенный строковый атрибут' {
    caption 'Название',
    storageConditions 'Условия хранения'
} : stringItemAttribute;

CLASS STATIC objectItemAttribute 'Объектный атрибут' {
    unitOfMeasure 'Единица измерения',
    brand 'Брэнд'
} : itemAttribute;

valueUOMItemAttribute(item, attribute) = unitOfMeasureItem(item) AND attribute == objectItemAttribute.unitOfMeasure;
valueBrandItemAttribute(item, attribute) = brandItem(item) AND attribute == objectItemAttribute.brand;

valueObjectItemAttribute(item, attribute) = UNION EXCLUSIVE valueUOMItemAttribute(item, attribute),
                                                            valueBrandItemAttribute(item, attribute);
nameObjectItemAttribute(item, attribute) = name(valueObjectItemAttribute(item, attribute));

valueItemAttribute(item, attribute) = UNION EXCLUSIVE valueStringItemAttribute(item, attribute),
                                                      nameObjectItemAttribute(item, attribute);

FORM item 'Товар'
OBJECTS i=item FIXED PANEL, a=itemAttribute
PROPERTIES(i) name, shortNameUnitOfMeasureItem, nameBrandItem
PROPERTIES name(a), valueItemAttribute(i, a);

FORM items 'Товары'
OBJECTS i=item
PROPERTIES(i) READONLY name, shortNameUnitOfMeasureItem
PROPERTIES(i) ADDFORM, EDITFORM, delete;

// ----------------------------------- Штрих код ------------------------------------------ //
GROUP barcodeGroup : baseGroup;

CLASS barcode 'Штрих код' : barcodeObject;

itemBarcode 'Товар штрих-кода (ИД)' (barcode) = DATA item (barcode) IN idGroup;
unitOfMeasureBarcode 'Ед.изм. штрих-кода (ИД)' (barcode) = DATA unitOfMeasure (barcode) IN idGroup;

titleScalesBarcode 'Наименование для весов' = DATA STRING[100] (barcode) IN barcodeGroup;
titleCashBarcode 'Наименование для касс' = DATA STRING[100] (barcode) IN barcodeGroup;
shortNameUnitOfMeasureBarcode 'Единица измерения' (barcode) = shortNameUnitOfMeasure(unitOfMeasureBarcode(barcode)) IN barcodeGroup;
amountBarcode 'Количество (сколько списать при продаже)' = DATA INTEGER (barcode) IN barcodeGroup;
removeBarcode 'Заблокирован (удален с оборудования)?' = DATA BOOLEAN (barcode) IN barcodeGroup;
commentRemoveBarcode 'Причина блокировки' = DATA STRING[100] (barcode) IN barcodeGroup;

FORM barcodeEditForm 'Штрих-код'
OBJECTS b=barcode FIXED PANEL
PROPERTIES(b) barcode, titleScalesBarcode, titleCashBarcode, shortNameUnitOfMeasureBarcode, amountBarcode, removeBarcode, commentRemoveBarcode;      // barcode

FORM barcodeForm 'Штрих-коды'
OBJECTS b=barcode
PROPERTIES(b) READONLY barcode, titleScalesBarcode, titleCashBarcode, shortNameUnitOfMeasureBarcode, amountBarcode    // barcode
PROPERTIES(b) ADDFORM, EDITFORM, delete;

// ----------------------------------- Склад ------------------------------------------ //

CLASS ABSTRACT stock 'Склад' : named;

// ----------------------------------- Магазин ----------------------------------------- //

GROUP storeGroup : baseGroup;

CLASS store 'Магазин' : named;
CLASS tm 'Торговая марка' : named; // "Рублевский", "Базар"
CLASS storeType 'Формат магазина' : named; //Мини, Супер, ...

addressStore 'Адрес магазина' = DATA STRING[100] (store) IN storeGroup;

storeTypeStore 'Формат магазина (ИД)' = DATA storeType (store) IN idGroup;
nameStoreTypeStore 'Формат магазина' (store) = name(storeTypeStore(store)) IN storeGroup;

tmStoreType 'Торговая марка формата магазина (ИД)' = DATA tm (storeType) IN idGroup;
nameTmStoreType 'Торговая марка формата магазина' (storeType) = name(tmStoreType(storeType)) IN storeGroup;

// ----------------------------------- Физические лица -------------------------------------------------- //

CLASS ABSTRACT person 'Физическое лицо': named;
CLASS employee 'Сотрудник' : person;

// ----------------------------------- Отдел магазина (Подразделение) ----------------------------------- //

CLASS departmentStore 'Отдел магазина' : stock;
CLASS kafeteria 'Кафетерий' : departmentStore;
CLASS tradingFloar 'Торговый зал' : departmentStore;
CLASS wholesaleStock 'Оптовый склад' : departmentStore;
CLASS placeOfAcceptance 'Приемный пункт' : departmentStore;
CLASS restaurant 'Ресторан' : departmentStore;
//CLASS stock 'Склад' : departmentStore; в дальнейшем будет распределительный центр
CLASS guild 'Цех' : departmentStore;

storeDepartmentStore 'Магазин отдела (ИД)' = DATA store (departmentStore) IN idGroup;

inStoreDepartment(store, departmentStore) = storeDepartmentStore(departmentStore) == store;

FORM storeType 'Формат магазина'
OBJECTS s=storeType
PROPERTIES(s) READONLY name, nameTmStoreType
PROPERTIES(s) ADDFORM, EDITFORM, delete;

FORM tm 'Торговая марка'
OBJECTS m=tm
PROPERTIES(m) READONLY name
PROPERTIES(m) ADDFORM, EDITFORM, delete;

FORM store 'Магазин'
OBJECTS s=store FIXED PANEL, d=departmentStore
PROPERTIES(s) READONLY name, addressStore, nameStoreTypeStore
PROPERTIES(d) name, ADDOBJ, delete
FILTERS NOT NULL inStoreDepartment(s, d);

FORM stores 'Магазины'
OBJECTS s=store
PROPERTIES(s) READONLY name, addressStore, nameStoreTypeStore
PROPERTIES(s) ADDFORM, EDITFORM, delete;

// ----------------------------------- Банк ------------------------------------------- //

GROUP banksGroup : baseGroup;

CLASS bank 'Банк' : named;

addressBank 'Адрес банка' = DATA STRING[100] (bank) IN banksGroup;
MFOBank 'Код МФО' = DATA STRING[9] (bank) IN banksGroup;
departmentBank 'Отдел банка' = DATA STRING[100] (bank) IN banksGroup;
CBUBank 'ЦБУ' = DATA STRING[3] (bank) IN banksGroup;
infoBank 'Дополнительные сведения' = DATA STRING[100] (bank) IN banksGroup;

FORM banks 'Банки'
OBJECTS b=bank
PROPERTIES(b) name, addressBank, MFOBank, departmentBank, CBUBank, infoBank, ADDOBJ, delete;

// ----------------------------------- Расчетный счет ------------------------------------------ //

GROUP scoreGroup : baseGroup;

CLASS account 'Расчетный счет';

bankAccount 'Банк (ИД)' = DATA bank (account) IN idGroup;
dataAccount 'Номер расчетного счета'  = DATA STRING[13] (account) IN scoreGroup;
nameBankAccount 'Наименование банка' (account) = name(bankAccount(account)) IN scoreGroup;
addressBankAccount 'Адрес банка' (account) = addressBank(bankAccount(account)) IN scoreGroup;
MFOBankAccount 'Код МФО банка' (account) = MFOBank(bankAccount(account)) IN scoreGroup;
departmentBankAccount 'Отдел банка' (account) = departmentBank(bankAccount(account)) IN scoreGroup;
CBUBankAccount 'ЦБУ банка' (account) = CBUBank(bankAccount(account)) IN scoreGroup;
noteAccount 'Примечание'  = DATA STRING[50] (account) IN scoreGroup;

// ----------------------------------- Форма собственности ------------------------------------------ //
CLASS ownership 'Форма собственности' : named;
shortNameOwnership 'Краткое наименование' = DATA STRING[10] (ownership) IN baseGroup;

FORM ownershipEditForm 'Форма собственности'
OBJECTS o=ownership FIXED PANEL
PROPERTIES(o) name, shortNameOwnership;

FORM ownershipForm 'Формы собственности'
OBJECTS o=ownership
PROPERTIES(o) READONLY name, shortNameOwnership
PROPERTIES(o) ADDFORM, EDITFORM, delete;

// ----------------------------------- Юридическое лицо ------------------------------------------ //

GROUP lawGroup : baseGroup;

CLASS ABSTRACT legalEntity 'Юридическое лицо' : named;

ownershipLegalEntity 'Форма собственности (ИД)' = DATA ownership (legalEntity) IN idGroup;

nameOwnershipLegalEntity 'Форма собственности' = name(ownershipLegalEntity(legalEntity)) IN lawGroup;
shortNameOwnershipLegalEntity 'Краткое наименование' = shortNameOwnership(ownershipLegalEntity(legalEntity)) IN lawGroup;
fullNameLegalEntity 'Полное  наименование' = DATA STRING[200] (legalEntity) IN lawGroup;
addressLegalEntity 'Фактический адрес' = DATA STRING[100] (legalEntity) IN lawGroup;
lawLegalEntity 'Юридический адрес' = DATA STRING[100] (legalEntity) IN lawGroup;
postAddressLegalEntity 'Почтовый адрес' = DATA STRING[100] (legalEntity) IN lawGroup;
managerLegalEntity 'Руководитель' = DATA STRING[30] (legalEntity) IN lawGroup;
accountantLegalEntity 'Главный бухгалтер' = DATA STRING[30] (legalEntity) IN lawGroup;
phoneLegalEntity 'Телефон/факс' = DATA STRING[100] (legalEntity) IN lawGroup;
UNPLegalEntity 'УНП' = DATA STRING[9] (legalEntity) IN lawGroup;
OKPOLegalEntity 'Код по ОКПО' = DATA STRING[20] (legalEntity) IN lawGroup;
OKYLPLegalEntity 'Код ОКЮЛП' = DATA STRING[20] (legalEntity) IN lawGroup;
emailLegalEntity 'e-mail для передачи заказа' = DATA STRING[100] (legalEntity) IN lawGroup;
siteLegalEntity 'Сайт' = DATA STRING[100] (legalEntity) IN lawGroup;
contactsLegalEntity 'Контактная информация' = DATA STRING[100] (legalEntity) IN lawGroup;
licenseLegalEntity 'Номер лицензии' = DATA STRING[20] (legalEntity) IN lawGroup;
dateFromLicenseLegalEntity 'Дата выдачи лицензии' = DATA DATE (legalEntity) IN lawGroup;
dateToLicenseLegalEntity 'Дата окончания лицензии' = DATA DATE (legalEntity) IN lawGroup;
residentLegalEntity 'Резидент РБ' = DATA BOOLEAN (legalEntity) IN lawGroup;
manufacturerLegalEntity 'Производитель' = DATA BOOLEAN (legalEntity) IN lawGroup;

legalEntityAccount 'Ю.Л. (ИД)' = DATA legalEntity (account) IN idGroup;

// ----------------------------------- Договор ------------------------------------------ //

GROUP treatyGroup : baseGroup;

CLASS ABSTRACT contract 'Договор';
CLASS contractProvider 'Договор с поставщиком' : contract;

CLASS STATIC contractType 'Тип договора'
{
    sale 'договор купли-продажи',
    commission 'договор комиссии'
};

CLASS STATIC contractForm 'Порядок оплаты'
{
    delay 'с отсрочкой платежа',
    implement 'на реализацию'
};

dataContract 'Номер договора' = DATA STRING[30] (contract) IN treatyGroup;
formContract 'Порядок оплаты договора' (contract) = DATA contractForm (contract) IN treatyGroup;
typeContract 'Тип договора' (contract) = DATA contractType (contract) IN treatyGroup;
nameFormContract 'Порядок оплаты по договору' (contract) = name(formContract(contract)) IN treatyGroup;
nameTypeContract 'Тип договора' (contract) = name(typeContract(contract)) IN treatyGroup;
dateFromContract 'Дата начала договора' = DATA DATE (contract) IN treatyGroup;
dateToContract 'Дата окончания договора' = DATA DATE (contract) IN treatyGroup;
currencyContract 'Валюта взаиморасчетов' = DATA STRING[20] (contract) IN treatyGroup; // может и не надо   или справочником
warnContract 'За сколько дней предупредить об окончании' = DATA INTEGER (contract) IN treatyGroup;
banContract 'За сколько дней запретить закупку товара' = DATA INTEGER (contract) IN treatyGroup;
delayContract 'Отсрочка платежа, дней' = DATA INTEGER (contract) IN treatyGroup;
requestContract 'Форма оплаты: Платежное требование' = DATA BOOLEAN (contract) IN treatyGroup;
noteContract 'Примечание' = DATA STRING[100] (contract) IN treatyGroup;

// ----------------------------------- Поставщик ------------------------------------------ //

GROUP supplierGroup : baseGroup;
CLASS supplier 'Поставщик' : legalEntity;
CLASS company 'Компания' : legalEntity;

companyContract 'Организация (ИД)' = DATA company (contract) IN idGroup;
supplierContract 'Поставщик (ИД)' = DATA supplier (contract) IN idGroup;
userContractSupplier 'Контракт (ИД)' = DATA contract (supplier) IN idGroup;
companySupplier 'Организация (ИД)' = DATA company (supplier) IN idGroup;

sureSupplier 'Обязателен заказ поставщику' = DATA BOOLEAN (supplier) IN supplierGroup;
scheduleSupplier 'Разрешить доп.заказ товаров вне графика' = DATA BOOLEAN (supplier) IN supplierGroup;
controlSupplier 'Контролировать ассортимент поставщика' = DATA BOOLEAN (supplier) IN supplierGroup;
surePercentSupplier 'Обязательный % заказанных товаров в прих. накладной' = DATA INTEGER (supplier) IN supplierGroup;
allowablePercentSupplier 'Допустимый % изменения цен 1го поставщика' = DATA INTEGER (supplier) IN supplierGroup;
afterDaysSupplier 'Максимальное число дней до поставки после заказа' = DATA INTEGER (supplier) IN supplierGroup;
forHoursSupplier 'За сколько часов до поставки закрыть заказ' = DATA INTEGER (supplier) IN supplierGroup;
licenseTobaccoSupplier 'Лицензия табачная' = DATA INTEGER (supplier) IN supplierGroup;
takeSupplier 'Брать для отчета поставщика из карточки товара' = DATA BOOLEAN (supplier) IN supplierGroup;
inputSupplier 'Разрешить ввод посуды с залог. ст-тью в приход' = DATA BOOLEAN (supplier) IN supplierGroup;
limitSupplier 'Кредитный лимит' = DATA INTEGER (supplier) IN supplierGroup;
prioritySupplier 'Приоритет оплаты (1 - в первую очередь)' = DATA INTEGER (supplier) IN supplierGroup;
signsSupplier 'Число знаков после запятой для строки накладной' = DATA INTEGER (supplier) IN supplierGroup;
marksSupplier 'Число знаков после зап.в сумме к оплате по накладной' = DATA INTEGER (supplier) IN supplierGroup;

dataContractSupplier 'Договор по умолчанию' (supplier) = dataContract(userContractSupplier(supplier));
defaultContractSupplier(supplier) = GROUP MAX contract AS contract BY supplierContract(contract);
dataDefaultContractSupplier(supplier) = dataContract(defaultContractSupplier(supplier));

overrideContractSupplier 'Основной договор' (supplier) = UNION OVERRIDE dataDefaultContractSupplier(supplier), dataContractSupplier(supplier);
CONSTRAINT CHECKED supplierContract(userContractSupplier(supplier)) != supplier AS supplier MSG 'ошибка: Договор по умолчанию для поставщика должен соответствовать договорам поставщика';
equalsSupplierContract 'Вкл.' (supplier, contract) = userContractSupplier(supplier) == contract;

inSupplierContract(supplier, contract) = supplierContract(contract) == supplier;
inSupplierAccount(supplier, account) = legalEntityAccount(account) == supplier;

inCompanyContract(company, contract) = companyContract(contract) == company;
inCompanyAccount(company, account) = legalEntityAccount(account) == company;

nameSupplierContract 'Контрагент' (contract) = name(supplierContract(contract));
nameCompanyContract 'Контрагент' (contract) = name(companyContract(contract));

FORM supplier 'Поставщик'
OBJECTS s=supplier FIXED PANEL
OBJECTS a=account
OBJECTS c=contract
PROPERTIES(s) nameOwnershipLegalEntity, shortNameOwnershipLegalEntity, name, fullNameLegalEntity, addressLegalEntity, lawLegalEntity, postAddressLegalEntity, managerLegalEntity, accountantLegalEntity,
              phoneLegalEntity, UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity, emailLegalEntity, siteLegalEntity, licenseLegalEntity, dateFromLicenseLegalEntity,
              dateToLicenseLegalEntity, residentLegalEntity, manufacturerLegalEntity, overrideContractSupplier, sureSupplier, controlSupplier, surePercentSupplier, allowablePercentSupplier,
              afterDaysSupplier, forHoursSupplier, takeSupplier, inputSupplier, limitSupplier, prioritySupplier, signsSupplier, marksSupplier, licenseTobaccoSupplier// overrideContractSupplier
PROPERTIES(a) dataAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount, MFOBankAccount, noteAccount, ADDOBJ, delete
PROPERTIES(c) dataContract, nameCompanyContract, nameFormContract, nameTypeContract, dateFromContract, dateToContract, currencyContract, warnContract, banContract, delayContract,
              requestContract, noteContract, ADDOBJ, delete
PROPERTIES(s,c) equalsSupplierContract
FILTERS NOT NULL inSupplierContract(s, c),
        NOT NULL inSupplierAccount(s, a);


FORM suppliers 'Поставщики'
OBJECTS s=supplier
PROPERTIES(s) READONLY shortNameOwnershipLegalEntity, name, fullNameLegalEntity, lawLegalEntity, managerLegalEntity, phoneLegalEntity, UNPLegalEntity, emailLegalEntity, siteLegalEntity
PROPERTIES(s) ADDFORM, EDITFORM, delete;

FORM company 'Компания'
OBJECTS co=company FIXED PANEL
OBJECTS a=account
OBJECTS c=contract
PROPERTIES(co) nameOwnershipLegalEntity, shortNameOwnershipLegalEntity, name, fullNameLegalEntity, addressLegalEntity, lawLegalEntity, postAddressLegalEntity, managerLegalEntity, accountantLegalEntity,
              phoneLegalEntity, UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity, emailLegalEntity, siteLegalEntity, licenseLegalEntity, dateFromLicenseLegalEntity,
              dateToLicenseLegalEntity
PROPERTIES(a) dataAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount, MFOBankAccount, noteAccount, ADDOBJ, delete
PROPERTIES(c) dataContract, nameSupplierContract, nameFormContract, nameTypeContract, dateFromContract, dateToContract, currencyContract, noteContract, ADDOBJ, delete
FILTERS NOT NULL inCompanyContract(co, c),
        NOT NULL inCompanyAccount(co, a);

FORM companys 'Компании'
OBJECTS co=company
PROPERTIES(co) READONLY shortNameOwnershipLegalEntity, name, fullNameLegalEntity, lawLegalEntity, managerLegalEntity, phoneLegalEntity, UNPLegalEntity, emailLegalEntity, siteLegalEntity
PROPERTIES(co) ADDFORM, EDITFORM, delete;

//---------------------------- по поставщикам и товарам ----------------------------------------

