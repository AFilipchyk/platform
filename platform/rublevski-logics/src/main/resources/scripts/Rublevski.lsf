MODULE Rublevski;

IMPORT BaseLogicsModule;

castToString255 = FORMULA STRING[255] 'CAST($1 AS character(255))';
isWordInCSV = FORMULA INTEGER 'CASE WHEN CAST($1 AS text)=ANY(string_to_array($2,\',\')) THEN 1 ELSE 0 END';

CLASS doubleNamed 'Объект с кратким наименованием' : named;

shortName 'Краткое наименование' = DATA STRING[5] (doubleNamed) IN baseGroup;

CLASS STATIC yesNo 'Логическое' {
    yes 'ДА',
    no 'НЕТ'
};

classSIDToYesNo 'Да/нет по ИД'(string) = GROUP UNIQUE yesNo BY classSID (yesNo) WHERE yesNo IS yesNo;

CLASS language 'Язык' : doubleNamed;

stringEqualsAll(string) = string == 'Все';
dateDiffersCurrent(date) = date != currentDate();

CLASS ABSTRACT postedObject 'Объект с возможностью закрытия';
TABLE postedObject (postedObject);

GROUP postedGroup 'Информация о закрытии' : baseGroup;

timeClosed 'Время закрытия' = DATA DATETIME (postedObject) IN postedGroup;
userClosed 'Закрыт пользователем' = DATA customUser (postedObject) IN idGroup;
computerClosed 'Компьютер, с которого осуществляется закрытие' = DATA computer (postedObject) IN idGroup;

nameUserClosed 'Закрыт пользователем' (postedObject) = commonName(userClosed(postedObject)) IN postedGroup;
hostnameComputerClosed 'Компьютер, с которого осуществляется закрытие' (postedObject) = hostname(computerClosed(postedObject)) IN postedGroup;

timeClosed(postedObject) <- currentDateTime() ON ASSIGN postedObject IS postedObject;
userClosed(postedObject) <- currentUser() ON ASSIGN postedObject IS postedObject;
computerClosed(postedObject) <- currentComputer() ON ASSIGN postedObject IS postedObject;

GROUP documentHeaderGroup 'Шапка документа' : baseGroup;

// ----------------------------------- Нумераторы ------------------------------------------ //

CLASS numerator 'Нумератор' : named;

seriesNumerator 'Серия' = DATA STRING[2] (numerator) IN recognizeGroup FIXEDCHARWIDTH 3;

minValueNumerator 'Мин. значение' = DATA LONG (numerator) IN recognizeGroup;
maxValueNumerator 'Макс. значение' = DATA LONG (numerator) IN recognizeGroup;

stringLengthNumerator 'Длина' = DATA INTEGER (numerator) IN baseGroup;

curValueNumerator 'Тек. значение' = DATA LONG (numerator) IN recognizeGroup;
curValueNumerator(numerator) <- minValueNumerator(numerator) ON ASSIGN numerator IS numerator;

lpadStringWithZero = FORMULA STRING[18] 'lpad(CAST($1 AS text),$2,\'0\')';

curStringValueNumerator 'Тек. значение (строка)' (numerator) = lpadStringWithZero(curValueNumerator(numerator), stringLengthNumerator(numerator)) IN baseGroup;

incrementValueNumerator 'Увеличить значение' = ACTION (numerator) NEWSESSION {
    IF curValueNumerator(numerator) >= maxValueNumerator(numerator) THEN
        MESSAGE 'Счетчик нумератора достиг максимального значения. Обратитесь к администратору.'
    ELSE {
        SET curValueNumerator(numerator) <- curValueNumerator(numerator) + 1;
        EXEC apply();
    };
};

FORM numerator 'Нумератор'
    OBJECTS n = numerator FIXED PANEL
    PROPERTIES(n) name, seriesNumerator, minValueNumerator, maxValueNumerator, stringLengthNumerator, curValueNumerator, curStringValueNumerator

    EDIT numerator OBJECT n
;

FORM numerators 'Нумераторы'
    OBJECTS n = numerator
    PROPERTIES(n) READONLY name, seriesNumerator, minValueNumerator, maxValueNumerator, stringLengthNumerator, curValueNumerator, curStringValueNumerator
    PROPERTIES(n)          ADDFORM, EDITFORM, delete

    DIALOG numerator OBJECT n
;

GROUP numberedGroup 'Нумератор' : baseGroup;

CLASS ABSTRACT numberedObject 'Нумерованный объект';
TABLE numberedObject (numberedObject);

numberObject 'Номер' = DATA STRING[18] (numberedObject) IN numberedGroup MINCHARWIDTH 7;
seriesObject 'Серия' = DATA STRING[2] (numberedObject) IN numberedGroup FIXEDCHARWIDTH 3;

seriesNumberObject 'Серия/Номер' (numberedObject) = [FORMULA STRING[21] '$1 || $2']
                                                    (seriesObject(numberedObject), numberObject(numberedObject));

CLASS ABSTRACT numeratedObject 'Нумерируемый объект' : numberedObject;

numeratorObject 'Нумератор (ИД)' = DATA numerator (numeratedObject);
nameNumeratorObject 'Нумератор' (numeratedObject) = name(numeratorObject(numeratedObject)) IN numberedGroup;

setValueNumeratedObject 'Сгенерировать номер' = ACTION (numeratedObject) {
    SET numberObject(numeratedObject) <- curStringValueNumerator(numeratorObject(numeratedObject));
    SET seriesObject(numeratedObject) <- seriesNumerator(numeratorObject(numeratedObject));
    EXEC incrementValueNumerator(numeratorObject(numeratedObject));
} IN numberedGroup SHORTCUT numberObject;

// todo : не работает
setValueNumeratedObject(numeratedObject) <- TRUE ON CHANGE numeratorObject(numeratedObject);

// ----------------------------------- Шаблоны ------------------------------------------ //

// ----------------------------------- Свойство объект-дата------------------------------------------ //
META metaCodeObjectDateProperty(prop, object, caption, type, group)

    prop##Date caption = DATA type (object, DATE) IN group;
    date##prop (object, date) = GROUP MAX dateIn AND prop##Date(object, dateIn) AND dateIn <= (date AS DATE) BY object, date;
    prop##Val caption (object, date) = prop##Date(object, date##prop(object, date)) IN group;
    prop caption (object) = prop##Date(object, date##prop(object, currentDate())) IN group;

    FORM add##prop caption
    OBJECTS a=object FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, OBJVALUE(d), prop##Date(a, d);
    DESIGN add##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
    }

    showFormAdd##prop 'Добавить' (object) = ACTION FORM add##prop OBJECTS a MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

    FORM prop caption
    OBJECTS a=object FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, showFormAdd##prop(a) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY, prop##Date(a, d)
    FILTERS prop##Date(a, d);
    DESIGN prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
    }

    showForm##prop caption (object) = ACTION FORM prop OBJECTS a MODAL SHORTCUT prop DEFAULT;

END

// ---------------------------------- Свойство объект-дата для (пример, стат.класса)------------------------------------------ //

META metaCodeNameObjectDateProperty(prop, object, caption, type, group)

    prop##Date caption = DATA type (object, DATE) IN group;
    name##prop##Date caption (object, date) = name(prop##Date(object, date));
    date##prop (object, date) = GROUP MAX dateIn AND prop##Date(object, dateIn) AND dateIn <= (date AS DATE) BY object, date;
    prop caption (object) = prop##Date(object, date##prop(object, currentDate()));
    name##prop caption (object) = name(prop(object)) IN group;

    FORM addName##prop caption
    OBJECTS a=object FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, OBJVALUE(d), name##prop##Date(a, d);
    DESIGN addName##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
    }

    showFormAddName##prop 'Добавить' (object) = ACTION FORM addName##prop OBJECTS a MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

    FORM name##prop caption
    OBJECTS a=object FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, showFormAddName##prop(a) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY, name##prop##Date(a, d)
    FILTERS prop##Date(a, d);
    DESIGN name##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
    }

    showFormName##prop caption (object) = ACTION FORM name##prop OBJECTS a MODAL SHORTCUT name##prop DEFAULT;

END

// ----------------------------------- Свойство объект1-объект2-дата------------------------------------------ //
META metaCodeDoubleObjectDateProperty(prop, object1, object2, caption, type, group)

    prop##Date caption = DATA type (object1, object2, DATE) IN group;
    date##prop (object1, object2, date) = GROUP MAX dateIn AND prop##Date(object1, object2, dateIn) AND dateIn <= (date AS DATE) BY object1, object2, date;
    prop##Val caption (object1, object2, date) = prop##Date(object1, object2, date##prop(object1, object2, date));
    prop caption (object1, object2) = prop##Val(object1, object2, currentDate()) IN group;
    prop##Over caption = UNION OVERRIDE prop##Val(object1, object2, date), prop##Date(object1, object2, date);

    FORM add##prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, name(b) READONLY, OBJVALUE(d), prop##Date(a, b, d);
    DESIGN add##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
    }

    showFormAdd##prop 'Добавить' (object1, object2) = ACTION FORM add##prop OBJECTS a, b MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

    FORM prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, name(b) READONLY, showFormAdd##prop(a, b) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY, prop##Date(a, b, d)
    FILTERS prop##Date(a, b, d);
    DESIGN prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
    }

    showForm##prop caption (object1, object2) = ACTION FORM prop OBJECTS a, b MODAL SHORTCUT prop DEFAULT;
    showForm##prop##Over caption (object1, object2) = ACTION FORM prop OBJECTS a, b MODAL SHORTCUT prop##Over;

END
// ----------------------------------- Свойство объект1-объект2-дата для yesNo со значением по-умолчанию НЕТ------------------------------------------ //

META metaCodeNameDoubleObjectDateProperty(prop, object1, object2, caption, type, group)

    prop##Date caption = DATA type (object1, object2, DATE) IN group;
    name##prop##Date caption (object1, object2, date) = name(prop##Date(object1, object2, date));
    date##prop (object1, object2, date) = GROUP MAX dateIn AND prop##Date(object1, object2, dateIn) AND dateIn <= (date AS DATE) BY object1, object2, date;
    prop##Val caption (object1, object2, date) = prop##Date(object1, object2, date##prop(object1, object2, date));
    prop caption (object1, object2) = UNION OVERRIDE yesNo.no AND object1 IS object1 AND object2 IS object2,
                                                     prop##Date(object1, object2, date##prop(object1, object2, currentDate()));
    name##prop caption (object1, object2) = name(prop(object1, object2)) IN group;

    prop##Over caption = UNION OVERRIDE yesNo.no AND object1 IS object1 AND object2 IS object2 AND date IS DATE, prop##Val(object1, object2, date), prop##Date(object1, object2, date);
    name##prop##Over caption (object1, object2, date) = name(prop##Over(object1, object2, date)) FIXEDCHARWIDTH 7;

    FORM addName##prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, name(b) READONLY, OBJVALUE(d), name##prop##Date(a, b, d);
    DESIGN addName##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
    }

    showFormAddName##prop 'Добавить' (object1, object2) = ACTION FORM addName##prop OBJECTS a, b MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

    FORM name##prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, name(b) READONLY,  showFormAddName##prop(a, b) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY, name##prop##Date(a, b, d)
    FILTERS prop##Date(a, b, d);
    DESIGN name##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
    }

    showFormName##prop caption (object1, object2) = ACTION FORM name##prop OBJECTS a, b MODAL SHORTCUT name##prop DEFAULT;
    showFormName##prop##Over caption (object1, object2) = ACTION FORM name##prop OBJECTS a, b MODAL SHORTCUT name##prop##Over;

END

// ----------------------------------- Свойство объект1-объект2-объект3-дата------------------------------------------ //
META metaCodeTripleObjectDateProperty(prop, object1, object2, object3, caption, type, group)

    prop##Date caption = DATA type (object1, object2, object3, DATE) IN group;
    date##prop (object1, object2, object3, date) = GROUP MAX dateIn AND prop##Date(object1, object2, object3, dateIn) AND dateIn <= (date AS DATE) BY object1, object2, object3, date;
    prop##Val caption (object1, object2, object3, date) = prop##Date(object1, object2, object3, date##prop(object1, object2, object3, date));
    prop caption (object1, object2, object3) = prop##Val(object1, object2, object3, currentDate()) IN group;
    prop##Over caption = UNION OVERRIDE prop##Val(object1, object2, object3, date), prop##Date(object1, object2, object3, date);

    FORM add##prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, c=object3  FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, name(b) READONLY, name(c) READONLY, OBJVALUE(d), prop##Date(a, b, c, d);
    DESIGN add##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
        PROPERTY(name(c)) { focusable = FALSE; }
    }

    showFormAdd##prop 'Добавить' (object1, object2, object3) = ACTION FORM add##prop OBJECTS a, b, c MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

    FORM prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, c=object3 FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, name(b) READONLY, name(c) READONLY, showFormAdd##prop(a, b, c) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY, prop##Date(a, b, c, d)
    FILTERS prop##Date(a, b, c, d);
    DESIGN prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
        PROPERTY(name(c)) { focusable = FALSE; }
    }

    showForm##prop caption (object1, object2, object3) = ACTION FORM prop OBJECTS a, b, c MODAL SHORTCUT prop DEFAULT;
    showForm##prop##Over caption (object1, object2, object3) = ACTION FORM prop OBJECTS a, b, c MODAL SHORTCUT prop##Over;

END
// -------------------- Свойство объект1-объект2-объект3-дата для yesNo со значением по-умолчанию НЕТ---------------------------- //

META metaCodeNameTripleObjectDateProperty(prop, object1, object2, object3, caption, type, group)

    prop##Date caption = DATA type (object1, object2, object3, DATE) IN group;
    name##prop##Date caption (object1, object2, object3, date) = name(prop##Date(object1, object2, object3, date));
    date##prop (object1, object2, object3, date) = GROUP MAX dateIn AND prop##Date(object1, object2, object3, dateIn) AND dateIn <= (date AS DATE) BY object1, object2, object3, date;
    prop##Val caption (object1, object2, object3, date) = UNION OVERRIDE yesNo.no AND object1 IS object1 AND object2 IS object2 AND object3 IS object3 AND date IS DATE,
                                                                         prop##Date(object1, object2, object3, date##prop(object1, object2, object3, date));
    prop caption (object1, object2, object3) = prop##Val(object1, object2, object3, currentDate());
    name##prop caption (object1, object2, object3) = name(prop(object1, object2, object3)) IN group;

    prop##Over caption = UNION OVERRIDE prop##Val(object1, object2, object3, date), prop##Date(object1, object2, object3, date);
    name##prop##Over caption (object1, object2, object3, date) = name(prop##Over(object1, object2, object3, date)) FIXEDCHARWIDTH 7;

    FORM addName##prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL,  c=object3 FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, name(b) READONLY, name(c) READONLY, OBJVALUE(d), name##prop##Date(a, b, c, d);
    DESIGN addName##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
        PROPERTY(name(c)) { focusable = FALSE; }
    }

    showFormAddName##prop 'Добавить' (object1, object2, object3) = ACTION FORM addName##prop OBJECTS a, b, c MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

    FORM name##prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, c=object3 FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, name(b) READONLY, name(c) READONLY, showFormAddName##prop(a, b, c) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY, name##prop##Date(a, b, c, d)
    FILTERS prop##Date(a, b, c, d);
    DESIGN name##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
        PROPERTY(name(c)) { focusable = FALSE; }
    }

    showFormName##prop caption (object1, object2, object3) = ACTION FORM name##prop OBJECTS a, b, c MODAL SHORTCUT name##prop DEFAULT;
    showFormName##prop##Over caption (object1, object2, object3) = ACTION FORM name##prop OBJECTS a, b, c MODAL SHORTCUT name##prop##Over;

END

// ----------------------------------- Отображение атрибутов товаров по свойству товарной группы ------------------------------------------ //
META metaCodeShowItemAttribute (attribute, caption, group)

    show##attribute##ItemGroup caption (itemGroup) = DATA BOOLEAN (itemGroup) IN group;
    toShow##attribute caption (item) = show##attribute##ItemGroup(itemGroupSku(item));
    show##attribute##ItemGroup(itemGroup) <- TRUE ON ASSIGN itemGroup IS itemGroup;

END

// ----------------------------------- Свойства изменения объектов в Posted ------------------------------------------ //

META metaCodePostedObject (object)

    isDraft###object 'Открыт' (object) = object IS object AND NOT object IS object##Posted;
    isPosted###object 'Закрыт' (object) = object IS object##Posted;

    post###object 'Закрыть' (object) = [ACTION (object) NEWSESSION AUTOAPPLY { SET objectClass(object) <- CustomObjectClass.Rublevski_##object##Posted; } ] (object)
                                    IF object IS object AND NOT object IS object##Posted TOOLBAR CONFIRM;

    unpost###object 'Открыть' (object) = [ACTION (object) NEWSESSION AUTOAPPLY { SET objectClass(object) <- CustomObjectClass.Rublevski_##object; } ] (object)
                                      IF object IS object##Posted TOOLBAR CONFIRM;

END

// ----------------------------------- Свойства для объектов Posted ------------------------------------------ //
META metaCodeObjectWithPost (object, caption, captionPosted, documentClass, detailClass)

    CLASS object caption : documentClass;
    CLASS object##Detail 'Строка документа' : detailClass;

    @metaCodeObjectWithPostEx(object, captionPosted);
END

META metaCodeObjectWithPostEx (object, captionPosted)

    TABLE object (object);

    CLASS object##Posted captionPosted : object, postedObject;

    TABLE object##Detail (object##Detail);

    date###object 'Дата документа' (object) = DATA DATE (object) IN documentHeaderGroup;
    date###object (object) <- currentDate() ON ASSIGN object AS object;

    time###object 'Время документа' (object) = DATA TIME (object) IN documentHeaderGroup;
    time###object (object) <- currentTime() ON ASSIGN object AS object;

    dateTime###object 'Дата/время документа' (object) = toDateTime(date###object(object), time###object(object));

    departmentStore###object 'Отдел документа (ИД)' (object) = DATA departmentStore(object) IN idGroup;

    nameDepartmentStore###object 'Отдел документа' (object) = name(departmentStore###object(object)) IN documentHeaderGroup
            MINCHARWIDTH 20 PREFCHARWIDTH 40;;

    note###object 'Примечание' = DATA STRING[100] (object) IN additionalInfo;

    object###object##Detail 'Строка документа' = DATA object (object##Detail) IN idGroup;

    in###object###object##Detail(object, object##Detail) = object###object##Detail(object##Detail) == object;

    number###object##Detail 'Номер строки' (object##Detail) =
        PARTITION SUM 1 IF object##Detail IS object##Detail BY object###object##Detail(object##Detail)
        ORDER object##Detail IN recognizeGroup MINCHARWIDTH 3 PREFCHARWIDTH 3;

    departmentStore###object##Detail 'Отдел магазина (ИД)' (object##Detail) = departmentStore###object(object###object##Detail(object##Detail));

    item###object##Detail 'Товар строки документа (ИД)' (object##Detail) = DATA item (object##Detail) IN idGroup;

    nameAttributeItem###object##Detail 'Товар строки документа' (object##Detail) =
        nameAttributeItem(item###object##Detail(object##Detail)) IN recognizeGroup;

    barcodeExSku###object##Detail 'Штрих-код товара' (object) =
        barcodeEx(barcodeSku(item###object##Detail (object))) IN baseGroup;

    quantity###object##Details###object 'Количество строк в документе' (object) =
        GROUP SUM 1 IF in###object###object##Detail(object, object##Detail) BY object;

    add###object##DetailBarcode 'Добавить строку по штрих-коду' = ACTION (object) {
        FORM barcodeInput MODAL;

        IF formResult() == formResult.ok THEN {
            SET tmpSku() <- skuBarcodeStringDate(chosenString('barcode'), date###object(object));
            IF tmpSku() IS item THEN {
                ADDOBJ object##Detail;
                FOR o == addedObject() DO {
                    SET object###object##Detail(o) <- object AS object;
                    SET item###object##Detail(o) <- tmpSku();
            //        SET quantity###object##Detail(o) <- amountBarcode(valueBarcodeToDate(chosenString('barcode'), date###object(object)));
                };
            } ELSE
                MESSAGE 'Не найден штрих-код';
        };

    }TOOLBAR EDITKEY 'F4';

    cleanAll###object##Details###object 'Очистить документ' = ACTION (object) {
        FOR object###object##Detail (detail) == object DO {
          EXEC delete(detail AS object##Detail);
        };
    } IN documentHeaderGroup CONFIRM;

    @metaCodePostedObject (object);

    date###object##Detail 'Дата документа' (object##Detail) = date###object(object###object##Detail(object##Detail));
    dateTime###object##Detail 'Дата/время документа' (object##Detail) = dateTime###object(object###object##Detail(object##Detail));
    isPosted###object##Detail 'Закрыт' (object##Detail) = isPosted###object(object###object##Detail(object##Detail));
    isNotPosted###object##Detail 'Открыт' (object##Detail) = object##Detail IS object##Detail AND NOT isPosted###object##Detail(object##Detail);

END

META metaCodeSingleAggregation (primObject, aggrObject, aggrProperty)

    primObject###aggrObject = DATA primObject (aggrObject);

    @metaCodeSinglePropsAggregation (primObject###aggrObject, aggrObject, aggrProperty);

END

META metaCodeSinglePropsAggregation (primProperty, aggrObject, aggrProperty)

    unique###aggrObject 'Одиночная агрегация' (primObject) =
        GROUP UNIQUE aggrObject BY primProperty(aggrObject)
        WHERE aggrObject IS aggrObject;

    aggrProperty(primObject) => unique###aggrObject(primObject) RESOLVE TRUE;

    is###aggrObject(aggrObject) = aggrObject IS aggrObject;
    is###aggrObject(aggrObject) => aggrProperty(primProperty(aggrObject)) RESOLVE FALSE;

END

META metaCodeDoubleAggregation (prim1Object, prim2Object, aggrObject, aggrProperty)

    prim1Object###aggrObject = DATA prim1Object (aggrObject);
    prim2Object###aggrObject = DATA prim2Object (aggrObject);

    @metaCodeDoublePropsAggregation(prim1Object###aggrObject, prim2Object###aggrObject, aggrObject, aggrProperty);

END

META metaCodeDoublePropsAggregation (prim1Property, prim2Property, aggrObject, aggrProperty)

    unique###aggrObject 'Двойная агрегация' (prim1Object, prim2Object) =
        GROUP UNIQUE aggrObject BY prim1Property(aggrObject), prim2Property(aggrObject)
        WHERE aggrObject IS aggrObject;

    aggrProperty(prim1Object, prim2Object) => unique###aggrObject(prim1Object, prim2Object) RESOLVE TRUE;

    is###aggrObject(aggrObject) = aggrObject IS aggrObject;
    is###aggrObject(aggrObject) => aggrProperty(prim1Property(aggrObject), prim2Property(aggrObject)) RESOLVE FALSE;

END


META metaCodeDetailAggregation (primObject, aggrObject, aggrProperty)

    @metaCodeSingleAggregation(primObject, aggrObject, aggrProperty);
    @metaCodeSingleAggregation(primObject##Detail, aggrObject##Detail, aggrProperty##Detail);

    aggrObject###aggrObject##Detail (detail) = unique###aggrObject(primObject###primObject##Detail(primObject##Detail###aggrObject##Detail(detail)));

END

// ----------------------------------- Товарный классификатор ------------------------------------------ //
CLASS itemGroup 'Товарная группа' : named, externalObject;
TABLE itemGroup(itemGroup);
TABLE itemGroupItemGroup (itemGroup, itemGroup);

parentItemGroup = DATA itemGroup (itemGroup); //AUTOSET;  --  пока не имеет смысла проставляет не ту группу
inParentItemGroupItemGroup (child, parent) = parentItemGroup(child) == parent;

nameParentItemGroup 'Родительская группа' = name(parentItemGroup(itemGroup));
maxTurnoverItemGroup 'Максимально допустимая товарооборачиваемость' (itemGroup) = DATA INTEGER (itemGroup);
minTurnoverItemGroup 'Минимально допустимая товарооборачиваемость' (itemGroup) = DATA INTEGER (itemGroup);

pieceNumeratorItemGroup = DATA numerator (itemGroup);
namePieceNumeratorItemGroup 'Нумератор штрих-кодов (для штучного товара)' (itemGroup) = name(pieceNumeratorItemGroup(itemGroup));

weightNumeratorItemGroup = DATA numerator (itemGroup);
nameWeightNumeratorItemGroup 'Нумератор штрих-кодов (для весового товара)' (itemGroup) = name(weightNumeratorItemGroup(itemGroup));

childNumberItemGroup 'Кол-во непосредственных потомков' (itemGroup) = GROUP SUM 1 BY parentItemGroup(group) PERSISTENT;

isLeafItemGroup 'Лист' (itemGroup) = itemGroup IS itemGroup AND NOT childNumberItemGroup(itemGroup) PERSISTENT;

hasParentItemGroupLevel 'Уровень' (child, parent) = RECURSION 1l AND child IS itemGroup AND parent == child
                                                                  STEP 2l AND parent == parentItemGroup($parent) PERSISTENT;
TABLE itemGroupStructure(itemGroup, itemGroup, LONG);

hasParentItemGroup 'Уровень' (child, parent) = TRUE AND hasParentItemGroupLevel(child, parent);

hasParentAndLeafItemGroup (child, parent) = hasParentItemGroup(child, parent) AND isLeafItemGroup(child);

hasParentOrNullItemGroup (child, parent) = UNION OVERRIDE hasParentItemGroup(child, parent), child IS itemGroup AND NOT parent;
hasParentAndLeafOrNullItemGroup (child, parent) = UNION OVERRIDE hasParentAndLeafItemGroup(child, parent), isLeafItemGroup(child) AND NOT parent;

canonicalNameItemGroup 'Каноническое имя' (itemGroup) = castToString255(
                           [GROUP CONCAT name(parent), ' / ' BY child ORDER DESC hasParentItemGroupLevel(child, parent)](itemGroup))

                           MINCHARWIDTH 50 MAXCHARWIDTH 100 PREFCHARWIDTH 100 PERSISTENT;
//levelItemGroup 'Уровень' (itemGroup) = GROUP SUM 1 IF hasParentItemGroup(child, parent) BY child PERSISTENT;

// формы за формами товара

// ----------------------------------- Единицы измерения ------------------------------------------ //
CLASS unitOfMeasure 'Единица измерения' : doubleNamed, externalObject;

unitOfMeasureUnitOfMeasure 'Базовая ед.изм. ИД' = DATA unitOfMeasure(unitOfMeasure) IN idGroup;
shortNameUnitOfMeasureUnitOfMeasure 'Базовая ед.изм.' (unitOfMeasure) = shortName(unitOfMeasureUnitOfMeasure(unitOfMeasure)) IN baseGroup;
rightUnitOfMeasure 'Разместить от значения: справа' = DATA BOOLEAN (unitOfMeasure) IN baseGroup;
useUnitOfMeasure 'Используется' = DATA BOOLEAN (unitOfMeasure) IN baseGroup;
factorUnitOfMeasure 'Коэффициент пересчета в баз.ед.' = DATA DOUBLE (unitOfMeasure) IN baseGroup;
weightUnitOfMeasure 'Для весовых товаров/услуг' = DATA BOOLEAN (unitOfMeasure) IN baseGroup;
pieceUnitOfMeasure 'Для штучных товаров/услуг' = DATA BOOLEAN (unitOfMeasure) IN baseGroup;


FORM unitOfMeasure 'Единица измерения'
OBJECTS u=unitOfMeasure FIXED PANEL
PROPERTIES(u) name, shortName, shortNameUnitOfMeasureUnitOfMeasure, factorUnitOfMeasure, rightUnitOfMeasure,
              useUnitOfMeasure, weightUnitOfMeasure, pieceUnitOfMeasure
EDIT unitOfMeasure OBJECT u;

FORM unitsOfMeasure 'Единицы измерений'
OBJECTS u=unitOfMeasure
PROPERTIES(u) READONLY name, shortName, shortNameUnitOfMeasureUnitOfMeasure, factorUnitOfMeasure, rightUnitOfMeasure,
              useUnitOfMeasure, weightUnitOfMeasure, pieceUnitOfMeasure
PROPERTIES(u) ADDFORM, EDITFORM, delete;

// ------------------------------------ Цвета ------------------------------------------------ //
CLASS color 'Цвет' : named;

FORM color 'Цвет'
OBJECTS c=color FIXED PANEL
PROPERTIES(c) name;

// ------------------------------------ Вкусы ------------------------------------------------------ //
CLASS taste 'Вкус' : named;

FORM taste 'Вкус'
OBJECTS t=taste FIXED PANEL
PROPERTIES(t) name;

// ----------------------------------- Производители ---------------------------------- //
//CLASS manufacturer 'Производитель' : named;

//------------------------------------ Сорта-категории --------------------------------- //
CLASS sort 'Сорт/Категория' : named;

FORM sort 'Сорт/Категория'
OBJECTS s=sort FIXED PANEL
PROPERTIES(s) name;

//------------------------------------ Упаковки ----------------------------------------//
CLASS pack 'Упаковка' : doubleNamed;

FORM pack 'Упаковка'
OBJECTS p=pack FIXED PANEL
PROPERTIES(p) name, shortName;

//------------------------------------ Особенности изготовления ------------------------//
CLASS specialty 'Особенность' : doubleNamed;

FORM specialty 'Особенность'
OBJECTS s=specialty FIXED PANEL
PROPERTIES(s) name, shortName;

//------------------------------------ Размеры/Калибры/Габариты ------------------------//
CLASS size 'Размер/калибр' : doubleNamed;

FORM size 'Размер/калибр'
OBJECTS s=size FIXED PANEL
PROPERTIES(s) name, shortName;

//------------------------------------ Степень охлаждения ------------------------//
CLASS coolingDegree 'Степень охлаждения' : doubleNamed;

FORM coolingDegree 'Степень охлаждения'
OBJECTS c=coolingDegree FIXED PANEL
PROPERTIES(c) name, shortName;

//------------------------------- Ценники ------------------------------------//
CLASS tag 'Ценник' : named;

FORM tag 'Ценник'
OBJECTS t=tag FIXED PANEL
PROPERTIES(t) name;

//------------------------------- Строки 1-торг ------------------------------------//
CLASS rowTorg1 'Строка формы 1-торг' : named;

FORM rowTorg1 'Строка формы 1-торг'
OBJECTS r=rowTorg1 FIXED PANEL
PROPERTIES(r) name;

//------------------------------- Виды ------------------------------------//
CLASS typeItem 'Вид' : named;

FORM typeItem 'Вид'
OBJECTS t=typeItem FIXED PANEL
PROPERTIES(t) name;

//--------------------------------- Форма товара (особенности нарезки/разделки)  --------------------------//
CLASS formItem 'Форма товара' : named;

FORM formItem 'Форма товара'
OBJECTS f=formItem FIXED PANEL
PROPERTIES(f) name;

//--------------------------------- Кол-во в упаковке --------------------------//
CLASS numberInPack 'Кол-во в упаковке' : named;

FORM numberInPack 'Кол-во в упаковке'
OBJECTS n=numberInPack FIXED PANEL
PROPERTIES(n) name;

//---------------------------------- Норма отходов ------------------------------------//
CLASS rateWaste 'Норма отходов' : named, externalObject;

percentRateWaste 'Норма,%' = DATA DOUBLE (rateWaste) IN baseGroup;

FORM rateWaste 'Норма отходов'
OBJECTS r=rateWaste FIXED PANEL
PROPERTIES(r) name, percentRateWaste;

// ----------------------------------- Товар ------------------------------------------ //
GROUP descriptionGroup 'Наименование' : publicGroup;
GROUP rateGroup 'Нормы' : publicGroup;
GROUP headGroup 'Базовые свойства' : baseGroup;
GROUP sizeGroup 'Ячеистое хранение' : publicGroup;
GROUP retailGroup 'Ценообразование' : publicGroup;
GROUP discountGroup 'Скидки' : retailGroup;
GROUP expiryGroup 'Контроль сроков годности' : publicGroup;
GROUP equipmentGroup 'Внешние устройства' : publicGroup;
GROUP substanceGroup 'Пищевые характеристики' : publicGroup;
GROUP tagGroup 'Ценник' : publicGroup;

GROUP manufactoryGroup 'Производство' : publicGroup;
GROUP orderGroup 'Заказ' : publicGroup;
GROUP barGroup 'Бар' : publicGroup;
GROUP documentGroup 'Для документов' : publicGroup;
GROUP displayGroup 'Свойства для отображения' : baseGroup;

CLASS ABSTRACT sku 'SKU';
TABLE sku(sku);

CLASS item 'Товар' : sku, externalObject;
TABLE item(item);

CLASS ware 'Посуда' : sku, named, externalObject;

CLASS brand 'Бренд' : named, externalObject;

CLASS STATIC groupProduct 'Группа изделий для печати заборного листа'
{
   hot 'Горячее',
   cold  'Холодное'
};

tmpSku() = SESSION DATA sku ();

//baseGroup
itemGroupSku = DATA itemGroup(sku) IN idGroup AUTOSET;
nameItemGroupSku 'Группа товара' (sku) = name(itemGroupSku(sku));
canonicalNameItemGroupSku 'Группа товара' (sku) = canonicalNameItemGroup(itemGroupSku(sku)) IN baseGroup;

TABLE itemGroupSku (itemGroup, sku);

hasParentItemGroupSku (itemGroup, sku) = hasParentItemGroup(itemGroupSku(sku), itemGroup) PERSISTENT;

//descriptionGroup
captionItem 'Название' = DATA STRING[100](item) IN descriptionGroup;
@metaCodeShowItemAttribute(Caption, 'Показывать наименование', displayGroup);

brandItem = DATA brand(item);
nameBrandItem 'Бренд' (item) = name(brandItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Brand, 'Показывать бренд', displayGroup);

typeItemItem = DATA typeItem(item) IN idGroup;
nameTypeItemItem 'Вид' = name(typeItemItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Type, 'Показывать тип', displayGroup);

unitOfMeasureItem = DATA unitOfMeasure (item) IN idGroup;
shortNameUnitOfMeasureItem 'Единица измерения' (item) = shortName(unitOfMeasureItem(item)) IN headGroup;
@metaCodeShowItemAttribute(UnitOfMeasure, 'Показывать ед.измерения', displayGroup);

sortItem = DATA sort(item) IN idGroup;
nameSortItem 'Сорт/категория товара' = name(sortItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Sort, 'Показывать сорт', displayGroup);

packItem = DATA pack(item) IN idGroup;
shortNamePackItem 'Упаковка' = shortName(packItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Pack, 'Показывать упаковку', displayGroup);

specialtyItem = DATA specialty(item) IN idGroup;
shortNameSpecialtyItem 'Особенности' = shortName(specialtyItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Specialty, 'Показывать особенности', displayGroup);

sizeItem = DATA size(item) IN idGroup;
shortNameSizeItem 'Размер/калибр' = shortName(sizeItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Size, 'Показывать размер', displayGroup);

colorItem = DATA color (item) IN idGroup;
nameColorItem 'Цвет' = name(colorItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Color, 'Показывать цвет', displayGroup);

tasteItem = DATA taste (item) IN idGroup;
nameTasteItem 'Вкус' = name(tasteItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Taste, 'Показывать вкус', displayGroup);

hallmarkItem 'Отличительный признак (особенности)' = DATA STRING[100] (item) IN descriptionGroup;
@metaCodeShowItemAttribute(Hallmark, 'Показывать отличительный признак', displayGroup);

articleItem 'Артикул поставщика/производителя' = DATA STRING[100] (item) IN descriptionGroup;
@metaCodeShowItemAttribute(Article, 'Показывать артикул', displayGroup);

coolingDegreeItem 'Степень охлаждения (ИД)' = DATA coolingDegree (item) IN idGroup;
nameCoolingDegreeItem 'Степень охлаждения' = name(coolingDegreeItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(CoolingDegree, 'Показывать степень охлаждения', displayGroup);

countryItem = DATA country (item) IN idGroup;
nameCountryItem 'Страна' = name(countryItem(item)) IN headGroup;
@metaCodeShowItemAttribute(Country, 'Показывать страну', displayGroup);

extSIDCountry 'Внешний код страны' = DATA STRING[60] (country);
extSIDToCountry 'Страна по коду' (string) = GROUP UNIQUE country BY extSIDCountry (country) WHERE country IS country;

isManufacturedItem 'Товар производится' = DATA BOOLEAN (item) IN manufactoryGroup;
hintItem 'Подсказка по товару' = DATA STRING[200] (item) IN documentGroup;

formItemItem = DATA formItem (item) IN idGroup;
nameFormItemItem 'Форма товара (особенности нарезки/разделки)' = name(formItemItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(FormItem, 'Показывать форму', displayGroup);

numberInPackItem = DATA numberInPack (item) IN idGroup;
nameNumberInPackItem 'Кол-во в упаковке' = name(numberInPackItem(item)) IN orderGroup;
@metaCodeShowItemAttribute(NumberInPack, 'Показывать кол-во в упаковке', displayGroup);

rateWasteItem = DATA rateWaste(item) IN idGroup;
nameRateWasteItem 'Норма отходов' = name(rateWasteItem(item)) IN rateGroup;
percentRateWasteItem 'Норма отходов,%' = percentRateWaste(rateWasteItem(item)) IN rateGroup;
@metaCodeShowItemAttribute(RateWaste, 'Показывать норму отходов', displayGroup);

wareItem = DATA ware (item) IN idGroup;
nameWareItem 'Посуда' = name(wareItem(item)) IN retailGroup;

inWareItem 'Товар в посуде' (item) = item IS item AND wareItem(item);

@metaCodeShowItemAttribute(Ware, 'Показывать посуду', displayGroup);

//equipmentGroup
isWeightItem 'Весовой товар' = DATA BOOLEAN (item) IN headGroup;
isWeightedItem 'Признак взвешиваемого товара' = DATA BOOLEAN (item) IN equipmentGroup;
compositionScalesItem 'Состав товара (ингредиенты) для весов' = DATA TEXT (item) IN equipmentGroup;
isMarkItem 'Маркировать товар' = DATA BOOLEAN (item) IN equipmentGroup;
isLoafCutItem 'Буханка разрезается' = DATA BOOLEAN (item) IN equipmentGroup;
passScalesItem 'Передавать на весы' = DATA BOOLEAN (item) IN equipmentGroup;

//substanceGroup
percentFatItem '% жирности' =  DATA DOUBLE (item) IN substanceGroup;
percentAlcoholItem '% алкоголя' =  DATA DOUBLE (item) IN substanceGroup;
nutritionalValueItem 'Энергетическая и пищевая ценность' = DATA STRING[400] (item) IN substanceGroup MINCHARWIDTH 50;
energyItem 'Энергетическая ценность на 100г, ккал' = DATA DOUBLE (item) IN substanceGroup;
fatsItem 'Жиры на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
carbohydratesItem 'Углеводы на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
proteinsItem 'Белки на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
isContainGMOItem 'Содержит ГМО' = DATA BOOLEAN (item) IN substanceGroup;

//tagGroup
tagItem 'Ценник (ИД)' = DATA tag (item) IN idGroup;
nameTagItem 'Ценник' = name(tagItem(item)) IN tagGroup;
multiplierItem 'Множитель для печати ценника' = DATA DOUBLE (item) IN tagGroup;

//sizeGroup
lengthItem 'Длина товара' = DATA INTEGER (item) IN sizeGroup;
widthItem 'Ширина товара' = DATA INTEGER (item) IN sizeGroup;
heightItem 'Высота товара' = DATA INTEGER (item) IN sizeGroup;
grossWeightItem 'Вес брутто товара' = DATA DOUBLE (item) IN manufactoryGroup;
lengthPackItem 'Длина упаковки' = DATA INTEGER (item) IN sizeGroup;
widthPackItem 'Ширина упаковки' = DATA INTEGER (item) IN sizeGroup;
heightPackItem 'Высота упаковки' = DATA DOUBLE (item) IN sizeGroup;
grossWeightPackItem 'Вес брутто упаковки' = DATA DOUBLE (item) IN manufactoryGroup;
volumeItem 'Объём' = DATA DOUBLE (item) IN sizeGroup;
netWeightItem 'Вес нетто' = DATA DOUBLE (item) IN orderGroup;
quantityPackItem 'Количество в грузовом месте' = DATA DOUBLE (item) IN orderGroup;

//retailGroup
minQuantityOrderItem 'Минимальный заказ' = DATA INTEGER (item) IN orderGroup;
minReserveItem 'Минимальный резерв' = DATA INTEGER (item) IN orderGroup;
bonusReturnItem 'Уценка (бонус) по товару при возврате поставщику' = DATA DOUBLE (item) IN documentGroup;
nameReturnItem 'Наименование для уценки, бонуса по товару в возврат' = DATA STRING[200] (item) IN documentGroup;
quantityDiscountItem 'Количество товара, при котором предост-ся скидка' = DATA INTEGER (item) IN discountGroup;
fixPriceItem 'Фиксированная цена при соотв.типе скидки' = DATA INTEGER (item) IN discountGroup;
isFixPriceItem 'Товар с фиксированной ценой' = DATA BOOLEAN (item) IN retailGroup;
banMarkdownItem 'Запретить уценку товара' = DATA BOOLEAN (item) IN retailGroup;
oldPriceItem 'Старая цена для печати на ценник' = DATA DOUBLE (item) IN tagGroup;
minTradeAllowanceItem 'MIN допустимая торговая надбавка, %' = DATA DOUBLE (item) IN retailGroup;
maxTradeAllowanceItem 'MAX допустимая торговая надбавка, %' = DATA DOUBLE (item) IN retailGroup;
minAllowedRetailPriceItem 'MIN допустимая розн.цена' = DATA INTEGER (item) IN retailGroup;
bonusItem 'Бонус получаемый по товару' = DATA DOUBLE (item) IN documentGroup;
percentWholesaleMarkItem '% оптовой надбавки' = DATA DOUBLE (item) IN retailGroup;
banSailItem 'Запрет продаж товара в указанное время' = DATA STRING[200] (item) IN equipmentGroup;


//manufactoryGroup
isCrudeItem 'Товар-сырьё для калькуляции?' = DATA BOOLEAN (item) IN manufactoryGroup;

groupProductItem = DATA groupProduct (item) IN idGroup;
nameGroupProductItem 'Группа изделий для печати заборного листа' = name(groupProductItem(item)) IN manufactoryGroup;

compositionMenuItem 'Состав изделия для печати в меню' = DATA STRING[400] (item)IN manufactoryGroup MINCHARWIDTH 50;
standartItem 'Стандарт изготовления изделия (СТБ и пр.)' = DATA STRING[100] (item) IN manufactoryGroup MINCHARWIDTH 50;
normOutItem 'Норма выхода для печати в меню и калькуляцию' = DATA STRING[100] (item) IN manufactoryGroup MINCHARWIDTH 50;
groupMenuItem 'Группа для печати в меню' = DATA STRING[100] (item) IN manufactoryGroup MINCHARWIDTH 50;
isCutedItem 'Товар разрубается/прорабатывается' = DATA BOOLEAN (item) IN manufactoryGroup;
storageTemperatureItem 'Температура хранения' =  DATA STRING[100] (item) IN equipmentGroup MINCHARWIDTH 50;

//expiryGroup
controlExpiryItem 'Контролировать сроки годности товара?' = DATA BOOLEAN (item) IN expiryGroup;
daysExpiryItem 'Срок годности в днях' = DATA DOUBLE (item) IN expiryGroup;
daysExpiryPackItem 'Срок годности в днях с момента фасовки' = DATA DOUBLE (item) IN expiryGroup;
hoursExpiryPackItem 'Срок годности в часах с момента фасовки' = DATA INTEGER (item) IN expiryGroup;

rowTorg1Item 'Строка формы 1-торг (ИД)' = DATA rowTorg1(item) IN idGroup;

imageItem 'Изображение' = DATA IMAGEFILE (item);
loadImageItem 'Загрузить изображение' (item) = ACTION LOADFILE imageItem(item);

// ----------------------------------- Атрибуты ------------------------------------------ //

CLASS ABSTRACT itemAttribute 'Атрибут товара' : named;

TABLE itemItemAttribute(item, itemAttribute);

CLASS STATIC stringItemAttribute 'Строковый атрибут' {
    captionItem 'Название',
    article 'Артикул',
    hallmark 'Отличительный признак'
} : itemAttribute;

valueCaptionItemAttribute(item, attribute) = castToString255(captionItem(item)) AND attribute == stringItemAttribute.captionItem;
valueArticleItemAttribute(item, attribute) = castToString255(articleItem(item)) AND attribute == stringItemAttribute.article;
valueHallmarkItemAttribute(item, attribute) = castToString255(hallmarkItem(item)) AND attribute == stringItemAttribute.hallmark;

valueStringItemAttribute(item, attribute) = UNION EXCLUSIVE  valueCaptionItemAttribute(item, attribute),
                                                             valueArticleItemAttribute(item, attribute),
                                                             valueHallmarkItemAttribute(item, attribute);

CLASS STATIC integerItemAttribute 'Целочисленный атрибут' {
    length 'Длина',
    width 'Ширина',
    height 'Высота'
} : itemAttribute;

valueLengthItemAttribute(item, attribute) = lengthItem(item) AND attribute == integerItemAttribute.length;
valueWidthItemAttribute(item, attribute) = widthItem(item) AND attribute == integerItemAttribute.width;
valueHeightItemAttribute(item, attribute) = heightItem(item) AND attribute == integerItemAttribute.height;

valueIntegerItemAttribute(item, attribute) = UNION EXCLUSIVE valueLengthItemAttribute(item, attribute),
                                                             valueWidthItemAttribute(item, attribute),
                                                             valueHeightItemAttribute(item, attribute);
stringIntegerItemAttribute(item, attribute) = castToString255(valueIntegerItemAttribute(item, attribute));

CLASS STATIC doubleItemAttribute 'Дробный атрибут' {
    netWeight 'Вес нетто',
    grossWeight 'Вес брутто',
    volume 'Объём',
    percentFat '% жирности',
    percentAlcohol '% алкоголя'
} : itemAttribute;

valueNetWeightItemAttribute(item, attribute) = netWeightItem(item) AND attribute == doubleItemAttribute.netWeight;
valueGrossWeightItemAttribute(item, attribute) = grossWeightItem(item) AND attribute == doubleItemAttribute.grossWeight;
valueVolumeItemAttribute(item, attribute) = volumeItem(item) AND attribute == doubleItemAttribute.volume;
valuePercentFatItemAttribute(item, attribute) = percentFatItem(item) AND attribute == doubleItemAttribute.percentFat;
valuePercentAlcoholItemAttribute(item, attribute) = percentAlcoholItem(item) AND attribute == doubleItemAttribute.percentAlcohol;

valueDoubleItemAttribute(item, attribute) = UNION EXCLUSIVE valueNetWeightItemAttribute(item, attribute),
                                                            valueGrossWeightItemAttribute(item, attribute),
                                                            valueVolumeItemAttribute(item, attribute),
                                                            valuePercentFatItemAttribute(item, attribute),
                                                            valuePercentAlcoholItemAttribute(item, attribute);

stringDoubleItemAttribute(item, attribute) = castToString255(valueDoubleItemAttribute(item, attribute));

CLASS STATIC booleanItemAttribute 'Логический атрибут' {
    fixPrice 'Товар с фиксированной ценой',
    manufactured 'Товар производится'
} : itemAttribute;

valueFixPriceWeightItemAttribute(item, attribute) = isFixPriceItem(item) AND attribute == booleanItemAttribute.fixPrice;
valueManufacturedItemAttribute(item, attribute) = isManufacturedItem(item) AND attribute == booleanItemAttribute.manufactured;

valueBooleanItemAttribute(item, attribute) = UNION EXCLUSIVE valueFixPriceWeightItemAttribute(item, attribute),
                                                             valueManufacturedItemAttribute(item, attribute);
stringBooleanItemAttribute(item, attribute) = castToString255(valueBooleanItemAttribute(item, attribute));

CLASS STATIC objectItemAttribute 'Объектный атрибут' {
    itemGroup 'Группа',
    unitOfMeasure 'Единица измерения',
    brand 'Брэнд',
    typeItem 'Вид',
    formItem 'Форма',
    sort 'Сорт/категория',
    pack 'Упаковка',
    specialty 'Особенность',
    numberInPack 'Число в упаковке',
    size 'Размер/калибр',
    coolingDegree 'Степень охлаждения',
    color 'Цвет',
    taste 'Вкус',
    countryOrigin 'Страна происхождения/производства'

} : itemAttribute;

valueItemGroupItemAttribute(item, attribute) = itemGroupSku(item) AND item IS item AND attribute == objectItemAttribute.itemGroup;
valueUOMItemAttribute(item, attribute) = unitOfMeasureItem(item) AND attribute == objectItemAttribute.unitOfMeasure;
valueBrandItemAttribute(item, attribute) = brandItem(item) AND attribute == objectItemAttribute.brand;
valueTypeItemAttribute(item, attribute) = typeItemItem(item) AND attribute == objectItemAttribute.typeItem;
valueFormItemAttribute(item, attribute) = formItemItem(item) AND attribute == objectItemAttribute.formItem;
valueSortItemAttribute(item, attribute) = sortItem(item) AND attribute == objectItemAttribute.sort;
valuePackItemAttribute(item, attribute) = packItem(item) AND attribute == objectItemAttribute.pack;
valueNumberInPackItemAttribute(item, attribute) = numberInPackItem(item) AND attribute == objectItemAttribute.numberInPack;
valueSpecialtyItemAttribute(item, attribute) = specialtyItem(item) AND attribute == objectItemAttribute.specialty;
valueSizeItemAttribute(item, attribute) = sizeItem(item) AND attribute == objectItemAttribute.size;
valueCoolingDegreeItemAttribute(item, attribute) = coolingDegreeItem(item) AND attribute == objectItemAttribute.coolingDegree;
valueColorItemAttribute(item, attribute) = colorItem(item) AND attribute == objectItemAttribute.color;
valueTasteItemAttribute(item, attribute) = tasteItem(item) AND attribute == objectItemAttribute.taste;
valueCountryItemAttribute(item, attribute) = countryItem(item) AND attribute == objectItemAttribute.countryOrigin;

valueObjectItemAttribute(item, attribute) = UNION EXCLUSIVE valueItemGroupItemAttribute(item, attribute),
                                                            valueUOMItemAttribute(item, attribute),
                                                            valueBrandItemAttribute(item, attribute),
                                                            valueTypeItemAttribute(item, attribute),
                                                            valueFormItemAttribute(item, attribute),
                                                            valueSortItemAttribute(item, attribute),
                                                            valuePackItemAttribute(item, attribute),
                                                            valueNumberInPackItemAttribute(item, attribute),
                                                            valueSpecialtyItemAttribute(item, attribute),
                                                            valueSizeItemAttribute(item, attribute),
                                                            valueCoolingDegreeItemAttribute(item, attribute),
                                                            valueColorItemAttribute(item, attribute),
                                                            valueTasteItemAttribute(item, attribute),
                                                            valueCountryItemAttribute(item, attribute) PERSISTENT;
nameObjectItemAttribute(item, attribute) = name(valueObjectItemAttribute(item, attribute));

CLASS STATIC objectItemShortAttribute 'Объектный краткий атрибут' {
    shortUnitOfMeasure 'Единица измерения (сокр.)',
    shortPack 'Упаковка (сокр.)',
    shortSpecialty 'Особенность (сокр.)',
    shortSize 'Размер/калибр (сокр.)',
    shortCoolingDegree 'Степень охлаждения (сокр.)'

} : itemAttribute;

valueUOMItemShortAttribute(item, attribute) = unitOfMeasureItem(item) AND attribute == objectItemShortAttribute.shortUnitOfMeasure;
valuePackItemShortAttribute(item, attribute) = packItem(item) AND attribute == objectItemShortAttribute.shortPack;
valueSpecialtyItemShortAttribute(item, attribute) = specialtyItem(item) AND attribute == objectItemShortAttribute.shortSpecialty;
valueSizeItemShortAttribute(item, attribute) = sizeItem(item) AND attribute == objectItemShortAttribute.shortSize;
valueCoolingDegreeItemShortAttribute(item, attribute) = coolingDegreeItem(item) AND attribute == objectItemShortAttribute.shortCoolingDegree;

valueObjectItemShortAttribute(item, attribute) = UNION EXCLUSIVE valueUOMItemShortAttribute(item, attribute),
                                                            valuePackItemShortAttribute(item, attribute),
                                                            valueSpecialtyItemShortAttribute(item, attribute),
                                                            valueSizeItemShortAttribute(item, attribute),
                                                            valueCoolingDegreeItemShortAttribute(item, attribute) PERSISTENT;

shortNameObjectItemAttribute(item, attribute) = shortName(valueObjectItemShortAttribute(item, attribute));

valueItemAttribute(item, attribute) = UNION EXCLUSIVE valueStringItemAttribute(item, attribute),
                                                      stringIntegerItemAttribute(item, attribute),
                                                      stringDoubleItemAttribute(item, attribute),
                                                      stringBooleanItemAttribute(item, attribute),
                                                      nameObjectItemAttribute(item, attribute),
                                                      shortNameObjectItemAttribute(item, attribute) PERSISTENT;

numberInNameItemAttribute 'Порядковый номер в наименовании' = DATA INTEGER (itemAttribute) IN baseGroup;
numberInNameCashItemAttribute 'Порядковый номер в наименовании для касс' = DATA INTEGER (itemAttribute) IN baseGroup;
numberInNameScalesItemAttribute 'Порядковый номер в наименовании для весов' = DATA INTEGER (itemAttribute) IN baseGroup;

nameAttributeItem 'Наименование' (item) = castToString255(
                [GROUP CONCAT valueItemAttribute(item, attribute), ' ' BY item ORDER numberInNameItemAttribute(attribute)](item))
                IN recognizeGroup PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 80 INDEXED AGGPROP;
nameCashAttributeItem 'Наименование для касс' (item) = castToString255(
                [GROUP CONCAT valueItemAttribute(item, attribute), ' ' BY item ORDER numberInNameCashItemAttribute(attribute)](item))
                PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 80;
nameScalesAttributeItem 'Наименование для весов' (item) = castToString255(
                [GROUP CONCAT valueItemAttribute(item, attribute), ' ' BY item ORDER numberInNameScalesItemAttribute(attribute)](item))
                PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 80;

nameAttributeItemGroupItem 'Наименование' (itemGroup, item) = nameAttributeItem(item) AND hasParentItemGroupSku(itemGroup, item) PERSISTENT INDEXED;

// ---------------------------------------------------------------------------------------- //

TABLE departmentStoreDate (object, DATE);

TABLE stringDate (STRING[14], DATE);

// ----------------------------------- Штрих код ------------------------------------------ //

GROUP barcodeGroup : baseGroup;

CLASS barcode 'Штрих код';
TABLE barcode (barcode);

barcodeEx 'Штрих код' = DATA STRING[14] (barcode) IN recognizeGroup FIXEDCHARWIDTH 14 INDEXED;

dateUserBarcode 'Дата действия' = DATA DATE (barcode) IN baseGroup;
dateBarcode 'Дата действия' = UNION OVERRIDE 2001_01_01 IF barcode IS barcode, dateUserBarcode(barcode) IN baseGroup PERSISTENT;

skuBarcode = DATA sku(barcode) IN baseGroup;
nameSkuBarcode 'Товар штрих-кода' (barcode) = nameAttributeItem(skuBarcode(barcode)) IN recognizeGroup;

hasParentOrNullItemGroupBarcode (itemGroup, barcode) = hasParentItemGroupSku(itemGroup, skuBarcode(barcode));

barcodeToDate 'Штрих-код на дату' (string, date) = GROUP UNIQUE barcode BY barcodeEx(barcode), dateBarcode(barcode) PERSISTENT;

barcodeStringDate 'Дата действия' (string, date) = GROUP MAX LIST(dateSet, barcodeToDate(string, dateSet)) IF dateSet <= date AND date AS DATE BY string, date IN baseGroup;
valueBarcodeToDate 'Штрих-код на дату' (string, date) = barcodeStringDate(string, date)[2];

valueBarcodeToCurrentDate 'Штрих-код на тек. дату' (string) = valueBarcodeToDate(string, currentDate());

skuBarcodeStringDate 'Товар (ИД)' (string, date) = skuBarcode(valueBarcodeToDate(string, date));
nameSkuStringDate 'Товар' (string, date) = nameAttributeItem(skuBarcodeStringDate(string, date));

actionBarcode 'Активный' (barcode) = valueBarcodeToCurrentDate(barcodeEx(barcode))==barcode;

titleOriginScalesBarcode 'Наименование для весов' = DATA STRING[100] (barcode);
titleOriginCashBarcode 'Наименование для касс' = DATA STRING[100] (barcode);

titleScalesSkuBarcode 'Наименование для весов' = nameScalesAttributeItem(skuBarcode(barcode));
titleCashSkuBarcode 'Наименование для касс' = nameCashAttributeItem(skuBarcode(barcode));

titleScalesBarcode 'Наименование для весов' = UNION OVERRIDE titleScalesSkuBarcode(barcode), titleOriginScalesBarcode(barcode) IN barcodeGroup MINCHARWIDTH 30 PREFCHARWIDTH 30;
titleCashBarcode 'Наименование для касс' = UNION OVERRIDE titleCashSkuBarcode(barcode), titleOriginCashBarcode(barcode) IN barcodeGroup MINCHARWIDTH 30 PREFCHARWIDTH 30;

unitOfMeasureSkuBarcode (barcode) = unitOfMeasureItem(skuBarcode(barcode)) IN idGroup;
unitOfMeasureOriginBarcode = DATA unitOfMeasure (barcode) IN idGroup;
unitOfMeasureBarcode = UNION OVERRIDE unitOfMeasureSkuBarcode (barcode), unitOfMeasureOriginBarcode(barcode) IN idGroup;
shortNameUnitOfMeasureBarcode 'Единица измерения' (barcode) = shortName(unitOfMeasureBarcode(barcode)) IN barcodeGroup;

amountUserBarcode 'Количество (сколько списать при продаже)' = DATA DOUBLE (barcode) IN barcodeGroup;
amountBarcode 'Количество (сколько списать при продаже)' = UNION OVERRIDE 1.0 IF barcode IS barcode, amountUserBarcode (barcode) IN barcodeGroup;
removeBarcode 'Заблокирован (удален с оборудования)' = DATA BOOLEAN (barcode) IN barcodeGroup;
commentRemoveBarcode 'Причина блокировки' = DATA STRING[100] (barcode) IN barcodeGroup;

userBarcodeSku = DATA barcode(sku) IN idGroup;
barcodeUserBarcodeSku 'Основной штрих-код' = barcodeEx(userBarcodeSku(sku)) IN baseGroup;

defaultBarcodeSku(sku) = GROUP MIN barcode BY skuBarcode(barcode) IN idGroup;
barcodeSku(sku) = UNION OVERRIDE defaultBarcodeSku(sku), userBarcodeSku(sku) IN baseGroup;

primarySkuBarcode 'Основной штрих-код' (sku, barcode) = barcodeSku(sku) == barcode;

CONSTRAINT skuBarcode(barcodeSku(item)) != item CHECKED BY userBarcodeSku MESSAGE 'Товар основного штрих-кода должен совпадать с товаром';

barcodeBarcodeSku 'Основной штрих-код' = barcodeEx(barcodeSku(sku)) IN baseGroup PERSISTENT;
//barcodeToBarcode (barcode) = GROUP UNIQUE barcode BY barcodeEx(barcode);

inSkuBarcode(sku, barcode) = skuBarcode(barcode) == sku;

concatBarcodeBySkuDate 'Штрих-кода товара' (sku, date) = GROUP CONCAT barcodeEx(barcode) IF dateBarcode(barcode) <= date AND date AS DATE, ', ' BY skuBarcode(barcode), date IN baseGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;

pieceNumeratorSku (sku) = pieceNumeratorItemGroup(itemGroupSku(sku));
weightNumeratorSku (sku) = weightNumeratorItemGroup(itemGroupSku(sku));

tmpNum = SESSION DATA numerator();

generateBarcodeSku 'Сгенерировать штрих-код' = ACTION (sku) {
    ADDOBJ barcode;
    FOR b == addedObject() DO {
        SET skuBarcode(b) <- sku AS sku;
        IF isWeightItem(sku) THEN
            SET tmpNum() <- weightNumeratorSku(sku)
        ELSE
            SET tmpNum() <- pieceNumeratorSku(sku);
        SET barcodeEx(b) <- curStringValueNumerator(tmpNum());
        EXEC incrementValueNumerator(tmpNum());
    };
} TOOLBAR CONFIRM;


FORM barcode 'Штрих-код'
    OBJECTS       b=barcode
    PROPERTIES(b) barcodeEx, dateBarcode
;

FORM barcodeInput 'Ввод штрих-кода'
    OBJECTS             barcode=STRING[14] FIXED PANEL
    PROPERTIES(barcode) objValue = OBJVALUE
;

DESIGN barcodeInput FROM DEFAULT {
    PROPERTY (objValue) {
        caption = 'Штрих-код';
        font = 'Tahoma bold 64';
        panelLabelAbove = TRUE;
    }
}

// ----------------------------------- Компоненты ------------------------------------------ //
CLASS component 'Компонент' : sku, named;

nettoBruttoCoeffComponent 'Сезонный коэффициент пересчета сырья из нетто в брутто' (component) = DATA DOUBLE (component) IN manufactoryGroup;
percentHumidityFlourDepartmentStoreComponent '% влажности муки' = DATA DOUBLE (departmentStore, component) IN manufactoryGroup;

FORM component 'Компонент'
OBJECTS c=component FIXED PANEL
PROPERTIES(c) name, nettoBruttoCoeffComponent
EDIT component OBJECT c;

FORM components 'Компоненты'
OBJECTS c=component
PROPERTIES(c) READONLY name, nettoBruttoCoeffComponent
PROPERTIES(c) ADDFORM, EDITFORM, delete;


// ----------------------------------- Генерация графика --------------------------------------- //

CLASS STATIC genType 'Тип генерации' {
    genWeek 'Генерация каждые N недель',
    genDays 'Генерация через N дней',
    genNumber 'Генерация по числам',
    genDayMonth 'Генерация по дням недели и месяца'
};

CLASS genTimeTable 'Генерация графика' : historyObject;

//общие свойства
genTimeTableType 'Тип генерации графика (ИД)' = DATA genType (genTimeTable);
nameGenTimeTableType 'Тип генерации графика' (genTimeTable) = name(genTimeTableType(genTimeTable)) IN baseGroup;

supplierGenTimeTable 'Поставщик (ИД)' = DATA supplier (genTimeTable) AUTOSET;
nameSupplierGenTimeTable 'Поставщик' (genTimeTable) = name(supplierGenTimeTable(genTimeTable)) IN baseGroup;

departmentStoreGenTimeTable 'Подразделение (ИД)' = DATA departmentStore (genTimeTable) AUTOSET;
nameDepartmentStoreGenTimeTable 'Подразделение' (genTimeTable) = name(departmentStoreGenTimeTable(genTimeTable)) IN baseGroup;

startDateGenTimeTable 'Дата начала' = DATA DATE (genTimeTable) IN baseGroup;
endDateGenTimeTable 'Дата окончания' = DATA DATE (genTimeTable) IN baseGroup;

dayBeforeGenTimeTable 'За сколько дней формировать заказ' = DATA INTEGER (genTimeTable);

//свойства "Каждые N недель"
periodGenTimeTable 'По прошествии скольки недель будет осуществится следующая поставка' = DATA INTEGER (genTimeTable);

//свойства "Каждые N дней"
dayAfterGenTimeTable 'Через сколько дней после последней поставки делать заказ' = DATA INTEGER (genTimeTable);
dayLastOrderGenTimeTable 'Дата последнего заказа' = DATA DATE (genTimeTable);

//свойства "По числам"
stringNumberGenTimeTable 'Числа месяца поставок (указывать через запятую)' = DATA STRING[100] (genTimeTable);
transferDayGenTimeTable 'День на который переносить поставки с Субботы и Воскресенья (ИД)' = DATA DOW (genTimeTable);
nameTransferDayGenTimeTable 'День на который переносить поставки с Субботы и Воскресенья' (genTimeTable) = name(transferDayGenTimeTable(genTimeTable));
CONSTRAINT transferDayGenTimeTable(genTimeTable) != DOW.friday AND transferDayGenTimeTable(genTimeTable) != DOW.monday CHECKED MESSAGE 'Выберите день с ПН по ПТ';

//свойства "По дням недели и месяца"
inMonthGenTimeTable 'Включать' = DATA BOOLEAN (genTimeTable, month);
inDayGenTimeTable 'Включать' = DATA BOOLEAN (genTimeTable, DOW);
inAllMonthGenTable 'Включить все месяцы' = DATA BOOLEAN (genTimeTable);
inMonthGenTimeTable(genTimeTable, month) <- inAllMonthGenTable(genTimeTable) ON ASSIGN inAllMonthGenTable(genTimeTable) AND month IS month;

toShowGenWeek (genTimeTable) = genTimeTableType(genTimeTable) == genType.genWeek;
toShowGenDay (genTimeTable) = genTimeTableType(genTimeTable) == genType.genDays;
toShowGenNumber (genTimeTable) = genTimeTableType(genTimeTable) == genType.genNumber;
toShowGenDayMonth (genTimeTable) = genTimeTableType(genTimeTable) == genType.genDayMonth;
toShowGenWeekOrDayMonth (genTimeTable) = UNION OVERRIDE toShowGenWeek(genTimeTable), toShowGenDayMonth(genTimeTable);

FORM genTimeTable 'Генерация графика'
OBJECTS g=genTimeTable FIXED PANEL, m=month, d=DOW
PROPERTIES(g) READONLY nameUserCreated, timeCreated
PROPERTIES(g) nameGenTimeTableType, nameDepartmentStoreGenTimeTable, nameSupplierGenTimeTable, startDateGenTimeTable,
              endDateGenTimeTable, dayBeforeGenTimeTable,inAllMonthGenTable SHOWIF toShowGenDayMonth(g),
              dayAfterGenTimeTable SHOWIF toShowGenDay(g), periodGenTimeTable SHOWIF toShowGenWeek(g),
              stringNumberGenTimeTable SHOWIF toShowGenNumber(g), nameTransferDayGenTimeTable SHOWIF toShowGenNumber(g),
              dayLastOrderGenTimeTable SHOWIF toShowGenDay(g)
PROPERTIES(m) READONLY name SHOWIF toShowGenDayMonth(g)
PROPERTIES(d) READONLY name SHOWIF toShowGenWeekOrDayMonth(g)
PROPERTIES(g, m) inMonthGenTimeTable SHOWIF toShowGenDayMonth(g)
PROPERTIES(g, d) inDayGenTimeTable SHOWIF toShowGenWeekOrDayMonth(g)
EDIT genTimeTable OBJECT g;

DESIGN genTimeTable FROM DEFAULT {
    g.panel {
        fillVertical = 0.5;
        preferredSize = (1280, 1024);
    }
    ADD g.historyGroup BEFORE functions.box;
}

showFormGenTimeTable 'Показать генерацию графика' (genTimeTable) = ACTION FORM genTimeTable OBJECTS g MODAL;

FORM genTimeTables 'Графики' //служит для добавления сущности "генерации графиков" и в дальнейшем будет удалена
OBJECTS g=genTimeTable
PROPERTIES(g) READONLY name
PROPERTIES(g) ADDFORM, EDITFORM, delete;

// ----------------------------------- Склад ------------------------------------------ //

CLASS ABSTRACT stock 'Склад' : named;

// ----------------------------------- Магазин ----------------------------------------- //

CLASS store 'Магазин' : named, externalObject;
CLASS tradingNetwork 'Торговая сеть' : named, externalObject; // "Рублевский", "Базар"
CLASS storeType 'Формат магазина' : named; //Мини, Супер, ...

companyStore 'Юридическое лицо магазина (ИД)' = DATA company (store);
nameCompanyStore 'Компания' (store) = name(companyStore(store)) IN baseGroup;
addressStore 'Адрес магазина' = DATA STRING[100] (store);

storeTypeStore 'Формат магазина (ИД)' = DATA storeType (store) AUTOSET;
nameStoreTypeStore 'Формат магазина' (store) = name(storeTypeStore(store)) IN baseGroup;
inStoreTypeStore (storeType, store) = storeTypeStore (store) == storeType;

tradingNetworkStoreType 'Торговая сеть формата магазина (ИД)' = DATA tradingNetwork (storeType);
nameTradingNetworkStoreType 'Торговая сеть формата магазина' (storeType) = name(tradingNetworkStoreType(storeType)) IN baseGroup;
nameToStoreType 'Формат магазина по имени и торговой сети' (name, tradingNetwork) = GROUP UNIQUE storeType BY name (storeType), tradingNetworkStoreType(storeType);

tradingNetworkStore 'Торговая сеть магазина (ИД)' (store) = tradingNetworkStoreType(storeTypeStore(store));
nameTradingNetworkStore 'Торговая сеть магазина' (store) = name(tradingNetworkStore(store)) IN baseGroup;
inTradingNetworkStore (tradingNetwork, store) = tradingNetworkStore(store) == tradingNetwork;

inTradingNetworkStoreTypeStore (tradingNetwork, storeType, store) = UNION OVERRIDE
    storeTypeStore(store) == storeType AND tradingNetwork,
    tradingNetworkStore(store) == tradingNetwork AND NOT storeType,
    store IS store AND NOT storeType AND NOT tradingNetwork;

inStoreTypeTradingNetwork(storeType, tradingNetwork) = tradingNetworkStoreType(storeType) == tradingNetwork;

// ----------------------------------- Физические лица -------------------------------------------------- //

GROUP employeeGroup 'Пользовательская информация' : baseGroup;

CLASS ABSTRACT person 'Физическое лицо';
CLASS employee 'Сотрудник' : person, customUser;
CLASS employeeSystem 'Операционная система';


nameEmployeeSystem 'Операционная система' = DATA STRING[100] (employeeSystem) IN employeeGroup;
employeeSystemEmployee(employee) = DATA employeeSystem (employee) IN idGroup;
nameEmployeeSystemEmployee 'Операционная система на рабочем месте пользователя' (employee) = nameEmployeeSystem(employeeSystemEmployee(employee)) IN employeeGroup;

languageEmployee(employee) = DATA language (employee) IN idGroup;
nameLanguageEmployee 'Язык интерфейса' = name(languageEmployee(employee)) IN employeeGroup;
shortNameLanguageEmployee 'Язык интерфейса сокр.' = shortName(languageEmployee(employee)) IN employeeGroup;
numberEmployee 'Номер кассира для касс' = DATA STRING[10] (employee) IN employeeGroup;
passwordEmployee 'Пароль для касс' = DATA STRING[20] (employee) IN employeeGroup;
dataEmployee 'Данные для регистрации на кассе (штрих-код)' = DATA STRING[20] (employee) IN employeeGroup;


departmentStoreEmployee 'Сотрудник отдела' = DATA BOOLEAN (departmentStore, employee);
phoneEmployee 'Телефон' = DATA STRING[50] (employee) IN employeeGroup;

// ----------------------------------- Торговая площадь -------------------------------------------------- //

CLASS tradingSquare 'Торговая площадь' : named;
squareTradingSquare 'Размер торговой площади' = DATA DOUBLE (tradingSquare) IN baseGroup;
departmentStoreTradingSquare 'Отдел торговой площади (ИД)' = DATA departmentStore (tradingSquare);
nameDepartmentStoreTradingSquare 'Отдел торговой площади' (tradingSquare) = name(departmentStoreTradingSquare(tradingSquare)) IN baseGroup;
dateTradingSquare 'Дата' = DATA DATE (tradingSquare) IN baseGroup;
dateTradingSquare (square) <- currentDate() ON ASSIGN square IS tradingSquare;

FORM tradingSquare 'Торговая площадь'
OBJECTS s=tradingSquare FIXED PANEL
PROPERTIES(s) name, squareTradingSquare, nameDepartmentStoreTradingSquare, dateTradingSquare
EDIT tradingSquare OBJECT s;

// ------------------------------------- Скидки ---------------------------------------------------------- //

@metaCodeNameObjectDateProperty(discount, departmentStore, 'Разрешать скидки', yesNo, baseGroup);

// ----------------------------------- Отдел магазина (Подразделение) ----------------------------------- //

GROUP orderDepartmentStoreGroup 'Заказ' : publicGroup;
GROUP controlDepartmentStoreGroup 'Контроль остатков' : publicGroup;
GROUP printDepartmentStoreGroup 'Печать' : publicGroup;

CLASS departmentStore 'Отдел магазина' : stock, externalObject;
TABLE departmentStore (departmentStore);

CLASS kafeteria 'Кафетерий' : departmentStore;
CLASS tradingFloar 'Торговый зал' : departmentStore;
CLASS wholesaleStock 'Оптовый склад' : departmentStore;
CLASS placeOfAcceptance 'Приемный пункт' : departmentStore;
CLASS restaurant 'Ресторан' : departmentStore;
//CLASS stock 'Склад' : departmentStore; в дальнейшем будет распределительный центр
CLASS manufactory 'Цех' : departmentStore;

CLASS STATIC itemStatus 'Статус товара'
{
    notTransfer '0',
    transfer '1',
    delete '2',
    requireTransfer '3',
    requireDelete '4'
};

storeDepartmentStore 'Магазин отдела (ИД)' = DATA store (departmentStore) AUTOSET;
nameStoreDepartmentStore 'Магазин' (departmentStore) = name(storeDepartmentStore(departmentStore)) IN baseGroup;
revaluationCommitteeDepartmentStore 'Комиссия отдела (ИД)' = DATA revaluationCommittee (departmentStore);
nameRevaluationCommitteeDepartmentStore 'Комиссия отдела' (departmentStore) = name(revaluationCommitteeDepartmentStore(departmentStore)) IN printDepartmentStoreGroup;
controlMinusRestsDepartmentStore 'Контроль за минусовыми остатками' = DATA BOOLEAN (departmentStore) IN controlDepartmentStoreGroup;
deleteItemMinusRestsDepartmentStore 'Удалять товары с отрицательным остатком с весов и касс?' = DATA BOOLEAN (departmentStore) IN controlDepartmentStoreGroup;
controlMinusRestsContainerDepartmentStore 'Контроль за минусовыми остатками тары' = DATA BOOLEAN (departmentStore) IN controlDepartmentStoreGroup;
// controlAssortmentProviderDepartmentStore 'Контролировать ассортимент поставщиков в подразделении?' = DATA BOOLEAN (departmentStore);
verifyOrderArrivalDepartmentStore 'Сверять заказ и приход в подразделении?' = DATA BOOLEAN (departmentStore) IN controlDepartmentStoreGroup;
maxQuantityDeliveryHourDepartmentStore 'Максимальное допустимое число поставок в час' = DATA INTEGER (departmentStore) IN orderDepartmentStoreGroup;
resolveMaxQuantityDeliveryHourAssortmentLessDepartmentStore 'Разрешить превысить количество поставок/час при ассортименте <' = DATA DOUBLE (departmentStore) IN orderDepartmentStoreGroup;
resolveOrderItemDepartmentStore 'Разрешить заказ товара в подразделение?' = DATA BOOLEAN (departmentStore) IN orderDepartmentStoreGroup;
quantityCashChangeOneOperationAccountDepartmentStore 'Количество кассовых смен в одном оперативном отчете' = DATA INTEGER (departmentStore) IN orderDepartmentStoreGroup;
materiallyResponsiblePersonItemReportDepartmentStore 'Материально ответственное лицо, подписывающее товарный отчет (ИД)' = DATA employee (departmentStore);
commonNameMateriallyResponsiblePersonItemReportDepartmentStore 'Материально ответственное лицо, подписывающее товарный отчет' (departmentStore) =
    commonName (materiallyResponsiblePersonItemReportDepartmentStore(departmentStore)) IN printDepartmentStoreGroup;
bookkeeperItemReportDepartmentStore 'Бухгалтер, принимающий товарный отчет (ИД)' = DATA employee (departmentStore);
commonNameBookkeeperItemReportDepartmentStore 'Бухгалтер, принимающий товарный отчет' (departmentStore) = commonName(bookkeeperItemReportDepartmentStore(departmentStore)) IN printDepartmentStoreGroup;
personCheckReportDepartmentStore 'Кто проверяет товарный отчет (ИД)' = DATA employee (departmentStore);
commonNamePersonCheckReportDepartmentStore 'Кто проверяет товарный отчет' (departmentStore) = commonName(personCheckReportDepartmentStore(departmentStore)) IN printDepartmentStoreGroup;
idTradingSquareDepartmentStore 'Торговая площадь отдела магазина' (departmentStore) = GROUP MAX tradingSquare BY departmentStoreTradingSquare(tradingSquare);   //максимизирует только по ID, переделать после расширения функционала
defaultTradingSquareDepartmentStore 'Торговая площадь отдела магазина, кв.м.' (departmentStore) = squareTradingSquare(idTradingSquareDepartmentStore(departmentStore));
tradingSquareStore 'Торговая площадь магазина' = GROUP SUM defaultTradingSquareDepartmentStore(departmentStore) BY storeDepartmentStore(departmentStore);

inStoreDepartment(store, departmentStore) = storeDepartmentStore(departmentStore) == store;
inTradingSquareDepartmentStore(departmentStore, tradingSquare) = departmentStoreTradingSquare(tradingSquare) == departmentStore;

storeTypeDepartmentStore(departmentStore) = storeTypeStore(storeDepartmentStore(departmentStore)) PERSISTENT;
tradingNetworkDepartmentStore(departmentStore) = tradingNetworkStoreType(storeTypeDepartmentStore(departmentStore)) PERSISTENT;

inTradingNetworkStoreTypeStoreDepartment (tradingNetwork, storeType, store, department) = UNION OVERRIDE
    storeDepartmentStore(department) == store AND storeType AND tradingNetwork,
    storeTypeDepartmentStore(department) == storeType AND tradingNetwork AND NOT store,
    tradingNetworkDepartmentStore(department) == tradingNetwork AND NOT store AND NOT storeType,
    department IS departmentStore AND NOT store AND NOT storeType AND NOT tradingNetwork;

FORM employee 'Сотрудник'
    OBJECTS e=employee FIXED PANEL
    PROPERTIES(e)      userFirstName, userLastName, phoneEmployee, nameEmployeeSystemEmployee, shortNameLanguageEmployee, numberEmployee,
                       passwordEmployee, dataEmployee

    TREE treeStore t=tradingNetwork, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY name(t), name(st), name(s), name(ds)

    PROPERTIES(ds, e)  departmentStoreEmployee

    FILTERS   inStoreTypeTradingNetwork (st, t),
              inStoreTypeStore (st, s),
              inStoreDepartment (s, ds)

    EDIT employee OBJECT e
;

FORM employees 'Сотрудники'
    OBJECTS e=employee
    PROPERTIES(e) READONLY userFirstName, userLastName
    PROPERTIES(e) ADDFORM, EDITFORM, delete

    OBJECTS ds=departmentStore
    PROPERTIES(ds) READONLY name, nameStoreDepartmentStore
    FILTERS departmentStoreEmployee(ds, e)
;

// ----------------------------------- Цех ----------------------------------- //

outDepartmentManufactory 'Подразделение, куда передаются изделия (ИД)' (manufactory) = DATA departmentStore(manufactory) IN idGroup;
nameOutDepartmentManufactory 'Подразделение, куда передаются изделия' (manufactory) = name(outDepartmentManufactory(manufactory)) IN manufactoryGroup;
inPriceDepartmentManufactory 'Подразделение, откуда брать цены (ИД)' (manufactory) = DATA departmentStore(manufactory) IN idGroup;
nameInPriceDepartmentManufactory 'Подразделение, откуда брать цены ' (manufactory) = name(inPriceDepartmentManufactory(manufactory)) IN manufactoryGroup;
marginPublicCateringManufactory 'Наценка общепита по умолчанию для формирования цены в подразделении' (manufactory) = DATA DOUBLE (manufactory) IN manufactoryGroup;
rawDepartmentStore 'Подразделения, из которых можно получить сырье' = DATA BOOLEAN (manufactory, departmentStore);

inRawDepartmentStore(manufactory, departmentStore) = storeDepartmentStore(manufactory) == storeDepartmentStore(departmentStore);

//----------------------------------- Для товара и подразделения ------------------------------------------//
percentDiscountDepartmentItem 'Скидка на количество, % от розн.цены' = DATA DOUBLE (departmentStore, item) IN discountGroup;

additionPriceDepartmentStoreItem 'Торговая надбавка в рублях' = DATA DOUBLE (departmentStore, item) IN baseGroup;
boundCertificateDepartmentStoreItem 'Сертификат / удостоверение обязательны для товара?' = DATA BOOLEAN (departmentStore, item) IN baseGroup;
maxAllowedRetailPriceDepartmentStoreItem 'MAX допустимая розн.цена' = DATA INTEGER (departmentStore, item) IN retailGroup;
netWeightManufacturerDepartmentStoreItem 'Вес нетто продукта для производства' = DATA DOUBLE (departmentStore, item) IN manufactoryGroup;
statusCashDepartmentStoreItem 'Статус товара на кассах (ИД)' = DATA itemStatus (departmentStore, item) IN idGroup;
nameStatusCashDepartmentStoreItem 'Статус товара на кассах' = name(statusCashDepartmentStoreItem (departmentStore, item)) IN equipmentGroup;

dateManufactureDepartmentStoreItem 'Дата изготовления' = DATA DATE (departmentStore, item) IN baseGroup;
dateFitToDepartmentStoreItem 'Годен до' = DATA DATE (departmentStore, item) IN baseGroup;
fromDateDeliveryDepartmentStoreItem 'Дату [Годен до] рассчитывать от даты поставки?' = DATA BOOLEAN (departmentStore, item) IN baseGroup;
banSaleDepartmentStoreItem 'Запрет продаж товара в подразделении' = DATA BOOLEAN (departmentStore, item) IN equipmentGroup;
banMovementDepartmentStoreItem 'Запрет на внутреннее перемещение товара' = DATA BOOLEAN (departmentStore, item) IN baseGroup;
reserveDepartmentStoreItem 'Резерв по товару' = DATA DOUBLE (departmentStore, item) IN baseGroup;

topDepartmentStoreItem 'Топ' = DATA DOUBLE (departmentStore, item) IN orderGroup;
quantityRealizationDepartmentStoreItem 'Продаж в день' = DATA DOUBLE (departmentStore, item) IN orderGroup;
balanceDepartmentStoreItem 'Текущий остаток' = DATA DOUBLE (departmentStore, item) IN orderGroup;

//------------------------------------ Товар с историей -------------------------------------------------------------//
GROUP historyGroup 'Изменяемые характеристики' : baseGroup;

@metaCodeNameObjectDateProperty(isPortionBarItem, item, 'Порционный товар для бара', yesNo, barGroup);

@metaCodeNameObjectDateProperty(banDiscountItem, item, 'Запретить скидки по товару', yesNo, discountGroup);

@metaCodeObjectDateProperty(coefficientNetGrossItem, item, 'Сезонный коэффициент пересчета сырья из нетто в брутто', DOUBLE, manufactoryGroup);

@metaCodeObjectDateProperty(rateNaturalLossItem, item, 'Норма естественной убыли,%', DOUBLE, rateGroup);

//@metaCodeObjectDateProperty(NDSSupplierItem, item, 'НДС поставщика,%', DOUBLE, historyGroup);

@metaCodeObjectDateProperty(importerPriceItem, item, 'Цена импортёра', DOUBLE, retailGroup);


//---------------------------- Налоги ----------------------------------------//

GROUP suppliersNDSGroup 'НДС поставщика' : retailGroup;
GROUP retailNDSGroup 'НДС розничный' : retailGroup;

CLASS STATIC tax 'Налоги'
{
    taxNDS 'НДС',
    taxNP 'Налог с продаж'      // пусть будет для теста
};

nameTax 'Наименование налога' = DATA STRING[200] (tax) IN baseGroup;

CLASS range 'Шкала';
dataRange 'Шкала' = DATA INTEGER (range);

CLASS rate 'История изменений шкалы' : historyObject;
rangeRate 'Шкала ИД' = DATA range (rate) IN idGroup;
taxRange 'Налог ИД' = DATA tax (range) IN idGroup;
nameTaxRange 'Налог' (range) = name(taxRange(range)) IN baseGroup;

maxDataRangeTax(tax) = UNION OVERRIDE 0 IF tax IS tax, [GROUP MAX dataRange(range) BY taxRange(range)](tax);
nextDataRangeTax(tax) = maxDataRangeTax(tax) + 1;

addNewRange 'Добавить шкалу' = ACTION (tax) {
    ADDOBJ range;
    SET dataRange(r) IF r == addedObject() <- nextDataRangeTax(tax);
} TOOLBAR IMAGE 'add.png';

CLASS STATIC rangeType 'Для каких подразделений действует шкала'
{
    common 'Общий',
    units 'Для подразделений'
};
rangeTypeRange 'Тип ИД' = DATA rangeType (range) IN idGroup;
nameRangeTypeRange 'Тип действия' = name(rangeTypeRange(range)) IN baseGroup;
inRangeStoreDefault 'Вкл.' (range, store) = DATA BOOLEAN (range, store) IN baseGroup;
inRangeStore 'Вкл.' (range, store) = inRangeStoreDefault(range, store)  IF rangeTypeRange(range) == rangeType.units IN baseGroup;
isUnitsTypeRange(range) = rangeTypeRange(range) == rangeType.units;

rangeTypeRange(range) <- rangeType.common ON ASSIGN range IS range;     /// потом согласовать, какое значение должно быть по-умолчанию ///

dataRate 'Значение ставки' = DATA DOUBLE (rate) IN recognizeGroup;
dateFromRate 'Действует с' = DATA DATE (rate) IN baseGroup;
dateToRate 'Действует по' = DATA DATE (rate) IN baseGroup;

quantityRateRange 'Количество историй' (range) = GROUP SUM 1 IF rate BY rangeRate(rate);
CONSTRAINT range IS range AND NOT rangeTypeRange(range)  MESSAGE 'ошибка: Не выбран тип действия для шкалы';
CONSTRAINT rate IS rate AND NOT dataRate(rate)  MESSAGE 'ошибка: Не указано значение ставки';

inTaxNDSRangeStore(range, store) = inRangeStore(range, store) AND tax.taxNDS == taxRange(range);
rangeToTaxStore 'Шкала по налогу и складу' (tax, store) = GROUP UNIQUE range BY taxRange(range), store WHERE inTaxNDSRangeStore(range, store);

inRangeRate(range, rate) = rangeRate(rate) == range;
inTaxRange(tax, range) = taxRange(range) == tax;

actingRateDate(rate, date) = rate IF dateFromRate(rate) <= date AND NOT dateToRate(rate) < date AND date AS DATE;
actingRateRangeDate(range, date) = GROUP MAX actingRateDate(rate, date) BY rangeRate(rate), date;
dataActingRateRangeDate 'На дату' (range, date) = dataRate(actingRateRangeDate(range, date));
actingRateRange 'Действующая ИД' (range) = actingRateRangeDate(range, currentDate()) IN idGroup;
dataActingRateRange 'Действующая ставка' (range) = dataRate(actingRateRange(range)) IN baseGroup;
dateFromActingRateRange 'Действует с' (range) = dateFromRate(actingRateRange(range)) IN baseGroup;
dateToActingRateRange 'Действует по' (range) = dateToRate(actingRateRange(range)) IN baseGroup;
nameUserCreatedActingRateRange 'Создан пользователем' (range) = nameUserCreated(actingRateRange(range)) IN baseGroup;

quantityActingRateRangeDate(range, date) = GROUP SUM 1 IF actingRateDate(rate, date) BY rangeRate(rate), date;

quantityActingRateRange 'Количество действующих историй' (range) = quantityActingRateRangeDate(range, currentDate());
//CONSTRAINT quantityActingRateRange(range) > 1 MESSAGE 'ошибка: Одновременно не может быть несколько действующих ставок';

rateToRate (rt1, rt2) = UNION OVERRIDE dateFromRate(rt2) <= dateFromRate(rt1),
                                       dateToRate(rt1) < dateFromRate(rt2);


CONSTRAINT rangeRate(rt1) == rangeRate(rt2) AND NOT rateToRate (rt1, rt2)  MESSAGE 'ошибка: Одновременно не может быть несколько действующих ставок / или не задано: действует с';

suppliersTaxNDSItem(item) = tax.taxNDS IF item IS item IN idGroup;
nameSuppliersTaxNDSItem(item) = name(suppliersTaxNDSItem(item));

suppliersRangeItemDate 'Шкала' (item, date) = DATA range (item, DATE) IN idGroup;
dataSuppliersRangeItemDate 'Шкала' (item, date) = dataRange(suppliersRangeItemDate(item, date)) IN suppliersNDSGroup;

dateSuppliersRangeItemDate (item, date) = GROUP MAX dateIn AND suppliersRangeItemDate(item, dateIn) AND dateIn <= (date AS DATE) BY item, date;
dataActingSuppliersRangeItemDate 'НДС поставщика,%' (item, date) = dataActingRateRangeDate(suppliersRangeItemDate(item, date), date) IN suppliersNDSGroup;

suppliersRangeItemVal 'На дату' (item, date) = suppliersRangeItemDate(item, dateSuppliersRangeItemDate(item, date)) IN idGroup;
suppliersRangeItem 'Шкала' (item) = suppliersRangeItemDate(item, dateSuppliersRangeItemDate(item, currentDate())) IN idGroup;

taxSuppliersItem(item) = taxRange(suppliersRangeItem(item)) IN idGroup;
nameTaxSuppliersItem 'Налог' (item) = nameTaxRange(suppliersRangeItem(item)) IN baseGroup;

dataSuppliersRangeItem 'Шкала НДС' (item) = dataRange(suppliersRangeItem(item)) IN suppliersNDSGroup;
dataActingRateSuppliersRangeItem 'НДС поставщика,%' (item) = dataActingRateRange(suppliersRangeItem(item)) IN suppliersNDSGroup;

CONSTRAINT taxRange(suppliersRangeItemDate(item, date)) != tax.taxNDS CHECKED BY suppliersRangeItemDate MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

FORM addSuppliersRangeItem 'Добавить Шкалу'
    OBJECTS i=item FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES nameAttributeItem(i) READONLY, OBJVALUE(d), dataSuppliersRangeItemDate(i, d), dataActingSuppliersRangeItemDate(i, d)
;

DESIGN addSuppliersRangeItem FROM DEFAULT {
    PROPERTY(nameAttributeItem(i)) { focusable = FALSE; }
};

showFormAddSuppliersRangeItem 'Добавить' (item) = ACTION FORM addSuppliersRangeItem OBJECTS i MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

FORM suppliersRangeItem 'Добавить Шкалу'
    OBJECTS i=item FIXED PANEL, d=DATE
    PROPERTIES       nameAttributeItem(i) READONLY, showFormAddSuppliersRangeItem(i) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY
    PROPERTIES(i, d) dataSuppliersRangeItemDate, dataActingSuppliersRangeItemDate
    FILTERS suppliersRangeItemDate(i, d)
;

DESIGN suppliersRangeItem FROM DEFAULT {
    PROPERTY(nameAttributeItem(i)) { focusable = FALSE; }
};

showFormSuppliersRangeItem 'Шкала' (item) = ACTION FORM suppliersRangeItem OBJECTS i MODAL SHORTCUT dataSuppliersRangeItem DEFAULT;

retailRangeItemDate 'Шкала' (item, date) = DATA range (item, DATE) IN idGroup;
dataRetailRangeItemDate 'Шкала' (item, date) = dataRange(retailRangeItemDate(item, date)) IN retailNDSGroup;

dateRetailRangeItemDate (item, date) = GROUP MAX dateIn AND retailRangeItemDate(item, dateIn) AND dateIn <= (date AS DATE) BY item, date;
dataActingRetailRangeItemDate 'Розничный НДС' (item, date) = dataActingRateRangeDate(retailRangeItemDate(item, date), date) IN retailNDSGroup;

retailRangeItemVal 'На дату' (item, date) = retailRangeItemDate(item, dateRetailRangeItemDate(item, date)) IN idGroup;
retailRangeItem 'Шкала' (item) = retailRangeItemDate(item, dateRetailRangeItemDate(item, currentDate())) IN idGroup;

taxRetailItem(item) = taxRange(retailRangeItem(item)) IN idGroup;
nameTaxRetailItem 'Налог' (item) = nameTaxRange(retailRangeItem(item)) IN baseGroup;

dataRetailRangeItem 'Шкала НДС' (item) = dataRange(retailRangeItem(item)) IN retailNDSGroup;
dataActingRateRetailRangeItem 'Розничный НДС' (item) = dataActingRateRange(retailRangeItem(item)) IN retailNDSGroup;

CONSTRAINT taxRange(retailRangeItem(item)) != tax.taxNDS CHECKED BY retailRangeItem MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

FORM addRetailRangeItem 'Добавить Шкалу'
    OBJECTS i=item FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES nameAttributeItem(i) READONLY, OBJVALUE(d), dataRetailRangeItemDate(i, d), dataActingRetailRangeItemDate(i, d)
;

DESIGN addRetailRangeItem FROM DEFAULT {
    PROPERTY(nameAttributeItem(i)) { focusable = FALSE; }
};

showFormAddRetailRangeItem 'Добавить' (item) = ACTION FORM addRetailRangeItem OBJECTS i MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

FORM retailRangeItem 'Добавить Шкалу'
    OBJECTS i=item FIXED PANEL, d=DATE
    PROPERTIES       nameAttributeItem(i) READONLY, showFormAddRetailRangeItem(i) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY
    PROPERTIES(i, d) dataRetailRangeItemDate, dataActingRetailRangeItemDate
    FILTERS retailRangeItemDate(i, d)
;
DESIGN retailRangeItem FROM DEFAULT {
    PROPERTY(nameAttributeItem(i)) { focusable = FALSE; }
};

showFormRetailRangeItem 'Шкала' (item) = ACTION FORM retailRangeItem OBJECTS i MODAL SHORTCUT dataRetailRangeItem DEFAULT;

overrideRateRangeItemVal 'НДС (ИД)' (item, date) = UNION OVERRIDE retailRangeItemVal(item, date), suppliersRangeItemVal(item, date) IN idGroup;

overrideRateRangeItem 'НДС (ИД)' (item) = UNION OVERRIDE retailRangeItem(item), suppliersRangeItem(item) IN idGroup; // на текущую дату

dataOverrideRateRangeItem 'Значение НДС' (item) = dataActingRateRange(overrideRateRangeItem(item)) IN retailGroup;
toShowDataRangeItem(item) = TRUE IF item IS item AND dataActingRateSuppliersRangeItem(item); // dataSuppliersRateRangeItem(item);

inCompanyStore (company, store) = companyStore(store) == company;
isInCompanyStore (company, store)  = UNION OVERRIDE  companyStore(store) == company, store IS store AND NOT company;


dataActingRateRangeToRange 'Шкала по значению' (doubleValue) = GROUP UNIQUE range BY dataActingRateRange (range);

toShowAddNDSValue(tax) = tax == tax.taxNDS;
addNDSValue 'Добавить значение НДС' = ACTION (tax, number, value) {
    ADDOBJ range;
    FOR rn == addedObject() DO {
       SET rangeTypeRange(rn) <- rangeType.common;
       SET taxRange(rn) <- tax AS tax;
       SET dataRange(rn) <- number AS INTEGER;
       ADDOBJ rate;
       FOR ra == addedObject() DO {
          SET rangeRate(ra) <- rn AS range;
          SET dataRate(ra) <- value AS DOUBLE;
          SET dateFromRate(ra) <- 2001_01_01;
       };
    };
};

fillNDSDefaultValues 'Заполнить значения НДС по умолчанию' = [ACTION (tax) {
    EXEC addNDSValue(tax AS tax, 1, 0);
    EXEC addNDSValue(tax AS tax, 2, 9.09);
    EXEC addNDSValue(tax AS tax, 3, 16.67);
    EXEC addNDSValue(tax AS tax, 4, 10);
    EXEC addNDSValue(tax AS tax, 5, 20);
    EXEC addNDSValue(tax AS tax, 6, 24);
}](tax) AND tax==tax.taxNDS;

FORM tax 'Налог'
    OBJECTS           t=tax FIXED PANEL, ra=range
    PROPERTIES(t)     name, nameTax, addNewRange TODRAW ra

    PROPERTIES(ra)    dataRange, nameRangeTypeRange, delete
    PROPERTIES(ra)    READONLY dataActingRateRange, dateFromActingRateRange, dateToActingRateRange

    OBJECTS           rt=rate
    PROPERTIES(rt)    dataRate, dateFromRate, dateToRate, timeCreated, nameUserCreated, ADDOBJ, delete

    TREE treeCompanyStore a=STRING[3], co=company

    PROPERTIES READONLY OBJVALUE(a), name(co)

    OBJECTS           s=store
    PROPERTIES(s)     name, addressStore

    PROPERTIES(ra, s) inRangeStore SHOWIF isUnitsTypeRange(ra)

    PROPERTIES(t)     fillNDSDefaultValues SHOWIF toShowAddNDSValue(t) TODRAW t FORCE PANEL

    FILTERS           stringEqualsAll(a),
                      inRangeRate(ra, rt),
                      inTaxRange(t, ra),
                      isInCompanyStore(co, s)

    FILTERGROUP filters6
        FILTER 'Показывать магазины только для данного налога' 'F10' inRangeStore(ra, s)

    EDIT tax OBJECT t
;

DESIGN tax FROM DEFAULT {
    main {
       NEW secondCase BEFORE functions.box {
            ADD s.box {
                fillHorizontal = 3.8;
            };
            ADD treeCompanyStore.box {
                title = 'компании';
                fillHorizontal = 1.2;
            };
            POSITION treeCompanyStore.box TO THE LEFT s.box;
       }
       NEW firstCase BEFORE secondCase {
            ADD ra.box {
                fillHorizontal = 2.5;
            };
            ADD rt.box {
                fillHorizontal = 2.5;
            };
            POSITION ra.box TO THE LEFT rt.box;
       }
    }
}

FORM taxes 'Налоги'
    OBJECTS           t=tax
    PROPERTIES(t)     READONLY name, nameTax
    PROPERTIES(t)     EDITFORM, delete

    OBJECTS           ra=range
    PROPERTIES(ra)    READONLY dataRange, dataActingRateRange, dateFromActingRateRange, dateToActingRateRange, nameUserCreatedActingRateRange, nameRangeTypeRange, quantityRateRange

    OBJECTS           s=store
    PROPERTIES(s)     READONLY name, addressStore

    PROPERTIES(ra, s) READONLY inRangeStore

    FILTERS  inTaxRange(t, ra),
             inRangeStore(ra, s)
;


//------------------------------------ Товар для подразделения с историей -------------------------------------------//
//maxReserveItemDepartmentDate 'Максимально допустимый товарный запас в днях' = DATA DOUBLE (item, departmentStore, DATE) IN baseGroup;
//minReserveItemDepartmentDate 'Минимально допустимый товарный запас в днях' = DATA DOUBLE (item, departmentStore, DATE) IN baseGroup;
//banRevaluationItemDepartmentDate 'Запрет на переоценку' = DATA BOOLEAN (item, departmentStore, DATE) IN baseGroup;
//inActionItemDepartmentDate 'Товар акции' = DATA BOOLEAN (item, departmentStore, DATE) IN baseGroup;
//marginProductionItemDepartmentDate 'Наценка производства' = DATA DOUBLE (item, departmentStore, DATE) IN baseGroup;
//discountItemDepartmentDate 'Скидка для товара' = DATA STRING[100] (item, departmentStore, DATE) IN baseGroup;

TABLE itemDepartmentStoreDate (item, departmentStore, DATE);

@metaCodeDoubleObjectDateProperty(maxReserveItemDepartment, item, departmentStore, 'Максимально допустимый товарный запас в днях', DOUBLE, orderGroup);
@metaCodeDoubleObjectDateProperty(minReserveItemDepartment, item, departmentStore, 'Минимально допустимый товарный запас в днях', DOUBLE, orderGroup);

@metaCodeNameDoubleObjectDateProperty(banRevaluationItemDepartment, item, departmentStore, 'Запрет на переоценку', yesNo, retailGroup);

@metaCodeNameDoubleObjectDateProperty(inActionItemDepartment, item, departmentStore, 'Товар акции', yesNo, discountGroup);

@metaCodeDoubleObjectDateProperty(marginProductionItemDepartment, item, departmentStore, 'Наценка производства', DOUBLE, retailGroup);

@metaCodeDoubleObjectDateProperty(retailPriceItemDepartment, item, departmentStore, 'Розничная цена', DOUBLE, retailGroup);

@metaCodeDoubleObjectDateProperty(accountPriceItemDepartment, item, departmentStore, 'Учётная цена', DOUBLE, retailGroup);

@metaCodeDoubleObjectDateProperty(discountItemDepartment, item, departmentStore, 'Скидка для товара', STRING[100], discountGroup);

TABLE supplierItemDepartmentStoreDate (supplier, item, departmentStore, DATE);

@metaCodeNameTripleObjectDateProperty(isSupplierItemDepartment, supplier, item, departmentStore, 'Поставляется', yesNo, orderGroup);

@metaCodeTripleObjectDateProperty(priceSupplierItemDepartment, supplier, item, departmentStore, 'Цена поставщика', DOUBLE, retailGroup);

@metaCodeDoubleObjectDateProperty(markupItemDepartment, item, departmentStore, 'Торговая надбавка', DOUBLE, retailGroup);

@metaCodeNameTripleObjectDateProperty(banSupplierItemDepartment, supplier, item, departmentStore, 'Запретить закупку', yesNo, orderGroup);

// Посуда
@metaCodeObjectDateProperty(priceWare, ware, 'Цена', DOUBLE, baseGroup);

taxNDSWare(ware) = tax.taxNDS IF ware IS ware IN idGroup;
nameTaxNDSWare(ware) = name(taxNDSWare(ware));

rangeWareDate 'Шкала' (ware, date) = DATA range (ware, DATE) IN idGroup;
dataRangeWareDate 'Шкала' (ware, date) = dataRange(rangeWareDate(ware, date));

dateRangeWareDate (ware, date) = GROUP MAX dateIn AND rangeWareDate(ware, dateIn) AND dateIn <= (date AS DATE) BY ware, date;
dataActingRateRangeWareDate 'НДС,%' (ware, date) = dataActingRateRangeDate(rangeWareDate(ware, date), dateRangeWareDate (ware, date));

rangeWareVal 'На дату' (ware, date) = rangeWareDate(ware, dateRangeWareDate(ware, date)) IN baseGroup;
rangeWare 'Шкала' (ware) = rangeWareDate(ware, dateRangeWareDate(ware, currentDate())) IN baseGroup;

taxRangeWare(ware) = taxRange(rangeWare(ware)) IN idGroup;
nameTaxWare 'Налог' (ware) = nameTaxRange(rangeWare(ware)) IN baseGroup;

dataRangeWare 'Шкала НДС' (ware) = dataRange(rangeWare(ware)) IN baseGroup;
dataActingRateRangeWare 'НДС,%' (ware) = dataActingRateRange(rangeWare(ware)) IN baseGroup;

CONSTRAINT taxRange(rangeWareDate(ware, date)) != tax.taxNDS CHECKED MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';


FORM addRangeWare 'Добавить Шкалу'
    OBJECTS w=ware FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(w) READONLY, OBJVALUE(d), dataRangeWareDate(w, d), dataActingRateRangeWareDate(w, d)
;

DESIGN addRangeWare FROM DEFAULT {
    PROPERTY(name(w)) { focusable = FALSE; }
};

showFormAddRangeWare 'Добавить' (ware) = ACTION FORM addRangeWare OBJECTS w MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

FORM rangeWare 'Добавить Шкалу'
OBJECTS w=ware FIXED PANEL, d=DATE
PROPERTIES name(w) READONLY, showFormAddRangeWare(w) TODRAW d, OBJVALUE(d) READONLY,
           dataRangeWareDate(w, d), dataActingRateRangeWareDate(w, d)
FILTERS rangeWareDate(w, d);

DESIGN rangeWare FROM DEFAULT {
PROPERTY(name(w)) { focusable = FALSE; }
};

showFormRangeWare 'Шкала' (ware) = ACTION FORM rangeWare OBJECTS w MODAL SHORTCUT dataRangeWare DEFAULT;

FORM ware 'Посуда'
OBJECTS w=ware FIXED PANEL
PROPERTIES(w) name, priceWare, showFormpriceWare
PROPERTIES(w) dataRangeWare, dataActingRateRangeWare, showFormRangeWare
EDIT ware OBJECT w;

FORM wares 'Посуда'
OBJECTS w=ware
PROPERTIES(w) READONLY barcodeBarcodeSku, name, priceWare, showFormpriceWare, dataRangeWare, dataActingRateRangeWare
PROPERTIES(w)          ADDFORM, EDITFORM, delete
DIALOG ware OBJECT w;

FORM item 'Товар'

    OBJECTS i=item FIXED PANEL

    PROPERTIES(i) nameAttributeItem, nameCashAttributeItem, nameScalesAttributeItem, canonicalNameItemGroupSku, barcodeBarcodeSku READONLY,

                  // Основные данные
                  captionItem SHOWIF toShowCaption(i), nameBrandItem SHOWIF toShowBrand(i), nameTypeItemItem SHOWIF toShowType(i),
                  nameSortItem SHOWIF toShowSort(i), shortNamePackItem SHOWIF toShowPack(i), shortNameSizeItem SHOWIF toShowSize(i),
                  shortNameSpecialtyItem SHOWIF toShowSpecialty(i), nameColorItem SHOWIF toShowColor(i),
                  nameTasteItem SHOWIF toShowTaste(i), hallmarkItem SHOWIF toShowHallmark(i), articleItem SHOWIF toShowArticle(i),
                  nameCoolingDegreeItem SHOWIF toShowCoolingDegree(i), nameFormItemItem SHOWIF toShowFormItem(i),

                  shortNameUnitOfMeasureItem SHOWIF toShowUnitOfMeasure(i), nameCountryItem SHOWIF toShowCountry(i), isWeightItem,

                  isManufacturedItem,
                  compositionMenuItem SHOWIF isManufacturedItem(i), grossWeightItem SHOWIF isManufacturedItem(i),
                  grossWeightPackItem SHOWIF isManufacturedItem(i), isCrudeItem SHOWIF isManufacturedItem(i),
                  nameGroupProductItem SHOWIF isManufacturedItem(i), standartItem SHOWIF isManufacturedItem(i),
                  normOutItem SHOWIF isManufacturedItem(i), groupMenuItem SHOWIF isManufacturedItem(i),
                  isCutedItem SHOWIF isManufacturedItem(i), coefficientNetGrossItem SHOWIF isManufacturedItem(i), showFormcoefficientNetGrossItem,

                  nameRateWasteItem, percentRateWasteItem, rateNaturalLossItem, showFormrateNaturalLossItem,

                  volumeItem, lengthItem, widthItem, heightItem, lengthPackItem, widthPackItem, heightPackItem,

                  nameisPortionBarItem, showFormNameisPortionBarItem,

                  oldPriceItem, nameTagItem, multiplierItem,

                  // Дополнительные
                  isWeightedItem, passScalesItem, isMarkItem, isLoafCutItem,
                  compositionScalesItem, storageTemperatureItem, banSailItem,

                  importerPriceItem, showFormimporterPriceItem,
                  dataSuppliersRangeItem, dataActingRateSuppliersRangeItem, showFormSuppliersRangeItem,
                  dataRetailRangeItem, dataActingRateRetailRangeItem, showFormRetailRangeItem,
                  percentWholesaleMarkItem, minTradeAllowanceItem, maxTradeAllowanceItem, minAllowedRetailPriceItem,
                  isFixPriceItem, banMarkdownItem, nameWareItem SHOWIF toShowWare(i),

                  quantityDiscountItem, fixPriceItem, namebanDiscountItem, showFormNamebanDiscountItem,

                  percentFatItem, percentAlcoholItem, nutritionalValueItem, energyItem,
                  fatsItem, carbohydratesItem, proteinsItem, isContainGMOItem,

                  controlExpiryItem, daysExpiryItem, daysExpiryPackItem, hoursExpiryPackItem,

                  netWeightItem, quantityPackItem, minQuantityOrderItem, minReserveItem, nameNumberInPackItem,

                  bonusReturnItem, nameReturnItem, hintItem, bonusItem,

                  imageItem, loadImageItem

    OBJECTS b=barcode
    PROPERTIES(b)       barcodeEx, dateBarcode, titleScalesBarcode, titleCashBarcode, shortNameUnitOfMeasureBarcode,
                        amountBarcode, removeBarcode, commentRemoveBarcode, actionBarcode
    PROPERTIES(i)       generateBarcodeSku TODRAW b FORCE PANEL
    PROPERTIES(b)       ADDOBJ, delete
    PROPERTIES(i, b)    primarySkuBarcode
    FILTERS inSkuBarcode(i, b)

    // Управленческие параметры
    TREE treeStore a=STRING[3], t=tradingNetwork, st=storeType, s=store
    PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS stringEqualsAll(a), inStoreTypeTradingNetwork (st, t), inStoreTypeStore (st, s)

    OBJECTS dt=DATE FIXED PANEL, sp=supplier FIXED PANEL, d=departmentStore
    PROPERTIES (d) name
    FILTERS inTradingNetworkStoreTypeStoreDepartment(t, st, s, d)

    PROPERTIES (dt) OBJVALUE HIGHLIGHTIF dateDiffersCurrent(dt)
    PROPERTIES (sp) SELECTOR name
    PROPERTIES      nameisSupplierItemDepartmentOver(sp, i, d, dt) HIGHLIGHTIF nameisSupplierItemDepartmentDate(sp, i, d, dt), showFormNameisSupplierItemDepartmentOver(sp, i, d),
                    namebanSupplierItemDepartmentOver(sp, i, d, dt) HIGHLIGHTIF namebanSupplierItemDepartmentDate(sp, i, d, dt), showFormNamebanSupplierItemDepartmentOver(sp, i, d),
                    priceSupplierItemDepartmentOver(sp, i, d, dt) HIGHLIGHTIF priceSupplierItemDepartmentDate(sp, i, d, dt), showFormpriceSupplierItemDepartmentOver(sp, i, d),
                    markupItemDepartmentOver(i, d, dt) HIGHLIGHTIF markupItemDepartmentDate(i, d, dt), showFormmarkupItemDepartmentOver(i, d)
    PROPERTIES      retailPriceItemDepartmentOver(i, d, dt) HIGHLIGHTIF retailPriceItemDepartmentDate(i, d, dt), showFormretailPriceItemDepartmentOver(i, d),
                    maxReserveItemDepartmentOver(i, d, dt) HIGHLIGHTIF maxReserveItemDepartmentDate(i, d, dt), showFormmaxReserveItemDepartmentOver(i, d),
                    minReserveItemDepartmentOver(i, d, dt) HIGHLIGHTIF minReserveItemDepartmentDate(i, d, dt), showFormminReserveItemDepartmentOver(i, d),
                    namebanRevaluationItemDepartmentOver(i, d, dt) HIGHLIGHTIF namebanRevaluationItemDepartmentDate(i, d, dt), showFormNamebanRevaluationItemDepartmentOver(i, d),
                    nameinActionItemDepartmentOver(i, d, dt) HIGHLIGHTIF nameinActionItemDepartmentDate(i, d, dt), showFormNameinActionItemDepartmentOver(i, d),
                    marginProductionItemDepartmentOver(i, d, dt) HIGHLIGHTIF marginProductionItemDepartmentDate(i, d, dt), showFormmarginProductionItemDepartmentOver(i, d),
                    discountItemDepartmentOver(i, d, dt) HIGHLIGHTIF discountItemDepartmentDate(i, d, dt), showFormdiscountItemDepartmentOver(i, d)

    EDIT item OBJECT i
;

DESIGN item FROM DEFAULT {
    main {
        i.panel {
            NEW itemPanelColumn1 {
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(nameAttributeItem);
                ADD PROPERTY(nameCashAttributeItem);
                ADD PROPERTY(nameScalesAttributeItem);
            }
            NEW itemPanelColumn2 {
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(canonicalNameItemGroupSku);
                ADD PROPERTY(barcodeBarcodeSku);
            }
        }
        NEW item.box BEFORE b.box {
            tabbedPane = TRUE;
            NEW primary.box {
                title = 'Основные данные';
                fillVertical = 1.0;
                fillHorizontal = 1.0;
                NEW containerLeft {
                    childConstraints = TO THE BOTTOM;
                    ADD i.descriptionGroup {
                        fillVertical = 0.4;
                        NEW small.box {
                            ADD PROPERTY(shortNamePackItem(i));
                            ADD PROPERTY(shortNameSizeItem(i));
                            ADD PROPERTY(shortNameSpecialtyItem(i));
                            POSITION PROPERTY(shortNamePackItem(i)) TO THE LEFT PROPERTY(shortNameSizeItem(i));
                            POSITION PROPERTY(shortNameSizeItem(i)) TO THE LEFT PROPERTY(shortNameSpecialtyItem(i));
                        };
                    }
                    ADD i.manufactoryGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                }

                NEW containerRight {
                    childConstraints = TO THE BOTTOM;
                    ADD i.headGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.rateGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.sizeGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.barGroup;
                    ADD i.tagGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                }
                POSITION containerLeft TO THE LEFT containerRight;
                ADD b.box;
            }

            NEW additional.box {

                title = 'Дополнительные';
                fillVertical = 1.0;
                fillHorizontal = 1.0;

                NEW containerALeft {
                    childConstraints = TO THE BOTTOM;
                    ADD i.equipmentGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.retailGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                };

                NEW containerARight {
                    childConstraints = TO THE BOTTOM;
                    ADD i.substanceGroup{
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.expiryGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.orderGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.documentGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                };

                POSITION containerALeft TO THE LEFT containerARight;
            }

            ADD d.box {

                title = 'Управленческие параметры';

                fillVertical = 1.0;
                fillHorizontal = 1.0;
                ADD dt.box BEFORE d.grid.box;
                ADD sp.box BEFORE d.grid.box;
                POSITION dt.box TO THE LEFT sp.box;
                ADD treeStore.box BEFORE d.grid.box;
                POSITION treeStore.box TO THE LEFT d.grid.box;
                POSITION d.grid.box TO THE LEFT d.panel;
                d.grid.box {
                    fillHorizontal = 3;
                };
            }

            NEW itemImage {
                title = 'Изображение';
                ADD PROPERTY(imageItem);
                PROPERTY(imageItem) {
                    caption = '';
                    fillVertical = 1.0;
                    fillHorizontal = 1.0;
                }

                ADD PROPERTY(loadImageItem);
            }
       }
    }
}

inItemGroupSku(itemGroup, sku) = itemGroupSku(sku) == itemGroup;

FORM items 'Товары'
    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS i=item
    PROPERTIES barcodeBarcodeSku(i) READONLY, nameAttributeItemGroupItem(g, i) READONLY, shortNameUnitOfMeasureItem(i) READONLY
    PROPERTIES(i) ADDFORM, EDITFORM, delete
    FILTERS nameAttributeItemGroupItem(g, i)
    ORDER BY nameAttributeItemGroupItem

    DIALOG item OBJECT i
;

DESIGN items FROM DEFAULT {
    POSITION treeGroup.box TO THE LEFT i.box;

    treeGroup.tree {
        fillHorizontal = 0.4;
    }

    i.grid {
        defaultComponent = TRUE;
    }
}



FORM barcodeForm 'Товары по Ш-К'
    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS b=barcode
    PROPERTIES(b) READONLY barcodeEx, nameSkuBarcode, shortNameUnitOfMeasureBarcode
    PROPERTIES(b) ADDFORM, EDITFORM, delete
    FILTERS hasParentOrNullItemGroupBarcode(g, b)
    ORDER BY nameSkuBarcode

    DIALOG barcode OBJECT b
;

DESIGN barcodeForm FROM DEFAULT {
    POSITION treeGroup.box TO THE LEFT b.box;

    treeGroup.tree {
        fillHorizontal = 0.4;
    }

    b.grid {
        defaultComponent = TRUE;
    }
}


FORM itemGroup 'Товарная группа'
    OBJECTS g=itemGroup FIXED PANEL
    PROPERTIES(g)  name, nameParentItemGroup, maxTurnoverItemGroup, minTurnoverItemGroup, namePieceNumeratorItemGroup, nameWeightNumeratorItemGroup,
                   showCaptionItemGroup, showBrandItemGroup, showTypeItemGroup, showUnitOfMeasureItemGroup, showSortItemGroup, showPackItemGroup,
                   showSpecialtyItemGroup, showSizeItemGroup, showColorItemGroup, showTasteItemGroup, showHallmarkItemGroup,
                   showArticleItemGroup, showCoolingDegreeItemGroup, showCountryItemGroup, showFormItemItemGroup,
                   showNumberInPackItemGroup, showRateWasteItemGroup, showWareItemGroup
    EDIT itemGroup OBJECT g
;

addItemGroup 'Добавить' = ACTION (itemGroup) NEWSESSION {
    ADDOBJ itemGroup;
    FOR g == addedObject() DO {
        SET parentItemGroup(g) <- itemGroup AS itemGroup;
        FORM itemGroup OBJECTS g=addedObject() MODAL;
        IF formResult() == formResult.ok THEN
            EXEC apply();
    };
} TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

FORM itemGroups 'Товарные группы'
    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g), extSID(g)
    PROPERTIES(g)       addItemGroup, EDITFORM
    ORDER BY name

    OBJECTS cg=itemGroup
    PROPERTIES(cg)   canonicalNameItemGroup, maxTurnoverItemGroup, minTurnoverItemGroup, namePieceNumeratorItemGroup, nameWeightNumeratorItemGroup,
                     showCaptionItemGroup, showBrandItemGroup, showTypeItemGroup, showUnitOfMeasureItemGroup, showSortItemGroup, showPackItemGroup,
                     showSpecialtyItemGroup, showSizeItemGroup, showColorItemGroup, showTasteItemGroup, showHallmarkItemGroup,
                     showCoolingDegreeItemGroup, showCountryItemGroup, showFormItemItemGroup, showNumberInPackItemGroup,
                     showRateWasteItemGroup, showWareItemGroup, delete

    ORDER BY canonicalNameItemGroup

    FILTERGROUP filters
        FILTER 'Все листья' 'F10' hasParentAndLeafOrNullItemGroup(cg, g) DEFAULT
        FILTER 'Всех потомков' 'F9' hasParentOrNullItemGroup(cg, g)
        FILTER 'Только непосредственных потомков' 'F8' inParentItemGroupItemGroup(cg, g)
;

DESIGN itemGroups FROM DEFAULT {

    POSITION treeGroups.box TO THE LEFT cg.box;

    treeGroups.tree {
        fillHorizontal = 0.5;
    }

    PROPERTY(extSID) {
        maximumCharWidth = 7;
    }
}

FORM itemGroupDialog 'Товарные группы'
    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES(g) READONLY name, extSID
    PROPERTIES(g) addItemGroup, EDITFORM
    ORDER BY name

    DIALOG itemGroup OBJECT g
;


// ----------------------------------- Ассортимент -------------------------------------------------------- //

CLASS assortment 'Ассортимент' : named;
itemAssortment 'Товар включен в ассортимент' = DATA BOOLEAN (assortment, item);
infoAssortment 'Описание' = DATA STRING[100] (assortment) IN baseGroup;

FORM assortment 'Ассортимент'
OBJECTS a=assortment FIXED PANEL, i=item
PROPERTIES(a) name, infoAssortment
PROPERTIES(a, i) itemAssortment
PROPERTIES(i) nameAttributeItem
PROPERTIES(i) ADDSESSIONFORM, EDITSESSIONFORM, delete
FILTERGROUP assortment
    FILTER 'Только товары ассортимента' 'F10' itemAssortment(a, i) DEFAULT
EDIT assortment OBJECT a;

FORM assortments 'Ассортименты'
OBJECTS a=assortment, i=item
PROPERTIES(a) READONLY name, infoAssortment
PROPERTIES(a) ADDFORM, EDITFORM, delete
PROPERTIES(i) READONLY nameAttributeItem
FILTERS itemAssortment(a, i);

// ----------------------------------- Комиссии ---------------------------------------------------------- //

CLASS ABSTRACT committee 'Комиссия' : named;
CLASS revaluationCommittee 'Комиссия переоценки' : committee;
CLASS inventoryCommittee 'Комиссия для инвентаризации' : committee;

chairmanCommittee 'Председатель комиссии (ИД)' = DATA employee (committee);
commonNameChairmanCommittee 'Председатель комиссии' (committee) = commonName(chairmanCommittee(committee)) IN baseGroup;
departmentStoreCommittee 'Отдел комиссии (ИД)' = DATA departmentStore (committee);
nameDepartmentStoreCommittee 'Отдел комиссии' (committee) = commonName(departmentStoreCommittee(committee)) IN baseGroup;
CONSTRAINT chairmanCommittee(committee) IF committee IS revaluationCommittee AND NOT departmentStoreEmployee(departmentStoreCommittee(committee), chairmanCommittee(committee)) CHECKED MESSAGE 'Отдел комиссии должен соответствовать отделу председателя комиссии';
CONSTRAINT departmentStoreCommittee(revaluationCommitteeDepartmentStore(departmentStore)) != departmentStore CHECKED MESSAGE 'Отдел комиссии должен соответствовать текущему отделу';
CONSTRAINT committee IS committee AND NOT chairmanCommittee(committee) MESSAGE 'Ошибка: не задан председатель комиссии';

inCommitteeEmployee 'Является членом комиссии' (committee, employee) = DATA BOOLEAN (committee, employee);

inDepartmentStoreEmployeeCommittee(employee, committee) = UNION EXCLUSIVE
    departmentStoreEmployee(departmentStoreCommittee(committee), employee) AND committee IS revaluationCommittee,
    employee IS employee AND committee IS inventoryCommittee;

FORM committee 'Комиссия'
    OBJECTS c=committee FIXED PANEL
    PROPERTIES(c)    name, nameDepartmentStoreCommittee, commonNameChairmanCommittee

    OBJECTS e=employee
    PROPERTIES(e)    READONLY name, userFirstName, userLastName
    PROPERTIES(e)    ADDSESSIONFORM, EDITSESSIONFORM, delete

    PROPERTIES(c, e) inCommitteeEmployee

    FILTERS inDepartmentStoreEmployeeCommittee(e, c)
    FILTERGROUP filters6
        FILTER 'Показывать только членов комиссии' 'F10' inCommitteeEmployee(c, e)

    EDIT committee OBJECT c
    EDIT inventoryCommittee OBJECT c

;

FORM employeesCommittees 'Комиссии'
    OBJECTS c=committee
    PROPERTIES(c) READONLY name, nameDepartmentStoreCommittee, commonNameChairmanCommittee
    PROPERTIES(c) ADDFORM, EDITFORM, delete

    OBJECTS e=employee
    PROPERTIES(e) READONLY userFirstName, userLastName

    FILTERS inCommitteeEmployee(c, e)
;

// ----------------------------------- Банк ------------------------------------------- //

GROUP banksGroup 'Информация о банке' : baseGroup;

CLASS bank 'Банк' : named, externalObject;
TABLE bank (bank);

MFOBank 'Код МФО' = DATA STRING[9] (bank) IN banksGroup;
departmentBank 'Отдел банка' = DATA STRING[100] (bank) IN banksGroup;
CBUBank 'ЦБУ' = DATA STRING[3] (bank) IN banksGroup;
infoBank 'Дополнительные сведения' = DATA STRING[100] (bank) IN banksGroup;

@metaCodeObjectDateProperty(addressBank, bank, 'Адрес банка', STRING[150], banksGroup);

FORM bank 'Банк'
OBJECTS b=bank FIXED PANEL
PROPERTIES(b)  name, addressBank, showFormaddressBank, MFOBank, departmentBank, CBUBank, infoBank
EDIT bank OBJECT b;

FORM banks 'Банки'
OBJECTS b=bank
PROPERTIES(b) READONLY name, addressBank, MFOBank, departmentBank, CBUBank, infoBank
PROPERTIES(b) ADDFORM, EDITFORM, delete;

// ----------------------------------- Расчетный счет ------------------------------------------ //

GROUP accountGroup 'Банковская информация' : baseGroup;

CLASS account 'Расчетный счет';
TABLE account (account);

bankAccount 'Банк (ИД)' = DATA bank (account) IN idGroup;

dataAccount 'Номер расчетного счета'  = DATA STRING[13] (account) IN accountGroup FIXEDCHARWIDTH 13;
dataAccountToAccount 'Расчетный счет по номеру' (string) = GROUP UNIQUE account BY dataAccount (account) WHERE account IS account;
nameBankAccount 'Наименование банка' (account) = name(bankAccount(account)) IN accountGroup;
addressBankAccount 'Адрес банка' (account) = addressBank(bankAccount(account)) IN accountGroup;
MFOBankAccount 'Код МФО банка' (account) = MFOBank(bankAccount(account)) IN accountGroup;
departmentBankAccount 'Отдел банка' (account) = departmentBank(bankAccount(account)) IN accountGroup;
CBUBankAccount 'ЦБУ банка' (account) = CBUBank(bankAccount(account)) IN accountGroup;
noteAccount 'Примечание'  = DATA STRING[50] (account) IN accountGroup;

// ----------------------------------- Форма собственности ------------------------------------------ //
CLASS ownership 'Форма собственности' : named;
shortNameOwnership 'Cокращенное название' = DATA STRING[10] (ownership) IN baseGroup FIXEDCHARWIDTH 6;
shortNameToOwnership (string) = GROUP UNIQUE ownership BY shortNameOwnership (ownership) WHERE ownership IS ownership;

FORM ownership 'Форма собственности'
OBJECTS o=ownership FIXED PANEL
PROPERTIES(o) name, shortNameOwnership;

// ----------------------------------- Лицензия ------------------------------------------ //
GROUP licensGroup 'Лицензиионная информация' : baseGroup;
CLASS license 'Лицензия' ;

dataLicense 'Номер лицензии' = DATA STRING[100] (license) IN licensGroup;
dateFromLicense 'Действует с ' = DATA DATE (license) IN licensGroup;
dateToLicense 'Действует по ' = DATA DATE (license) IN licensGroup;

//tabaccoLicense 'Табачная' = DATA BOOLEAN  (license) IN licensGroup;

// ----------------------------------- Юридическое лицо ------------------------------------------ //

GROUP lawGroup 'Юридическая информация' : publicGroup;
GROUP contactGroup 'Контактная информация' : publicGroup;
GROUP docGroup 'Для договора' : publicGroup;

CLASS ABSTRACT legalEntity 'Юридическое лицо' : named, externalObject;
TABLE legalEntity (legalEntity);

ownershipLegalEntity 'Форма собственности (ИД)' = DATA ownership (legalEntity) IN idGroup;

nameOwnershipLegalEntity 'Форма собственности' = name(ownershipLegalEntity(legalEntity)) IN lawGroup;
shortNameOwnershipLegalEntity 'Форма собственности (сокр.)' = shortNameOwnership(ownershipLegalEntity(legalEntity)) IN baseGroup;
fullNameLegalEntity 'Наименование для накладных' = DATA STRING[200] (legalEntity) IN baseGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
UNPLegalEntity 'УНП' = DATA STRING[9] (legalEntity) IN baseGroup FIXEDCHARWIDTH 9;
//UNPLegalEntityToLegalEntity (UNPLegalEntity) = GROUP UNIQUE legalEntity BY UNPLegalEntity(legalEntity);
OKPOLegalEntity 'Код по ОКПО' = DATA STRING[20] (legalEntity) IN docGroup MINCHARWIDTH 15 PREFCHARWIDTH 15;     // подставить нужное потом значение
OKYLPLegalEntity 'Код ОКЮЛП' = DATA STRING[20] (legalEntity) IN docGroup MINCHARWIDTH 15 PREFCHARWIDTH 15;
emailLegalEntity 'e-mail' = DATA STRING[100] (legalEntity) IN contactGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
siteLegalEntity 'Сайт' = DATA STRING[100] (legalEntity) IN contactGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
contactsLegalEntity 'Дополнительная информация' = DATA STRING[300] (legalEntity) IN contactGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
residentLegalEntity 'Резидент РБ' = DATA BOOLEAN (legalEntity) IN lawGroup;
manufacturerLegalEntity 'Производитель' = DATA BOOLEAN (legalEntity) IN lawGroup;

legalEntityAccount 'Ю.Л. (ИД)' = DATA legalEntity (account) IN idGroup;
userAccountLegalEntity 'Р/сч. (ИД)' = DATA account (legalEntity) IN idGroup;
defaultAccountLegalEntity(legalEntity) = GROUP MAX account AS account BY legalEntityAccount(account);
overrideAccountLegalEntity 'Основной р/сч.' (legalEntity) = UNION OVERRIDE defaultAccountLegalEntity(legalEntity), userAccountLegalEntity(legalEntity);
dataOverrideAccountLegalEntity 'Основной р/сч.' (legalEntity) = dataAccount(overrideAccountLegalEntity(legalEntity)) IN lawGroup;

CONSTRAINT legalEntity != legalEntityAccount(userAccountLegalEntity(legalEntity)) CHECKED MESSAGE 'ошибка: Р/сч. по умолчанию должен соответствовать р/сч. Ю.Л.';
equalsLegalEntityAccount 'Основной р/сч.' (legalEntity, account) = userAccountLegalEntity(legalEntity) == account;

legalEntityLicense 'ЮЛ (ИД)' = DATA legalEntity (license) IN idGroup;

//userLicenseLegalEntity 'ЮЛ (ИД)' = DATA license (legalEntity) IN idGroup;
//actingLicense 'Действующая, м/у датами' (license) = license AS license IF dateFromLicense(license) <= currentDate() AND NOT dateToLicense(license) < currentDate();
actingLicenseDate 'Действующая между датами' (license, date) = license AS license IF dateFromLicense(license) <= date AND NOT dateToLicense(license) < date AND date AS DATE;
actingLicenseLegalEntityDate 'Действующая на дату' (legalEntity, date) = GROUP MAX actingLicenseDate(license, date) BY legalEntityLicense(license), date;
actingLicenseLegalEntity 'Действующая' (legalEntity) = actingLicenseLegalEntityDate(legalEntity, currentDate());
dataActingLicenseLegalEntity 'Действующая лицензия' (legalEntity) = dataLicense(actingLicenseLegalEntity(legalEntity)) IN lawGroup;

//actingLicenseLegalEntity (legalEntity) = GROUP MAX actingLicense(license) BY legalEntityLicense(license);        // сгруппировали по ID
//overrideLicenseLegalEntity 'Действующая' (legalEntity) = UNION OVERRIDE defaultLicenseLegalEntity(legalEntity) IF dateFromLicense(defaultLicenseLegalEntity(legalEntity)) < currentDate() AND dateToLicense(defaultLicenseLegalEntity(legalEntity)) > currentDate(),
//                                                                        userLicenseLegalEntity(legalEntity) IF dateFromLicense(userLicenseLegalEntity(legalEntity)) < currentDate() AND dateToLicense(userLicenseLegalEntity(legalEntity)) > currentDate();
                        // работает как то не так, надо проверить //
//CONSTRAINT legalEntity != legalEntityLicense(userLicenseLegalEntity(legalEntity)) CHECKED MESSAGE 'ошибка: Лицензия по умолчанию должен соответствовать лицензии Ю.Л.';
//CONSTRAINT  dateFromLicense(overrideLicenseLegalEntity(legalEntity)) > currentDate() MESSAGE 'ошибка: действие лицензии еще не началось';
//CONSTRAINT  dateToLicense(overrideLicenseLegalEntity(legalEntity)) < currentDate() MESSAGE 'ошибка: действие выбранной лицензии уже окончилось';
//equalsLegalEntityLicense 'Действующая' (legalEntity, license) = userLicenseLegalEntity(legalEntity) == license IN lawGroup;

// ----------------------------------- Юридическое лицо-дата ------------------------------------------ //

TABLE legalEntityDate (legalEntity, DATE);

@metaCodeObjectDateProperty(addressLegalEntity, legalEntity, 'Юридический адрес', STRING[150], baseGroup);
@metaCodeObjectDateProperty(managerLegalEntity, legalEntity, 'Руководитель', STRING[100], lawGroup);
@metaCodeObjectDateProperty(accountantLegalEntity, legalEntity, 'Главный бухгалтер', STRING[100], lawGroup);
@metaCodeObjectDateProperty(postAddressLegalEntity, legalEntity, 'Почтовый адрес', STRING[150], lawGroup);
@metaCodeObjectDateProperty(phoneLegalEntity, legalEntity, 'Телефон/факс', STRING[100], baseGroup);


// ----------------------------------- Договор ------------------------------------------ //

GROUP contractGroup 'Общая информация' : baseGroup;

CLASS ABSTRACT contract 'Договор';
CLASS contractProvider 'Договор с поставщиком' : contract;

CLASS STATIC contractType 'Тип договора'
{
    sale 'договор купли-продажи',
    commission 'договор комиссии'
};

CLASS STATIC contractForm 'Порядок оплаты'
{
    prepayment 'с отсрочкой платежа',
    implement 'По факту реализации',
    instruction 'Платежное поручение',
    requirement 'Платежное требование'
};

dataContract 'Номер договора' = DATA STRING[30] (contract) IN contractGroup;
//formContract(contract) = DATA contractForm (contract) IN contractGroup;
//nameFormContract 'Порядок оплаты по договору' (contract) = name(formContract(contract)) IN contractGroup;
typeContract(contract) = DATA contractType (contract) IN contractGroup;
nameTypeContract 'Тип договора' (contract) = name(UNION OVERRIDE contractType.sale IF contract IS contract,
                                                                 typeContract(contract)) IN contractGroup;
dateFromContract 'Дата начала договора' = DATA DATE (contract) IN contractGroup;
dateToContract 'Дата окончания договора' = DATA DATE (contract) IN contractGroup;
currencyContract 'Валюта взаиморасчетов' = DATA STRING[20] (contract) IN contractGroup; // может и не надо   или справочником
warnContract 'За сколько дней предупредить об окончании' = DATA INTEGER (contract) IN contractGroup;
banContract 'За сколько дней запретить закупку товара' = DATA INTEGER (contract) IN contractGroup;
//delayContract 'Отсрочка платежа, дней' = DATA INTEGER (contract) IN contractGroup;
requestContract 'Форма оплаты: Платежное требование' = DATA BOOLEAN (contract) IN contractGroup;
noteContract 'Примечание' = DATA STRING[500] (contract) IN contractGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;

@metaCodeNameObjectDateProperty(formContract, contract, 'Порядок оплаты по договору', contractForm, contractGroup);
CONSTRAINT contract IS contract AND NOT formContract(contract)  MESSAGE 'ошибка: Не выбран порядок оплаты по договору';
@metaCodeObjectDateProperty(delayContract, contract, 'Отсрочка платежа(кален. дней),при "-" предоплата', DOUBLE, baseGroup);


// ----------------------------------- Поставщик ------------------------------------------ //

GROUP supplierGroup 'Информация о поставщике' : publicGroup;

CLASS supplier 'Поставщик' : legalEntity;
TABLE supplier (supplier);

CLASS company 'Компания' : legalEntity;
TABLE company (company);

CLASS customer 'Покупатель' : legalEntity;
TABLE customer (customer);

companyContract 'Организация (ИД)' = DATA company (contract) IN idGroup;
supplierContract 'Поставщик (ИД)' = DATA supplier (contract) IN idGroup;
userContractSupplier 'Контракт (ИД)' = DATA contract (supplier) IN idGroup;
//companySupplier 'Организация (ИД)' = DATA company (supplier) IN idGroup;

payerSupplier 'Плательщик НДС' = DATA BOOLEAN (supplier) IN supplierGroup;
scheduleSupplier 'Разрешить доп.заказ товаров вне графика' = DATA BOOLEAN (supplier) IN supplierGroup;
surePercentSupplier 'Обязательный % заказанных товаров в прих. накладной' = DATA INTEGER (supplier) IN supplierGroup;
allowablePercentSupplier 'Допустимый % изменения цен 1го поставщика' = DATA INTEGER (supplier) IN supplierGroup;
afterDaysSupplier 'Максимальное число дней до поставки после заказа' = DATA INTEGER (supplier) IN supplierGroup;
forHoursSupplier 'За сколько часов до поставки закрыть заказ' = DATA INTEGER (supplier) IN supplierGroup;
limitSupplier 'Кредитный лимит' = DATA INTEGER (supplier) IN docGroup;
prioritySupplier 'Приоритет оплаты (1 - в первую очередь)' = DATA INTEGER (supplier) IN docGroup;
signsSupplier 'Число знаков после запятой для строки накладной' = DATA INTEGER (supplier) IN supplierGroup;
marksSupplier 'Число знаков после зап.в сумме к оплате по накладной' = DATA INTEGER (supplier) IN supplierGroup;

emailOrderSupplierDepartmentStore 'e-mail для передачи заказа' = DATA STRING[100] (supplier, departmentStore)IN supplierGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
contactSupplierDepartmentStore 'Контактная информация' = DATA STRING[500] (supplier, departmentStore)IN supplierGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
controlSupplierDepartmentStore(supplier, departmentStore) = DATA yesNo (supplier, departmentStore)IN idGroup;

nameControlSupplierDepartmentStore 'Контролировать ассортимент поставщика, ДА/НЕТ' (supplier, departmentStore) = name(UNION OVERRIDE
    yesNo.no IF supplier IS supplier AND departmentStore IS departmentStore,
    controlSupplierDepartmentStore(supplier, departmentStore)) IN supplierGroup;

@metaCodeNameDoubleObjectDateProperty(sureSupplierDepartmentStore, supplier, departmentStore, 'Обязателен заказ поставщику, ДА/НЕТ', yesNo, orderGroup);

overrideSupplierDepartmentStoreDate(supplier, departmentStore, date) = UNION OVERRIDE
    (TRUE IF UNION OVERRIDE emailOrderSupplierDepartmentStore(supplier, departmentStore) AND date IS DATE, contactSupplierDepartmentStore(supplier, departmentStore) AND date IS DATE),
    controlSupplierDepartmentStore(supplier, departmentStore) == yesNo.yes AND date IS DATE,
    sureSupplierDepartmentStoreVal(supplier, departmentStore, date) == yesNo.yes;

isYesControlSupplierDepartmentStore(supplier, departmentStore) = controlSupplierDepartmentStore(supplier, departmentStore) == yesNo.yes;
isYesSureSupplierDepartmentStoreVal(supplier, departmentStore, date) = sureSupplierDepartmentStoreVal(supplier, departmentStore, date) == yesNo.yes;

//dataContractSupplier 'Договор по умолчанию' (supplier) = dataContract(userContractSupplier(supplier));
defaultContractSupplier(supplier) = GROUP MAX contract AS contract BY supplierContract(contract);
//dataDefaultContractSupplier(supplier) = dataContract(defaultContractSupplier(supplier));

overrideContractSupplier 'Основной договор' (supplier) = UNION OVERRIDE defaultContractSupplier(supplier), userContractSupplier(supplier);
dataOverrideContractSupplier 'Основной договор' (supplier) = dataContract(overrideContractSupplier(supplier)) IN lawGroup;
CONSTRAINT supplier != supplierContract(userContractSupplier(supplier)) CHECKED MESSAGE 'ошибка: Договор по умолчанию для поставщика должен соответствовать договорам поставщика';
equalsSupplierContract 'Основной договор' (supplier, contract) = userContractSupplier(supplier) == contract;

inSupplierContract(supplier, contract) = supplierContract(contract) == supplier;
inSupplierAccount(supplier, account) = legalEntityAccount(account) == supplier;
inSupplierLicense(supplier, license) = legalEntityLicense(license) == supplier;

inCompanyContract(company, contract) = companyContract(contract) == company;
inCompanyAccount(company, account) = legalEntityAccount(account) == company;
inCustomerAccount(customer, account) = legalEntityAccount(account) == customer;

nameSupplierContract 'Контрагент' (contract) = name(supplierContract(contract));
nameCompanyContract 'Контрагент' (contract) = name(companyContract(contract));

userContractCompanySupplier 'Контракт (ИД)' = DATA contract (company, supplier) IN idGroup;
//dataContractCompanySupplier 'Договор по умолчанию' (company, supplier) = dataContract(userContractCompany(company));
actingContract(contract) = contract IF dateFromContract(contract) <= currentDate() AND NOT dateToContract(contract) < currentDate();
actingContractCompanySupplier(company, supplier) = GROUP MAX actingContract(contract) BY companyContract(contract), supplierContract(contract);

overrideContractCompanySupplier 'Основной договор' (company, supplier) = UNION OVERRIDE actingContractCompanySupplier(company, supplier), userContractCompanySupplier(company, supplier);
dataOverrideContractCompanySupplier 'Основной договор' (company, supplier) = dataContract(overrideContractCompanySupplier(company, supplier)) IN lawGroup;
CONSTRAINT supplier != supplierContract(userContractCompanySupplier(company, supplier)) CHECKED MESSAGE 'ошибка: Договор по умолчанию для поставщика должен соответствовать договорам поставщика';
CONSTRAINT company != companyContract(userContractCompanySupplier(company, supplier)) CHECKED MESSAGE 'ошибка: Договор по умолчанию для компании должен соответствовать договорам компании';
equalsCompanySupplierContract 'Основной договор' (company, supplier, contract) = userContractCompanySupplier(company, supplier) == contract;


FORM supplier 'Поставщик'
    TREE treeStore y=STRING[3], t=tradingNetwork, st=storeType, so=store
    PROPERTIES READONLY OBJVALUE(y), name(t), name(st), name(so)

    OBJECTS s=supplier FIXED PANEL, dt=DATE FIXED PANEL
    PROPERTIES(s) name, fullNameLegalEntity, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity, addressLegalEntity, showFormaddressLegalEntity,
                  postAddressLegalEntity, showFormpostAddressLegalEntity, managerLegalEntity, showFormmanagerLegalEntity,
                  accountantLegalEntity, showFormaccountantLegalEntity, phoneLegalEntity, showFormphoneLegalEntity,
                  UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity, emailLegalEntity, siteLegalEntity, payerSupplier,
                  residentLegalEntity, manufacturerLegalEntity, surePercentSupplier, allowablePercentSupplier,
                  afterDaysSupplier, forHoursSupplier, limitSupplier, prioritySupplier, signsSupplier, marksSupplier //dataActingLicenseLegalEntity, dataOverrideContractSupplier, dataOverrideAccountLegalEntity

    OBJECTS a=account
    PROPERTIES(a) dataAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount, MFOBankAccount, noteAccount, ADDOBJ, delete

    OBJECTS c=contractProvider
    PROPERTIES(c) dataContract, nameCompanyContract, nameformContract, showFormNameformContract, nameTypeContract, dateFromContract,
                  dateToContract, currencyContract, warnContract, banContract, delayContract, showFormdelayContract, requestContract, noteContract, ADDOBJ, delete
    OBJECTS l=license
    PROPERTIES(l) dataLicense, dateFromLicense, dateToLicense, ADDOBJ, delete   //        tabaccoLicense

    OBJECTS d=departmentStore
    PROPERTIES(d) nameStoreDepartmentStore, name

    PROPERTIES (dt) OBJVALUE HIGHLIGHTIF dateDiffersCurrent(dt)

    PROPERTIES(s, d) emailOrderSupplierDepartmentStore, contactSupplierDepartmentStore, nameControlSupplierDepartmentStore  //namesureSupplierDepartmentStore, showFormNamesureSupplierDepartmentStore
    PROPERTIES       namesureSupplierDepartmentStoreOver(s, d, dt) HIGHLIGHTIF namesureSupplierDepartmentStoreDate(s, d, dt), showFormNamesureSupplierDepartmentStoreOver(s, d)

    PROPERTIES(s,c) equalsSupplierContract
    PROPERTIES(s,a) equalsLegalEntityAccount
    //PROPERTIES(s,l) equalsLegalEntityLicense
    FILTERS stringEqualsAll(y),
        inStoreTypeTradingNetwork (st, t),
        inStoreTypeStore (st, so),
        inTradingNetworkStoreTypeStoreDepartment(t, st, so, d),
        inSupplierContract(s, c),
        inSupplierAccount(s, a),
        inSupplierLicense(s, l)

    FILTERGROUP filters9
        FILTER 'Показывать только с заполненными полями' 'F10' overrideSupplierDepartmentStoreDate(s, d, dt)
        FILTER 'Показывать только с заполненным полем: e-mail' 'F9' emailOrderSupplierDepartmentStore(s, d)
        FILTER 'Показывать только с заполненным полем: контактная инф-ия' 'F8' contactSupplierDepartmentStore(s, d)
        FILTER 'Показывать только с заполненным полем: контролировать пост-ка' 'F7' isYesControlSupplierDepartmentStore(s, d)
        FILTER 'Показывать только с заполненным полем: обязателен заказ поставщику' 'F6' isYesSureSupplierDepartmentStoreVal(s, d, dt)

    EDIT supplier OBJECT s
;

DESIGN supplier FROM DEFAULT {
    main{
       s.box {
            childConstraints = TO THE RIGHT;

            NEW oneCase {
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(name(s));
                ADD PROPERTY(fullNameLegalEntity(s));
                ADD PROPERTY(addressLegalEntity(s));
                ADD PROPERTY(phoneLegalEntity(s));
                ADD PROPERTY(UNPLegalEntity(s));
                ADD s.contactGroup;
                ADD s.lawGroup {
                    ADD PROPERTY(shortNameOwnershipLegalEntity(s));
                };
            };

            NEW twoCase{
                childConstraints = TO THE BOTTOM;
                ADD s.docGroup;
                ADD s.supplierGroup;
            }
       }

       NEW prop.box BEFORE functions.box{
            tabbedPane = TRUE;
            ADD a.box;
            ADD c.box;
            ADD l.box;

            ADD d.box {

                ADD dt.box BEFORE d.grid.box;
                ADD treeStore.box BEFORE d.grid.box;
                POSITION treeStore.box TO THE LEFT d.grid.box;
                d.grid.box {
                fillHorizontal = 3;
                };
            }
       }
    }
}

FORM suppliers 'Поставщики'
    OBJECTS s=supplier
    PROPERTIES(s) READONLY name, fullNameLegalEntity, shortNameOwnershipLegalEntity, UNPLegalEntity, dataOverrideAccountLegalEntity, addressLegalEntity, phoneLegalEntity
    PROPERTIES(s) ADDFORM, EDITFORM, delete
;

FORM company 'Компания'
    OBJECTS co=company FIXED PANEL
    PROPERTIES(co) name, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity, fullNameLegalEntity, addressLegalEntity,
                   showFormaddressLegalEntity, postAddressLegalEntity, showFormpostAddressLegalEntity, managerLegalEntity,
                   showFormmanagerLegalEntity, accountantLegalEntity, showFormaccountantLegalEntity, phoneLegalEntity, showFormphoneLegalEntity,
                   UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity, emailLegalEntity, siteLegalEntity

    OBJECTS a=account
    PROPERTIES(a)  dataAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount, MFOBankAccount, noteAccount, ADDOBJ, delete

    OBJECTS c=contractProvider
    PROPERTIES(c)  dataContract, nameSupplierContract, nameformContract, showFormNameformContract, nameTypeContract, dateFromContract,
                   dateToContract, currencyContract, noteContract, delayContract, showFormdelayContract, ADDOBJ, delete

    OBJECTS s=supplier
    PROPERTIES(s) name, fullNameLegalEntity

    PROPERTIES(co, s)    dataOverrideContractCompanySupplier
    PROPERTIES(co, s, c) equalsCompanySupplierContract

    FILTERS inCompanyContract(co, c),
        inCompanyAccount(co, a),
        inSupplierContract(s, c)

    EDIT company OBJECT co
;

DESIGN company FROM DEFAULT {
    main{

       co.box {
            childConstraints = TO THE RIGHT;

            NEW oneCase {
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(name(co));
                ADD PROPERTY(fullNameLegalEntity(co));
                ADD PROPERTY(addressLegalEntity(co));
                ADD PROPERTY(phoneLegalEntity(co));
                ADD PROPERTY(UNPLegalEntity(co));
                ADD co.contactGroup;
            };

            NEW twoCase{
                childConstraints = TO THE BOTTOM;
                ADD co.docGroup;
                ADD co.lawGroup {
                    ADD PROPERTY(shortNameOwnershipLegalEntity(co));
                };
            }
       }

       NEW firstCase BEFORE functions.box {
            tabbedPane = TRUE;
            ADD a.box;
            NEW v.box { title = 'Поставщик-договор'; }
            ADD s.box IN v.box;
            ADD c.box IN v.box;
            POSITION s.box TO THE LEFT c.box;
       }
   }
}
FORM companies 'Компании'
    OBJECTS co=company
    PROPERTIES(co) READONLY name, fullNameLegalEntity, shortNameOwnershipLegalEntity, UNPLegalEntity, dataOverrideAccountLegalEntity, addressLegalEntity, phoneLegalEntity
    PROPERTIES(co) ADDFORM, EDITFORM, delete
;

FORM customer 'Покупатель'
    OBJECTS cu=customer FIXED PANEL
    PROPERTIES(cu)     name, fullNameLegalEntity, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity, addressLegalEntity, showFormaddressLegalEntity,
                       postAddressLegalEntity, showFormpostAddressLegalEntity, managerLegalEntity, showFormmanagerLegalEntity,
                       accountantLegalEntity, showFormaccountantLegalEntity, phoneLegalEntity, showFormphoneLegalEntity,
                       UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity, emailLegalEntity, siteLegalEntity, payerSupplier,
                       residentLegalEntity
    OBJECTS a=account
    PROPERTIES(a)      dataAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount,
                       MFOBankAccount, noteAccount, ADDOBJ, delete
    FILTERS inCustomerAccount(cu, a)

    EDIT customer OBJECT cu

;

FORM customers 'Покупатели'
    OBJECTS cu=customer
    PROPERTIES(cu)   name, fullNameLegalEntity, UNPLegalEntity, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity,
                     addressLegalEntity
    PROPERTIES(cu) ADDFORM, EDITFORM, delete
;

//--------------------------------------Дисконтные карточки------------------------------------------------------------------//
CLASS discountCard 'Дисконтная карта';

numberDiscountCard 'Номер дисконтной карты' (discountCard) = //DATA INTEGER (discountCard);
        PARTITION SUM 1 IF discountCard IS discountCard
        ORDER discountCard IN recognizeGroup MINCHARWIDTH 3 PREFCHARWIDTH 3;

customerDiscountCard (discountCard) = DATA customer(discountCard);
nameCustomerDiscountCard 'Держатель дисконтной карты' (discountCard) = name(customerDiscountCard(discountCard));

FORM discountCard 'Дисконтная карта'
    OBJECTS d=discountCard FIXED PANEL
    PROPERTIES(d) numberDiscountCard, nameCustomerDiscountCard

    EDIT discountCard OBJECT d
;

FORM discountCards 'Дисконтные карты'
    OBJECTS d=discountCard
    PROPERTIES(d) READONLY numberDiscountCard, nameCustomerDiscountCard
    PROPERTIES(d) ADDFORM, EDITFORM, delete
;

//---------------------------- по поставщикам и товарам ----------------------------------------

//--------------------------------------Заказ------------------------------------------------------------------//

GROUP orderSupplierGroup 'Информация о заказе' : publicGroup;
GROUP dateOrderSupplierGroup 'Даты' : publicGroup;

CLASS preliminaryOrder 'Предварительный заказ' : historyObject;

dateOrderPreliminaryOrder 'Дата заказа' = DATA DATE (preliminaryOrder) IN baseGroup;
dateSupplyPreliminaryOrder 'Дата поставки' = DATA DATE (preliminaryOrder) IN baseGroup;
departmentStorePreliminaryOrder 'Отдел заказа (ИД)' = DATA departmentStore (preliminaryOrder) AUTOSET;
nameDepartmentStorePreliminaryOrder 'Отдел заказа' (preliminaryOrder) = name(departmentStorePreliminaryOrder(preliminaryOrder)) IN orderSupplierGroup AUTOSET;
supplierPreliminaryOrder 'Поставщик заказа (ИД)' = DATA supplier (preliminaryOrder);
nameSupplierPreliminaryOrder 'Поставщик заказа' (preliminaryOrder) = name(supplierPreliminaryOrder(preliminaryOrder)) IN supplierGroup;
genTimeTablePreliminaryOrder 'График поставок'  = DATA genTimeTable (preliminaryOrder);

TABLE supplierDepartmentStoreDate (supplier, departmentStore, DATE);

@metaCodeDoubleObjectDateProperty(timeTable, supplier, departmentStore, 'Поставка', BOOLEAN, baseGroup);

CLASS ABSTRACT order 'Заказ' : historyObject;
CLASS orderSupplier 'Заказ поставщику' : order;
CLASS orderSupplierPosted 'Закрытый заказ поставщику' :orderSupplier;
//CLASS orderStock 'Заказ складу' :order;

dataOrderSupplier 'Номер заказа' (orderSupplier) = DATA INTEGER (orderSupplier) IN orderSupplierGroup;
maxDataOrderSupplier = UNION OVERRIDE 0, [GROUP MAX dataOrderSupplier(orderSupplier)]();
nextDataOrderSupplier = maxDataOrderSupplier() + 1;
dataOrderSupplier (orderSupplier) <- OLD nextDataOrderSupplier() ON ASSIGN orderSupplier IS orderSupplier;

curDateOrderSupplier 'Дата заказа' = DATA DATE (orderSupplier) IN dateOrderSupplierGroup;
dateOrderSupplier 'Дата поставки' = DATA DATE (orderSupplier) IN dateOrderSupplierGroup;

departmentStoreOrderSupplier 'Отдел заказа (ИД)' = DATA departmentStore (orderSupplier);
nameDepartmentStoreOrderSupplier 'Отдел заказа' (orderSupplier) = name(departmentStoreOrderSupplier(orderSupplier));

supplierOrderSupplier 'Поставщик заказа (ИД)' = DATA supplier (orderSupplier);
nameSupplierOrderSupplier 'Поставщик заказа' (orderSupplier) = name(supplierOrderSupplier(orderSupplier));

preliminaryOrderOrderSupplier 'Предварительный заказ заказа' = DATA preliminaryOrder (orderSupplier);

preliminaryOrderToOrderSupplier 'Заказ по предварительному заказу' (preliminaryOrder) = GROUP UNIQUE orderSupplier BY preliminaryOrderOrderSupplier(orderSupplier);
dataOrderPreliminaryOrder 'Номер заказа для предварительного заказа' (preliminaryOrder) = dataOrderSupplier(preliminaryOrderToOrderSupplier(preliminaryOrder));

completePercentageOrderSupplier 'Процент выполнения' (orderSupplier) = DATA DOUBLE (orderSupplier) IN orderSupplierGroup;
allowablePercentOrderSupplier 'Допустимый % изменения цен 1го поставщика' = DATA INTEGER (orderSupplier) IN supplierGroup;

quantityPackItemOver 'Количество в грузовом месте' (item) = UNION OVERRIDE 1 IF item IS item, quantityPackItem(item);
quantityRealizationDepartmentStoreItemOver 'Прожад в день' (departmentStore, item) =
    UNION OVERRIDE 0 IF (departmentStore IS departmentStore AND item IS item), quantityRealizationDepartmentStoreItem(departmentStore, item);
balanceDepartmentStoreItemOver 'Текущий остаток' (departmentStore, item) =
    UNION OVERRIDE 0 IF (departmentStore IS departmentStore AND item IS item), balanceDepartmentStoreItem(departmentStore, item);
minReserveItemOver 'Минимальный резерв' (item) = UNION OVERRIDE 0 IF item IS item, minReserveItem(item);
minQuantityOrderItemOver 'Минимальный заказ' (item) = UNION OVERRIDE 0 IF item IS item, minQuantityOrderItem(item);

packQuantityItemOrderSupplier 'Заказ(мест)' = DATA INTEGER (orderSupplier, item);
sumQuantityItemOrderSupplier 'Заказ(единиц)' (orderSupplier, item) = quantityPackItemOver(item) * packQuantityItemOrderSupplier(orderSupplier, item);
priceSupplierItemOrderSupplier 'Цена поставщика' (orderSupplier, item) = DATA DOUBLE (orderSupplier, item);
priceSupplierItemOrderSupplier (orderSupplier, item) <- priceSupplierItemDepartmentOver(supplierOrderSupplier(orderSupplier), item, departmentStoreOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier))
    ON ASSIGN packQuantityItemOrderSupplier(orderSupplier, item);
retailPriceItemOrderSupplierVal 'Розничная цена' (orderSupplier, item) =
    retailPriceItemDepartmentVal(item, departmentStoreOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier));
retailPriceItemOrderSupplier 'Розничная цена' (orderSupplier, item) =
    UNION OVERRIDE 0 IF (orderSupplier IS orderSupplier AND item IS item), retailPriceItemOrderSupplierVal(orderSupplier, item);
fullSumItemOrderSupplier 'Сумма заказа' (orderSupplier, item) =
    sumQuantityItemOrderSupplier(orderSupplier, item) * priceSupplierItemOrderSupplier(orderSupplier, item) IN baseGroup;
fullSumOrderSupplier 'Сумма заказа' (orderSupplier) = GROUP SUM fullSumItemOrderSupplier(orderSupplier, item) BY orderSupplier IN orderSupplierGroup;
nameinActionItemOrderSupplier 'Товар акции' (orderSupplier, item) =
    nameinActionItemDepartmentOver(item, departmentStoreOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier));
banMovementDepartmentStoreOrderSupplier 'Запрет на внутреннее перемещение товара' (orderSupplier, item) =
    banMovementDepartmentStoreItem(departmentStoreOrderSupplier(orderSupplier), item);
topItem 'Топ' (orderSupplier, item) = topDepartmentStoreItem(departmentStoreOrderSupplier(orderSupplier), item);
CONSTRAINT packQuantityItemOrderSupplier(orderSupplier, item) <= 0 MESSAGE 'Количество должно быть положительным';
CONSTRAINT priceSupplierItemOrderSupplier(orderSupplier, item) <= 0 MESSAGE 'Цена должна быть положительной';
//minQuantityOrderSupplier 'Минимальный заказ' (orderSupplier, item) = minCountItemAssortment(departmentStoreOrderSupplier(orderSupplier), supplierOrderSupplier(orderSupplier), item);
//CONSTRAINT packQuantityItemOrderSupplier(orderSupplier, item) < minQuantityOrderSupplier(orderSupplier, item) AND packQuantityItemOrderSupplier(orderSupplier, item) != 0  MESSAGE 'Заказ должен быть больше минимального';

castFiveObjectsToString100 =
     FORMULA STRING[200] '\'№\' || CAST($1 AS TEXT) || \'  от \' || CAST($2 AS TEXT) || \'  Количество: \' || CAST($3 AS TEXT) || \'  Розн. цена: \' || CAST($4 AS TEXT) || \'(\' || CAST($5 AS TEXT) || \')\' ';
//если разбивать формулу на 2 строки выдает ошибку

isItemInOrderSupplier 'Товар в заказе' (orderSupplier, item) = packQuantityItemOrderSupplier(orderSupplier, item) > 0;
lastOrderSupplierVal 'Последний заказ(ИД)' (orderSupplier, item) =
     PARTITION PREV orderSupplier AND isItemInOrderSupplier(orderSupplier, item)
     BY supplierOrderSupplier(orderSupplier), departmentStoreOrderSupplier(orderSupplier), item
     ORDER dateOrderSupplier(orderSupplier);
lastOrderSupplier 'Последний заказ' (orderSupplier, item) =
     castFiveObjectsToString100(dataOrderSupplier(lastOrderSupplierVal(orderSupplier, item)),
                                dateOrderSupplier(lastOrderSupplierVal(orderSupplier, item)),
                                packQuantityItemOrderSupplier(lastOrderSupplierVal(orderSupplier, item), item),
                                retailPriceItemOrderSupplier(lastOrderSupplierVal(orderSupplier, item), item),
                                nameSupplierOrderSupplier(lastOrderSupplierVal(orderSupplier, item))
     );

quantityDaysNextOrder 'Дней до поставки' (orderSupplier) =
    UNION MAX 0 IF orderSupplier IS orderSupplier,
              daysInclBetweenDates(curDateOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier)) IN dateOrderSupplierGroup;

quantityOrderOrderSupplier 'Заказов на дату заказа' (supplier, departmentStore, date) =
    GROUP SUM 1 IF orderSupplier
    BY supplierOrderSupplier(orderSupplier), departmentStoreOrderSupplier(orderSupplier), curDateOrderSupplier(orderSupplier);

quantitySupplyOrderSupplier 'Заказов на дату поставки' (supplier, departmentStore, date) =
    GROUP SUM 1 IF orderSupplier BY supplierOrderSupplier(orderSupplier), departmentStoreOrderSupplier(orderSupplier),
                                    dateOrderSupplier(orderSupplier);
quantityOrderPreliminaryOrder 'Предварительных заказов на дату заказа' (supplier, departmentStore, date) =
    GROUP SUM 1 IF preliminaryOrder BY supplierPreliminaryOrder(preliminaryOrder), departmentStorePreliminaryOrder(preliminaryOrder),
                                       dateOrderPreliminaryOrder(preliminaryOrder);
quantitySupplyPreliminaryOrder 'Предварительных заказов на дату поставки' (supplier, departmentStore, date) =
    GROUP SUM 1 IF preliminaryOrder BY supplierPreliminaryOrder(preliminaryOrder), departmentStorePreliminaryOrder(preliminaryOrder),
                                       dateSupplyPreliminaryOrder(preliminaryOrder);
nextDateOrder 'Дата следующей поставки' (preliminaryOrder) =
    PARTITION PREV dateSupplyPreliminaryOrder(preliminaryOrder)
    BY supplierPreliminaryOrder(preliminaryOrder), departmentStorePreliminaryOrder(preliminaryOrder)
    ORDER DESC dateSupplyPreliminaryOrder(preliminaryOrder);
nextDateOrderSupplier 'Дата следующей поставки' (orderSupplier) = DATA DATE (orderSupplier) IN dateOrderSupplierGroup;
quantityDaysAfterNextOrder 'Дней до следующей поставки' (orderSupplier) =
    daysInclBetweenDates(curDateOrderSupplier(orderSupplier), nextDateOrderSupplier(orderSupplier)) IN dateOrderSupplierGroup;
CONSTRAINT nextDateOrderSupplier(orderSupplier) < dateOrderSupplier(orderSupplier) MESSAGE 'Дата поставки не должна превышать дату поставки следующей поставки';
quantityRealizationItemNextOrder 'Предполагаемое количество реализации товара до следующей поставки' (orderSupplier, item) =
    quantityDaysAfterNextOrder(orderSupplier)*quantityRealizationDepartmentStoreItemOver(departmentStoreOrderSupplier(orderSupplier), item);
balance2DepartmentStoreItem 'Величина остатков товара за вычетом минимального резерва' (orderSupplier, item) =
    balanceDepartmentStoreItemOver(departmentStoreOrderSupplier(orderSupplier), item) - minReserveItemOver(item);
isEnoughItem 'Достаточно ли остатков товара' (orderSupplier, item) =
    balanceDepartmentStoreItemOver(departmentStoreOrderSupplier(orderSupplier), item) - quantityRealizationItemNextOrder(orderSupplier, item) < minReserveItemOver(item);
recommendCountOrderSupplier 'Рекомендуемый заказ' (orderSupplier, item) =
    IF isEnoughItem(orderSupplier, item) THEN (UNION MAX (quantityRealizationItemNextOrder(orderSupplier, item)-balance2DepartmentStoreItem(orderSupplier, item)), (minQuantityOrderItemOver(item)
    IF orderSupplier IS orderSupplier)) ELSE 0 IF (orderSupplier IS orderSupplier AND item IS item);

isBanSupplierItemDepartmentOrderSupplier (orderSupplier, item) = banSupplierItemDepartmentVal (
    supplierOrderSupplier(orderSupplier), item, departmentStoreOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier)) != yesNo.yes;

isSupplierItemDepartmentOrderSupplier (orderSupplier, item) = isSupplierItemDepartmentVal(
    supplierOrderSupplier(orderSupplier), item, departmentStoreOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier)) == yesNo.yes;

isSupplyDatePreliminaryOrder (preliminaryOrder, date) = dateSupplyPreliminaryOrder(preliminaryOrder) >= (date AS DATE) ;
isOrderDatePreliminaryOrder (preliminaryOrder, date) = dateOrderPreliminaryOrder(preliminaryOrder) >= (date AS DATE) ;

@metaCodePostedObject (orderSupplier);

FORM preliminaryOrder 'Предварительный заказ'
OBJECTS p=preliminaryOrder FIXED PANEL
PROPERTIES(p) nameDepartmentStorePreliminaryOrder, nameSupplierPreliminaryOrder, dateOrderPreliminaryOrder,
              dateSupplyPreliminaryOrder
EDIT preliminaryOrder OBJECT p;

DESIGN preliminaryOrder FROM DEFAULT {
    p.box{
        title = 'Предварительный заказ';
        childConstraints = TO THE BOTTOM;
        ADD PROPERTY (nameDepartmentStorePreliminaryOrder);
        ADD PROPERTY (nameSupplierPreliminaryOrder);
        ADD PROPERTY (dateOrderPreliminaryOrder);
        ADD PROPERTY (dateSupplyPreliminaryOrder);
    }
}

tmpGTT = SESSION DATA genTimeTable();
tmpDate = SESSION DATA DATE();
tmpDateS = SESSION DATA DATE();

createGenTimeTable 'Создать график поставок' = ACTION () NEWSESSION {
    FORM genTimeTable INIT [ACTION ADDOBJ genTimeTable]() MODAL;

    IF formResult() == formResult.ok THEN {

        SET tmpGTT() <- chosenObject('g');
        // генерация через N недель
        IF genTimeTableType(tmpGTT()) == genType.genWeek THEN {
            // бежим по всем дням недели
            FOR inDayGenTimeTable(tmpGTT(), dow) DO {
                SET tmpDate() <- startDateGenTimeTable(tmpGTT());
                // ищем первую дату начиная со стартовой с нужным днем недели
                WHILE DOWInDate(tmpDate()) != dow AS DOW DO {
                    SET tmpDate() <- addDate2(tmpDate(), 1);
                };

                // итерируемся по всем датам через период * 7 дней
                WHILE tmpDate() <= endDateGenTimeTable(tmpGTT()) DO {
                    ADDOBJ preliminaryOrder;
                    FOR o == addedObject() DO {
                        SET departmentStorePreliminaryOrder(o) <- departmentStoreGenTimeTable(tmpGTT());
                        SET supplierPreliminaryOrder(o) <- supplierGenTimeTable(tmpGTT());
                        SET dateOrderPreliminaryOrder(o) <- subtractDate2(tmpDate(), dayBeforeGenTimeTable(tmpGTT()));
                        SET dateSupplyPreliminaryOrder(o) <- tmpDate();
                        SET genTimeTablePreliminaryOrder(o) <- tmpGTT();
                    };
                    SET tmpDate() <- addDate2(tmpDate(), periodGenTimeTable(tmpGTT()) * 7);
                };
            };
        };

        // генерация через N дней
        IF genTimeTableType(tmpGTT()) == genType.genDays THEN {
            SET tmpDate() <- dayLastOrderGenTimeTable(tmpGTT());
            // итерируемся по всем датам через n дней
            WHILE tmpDate() <= endDateGenTimeTable(tmpGTT()) DO {
                IF tmpDate() >= startDateGenTimeTable(tmpGTT()) THEN {
                    ADDOBJ preliminaryOrder;
                    FOR o == addedObject() DO {
                        SET departmentStorePreliminaryOrder(o) <- departmentStoreGenTimeTable(tmpGTT());
                        SET supplierPreliminaryOrder(o) <- supplierGenTimeTable(tmpGTT());
                        SET dateOrderPreliminaryOrder(o) <- subtractDate2(tmpDate(), dayBeforeGenTimeTable(tmpGTT()));
                        SET dateSupplyPreliminaryOrder(o) <- tmpDate();
                        SET genTimeTablePreliminaryOrder(o) <- tmpGTT();
                    };
                };
                SET tmpDate() <- addDate2(tmpDate(), dayAfterGenTimeTable(tmpGTT()));
            };
        };

        // генерация по числам
        IF genTimeTableType(tmpGTT()) == genType.genNumber THEN {
            SET tmpDate() <- startDateGenTimeTable(tmpGTT());
            // итерируемся по всем датам через 1 день
            WHILE tmpDate() <= endDateGenTimeTable(tmpGTT()) DO {
                IF isWordInCSV(dayInDate(tmpDate()), stringNumberGenTimeTable(tmpGTT())) == 1 THEN {
                    ADDOBJ preliminaryOrder;
                    FOR o == addedObject() DO {
                        SET departmentStorePreliminaryOrder(o) <- departmentStoreGenTimeTable(tmpGTT());
                        SET supplierPreliminaryOrder(o) <- supplierGenTimeTable(tmpGTT());
                        SET tmpDateS() <- tmpDate();
                        SET genTimeTablePreliminaryOrder(o) <- tmpGTT();
                        // если попали на субботу или воскресенье
                        IF UNION OVERRIDE numberDOWInDate(tmpDateS()) == 0, numberDOWInDate(tmpDateS()) == 6 THEN {
                            IF numberDOW(transferDayGenTimeTable(tmpGTT())) == 1 THEN {
                                // если нужно переносить на понедельник, то добавляем
                                WHILE numberDOWInDate(tmpDateS()) != 1 DO SET tmpDateS() <- addDate2(tmpDateS(), 1);
                            } ELSE {
                                // если нужно переносить на пятницу, то отнимаем
                                WHILE numberDOWInDate(tmpDateS()) != 5 DO SET tmpDateS() <- subtractDate2(tmpDateS(), 1);
                            };
                        };
                        SET dateSupplyPreliminaryOrder(o) <- tmpDateS();
                        SET dateOrderPreliminaryOrder(o) <- subtractDate2(tmpDateS(), dayBeforeGenTimeTable(tmpGTT()));
                    };
                };
                SET tmpDate() <- addDate2(tmpDate(), 1);
            };
        };

        // генерация по дням и месяцам
        IF genTimeTableType(tmpGTT()) == genType.genDayMonth THEN {
            SET tmpDate() <- startDateGenTimeTable(tmpGTT());
            // итерируемся по всем датам через 1 день
            WHILE tmpDate() <= endDateGenTimeTable(tmpGTT()) DO {
                IF inMonthGenTimeTable(tmpGTT(), monthInDate(tmpDate())) AND inDayGenTimeTable(tmpGTT(), DOWInDate(tmpDate())) THEN {
                    ADDOBJ preliminaryOrder;
                    FOR o == addedObject() DO {
                        SET departmentStorePreliminaryOrder(o) <- departmentStoreGenTimeTable(tmpGTT());
                        SET supplierPreliminaryOrder(o) <- supplierGenTimeTable(tmpGTT());
                        SET dateOrderPreliminaryOrder(o) <- subtractDate2(tmpDate(), dayBeforeGenTimeTable(tmpGTT()));
                        SET dateSupplyPreliminaryOrder(o) <- tmpDate();
                        SET genTimeTablePreliminaryOrder(o) <- tmpGTT();
                    };
                };
                SET tmpDate() <- addDate2(tmpDate(), 1);
            };
        };

        EXEC apply();
    };
};
//nextDateOrderSupplier (orderSupplier) <- nextDateOrder(preliminaryOrderOrderSupplier(orderSupplier)) ON ASSIGN orderSupplier;

fillInOrderSupplier 'Заполнить заказ рекомендованным количеством' = ACTION (orderSupplier) {
    FOR recommendCountOrderSupplier(orderSupplier, item AS item) > 0 DO {
        SET packQuantityItemOrderSupplier(orderSupplier, item) <- recommendCountOrderSupplier(orderSupplier, item AS item) ;
    };
};

createOrderSupplier 'Создать заказ' = [ACTION (preliminaryOrder) {
    ADDOBJ orderSupplier;
    FOR o == addedObject() DO {
        SET dateOrderSupplier(o) <- dateSupplyPreliminaryOrder(preliminaryOrder);
        SET curDateOrderSupplier(o) <- dateOrderPreliminaryOrder(preliminaryOrder);
        SET departmentStoreOrderSupplier(o) <- departmentStorePreliminaryOrder(preliminaryOrder);
        SET supplierOrderSupplier(o) <- supplierPreliminaryOrder(preliminaryOrder);
        SET allowablePercentOrderSupplier(o) <- allowablePercentSupplier(supplierPreliminaryOrder(preliminaryOrder));
        SET preliminaryOrderOrderSupplier(o) <- preliminaryOrder AS preliminaryOrder;
        SET nextDateOrderSupplier(o) <- nextDateOrder(preliminaryOrder);
        EXEC fillInOrderSupplier(o AS orderSupplier);
    }
    EXEC apply();
}] (preliminaryOrder) AND NOT preliminaryOrderToOrderSupplier(preliminaryOrder) CONFIRM;

FORM orderSupplier 'Заказ поставщику'

    TREE treeGroup g=itemGroup PARENT parentItemGroup

    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS o=orderSupplier FIXED PANEL

    PROPERTIES(o)          dataOrderSupplier READONLY, curDateOrderSupplier, quantityDaysNextOrder, dateOrderSupplier,
                           quantityDaysAfterNextOrder, nextDateOrderSupplier, nameDepartmentStoreOrderSupplier,
                           nameSupplierOrderSupplier, fullSumOrderSupplier, // timeCreated, nameUserCreated,
                           allowablePercentOrderSupplier
    PROPERTIES(o) READONLY completePercentageOrderSupplier

    OBJECTS i=item

    PROPERTIES             nameAttributeItemGroupItem(g, i) READONLY, barcodeBarcodeSku(i) READONLY
    FILTERS                nameAttributeItemGroupItem(g, i)
    ORDER BY               nameAttributeItemGroupItem

    PROPERTIES(o, i)       topItem, packQuantityItemOrderSupplier, sumQuantityItemOrderSupplier

    PROPERTIES(i) READONLY quantityPackItemOver, minQuantityOrderItemOver
    PROPERTIES FORCE PANEL READONLY articleItem(i), nameCountryItem(i), retailPriceItemOrderSupplier(o, i),
                                    nameinActionItemOrderSupplier(o, i), banMovementDepartmentStoreOrderSupplier(o, i),
                                    lastOrderSupplier(o, i)

    PROPERTIES(o, i)       recommendCountOrderSupplier, priceSupplierItemOrderSupplier, fullSumItemOrderSupplier

    PROPERTIES(o)          fillInOrderSupplier TODRAW i FORCE PANEL

    FILTERS isSupplierItemDepartmentOrderSupplier(o, i),
            isBanSupplierItemDepartmentOrderSupplier(o, i)

    FILTERGROUP filters1
        FILTER 'Показывать только заказанные позиции' 'F10' sumQuantityItemOrderSupplier(o, i) DEFAULT

    EDIT orderSupplier OBJECT o
;

DESIGN orderSupplier FROM DEFAULT {

    o.box {
        childConstraints = TO THE RIGHT;
        NEW headerLeft {
            childConstraints = TO THE BOTTOM;
            ADD o.panel;
            ADD PROPERTY(allowablePercentOrderSupplier);
            ADD o.orderSupplierGroup {
                childConstraints = TO THE RIGHT;
            };
        }
        ADD o.dateOrderSupplierGroup{
            childConstraints = TO THE BOTTOM;
            };
    }

    POSITION treeGroup.box TO THE LEFT i.box;
    POSITION treeGroup.box TO THE BOTTOM o.box;

    i.grid {
        fillHorizontal = 4;
    }

    i.panel{
        childConstraints = TO THE BOTTOM;
        ADD PROPERTY(articleItem);
        ADD PROPERTY(nameCountryItem);
        ADD PROPERTY(retailPriceItemOrderSupplier);
        ADD PROPERTY(nameinActionItemOrderSupplier);
        ADD PROPERTY(banMovementDepartmentStoreOrderSupplier);
        ADD PROPERTY(lastOrderSupplier);
    }

    PROPERTY (fillInOrderSupplier) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
}

FORM orderSuppliers 'Заказы поставщику'

    OBJECTS o=orderSupplier
    PROPERTIES(o) READONLY objectClassName, dataOrderSupplier, curDateOrderSupplier, quantityDaysNextOrder, dateOrderSupplier,
                           quantityDaysAfterNextOrder, nextDateOrderSupplier, nameDepartmentStoreOrderSupplier,
                           nameSupplierOrderSupplier, completePercentageOrderSupplier, fullSumOrderSupplier, timeCreated,
                           nameUserCreated, allowablePercentOrderSupplier

    PROPERTIES(o)          ADDFORM, EDITFORM SHOWIF isDraftOrderSupplier(o), delete FORCE PANEL SHOWIF isDraftOrderSupplier(o),
                           postOrderSupplier SHOWIF isDraftOrderSupplier(o), unpostOrderSupplier SHOWIF isPostedOrderSupplier(o)

    OBJECTS i=item
    PROPERTIES(i) READONLY nameAttributeItem

    PROPERTIES(o, i) READONLY  packQuantityItemOrderSupplier, sumQuantityItemOrderSupplier, priceSupplierItemOrderSupplier,
                               fullSumItemOrderSupplier

    FILTERS sumQuantityItemOrderSupplier(o, i)
;

DESIGN orderSuppliers FROM DEFAULT{

    PROPERTY (delete(o)){
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
}


// ----------------------------------- Разрешать поставки ------------------------------------------- //

isOrderDate (date, preliminaryOrder) = dateOrderPreliminaryOrder(preliminaryOrder) == date AS DATE;
isSupplyDate (date, preliminaryOrder) = dateSupplyPreliminaryOrder(preliminaryOrder) == date AS DATE;
isSupplierDepartmentStore (departmentStore, supplier, preliminaryOrder) =
    departmentStorePreliminaryOrder(preliminaryOrder) == departmentStore AND supplierPreliminaryOrder(preliminaryOrder) ==supplier;

showFormGenTimeTablePreliminaryOrder 'Показать генерацию графика' (preliminaryOrder) = showFormGenTimeTable(genTimeTablePreliminaryOrder(preliminaryOrder));

FORM timeTableDate 'График поставок'

    OBJECTS t=DATE FIXED PANEL
    PROPERTIES(t) OBJVALUE

    OBJECTS d=departmentStore FIXED PANEL
    PROPERTIES name(d) SELECTOR, createGenTimeTable()

    OBJECTS s=supplier
    PROPERTIES(s) READONLY name

    OBJECTS p=preliminaryOrder
    PROPERTIES(p) showFormGenTimeTablePreliminaryOrder
    PROPERTIES(p) READONLY dateOrderPreliminaryOrder, dateSupplyPreliminaryOrder, dataOrderPreliminaryOrder
    PROPERTIES(p) nextDateOrder, createOrderSupplier
    PROPERTIES(p) ADDFORM, EDITFORM, delete FORCE PANEL
    PROPERTIES(s, d, t) READONLY quantityOrderOrderSupplier, quantitySupplyOrderSupplier, quantityOrderPreliminaryOrder, quantitySupplyPreliminaryOrder

    FILTERS isSupplierDepartmentStore(d, s, p)
    FILTERGROUP filters
        FILTER 'С предварительным заказом на дату заказа' 'F10' quantityOrderPreliminaryOrder(s, d, t)
        FILTER 'С предварительным заказом на дату поставки' 'F10' quantitySupplyPreliminaryOrder(s, d, t)
        FILTER 'С заказом на дату заказа' 'F10' quantityOrderOrderSupplier(s, d, t)
        FILTER 'С заказом на дату поставки' 'F10' quantitySupplyOrderSupplier(s, d, t)
    FILTERGROUP filters2
        FILTER 'Заказы после даты заказа' 'F10' isOrderDatePreliminaryOrder(p, t) DEFAULT
        FILTER 'Заказы после даты поставки' 'F10' isSupplyDatePreliminaryOrder(p, t)
        FILTER 'Заказы на дату заказа' 'F10' isOrderDate(t, p)
        FILTER 'Заказы на дату поставки' 'F10' isSupplyDate(t, p)

    ORDER BY dateOrderPreliminaryOrder
;

DESIGN timeTableDate FROM DEFAULT {
        POSITION s.box TO THE LEFT p.box;
        p.box {fillHorizontal = 4;}

        ADD PROPERTY(createGenTimeTable) IN d.panel;
        PROPERTY (delete(p)) {
            panelLocation = TOOLBAR;
            askConfirm = TRUE;
            }
}

//--------------------------------------Формы--------------------------------------------------------------------------//

isManufactory (departmentStore) = departmentStore IS manufactory;

FORM departmentStore 'Отдел магазина'
    OBJECTS d=departmentStore FIXED PANEL
    PROPERTIES(d)           name, nameStoreDepartmentStore, controlMinusRestsDepartmentStore, deleteItemMinusRestsDepartmentStore, controlMinusRestsContainerDepartmentStore,
                            verifyOrderArrivalDepartmentStore, maxQuantityDeliveryHourDepartmentStore, resolveMaxQuantityDeliveryHourAssortmentLessDepartmentStore, resolveOrderItemDepartmentStore,
                            quantityCashChangeOneOperationAccountDepartmentStore, commonNameMateriallyResponsiblePersonItemReportDepartmentStore,
                            commonNameBookkeeperItemReportDepartmentStore, commonNamePersonCheckReportDepartmentStore, nameRevaluationCommitteeDepartmentStore,
                            namediscount, showFormNamediscount

    OBJECTS e=employee
    PROPERTIES(e) READONLY userFirstName, userLastName
    PROPERTIES(e) ADDSESSIONFORM, EDITSESSIONFORM, delete
    FILTERS departmentStoreEmployee(d, e)

    OBJECTS t=tradingSquare
    PROPERTIES(t) squareTradingSquare, dateTradingSquare
    PROPERTIES(t) ADDOBJ, delete
    FILTERS inTradingSquareDepartmentStore(d, t)

    OBJECTS d2=departmentStore
    PROPERTIES(d2) READONLY name SHOWIF isManufactory(d)
    PROPERTIES(d, d2) rawDepartmentStore SHOWIF isManufactory(d)
    FILTERS inRawDepartmentStore(d, d2)
    FILTERGROUP rawFilter
        FILTER 'Подразделения из которых полуется сырье' 'F10' rawDepartmentStore(d, d2)

    EDIT departmentStore OBJECT d
;

DESIGN departmentStore FROM DEFAULT {
    main{

        d.box{
            childConstraints = TO THE RIGHT;
            NEW order {
                    childConstraints = TO THE BOTTOM;
                    title = 'Заказ';
                    ADD PROPERTY (name);
                    ADD PROPERTY (nameStoreDepartmentStore);
                    ADD PROPERTY (maxQuantityDeliveryHourDepartmentStore);
                    ADD PROPERTY (resolveMaxQuantityDeliveryHourAssortmentLessDepartmentStore);
                    ADD PROPERTY (resolveOrderItemDepartmentStore);
                    ADD PROPERTY (quantityCashChangeOneOperationAccountDepartmentStore);
                };
            ADD d.controlDepartmentStoreGroup{
                    ADD PROPERTY (namediscount);
                };
            ADD d.printDepartmentStoreGroup;
        };

        NEW prop.box BEFORE functions.box{
            tabbedPane = TRUE;
            ADD e.box{
                    title = 'Сотрудники';
                };
            ADD t.box;
            ADD d2.box{
                    title = 'Отделы сырья';
                };
      }
   }
}

FORM departmentStores 'Отделы магазинов'
    TREE treeStore a=STRING[3], t=tradingNetwork, st=storeType, s=store
    PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS stringEqualsAll(a), inStoreTypeTradingNetwork (st, t), inStoreTypeStore(st, s)

    OBJECTS d=departmentStore
    PROPERTIES(d) READONLY depName = name
    FILTERS inTradingNetworkStoreTypeStoreDepartment(t, st, s, d)
    ORDER BY depName

    DIALOG departmentStore OBJECT d
;

DESIGN departmentStores FROM DEFAULT {
    POSITION treeStore.box TO THE LEFT d.box;
    treeStore.tree {
        fillHorizontal = 0.3;
    }
    d.grid {
        defaultComponent = TRUE;
    }
}

FORM store 'Магазин'
    OBJECTS s=store FIXED PANEL
    PROPERTIES(s) name, addressStore, nameStoreTypeStore, tradingSquareStore, nameCompanyStore

    OBJECTS d=departmentStore
    PROPERTIES(d) READONLY objectClassName, name, defaultTradingSquareDepartmentStore
    PROPERTIES(d)          ADDSESSIONFORM, EDITSESSIONFORM, delete
    FILTERS inStoreDepartment(s, d)

    EDIT store OBJECT s
;

FORM tradingNetwork 'Торговая сеть'
    OBJECTS n=tradingNetwork FIXED PANEL
    PROPERTIES(n) name

    OBJECTS s=storeType
    PROPERTIES(s) name
    PROPERTIES(s) ADDOBJ, delete
    FILTERS inStoreTypeTradingNetwork(s, n)

    EDIT tradingNetwork OBJECT n
;

FORM stores 'Магазины'
    TREE treeStore a=STRING[3], t=tradingNetwork, st=storeType
    PROPERTIES READONLY OBJVALUE(a), name(t), name(st)//, dumb1(st)

    FILTERS stringEqualsAll(a)
    FILTERS inStoreTypeTradingNetwork (st, t)

    PROPERTIES(t)          addT=ADDFORM FORCE PANEL, editT=EDITFORM FORCE PANEL, delete FORCE PANEL//FORCE PANEL

    OBJECTS s=store
    PROPERTIES(s) READONLY name, addressStore, nameStoreTypeStore, nameCompanyStore
    PROPERTIES(s)          ADDFORM, EDITFORM, delete
    FILTERS inTradingNetworkStoreTypeStore(t, st, s)

    OBJECTS d=departmentStore
    PROPERTIES(d) READONLY objectClassName, name
    FILTERS inStoreDepartment(s, d)
;

DESIGN stores FROM DEFAULT {
    POSITION treeStore.box TO THE LEFT s.box;
    POSITION treeStore.box TO THE LEFT d.box;

        PROPERTY (delete(t)) {
            caption = 'Удалить';
            panelLocation = TOOLBAR;
            askConfirm = TRUE;
        }

        PROPERTY (addT) {
            caption = 'Добавить';
        }

        PROPERTY (editT) {
            caption = 'Ред-ть';
            maximumCharWidth = 5;
        }
        s.box {
            fillHorizontal = 2.3;
        }

        d.box {
            fillHorizontal = 2.3;
        }
}


//---------------------------- Модели оборудования ----------------------------------------//
CLASS ABSTRACT model 'Модель' : named;
CLASS cashRegisterModel 'Модель касс' : model;
CLASS scalesModel 'Модель весов' : model;
CLASS checkModel 'Модель прайс чекеров' : model;

CLASS frontOffice 'Фронт офис';
nameFrontOffice 'Версия фронт офиса на кассе' = DATA STRING[100] (frontOffice) IN baseGroup;

noteModel 'Примечание' = DATA STRING[200] (model) IN baseGroup;
useModel 'Модель используется' = DATA BOOLEAN (model) IN baseGroup;
lettersModel 'Преобразовать наименование товара В ЗАГЛАВНЫЕ БУКВЫ' = DATA BOOLEAN (model) IN baseGroup;


frontOfficeCashRegisterModel 'Модель касс (ИД)' = DATA frontOffice (cashRegisterModel) IN idGroup;
nameFrontOfficeCashRegisterModel 'Версия фронт офиса на кассе' (cashRegisterModel) = nameFrontOffice(frontOfficeCashRegisterModel(cashRegisterModel)) IN baseGroup;
dateToCashRegisterModel 'Дата, до которой модель внесена в реестр' = DATA DATE (cashRegisterModel) IN baseGroup;
maxProductModel 'MAX допустимое колич.товаров' = DATA INTEGER (model) IN baseGroup;

CLASS flash 'Прошивка';
nameFlash 'Модель весов/версия прошивки' = DATA STRING[100] (flash) IN baseGroup;

flashScalesModel 'Прошивка (ИД)' = DATA flash (scalesModel) IN idGroup;
nameFlashScalesModel 'Модель весов/версия прошивки' = nameFlash(flashScalesModel(scalesModel)) IN baseGroup;
maxTextScalesModel 'MAX допустимое колич.дополнительных текстов' = DATA INTEGER (scalesModel) IN baseGroup;
folderScalesModel 'Папка на сервере весов с драйвером весов' = DATA STRING[200] (scalesModel) IN baseGroup;
compositionScalesModel 'Число знаков в доп.тексте(составе товара)' = DATA INTEGER (scalesModel) IN baseGroup;

CLASS modelCheck 'Модель чекера';
nameModelCheck 'Модель прайс чекера' = DATA STRING[100] (modelCheck) IN baseGroup;

modelCheckModel 'Модель (ИД)' = DATA modelCheck (checkModel) IN idGroup;
nameModelCheckModel 'Модель прайс чекера' = nameModelCheck(modelCheckModel(checkModel)) IN baseGroup;

FORM models 'Модели оборудования'
OBJECTS m=model
PROPERTIES(m) READONLY objectClassName, name, useModel, maxProductModel, noteModel
PROPERTIES(m) ADDFORM, EDITFORM, delete;                // либо так как ниже//
//OBJECTS s=scalesModel, ch=checkModel, c=cashModel
//PROPERTIES(ch) READONLY name, nameModelCheckModel, noteModel, useModel, maxProductModel
//PROPERTIES(s)  READONLY name, nameFlashScalesModel, noteModel, useModel, maxProductModel, maxTextScalesModel,
//               folderScalesModel, lettersModel, compositionScalesModel
//PROPERTIES(c)  READONLY name, nameFrontOfficeCashModel, noteModel, useModel, dateToCashModel, lettersModel
//PROPERTIES(s) ADDFORM, EDITFORM, delete
//PROPERTIES(c) ADDFORM, EDITFORM, delete
//PROPERTIES(ch) ADDFORM, EDITFORM, delete;

//DESIGN models FROM DEFAULT {
//    main{
//       ADD prop1.box BEFORE functions.box{
//            tabbedPane = TRUE;
//            ADD c.box;
//            ADD s.box;
//            ADD ch.box;
//    }
//   }
//}

FORM checkModel 'Модель прайс чекера'
OBJECTS ch=checkModel FIXED PANEL
PROPERTIES(ch) name, nameModelCheckModel, noteModel, useModel, maxProductModel
EDIT checkModel OBJECT ch;

FORM cashRegisterModel 'Модель касс'
OBJECTS c=cashRegisterModel FIXED PANEL
PROPERTIES(c) name, nameFrontOfficeCashRegisterModel, noteModel, useModel, dateToCashRegisterModel, lettersModel
EDIT cashRegisterModel OBJECT c;

FORM scalesModel 'Модель весов'
OBJECTS s=scalesModel FIXED PANEL
PROPERTIES(s) name, nameFlashScalesModel, noteModel, useModel, maxProductModel, maxTextScalesModel,
              folderScalesModel, lettersModel, compositionScalesModel
EDIT scalesModel OBJECT s;


//---------------------------- группы оборудования ----------------------------------------//

CLASS ABSTRACT groupMachinery 'Группы оборудования';
CLASS groupScales 'Группы весов' : groupMachinery;
CLASS groupCashRegister 'Группы касс' : groupMachinery;
CLASS groupCheck 'Группы прайс чекеров' : groupMachinery;

nameGroupMachinery 'Наименование группы' = DATA STRING[200] (groupMachinery) IN baseGroup;
transferGroupMachinery 'Передать товар на группу оборудования' = DATA BOOLEAN (groupMachinery) IN baseGroup;

cellGroupScales 'Помещать на ценники номера ячеек с этой группы' = DATA BOOLEAN (groupScales) IN baseGroup;
sidSectionGroupScales 'Код отдела в Set Retail' = DATA INTEGER (groupScales) IN baseGroup;
directoryGroupScales 'Директория сервера Set Retail' = DATA STRING[200] (groupScales) IN baseGroup;

departmentStoreGroupMachinery 'Подразделение ИД' = DATA departmentStore (groupMachinery) IN baseGroup;
nameDepartmentStoreGroupMachinery 'Подразделение' (groupMachinery) = name(departmentStoreGroupMachinery(groupMachinery)) IN baseGroup;

//---------------------------- типы оборудования  ----------------------------------------//
CLASS ABSTRACT machinery 'Оборудование';
CLASS cashRegister 'Касса' : machinery, computer;
CLASS scales 'Весы' : machinery;
CLASS check 'Прайс чекер' : machinery;


groupCashRegisterCashRegister 'Группа ИД' = DATA groupCashRegister (cashRegister) IN idGroup;
isGroupCashRegisterCashRegister (groupCashRegister, cashRegister) = groupCashRegisterCashRegister(cashRegister) == groupCashRegister;

groupScalesScales 'Группа ИД' = DATA groupScales (scales) IN idGroup;
isGroupScalesScales (groupScales, scales) = groupScalesScales(scales) == groupScales;

groupCheckCheck 'Группа ИД' = DATA groupCheck (check) IN idGroup;
isGroupCheckCheck (groupCheck, check) = groupCheckCheck(check) == groupCheck;

nameGroupMachineryCashRegister 'Наименование группы' (cashRegister) = nameGroupMachinery(groupCashRegisterCashRegister(cashRegister)) IN baseGroup;
nameGroupMachineryScales 'Наименование группы' (scales) = nameGroupMachinery(groupScalesScales(scales)) IN baseGroup;
nameGroupMachineryCheck 'Наименование группы' (check) = nameGroupMachinery(groupCheckCheck(check)) IN baseGroup;

dataGroupMachineryMachinery 'Наименование группы' (machinery) = UNION EXCLUSIVE nameGroupMachineryCashRegister(machinery), nameGroupMachineryScales(machinery), nameGroupMachineryCheck(machinery);

descriptionMachinery 'Описание' = DATA STRING[200] (machinery) IN baseGroup;
portMachinery 'Адрес/порт' = DATA STRING[100] (machinery) IN baseGroup;
useMachinery 'Оборудование используется' = DATA BOOLEAN (machinery) IN baseGroup;

cashRegisterModelCashRegister 'Модель ИД' = DATA cashRegisterModel (cashRegister) IN idGroup;
numberCashRegister 'Регистрационный номер кассы' = DATA STRING[100] (cashRegister) IN baseGroup;
directoryCashRegister 'Директория обмена с кассой' = DATA STRING[100] (cashRegister) IN baseGroup;
nameCashRegisterModelCashRegister 'Модель кассы' (cashRegister) = name(cashRegisterModelCashRegister(cashRegister)) IN baseGroup;
statusCashRegister 'Статус кассы (на момент посл.передачи)' = DATA STRING[200] (cashRegister) IN baseGroup;
resultCashRegister 'Результат передачи на кассу товаров' = DATA STRING[200] (cashRegister) IN baseGroup;
dateCashRegister 'Дата фискализации кассового аппарата' = DATA DATE (cashRegister) IN baseGroup;
nppCashRegister 'Порядковый номер кассы в торговом объекте ' = DATA INTEGER (cashRegister) IN baseGroup;

CLASS STATIC feature 'Свойство для оборудования'
{
    never 'HET,(пример: для годен это значит - печатаем в поле этикетки "Годен до")',
    always 'ДА для ВСЕХ товаров поместить в состав',
    sometimes 'ДА (для товаров с признаком [Контролировать срок годности по товару?]'
};

scalesModelScales 'Модель ИД' = DATA scalesModel (scales) IN idGroup;
numberScales 'Заводской(серийный) номер ' = DATA STRING[100] (scales) IN baseGroup;
nameScalesModelScales 'Модель весов' (scales) = name(scalesModelScales(scales)) IN baseGroup;
dateScales 'Дата следующей обязательной поверки' = DATA DATE (scales) IN baseGroup;
passScales 'свойство ИД' = DATA feature (scales) IN idGroup;
namePassScales 'Свойство товара [Годен до] помещать в ингредиенты' (scales) = name(UNION OVERRIDE feature.always IF scales IS scales,
                                                                                                  passScales(scales)) IN baseGroup;
manufactureScales 'свойство ИД' = DATA feature (scales) IN idGroup;
nameManufactureScales 'Свойство товара [Дата изг.] помещать в ингредиенты' (scales) = name(UNION OVERRIDE feature.always IF scales IS scales,
                                                                                                  manufactureScales(scales)) IN baseGroup;
productionScales 'свойство ИД' = DATA feature (scales) IN idGroup;
nameProductionScales 'Св-во товара[Срок годн.в часах] поместить в ингр-ты' (scales) = name(UNION OVERRIDE feature.always IF scales IS scales,
                                                                                                  productionScales(scales)) IN baseGroup;
sidScales 'ID весов для Set Retail' = DATA INTEGER (scales) IN baseGroup;


FORM machineries 'Оборудование'
OBJECTS m=machinery
PROPERTIES(m) READONLY objectClassName, descriptionMachinery, dataGroupMachineryMachinery, portMachinery, useMachinery
PROPERTIES(m) ADDFORM, EDITFORM, delete;

FORM cashRegister 'Касса'
OBJECTS c=cashRegister FIXED PANEL
PROPERTIES(c) numberCashRegister, descriptionMachinery, nameGroupMachineryCashRegister, portMachinery, useMachinery, directoryCashRegister, nameCashRegisterModelCashRegister,
              dateCashRegister, nppCashRegister, statusCashRegister, resultCashRegister
EDIT cashRegister OBJECT c;

FORM scales 'Весы'
OBJECTS s=scales FIXED PANEL
PROPERTIES(s) numberScales, descriptionMachinery, nameGroupMachineryScales, portMachinery, useMachinery, nameScalesModelScales,
              dateScales, namePassScales, nameManufactureScales, nameProductionScales, sidScales
EDIT scales OBJECT s;

FORM check 'Прайс чекер'
OBJECTS ch=check FIXED PANEL
PROPERTIES(ch) descriptionMachinery, dataGroupMachineryMachinery, portMachinery, useMachinery
EDIT check OBJECT ch;

FORM groupScales 'Группа весов'
OBJECTS grs=groupScales FIXED PANEL
OBJECTS s=scales
PROPERTIES(grs) nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery, cellGroupScales, sidSectionGroupScales, directoryGroupScales
PROPERTIES(s)   numberScales, descriptionMachinery, nameGroupMachineryScales, portMachinery, useMachinery, nameScalesModelScales,
                dateScales, namePassScales, nameManufactureScales, nameProductionScales, sidScales, ADDOBJ, delete
FILTERGROUP filters1
    FILTER 'Показывать только для данной группы' 'F10' isGroupScalesScales(grs, s) DEFAULT
EDIT groupScales OBJECT grs;

FORM groupsScales 'Группы весов'
OBJECTS grs=groupScales, s=scales
PROPERTIES(grs) READONLY nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery, cellGroupScales, sidSectionGroupScales, directoryGroupScales
PROPERTIES(grs) ADDFORM, EDITFORM, delete
PROPERTIES(s)   READONLY numberScales, descriptionMachinery, nameGroupMachineryScales, portMachinery, useMachinery, nameScalesModelScales,
                dateScales, namePassScales, nameManufactureScales, nameProductionScales, sidScales
FILTERS isGroupScalesScales(grs, s);

FORM groupCashRegister 'Группа касс'
OBJECTS grc=groupCashRegister FIXED PANEL
OBJECTS c=cashRegister
PROPERTIES(grc) nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery
PROPERTIES(c)   numberCashRegister, descriptionMachinery, nameGroupMachineryCashRegister, portMachinery, useMachinery, directoryCashRegister, nameCashRegisterModelCashRegister,
                dateCashRegister, nppCashRegister, statusCashRegister, resultCashRegister, ADDOBJ, delete
FILTERGROUP filters2
    FILTER 'Показывать только для данной группы' 'F10' isGroupCashRegisterCashRegister(grc, c) DEFAULT
EDIT groupCashRegister OBJECT grc;


FORM groupsCashRegister 'Группы касс'
OBJECTS grc=groupCashRegister, c=cashRegister
PROPERTIES(grc)  READONLY nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery
PROPERTIES(grc)  ADDFORM, EDITFORM, delete
PROPERTIES(c)    READONLY numberCashRegister, descriptionMachinery, nameGroupMachineryCashRegister, portMachinery,
                 useMachinery, directoryCashRegister, nameCashRegisterModelCashRegister,
                 dateCashRegister, nppCashRegister, statusCashRegister, resultCashRegister
FILTERS isGroupCashRegisterCashRegister(grc, c);

FORM groupCheck 'Группа прайс чекеров'
OBJECTS grch=groupCheck FIXED PANEL
OBJECTS ch=check
PROPERTIES(grch) nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery
PROPERTIES(ch)   descriptionMachinery, dataGroupMachineryMachinery, portMachinery, useMachinery, ADDOBJ, delete
FILTERGROUP filters3
    FILTER 'Показывать только для данной группы' 'F10' isGroupCheckCheck(grch, ch) DEFAULT
EDIT groupCheck OBJECT grch;

FORM groupsCheck 'Группы прайс чекеров'
OBJECTS grch=groupCheck, ch=check
PROPERTIES(grch) READONLY nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery
PROPERTIES(grch) ADDFORM, EDITFORM, delete
PROPERTIES(ch)   READONLY descriptionMachinery, dataGroupMachineryMachinery, portMachinery, useMachinery
FILTERS isGroupCheckCheck(grch, ch);

// ----------------------------------- Группы пользователей -------------------------------------------------- //

CLASS groupUser 'Группы пользователей';

nameGroupUser 'Наименование группы' = DATA STRING[100] (groupUser) IN baseGroup;
sidGroupUser 'Идентификатор' = DATA STRING[20] (groupUser) IN baseGroup;

groupUserEmployee(employee) = DATA groupUser (employee)  IN idGroup;
nameGroupUserEmployee 'Наименование группы' (employee) = nameGroupUser(groupUserEmployee(employee)) IN baseGroup;

includedEmployeeCashRegister 'Подключить'  = DATA BOOLEAN (employee, cashRegister) IN baseGroup;
dateFromEmployeeCashRegister 'Дата с'  = DATA DATE (employee, cashRegister) IN baseGroup;
dateToEmployeeCashRegister 'Дата по'  = DATA DATE (employee, cashRegister) IN baseGroup;

CLASS STATIC typeAction 'Тип действия'
{
    all 'Все подразделения',
    notAll 'Отдельные подразделения'
};
actionEmployee(employee) = DATA typeAction (employee)  IN idGroup;
nameActionEmployee 'доступ к подразделениям' (employee) = name(UNION OVERRIDE typeAction.all IF employee IS employee,       // по-умолчанию все подразделения
                                                                              actionEmployee(employee)) IN baseGroup;

inEmployeeDepartmentStoreDefault(employee, departmentStore) = DATA BOOLEAN (employee, departmentStore);
inEmployeeDepartmentStore 'Подключить' (employee, departmentStore) = inEmployeeDepartmentStoreDefault(employee, departmentStore) IF actionEmployee(employee) == typeAction.notAll IN baseGroup;
dateFromEmployeeDepartmentStore 'Начало доступа'  = DATA DATE (employee, departmentStore) IN baseGroup;
dateToEmployeeDepartmentStore 'Окончание доступа'  = DATA DATE (employee, departmentStore) IN baseGroup;

isGroupUserEmployee(groupUser, employee) =  groupUserEmployee(employee) == groupUser;

departmentStoreCashRegister(cashRegister) = departmentStoreGroupMachinery(groupCashRegisterCashRegister(cashRegister)) IN idGroup;
nameDepartmentStoreCashRegister 'Наименование отдела' (cashRegister) = name(departmentStoreCashRegister(cashRegister)) IN baseGroup;
nameStoreDepartmentStoreCashRegister 'Наименование магазина' (cashRegister) = name(storeDepartmentStore(departmentStoreCashRegister(cashRegister)))  IN baseGroup;

CONSTRAINT  groupUserEmployee(employee) AND NOT nameActionEmployee(employee) MESSAGE 'Для сотрудника не выбран доступ к подразделениям';
// todo: надо сделать проверку для сотрудника на доступ к подразделению//


FORM groupUser 'Группa пользователей'
    OBJECTS gru=groupUser FIXED PANEL
    OBJECTS e=employee, c=cashRegister, d=departmentStore
    PROPERTIES(gru)  nameGroupUser, sidGroupUser
    PROPERTIES(e)    nameGroupUserEmployee, userFirstName, userLastName, phoneEmployee, nameActionEmployee, nameEmployeeSystemEmployee,
                     shortNameLanguageEmployee, numberEmployee, passwordEmployee, dataEmployee
    PROPERTIES(c)    READONLY nameStoreDepartmentStoreCashRegister, nameDepartmentStoreCashRegister, nameGroupMachineryCashRegister, numberCashRegister, nppCashRegister
    PROPERTIES(e, c) includedEmployeeCashRegister, dateFromEmployeeCashRegister, dateToEmployeeCashRegister
    PROPERTIES(d)    READONLY nameStoreDepartmentStore, name
    PROPERTIES(e, d) dateFromEmployeeDepartmentStore, dateToEmployeeDepartmentStore, inEmployeeDepartmentStore
    FILTERGROUP filters1
        FILTER 'Показывать кассы только для данного пользователя' 'F10' includedEmployeeCashRegister(e, c) DEFAULT
    FILTERGROUP filters2
        FILTER 'Показывать сотрудников только для данной группы пользователей' 'F9' isGroupUserEmployee(gru, e) DEFAULT
    FILTERGROUP filters3
        FILTER 'Показывать подразделения только для данного пользователя' 'F8' inEmployeeDepartmentStore(e, d) DEFAULT
    EDIT groupUser OBJECT gru
    ;

DESIGN groupUser FROM DEFAULT {
    main{
       NEW prop.box BEFORE functions.box {
            ADD c.box;
            ADD d.box;
            POSITION c.box TO THE LEFT d.box;
       }
       NEW xrop.box BEFORE prop.box {
            ADD e.box;
       }

    }
}

FORM groupsUser 'Группы пользователей'
OBJECTS gru=groupUser, e=employee, c=cashRegister, d=departmentStore
PROPERTIES(gru)  READONLY nameGroupUser, sidGroupUser
PROPERTIES(gru)  ADDFORM, EDITFORM, delete
PROPERTIES(e)    READONLY userFirstName, userLastName, phoneEmployee, nameActionEmployee
PROPERTIES(c)    READONLY nameStoreDepartmentStoreCashRegister, nameDepartmentStoreCashRegister, numberCashRegister, nameGroupMachineryCashRegister, nppCashRegister
PROPERTIES(e, c) includedEmployeeCashRegister, dateFromEmployeeCashRegister, dateToEmployeeCashRegister
PROPERTIES(d)    READONLY nameStoreDepartmentStore, name
PROPERTIES(e, d) READONLY dateFromEmployeeDepartmentStore, dateToEmployeeDepartmentStore, inEmployeeDepartmentStore
FILTERS includedEmployeeCashRegister(e, c),
        isGroupUserEmployee(gru, e),
        inEmployeeDepartmentStore(e, d);

DESIGN groupsUser FROM DEFAULT {
    main{
       NEW prop.box BEFORE functions.box {
            tabbedPane = TRUE;
            ADD c.box;
            ADD d.box;
       }
       NEW case.box BEFORE prop.box {
            ADD gru.box;
            ADD e.box;
            POSITION gru.box TO THE LEFT e.box;
       }
   }
}


//---------------------------- Рецепты блюд ----------------------------------------//
CLASS recipe 'Рецепт' : named;
CLASS recipeDetail 'Сырье рецепта';

dishRecipe  'Блюдо (ИД)' = DATA item (recipe) IN idGroup;
CONSTRAINT dishRecipe (recipe) AND NOT isManufacturedItem(dishRecipe(recipe)) CHECKED MESSAGE 'Блюдо должно производиться';
captionDishRecipe 'Блюдо' = captionItem (dishRecipe(recipe)) IN baseGroup;

beginDateRecipe 'Используется с' = DATA DATE (recipe) IN baseGroup;
isUsedRecipe 'Используется' = DATA BOOLEAN (recipe) IN baseGroup;
numberRecipe 'Номер рецептуры (из сборника и пр.)' = DATA STRING[40] (recipe) IN baseGroup;
notesRecipe 'Технология приготовления' = DATA STRING[100] (recipe) IN baseGroup;
outWeightRecipe 'Количество выхода изделия' = DATA DOUBLE (recipe) IN baseGroup;

recipeRecipeDetail 'Рецепт (ИД)' = DATA recipe(recipeDetail) IN baseGroup;
componentRecipeDetail 'Компонент (ИД)' = DATA component(recipeDetail) IN idGroup;
nameComponentRecipeDetail 'Компонент' = name(componentRecipeDetail(recipeDetail)) IN baseGroup;
normQuantityRecipeDetail 'Норма закладки (брутто)' = DATA DOUBLE (recipeDetail) IN baseGroup;

inRecipeRecipeDetail(recipe, recipeDetail) = recipeRecipeDetail(recipeDetail) == recipe;

FORM recipe 'Рецепт блюда'
    OBJECTS r=recipe FIXED PANEL
    PROPERTIES(r) captionDishRecipe, numberRecipe, beginDateRecipe, isUsedRecipe, notesRecipe, outWeightRecipe

    OBJECTS rd=recipeDetail
    PROPERTIES(rd) nameComponentRecipeDetail, normQuantityRecipeDetail, ADDOBJ, delete

    FILTERS inRecipeRecipeDetail(r, rd)

    EDIT recipe OBJECT r
;

FORM recipes 'Рецепты блюд'
    OBJECTS r=recipe
    PROPERTIES(r)  READONLY captionDishRecipe, numberRecipe, isUsedRecipe
    PROPERTIES(r)  ADDFORM, EDITFORM, delete

    OBJECTS rd=recipeDetail
    PROPERTIES(rd) READONLY nameComponentRecipeDetail, normQuantityRecipeDetail

    FILTERS   inRecipeRecipeDetail(r, rd)
;


//---------------------------- Товар на оборудовании ----------------------------------------//

CLASS stage 'Ячейка';
valueStage 'Ячейка' = DATA INTEGER (stage) IN baseGroup;
barcodeStageGroupMachinery 'Штрих-код ИД' = DATA barcode (stage, groupMachinery) IN idGroup;
priceStageGroupMachinery 'Розничная цена для штрих-кода' (stage, groupMachinery) = DATA DOUBLE (stage, groupMachinery) IN baseGroup;
dateStageGroupMachinery 'Дата истечения срока годности' (stage, groupMachinery) = DATA DATE (stage, groupMachinery) IN baseGroup;
timeStageGroupMachinery 'Время истечения срока годности' (stage, groupMachinery) = DATA INTEGER (stage, groupMachinery) IN baseGroup;
stockStageGroupMachinery 'Остаток на момент передачи' (stage, groupMachinery) = DATA DOUBLE (stage, groupMachinery) IN baseGroup;

barcodeBarcodeStageGroupMachinery 'Штрих-код' (stage, groupMachinery) = barcodeEx(barcodeStageGroupMachinery(stage, groupMachinery)) IN baseGroup;
//nameSkuBarcodeStageGroupMachinery 'Товар' (stage, groupMachinery) = nameSkuBarcode(barcodeStageGroupMachinery(stage, groupMachinery)) IN baseGroup;
//titleScalesBarcodeStageGroupMachinery 'Наименование для весов' (stage, groupMachinery) = titleScalesBarcode(barcodeStageGroupMachinery(stage, groupMachinery));
//titleCashBarcodeStageGroupMachinery 'Наименование для касс' (stage, groupMachinery) = titleCashBarcode(barcodeStageGroupMachinery(stage, groupMachinery));
//amountBarcodeStageGroupMachinery 'Количество (сколько списать при продаже)' (stage, groupMachinery) = amountBarcode(barcodeStageGroupMachinery(stage, groupMachinery));
//removeBarcodeStageGroupMachinery 'Заблокирован (удален с оборудования)' (stage, groupMachinery) = removeBarcode(barcodeStageGroupMachinery(stage, groupMachinery));
//commentRemoveBarcodeStageGroupMachinery 'Причина блокировки' (stage, groupMachinery) = commentRemoveBarcode(barcodeStageGroupMachinery(stage, groupMachinery));

FORM stages 'Товары на оборудовании'
OBJECTS gr=groupMachinery
OBJECTS st=stage
PROPERTIES(gr) READONLY nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery
PROPERTIES(st) valueStage
PROPERTIES(st, gr)  barcodeBarcodeStageGroupMachinery, priceStageGroupMachinery, dateStageGroupMachinery,
                    timeStageGroupMachinery, stockStageGroupMachinery
FILTERS  barcodeStageGroupMachinery(st, gr);

//---------------------------- Количественные регистры ----------------------------------------//

CLASS ABSTRACT balanceItemLedger 'Изменение остатка по товару';
TABLE balanceItemLedger (balanceItemLedger);

//---------------------------- Ценовые регистры ----------------------------------------//

CLASS ABSTRACT importerPriceLedger 'Изменение цены изготовителя/импортера';
TABLE importerPriceLedger (importerPriceLedger);

CLASS ABSTRACT retailVATLedger 'Изменение НДС';
TABLE retailVATLedger (retailVATLedger);

CLASS ABSTRACT accountPriceLedger 'Изменение учетной цены';
TABLE accountPriceLedger (accountPriceLedger);

CLASS ABSTRACT retailPriceLedger 'Изменение розничной цены';
TABLE retailPriceLedger (retailPriceLedger);

CLASS ABSTRACT warePriceLedger 'Изменение цены посуды';
TABLE warePriceLedger (warePriceLedger);

//---------------------------- Суммовые регистры ----------------------------------------//

CLASS ABSTRACT accountSumDocumentLedger 'Учетный документ';
TABLE accountSumDocumentLedger (accountSumDocumentLedger);

CLASS ABSTRACT incAccountSumDocumentLedger 'Учетный документ (приход)' : accountSumDocumentLedger;
CLASS ABSTRACT outAccountSumDocumentLedger 'Учетный документ (расход)' : accountSumDocumentLedger;

CLASS ABSTRACT incAccountSumHistoryDocumentLedger 'Учетный документ (приход, с историей)' : incAccountSumDocumentLedger, historyObject;
CLASS ABSTRACT outAccountSumHistoryDocumentLedger 'Учетный документ (расход, с историей)' : outAccountSumDocumentLedger, historyObject;

//---------------------------- Переоценка (абстрактные классы) ----------------------------------------//

CLASS ABSTRACT priceChangeDocument 'Акт переоценки' : incAccountSumDocumentLedger;
TABLE priceChangeDocument (priceChangeDocument);

CLASS ABSTRACT priceChangeDocumentDetail 'Строка переоценки';
TABLE priceChangeDocumentDetail (priceChangeDocumentDetail);

//---------------------------- Карты проработки (разруба) ----------------------------------------//
GROUP cutGroup 'Разделка' : baseGroup;
GROUP actGroup 'Акт' : publicGroup;
GROUP contractorGroup 'Контрагент' : publicGroup;
GROUP itemStudyOutputDetailInfo 'Ценовый характеристики п/ф' : publicGroup;

CLASS cutting 'Карта проработки (разделки)' : named;
CLASS detailCutting 'Компонента';

CLASS actOfStudy 'Акт проработки (разделки)' : historyObject;
CLASS actOfStudyPosted 'Акт проработки закрытый' : actOfStudy, postedObject;
TABLE actOfStudy (actOfStudy);

CLASS studyInputDetail 'Товар' : balanceItemLedger;
CLASS studyOutputDetail 'Полуфабрикаты' : balanceItemLedger, importerPriceLedger, retailVATLedger, accountPriceLedger, retailPriceLedger;

@metaCodePostedObject (actOfStudy);
      //      ??????????????????? не понятно что делать с процентом надбавок ??????????????????????   //

sidCutting 'Номер карты (из сборника и прочее)' = DATA INTEGER (cutting) IN cutGroup;

dateCutting 'Дата создания' = DATA DATE (cutting) IN cutGroup;
dateCutting(cutting) <- currentDate() ON ASSIGN cutting IS cutting;

useCutting 'Используется' = DATA BOOLEAN (cutting) IN cutGroup;
//             номер из сборника.....
descriptionCutting 'Описание' = DATA STRING[200] (cutting) IN cutGroup;
percAllowancesCutting 'Процент надбавок, %' = DATA DOUBLE (cutting) IN cutGroup;
percLossesCutting 'Процент потерь, %' = DATA DOUBLE (cutting) IN cutGroup;
percSweepsCutting 'Процент зачисток, %' = DATA DOUBLE (cutting) IN cutGroup;
inDepartmentStoreCutting 'В каких подразделениях разрешено использовать карту' = DATA BOOLEAN (departmentStore, cutting) IN baseGroup;

cuttingDetailCutting 'Строка (ИД)' = DATA cutting (detailCutting) IN idGroup;
sidCuttingDetailCutting 'Номер карты' (detailCutting) =  sidCutting(cuttingDetailCutting(detailCutting)) IN cutGroup;
itemDetailCutting 'Товар (ИД)' = DATA item (detailCutting) IN idGroup;
shortNameUnitOfMeasureItemDetailCutting 'Ед.изм.' (detailCutting) = shortNameUnitOfMeasureItem(itemDetailCutting(detailCutting)) IN cutGroup;
captionItemDetailCutting 'Наименование компонента' (detailCutting) = captionItem (itemDetailCutting(detailCutting)) IN cutGroup;
factorDetailCutting 'Рассчетный коэффициент цены' = DATA DOUBLE (detailCutting) IN cutGroup;
percGoodsDetailCutting '% выхода компонента (п/ф)' = DATA DOUBLE (detailCutting) IN cutGroup;

notTotalPercGoodsDetailCutting (cutting) = GROUP SUM percGoodsDetailCutting(detailCutting) BY cuttingDetailCutting(detailCutting);
totalPercGoodsDetailCutting 'Итого % выхода по карте проработки (разделки)' (cutting) = notTotalPercGoodsDetailCutting(cutting)+ percLossesCutting(cutting)+ percSweepsCutting(cutting);
highlightCutting(cutting) = totalPercGoodsDetailCutting(cutting) > 100;

uniqueDetailCuttingCutting 'Компонента по карте переработки и товару' (cutting, item) = GROUP UNIQUE detailCutting BY cuttingDetailCutting(detailCutting), itemDetailCutting(detailCutting);
isCuttingDetailCutting(cutting, detailCutting) = cuttingDetailCutting(detailCutting) == cutting;

inItemCutting 'Вкл.' = DATA BOOLEAN (item, cutting) IN cutGroup;

// Акты проработки

departmentStoreActOfStudy (actOfStudy)= DATA departmentStore (actOfStudy) IN idGroup;
nameDepartmentStoreActOfStudy 'Подразделение' (actOfStudy) = name(departmentStoreActOfStudy(actOfStudy));
numberActOfStudy 'Номер акта' = DATA STRING[10] (actOfStudy) IN baseGroup;

dateActOfStudy 'Дата документа' (actOfStudy) = DATA DATE (actOfStudy) IN baseGroup;
    dateActOfStudy (actOfStudy) <- currentDate() ON ASSIGN actOfStudy AS actOfStudy;

timeActOfStudy 'Время документа' (actOfStudy) = DATA TIME (actOfStudy) IN baseGroup;
    timeActOfStudy (actOfStudy) <- currentTime() ON ASSIGN actOfStudy AS actOfStudy;

dateTimeActOfStudy 'Дата/время документа' (actOfStudy) = toDateTime(dateActOfStudy(actOfStudy), timeActOfStudy(actOfStudy));


contractorDepartmentStoreActOfStudy (actOfStudy)= DATA departmentStore (actOfStudy) IN idGroup;
nameContractorDepartmentStoreActOfStudy 'Подразделение-контрагент' (actOfStudy) = name(contractorDepartmentStoreActOfStudy(actOfStudy)) IN contractorGroup;

waybillOutputActOfStudy 'Номер расходной накладной' (actOfStudy) = DATA STRING[7] (actOfStudy) IN contractorGroup FIXEDCHARWIDTH 7;
waybillInputActOfStudy 'Номер приходной накладной' (actOfStudy) = DATA STRING[7] (actOfStudy) IN contractorGroup FIXEDCHARWIDTH 7;

seriesOutputActOfStudy 'Серия расходной накладной' (actOfStudy) = DATA STRING[2] (actOfStudy) IN contractorGroup FIXEDCHARWIDTH 3;
seriesInputActOfStudy 'Серия приходной накладной' (actOfStudy) = DATA STRING[2] (actOfStudy) IN contractorGroup FIXEDCHARWIDTH 3;


actOfStudyStudyInputDetail = DATA actOfStudy (studyInputDetail) IN idGroup;

departmentStoreStudyInputDetail (studyInputDetail) = departmentStoreActOfStudy(actOfStudyStudyInputDetail(studyInputDetail));

itemStudyInputDetail = DATA item (studyInputDetail) IN idGroup;
nameAttributeItemStudyInputDetail 'Товар' (studyInputDetail) = nameAttributeItem(itemStudyInputDetail(studyInputDetail)) MINCHARWIDTH 20 PREFCHARWIDTH 20;

counterStudyInputDetail 'Порядковый номер' (studyInputDetail) = PARTITION SUM 1 IF studyInputDetail IS studyInputDetail
    BY actOfStudyStudyInputDetail(studyInputDetail) ORDER studyInputDetail IN baseGroup;

cuttingStudyInputDetail = DATA cutting (studyInputDetail) IN idGroup;
sidCuttingStudyInputDetail 'Номер карты' (studyInputDetail) = sidCutting(cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
dateCuttingStudyInputDetail 'Дата создания карты' (studyInputDetail) = dateCutting(cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
descriptionCuttingStudyInputDetail 'Описание' (studyInputDetail) = descriptionCutting(cuttingStudyInputDetail(studyInputDetail)) IN actGroup MINCHARWIDTH 20 PREFCHARWIDTH 20;

percAllowancesCuttingStudyInputDetail 'Процент надбавок, %' (studyInputDetail) = percAllowancesCutting(cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
percLossesCuttingStudyInputDetail 'Процент потерь, %' (studyInputDetail) = percLossesCutting (cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
percSweepsCuttingStudyInputDetail 'Процент зачисток, %' (studyInputDetail) = percSweepsCutting (cuttingStudyInputDetail(studyInputDetail)) IN actGroup;

quantityStudyInputDetail 'Количество для разруба' (studyInputDetail) = DATA DOUBLE (studyInputDetail);

retailPriceStudyInputDetail 'Цена за ед.' (studyInputDetail) = DATA DOUBLE (studyInputDetail);
totalStudyInputDetail 'Сумма' (studyInputDetail) = retailPriceStudyInputDetail(studyInputDetail)*quantityStudyInputDetail(studyInputDetail);
subtotalActOfStudy 'Сумма расхода по акту' (actOfStudy) = GROUP SUM totalStudyInputDetail(studyInputDetail) BY actOfStudyStudyInputDetail(studyInputDetail);


dateStudyInputDetail 'Дата' (studyInputDetail) = dateActOfStudy(actOfStudyStudyInputDetail(studyInputDetail)) PERSISTENT;

importerPriceStudyInputDetail 'Текущая цена изгтовителя/импортера' (studyInputDetail) = DATA DOUBLE (studyInputDetail);


retailRangeStudyInputDetail(studyInputDetail) = DATA range (studyInputDetail) IN idGroup;
numberRetailRangeStudyInputDetail 'Номер НДС розничный' (studyInputDetail) = dataRange(retailRangeStudyInputDetail(studyInputDetail));

dataRetailRangeStudyInputDetail 'Текущий НДС розничный,%' (studyInputDetail) =
   dataActingRateRangeDate(retailRangeStudyInputDetail(studyInputDetail),  dateStudyInputDetail(studyInputDetail)) IN baseGroup;

//inDepartmentStoreCuttingByStudyInputDetail(studyInputDetail) = inDepartmentStoreCutting(departmentStoreStudyInputDetail(studyInputDetail), cuttingStudyInputDetail(studyInputDetail));
//inItemCuttingByStudyInputDetail (studyInputDetail) = inItemCutting(itemStudyInputDetail(studyInputDetail), cuttingStudyInputDetail(studyInputDetail));
//useCuttingStudyInputDetail 'Используется' (studyInputDetail) = useCutting(cuttingStudyInputDetail(studyInputDetail));
//
//useCuttingByStudyInputDetail 'Пригодная карта для товара, подразделения и исп-ся' (studyInputDetail) =
//    inItemCutting(itemStudyInputDetail(studyInputDetail), cuttingStudyInputDetail(studyInputDetail)) AND
//    inDepartmentStoreCutting(departmentStoreStudyInputDetail(studyInputDetail), cuttingStudyInputDetail(studyInputDetail)) AND
//    useCuttingStudyInputDetail(studyInputDetail);


studyInputDetailStudyOutputDetail = DATA studyInputDetail (studyOutputDetail) IN idGroup;
actOfStudyStudyOutputDetail(studyOutputDetail) = actOfStudyStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail));

itemStudyOutputDetail 'Товар' = DATA item (studyOutputDetail) IN idGroup;
shortNameUnitOfMeasureItemStudyOutputDetail 'Ед.изм.' (studyOutputDetail) = shortNameUnitOfMeasureItem(itemStudyOutputDetail(studyOutputDetail)) IN actGroup;
captionItemStudyOutputDetail 'Наименование компонента' (studyOutputDetail) = captionItem (itemStudyOutputDetail(studyOutputDetail)) IN actGroup;
factorStudyOutputDetail 'Рассчетный коэффициент цены' = DATA DOUBLE (studyOutputDetail) IN actGroup;
percGoodsStudyOutputDetail '% выхода компонента (п/ф)' = DATA DOUBLE (studyOutputDetail) IN actGroup;
percAllowancesStudyOutputDetail 'Процент надбавок, %' = DATA DOUBLE (studyOutputDetail) IN actGroup;


quantityStudyInputDetailStudyOutputDetail (studyOutputDetail) = quantityStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail));
retailPriceStudyInputDetailStudyOutputDetail (studyOutputDetail) = retailPriceStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail));

quantityStudyOutputDetail 'Количество выхода п/ф' (studyOutputDetail) =  [X*Y/100]
    (percGoodsStudyOutputDetail(studyOutputDetail), quantityStudyInputDetailStudyOutputDetail(studyOutputDetail));

actualQuantityStudyOutputDetail 'Фактический выхода п/ф'(studyOutputDetail) = DATA DOUBLE (studyOutputDetail);
overQuantityStudyOutputDetail(studyOutputDetail) = UNION OVERRIDE quantityStudyOutputDetail(studyOutputDetail),
                                                                  actualQuantityStudyOutputDetail(studyOutputDetail);

notRoundRetailPriceStudyOutputDetail 'Цена' (studyOutputDetail) = [X*Y*(100+Z)/100]
    (factorStudyOutputDetail(studyOutputDetail), retailPriceStudyInputDetailStudyOutputDetail(studyOutputDetail), percAllowancesStudyOutputDetail(studyOutputDetail));
roundRetailPriceStudyOutputDetail 'Округленная цена' (studyOutputDetail) = roundMinus1(notRoundRetailPriceStudyOutputDetail(studyOutputDetail));

retailPriceStudyOutputDetail 'Розничная цена' (studyOutputDetail) = DATA DOUBLE (studyOutputDetail);

totalStudyOutputDetail 'Сумма' (studyOutputDetail)= retailPriceStudyOutputDetail(studyOutputDetail) * overQuantityStudyOutputDetail(studyOutputDetail);

subtotalStudyInputDetail 'Итого сумма  прихода п/ф по товару' (studyInputDetail) = GROUP SUM totalStudyOutputDetail(studyOutputDetail) BY studyInputDetailStudyOutputDetail(studyOutputDetail);

subtotalByActOfStudy 'Сумма прихода по акту' (actOfStudy) = GROUP SUM totalStudyOutputDetail(studyOutputDetail) BY actOfStudyStudyOutputDetail(studyOutputDetail);

notTotalPercGoodsStudyInputDetail (studyInputDetail)= GROUP SUM percGoodsStudyOutputDetail(studyOutputDetail) BY studyInputDetailStudyOutputDetail(studyOutputDetail);
totalPercGoodsStudyInputDetail 'Итого % выхода по товару' (studyInputDetail) = [X+Y+Z]
    (notTotalPercGoodsStudyInputDetail(studyInputDetail), percLossesCuttingStudyInputDetail(studyInputDetail), percSweepsCuttingStudyInputDetail(studyInputDetail));
highlightStudyInputDetail(studyInputDetail) = totalPercGoodsStudyInputDetail(studyInputDetail) > 100;


departmentStoreStudyOutputDetail(studyOutputDetail) = departmentStoreStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail));

dateStudyOutputDetail 'Дата' (studyOutputDetail) = dateStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail)) PERSISTENT;

importerPriceForStudyOutputDetail(studyOutputDetail)  = importerPriceStudyInputDetail (studyInputDetailStudyOutputDetail(studyOutputDetail));
countImporterPriceStudyOutputDetail (studyOutputDetail) = factorStudyOutputDetail(studyOutputDetail) * importerPriceForStudyOutputDetail(studyOutputDetail);
roundImporterPriceStudyOutputDetail 'Округленная цена импортера' (studyOutputDetail) = roundMinus1(countImporterPriceStudyOutputDetail(studyOutputDetail));

curImporterPriceStudyOutputDetail 'Текущая цена изгтовителя/импортера' (studyOutputDetail) = DATA DOUBLE (studyOutputDetail) IN itemStudyOutputDetailInfo;
importerPriceStudyOutputDetail 'Цена изгтовителя/импортера' (studyOutputDetail) = DATA DOUBLE (studyOutputDetail) IN baseGroup;

curRetailPriceStudyOutputDetail 'Текущая розничная цена' (studyOutputDetail) = DATA DOUBLE (studyOutputDetail) IN itemStudyOutputDetailInfo;
curRetailRangeStudyOutputDetail(studyOutputDetail) = DATA range (studyOutputDetail) IN idGroup;

curDataRetailRangeStudyOutputDetail 'Текущий НДС розничный,%' (studyOutputDetail) =
   dataActingRateRangeDate(curRetailRangeStudyOutputDetail(studyOutputDetail),  dateStudyOutputDetail(studyOutputDetail)) IN itemStudyOutputDetailInfo;

retailRangeStudyOutputDetail(studyOutputDetail) = DATA range (studyOutputDetail);

dataRetailRangeStudyOutputDetail 'Новый НДС розничный,%' (studyOutputDetail) =
   dataActingRateRangeDate(retailRangeStudyOutputDetail(studyOutputDetail),  dateStudyOutputDetail(studyOutputDetail));

//---------------------------- Документы изменяющие суммы при разрубе --------------------------------//

CLASS consumption 'Расходный документ (разруб)' : outAccountSumDocumentLedger;
CLASS parish 'Приходный документ (разруб)' : incAccountSumDocumentLedger;

isActOfStudy(actOfStudy) = actOfStudy IS actOfStudy AND contractorDepartmentStoreActOfStudy(actOfStudy);

         //  приходный документ //
@metaCodeSingleAggregation(actOfStudy, parish, isActOfStudy);

waybillInputParish 'Номер приходной накладной' (parish) = waybillInputActOfStudy(actOfStudyParish(parish));
seriesInputParish 'Серия приходной накладной' (parish) = seriesInputActOfStudy(actOfStudyParish(parish));

dateTimeParish 'Дата/время' (parish) = dateTimeActOfStudy(actOfStudyParish(parish));
subtotalParish 'Сумма прихода' (parish) = subtotalByActOfStudy(actOfStudyParish(parish));
departmentStoreParish (parish) = departmentStoreActOfStudy(actOfStudyParish(parish));
isPostedParish (parish) = isPostedActOfStudy(actOfStudyParish(parish));
dateParish (parish) = dateActOfStudy(actOfStudyParish(parish));
numberParish 'Номер акта' (parish) = numberActOfStudy(actOfStudyParish(parish));

contractorDepartmentStoreParish (parish) = contractorDepartmentStoreActOfStudy(actOfStudyParish(parish));
nameContractorDepartmentStoreParish 'Отдел поставки' (parish) = name(contractorDepartmentStoreParish(parish));

castParishObjectsToString100=
    FORMULA STRING[200] '\'Акт разруба приход \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)';

descriptionParish 'Название документа' (parish) = castParishObjectsToString100(
    numberParish(parish), dateParish(parish), nameContractorDepartmentStoreParish(parish));

descriptionStudyOutputDetail 'Название документа' (studyOutputDetail) = castParishObjectsToString100(
    numberActOfStudy(actOfStudyStudyOutputDetail(studyOutputDetail)), dateActOfStudy(actOfStudyStudyOutputDetail(studyOutputDetail)),
    nameContractorDepartmentStoreActOfStudy(actOfStudyStudyOutputDetail(studyOutputDetail)));

        //  расходный документ //
@metaCodeSingleAggregation(actOfStudy, consumption, isActOfStudy);

dateTimeConsumption 'Дата/время' (consumption) = dateTimeActOfStudy(actOfStudyConsumption(consumption));
subtotalConsumption 'Сумма расхода' (consumption) = subtotalActOfStudy(actOfStudyConsumption(consumption));
departmentStoreConsumption (consumption) = departmentStoreActOfStudy(actOfStudyConsumption(consumption));
isPostedConsumption (consumption) = isPostedActOfStudy(actOfStudyConsumption(consumption));
dateConsumption (consumption) = dateActOfStudy(actOfStudyConsumption(consumption));
numberConsumption 'Номер акта' (consumption) = numberActOfStudy(actOfStudyConsumption(consumption));

contractorDepartmentStoreConsumption (consumption) = contractorDepartmentStoreActOfStudy(actOfStudyConsumption(consumption));
nameContractorDepartmentStoreConsumption 'Отдел назначения' (consumption) = name(contractorDepartmentStoreConsumption(consumption));

castConsumptionObjectsToString100=
    FORMULA STRING[200] '\'Акт разруба расход \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)';

descriptionConsumption 'Название документа' (consumption) = castConsumptionObjectsToString100(
    numberConsumption(consumption), dateConsumption(consumption), nameContractorDepartmentStoreConsumption(consumption));

descriptionStudyInputDetail 'Название документа' (studyInputDetail) = castConsumptionObjectsToString100(
    numberActOfStudy(actOfStudyStudyInputDetail(studyInputDetail)), dateActOfStudy(actOfStudyStudyInputDetail(studyInputDetail)),
    nameContractorDepartmentStoreActOfStudy(actOfStudyStudyInputDetail(studyInputDetail)));

//---------------------------- Изменение остатка и цены при разрубе --------------------------------//

dateTimeStudyOutputDetail 'Дата/время' (studyOutputDetail) = dateTimeActOfStudy(actOfStudyStudyOutputDetail(studyOutputDetail));
isPostedStudyOutputDetail 'Закрыт' (studyOutputDetail)= isPostedActOfStudy(actOfStudyStudyOutputDetail(studyOutputDetail));

dateTimeStudyInputDetail 'Дата/время' (studyInputDetail) = dateTimeActOfStudy(actOfStudyStudyInputDetail(studyInputDetail));
isPostedStudyInputDetail 'Закрыт' (studyInputDetail)  = isPostedActOfStudy(actOfStudyStudyInputDetail(studyInputDetail));

toFillStudyOutputDetailsStudyInputDetail 'Заполнить данные для п/ф' (studyInputDetail) =  ACTION (studyInputDetail) {
    FOR cuttingDetailCutting(detailCutting) == cuttingStudyInputDetail(studyInputDetail) DO {
        ADDOBJ studyOutputDetail;
        FOR sod == addedObject() DO {
            SET itemStudyOutputDetail(sod) <- itemDetailCutting(detailCutting);
            SET factorStudyOutputDetail(sod) <- factorDetailCutting(detailCutting);
            SET percGoodsStudyOutputDetail(sod) <- percGoodsDetailCutting(detailCutting);
            SET percAllowancesStudyOutputDetail(sod) <- percAllowancesCutting(cuttingDetailCutting(detailCutting));
            SET retailPriceStudyOutputDetail(sod) <- roundRetailPriceStudyOutputDetail(sod);
            SET importerPriceStudyOutputDetail(sod) <- roundImporterPriceStudyOutputDetail(sod);
            SET retailRangeStudyOutputDetail(sod) <- retailRangeStudyInputDetail(studyInputDetailStudyOutputDetail(sod));
        };
    }
} CONFIRM;

showNotStudyInputDetailStudyOutputDetail(studyInputDetail, studyOutputDetail) = studyInputDetail IS studyInputDetail AND NOT studyInputDetailStudyOutputDetail(studyOutputDetail);


cleanAllStudyInputDetail 'Очистить документ' = ACTION (studyInputDetail) {
    FOR studyInputDetailStudyOutputDetail(studyOutputDetail) == studyInputDetail DO {
        EXEC delete(studyOutputDetail AS studyOutputDetail);
    }
} CONFIRM;


FORM cutting 'Карта проработки'
OBJECTS c=cutting FIXED PANEL
OBJECTS d=detailCutting, dep=departmentStore, i=item
PROPERTIES(c)      sidCutting, descriptionCutting, dateCutting, useCutting, percAllowancesCutting, percLossesCutting, percSweepsCutting
PROPERTIES(c)         totalPercGoodsDetailCutting TODRAW d FORCE PANEL  HIGHLIGHTIF highlightCutting(c)

PROPERTIES(d)      captionItemDetailCutting, shortNameUnitOfMeasureItemDetailCutting, factorDetailCutting, percGoodsDetailCutting, ADDOBJ, delete
PROPERTIES(dep)    nameStoreDepartmentStore, name
PROPERTIES(i)      nameAttributeItem, shortNameUnitOfMeasureItem, nameBrandItem
PROPERTIES(dep, c) inDepartmentStoreCutting
PROPERTIES(i, c)   inItemCutting

FILTERS isCuttingDetailCutting(c, d)
FILTERGROUP filters7
    FILTER 'Показывать подразделения только для данной карты' 'F10' inDepartmentStoreCutting(dep, c) DEFAULT
FILTERGROUP filters8
    FILTER 'Показывать товар только для данной карты' 'F9' inItemCutting(i, c) DEFAULT

EDIT cutting OBJECT c;

DESIGN cutting FROM DEFAULT {
    main{
       preferredSize = (1024, 768);

       NEW cut.box BEFORE functions.box{
            tabbedPane = TRUE;
            ADD d.box;
            ADD dep.box { title = 'Подразделение'; }
            ADD i.box { title = 'Товар, для которого действует карта'; }
       }
   }
}

FORM cuttings 'Карты проработки'
    OBJECTS c=cutting
    PROPERTIES(c)      READONLY sidCutting, descriptionCutting, dateCutting, useCutting, percAllowancesCutting, percLossesCutting, percSweepsCutting
    PROPERTIES(c)      ADDFORM, EDITFORM, delete

    OBJECTS d=detailCutting
    PROPERTIES(d)      READONLY captionItemDetailCutting, shortNameUnitOfMeasureItemDetailCutting, factorDetailCutting, percGoodsDetailCutting

    OBJECTS dep=departmentStore
    PROPERTIES(dep)    READONLY nameStoreDepartmentStore, name

    OBJECTS i=item
    PROPERTIES(i)      READONLY nameAttributeItem, shortNameUnitOfMeasureItem, nameBrandItem

    PROPERTIES(dep, c) READONLY inDepartmentStoreCutting

    PROPERTIES(i, c) READONLY inItemCutting

    FILTERS   isCuttingDetailCutting(c, d),
              inDepartmentStoreCutting(dep, c),
              inItemCutting(i, c)
    ORDER BY           nameStoreDepartmentStore, sidCutting, captionItemDetailCutting, name
;


DESIGN cuttings FROM DEFAULT {
    main{

       NEW cut2.box BEFORE functions.box{
            ADD dep.box { title = 'Подразделение'; }

            ADD i.box { title = 'Товар, для которого действует карта'; }
            POSITION dep.box TO THE LEFT i.box;
       }
       NEW cut1.box BEFORE cut2.box{
            ADD d.box;

       }
   }
}

FORM sidCuttingStudyInputDetail 'Возможные карты проработки'
    OBJECTS dep=departmentStore FIXED PANEL, i=item FIXED PANEL

    PROPERTIES         READONLY depName = name(dep)
    PROPERTIES         READONLY nameAttributeItem(i)

    OBJECTS c=cutting
    PROPERTIES(c)      READONLY sidCutting, descriptionCutting, dateCutting, useCutting, percAllowancesCutting, percLossesCutting,
                       percSweepsCutting, totalPercGoodsDetailCutting

    FILTERS            inDepartmentStoreCutting(dep, c),
                       inItemCutting(i, c),
                       useCutting(c)
;

DESIGN sidCuttingStudyInputDetail FROM DEFAULT {
    PROPERTY(depName) {
        focusable = FALSE;
    }
    PROPERTY(nameAttributeItem) {
        focusable = FALSE;
    }
}

showSidCuttingStudyInputDetail 'Карта проработки' = ACTION (detail) {
    FORM sidCuttingStudyInputDetail OBJECTS dep=departmentStoreStudyInputDetail(detail), i=itemStudyInputDetail(detail) MODAL;//  DEFAULT;        //sidCuttingStudyInputDetail
    IF formResult() == formResult.ok THEN {
        SET cuttingStudyInputDetail(detail) <- chosenObject('c');
    }
} SHORTCUT sidCuttingStudyInputDetail DEFAULT;



FORM actOfStudy 'Акт проработки'

    OBJECTS a=actOfStudy FIXED PANEL

    PROPERTIES(a)      numberActOfStudy, nameDepartmentStoreActOfStudy, dateTimeActOfStudy, nameContractorDepartmentStoreActOfStudy,
                       waybillOutputActOfStudy, seriesOutputActOfStudy, waybillInputActOfStudy, seriesInputActOfStudy

    OBJECTS sid=studyInputDetail
    OBJECTS sod=studyOutputDetail

    PROPERTIES(sid) nameAttributeItemStudyInputDetail, showSidCuttingStudyInputDetail
    PROPERTIES(sid) sidCuttingStudyInputDetail, dateCuttingStudyInputDetail, descriptionCuttingStudyInputDetail,
                    percAllowancesCuttingStudyInputDetail, percLossesCuttingStudyInputDetail, percSweepsCuttingStudyInputDetail,
                    retailPriceStudyInputDetail
    PROPERTIES(sid) quantityStudyInputDetail, totalStudyInputDetail, toFillStudyOutputDetailsStudyInputDetail FORCE PANEL SHOWIF showNotStudyInputDetailStudyOutputDetail(sid,sod),
                    cleanAllStudyInputDetail FORCE PANEL, ADDOBJ, delete
    PROPERTIES(sid) importerPriceStudyInputDetail FORCE PANEL, dataRetailRangeStudyInputDetail FORCE PANEL,
                    totalPercGoodsStudyInputDetail FORCE PANEL HIGHLIGHTIF highlightStudyInputDetail(sid)

    PROPERTIES(sod) captionItemStudyOutputDetail, shortNameUnitOfMeasureItemStudyOutputDetail, importerPriceStudyOutputDetail, factorStudyOutputDetail, percGoodsStudyOutputDetail,
                    percAllowancesStudyOutputDetail, quantityStudyOutputDetail, actualQuantityStudyOutputDetail, retailPriceStudyOutputDetail, totalStudyOutputDetail

    PROPERTIES(sod) curImporterPriceStudyOutputDetail FORCE PANEL, curDataRetailRangeStudyOutputDetail FORCE PANEL,
                    curRetailPriceStudyOutputDetail FORCE PANEL

    FILTERS         actOfStudyStudyInputDetail(sid)==a,
                    studyInputDetailStudyOutputDetail(sod) == sid

    EDIT actOfStudy OBJECT a
;

DESIGN actOfStudy FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        a.box {

            NEW firstCase {
                childConstraints = TO THE RIGHT;
                title = 'Акт проработки';
                ADD PROPERTY (numberActOfStudy);
                ADD PROPERTY (nameDepartmentStoreActOfStudy);
                ADD PROPERTY (dateTimeActOfStudy);
            }

            ADD a.contractorGroup AFTER firstCase {
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(nameContractorDepartmentStoreActOfStudy);
                NEW secondCase {
                    title = 'Расход';
                    ADD PROPERTY(waybillOutputActOfStudy);
                    ADD PROPERTY(seriesOutputActOfStudy);
                }
                NEW thirdCase {
                    title = 'Приход';
                    ADD PROPERTY(waybillInputActOfStudy);
                    ADD PROPERTY(seriesInputActOfStudy);
                }
                POSITION secondCase TO THE LEFT thirdCase;
            }

        }

    }

}


FORM actOfStudies 'Акты проработки'

    OBJECTS a=actOfStudy
    PROPERTIES(a)      READONLY objectClassName, numberActOfStudy, nameDepartmentStoreActOfStudy, timeCreated FORCE PANEL,
                       nameUserCreated FORCE PANEL, hostnameComputerCreated FORCE PANEL, timeClosed, nameUserClosed, hostnameComputerClosed,
                       subtotalByActOfStudy, subtotalActOfStudy
    PROPERTIES(a)      ADDFORM, EDITFORM SHOWIF isDraftActOfStudy(a), delete FORCE PANEL SHOWIF isDraftActOfStudy(a),
                       postActOfStudy SHOWIF isDraftActOfStudy(a), unpostActOfStudy SHOWIF isPostedActOfStudy(a)
;

DESIGN actOfStudies FROM DEFAULT {
    PROPERTY(objectClassName) {
        preferredCharWidth = 25;
    }
    PROPERTY (delete(a)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
    POSITION a.historyGroup TO THE LEFT a.postedGroup;
}

//---------------------------- Проведение инвентаризации ----------------------------------------//

CLASS inventory 'Инвентаризация (открытая)' : historyObject, numeratedObject;
TABLE inventory (inventory);
CLASS inventoryPosted 'Инвентаризация (закрытая)' : inventory, postedObject;

CLASS listInventory 'Опись (открытая)';
TABLE listInventory (listInventory);
CLASS listInventoryPosted 'Опись (закрытая)' : listInventory, postedObject;

CLASS ABSTRACT collationSheet 'Сличительная ведомость' : outAccountSumDocumentLedger;
TABLE collationSheet (collationSheet);

CLASS registerCollationSheet 'Сличительная ведомость по описи' : collationSheet;
CLASS remainsCollationSheet 'Сличительная ведомость по остаткам' : collationSheet;
CLASS manyCollationSheet 'Сличительная ведомость по множеству товаров' : collationSheet;
CLASS pageList 'Страница описи';
CLASS detailPage 'Строка';
CLASS STATIC typeOfAddition 'Тип сличительной ведомости' {
    register 'Товары из описей',
    remains 'Товары по остаткам',
    many    'Множество товаров'
};

GROUP inventoryGroup 'Информация об инвентаризации' : publicGroup;
GROUP inventGroup 'Вспомогательные' : publicGroup;
GROUP collationSheetGroup 'Информация о сличительных ведомостях' : baseGroup;
GROUP listInventoryGroup 'Информация об описях' : baseGroup;
GROUP inventoryCommitteeGroup 'Комиссия' : baseGroup;
GROUP adverbGroup 'Итого' : baseGroup;

castToString30 = FORMULA STRING[30] '$1 || CAST ($2 AS character(20))';

@metaCodePostedObject (inventory) ;

nameInventory 'Название инвентаризации' = DATA STRING[100] (inventory) IN inventoryGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
dateInventory 'Дата инвентаризации' = DATA DATE (inventory) IN inventGroup;
timeInventory 'Время инвентаризации' = DATA TIME (inventory) IN inventGroup;
noteInventory 'Примечание (основание)' = DATA STRING[500] (inventory) IN inventGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
infoInventory 'Дополнительная информация по инвентаризации' = DATA STRING[500] (inventory) IN inventGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
typeOfAdditionInventory(inventory) = DATA typeOfAddition (inventory) IN idGroup;
nameTypeOfAdditionInventory 'Тип сличительной ведомости' (inventory) = name(typeOfAdditionInventory(inventory)) IN inventoryGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;

dateTimeInventory 'Выставить остатки на дату/время' (inventory) = toDateTime(dateInventory(inventory), timeInventory(inventory));

departmentStoreCollationSheet(collationSheet) = DATA departmentStore (collationSheet) IN idGroup;
inventoryCollationSheet(collationSheet) = DATA inventory (collationSheet) IN idGroup;
nameDepartmentStoreCollationSheet 'Подразделение' (collationSheet) = name(departmentStoreCollationSheet(collationSheet)) IN collationSheetGroup;
nameInventoryCollationSheet 'Название инвентаризации' (collationSheet) = nameInventory(inventoryCollationSheet(collationSheet)) IN collationSheetGroup;
inInventoryCollationSheet(inventory, collationSheet) = inventoryCollationSheet(collationSheet) == inventory;
inDepartmentStoreCollationSheet(departmentStore, collationSheet) = departmentStoreCollationSheet(collationSheet) == departmentStore;

counterCollationSheet (collationSheet) = PARTITION SUM 1 IF collationSheet IS collationSheet
    BY inventoryCollationSheet(collationSheet) ORDER collationSheet;

nameCollationSheet 'Внутренний номер' (collationSheet) = [FORMULA STRING[30] '$1 || \'-\' || CAST ($2 AS character(20))'](
        seriesNumberObject(inventoryCollationSheet(collationSheet)),
        counterCollationSheet(collationSheet)) IN collationSheetGroup;

includeDepartmentStoreInventory 'Включить в инвентаризацию' = DATA BOOLEAN (departmentStore, inventory) IN inventoryGroup;
uniqueCollationSheetDepartmentStoreInventory 'Сличительная ведомость по скалду и инвентаризации' (departmentStore, inventory) =
    GROUP UNIQUE collationSheet BY departmentStoreCollationSheet(collationSheet), inventoryCollationSheet(collationSheet);

typeOfAdditionDepartmentStoreInventory(departmentStore, inventory) = DATA typeOfAddition (departmentStore, inventory) IN inventoryGroup;
includeTypeOfAdditionDepartmentStoreInventory(departmentStore, inventory) =
    typeOfAdditionDepartmentStoreInventory(departmentStore, inventory) IF includeDepartmentStoreInventory(departmentStore, inventory) IN inventoryGroup;
nameTypeOfAdditionDepartmentStoreInventory 'Тип сличительной ведомости' (departmentStore, inventory) =
    name(includeTypeOfAdditionDepartmentStoreInventory(departmentStore, inventory)) IN inventoryGroup;

typeOfAdditionDepartmentStoreInventoryOver(departmentStore, inventory) =
    (UNION OVERRIDE typeOfAdditionInventory(inventory) AND departmentStore IS departmentStore,
                    typeOfAdditionDepartmentStoreInventory(departmentStore, inventory))
    AND includeDepartmentStoreInventory(departmentStore, inventory);

nameTypeOfAdditionDepartmentStoreInventoryOver 'Тип сличительной ведомости' (departmentStore, inventory) = name(typeOfAdditionDepartmentStoreInventoryOver(departmentStore, inventory)) IN inventoryGroup;

nameDepartmentByInventory 'Подразделения для инвентаризации' (inventory) =
    GROUP CONCAT name(departmentStore) IF includeDepartmentStoreInventory(departmentStore, inventory), ', ' BY inventory IN inventoryGroup MINCHARWIDTH 50 PREFCHARWIDTH 150;

quantityStoreInventory(store, inventory) = GROUP SUM 1 IF includeDepartmentStoreInventory(departmentStore, inventory)  BY storeDepartmentStore(departmentStore), inventory;
quantityStoreByInventory(inventory) = GROUP SUM 1 IF quantityStoreInventory(store, inventory) BY inventory;

//CONSTRAINT quantityStoreByInventory(inventory) > 1  MESSAGE 'Ошибка: для инвентаризации могут задаваться отделы только в рамках одного магазина';
CONSTRAINT includeDepartmentStoreInventory(departmentStore, inventory) AND NOT nameTypeOfAdditionDepartmentStoreInventoryOver(departmentStore, inventory)  MESSAGE 'Ошибка: обязательно задавать тип сличительной ведомости для выбранного отдела';

inventoryListInventory(listInventory) = DATA inventory (listInventory) IN idGroup AUTOSET;
nameInventoryListInventory 'Название инвентаризации' (listInventory) = nameInventory(inventoryListInventory(listInventory)) IN listInventoryGroup;
inInventoryListInventory(inventory, listInventory) = inventoryListInventory(listInventory) == inventory;

departmentStoreListInventory(listInventory) = DATA departmentStore (listInventory) IN idGroup AUTOSET;
nameDepartmentStoreListInventory 'Подразделение' (listInventory) = name(departmentStoreListInventory(listInventory)) IN listInventoryGroup;
inDepartmentStoreListInventory(departmentStore, listInventory) = departmentStoreListInventory(listInventory) == departmentStore;

counterListInventory(listInventory) = PARTITION SUM 1 IF listInventory IS listInventory
    BY inventoryListInventory(listInventory), departmentStoreListInventory(listInventory)  ORDER listInventory IN baseGroup;

nameListInventory 'Номер описи' (listInventory) = castToString30('Опись ', counterListInventory(listInventory)) IN listInventoryGroup;

noteListInventory 'Примечание (наименование описи)' = DATA STRING[100] (listInventory) IN listInventoryGroup;
committeeListInventory(listInventory) = DATA inventoryCommittee (listInventory) IN idGroup;
inCommitteeListInventoryEmployee 'Сотрудник комиссии' (listInventory, employee) = inCommitteeEmployee(committeeListInventory(listInventory), employee);

commonNameCommitteeListInventory 'Название комиссии' (listInventory) = commonName(committeeListInventory(listInventory)) IN inventoryCommitteeGroup;
commonNameChairmanCommitteeListInventory 'Председатель комиссии' (listInventory) = commonNameChairmanCommittee(committeeListInventory(listInventory)) IN inventoryCommitteeGroup;

commonNameEmployeeListInventory 'Члены комиссии' (listInventory) =
     GROUP CONCAT commonName(employee) IF inCommitteeListInventoryEmployee(listInventory, employee), ', '
     BY listInventory IN inventoryCommitteeGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;

listInventoryPageList(pageList) = DATA listInventory (pageList) IN idGroup;
nameListInventoryPageList 'Номер описи' (pageList) = nameListInventory(listInventoryPageList(pageList));
inListInventoryPageList(listInventory, pageList) = listInventoryPageList(pageList) == listInventory;
sumPageListInventory 'К-во страниц' (listInventory) = GROUP SUM 1 IF pageList IS pageList BY listInventoryPageList(pageList) IN adverbGroup;
counterPageList(pageList) = PARTITION SUM 1 IF pageList IS pageList BY listInventoryPageList(pageList) ORDER pageList IN baseGroup;
namePageList 'Номер страницы' (pageList) = castToString30('Страница ', counterPageList(pageList)) IN baseGroup;
notePageList 'Примечание к странице' = DATA STRING[100] (pageList) IN baseGroup;

pageListDetailPage(detailPage) = DATA pageList (detailPage) IN idGroup;
inPageListDetailPage(pageList, detailPage) = pageListDetailPage(detailPage) == pageList;
barcodeDetailPage(detailPage) = DATA barcode (detailPage) IN idGroup;
nameBarcodeDetailPage 'Штрих-код' (detailPage) = barcodeEx(barcodeDetailPage(detailPage)) IN baseGroup;

departmentStoreDetailPage(detailPage) = departmentStoreListInventory(listInventoryPageList(pageListDetailPage(detailPage))) PERSISTENT;
listInventoryDetailPage(detailPage) = listInventoryPageList(pageListDetailPage(detailPage)) PERSISTENT;
inventoryDetailPage(detailPage) = inventoryListInventory(listInventoryPageList(pageListDetailPage(detailPage))) PERSISTENT;
inListInventoryDetailPage(listInventory, detailPage) = listInventoryDetailPage(detailPage) == listInventory;

nameDetailPage 'Номер строки' (detailPage) = PARTITION SUM 1 IF detailPage IS detailPage
    BY listInventoryPageList(pageListDetailPage(detailPage)), pageListDetailPage(detailPage)  ORDER detailPage IN baseGroup;

skuBarcodeDetailPage 'Товар (ИД)' (detailPage) =  skuBarcode(barcodeDetailPage(detailPage)) IN idGroup;
nameAttributeItemDetailPage 'Товар' (detailPage) = nameAttributeItem(skuBarcodeDetailPage(detailPage)) IN recognizeGroup;

quantityCountedDetailPage 'Количество посчитано' = DATA DOUBLE (detailPage) IN baseGroup;
CONSTRAINT quantityCountedDetailPage(detailPage) < 0 MESSAGE 'Количество должно быть положительным';


priceAccountDetailPage 'Учетная цена' (detailPage) = DATA DOUBLE (detailPage) IN baseGroup;

totalDetailPage 'Сумма' (detailPage) = priceAccountDetailPage(detailPage) * quantityCountedDetailPage(detailPage) IN baseGroup;

quantityDetailPageList 'Количество строк' (pageList) = GROUP SUM 1 IF detailPage IS detailPage BY pageListDetailPage(detailPage) IN baseGroup;
quantityCountedPageList 'Количество посчитано' (pageList) = GROUP SUM quantityCountedDetailPage(detailPage) BY pageListDetailPage(detailPage) IN baseGroup;
totalPageList 'Сумма посчитанного' (pageList) = GROUP SUM totalDetailPage(detailPage) BY pageListDetailPage(detailPage) IN baseGroup;

quantityDetailListInventory 'Количество строк' (listInventory) = GROUP SUM quantityDetailPageList(pageList) BY listInventoryPageList(pageList) IN adverbGroup;
quantityCountedListInventory 'Количество посчитано' (listInventory) = GROUP SUM quantityCountedPageList(pageList) BY listInventoryPageList(pageList) IN adverbGroup;
totalDetailListInventory 'Сумма посчитанного' (listInventory) = GROUP SUM totalPageList(pageList) BY listInventoryPageList(pageList) IN adverbGroup;

quantityDetailDepartmentStoreInventory 'Количество строк' (departmentStore, inventory) =
    GROUP SUM quantityDetailListInventory(listInventory) BY departmentStoreListInventory(listInventory), inventoryListInventory(listInventory) IN adverbGroup;

quantityCountedDepartmentStoreInventory 'Количество посчитано' (departmentStore, inventory) =
    GROUP SUM quantityCountedListInventory(listInventory) BY departmentStoreListInventory(listInventory), inventoryListInventory(listInventory) IN adverbGroup;

totalDetailDepartmentStoreInventory 'Сумма посчитанного' (departmentStore, inventory) =
    GROUP SUM totalDetailListInventory(listInventory) BY departmentStoreListInventory(listInventory), inventoryListInventory(listInventory) IN adverbGroup;

collationSheetListInventory(listInventory) = uniqueCollationSheetDepartmentStoreInventory(departmentStoreListInventory(listInventory), inventoryListInventory(listInventory)) IN baseGroup;
nameCollationSheetListInventory 'Название сл. ведомости' (listInventory) = nameCollationSheet(collationSheetListInventory(listInventory)) IN listInventoryGroup;
inCollationSheetListInventory(collationSheet, listInventory) = collationSheetListInventory(listInventory) ==  collationSheet;

quantityDetailCollationSheet 'Количество строк' (collationSheet) = GROUP SUM quantityDetailListInventory(listInventory)
    BY collationSheetListInventory(listInventory) IN baseGroup;

quantityCountedCollationSheet 'Количество посчитано' (collationSheet) = GROUP SUM quantityCountedListInventory(listInventory)
    BY collationSheetListInventory(listInventory) IN baseGroup;

totalDetailCollationSheet 'Сумма посчитанного' (collationSheet) = GROUP SUM totalDetailListInventory(listInventory)
    BY collationSheetListInventory(listInventory) IN baseGroup;

typeOfAdditionCollationSheet(collationSheet)= typeOfAdditionDepartmentStoreInventoryOver(departmentStoreCollationSheet(collationSheet), inventoryCollationSheet(collationSheet));
nameTypeOfAdditionCollationSheet 'Тип сличительной ведомости' (collationSheet) = name(typeOfAdditionCollationSheet(collationSheet)) IN baseGroup;

typeOfAdditionListInventory(listInventory) = typeOfAdditionDepartmentStoreInventoryOver(departmentStoreListInventory(listInventory), inventoryListInventory(listInventory)) IN idGroup;


balanceCollationSheetItem 'Количество остаток' (collationSheet, item) = DATA DOUBLE (collationSheet, item) IN baseGroup;

priceAccountCollationSheetItem 'Учетная цена, за ед.' (collationSheet, item) = DATA DOUBLE (collationSheet, item) IN baseGroup;

totalBalansCollationSheetItem 'Сумма по остаткам' (collationSheet, item) =
    priceAccountCollationSheetItem(collationSheet, item) * balanceCollationSheetItem(collationSheet, item) IN baseGroup;

quantityCountedCollationSheetItem 'Количество посчитано' (collationSheet, item) = GROUP SUM quantityCountedDetailPage(detailPage)
    BY collationSheetListInventory(listInventoryPageList(pageListDetailPage(detailPage))), skuBarcodeDetailPage(detailPage);

totalCollationSheetItem 'Сумма посчитанно' (collationSheet, item) = GROUP SUM totalDetailPage(detailPage)
    BY collationSheetListInventory(listInventoryPageList(pageListDetailPage(detailPage))), skuBarcodeDetailPage(detailPage);

inManyCollationSheetItem 'Вкл в ведомость' = DATA BOOLEAN (manyCollationSheet, item) IN baseGroup;

includeCollationSheetItem(collationSheet, item) = UNION EXCLUSIVE
    collationSheet IS registerCollationSheet IF quantityCountedCollationSheetItem(collationSheet, item),
    (UNION OVERRIDE inManyCollationSheetItem(collationSheet, item), collationSheet IS manyCollationSheet IF quantityCountedCollationSheetItem(collationSheet, item)),
    (collationSheet IS remainsCollationSheet IF UNION OVERRIDE balanceCollationSheetItem(collationSheet, item) != 0, TRUE IF quantityCountedCollationSheetItem(collationSheet, item));

//priceAccountCollationSheetItem(collationSheet, item) <- accountPriceCollationSheetItem(collationSheet, item) ON ASSIGN includeCollationSheetItem(collationSheet, item); //CHANGE item IS item AND collationSheet IS collationSheet;

shortageQuantityCountedCollationSheetItem 'Количество, недостача' (collationSheet, item) =
    (UNION OVERRIDE 0 IF collationSheet IS collationSheet AND item IS item, balanceCollationSheetItem(collationSheet, item)) -
    (UNION OVERRIDE 0 IF collationSheet IS collationSheet AND item IS item, quantityCountedCollationSheetItem(collationSheet, item));

shortageTotalCollationSheetItem 'Сумма, недостача' (collationSheet, item) =
    (UNION OVERRIDE 0 IF collationSheet IS collationSheet AND item IS item, totalBalansCollationSheetItem(collationSheet, item)) -
    (UNION OVERRIDE 0 IF collationSheet IS collationSheet AND item IS item, totalCollationSheetItem(collationSheet, item));

quantityCountedItemByCollationSheet 'Количество посчитано по ведомости' (collationSheet) =
    GROUP SUM quantityCountedCollationSheetItem(collationSheet, item) IF includeCollationSheetItem(collationSheet, item) BY collationSheet IN baseGroup;

totalItemByCollationSheet 'Сумма посчитанного по ведомости' (collationSheet) =
    GROUP SUM totalCollationSheetItem(collationSheet, item) IF includeCollationSheetItem(collationSheet, item) BY collationSheet IN baseGroup;

balanceItemByCollationSheet 'Остаток' (collationSheet) =
    GROUP SUM balanceCollationSheetItem(collationSheet, item) IF includeCollationSheetItem(collationSheet, item) BY collationSheet IN baseGroup;

totalBalansItemByCollationSheet 'Сумма по учетным данным ' (collationSheet) =
    GROUP SUM totalBalansCollationSheetItem(collationSheet, item) IF includeCollationSheetItem(collationSheet, item) BY collationSheet IN baseGroup;

shortageQuantityCountedItemByCollationSheet 'Недостача (к-во) по ведомости' (collationSheet) =
    GROUP SUM shortageQuantityCountedCollationSheetItem(collationSheet, item) IF includeCollationSheetItem(collationSheet, item) BY collationSheet IN baseGroup;

shortageTotalItemByCollationSheet 'Недостача (сумма) по ведомости' (collationSheet) =
    GROUP SUM shortageTotalCollationSheetItem(collationSheet, item) IF includeCollationSheetItem(collationSheet, item) BY collationSheet IN baseGroup;

priceByCollationSheetItem 'Цена из описи, за ед.' (collationSheet, item) = GROUP EQUAL priceAccountDetailPage(detailPage) BY collationSheetListInventory(listInventoryDetailPage(detailPage)), skuBarcodeDetailPage(detailPage);

notEqualsPriceByCollationSheetItem(collationSheet, item) =  priceByCollationSheetItem(collationSheet, item) != priceAccountCollationSheetItem(collationSheet, item);

// автоматическое создание сличительной ведомости (товары из описей) //
includeRegisterDepartmentStoreInventory(departmentStore, inventory) = // includeDepartmentStoreInventory(departmentStore, inventory) AND
    typeOfAdditionDepartmentStoreInventoryOver(departmentStore, inventory) == typeOfAddition.register;

@metaCodeDoublePropsAggregation(departmentStoreCollationSheet, inventoryCollationSheet, registerCollationSheet, includeRegisterDepartmentStoreInventory);

// автоматическое создание сличительной ведомости (по остаткам) //
includeRemainsDepartmentStoreInventory(departmentStore, inventory) =//        includeDepartmentStoreInventory(departmentStore, inventory) AND
    typeOfAdditionDepartmentStoreInventoryOver(departmentStore, inventory) == typeOfAddition.remains;

@metaCodeDoublePropsAggregation(departmentStoreCollationSheet, inventoryCollationSheet, remainsCollationSheet, includeRemainsDepartmentStoreInventory);

// автоматическое создание сличительной ведомости (по множеству товаров) //
includeManyDepartmentStoreInventory(departmentStore, inventory) =// includeDepartmentStoreInventory(departmentStore, inventory) AND
    typeOfAdditionDepartmentStoreInventoryOver(departmentStore, inventory) == typeOfAddition.many;

@metaCodeDoublePropsAggregation(departmentStoreCollationSheet, inventoryCollationSheet, manyCollationSheet, includeManyDepartmentStoreInventory);

inInventoryDepartmentStoreListInventory(inventory, departmentStore, listInventory) = departmentStoreListInventory(listInventory) == departmentStore AND inventoryListInventory(listInventory) == inventory;

sumListInventoryByCollationSheet 'К-во описей' (collationSheet) =
    GROUP SUM 1 IF listInventory IS listInventory BY collationSheetListInventory(listInventory);

sumPageListByCollationSheet 'К-во страниц' (collationSheet) =
    GROUP SUM 1 IF pageList IS pageList BY collationSheetListInventory(listInventoryPageList(pageList));

inInventoryDepartmentStoreListInventoryPageListDetailPage (inventory, departmentStore, listInventory, pageList, detailPage) = UNION OVERRIDE
    pageListDetailPage(detailPage) == pageList AND listInventory AND departmentStore AND inventory,
    listInventoryDetailPage(detailPage) == listInventory AND departmentStore AND NOT pageList AND inventory,
    departmentStoreDetailPage(detailPage) == departmentStore AND inventory == inventoryDetailPage(detailPage) AND NOT pageList AND NOT listInventory;

isDraftListInventory 'Открыт' (listInventory) = listInventory IS listInventory AND NOT listInventory IS listInventoryPosted;
isPostedListInventory 'Закрыт' (listInventory) = listInventory IS listInventoryPosted;

postListInventory 'Закрыть' (listInventory) = [ACTION (listInventory) SET objectClass(listInventory) <- CustomObjectClass.Rublevski_listInventoryPosted] (listInventory)
                                    IF listInventory IS listInventory AND NOT listInventory IS listInventoryPosted TOOLBAR CONFIRM;
unpostListInventory 'Открыть' (listInventory) = [ACTION (listInventory) SET objectClass(listInventory) <- CustomObjectClass.Rublevski_listInventory] (listInventory)
                                      IF listInventory IS listInventoryPosted TOOLBAR CONFIRM;

storeByInventory(inventory) = GROUP EQUAL storeDepartmentStore(departmentStore) IF includeDepartmentStoreInventory (departmentStore, inventory) BY inventory AS inventory;

//maxDepartmentByInventory(inventory) = GROUP MAX departmentStore AS departmentStore IF includeDepartmentStoreInventory (departmentStore, inventory) BY inventory AS inventory;
//nameStoreByInventory 'Магазин' (inventory) = name(storeDepartmentStore(departmentByInventory(inventory))) IN inventoryGroup;
nameStoreByInventory 'Магазин' (inventory) = name(storeByInventory(inventory)) IN inventoryGroup;

dateCollationSheet 'Дата сличительной ведомости' (collationSheet) = dateInventory(inventoryCollationSheet(collationSheet));

descriptionCollationSheet 'Название документа' (collationSheet) =
    [FORMULA STRING[200] '\'Сличительная ведомость \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'] (
    nameCollationSheet(collationSheet), dateCollationSheet(collationSheet));

//---------------------------- Изменение остатка инвентаризации ----------------------------//

CLASS inventoryLedger 'Изменение остатка инвентаризации' : balanceItemLedger;
TABLE inventoryLedgerTable (inventoryLedger);

needToLedgerCollationSheetItem (collationSheet, item) = shortageQuantityCountedCollationSheetItem(collationSheet, item) != 0
    AND isPostedInventory(inventoryCollationSheet(collationSheet)) AND includeCollationSheetItem(collationSheet, item);

@metaCodeDoubleAggregation(collationSheet, item, inventoryLedger, needToLedgerCollationSheetItem);

inventoryInventoryLedger(inventoryLedger) = inventoryCollationSheet(collationSheetInventoryLedger(inventoryLedger));

dateTimeInventoryLedger(inventoryLedger) = dateTimeInventory(inventoryInventoryLedger (inventoryLedger));
isPostedInventoryLedger(inventoryLedger) = isPostedInventory(inventoryInventoryLedger(inventoryLedger));
departmentStoreInventoryLedger(inventoryLedger) = departmentStoreCollationSheet(collationSheetInventoryLedger(inventoryLedger));
nameDepartmentStoreInventoryLedger 'Подразделение' (inventoryLedger) = name(departmentStoreInventoryLedger(inventoryLedger)) MINCHARWIDTH 20 PREFCHARWIDTH 20;
quantityInventoryLedger 'Недостача, количество' (inventoryLedger) = shortageQuantityCountedCollationSheetItem(collationSheetInventoryLedger(inventoryLedger), itemInventoryLedger(inventoryLedger)) MINCHARWIDTH 12 PREFCHARWIDTH 12;
shortageTotalInventoryLedger 'Недостача, сумма' (inventoryLedger) = shortageTotalCollationSheetItem(collationSheetInventoryLedger(inventoryLedger), itemInventoryLedger(inventoryLedger)) MINCHARWIDTH 12 PREFCHARWIDTH 12;

nameAttributeItemInventoryLedger 'Товар' (inventoryLedger) = nameAttributeItem(itemInventoryLedger(inventoryLedger)) MINCHARWIDTH 15 PREFCHARWIDTH 15;

barcodeExInventoryLedger 'Щтрих-код' (inventoryLedger) =  barcodeEx(barcodeSku(itemInventoryLedger(inventoryLedger)));

descriptionInventoryLedger 'Название документа' (inventoryLedger) = descriptionCollationSheet(collationSheetInventoryLedger(inventoryLedger));

//--------------------------------Формы по инвентаризации см. в конце-------------------//


//---------------------------- Отгрузка по безналу(розница) ----------------------------//

GROUP customerGroup 'Покупатель' : publicGroup;
GROUP itemSpecificationDetailInfo 'Информация по товару' : baseGroup;

CLASS specification 'Счет-фактура': historyObject, numeratedObject;
CLASS objectiveAcquiring 'Цель приобретения' : named;

CLASS specificationDetail 'Строка документа';
TABLE specificationDetail (specificationDetail);

customerSpecification(specification) = DATA customer (specification) IN idGroup;
nameCustomerSpecification 'Покупатель' (specification) = name(customerSpecification(specification)) IN customerGroup;
fullNameCustomerSpecification 'Полное наименование' (specification) = fullNameLegalEntity(customerSpecification(specification)) IN customerGroup;
UNPCustomerSpecification 'УНП' (specification) = UNPLegalEntity(customerSpecification(specification)) IN customerGroup;
addressCustomerSpecification 'Юридический адрес' (specification) = addressLegalEntity(customerSpecification(specification)) IN customerGroup;
nameOwnershipCustomerSpecification 'Форма собственности' (specification) = nameOwnershipLegalEntity(customerSpecification(specification)) IN customerGroup;
postAddressCustomerSpecification 'Почтовый адрес' (specification) = postAddressLegalEntity(customerSpecification(specification)) IN customerGroup;
managerCustomerSpecification 'Руководитель' (specification) = managerLegalEntity(customerSpecification(specification)) IN customerGroup;
phoneCustomerSpecification 'Телефон' (specification) = phoneLegalEntity(customerSpecification(specification)) IN customerGroup;

objectiveAcquiringSpecification(specification) = DATA objectiveAcquiring (specification) IN idGroup;
nameObjectiveAcquiringSpecification 'Цель приобретения' (specification) = name(objectiveAcquiringSpecification(specification)) IN additionalInfo;

// расчетный счет, банк, и т.д.

dateSpecification 'Дата документа' (specification) = DATA DATE (specification) IN documentHeaderGroup;
dateSpecification (specification) <- currentDate() ON ASSIGN specification AS specification;

timeSpecification 'Время документа' (specification) = DATA TIME (specification) IN documentHeaderGroup;
    timeSpecification (specification) <- currentTime() ON ASSIGN specification AS specification;

dateTimeSpecification 'Дата/время документа' (specification) = toDateTime(dateSpecification(specification), timeSpecification(specification));


dateToSpecification 'Срок действия с/ф' (specification) = DATA DATE (specification) IN documentHeaderGroup;
overdueSpecification 'Просроченные с/ф' (specification) = dateToSpecification(specification) < currentDate();
noOverdueSpecification 'Непросроченные с/ф' (specification) = dateToSpecification(specification) >= currentDate();


departmentStoreSpecification 'Отдел документа (ИД)' (specification) = DATA departmentStore(specification) IN idGroup;
nameDepartmentStoreSpecification 'Отдел выписки (отгрузки) документа' (specification) = name(departmentStoreSpecification(specification))
    IN documentHeaderGroup MINCHARWIDTH 20 PREFCHARWIDTH 40;

noteSpecification 'Примечание' = DATA STRING[100] (specification) IN additionalInfo;

specificationSpecificationDetail 'Строка документа (ИД)' = DATA specification (specificationDetail) IN idGroup;
inSpecificationSpecificationDetail (specification, specificationDetail) = specificationSpecificationDetail(specificationDetail) == specification;

dateTimeSpecificationDetail 'Дата/время отгрузки' (specificationDetail) = dateTimeSpecification(specificationSpecificationDetail(specificationDetail));

numberSpecificationDetail 'Номер строки' (specificationDetail) =
    PARTITION SUM 1 IF specificationDetail IS specificationDetail BY specificationSpecificationDetail(specificationDetail)
    ORDER specificationDetail IN recognizeGroup MINCHARWIDTH 3 PREFCHARWIDTH 3;

itemSpecificationDetail 'Товар строки документа (ИД)' (specificationDetail) = DATA item (specificationDetail) IN idGroup;

nameAttributeItemSpecificationDetail 'Товар строки документа' (specificationDetail) =
    nameAttributeItem(itemSpecificationDetail(specificationDetail)) IN recognizeGroup;

barcodeExSkuSpecificationDetail 'Штрих-код товара' (specificationDetail) =
    barcodeEx(barcodeSku(itemSpecificationDetail(specificationDetail))) IN baseGroup;

quantityDetailInSpecification 'Количество строк в документе' (specification) =
        GROUP SUM 1 IF inSpecificationSpecificationDetail (specification, specificationDetail) BY specification;

    addSpecificationDetailBarcode 'Добавить строку по штрих-коду' = ACTION (specification) {
        FORM barcodeInput MODAL;

        IF formResult() == formResult.ok THEN {
            SET tmpSku() <- skuBarcodeStringDate(chosenString('barcode'), dateSpecification(specification));
            IF tmpSku() IS item THEN {
                ADDOBJ specificationDetail;
                FOR o == addedObject() DO {
                    SET specificationSpecificationDetail(o) <- specification AS specification;
                    SET itemSpecificationDetail(o) <- tmpSku();

                };
            } ELSE
                MESSAGE 'Не найден штрих-код';
        };

    }TOOLBAR EDITKEY 'F4';

quantitySpecificationDetail 'Кол-во товара' = DATA DOUBLE (specificationDetail) IN baseGroup;

quantitySpecification 'Общее кол-во' (specification) = GROUP SUM quantitySpecificationDetail(specificationDetail)
                                                    BY specificationSpecificationDetail(specificationDetail) IN waybillSum;
departmentStoreSpecificationDetail(specificationDetail) = departmentStoreSpecification(specificationSpecificationDetail(specificationDetail));

retailPriceSpecificationDetail 'Цена товара (розн.)' = DATA DOUBLE (specificationDetail) IN baseGroup;

sumSpecificationDetail 'Сумма' (specificationDetail) = round0(retailPriceSpecificationDetail(specificationDetail)*quantitySpecificationDetail(specificationDetail));
sumSpecification 'Общая сумма' (specification) = GROUP SUM sumSpecificationDetail(specificationDetail) BY specificationSpecificationDetail(specificationDetail) IN waybillSum;

priceBySpecificationItem (specification, item) = GROUP EQUAL retailPriceSpecificationDetail(specificationDetail)
    BY specificationSpecificationDetail(specificationDetail), itemSpecificationDetail(specificationDetail);

specificationsTaxNDSSpecificationDetail(specificationDetail) = tax.taxNDS IF specificationDetail IS specificationDetail IN idGroup;

rangeSpecificationDetail (specificationDetail) = DATA range (specificationDetail) IN baseGroup;
dataActingRateRangeSpecificationDetail 'Ставка НДС расчетная,%' (specificationDetail) = dataActingRateRangeDate(rangeSpecificationDetail(specificationDetail), dateSpecification(specificationSpecificationDetail(specificationDetail))) IN baseGroup;
rangeSpecificationDetail (specificationDetail) <- rangeToTaxStore(specificationsTaxNDSSpecificationDetail(specificationDetail),
                                storeDepartmentStore(departmentStoreSpecificationDetail(specificationDetail))) ON ASSIGN specificationDetail IS specificationDetail;


sumNDSSpecificationDetail 'НДС за ед.' (specificationDetail) = round0(dataActingRateRangeSpecificationDetail(specificationDetail)*retailPriceSpecificationDetail(specificationDetail)/100) IN baseGroup;
totalSumNDSSpecificationDetail 'Сумма НДС' (specificationDetail) = round0(dataActingRateRangeSpecificationDetail(specificationDetail)*sumSpecificationDetail(specificationDetail)/100) IN baseGroup;
sumNDSSpecification 'Общая сумма НДС' (specification) = GROUP SUM totalSumNDSSpecificationDetail(specificationDetail)
    BY specificationSpecificationDetail(specificationDetail) IN waybillSum;

articleItemSpecificationDetail 'Артикул производителя/поставщика' (specificationDetail) = articleItem(itemSpecificationDetail(specificationDetail));
nameCountryItemSpecificationDetail 'Страна производства/происхождения' (specificationDetail) = nameCountryItem(itemSpecificationDetail(specificationDetail));

minReserveItemDepartmentSpecificationDetail 'Минимальнодопустимый товарный запас в днях' (specificationDetail) =
    minReserveItemDepartmentOver(itemSpecificationDetail(specificationDetail),
    departmentStoreSpecificationDetail(specificationDetail),
    dateSpecification(specificationSpecificationDetail(specificationDetail)));

maxReserveItemDepartmentSpecificationDetail 'Максимальнодопустимый товарный запас в днях' (specificationDetail) =
    maxReserveItemDepartmentOver(itemSpecificationDetail(specificationDetail),
    departmentStoreSpecificationDetail(specificationDetail),
    dateSpecification(specificationSpecificationDetail(specificationDetail)));

quantityItemSpecification 'Количество товара в спецификации' (item, specification) = GROUP SUM quantitySpecificationDetail(specificationDetail)
    BY itemSpecificationDetail(specificationDetail), specificationSpecificationDetail(specificationDetail);

CONSTRAINT quantitySpecificationDetail(specificationDetail) <= 0 MESSAGE 'Количество должно быть положительным';
CONSTRAINT retailPriceSpecificationDetail(specificationDetail) <= 0 MESSAGE 'Цена должна быть положительной';

CONSTRAINT specification IS specification AND NOT dateToSpecification(specification) MESSAGE 'Не задан срок действия с/ф';
CONSTRAINT dateToSpecification(specification) < dateSpecification(specification) MESSAGE 'Дата действия с/ф не может быть меньше даты документа';


FORM objectiveAcquiring 'Цель приобретения'
    OBJECTS oa=objectiveAcquiring  FIXED PANEL
    PROPERTIES(oa) name
;

//---------------------------- Документ на отгрузку из розницы ----------------------------------------//

GROUP specificationGroup 'Счет-фактуры' : publicGroup;
GROUP itemStatementDetailInfo 'Информация по товару' : publicGroup;
GROUP pricingStatementDetailInfo 'Дополнительные ценовые параметры': publicGroup;

CLASS statement 'Выписка из розницы' : outAccountSumDocumentLedger, historyObject, numberedObject;
CLASS statementDetail 'Строка выписки из розницы' : balanceItemLedger;
@metaCodeObjectWithPostEx(statement, 'Закрытая выписка из розницы');

//    шапка документа поставки
customerStatement 'Покупатель (ИД)' (statement) = DATA customer (statement) IN idGroup;
nameCustomerStatement 'Покупатель' (statement) = name(customerStatement(statement)) IN documentHeaderGroup
    MINCHARWIDTH 30 PREFCHARWIDTH 40;

inStatementSpecification 'Включить в накладную' (statement, specification) = DATA BOOLEAN (statement, specification)
    IN idGroup MINCHARWIDTH 20 PREFCHARWIDTH 20;

specificationsStatement 'Ввести на основании с/ф' (statement) = GROUP CONCAT castToString255(seriesNumberObject(specification))
    IF inStatementSpecification(statement, specification), ', ' BY statement IN specificationGroup MINCHARWIDTH 20 PREFCHARWIDTH 20;

isCustomerStatementSpecification 'Заявка покупателя' (statement, specification) = customerStatement(statement)== customerSpecification(specification);

isDepartmentStoreStatementSpecification 'Заявка отдела' (statement, specification) = departmentStoreStatement(statement)== departmentStoreSpecification(specification);

quantityStatementsInSpecification(specification) = GROUP SUM 1 IF inStatementSpecification(statement, specification) BY specification;
noQuantityStatementsInSpecification(specification) = specification IS specification AND NOT quantityStatementsInSpecification(specification);

statusSpecification 'Расход' (specification) = CASE
    WHEN quantityStatementsInSpecification(specification) > 0 THEN ('Отгрузки были' IF specification IS specification)
    DEFAULT 'Отгрузок не было' IF specification IS specification
    END  MINCHARWIDTH 15 PREFCHARWIDTH 15;


//количество-цены по строкам

quantityStatementDetail 'Количество' (statementDetail) = DATA DOUBLE (statementDetail) IN baseGroup;
retailPriceStatementDetail 'Цена товара (розн.)'(statementDetail) = DATA DOUBLE (statementDetail) IN baseGroup;
sumStatementDetail 'Сумма' (statementDetail) = round0(retailPriceStatementDetail(statementDetail)*quantityStatementDetail(statementDetail))IN baseGroup;

//departmentStoreStatementDetail(statementDetail) = departmentStoreStatement(statementStatementDetail(statementDetail));
//retailPriceStatementDetail(statementDetail) <- retailPriceItemDepartmentVal (itemStatementDetail(statementDetail),
//                                                                   departmentStoreStatementDetail(statementDetail),
//                                                                   dateStatement(statementStatementDetail(statementDetail))) ON CHANGE itemStatementDetail(statementDetail);

curRetailPriceStatementDetail 'Текущая розничная цена' (statementDetail) = DATA DOUBLE (statementDetail) IN pricingStatementDetailInfo;



rangeStatementDetail (statementDetail) = DATA range (statementDetail) IN idGroup;
dataActingRateRangeStatementDetail 'Ставка НДС расчетная' (statementDetail) = dataActingRateRangeDate(rangeStatementDetail(statementDetail),  dateStatement(statementStatementDetail(statementDetail))) IN waybillSum;
rangeStatementDetail (statementDetail) <- rangeToTaxStore(tax.taxNDS,
                                          storeDepartmentStore(departmentStoreStatementDetail(statementDetail))) ON ASSIGN statementDetail IS statementDetail;
numberRangeStatementDetail 'НДС номер' (statementDetail) = dataRange(rangeStatementDetail(statementDetail));

sumNDSStatementDetail 'НДС за ед.' (statementDetail) = round0(dataActingRateRangeStatementDetail(statementDetail)*retailPriceStatementDetail(statementDetail)/100) IN baseGroup;
totalSumNDSStatementDetail 'Сумма НДС' (statementDetail) = round0(dataActingRateRangeStatementDetail(statementDetail)*sumStatementDetail(statementDetail)/100) IN baseGroup;
sumNDSStatement 'Общая сумма НДС' (statement) = GROUP SUM totalSumNDSStatementDetail(statementDetail) BY statementStatementDetail(statementDetail) IN waybillSum;


quantityItemStatement 'Количество товара в отгрузке' (item, statement) = GROUP SUM quantityStatementDetail(statementDetail)
    BY itemStatementDetail(statementDetail), statementStatementDetail(statementDetail);

priceByItemStatement(item, statement) = GROUP EQUAL retailPriceStatementDetail(statementDetail)
    BY itemStatementDetail(statementDetail), statementStatementDetail(statementDetail);

totalQuantityStatement 'Общее количество' (statement) = GROUP SUM quantityStatementDetail(statementDetail) BY statementStatementDetail(statementDetail) IN waybillSum;
sumStatement 'Общая сумма' (statement) = GROUP SUM sumStatementDetail(statementDetail) BY statementStatementDetail(statementDetail) IN waybillSum;

articleItemStatementDetail 'Артикул производителя/поставщика' (statementDetail) = articleItem(itemStatementDetail(statementDetail)) IN itemStatementDetailInfo;
nameCountryItemStatementDetail 'Страна производства/происхождения' (statementDetail) = nameCountryItem(itemStatementDetail(statementDetail)) IN itemStatementDetailInfo;

//balanceDepartmentStoreItemStatementDetail 'Текущий остаток' (statementDetail) =
//    balanceDepartmentStoreItem(departmentStoreStatementDetail(statementDetail), itemStatementDetail(statementDetail));

//minReserveItemDepartmentStatementDetail 'Минимальнодопустимый товарный запас в днях' (statementDetail) =
//    minReserveItemDepartmentOver(itemStatementDetail(statementDetail),
//    departmentStoreStatementDetail(statementDetail),
//    dateStatement(statementStatementDetail(statementDetail)));
//
//maxReserveItemDepartmentStatementDetail 'Максимальнодопустимый товарный запас в днях' (statementDetail) =
//    maxReserveItemDepartmentOver(itemStatementDetail(statementDetail),
//    departmentStoreStatementDetail(statementDetail),
//    dateStatement(statementStatementDetail(statementDetail)));

CONSTRAINT quantityStatementDetail(statementDetail) <= 0 MESSAGE 'Количество должно быть положительным';
CONSTRAINT retailPriceStatementDetail(statementDetail) <= 0 MESSAGE 'Цена должна быть положительной';

statusStatementSpecification 'Статус' (statement, specification) = CASE
    WHEN dateStatement(statement) > dateToSpecification(specification) THEN ('Просрочена' IF statement IS statement IF specification IS specification)
    DEFAULT 'Непросрочена' IF statement IS statement IF specification IS specification
    END  MINCHARWIDTH 15 PREFCHARWIDTH 15;

castToStringFour = FORMULA STRING[40] '$1 || CAST ($2 AS character(20)) || $3 || $4 || CAST ($5 AS character(20))';
infoSpecificationDetail(specificationDetail) = castToStringFour('Счет-фактура № ', seriesNumberObject(specificationSpecificationDetail(specificationDetail)), ' от ', ' ', dateSpecification(specificationSpecificationDetail(specificationDetail)));

noteStatementDetail 'Примечание' = DATA STRING[40] (statementDetail) IN baseGroup;

toFillStatementDetailsStatement 'Заполнить отгрузку на основании с/ф' =  ACTION (statement) {
    FOR inStatementSpecification (statement, specification) AND inSpecificationSpecificationDetail(specification, specificationDetail) DO {
        ADDOBJ statementDetail;
        FOR d == addedObject() DO {
            SET itemStatementDetail(d) <- itemSpecificationDetail(specificationDetail);
            SET retailPriceStatementDetail(d) <- retailPriceSpecificationDetail(specificationDetail);
            SET quantityStatementDetail(d) <- quantitySpecificationDetail(specificationDetail);
//            SET barcodeExSkuStatementDetail(d) <- barcodeExSkuSpecificationDetail(specificationDetail);   // может для ш-к по другому
            SET sumStatementDetail(d) <- sumSpecificationDetail(specificationDetail);
            SET noteStatementDetail(d) <- infoSpecificationDetail(specificationDetail);
        };
    };
} IN specificationGroup CONFIRM;

wareStatementDetail 'Текущая посуда' (statementDetail) = DATA ware(statementDetail) IN idGroup;
nameWareStatementDetail 'Текущая посуда' (statementDetail) = name(wareStatementDetail(statementDetail)) IN pricingStatementDetailInfo;
//wareStatementDetail(statementDetail) <- wareItem(itemStatementDetail(statementDetail)) ON CHANGE itemStatementDetail(statementDetail);

priceWareStatementDetail 'Текущая цена посуды' (statementDetail) = DATA DOUBLE (statementDetail) IN pricingStatementDetailInfo;

castStatementObjectsToString100=
    FORMULA STRING[200] '\'Выписка из розницы \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)';

descriptionStatement 'Название документа' (statement) = castStatementObjectsToString100(
    seriesNumberObject(statement), dateStatement(statement), nameCustomerStatement(statement));

descriptionStatementDetail 'Название документа' (statementDetail) = descriptionStatement(statementStatementDetail(statementDetail));

// ---------------------------------- Переоценка при реализации из розницы ------------------------------------------

CLASS priceChangeStatement 'Переоценка при отгрузке из розницы' : priceChangeDocument;
CLASS priceChangeStatementDetail 'Строка переоценки при отгрузке из розницы' : priceChangeDocumentDetail;

needToPriceChangeStatementDetail (statementDetail) = curRetailPriceStatementDetail(statementDetail) != retailPriceStatementDetail(statementDetail) AND
                                                   quantityStatementDetail(statementDetail) >0; // <= balanceDepartmentStoreItemStatementDetail(statementDetail);

needToPriceChangeStatement (statement) = GROUP SUM 1 IF needToPriceChangeStatementDetail(statementDetail) BY statementStatementDetail(statementDetail);

@metaCodeDetailAggregation(statement, priceChangeStatement, needToPriceChangeStatement);

//// атрибуты документа переоценки

dateTimePriceChangeStatement 'Дата/время' (priceChangeStatement) = dateTimeStatement(statementPriceChangeStatement(priceChangeStatement));
datePriceChangeStatement 'Дата' (priceChangeStatement) = dateStatement(statementPriceChangeStatement(priceChangeStatement));
isPostedPriceChangeStatement 'Закрыт' (priceChangeStatement) = isPostedStatement(statementPriceChangeStatement(priceChangeStatement));
numberPriceChangeStatement 'Номер накладной' (priceChangeStatement) = numberObject(statementPriceChangeStatement(priceChangeStatement));
seriesPriceChangeStatement 'Серия накладной' (priceChangeStatement) = seriesObject(statementPriceChangeStatement(priceChangeStatement));
descriptionPriceChangeStatement 'Название документа' (priceChangeStatement) = descriptionStatement(statementPriceChangeStatement(priceChangeStatement));

customerPriceChangeStatement (priceChangeStatement) = customerStatement(statementPriceChangeStatement(priceChangeStatement));
nameCustomerPriceChangeStatement 'Покупатель' (priceChangeStatement) = name(customerPriceChangeStatement(priceChangeStatement));

departmentStorePriceChangeStatement (priceChangeStatement) = departmentStoreStatement(statementPriceChangeStatement(priceChangeStatement));
nameDepartmentStorePriceChangeStatement 'Отдел документа' (priceChangeStatement) = name(departmentStorePriceChangeStatement(priceChangeStatement));


//старые ценовые параметры для переоценок
//curRetailPriceStatementDetail (statementDetail) <- priceRetailStatementDetail (statementDetail) ON CHANGE itemStatementDetail(statementDetail);  //     subtractDate2

notEqualsPriceStatementDetail(statementDetail)  = retailPriceStatementDetail(statementDetail) != curRetailPriceStatementDetail(statementDetail);


retailRangeStatementDetail(statementDetail) = DATA range (statementDetail) IN idGroup;
dataRetailRangeStatementDetail 'Текущий НДС розничный,%' (statementDetail) =
   dataActingRateRangeDate(retailRangeStatementDetail(statementDetail),  dateStatement(statementStatementDetail(statementDetail))) IN pricingStatementDetailInfo;
//retailRangeStatementDetail(statementDetail) <- overrideRateRangeItem(itemStatementDetail(statementDetail)) ON CHANGE itemStatementDetail(statementDetail);

importerPriceStatementDetail 'Текущая цена изготовителя/импортера' (statementDetail) = DATA DOUBLE (statementDetail) IN pricingStatementDetailInfo;
//importerPriceStatementDetail (statementDetail) <- importerPriceItemVal ( itemStatementDetail(statementDetail),
//    dateStatementDetail(statementDetail)) ON CHANGE itemStatementDetail(statementDetail);

//// атрибуты детализации документа переоценки

itemPriceChangeStatementDetail (priceChangeStatementDetail) = itemStatementDetail(statementDetailPriceChangeStatementDetail(priceChangeStatementDetail));
nameItemPriceChangeStatementDetail 'Товар' (priceChangeStatementDetail) = nameAttributeItem(itemPriceChangeStatementDetail(priceChangeStatementDetail));

quantityPriceChangeStatementDetail 'Количество' (priceChangeStatementDetail) = quantityStatementDetail(statementDetailPriceChangeStatementDetail(priceChangeStatementDetail));

importerPriceChangeStatementDetail 'Текущая цена изготовителя' (priceChangeStatementDetail) = importerPriceStatementDetail(statementDetailPriceChangeStatementDetail(priceChangeStatementDetail));
//importerPriceChangeStatementDetail 'Новая цена изготовителя' (priceChangeStatementDetail) = importerPriceStatementDetail(statementDetailPriceChangeStatementDetail(priceChangeStatementDetail));
                                     //  пока что цена изготовителя старая и новая равны   //
dataRetailRangePriceChangeStatementDetail 'Текущий НДС, %' (priceChangeStatementDetail) = dataRetailRangeStatementDetail(statementDetailPriceChangeStatementDetail(priceChangeStatementDetail));
                                    //  пока что НДС старый и новый равны   //
curRetailPriceChangeStatementDetail 'Текущая розничная цена' (priceChangeStatementDetail) = curRetailPriceStatementDetail(statementDetailPriceChangeStatementDetail(priceChangeStatementDetail));
retailPriceChangeStatementDetail 'Новая розничная цена' (priceChangeStatementDetail) = retailPriceStatementDetail(statementDetailPriceChangeStatementDetail(priceChangeStatementDetail));

warePriceChangeStatementDetail 'Текущая посуда' (priceChangeStatementDetail) = wareStatementDetail(statementDetailPriceChangeStatementDetail(priceChangeStatementDetail)) IN baseGroup;
priceWarePriceChangeStatementDetail 'Текущая цена посуды' (priceChangeStatementDetail) =  priceWareStatementDetail(statementDetailPriceChangeStatementDetail(priceChangeStatementDetail)) IN baseGroup;

//---------------------------- Кассовые отчеты ----------------------------------------//
CLASS cashReport 'Кассовый отчет' : transaction;
CLASS cashDocument 'Кассовый документ';
CLASS incomeCashOrder 'ПКО': cashDocument;
CLASS outcomeCashOrder 'РКО': cashDocument;
CLASS bankCardsReport 'Отчет по банковским карточкам': cashDocument;

numberCashReport 'Номер кассового отчета' (cashReport) = DATA INTEGER (cashReport) IN baseGroup;
startDateCashReport 'Дата начала' (cashReport) = DATA DATE (cashReport) IN baseGroup;
endDateCashReport 'Дата окончания' (cashReport) = DATA DATE (cashReport) IN baseGroup;

reportCashDocument 'Отчет документа (ИД)' (cashDocument) = DATA cashReport (cashDocument) IN idGroup;
numberCashDocument 'Номер документа' (cashDocument) = DATA INTEGER (cashDocument) IN baseGroup;
sumCashDocument 'Сумма документа' (cashDocument) = DATA DOUBLE (cashDocument) IN baseGroup;
cashRegisterIncomeCashOrder 'Выручка кассы (ИД)' (incomeCashOrder) = DATA cashRegister(incomeCashOrder) IN idGroup;
numberCashRegisterIncomeCashOrder 'Выручка кассы' (incomeCashOrder) = numberCashRegister(cashRegisterIncomeCashOrder(incomeCashOrder)) IN baseGroup;
dopInfoCashDocument 'Описание' (cashDocument) = DATA STRING[10] (cashDocument) IN baseGroup;
infoCashDocument 'Основание документа' (cashDocument) = UNION EXCLUSIVE numberCashRegisterIncomeCashOrder(cashDocument) IF cashDocument IS incomeCashOrder, dopInfoCashDocument (cashDocument);

inCashReportDocument 'Документ в текущем кассовом отчете' (cashReport, cashDocument) = reportCashDocument(cashDocument)==cashReport;

FORM cashReport 'Кассовый отчет'
OBJECTS r=cashReport FIXED PANEL
OBJECTS d=cashDocument
PROPERTIES (r) numberCashReport, startDateCashReport, endDateCashReport
PROPERTIES (d) objectClassName, numberCashDocument, infoCashDocument, sumCashDocument, ADDOBJ, delete
FILTERS inCashReportDocument(r,d)
EDIT cashReport OBJECT r;

FORM cashReports 'Кассовые отчеты'
OBJECTS r=cashReport, d=cashDocument
PROPERTIES (r) startDateCashReport, endDateCashReport
PROPERTIES (r) ADDFORM, EDITFORM, delete
PROPERTIES (d) READONLY numberCashDocument, sumCashDocument
FILTERS inCashReportDocument(r,d);

//---------------------------- Приход товара от поставщика ----------------------------------------//
CLASS batch 'Партия';

CLASS ABSTRACT batchShipment 'Партия из прихода' : batch, balanceItemLedger, importerPriceLedger, retailVATLedger, accountPriceLedger, retailPriceLedger, warePriceLedger;

CLASS shipment 'Поставка' : incAccountSumDocumentLedger, historyObject, numberedObject;
CLASS shipmentDetail 'Строка поставки' : batchShipment;
@metaCodeObjectWithPostEx(shipment, 'Закрытая поставка');

GROUP waybillSum 'Суммы накладной': baseGroup;
GROUP ordersInfo 'Заказы': baseGroup;
GROUP additionalInfo 'Дополнительно' : baseGroup;

//шапка документа поставки
numberObjectDetail 'Номер накладной' (shipmentDetail) = numberObject(shipmentShipmentDetail(shipmentDetail));
seriesObjectDetail 'Серия накладной' (shipmentDetail) = seriesObject(shipmentShipmentDetail(shipmentDetail));

sidShipmentDetail 'Уникальный номер накладной' (shipmentDetail) = DATA STRING[50] (shipmentDetail) IN documentHeaderGroup;

sidNumberSeriesToShipmentDetail (sid, number, series) = GROUP UNIQUE shipmentDetail
            BY sidShipmentDetail (shipmentDetail), numberObjectDetail (shipmentDetail), seriesObjectDetail (shipmentDetail)
            WHERE shipmentDetail IS shipmentDetail;

numberSeriesToShipment (number, series) = GROUP UNIQUE shipment BY numberObject(shipment), seriesObject(shipment) WHERE shipment IS shipment;

supplierShipment 'Поставщик (ИД)' (shipment) = DATA supplier (shipment) IN idGroup;

nameSupplierShipment 'Поставщик' (shipment) = name(supplierShipment(shipment)) IN documentHeaderGroup
    MINCHARWIDTH 30 PREFCHARWIDTH 40;

carryingChargesShipment 'Транспортные расходы' (shipment) = DATA DOUBLE (shipment) IN waybillSum;

inShipmentOrder 'Поставка по заказу' (shipment, orderSupplier) = DATA BOOLEAN (shipment, orderSupplier)
    IN idGroup MINCHARWIDTH 10 PREFCHARWIDTH 10;

ordersShipment 'Заявка' (shipment) = GROUP CONCAT castToString255(dataOrderSupplier(orderSupplier))
    IF inShipmentOrder(shipment, orderSupplier), ', ' BY shipment IN ordersInfo MINCHARWIDTH 10 PREFCHARWIDTH 10;

isSupplierShipmentOrder 'Заявка поставщика поставки' (shipment, orderSupplier) = supplierShipment(shipment)== supplierOrderSupplier(orderSupplier);

isDepartmentStoreShipmentOrder 'Заявка отдела поставки' (shipment, orderSupplier) = departmentStoreShipment(shipment)== departmentStoreOrderSupplier(orderSupplier);

//атрибуты для подсказки по товару строки
GROUP itemShipmentDetailInfo 'Информация по товару' : baseGroup;

controlExpiryShipmentDetail 'Контролировать сроки годности товара?' (shipmentDetail) =
    controlExpiryItem (itemShipmentDetail(shipmentDetail)) IN itemShipmentDetailInfo;

isManufacturedShipmentDetail 'Товар производится?' (shipmentDetail) = isManufacturedItem(itemShipmentDetail(shipmentDetail)) IN itemShipmentDetailInfo;
isWeightShipmentDetail 'Весовой товар?' (shipmentDetail) = isWeightItem(itemShipmentDetail(shipmentDetail)) IN itemShipmentDetailInfo;

nameinActionItemDepartmentShipmentDetail 'Товар акции?' (shipmentDetail) = name(inActionItemDepartmentVal(itemShipmentDetail(shipmentDetail),
    departmentStoreShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))) IN itemShipmentDetailInfo FIXEDCHARWIDTH 2;

hintShipmentDetail 'Подсказка по товару' (shipmentDetail) = hintItem(itemShipmentDetail(shipmentDetail)) IN itemShipmentDetailInfo;

nameCountryShipmentDetail 'Страна производства/происхождения' (shipmentDetail) =
    name(countryItem(itemShipmentDetail(shipmentDetail))) IN itemShipmentDetailInfo MINCHARWIDTH 15 PREFCHARWIDTH 15;

namebanRevaluationItemDepartmentShipmentDetail 'Запрет на переоценку' (shipmentDetail) = name(banRevaluationItemDepartmentVal(itemShipmentDetail(shipmentDetail),
    departmentStoreShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))) IN itemShipmentDetailInfo FIXEDCHARWIDTH 2;

supplierShipmentDetail 'Поставщик (ИД)' (shipmentDetail) = supplierShipment(shipmentShipmentDetail(shipmentDetail));

//количество-цены по строкам
GROUP pricingShipmentDetailInfo 'Дополнительные ценовые параметры': baseGroup;

quantityShipmentDetail 'Количество' (shipmentDetail) = DATA DOUBLE (shipmentDetail) IN baseGroup;
totalQuantityShipment 'Общее количество' (shipment) = GROUP SUM quantityShipmentDetail(shipmentDetail) BY shipmentShipmentDetail(shipmentDetail) IN waybillSum;
quantityItemShipment 'Количество по товару в поставке' (item, shipment) = GROUP SUM quantityShipmentDetail (shipmentDetail) BY itemShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail);
isShipedItemShipment 'Товар есть в поставке' (item, shipment) = quantityItemShipment(item, shipment) > 0;

balanceBeforeShipmentShipmentDetail 'Остаток до поставки' (shipmentDetail) = DATA DOUBLE (shipmentDetail) IN baseGroup;

priceShipmentDetail 'Цена товара'(shipmentDetail) = DATA DOUBLE (shipmentDetail) IN baseGroup;

supplierMarkupShipmentDetail 'Оптовая надбавка/торговая скидка, %' (shipmentDetail) = DATA DOUBLE (shipmentDetail) IN baseGroup;
overSupplierMarkupShipmentDetail 'Оптовая надбавка/торговая скидка, %' (shipmentDetail) =
        UNION OVERRIDE 0 IF shipmentDetail IS shipmentDetail, supplierMarkupShipmentDetail(shipmentDetail);
dateFitToShipmentDetail 'Годен до' (shipmentDetail) = DATA DATE(shipmentDetail) IN baseGroup;

suppliersRangeShipmentDetail(shipmentDetail) = DATA range (shipmentDetail) IN idGroup;
numberSuppliersRangeShipmentDetail 'НДС поставщика, номер' (shipmentDetail) = dataRange(suppliersRangeShipmentDetail(shipmentDetail));
dataSuppliersRangeShipmentDetail 'НДС поставщика,%' (shipmentDetail) = dataActingRateRangeDate
    (suppliersRangeShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail)) IN baseGroup;

CONSTRAINT taxRange(suppliersRangeShipmentDetail(shipmentDetail)) != tax.taxNDS CHECKED BY suppliersRangeShipmentDetail MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

suppliersRangeShipmentDetail(shipmentDetail) <- suppliersRangeItemVal(itemShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail)) ON CHANGE itemShipmentDetail(shipmentDetail);

sumPriceShipmentDetail 'Сумма без НДС' (shipmentDetail) = priceShipmentDetail(shipmentDetail) * quantityShipmentDetail(shipmentDetail);
calcSumSupplierVATShipmentDetail 'Сумма НДС (расчетная)' (shipmentDetail) = sumPriceShipmentDetail(shipmentDetail) * dataSuppliersRangeShipmentDetail(shipmentDetail)/100;
sumSupplierVATShipmentDetail 'Сумма НДС' (shipmentDetail) = DATA DOUBLE (shipmentDetail) IN baseGroup;

sumSupplierVATShipmentDetail(shipmentDetail) <- calcSumSupplierVATShipmentDetail(shipmentDetail) ON CHANGE itemShipmentDetail(shipmentDetail);

totalSumSupplierVATShipment 'Общая сумма НДС поставщика' (shipment) = GROUP SUM
    sumSupplierVATShipmentDetail(shipmentDetail)
    BY shipmentShipmentDetail(shipmentDetail) IN baseGroup;

sumSupplierShipmentDetail 'Сумма с НДС' (shipmentDetail) = sumPriceShipmentDetail(shipmentDetail) +
    UNION OVERRIDE 0 IF shipmentDetail IS shipmentDetail, sumSupplierVATShipmentDetail(shipmentDetail);

retailRangeShipmentDetail(shipmentDetail) = DATA range (shipmentDetail) IN idGroup;
numberRetailRangeShipmentDetail 'НДС розничный, номер' (shipmentDetail) = dataRange(retailRangeShipmentDetail(shipmentDetail));
dataRetailRangeShipmentDetail 'НДС розничный,%' (shipmentDetail) = dataActingRateRangeDate
    (retailRangeShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail));

CONSTRAINT taxRange(retailRangeShipmentDetail(shipmentDetail)) != tax.taxNDS CHECKED BY retailRangeShipmentDetail MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

retailRangeShipmentDetail(shipmentDetail) <- overrideRateRangeItemVal(itemShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail)) ON CHANGE itemShipmentDetail(shipmentDetail);

wareShipmentDetail 'Посуда (ИД)' (shipmentDetail) = DATA ware(shipmentDetail) IN idGroup;
nameWareShipmentDetail 'Посуда' (shipmentDetail) = name(wareShipmentDetail(shipmentDetail)) IN baseGroup MINCHARWIDTH 10 PREFCHARWIDTH 15;

wareShipmentDetail(shipmentDetail) <- wareItem(itemShipmentDetail(shipmentDetail)) ON CHANGE itemShipmentDetail(shipmentDetail);

inWareShipmentDetail 'Товар в посуде' (shipmentDetail) = inWareItem(itemShipmentDetail(shipmentDetail));

priceWareShipmentDetail 'Цена посуды' (shipmentDetail) = DATA DOUBLE (shipmentDetail) IN baseGroup;

priceWareShipmentDetail (shipmentDetail) <- priceWareVal (wareShipmentDetail (shipmentDetail), dateShipmentDetail(shipmentDetail))
                                            ON CHANGE itemShipmentDetail(shipmentDetail);

overPriceWareShipmentDetail (shipmentDetail) = UNION OVERRIDE 0 IF shipmentDetail IS shipmentDetail,
                                               priceWareShipmentDetail (shipmentDetail);

wareRangeShipmentDetail 'Шкала НДС по посуде' (shipmentDetail) = DATA range (shipmentDetail);

dataWareRangeShipmentDetail 'НДС по посуде' (shipmentDetail) =
    dataActingRateRange(wareRangeShipmentDetail(shipmentDetail)) IN pricingShipmentDetailInfo MINCHARWIDTH 4 PREFCHARWIDTH 4;

wareRangeShipmentDetail (shipmentDetail) <- rangeWareVal (wareShipmentDetail (shipmentDetail), dateShipmentDetail(shipmentDetail))
    ON CHANGE itemShipmentDetail(shipmentDetail);

CONSTRAINT taxRange(wareRangeShipmentDetail(shipmentDetail)) != tax.taxNDS CHECKED BY wareRangeShipmentDetail
    MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';


sumVatWareShipmentDetail 'Сумма НДС по посуде, за ед.' (shipmentDetail) =
     round0((
     (UNION OVERRIDE 0 IF shipmentDetail IS shipmentDetail, priceWareShipmentDetail (shipmentDetail)) *
     UNION OVERRIDE 0 IF shipmentDetail IS shipmentDetail, dataWareRangeShipmentDetail(shipmentDetail))/100);

sumDetailVatWareShipmentDetail 'Сумма НДС по посуде' (shipmentDetail) =
    UNION OVERRIDE 0 IF shipmentDetail IS shipmentDetail, sumVatWareShipmentDetail(shipmentDetail) * quantityShipmentDetail(shipmentDetail);

totalSumVatWareShipment 'Общая сумма НДС по посуде' (shipment) =  GROUP SUM
    sumDetailVatWareShipmentDetail(shipmentDetail) IF shipmentShipmentDetail(shipmentDetail)==shipment
    BY shipment;

sumWareShipmentDetail 'Сумма посуды' (shipmentDetail) =
    priceWareShipmentDetail (shipmentDetail) * quantityShipmentDetail (shipmentDetail);

totalSumWareShipment 'Общая сумма посуды' (shipment) = GROUP SUM sumWareShipmentDetail (shipmentDetail)
    IF shipmentShipmentDetail(shipmentDetail) == shipment BY shipment;

totalCleanSumSupplierShipment 'Общая сумма с НДС (без посуды)' (shipment) =
    GROUP SUM sumSupplierShipmentDetail(shipmentDetail) BY shipmentShipmentDetail(shipmentDetail) IN baseGroup;

totalSumIncVATShipment 'Общая сумма НДС' (shipment) =
    (UNION OVERRIDE 0 IF shipment IS shipment, totalSumSupplierVATShipment (shipment)) +
    (UNION OVERRIDE 0 IF shipment IS shipment, totalSumVatWareShipment (shipment)) IN waybillSum;

totalSumSupplierShipment 'Общая сумма с НДС' (shipment) =
    totalCleanSumSupplierShipment (shipment) +
    (UNION OVERRIDE 0 IF shipment IS shipment, totalSumWareShipment (shipment)) IN waybillSum;


retailMarkupShipmentDetail 'Торговая надбавка, %'(shipmentDetail) = DATA DOUBLE (shipmentDetail) IN baseGroup;

retailMarkupShipmentDetail(shipmentDetail) <-
    markupItemDepartmentVal (itemShipmentDetail(shipmentDetail),
    departmentStoreShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))
    ON CHANGE itemShipmentDetail(shipmentDetail);

isFixPriceShipmentDetail 'Товар с фиксированной ценой' (shipmentDetail) = DATA BOOLEAN (shipmentDetail) IN pricingShipmentDetailInfo;
isFixPriceShipmentDetail(shipmentDetail) <- isFixPriceItem (itemShipmentDetail (shipmentDetail)) ON CHANGE itemShipmentDetail(shipmentDetail);

notRoundImporterPriceShipmentDetail 'Цена изготовителя/импортера (неокругленная)' (shipmentDetail) = UNION OVERRIDE
     [X*100/(100+Y)](priceShipmentDetail(shipmentDetail), overSupplierMarkupShipmentDetail(shipmentDetail)),
     [X*(100+Y)/100](priceShipmentDetail(shipmentDetail), overSupplierMarkupShipmentDetail(shipmentDetail))
     IF isFixPriceShipmentDetail(shipmentDetail);

importerPriceShipmentDetail 'Цена изготовителя/импортера' (shipmentDetail) =
    round0(notRoundImporterPriceShipmentDetail(shipmentDetail)) IN pricingShipmentDetailInfo;

sumMarkupShipmentDetail 'Сумма торговой надбавки (за ед.)' (shipmentDetail) =
    priceShipmentDetail(shipmentDetail) *
    (UNION OVERRIDE 0 IF shipmentDetail IS shipmentDetail, retailMarkupShipmentDetail(shipmentDetail))/100;

sumRetailVATShipmentDetail 'Сумма розничного НДС (за ед.)' (shipmentDetail) =
    (priceShipmentDetail(shipmentDetail) + sumMarkupShipmentDetail(shipmentDetail))*
    (UNION OVERRIDE 0 IF shipmentDetail IS shipmentDetail, dataRetailRangeShipmentDetail(shipmentDetail))/100;

nonRoundRetailPriceShipmentDetail 'Цена розничная (неокруглен.)'(shipmentDetail) = priceShipmentDetail(shipmentDetail) + sumMarkupShipmentDetail(shipmentDetail) + sumRetailVATShipmentDetail(shipmentDetail);

retailPriceShipmentDetail 'Новая розничная цена' (shipmentDetail) = IF isFixPriceShipmentDetail(shipmentDetail)
    THEN roundMinus1(importerPriceShipmentDetail(shipmentDetail) + overPriceWareShipmentDetail(shipmentDetail))
    ELSE roundMinus1(nonRoundRetailPriceShipmentDetail(shipmentDetail) + overPriceWareShipmentDetail(shipmentDetail));

diffRoundShipmentDetail 'Сумма округления (за ед.)'(shipmentDetail) = retailPriceShipmentDetail(shipmentDetail) - nonRoundRetailPriceShipmentDetail(shipmentDetail);

retailSumShipmentDetail 'Розничная сумма' (shipmentDetail) = quantityShipmentDetail(shipmentDetail) * retailPriceShipmentDetail(shipmentDetail);
retailSumShipment 'Розничная сумма' (shipment) = GROUP SUM retailSumShipmentDetail(shipmentDetail) BY shipmentShipmentDetail(shipmentDetail) IN waybillSum;

quantityShipmentOrderItem 'Поставленное количество' (orderSupplier, item) = GROUP SUM quantityShipmentDetail (shipmentDetail) IF inShipmentOrder (shipmentShipmentDetail (shipmentDetail), orderSupplier) BY orderSupplier, itemShipmentDetail(shipmentDetail);

//контроль цен поставки по заказам с учетом допустимых отклонений по поставщику
priceOrderItemShipment 'Цена товара в заказах поставки (максим.)' (item, shipment) = GROUP MAX
        priceSupplierItemOrderSupplier(orderSupplier, item) IF inShipmentOrder (shipment, orderSupplier) BY item, shipment;

maxAllowPriceItemShipment 'Максимально допустимая цена в поставке' (item, shipment) = priceOrderItemShipment (item, shipment) * (100 + [UNION OVERRIDE 0 IF shipment IS shipment, allowablePercentSupplier (supplierShipment(shipment))](shipment))/100;
minAllowPriceItemShipment 'Минимально допустимая цена в поставке' (item, shipment) = priceOrderItemShipment (item, shipment) * (100 - [UNION OVERRIDE 0 IF shipment IS shipment, allowablePercentSupplier (supplierShipment(shipment))](shipment))/100;
CONSTRAINT priceShipmentDetail (shipmentDetail) > maxAllowPriceItemShipment (itemShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail))
    AND isPostedShipmentDetail (shipmentDetail) MESSAGE 'Цена поставки больше цены заказа';

CONSTRAINT priceShipmentDetail (shipmentDetail) < minAllowPriceItemShipment (itemShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail))
    AND isPostedShipmentDetail (shipmentDetail) MESSAGE 'Цена поставки меньше цены заказа';

//старые ценовые параметры для переоценок
curRetailPriceShipmentDetail 'Текущая розничная цена' (shipmentDetail) = DATA DOUBLE (shipmentDetail) IN pricingShipmentDetailInfo;

curRetailRangeShipmentDetail(shipmentDetail) = DATA range (shipmentDetail) IN idGroup;
curDataRetailRangeShipmentDetail 'Текущий НДС розничный,%' (shipmentDetail) = dataActingRateRange(curRetailRangeShipmentDetail(shipmentDetail)) IN pricingShipmentDetailInfo;

//oldPriceShipmentDetail 'Старая цена поставщика'(shipmentDetail) = DATA DOUBLE (shipmentDetail) IN baseGroup;
//oldPriceShipmentDetail(shipmentDetail) <- priceSupplierItemDepartmentVal (supplierShipmentDetail(shipmentDetail),
//    itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail),
//    subtractDate2(dateShipmentDetail(shipmentDetail),1)) ON CHANGE itemShipmentDetail(shipmentDetail);

curImporterPriceShipmentDetail 'Текущая цена изготовителя/импортера' (shipmentDetail) = DATA DOUBLE (shipmentDetail) IN pricingShipmentDetailInfo;

curPriceWareShipmentDetail 'Текущая цена посуды' (shipmentDetail) = DATA DOUBLE (shipmentDetail) IN pricingShipmentDetailInfo;
curWareShipmentDetail = DATA ware (shipmentDetail) IN idGroup;
curNameWareShipmentDetail 'Текущая посуда' (shipmentDetail) = name(curWareShipmentDetail(shipmentDetail)) IN pricingShipmentDetailInfo;

//контроль ассортимента поставки по заказам с учетом ограничений по поставщику
sumQuantityOrderedItemShipment 'Количество по товару в заказах поставки' (item, shipment) = GROUP SUM
    sumQuantityItemOrderSupplier (orderSupplier, item)
    IF inShipmentOrder (shipment, orderSupplier) BY item, shipment;

isOrderedItemShipment 'Товар есть в заказах поставки' (item, shipment) =  sumQuantityOrderedItemShipment(item, shipment) > 0;

isNotShipedOrderedItemShipment 'Товар есть в заказе и отсутствует в поставке' (item, shipment) =
    isOrderedItemShipment (item, shipment) AND NOT isShipedItemShipment (item, shipment);

isOrderedShipmentDetail 'Товар поставки есть в заказах поставки' (shipmentDetail) = isOrderedItemShipment(itemShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail));

quantityOrderedShipmentDetailsShipment 'Количество позиций, для которых есть заказ' (shipment) = GROUP SUM 1 IF isOrderedShipmentDetail(shipmentDetail) AND shipmentShipmentDetail(shipmentDetail)==shipment BY shipment;
percentOrderedShipmentDetailsShipment 'Процент позиций поставки, для которых есть заказ' (shipment) =
    [X*100/Y](
    quantityOrderedShipmentDetailsShipment(shipment),
    UNION OVERRIDE 1 IF shipment IS shipment, quantityShipmentDetailsShipment(shipment)) IN ordersInfo;

surePercentSupplierShipment 'Обязательный % заказанных товаров в прих. накладной' (shipment) = DATA INTEGER (shipment);
surePercentSupplierShipment (shipment) <- surePercentSupplier(supplierShipment (shipment)) ON CHANGE supplierShipment(shipment);
controlSupplierDepartmentStoreShipment 'Контролировать ассортимент поставщика' (shipment) = DATA yesNo(shipment);
controlSupplierDepartmentStoreShipment(shipment) <- controlSupplierDepartmentStore (supplierShipment(shipment), departmentStoreShipment(shipment)) ON CHANGE supplierShipment(shipment); //неполный случай, нужно доделывать

CONSTRAINT controlSupplierDepartmentStoreShipment (shipment) AND percentOrderedShipmentDetailsShipment(shipment)<surePercentSupplierShipment (shipment)
            MESSAGE 'Процент заказанных позиций для поставки меньше допустимого для данного поставщика';

isAvailableOrderShipment 'Заявка допустимая для заказа' (shipment, orderSupplier) = dateShipment (shipment) <= addDate2(dateOrderSupplier (orderSupplier), UNION OVERRIDE 0 IF shipment IS shipment, afterDaysSupplier (supplierShipment(shipment)));

toFillShipmentDetailsShipment 'Заполнить поставку из заказов' =  ACTION (shipment) {
    FOR isNotShipedOrderedItemShipment (item, shipment) DO {
        ADDOBJ shipmentDetail;
        FOR s == addedObject() DO {
            SET itemShipmentDetail(s) <- item AS item;
            SET quantityShipmentDetail(s) <- sumQuantityOrderedItemShipment(item, shipment);
            SET priceShipmentDetail(s) <- priceOrderItemShipment(item, shipment);
        };
    };
} IN ordersInfo CONFIRM;

percentRateWasteShipmentDetail 'Процент для списания отходов' (shipmentDetail) = DATA DOUBLE (shipmentDetail);

percentRateWasteShipmentDetail (shipmentDetail) <- percentRateWasteItem(itemShipmentDetail(shipmentDetail))
    ON CHANGE itemShipmentDetail(shipmentDetail);

castShipmentObjectsToString100=
    FORMULA STRING[200] '\'Приход \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)';

descriptionShipment 'Название документа' (shipment) = castShipmentObjectsToString100(
    seriesNumberObject(shipment), dateShipment(shipment), nameSupplierShipment(shipment));

descriptionShipmentDetail 'Название документа' (shipmentDetail) = descriptionShipment(shipmentShipmentDetail(shipmentDetail));

// ---------------------------------- Дооценка на приходе ------------------------------------------

CLASS priceChangeShipment 'Переоценка на приходе' : priceChangeDocument;
CLASS priceChangeShipmentDetail 'Строка переоценки на приходе' : priceChangeDocumentDetail;

needToPriceChangeShipmentDetail (shipmentDetail) = curRetailPriceShipmentDetail(shipmentDetail) != retailPriceShipmentDetail(shipmentDetail) AND
                                                   balanceBeforeShipmentShipmentDetail(shipmentDetail) != 0;

needToPriceChangeShipment (shipment) = GROUP SUM 1 IF needToPriceChangeShipmentDetail(shipmentDetail) BY shipmentShipmentDetail(shipmentDetail);

@metaCodeDetailAggregation(shipment, priceChangeShipment, needToPriceChangeShipment);

// атрибуты документа переоценки

dateTimePriceChangeShipment 'Дата/время' (priceChangeShipment) = dateTimeShipment(shipmentPriceChangeShipment(priceChangeShipment));
datePriceChangeShipment 'Дата' (priceChangeShipment) = dateShipment(shipmentPriceChangeShipment(priceChangeShipment));
isPostedPriceChangeShipment 'Закрыт' (priceChangeShipment) = isPostedShipment(shipmentPriceChangeShipment(priceChangeShipment));
numberPriceChangeShipment 'Номер накладной' (priceChangeShipment) = numberObject(shipmentPriceChangeShipment(priceChangeShipment));
seriesPriceChangeShipment 'Серия накладной' (priceChangeShipment) = seriesObject(shipmentPriceChangeShipment(priceChangeShipment));
descriptionPriceChangeShipment 'Название документа' (priceChangeShipment) = descriptionShipment(shipmentPriceChangeShipment(priceChangeShipment));

supplierPriceChangeShipment (priceChangeShipment) = supplierShipment(shipmentPriceChangeShipment(priceChangeShipment));
nameSupplierPriceChangeShipment 'Поставщик' (priceChangeShipment) = name(supplierPriceChangeShipment(priceChangeShipment));

departmentStorePriceChangeShipment (priceChangeShipment) = departmentStoreShipment(shipmentPriceChangeShipment(priceChangeShipment));
nameDepartmentStorePriceChangeShipment 'Отдел магазина' (priceChangeShipment) = name(departmentStorePriceChangeShipment(priceChangeShipment));


// атрибуты детализации документа переоценки

itemPriceChangeShipmentDetail (priceChangeShipmentDetail) = itemShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));
nameItemPriceChangeShipmentDetail 'Товар' (priceChangeShipmentDetail) = nameAttributeItem(itemPriceChangeShipmentDetail(priceChangeShipmentDetail));

quantityPriceChangeShipmentDetail 'Остаток' (priceChangeShipmentDetail) = balanceBeforeShipmentShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));

curImporterPriceChangeShipmentDetail 'Текущая цена изготовителя' (priceChangeShipmentDetail) = curImporterPriceShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));
importerPriceChangeShipmentDetail 'Новая цена изготовителя' (priceChangeShipmentDetail) = importerPriceShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));

curDataRetailRangePriceChangeShipmentDetail 'Текущий НДС, %' (priceChangeShipmentDetail) = curDataRetailRangeShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));
dataRetailRangePriceChangeShipmentDetail 'Новый НДС, %' (priceChangeShipmentDetail) = dataRetailRangeShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));

curRetailPriceChangeShipmentDetail 'Текущая розничная цена' (priceChangeShipmentDetail) = curRetailPriceShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));
retailPriceChangeShipmentDetail 'Новая розничная цена' (priceChangeShipmentDetail) = retailPriceShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));

warePriceChangeShipmentDetail 'Новая посуда' (priceChangeShipmentDetail) = wareShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail)) IN baseGroup MINCHARWIDTH 10 PREFCHARWIDTH 15;
priceWarePriceChangeShipmentDetail 'Новая цена посуды' (priceChangeShipmentDetail) = priceWareShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));

curWarePriceChangeShipmentDetail 'Текущая посуда' (priceChangeShipmentDetail) = curWareShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail)) IN baseGroup MINCHARWIDTH 10 PREFCHARWIDTH 15;
curPriceWarePriceChangeShipmentDetail 'Текущая цена посуды' (priceChangeShipmentDetail) = curPriceWareShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));


FORM ordersShipment 'Заказы'
    OBJECTS s=shipment FIXED PANEL
    PROPERTIES (s) READONLY seriesNumberObject, dateShipment

    OBJECTS o=orderSupplier

    PROPERTIES (s, o) inShipmentOrder
    PROPERTIES (o) READONLY dataOrderSupplier, curDateOrderSupplier, dateOrderSupplier, nameDepartmentStoreOrderSupplier,
          nameSupplierOrderSupplier, completePercentageOrderSupplier, fullSumOrderSupplier, timeCreated, nameUserCreated

    FILTERS isSupplierShipmentOrder (s, o),
            isDepartmentStoreShipmentOrder (s, o),
            isAvailableOrderShipment (s, o)
;

showFormOrdersShipment 'Заказы' (shipment) = ACTION FORM ordersShipment OBJECTS s MODAL SHORTCUT ordersShipment DEFAULT;

FORM shipment 'Поставка'
    OBJECTS s=shipment FIXED PANEL
    PROPERTIES (s) numberObject, seriesObject, dateShipment, timeShipment, nameSupplierShipment,
                   nameDepartmentStoreShipment, ordersShipment, toFillShipmentDetailsShipment,
                   percentOrderedShipmentDetailsShipment, showFormOrdersShipment,
                   carryingChargesShipment, totalQuantityShipment, totalSumIncVATShipment, totalSumSupplierShipment, retailSumShipment,
                   noteShipment

    OBJECTS d=shipmentDetail
    PROPERTIES (d)  numberShipmentDetail, nameAttributeItemShipmentDetail, barcodeExSkuShipmentDetail, quantityShipmentDetail,
                    priceShipmentDetail, supplierMarkupShipmentDetail, dateFitToShipmentDetail, balanceBeforeShipmentShipmentDetail,
                    numberSuppliersRangeShipmentDetail, dataSuppliersRangeShipmentDetail, sumSupplierVATShipmentDetail, sumSupplierShipmentDetail,
                    nameWareShipmentDetail, priceWareShipmentDetail, numberRetailRangeShipmentDetail, dataRetailRangeShipmentDetail,
                    retailMarkupShipmentDetail, curRetailPriceShipmentDetail, retailPriceShipmentDetail, ADDOBJ, delete
    PROPERTIES (d) FORCE PANEL isFixPriceShipmentDetail, importerPriceShipmentDetail,
                               controlExpiryShipmentDetail, isManufacturedShipmentDetail, isWeightShipmentDetail, nameinActionItemDepartmentShipmentDetail,
                               hintShipmentDetail, nameCountryShipmentDetail, namebanRevaluationItemDepartmentShipmentDetail,
                               curImporterPriceShipmentDetail, curDataRetailRangeShipmentDetail, curNameWareShipmentDetail SHOWIF inWareShipmentDetail(d),
                               dataWareRangeShipmentDetail SHOWIF inWareShipmentDetail(d), curPriceWareShipmentDetail SHOWIF inWareShipmentDetail(d)


    PROPERTIES addShipmentDetailBarcode(s) TODRAW d

    FILTERS inShipmentShipmentDetail(s, d)

    OBJECTS i=item
    PROPERTIES (i) nameAttributeItem
    PROPERTIES (i, s) quantityItemShipment, sumQuantityOrderedItemShipment

    EDIT shipment OBJECT s
;


DESIGN shipment FROM DEFAULT{
    main{
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            tabbedPane = TRUE;
            ADD d.box {
                childConstraints = TO THE BOTTOM;
                title = 'Спецификация';
                ADD d.pricingShipmentDetailInfo {
                    childConstraints = TO THE BOTTOM;
                };
                ADD d.itemShipmentDetailInfo;
                POSITION d.pricingShipmentDetailInfo TO THE LEFT d.itemShipmentDetailInfo;
            };
            ADD i.box;
        };
        NEW header.box BEFORE specification.box {
            childConstraints = TO THE BOTTOM;

            NEW headerRow1 {
                childConstraints = TO THE RIGHT;
                ADD s.documentHeaderGroup {
                    childConstraints = TO THE BOTTOM;
                    NEW docHeadRow1 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(dateShipment);
                        ADD PROPERTY(timeShipment);
                        ADD PROPERTY(numberObject);
                        ADD PROPERTY(seriesObject);
                    };
                    NEW docHeadRow2 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(nameSupplierShipment);
                        ADD PROPERTY(nameDepartmentStoreShipment);
                    };
                };
                ADD s.ordersInfo {
                    childConstraints = TO THE BOTTOM;
                };
            };

            NEW headerRow2 {
                childConstraints = TO THE RIGHT;
                ADD s.waybillSum {
                    childConstraints = TO THE RIGHT;
                };
                ADD s.additionalInfo;
             };
        };
    };
};

FORM shipments 'Поставки'
    OBJECTS s=shipment
    PROPERTIES (s) READONLY objectClassName, numberObject, seriesObject, dateShipment, timeShipment, nameDepartmentStoreShipment,
                            nameSupplierShipment, quantityShipmentDetailsShipment, totalSumIncVATShipment, totalSumSupplierShipment, retailSumShipment
    PROPERTIES (s) FORCE PANEL nameUserCreated, timeCreated, nameUserClosed, timeClosed

    PROPERTIES (s)          ADDFORM, EDITFORM SHOWIF isDraftShipment(s), delete FORCE PANEL SHOWIF isDraftShipment(s),
                            postShipment SHOWIF isDraftShipment(s), unpostShipment SHOWIF isPostedShipment(s)

    OBJECTS d=shipmentDetail
    PROPERTIES (d) READONLY numberShipmentDetail, barcodeExSkuShipmentDetail, nameAttributeItemShipmentDetail,
                            quantityShipmentDetail, priceShipmentDetail, supplierMarkupShipmentDetail, dateFitToShipmentDetail,
                            nameWareShipmentDetail, dataSuppliersRangeShipmentDetail, dataRetailRangeShipmentDetail,
                            retailMarkupShipmentDetail, curRetailPriceShipmentDetail, retailPriceShipmentDetail

    FILTERS inShipmentShipmentDetail(s, d)
;

DESIGN shipments FROM DEFAULT {
    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }
    PROPERTY (delete(s)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
    POSITION s.historyGroup TO THE LEFT s.postedGroup;
    ADD d.grid.box BEFORE s.historyGroup;
}

//----------------------------------------------- Списание товара ---------------------------------------------------//
CLASS writeOff 'Списание' : outAccountSumDocumentLedger, historyObject, numeratedObject;
CLASS writeOffDetail 'Строка списания' : balanceItemLedger;
@metaCodeObjectWithPostEx (writeOff, 'Закрытое списание');

CLASS reasonOff 'Причина списания' : named;

reasonOffWriteOff 'Причина списания (ИД)' = DATA reasonOff (writeOff) IN idGroup;
nameReasonOffWriteOff 'Причина списания' (writeOff) = name(reasonOffWriteOff (writeOff)) IN additionalInfo;

quantityWriteOffDetail 'Кол-во для строки списания' = DATA INTEGER (writeOffDetail) IN baseGroup;

quantityWriteOff 'Общее кол-во' (writeOff) = GROUP SUM quantityWriteOffDetail(writeOffDetail)
                                                    BY writeOffWriteOffDetail(writeOffDetail) IN waybillSum;

accountPriceWriteOffDetail 'Цена учётная' = DATA DOUBLE (writeOffDetail) IN baseGroup;

accountSumWriteOffDetail 'Сумма' (writeOffDetail) = accountPriceWriteOffDetail(writeOffDetail)*quantityWriteOffDetail(writeOffDetail);
accountSumWriteOff 'Общая сумма' (writeOff) = GROUP SUM accountSumWriteOffDetail(writeOffDetail) BY writeOffWriteOffDetail(writeOffDetail) IN waybillSum;

articleItemWriteOff 'Артикул производителя/поставщика' (writeOffDetail) = articleItem(itemWriteOffDetail(writeOffDetail));
nameCountryItemWriteOff 'Страна' (writeOffDetail) = nameCountryItem(itemWriteOffDetail(writeOffDetail));

minReserveItemDepartmentWriteOff 'Минимальнодопустимый товарный запас в днях' (writeOffDetail) =
    minReserveItemDepartmentOver(itemWriteOffDetail(writeOffDetail), departmentStoreWriteOffDetail(writeOffDetail),
                                 dateWriteOffDetail(writeOffDetail));
maxReserveItemDepartmentWriteOff 'Максимальнодопустимы товарный запас в днях' (writeOffDetail) =
    maxReserveItemDepartmentOver(itemWriteOffDetail(writeOffDetail), departmentStoreWriteOffDetail(writeOffDetail),
                                 dateWriteOffDetail(writeOffDetail));
CONSTRAINT quantityWriteOffDetail(writeOffDetail) <= 0 MESSAGE 'Количество должно быть положительным';
CONSTRAINT accountPriceWriteOffDetail(writeOffDetail) <= 0 MESSAGE 'Цена должна быть положительной';

dateLastShipment 'Дата последней поставки' (writeOffDetail) = GROUP MAX dateShipmentDetail(shipmentDetail)
    IF (dateShipmentDetail(shipmentDetail) < dateWriteOffDetail(writeOffDetail)
    AND itemWriteOffDetail(writeOffDetail) == itemShipmentDetail(shipmentDetail))
    BY writeOffDetail;

FORM reasonOff 'Причина списания'
    OBJECTS r=reasonOff  FIXED PANEL
    PROPERTIES(r) name
;

castWriteOffObjectsToString100=
    FORMULA STRING[200] '\'Списание \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)';

descriptionWriteOff 'Название документа' (writeOff) = castWriteOffObjectsToString100(
    seriesNumberObject(writeOff), dateWriteOff(writeOff));

descriptionWriteOffDetail 'Название документа' (writeOffDetail) = descriptionWriteOff(writeOffWriteOffDetail(writeOffDetail));


//----------------------------------- Внутреннее перемещение (расход) -------------------------------------------------//
CLASS innerFlow 'Расход в отдел' : outAccountSumDocumentLedger, historyObject, numberedObject;
CLASS innerFlowDetail 'Строка расхода в отдел' : balanceItemLedger;
@metaCodeObjectWithPostEx (innerFlow, 'Закрытый расход в отдел');

recipientDepartmentInnerFlow 'Отдел-получатель (ИД)' (innerFlow) = DATA departmentStore(innerFlow);
nameRecipientDepartmentInnerFlow 'Отдел-получатель' (innerFlow) = name(recipientDepartmentInnerFlow(innerFlow)) IN documentHeaderGroup;

quantityInnerFlowDetail 'Количество' (innerFlowDetail) = DATA DOUBLE (innerFlowDetail) IN baseGroup;

retailPriceInnerFlowDetail 'Цена' (innerFlowDetail) = DATA DOUBLE (innerFlowDetail) IN baseGroup;

priceItemInnerFlow 'Цена (максим.)' (item, innerFlow) = GROUP MAX retailPriceInnerFlowDetail (innerFlowDetail)
    IF innerFlowInnerFlowDetail(innerFlowDetail) == innerFlow
    BY itemInnerFlowDetail(innerFlowDetail), innerFlowInnerFlowDetail(innerFlowDetail);

accountSumInnerFlowDetail 'Сумма' (innerFlowDetail) = quantityInnerFlowDetail(innerFlowDetail) * retailPriceInnerFlowDetail (innerFlowDetail) IN baseGroup;

importerPriceInnerFlowDetail 'Цена изготовителя' (innerFlowDetail) = DATA DOUBLE (innerFlowDetail);

importerPriceItemInnerFlow 'Цена изготовителя (максим.)' (item, innerFlow) = GROUP MAX importerPriceInnerFlowDetail (innerFlowDetail)
    IF innerFlowInnerFlowDetail(innerFlowDetail) == innerFlow BY itemInnerFlowDetail(innerFlowDetail), innerFlowInnerFlowDetail(innerFlowDetail);

retailRangeInnerFlowDetail(innerFlowDetail) = DATA range (innerFlowDetail) IN idGroup;
dataRetailRangeInnerFlowDetail 'НДС розничный,%' (innerFlowDetail) = dataActingRateRange(retailRangeInnerFlowDetail(innerFlowDetail)) IN baseGroup;

quantityItemInnerFlow 'Количество в расходе' (item, innerFlow) = GROUP SUM quantityInnerFlowDetail(innerFlowDetail)
    IF inInnerFlowInnerFlowDetail (innerFlow, innerFlowDetail) BY itemInnerFlowDetail (innerFlowDetail), innerFlowInnerFlowDetail (innerFlowDetail);

totalQuantityInnerFlow 'Общее количество' (innerFlow) = GROUP SUM quantityInnerFlowDetail(innerFlowDetail)
    BY innerFlowInnerFlowDetail(innerFlowDetail) IN waybillSum;

accountSumInnerFlow 'Общая сумма' (innerFlow) = GROUP SUM accountSumInnerFlowDetail (innerFlowDetail)
    IF innerFlowInnerFlowDetail (innerFlowDetail) == innerFlow BY innerFlowInnerFlowDetail(innerFlowDetail) IN waybillSum;

castInnerFlowObjectsToString100=
    FORMULA STRING[200] '\'Расход в отдел \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)';

descriptionInnerFlow 'Название документа' (innerFlow) = castInnerFlowObjectsToString100(
    seriesNumberObject(innerFlow), dateInnerFlow(innerFlow), nameRecipientDepartmentInnerFlow(innerFlow));

descriptionInnerFlowDetail 'Название документа' (innerFlowDetail) = descriptionInnerFlow(innerFlowInnerFlowDetail(innerFlowDetail));

wareInnerFlowDetail 'Текущая посуда (ИД)' (innerFlowDetail) = DATA ware(innerFlowDetail) IN baseGroup;
//wareInnerFlowDetail(innerFlowDetail) <- wareItem(itemInnerFlowDetail(innerFlowDetail)) ON CHANGE itemInnerFlowDetail(innerFlowDetail);
priceWareInnerFlowDetail 'Текущая цена посуды' (innerFlowDetail) = DATA DOUBLE (innerFlowDetail) IN baseGroup;

FORM innerFlow 'Расход в другой отдел'
    OBJECTS f=innerFlow FIXED PANEL
    PROPERTIES (f) numberObject, seriesObject, dateInnerFlow, timeInnerFlow, nameDepartmentStoreInnerFlow,
                   nameRecipientDepartmentInnerFlow, noteInnerFlow, totalQuantityInnerFlow, accountSumInnerFlow

    OBJECTS d=innerFlowDetail
    PROPERTIES (d) numberInnerFlowDetail, nameAttributeItemInnerFlowDetail, barcodeExSkuInnerFlowDetail,
                   quantityInnerFlowDetail, retailPriceInnerFlowDetail, importerPriceInnerFlowDetail READONLY,
                   dataRetailRangeInnerFlowDetail READONLY,
                   accountSumInnerFlowDetail, ADDOBJ, delete

    PROPERTIES addInnerFlowDetailBarcode(f) TODRAW d
    FILTERS inInnerFlowInnerFlowDetail(f, d)

    EDIT innerFlow OBJECT f
;

DESIGN innerFlow FROM DEFAULT{
    main{
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            tabbedPane = TRUE;
            ADD d.box {
                childConstraints = TO THE BOTTOM;
                title = 'Спецификация';
            };
        };
        NEW header.box BEFORE specification.box {
            childConstraints = TO THE BOTTOM;

            NEW headerRow1 {
                childConstraints = TO THE RIGHT;
                ADD f.documentHeaderGroup;
            };
            NEW headerRow2 {
                childConstraints = TO THE RIGHT;
                ADD f.waybillSum {
                    childConstraints = TO THE RIGHT;
                };
                ADD f.additionalInfo;
             };
        };
    };
};

FORM innerFlows 'Расходы в другие отделы'
    OBJECTS f=innerFlow
    PROPERTIES (f) READONLY objectClassName, numberObject, seriesObject, dateInnerFlow, timeInnerFlow, nameDepartmentStoreInnerFlow,
                            nameRecipientDepartmentInnerFlow, quantityInnerFlowDetailsInnerFlow,
                            totalQuantityInnerFlow, accountSumInnerFlow

    PROPERTIES (f) ADDFORM, EDITFORM SHOWIF isDraftInnerFlow(f), delete FORCE PANEL SHOWIF isDraftInnerFlow(f),
                   postInnerFlow SHOWIF isDraftInnerFlow(f), unpostInnerFlow SHOWIF isPostedInnerFlow(f)

    OBJECTS d=innerFlowDetail
    PROPERTIES (d) READONLY numberInnerFlowDetail, nameAttributeItemInnerFlowDetail, barcodeExSkuInnerFlowDetail,
                    quantityInnerFlowDetail, retailPriceInnerFlowDetail, importerPriceInnerFlowDetail, dataRetailRangeInnerFlowDetail, accountSumInnerFlowDetail
    FILTERS inInnerFlowInnerFlowDetail(f, d)
;

DESIGN innerFlows FROM DEFAULT {
    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }
    PROPERTY (delete(f)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
}

//----------------------------------- Внутреннее перемещение (приход) -------------------------------------------------//
CLASS innerArrival 'Приход в отдел' : incAccountSumDocumentLedger, historyObject;
CLASS innerArrivalDetail 'Строка прихода в отдел' : importerPriceLedger, accountPriceLedger, retailPriceLedger, retailVATLedger, warePriceLedger, balanceItemLedger;
@metaCodeObjectWithPostEx (innerArrival, 'Закрытый приход в отдел');

innerFlowInnerArrival 'Накладная отгрузки с отдела-отправителя (ИД)' (innerArrival) = DATA innerFlowPosted (innerArrival);

innerArrivalInnerFlow 'Приход отдел по расходу' (innerFlow) = GROUP UNIQUE innerArrival BY innerFlowInnerArrival (innerArrival);

isArrivedInnerFlow (innerFlow) = innerFlow IS innerFlow AND innerArrivalInnerFlow (innerFlow);

innerFlowInnerArrivalDetail (innerArrivalDetail) = innerFlowInnerArrival(innerArrivalInnerArrivalDetail(innerArrivalDetail));

numberArrival 'Накладная отгрузки с отдела-отправителя' (innerArrival) = numberObject(innerFlowInnerArrival(innerArrival)) IN documentHeaderGroup;
seriesArrival 'Серия накладной' (innerArrival) = seriesObject(innerFlowInnerArrival(innerArrival)) IN documentHeaderGroup;
seriesNumberArrival 'Серия/Номер' (innerArrival) = seriesNumberObject(innerFlowInnerArrival(innerArrival));

senderDepartmentInnerArrival 'Отдел-отправитель (ИД)' (innerArrival) = DATA departmentStore(innerArrival);
nameSenderDepartmentInnerArrival 'Отдел-отправитель' (innerArrival) = name(senderDepartmentInnerArrival(innerArrival)) IN documentHeaderGroup;

dateInnerArrival (innerArrival) <- dateInnerFlow(innerFlowInnerArrival(innerArrival)) ON CHANGE innerFlowInnerArrival(innerArrival);

CONSTRAINT recipientDepartmentInnerFlow(innerFlowInnerArrival(innerArrival)) != departmentStoreInnerArrival(innerArrival) CHECKED BY innerFlowInnerArrival
    MESSAGE 'Накладная с другого отдела';

CONSTRAINT innerFlowInnerArrival(p1) == innerFlowInnerArrival(p2) AND p1 != p2 CHECKED BY innerFlowInnerArrival MESSAGE 'Накладная задействована в другом приходе';

senderDepartmentInnerArrival (innerArrival) <- departmentStoreInnerFlow(innerFlowInnerArrival(innerArrival))
    ON CHANGE innerFlowInnerArrival(innerArrival);

quantityInnerArrivalDetail 'Количество' (innerArrivalDetail) = DATA DOUBLE (innerArrivalDetail) IN baseGroup;
retailPriceInnerArrivalDetail 'Цена' (innerArrivalDetail) = DATA DOUBLE (innerArrivalDetail) IN baseGroup;

priceItemInnerArrival 'Цена (максим.)' (item, innerArrival) = priceItemInnerFlow (
    item, innerFlowInnerArrival(innerArrival));
               // todo: derived зацикливает, придумать что-то другое
//retailPriceInnerArrivalDetail (innerArrivalDetail) <- priceItemInnerArrival(
//    itemInnerArrivalDetail(innerArrivalDetail), innerArrivalInnerArrivalDetail(innerArrivalDetail))
//    ON CHANGE itemInnerArrivalDetail (innerArrivalDetail);

curRetailPriceInnerArrivalDetail 'Текущая розничная цена' (innerArrivalDetail) = DATA DOUBLE (innerArrivalDetail);

accountSumInnerArrivalDetail 'Сумма' (innerArrivalDetail) =
    quantityInnerArrivalDetail(innerArrivalDetail) * retailPriceInnerArrivalDetail (innerArrivalDetail) IN baseGroup;

importerPriceInnerArrivalDetail 'Цена изготовителя' (innerArrivalDetail) = DATA DOUBLE (innerArrivalDetail);

curImporterPriceInnerArrivalDetail 'Текущая цена изготовителя' (innerArrivalDetail) = DATA DOUBLE (innerArrivalDetail);

importerPriceItemInnerArrival 'Цена изготовителя (максим.)' (item, innerArrival) = importerPriceItemInnerFlow(
    item, innerFlowInnerArrival(innerArrival));

//importerPriceInnerArrivalDetail (innerArrivalDetail) <- importerPriceItemInnerArrival(
//    itemInnerArrivalDetail(innerArrivalDetail), innerArrivalInnerArrivalDetail(innerArrivalDetail))
//    ON CHANGE itemInnerArrivalDetail (innerArrivalDetail);

retailRangeInnerArrivalDetail(innerArrivalDetail) = DATA range (innerArrivalDetail) IN idGroup;
dataRetailRangeInnerArrivalDetail 'НДС розничный,%' (innerArrivalDetail) = dataActingRateRange(retailRangeInnerArrivalDetail(innerArrivalDetail)) IN baseGroup;

curRetailRangeInnerArrivalDetail (innerArrivalDetail) = DATA range (innerArrivalDetail) IN idGroup;

curDataRetailRangeInnerArrivalDetail 'Текущий НДС, %' (innerArrivalDetail) =
    dataActingRateRangeDate (curRetailRangeInnerArrivalDetail (innerArrivalDetail),
                            dateInnerArrival(innerArrivalInnerArrivalDetail(innerArrivalDetail)));

wareInnerArrivalDetail 'Посуда (ИД)' (innerArrivalDetail) = DATA ware(innerArrivalDetail) IN baseGroup;
priceWareInnerArrivalDetail 'Цена посуды' (innerArrivalDetail) = DATA DOUBLE (innerArrivalDetail) IN baseGroup;
//wareInnerArrivalDetail(innerArrivalDetail) <- wareItem(itemInnerArrivalDetail(innerArrivalDetail)) ON CHANGE itemInnerArrivalDetail(innerArrivalDetail);

curWareInnerArrivalDetail(innerArrivalDetail) = DATA ware (innerArrivalDetail) IN idGroup;
curPriceWareInnerArrivalDetail 'Текущая цена посуды' (innerArrivalDetail) = DATA DOUBLE (innerArrivalDetail) IN baseGroup;


toFillInnerArrivalDetailsInnerArrival 'Заполнить документ из расхода' =  ACTION (innerArrival) {
    FOR innerArrivalInnerFlow(innerFlowInnerFlowDetail(innerFlowDetail)) == innerArrival DO {
        ADDOBJ innerArrivalDetail;
        FOR d == addedObject() DO {
            SET innerArrivalInnerArrivalDetail(d) <- innerArrival AS innerArrival;
            SET quantityInnerArrivalDetail (d) <- quantityInnerFlowDetail(innerFlowDetail);
            SET itemInnerArrivalDetail (d) <- itemInnerFlowDetail(innerFlowDetail);
 //           SET quantityInnerArrivalDetail (d) <- quantityInnerFlowDetail(innerFlowDetail);
            SET retailPriceInnerArrivalDetail (d) <- retailPriceInnerFlowDetail(innerFlowDetail);
            SET importerPriceInnerArrivalDetail (d) <- importerPriceInnerFlowDetail(innerFlowDetail);
            SET wareInnerArrivalDetail(d) <- wareInnerFlowDetail(innerFlowDetail);
            SET priceWareInnerArrivalDetail (d) <- priceWareInnerFlowDetail(innerFlowDetail);
            SET retailRangeInnerArrivalDetail (d) <- retailRangeInnerFlowDetail(innerFlowDetail);
        };
    };
} IN documentHeaderGroup CONFIRM;

quantityItemInnerArrival 'Количество в приходе' (item, innerArrival) = GROUP SUM quantityInnerArrivalDetail(innerArrivalDetail)
    IF inInnerArrivalInnerArrivalDetail (innerArrival, innerArrivalDetail) BY itemInnerArrivalDetail (innerArrivalDetail),
    innerArrivalInnerArrivalDetail (innerArrivalDetail);

quantityItemInnerFlowInnerArrival 'Количество в расходе' (item, innerArrival) = quantityItemInnerFlow(item, innerFlowInnerArrival(innerArrival));
diffQuantityItemInnerArrival 'Расхождение' (item, innerArrival) =
    quantityItemInnerFlowInnerArrival(item, innerArrival) - quantityItemInnerArrival(item, innerArrival);

balanceBeforeInnerArrivalInnerArrivalDetail 'Остаток до' (innerArrivalDetail) = DATA DOUBLE (innerArrivalDetail);

inInnerArrivalItem (item, innerArrival) = quantityItemInnerArrival(item, innerArrival) > 0;

totalQuantityInnerArrival 'Общее количество' (innerArrival) = GROUP SUM quantityInnerArrivalDetail(innerArrivalDetail)
    BY innerArrivalInnerArrivalDetail(innerArrivalDetail) IN waybillSum;

accountSumInnerArrival 'Общая сумма' (innerArrival) = GROUP SUM accountSumInnerArrivalDetail (innerArrivalDetail)
    BY innerArrivalInnerArrivalDetail(innerArrivalDetail) IN waybillSum;

// ---------------------------------- Дооценка на внутреннем перемещении (приход) ------------------------------------------

CLASS priceChangeInnerArrival 'Переоценка на внутреннем перемещении' : priceChangeDocument;
CLASS priceChangeInnerArrivalDetail 'Строка переоценки на внутреннем перемещении' : priceChangeDocumentDetail;

needToPriceChangeInnerArrivalDetail (innerArrivalDetail) = curRetailPriceInnerArrivalDetail(innerArrivalDetail) != retailPriceInnerArrivalDetail(innerArrivalDetail) AND
                                                   balanceBeforeInnerArrivalInnerArrivalDetail(innerArrivalDetail) != 0;

needToPriceChangeInnerArrival (innerArrival) = GROUP SUM 1 IF needToPriceChangeInnerArrivalDetail(innerArrivalDetail)
    BY innerArrivalInnerArrivalDetail(innerArrivalDetail);

@metaCodeDetailAggregation(innerArrival, priceChangeInnerArrival, needToPriceChangeInnerArrival);

// атрибуты документа переоценки

dateTimePriceChangeInnerArrival 'Дата/время' (priceChangeInnerArrival) = dateTimeInnerArrival(innerArrivalPriceChangeInnerArrival(priceChangeInnerArrival));
datePriceChangeInnerArrival 'Дата' (priceChangeInnerArrival) = dateInnerArrival(innerArrivalPriceChangeInnerArrival(priceChangeInnerArrival));
isPostedPriceChangeInnerArrival 'Закрыт' (priceChangeInnerArrival) = isPostedInnerArrival(innerArrivalPriceChangeInnerArrival(priceChangeInnerArrival));
numberPriceChangeInnerArrival 'Номер накладной' (priceChangeInnerArrival) = numberArrival(innerArrivalPriceChangeInnerArrival(priceChangeInnerArrival));
seriesPriceChangeInnerArrival 'Серия накладной' (priceChangeInnerArrival) = seriesArrival(innerArrivalPriceChangeInnerArrival(priceChangeInnerArrival));

senderDepartmentPriceChangeInnerArrival (priceChangeInnerArrival) = senderDepartmentInnerArrival(innerArrivalPriceChangeInnerArrival(priceChangeInnerArrival));
nameSenderDepartmentPriceChangeInnerArrival 'Отдел-отправитель' (priceChangeInnerArrival) = name(senderDepartmentPriceChangeInnerArrival(priceChangeInnerArrival));

departmentStorePriceChangeInnerArrival (priceChangeInnerArrival) = departmentStoreInnerArrival(innerArrivalPriceChangeInnerArrival(priceChangeInnerArrival));
nameDepartmentStorePriceChangeInnerArrival 'Отдел-получатель' (priceChangeInnerArrival) = name(departmentStorePriceChangeInnerArrival(priceChangeInnerArrival));

// атрибуты детализации документа переоценки

itemPriceChangeInnerArrivalDetail (priceChangeInnerArrivalDetail) =
    itemInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

nameItemPriceChangeInnerArrivalDetail 'Товар' (priceChangeInnerArrivalDetail) =
    nameAttributeItem(itemPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

quantityPriceChangeInnerArrivalDetail 'Остаток' (priceChangeInnerArrivalDetail) =
    balanceBeforeInnerArrivalInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

curImporterPriceChangeInnerArrivalDetail 'Текущая цена изготовителя' (priceChangeInnerArrivalDetail) =
    curImporterPriceInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

importerPriceChangeInnerArrivalDetail 'Новая цена изготовителя' (priceChangeInnerArrivalDetail) =
    importerPriceInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

curDataRetailRangePriceChangeInnerArrivalDetail 'Текущий НДС, %' (priceChangeInnerArrivalDetail) =
    curDataRetailRangeInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

dataRetailRangePriceChangeInnerArrivalDetail 'Новый НДС, %' (priceChangeInnerArrivalDetail) =
    dataRetailRangeInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

curRetailPriceChangeInnerArrivalDetail 'Текущая розничная цена' (priceChangeInnerArrivalDetail) =
    curRetailPriceInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

retailPriceChangeInnerArrivalDetail 'Новая розничная цена' (priceChangeInnerArrivalDetail) =
    retailPriceInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

castInnerArrivalObjectsToString100=
    FORMULA STRING[200] '\'Приход в отдел \'|| CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)';

descriptionInnerArrival 'Название документа' (innerArrival) = castInnerArrivalObjectsToString100(
    seriesNumberArrival(innerArrival), dateInnerArrival(innerArrival), nameSenderDepartmentInnerArrival(innerArrival));

descriptionInnerArrivalDetail 'Название документа' (innerArrivalDetail) = descriptionInnerArrival(innerArrivalInnerArrivalDetail(innerArrivalDetail));

warePriceChangeInnerArrivalDetail 'Новая посуда' (priceChangeInnerArrivalDetail) = wareInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail)) IN baseGroup;
priceWarePriceChangeInnerArrivalDetail 'Новая цена посуды' (priceChangeInnerArrivalDetail) = priceWareInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail)) IN baseGroup;

curWarePriceChangeInnerArrivalDetail 'Текущая посуда' (priceChangeInnerArrivalDetail) = curWareInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));
curPriceWarePriceChangeInnerArrivalDetail 'Текущая цена посуды' (priceChangeInnerArrivalDetail) =curPriceWareInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail)) IN baseGroup;


FORM innerArrival 'Приход из другого отдела'
    OBJECTS a=innerArrival FIXED PANEL
    PROPERTIES (a) nameDepartmentStoreInnerArrival, numberArrival SHOWIF departmentStoreInnerArrival(a), seriesArrival SHOWIF departmentStoreInnerArrival(a),
                   dateInnerArrival SHOWIF innerFlowInnerArrival(a), timeInnerArrival SHOWIF innerFlowInnerArrival(a), nameSenderDepartmentInnerArrival READONLY SHOWIF innerFlowInnerArrival(a),
                   cleanAllInnerArrivalDetailsInnerArrival SHOWIF innerFlowInnerArrival(a), toFillInnerArrivalDetailsInnerArrival SHOWIF innerFlowInnerArrival(a),
                   noteInnerArrival READONLY SHOWIF innerFlowInnerArrival(a), totalQuantityInnerArrival SHOWIF innerFlowInnerArrival(a),
                   accountSumInnerArrival SHOWIF innerFlowInnerArrival(a)

    OBJECTS d=innerArrivalDetail
    PROPERTIES (d) SHOWIF innerFlowInnerArrival(a) numberInnerArrivalDetail, nameAttributeItemInnerArrivalDetail, barcodeExSkuInnerArrivalDetail,
                   quantityInnerArrivalDetail, balanceBeforeInnerArrivalInnerArrivalDetail, retailPriceInnerArrivalDetail READONLY, importerPriceInnerArrivalDetail READONLY,
                   dataRetailRangeInnerArrivalDetail READONLY,
                   accountSumInnerArrivalDetail READONLY, ADDOBJ, delete

    PROPERTIES addInnerArrivalDetailBarcode(a) TODRAW d
    FILTERS inInnerArrivalInnerArrivalDetail(a, d)

    OBJECTS i=item
    PROPERTIES (i) SHOWIF innerFlowInnerArrival(a) nameAttributeItem
    PROPERTIES (i, a) SHOWIF innerFlowInnerArrival(a) quantityItemInnerFlowInnerArrival, quantityItemInnerArrival,
                             diffQuantityItemInnerArrival, importerPriceItemInnerArrival, priceItemInnerArrival
    FILTERS inInnerArrivalItem (i, a)

    EDIT innerArrival OBJECT a
;

DESIGN innerArrival FROM DEFAULT{
    main{
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            tabbedPane = TRUE;
            ADD d.box {
                childConstraints = TO THE BOTTOM;
                title = 'Спецификация';
            };
            ADD i.box;
        };
        NEW header.box BEFORE specification.box {
            childConstraints = TO THE BOTTOM;

            NEW headerRow1 {
                childConstraints = TO THE RIGHT;
                ADD a.documentHeaderGroup;
            };
            NEW headerRow2 {
                childConstraints = TO THE RIGHT;
                ADD a.waybillSum {
                    childConstraints = TO THE RIGHT;
                };
                ADD a.additionalInfo;
             };
        };
    };
};

FORM innerArrivals 'Приходы из других отделов'
    OBJECTS a=innerArrival
    PROPERTIES (a) READONLY objectClassName, numberArrival, seriesArrival, dateInnerArrival, timeInnerArrival, nameDepartmentStoreInnerArrival,
                            nameSenderDepartmentInnerArrival, totalQuantityInnerArrival, accountSumInnerArrival

    PROPERTIES (a) ADDFORM, EDITFORM SHOWIF isDraftInnerArrival(a), delete FORCE PANEL SHOWIF isDraftInnerArrival(a),
                   postInnerArrival SHOWIF isDraftInnerArrival(a), unpostInnerArrival SHOWIF isPostedInnerArrival(a)

    OBJECTS d=innerArrivalDetail
    PROPERTIES (d) READONLY numberInnerArrivalDetail, nameAttributeItemInnerArrivalDetail, barcodeExSkuInnerArrivalDetail,
                   quantityInnerArrivalDetail, retailPriceInnerArrivalDetail, accountSumInnerArrivalDetail

    FILTERS inInnerArrivalInnerArrivalDetail(a, d)
;

DESIGN innerArrivals FROM DEFAULT {
    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }
    PROPERTY (delete(a)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
}

//----------------------------------- Списание отходов по нормам -------------------------------------------------//
needToWasteShipmentDetail (shipmentDetail) = TRUE IF percentRateWasteShipmentDetail(shipmentDetail);
needToWasteShipment (shipment) = GROUP SUM 1 IF needToWasteShipmentDetail(shipmentDetail) BY shipmentShipmentDetail(shipmentDetail) IN baseGroup;

CLASS wastage 'Списание отходов' : outAccountSumDocumentLedger, historyObject;
CLASS wastagePosted 'Закрытое списание отходов' : wastage, postedObject;
CLASS wastageDetail 'Строка документа': balanceItemLedger;

@metaCodeDetailAggregation (shipment, wastage, needToWasteShipment);

dateWastage 'Дата документа' (wastage) = dateShipment(shipmentWastage(wastage));
timeWastage 'Время документа' (wastage) = timeShipment(shipmentWastage(wastage));
numberWastage 'Номер документа' (wastage) = numberObject(shipmentWastage(wastage));
seriesWastage 'Серия документа' (wastage) = seriesObject(shipmentWastage(wastage));
seriesNumberWastage 'Серия/номер документа' (wastage) = seriesNumberObject(shipmentWastage(wastage));

departmentStoreWastage 'Отдел документа (ИД)' (wastage) = departmentStoreShipment (shipmentWastage(wastage));
nameDepartmentStoreWastage 'Отдел документа' (wastage) = name(departmentStoreWastage (wastage));

supplierWastage 'Поставщик (ИД)' (wastage) = supplierShipment(shipmentWastage(wastage));
nameSupplierWastage 'Поставщик' (wastage) = name(supplierWastage(wastage));

dateTimeWastageDetail (wastageDetail) = dateTimeShipmentDetail(shipmentDetailWastageDetail(wastageDetail));
dateTimeWastage 'Дата/время документа' (wastage) = dateTimeShipment(shipmentWastage(wastage));

departmentStoreWastageDetail (wastageDetail) = departmentStoreShipmentDetail(shipmentDetailWastageDetail(wastageDetail));

isPostedWastage 'Закрыт' (wastage) = isPostedShipment(shipmentWastage(wastage));
isPostedWastageDetail 'Закрыт' (wastageDetail) = isPostedWastage(wastageWastageDetail(wastageDetail));

itemWastageDetail 'Товар (ИД)' (wastageDetail) = itemShipmentDetail(shipmentDetailWastageDetail(wastageDetail));
nameAttributeItemWastageDetail 'Товар' (wastageDetail) = nameAttributeItem (itemWastageDetail(wastageDetail));
barcodeExSkuWastageDetail 'Штрих-код' (wastageDetail) = barcodeExSkuShipmentDetail(shipmentDetailWastageDetail(wastageDetail));

percentRateWasteWastageDetail 'Процент списания' (wastageDetail) = percentRateWasteShipmentDetail(shipmentDetailWastageDetail(wastageDetail));

numberWastageDetail 'Номер строки' (wastageDetail) =
    PARTITION SUM 1 IF wastageDetail IS wastageDetail BY wastageWastageDetail(wastageDetail)
    ORDER wastageDetail IN recognizeGroup MINCHARWIDTH 3 PREFCHARWIDTH 3;

quantityWastageDetail 'Количество списания '(wastageDetail) =
    percentRateWasteWastageDetail (wastageDetail)* quantityShipmentDetail(shipmentDetailWastageDetail(wastageDetail))/100;

priceWastageDetail 'Цена' (wastageDetail) = retailPriceShipmentDetail(shipmentDetailWastageDetail(wastageDetail));

sumWastageDetail 'Сумма' (wastageDetail) = quantityWastageDetail(wastageDetail) * priceWastageDetail(wastageDetail);

totalSumWastage 'Общая сумма' (wastage) = GROUP SUM sumWastageDetail (wastageDetail)
    IF  wastageWastageDetail(wastageDetail) == wastage BY wastageWastageDetail(wastageDetail) IN waybillSum;

castWastageObjectsToString100=
    FORMULA STRING[200] '\'Списание отходов \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)';

descriptionWastage 'Название документа' (wastage) = castWastageObjectsToString100(
    seriesNumberWastage(wastage), dateWastage(wastage), nameSupplierWastage(wastage));

descriptionWastageDetail 'Название документа' (wastageDetail) = descriptionWastage(wastageWastageDetail(wastageDetail));

FORM wastages 'Списания отходов'

    OBJECTS w=wastage
    PROPERTIES (w) READONLY numberWastage, seriesWastage, dateWastage, timeWastage, nameDepartmentStoreWastage, nameSupplierWastage, totalSumWastage

    OBJECTS d=wastageDetail
    PROPERTIES (d) READONLY numberWastageDetail, barcodeExSkuWastageDetail, nameAttributeItemWastageDetail, quantityWastageDetail, priceWastageDetail, sumWastageDetail

    FILTERS wastageWastageDetail(d)== w;
;

//----------------------------- Возврат поставщику ---------------------------------------------------------------//

CLASS returnSupplier 'Возврат поставщику' : outAccountSumDocumentLedger, historyObject, numberedObject;
CLASS returnSupplierDetail 'Строка возврата поставщику' : balanceItemLedger;
@metaCodeObjectWithPostEx(returnSupplier, 'Закрытый возврат поставщику');

// шапка документа "Возврат поставщику"
supplierReturnSupplier 'Поставщик (ИД)' (returnSupplier) = DATA supplier (returnSupplier) IN idGroup;

supplierReturnSupplierDetail 'Поставщик (ИД)' (returnSupplierDetail) = supplierReturnSupplier(returnSupplierReturnSupplierDetail(returnSupplierDetail));

nameSupplierReturnSupplier 'Поставщик' (returnSupplier) = name(supplierReturnSupplier(returnSupplier)) IN documentHeaderGroup
    MINCHARWIDTH 30 PREFCHARWIDTH 40;

// информация по товару

GROUP itemReturnSupplierDetailInfo 'Информация по товару' : baseGroup;

controlExpiryReturnSupplierDetail 'Контролировать сроки годности товара?' (returnSupplierDetail) =
    controlExpiryItem (itemReturnSupplierDetail(returnSupplierDetail)) IN itemReturnSupplierDetailInfo;

isManufacturedReturnSupplierDetail 'Товар производится?' (returnSupplierDetail) =
    isManufacturedItem(itemReturnSupplierDetail(returnSupplierDetail)) IN itemReturnSupplierDetailInfo;
isWeightReturnSupplierDetail 'Весовой товар?' (returnSupplierDetail) =
    isWeightItem(itemReturnSupplierDetail(returnSupplierDetail)) IN itemReturnSupplierDetailInfo;

nameinActionItemDepartmentReturnSupplierDetail 'Товар акции?' (returnSupplierDetail) =
    name(inActionItemDepartmentVal(itemReturnSupplierDetail(returnSupplierDetail),
    departmentStoreReturnSupplier(returnSupplierReturnSupplierDetail(returnSupplierDetail)),
    dateReturnSupplierDetail(returnSupplierDetail))) IN itemReturnSupplierDetailInfo FIXEDCHARWIDTH 2;

hintReturnSupplierDetail 'Подсказка по товару' (returnSupplierDetail) =
    hintItem(itemReturnSupplierDetail(returnSupplierDetail)) IN itemReturnSupplierDetailInfo;

nameCountryReturnSupplierDetail 'Страна производства/происхождения' (returnSupplierDetail) =
    name(countryItem(itemReturnSupplierDetail(returnSupplierDetail))) IN itemReturnSupplierDetailInfo MINCHARWIDTH 15 PREFCHARWIDTH 15;

namebanRevaluationItemDepartmentReturnSupplierDetail 'Запрет на переоценку' (returnSupplierDetail) =
    name(banRevaluationItemDepartmentVal(itemReturnSupplierDetail(returnSupplierDetail),
    departmentStoreReturnSupplier(returnSupplierReturnSupplierDetail(returnSupplierDetail)),
    dateReturnSupplierDetail(returnSupplierDetail))) IN itemReturnSupplierDetailInfo FIXEDCHARWIDTH 2;

// количество/цены по строкам

batchReturnSupplierDetail 'Партия (ИД)' = DATA batchShipment (returnSupplierDetail) IN idGroup;

commonInfoBatchReturnSupplierDetail 'Партия' (returnSupplierDetail) = descriptionShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail));

quantityReturnSupplierDetail 'Количество' (returnSupplierDetail) = DATA DOUBLE (returnSupplierDetail) IN baseGroup;

priceReturnSupplierDetail 'Цена товара' (returnSupplierDetail) = DATA DOUBLE (returnSupplierDetail) IN baseGroup;
priceReturnSupplierDetail (returnSupplierDetail) <- priceShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                    ON CHANGE batchReturnSupplierDetail(returnSupplierDetail);

supplierMarkupReturnSupplierDetail 'Оптовая надбавка/торговая скидка, %' (returnSupplierDetail) = DATA DOUBLE (returnSupplierDetail) IN baseGroup;
supplierMarkupReturnSupplierDetail (returnSupplierDetail) <- overSupplierMarkupShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                             ON CHANGE batchReturnSupplierDetail(returnSupplierDetail);

dataSuppliersRangeReturnSupplierDetail 'НДС поставщика, %' (returnSupplierDetail) = DATA DOUBLE (returnSupplierDetail) IN baseGroup;
dataSuppliersRangeReturnSupplierDetail (returnSupplierDetail) <- dataSuppliersRangeShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                                                     ON CHANGE batchReturnSupplierDetail(returnSupplierDetail);

wareReturnSupplierDetail 'Посуда (ИД)' (returnSupplierDetail) = DATA ware (returnSupplierDetail);
wareReturnSupplierDetail (returnSupplierDetail) <- wareShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                   ON CHANGE batchReturnSupplierDetail(returnSupplierDetail);
nameWareReturnSupplierDetail 'Посуда ' (returnSupplierDetail) = name(wareReturnSupplierDetail(returnSupplierDetail));

priceWareReturnSupplierDetail 'Цена посуды' (returnSupplierDetail) = DATA DOUBLE (returnSupplierDetail);
priceWareReturnSupplierDetail (returnSupplierDetail) <- priceWareShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                        ON CHANGE batchReturnSupplierDetail(returnSupplierDetail);

dataWareRangeReturnSupplierDetail 'НДС по посуде' (returnSupplierDetail) = DATA DOUBLE (returnSupplierDetail);
dataWareRangeReturnSupplierDetail (returnSupplierDetail) <- dataWareRangeShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                            ON CHANGE batchReturnSupplierDetail(returnSupplierDetail);

sumPriceReturnSupplierDetail 'Сумма без НДС' (returnSupplierDetail) =
    priceReturnSupplierDetail(returnSupplierDetail) * quantityReturnSupplierDetail(returnSupplierDetail);

calcSumSupplierVATReturnSupplierDetail 'Сумма НДС (расчетная)' (returnSupplierDetail) =
    sumPriceReturnSupplierDetail(returnSupplierDetail) * dataSuppliersRangeReturnSupplierDetail(returnSupplierDetail) / 100;

sumSupplierVATReturnSupplierDetail 'Сумма НДС' (returnSupplierDetail) = DATA DOUBLE (returnSupplierDetail) IN baseGroup;

sumSupplierVATReturnSupplierDetail (returnSupplierDetail) <- calcSumSupplierVATReturnSupplierDetail(returnSupplierDetail)
                                                             ON CHANGE dataSuppliersRangeReturnSupplierDetail(returnSupplierDetail);

sumSupplierReturnSupplierDetail 'Сумма с НДС' (returnSupplierDetail) = sumPriceReturnSupplierDetail(returnSupplierDetail) +
    UNION OVERRIDE 0 IF returnSupplierDetail IS returnSupplierDetail, sumSupplierVATReturnSupplierDetail(returnSupplierDetail);

// Суммовые параметры для шапки документа

totalQuantityReturnSupplier 'Общее количество' (returnSupplier) = GROUP SUM quantityReturnSupplierDetail(returnSupplierDetail)
                                                                  BY returnSupplierReturnSupplierDetail(returnSupplierDetail) IN waybillSum;

totalSumIncVATReturnSupplier 'Общая сумма НДС' (returnSupplier) = GROUP SUM sumSupplierVATReturnSupplierDetail(returnSupplierDetail)
                                                                  BY returnSupplierReturnSupplierDetail(returnSupplierDetail) IN waybillSum;

totalSumSupplierReturnSupplier 'Общая сумма с НДС' (returnSupplier) = GROUP SUM sumSupplierReturnSupplierDetail(returnSupplierDetail)
                                                                      BY returnSupplierReturnSupplierDetail(returnSupplierDetail) IN waybillSum;

isReturnSupplier (returnSupplier, returnSupplierDetail) = returnSupplierReturnSupplierDetail(returnSupplierDetail) == returnSupplier;

CONSTRAINT itemShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail)) != itemReturnSupplierDetail(returnSupplierDetail)
    OR departmentStoreShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail)) != departmentStoreReturnSupplierDetail(returnSupplierDetail)
    OR supplierShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail)) != supplierReturnSupplierDetail(returnSupplierDetail)
    OR isNotPostedShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
    CHECKED BY batchReturnSupplierDetail MESSAGE 'Выберите партию этого товара';

castReturnSupplierObjectsToString100=
    FORMULA STRING[200] '\'Возврат поставщику \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)';

descriptionReturnSupplier 'Название документа' (returnSupplier) = castReturnSupplierObjectsToString100(
    seriesNumberObject(returnSupplier), dateReturnSupplier(returnSupplier), nameSupplierReturnSupplier(returnSupplier));

descriptionReturnSupplierDetail 'Название документа' (returnSupplierDetail) = descriptionReturnSupplier(returnSupplierReturnSupplierDetail(returnSupplierDetail));

//----------------------------------------------- Чеки ---------------------------------------------------//

CLASS bill 'Чек' : historyObject;
TABLE bill (bill);

CLASS billDetail 'Строка чека' : balanceItemLedger;
TABLE billDetail (billDetail);

dateBill 'Дата документа' (bill) = DATA DATE (bill) IN documentHeaderGroup;
dateBill (bill) <- currentDate() ON ASSIGN bill AS bill;

timeBill 'Время документа' (bill) = DATA TIME (bill) IN documentHeaderGroup;
timeBill (bill) <- currentTime() ON ASSIGN bill AS bill;

dateTimeBill 'Дата/время документа' (bill) = toDateTime(dateBill(bill), timeBill(bill));

departmentStoreBill 'Отдел документа (ИД)' (bill) = DATA departmentStore(bill) IN idGroup;
nameDepartmentStoreBill 'Отдел документа' (bill) = name(departmentStoreBill(bill)) IN documentHeaderGroup
    MINCHARWIDTH 20 PREFCHARWIDTH 40;

billBillDetail 'Строка документа' = DATA bill (billDetail) IN idGroup;

dateTimeBillDetail (billDetail) = dateTimeBill(billBillDetail(billDetail));

departmentStoreBillDetail (billDetail) = departmentStoreBill(billBillDetail(billDetail));

numberBillDetail 'Номер строки' (billDetail) =
    PARTITION SUM 1 IF billDetail IS billDetail BY billBillDetail(billDetail)
    ORDER billDetail IN recognizeGroup MINCHARWIDTH 3 PREFCHARWIDTH 3;

itemBillDetail 'Товар строки документа (ИД)' (billDetail) = DATA item (billDetail) IN idGroup;

nameAttributeItemBillDetail 'Товар строки документа' (billDetail) =
    nameAttributeItem(itemBillDetail(billDetail)) IN recognizeGroup;

numberBill 'Номер чека' (bill) = DATA INTEGER (bill) IN documentHeaderGroup;

barcodeExBillDetail 'Штрих-код' (billDetail) = DATA STRING[14] (billDetail);

quantityBillDetail 'Количество продажи' (billDetail) = DATA DOUBLE (billDetail);
priceBillDetail 'Цена продажи' (billDetail) = DATA DOUBLE (billDetail);
sumBillDetail 'Сумма продажи' (billDetail) = priceBillDetail(billDetail)*quantityBillDetail(billDetail);
discountSumBillDetail 'Сумма скидки' (billDetail) = DATA DOUBLE (billDetail);

sumBill 'Сумма чека' (bill) = GROUP SUM sumBillDetail(billDetail) IF billBillDetail (billDetail) == bill
    BY billBillDetail (billDetail) IN waybillSum PERSISTENT;

discountSumBill 'Сумма скидки в чеке' (bill) = GROUP SUM discountSumBillDetail(billDetail) IF billBillDetail (billDetail) == bill
    BY billBillDetail (billDetail) IN waybillSum;

quantityBillDetailsBill 'Количество строк в чеке' (bill) = GROUP SUM 1 IF billBillDetail (billDetail) == bill
    BY billBillDetail (billDetail) IN waybillSum;

quantityItemBill 'Количество по товару в чеке' (item, bill) = GROUP SUM quantityBillDetail(billDetail)
    BY itemBillDetail(billDetail), billBillDetail(billDetail);

quantityPositionsBill 'Количество позиций в чеке' (bill) = GROUP SUM 1 IF quantityItemBill (item, bill)
    BY bill IN waybillSum;

CLASS payment 'Оплата по чеку';
CLASS STATIC paymentMeans 'Форма оплаты'{
    cash 'Наличные',
    card 'Карточка'
};
CLASS paymentType 'Тип платежа' : named;

paymentMeansPaymentType (paymentType) = DATA paymentMeans(paymentType);
namePaymentMeansPaymentType 'Форма оплаты' (paymentType) = name(paymentMeansPaymentType(paymentType)) IN baseGroup;

billPayment 'Чек (ИД)' (payment) = DATA bill (payment);
numberBillPayment 'Чек' (payment) = numberBill(billPayment(payment));

discountCardBill (bill) = DATA discountCard(bill);
numberDiscountCardBill 'Номер дисконтной карты' (bill) = numberDiscountCard(discountCardBill(bill));
nameCustomerDiscountCardBill 'Держатель дисконтной карты' (bill) = nameCustomerDiscountCard(discountCardBill(bill));

sumPayment 'Сумма платежа' (payment) = DATA DOUBLE(payment);

totalSumPaymentBill (bill) = GROUP SUM sumPayment(payment)
    BY billPayment(payment);

CONSTRAINT sumBill (bill) != UNION OVERRIDE 0 IF bill IS bill, totalSumPaymentBill(bill) MESSAGE 'Сумма платежей по чеку не соответствует сумме чека';

paymentTypePayment 'Тип платежа (ИД' (payment) = DATA paymentType(payment);
namePaymentTypePayment 'Тип платежа' (payment) = name(paymentTypePayment(payment));

paymentMeansPayment (payment) = paymentMeansPaymentType(paymentTypePayment(payment));
namePaymentMeansPayment 'Форма оплаты' (payment) = name(paymentMeansPayment(payment));

castBillObjectsToString100=
    FORMULA STRING[200] '\'Чек № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) ';

descriptionBill 'Название документа' (bill) = castBillObjectsToString100(
    numberBill(bill), dateTimeBill(bill));

descriptionBillDetail (billDetail) = descriptionBill(billBillDetail(billDetail));

CLASS zReport 'Z-отчет (открытый)' : outAccountSumDocumentLedger, historyObject;
CLASS zReportPosted 'Z-отчет (закрытый)' : zReport, postedObject;

@metaCodePostedObject(zReport);

dateOpenZReport 'Дата открытия Z-отчета' (zReport) = DATA DATE(zReport);
numberZReport 'Номер Z-отчета' (zReport) = DATA INTEGER(zReport);

zReportBill(bill) = DATA zReport(bill);
numberZReportBill(bill) = numberZReport(zReportBill(bill));
dateTimeZReport (zReport) = GROUP MAX dateTimeBill(bill) BY zReportBill(bill);

zReportBillDetail (billDetail) = zReportBill(billBillDetail(billDetail));

isPostedBill(bill) = isPostedZReport(zReportBill(bill));
isPostedBillDetail (billDetail) = isPostedBill(billBillDetail(billDetail));

cashRegisterZReport (zReport) = DATA cashRegister(zReport);
numberCashRegisterZReport 'Касса Z-отчета' (zReport) = numberCashRegister(cashRegisterZReport(zReport));

cashRegisterBill 'Касса (ИД)' (bill) = cashRegisterZReport(zReportBill(bill));
numberCashRegisterBill 'Касса ' (bill) = numberCashRegister(cashRegisterBill(bill)) IN documentHeaderGroup;

departmentStoreZReport (zReport) = DATA departmentStore(zReport);
nameDepartmentStoreZReport 'Отдел Z-отчета' (zReport) = name(departmentStoreZReport(zReport));

departmentStoreBill (bill) <- departmentStoreZReport(zReportBill(bill)) ON CHANGE zReportBill(bill);

castZReportObjectsToString100=
    FORMULA STRING[200] '\'Продажа по кассе \' || CAST($1 AS TEXT) || \' отдела \' || CAST($2 AS TEXT) ||  \' от \' || CAST($3 AS TEXT)';

descriptionZReport (zReport) = castZReportObjectsToString100 (numberCashRegisterZReport(zReport),
    nameDepartmentStoreZReport(zReport), dateOpenZReport(zReport));

sumZReport 'Сумма Z-отчета' (zReport) = GROUP SUM sumBill(bill) BY zReportBill(bill) PERSISTENT;
discountSumZReport 'Сумма скидок Z-отчета' (zReport) = GROUP SUM discountSumBill(bill) BY zReportBill(bill) PERSISTENT;

quantityBillsZReport 'Количество чеков' (zReport) = GROUP SUM 1 IF zReportBill(bill)==zReport BY zReportBill(bill);

quantityZReportBill 'Количество по товару в Z-отчете' (item, zReport) = GROUP SUM quantityBillDetail(billDetail)
    BY itemBillDetail(billDetail), zReportBillDetail(billDetail);

quantityPositionsZReport 'Количество товаров в Z-отчете' (zReport) = GROUP SUM 1 IF quantityZReportBill (item, zReport)
    BY zReport IN waybillSum;

addBillDetailBarcodeFill 'Добавить строку по штрих-коду' = ACTION (bill) {
    FORM barcodeInput MODAL;

    IF formResult() == formResult.ok THEN {
         SET tmpSku() <- skuBarcodeStringDate(chosenString('barcode'), dateBill(bill));
         IF tmpSku() IS item THEN {
             ADDOBJ billDetail;
             FOR o == addedObject() DO {
                 SET billBillDetail(o) <- bill AS bill;
                 SET itemBillDetail(o) <- tmpSku();
                 SET barcodeExBillDetail(o) <- chosenString('barcode');
            //   SET quantity###object##Detail(o) <- amountBarcode(valueBarcodeToDate(chosenString('barcode'), date###object(object)));
            };
        } ELSE
        MESSAGE 'Не найден штрих-код';
    };

}TOOLBAR EDITKEY 'F4';

@metaCodeSingleAggregation(zReport, incomeCashOrder, isPostedZReport);

sumCashDocument (incomeCashOrder) <- sumZReport(zReportIncomeCashOrder(incomeCashOrder)) ON ASSIGN incomeCashOrder IS incomeCashOrder;
cashRegisterIncomeCashOrder (incomeCashOrder) <- cashRegisterZReport(zReportIncomeCashOrder(incomeCashOrder)) ON ASSIGN incomeCashOrder IS incomeCashOrder;

// документ скидок для товарного отчета
CLASS saleDiscountDocument 'Скидка по продаже через кассы' : outAccountSumDocumentLedger;

needToSaleDiscountDocument (zReport) = TRUE IF discountSumZReport(zReport);

@metaCodeSingleAggregation(zReport, saleDiscountDocument, needToSaleDiscountDocument);

dateSaleDiscountDocument 'Дата' (saleDiscountDocument) = dateOpenZReport(zReportSaleDiscountDocument(saleDiscountDocument));
dateTimeSaleDiscountDocument 'Дата/время' (saleDiscountDocument) = dateTimeZReport(zReportSaleDiscountDocument(saleDiscountDocument));

departmentStoreSaleDiscountDocument (saleDiscountDocument) = departmentStoreZReport(zReportSaleDiscountDocument(saleDiscountDocument));
nameDepartmentStoreSaleDiscountDocument 'Отдел' (saleDiscountDocument) = name(departmentStoreSaleDiscountDocument(saleDiscountDocument));

numberCashRegisterSaleDiscountDocument (saleDiscountDocument) = numberCashRegisterZReport(zReportSaleDiscountDocument(saleDiscountDocument));

sumSaleDiscountDocument (saleDiscountDocument) = discountSumZReport(zReportSaleDiscountDocument(saleDiscountDocument));

castSaleDiscountDocumentObjectsToString100=
    FORMULA STRING[200] '\'Скидка по кассе \' || CAST($1 AS TEXT) || \' отдела \' || CAST($2 AS TEXT) ||  \' от \' || CAST($3 AS TEXT)';

descriptionSaleDiscountDocument (saleDiscountDocument) = castZReportObjectsToString100 (numberCashRegisterSaleDiscountDocument(saleDiscountDocument),
    nameDepartmentStoreSaleDiscountDocument(saleDiscountDocument), dateSaleDiscountDocument(saleDiscountDocument));

isPostedSaleDiscountDocument (saleDiscountDocument) = isPostedZReport(zReportSaleDiscountDocument(saleDiscountDocument));
//----------------------------------------------- Переоценка товара ---------------------------------------------------//

CLASS userPriceChange 'Переоценка товаров' : priceChangeDocument, numeratedObject;
CLASS userPriceChangeDetail 'Строка переоценки товаров' : priceChangeDocumentDetail, importerPriceLedger, accountPriceLedger, retailPriceLedger, retailVATLedger, warePriceLedger;
@metaCodeObjectWithPostEx (userPriceChange, 'Закрытая переоценка товаров');

quantityUserPriceChangeDetail 'Кол-во переоценки' = DATA DOUBLE (userPriceChangeDetail);

importerPriceUserPriceChangeDetail 'Цена изготовителя' = DATA DOUBLE (userPriceChangeDetail);
retailRangeUserPriceChangeDetail 'НДС' = DATA range (userPriceChangeDetail);
numberRetailRangeUserPriceChangeDetail 'НДС, номер' (userPriceChangeDetail) = dataRange(retailRangeUserPriceChangeDetail(userPriceChangeDetail));
dataRetailRangeUserPriceChangeDetail 'НДС, %' (userPriceChangeDetail) = dataActingRateRangeDate(retailRangeUserPriceChangeDetail(userPriceChangeDetail), dateUserPriceChangeDetail(userPriceChangeDetail));

CONSTRAINT taxRange(retailRangeUserPriceChangeDetail(userPriceChangeDetail)) != tax.taxNDS CHECKED BY retailRangeUserPriceChangeDetail MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

curImporterPriceUserPriceChangeDetail 'Текущая цена изготовителя' = DATA DOUBLE (userPriceChangeDetail);
curRetailRangeUserPriceChangeDetail 'Текущий НДС' = DATA range (userPriceChangeDetail);
curNumberRetailRangeUserPriceChangeDetail 'Текущий НДС, номер' (userPriceChangeDetail) = dataRange(curRetailRangeUserPriceChangeDetail(userPriceChangeDetail));
curDataRetailRangeUserPriceChangeDetail 'Текущий НДС, %' (userPriceChangeDetail) = dataActingRateRangeDate(curRetailRangeUserPriceChangeDetail(userPriceChangeDetail), dateUserPriceChangeDetail(userPriceChangeDetail));


curRetailPriceUserPriceChangeDetail 'Текущая розничная цена' = DATA DOUBLE (userPriceChangeDetail);
retailPriceUserPriceChangeDetail 'Новая розничная цена' = DATA DOUBLE (userPriceChangeDetail);

castUserPriceChangeToString100=
    FORMULA STRING[200] '\'Акт переоценки \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT)';

descriptionUserPriceChange 'Название документа' (userPriceChange) = castUserPriceChangeToString100(
    seriesNumberObject(userPriceChange), dateUserPriceChange(userPriceChange));

descriptionUserPriceChangeUserPriceChangeDetail 'Название документа' (userPriceChangeDetail) = descriptionUserPriceChange(userPriceChangeUserPriceChangeDetail(userPriceChangeDetail));

descriptionPriceChangeInnerArrival 'Название документа' (priceChangeInnerArrival) = descriptionInnerArrival(innerArrivalPriceChangeInnerArrival(priceChangeInnerArrival));

wareUserPriceChangeDetail 'Посуда (ИД)' (userPriceChangeDetail) = DATA ware(userPriceChangeDetail) IN baseGroup;
wareUserPriceChangeDetail(userPriceChangeDetail) <- wareItem(itemUserPriceChangeDetail(userPriceChangeDetail)) ON CHANGE itemUserPriceChangeDetail(userPriceChangeDetail);

priceWareUserPriceChangeDetail 'Новая цена посуды' (userPriceChangeDetail) = DATA DOUBLE (userPriceChangeDetail) IN baseGroup;

//priceWareUserPriceChangeDetail (userPriceChangeDetail) <- priceWareVal (wareUserPriceChangeDetail (userPriceChangeDetail), dateUserPriceChangeDetail(userPriceChangeDetail))
//                                            ON CHANGE itemUserPriceChangeDetail(userPriceChangeDetail);

curWareUserPriceChangeDetail 'Текущая посуда (ИД)' (userPriceChangeDetail) = DATA ware(userPriceChangeDetail) IN idGroup;

curPriceWareUserPriceChangeDetail 'Текущая цена посуды' (userPriceChangeDetail) = DATA DOUBLE (userPriceChangeDetail) IN baseGroup;


FORM userPriceChange 'Переоценка товаров'
    OBJECTS u=userPriceChange FIXED PANEL
    PROPERTIES (u) nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject,
                   dateUserPriceChange, timeUserPriceChange, nameDepartmentStoreUserPriceChange

    OBJECTS d=userPriceChangeDetail
    PROPERTIES (d) numberUserPriceChangeDetail, nameAttributeItemUserPriceChangeDetail, barcodeExSkuUserPriceChangeDetail, quantityUserPriceChangeDetail,
                   curImporterPriceUserPriceChangeDetail, importerPriceUserPriceChangeDetail, curDataRetailRangeUserPriceChangeDetail,
                   numberRetailRangeUserPriceChangeDetail, dataRetailRangeUserPriceChangeDetail,
                   curRetailPriceUserPriceChangeDetail, retailPriceUserPriceChangeDetail, curPriceWareUserPriceChangeDetail, priceWareUserPriceChangeDetail,
                   ADDOBJ, delete

    PROPERTIES addUserPriceChangeDetailBarcode(u) TODRAW d
    FILTERS inUserPriceChangeUserPriceChangeDetail(u, d)

    EDIT userPriceChange OBJECT u
;

DESIGN userPriceChange FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
    }
}

FORM userPriceChanges 'Переоценки товаров'

    OBJECTS u=userPriceChange
    PROPERTIES (u) READONLY objectClassName, numberObject, seriesObject, dateUserPriceChange, timeUserPriceChange, nameDepartmentStoreUserPriceChange

    PROPERTIES (u) ADDFORM, EDITFORM SHOWIF isDraftUserPriceChange(u), delete FORCE PANEL SHOWIF isDraftUserPriceChange(u),
                   postUserPriceChange SHOWIF isDraftUserPriceChange(u), unpostUserPriceChange SHOWIF isPostedUserPriceChange(u)

    OBJECTS d=userPriceChangeDetail
    PROPERTIES (d) numberUserPriceChangeDetail, nameAttributeItemUserPriceChangeDetail, barcodeExSkuUserPriceChangeDetail, quantityUserPriceChangeDetail,
                   importerPriceUserPriceChangeDetail, numberRetailRangeUserPriceChangeDetail, dataRetailRangeUserPriceChangeDetail,
                   curRetailPriceUserPriceChangeDetail, retailPriceUserPriceChangeDetail, curPriceWareUserPriceChangeDetail, priceWareUserPriceChangeDetail
                 //  ADDOBJ, delete

    FILTERS inUserPriceChangeUserPriceChangeDetail(u, d)
;

DESIGN userPriceChanges FROM DEFAULT {
    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }
    PROPERTY (delete(u)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
}

TABLE itemDepartmentStore (item, departmentStore);

//---------------------------- Количественные регистры (конкретная реализация) ----------------------------------------//

dateTimeBalanceItemLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeShipmentDetail(ledger),
                                                                  dateTimeReturnSupplierDetail(ledger),
                                                                  dateTimeInnerArrivalDetail(ledger),
                                                                  dateTimeWriteOffDetail(ledger),
                                                                  dateTimeStatementDetail(ledger),
                                                                  dateTimeInnerFlowDetail(ledger),
                                                                  dateTimeWastageDetail(ledger),
                                                                  dateTimeInventoryLedger(ledger),
                                                                  dateTimeBillDetail(ledger),
                                                                  dateTimeStudyInputDetail(ledger),
                                                                  dateTimeStudyOutputDetail(ledger) PERSISTENT INDEXED;

isPostedBalanceItemLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedShipmentDetail(ledger),
                                                              isPostedReturnSupplierDetail(ledger),
                                                              isPostedInnerArrivalDetail(ledger),
                                                              isPostedWriteOffDetail(ledger),
                                                              isPostedStatementDetail(ledger),
                                                              isPostedInnerFlowDetail(ledger),
                                                              isPostedWastageDetail(ledger),
                                                              isPostedInventoryLedger(ledger),
                                                              isPostedBillDetail(ledger),
                                                              isPostedStudyInputDetail(ledger),
                                                              isPostedStudyOutputDetail(ledger) PERSISTENT;

itemBalanceItemLedger (ledger) = UNION EXCLUSIVE itemShipmentDetail(ledger),
                                                 itemReturnSupplierDetail(ledger),
                                                 itemInnerArrivalDetail(ledger),
                                                 itemWriteOffDetail(ledger),
                                                 itemStatementDetail(ledger),
                                                 itemInnerFlowDetail(ledger),
                                                 itemWastageDetail(ledger),
                                                 itemInventoryLedger(ledger),
                                                 itemBillDetail(ledger),
                                                 itemStudyInputDetail(ledger),
                                                 itemStudyOutputDetail(ledger) PERSISTENT;

departmentStoreBalanceItemLedger (ledger) = UNION EXCLUSIVE departmentStoreShipmentDetail(ledger),
                                                            departmentStoreReturnSupplierDetail(ledger),
                                                            departmentStoreInnerArrivalDetail(ledger),
                                                            departmentStoreWriteOffDetail(ledger),
                                                            departmentStoreStatementDetail(ledger),
                                                            departmentStoreInnerFlowDetail(ledger),
                                                            departmentStoreWastageDetail(ledger),
                                                            departmentStoreInventoryLedger(ledger),
                                                            departmentStoreBillDetail(ledger),
                                                            departmentStoreStudyInputDetail(ledger),
                                                            departmentStoreStudyOutputDetail(ledger) PERSISTENT;

quantityBalanceItemLedger 'Количество' (ledger) = UNION EXCLUSIVE quantityShipmentDetail(ledger),
                                                     quantityInnerArrivalDetail(ledger),
                                                    -quantityWriteOffDetail(ledger),
                                                    -quantityStatementDetail(ledger),
                                                    -quantityInnerFlowDetail(ledger),
                                                    -quantityWastageDetail(ledger),
                                                    -quantityReturnSupplierDetail(ledger),
                                                    -quantityInventoryLedger(ledger),
                                                    -quantityBillDetail(ledger),
                                                     overQuantityStudyOutputDetail(ledger),
                                                    -quantityStudyInputDetail(ledger) PERSISTENT;

descriptionLedger 'Название документа' (ledger) = UNION EXCLUSIVE descriptionShipmentDetail(ledger),
                                                            descriptionInnerArrivalDetail(ledger),
                                                            descriptionWriteOffDetail(ledger),
                                                            descriptionStatementDetail(ledger),
                                                            descriptionInnerFlowDetail(ledger),
                                                            descriptionWastageDetail(ledger),
                                                            descriptionReturnSupplierDetail(ledger),
                                                            descriptionInventoryLedger(ledger),
                                                            descriptionUserPriceChangeUserPriceChangeDetail(ledger),
                                                            descriptionBillDetail(ledger),
                                                            descriptionStudyOutputDetail(ledger),
                                                            descriptionStudyInputDetail(ledger) PERSISTENT;


currentBalanceItemLedger 'Текущий остаток' (item, departmentStore) = GROUP SUM quantityBalanceItemLedger (ledger) AND isPostedBalanceItemLedger(ledger)
                                                          BY itemBalanceItemLedger(ledger), departmentStoreBalanceItemLedger(ledger) PERSISTENT;

// без учета текущей даты/времени
balanceBItemLedgerDateTime (item, departmentStore, dateTime) = UNION SUM currentBalanceItemLedger(item, departmentStore) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM quantityBalanceItemLedger (ledger) AND dateTimeBalanceItemLedger(ledger) >= (dateTime AS DATETIME) AND isPostedBalanceItemLedger(ledger)
                                                                         BY itemBalanceItemLedger(ledger), departmentStoreBalanceItemLedger(ledger), dateTime](item, departmentStore, dateTime);

// с учетом текущей даты/времени
balanceAItemLedgerDateTime 'Остаток на дату' (item, departmentStore, dateTime) = UNION SUM currentBalanceItemLedger(item, departmentStore) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM quantityBalanceItemLedger (ledger) AND dateTimeBalanceItemLedger(ledger) > (dateTime AS DATETIME) AND isPostedBalanceItemLedger(ledger)
                                                                         BY itemBalanceItemLedger(ledger), departmentStoreBalanceItemLedger(ledger), dateTime](item, departmentStore, dateTime);

// --------------------------- Использование регистров количества (автоматическое заполнение) ---------------------------------

balanceDepartmentStoreItemWriteOff 'Текущий остаток' (writeOffDetail) =
    balanceDepartmentStoreItem(departmentStoreWriteOffDetail(writeOffDetail), itemWriteOffDetail(writeOffDetail)) PERSISTENT;

//---------------------------- Ценовые регистры (конкретная реализация) ----------------------------------------//

META metaCodeItemDepartmentStoreLedger(prefix)

    nameItem###prefix##Ledger 'Товар' (ledger) = nameAttributeItem(item###prefix##Ledger(ledger));
    nameDepartmentStore###prefix##Ledger 'Отдел магазина' (ledger) = name(departmentStore###prefix##Ledger(ledger));

    // todo : переделать на concat и deconcat

    order###prefix##Ledger = LIST(dateTime###prefix##Ledger(ledger), ledger) PERSISTENT;

    concatLedgerB###prefix##DateTime (item, departmentStore, dateTime) = GROUP MAX order###prefix##Ledger(ledger) AND
        isPosted###prefix##Ledger(ledger) AND dateTime###prefix##Ledger(ledger) < (dateTime AS DATETIME)
        BY item###prefix##Ledger(ledger), departmentStore###prefix##Ledger(ledger), dateTime;

    ledgerB###prefix##DateTime (item, departmentStore, dateTime) = concatLedgerB###prefix##DateTime(item, departmentStore, dateTime)[2];

    concatLedgerA###prefix##DateTime (item, departmentStore, dateTime) = GROUP MAX order###prefix##Ledger(ledger) AND
        isPosted###prefix##Ledger(ledger) AND dateTime###prefix##Ledger(ledger) <= (dateTime AS DATETIME)
        BY item###prefix##Ledger(ledger), departmentStore###prefix##Ledger(ledger), dateTime;

    ledgerA###prefix##DateTime (item, departmentStore, dateTime) = concatLedgerA###prefix##DateTime(item, departmentStore, dateTime)[2];

END


// Цена изготовителя / импортера
dateTimeImporterPriceLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeShipmentDetail(ledger),
                                                                    dateTimeInnerArrivalDetail(ledger),
                                                                    dateTimeUserPriceChangeDetail(ledger),
                                                                    dateTimeStudyOutputDetail(ledger) PERSISTENT INDEXED;

isPostedImporterPriceLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedShipmentDetail(ledger),
                                                                isPostedInnerArrivalDetail(ledger),
                                                                isPostedUserPriceChangeDetail(ledger),
                                                                isPostedStudyOutputDetail(ledger) PERSISTENT;

itemImporterPriceLedger (ledger) = UNION EXCLUSIVE itemShipmentDetail(ledger),
                                                   itemInnerArrivalDetail(ledger),
                                                   itemUserPriceChangeDetail(ledger),
                                                   itemStudyOutputDetail(ledger) PERSISTENT;

departmentStoreImporterPriceLedger (ledger) = UNION EXCLUSIVE departmentStoreShipmentDetail(ledger),
                                                              departmentStoreInnerArrivalDetail(ledger),
                                                              departmentStoreUserPriceChangeDetail(ledger),
                                                              departmentStoreStudyOutputDetail(ledger) PERSISTENT;

priceImporterLedger 'Цена' (ledger) = UNION EXCLUSIVE importerPriceShipmentDetail(ledger),
                                                      importerPriceInnerArrivalDetail(ledger),
                                                      importerPriceUserPriceChangeDetail(ledger),
                                                      curImporterPriceStudyOutputDetail(ledger) PERSISTENT;
@metaCodeItemDepartmentStoreLedger(importerPrice);

priceImporterBLedgerDateTime (item, departmentStore, dateTime) = priceImporterLedger(ledgerBImporterPriceDateTime(item, departmentStore, dateTime));

// Цена посуды
dateTimeWarePriceLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeShipmentDetail(ledger),
                                                                dateTimeInnerArrivalDetail(ledger),
                                                                dateTimeUserPriceChangeDetail(ledger) PERSISTENT INDEXED;

isPostedWarePriceLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedShipmentDetail(ledger),
                                                            isPostedInnerArrivalDetail(ledger),
                                                            isPostedUserPriceChangeDetail(ledger) PERSISTENT;

itemWarePriceLedger (ledger) = UNION EXCLUSIVE itemShipmentDetail(ledger),
                                               itemInnerArrivalDetail(ledger),
                                               itemUserPriceChangeDetail(ledger) PERSISTENT;

departmentStoreWarePriceLedger (ledger) = UNION EXCLUSIVE departmentStoreShipmentDetail(ledger),
                                                          departmentStoreInnerArrivalDetail(ledger),
                                                          departmentStoreUserPriceChangeDetail(ledger) PERSISTENT;

wareWarePriceLedger(ledger) = UNION EXCLUSIVE wareShipmentDetail(ledger),
                                              wareInnerArrivalDetail(ledger),
                                              wareUserPriceChangeDetail(ledger) PERSISTENT;

priceWareWarePriceLedger 'Цена' (ledger) = UNION EXCLUSIVE priceWareShipmentDetail(ledger),
                                                           priceWareInnerArrivalDetail(ledger),
                                                           priceWareUserPriceChangeDetail(ledger) PERSISTENT;

nameWareWarePriceLedger 'Посуда' (ledger) = name(wareWarePriceLedger(ledger));
@metaCodeItemDepartmentStoreLedger(warePrice);

priceWareBLedgerDateTime (item, departmentStore, dateTime) = priceWareWarePriceLedger(ledgerBWarePriceDateTime(item, departmentStore, dateTime));
wareBLedgerDateTime (item, departmentStore, dateTime) = wareWarePriceLedger(ledgerBWarePriceDateTime(item, departmentStore, dateTime));

// Розничный НДС
dateTimeRetailVATLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeShipmentDetail(ledger),
                                                                dateTimeInnerArrivalDetail(ledger),
                                                                dateTimeUserPriceChangeDetail(ledger),
                                                                dateTimeStudyOutputDetail(ledger) PERSISTENT INDEXED;

isPostedRetailVATLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedShipmentDetail(ledger),
                                                            isPostedInnerArrivalDetail(ledger),
                                                            isPostedUserPriceChangeDetail(ledger),
                                                            isPostedStudyOutputDetail(ledger) PERSISTENT;

itemRetailVATLedger (ledger) = UNION EXCLUSIVE itemShipmentDetail(ledger),
                                               itemInnerArrivalDetail(ledger),
                                               itemUserPriceChangeDetail(ledger),
                                               itemStudyOutputDetail(ledger) PERSISTENT;

departmentStoreRetailVATLedger (ledger) = UNION EXCLUSIVE departmentStoreShipmentDetail(ledger),
                                                          departmentStoreInnerArrivalDetail(ledger),
                                                          departmentStoreUserPriceChangeDetail(ledger),
                                                          departmentStoreStudyOutputDetail(ledger) PERSISTENT;

rangeRetailLedger (ledger) = UNION EXCLUSIVE retailRangeShipmentDetail(ledger),
                                             retailRangeInnerArrivalDetail(ledger),
                                             retailRangeUserPriceChangeDetail(ledger),
                                             retailRangeStudyOutputDetail(ledger) PERSISTENT;

dataRetailLedger 'НДС, %' (ledger) = dataActingRateRangeDate(rangeRetailLedger(ledger), dateInTime(dateTimeRetailVATLedger(ledger))) PERSISTENT;

@metaCodeItemDepartmentStoreLedger(retailVAT);

rangeRetailBLedgerDateTime (item, departmentStore, dateTime) = rangeRetailLedger(ledgerBRetailVATDateTime(item, departmentStore, dateTime));
dataRetailBLedgerDateTime 'НДС, %' (item, departmentStore, dateTime) =
            dataActingRateRangeDate(rangeRetailBLedgerDateTime(item, departmentStore, dateTime), dateInTime(dateTime));

// Цена учетная
dateTimeAccountPriceLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeShipmentDetail(ledger),
                                                                   dateTimeInnerArrivalDetail(ledger),
                                                                   dateTimeUserPriceChangeDetail(ledger),
                                                                   dateTimeStudyOutputDetail(ledger) PERSISTENT INDEXED;

isPostedAccountPriceLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedShipmentDetail(ledger),
                                                               isPostedInnerArrivalDetail(ledger),
                                                               isPostedUserPriceChangeDetail(ledger),
                                                               isPostedStudyOutputDetail(ledger) PERSISTENT;

itemAccountPriceLedger (ledger) = UNION EXCLUSIVE itemShipmentDetail(ledger),
                                                  itemInnerArrivalDetail(ledger),
                                                  itemUserPriceChangeDetail(ledger),
                                                  itemStudyOutputDetail(ledger) PERSISTENT;


departmentStoreAccountPriceLedger (ledger) = UNION EXCLUSIVE departmentStoreShipmentDetail(ledger),
                                                             departmentStoreInnerArrivalDetail(ledger),
                                                             departmentStoreUserPriceChangeDetail(ledger),
                                                             departmentStoreStudyOutputDetail(ledger) PERSISTENT;


priceAccountLedger 'Цена' (ledger) = UNION EXCLUSIVE retailPriceShipmentDetail(ledger),
                                                     retailPriceInnerArrivalDetail(ledger),
                                                     retailPriceUserPriceChangeDetail(ledger),
                                                     retailPriceStudyOutputDetail(ledger) PERSISTENT;

@metaCodeItemDepartmentStoreLedger(accountPrice);

priceAccountBLedgerDateTime 'Учетная цена (до)' (item, departmentStore, dateTime) = priceAccountLedger(ledgerBAccountPriceDateTime(item, departmentStore, dateTime));
priceAccountALedgerDateTime 'Учетная цена (после)' (item, departmentStore, dateTime) = priceAccountLedger(ledgerAAccountPriceDateTime(item, departmentStore, dateTime));

// Цена розничная
dateTimeRetailPriceLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeShipmentDetail(ledger),
                                                                  dateTimeInnerArrivalDetail(ledger),
                                                                  dateTimeUserPriceChangeDetail(ledger),
                                                                  dateTimeStudyOutputDetail(ledger) PERSISTENT INDEXED;

isPostedRetailPriceLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedShipmentDetail(ledger),
                                                              isPostedInnerArrivalDetail(ledger),
                                                              isPostedUserPriceChangeDetail(ledger),
                                                              isPostedStudyOutputDetail(ledger) PERSISTENT;

itemRetailPriceLedger (ledger) = UNION EXCLUSIVE itemShipmentDetail(ledger),
                                                 itemInnerArrivalDetail(ledger),
                                                 itemUserPriceChangeDetail(ledger),
                                                 itemStudyOutputDetail(ledger) PERSISTENT;

departmentStoreRetailPriceLedger (ledger) = UNION EXCLUSIVE departmentStoreShipmentDetail(ledger),
                                                            departmentStoreInnerArrivalDetail(ledger),
                                                            departmentStoreUserPriceChangeDetail(ledger),
                                                            departmentStoreStudyOutputDetail(ledger) PERSISTENT;

priceRetailLedger 'Цена' (ledger) = UNION EXCLUSIVE retailPriceShipmentDetail(ledger),
                                                    retailPriceInnerArrivalDetail(ledger),
                                                    retailPriceUserPriceChangeDetail(ledger),
                                                    retailPriceStudyOutputDetail(ledger) PERSISTENT;

@metaCodeItemDepartmentStoreLedger(retailPrice);

priceRetailBLedgerDateTime (item, departmentStore, dateTime) = priceRetailLedger(ledgerBRetailPriceDateTime(item, departmentStore, dateTime));

// --------------------------- Использование регистров (автоматическое заполнение) ---------------------------------

balanceBeforeShipmentShipmentDetail (shipmentDetail) <- balanceBItemLedgerDateTime (
                itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateTimeShipmentDetail(shipmentDetail))
                ON CHANGE itemShipmentDetail(shipmentDetail);

balanceBeforeInnerArrivalInnerArrivalDetail(innerArrivalDetail) <- balanceBItemLedgerDateTime (
                itemInnerArrivalDetail(innerArrivalDetail), departmentStoreInnerArrivalDetail(innerArrivalDetail), dateTimeInnerArrivalDetail(innerArrivalDetail))
                ON CHANGE itemInnerArrivalDetail(innerArrivalDetail);

curImporterPriceShipmentDetail (shipmentDetail) <- priceImporterBLedgerDateTime (
                itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateTimeShipmentDetail(shipmentDetail))
                ON CHANGE itemShipmentDetail(shipmentDetail);

curRetailRangeShipmentDetail (shipmentDetail) <- rangeRetailBLedgerDateTime(
                itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateTimeShipmentDetail(shipmentDetail))
                ON CHANGE itemShipmentDetail(shipmentDetail);

curRetailPriceShipmentDetail (shipmentDetail) <- priceAccountBLedgerDateTime(
                itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateTimeShipmentDetail(shipmentDetail))
                ON CHANGE itemShipmentDetail(shipmentDetail);

curPriceWareShipmentDetail (shipmentDetail) <- priceWareBLedgerDateTime(
                itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateTimeShipmentDetail(shipmentDetail))
                ON CHANGE wareShipmentDetail(shipmentDetail);

curWareShipmentDetail (shipmentDetail)  <- wareBLedgerDateTime(
                itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateTimeShipmentDetail(shipmentDetail))
                ON CHANGE itemShipmentDetail(shipmentDetail);


accountPriceWriteOffDetail (writeOffDetail) <- priceAccountBLedgerDateTime(
                itemWriteOffDetail(writeOffDetail), departmentStoreWriteOffDetail(writeOffDetail), dateTimeWriteOffDetail(writeOffDetail))
                ON CHANGE itemWriteOffDetail(writeOffDetail);

retailPriceItemWriteOffDetail 'Розничная цена' (writeOffDetail) = priceRetailBLedgerDateTime (
                itemWriteOffDetail(writeOffDetail), departmentStoreWriteOffDetail(writeOffDetail), dateTimeWriteOffDetail(writeOffDetail));

retailPriceInnerFlowDetail (innerFlowDetail) <- priceRetailBLedgerDateTime(
                itemInnerFlowDetail(innerFlowDetail), departmentStoreInnerFlowDetail(innerFlowDetail), dateTimeInnerFlowDetail(innerFlowDetail))
                ON CHANGE itemInnerFlowDetail(innerFlowDetail);

importerPriceInnerFlowDetail (innerFlowDetail) <- priceImporterBLedgerDateTime(
                itemInnerFlowDetail(innerFlowDetail), departmentStoreInnerFlowDetail(innerFlowDetail), dateTimeInnerFlowDetail(innerFlowDetail))
                ON CHANGE itemInnerFlowDetail(innerFlowDetail);

retailRangeInnerFlowDetail (innerFlowDetail) <- rangeRetailBLedgerDateTime(
                itemInnerFlowDetail(innerFlowDetail), departmentStoreInnerFlowDetail(innerFlowDetail), dateTimeInnerFlowDetail(innerFlowDetail))
                ON CHANGE itemInnerFlowDetail(innerFlowDetail);

priceWareInnerFlowDetail (innerFlowDetail) <- priceWareBLedgerDateTime(
                itemInnerFlowDetail(innerFlowDetail), departmentStoreInnerFlowDetail(innerFlowDetail), dateTimeInnerFlowDetail(innerFlowDetail))
                ON CHANGE itemInnerFlowDetail(innerFlowDetail);

wareInnerFlowDetail (innerFlowDetail) <- wareBLedgerDateTime(
                itemInnerFlowDetail(innerFlowDetail), departmentStoreInnerFlowDetail(innerFlowDetail), dateTimeInnerFlowDetail(innerFlowDetail))
                ON CHANGE itemInnerFlowDetail(innerFlowDetail);


curRetailPriceInnerArrivalDetail (innerArrivalDetail) <- priceRetailBLedgerDateTime(
                itemInnerArrivalDetail(innerArrivalDetail), departmentStoreInnerArrivalDetail(innerArrivalDetail), dateTimeInnerArrivalDetail(innerArrivalDetail))
                ON CHANGE itemInnerArrivalDetail(innerArrivalDetail);

curImporterPriceInnerArrivalDetail (innerArrivalDetail) <- priceImporterBLedgerDateTime(
                itemInnerArrivalDetail(innerArrivalDetail), departmentStoreInnerArrivalDetail(innerArrivalDetail), dateTimeInnerArrivalDetail(innerArrivalDetail))
                ON CHANGE itemInnerArrivalDetail(innerArrivalDetail);

curRetailRangeInnerArrivalDetail (innerArrivalDetail) <- rangeRetailBLedgerDateTime(
                itemInnerArrivalDetail(innerArrivalDetail), departmentStoreInnerArrivalDetail(innerArrivalDetail), dateTimeInnerArrivalDetail(innerArrivalDetail))
                ON CHANGE itemInnerArrivalDetail(innerArrivalDetail);

curPriceWareInnerArrivalDetail (innerArrivalDetail) <- priceWareBLedgerDateTime(
                itemInnerArrivalDetail(innerArrivalDetail), departmentStoreInnerArrivalDetail(innerArrivalDetail), dateTimeInnerArrivalDetail(innerArrivalDetail))
                ON CHANGE itemInnerArrivalDetail(innerArrivalDetail);

curWareInnerArrivalDetail (innerArrivalDetail) <- wareBLedgerDateTime(
                itemInnerArrivalDetail(innerArrivalDetail), departmentStoreInnerArrivalDetail(innerArrivalDetail), dateTimeInnerArrivalDetail(innerArrivalDetail))
                ON CHANGE itemInnerArrivalDetail(innerArrivalDetail);


curDataRetailReturnSupplierDetail 'Текущий розничный НДС, %' (returnSupplierDetail) = DATA DOUBLE (returnSupplierDetail);
curDataRetailReturnSupplierDetail (returnSupplierDetail) <- dataRetailBLedgerDateTime(
                itemReturnSupplierDetail(returnSupplierDetail), departmentStoreReturnSupplierDetail(returnSupplierDetail),
                dateTimeReturnSupplierDetail(returnSupplierDetail)) ON CHANGE itemReturnSupplierDetail(returnSupplierDetail);

curRetailPriceReturnSupplierDetail 'Текущая розничная цена' (returnSupplierDetail) = DATA DOUBLE (returnSupplierDetail);
curRetailPriceReturnSupplierDetail (returnSupplierDetail) <- priceRetailBLedgerDateTime(
                itemReturnSupplierDetail(returnSupplierDetail), departmentStoreReturnSupplierDetail(returnSupplierDetail),
                dateTimeReturnSupplierDetail(returnSupplierDetail)) ON CHANGE itemReturnSupplierDetail(returnSupplierDetail);

retailSumReturnSupplierDetail 'Розничная сумма' (returnSupplierDetail) =
    quantityReturnSupplierDetail(returnSupplierDetail) * curRetailPriceReturnSupplierDetail(returnSupplierDetail);
retailSumReturnSupplier 'Розничная сумма' (returnSupplier) = GROUP SUM retailSumReturnSupplierDetail(shipmentDetail)
                                                             BY returnSupplierReturnSupplierDetail(returnSupplierDetail) IN waybillSum;

// ---------------------------------- Переоценка на возврате ------------------------------------------

CLASS priceChangeReturnSupplier 'Переоценка на возврате' : priceChangeDocument;
CLASS priceChangeReturnSupplierDetail 'Строка переоценки на возврате' : priceChangeDocumentDetail;

needToPriceChangeReturnSupplierDetail (returnSupplierDetail) = priceReturnSupplierDetail(returnSupplierDetail) != curRetailPriceReturnSupplierDetail(returnSupplierDetail);

needToPriceChangeReturnSupplier (returnSupplier) = GROUP SUM 1 IF needToPriceChangeReturnSupplierDetail(returnSupplierDetail)
                                                   BY returnSupplierReturnSupplierDetail(returnSupplierDetail);

@metaCodeDetailAggregation(returnSupplier, priceChangeReturnSupplier, needToPriceChangeReturnSupplier);

// атрибуты документа переоценки

dateTimePriceChangeReturnSupplier 'Дата/время' (priceChangeReturnSupplier) = dateTimeReturnSupplier(returnSupplierPriceChangeReturnSupplier(priceChangeReturnSupplier));
datePriceChangeReturnSupplier 'Дата' (priceChangeReturnSupplier) = dateReturnSupplier(returnSupplierPriceChangeReturnSupplier(priceChangeReturnSupplier));
isPostedPriceChangeReturnSupplier 'Закрыт' (priceChangeReturnSupplier) = isPostedReturnSupplier(returnSupplierPriceChangeReturnSupplier(priceChangeReturnSupplier));
numberPriceChangeReturnSupplier 'Номер накладной' (priceChangeReturnSupplier) = numberObject(returnSupplierPriceChangeReturnSupplier(priceChangeReturnSupplier));
seriesPriceChangeReturnSupplier 'Серия накладной' (priceChangeReturnSupplier) = seriesObject(returnSupplierPriceChangeReturnSupplier(priceChangeReturnSupplier));
descriptionPriceChangeReturnSupplier 'Название документа' (priceChangeReturnSupplier) = descriptionReturnSupplier(returnSupplierPriceChangeReturnSupplier(priceChangeReturnSupplier));

supplierPriceChangeReturnSupplier (priceChangeReturnSupplier) = supplierReturnSupplier(returnSupplierPriceChangeReturnSupplier(priceChangeReturnSupplier));
nameSupplierPriceChangeReturnSupplier 'Поставщик' (priceChangeReturnSupplier) = name(supplierPriceChangeReturnSupplier(priceChangeReturnSupplier));

departmentStorePriceChangeReturnSupplier (priceChangeReturnSupplier) = departmentStoreReturnSupplier(returnSupplierPriceChangeReturnSupplier(priceChangeReturnSupplier));
nameDepartmentStorePriceChangeReturnSupplier 'Отдел магазина' (priceChangeReturnSupplier) = name(departmentStorePriceChangeReturnSupplier(priceChangeReturnSupplier));

// атрибуты детализации документа переоценки

itemPriceChangeReturnSupplierDetail (priceChangeReturnSupplierDetail) =
    itemReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));
nameItemPriceChangReturnSupplierDetail 'Товар' (priceChangeReturnSupplierDetail) =
    nameAttributeItem(itemPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));

quantityPriceChangeReturnSupplierDetail 'Остаток' (priceChangeReturnSupplierDetail) =
    quantityReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));

curImporterPriceChangeReturnSupplierDetail 'Текущая цена изготовителя' (priceChangeReturnSupplierDetail) = DATA DOUBLE (priceChangeReturnSupplierDetail);
curImporterPriceChangeReturnSupplierDetail (priceChangeReturnSupplierDetail) <-
    priceImporterBLedgerDateTime(itemReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)),
                                 departmentStoreReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)),
                                 dateTimeReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)))
                                 ON CHANGE itemReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));

importerPriceChangeReturnSupplierDetail 'Новая цена изготовителя' (priceChangeReturnSupplierDetail) =
    priceReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));

curDataRetailRangePriceChangeReturnSupplierDetail 'Текущий НДС, %' (priceChangeReturnSupplierDetail) =
    curDataRetailReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));
dataRetailRangePriceChangeReturnSupplierDetail 'Новый НДС, %' (priceChangeReturnSupplierDetail) =
    dataRetailRangeShipmentDetail(batchReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)));

curRetailPriceChangeReturnSupplierDetail 'Текущая розничная цена' (priceChangeReturnSupplierDetail) =
    curRetailPriceReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));
retailPriceChangeReturnSupplierDetail 'Новая розничная цена' (priceChangeReturnSupplierDetail) =
    retailPriceShipmentDetail(batchReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)));

warePriceChangeReturnSupplierDetail 'Новая посуда' (priceChangeReturnSupplierDetail) =
    wareReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));
priceWarePriceChangeReturnSupplierDetail 'Новая цена посуды' (priceChangeReturnSupplierDetail) =
    priceWareReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));

curWarePriceChangeReturnSupplierDetail 'Текущая посуда' (priceChangeReturnSupplierDetail) = DATA ware (priceChangeReturnSupplierDetail);
curWarePriceChangeReturnSupplierDetail (priceChangeReturnSupplierDetail) <-
    wareBLedgerDateTime(itemReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)),
                        departmentStoreReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)),
                        dateTimeReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)))
                        ON CHANGE itemReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));

curPriceWarePriceChangeReturnSupplierDetail 'Текущая цена посуды' (priceChangeReturnSupplierDetail) = DATA DOUBLE (priceChangeReturnSupplierDetail);
curPriceWarePriceChangeReturnSupplierDetail (priceChangeReturnSupplierDetail) <-
    priceWareBLedgerDateTime(itemReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)),
                             departmentStoreReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)),
                             dateTimeReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)))
                             ON CHANGE itemReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));

//----------------------------------- Подбор товаров -------------------------------------------------------

quantityInputItem 'Кол-во' = SESSION DATA DOUBLE (item);

FORM itemDepartmentStoreInput 'Подбор товаров'
    OBJECTS d=departmentStore FIXED PANEL
    PROPERTIES(d) READONLY name

    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY gname = name(g)
    ORDER BY gname

    OBJECTS i=item
    PROPERTIES barcodeBarcodeSku(i) READONLY, nameAttributeItemGroupItem(g, i) READONLY, shortNameUnitOfMeasureItem(i) READONLY
    FILTERS nameAttributeItemGroupItem(g, i)
    ORDER BY nameAttributeItemGroupItem

    PROPERTIES currentBalanceItemLedger(i, d), quantityInputItem(i)

    FILTERGROUP filterBalance
        FILTER 'На остатках' 'F10' currentBalanceItemLedger(i, d) DEFAULT
    FILTERGROUP filterSelected
        FILTER 'Выбранные' 'F9' quantityInputItem(i)
;

DESIGN itemDepartmentStoreInput FROM DEFAULT {
    POSITION treeGroup.box TO THE LEFT i.box;

    treeGroup.tree {
        fillHorizontal = 0.4;
    }

    i.grid {
        defaultComponent = TRUE;
    }
}

META metaCodeInputMultipleItems (object)

    inputMultipleItems###object 'Подбор товаров' = ACTION (object) {
        FORM itemDepartmentStoreInput OBJECTS d = departmentStore###object(object) MODAL;
        IF formResult() == formResult.ok THEN {
            FOR quantityInputItem(item) DO {
                ADDOBJ object##Detail;
                FOR w == addedObject() DO {
                    SET object###object##Detail(w) <- object AS object;
                    SET item###object##Detail(w) <- item AS item;
                    SET quantity###object##Detail(w) <- quantityInputItem(item);
                }
            }
        }
        // todo : не работает, но надо включить
    //    SET quantityInputItem(item) <- NULL;
    } TOOLBAR;

END

//-----------------------------------Формы возврата поставщику-------------------------------------------------------

FORM commonInfoBatchReturnSupplierDetail 'Партии'
    OBJECTS b=batchShipment
    PROPERTIES(b) READONLY seriesObjectDetail, numberObjectDetail, dateShipmentDetail,
                           quantityShipmentDetail, priceShipmentDetail, dataSuppliersRangeShipmentDetail,
                           retailPriceShipmentDetail
    DIALOG batchShipment OBJECT b;
;

FORM returnSupplier 'Возврат поставщику'
    OBJECTS r=returnSupplier FIXED PANEL
    PROPERTIES(r) numberObject, seriesObject, dateReturnSupplier, timeReturnSupplier,
                  nameDepartmentStoreReturnSupplier, nameSupplierReturnSupplier, noteReturnSupplier,
                  nameUserCreated READONLY, timeCreated READONLY, totalQuantityReturnSupplier,
                  totalSumIncVATReturnSupplier, totalSumSupplierReturnSupplier, retailSumReturnSupplier

    OBJECTS d=returnSupplierDetail
    PROPERTIES(d) numberReturnSupplierDetail, nameAttributeItemReturnSupplierDetail, barcodeExSkuReturnSupplierDetail,
                  commonInfoBatchReturnSupplierDetail, quantityReturnSupplierDetail, priceReturnSupplierDetail,
                  supplierMarkupReturnSupplierDetail, nameWareReturnSupplierDetail READONLY, curDataRetailReturnSupplierDetail,
                  curRetailPriceReturnSupplierDetail
    PROPERTIES(d) ADDOBJ, delete
    PROPERTIES addReturnSupplierDetailBarcode(r) TODRAW d
    PROPERTIES FORCE PANEL READONLY controlExpiryReturnSupplierDetail(d), isManufacturedReturnSupplierDetail(d),
                                    isWeightReturnSupplierDetail(d), nameinActionItemDepartmentReturnSupplierDetail(d),
                                    hintReturnSupplierDetail(d), nameCountryReturnSupplierDetail(d),
                                    namebanRevaluationItemDepartmentReturnSupplierDetail(d), priceWareReturnSupplierDetail(d),
                                    dataWareRangeReturnSupplierDetail(d)

    FILTERS isReturnSupplier(r, d)

    EDIT returnSupplier OBJECT r
;

FORM returnSuppliers 'Возвраты поставщику'

    OBJECTS r=returnSupplier
    PROPERTIES(r) READONLY objectClassName, numberObject, seriesObject, dateReturnSupplier, timeReturnSupplier,
                           nameDepartmentStoreReturnSupplier, nameSupplierReturnSupplier, noteReturnSupplier,
                           totalQuantityReturnSupplier, totalSumIncVATReturnSupplier, totalSumSupplierReturnSupplier, retailSumReturnSupplier
    PROPERTIES(r) FORCE PANEL nameUserCreated, timeCreated, nameUserClosed, timeClosed

    PROPERTIES(r) postReturnSupplier SHOWIF isDraftReturnSupplier(r), unpostReturnSupplier SHOWIF isPostedReturnSupplier(r),
                  ADDFORM, EDITFORM SHOWIF isDraftReturnSupplier(r), delete FORCE PANEL SHOWIF isDraftReturnSupplier(r)

    OBJECTS d=returnSupplierDetail
    PROPERTIES(d) READONLY numberReturnSupplierDetail, nameAttributeItemReturnSupplierDetail, barcodeExSkuReturnSupplierDetail,
                           quantityReturnSupplierDetail, priceReturnSupplierDetail

    FILTERS isReturnSupplier(r, d)
;

DESIGN returnSupplier FROM DEFAULT {

    NEW specification.box BEFORE functions.box{
        tabbedPane = TRUE;
        ADD d.box{
            title = 'Спецификация';
        };
    };

    NEW header.box BEFORE specification.box{
        childConstraints = TO THE RIGHT;

        NEW headerRow1 {
            childConstraints = TO THE BOTTOM;
            ADD r.documentHeaderGroup{
                    NEW first {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(numberObject);
                        ADD PROPERTY(seriesObject);
                        ADD PROPERTY(dateReturnSupplier);
                        ADD PROPERTY(timeReturnSupplier);
                    };
                    NEW second{
                        ADD PROPERTY(nameDepartmentStoreReturnSupplier);
                        ADD PROPERTY(nameSupplierReturnSupplier);
                    };
            };
            ADD r.waybillSum{
                childConstraints = TO THE RIGHT;
            };
        };

        NEW headerRow2 {
            ADD r.historyGroup;
            ADD PROPERTY(noteReturnSupplier);
        };
    };

    ADD PROPERTY(delete(d)){
        askConfirm=TRUE;
    }
}

DESIGN returnSuppliers FROM DEFAULT{
    ADD PROPERTY(delete(r)){
        panelLocation=TOOLBAR;
        askConfirm=TRUE;
    }
}

DESIGN commonInfoBatchReturnSupplierDetail FROM DEFAULT {
    main {
        preferredSize = (800, 500);
    };
}

// --------------------------- Формы списания ---------------------------------
@metaCodeInputMultipleItems(writeOff);

FORM writeOff 'Списание'
    OBJECTS w=writeOff FIXED PANEL
    PROPERTIES (w) nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, nameDepartmentStoreWriteOff,
                   dateWriteOff, timeWriteOff, nameReasonOffWriteOff, noteWriteOff, quantityWriteOff, accountSumWriteOff

    OBJECTS d=writeOffDetail
    PROPERTIES (d) numberWriteOffDetail, nameAttributeItemWriteOffDetail, barcodeExSkuWriteOffDetail, quantityWriteOffDetail,
                   accountPriceWriteOffDetail, accountSumWriteOffDetail, ADDOBJ, delete

    PROPERTIES FORCE PANEL READONLY articleItemWriteOff(d), nameCountryItemWriteOff(d), retailPriceItemWriteOffDetail(d),
                                    balanceDepartmentStoreItemWriteOff(d), minReserveItemDepartmentWriteOff(d),
                                    maxReserveItemDepartmentWriteOff(d), dateLastShipment(d)

    PROPERTIES inputMultipleItemsWriteOff(w) TODRAW d, addWriteOffDetailBarcode(w) TODRAW d
    FILTERS inWriteOffWriteOffDetail(w, d)

    EDIT writeOff OBJECT w
;

DESIGN writeOff FROM DEFAULT{

    main {
        preferredSize = (1024, 768);
        d.panel{
            childConstraints = TO THE BOTTOM;
        }
    }
}

FORM writeOffs 'Списания'
    OBJECTS w=writeOff
    PROPERTIES (w) READONLY objectClassName, numberObject, seriesObject, dateWriteOff, timeWriteOff, nameDepartmentStoreWriteOff,
                            nameReasonOffWriteOff, noteWriteOff, quantityWriteOff, quantityWriteOffDetailsWriteOff, accountSumWriteOff

    PROPERTIES (w) ADDFORM, EDITFORM SHOWIF isDraftWriteOff(w), delete FORCE PANEL SHOWIF isDraftWriteOff(w),
                   postWriteOff SHOWIF isDraftWriteOff(w), unpostWriteOff SHOWIF isPostedWriteOff(w)


    OBJECTS d=writeOffDetail
    PROPERTIES (d) numberWriteOffDetail, nameAttributeItemWriteOffDetail, barcodeExSkuWriteOffDetail, quantityWriteOffDetail,
                   accountPriceWriteOffDetail, accountSumWriteOffDetail
    FILTERS inWriteOffWriteOffDetail(w, d)
;

DESIGN writeOffs FROM DEFAULT {
    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }
    PROPERTY (delete(w)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
}

// --------------------------- Использование регистров (автоматическое заполнение): выписка из розницы-------------//

retailPriceSpecificationDetail (specificationDetail) <- priceRetailBLedgerDateTime(
                itemSpecificationDetail(specificationDetail), departmentStoreSpecificationDetail(specificationDetail), dateTimeSpecificationDetail(specificationDetail))
                ON CHANGE itemSpecificationDetail(specificationDetail);

retailPriceStudyInputDetail (studyInputDetail) <- priceRetailBLedgerDateTime(
                itemStudyInputDetail(studyInputDetail), departmentStoreStudyInputDetail(studyInputDetail), dateTimeStudyInputDetail(studyInputDetail))
                ON CHANGE itemStudyInputDetail(studyInputDetail);

importerPriceStudyInputDetail (studyInputDetail) <- priceImporterBLedgerDateTime (
                itemStudyInputDetail(studyInputDetail), departmentStoreStudyInputDetail(studyInputDetail), dateTimeStudyInputDetail(studyInputDetail))
                ON CHANGE itemStudyInputDetail(studyInputDetail);

retailRangeStudyInputDetail (studyInputDetail) <- rangeRetailBLedgerDateTime(
                itemStudyInputDetail(studyInputDetail), departmentStoreStudyInputDetail(studyInputDetail), dateTimeStudyInputDetail(studyInputDetail))
                ON CHANGE itemStudyInputDetail(studyInputDetail);


curRetailPriceStudyOutputDetail (studyOutputDetail) <- priceRetailBLedgerDateTime(
                itemStudyOutputDetail(studyOutputDetail), departmentStoreStudyOutputDetail(studyOutputDetail), dateTimeStudyOutputDetail(studyOutputDetail))
                ON CHANGE itemStudyOutputDetail(studyOutputDetail);

// todo : сделать правильно цену изготовителя

//curImporterPriceStudyOutputDetail (studyOutputDetail) <- priceImporterBLedgerDateTime(
//                itemStudyOutputDetail(studyOutputDetail), departmentStoreStudyOutputDetail(studyOutputDetail), dateTimeStudyOutputDetail(studyOutputDetail))
//                ON CHANGE itemStudyOutputDetail(studyOutputDetail);

curRetailRangeStudyOutputDetail (studyOutputDetail) <- rangeRetailBLedgerDateTime(
                itemStudyOutputDetail(studyOutputDetail), departmentStoreStudyOutputDetail(studyOutputDetail), dateTimeStudyOutputDetail(studyOutputDetail))
                ON CHANGE itemStudyOutputDetail(studyOutputDetail);


importerPriceStatementDetail (statementDetail) <- priceImporterBLedgerDateTime (
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail))
                ON CHANGE itemStatementDetail(statementDetail);

retailRangeStatementDetail (statementDetail) <- rangeRetailBLedgerDateTime(
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail))
                ON CHANGE itemStatementDetail(statementDetail);

curRetailPriceStatementDetail (statementDetail) <- priceRetailBLedgerDateTime (
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail))
                ON CHANGE itemStatementDetail(statementDetail);

retailPriceStatementDetail (statementDetail) <- priceRetailBLedgerDateTime (
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail))
                ON CHANGE itemStatementDetail(statementDetail);

priceWareStatementDetail (statementDetail) <- priceWareBLedgerDateTime(
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail))
                ON CHANGE itemStatementDetail(statementDetail);

wareStatementDetail (statementDetail) <- wareBLedgerDateTime(
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail))
                ON CHANGE itemStatementDetail(statementDetail);

curRetailPriceUserPriceChangeDetail(userPriceChangeDetail) <- priceRetailBLedgerDateTime(
                itemUserPriceChangeDetail(userPriceChangeDetail), departmentStoreUserPriceChangeDetail(userPriceChangeDetail), dateTimeUserPriceChangeDetail(userPriceChangeDetail))
                ON CHANGE itemUserPriceChangeDetail(userPriceChangeDetail);

curImporterPriceUserPriceChangeDetail (userPriceChangeDetail) <- priceImporterBLedgerDateTime(
                itemUserPriceChangeDetail(userPriceChangeDetail), departmentStoreUserPriceChangeDetail(userPriceChangeDetail), dateTimeUserPriceChangeDetail(userPriceChangeDetail))
                ON CHANGE itemUserPriceChangeDetail(userPriceChangeDetail);

curRetailRangeUserPriceChangeDetail (userPriceChangeDetail) <- rangeRetailBLedgerDateTime(
                itemUserPriceChangeDetail(userPriceChangeDetail), departmentStoreUserPriceChangeDetail(userPriceChangeDetail), dateTimeUserPriceChangeDetail(userPriceChangeDetail))
                ON CHANGE itemUserPriceChangeDetail(userPriceChangeDetail);

curPriceWareUserPriceChangeDetail (userPriceChangeDetail) <- priceWareBLedgerDateTime(
                itemUserPriceChangeDetail(userPriceChangeDetail), departmentStoreUserPriceChangeDetail(userPriceChangeDetail), dateTimeUserPriceChangeDetail(userPriceChangeDetail))
                ON CHANGE itemUserPriceChangeDetail(userPriceChangeDetail);

curWareUserPriceChangeDetail (userPriceChangeDetail) <- wareBLedgerDateTime(
                itemUserPriceChangeDetail(userPriceChangeDetail), departmentStoreUserPriceChangeDetail(userPriceChangeDetail), dateTimeUserPriceChangeDetail(userPriceChangeDetail))
                ON CHANGE itemUserPriceChangeDetail(userPriceChangeDetail);


balanceDepartmentStoreItemStatementDetail 'Текущий остаток' (statementDetail) = balanceBItemLedgerDateTime(
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail)) IN itemStatementDetailInfo;

quantityItemByStatementDetail(statementDetail) = quantityItemStatement(itemStatementDetail(statementDetail), statementStatementDetail(statementDetail));
highlightStatementDetail(statementDetail) =  quantityItemByStatementDetail(statementDetail) > balanceDepartmentStoreItemStatementDetail(statementDetail);

balanceDepartmentStoreItemSpecificationDetail 'Текущий остаток' (specificationDetail) = balanceBItemLedgerDateTime(
                itemSpecificationDetail(specificationDetail), departmentStoreSpecificationDetail(specificationDetail), dateTimeSpecificationDetail(specificationDetail));

quantityItemBySpecificationDetail(specificationDetail) = quantityItemSpecification( itemSpecificationDetail(specificationDetail), specificationSpecificationDetail(specificationDetail));
highlightSpecificationDetail(specificationDetail) =  quantityItemBySpecificationDetail(specificationDetail) > balanceDepartmentStoreItemSpecificationDetail(specificationDetail);

//noOverdueSpecificationDate 'Непросроченные с/ф' (specification, dateIn) = dateToSpecification(specification) >= dateIn AND dateIn AS DATE;

quantityItemDepartmentStore 'Количество выставленного товара на тек. момент' (departmentStore, item) = GROUP SUM
    quantitySpecificationDetail(specificationDetail) IF noOverdueSpecification(specificationSpecificationDetail(specificationDetail))
    BY departmentStoreSpecificationDetail(specificationDetail), itemSpecificationDetail(specificationDetail);

//quantityItemDepartmentStore 'Количество выставленного товара на тек. момент' (departmentStore, item) = GROUP SUM
//    quantitySpecificationDetail(specificationDetail) IF noOverdueSpecificationDate(specificationSpecificationDetail(specificationDetail), dateSpecification(specificationSpecificationDetail(specificationDetail)))
//    BY departmentStoreSpecificationDetail(specificationDetail), itemSpecificationDetail(specificationDetail);

quantityExhibitedItemBySpecificationDetail(specificationDetail) = quantityItemDepartmentStore(departmentStoreSpecificationDetail(specificationDetail), itemSpecificationDetail(specificationDetail));

availableQuantityItemBySpecificationDetail 'Доступное к-во, с учетом непросроченных с/ф' (specificationDetail) =
    balanceDepartmentStoreItemSpecificationDetail(specificationDetail)-quantityExhibitedItemBySpecificationDetail(specificationDetail);

NotNullAvailableQuantityItemBySpecificationDetail(specificationDetail) = availableQuantityItemBySpecificationDetail(specificationDetail) < 0;


// --------------------------- Использование регистров (автоматическое заполнение): инвентаризация---------------//

priceAccountDetailPage(detailPage) <- priceAccountBLedgerDateTime(
                skuBarcodeDetailPage(detailPage), departmentStoreDetailPage(detailPage), dateTimeInventory(inventoryDetailPage(detailPage)))
                ON CHANGE skuBarcodeDetailPage(detailPage);

priceAccountCollationSheetItem(collationSheet, item) <- priceAccountBLedgerDateTime(
                item, departmentStoreCollationSheet(collationSheet), dateTimeInventory(inventoryCollationSheet(collationSheet)))
                ON ASSIGN includeCollationSheetItem(collationSheet, item);

fillBalanceInventory 'Заполнить остатки' (inventory) = ACTION(inventory) {
    SET balanceCollationSheetItem(collationSheet, item) AND inventoryCollationSheet(collationSheet)==inventory  AND item IS item
        <- balanceBItemLedgerDateTime(item, departmentStoreCollationSheet(collationSheet), dateTimeInventory(inventoryCollationSheet(collationSheet)));

} CONFIRM;
//  todo: зацикливается на includeCollationSheetItem, пока на action поставили - переделать потом

convertPriceInventory 'Пересчитать цены по всей инвентаризации' (inventory) = ACTION(inventory) {
    SET priceAccountDetailPage(detailPage) AND inventoryDetailPage(detailPage) == inventory <- priceAccountBLedgerDateTime(
            skuBarcodeDetailPage(detailPage), departmentStoreDetailPage(detailPage), dateTimeInventory(inventoryDetailPage(detailPage)))
            AND inventoryDetailPage(detailPage) == inventory;
    SET priceAccountCollationSheetItem(collationSheet, item) AND inventoryCollationSheet(collationSheet) == inventory <- priceAccountBLedgerDateTime(
            item, departmentStoreCollationSheet(collationSheet), dateTimeInventory(inventoryCollationSheet(collationSheet)))
            AND inventoryCollationSheet(collationSheet) == inventory;
} CONFIRM;

// todo: какой-то баг, не всегда срабатывает action

convertPriceCollationSheet 'Пересчитать цены в сличительной ведомости' (collationSheet) = ACTION(collationSheet) {
    SET priceAccountDetailPage(detailPage) AND collationSheetListInventory(listInventoryDetailPage(detailPage)) == collationSheet <- priceAccountBLedgerDateTime(
            skuBarcodeDetailPage(detailPage), departmentStoreDetailPage(detailPage), dateTimeInventory(inventoryDetailPage(detailPage)))
            AND collationSheetListInventory(listInventoryDetailPage(detailPage)) == collationSheet;
    SET priceAccountCollationSheetItem(collationSheet, item) <- priceAccountBLedgerDateTime(
            item, departmentStoreCollationSheet(collationSheet), dateTimeInventory(inventoryCollationSheet(collationSheet)));
} CONFIRM;



//---------------------------- Переоценка (конкретная реализация) ----------------------------------------//

dateTimePriceChangeDocument 'Дата/время' (priceChangeDocument) = UNION EXCLUSIVE dateTimePriceChangeShipment(priceChangeDocument),
                                                                                 dateTimePriceChangeReturnSupplier(priceChangeDocument),
                                                                                 dateTimePriceChangeStatement(priceChangeDocument),
                                                                                 dateTimePriceChangeInnerArrival(priceChangeDocument),
                                                                                 dateTimeUserPriceChange(priceChangeDocument) PERSISTENT;

descriptionPriceChangeDocument 'Название документа' (priceChangeDocument) = UNION EXCLUSIVE descriptionPriceChangeShipment(priceChangeDocument),
                                                                                            descriptionPriceChangeReturnSupplier(priceChangeDocument),
                                                                                            descriptionPriceChangeStatement(priceChangeDocument),
                                                                                            descriptionPriceChangeInnerArrival(priceChangeDocument),
                                                                                            descriptionUserPriceChange(priceChangeDocument) PERSISTENT;

datePriceChangeDocument 'Дата' (priceChangeDocument) = dateInTime(dateTimePriceChangeDocument(priceChangeDocument)) PERSISTENT;

isPostedPriceChangeDocument 'Закрыт' (priceChangeDocument) = UNION EXCLUSIVE isPostedPriceChangeShipment(priceChangeDocument),
                                                                             isPostedPriceChangeReturnSupplier(priceChangeDocument),
                                                                             isPostedPriceChangeStatement(priceChangeDocument),
                                                                             isPostedPriceChangeInnerArrival(priceChangeDocument),
                                                                             isPostedUserPriceChange(priceChangeDocument) PERSISTENT;

numberPriceChangeDocument 'Номер накладной' (priceChangeDocument) = UNION EXCLUSIVE numberPriceChangeShipment(priceChangeDocument),
                                                                                    numberPriceChangeReturnSupplier(priceChangeDocument),
                                                                                    numberPriceChangeInnerArrival(priceChangeDocument) PERSISTENT;

seriesPriceChangeDocument 'Серия накладной' (priceChangeDocument) = UNION EXCLUSIVE seriesPriceChangeShipment(priceChangeDocument),
                                                                                    seriesPriceChangeReturnSupplier(priceChangeDocument),
                                                                                    seriesPriceChangeInnerArrival(priceChangeDocument) PERSISTENT;

departmentStorePriceChangeDocument (priceChangeDocument) = UNION EXCLUSIVE departmentStorePriceChangeShipment(priceChangeDocument),
                                                                           departmentStorePriceChangeReturnSupplier(priceChangeDocument),
                                                                           departmentStorePriceChangeStatement(priceChangeDocument),
                                                                           departmentStorePriceChangeInnerArrival(priceChangeDocument),
                                                                           departmentStoreUserPriceChange(priceChangeDocument) PERSISTENT;
nameDepartmentStorePriceChangeDocument 'Отдел магазина' (priceChangeDocument) = name(departmentStorePriceChangeDocument(priceChangeDocument));

documentPriceChangeDocumentDetail (priceChangeDocumentDetail) = UNION EXCLUSIVE priceChangeShipmentPriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                priceChangeReturnSupplierPriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                priceChangeStatementPriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                priceChangeInnerArrivalPriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                userPriceChangeUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;

itemPriceChangeDocumentDetail (priceChangeDocumentDetail) = UNION EXCLUSIVE itemPriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                            itemPriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                            itemPriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                            itemPriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                            itemUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;
nameItemPriceChangeDocumentDetail 'Товар' (priceChangeDocumentDetail) = nameAttributeItem(itemPriceChangeDocumentDetail(priceChangeDocumentDetail));

quantityPriceChangeDocumentDetail 'Остаток' (priceChangeDocumentDetail) = UNION EXCLUSIVE quantityPriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                          quantityPriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                          quantityPriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                          quantityPriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                          quantityUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;

oldImporterPriceChangeDocumentDetail 'Старая цена изготовителя' (priceChangeDocumentDetail) = UNION EXCLUSIVE curImporterPriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                                              curImporterPriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                                              importerPriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                                              curImporterPriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                                              curImporterPriceUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;
importerPriceChangeDocumentDetail 'Новая цена изготовителя' (priceChangeDocumentDetail) = UNION EXCLUSIVE importerPriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                                          importerPriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                                          importerPriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                                          importerPriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                                          importerPriceUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;

oldDataRetailRangePriceChangeDocumentDetail 'Старый НДС, %' (priceChangeDocumentDetail) = UNION EXCLUSIVE curDataRetailRangePriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                                          curDataRetailRangePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                                          dataRetailRangePriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                                          curDataRetailRangePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                                          curDataRetailRangeUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;
dataRetailRangePriceChangeDocumentDetail 'Новый НДС, %' (priceChangeDocumentDetail) = UNION EXCLUSIVE dataRetailRangePriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                                      dataRetailRangePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                                      dataRetailRangePriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                                      dataRetailRangePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                                      dataRetailRangeUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;

oldRetailPriceChangeDocumentDetail 'Старая розничная цена' (priceChangeDocumentDetail) = UNION EXCLUSIVE curRetailPriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                                         curRetailPriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                                         curRetailPriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                                         curRetailPriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                                         curRetailPriceUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;
retailPriceChangeDocumentDetail 'Новая розничная цена' (priceChangeDocumentDetail) = UNION EXCLUSIVE retailPriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                                     retailPriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                                     retailPriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                                     retailPriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                                     retailPriceUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;

oldRetailSumChangeDocumentDetail 'Старая розничная сумма' (priceChangeDocumentDetail) =
                quantityPriceChangeDocumentDetail(priceChangeDocumentDetail) * oldRetailPriceChangeDocumentDetail(priceChangeDocumentDetail);

retailSumChangeDocumentDetail 'Новая розничная сумма' (priceChangeDocumentDetail) =
                quantityPriceChangeDocumentDetail(priceChangeDocumentDetail) * retailPriceChangeDocumentDetail(priceChangeDocumentDetail);

accountSumChangeDocumentDetail 'Сумма переоценки' (priceChangeDocumentDetail) =
                retailSumChangeDocumentDetail(priceChangeDocumentDetail) - oldRetailSumChangeDocumentDetail(priceChangeDocumentDetail);

accountSumChangeDocument 'Сумма переоценки' (priceChangeDocument) = GROUP SUM accountSumChangeDocumentDetail(priceChangeDocumentDetail)
                                                                          BY  documentPriceChangeDocumentDetail(priceChangeDocumentDetail);

//nameWarePriceChangeDocumentDetail 'Новая посуда' (priceChangeDocumentDetail) = UNION EXCLUSIVE
//                                                                            nameWarePriceChangeShipmentDetail(priceChangeDocumentDetail),
//                                                                            nameWarePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
//                                                                            nameWarePriceChangeStatementDetail(priceChangeDocumentDetail),
//                                                                            nameWarePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
//                                                                            nameWareUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;
//
//oldNameWarePriceChangeDocumentDetail 'Старая посуда' (priceChangeDocumentDetail) = UNION EXCLUSIVE
//                                                                            oldNameWarePriceChangeShipmentDetail(priceChangeDocumentDetail),
//                                                                            oldNameWarePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
//                                                                            oldNameWarePriceChangeStatementDetail(priceChangeDocumentDetail),
//                                                                            oldNameWarePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
//                                                                            oldNameWareUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;


priceWarePriceChangeDocumentDetail 'Новая цена посуды' (priceChangeDocumentDetail) = UNION EXCLUSIVE
                                                                                            priceWarePriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                            priceWarePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                            priceWarePriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                            priceWarePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                            priceWareUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;

oldPriceWarePriceChangeDocumentDetail 'Старая цена посуды' (priceChangeDocumentDetail) = UNION EXCLUSIVE
                                                                                            curPriceWarePriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                            curPriceWarePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                            priceWarePriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                            curPriceWarePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                            curPriceWareUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;

//isFixPricePriceChangeDocumentDetail 'Товар с фиксированной ценой' (priceChangeDocumentDetail) = UNION EXCLUSIVE
//                                                                                            isFixPricePriceChangeShipmentDetail(priceChangeDocumentDetail),
//                                                                                            isFixPricePriceChangeStatementDetail(priceChangeDocumentDetail),
//                                                                                            isFixPricePriceChangeInnerArrivalDetail(priceChangeDocumentDetail) PERSISTENT;





FORM priceChangeDocuments 'Акты переоценки'
    OBJECTS pc=priceChangeDocument
    PROPERTIES(pc) READONLY objectClassName, isPostedPriceChangeDocument FORCE GRID, dateTimePriceChangeDocument, nameDepartmentStorePriceChangeDocument,
                            numberPriceChangeDocument, seriesPriceChangeDocument, nameSupplierPriceChangeShipment, nameSupplierPriceChangeReturnSupplier,
                            nameSenderDepartmentPriceChangeInnerArrival, accountSumChangeDocument

    OBJECTS pcd=priceChangeDocumentDetail
    PROPERTIES(pcd) READONLY nameItemPriceChangeDocumentDetail, quantityPriceChangeDocumentDetail,
                             oldImporterPriceChangeDocumentDetail, importerPriceChangeDocumentDetail,
                             oldDataRetailRangePriceChangeDocumentDetail, dataRetailRangePriceChangeDocumentDetail,
                             oldRetailPriceChangeDocumentDetail, retailPriceChangeDocumentDetail,
                             oldPriceWarePriceChangeDocumentDetail, priceWarePriceChangeDocumentDetail
    FILTERS documentPriceChangeDocumentDetail(pcd) == pc
;

//------------------------------------ Изменение учетных сумм ------------------------------------------//

dateTimeAccountSumDocumentLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeShipment(ledger),
                                                                         dateTimeReturnSupplier(ledger),
                                                                         dateTimeInnerArrival(ledger),
                                                                         dateTimePriceChangeDocument(ledger),
                                                                         dateTimeWriteOff(ledger),
                                                                         dateTimeStatement(ledger),
                                                                         dateTimeInnerFlow(ledger),
                                                                         dateTimeWastage(ledger),
                                                                         dateTimeReturnSupplier(ledger),
                                                                         dateTimeInventory(inventoryCollationSheet(ledger)),
                                                                         dateTimeZReport(ledger),
                                                                         dateTimeSaleDiscountDocument(ledger),
                                                                         dateTimeParish(ledger),
                                                                         dateTimeConsumption(ledger) PERSISTENT INDEXED;

descriptionDocumentLedger 'Название документа' (ledger) = UNION EXCLUSIVE descriptionShipment(ledger),
                                                                          descriptionReturnSupplier(ledger),
                                                                          descriptionInnerArrival(ledger),
                                                                          descriptionPriceChangeDocument(ledger),
                                                                          descriptionWriteOff(ledger),
                                                                          descriptionStatement(ledger),
                                                                          descriptionInnerFlow(ledger),
                                                                          descriptionWastage(ledger),
                                                                          descriptionReturnSupplier(ledger),
                                                                          descriptionCollationSheet(ledger),
                                                                          descriptionZReport(ledger),
                                                                          descriptionSaleDiscountDocument(ledger),
                                                                          descriptionParish(ledger),
                                                                          descriptionConsumption(ledger) PERSISTENT;
                                                                          //descriptionUserPriceChange(ledger) PERSISTENT;


dateAccountSumDocumentLedger 'Дата' (ledger) = dateInTime(dateTimeAccountSumDocumentLedger(ledger)) PERSISTENT;

isPostedAccountSumDocumentLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedShipment(ledger),
                                                                     isPostedReturnSupplier(ledger),
                                                                     isPostedInnerArrival(ledger),
                                                                     isPostedPriceChangeDocument(ledger),
                                                                     isPostedWriteOff(ledger),
                                                                     isPostedStatement(ledger),
                                                                     isPostedInnerFlow(ledger),
                                                                     isPostedWastage(ledger),
                                                                     isPostedReturnSupplier(ledger),
                                                                     isPostedInventory(inventoryCollationSheet(ledger)),
                                                                     isPostedZReport(ledger),
                                                                     isPostedSaleDiscountDocument(ledger),
                                                                     isPostedParish(ledger),
                                                                     isPostedConsumption(ledger) PERSISTENT;

departmentStoreAccountSumDocumentLedger (ledger) = UNION EXCLUSIVE departmentStoreShipment(ledger),
                                                                   departmentStoreReturnSupplier(ledger),
                                                                   departmentStoreInnerArrival(ledger),
                                                                   departmentStorePriceChangeDocument(ledger),
                                                                   departmentStoreWriteOff(ledger),
                                                                   departmentStoreStatement(ledger),
                                                                   departmentStoreInnerFlow(ledger),
                                                                   departmentStoreWastage(ledger),
                                                                   departmentStoreReturnSupplier(ledger),
                                                                   departmentStoreCollationSheet(ledger),
                                                                   departmentStoreZReport(ledger),
                                                                   departmentStoreSaleDiscountDocument(ledger),
                                                                   departmentStoreParish(ledger),
                                                                   departmentStoreConsumption(ledger) PERSISTENT;



nameDepartmentStoreAccountSumDocumentLedger 'Отдел магазина' (ledger) = name(departmentStoreAccountSumDocumentLedger(ledger));

sumIncAccountDocumentLedger 'Сумма прихода' (ledger) = UNION EXCLUSIVE retailSumShipment(ledger),
                                                                       accountSumInnerArrival(ledger),
                                                                       accountSumChangeDocument(ledger),
                                                                       subtotalParish(ledger) PERSISTENT;
sumOutAccountDocumentLedger 'Сумма расхода' (ledger) = UNION EXCLUSIVE accountSumWriteOff(ledger),
                                                                       retailSumReturnSupplier(ledger),
                                                                       accountSumInnerFlow(ledger),
                                                                       sumStatement(ledger),
                                                                       totalSumWastage(ledger),
                                                                       totalSumSupplierReturnSupplier(ledger),
                                                                       shortageTotalItemByCollationSheet(ledger),
                                                                       sumZReport(ledger),
                                                                       sumSaleDiscountDocument(ledger),
                                                                       subtotalConsumption(ledger) PERSISTENT;

sumAccountDocumentLedger 'Сумма' (ledger) = UNION EXCLUSIVE sumIncAccountDocumentLedger(ledger), -sumOutAccountDocumentLedger(ledger) PERSISTENT;

currentSumAccountDocumentLedger 'Текущий остаток по документам' (departmentStore) = GROUP SUM sumAccountDocumentLedger (ledger) AND isPostedAccountSumDocumentLedger(ledger)
                                                                                           BY departmentStoreAccountSumDocumentLedger(ledger) PERSISTENT;

//без учета текущей даты/времени
sumAccountBDocumentLedgerDateTime (departmentStore, dateTime) = UNION SUM currentSumAccountDocumentLedger(departmentStore) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM sumAccountDocumentLedger (ledger) AND dateTimeAccountSumDocumentLedger(ledger) >= (dateTime AS DATETIME) AND isPostedAccountSumDocumentLedger(ledger)
                                                                         BY departmentStoreAccountSumDocumentLedger(ledger), dateTime](departmentStore, dateTime);

sumAccountBDocumentLedgerDate 'Остаток на начало' (departmentStore, date) = UNION SUM currentSumAccountDocumentLedger(departmentStore) AND date IS DATE,
                                                                            -[GROUP SUM sumAccountDocumentLedger (ledger) AND dateAccountSumDocumentLedger(ledger) >= (date AS DATE) AND isPostedAccountSumDocumentLedger(ledger)
                                                                            BY departmentStoreAccountSumDocumentLedger(ledger), date](departmentStore, date);

//с учетом текущей даты/времени
sumAccountADocumentLedgerDateTime (departmentStore, dateTime) = UNION SUM currentSumAccountDocumentLedger(departmentStore) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM sumAccountDocumentLedger (ledger) AND dateTimeAccountSumDocumentLedger(ledger) > (dateTime AS DATETIME) AND isPostedAccountSumDocumentLedger(ledger)
                                                                         BY departmentStoreAccountSumDocumentLedger(ledger), dateTime](departmentStore, dateTime);

sumAccountADocumentLedgerDate 'Остаток на конец' (departmentStore, date) = UNION SUM currentSumAccountDocumentLedger(departmentStore) AND date IS DATE,
                                                                           -[GROUP SUM sumAccountDocumentLedger (ledger) AND dateAccountSumDocumentLedger(ledger) > (date AS DATE) AND isPostedAccountSumDocumentLedger(ledger)
                                                                           BY departmentStoreAccountSumDocumentLedger(ledger), date](departmentStore, date);

FORM sumAccountDocumentLedger 'Товарный отчет'
    OBJECTS params = (dtFrom = DATE, dtTo = DATE) FIXED PANEL,
            ds = departmentStore FIXED PANEL
    PROPERTIES objFrom = OBJVALUE(dtFrom), objTo = OBJVALUE(dtTo), name(ds) SELECTOR

    PROPERTIES sumAccountBDocumentLedgerDate(ds, dtFrom), sumAccountADocumentLedgerDate(ds, dtTo)

    OBJECTS il = incAccountSumDocumentLedger
    PROPERTIES(il) READONLY iDateTime = dateTimeAccountSumDocumentLedger, objectClassName, descriptionDocumentLedger, sumIncAccountDocumentLedger
    FILTERS isPostedAccountSumDocumentLedger(il),
            departmentStoreAccountSumDocumentLedger(il) == ds,
            dateAccountSumDocumentLedger(il) >= dtFrom,
            dateAccountSumDocumentLedger(il) <= dtTo
    ORDER BY iDateTime

    OBJECTS ol = outAccountSumDocumentLedger
    PROPERTIES(ol) READONLY oDateTime = dateTimeAccountSumDocumentLedger, objectClassName, descriptionDocumentLedger, sumOutAccountDocumentLedger
    FILTERS isPostedAccountSumDocumentLedger(ol),
            departmentStoreAccountSumDocumentLedger(ol) == ds,
            dateAccountSumDocumentLedger(ol) >= dtFrom,
            dateAccountSumDocumentLedger(ol) <= dtTo
    ORDER BY oDateTime
;

DESIGN sumAccountDocumentLedger FROM DEFAULT {
    PROPERTY(objFrom) {
        caption = 'Дата (с)';
    }
    PROPERTY(objTo) {
        caption = 'Дата (по)';
    }
}

//------------------------------------Формы для инвентаризации------------------------------------------//

FORM nameDepartmentByInventory 'Подразделения для инвентаризации'
    OBJECTS in=inventory FIXED PANEL
    PROPERTIES (in) READONLY seriesNumberObject, nameInventory, dateInventory

    TREE treeStore t=tradingNetwork, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY name(t), name(st), name(s), name(ds)

    FILTERS inStoreTypeTradingNetwork (st, t),
            inStoreTypeStore (st, s),
            inStoreDepartment (s, ds)

    PROPERTIES (ds, in) includeDepartmentStoreInventory, nameTypeOfAdditionDepartmentStoreInventoryOver

;

showFormNameDepartmentByInventory 'Подразделения для инвентаризации' (inventory) =
    ACTION FORM nameDepartmentByInventory OBJECTS in MODAL SHORTCUT nameDepartmentByInventory DEFAULT;

FORM collationSheetItem 'Товары для добавления в сличительную ведомость'
    OBJECTS cs=manyCollationSheet FIXED PANEL
    PROPERTIES (cs) READONLY nameCollationSheet, nameTypeOfAdditionCollationSheet, nameDepartmentStoreCollationSheet

    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS i=item
    PROPERTIES(i) READONLY barcodeBarcodeSku, nameAttributeItem, shortNameUnitOfMeasureItem

    PROPERTIES(cs, i) inManyCollationSheetItem

    FILTERS hasParentItemGroupSku(g, i)
    ORDER BY nameAttributeItem
;

DESIGN collationSheetItem FROM DEFAULT {
    POSITION treeGroup.box TO THE LEFT i.box;
        treeGroup.box{ fillHorizontal = 1.5;}
        i.box{ fillHorizontal = 3.5;}

}

showFormItemByCollationSheet 'Добавить товар' (collationSheet) = [ACTION FORM collationSheetItem OBJECTS cs MODAL](collationSheet) AND collationSheet IS manyCollationSheet;

FORM listInventory 'Опись'
    OBJECTS         li=listInventory FIXED PANEL
    PROPERTIES (li) nameListInventory, nameDepartmentStoreListInventory, nameInventoryListInventory, noteListInventory,
                    commonNameCommitteeListInventory, commonNameChairmanCommitteeListInventory, commonNameEmployeeListInventory,
                    quantityDetailListInventory, quantityCountedListInventory, totalDetailListInventory, sumPageListInventory

    OBJECTS         pl=pageList
    PROPERTIES(pl)  namePageList, notePageList FORCE PANEL, quantityDetailPageList, quantityCountedPageList, totalPageList, ADDOBJ, delete

    OBJECTS         dp=detailPage
    PROPERTIES (dp) nameDetailPage, nameBarcodeDetailPage, nameAttributeItemDetailPage, quantityCountedDetailPage, priceAccountDetailPage,
                    totalDetailPage, ADDOBJ, delete

    FILTERS inListInventoryPageList(li, pl),
            inPageListDetailPage(pl, dp)

EDIT listInventory OBJECT li
;

DESIGN listInventory FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        li.box{ childConstraints = TO THE BOTTOM;
        POSITION li.inventoryCommitteeGroup TO THE LEFT li.adverbGroup;
        }
        POSITION pl.box TO THE LEFT dp.box;
        pl.box {fillHorizontal = 1;
            childConstraints = TO THE BOTTOM;
        };
        dp.box {fillHorizontal = 2;}

    }
}

FORM inventory 'Инвентаризация'
    OBJECTS          in=inventory FIXED PANEL
    PROPERTIES (in)  nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject,
                     nameInventory, nameTypeOfAdditionInventory, dateInventory, timeInventory,
                     noteInventory, infoInventory, nameDepartmentByInventory, showFormNameDepartmentByInventory, convertPriceInventory,
                     fillBalanceInventory

    TREE treeDepartmentStore ds=departmentStore, li=listInventory, pl=pageList
    PROPERTIES       READONLY name(ds),  nameListInventory(li), namePageList(pl)

    PROPERTIES(ds, in) READONLY quantityDetailDepartmentStoreInventory, quantityCountedDepartmentStoreInventory, totalDetailDepartmentStoreInventory

    PROPERTIES(li)   READONLY quantityDetailListInventory, quantityCountedListInventory, totalDetailListInventory, objectClassName

    PROPERTIES(li)   ADDFORM, editLI = EDITFORM FORCE PANEL SHOWIF isDraftListInventory(li), delete FORCE PANEL SHOWIF isDraftListInventory(li), //delete SHOWIF isDraftListInventory(li),      //FORCE PANEL
                     postListInventory FORCE PANEL SHOWIF isDraftListInventory(li), unpostListInventory FORCE PANEL SHOWIF isPostedListInventory(li)

    PROPERTIES(pl)   READONLY quantityDetailPageList, quantityCountedPageList, totalPageList, dumb1

    OBJECTS          dp=detailPage
    PROPERTIES (dp)  READONLY nameDetailPage, nameBarcodeDetailPage, nameAttributeItemDetailPage, quantityCountedDetailPage,
                     priceAccountDetailPage, totalDetailPage

    OBJECTS          cs=collationSheet

    PROPERTIES (cs)  READONLY nameCollationSheet
    PROPERTIES (cs)  READONLY nameTypeOfAdditionCollationSheet, nameDepartmentStoreCollationSheet,
                     quantityCountedItemByCollationSheet, balanceItemByCollationSheet, shortageQuantityCountedItemByCollationSheet,
                     totalItemByCollationSheet, totalBalansItemByCollationSheet, shortageTotalItemByCollationSheet,
                     sumListInventoryByCollationSheet, sumPageListByCollationSheet
    PROPERTIES (cs)  showFormItemByCollationSheet, convertPriceCollationSheet, delete


    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS          i=item
    PROPERTIES (i)   READONLY nameAttributeItem, barcodeBarcodeSku

    PROPERTIES(cs, i) quantityCountedCollationSheetItem, balanceCollationSheetItem, shortageQuantityCountedCollationSheetItem
    PROPERTIES       priceByCollationSheetItem (cs,i) HIGHLIGHTIF notEqualsPriceByCollationSheetItem(cs, i),
                     priceAccountCollationSheetItem(cs, i) HIGHLIGHTIF notEqualsPriceByCollationSheetItem(cs, i)

    PROPERTIES(cs, i) totalCollationSheetItem, totalBalansCollationSheetItem, shortageTotalCollationSheetItem

    FILTERS inInventoryDepartmentStoreListInventoryPageListDetailPage(in, ds, li, pl, dp),
            inInventoryListInventory(in, li),
            inDepartmentStoreListInventory(ds, li),
            inListInventoryPageList(li, pl),
            includeDepartmentStoreInventory(ds, in),
            inInventoryCollationSheet(in,cs),
            includeCollationSheetItem(cs, i),
            hasParentItemGroupSku(g, i)

    ORDER BY nameAttributeItem

    FILTERGROUP notEqualsPriceFilters
            FILTER 'Показать товар с разными ценами' 'F10' notEqualsPriceByCollationSheetItem(cs, i)

    EDIT inventory OBJECT in
;

DESIGN inventory FROM DEFAULT {
    main{
        in.box {
            POSITION in.inventoryGroup TO THE LEFT in.inventGroup;
                in.inventGroup {
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY(fillBalanceInventory(in));
                    ADD PROPERTY(convertPriceInventory(in));
                    POSITION PROPERTY(fillBalanceInventory(in)) TO THE LEFT PROPERTY(convertPriceInventory(in));
                }
        }
        NEW secondCase BEFORE functions.box{
                tabbedPane = TRUE;
                NEW z.box { title = 'Описи';
                    fillVertical = 5;
                    ADD treeDepartmentStore.box { fillHorizontal = 2;};
                    ADD dp.box  {fillHorizontal = 3;};
                    POSITION treeDepartmentStore.box TO THE LEFT dp.box;
                    PROPERTY(objectClassName) {
                            preferredCharWidth = 15;
                    }
                    PROPERTY (dumb1) {
                        caption = 'Статус';
                        minimumCharWidth = 15;
                    }
                    PROPERTY (postListInventory) {
                        caption = 'Закрыть';
                    }
                    PROPERTY (unpostListInventory) {
                        caption = 'Открыть';
                    }
                    PROPERTY (editLI) {
                        caption = 'Редактировать';
                    }
                    PROPERTY (delete(li)) {
                        caption = 'Удалить';
                        panelLocation = TOOLBAR;
                        askConfirm = TRUE;
                    }
                }

                NEW x.box { title = 'Сличительные ведомости';
                    fillVertical = 5;

                    ADD cs.box  { fillVertical = 1;};

                    NEW firstCase { title = 'Пересчитанный товар';
                        fillVertical = 4;
                        ADD treeGroup.box { title = 'Товарные группы';};
                        ADD i.box;
                        POSITION treeGroup.box TO THE LEFT i.box;
                            treeGroup.box{ fillHorizontal = 1.5;}
                            i.box{ fillHorizontal = 3.5;}

                    ADD PROPERTY(showFormItemByCollationSheet(cs)) IN i.panel;
                    }
                }

        }
    }
}

FORM inventories 'Инвентаризации'
    OBJECTS in=inventory
    PROPERTIES(in) READONLY objectClassName, numberObject, seriesObject, dateInventory, timeInventory,
                            nameDepartmentByInventory, nameInventory, noteInventory

    PROPERTIES(in) FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES(in)  ADDFORM, EDITFORM SHOWIF isDraftInventory(in), delete FORCE PANEL SHOWIF isDraftInventory(in),
                    postInventory SHOWIF isDraftInventory(in), unpostInventory SHOWIF isPostedInventory(in)//(in) ADDFORM, EDITFORM, delete

    OBJECTS il=inventoryLedger
    PROPERTIES(il)  barcodeExInventoryLedger, nameAttributeItemInventoryLedger, quantityInventoryLedger, shortageTotalInventoryLedger, nameDepartmentStoreInventoryLedger
    FILTERS         inventoryInventoryLedger(il)==in
                  //  inInventoryCollationSheet(in,cs)
                    //quantityInventoryLedger(il)!=0

    ORDER BY        nameDepartmentStoreInventoryLedger
;

DESIGN inventories FROM DEFAULT {
    PROPERTY(objectClassName) {
        preferredCharWidth = 25;
    }
    PROPERTY (delete(in)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
    POSITION in.historyGroup TO THE LEFT in.postedGroup;
    ADD il.grid.box BEFORE in.historyGroup;
    il.grid.box {title = 'Товары с недостачей (излишком)';};
}

//------------------------------------формы: Отпуск из розницы-------------------------//


FORM specificationForm 'Отгрузки по данной с/ф'
    OBJECTS sp=specification FIXED PANEL
    PROPERTIES (sp) READONLY seriesNumberObject, nameDepartmentStoreSpecification, dateSpecification, dateToSpecification, nameCustomerSpecification,
                             nameObjectiveAcquiringSpecification, noteSpecification, quantitySpecification, sumSpecification, sumNDSSpecification

    OBJECTS st=statement
    PROPERTIES (st) READONLY seriesNumberObject, dateStatement, nameCustomerStatement, nameDepartmentStoreStatement,
                             noteStatement, totalQuantityStatement, sumStatement, sumNDSStatement

    FILTERS inStatementSpecification(st, sp)
;

showFormSpecificationForm 'Показать отгрузки по данной с/ф' (specification) = ACTION FORM specificationForm OBJECTS sp MODAL TOOLBAR;

@metaCodeInputMultipleItems (specification);

FORM specification 'Счет-фактура'
    OBJECTS sp=specification FIXED PANEL
    PROPERTIES (sp) nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, nameDepartmentStoreSpecification,
                    dateSpecification, timeSpecification, dateToSpecification, nameCustomerSpecification,
                    nameObjectiveAcquiringSpecification, noteSpecification, quantitySpecification, sumSpecification, sumNDSSpecification

    OBJECTS d=specificationDetail
    PROPERTIES (d) numberSpecificationDetail, nameAttributeItemSpecificationDetail, barcodeExSkuSpecificationDetail, quantitySpecificationDetail,
                   retailPriceSpecificationDetail, dataActingRateRangeSpecificationDetail, sumNDSSpecificationDetail, totalSumNDSSpecificationDetail, sumSpecificationDetail, ADDOBJ, delete

    PROPERTIES FORCE PANEL READONLY articleItemSpecificationDetail(d), nameCountryItemSpecificationDetail(d), balanceDepartmentStoreItemSpecificationDetail(d)
                   HIGHLIGHTIF highlightSpecificationDetail(d), availableQuantityItemBySpecificationDetail(d) HIGHLIGHTIF NotNullAvailableQuantityItemBySpecificationDetail(d)

    PROPERTIES inputMultipleItemsSpecification(sp) TODRAW d, addSpecificationDetailBarcode(sp) TODRAW d
    FILTERS inSpecificationSpecificationDetail(sp, d)

    EDIT specification OBJECT sp
;

DESIGN specification FROM DEFAULT{
    main {
        preferredSize = (1024, 768);

        sp.waybillSum { caption = 'Суммы счет-фактуры'; };

        d.panel {
            childConstraints = TO THE BOTTOM;

        POSITION PROPERTY (balanceDepartmentStoreItemSpecificationDetail(d)) TO THE LEFT PROPERTY (availableQuantityItemBySpecificationDetail(d));
        }

    }
}

FORM specifications 'Счет-фактуры'
    OBJECTS sp=specification
    PROPERTIES (sp) READONLY numberObject, seriesObject, dateSpecification, timeSpecification, nameDepartmentStoreSpecification,
                             nameCustomerSpecification, dateToSpecification, quantitySpecification, sumSpecification
    PROPERTIES (sp)          showFormSpecificationForm FORCE PANEL SHOWIF  quantityStatementsInSpecification(sp)

    PROPERTIES (sp)          ADDFORM, EDITFORM, delete

    OBJECTS d=specificationDetail
    PROPERTIES (d)  READONLY numberSpecificationDetail, nameAttributeItemSpecificationDetail, barcodeExSkuSpecificationDetail, quantitySpecificationDetail,
                    retailPriceSpecificationDetail, sumSpecificationDetail

    FILTERS         inSpecificationSpecificationDetail(sp, d)

    FILTERGROUP filters6
            FILTER 'Просроченные с/ф' 'F10' overdueSpecification(sp)
            FILTER 'Непросроченные с/ф' 'F9' noOverdueSpecification(sp)
;




FORM specificationsStatement 'Счета'
    OBJECTS st=statement FIXED PANEL
    PROPERTIES (st) READONLY seriesNumberObject, dateStatement

    OBJECTS sp=specification

    PROPERTIES (st, sp) inStatementSpecification
    PROPERTIES (sp)     READONLY seriesNumberObject, dateSpecification, nameCustomerSpecification, nameDepartmentStoreSpecification,
                                 dateToSpecification, quantitySpecification, sumSpecification, statusSpecification
    PROPERTIES (st, sp) statusStatementSpecification

    FILTERS isCustomerStatementSpecification (st, sp),
            isDepartmentStoreStatementSpecification (st, sp)

    FILTERGROUP filters6
            FILTER 'Просроченные с/ф' 'F10' overdueSpecification(sp)
            FILTER 'Непросроченные с/ф' 'F9' noOverdueSpecification(sp)
            FILTER 'Без отгрузок с/ф ' 'F8' noQuantityStatementsInSpecification(sp) DEFAULT
;

showFormSpecificationsStatement 'Заказы' (statement) = ACTION FORM specificationsStatement OBJECTS st MODAL SHORTCUT specificationsStatement DEFAULT;

@metaCodeInputMultipleItems (statement);

FORM statement 'Отгрузка из розницы'
    OBJECTS st=statement FIXED PANEL
    PROPERTIES (st) numberObject, seriesObject, dateStatement, timeStatement, nameCustomerStatement,
                    nameDepartmentStoreStatement, specificationsStatement, toFillStatementDetailsStatement, showFormSpecificationsStatement,
                    noteStatement, totalQuantityStatement, sumStatement, sumNDSStatement

    OBJECTS d=statementDetail
    PROPERTIES (d)  numberStatementDetail, nameAttributeItemStatementDetail, barcodeExSkuStatementDetail, quantityStatementDetail,
                    retailPriceStatementDetail, numberRangeStatementDetail, dataActingRateRangeStatementDetail, sumNDSStatementDetail, totalSumNDSStatementDetail, sumStatementDetail,
                    noteStatementDetail READONLY, ADDOBJ, delete

    PROPERTIES (d)  FORCE PANEL importerPriceStatementDetail, dataRetailRangeStatementDetail, curRetailPriceStatementDetail HIGHLIGHTIF notEqualsPriceStatementDetail(d),
                                nameWareStatementDetail, priceWareStatementDetail, articleItemStatementDetail, nameCountryItemStatementDetail,
                                balanceDepartmentStoreItemStatementDetail HIGHLIGHTIF highlightStatementDetail(d)


    PROPERTIES      inputMultipleItemsStatement(st) TODRAW d, addStatementDetailBarcode(st) TODRAW d

    FILTERS         inStatementStatementDetail(st, d)

    EDIT statement OBJECT st
;

DESIGN statement FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        st.box {
//            childConstraints = TO THE RIGHTBOTTOM;
            POSITION st.documentHeaderGroup TO THE LEFT st.specificationGroup;
        }
        d.panel {
//            childConstraints = TO THE RIGHTBOTTOM;
//            NEW headerRow1 {
//                childConstraints = TO THE BOTTOM;
//                ADD PROPERTY(articleItemStatementDetail);
//                ADD PROPERTY(nameCountryItemStatementDetail);
//                ADD PROPERTY (balanceDepartmentStoreItemStatementDetail);
//            }
            POSITION d.pricingStatementDetailInfo TO THE LEFT d.itemStatementDetailInfo;
        }
    }
}


FORM statements 'Отгрузки из розницы'
    OBJECTS st=statement
    PROPERTIES (st)  READONLY objectClassName, numberObject, seriesObject, dateTimeStatement, nameDepartmentStoreStatement,
                             nameCustomerStatement, quantityStatementDetailsStatement, totalQuantityStatement, sumStatement

    PROPERTIES (st)  ADDFORM, EDITFORM SHOWIF isDraftStatement(st), delete FORCE PANEL SHOWIF isDraftStatement(st),
                     postStatement SHOWIF isDraftStatement(st), unpostStatement SHOWIF isPostedStatement(st)
     PROPERTIES (st) FORCE PANEL  nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    ORDER BY dateTimeStatement

    OBJECTS d=statementDetail
    PROPERTIES (d)   READONLY numberStatementDetail, nameAttributeItemStatementDetail, barcodeExSkuStatementDetail,
                     quantityStatementDetail, retailPriceStatementDetail, sumStatementDetail, noteStatementDetail

    FILTERS          inStatementStatementDetail(st, d)
;

DESIGN statements FROM DEFAULT {
    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }
    PROPERTY (delete(st)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
    POSITION st.historyGroup TO THE LEFT st.postedGroup;
    ADD d.grid.box BEFORE st.historyGroup;
}

//----------------------------------- Формы чеков -------------------------------------------------//

FORM bill 'Z-отчет'
    OBJECTS z=zReport FIXED PANEL
    PROPERTIES (z) numberCashRegisterZReport, nameDepartmentStoreZReport, dateOpenZReport, numberZReport,
                    quantityBillsZReport, quantityPositionsZReport, sumZReport, discountSumZReport

    OBJECTS b=bill
    PROPERTIES(b) numberBill, dateBill, timeBill, numberCashRegisterBill, nameDepartmentStoreBill READONLY,
                  numberDiscountCardBill, nameCustomerDiscountCardBill, sumBill, discountSumBill, quantityBillDetailsBill, quantityPositionsBill, ADDOBJ, delete
    FILTERS zReportBill(b)==z

    OBJECTS d=billDetail
    PROPERTIES(d) barcodeExBillDetail, nameAttributeItemBillDetail, quantityBillDetail, priceBillDetail, sumBillDetail, discountSumBillDetail, ADDOBJ, delete

    FILTERS billBillDetail(d)==b

    OBJECTS p=payment
    PROPERTIES(p) namePaymentTypePayment, namePaymentMeansPayment, sumPayment, ADDOBJ, delete
    PROPERTIES addBillDetailBarcodeFill (b) TODRAW d

    FILTERS billPayment(p)==b

    EDIT zReport OBJECT z
;

DESIGN bill FROM DEFAULT{
    NEW row.box BEFORE functions.box{
        ADD d.box{
            title = 'Строка чека';
            fillHorizontal = 3;
        };
        ADD p.box{
            fillHorizontal = 1;
        };
        POSITION d.box TO THE LEFT p.box;
    }
};

FORM bills 'Чеки'
    OBJECTS z=zReport
    PROPERTIES (z) READONLY objectClassName, numberCashRegisterZReport, nameDepartmentStoreZReport, dateOpenZReport,
                            numberZReport, quantityBillsZReport, quantityPositionsZReport, sumZReport, discountSumZReport
    PROPERTIES (z) ADDFORM, EDITFORM SHOWIF isDraftZReport(z), delete FORCE PANEL SHOWIF isDraftZReport(z),
                        postZReport SHOWIF isDraftZReport(z), unpostZReport SHOWIF isPostedZReport(z)

    OBJECTS b=bill
    PROPERTIES(b) READONLY numberBill, dateBill, timeBill, numberCashRegisterBill, nameDepartmentStoreBill,
                           numberDiscountCardBill, nameCustomerDiscountCardBill, sumBill, discountSumBill, quantityBillDetailsBill, quantityPositionsBill

    FILTERS zReportBill(b)==z

    OBJECTS d=billDetail
    PROPERTIES(d) READONLY barcodeExBillDetail, nameAttributeItemBillDetail, quantityBillDetail, priceBillDetail, sumBillDetail, discountSumBillDetail

    FILTERS billBillDetail(d)==b

    OBJECTS p=payment
    PROPERTIES(p) READONLY namePaymentTypePayment, namePaymentMeansPayment, sumPayment

    FILTERS billPayment(p)==b
;

DESIGN bills FROM DEFAULT{
        PROPERTY(objectClassName) {
            preferredCharWidth = 15;
        }
        PROPERTY (delete(z)) {
            panelLocation = TOOLBAR;
            askConfirm = TRUE;
        }
    NEW row.box BEFORE functions.box{
        ADD d.box{
            title = 'Строка чека';
            fillHorizontal = 3;
        };
        ADD p.box{
            fillHorizontal = 1;
        };
        POSITION d.box TO THE LEFT p.box;
    }
};

//----------------------------------- Форма для остатков -------------------------------------------------//

inTradingNetworkStoreTypeStoreDepartmentDepartment (tradingNetwork, storeType, store, department, depStore) = UNION OVERRIDE
    department == depStore AND store  AND tradingNetwork AND storeType,
    storeDepartmentStore(department) == store AND NOT depStore AND tradingNetwork AND storeType,
    storeTypeDepartmentStore(department) == storeType AND NOT depStore AND tradingNetwork AND NOT store,
    tradingNetworkDepartmentStore(department) == tradingNetwork AND NOT store AND NOT storeType AND NOT depStore,
    department IS departmentStore AND NOT store AND NOT storeType AND NOT tradingNetwork AND NOT depStore;

FORM balanceItemDepartment 'Остатки по отделам'

    OBJECTS t=DATETIME FIXED PANEL
    PROPERTIES(t) OBJVALUE

    TREE treeStore a=STRING[3], tn=tradingNetwork, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY OBJVALUE(a), name(tn), name(st), name(s), name(ds)
    FILTERS stringEqualsAll(a), inStoreTypeTradingNetwork (st, tn), inStoreTypeStore (st, s), inStoreDepartment(s, ds)

    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)

    OBJECTS           dsi=(dep=departmentStore, i=item)
    PROPERTIES        READONLY nameIt=nameAttributeItem(i), nameDep=name(dep)  //  barcodeBarcodeSku
    ORDER BY          nameDep
    FILTERS           hasParentItemGroupSku(g, i),
                      inTradingNetworkStoreTypeStoreDepartmentDepartment(tn, st, s, dep, ds)


    PROPERTIES(i, dep, t) READONLY priceAccountALedgerDateTime, balanceAItemLedgerDateTime
    FILTERGROUP filters
        FILTER 'Товары с остатком' 'F10' balanceAItemLedgerDateTime(i, dep, t) DEFAULT

    OBJECTS apl=accountPriceLedger
    PROPERTIES (apl) descriptionLedger, dateTimeAccountPriceLedger, priceAccountLedger
    FILTERS isPostedAccountPriceLedger(apl) AND itemAccountPriceLedger(apl)==i AND departmentStoreAccountPriceLedger(apl)==dep
    ORDER BY dateTimeAccountPriceLedger DESC

    OBJECTS rpl=retailPriceLedger
    PROPERTIES (rpl) descriptionLedger, dateTimeRetailPriceLedger, priceRetailLedger
    FILTERS isPostedRetailPriceLedger(rpl) AND itemRetailPriceLedger(rpl)==i AND departmentStoreRetailPriceLedger(rpl)==dep
    ORDER BY dateTimeRetailPriceLedger DESC

    OBJECTS bil=balanceItemLedger
    PROPERTIES(bil) descriptionLedger, dateTimeBalanceItemLedger, quantityBalanceItemLedger READONLY
    FILTERS isPostedBalanceItemLedger(bil) AND itemBalanceItemLedger(bil)==i AND departmentStoreBalanceItemLedger(bil)==dep
    ORDER BY dateTimeBalanceItemLedger DESC

    OBJECTS ipl=importerPriceLedger
    PROPERTIES(ipl) descriptionLedger, dateTimeImporterPriceLedger, priceImporterLedger
    FILTERS isPostedImporterPriceLedger(ipl) AND itemImporterPriceLedger(ipl)==i AND departmentStoreImporterPriceLedger(ipl)==dep
    ORDER BY dateTimeImporterPriceLedger DESC

    OBJECTS rvl=retailVATLedger
    PROPERTIES(rvl) descriptionLedger, dateTimeRetailVATLedger, dataRetailLedger
    FILTERS isPostedRetailVATLedger(rvl) AND itemRetailVATLedger(rvl)==i AND departmentStoreRetailVATLedger(rvl)==dep
    ORDER BY dateTimeRetailVATLedger DESC

    OBJECTS wpl= warePriceLedger
    PROPERTIES(wpl) descriptionLedger, dateTimeWarePriceLedger, nameWareWarePriceLedger, priceWareWarePriceLedger
    FILTERS isPostedWarePriceLedger(wpl) AND itemWarePriceLedger(wpl)==i AND departmentStoreWarePriceLedger(wpl)==dep
    ORDER BY dateTimeWarePriceLedger DESC
;

DESIGN balanceItemDepartment FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW firstCase {
                fillHorizontal = 1;
                childConstraints = TO THE BOTTOM;
                ADD t.box;
                ADD treeStore.box {title = 'Магазины';};
                ADD treeGroups.box {title = 'Товарные группы';};
        }

        NEW secondCase {
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD dsi.box {fillVertical = 2;}

                NEW ledger.box {
                    fillVertical = 1;
                    title = 'Изменение цен';
                    tabbedPane = TRUE;
                    ADD bil.box;
                    ADD apl.box;
                    ADD rpl.box;
                    ADD ipl.box;
                    ADD rvl.box;
                    ADD wpl.box;
                }

        }
        POSITION firstCase TO THE LEFT secondCase;

        ADD functions.box;
    }
}

//---------------------------------------------- Форма поставки товаров в отдел -------------------------------------//

inSupplierItemDepartmentOver(sp, i, dep, t) = isSupplierItemDepartmentOver(sp, i, dep, t) == yesNo.yes;

FORM isSupplierItemDepartmentStore 'Ассортимент товаров в подразделении'

    OBJECTS t=DATE FIXED PANEL
    PROPERTIES(t) OBJVALUE

    TREE treeStore a=STRING[3], tn=tradingNetwork, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY OBJVALUE(a), name(tn), name(st), name(s), name(ds)
    FILTERS stringEqualsAll(a), inStoreTypeTradingNetwork (st, tn), inStoreTypeStore (st, s), inStoreDepartment(s, ds)

    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)

    OBJECTS           sp=supplier
    PROPERTIES(sp)    READONLY name

    OBJECTS           dsi=(dep=departmentStore, i=item)
    PROPERTIES        READONLY nameDep=name(dep), nameIt=nameAttributeItem(i), barcodeBarcodeSku(i)
    ORDER BY          nameDep
    PROPERTIES(sp, i, dep, t) nameisSupplierItemDepartmentOver, priceSupplierItemDepartmentOver
    FILTERS           inTradingNetworkStoreTypeStoreDepartmentDepartment(tn, st, s, dep, ds)
    FILTERS           hasParentItemGroupSku(g, i)
    FILTERGROUP filters10
        FILTER 'Показывать поставляемые товары' 'F10' inSupplierItemDepartmentOver(sp, i, dep, t) DEFAULT;

DESIGN isSupplierItemDepartmentStore FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW firstCase {
                fillHorizontal = 1;
                childConstraints = TO THE BOTTOM;
                ADD t.box;
                ADD treeStore.box {title = 'Магазины';};
                ADD treeGroups.box {title = 'Товарные группы';};
        }

        NEW secondCase {
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD sp.box;
                ADD dsi.box {fillVertical = 2;}

        }
        POSITION firstCase TO THE LEFT secondCase;

        ADD functions.box;
    }
}

// ---------------------------- Нумераторы по умолчанию --------------------------------- //

defaultNumeratorDocuments = DATA numerator ();
nameDefaultNumeratorDocuments 'Нумератор для документов' = name(defaultNumeratorDocuments());

numeratorObject(object) <- defaultNumeratorDocuments() ON ASSIGN object IS numeratedObject;

//---------------------------------------------- Параметры -----------------------------------------------------//

FORM parameters 'Параметры'
    PROPERTIES() nameDefaultNumeratorDocuments;
;

//---------------------------------------------- Импорт данных -----------------------------------------------------//

//GROUP formularGroup 'Formular' : baseGroup;

importDataAction 'Импортировать данные (Formular)' = ACTION CUSTOM 'rublevski.actions.ImportDataActionProperty';// IN formularGroup;
importUrl 'URL' = DATA STRING[200] (); //IN formularGroup;
importLogin 'Логин' = DATA STRING[200] ();// IN formularGroup;
importPassword 'Пароль' = DATA STRING[200] ();// IN formularGroup;

//GROUP lstradeGroup 'LS Trade' : baseGroup;

importLSTDataAction 'Импортировать данные (LS Trade)' = ACTION CUSTOM 'rublevski.actions.ImportLSTDataActionProperty';// IN lstradeGroup;
importLSTDirectory 'Папка' = DATA STRING[200] ();// IN lstradeGroup;
importInactive 'Импортировать в том числе неактивные' = DATA BOOLEAN ();
importGroupItems 'Импортировать группы товаров' = DATA BOOLEAN ();
importWares 'Импортировать посуду' = DATA BOOLEAN ();
importItems 'Импортировать товары' = DATA BOOLEAN ();
importNumberItems 'Кол-во' = DATA INTEGER ();
importNumberItemsAtATime 'Разбивать на пакеты по' = DATA INTEGER ();
importPrices 'Импортировать цены товаров' = DATA BOOLEAN ();
importAssortment 'Импортировать ассортимент' = DATA BOOLEAN();
importShipment 'Импортировать документы прихода' = DATA BOOLEAN ();
importNumberShipments 'Кол-во' = DATA INTEGER ();
importCompanies 'Импортировать компании' = DATA BOOLEAN ();
importSuppliers 'Импортировать поставщиков' = DATA BOOLEAN ();
importCustomers 'Импортировать покупателей' = DATA BOOLEAN ();
importStores 'Импортировать магазины' = DATA BOOLEAN ();
importDepartmentStores 'Импортировать отделы магазина' = DATA BOOLEAN();
importBanks 'Импортировать банки' = DATA BOOLEAN();
importRateWastes 'Импортировать нормы отходов' = DATA BOOLEAN();
FORM importData 'Импорт данных'
    PROPERTIES() importDataAction, importUrl, importLogin, importPassword
    PROPERTIES() importLSTDataAction, importLSTDirectory, importInactive, importGroupItems, importWares, importItems,
    importNumberItems, importNumberItemsAtATime, importPrices, importAssortment, importShipment, importNumberShipments,
    importCompanies, importSuppliers, importCustomers, importStores, importDepartmentStores, importBanks, importRateWastes
;

//---------------------------- Настройка навигатора ----------------------------------------//

WINDOW TOOLBAR topToolbar 'Папки' VERTICAL HIDETITLE HIDESCROLLBARS POSITION(0, 0, 20, 5);
WINDOW TOOLBAR formsToolbar 'Формы' VERTICAL HIDETITLE POSITION (0, 5, 20, 65);
WINDOW TREE formsTree 'Формы' HIDETITLE POSITION (0, 5, 20, 65);

HIDE WINDOW BaseLogicsModule.relevantForms;
HIDE WINDOW BaseLogicsModule.relevantClassForms;

NAVIGATOR {

    baseElement TO topToolbar;

    NEW lists 'Справочники' TO formsToolbar {
        NEW goods 'Товары' {
            ADD items;
            ADD wares;
            ADD components;
            ADD itemGroups;
            ADD unitsOfMeasure;
            ADD assortments;
        }
        NEW shopStructure 'Магазины' {
            ADD companies;
//            ADD qualifier;
            ADD stores;
        }
        NEW employeeRelations 'Сотрудники' {
            ADD employees;
            ADD employeesCommittees;
            ADD groupsUser;
        }
        NEW contragents 'Контрагенты'{
            ADD suppliers;
            ADD customers;
            ADD discountCards;
            ADD banks;
        }
        NEW equipment 'Оборудование' {
            ADD groupsCashRegister;
            ADD groupsScales;
            ADD groupsCheck;
            ADD machineries;
            ADD models;
            ADD stages;
            ADD cashReports;
        }
        NEW producing 'Производство'{
            ADD cuttings;
            ADD recipes;
        }
        NEW pricing 'Ценообразование'{
            ADD taxes;
        }
    }

    NEW processes 'Бизнес-процессы' TO formsToolbar {
        NEW orders 'Заказы' {
            ADD timeTableDate;
            ADD orderSuppliers;
        }
        NEW incomeShipments 'Поставки' {
            ADD shipments;
            ADD wastages;
            ADD returnSuppliers;
            ADD isSupplierItemDepartmentStore;
        }
        NEW carryingInventories 'Инвентаризация' {
            ADD inventories;
        }
        NEW itemWriteOffs 'Списания' {
            ADD writeOffs;
        }
        NEW itemInnerFlows 'Внутренние перемещения' {
            ADD innerFlows;
            ADD innerArrivals;
        }
        NEW itemSpecifications 'Отпуск из розницы' {
            ADD specifications;
            ADD statements;
        }
        NEW retailSale 'Розничные продажи'{
            ADD bills;
        }
        NEW priceManagement 'Управление ценами' {
            ADD userPriceChanges;
        }
        NEW production 'Производство'{
            ADD actOfStudies;
        }
    }
    NEW accountInfo 'Сводная информация' TO formsToolbar{
        ADD balanceItemDepartment;
        ADD sumAccountDocumentLedger;
        ADD priceChangeDocuments;
    }

    ADD adminElement TO formsTree {
        NEW objects 'Карточки' {
            ADD itemGroup;
            ADD itemGroupDialog;
            ADD unitOfMeasure;
            ADD item;
            ADD ware;
            ADD barcode;
            ADD barcodeInput;
            ADD employee;
            ADD groupUser;
            ADD tradingSquare;
            ADD departmentStore;
            ADD departmentStores;
            ADD store;
            ADD tradingNetwork;
            ADD committee;
            ADD bank;
            ADD ownership;
            ADD supplier;
            ADD customer;
            ADD company;
            ADD cashRegisterModel;
            ADD scalesModel;
            ADD checkModel;
            ADD assortment;
            ADD typeItem;
            ADD tag;
            ADD rowTorg1;
            ADD color;
            ADD taste;
            ADD pack;
            ADD sort;
            ADD size;
            ADD specialty;
            ADD coolingDegree;
            ADD formItem;
            ADD numberInPack;
            ADD rateWaste;
            ADD addNameisPortionBarItem;
            ADD nameisPortionBarItem;
            ADD addNamebanDiscountItem;
            ADD namebanDiscountItem;
            ADD addcoefficientNetGrossItem;
            ADD coefficientNetGrossItem;
            ADD addrateNaturalLossItem;
            ADD rateNaturalLossItem;
            ADD genTimeTables;
            ADD addpriceWare;
            ADD priceWare;
            ADD rangeWare;
            ADD addRangeWare;
            ADD suppliersRangeItem;
            ADD addSuppliersRangeItem;
            ADD retailRangeItem;
            ADD addRetailRangeItem;
            ADD addimporterPriceItem;
            ADD importerPriceItem;
            ADD addmaxReserveItemDepartment;
            ADD maxReserveItemDepartment;
            ADD addminReserveItemDepartment;
            ADD minReserveItemDepartment;
            ADD addNamebanRevaluationItemDepartment;
            ADD namebanRevaluationItemDepartment;
            ADD addNameinActionItemDepartment;
            ADD nameinActionItemDepartment;
            ADD addmarginProductionItemDepartment;
            ADD marginProductionItemDepartment;
            ADD addretailPriceItemDepartment;
            ADD retailPriceItemDepartment;
            ADD addaccountPriceItemDepartment;
            ADD accountPriceItemDepartment;
            ADD adddiscountItemDepartment;
            ADD discountItemDepartment;
            ADD addNameisSupplierItemDepartment;
            ADD nameisSupplierItemDepartment;
            ADD addpriceSupplierItemDepartment;
            ADD priceSupplierItemDepartment;
            ADD addmarkupItemDepartment;
            ADD markupItemDepartment;
            ADD addNamebanSupplierItemDepartment;
            ADD namebanSupplierItemDepartment;
            ADD preliminaryOrder;
            ADD cashRegister;
            ADD scales;
            ADD check;
            ADD tax;
            ADD cutting;
            ADD recipe;
            ADD groupCashRegister;
            ADD groupScales;
            ADD groupCheck;
            ADD component;
            ADD addaddressLegalEntity;
            ADD addressLegalEntity;
            ADD addpostAddressLegalEntity;
            ADD postAddressLegalEntity;
            ADD addmanagerLegalEntity;
            ADD managerLegalEntity;
            ADD addaccountantLegalEntity;
            ADD accountantLegalEntity;
            ADD addphoneLegalEntity;
            ADD phoneLegalEntity;
            ADD addNamesureSupplierDepartmentStore;
            ADD namesureSupplierDepartmentStore;
            ADD addressBank;
            ADD addaddressBank;
            ADD nameformContract;
            ADD addNameformContract;
            ADD delayContract;
            ADD adddelayContract;
            ADD genTimeTable;
            ADD addNamediscount;
            ADD addtimeTable;
            ADD orderSupplier;
            ADD timeTable;
            ADD cashReport;
            ADD namediscount;
            ADD rateWaste;
            ADD ordersShipment;
            ADD shipment;
            ADD inventory;
            ADD reasonOff;
            ADD writeOff;
            ADD listInventory;
            ADD nameDepartmentByInventory;
            ADD collationSheetItem;
            ADD innerFlow;
            ADD innerArrival;
            ADD objectiveAcquiring;
            ADD specification;
            ADD specificationsStatement;
            ADD specificationForm;
            ADD statement;
            ADD numerator;
            ADD userPriceChange;
            ADD returnSupplier;
            ADD barcodeForm;
            ADD bill;
            ADD commonInfoBatchReturnSupplierDetail;
            ADD discountCard;
            ADD actOfStudy;
            ADD sidCuttingStudyInputDetail;
            ADD itemDepartmentStoreInput;
        }
        ADD parameters;
        ADD importData;
    }

    catalogElement {
        ADD numerators;
    }
}

