MODULE Rublevski;

IMPORT BaseLogicsModule;

castToString255 = FORMULA STRING[255] 'CAST($1 AS character(255))';

CLASS doubleNamed 'Объект с кратким наименованием' : named;

shortName 'Краткое наименование' = DATA STRING[5] (doubleNamed) IN baseGroup;

// ----------------------------------- Товарный классификатор ------------------------------------------ //
CLASS itemGroup 'Товарная группа' : named;

parentItemGroup = DATA itemGroup (itemGroup);
nameParentItemGroup 'Родительская группа' = name(parentItemGroup(itemGroup));

FORM itemGroup 'Товарная группа'
OBJECTS g=itemGroup FIXED PANEL
PROPERTIES(g) name, nameParentItemGroup
EDIT itemGroup OBJECT g;

FORM itemGroups 'Товарные группы'
OBJECTS g=itemGroup
PROPERTIES(g) READONLY name, nameParentItemGroup
PROPERTIES(g) ADDFORM, EDITFORM, delete;

// ----------------------------------- Единицы измерения ------------------------------------------ //
CLASS unitOfMeasure 'Единица измерения' : doubleNamed;

unitOfMeasureUnitOfMeasure 'Базовая ед.изм. ИД' = DATA unitOfMeasure(unitOfMeasure) IN idGroup;
shortNameUnitOfMeasureUnitOfMeasure 'Базовая ед.изм.' (unitOfMeasure) = shortName(unitOfMeasureUnitOfMeasure(unitOfMeasure)) IN baseGroup;
rightUnitOfMeasure 'Разместить от значения: справа' = DATA BOOLEAN (unitOfMeasure) IN baseGroup;
useUnitOfMeasure 'Используется' = DATA BOOLEAN (unitOfMeasure) IN baseGroup;
factorUnitOfMeasure 'Коэффициент пересчета в баз.ед.' = DATA DOUBLE (unitOfMeasure) IN baseGroup;
weightUnitOfMeasure 'Для весовых товаров/услуг' = DATA BOOLEAN (unitOfMeasure) IN baseGroup;
pieceUnitOfMeasure 'Для штучных товаров/услуг' = DATA BOOLEAN (unitOfMeasure) IN baseGroup;


FORM unitOfMeasure 'Единица измерения'
OBJECTS u=unitOfMeasure FIXED PANEL
PROPERTIES(u) name, shortName, shortNameUnitOfMeasureUnitOfMeasure, factorUnitOfMeasure, rightUnitOfMeasure,
              useUnitOfMeasure, weightUnitOfMeasure, pieceUnitOfMeasure
EDIT unitOfMeasure OBJECT u;

FORM unitsOfMeasure 'Единицы измерений'
OBJECTS u=unitOfMeasure
PROPERTIES(u) READONLY name, shortName, shortNameUnitOfMeasureUnitOfMeasure, factorUnitOfMeasure, rightUnitOfMeasure,
              useUnitOfMeasure, weightUnitOfMeasure, pieceUnitOfMeasure
PROPERTIES(u) ADDFORM, EDITFORM, delete;

// ------------------------------------ Цвета ------------------------------------------------ //
CLASS color 'Цвет' : named;

FORM color 'Цвет'
OBJECTS c=color FIXED PANEL
PROPERTIES(c) name;

// ------------------------------------ Вкусы ------------------------------------------------------ //
CLASS taste 'Вкус' : named;

FORM taste 'Вкус'
OBJECTS t=taste FIXED PANEL
PROPERTIES(t) name;

// ----------------------------------- Производители ---------------------------------- //
//CLASS manufacturer 'Производитель' : named;

//------------------------------------ Сорта-категории --------------------------------- //
CLASS sort 'Сорт/Категория' : named;

FORM sort 'Сорт/Категория'
OBJECTS s=sort FIXED PANEL
PROPERTIES(s) name;

//------------------------------------ Упаковки ----------------------------------------//
CLASS pack 'Упаковка' : doubleNamed;

FORM pack 'Упаковка'
OBJECTS p=pack FIXED PANEL
PROPERTIES(p) name, shortName;

//------------------------------------ Особенности изготовления ------------------------//
CLASS specialty 'Особенность' : doubleNamed;

FORM specialty 'Особенность'
OBJECTS s=specialty FIXED PANEL
PROPERTIES(s) name, shortName;

//------------------------------------ Размеры/Калибры/Габариты ------------------------//
CLASS size 'Размер/калибр' : doubleNamed;

FORM size 'Размер/калибр'
OBJECTS s=size FIXED PANEL
PROPERTIES(s) name, shortName;

// ----------------------------------- Товар ------------------------------------------ //
GROUP descriptionGroup 'Общее описание' : baseGroup;
GROUP sizeGroup 'Физические характиристики' : baseGroup;
GROUP substanceGroup 'Пищевые характеристики' : baseGroup;
GROUP retailGroup 'Ценовые характеристики' : baseGroup;

CLASS ABSTRACT sku 'SKU' : named;
CLASS item 'Товар' : sku;
CLASS dish 'Блюдо' : sku;
CLASS component 'Компонент' : sku;
CLASS brand 'Бренд' : named;

brandItem = DATA brand(item);
nameBrandItem 'Бренд' (item) = name(brandItem(item)) IN descriptionGroup;

unitOfMeasureItem = DATA unitOfMeasure (item) IN idGroup;
shortNameUnitOfMeasureItem 'Единица измерения' (item) = shortName(unitOfMeasureItem(item)) IN descriptionGroup;

isWeightItem 'Весовой товар' = DATA BOOLEAN (item) IN descriptionGroup;
volumeItem 'Объём' = DATA DOUBLE (item) IN sizeGroup;
netWeightItem 'Вес нетто' = DATA DOUBLE (item) IN sizeGroup;
isWeightedItem 'Признак взвешиваемого товара' = DATA BOOLEAN (item) IN descriptionGroup;

sortItem = DATA sort(item) IN idGroup;
nameSortItem 'Сорт/категория товара' = name(sortItem(item)) IN descriptionGroup;

packItem = DATA pack(item) IN idGroup;
shortNamePackItem 'Упаковка' = shortName(packItem(item)) IN descriptionGroup;

specialtyItem = DATA specialty(item) IN idGroup;
shortNameSpecialtyItem 'Особенности' = shortName(specialtyItem(item)) IN descriptionGroup;

sizeItem = DATA size(item) IN idGroup;
shortNameSizeItem 'Размер/калибр' = shortName(sizeItem(item)) IN descriptionGroup;

colorItem = DATA color (item) IN idGroup;
nameColorItem 'Цвет' = name(colorItem(item)) IN descriptionGroup;
tasteItem = DATA taste (item) IN idGroup;
nameTasteItem 'Вкус' = name(tasteItem(item)) IN descriptionGroup;

percentFatItem '% жирности' =  DATA DOUBLE (item) IN descriptionGroup;
percentAlcoholItem '% алкоголя' =  DATA DOUBLE (item) IN descriptionGroup;

lengthItem 'Длина товара' = DATA INTEGER (item) IN sizeGroup;
widthItem 'Ширина товара' = DATA INTEGER (item) IN sizeGroup;
heightItem 'Высота товара' = DATA INTEGER (item) IN sizeGroup;
grossWeightItem 'Вес брутто товара' = DATA DOUBLE (item) IN sizeGroup;
lengthPackItem 'Длина упаковки' = DATA INTEGER (item) IN sizeGroup;
widthPackItem 'Ширина упаковки' = DATA INTEGER (item) IN sizeGroup;
heightPackItem 'Высота упаковки' = DATA DOUBLE (item) IN sizeGroup;
grossWeightPackItem 'Вес брутто упаковки' = DATA DOUBLE (item) IN sizeGroup;

hallmarkItem 'Отличительный признак (особенности)' = DATA STRING[100] (item) IN descriptionGroup;

articleItem 'Артикул поставщика/производителя' = DATA STRING[100] (item) IN descriptionGroup;

quantityPackItem 'Количество в грузовом месте' = DATA DOUBLE (item) IN descriptionGroup;

minResourceItem 'Минимальный запас' = DATA INTEGER (item) IN retailGroup;
minReserveItem 'Минимальный резерв' = DATA INTEGER (item) IN retailGroup;

compositionScalesItem 'Состав товара (ингредиенты) для весов' = DATA STRING[400] (item)IN descriptionGroup;
compositionMenuItem 'Состав изделия для печати в меню' = DATA STRING[400] (item)IN descriptionGroup;

countryItem = DATA country (item) IN idGroup;
nameCountryItem 'Страна' = name(countryItem(item)) IN descriptionGroup;

bonusReturnItem 'Уценка (бонус) по товару при возврате поставщику' = DATA DOUBLE (item) IN retailGroup;
nameReturnItem 'Наименование для уценки, бонуса по товару в возврат' = DATA STRING[200] (item)IN retailGroup;

isFixPriceItem 'Товар с фиксированной ценой' = DATA BOOLEAN (item) IN retailGroup;
isManufacturedItem 'Товар производится' = DATA BOOLEAN (item) IN descriptionGroup;

controlExpiryItem 'Контролировать сроки годности товара?' = DATA BOOLEAN (item) IN descriptionGroup;
daysExpiryItem 'Срок годности в днях' = DATA DOUBLE (item) IN descriptionGroup;

isMarkItem 'Маркировать товар' = DATA BOOLEAN (item) IN descriptionGroup;
hintItem 'Подсказка по товару' = DATA STRING[200] (item)IN descriptionGroup;

minTradeAllowanceItem 'MIN допустимая торговая надбавка, %' = DATA DOUBLE (item) IN retailGroup;
maxTradeAllowanceItem 'MAX допустимая торговая надбавка, %' = DATA DOUBLE (item) IN retailGroup;
minAllowedRetailPriceItem 'MIN допустимая розн.цена' = DATA INTEGER (item) IN retailGroup;

nutritionalValueItem 'Энергетическая и пищевая ценность' = DATA STRING[400] (item)IN substanceGroup;
energyItem 'Энергетическая ценность на 100г, ккал' = DATA DOUBLE (item) IN substanceGroup;
fatsItem 'Жиры на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
carbohydratesItem 'Углеводы на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
proteinsItem 'Белки на 100г, г' = DATA DOUBLE (item) IN substanceGroup;

isContainGMOItem 'Содержит ГМО' = DATA BOOLEAN (item) IN substanceGroup;

daysExpiryPackItem 'Срок годности в днях с момента фасовки' = DATA DOUBLE (item) IN descriptionGroup;
hoursExpiryPackItem 'Срок годности в часах с момента фасовки' = DATA INTEGER (item) IN descriptionGroup;

isCutedItem 'Товар разрубается/прорабатывается' = DATA BOOLEAN (item) IN descriptionGroup;
isLoafCutItem 'Буханка разрезается' = DATA BOOLEAN (item) IN descriptionGroup;

passScalesItem 'Передавать на весы' = DATA BOOLEAN (item) IN descriptionGroup;

bonusItem 'Бонус получаемый по товару' = DATA DOUBLE (item) IN retailGroup;
percentWholesaleMarkItem '% оптовой надбавки' = DATA DOUBLE (item) IN retailGroup;

// ----------------------------------- Атрибуты ------------------------------------------ //

CLASS ABSTRACT itemAttribute 'Атрибут товара' : named;

CLASS STATIC stringItemAttribute 'Строковый атрибут' {
    nameItem 'Наименование',
    article 'Артикул'
} : itemAttribute;

valueNameItemAttribute(item, attribute) = castToString255(name(item)) AND attribute == stringItemAttribute.nameItem;
valueArticleItemAttribute(item, attribute) = castToString255(articleItem(item)) AND attribute == stringItemAttribute.article;

valueStringItemAttribute(item, attribute) = UNION EXCLUSIVE  valueNameItemAttribute(item, attribute),
                                                             valueArticleItemAttribute(item, attribute);

CLASS STATIC integerItemAttribute 'Целочисленный атрибут' {
    length 'Длина',
    width 'Ширина',
    height 'Высота'
} : itemAttribute;

valueLengthItemAttribute(item, attribute) = lengthItem(item) AND attribute == integerItemAttribute.length;
valueWidthItemAttribute(item, attribute) = widthItem(item) AND attribute == integerItemAttribute.width;
valueHeightItemAttribute(item, attribute) = heightItem(item) AND attribute == integerItemAttribute.height;

valueIntegerItemAttribute(item, attribute) = UNION EXCLUSIVE valueLengthItemAttribute(item, attribute),
                                                             valueWidthItemAttribute(item, attribute),
                                                             valueHeightItemAttribute(item, attribute);

stringIntegerItemAttribute(item, integerItemAttribute) = castToString255(valueIntegerItemAttribute(item, integerItemAttribute));

CLASS STATIC objectItemAttribute 'Объектный атрибут' {
    unitOfMeasure 'Единица измерения',
    brand 'Брэнд',
    color 'Цвет',
    taste 'Вкус'
} : itemAttribute;

valueUOMItemAttribute(item, attribute) = unitOfMeasureItem(item) AND attribute == objectItemAttribute.unitOfMeasure;
valueBrandItemAttribute(item, attribute) = brandItem(item) AND attribute == objectItemAttribute.brand;
valueColorItemAttribute(item, attribute) = colorItem(item) AND attribute == objectItemAttribute.color;
valueTasteItemAttribute(item, attribute) = tasteItem(item) AND attribute == objectItemAttribute.taste;

valueObjectItemAttribute(item, attribute) = UNION EXCLUSIVE valueUOMItemAttribute(item, attribute),
                                                            valueBrandItemAttribute(item, attribute),
                                                            valueColorItemAttribute(item, attribute),
                                                            valueTasteItemAttribute(item, attribute);
nameObjectItemAttribute(item, attribute) = name(valueObjectItemAttribute(item, attribute));

valueItemAttribute(item, attribute) = UNION EXCLUSIVE valueStringItemAttribute(item, attribute),
                                                      stringIntegerItemAttribute(item, attribute),
                                                      nameObjectItemAttribute(item, attribute);

FORM item 'Товар'
OBJECTS i=item FIXED PANEL, a=itemAttribute
PROPERTIES(i) name, shortNameUnitOfMeasureItem, articleItem, nameBrandItem, lengthItem, widthItem, heightItem
PROPERTIES name(a), valueItemAttribute(i, a)
EDIT item OBJECT i;

// ----------------------------------- Штрих код ------------------------------------------ //
GROUP barcodeGroup : baseGroup;

CLASS barcode 'Штрих код' : barcodeObject;

skuBarcode = DATA sku (barcode) IN idGroup;
nameSkuBarcode = name(skuBarcode(barcode)) IN baseGroup;

inBarcodeSku 'Вхождение в товар' (barcode, sku) = skuBarcode(barcode) == sku;

titleScalesBarcode 'Наименование для весов' = DATA STRING[100] (barcode) IN barcodeGroup;
titleCashBarcode 'Наименование для касс' = DATA STRING[100] (barcode) IN barcodeGroup;
unitOfMeasureBarcode = DATA unitOfMeasure (barcode) IN idGroup;
shortNameUnitOfMeasureBarcode 'Единица измерения' (barcode) = shortName(unitOfMeasureBarcode(barcode)) IN barcodeGroup;
amountBarcode 'Количество (сколько списать при продаже)' = DATA INTEGER (barcode) IN barcodeGroup;
removeBarcode 'Заблокирован (удален с оборудования)' = DATA BOOLEAN (barcode) IN barcodeGroup;
commentRemoveBarcode 'Причина блокировки' = DATA STRING[100] (barcode) IN barcodeGroup;

userBarcodeSku = DATA barcode(sku) IN idGroup;
barcodeUserBarcodeSku 'Установленный штрих-код' = barcode(userBarcodeSku(sku)) IN baseGroup;
defaultBarcodeSku(sku) = GROUP MAX barcode BY skuBarcode(barcode) IN idGroup;
barcodeSku(sku) = UNION OVERRIDE defaultBarcodeSku(sku), userBarcodeSku(sku);

CONSTRAINT CHECKED skuBarcode(userBarcodeSku(sku)) != sku AS sku  MSG 'Товар основного штрих-кода должен совпадать с товаром';

barcodeBarcodeSku  'Действующий штрих-код' = barcode(barcodeSku(sku)) IN baseGroup;

FORM barcode 'Штрих-код'
OBJECTS b=barcode
PROPERTIES(b) barcode, nameSkuBarcode;



FORM items 'Товары'
OBJECTS i=item
OBJECTS b=barcode
PROPERTIES(i) READONLY name, shortNameUnitOfMeasureItem, isWeightItem, volumeItem, netWeightItem, nameColorItem, nameTasteItem,
 percentFatItem, percentAlcoholItem, lengthItem, nameCountryItem, nutritionalValueItem, energyItem, fatsItem, carbohydratesItem, proteinsItem,
 isContainGMOItem, daysExpiryPackItem, hoursExpiryPackItem, isCutedItem, isLoafCutItem, passScalesItem, bonusItem, percentWholesaleMarkItem,
 minTradeAllowanceItem, maxTradeAllowanceItem, minAllowedRetailPriceItem, barcodeBarcodeSku
PROPERTIES(i) ADDFORM, EDITFORM, delete
PROPERTIES(b) READONLY barcode, nameSkuBarcode, titleScalesBarcode, titleCashBarcode, shortNameUnitOfMeasureBarcode, amountBarcode, removeBarcode, commentRemoveBarcode
FILTERS NOT NULL inBarcodeSku(b, i)
PROPERTIES(b) ADDFORM, EDITFORM, delete;

// ----------------------------------- Склад ------------------------------------------ //

CLASS ABSTRACT stock 'Склад' : named;

// ----------------------------------- Магазин ----------------------------------------- //

CLASS store 'Магазин' : named;
CLASS tradingNetwork 'Торговая сеть' : named; // "Рублевский", "Базар"
CLASS storeType 'Формат магазина' : named; //Мини, Супер, ...

companyStore 'Юридическое лицо магазина (ИД)' = DATA company (store);
nameCompanyStore 'Юридическое лицо магазина' (store) = name(companyStore(store)) IN baseGroup;
addressStore 'Адрес магазина' = DATA STRING[100] (store);

storeTypeStore 'Формат магазина (ИД)' = DATA storeType (store);
nameStoreTypeStore 'Формат магазина' (store) = name(storeTypeStore(store)) IN baseGroup;

tradingNetworkStoreType 'Торговая сеть формата магазина (ИД)' = DATA tradingNetwork (storeType);
nameTradingNetworkStoreType 'Торговая сеть формата магазина' (storeType) = name(tradingNetworkStoreType(storeType)) IN baseGroup;

inStoreTypeTradingNetwork(storeType, tradingNetwork) = tradingNetworkStoreType(storeType) == tradingNetwork;

// ----------------------------------- Физические лица -------------------------------------------------- //

CLASS ABSTRACT person 'Физическое лицо';
CLASS employee 'Сотрудник' : person, customUser;
departmentStoreEmployee 'Сотрудник отдела' = DATA BOOLEAN (departmentStore, employee);

FORM employee 'Сотрудник'
OBJECTS e=employee FIXED PANEL, d=departmentStore
PROPERTIES(e) userFirstName, userLastName
PROPERTIES(d) name
PROPERTIES(d, e) departmentStoreEmployee
FILTERGROUP filterEmployeeDepartmentStore
    FILTER 'Показывать только отделы данного сотрудника' 'F10' NOT NULL departmentStoreEmployee(d, e)
EDIT employee OBJECT e;

FORM employees 'Сотрудники'
OBJECTS e=employee, d=departmentStore
PROPERTIES(e) READONLY userFirstName, userLastName
PROPERTIES(e) ADDFORM, EDITFORM, delete
PROPERTIES(d) READONLY name
FILTERS NOT NULL departmentStoreEmployee(d, e);

// ----------------------------------- Торговая площадь -------------------------------------------------- //

CLASS tradingSquare 'Торговая площадь' : named;
squareTradingSquare 'Размер торговой площади' = DATA DOUBLE (tradingSquare) IN baseGroup;
departmentStoreTradingSquare 'Отдел торговой площади (ИД)' = DATA departmentStore (tradingSquare);
nameDepartmentStoreTradingSquare 'Отдел торговой площади' (tradingSquare) = name(departmentStoreTradingSquare(tradingSquare)) IN baseGroup;
dateTradingSquare 'Дата' = DATA DATE (tradingSquare) IN baseGroup;

FORM tradingSquare 'Торговая площадь'
OBJECTS s=tradingSquare FIXED PANEL
PROPERTIES(s) name, squareTradingSquare, nameDepartmentStoreTradingSquare, dateTradingSquare
EDIT tradingSquare OBJECT s;

// ------------------------------------- Скидки ---------------------------------------------------------- //

TABLE dt (departmentStore, DATE);
discount 'Скидка' = DATA BOOLEAN (departmentStore, DATE) IN baseGroup;

FORM addDiscount 'Скидка (новая)'
OBJECTS d=departmentStore FIXED PANEL, t=DATE FIXED PANEL
PROPERTIES(d) READONLY name
PROPERTIES(t) OBJVALUE
PROPERTIES(d, t) discount;

showFormDiscount 'Добавить' (departmentStore) = ACTION FORM addDiscount OBJECTS d NEWSESSION MODAL;

FORM discount 'Скидки'
OBJECTS d=departmentStore, t=DATE
PROPERTIES(d) READONLY name
PROPERTIES(d) showFormDiscount
PROPERTIES(t) OBJVALUE
FILTERS NOT NULL discount(d, t);

// ----------------------------------- Отдел магазина (Подразделение) ----------------------------------- //

CLASS departmentStore 'Отдел магазина' : stock;
CLASS kafeteria 'Кафетерий' : departmentStore;
CLASS tradingFloar 'Торговый зал' : departmentStore;
CLASS wholesaleStock 'Оптовый склад' : departmentStore;
CLASS placeOfAcceptance 'Приемный пункт' : departmentStore;
CLASS restaurant 'Ресторан' : departmentStore;
//CLASS stock 'Склад' : departmentStore; в дальнейшем будет распределительный центр
CLASS manufactory 'Цех' : departmentStore;

storeDepartmentStore 'Магазин отдела (ИД)' = DATA store (departmentStore);
nameStoreDepartmentStore 'Магазин' (departmentStore) = name(storeDepartmentStore(departmentStore)) IN baseGroup;
revaluationCommitteeDepartmentStore 'Комиссия отдела (ИД)' = DATA revaluationCommittee (departmentStore);
nameRevaluationCommitteeDepartmentStore 'Комиссия отдела' (departmentStore) = name(revaluationCommitteeDepartmentStore(departmentStore));
controlMinusRestsDepartmentStore 'Контроль за минусовыми остатками' = DATA BOOLEAN (departmentStore);
deleteItemMinusRestsDepartmentStore 'Удалять товары с отрицательным остатком с весов и касс?' = DATA BOOLEAN (departmentStore);
controlMinusRestsContainerDepartmentStore 'Контроль за минусовыми остатками тары' = DATA BOOLEAN (departmentStore);
controlAssortmentProviderDepartmentStore 'Контролировать ассортимент поставщиков в подразделении?' = DATA BOOLEAN (departmentStore);
verifyOrderArrivalDepartmentStore 'Сверять заказ и приход в подразделении?' = DATA BOOLEAN (departmentStore);
maxQuantityDeliveryHourDepartmentStore 'Максимальное допустимое число поставок в час' = DATA INTEGER (departmentStore);
resolveMaxQuantityDeliveryHourAssortmentLessDepartmentStore 'Разрешить превысить количество поставок/час при ассортименте <' = DATA DOUBLE (departmentStore);
resolveOrderItemDepartmentStore 'Разрешить заказ товара в подразделение?' = DATA BOOLEAN (departmentStore);
marginPublicCateringDepartmentStore 'Наценка общепита по умолчанию для формирования цены в подразделении' = DATA DOUBLE (departmentStore);
quantityCashChangeOneOperationAccountDepartmentStore ' Количество кассовых смен в одном оперативном отчете' = DATA INTEGER (departmentStore);
materiallyResponsiblePersonItemReportDepartmentStore 'Материально ответственное лицо, подписывающее товарный отчет (ИД)' = DATA employee (departmentStore);
commonNameMateriallyResponsiblePersonItemReportDepartmentStore 'Материально ответственное лицо, подписывающее товарный отчет' (departmentStore) = commonName (materiallyResponsiblePersonItemReportDepartmentStore(departmentStore));
bookkeeperItemReportDepartmentStore 'Бухгалтер, принимающий товарный отчет (ИД)' = DATA employee (departmentStore);
commonNameBookkeeperItemReportDepartmentStore 'Бухгалтер, принимающий товарный отчет' (departmentStore) = commonName(bookkeeperItemReportDepartmentStore(departmentStore));
personCheckReportDepartmentStore 'Кто проверяет товарный отчет (ИД)' = DATA employee (departmentStore);
commonNamePersonCheckReportDepartmentStore 'Кто проверяет товарный отчет' (departmentStore) = commonName(personCheckReportDepartmentStore(departmentStore));
idTradingSquareDepartmentStore 'Торговая площадь отдела магазина' (departmentStore) = GROUP MAX tradingSquare BY departmentStoreTradingSquare(tradingSquare);   //максимизирует только по ID, переделать после расширения функционала
defaultTradingSquareDepartmentStore 'Торговая площадь отдела магазина, кв.м.' (departmentStore) = squareTradingSquare(idTradingSquareDepartmentStore(departmentStore));
//idResolveDiscountDepartmentStore 'Разрешать скидку в подразделении?' (discount) = GROUP MAX discount AS discount BY departmentStoreDiscount(discount);  //максимизирует только по ID, переделать после расширения функционала
//resolveDiscountDepartmentStore 'Разрешать скидку в подразделении?' (discount) = agreeDiscount(idResolveDiscountDepartmentStore(discount));
tradingSquareStore 'Торговая площадь магазина' = GROUP SUM defaultTradingSquareDepartmentStore(departmentStore) BY storeDepartmentStore(departmentStore);

inStoreDepartment(store, departmentStore) = storeDepartmentStore(departmentStore) == store;
inTradingSquareDepartmentStore(departmentStore, tradingSquare) = departmentStoreTradingSquare(tradingSquare) == departmentStore;
//inDepartmentStoreDiscount(departmentStore, discount) = departmentStoreDiscount(discount) == departmentStore;


//----------------------------------- Для товара и подразделения -------------------
additionPriceDepartmentStoreItem 'Торговая надбавка в рублях' = DATA DOUBLE (departmentStore, item) IN baseGroup;
boundCertificateDepartmentStoreItem 'Сертификат / удостоверение обязательны для товара?' = DATA BOOLEAN (departmentStore, item) IN baseGroup;
maxAllowedRetailPriceDepartmentStoreItem 'MAX допустимая розн.цена' = DATA INTEGER (departmentStore, item) IN baseGroup;
netWeightManufacterDepartmentStoreItem 'Вес нетто продукта для производства' = DATA DOUBLE (departmentStore, item) IN baseGroup;
//statusCashDepartmentStoreItem 'Статус товара на кассах' = DATA     (departmentStore, item) IN baseGroup;
percentHumidityFlourDepartmentStoreItem '% влажности муки' = DATA DOUBLE (departmentStore, item) IN baseGroup;
dateManufactureDepartmentStoreItem 'Дата изготовления' = DATA DATE (departmentStore, item) IN baseGroup;
dateFitToDepartmentStoreItem 'Годен до' = DATA DATE (departmentStore, item) IN baseGroup;
fromDateDeliveryDepartmentStoreItem 'Дату [Годен до] рассчитывать от даты поставки?' = DATA BOOLEAN (departmentStore, item) IN baseGroup;
prohibitionSaleDepartmentStoreItem 'Запрет продаж товара в подразделении' = DATA BOOLEAN (departmentStore, item) IN baseGroup;
prohibitionMovementDepartmentStoreItem 'Запрет на внутреннее перемещение товара' = DATA BOOLEAN (departmentStore, item) IN baseGroup;
reserveDepartmentStoreItem 'Резерв по товару' = DATA DOUBLE (departmentStore, item) IN baseGroup;

FORM departmentStore 'Отдел магазина'
OBJECTS d=departmentStore FIXED PANEL, e=employee, t=tradingSquare
PROPERTIES(d) name, nameStoreDepartmentStore, controlMinusRestsDepartmentStore, deleteItemMinusRestsDepartmentStore, controlMinusRestsContainerDepartmentStore,
              controlAssortmentProviderDepartmentStore, verifyOrderArrivalDepartmentStore,
              maxQuantityDeliveryHourDepartmentStore, resolveMaxQuantityDeliveryHourAssortmentLessDepartmentStore, resolveOrderItemDepartmentStore,
              marginPublicCateringDepartmentStore, quantityCashChangeOneOperationAccountDepartmentStore, commonNameMateriallyResponsiblePersonItemReportDepartmentStore,
              commonNameBookkeeperItemReportDepartmentStore, commonNamePersonCheckReportDepartmentStore, nameRevaluationCommitteeDepartmentStore
PROPERTIES(e) READONLY userFirstName, userLastName
PROPERTIES(e) ADDSESSIONFORM, EDITSESSIONFORM, delete
PROPERTIES(t) READONLY squareTradingSquare, dateTradingSquare
PROPERTIES(t) ADDOBJ, delete
FILTERS NOT NULL inTradingSquareDepartmentStore(d, t)
FILTERS NOT NULL departmentStoreEmployee(d, e)
EDIT departmentStore OBJECT d;

DESIGN departmentStore FROM DEFAULT {
    main{
       ADD prop.box BEFORE functions.box{
            tabbedPane = TRUE;
            ADD e.box;
            ADD t.box;
            ADD c.box;
    }
   }
}

FORM store 'Магазин'
OBJECTS s=store FIXED PANEL, d=departmentStore, t=tradingSquare
PROPERTIES(s) name, addressStore, nameStoreTypeStore, tradingSquareStore, nameCompanyStore
PROPERTIES(d) READONLY name, defaultTradingSquareDepartmentStore
PROPERTIES(d) ADDSESSIONFORM, EDITSESSIONFORM, delete
FILTERS NOT NULL inStoreDepartment(s, d)
EDIT store OBJECT s;

FORM stores 'Магазины'
OBJECTS s=store, d=departmentStore
PROPERTIES(s) READONLY name, addressStore, nameStoreTypeStore, nameCompanyStore
PROPERTIES(s) ADDFORM, EDITFORM, delete
PROPERTIES(d) READONLY name
FILTERS NOT NULL inStoreDepartment(s, d);

FORM storeType 'Формат магазина'
OBJECTS s=storeType FIXED PANEL, n=tradingNetwork
PROPERTIES(s) name
PROPERTIES(n) name, ADDOBJ, delete
FILTERS NOT NULL inStoreTypeTradingNetwork(s, n)
EDIT storeType OBJECT s;

FORM tradingNetwork 'Торговая сеть'
OBJECTS n=tradingNetwork FIXED PANEL
PROPERTIES(n) name
EDIT tradingNetwork OBJECT n;

FORM qualifier 'Классификатор магазинов'
OBJECTS n=tradingNetwork, s=storeType
PROPERTIES(n) READONLY name
PROPERTIES(n) ADDFORM, EDITFORM, delete
PROPERTIES(s) READONLY name, nameTradingNetworkStoreType
PROPERTIES(s) ADDFORM, EDITFORM, delete;

FORM itemInDepartment  'Товары в подразделениях'
OBJECTS d=departmentStore, i=item
PROPERTIES(d) READONLY name, nameStoreDepartmentStore
PROPERTIES(d) ADDFORM, EDITFORM, delete
PROPERTIES(i) READONLY name, shortNameUnitOfMeasureItem
PROPERTIES(i) ADDFORM, EDITFORM, delete
PROPERTIES(d, i) additionPriceDepartmentStoreItem, boundCertificateDepartmentStoreItem, maxAllowedRetailPriceDepartmentStoreItem, netWeightManufacterDepartmentStoreItem,
                 percentHumidityFlourDepartmentStoreItem, dateManufactureDepartmentStoreItem, dateFitToDepartmentStoreItem, fromDateDeliveryDepartmentStoreItem,
                 prohibitionSaleDepartmentStoreItem, prohibitionMovementDepartmentStoreItem, reserveDepartmentStoreItem;


// ----------------------------------- Ассортимент -------------------------------------------------------- //

CLASS assortment 'Ассортимент' : named;
itemAssortment 'Товар включен в ассортимент' = DATA BOOLEAN (assortment, item);
infoAssortment 'Описание' = DATA STRING[100] (assortment) IN baseGroup;

FORM assortment 'Ассортимент'
OBJECTS a=assortment FIXED PANEL, i=item
PROPERTIES(a) name, infoAssortment
PROPERTIES(a, i) itemAssortment
PROPERTIES(i) name
PROPERTIES(i) ADDSESSIONFORM, EDITSESSIONFORM, delete
EDIT assortment OBJECT a;

FORM assortments 'Ассортименты'
OBJECTS a=assortment, i=item
PROPERTIES(a) READONLY name, infoAssortment
PROPERTIES(a) ADDFORM, EDITFORM, delete
PROPERTIES(i) READONLY name
FILTERS NOT NULL itemAssortment(a, i);

// ----------------------------------- Комиссии ---------------------------------------------------------- //

CLASS ABSTRACT committee 'Комиссия' : named;
CLASS revaluationCommittee 'Комиссия переоценки' : committee;

chairmanRevaluationCommittee 'Председатель комиссии (ИД)' = DATA employee (revaluationCommittee);
commonNameChairmanRevaluationCommittee 'Председатель комиссии' (revaluationCommittee) = commonName(chairmanRevaluationCommittee(revaluationCommittee)) IN baseGroup;
departmentStoreRevaluationCommittee 'Отдел комиссии (ИД)' = DATA departmentStore (revaluationCommittee);
nameDepartmentStoreRevaluationCommittee 'Отдел комиссии' (revaluationCommittee) = commonName(departmentStoreRevaluationCommittee(revaluationCommittee)) IN baseGroup;
CONSTRAINT CHECKED chairmanRevaluationCommittee(revaluationCommittee) AND NOT departmentStoreEmployee(departmentStoreRevaluationCommittee(revaluationCommittee), chairmanRevaluationCommittee(revaluationCommittee)) MSG 'Отдел комиссии должен соответствовать отделу председателя комиссии';
CONSTRAINT CHECKED departmentStoreRevaluationCommittee(revaluationCommitteeDepartmentStore(departmentStore)) != departmentStore MSG 'Отдел комиссии должен соответствовать текущему отделу';

inDepartmentStoreEmployeeRevaluationCommittee (revaluationCommittee, employee) = departmentStoreEmployee(departmentStoreRevaluationCommittee(revaluationCommittee), employee);
inCommitteeDepartmentStore 'Является членом комиссии' (revaluationCommittee, employee) = DATA BOOLEAN (revaluationCommittee, employee);

FORM revaluationCommittee 'Комиссия переоценки'
OBJECTS c=revaluationCommittee FIXED PANEL, e=employee
PROPERTIES(c) name, nameDepartmentStoreRevaluationCommittee, commonNameChairmanRevaluationCommittee
PROPERTIES(e) READONLY name
PROPERTIES(e) userFirstName, userLastName, ADDSESSIONFORM, EDITSESSIONFORM, delete
PROPERTIES(c, e) inCommitteeDepartmentStore
FILTERS NOT NULL inDepartmentStoreEmployeeRevaluationCommittee(c, e)
EDIT revaluationCommittee OBJECT c;

FORM employeesCommittees 'Сотрудники и комиссии '
OBJECTS c=revaluationCommittee, e=employee
PROPERTIES(c) READONLY name, nameDepartmentStoreRevaluationCommittee, commonNameChairmanRevaluationCommittee
PROPERTIES(c) ADDFORM, EDITFORM, delete
PROPERTIES(e) READONLY userFirstName, userLastName
FILTERS NOT NULL inCommitteeDepartmentStore(c, e);

// ----------------------------------- Банк ------------------------------------------- //

GROUP banksGroup 'Информация' : baseGroup;

CLASS bank 'Банк' : named;

addressBank 'Адрес банка' = DATA STRING[100] (bank) IN banksGroup;
MFOBank 'Код МФО' = DATA STRING[9] (bank) IN banksGroup;
departmentBank 'Отдел банка' = DATA STRING[100] (bank) IN banksGroup;
CBUBank 'ЦБУ' = DATA STRING[3] (bank) IN banksGroup;
infoBank 'Дополнительные сведения' = DATA STRING[100] (bank) IN banksGroup;

FORM banks 'Банки'
OBJECTS b=bank
PROPERTIES(b) READONLY name, addressBank, MFOBank, departmentBank, CBUBank, infoBank
PROPERTIES(b) ADDFORM, EDITFORM, delete;

FORM bank 'Банк'
OBJECTS b=bank FIXED PANEL
PROPERTIES(b)  name, addressBank, MFOBank, departmentBank, CBUBank, infoBank
EDIT bank OBJECT b;
// ----------------------------------- Расчетный счет ------------------------------------------ //

GROUP accountGroup 'Банковская информация' : baseGroup;

CLASS account 'Расчетный счет';

bankAccount 'Банк (ИД)' = DATA bank (account) IN idGroup;

dataAccount 'Номер расчетного счета'  = DATA STRING[13] (account) IN accountGroup;
nameBankAccount 'Наименование банка' (account) = name(bankAccount(account)) IN accountGroup;
addressBankAccount 'Адрес банка' (account) = addressBank(bankAccount(account)) IN accountGroup;
MFOBankAccount 'Код МФО банка' (account) = MFOBank(bankAccount(account)) IN accountGroup;
departmentBankAccount 'Отдел банка' (account) = departmentBank(bankAccount(account)) IN accountGroup;
CBUBankAccount 'ЦБУ банка' (account) = CBUBank(bankAccount(account)) IN accountGroup;
noteAccount 'Примечание'  = DATA STRING[50] (account) IN accountGroup;

// ----------------------------------- Форма собственности ------------------------------------------ //
CLASS ownership 'Форма собственности' : named;
shortNameOwnership 'Cокращенное название' = DATA STRING[10] (ownership) IN baseGroup;

FORM ownership 'Форма собственности'
OBJECTS o=ownership FIXED PANEL
PROPERTIES(o) name, shortNameOwnership;

// ----------------------------------- Лицензия ------------------------------------------ //
GROUP licensGroup 'Лицензиионная информация' : baseGroup;
CLASS license 'Лицензия' ;

dataLicense 'Номер лицензии' = DATA STRING[100] (license) IN licensGroup;
dateFromLicense 'Действует с ' = DATA DATE (license) IN licensGroup;
dateToLicense 'Действует по ' = DATA DATE (license) IN licensGroup;
//tabaccoLicense 'Табачная' = DATA BOOLEAN  (license) IN licensGroup;

// ----------------------------------- Юридическое лицо ------------------------------------------ //

GROUP lawGroup 'Юридическая информация' : baseGroup;
GROUP contactGroup 'Контактная информация' : baseGroup;
GROUP docGroup 'Для договора' : baseGroup;


CLASS ABSTRACT legalEntity 'Юридическое лицо' : named;

ownershipLegalEntity 'Форма собственности (ИД)' = DATA ownership (legalEntity) IN licensGroup;

nameOwnershipLegalEntity 'Форма собственности' = name(ownershipLegalEntity(legalEntity)) IN lawGroup;
shortNameOwnershipLegalEntity 'Форма собственности (сокр.)' = shortNameOwnership(ownershipLegalEntity(legalEntity)) IN lawGroup;
fullNameLegalEntity 'Наименование для накладных' = DATA STRING[200] (legalEntity) IN lawGroup;
addressLegalEntity 'Фактический адрес' = DATA STRING[100] (legalEntity) IN lawGroup;
lawLegalEntity 'Юридический адрес' = DATA STRING[100] (legalEntity) IN lawGroup;
postAddressLegalEntity 'Почтовый адрес' = DATA STRING[100] (legalEntity) IN contactGroup;
managerLegalEntity 'Руководитель' = DATA STRING[100] (legalEntity) IN contactGroup;
accountantLegalEntity 'Главный бухгалтер' = DATA STRING[100] (legalEntity) IN contactGroup;
phoneLegalEntity 'Телефон/факс' = DATA STRING[100] (legalEntity) IN contactGroup;
UNPLegalEntity 'УНП' = DATA STRING[9] (legalEntity) IN docGroup;
OKPOLegalEntity 'Код по ОКПО' = DATA STRING[20] (legalEntity) IN docGroup;
OKYLPLegalEntity 'Код ОКЮЛП' = DATA STRING[20] (legalEntity) IN docGroup;
emailLegalEntity 'e-mail' = DATA STRING[100] (legalEntity) IN contactGroup;
siteLegalEntity 'Сайт' = DATA STRING[100] (legalEntity) IN contactGroup;
contactsLegalEntity 'Дополнительная информация' = DATA STRING[300] (legalEntity) IN contactGroup;
residentLegalEntity 'Резидент РБ' = DATA BOOLEAN (legalEntity) IN lawGroup;
manufacturerLegalEntity 'Производитель' = DATA BOOLEAN (legalEntity) IN lawGroup;

legalEntityAccount 'Ю.Л. (ИД)' = DATA legalEntity (account) IN idGroup;
userAccountLegalEntity 'Р/сч. (ИД)' = DATA account (legalEntity) IN idGroup;
defaultAccountLegalEntity(legalEntity) = GROUP MAX account AS account BY legalEntityAccount(account);
overrideAccountLegalEntity 'Основной р/сч.' (legalEntity) = UNION OVERRIDE defaultAccountLegalEntity(legalEntity), userAccountLegalEntity(legalEntity);
dataOverrideAccountLegalEntity 'Основной р/сч.' (legalEntity) = dataAccount(overrideAccountLegalEntity(legalEntity)) IN lawGroup;

CONSTRAINT CHECKED legalEntity != legalEntityAccount(userAccountLegalEntity(legalEntity)) MSG 'ошибка: Р/сч. по умолчанию должен соответствовать р/сч. Ю.Л.';
equalsLegalEntityAccount 'Основной р/сч.' (legalEntity, account) = userAccountLegalEntity(legalEntity) == account;

legalEntityLicense 'ЮЛ (ИД)' = DATA legalEntity (license) IN idGroup;
//userLicenseLegalEntity 'ЮЛ (ИД)' = DATA license (legalEntity) IN idGroup;
actingLicense 'Действующая, м/у датами' (license) = license AS license IF dateFromLicense(license) <= currentDate() AND dateToLicense(license) >= currentDate();
actingLicenseLegalEntity (legalEntity) = GROUP MAX actingLicense(license) BY legalEntityLicense(license);        // сгруппировали по ID
//overrideLicenseLegalEntity 'Действующая' (legalEntity) = UNION OVERRIDE defaultLicenseLegalEntity(legalEntity) IF dateFromLicense(defaultLicenseLegalEntity(legalEntity)) < currentDate() AND dateToLicense(defaultLicenseLegalEntity(legalEntity)) > currentDate(),
//                                                                        userLicenseLegalEntity(legalEntity) IF dateFromLicense(userLicenseLegalEntity(legalEntity)) < currentDate() AND dateToLicense(userLicenseLegalEntity(legalEntity)) > currentDate();
dataActingLicenseLegalEntity 'Действующая лицензия' (legalEntity) = dataLicense(actingLicenseLegalEntity(legalEntity)) IN lawGroup;
                        // работает как то не так, надо проверить //
//CONSTRAINT CHECKED legalEntity != legalEntityLicense(userLicenseLegalEntity(legalEntity)) MSG 'ошибка: Лицензия по умолчанию должен соответствовать лицензии Ю.Л.';
//CONSTRAINT  dateFromLicense(overrideLicenseLegalEntity(legalEntity)) > currentDate() MSG 'ошибка: действие лицензии еще не началось';
//CONSTRAINT  dateToLicense(overrideLicenseLegalEntity(legalEntity)) < currentDate() MSG 'ошибка: действие выбранной лицензии уже окончилось';
//equalsLegalEntityLicense 'Действующая' (legalEntity, license) = userLicenseLegalEntity(legalEntity) == license IN lawGroup;

// ----------------------------------- Договор ------------------------------------------ //

GROUP contractGroup '' : baseGroup;

CLASS ABSTRACT contract 'Договор';
CLASS contractProvider 'Договор с поставщиком' : contract;

CLASS STATIC contractType 'Тип договора'
{
    sale 'договор купли-продажи',
    commission 'договор комиссии'
};

CLASS STATIC contractForm 'Порядок оплаты'
{
    prepayment 'с отсрочкой платежа',
    implement 'По факту реализации',
    instruction 'Платежное поручение',
    requirement 'Платежное требование'
};

dataContract 'Номер договора' = DATA STRING[30] (contract) IN contractGroup;
formContract 'Порядок оплаты договора' (contract) = DATA contractForm (contract) IN contractGroup;
typeContract 'Тип договора' (contract) = DATA contractType (contract) IN contractGroup;
nameFormContract 'Порядок оплаты по договору' (contract) = name(formContract(contract)) IN contractGroup;
nameTypeContract 'Тип договора' (contract) = name(typeContract(contract)) IN contractGroup;
dateFromContract 'Дата начала договора' = DATA DATE (contract) IN contractGroup;
dateToContract 'Дата окончания договора' = DATA DATE (contract) IN contractGroup;
currencyContract 'Валюта взаиморасчетов' = DATA STRING[20] (contract) IN contractGroup; // может и не надо   или справочником
warnContract 'За сколько дней предупредить об окончании' = DATA INTEGER (contract) IN contractGroup;
banContract 'За сколько дней запретить закупку товара' = DATA INTEGER (contract) IN contractGroup;
delayContract 'Отсрочка платежа, дней' = DATA INTEGER (contract) IN contractGroup;
requestContract 'Форма оплаты: Платежное требование' = DATA BOOLEAN (contract) IN contractGroup;
noteContract 'Примечание' = DATA STRING[100] (contract) IN contractGroup;

// ----------------------------------- Поставщик ------------------------------------------ //

GROUP supplierGroup : baseGroup;
CLASS supplier 'Поставщик' : legalEntity;
CLASS company 'Компания' : legalEntity;

companyContract 'Организация (ИД)' = DATA company (contract) IN idGroup;
supplierContract 'Поставщик (ИД)' = DATA supplier (contract) IN idGroup;
userContractSupplier 'Контракт (ИД)' = DATA contract (supplier) IN idGroup;
companySupplier 'Организация (ИД)' = DATA company (supplier) IN idGroup;

sureSupplier 'Обязателен заказ поставщику' = DATA BOOLEAN (supplier) IN supplierGroup;
payerSupplier 'Плательщик НДС' = DATA BOOLEAN (supplier) IN supplierGroup;
scheduleSupplier 'Разрешить доп.заказ товаров вне графика' = DATA BOOLEAN (supplier) IN supplierGroup;
controlSupplier 'Контролировать ассортимент поставщика' = DATA BOOLEAN (supplier) IN supplierGroup;
surePercentSupplier 'Обязательный % заказанных товаров в прих. накладной' = DATA INTEGER (supplier) IN supplierGroup;
allowablePercentSupplier 'Допустимый % изменения цен 1го поставщика' = DATA INTEGER (supplier) IN supplierGroup;
afterDaysSupplier 'Максимальное число дней до поставки после заказа' = DATA INTEGER (supplier) IN supplierGroup;
forHoursSupplier 'За сколько часов до поставки закрыть заказ' = DATA INTEGER (supplier) IN supplierGroup;
limitSupplier 'Кредитный лимит' = DATA INTEGER (supplier) IN docGroup;
prioritySupplier 'Приоритет оплаты (1 - в первую очередь)' = DATA INTEGER (supplier) IN docGroup;
signsSupplier 'Число знаков после запятой для строки накладной' = DATA INTEGER (supplier) IN supplierGroup;
marksSupplier 'Число знаков после зап.в сумме к оплате по накладной' = DATA INTEGER (supplier) IN supplierGroup;

dataContractSupplier 'Договор по умолчанию' (supplier) = dataContract(userContractSupplier(supplier));
defaultContractSupplier(supplier) = GROUP MAX contract AS contract BY supplierContract(contract);
dataDefaultContractSupplier(supplier) = dataContract(defaultContractSupplier(supplier));

overrideContractSupplier 'Основной договор' (supplier) = UNION OVERRIDE defaultContractSupplier(supplier), userContractSupplier(supplier);
dataOverrideContractSupplier 'Основной договор' (supplier) = dataContract(overrideContractSupplier(supplier)) IN lawGroup;
CONSTRAINT CHECKED supplier != supplierContract(userContractSupplier(supplier)) MSG 'ошибка: Договор по умолчанию для поставщика должен соответствовать договорам поставщика';
equalsSupplierContract 'Основной договор' (supplier, contract) = userContractSupplier(supplier) == contract;

inSupplierContract(supplier, contract) = supplierContract(contract) == supplier;
inSupplierAccount(supplier, account) = legalEntityAccount(account) == supplier;
inSupplierLicense(supplier, license) = legalEntityLicense(license) == supplier;

inCompanyContract(company, contract) = companyContract(contract) == company;
inCompanyAccount(company, account) = legalEntityAccount(account) == company;

nameSupplierContract 'Контрагент' (contract) = name(supplierContract(contract));
nameCompanyContract 'Контрагент' (contract) = name(companyContract(contract));

FORM supplier 'Поставщик'
OBJECTS s=supplier FIXED PANEL
OBJECTS a=account
OBJECTS c=contractProvider
OBJECTS l=license
PROPERTIES(s) nameOwnershipLegalEntity, name, fullNameLegalEntity, addressLegalEntity, lawLegalEntity, postAddressLegalEntity, managerLegalEntity, accountantLegalEntity,
              phoneLegalEntity, UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity, emailLegalEntity, siteLegalEntity, payerSupplier,
              dataOverrideAccountLegalEntity, residentLegalEntity, manufacturerLegalEntity, dataOverrideContractSupplier, sureSupplier, controlSupplier, surePercentSupplier, allowablePercentSupplier,
              afterDaysSupplier, forHoursSupplier, limitSupplier, prioritySupplier, signsSupplier, marksSupplier, dataActingLicenseLegalEntity
PROPERTIES(a) dataAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount, MFOBankAccount, noteAccount, ADDOBJ, delete
PROPERTIES(c) dataContract, nameCompanyContract, nameFormContract, nameTypeContract, dateFromContract, dateToContract, currencyContract, warnContract, banContract, delayContract,
              requestContract, noteContract, ADDOBJ, delete
PROPERTIES(l) dataLicense, dateFromLicense, dateToLicense, ADDOBJ, delete   //        tabaccoLicense
PROPERTIES(s,c) equalsSupplierContract
PROPERTIES(s,a) equalsLegalEntityAccount
//PROPERTIES(s,l) equalsLegalEntityLicense
FILTERS NOT NULL inSupplierContract(s, c),
        NOT NULL inSupplierAccount(s, a),
        NOT NULL inSupplierLicense(s, l)
EDIT supplier OBJECT s;

DESIGN supplier FROM DEFAULT {
    main{
       ADD prop.box BEFORE functions.box{
            tabbedPane = TRUE;
            ADD a.box;
            ADD c.box;
            ADD l.box;

    }
   }
}

FORM suppliers 'Поставщики'
OBJECTS s=supplier
PROPERTIES(s) READONLY shortNameOwnershipLegalEntity, name, fullNameLegalEntity, lawLegalEntity, managerLegalEntity, phoneLegalEntity, UNPLegalEntity, emailLegalEntity, siteLegalEntity
PROPERTIES(s) ADDFORM, EDITFORM, delete;

FORM company 'Компания'
OBJECTS co=company FIXED PANEL
OBJECTS a=account
OBJECTS c=contract
PROPERTIES(co) nameOwnershipLegalEntity, shortNameOwnershipLegalEntity, name, fullNameLegalEntity, addressLegalEntity, lawLegalEntity, postAddressLegalEntity, managerLegalEntity, accountantLegalEntity,
              phoneLegalEntity, UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity, emailLegalEntity, siteLegalEntity
PROPERTIES(a) dataAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount, MFOBankAccount, noteAccount, ADDOBJ, delete
PROPERTIES(c) dataContract, nameSupplierContract, nameFormContract, nameTypeContract, dateFromContract, dateToContract, currencyContract, noteContract, ADDOBJ, delete
FILTERS NOT NULL inCompanyContract(co, c),
        NOT NULL inCompanyAccount(co, a)
EDIT company OBJECT co;

DESIGN company FROM DEFAULT {
    main{
       ADD prop.box BEFORE functions.box {
            tabbedPane = TRUE;
            ADD a.box;
            ADD c.box;

       }
   }
}
FORM companies 'Компании'
OBJECTS co=company
PROPERTIES(co) READONLY shortNameOwnershipLegalEntity, name, fullNameLegalEntity, lawLegalEntity, managerLegalEntity, phoneLegalEntity, UNPLegalEntity, emailLegalEntity, siteLegalEntity, dataOverrideAccountLegalEntity
PROPERTIES(co) ADDFORM, EDITFORM, delete;

// ----------------------------------- Ассортимент поставщиков-------------------------------------------- //

itemAssortmentSupplier 'Товар в ассортименте поставщика' = DATA BOOLEAN (departmentStore, supplier, item);

FORM assortmentSupplier 'Ассортимент поставщика'
OBJECTS d=departmentStore FIXED PANEL, s=supplier, i=item
PROPERTIES(d) READONLY name
PROPERTIES(s) name
PROPERTIES(s) ADDFORM, EDITFORM, delete
PROPERTIES(i) name
PROPERTIES(i) ADDFORM, EDITFORM, delete
PROPERTIES(d, s, i)  itemAssortmentSupplier;

//---------------------------- по поставщикам и товарам ----------------------------------------

// ----------------------------------- График поставок ------------------------------------------- //

TABLE sdd (supplier ,departmentStore, DATE);
timeTable 'Поставка' = DATA BOOLEAN (supplier ,departmentStore, DATE) IN baseGroup;

FORM addTimeTable 'Поставка (новая)'
OBJECTS s=supplier FIXED PANEL, d=departmentStore FIXED PANEL, t=DATE FIXED PANEL
PROPERTIES(s) READONLY name
PROPERTIES(d) READONLY name
PROPERTIES(t) OBJVALUE
PROPERTIES(s, d, t) timeTable;

showFormTimeTable 'Добавить' (supplier, departmentStore) = ACTION FORM addTimeTable OBJECTS s, d NEWSESSION MODAL;

FORM timeTable 'График поставки'
OBJECTS s=supplier, d=departmentStore , t=DATE
PROPERTIES(t) OBJVALUE
PROPERTIES(s) READONLY name
PROPERTIES(d) READONLY name
PROPERTIES(s, d) showFormTimeTable
FILTERS NOT NULL timeTable(s, d, t);

//---------------------------- Модели оборудования ----------------------------------------//
CLASS ABSTRACT model 'Модель' : named;
CLASS cashModel 'Модель касс' : model;
CLASS scalesModel 'Модель весов' : model;
CLASS checkModel 'Модель прайс чекеров' : model;

CLASS frontOffice 'Фронт офис';
nameFrontOffice 'Версия фронт офиса на кассе' = DATA STRING[100] (frontOffice) IN baseGroup;

noteModel 'Примечание' = DATA STRING[200] (model) IN baseGroup;
useModel 'Модель используется' = DATA BOOLEAN (model) IN baseGroup;
lettersModel 'Преобразовать наименование товара В ЗАГЛАВНЫЕ БУКВЫ' = DATA BOOLEAN (model) IN baseGroup;


frontOfficeCashModel 'Модель касс (ИД)' = DATA frontOffice (cashModel) IN idGroup;
nameFrontOfficeCashModel 'Версия фронт офиса на кассе' (cashModel) = nameFrontOffice(frontOfficeCashModel(cashModel)) IN baseGroup;
dateToCashModel 'Дата, до которой модель внесена в реестр' = DATA DATE (cashModel) IN baseGroup;
maxProductModel 'MAX допустимое колич.товаров' = DATA INTEGER (model) IN baseGroup;

CLASS flash 'Прошивка';
nameFlash 'Модель весов/версия прошивки' = DATA STRING[100] (flash) IN baseGroup;

flashScalesModel 'Прошивка (ИД)' = DATA flash (scalesModel) IN idGroup;
nameFlashScalesModel 'Модель весов/версия прошивки' = nameFlash(flashScalesModel(scalesModel)) IN baseGroup;
maxTextScalesModel 'MAX допустимое колич.дополнительных текстов' = DATA INTEGER (scalesModel) IN baseGroup;
folderScalesModel 'Папка на сервере весов с драйвером весов' = DATA STRING[200] (scalesModel) IN baseGroup;
compositionScalesModel 'Число знаков в доп.тексте(составе товара)' = DATA INTEGER (scalesModel) IN baseGroup;

CLASS modelCheck 'Модель чекера';
nameModelCheck 'Модель прайс чекера' = DATA STRING[100] (modelCheck) IN baseGroup;

modelCheckModel 'Модель (ИД)' = DATA modelCheck (checkModel) IN idGroup;
nameModelCheckModel 'Модель прайс чекера' = nameModelCheck(modelCheckModel(checkModel)) IN baseGroup;

FORM models 'Модели оборудования'
OBJECTS m=model
PROPERTIES(m) READONLY objectClassName, name, useModel, maxProductModel, noteModel
PROPERTIES(m) ADDFORM, EDITFORM, delete;                // либо так как ниже//
//OBJECTS s=scalesModel, ch=checkModel, c=cashModel
//PROPERTIES(ch) READONLY name, nameModelCheckModel, noteModel, useModel, maxProductModel
//PROPERTIES(s)  READONLY name, nameFlashScalesModel, noteModel, useModel, maxProductModel, maxTextScalesModel,
//               folderScalesModel, lettersModel, compositionScalesModel
//PROPERTIES(c)  READONLY name, nameFrontOfficeCashModel, noteModel, useModel, dateToCashModel, lettersModel
//PROPERTIES(s) ADDFORM, EDITFORM, delete
//PROPERTIES(c) ADDFORM, EDITFORM, delete
//PROPERTIES(ch) ADDFORM, EDITFORM, delete;

//DESIGN models FROM DEFAULT {
//    main{
//       ADD prop1.box BEFORE functions.box{
//            tabbedPane = TRUE;
//            ADD c.box;
//            ADD s.box;
//            ADD ch.box;
//    }
//   }
//}

FORM checkModel 'Модель прайс чекера'
OBJECTS ch=checkModel FIXED PANEL
PROPERTIES(ch) name, nameModelCheckModel, noteModel, useModel, maxProductModel
EDIT checkModel OBJECT ch;

FORM cashModel 'Модель касс'
OBJECTS c=cashModel FIXED PANEL
PROPERTIES(c) name, nameFrontOfficeCashModel, noteModel, useModel, dateToCashModel, lettersModel
EDIT cashModel OBJECT c;

FORM scalesModel 'Модель весов'
OBJECTS s=scalesModel FIXED PANEL
PROPERTIES(s) name, nameFlashScalesModel, noteModel, useModel, maxProductModel, maxTextScalesModel,
              folderScalesModel, lettersModel, compositionScalesModel
EDIT scalesModel OBJECT s;


//---------------------------- группы оборудования ----------------------------------------//

CLASS ABSTRACT groupMachinery 'Группы оборудования';
CLASS groupScales 'Группы весов' : groupMachinery;
CLASS groupCash 'Группы касс' : groupMachinery;
CLASS groupCheck 'Группы прайс чекеров' : groupMachinery;

nameGroupMachinery 'Наименование группы' = DATA STRING[200] (groupMachinery) IN baseGroup;
transferGroupMachinery 'Передать товар на группу оборудования' = DATA BOOLEAN (groupMachinery) IN baseGroup;

cellGroupScales 'Помещать на ценники номера ячеек с этой группы' = DATA BOOLEAN (groupScales) IN baseGroup;
sidSectionGroupScales 'Код отдела в Set Retail' = DATA INTEGER (groupScales) IN baseGroup;
directoryGroupScales 'Директория сервера Set Retail' = DATA STRING[200] (groupScales) IN baseGroup;

departmentStoreGroupMachinery 'Подразделение ИД' = DATA departmentStore (groupMachinery) IN baseGroup;
nameDepartmentStoreGroupMachinery 'Подразделение' (groupMachinery) = name(departmentStoreGroupMachinery(groupMachinery)) IN baseGroup;

//---------------------------- типы оборудования  ----------------------------------------//
CLASS ABSTRACT machinery 'Оборудование';
CLASS cash 'Кассы' : machinery;
CLASS scales 'Весы' : machinery;
CLASS check 'Прайс чекер' : machinery;


groupCashCash 'Группа ИД' = DATA groupCash (cash) IN idGroup;
isGroupCashCash (groupCash, cash) = groupCashCash(cash) == groupCash;

groupScalesScales 'Группа ИД' = DATA groupScales (scales) IN idGroup;
isGroupScalesScales (groupScales, scales) = groupScalesScales(scales) == groupScales;

groupCheckCheck 'Группа ИД' = DATA groupCheck (check) IN idGroup;
isGroupCheckCheck (groupCheck, check) = groupCheckCheck(check) == groupCheck;

nameGroupMachineryCash 'Наименование группы' (cash) = nameGroupMachinery(groupCashCash(cash)) IN baseGroup;
nameGroupMachineryScales 'Наименование группы' (scales) = nameGroupMachinery(groupScalesScales(scales)) IN baseGroup;
nameGroupMachineryCheck 'Наименование группы' (check) = nameGroupMachinery(groupCheckCheck(check)) IN baseGroup;

dataGroupMachineryMachinery 'Наименование группы' (machinery) = UNION EXCLUSIVE nameGroupMachineryCash(machinery), nameGroupMachineryScales(machinery), nameGroupMachineryCheck(machinery);

descriptionMachinery 'Описание' = DATA STRING[200] (machinery) IN baseGroup;
portMachinery 'Адрес/порт' = DATA STRING[100] (machinery) IN baseGroup;
useMachinery 'Оборудование используется' = DATA BOOLEAN (machinery) IN baseGroup;

cashModelCash 'Модель ИД' = DATA cashModel (cash) IN idGroup;
numberCash 'Регистрационный номер кассы' = DATA STRING[100] (cash) IN baseGroup;
directoryCash 'Директория обмена с кассой' = DATA STRING[100] (cash) IN baseGroup;
nameCashModelCash 'Модель кассы' (cash) = name(cashModelCash(cash)) IN baseGroup;
statusCash 'Статус кассы (на момент посл.передачи)' = DATA STRING[200] (cash) IN baseGroup;
resultCash 'Результат передачи на кассу товаров' = DATA STRING[200] (cash) IN baseGroup;
dateCash 'Дата фискализации кассового аппарата' = DATA DATE (cash) IN baseGroup;
nppCash 'Порядковый номер кассы в торговом объекте ' = DATA INTEGER (cash) IN baseGroup;

CLASS STATIC feature 'Свойство для оборудования'
{
    no 'HET,(пример: для годен это значит - печатаем в поле этикетки "Годен до")',
    yes 'ДА для ВСЕХ товаров поместить в состав',
    sometimes 'ДА (для товаров с признаком [Контролировать срок годности по товару?]'
};

scalesModelScales 'Модель ИД' = DATA scalesModel (scales) IN idGroup;
numberScales 'Заводской(серийный) номер ' = DATA STRING[100] (scales) IN baseGroup;
nameScalesModelScales 'Модель весов' (scales) = name(scalesModelScales(scales)) IN baseGroup;
dateScales 'Дата следующей обязательной поверки' = DATA DATE (scales) IN baseGroup;
passScales 'свойство ИД' = DATA feature (scales) IN idGroup;
namePassScales 'Свойство товара [Годен до] помещать в ингредиенты' (scales) = name(passScales(scales)) IN baseGroup;
manufactureScales 'свойство ИД' = DATA feature (scales) IN idGroup;
nameManufactureScales 'Свойство товара [Дата изг.] помещать в ингредиенты' (scales) = name(manufactureScales(scales)) IN baseGroup;
productionScales 'свойство ИД' = DATA feature (scales) IN idGroup;
nameProductionScales 'Св-во товара[Срок годн.в часах] поместить в ингр-ты' (scales) = name(productionScales(scales)) IN baseGroup;
sidScales 'ID весов для Set Retail' = DATA INTEGER (scales) IN baseGroup;


FORM machineries 'Оборудование'
OBJECTS m=machinery
PROPERTIES(m) READONLY descriptionMachinery, dataGroupMachineryMachinery, portMachinery, useMachinery
PROPERTIES(m) ADDFORM, EDITFORM, delete;

FORM cash 'Касса'
OBJECTS c=cash FIXED PANEL
PROPERTIES(c) numberCash, descriptionMachinery, nameGroupMachineryCash, portMachinery, useMachinery, directoryCash, nameCashModelCash,
              dateCash, nppCash, statusCash, resultCash
EDIT cash OBJECT c;

FORM scales 'Весы'
OBJECTS s=scales FIXED PANEL
PROPERTIES(s) numberScales, descriptionMachinery, nameGroupMachineryScales, portMachinery, useMachinery, nameScalesModelScales,
              dateScales, namePassScales, nameManufactureScales, nameProductionScales, sidScales
EDIT scales OBJECT s;

FORM check 'Прайс чекер'
OBJECTS ch=check FIXED PANEL
PROPERTIES(ch) descriptionMachinery, dataGroupMachineryMachinery, portMachinery, useMachinery
EDIT check OBJECT ch;

FORM groupScales 'Группа весов'
OBJECTS grs=groupScales FIXED PANEL
OBJECTS s=scales
PROPERTIES(grs) nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery, cellGroupScales, sidSectionGroupScales, directoryGroupScales
PROPERTIES(s)   numberScales, descriptionMachinery, nameGroupMachineryScales, portMachinery, useMachinery, nameScalesModelScales,
                dateScales, namePassScales, nameManufactureScales, nameProductionScales, sidScales, ADDOBJ, delete
FILTERGROUP filters1
    FILTER 'Показывать только для данной группы' 'F10' NOT NULL isGroupScalesScales(grs, s)
EDIT groupScales OBJECT grs;

FORM groupsScales 'Группы весов'
OBJECTS grs=groupScales, s=scales
PROPERTIES(grs) READONLY nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery, cellGroupScales, sidSectionGroupScales, directoryGroupScales
PROPERTIES(grs) ADDFORM, EDITFORM, delete
PROPERTIES(s)   READONLY numberScales, descriptionMachinery, nameGroupMachineryScales, portMachinery, useMachinery, nameScalesModelScales,
                dateScales, namePassScales, nameManufactureScales, nameProductionScales, sidScales
FILTERS NOT NULL isGroupScalesScales(grs, s);

FORM groupCash 'Группа касс'
OBJECTS grc=groupCash FIXED PANEL
OBJECTS c=cash
PROPERTIES(grc) nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery
PROPERTIES(c)   numberCash, descriptionMachinery, nameGroupMachineryCash, portMachinery, useMachinery, directoryCash, nameCashModelCash,
                dateCash, nppCash, statusCash, resultCash, ADDOBJ, delete
FILTERGROUP filters2
    FILTER 'Показывать только для данной группы' 'F10' NOT NULL isGroupCashCash(grc, c)
EDIT groupCash OBJECT grc;


FORM groupsCash 'Группы касс'
OBJECTS grc=groupCash, c=cash
PROPERTIES(grc)  READONLY nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery
PROPERTIES(grc)  ADDFORM, EDITFORM, delete
PROPERTIES(c)    READONLY numberCash, descriptionMachinery, nameGroupMachineryCash, portMachinery, useMachinery, directoryCash, nameCashModelCash,
                 dateCash, nppCash, statusCash, resultCash
FILTERS NOT NULL isGroupCashCash(grc, c);

FORM groupCheck 'Группа прайс чекеров'
OBJECTS grch=groupCheck FIXED PANEL
OBJECTS ch=check
PROPERTIES(grch) nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery
PROPERTIES(ch)   descriptionMachinery, dataGroupMachineryMachinery, portMachinery, useMachinery, ADDOBJ, delete
FILTERGROUP filters3
    FILTER 'Показывать только для данной группы' 'F10' NOT NULL isGroupCheckCheck(grch, ch)
EDIT groupCheck OBJECT grch;

FORM groupsCheck 'Группы прайс чекеров'
OBJECTS grch=groupCheck, ch=check
PROPERTIES(grch) READONLY nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery
PROPERTIES(grch) ADDFORM, EDITFORM, delete
PROPERTIES(ch)   READONLY descriptionMachinery, dataGroupMachineryMachinery, portMachinery, useMachinery
FILTERS NOT NULL isGroupCheckCheck(grch, ch);

 //---------------------------- Карты проработки (разруба) ----------------------------------------//
GROUP cutGroup 'Разделка' : baseGroup;
CLASS cutting 'Карта пророботки (разделки)' : named;
CLASS detailCutting 'Компоненты';

sidCutting 'Номер карты (из сборника и прочее)' = DATA INTEGER (cutting) IN cutGroup;
dateCutting 'Дата создания' = DATA DATE (cutting) IN cutGroup;
useCutting 'Используется' = DATA BOOLEAN (cutting) IN cutGroup;
//             номер из сборника.....
descriptionCutting 'Описание' = DATA STRING[200] (cutting) IN cutGroup;
percAllowancesCutting 'Процент надбавок' = DATA DOUBLE (cutting) IN cutGroup;
percLossesCutting 'Процент потерь' = DATA DOUBLE (cutting) IN cutGroup;
percSweepsCutting 'Процент зачисток' = DATA DOUBLE (cutting) IN cutGroup;
InDepartmentStoreCutting 'В каких подразделениях разрешено использовать карту' = DATA BOOLEAN (departmentStore, cutting) IN baseGroup;

cuttingDetailCutting 'Строка ИД' = DATA cutting (detailCutting) IN idGroup;
sidCuttingDetailCutting 'Номер карты' (detailCutting) =  sidCutting(cuttingDetailCutting(detailCutting)) IN cutGroup;
itemDetailCutting 'Товар ИД' = DATA item (detailCutting) IN idGroup;
shortNameUnitOfMeasureItemDetailCutting 'Ед.изм.' (detailCutting) = shortNameUnitOfMeasureItem(itemDetailCutting(detailCutting)) IN cutGroup;
nameItemDetailCutting 'Наименование товара' (detailCutting) = name(itemDetailCutting(detailCutting)) IN cutGroup;
factorDetailCutting 'Рассчетный коэффициент цены' = DATA DOUBLE (detailCutting) IN cutGroup;
percGoodsDetailCutting '% выхода товара' = DATA DOUBLE (detailCutting) IN cutGroup;

isCuttingDetailCutting(cutting, detailCutting) = cuttingDetailCutting(detailCutting) == cutting;
    // todo :  надо сделать свойство на уникальность товара в карте разруба

inItemCutting 'Вкл.' = DATA BOOLEAN (item, cutting) IN cutGroup;

FORM cutting 'Карта проработки'
OBJECTS c=cutting FIXED PANEL
OBJECTS d=detailCutting, dep=departmentStore, i=item
PROPERTIES(c)      sidCutting, descriptionCutting, dateCutting, useCutting, percAllowancesCutting, percLossesCutting, percSweepsCutting
PROPERTIES(d)      nameItemDetailCutting, shortNameUnitOfMeasureItemDetailCutting, factorDetailCutting, percGoodsDetailCutting, ADDOBJ, delete
PROPERTIES(dep)    nameStoreDepartmentStore, name
PROPERTIES(i)      name, shortNameUnitOfMeasureItem, nameBrandItem
PROPERTIES(dep, c) InDepartmentStoreCutting
PROPERTIES(i, c)   inItemCutting

FILTERS NOT NULL isCuttingDetailCutting(c, d)
FILTERGROUP filters7
    FILTER 'Показывать подразделения только для данной карты' 'F10' NOT NULL InDepartmentStoreCutting(dep, c)
FILTERGROUP filters8
    FILTER 'Показывать товар только для данной карты' 'F9' NOT NULL inItemCutting(i, c)

EDIT cutting OBJECT c;

DESIGN cutting FROM DEFAULT {
    main{
       ADD cut.box BEFORE functions.box{
            tabbedPane = TRUE;
            ADD d.box;
            ADD dep.box { title = 'Подразделение'; }
            ADD i.box { title = 'Товар, для которого действует карта'; }
       }
   }
}

FORM cuttings 'Карты проработки'
OBJECTS c=cutting, d=detailCutting, dep=departmentStore, i=item
PROPERTIES(c)      READONLY sidCutting, descriptionCutting, dateCutting, useCutting, percAllowancesCutting, percLossesCutting, percSweepsCutting
PROPERTIES(c)      ADDFORM, EDITFORM, delete
PROPERTIES(d)      READONLY nameItemDetailCutting, shortNameUnitOfMeasureItemDetailCutting, factorDetailCutting, percGoodsDetailCutting
PROPERTIES(dep)    READONLY nameStoreDepartmentStore, name
PROPERTIES(i)      READONLY name, shortNameUnitOfMeasureItem, nameBrandItem
PROPERTIES(dep, c) READONLY InDepartmentStoreCutting
PROPERTIES(i, c) READONLY inItemCutting
FILTERS NOT NULL   isCuttingDetailCutting(c, d),
        NOT NULL   InDepartmentStoreCutting(dep, c),
        NOT NULL   inItemCutting(i, c)
ORDER BY           nameStoreDepartmentStore, sidCutting, nameItemDetailCutting, name;


DESIGN cuttings FROM DEFAULT {
    main{

       ADD cut2.box BEFORE functions.box{
            ADD dep.box { title = 'Подразделение'; }

            ADD i.box { title = 'Товар, для которого действует карта'; }
            POSITION dep.box TO THE LEFT i.box;
       }
       ADD cut1.box BEFORE cut2.box{
            ADD d.box;

       }
   }
}
//---------------------------- Налоги ----------------------------------------//
CLASS tax 'Налог';
CLASS taxNDS 'НДС' : tax;

nameTax 'Наименование налога' = DATA STRING[200] (tax) IN baseGroup;
shortNameTax 'Сокращение' = DATA STRING[20] (tax) IN baseGroup;

CLASS range 'Шкала';
dataRange 'Шкала' = DATA INTEGER (range);

CLASS rate 'История изменений';
rangeRate 'Шкала ИД' = DATA range (rate) IN idGroup;
taxRange 'Налог ИД' = DATA tax (range) IN idGroup;

CLASS STATIC rangeType 'Тип действия'
{
    common 'Общий',
    units 'Для подразделений'
};
rangeTypeRange 'Тип ИД' = DATA rangeType (range) IN idGroup;
nameRangeTypeRange 'Тип действия' = name(rangeTypeRange(range)) IN baseGroup;
inRangeStoreDefault 'Вкл.' (range, store) = DATA BOOLEAN (range, store) IN baseGroup;
inRangeStore 'Вкл.' (range, store) = inRangeStoreDefault(range, store)  IF rangeTypeRange(range) == rangeType.units IN baseGroup;

dataRate 'Значение ставки' = DATA DOUBLE (rate) IN baseGroup;
dateFromRate 'Действует с' = DATA DATE (rate) IN baseGroup;
dateToRate 'Действует по' = DATA DATE (rate) IN baseGroup;
dateRate 'Дата ввода' = DATA DATE (rate) IN baseGroup;

employeeRate 'Кто ввел ИД' = DATA employee (rate) IN baseGroup;

userFirstNameEmployeeRate 'Кто ввел значение, имя' (rate) = userFirstName(employeeRate(rate)) IN baseGroup;
userLastNameEmployeeRate 'Кто ввел значение, фамилия' (rate) = userLastName(employeeRate(rate)) IN baseGroup;

//rateRange 'Шкала ИД' = DATA rate (range) IN baseGroup;
userRate 'Действующая' (rate) = rate IF dateFromRate(rate) <= currentDate() AND dateToRate(rate) >= currentDate();
userRateRange 'Действующая' (range) = GROUP MAX userRate(rate) BY rangeRate(rate);
quantityUserRateRange 'Количество историй' (range) = GROUP SUM 1 IF userRate(rate) BY rangeRate(rate);
CONSTRAINT CHECKED quantityUserRateRange(range) > 1 MSG 'ошибка: Одновременно не может быть несколько действующих ставок';
// не работает  //
//   обязательно переделать на уникальность и по времени
CONSTRAINT CHECKED range IS range AND NOT rangeTypeRange(range)  MSG 'ошибка: Не выбран тип действия для шкалы';
// работает, но хотели мы что-то другое.....//

dataUserRateRange 'Значение ставки' (range) = dataRate(userRateRange(range)) IN baseGroup;
dateFromUserRateRange 'Действует с' (range) = dateFromRate(userRateRange(range)) IN baseGroup;
dateToUserRateRange 'Действует по' (range) = dateToRate(userRateRange(range)) IN baseGroup;

userFirstNameEmployeeUserRateRange 'Кто ввел значение, имя' (range) = userFirstNameEmployeeRate(userRateRange(range)) IN baseGroup;
userLastNameEmployeeUserRateRange 'Кто ввел значение, фамилия' (range) = userLastNameEmployeeRate(userRateRange(range)) IN baseGroup;

inRangeRate(range, rate) = rangeRate(rate) == range;
inTaxRange(tax, range) = taxRange(range) == tax;


FORM tax 'Налог'
OBJECTS t=tax FIXED PANEL
OBJECTS ra=range, rt=rate, s=store
PROPERTIES(t)     nameTax, shortNameTax
PROPERTIES(ra)    dataRange, nameRangeTypeRange, ADDOBJ, delete
PROPERTIES(rt)    dataRate, dateFromRate, dateToRate, dateRate, userFirstNameEmployeeRate, userLastNameEmployeeRate, ADDOBJ, delete
PROPERTIES(s)     name, addressStore//, ADDOBJ, delete
PROPERTIES(ra, s) inRangeStore
FILTERS NOT NULL  inRangeRate(ra, rt),
        NOT NULL  inTaxRange(t, ra)
FILTERGROUP filters6
    FILTER 'Показывать магазиным только для данного налога' 'F10' NOT NULL inRangeStore(ra, s)

EDIT tax OBJECT t;

FORM taxes 'Налоги'
OBJECTS t=tax
OBJECTS ra=range, s=store
PROPERTIES(t)      READONLY nameTax, shortNameTax
PROPERTIES(t)      ADDFORM, EDITFORM, delete
PROPERTIES(s)     READONLY name, addressStore
PROPERTIES(ra, s)  READONLY inRangeStore
PROPERTIES(ra)  READONLY dataRange, dataUserRateRange, dateFromUserRateRange, dateToUserRateRange, userFirstNameEmployeeUserRateRange, userLastNameEmployeeUserRateRange, nameRangeTypeRange, quantityUserRateRange
FILTERGROUP filters4
    FILTER 'Показывать ставки только для данного налога' 'F10' NOT NULL inTaxRange(t, ra)
FILTERGROUP filters5
    FILTER 'Показывать магазиным только для данного налога' 'F9' NOT NULL inRangeStore(ra, s);


//---------------------------- Рецепты блюд ----------------------------------------//
CLASS recipe 'Рецепт' : named;
CLASS recipeDetail 'Сырье рецепта';

dishRecipe  'Блюдо (ИД)' = DATA item (recipe) IN idGroup;
CONSTRAINT CHECKED dishRecipe (recipe) AND NOT isManufacturedItem(dishRecipe(recipe)) MSG 'Блюдо должно производиться';
nameDishRecipe 'Блюдо' = name(dishRecipe(recipe)) IN baseGroup;

beginDateRecipe 'Используется с' = DATA DATE (recipe) IN baseGroup;
isUsedRecipe 'Используется' = DATA BOOLEAN (recipe) IN baseGroup;
numberRecipe 'Номер рецептуры (из сборника и пр.)' = DATA STRING[40] (recipe) IN baseGroup;
notesRecipe 'Технология приготовления' = DATA STRING[100] (recipe) IN baseGroup;
outWeightRecipe 'Количество выхода изделия' = DATA DOUBLE (recipe) IN baseGroup;

recipeRecipeDetail 'Рецепт (ИД)' = DATA recipe(recipeDetail) IN baseGroup;
componentRecipeDetail 'Компонент (ИД)' = DATA component(recipeDetail) IN idGroup;
nameComponentRecipeDetail 'Компонент' = name(componentRecipeDetail(recipeDetail)) IN baseGroup;
normQuantityRecipeDetail 'Норма закладки (брутто)' = DATA DOUBLE (recipeDetail) IN baseGroup;

inRecipeRecipeDetail(recipe, recipeDetail) = recipeRecipeDetail(recipeDetail) == recipe;

FORM recipe 'Рецепт блюда'
OBJECTS r=recipe FIXED PANEL
OBJECTS rd=recipeDetail
PROPERTIES(r) nameDishRecipe, numberRecipe, beginDateRecipe, isUsedRecipe, notesRecipe, outWeightRecipe
PROPERTIES(rd) nameComponentRecipeDetail, normQuantityRecipeDetail, ADDOBJ, delete
FILTERS NOT NULL inRecipeRecipeDetail(r, rd)
EDIT recipe OBJECT r;

FORM recipes 'Рецепты блюд'
OBJECTS r=recipe
OBJECTS rd=recipeDetail
PROPERTIES(r) READONLY nameDishRecipe, numberRecipe, isUsedRecipe
PROPERTIES(r) ADDFORM, EDITFORM, delete
PROPERTIES(rd) READONLY nameComponentRecipeDetail, normQuantityRecipeDetail
FILTERS NOT NULL inRecipeRecipeDetail(r, rd);

//---------------------------- Товар на оборудовании ----------------------------------------//

CLASS stage 'Ячейка';
valueStage 'Ячейка' = DATA INTEGER (stage) IN baseGroup;
barcodeStageGroupMachinery 'Штрих-код ИД' = DATA barcode (stage, groupMachinery) IN idGroup;
priceStageGroupMachinery 'Розничная цена для штрих-кода' (stage, groupMachinery) = DATA DOUBLE (stage, groupMachinery) IN baseGroup;
dateStageGroupMachinery 'Дата истечения срока годности' (stage, groupMachinery) = DATA DATE (stage, groupMachinery) IN baseGroup;
timeStageGroupMachinery 'Время истечения срока годности' (stage, groupMachinery) = DATA INTEGER (stage, groupMachinery) IN baseGroup;
stockStageGroupMachinery 'Остаток на момент передачи' (stage, groupMachinery) = DATA DOUBLE (stage, groupMachinery) IN baseGroup;

barcodeBarcodeStageGroupMachinery 'Штрих-код' (stage, groupMachinery) = barcode(barcodeStageGroupMachinery(stage, groupMachinery)) IN baseGroup;
nameSkuBarcodeStageGroupMachinery 'Товар' (stage, groupMachinery) = nameSkuBarcode(barcodeStageGroupMachinery(stage, groupMachinery)) IN baseGroup;
//titleScalesBarcodeStageGroupMachinery 'Наименование для весов' (stage, groupMachinery) = titleScalesBarcode(barcodeStageGroupMachinery(stage, groupMachinery));
//titleCashBarcodeStageGroupMachinery 'Наименование для касс' (stage, groupMachinery) = titleCashBarcode(barcodeStageGroupMachinery(stage, groupMachinery));
//amountBarcodeStageGroupMachinery 'Количество (сколько списать при продаже)' (stage, groupMachinery) = amountBarcode(barcodeStageGroupMachinery(stage, groupMachinery));
//removeBarcodeStageGroupMachinery 'Заблокирован (удален с оборудования)' (stage, groupMachinery) = removeBarcode(barcodeStageGroupMachinery(stage, groupMachinery));
//commentRemoveBarcodeStageGroupMachinery 'Причина блокировки' (stage, groupMachinery) = commentRemoveBarcode(barcodeStageGroupMachinery(stage, groupMachinery));

FORM stages 'Товары на оборудовании'
OBJECTS gr=groupMachinery
OBJECTS st=stage
PROPERTIES(gr) READONLY nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery
PROPERTIES(st) valueStage
PROPERTIES(st, gr)  barcodeBarcodeStageGroupMachinery, nameSkuBarcodeStageGroupMachinery, priceStageGroupMachinery, dateStageGroupMachinery,
                    timeStageGroupMachinery, stockStageGroupMachinery
FILTERS  NOT NULL barcodeStageGroupMachinery(st, gr);


//---------------------------- Настройка навигатора ----------------------------------------//

WINDOW TOOLBAR topToolbar 'Папки' VERTICAL HIDETITLE HIDESCROLLBARS POSITION(0, 0, 20, 5);
WINDOW TOOLBAR formsToolbar 'Формы' VERTICAL HIDETITLE POSITION (0, 5, 20, 65);
WINDOW TREE formsTree 'Формы' HIDETITLE POSITION (0, 5, 20, 65);

HIDE WINDOW BaseLogicsModule.relevantForms;
HIDE WINDOW BaseLogicsModule.relevantClassForms;

NAVIGATOR {

    baseElement TO topToolbar;

    ADD lists 'Справочники' TO formsToolbar {
        ADD goods 'Товары' {
            ADD items;
            ADD itemGroups;
            ADD unitsOfMeasure;
            ADD assortments;
        }
        ADD shopStructure 'Магазины' {
            ADD companies;
            ADD qualifier;
            ADD stores;
            ADD discount;
        }
        ADD employeeRelations 'Сотрудники' {
            ADD employees;
            ADD employeesCommittees;
        }
        ADD supplierRelation 'Поставщики'{
            ADD suppliers;
            ADD banks;
            ADD assortmentSupplier;
            ADD timeTable;
        }
        ADD equipment 'Оборудование' {
            ADD groupsCash;
            ADD groupsScales;
            ADD groupsCheck;
            ADD machineries;
            ADD models;
            ADD stages;
        }
        ADD producing 'Производство'{
            ADD cuttings;
            ADD recipes;
        }
        ADD taxes;
    }

    ADD documents 'Документы' TO formsToolbar {

    }

    ADD adminElement TO formsTree {
        ADD objects 'Карточки' {
            ADD itemGroup;
            ADD unitOfMeasure;
            ADD item;
            ADD barcode;
            ADD employee;
            ADD tradingSquare;
            ADD discount;
            ADD departmentStore;
            ADD store;
            ADD storeType;
            ADD tradingNetwork;
            ADD revaluationCommittee;
            ADD bank;
            ADD ownership;
            ADD supplier;
            ADD company;
            ADD cashModel;
            ADD scalesModel;
            ADD checkModel;
            ADD assortment;
            ADD color;
            ADD taste;
            ADD pack;
            ADD sort;
            ADD size;
            ADD specialty;
            ADD cash;
            ADD scales;
            ADD check;
            ADD tax;
            ADD cutting;
            ADD recipe;
            ADD groupCash;
            ADD groupScales;
            ADD groupCheck;
            ADD addTimeTable;
            ADD addDiscount;
        }
    }
}


