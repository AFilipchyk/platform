MODULE Rublevski;

IMPORT BaseLogicsModule;

CLASS doubleNamed 'Объект с кратким наименованием' : named;

shortName 'Краткое наименование' = DATA STRING[5] (doubleNamed) IN baseGroup;

// ----------------------------------- Товарный классификатор ------------------------------------------ //
CLASS itemGroup 'Товарная группа' : named;

parentItemGroup = DATA itemGroup (itemGroup);
nameParentItemGroup 'Родительская группа' = name(parentItemGroup(itemGroup));

FORM itemGroup 'Товарная группа'
OBJECTS g=itemGroup
PROPERTIES(g) name, nameParentItemGroup;

FORM itemGroups 'Товарные группы'
OBJECTS g=itemGroup
PROPERTIES(g) READONLY name, nameParentItemGroup
PROPERTIES(g) ADDFORM, EDITFORM, delete;

// ----------------------------------- Единицы измерения ------------------------------------------ //
CLASS unitOfMeasure 'Единица измерения' : doubleNamed;

FORM unitOfMeasure 'Единица измерения'
OBJECTS u=unitOfMeasure FIXED PANEL
PROPERTIES(u) name, shortName;

FORM unitsOfMeasure 'Единицы измерений'
OBJECTS u=unitOfMeasure
PROPERTIES(u) READONLY name, shortName
PROPERTIES(u) ADDFORM, EDITFORM, delete;

// ----------------------------------- Товар ------------------------------------------ //
CLASS ABSTRACT sku 'SKU' : named;
CLASS item 'Товар' : sku;
CLASS brand 'Бренд' : named;

brandItem = DATA brand(item);
nameBrandItem 'Брэнд' (item) = name(brandItem(item));

unitOfMeasureItem = DATA unitOfMeasure (item) IN idGroup;
shortNameUnitOfMeasureItem 'Единица измерения' (item) = shortName(unitOfMeasureItem(item)) IN baseGroup;

// ----------------------------------- Атрибуты ------------------------------------------ //

CLASS ABSTRACT itemAttribute 'Атрибут товара' : named;

CLASS stringItemAttribute 'Строковый атрибут' : itemAttribute;
valueStringItemAttribute = DATA STRING[255] (item, stringItemAttribute);

CLASS STATIC customStringItemAttribute 'Предопределенный строковый атрибут' {
    caption 'Название',
    storageConditions 'Условия хранения'
} : stringItemAttribute;

CLASS STATIC objectItemAttribute 'Объектный атрибут' {
    unitOfMeasure 'Единица измерения',
    brand 'Брэнд'
} : itemAttribute;

valueUOMItemAttribute(item, attribute) = unitOfMeasureItem(item) AND attribute == objectItemAttribute.unitOfMeasure;
valueBrandItemAttribute(item, attribute) = brandItem(item) AND attribute == objectItemAttribute.brand;

valueObjectItemAttribute(item, attribute) = UNION EXCLUSIVE valueUOMItemAttribute(item, attribute),
                                                            valueBrandItemAttribute(item, attribute);
nameObjectItemAttribute(item, attribute) = name(valueObjectItemAttribute(item, attribute));

valueItemAttribute(item, attribute) = UNION EXCLUSIVE valueStringItemAttribute(item, attribute),
                                                      nameObjectItemAttribute(item, attribute);

FORM item 'Товар'
OBJECTS i=item FIXED PANEL, a=itemAttribute
PROPERTIES(i) name, shortNameUnitOfMeasureItem, nameBrandItem
PROPERTIES name(a), valueItemAttribute(i, a);

FORM items 'Товары'
OBJECTS i=item
PROPERTIES(i) READONLY name, shortNameUnitOfMeasureItem
PROPERTIES(i) ADDFORM, EDITFORM, delete;

// ----------------------------------- Штрих код ------------------------------------------ //
GROUP barcodeGroup : baseGroup;

CLASS barcode 'Штрих код' : barcodeObject;

itemBarcode 'Товар штрих-кода (ИД)' (barcode) = DATA item (barcode) IN idGroup;
unitOfMeasureBarcode 'Ед.изм. штрих-кода (ИД)' (barcode) = DATA unitOfMeasure (barcode) IN idGroup;

titleScalesBarcode 'Наименование для весов' = DATA STRING[100] (barcode) IN barcodeGroup;
titleCashBarcode 'Наименование для касс' = DATA STRING[100] (barcode) IN barcodeGroup;
shortNameUnitOfMeasureBarcode 'Единица измерения' (barcode) = shortName(unitOfMeasureBarcode(barcode)) IN barcodeGroup;
amountBarcode 'Количество (сколько списать при продаже)' = DATA INTEGER (barcode) IN barcodeGroup;
removeBarcode 'Заблокирован (удален с оборудования)' = DATA BOOLEAN (barcode) IN barcodeGroup;
commentRemoveBarcode 'Причина блокировки' = DATA STRING[100] (barcode) IN barcodeGroup;

FORM barcodeEditForm 'Штрих-код'
OBJECTS b=barcode FIXED PANEL
PROPERTIES(b) barcode, titleScalesBarcode, titleCashBarcode, shortNameUnitOfMeasureBarcode, amountBarcode, removeBarcode, commentRemoveBarcode;

FORM barcodeForm 'Штрих-коды'
OBJECTS b=barcode
PROPERTIES(b) READONLY barcode, titleScalesBarcode, titleCashBarcode, shortNameUnitOfMeasureBarcode, amountBarcode    // barcode
PROPERTIES(b) ADDFORM, EDITFORM, delete;

// ----------------------------------- Склад ------------------------------------------ //

CLASS ABSTRACT stock 'Склад' : named;

// ----------------------------------- Магазин ----------------------------------------- //

GROUP storeGroup : baseGroup;

CLASS store 'Магазин' : named;
CLASS tradingNetwork 'Торговая сеть' : named; // "Рублевский", "Базар"
CLASS storeType 'Формат магазина' : named; //Мини, Супер, ...

addressStore 'Адрес магазина' = DATA STRING[100] (store) IN storeGroup;

storeTypeStore 'Формат магазина (ИД)' = DATA storeType (store) IN idGroup;
nameStoreTypeStore 'Формат магазина' (store) = name(storeTypeStore(store)) IN storeGroup;

tradingNetworkStoreType 'Торговая сеть формата магазина (ИД)' = DATA tradingNetwork (storeType) IN idGroup;
nameTradingNetworkStoreType 'Торговая сеть формата магазина' (storeType) = name(tradingNetworkStoreType(storeType)) IN storeGroup;

inStoreTypeTradingNetwork(storeType, tradingNetwork) = tradingNetworkStoreType(storeType) == tradingNetwork;

// ----------------------------------- Физические лица -------------------------------------------------- //

CLASS ABSTRACT person 'Физическое лицо' : named;
CLASS employee 'Сотрудник' : person;
departmentStoreEmployee 'Отдел сотрудника (ИД)' = DATA departmentStore (employee) IN idGroup;
nameDepartmentStoreEmployee 'Отдел сотрудника' (employee) = name(departmentStoreEmployee(employee)) IN storeGroup; //в далнейшем переделать с привязкой к дате приема на работу

FORM employee 'Сотрудник'
OBJECTS e=employee FIXED PANEL
PROPERTIES(e) READONLY name
PROPERTIES(e) nameDepartmentStoreEmployee;

FORM employees 'Сотрудники'
OBJECTS e=employee
PROPERTIES(e) READONLY name, nameDepartmentStoreEmployee
PROPERTIES(e) ADDFORM, EDITFORM, delete;

// ----------------------------------- Отдел магазина (Подразделение) ----------------------------------- //

CLASS departmentStore 'Отдел магазина' : stock;
CLASS kafeteria 'Кафетерий' : departmentStore;
CLASS tradingFloar 'Торговый зал' : departmentStore;
CLASS wholesaleStock 'Оптовый склад' : departmentStore;
CLASS placeOfAcceptance 'Приемный пункт' : departmentStore;
CLASS restaurant 'Ресторан' : departmentStore;
//CLASS stock 'Склад' : departmentStore; в дальнейшем будет распределительный центр
CLASS manufactory 'Цех' : departmentStore;

storeDepartmentStore 'Магазин отдела (ИД)' = DATA store (departmentStore) IN idGroup;
nameStoreDepartmentStore 'Магазин отдела' (departmentStore) = name(storeDepartmentStore(departmentStore));

controlMinusRestsDepartmentStore 'Контроль за минусовыми остатками' = DATA BOOLEAN (departmentStore) IN storeGroup;
deleteItemMinusRestsDepartmentStore 'Удалять товары с отрицательным остатком с весов и касс?' = DATA BOOLEAN (departmentStore) IN storeGroup;
controlMinusRestsContainerDepartmentStore 'Контроль за минусовыми остатками тары' = DATA BOOLEAN (departmentStore) IN storeGroup;
tradingSquareDepartmentStore 'Торговая площадь магазина, кв.м.' = DATA DOUBLE (departmentStore) IN storeGroup;
resolveDiscountDepartmentStore 'Разрешать скидку в подразделении?' = DATA BOOLEAN (departmentStore) IN storeGroup;
controlAssortmentProviderDepartmentStore 'Контролировать ассортимент поставщиков в подразделении?' = DATA BOOLEAN (departmentStore) IN storeGroup;
verifyOrderArrivalDepartmentStore 'Сверять заказ и приход в подразделении?' = DATA BOOLEAN (departmentStore) IN storeGroup;
maxQuantityDeliveryHourDepartmentStore 'Максимальное допустимое число поставок в час' = DATA INTEGER (departmentStore) IN storeGroup;
resolveMaxQuantityDeliveryHourAssortmentLessDepartmentStore 'Разрешить превысить количество поставок/час при ассортименте <' = DATA DOUBLE (departmentStore) IN storeGroup;
resolveOrderItemDepartmentStore 'Разрешить заказ товара в подразделение?' = DATA BOOLEAN (departmentStore) IN storeGroup;
marginPublicCateringDepartmentStore 'Наценка общепита по умолчанию для формирования цены в подразделении' = DATA DOUBLE (departmentStore) IN storeGroup;
quantityCashChangeOneOperationAccountDepartmentStore ' Количество кассовых смен в одном оперативном отчете' = DATA INTEGER (departmentStore) IN storeGroup;
chairmanCommissionRevaluationDepartmentStore 'Председатель комиссии по переоценке' = DATA employee (departmentStore) IN storeGroup;
materiallyResponsiblePersonItemReportDepartmentStore 'Материально ответственное лицо, подписывающее товарный отчет' = DATA employee (departmentStore) IN storeGroup;
bookkeeperItemReportDepartmentStore 'Бухгалтер, принимающий товарный отчет' = DATA employee (departmentStore) IN storeGroup;
personCheckReportDepartmentStore 'Кто проверяет товарный отчет' = DATA employee (departmentStore) IN storeGroup;

inStoreDepartment(store, departmentStore) = storeDepartmentStore(departmentStore) == store;

FORM departmentStore 'Отдел магазина'
OBJECTS d=departmentStore FIXED PANEL
PROPERTIES(d) READONLY name
PROPERTIES(d) nameStoreDepartmentStore, controlMinusRestsDepartmentStore, deleteItemMinusRestsDepartmentStore, controlMinusRestsContainerDepartmentStore,
              tradingSquareDepartmentStore, resolveDiscountDepartmentStore, controlAssortmentProviderDepartmentStore, verifyOrderArrivalDepartmentStore,
              maxQuantityDeliveryHourDepartmentStore, resolveMaxQuantityDeliveryHourAssortmentLessDepartmentStore, resolveOrderItemDepartmentStore,
              marginPublicCateringDepartmentStore, quantityCashChangeOneOperationAccountDepartmentStore, chairmanCommissionRevaluationDepartmentStore,
              materiallyResponsiblePersonItemReportDepartmentStore, bookkeeperItemReportDepartmentStore, personCheckReportDepartmentStore;

FORM departmentStores 'Отделы магазина'
OBJECTS d=departmentStore
PROPERTIES(d) READONLY name, nameStoreDepartmentStore
PROPERTIES(d) ADDFORM, EDITFORM, delete;

FORM store 'Магазин'
OBJECTS s=store FIXED PANEL, d=departmentStore
PROPERTIES(s) READONLY name, addressStore, nameStoreTypeStore
PROPERTIES(d) name, ADDOBJ, delete
FILTERS NOT NULL inStoreDepartment(s, d);

FORM stores 'Магазины'
OBJECTS s=store
PROPERTIES(s) READONLY name, addressStore, nameStoreTypeStore
PROPERTIES(s) ADDFORM, EDITFORM, delete;

FORM storeType 'Формат магазина'
OBJECTS s=storeType FIXED PANEL, n=tradingNetwork
PROPERTIES(s) READONLY name
PROPERTIES(n) name, ADDOBJ, delete
FILTERS NOT NULL inStoreTypeTradingNetwork(s, n);

FORM storeTypes 'Форматы магазинов'
OBJECTS s=storeType
PROPERTIES(s) READONLY name, nameTradingNetworkStoreType
PROPERTIES(s) ADDFORM, EDITFORM, delete;

FORM tradingNetwork 'Торговая сеть'
OBJECTS n=tradingNetwork FIXED PANEL
PROPERTIES(n) READONLY name;

FORM tradingNetworkes 'Торговые сети'
OBJECTS n= tradingNetwork
PROPERTIES(n) READONLY name
PROPERTIES(n) ADDFORM, EDITFORM, delete;

// ----------------------------------- Комиссии ---------------------------------------------------------- //

CLASS ABSTRACT committee 'Комиссия' : named;
CLASS revaluationCommittee 'Комиссия переоценки' : committee;

chairmanRevaluationCommittee 'Председатель комиссии (ИД)' = DATA employee (revaluationCommittee) IN idGroup;
nameChairmanRevaluationCommittee 'Председатель комиссии' (revaluationCommittee) = name(chairmanRevaluationCommittee(revaluationCommittee)) IN storeGroup;
departmentStoreRevaluationCommittee 'Отдел комиссии (ИД)' = DATA departmentStore (revaluationCommittee) IN idGroup;
nameDepartmentStoreRevaluationCommittee 'Отдел комиссии' (revaluationCommittee) = name(departmentStoreRevaluationCommittee(revaluationCommittee)) IN storeGroup;
CONSTRAINT CHECKED departmentStoreEmployee(chairmanRevaluationCommittee(revaluationCommittee))!=departmentStoreRevaluationCommittee(revaluationCommittee) MSG 'Отдел комиссии должен соответствовать отделу председателя комиссии';

inDepartmentStoreEmployeeRevaluationCommittee (revaluationCommittee, employee) = departmentStoreRevaluationCommittee(revaluationCommittee)==departmentStoreEmployee(employee);
inCommitteeDepartmentStore 'Является членом комиссии' (revaluationCommittee, employee) = DATA BOOLEAN (revaluationCommittee, employee) IN storeGroup;

FORM revaluationCommittee 'Комиссия переоценки'
OBJECTS c=revaluationCommittee FIXED PANEL, e=employee
PROPERTIES(c) READONLY name
PROPERTIES(c) nameDepartmentStoreRevaluationCommittee, nameChairmanRevaluationCommittee
PROPERTIES(e) READONLY name
PROPERTIES(c, e) inCommitteeDepartmentStore
FILTERS NOT NULL inDepartmentStoreEmployeeRevaluationCommittee(c, e);

FORM revaluationCommittees 'Комиссии переоценки'
OBJECTS c=revaluationCommittee
PROPERTIES(c) READONLY name, nameDepartmentStoreRevaluationCommittee, nameChairmanRevaluationCommittee
PROPERTIES(c) ADDFORM, EDITFORM, delete;

// ----------------------------------- Банк ------------------------------------------- //

GROUP banksGroup : baseGroup;

CLASS bank 'Банк' : named;

addressBank 'Адрес банка' = DATA STRING[100] (bank) IN banksGroup;
MFOBank 'Код МФО' = DATA STRING[9] (bank) IN banksGroup;
departmentBank 'Отдел банка' = DATA STRING[100] (bank) IN banksGroup;
CBUBank 'ЦБУ' = DATA STRING[3] (bank) IN banksGroup;
infoBank 'Дополнительные сведения' = DATA STRING[100] (bank) IN banksGroup;

FORM banks 'Банки'
OBJECTS b=bank
PROPERTIES(b) name, addressBank, MFOBank, departmentBank, CBUBank, infoBank, ADDOBJ, delete;

// ----------------------------------- Расчетный счет ------------------------------------------ //

GROUP accountGroup 'Банковская информация' : baseGroup;

CLASS account 'Расчетный счет';

bankAccount 'Банк (ИД)' = DATA bank (account) IN idGroup;

dataAccount 'Номер расчетного счета'  = DATA STRING[13] (account) IN accountGroup;
nameBankAccount 'Наименование банка' (account) = name(bankAccount(account)) IN accountGroup;
addressBankAccount 'Адрес банка' (account) = addressBank(bankAccount(account)) IN accountGroup;
MFOBankAccount 'Код МФО банка' (account) = MFOBank(bankAccount(account)) IN accountGroup;
departmentBankAccount 'Отдел банка' (account) = departmentBank(bankAccount(account)) IN accountGroup;
CBUBankAccount 'ЦБУ банка' (account) = CBUBank(bankAccount(account)) IN accountGroup;
noteAccount 'Примечание'  = DATA STRING[50] (account) IN accountGroup;

// ----------------------------------- Форма собственности ------------------------------------------ //
CLASS ownership 'Форма собственности' : named;
shortNameOwnership 'Cокращенное название' = DATA STRING[10] (ownership) IN baseGroup;

FORM ownership 'Форма собственности'
OBJECTS o=ownership FIXED PANEL
PROPERTIES(o) name, shortNameOwnership;

FORM ownerships 'Формы собственности'
OBJECTS o=ownership
PROPERTIES(o) READONLY name, shortNameOwnership
PROPERTIES(o) ADDFORM, EDITFORM, delete;

// ----------------------------------- Лицензия ------------------------------------------ //
GROUP licensGroup 'Лицензиионная информация' : baseGroup;
CLASS license 'Лицензия' ;

dataLicense 'Номер лицензии' = DATA STRING[100] (license) IN licensGroup;
dateFromLicense 'Действует с ' = DATA DATE (license) IN licensGroup;
dateToLicense 'Действует по ' = DATA DATE (license) IN licensGroup;
//tabaccoLicense 'Табачная' = DATA BOOLEAN  (license) IN licensGroup;

// ----------------------------------- Юридическое лицо ------------------------------------------ //

GROUP lawGroup 'Юридическая информация' : baseGroup;
GROUP contactGroup 'Контактная информация' : baseGroup;
GROUP docGroup 'Для договора' : baseGroup;


CLASS ABSTRACT legalEntity 'Юридическое лицо' : named;

ownershipLegalEntity 'Форма собственности (ИД)' = DATA ownership (legalEntity) IN licensGroup;

nameOwnershipLegalEntity 'Форма собственности' = name(ownershipLegalEntity(legalEntity)) IN lawGroup;
shortNameOwnershipLegalEntity 'Форма собственности (сокр.)' = shortNameOwnership(ownershipLegalEntity(legalEntity)) IN lawGroup;
fullNameLegalEntity 'Наименование для накладных' = DATA STRING[200] (legalEntity) IN lawGroup;
addressLegalEntity 'Фактический адрес' = DATA STRING[100] (legalEntity) IN lawGroup;
lawLegalEntity 'Юридический адрес' = DATA STRING[100] (legalEntity) IN lawGroup;
postAddressLegalEntity 'Почтовый адрес' = DATA STRING[100] (legalEntity) IN contactGroup;
managerLegalEntity 'Руководитель' = DATA STRING[100] (legalEntity) IN contactGroup;
accountantLegalEntity 'Главный бухгалтер' = DATA STRING[100] (legalEntity) IN contactGroup;
phoneLegalEntity 'Телефон/факс' = DATA STRING[100] (legalEntity) IN contactGroup;
UNPLegalEntity 'УНП' = DATA STRING[9] (legalEntity) IN docGroup;
OKPOLegalEntity 'Код по ОКПО' = DATA STRING[20] (legalEntity) IN docGroup;
OKYLPLegalEntity 'Код ОКЮЛП' = DATA STRING[20] (legalEntity) IN docGroup;
emailLegalEntity 'e-mail' = DATA STRING[100] (legalEntity) IN contactGroup;
siteLegalEntity 'Сайт' = DATA STRING[100] (legalEntity) IN contactGroup;
contactsLegalEntity 'Дополнительная информация' = DATA STRING[300] (legalEntity) IN contactGroup;
residentLegalEntity 'Резидент РБ' = DATA BOOLEAN (legalEntity) IN lawGroup;
manufacturerLegalEntity 'Производитель' = DATA BOOLEAN (legalEntity) IN lawGroup;

legalEntityAccount 'Ю.Л. (ИД)' = DATA legalEntity (account) IN idGroup;
userAccountLegalEntity 'Р/сч. (ИД)' = DATA account (legalEntity) IN idGroup;
defaultAccountLegalEntity(legalEntity) = GROUP MAX account AS account BY legalEntityAccount(account);
overrideAccountLegalEntity 'Основной р/сч.' (legalEntity) = UNION OVERRIDE defaultAccountLegalEntity(legalEntity), userAccountLegalEntity(legalEntity);
dataOverrideAccountLegalEntity 'Основной р/сч.' (legalEntity) = dataAccount(overrideAccountLegalEntity(legalEntity)) IN lawGroup;

CONSTRAINT CHECKED legalEntity != legalEntityAccount(userAccountLegalEntity(legalEntity)) MSG 'ошибка: Р/сч. по умолчанию должен соответствовать р/сч. Ю.Л.';
equalsLegalEntityAccount 'Основной р/сч.' (legalEntity, account) = userAccountLegalEntity(legalEntity) == account;

legalEntityLicense 'ЮЛ (ИД)' = DATA legalEntity (license) IN idGroup;
userLicenseLegalEntity 'ЮЛ (ИД)' = DATA license (legalEntity) IN idGroup;
defaultLicenseLegalEntity (legalEntity) = GROUP MAX license AS license BY legalEntityLicense(license);

overrideLicenseLegalEntity 'Действующая' (legalEntity) = UNION OVERRIDE defaultLicenseLegalEntity(legalEntity) IF dateFromLicense(defaultLicenseLegalEntity(legalEntity)) < currentDate() AND dateToLicense(defaultLicenseLegalEntity(legalEntity)) > currentDate(),
                                                                        userLicenseLegalEntity(legalEntity) IF dateFromLicense(userLicenseLegalEntity(legalEntity)) < currentDate() AND dateToLicense(userLicenseLegalEntity(legalEntity)) > currentDate();
dataOverrideLicenseLegalEntity 'Действующая лицензия' (legalEntity) = dataLicense(overrideLicenseLegalEntity(legalEntity)) IN lawGroup;
                        // работает как то не так, надо проверить //
CONSTRAINT CHECKED legalEntity != legalEntityLicense(userLicenseLegalEntity(legalEntity)) MSG 'ошибка: Лицензия по умолчанию должен соответствовать лицензии Ю.Л.';
//CONSTRAINT  dateFromLicense(overrideLicenseLegalEntity(legalEntity)) > currentDate() MSG 'ошибка: действие лицензии еще не началось';
//CONSTRAINT  dateToLicense(overrideLicenseLegalEntity(legalEntity)) < currentDate() MSG 'ошибка: действие выбранной лицензии уже окончилось';
equalsLegalEntityLicense 'Действующая' (legalEntity, license) = userLicenseLegalEntity(legalEntity) == license IN lawGroup;

// ----------------------------------- Договор ------------------------------------------ //

GROUP contractGroup '' : baseGroup;

CLASS ABSTRACT contract 'Договор';
CLASS contractProvider 'Договор с поставщиком' : contract;

CLASS STATIC contractType 'Тип договора'
{
    sale 'договор купли-продажи',
    commission 'договор комиссии'
};

CLASS STATIC contractForm 'Порядок оплаты'
{
    delay 'с отсрочкой платежа',
    implement 'на реализацию'
};

dataContract 'Номер договора' = DATA STRING[30] (contract) IN contractGroup;
formContract 'Порядок оплаты договора' (contract) = DATA contractForm (contract) IN contractGroup;
typeContract 'Тип договора' (contract) = DATA contractType (contract) IN contractGroup;
nameFormContract 'Порядок оплаты по договору' (contract) = name(formContract(contract)) IN contractGroup;
nameTypeContract 'Тип договора' (contract) = name(typeContract(contract)) IN contractGroup;
dateFromContract 'Дата начала договора' = DATA DATE (contract) IN contractGroup;
dateToContract 'Дата окончания договора' = DATA DATE (contract) IN contractGroup;
currencyContract 'Валюта взаиморасчетов' = DATA STRING[20] (contract) IN contractGroup; // может и не надо   или справочником
warnContract 'За сколько дней предупредить об окончании' = DATA INTEGER (contract) IN contractGroup;
banContract 'За сколько дней запретить закупку товара' = DATA INTEGER (contract) IN contractGroup;
delayContract 'Отсрочка платежа, дней' = DATA INTEGER (contract) IN contractGroup;
requestContract 'Форма оплаты: Платежное требование' = DATA BOOLEAN (contract) IN contractGroup;
noteContract 'Примечание' = DATA STRING[100] (contract) IN contractGroup;

// ----------------------------------- Поставщик ------------------------------------------ //

GROUP supplierGroup : baseGroup;
CLASS supplier 'Поставщик' : legalEntity;
CLASS company 'Компания' : legalEntity;

companyContract 'Организация (ИД)' = DATA company (contract) IN idGroup;
supplierContract 'Поставщик (ИД)' = DATA supplier (contract) IN idGroup;
userContractSupplier 'Контракт (ИД)' = DATA contract (supplier) IN idGroup;
companySupplier 'Организация (ИД)' = DATA company (supplier) IN idGroup;

sureSupplier 'Обязателен заказ поставщику' = DATA BOOLEAN (supplier) IN supplierGroup;
payerSupplier 'Плательщик НДС' = DATA BOOLEAN (supplier) IN supplierGroup;
scheduleSupplier 'Разрешить доп.заказ товаров вне графика' = DATA BOOLEAN (supplier) IN supplierGroup;
controlSupplier 'Контролировать ассортимент поставщика' = DATA BOOLEAN (supplier) IN supplierGroup;
surePercentSupplier 'Обязательный % заказанных товаров в прих. накладной' = DATA INTEGER (supplier) IN supplierGroup;
allowablePercentSupplier 'Допустимый % изменения цен 1го поставщика' = DATA INTEGER (supplier) IN supplierGroup;
afterDaysSupplier 'Максимальное число дней до поставки после заказа' = DATA INTEGER (supplier) IN supplierGroup;
forHoursSupplier 'За сколько часов до поставки закрыть заказ' = DATA INTEGER (supplier) IN supplierGroup;
limitSupplier 'Кредитный лимит' = DATA INTEGER (supplier) IN docGroup;
prioritySupplier 'Приоритет оплаты (1 - в первую очередь)' = DATA INTEGER (supplier) IN docGroup;
signsSupplier 'Число знаков после запятой для строки накладной' = DATA INTEGER (supplier) IN supplierGroup;
marksSupplier 'Число знаков после зап.в сумме к оплате по накладной' = DATA INTEGER (supplier) IN supplierGroup;

dataContractSupplier 'Договор по умолчанию' (supplier) = dataContract(userContractSupplier(supplier));
defaultContractSupplier(supplier) = GROUP MAX contract AS contract BY supplierContract(contract);
dataDefaultContractSupplier(supplier) = dataContract(defaultContractSupplier(supplier));

overrideContractSupplier 'Основной договор' (supplier) = UNION OVERRIDE defaultContractSupplier(supplier), userContractSupplier(supplier);
dataOverrideContractSupplier 'Основной договор' (supplier) = dataContract(overrideContractSupplier(supplier)) IN lawGroup;
CONSTRAINT CHECKED supplier != supplierContract(userContractSupplier(supplier)) MSG 'ошибка: Договор по умолчанию для поставщика должен соответствовать договорам поставщика';
equalsSupplierContract 'Основной договор' (supplier, contract) = userContractSupplier(supplier) == contract;

inSupplierContract(supplier, contract) = supplierContract(contract) == supplier;
inSupplierAccount(supplier, account) = legalEntityAccount(account) == supplier;
inSupplierLicense(supplier, license) = legalEntityLicense(license) == supplier;

inCompanyContract(company, contract) = companyContract(contract) == company;
inCompanyAccount(company, account) = legalEntityAccount(account) == company;

nameSupplierContract 'Контрагент' (contract) = name(supplierContract(contract));
nameCompanyContract 'Контрагент' (contract) = name(companyContract(contract));

FORM supplier 'Поставщик'
OBJECTS s=supplier FIXED PANEL
OBJECTS a=account
OBJECTS c=contractProvider
OBJECTS l=license
PROPERTIES(s) nameOwnershipLegalEntity, name, fullNameLegalEntity, addressLegalEntity, lawLegalEntity, postAddressLegalEntity, managerLegalEntity, accountantLegalEntity,
              phoneLegalEntity, UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity, emailLegalEntity, siteLegalEntity, payerSupplier,
              dataOverrideAccountLegalEntity, residentLegalEntity, manufacturerLegalEntity, dataOverrideContractSupplier, sureSupplier, controlSupplier, surePercentSupplier, allowablePercentSupplier,
              afterDaysSupplier, forHoursSupplier, limitSupplier, prioritySupplier, signsSupplier, marksSupplier, dataOverrideLicenseLegalEntity
PROPERTIES(a) dataAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount, MFOBankAccount, noteAccount, ADDOBJ, delete
PROPERTIES(c) dataContract, nameCompanyContract, nameFormContract, nameTypeContract, dateFromContract, dateToContract, currencyContract, warnContract, banContract, delayContract,
              requestContract, noteContract, ADDOBJ, delete
PROPERTIES(l) dataLicense, dateFromLicense, dateToLicense, ADDOBJ, delete   //        tabaccoLicense
PROPERTIES(s,c) equalsSupplierContract
PROPERTIES(s,a) equalsLegalEntityAccount
PROPERTIES(s,l) equalsLegalEntityLicense
FILTERS NOT NULL inSupplierContract(s, c),
        NOT NULL inSupplierAccount(s, a),
        NOT NULL inSupplierLicense(s, l);

FORM suppliers 'Поставщики'
OBJECTS s=supplier
PROPERTIES(s) READONLY shortNameOwnershipLegalEntity, name, fullNameLegalEntity, lawLegalEntity, managerLegalEntity, phoneLegalEntity, UNPLegalEntity, emailLegalEntity, siteLegalEntity
PROPERTIES(s) ADDFORM, EDITFORM, delete;

FORM company 'Компания'
OBJECTS co=company FIXED PANEL
OBJECTS a=account
OBJECTS c=contract
PROPERTIES(co) nameOwnershipLegalEntity, shortNameOwnershipLegalEntity, name, fullNameLegalEntity, addressLegalEntity, lawLegalEntity, postAddressLegalEntity, managerLegalEntity, accountantLegalEntity,
              phoneLegalEntity, UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity, emailLegalEntity, siteLegalEntity
PROPERTIES(a) dataAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount, MFOBankAccount, noteAccount, ADDOBJ, delete
PROPERTIES(c) dataContract, nameSupplierContract, nameFormContract, nameTypeContract, dateFromContract, dateToContract, currencyContract, noteContract, ADDOBJ, delete
FILTERS NOT NULL inCompanyContract(co, c),
        NOT NULL inCompanyAccount(co, a);

FORM companys 'Компании'
OBJECTS co=company
PROPERTIES(co) READONLY shortNameOwnershipLegalEntity, name, fullNameLegalEntity, lawLegalEntity, managerLegalEntity, phoneLegalEntity, UNPLegalEntity, emailLegalEntity, siteLegalEntity
PROPERTIES(co) ADDFORM, EDITFORM, delete;

//---------------------------- по поставщикам и товарам ----------------------------------------

//---------------------------- Модели внешних устройств ----------------------------------------//
CLASS ABSTRACT model 'Модель' : named;
CLASS cashModel 'Модель касс' : model;
CLASS scalesModel 'Модель весов' : model;
CLASS checkModel 'Модель прайс чекеров' : model;

CLASS frontOffice 'Фронт офис';
nameFrontOffice 'Версия фронт офиса на кассе' = DATA STRING[100] (frontOffice) IN baseGroup;

noteModel 'Примечание' = DATA STRING[200] (model) IN baseGroup;
useModel 'Модель используется' = DATA BOOLEAN (model) IN baseGroup;
lettersModel 'Преобразовать наименование товара В ЗАГЛАВНЫЕ БУКВЫ' = DATA BOOLEAN (model) IN baseGroup;


frontOfficeCashModel 'Модель касс (ИД)' = DATA frontOffice (cashModel) IN idGroup;
nameFrontOfficeCashModel 'Версия фронт офиса на кассе' = nameFrontOffice(frontOfficeCashModel(cashModel)) IN baseGroup;
dateToCashModel 'Дата, до которой модель внесена в реестр' = DATA DATE (cashModel) IN baseGroup;
maxProductModel 'MAX допустимое колич.товаров' = DATA INTEGER (model) IN baseGroup;


FORM cashModel 'Модель касс'
OBJECTS c=cashModel FIXED PANEL
PROPERTIES(c) name, nameFrontOfficeCashModel, noteModel, useModel, dateToCashModel, lettersModel;

FORM cashModels 'Модели касс'
OBJECTS c=cashModel
PROPERTIES(c) READONLY name, nameFrontOfficeCashModel, noteModel, useModel, dateToCashModel, lettersModel
PROPERTIES(c) ADDFORM, EDITFORM, delete;

CLASS flash 'Прошивка';
nameFlash 'Модель весов/версия прошивки' = DATA STRING[100] (flash) IN baseGroup;

flashScalesModel 'Прошивка (ИД)' = DATA flash (cashModel) IN idGroup;
nameFlashScalesModel 'Модель весов/версия прошивки' = nameFlash(flashScalesModel(scalesModel)) IN baseGroup;
maxTextScalesModel 'MAX допустимое колич.дополнительных текстов' = DATA INTEGER (scalesModel) IN baseGroup;
folderScalesModel 'Папка на сервере весов с драйвером весов' = DATA STRING[200] (scalesModel) IN baseGroup;
compositionScalesModel 'Число знаков в доп.тексте(составе товара)' = DATA INTEGER (scalesModel) IN baseGroup;

FORM scalesModel 'Модель весов'
OBJECTS s=scalesModel FIXED PANEL
PROPERTIES(s) name, nameFlashScalesModel, noteModel, useModel, maxProductModel, maxTextScalesModel, folderScalesModel, lettersModel, compositionScalesModel;

FORM scalesModels 'Модели весов'
OBJECTS s=scalesModel
PROPERTIES(s) READONLY name, nameFlashScalesModel, noteModel, useModel, maxProductModel, maxTextScalesModel, folderScalesModel, lettersModel, compositionScalesModel
PROPERTIES(s) ADDFORM, EDITFORM, delete;

CLASS modelCheck 'Модель чекера';
nameModelCheck 'Модель прайс чекера' = DATA STRING[100] (modelCheck) IN baseGroup;

modelCheckModel 'Модель (ИД)' = DATA modelCheck (checkModel) IN idGroup;
nameModelCheckModel 'Модель прайс чекера' = nameModelCheck(modelCheckModel(checkModel)) IN baseGroup;

FORM checkModel 'Модель прайс чекера'
OBJECTS ch=checkModel FIXED PANEL
PROPERTIES(ch) name, nameModelCheckModel, noteModel, useModel, maxProductModel;

FORM checkModels 'Модели прайс чекеров'
OBJECTS ch=checkModel
PROPERTIES(ch) READONLY name, nameModelCheckModel, noteModel, useModel, maxProductModel
PROPERTIES(ch) ADDFORM, EDITFORM, delete;
