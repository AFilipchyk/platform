MODULE retail;

// Кол-ва - NUMERIC[14,3]
// Цены - NUMERIC[14,2]
// Суммы - NUMERIC[16,2]
// Ставка налога - NUMERIC[10,5]
// Надбавка - NUMERIC[8,3]
// Норма списания отходов - NUMERIC[10,3]

REQUIRE System,
        EvalScript,
        Utils,
        Hierarchy,
        Historizable,
        Numerator,
        Stock,
        Barcode,
        Document,
        Tax,
        Ware,
        Country,
        LegalEntityBy,
        OrderBy,
        SaleOrderBy,
        Agreement,
        Order,
        BlanketOrder,
        Invoice,
        Shipment,
        CreditNote,
        SaleOrder,
        SaleBlanketOrder,
        SaleInvoice,
        SaleShipment,
        SaleCreditNote,
        SaleReturnOrder,
        SaleReturnInvoice,
        SaleReturnShipment,
        SaleReturnCreditNote,
        SalePricing,
        Sale,
        Purchase,
        PurchaseOrder,
        PurchaseInvoice,
        PurchaseShipment,
        PurchaseCreditNote,
        PurchaseReturnOrder,
        PurchaseReturnInvoice,
        PurchaseReturnShipment,
        PurchaseReturnCreditNote,
        PurchaseReturnPricing,
        PurchaseWriteOff,
        PurchaseSaleShipment,
        PurchaseSaleInvoice,
        PurchaseSaleOrder,
        SalePurchase,
        Repricing,
        Employee,
        StockAdjustment,
        StoreShipment,
        StoreWriteOff,
        Store,
        PurchasePricingWriteOff,
        Statistics,
        ItemStatistics,
        ItemNaturalLoss,
        StoreStatistics,
        StorePricing,
        ConsignmentBy,
        AccountDocument,
        StorePrice,
        Sales,
        Machinery,
        CashRegister,
        Scales,
        PriceChecker,
        WriteOff,
        Terminal,
        Label,
        RetailCRM,
        CashOperation,
        POS,
        ContractStock,
        ContractLedger,
        Inventory,
        DefaultData,
        Item,
        ItemWare,
        ItemSize,
        ItemArticle,
        ItemWriteOff,
        PriceList,
        Transport,
        Route,
        Trip,
        Warehouse,
        WarehouseShipment,
        StockTax,
        ItemTax,
        NaturalLoss,
        WarePriceList;

// ----------------------------------- Свойства изменения объектов в Posted ------------------------------------------ //

GROUP itemDetailGroup 'Товар' : publicGroup;

META defineDocumentDetailSkuItemPrefix (object, prefix, caption)
    @defineDocumentDetailSkuPrefix(object, item, prefix, caption);

    prefix###nameAttributeItem###object##Detail 'Товар'###caption (detail) =
        nameAttributeItem(prefix###item###object##Detail(detail)) IN itemDetailGroup;

    prefix###shortNameUOMItem###object##Detail 'Ед. изм.'###caption (detail) =
        shortNameUOMItem(prefix###item###object##Detail(detail)) IN itemDetailGroup;

    prefix###articleItem###object##Detail 'Артикул'###caption (detail) = articleItem(prefix###item###object##Detail(detail)) IN itemDetailGroup;

    prefix###nameCountryItem###object##Detail 'Страна'###caption (detail) = nameCountryItem(prefix###item###object##Detail(detail)) IN itemDetailGroup;

    prefix###inWare###object##Detail 'Товар в посуде'###caption (detail) = inWareItem(prefix###item###object##Detail(detail)) IN itemDetailGroup;

    prefix###controlExpiryItem###object##Detail 'Контролировать сроки годности товара?'###caption (detail) =
        controlExpiryItem (prefix###item###object##Detail(detail)) IN itemDetailGroup;

    prefix###isWeightItem###object##Detail 'Весовой товар?'###caption (detail) = isWeightItem(prefix###item###object##Detail(detail)) IN itemDetailGroup;
END

META defineDocumentDetailSkuItem (object)
    @defineDocumentDetailSkuItemPrefix(object, , );
END

META defineDocumentHeaderItemRetailSumCustomPrefix (object, detail, prefix, caption)
    prefix###retailSum###detail##Item###object 'Розничная сумма (окр.) товара в документе' (item, object) =
            GROUP SUM retailSum###detail(idetail)
                  BY  item###detail(idetail),
                      object###detail(idetail);

    prefix###retailSumItem###detail###object 'Розничная сумма (окр.), товар'###caption (idetail) =
        GROUP SUM prefix###retailSum###detail(idetail) AND NOT isContainerItem(item###detail(idetail))
            BY object###detail(idetail) IN documentSumGroup;
    prefix###retailSumContainer###detail###object 'Розничная сумма (окр.), тара'###caption (idetail) =
        GROUP SUM prefix###retailSum###detail(idetail) IF isContainerItem(item###detail(idetail))
            BY object###detail(idetail) IN documentSumGroup;
END
META defineDocumentHeaderItemRetailSumCustom (object, detail)
    @defineDocumentHeaderItemRetailSumCustomPrefix(object, detail, , );
END
META defineDocumentHeaderItemRetailSumPrefix (object, prefix, caption)
    @defineDocumentHeaderItemRetailSumCustomPrefix(object, object##Detail, prefix, caption);
END
META defineDocumentHeaderItemRetailSum (object)
    @defineDocumentHeaderItemRetailSumCustomPrefix(object, object##Detail, , );
END

// ----------------------------------- Товарный классификатор ------------------------------------------ //

EXTEND CLASS itemGroup : roundGroup;
roundGroupSku(sku) += itemGroupItem(sku);

EXTEND CLASS itemGroup : discountSkuGroup;
inDiscountSkuGroupSku(discountSkuGroup, sku) += itemGroupItem(sku) == discountSkuGroup;

pieceNumeratorItemGroup = DATA numerator (itemGroup);
namePieceNumeratorItemGroup 'Нумератор штрих-кодов (для штучного товара)' (itemGroup) = name(pieceNumeratorItemGroup(itemGroup));

weightNumeratorItemGroup = DATA numerator (itemGroup);
nameWeightNumeratorItemGroup 'Нумератор штрих-кодов (для весового товара)' (itemGroup) = name(weightNumeratorItemGroup(itemGroup));

EXTEND FORM itemGroup
    PROPERTIES(g) namePieceNumeratorItemGroup, nameWeightNumeratorItemGroup
;

EXTEND FORM itemGroups
    PROPERTIES(g) BEFORE delete namePieceNumeratorItemGroup, nameWeightNumeratorItemGroup
;
// формы за формами товара


// ----------------------------------- Товар ------------------------------------------ //
GROUP expiryGroup 'Контроль сроков годности' : publicGroup;
GROUP equipmentGroup 'Внешние устройства' : publicGroup;
GROUP labelGroup 'Ценник' : publicGroup;

GROUP activeGroup 'Активность товара' : publicGroup;

tmpSku() = SESSION DATA sku ();

//-----------------------------------------------------------------------------------------------//

isContainerItem 'Тара' = DATA BOOLEAN (item) IN itemBaseGroup;
isContainerSku (sku) += isContainerItem(sku);
//@defineItemAttribute(Container, 'Показывать явл-ся ли тарой', displayGroup);

//equipmentGroup
isWeightItem 'Весовой товар' = DATA BOOLEAN (item) IN itemBaseGroup;
isWeightSku(sku) += isWeightItem(sku);

compositionScalesItem 'Состав товара (ингредиенты) для весов' = DATA TEXT (item) IN equipmentGroup;
isMarkItem 'Маркировать товар' = DATA BOOLEAN (item) IN equipmentGroup;
isLoafCutItem 'Буханка разрезается' = DATA BOOLEAN (item) IN equipmentGroup;

passScalesItem 'Передавать на весы' = DATA BOOLEAN (item) IN equipmentGroup;
labelFormatPackItem = DATA labelFormat(item);
idLabelFormatPackItem 'Код формата этикетки' (item) = idLabelFormat(labelFormatPackItem(item)) IN equipmentGroup;

//substanceGroup
GROUP substanceGroup 'Энергетическая ценность' : publicGroup;
nutritionalValueItem 'Энергетическая и пищевая ценность' = DATA STRING[400] (item) IN substanceGroup MINCHARWIDTH 50;
energyItem 'Энергетическая ценность на 100г, ккал' = DATA DOUBLE (item) IN substanceGroup;
fatsItem 'Жиры на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
carbohydratesItem 'Углеводы на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
proteinsItem 'Белки на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
isContainGMOItem 'Содержит ГМО' = DATA BOOLEAN (item) IN substanceGroup;

//sizeGroup
lengthPackItem 'Длина упаковки' = DATA NUMERIC[8,2] (item) IN itemSizeGroup;
widthPackItem 'Ширина упаковки' = DATA NUMERIC[8,2] (item) IN itemSizeGroup;
heightPackItem 'Высота упаковки' = DATA NUMERIC[8,2] (item) IN itemSizeGroup;
grossWeightPackItem 'Вес брутто упаковки' = DATA NUMERIC[9,3] (item) IN itemSizeGroup;

//expiryGroup
controlExpiryItem 'Контролировать сроки годности товара?' = DATA BOOLEAN (item) IN expiryGroup;
daysExpiryItem 'Срок годности в днях' = DATA NUMERIC[8,2] (item) IN expiryGroup;
daysExpiryPackItem 'Срок годности в днях с момента фасовки' = DATA NUMERIC[8,2] (item) IN expiryGroup;
hoursExpiryPackItem 'Срок годности в часах с момента фасовки' = DATA INTEGER (item) IN expiryGroup;

// ----------------------------------- Штрих код ------------------------------------------ //

daysExpiryBarcode 'Срок годности в днях' = daysExpiryPackItem(skuBarcode(barcode));
hoursExpiryBarcode 'Срок годности в часах' = hoursExpiryPackItem(skuBarcode(barcode));
labelFormatBarcode 'Формат этикетки' = idLabelFormatPackItem(skuBarcode(barcode));
compositionBarcode 'Состав товара' = compositionScalesItem(skuBarcode(barcode));
isWeightBarcode 'Весовой' = isWeightItem(skuBarcode(barcode));
expiryDateBarcodeStock 'Крайний срок годности' (barcode, stock) = expiryDateSkuStock(skuBarcode(barcode), stock);

pieceNumeratorItem (item) = pieceNumeratorItemGroup(itemGroupItem(item));
weightNumeratorItem (item) = weightNumeratorItemGroup(itemGroupItem(item));

barcodeNumeratorSku(item) += IF isWeightItem(item) THEN weightNumeratorItem(item) ELSE pieceNumeratorItem(item);

//------------------------------------ Товар с историей -------------------------------------------------------------//

@defineHistorizableCustom(inactiveItem, 'Неактивный товар', yesNo, name, item, nameAttributeItem, activeGroup);
isActiveItem (item) = item IS item AND NOT inactiveItem(item) == yesNo.yes PERSISTENT;
EXTEND FORM items
    FILTERGROUP filters
        FILTER 'Отображать только активные товары' 'F10' isActiveItem(i) DEFAULT
;

//------------------------------------ Товар для подразделения с историей -------------------------------------------//

TABLE itemDepartmentStore (item, departmentStore);
TABLE itemDepartmentStoreDate (item, departmentStore, DATE);

defaultLabelTypeItemDepartmentStore(item, departmentStore) = defaultLabelTypeDepartmentStore(departmentStore) AND item IS item;
@defineHistorizableCustomDefault(labelItemDepartmentStore, defaultLabelTypeItemDepartmentStore, 'Ценник', labelType, name, item, nameAttributeItem, departmentStore, name, 10, labelGroup);
labelBarcodeDepartmentStoreDate (barcode, departmentStore, date) = labelItemDepartmentStoreDate(skuBarcode(barcode), departmentStore, date);

CONSTRAINT dataLabelItemDepartmentStoreDate(item, departmentStore, date) AND NOT inLabelTypeDepartmentStore(dataLabelItemDepartmentStoreDate(item, departmentStore, date), departmentStore)
    CHECKED BY dataLabelItemDepartmentStoreDate MESSAGE 'Тип ценника запрещен для выбранного отдела магазина';

@defineHistorizable(multiplierItemDepartmentStore, 'Множитель', INTEGER, item, nameAttributeItem, departmentStore, name, labelGroup);
valOverMultiplierItemDepartmentStoreDate (item, departmentStore, date) = UNION OVERRIDE 1 IF item IS item AND departmentStore IS departmentStore AND date IS DATE,
                                                                               multiplierItemDepartmentStoreDate(item, departmentStore, date);
valOverMultiplierBarcodeDepartmentDate (barcode, departmentStore, date) = valOverMultiplierItemDepartmentStoreDate(skuBarcode(barcode), departmentStore, date);

EXTEND FORM item

    PROPERTIES(i) isContainerItem,
                  isWeightItem,

// убрал до след коммита
//                  nameGroupNaturalLossItem, rateGroupNaturalLossItem, //nameStatisticGroupSku,

                  lengthPackItem, widthPackItem, heightPackItem, grossWeightPackItem,

                  nameInactiveItem, dialogInactiveItem,

                  // Дополнительные
                  passScalesItem, isMarkItem, isLoafCutItem,
                  compositionScalesItem, idLabelFormatPackItem,

                  nutritionalValueItem, energyItem,
                  fatsItem, carbohydratesItem, proteinsItem, isContainGMOItem,

                  controlExpiryItem, daysExpiryItem, daysExpiryPackItem, hoursExpiryPackItem,

                  quantityPackItem

    PROPERTIES(b) BEFORE delete titleScalesBarcode, titleCashRegisterBarcode

    // Управленческие параметры
    TREE treeStore a=STRING[3], t=chainStores, st=storeType, s=store
    PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS stringEqualsAll(a), inChainStoresStoreType (t, st), inStoreTypeStore (st, s)

    OBJECTS dt=DATE FIXED PANEL, d=departmentStore
    PROPERTIES (d) name
    FILTERS inChainStoresStoreTypeStoreDepartment(t, st, s, d)

    PROPERTIES (dt) OBJVALUE BACKGROUND dateDiffersCurrent(dt)
    PROPERTIES      overNameLabelItemDepartmentStoreDate(i, d, dt) BACKGROUND dataLabelItemDepartmentStoreDate(i, d, dt), overDialogLabelItemDepartmentStoreDate(i, d),
                    overMultiplierItemDepartmentStoreDate(i, d, dt) BACKGROUND dataMultiplierItemDepartmentStoreDate(i, d, dt), overDialogMultiplierItemDepartmentStoreDate(i, d)

    EDIT item OBJECT i
;

EXTEND DESIGN item {
    main {
        itemDetail {
            itemPrimary {
                itemPrimaryColumn1 {
                }

                itemPrimaryColumn2 {
//                    ADD i.rateGroup {
//                        childConstraints = TO THE BOTTOM;
//                    }
                    ADD i.activeGroup;
                }
            }

            NEW itemAdditional AFTER itemPrimary {
                title = 'Дополнительные';
                fillVertical = 1.0;
                fillHorizontal = 1.0;

                NEW containerALeft {
                    childConstraints = TO THE BOTTOM;
                    ADD i.equipmentGroup {
                        childConstraints = TO THE BOTTOM;
                    }
                }

                NEW containerARight {
                    childConstraints = TO THE BOTTOM;
                    ADD i.substanceGroup{
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.expiryGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                };

                POSITION containerALeft TO THE LEFT containerARight;
            }

            ADD d.box AFTER itemAdditional {
                title = 'Управленческие параметры';

                fillVertical = 1.0;
                fillHorizontal = 1.0;
                ADD dt.box BEFORE d.grid.box;
                ADD treeStore.tree.box BEFORE d.grid.box;
                POSITION treeStore.tree.box TO THE LEFT d.grid.box;
                POSITION d.grid.box TO THE LEFT d.panel;
                d.grid.box {
                    fillHorizontal = 3;
                };
            }
       }
    }
}

//---------------------------- Документы качества ----------------------------------------//

CLASS ABSTRACT paper 'Документы качества' : named;
TABLE paper(paper);


CLASS customsCertificate 'Таможенный сертификат' : paper;
CLASS certificateGGR 'Удостоверение о ГГР' : paper;
CLASS certificateConformity 'Сертификат соответствия' : paper;
CLASS stateExamination 'Акт гос. сан.-гиг. экспертизы' : paper;

numberPaper 'Номер документа' (paper) = DATA STRING[30] (paper) IN baseGroup;
datePaper 'Дата документа' (paper) = DATA DATE (paper) IN baseGroup;
dateToPaper 'Срок действия' (paper) = DATA DATE (paper) IN baseGroup;
holderPaper 'Держатель ИД' (paper) = DATA legalEntity (paper);
nameHolderPaper 'Наименование держателя' (paper) = name(holderPaper(paper)) IN baseGroup;
issuedPaper 'Документ выдал ИД' (paper) = DATA legalEntity (paper);
nameIssuedPaper 'Наименование органа, выдавшего документ' (paper) = name(issuedPaper(paper)) IN baseGroup;

FORM paper 'Документ качества'
    OBJECTS p=paper FIXED PANEL
    PROPERTIES(p) numberPaper, datePaper, dateToPaper, nameHolderPaper, nameIssuedPaper

    EDIT paper OBJECT p
    EDIT customsCertificate OBJECT p
    EDIT certificateGGR OBJECT p
    EDIT certificateConformity OBJECT p
    EDIT stateExamination OBJECT p
;

DESIGN paper FROM DEFAULT {

    NEW row BEFORE functions.box{
        childConstraints = TO THE BOTTOM;

        NEW row1 {
            title = 'Шапка документа';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY(numberPaper(p));
            ADD PROPERTY(datePaper(p));
            ADD PROPERTY(dateToPaper(p));
        }
        NEW row2 {
            title = 'Организации';
            childConstraints = TO THE BOTTOM;
            ADD PROPERTY(nameHolderPaper(p));
            ADD PROPERTY(nameIssuedPaper(p));
        }
    }
}

FORM papers 'Документы качества'
    OBJECTS p=paper
    PROPERTIES(p)  objectClassName, numberPaper, datePaper, dateToPaper, nameHolderPaper, nameIssuedPaper
    PROPERTIES(p)  ADDFORM, EDITFORM, delete
    ORDER BY objectClassName
;

// -------------------------------------------- Подключение модуля POS -------------------------------------- //
@implementSkuLedgerReceiptDetail();
@implementAccountDocumentLedgerZReport();

// ------------------------------------------- Загрузка в ВУ --------------------------------------------- //

@defineMachineryPriceTransactionAttribute(labelFormat, 'Формат этикетки', INTEGER);

@defineMachineryPriceTransactionAttribute(daysExpiry, 'Срок годности в днях с момента фасовки', NUMERIC[8,2]);
@defineMachineryPriceTransactionAttribute(hoursExpiry, 'Срок годности в часах с момента фасовки', INTEGER);
@defineMachineryPriceTransactionAttributeStock(expiryDate, 'Срок годности (дата)', DATE);

@defineMachineryPriceTransactionAttribute(isWeight, 'Весовой товар', BOOLEAN);
@defineMachineryPriceTransactionAttribute(composition, 'Состав товара', TEXT);

// Кассы
createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += ACTION (transaction, groupMachinery) {
    IF groupMachinery IS groupCashRegister THEN
        SET nameMachineryPriceTransactionBarcode(transaction, barcode) <- titleCashRegisterBarcode(barcode) WHERE inMachineryPriceTransactionBarcode(transaction, barcode);
}

// Весы
createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += ACTION (transaction, groupMachinery) {
    IF groupMachinery IS groupScales THEN
        SET nameMachineryPriceTransactionBarcode(transaction, barcode) <- titleScalesBarcode(barcode) WHERE inMachineryPriceTransactionBarcode(transaction, barcode);
}
overInGroupMachinerySku(groupMachinery, sku) += groupMachinery IS groupScales AND sku IS item AND NOT passScalesItem(sku);

synchronizeCompositionMachineryPriceTransactionGroupScales = ACTION (transaction, groupMachinery) {
    FOR compositionMachineryPriceTransactionBarcode(transaction, barcode) AND groupMachinery IS groupScales
        AND NOT cellScalesGroupScalesComposition(groupMachinery, compositionMachineryPriceTransactionBarcode(transaction, barcode))
        ADDOBJ c = cellScales DO {
            SET groupScalesCellScales(c) <- groupMachinery;
            SET compositionCellScales(c) <- compositionMachineryPriceTransactionBarcode (transaction, barcode);
        }
}

snapshotAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += synchronizeCompositionMachineryPriceTransactionGroupScales(transaction, groupMachinery);
createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += synchronizeCompositionMachineryPriceTransactionGroupScales(transaction, groupMachinery);

// Прайс-чекеры
createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += ACTION (transaction, groupMachinery) {
    IF groupMachinery IS groupPriceChecker THEN
        SET nameMachineryPriceTransactionBarcode(transaction, barcode) <- titleCashRegisterBarcode(barcode) WHERE inMachineryPriceTransactionBarcode(transaction, barcode);
}

// Терминалы сбора даных
createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += ACTION (transaction, groupMachinery) {
    IF groupMachinery IS groupTerminal THEN
        SET nameMachineryPriceTransactionBarcode(transaction, barcode) <- titleCashRegisterBarcode(barcode) WHERE inMachineryPriceTransactionBarcode(transaction, barcode);
}

//---------------------------- Карты проработки (разруба) ----------------------------------------//
GROUP cutGroup 'Разделка' : baseGroup;
GROUP actGroup 'Акт' : publicGroup;
GROUP itemStudyOutputDetailInfo 'Ценовый характеристики п/ф' : publicGroup;

CLASS cutting 'Карта проработки (разделки)' : named, numeratedObject;
TABLE cutting (cutting);

CLASS cuttingDetail 'Компонента';
TABLE cuttingDetail (cuttingDetail);

dateCutting 'Дата создания' = DATA DATE (cutting) IN cutGroup;
dateCutting(cutting) <- currentDate() WHEN ASSIGNED(cutting IS cutting);

useCutting 'Используется' = DATA BOOLEAN (cutting) IN cutGroup;
descriptionCutting 'Описание' = DATA STRING[200] (cutting) IN cutGroup;

percAllowancesCutting 'Процент надбавок, %' = DATA NUMERIC[8,3] (cutting) IN cutGroup;
percLossesCutting 'Процент потерь, %' = DATA NUMERIC[8,3] (cutting) IN cutGroup;
percSweepsCutting 'Процент зачисток, %' = DATA NUMERIC[8,3] (cutting) IN cutGroup;

inDepartmentStoreCutting 'В каких подразделениях разрешено использовать карту' = DATA BOOLEAN (departmentStore, cutting) IN baseGroup;

@defineDocumentRelation(cutting);
@defineDocumentDetailSkuItem(cutting);

factorCuttingDetail 'Рассчетный коэффициент цены' = DATA NUMERIC[8,3] (cuttingDetail) IN cutGroup;
percGoodsCuttingDetail '% выхода компонента (п/ф)' = DATA NUMERIC[8,3] (cuttingDetail) IN cutGroup;

notTotalPercGoodsCuttingDetail (cutting) = GROUP SUM percGoodsCuttingDetail(cuttingDetail) BY cuttingCuttingDetail(cuttingDetail);
totalPercGoodsCutting 'Итого % выхода по карте проработки (разделки)' (cutting) = notTotalPercGoodsCuttingDetail(cutting) (+)
    percLossesCutting(cutting) (+) percSweepsCutting(cutting);
highlightCutting(cutting) = totalPercGoodsCutting(cutting) > 100;

inItemCutting 'Вкл.' = DATA BOOLEAN (item, cutting) IN cutGroup;

FORM cutting 'Карта проработки'
    OBJECTS c=cutting FIXED PANEL
    OBJECTS d=cuttingDetail
    PROPERTIES(c)      nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, descriptionCutting, dateCutting,
                       useCutting, percAllowancesCutting, percLossesCutting, percSweepsCutting
    PROPERTIES(c)      totalPercGoodsCutting TODRAW d FORCE PANEL  BACKGROUND highlightCutting(c)


    PROPERTIES(d)      nameAttributeItemCuttingDetail, shortNameUOMItemCuttingDetail, factorCuttingDetail, percGoodsCuttingDetail, ADDOBJ, delete

    TREE treeStore a=STRING[3], t=chainStores, st=storeType, s=store
        PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
        FILTERS stringEqualsAll(a), inChainStoresStoreType (t, st), inStoreTypeStore(st, s)

        OBJECTS dep=departmentStore
        PROPERTIES(dep) READONLY depName = name
        FILTERS inChainStoresStoreTypeStoreDepartment(t, st, s, dep)
        ORDER BY depName

    TREE treeGroup g=itemGroup PARENT parentItemGroup
        PROPERTIES READONLY gname = name(g)
        ORDER BY gname

        OBJECTS i=item
        PROPERTIES READONLY idBarcodeSku(i), nameAttributeItemGroupItem(g, i), shortNameUOMItem(i), nameBrandItem(i)
        FILTERS nameAttributeItemGroupItem(g, i)
        ORDER BY nameAttributeItemGroupItem

    PROPERTIES(dep, c) inDepartmentStoreCutting
    PROPERTIES(i, c)   inItemCutting

    FILTERS inCuttingCuttingDetail(c, d)
    FILTERGROUP filters7
        FILTER 'Показывать подразделения только для данной карты' 'F10' inDepartmentStoreCutting(dep, c)
    FILTERGROUP filters8
        FILTER 'Показывать товар только для данной карты' 'F9' inItemCutting(i, c)

    EDIT cutting OBJECT c
;

DESIGN cutting FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW cut.box BEFORE functions.box{
            type = TABBED;
            ADD d.box;
            NEW caseOneBox {
                title = 'Подразделение';

                ADD treeStore.tree.box;
                ADD dep.box {
                    fillHorizontal = 2;
                };
                POSITION treeStore.tree.box TO THE LEFT dep.box;
            }
            NEW caseTwoBox { title = 'Товар, для которого действует карта';
                ADD treeGroup.tree.box;
                ADD i.box {
                    fillHorizontal = 2;
                };
                POSITION treeGroup.tree.box TO THE LEFT i.box;
            }
        }
    }
}

FORM cuttings 'Карты проработки'
    OBJECTS c=cutting
    PROPERTIES(c)      READONLY numberObject, seriesObject, descriptionCutting, dateCutting, useCutting, percAllowancesCutting,
                       percLossesCutting, percSweepsCutting
    PROPERTIES(c)      ADDFORM, EDITFORM, delete

    OBJECTS d=cuttingDetail
    PROPERTIES(d)      READONLY nameAttributeItemCuttingDetail, shortNameUOMItemCuttingDetail, factorCuttingDetail, percGoodsCuttingDetail

    OBJECTS dep=departmentStore
    PROPERTIES(dep)    READONLY nameStoreDepartmentStore, name

    OBJECTS i=item
    PROPERTIES(i)      READONLY idBarcodeSku, nameAttributeItem, shortNameUOMItem, nameBrandItem

    PROPERTIES(dep, c) READONLY inDepartmentStoreCutting

    PROPERTIES(i, c) READONLY inItemCutting

    FILTERS   inCuttingCuttingDetail(c, d),
              inDepartmentStoreCutting(dep, c),
              inItemCutting(i, c)
    ORDER BY           nameStoreDepartmentStore, seriesObject, numberObject, nameAttributeItemCuttingDetail, name
    FILTERGROUP filters1
        FILTER 'Только используемые' 'F10' useCutting(c) DEFAULT

;


DESIGN cuttings FROM DEFAULT {
    main{

        NEW topContainer {

            type = SPLITV;
            childConstraints = TO THE RIGHT;

            NEW firstCase{

                type = SPLITV;

                ADD c.box;
                ADD d.box;
            }

            NEW secondCase {

                type = SPLITH;
                childConstraints = TO THE RIGHT;

                ADD dep.box { title = 'Подразделение'; }
                ADD i.box { title = 'Товар, для которого действует карта'; }
            }
        }

        ADD functions.box;
    }
}

FORM seriesNumberCuttingStudyInputDetail 'Возможные карты проработки'
    OBJECTS dep=departmentStore FIXED PANEL, i=item FIXED PANEL

    PROPERTIES         READONLY depName = name(dep)
    PROPERTIES         READONLY nameAttributeItem(i)

    OBJECTS c=cutting
    PROPERTIES(c)      READONLY seriesNumberObject, descriptionCutting, dateCutting, useCutting, percAllowancesCutting, percLossesCutting,
                       percSweepsCutting, totalPercGoodsCutting

    FILTERS            inDepartmentStoreCutting(dep, c),
                       inItemCutting(i, c),
                       useCutting(c)
;

DESIGN seriesNumberCuttingStudyInputDetail FROM DEFAULT {
    PROPERTY(depName) {
        focusable = FALSE;
    }
    PROPERTY(nameAttributeItem) {
        focusable = FALSE;
    }
}

// Акты проработки

CLASS actOfStudy 'Акт проработки (разделки)' : historizable, numeratedDocument;
TABLE actOfStudy (actOfStudy);

CLASS actOfStudyPosted 'Проведенный акт проработки' : actOfStudy, postedObject;

// шапка дакта
@defineDocumentHeaderTime(actOfStudy);
@defineDocumentHeaderDepartmentStore(actOfStudy);
@defineDocumentHeaderPosted (actOfStudy);

CLASS studyInputDetail 'Строка проработки (вход)';
TABLE studyInputDetail(studyInputDetail);

CLASS studyOutputDetail 'Строка проработки (выход)';
TABLE studyOutputDetail(studyOutputDetail);

// строки расхода
@defineDocumentRelation(actOfStudy, studyInputDetail);

@defineDocumentDetailDepartmentStoreCustom(actOfStudy, studyInputDetail);
@defineDocumentDetailTime(actOfStudy, studyInputDetail);

@defineDocumentDetailSkuItem(studyInput);

@defineDocumentDetailQuantity(studyInput);

@defineDocumentDetailBasePrice(studyInput, departmentStore);
@deriveBasePriceLedgerOnSkuChange(studyInput, item);

@defineDocumentDetailBaseSum(studyInput);

@defineDocumentDetailPosted(actOfStudy, studyInputDetail);

@defineDocumentHeaderQuantityCustom(actOfStudy, studyInputDetail);
@defineDocumentHeaderSkuQuantityCustom(actOfStudy, studyInputDetail, item);

@defineDocumentHeaderBaseSumCustom(actOfStudy, studyInputDetail);

@defineDocumentHeaderItemRetailSumCustom(actOfStudy, studyInputDetail);

// custom информация по акту
contractorDepartmentStoreActOfStudy (actOfStudy)= DATA departmentStore (actOfStudy);
nameContractorDepartmentStoreActOfStudy 'Отдел-контрагент' (actOfStudy) = name(contractorDepartmentStoreActOfStudy(actOfStudy)) IN documentPrmGroup;

numberOutputActOfStudy 'Номер расходной накладной' (actOfStudy) = DATA STRING[7] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 7;
seriesOutputActOfStudy 'Серия расходной накладной' (actOfStudy) = DATA STRING[2] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 3;

numberInputActOfStudy 'Номер приходной накладной' (actOfStudy) = DATA STRING[7] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 7;
seriesInputActOfStudy 'Серия приходной накладной' (actOfStudy) = DATA STRING[2] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 3;

descriptionActOfStudy 'Название документа' (actOfStudy) =
    [FORMULA STRING[200] '\'Акт разруба \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'] (
    seriesNumberObject(actOfStudy), dateActOfStudy(actOfStudy), nameContractorDepartmentStoreActOfStudy(actOfStudy));

cuttingStudyInputDetail = DATA cutting (studyInputDetail);
seriesNumberCuttingStudyInputDetail 'Номер карты' (studyInputDetail) = seriesNumberObject(cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
dateCuttingStudyInputDetail 'Дата создания карты' (studyInputDetail) = dateCutting(cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
descriptionCuttingStudyInputDetail 'Описание' (studyInputDetail) = descriptionCutting(cuttingStudyInputDetail(studyInputDetail)) IN actGroup MINCHARWIDTH 20 PREFCHARWIDTH 20;

percAllowancesCuttingStudyInputDetail 'Процент надбавок, %' (studyInputDetail) = percAllowancesCutting(cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
percLossesCuttingStudyInputDetail 'Процент потерь, %' (studyInputDetail) = percLossesCutting (cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
percSweepsCuttingStudyInputDetail 'Процент зачисток, %' (studyInputDetail) = percSweepsCutting (cuttingStudyInputDetail(studyInputDetail)) IN actGroup;

// строки расхода

studyInputDetailStudyOutputDetail = DATA studyInputDetail (studyOutputDetail);
actOfStudyStudyOutputDetail(studyOutputDetail) = actOfStudyStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail)) PERSISTENT;

@defineDocumentDetailDepartmentStoreCustom(actOfStudy, studyOutputDetail);
@defineDocumentDetailTime(actOfStudy, studyOutputDetail);

@defineDocumentDetailSkuItem(studyOutput);

factorStudyOutputDetail 'Рассчетный коэффициент цены' = DATA NUMERIC[8,3] (studyOutputDetail) IN actGroup;
percGoodsStudyOutputDetail '% выхода компонента (п/ф)' = DATA NUMERIC[10,5] (studyOutputDetail) IN actGroup;

percAllowancesStudyOutputDetail 'Процент надбавок, %' = DATA NUMERIC[8,3] (studyOutputDetail) IN actGroup;
overPercAllowancesStudyOutputDetail (studyOutputDetail) = UNION OVERRIDE 0 IF studyOutputDetail IS studyOutputDetail,
                                                                         percAllowancesStudyOutputDetail(studyOutputDetail);

calculatedStudyOutputDetail 'Количество выхода п/ф' (studyOutputDetail) =  [X*Y/100]
    (quantityStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail)), percGoodsStudyOutputDetail(studyOutputDetail));

actualQuantityStudyOutputDetail 'Фактический выход п/ф'(studyOutputDetail) = DATA NUMERIC[14,3] (studyOutputDetail);
quantityStudyOutputDetail(studyOutputDetail) = UNION OVERRIDE calculatedStudyOutputDetail(studyOutputDetail),
                                                              actualQuantityStudyOutputDetail(studyOutputDetail);

@defineDocumentDetailBasePrice(studyOutput, departmentStore);
@defineDocumentDetailBaseSum(studyOutput);

@defineDocumentDetailBasePricePrefix(studyOutput, departmentStore, cur, ' (тек.)');
@deriveBasePriceLedgerOnSkuChangePrefix(studyOutput, cur, item);

@defineDocumentDetailPosted(actOfStudy, studyOutputDetail);

@defineDocumentHeaderQuantityCustom(actOfStudy, studyOutputDetail);
@defineDocumentHeaderSkuQuantityCustom(actOfStudy, studyOutputDetail, item);

@defineDocumentHeaderBaseSumCustom(actOfStudy, studyOutputDetail);

@defineDocumentHeaderItemRetailSumCustom(actOfStudy, studyOutputDetail);

expiryDateStudyOutputDetail 'Годен до' (studyOutputDetail) = DATA DATE(studyOutputDetail) IN baseGroup;

// используется для закачки в мета-коде
quantityActOfStudyDetailItemActOfStudy 'Кол-во для закачки в оборудование' (item, actOfStudy) = GROUP SUM quantityStudyOutputDetail(studyOutputDetail) BY itemStudyOutputDetail(studyOutputDetail), actOfStudyStudyOutputDetail(studyOutputDetail);

notTotalPercGoodsStudyInputDetail (studyInputDetail)= GROUP SUM percGoodsStudyOutputDetail(studyOutputDetail) BY studyInputDetailStudyOutputDetail(studyOutputDetail);
totalPercGoodsStudyInputDetail 'Итого % выхода по товару' (studyInputDetail) = notTotalPercGoodsStudyInputDetail(studyInputDetail) (+)
    percLossesCuttingStudyInputDetail(studyInputDetail)(+) percSweepsCuttingStudyInputDetail(studyInputDetail);
highlightStudyInputDetail(studyInputDetail) = totalPercGoodsStudyInputDetail(studyInputDetail) > 100;

roundImporterPriceStudyOutputDetail 'Расчетная цена импортера' (studyOutputDetail) = round2(
    importerPriceStudyInputDetail (studyInputDetailStudyOutputDetail(studyOutputDetail)) * factorStudyOutputDetail(studyOutputDetail));

roundSupplierPriceStudyOutputDetail 'Расчетная цена поставщика' (studyOutputDetail) = round2(
    supplierPriceStudyInputDetail (studyInputDetailStudyOutputDetail(studyOutputDetail)) * factorStudyOutputDetail(studyOutputDetail));

roundRetailPriceStudyOutputDetail 'Расчетная розничная цена' (studyOutputDetail) = roundM1([X*Y*(100+Z)/100]
    (retailPriceStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail)), factorStudyOutputDetail(studyOutputDetail), overPercAllowancesStudyOutputDetail(studyOutputDetail)));

toFillStudyOutputDetailsStudyInputDetail 'Заполнить данные для п/ф' (studyInputDetail) =  ACTION (studyInputDetail) {
    FOR cuttingCuttingDetail(cuttingDetail) == cuttingStudyInputDetail(studyInputDetail) DO {
        ADDOBJ studyOutputDetail;
        FOR sod == addedObject() DO {
            SET itemStudyOutputDetail(sod) <- itemCuttingDetail(cuttingDetail);
            SET factorStudyOutputDetail(sod) <- factorCuttingDetail(cuttingDetail);
            SET percGoodsStudyOutputDetail(sod) <- percGoodsCuttingDetail(cuttingDetail);
            SET percAllowancesStudyOutputDetail(sod) <- percAllowancesCutting(cuttingCuttingDetail(cuttingDetail));
            SET retailPriceStudyOutputDetail(sod) <- roundRetailPriceStudyOutputDetail(sod);
            SET importerPriceStudyOutputDetail(sod) <- roundImporterPriceStudyOutputDetail(sod);
            SET supplierPriceStudyOutputDetail(sod) <- roundSupplierPriceStudyOutputDetail(sod);
            SET retailVATStudyOutputDetail(sod) <- retailVATStudyInputDetail(studyInputDetailStudyOutputDetail(sod));
        };
    }
} CONFIRM;

showNotStudyInputDetailStudyOutputDetail(studyInputDetail, studyOutputDetail) = studyInputDetail IS studyInputDetail AND NOT studyInputDetailStudyOutputDetail(studyOutputDetail);

deleteStudyOutputDetailStudyInputDetail 'Очистить позиции' = ACTION (studyInputDetail) {
    FOR studyInputDetailStudyOutputDetail(studyOutputDetail) == studyInputDetail DO {
        EXEC delete(studyOutputDetail AS studyOutputDetail);
    }
} CONFIRM;

//---------------------------- Документы изменяющие суммы при разрубе --------------------------------//

//  приходный документ //

CLASS parish 'Приходный документ (разруб)';
TABLE parish (parish);

isActOfStudy(actOfStudy) = actOfStudy IS actOfStudy;

         //  приходный документ //
@defineAggregation(actOfStudy, parish, isActOfStudy);

dateParish (parish) = dateActOfStudy(actOfStudyParish(parish));
dateTimeParish 'Дата/время' (parish) = dateTimeActOfStudy(actOfStudyParish(parish));
seriesNumberParish 'Серия/Номер' (parish) = seriesNumberObject(actOfStudyParish(parish));
isPostedParish (parish) = isPostedActOfStudy(actOfStudyParish(parish));
departmentStoreParish (parish) = departmentStoreActOfStudy(actOfStudyParish(parish));

contractorDepartmentStoreParish (parish) = contractorDepartmentStoreActOfStudy(actOfStudyParish(parish));
nameContractorDepartmentStoreParish 'Отдел поставки' (parish) = name(contractorDepartmentStoreParish(parish));

retailSumParish 'Сумма прихода' (parish) = retailSumStudyOutputDetailActOfStudy(actOfStudyParish(parish));

descriptionParish 'Название документа' (parish) =
    [FORMULA STRING[200] '\'Акт разруба приход \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberParish(parish), dateParish(parish), nameContractorDepartmentStoreParish(parish)) PERSISTENT;

descriptionStudyOutputDetail 'Название документа' (studyOutputDetail) = descriptionParish(parishActOfStudy(actOfStudyStudyOutputDetail(studyOutputDetail))) PERSISTENT;

@implementBatch(studyOutputDetail, item, departmentStore, supplierPrice);
quantityBatch (ledger) += quantityStudyOutputDetail(ledger);
expiryDateBatch (ledger) += expiryDateStudyOutputDetail(ledger);
sumInSkuLedger (ledger) += retailSumStudyOutputDetail(ledger);

@implementBaseISkuDepartmentStoreLedger(studyOutput, item);

@implementAccountDocumentLedgerInc(parish, departmentStore);
sumIncAccountDocumentLedger (ledger) += retailSumParish(ledger);
sumItemIncAccountDocumentLedger (ledger) += retailSumParish(ledger);
sumContainerIncAccountDocumentLedger (ledger) += 0.0 IF ledger IS parish;

//  расходный документ //

CLASS consumption 'Расходный документ (разруб)';
TABLE consumption (consumption);

@defineAggregation(actOfStudy, consumption, isActOfStudy);

dateConsumption (consumption) = dateActOfStudy(actOfStudyConsumption(consumption));
dateTimeConsumption 'Дата/время' (consumption) = dateTimeActOfStudy(actOfStudyConsumption(consumption));
seriesNumberConsumption 'Серия/Номер' (consumption) = seriesNumberObject(actOfStudyConsumption(consumption));
isPostedConsumption (consumption) = isPostedActOfStudy(actOfStudyConsumption(consumption));
departmentStoreConsumption (consumption) = departmentStoreActOfStudy(actOfStudyConsumption(consumption));

contractorDepartmentStoreConsumption (consumption) = contractorDepartmentStoreActOfStudy(actOfStudyConsumption(consumption));
nameContractorDepartmentStoreConsumption 'Отдел назначения' (consumption) = name(contractorDepartmentStoreConsumption(consumption));

retailSumConsumption 'Сумма расхода' (consumption) = retailSumStudyInputDetailActOfStudy(actOfStudyConsumption(consumption));

descriptionConsumption 'Название документа' (consumption) =
    [FORMULA STRING[200] '\'Акт разруба расход \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberConsumption(consumption), dateConsumption(consumption), nameContractorDepartmentStoreConsumption(consumption));

descriptionStudyInputDetail 'Название документа' (studyInputDetail) = descriptionConsumption(consumptionActOfStudy(actOfStudyStudyInputDetail(studyInputDetail))) PERSISTENT;

@implementSkuLedgerOutFIFO(studyInputDetail, item, departmentStore);
quantityOutFIFOSkuLedger (ledger) += quantityStudyInputDetail(ledger);
@implementSkuLedgerOutFIFOBalance(studyInputDetail, item, departmentStore);
sumOutSkuLedger (ledger) += retailSumStudyInputDetail(ledger);

@implementAccountDocumentLedgerOut(consumption, departmentStore);
sumOutAccountDocumentLedger (ledger) += retailSumConsumption(ledger);
sumItemOutAccountDocumentLedger (ledger) += retailSumConsumption(ledger);
sumContainerOutAccountDocumentLedger (ledger) += 0.0 IF ledger IS consumption;

showSeriesNumberCuttingStudyInputDetail 'Карта проработки' = ACTION (detail) {
    FORM seriesNumberCuttingStudyInputDetail OBJECTS dep=departmentStoreStudyInputDetail(detail), i=itemStudyInputDetail(detail) MODAL;
    IF formResult() == formResult.ok THEN {
        SET cuttingStudyInputDetail(detail) <- chosenObject('c');
    }
} SHORTCUT seriesNumberCuttingStudyInputDetail DEFAULT;

//----------------------------------------------- Списание товара ---------------------------------------------------//

// Проводим по регистру

limitOutFIFOSkuLedgerBatch(ledger, batch) += IF batchWriteOffDetail(ledger) THEN
                                                quantityWriteOffDetail(ledger) AND batch == batchWriteOffDetail(ledger)
                                             ELSE
                                                currentBalanceBatchStock(batch, stockWriteOffDetail(ledger));

changedDataSkuLedger(ledger) += CHANGED(batchWriteOffDetail(ledger));

// Товарный отчет
sumItemOutAccountDocumentLedger (ledger) += sumItemWriteOffDetailWriteOff(ledger);
sumContainerOutAccountDocumentLedger (ledger) += sumContainerWriteOffDetailWriteOff(ledger);

//------------------------------------------------- Z-отчет ---------------------------------------------------------------------//
@derivePriceLedgerOnSkuChangePrefix(retailVAT, receipt, VAT, sku);

// документ скидок для товарного отчета
CLASS saleDiscountDocument 'Скидка по продаже через кассы';
TABLE saleDiscountDocument (saleDiscountDocument);

@defineAggregation(zReport, saleDiscountDocument, discountSumReceiptDetailZReport);
@defineDocumentAggregationHeaderTime(zReport, saleDiscountDocument);
@defineDocumentAggregationHeaderStock(zReport, saleDiscountDocument, departmentStore, 'Отдел магазина');
@defineDocumentAggregationHeaderPosted(zReport, saleDiscountDocument);

numberCashRegisterSaleDiscountDocument (saleDiscountDocument) = numberCashRegisterZReport(zReportSaleDiscountDocument(saleDiscountDocument));

discountSaleDiscountDocument (saleDiscountDocument) = discountSumReceiptDetailZReport(zReportSaleDiscountDocument(saleDiscountDocument));

descriptionSaleDiscountDocument (saleDiscountDocument) =
    [FORMULA STRING[200] '\'Скидка по кассе \' || CAST($1 AS TEXT) || \' отдела \' || CAST($2 AS TEXT) ||  \' от \' || CAST($3 AS TEXT)'](
    numberCashRegisterSaleDiscountDocument(saleDiscountDocument), nameDepartmentStoreSaleDiscountDocument(saleDiscountDocument), dateSaleDiscountDocument(saleDiscountDocument));

@implementAccountDocumentLedgerOut(saleDiscountDocument, departmentStore);
sumOutAccountDocumentLedger (ledger) += discountSaleDiscountDocument(ledger);
sumItemOutAccountDocumentLedger (ledger) += discountSaleDiscountDocument(ledger);
sumContainerOutAccountDocumentLedger (ledger) += 0.0 IF ledger IS saleDiscountDocument;

//----------------------------------- Пересорт товара -------------------------------------------------------

CLASS disparity 'Пересортица' : historizable, numeratedDocument;
CLASS disparityPosted 'Проведенная пересортица' : disparity, postedObject;
CLASS disparityDetail 'Строка пересортицы';

@defineDocument(disparity);
@defineDocumentDepartmentStore(disparity);
@defineDocumentPosted(disparity);

@defineDocumentDetailSkuItem(disparity);

@defineDocumentDetailQuantity(disparity);

@defineDocumentDetailBasePrice(disparity, departmentStore);
@derivePrevBasePriceLedgerOnSkuChange(disparity, item);

@defineDocumentDetailBaseSum(disparity);

@defineAddDetailDialogSkuStock(disparity, item, departmentStore, dialogSku);
@defineAddDetailDialogBarcode(disparity, item);
@defineAddDetailDialogTerminal(disparity, item);

@defineDocumentHeaderQuantity(disparity);
@defineDocumentHeaderBaseSum(disparity);

descriptionDisparityDetail 'Название документа' (disparityDetail) =
    [FORMULA STRING[200] '\'Пересортица (расход)\' ||  \' \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'](
    seriesNumberObject(disparityDisparityDetail(disparityDetail)), dateDisparity(disparityDisparityDetail(disparityDetail)));

@implementSkuLedgerOutFIFO(disparityDetail, item, departmentStore);
quantityOutFIFOSkuLedger (ledger) += quantityDisparityDetail(ledger);
@implementSkuLedgerOutFIFOBalance(disparityDetail, item, departmentStore);
sumOutSkuLedger (ledger) += retailSumDisparityDetail(ledger);

                                  // Приход

@defineDocumentDetailSkuItemPrefix(disparity, input, ' (приход)');

@defineDocumentDetailQuantityPrefix(disparity, input, ' (приход)');

@defineDocumentDetailBasePricePrefix(disparity, departmentStore, input, ' (приход)');
@derivePrevBasePriceLedgerOnSkuChangePrefix(disparity, input, inputItem);

//@defineDocumentDetailRetailSumPrefix(disparity, input, ' (приход)');
inputRetailSumDisparityDetail 'Розничная сумма (приход)'(disparityDetail) = round0(inputQuantityDisparityDetail(disparityDetail) * inputRetailPriceDisparityDetail(disparityDetail));
//inputQuantityDisparityDetailDisparity 'Кол-во (всего) (приход)' (disparityDetail) = GROUP SUM inputQuantityDisparityDetail(disparityDetail) BY disparityDisparityDetail(disparityDetail) IN documentSumGroup PERSISTENT;
@defineDocumentHeaderQuantityPrefix(disparity, input, ' (приход)');
@defineDocumentHeaderRetailSumPrefix(disparity, input, ' (приход)');

                                  // Текущее значение расхода //

@defineDocumentDetailBasePricePrefix(disparity, departmentStore, inputCur, ' (тек.)');
@derivePrevBasePriceLedgerOnSkuChangePrefix(disparity, inputCur, inputItem);

balanceBeforeDisparityDetail 'Остаток до пересорта (расход)' (disparityDetail) = DATA NUMERIC[14,3] (disparityDetail) IN baseGroup;
balanceBeforeDisparityDetail (disparityDetail) <- balanceBSkuStockDateTime (
                itemDisparityDetail(disparityDetail), departmentStoreDisparityDetail(disparityDetail), dateTimeDisparityDetail(disparityDetail))
                WHEN CHANGED(itemDisparityDetail(disparityDetail));

//----------------------------  Изменение остатка пересорт --------------------------------------------//

CLASS inputDisparityDetail 'Приход пересортицы';
TABLE inputDisparityDetail (inputDisparityDetail);

needToInputDisparityDetailDetail (disparityDetail) = inputQuantityDisparityDetail(disparityDetail) > 0
    AND isPostedDisparityDetail(disparityDetail);

@defineAggregation(disparityDetail, inputDisparityDetail, needToInputDisparityDetailDetail);

@defineDocumentAggregationDetailTime(disparity, inputDisparity);
@defineDocumentAggregationDetailPosted(disparity, inputDisparity);
@defineDocumentAggregationDetailStock(disparity, inputDisparity, departmentStore, 'Отдел магазина');
@defineDocumentAggregationDetailSkuPrefix(disparity, inputDisparity, item, input);
quantityInputDisparityDetail(inputDisparityDetail) = inputQuantityDisparityDetail(disparityDetailInputDisparityDetail(inputDisparityDetail));

@defineDocumentAggregationDetailPricePrefix(disparity, inputDisparity, input, , );
@defineDocumentDetailBaseSum(inputDisparity);

expiryDateInputDisparityDetail 'Годен до' (inputDisparityDetail) = DATA DATE(inputDisparityDetail) IN baseGroup;

descriptionInputDisparityDetail 'Название документа' (inputDisparityDetail) =
    [FORMULA STRING[200] '\'Пересортица (приход)\' ||  \' \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'](
    seriesNumberObject(disparityDisparityDetail(disparityDetailInputDisparityDetail(inputDisparityDetail))), dateDisparity(disparityDisparityDetail(disparityDetailInputDisparityDetail(inputDisparityDetail))));

@implementBatch(inputDisparityDetail, item, departmentStore, supplierPrice);
quantityBatch (ledger) += quantityInputDisparityDetail(ledger);
expiryDateBatch (ledger) += expiryDateInputDisparityDetail(ledger);
sumInSkuLedger (ledger) += retailSumInputDisparityDetail(ledger);

@implementBaseISkuDepartmentStoreLedger(inputDisparity, item);

descriptionDisparity 'Название документа' (disparity) =
    [FORMULA STRING[200] '\'Пересортица \' ||  \' \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'](
    seriesNumberObject(disparity), dateDisparity(disparity));

// --------------------------------------- Печать ценников ---------------------------------------- //

labelTypeBarcodeDepartmentStoreDate (barcode, departmentStore, date) += labelBarcodeDepartmentStoreDate(barcode, departmentStore, date);
countLabelBarcodeDepartmentStoreDate (barcode, departmentStore, date) += valOverMultiplierBarcodeDepartmentDate(barcode, departmentStore, date);

nameCountryItemBarcode = nameCountryItem(skuBarcode(barcode));
@defineLabelTransactionAttribute(country, 'Страна', STRING[255], nameCountryItem);

nameManufacturerItemBarcode = nameManufacturerItem(skuBarcode(barcode));
@defineLabelTransactionAttribute(manufacturer, 'Производитель', STRING[255], nameManufacturerItem);

//------------------------------------------- Пересорт товара----------------------------------------------------//

quantityDisparityDetailItemDisparity 'Кол-во для закачки в оборудование (приход)' (item, disparity) = GROUP SUM inputQuantityDisparityDetail(disparityDetail) BY inputItemDisparityDetail(disparityDetail), disparityDisparityDetail(disparityDetail);

FORM disparity 'Пересортица'

    OBJECTS dis=disparity FIXED PANEL

    PROPERTIES(dis) objectClassName, nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, nameDepartmentStoreDisparity,
                    dateDisparity, timeDisparity,
                    quantityDisparityDetailDisparity, retailSumDisparityDetailDisparity,
                    inputQuantityDisparityDetailDisparity, inputRetailSumDisparityDetailDisparity

    OBJECTS d = disparityDetail
    PROPERTIES(d)   indexDisparityDetail,
                    idBarcodeSkuDisparityDetail, nameAttributeItemDisparityDetail, shortNameUOMItemDisparityDetail,
                    quantityDisparityDetail, retailPriceDisparityDetail, retailSumDisparityDetail,
                    inputIdBarcodeSkuDisparityDetail, inputNameAttributeItemDisparityDetail, inputShortNameUOMItemDisparityDetail,
                    inputQuantityDisparityDetail, inputRetailPriceDisparityDetail, inputRetailSumDisparityDetail
    PROPERTIES(d)   ADDOBJ, delete

    PROPERTIES(dis) TODRAW d addDetailDialogSkuStockDisparityDetailDisparity, addDetailDialogTerminalDisparityDetailDisparity,
                             addDetailInputBarcodeDisparityDetailDisparity, deleteDisparityDetailDisparity

    PROPERTIES (d)  FORCE PANEL importerPriceDisparityDetail, supplierPriceDisparityDetail, nameWareDisparityDetail,
                                warePriceDisparityDetail, valueRetailVATDisparityDetail, balanceBeforeDisparityDetail,
                                inputCurImporterPriceDisparityDetail, inputCurSupplierPriceDisparityDetail, inputCurNameWareDisparityDetail,
                                inputCurWarePriceDisparityDetail, inputCurValueRetailVATDisparityDetail, inputCurRetailPriceDisparityDetail,
                                inputImporterPriceDisparityDetail, inputSupplierPriceDisparityDetail, inputNameWareDisparityDetail,
                                inputWarePriceDisparityDetail, inputValueRetailVATDisparityDetail

    FILTERS         disparityDisparityDetail(d) == dis

    EVENTS
        ON OK EXEC prePostDisparity(dis)

    EDIT disparity OBJECT dis
;

DESIGN disparity FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW header.box{
            childConstraints = TO THE RIGHT;
            NEW caseTwo {
                childConstraints = TO THE BOTTOM;
                ADD dis.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(objectClassName);
                    ADD PROPERTY(nameDepartmentStoreDisparity);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateDisparity);
                    ADD PROPERTY(timeDisparity);
                }
            }
                ADD dis.documentSumGroup {
                    childConstraints = TO THE BOTTOM;
                }

        }

        ADD d.box {
            childConstraints = TO THE BOTTOM;
            title = 'Ценовый и количественные показатели';

            NEW row {
                childConstraints = TO THE RIGHT;
                title = 'Расход';
                ADD PROPERTY (importerPriceDisparityDetail);
                ADD PROPERTY (supplierPriceDisparityDetail);
                ADD PROPERTY (nameWareDisparityDetail);
                ADD PROPERTY (warePriceDisparityDetail);
                ADD PROPERTY (valueRetailVATDisparityDetail);
                ADD PROPERTY (balanceBeforeDisparityDetail);
            }

            NEW row1 {
                title = 'Приход';
                childConstraints = TO THE RIGHT;

                NEW row11{
                    fillHorizontal = 1;
                    childConstraints = TO THE BOTTOM;
                    title = 'Цены (приход) текущие';
                    ADD PROPERTY (inputCurImporterPriceDisparityDetail);
                    ADD PROPERTY (inputCurSupplierPriceDisparityDetail);
                    ADD PROPERTY (inputCurNameWareDisparityDetail);
                    ADD PROPERTY (inputCurWarePriceDisparityDetail);
                    ADD PROPERTY (inputCurValueRetailVATDisparityDetail);
                    ADD PROPERTY (inputCurRetailPriceDisparityDetail);
                }
                NEW row12{
                    fillHorizontal = 1;
                    childConstraints = TO THE BOTTOM;
                    title = 'Цены (приход) новые';
                    ADD PROPERTY (inputImporterPriceDisparityDetail);
                    ADD PROPERTY (inputSupplierPriceDisparityDetail);
                    ADD PROPERTY (inputNameWareDisparityDetail);
                    ADD PROPERTY (inputWarePriceDisparityDetail);
                    ADD PROPERTY (inputValueRetailVATDisparityDetail);
                }
            }
        }
        ADD functions.box;
        PROPERTY(formOkAction) {
            caption = 'Провести';
        }
    }
}

FORM disparities 'Пересортицы'

    OBJECTS dis=disparity
    PROPERTIES(dis)  READONLY objectClassName, numberObject, seriesObject, nameDepartmentStoreDisparity, dateDisparity, timeDisparity,
                              countDisparityDetailDisparity, quantityDisparityDetailDisparity, retailSumDisparityDetailDisparity,
                              inputQuantityDisparityDetailDisparity, inputRetailSumDisparityDetailDisparity

    PROPERTIES(dis)  READONLY FORCE PANEL timeCreatedHistorizable, nameUserCreatedHistorizable, hostnameComputerCreatedHistorizable, timeClosed, nameUserClosed, hostnameComputerClosed

    PROPERTIES (dis) ADDFORM, EDITFORM, delete FORCE PANEL DRAWTOTOOLBAR

    OBJECTS d=disparityDetail
    PROPERTIES(d)   READONLY indexDisparityDetail,
                    idBarcodeSkuDisparityDetail, nameAttributeItemDisparityDetail, shortNameUOMItemDisparityDetail,
                    quantityDisparityDetail, retailPriceDisparityDetail, retailSumDisparityDetail,
                    inputIdBarcodeSkuDisparityDetail, inputNameAttributeItemDisparityDetail, inputShortNameUOMItemDisparityDetail,
                    inputQuantityDisparityDetail, inputRetailPriceDisparityDetail, inputRetailSumDisparityDetail

    FILTERS         disparityDisparityDetail(d) == dis
;
DESIGN disparities FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD dis.box {
            PROPERTY(objectClassName) {
                preferredCharWidth = 25;
            }
            PROPERTY (delete(dis)) {
                askConfirm = TRUE;
            }
        }
        ADD d.box;
    }

    NEW caseOne {
        childConstraints = TO THE RIGHT;
        ADD dis.historyGroup {
            childConstraints = TO THE BOTTOM;
        }
        ADD dis.postedGroup {
            childConstraints = TO THE BOTTOM;
        }
    }

    ADD functions.box;
}

@Label.implementPriceTransactionDocument(disparity);
@defineDocumentLabelTransaction(disparity, item, departmentStore);
@extendFormDocumentLabelTransaction(disparities, dis, disparity);

@Machinery.implementPriceTransactionDocument(disparity);
@defineDocumentMachineryPriceTransaction(disparity, item, departmentStore);
@extendFormDocumentMachineryPriceTransaction(disparities, dis, disparity);

//---------------------------Товарный отчет-------------------------------------//

@extendStockFormAccountDocumentLedger(departmentStore, d);
EXTEND DESIGN departmentStore {
    row1 {
        ADD d. responsibilityGroup {childConstraints = TO THE BOTTOM;}
    }
}

//----------------------------------- Акты проработки -------------------------------------------------//
FORM actOfStudy 'Акт проработки'

    OBJECTS a=actOfStudy FIXED PANEL

    PROPERTIES(a)   objectClassName, nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, nameDepartmentStoreActOfStudy,
                    dateActOfStudy, timeActOfStudy, nameContractorDepartmentStoreActOfStudy,
                    quantityStudyOutputDetailActOfStudy, retailSumStudyOutputDetailActOfStudy, quantityStudyInputDetailActOfStudy, retailSumStudyInputDetailActOfStudy,
                    numberOutputActOfStudy, seriesOutputActOfStudy, numberInputActOfStudy, seriesInputActOfStudy

    OBJECTS sid=studyInputDetail
    OBJECTS sod=studyOutputDetail

    PROPERTIES(sid) nameAttributeItemStudyInputDetail
    PROPERTIES(sid) seriesNumberCuttingStudyInputDetail READONLY, showSeriesNumberCuttingStudyInputDetail
    PROPERTIES(sid) READONLY dateCuttingStudyInputDetail, descriptionCuttingStudyInputDetail,
                    percAllowancesCuttingStudyInputDetail, percLossesCuttingStudyInputDetail, percSweepsCuttingStudyInputDetail
    PROPERTIES(sid) importerPriceStudyInputDetail, supplierPriceStudyInputDetail, numberRetailVATStudyInputDetail, valueRetailVATStudyInputDetail,
                    retailPriceStudyInputDetail, quantityStudyInputDetail, retailSumStudyInputDetail,
                    totalPercGoodsStudyInputDetail BACKGROUND highlightStudyInputDetail(sid) READONLY, ADDOBJ, delete

    PROPERTIES(sid) FORCE PANEL toFillStudyOutputDetailsStudyInputDetail SHOWIF showNotStudyInputDetailStudyOutputDetail(sid, sod),
                                deleteStudyOutputDetailStudyInputDetail

    PROPERTIES(sod) nameAttributeItemStudyOutputDetail, shortNameUOMItemStudyOutputDetail, importerPriceStudyOutputDetail, supplierPriceStudyOutputDetail,
                    numberRetailVATStudyOutputDetail, valueRetailVATStudyOutputDetail, factorStudyOutputDetail, percGoodsStudyOutputDetail,
                    retailPriceStudyOutputDetail, calculatedStudyOutputDetail, actualQuantityStudyOutputDetail, retailSumStudyOutputDetail

    PROPERTIES(sod) FORCE PANEL curImporterPriceStudyOutputDetail, curSupplierPriceStudyOutputDetail, curNumberRetailVATStudyOutputDetail,
                    curValueRetailVATStudyOutputDetail, curRetailPriceStudyOutputDetail

    FILTERS         actOfStudyStudyInputDetail(sid) == a,
                    studyInputDetailStudyOutputDetail(sod) == sid

    EVENTS
        ON OK EXEC prePostActOfStudy(a)

    EDIT actOfStudy OBJECT a
;

DESIGN actOfStudy FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW header.box BEFORE sid.box {
            childConstraints = TO THE RIGHT;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;

                ADD a.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(objectClassName);
                    ADD PROPERTY(nameDepartmentStoreActOfStudy);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateActOfStudy);
                    ADD PROPERTY(timeActOfStudy);
                }

                ADD a.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                }

                NEW headerOut {
                    title = 'Расходная накладная';
                    ADD PROPERTY(numberOutputActOfStudy);
                    ADD PROPERTY(seriesOutputActOfStudy);
                }
                POSITION a.documentPrmGroup TO THE LEFT headerOut;

                NEW headerIn {
                    title = 'Приходная накладная';
                    ADD PROPERTY(numberInputActOfStudy);
                    ADD PROPERTY(seriesInputActOfStudy);
                }
                POSITION a.documentPrmGroup TO THE LEFT headerIn;
                POSITION headerOut TO THE LEFT headerIn;
            }

            NEW sumsContainer {
                childConstraints = TO THE BOTTOM;
                NEW inSumsContainer {
                    title = 'Итоги (вход)';
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY(quantityStudyInputDetailActOfStudy);
                    ADD PROPERTY(retailSumStudyInputDetailActOfStudy);
                }
                NEW outSumsContainer {
                    title = 'Итоги (выход)';
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY(quantityStudyOutputDetailActOfStudy);
                    ADD PROPERTY(retailSumStudyOutputDetailActOfStudy);
                }
            }
        }
        PROPERTY(formOkAction) {
            caption = 'Провести';
        }
    }
}


FORM actOfStudies 'Акты проработки'

    OBJECTS a=actOfStudy
    PROPERTIES(a)  READONLY objectClassName, numberObject, seriesObject, dateActOfStudy, timeActOfStudy, nameDepartmentStoreActOfStudy,
                            nameContractorDepartmentStoreActOfStudy, quantityStudyOutputDetailActOfStudy, retailSumStudyOutputDetailActOfStudy, quantityStudyInputDetailActOfStudy, retailSumStudyInputDetailActOfStudy

    PROPERTIES(a) READONLY FORCE PANEL timeCreatedHistorizable, nameUserCreatedHistorizable, hostnameComputerCreatedHistorizable, timeClosed, nameUserClosed, hostnameComputerClosed

    PROPERTIES (a)          ADDFORM, EDITFORM, delete FORCE PANEL DRAWTOTOOLBAR

    OBJECTS i = item
    PROPERTIES(i)      READONLY nameAttributeItem, shortNameUOMItem
    PROPERTIES(i, a)   READONLY quantityStudyInputDetailItemActOfStudy, retailSumStudyInputDetailItemActOfStudy, quantityStudyOutputDetailItemActOfStudy, retailSumStudyOutputDetailItemActOfStudy

    ORDER BY           retailSumStudyInputDetailItemActOfStudy, retailSumStudyOutputDetailItemActOfStudy
    FILTERS            quantityStudyInputDetailItemActOfStudy(i, a) OR quantityStudyOutputDetailItemActOfStudy(i, a)

    FILTERGROUP filters1
        FILTER 'Показать приход' 'F10' retailSumStudyOutputDetailItemActOfStudy(i, a)
        FILTER 'Показать расход' 'F9' retailSumStudyInputDetailItemActOfStudy(i, a)
;

DESIGN actOfStudies FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD a.box;
        ADD i.box;
    }

    PROPERTY(objectClassName) {
        preferredCharWidth = 25;
    }

    PROPERTY (delete(a)) {
        askConfirm = TRUE;
    }

    ADD a.historyGroup {
        childConstraints = TO THE BOTTOM;
    }

    ADD a.postedGroup {
        childConstraints = TO THE BOTTOM;
    }

    POSITION a.historyGroup TO THE LEFT a.postedGroup;

    ADD functions.box;
}

@Label.implementPriceTransactionDocument(actOfStudy);
@defineDocumentLabelTransaction(actOfStudy, item, departmentStore);
@extendFormDocumentLabelTransaction(actOfStudy, a, actOfStudy);

@Machinery.implementPriceTransactionDocument(actOfStudy);
@defineDocumentMachineryPriceTransaction(actOfStudy, item, departmentStore);
@extendFormDocumentMachineryPriceTransaction(actOfStudies, a, actOfStudy);

//----------------------------------- Форма для остатков -------------------------------------------------//

inChainStoresStoreTypeStoreDepartmentDepartment (chainStores, storeType, store, department, depStore) = UNION OVERRIDE
    department == depStore AND store  AND chainStores AND storeType,
    storeDepartmentStore(department) == store AND NOT depStore AND chainStores AND storeType,
    storeTypeDepartmentStore(department) == storeType AND NOT depStore AND chainStores AND NOT store,
    chainStoresDepartmentStore(department) == chainStores AND NOT store AND NOT storeType AND NOT depStore,
    department IS departmentStore AND NOT store AND NOT storeType AND NOT chainStores AND NOT depStore;

//------------------------------------Отчет по таре-------------------------------------------//

isContainerBatch 'Тара' (batch) = isContainerItem(skuBatch(batch));

costSumContainerStockDateFrom 'Остаток на начало по складу' (stock, dateFrom) = GROUP SUM costSumBatchStockDateFrom(batch, stock, dateFrom)
    IF isContainerItem(skuBatch(batch)) BY stock, dateFrom;

costSumContainerStockDateTo 'Остаток на конец по складу' (stock, dateTo) = GROUP SUM costSumBatchStockDateTo(batch, stock, dateTo)
    IF isContainerItem(skuBatch(batch)) BY stock, dateTo;

overMotionContainerBatchStockDateFromTo (batch, stock, dateFrom, dateTo) = UNION OVERRIDE
    balanceBBatchStockDate(batch, stock, dateFrom) AND dateTo AS DATE,
    balanceABatchStockDate(batch, stock, dateTo) AND dateFrom AS DATE,
    costInBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo),
    costOutBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo);

FORM sumMotionContainerDepartmentPrint 'Отчет по таре' PRINT

    OBJECTS params = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES objFrom = OBJVALUE(dFrom), objTo = OBJVALUE(dTo)

    OBJECTS dep = departmentStore  FIXED PANEL
    PROPERTIES(dep) SELECTOR name, nameStoreDepartmentStore, nameLegalEntityDepartmentStore

    OBJECTS bt=batch

    PROPERTIES READONLY costSumContainerStockDateFrom(dep, dFrom), costSumContainerStockDateTo(dep, dTo)
    PROPERTIES(bt) READONLY idBarcodeSkuBatch, nameSkuBatch, costBatch
    PROPERTIES(bt, dep, dFrom) READONLY balanceBBatchStockDate, costSumBatchStockDateFrom
    PROPERTIES(bt, dep, dTo) READONLY balanceABatchStockDate, costSumBatchStockDateTo
    PROPERTIES(bt, dep, dFrom, dTo) READONLY costInBalanceBatchStockDateFromTo, costSumInBalanceBatchStockDateFromTo,
               costOutBalanceBatchStockDateFromTo, costSumOutBalanceBatchStockDateFromTo

    FILTERS isPostedBatch(bt),
            isContainerBatch(bt),
            overMotionContainerBatchStockDateFromTo(bt, dep, dFrom, dTo)!=0
;

//---------------------------------------------- Генерация Z-отчета -------------------------------------------------//

generateZReport 'Сгенерировать Z-отчёт' = ACTION CUSTOM 'equ.srv.actions.GenerateZReport';
averageZReportCountGenerateZReport 'Среднее число Z-отчётов' = DATA INTEGER ();
averageReceiptCountGenerateZReport 'Среднее число чеков' = DATA INTEGER ();
averageReceiptDetailCountGenerateZReport 'Среднее число строк в чеке' = DATA INTEGER ();
dateFromGenerateZReport 'Дата (с)' = DATA DATETIME ();
dateToGenerateZReport 'Дата (по)' = DATA DATETIME ();

EXTEND FORM defaultData
    PROPERTIES()    generateZReport, averageZReportCountGenerateZReport, averageReceiptCountGenerateZReport, averageReceiptDetailCountGenerateZReport,
                    dateFromGenerateZReport, dateToGenerateZReport

;

EXTEND DESIGN defaultData {
    pane {
        NEW ZReport {
            title = 'Z-отчёт';
            childConstraints = TO THE BOTTOM;
            ADD PROPERTY(averageZReportCountGenerateZReport());
            ADD PROPERTY(averageReceiptCountGenerateZReport());
            ADD PROPERTY(averageReceiptDetailCountGenerateZReport());
            ADD PROPERTY(dateFromGenerateZReport());
            ADD PROPERTY(dateToGenerateZReport());
            ADD PROPERTY(generateZReport());
        }
    }
}
//---------------------------------------------- Импорт данных -----------------------------------------------------//

GROUP lstradeIntegrationGroup 'LS Trade' : baseGroup;

importLSTDataAction 'Импортировать данные (LS Trade)' = ACTION CUSTOM 'retail.ImportLSTDataActionProperty' IN lstradeIntegrationGroup;
importLSTDirectory 'Папка' = DATA STRING[200] () IN lstradeIntegrationGroup;
importInactive 'Импортировать в том числе неактивные' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importGroupItems 'Импортировать группы товаров' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importWares 'Импортировать посуду' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importItems 'Импортировать товары' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importNumberItems 'Кол-во' = DATA INTEGER () IN lstradeIntegrationGroup;
importNumberItemsAtATime 'Разбивать на пакеты по' = DATA INTEGER () IN lstradeIntegrationGroup;
importPrices 'Импортировать цены товаров' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importAssortment 'Импортировать ассортимент' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importUserInvoices 'Импортировать документы прихода' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importLegalEntities 'Импортировать организации' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importWarehouses 'Импортировать склады' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importStores 'Импортировать магазины' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importDepartmentStores 'Импортировать отделы магазина' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importBanks 'Импортировать банки' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importRateWastes 'Импортировать нормы отходов' = DATA BOOLEAN() IN lstradeIntegrationGroup;

EXTEND FORM integrationData
    PROPERTIES() importLSTDataAction, importLSTDirectory, importInactive, importGroupItems, importWares, importItems,
    importNumberItems, importNumberItemsAtATime, importPrices, importAssortment, importUserInvoices,
    importLegalEntities, importWarehouses, importStores, importDepartmentStores, importBanks, importRateWastes
;
EXTEND DESIGN integrationData {
    pane {
        NEW lstrade {
            title = 'LS Trade';
            ADD NOGROUP.lstradeIntegrationGroup;
        }
    }
}

GROUP formularGroup 'Formular' : baseGroup;

importDataAction 'Импортировать данные (Formular)' = ACTION CUSTOM 'retail.ImportDataActionProperty'IN formularGroup;
importUrl 'URL' = DATA STRING[200]() IN formularGroup;
importLogin 'Логин' = DATA STRING[200]() IN formularGroup;
importPassword 'Пароль' = DATA STRING[200]() IN formularGroup;

EXTEND FORM integrationData
    PROPERTIES() importDataAction, importUrl, importLogin, importPassword
;
EXTEND DESIGN integrationData {
    pane {
        NEW formular {
            title = 'Formular';
            ADD NOGROUP.formularGroup;
        }
    }
}

//---------------------------- Настройка навигатора ----------------------------------------//

//WINDOW TOOLBAR root 'Навигатор' HORIZONTAL HIDETITLE HIDESCROLLBARS POSITION(0, 0, 100, 6);
//WINDOW TOOLBAR toolbar 'Формы' VERTICAL HIDETITLE POSITION (0, 6, 20, 64);
//WINDOW TREE formsTree 'Формы' HIDETITLE POSITION (0, 6, 20, 64);
//
//HIDE WINDOW System.relevantForms;
//HIDE WINDOW System.relevantClassForms;

NAVIGATOR {

    root TO root;

    NEW catalogs 'Справочники' TO toolbar {
        NEW itemCatalog 'Товары' {
            ADD items;
            ADD itemGroups;
            ADD UOMs;
            ADD wares;
            ADD papers;
        }
        NEW contragents 'Контрагенты' {
            ADD legalEntities;
            ADD contractSkus;
        }
    }

    NEW purchase 'Управление закупками' TO toolbar {
        ADD purchasePurchaseNavigator;
        ADD purchaseReturnNavigator;
    }

    NEW warehouse 'Управление складом' TO toolbar {
        ADD inventoryNavigator {
            ADD naturalLosses;
            ADD naturalLossGroups;
        }
        ADD writeOffNavigator;
        ADD adjustmentNavigator;

        NEW disparityDocuments 'Пересортица' {
            ADD disparities;
        }
        ADD stockCost;
        ADD stockBalance;
        NEW accountDocuments 'Бухгалтерские документы' {
            ADD sumAccountDocumentLedger;
            ADD sumMotionContainerDepartmentPrint;
        }
        NEW warehouseCatalog 'Справочники' {
            ADD warehouses;
        }
    }

    NEW sale 'Управление продажами' TO toolbar {
        ADD saleSaleNavigator;
        ADD saleReturnNavigator;
        ADD salesNavigator;
        ADD statisticsNavigator;
    }

    NEW retail 'Розничная торговля' TO toolbar {
        ADD POSNavigator;
        NEW priceAccount 'Учет в розничных ценах' {
            ADD pricings;
            ADD repricings;
            ADD pricingCommitteeDialog;
            ADD repricingCommitteeDialog;
        }
        ADD retailCRMNavigator;
        NEW retailCatalog 'Справочники' {
            ADD stores;
        }
    }

    ADD priceListNavigator TO toolbar;
    ADD transportNavigator TO toolbar;
    ADD machineryNavigator TO toolbar;

    NEW finance 'Финансы' TO toolbar {
        ADD contractNavigator;
        NEW financeCatalog 'Справочники' {
            ADD banks;
            ADD taxes;
        }
    }

    NEW manufactory 'Производство' TO toolbar {
        ADD actOfStudies;
        ADD cuttings;
    }
    NEW hr 'Кадры' TO toolbar {
        ADD employees;
    }

    ADD account TO toolbar;
    ADD administration TO toolbar;
}

