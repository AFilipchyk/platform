MODULE retail;

// Кол-ва - NUMERIC[14,3]
// Цены - NUMERIC[14,2]
// Суммы - NUMERIC[16,2]
// Ставка налога - NUMERIC[10,5]
// Надбавка - NUMERIC[8,3]
// Норма списания отходов - NUMERIC[10,3]

IMPORT BaseLogicsModule;

ceil = FORMULA DOUBLE 'ceil($1)';

castToString255 = FORMULA STRING[255] 'CAST($1 AS character(255))';
castToString3 = FORMULA STRING[3] 'CAST($1 AS character(3))';
isWordInCSV = FORMULA INTEGER 'CASE WHEN CAST($1 AS text)=ANY(string_to_array($2,\',\')) THEN 1 ELSE 0 END';

roundM1 (number) = round(number, -1);
round0 (number) = round(number, 0);
round1 (number) = round(number, 1);
round2 (number) = round(number, 2);
round3 (number) = round(number, 3);

CLASS doubleNamed 'Объект с кратким наименованием' : named;

shortName 'Краткое наименование' = DATA STRING[5] (doubleNamed) IN baseGroup;

CLASS STATIC yesNo 'Логическое' {
    yes 'ДА',
    no 'НЕТ'
};

classSIDToYesNo 'Да/нет по ИД'(string) = GROUP UNIQUE yesNo BY classSID (yesNo) WHERE yesNo IS yesNo;

CLASS language 'Язык' : doubleNamed;

stringEqualsAll(string) = string == 'Все';
dateDiffersCurrent(date) = date IS DATE AND date != currentDate();

FORM dialogDate 'Выбор даты'
    OBJECTS d = DATE FIXED PANEL
    PROPERTIES(d) objValue = OBJVALUE
;

DESIGN dialogDate FROM DEFAULT {
    PROPERTY (objValue) {
        caption = 'Введите дату';
        font = 'Tahoma bold 64';
        panelLabelAbove = TRUE;
    }
}

CLASS ABSTRACT postedObject 'Объект с возможностью закрытия';
TABLE postedObject (postedObject);

GROUP postedGroup 'Информация о закрытии' : baseGroup;
GROUP printGroup 'Печатные формы' : baseGroup;

timeClosed 'Время закрытия' = DATA DATETIME (postedObject) IN postedGroup;
userClosed 'Закрыт пользователем' = DATA customUser (postedObject) IN idGroup;
computerClosed 'Закрыт на компьютере' = DATA computer (postedObject) IN idGroup;

nameUserClosed 'Закрыт пользователем' (postedObject) = commonName(userClosed(postedObject)) IN postedGroup;
hostnameComputerClosed 'Закрыт на компьютере' (postedObject) = hostname(computerClosed(postedObject)) IN postedGroup;

timeClosed(postedObject) <- currentDateTime() WHEN ASSIGNED(postedObject IS postedObject);
userClosed(postedObject) <- currentUser() WHEN ASSIGNED(postedObject IS postedObject);
computerClosed(postedObject) <- currentComputer() WHEN ASSIGNED(postedObject IS postedObject);

GROUP documentHeaderGroup 'Шапка документа' : baseGroup;
GROUP documentSumGroup 'Суммы документа': publicGroup;
GROUP documentPrmGroup 'Параметры документа': publicGroup;

GROUP carConsignmentGroup 'Автомобиль' : baseGroup;
GROUP issuanceConsignmentGroup 'Отпуск' : baseGroup;
GROUP loadingConsignmentGroup 'ПРР' : baseGroup;
GROUP sumConsignmentGroup 'Суммы' : baseGroup;

// ----------------------------------- Нумераторы ------------------------------------------ //

CLASS numerator 'Нумератор' : named;
TABLE numerator (numerator);

seriesNumerator 'Серия' = DATA STRING[2] (numerator) IN recognizeGroup FIXEDCHARWIDTH 3;

minValueNumerator 'Мин. значение' = DATA LONG (numerator) IN recognizeGroup;
maxValueNumerator 'Макс. значение' = DATA LONG (numerator) IN recognizeGroup;

stringLengthNumerator 'Длина' = DATA INTEGER (numerator) IN baseGroup;

curValueNumerator 'Тек. значение' = DATA LONG (numerator) IN recognizeGroup;
curValueNumerator(numerator) <- minValueNumerator(numerator) WHEN ASSIGNED(numerator IS numerator);

lpadStringWithZero = FORMULA STRING[18] 'lpad(CAST($1 AS text),$2,\'0\')';

curStringValueNumerator 'Тек. значение (строка)' (numerator) = lpadStringWithZero(curValueNumerator(numerator), stringLengthNumerator(numerator)) IN baseGroup;

incrementValueNumerator 'Увеличить значение' = ACTION (numerator) NEWSESSION {
    IF curValueNumerator(numerator) >= maxValueNumerator(numerator) THEN
        MESSAGE 'Счетчик нумератора достиг максимального значения. Обратитесь к администратору.'
    ELSE {
        SET curValueNumerator(numerator) <- curValueNumerator(numerator) + 1;
        EXEC apply();
    };
};

FORM numerator 'Нумератор'
    OBJECTS n = numerator FIXED PANEL
    PROPERTIES(n) name, seriesNumerator, minValueNumerator, maxValueNumerator, stringLengthNumerator, curValueNumerator, curStringValueNumerator

    EDIT numerator OBJECT n
;

FORM numerators 'Нумераторы'
    OBJECTS n = numerator
    PROPERTIES(n) READONLY name, seriesNumerator, minValueNumerator, maxValueNumerator, stringLengthNumerator, curValueNumerator, curStringValueNumerator
    PROPERTIES(n)          ADDFORM, EDITFORM, delete

    DIALOG numerator OBJECT n
;

GROUP numberedGroup 'Нумератор' : baseGroup;

CLASS ABSTRACT numberedObject 'Нумерованный объект';
TABLE numberedObject (numberedObject);

numberObject 'Номер' = DATA STRING[18] (numberedObject) IN numberedGroup MINCHARWIDTH 7;
seriesObject 'Серия' = DATA STRING[2] (numberedObject) IN numberedGroup FIXEDCHARWIDTH 3;

seriesNumberObject 'Серия/Номер' (numberedObject) = [FORMULA STRING[21] '$1 || $2']
                                                    (seriesObject(numberedObject), numberObject(numberedObject));

CLASS ABSTRACT numeratedObject 'Нумерируемый объект' : numberedObject;

numeratorObject 'Нумератор (ИД)' = DATA numerator (numeratedObject);
nameNumeratorObject 'Нумератор' (numeratedObject) = name(numeratorObject(numeratedObject)) IN numberedGroup MINCHARWIDTH 7 PREFCHARWIDTH 15;

setValueNumeratedObject 'Сгенерировать номер' = ACTION (numeratedObject) {
    SET numberObject(numeratedObject) <- curStringValueNumerator(numeratorObject(numeratedObject));
    SET seriesObject(numeratedObject) <- seriesNumerator(numeratorObject(numeratedObject));
    EXEC incrementValueNumerator(numeratorObject(numeratedObject));
} IN numberedGroup SHORTCUT numberObject;

// todo : не работает
setValueNumeratedObject(numeratedObject) WHEN CHANGED(numeratorObject(numeratedObject));

// ----------------------------------- Шаблоны ------------------------------------------ //

// ----------------------------------- Свойство объект-дата------------------------------------------ //
META metaCodeObjectDateProperty(prop, object, caption, type, group)

    prop##Date caption = DATA type (object, DATE) IN group;
    date###prop (object, date) = GROUP MAX dateIn AND prop##Date(object, dateIn) AND dateIn <= (date AS DATE) BY object, date;
    prop##Val caption (object, date) = prop##Date(object, date###prop(object, date)) IN group;
    prop caption (object) = prop##Date(object, date###prop(object, currentDate())) IN group;

    FORM add###prop caption
    OBJECTS a=object FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, OBJVALUE(d), prop##Date(a, d);
    DESIGN add###prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
    }

    showFormAdd###prop 'Добавить' (object) = ACTION FORM add###prop OBJECTS a MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

    FORM prop caption
    OBJECTS a=object FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, showFormAdd###prop(a) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY, prop##Date(a, d)
    FILTERS prop##Date(a, d);
    DESIGN prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
    }

    showForm###prop caption (object) = ACTION FORM prop OBJECTS a MODAL SHORTCUT prop DEFAULT;

END

// ---------------------------------- Свойство объект-дата для (пример, стат.класса)------------------------------------------ //

META metaCodeNameObjectDateProperty(prop, object, caption, type, group)

    prop##Date caption = DATA type (object, DATE) IN group;
    name###prop##Date caption (object, date) = name(prop##Date(object, date));
    date###prop (object, date) = GROUP MAX dateIn AND prop##Date(object, dateIn) AND dateIn <= (date AS DATE) BY object, date;
    prop caption (object) = prop##Date(object, date###prop(object, currentDate()));
    name###prop caption (object) = name(prop(object)) IN group;

    FORM addName###prop caption
    OBJECTS a=object FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, OBJVALUE(d), name###prop##Date(a, d);
    DESIGN addName###prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
    }

    showFormAddName###prop 'Добавить' (object) = ACTION FORM addName###prop OBJECTS a MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

    FORM name###prop caption
    OBJECTS a=object FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, showFormAddName###prop(a) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY, name###prop##Date(a, d)
    FILTERS prop##Date(a, d);
    DESIGN name###prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
    }

    showFormName###prop caption (object) = ACTION FORM name###prop OBJECTS a MODAL SHORTCUT name###prop DEFAULT;

END

// ----------------------------------- Свойство объект1-объект2-дата------------------------------------------ //
META metaCodeDoubleObjectDateProperty(prop, object1, object2, caption, type, group)

    prop##Date caption = DATA type (object1, object2, DATE) IN group;
    date###prop (object1, object2, date) = GROUP MAX dateIn AND prop##Date(object1, object2, dateIn) AND dateIn <= (date AS DATE) BY object1, object2, date;
    prop##Val caption (object1, object2, date) = prop##Date(object1, object2, date###prop(object1, object2, date));
    prop caption (object1, object2) = prop##Val(object1, object2, currentDate()) IN group;
    prop##Over caption = UNION OVERRIDE prop##Val(object1, object2, date), prop##Date(object1, object2, date);

    FORM add###prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, name(b) READONLY, OBJVALUE(d), prop##Date(a, b, d);
    DESIGN add###prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
    }

    showFormAdd###prop 'Добавить' (object1, object2) = ACTION FORM add###prop OBJECTS a, b MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

    FORM prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, name(b) READONLY, showFormAdd###prop(a, b) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY, prop##Date(a, b, d)
    FILTERS prop##Date(a, b, d);
    DESIGN prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
    }

    showForm###prop caption (object1, object2) = ACTION FORM prop OBJECTS a, b MODAL SHORTCUT prop DEFAULT;
    showForm###prop##Over caption (object1, object2) = ACTION FORM prop OBJECTS a, b MODAL SHORTCUT prop##Over;

END
// ----------------------------------- Свойство объект1-объект2-дата для yesNo со значением по-умолчанию НЕТ------------------------------------------ //

META metaCodeNameYesNoDoubleObjectDateProperty(prop, object1, object2, caption, type, group)
    default###prop###object1###object2 = yesNo.no AND object1 IS object1 AND object2 IS object2;
    @metaCodeNameDoubleObjectDateProperty(prop, object1, object2, caption, type, group, default###prop###object1###object2);
END

META metaCodeNameDoubleObjectDateProperty(prop, object1, object2, caption, type, group, defaultProperty)

    prop##Date caption = DATA type (object1, object2, DATE) IN group;
    name###prop##Date caption (object1, object2, date) = name(prop##Date(object1, object2, date));
    date###prop (object1, object2, date) = GROUP MAX dateIn AND prop##Date(object1, object2, dateIn) AND dateIn <= (date AS DATE) BY object1, object2, date;
    prop##Val caption (object1, object2, date) = UNION OVERRIDE defaultProperty(object1, object2) AND date IS DATE, prop##Date(object1, object2, date###prop(object1, object2, date));
    prop caption (object1, object2) = prop##Val(object1, object2, date###prop(object1, object2, currentDate()));
    name###prop caption (object1, object2) = name(prop(object1, object2)) IN group;

    prop##Over caption = UNION OVERRIDE prop##Val(object1, object2, date), prop##Date(object1, object2, date);
    name###prop##Over caption (object1, object2, date) = name(prop##Over(object1, object2, date)) FIXEDCHARWIDTH 7;

    FORM addName###prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, name(b) READONLY, OBJVALUE(d), name###prop##Date(a, b, d);
    DESIGN addName###prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
    }

    showFormAddName###prop 'Добавить' (object1, object2) = ACTION FORM addName###prop OBJECTS a, b MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

    FORM name###prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, name(b) READONLY,  showFormAddName###prop(a, b) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY, name###prop##Date(a, b, d)
    FILTERS prop##Date(a, b, d);
    DESIGN name###prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
    }

    showFormName###prop caption (object1, object2) = ACTION FORM name###prop OBJECTS a, b MODAL SHORTCUT name###prop DEFAULT;
    showFormName###prop##Over caption (object1, object2) = ACTION FORM name###prop OBJECTS a, b MODAL SHORTCUT name###prop##Over;

END

//------------------------------------ Проверка на запрет переоценки ------------------------------------------------- //

META metaCodeIsPriceChangeWrong(prop)

    isPriceChangeWrong###prop (priceChange###prop##Detail) =
        retailPricePriceChange###prop##Detail(priceChange###prop##Detail) < curRetailPricePriceChange###prop##Detail(priceChange###prop##Detail)
          AND banMarkdownItem(itemPriceChange###prop##Detail(priceChange###prop##Detail));

// todo : при изменении поставки начинает сильно тормозить
//    CONSTRAINT isPriceChangeWrong###prop (priceChange###prop##Detail) MESSAGE 'Уценка товара запрещена';

END

// ----------------------------------- Свойство объект1-объект2-объект3-дата------------------------------------------ //
META metaCodeTripleObjectDateProperty(prop, object1, object2, object3, caption, type, group)

    prop##Date caption = DATA type (object1, object2, object3, DATE) IN group;
    date###prop (object1, object2, object3, date) = GROUP MAX dateIn AND prop##Date(object1, object2, object3, dateIn) AND dateIn <= (date AS DATE) BY object1, object2, object3, date;
    prop##Val caption (object1, object2, object3, date) = prop##Date(object1, object2, object3, date###prop(object1, object2, object3, date));
    prop caption (object1, object2, object3) = prop##Val(object1, object2, object3, currentDate()) IN group;
    prop##Over caption = UNION OVERRIDE prop##Val(object1, object2, object3, date), prop##Date(object1, object2, object3, date);

    FORM add###prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, c=object3  FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, name(b) READONLY, name(c) READONLY, OBJVALUE(d), prop##Date(a, b, c, d);
    DESIGN add###prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
        PROPERTY(name(c)) { focusable = FALSE; }
    }

    showFormAdd###prop 'Добавить' (object1, object2, object3) = ACTION FORM add###prop OBJECTS a, b, c MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

    FORM prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, c=object3 FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, name(b) READONLY, name(c) READONLY, showFormAdd###prop(a, b, c) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY, prop##Date(a, b, c, d)
    FILTERS prop##Date(a, b, c, d);
    DESIGN prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
        PROPERTY(name(c)) { focusable = FALSE; }
    }

    showForm###prop caption (object1, object2, object3) = ACTION FORM prop OBJECTS a, b, c MODAL SHORTCUT prop DEFAULT;
    showForm###prop##Over caption (object1, object2, object3) = ACTION FORM prop OBJECTS a, b, c MODAL SHORTCUT prop##Over;

END
// -------------------- Свойство объект1-объект2-объект3-дата для yesNo со значением по-умолчанию НЕТ---------------------------- //

META metaCodeNameTripleObjectDateProperty(prop, object1, object2, object3, caption, type, group)

    prop##Date caption = DATA type (object1, object2, object3, DATE) IN group;
    name###prop##Date caption (object1, object2, object3, date) = name(prop##Date(object1, object2, object3, date));
    date###prop (object1, object2, object3, date) = GROUP MAX dateIn AND prop##Date(object1, object2, object3, dateIn) AND dateIn <= (date AS DATE) BY object1, object2, object3, date;
    prop##Val caption (object1, object2, object3, date) = UNION OVERRIDE yesNo.no AND object1 IS object1 AND object2 IS object2 AND object3 IS object3 AND date IS DATE,
                                                                         prop##Date(object1, object2, object3, date###prop(object1, object2, object3, date));
    prop caption (object1, object2, object3) = prop##Val(object1, object2, object3, currentDate());
    name###prop caption (object1, object2, object3) = name(prop(object1, object2, object3)) IN group;

    prop##Over caption = UNION OVERRIDE prop##Val(object1, object2, object3, date), prop##Date(object1, object2, object3, date);
    name###prop##Over caption (object1, object2, object3, date) = name(prop##Over(object1, object2, object3, date)) FIXEDCHARWIDTH 7;

    FORM addName###prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL,  c=object3 FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, name(b) READONLY, name(c) READONLY, OBJVALUE(d), name###prop##Date(a, b, c, d);
    DESIGN addName###prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
        PROPERTY(name(c)) { focusable = FALSE; }
    }

    showFormAddName###prop 'Добавить' (object1, object2, object3) = ACTION FORM addName###prop OBJECTS a, b, c MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

    FORM name###prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, c=object3 FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, name(b) READONLY, name(c) READONLY, showFormAddName###prop(a, b, c) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY, name###prop##Date(a, b, c, d)
    FILTERS prop##Date(a, b, c, d);
    DESIGN name###prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
        PROPERTY(name(c)) { focusable = FALSE; }
    }

    showFormName###prop caption (object1, object2, object3) = ACTION FORM name###prop OBJECTS a, b, c MODAL SHORTCUT name###prop DEFAULT;
    showFormName###prop##Over caption (object1, object2, object3) = ACTION FORM name###prop OBJECTS a, b, c MODAL SHORTCUT name###prop##Over;

END

// ----------------------------------- Отображение атрибутов товаров по свойству товарной группы ------------------------------------------ //
META metaCodeShowItemAttribute (attribute, caption, group)

    show###attribute##ItemGroup caption (itemGroup) = DATA BOOLEAN (itemGroup) IN group;
    toShow###attribute caption (item) = show###attribute##ItemGroup(itemGroupSku(item));
    show###attribute##ItemGroup(itemGroup) <- TRUE WHEN ASSIGNED(itemGroup IS itemGroup);

END

// ----------------------------------- Свойства изменения объектов в Posted ------------------------------------------ //

META defineDocumentTables (object)
    TABLE object (object);
    TABLE object##Detail (object##Detail);
END

META defineDocumentRelationCustom (object, detail)
    object###detail = DATA object (detail) IN idGroup;
    in###object###detail(iobject, idetail) = object###detail(idetail) == iobject;

    @defineDocumentHeaderCountCustom(object, detail);
END

META defineDocumentRelation (object)
    @defineDocumentRelationCustom(object, object##Detail);
END

META defineDocumentHeaderCountCustom (object, detail)
    count###detail###object 'Количество строк в документе' (iobject) =
        GROUP SUM 1 IF object###detail(idetail) == iobject BY iobject PERSISTENT IN documentSumGroup;
END

META defineDocumentHeaderCount (object)
    @defineDocumentHeaderCountCustom(object, object##Detail);
END
// Время

META defineDocumentHeaderTime (object)
    date###object 'Дата документа' = DATA DATE (object) IN documentHeaderGroup;
    date###object (object) <- currentDate() WHEN ASSIGNED(object AS object);

    time###object 'Время документа' = DATA TIME (object) IN documentHeaderGroup;
    time###object (object) <- currentTime() WHEN ASSIGNED(object AS object);

    dateTime###object 'Дата/время документа' (object) = toDateTime(date###object(object), time###object(object));
END

META defineDocumentDetailTimeCustom (object, detail)
    date###detail 'Дата документа' = date###object(object###detail(detail));
    dateTime###detail 'Дата/время документа' (detail) = dateTime###object(object###detail(detail));
END

META defineDocumentDetailTime (object)
    @defineDocumentDetailTimeCustom(object, object##Detail);
END

META defineDocumentTime (object)
    @defineDocumentHeaderTime(object);
    @defineDocumentDetailTime(object);
END

// Отдел магазина

META defineDocumentHeaderDepartmentStore (object)
    departmentStore###object 'Отдел документа (ИД)' = DATA departmentStore(object) AUTOSET;
    nameDepartmentStore###object 'Отдел документа' (object) = name(departmentStore###object(object)) IN documentHeaderGroup
            MINCHARWIDTH 20 PREFCHARWIDTH 40;;
END

META defineDocumentDetailDepartmentStoreCustom (object, detail)
    departmentStore###detail (idetail) = departmentStore###object(object###detail(idetail));
    nameDepartmentStore###detail 'Отдел магазина' (idetail) = name(departmentStore###detail(idetail));
END

META defineDocumentDetailDepartmentStore (object)
    @defineDocumentDetailDepartmentStoreCustom (object, object##Detail);
END

META defineDocumentDepartmentStore (object)
    @defineDocumentHeaderDepartmentStore(object);
    @defineDocumentDetailDepartmentStore(object);
END

// Примечание

META defineDocumentHeaderNote (object)
    note###object 'Примечание' = DATA STRING[100] (object) IN additionalInfo MINCHARWIDTH 30 PREFCHARWIDTH 80 IN documentPrmGroup;
END

META defineDocumentDetailNote (object)
    note###object##Detail 'Примечание' = DATA STRING[100] (object##Detail) MINCHARWIDTH 30 PREFCHARWIDTH 80;
END

// Проведение

META defineDocumentHeaderPosted (object)

    isDraft###object 'Открыт' (object) = object IS object AND NOT object IS object##Posted PERSISTENT;
    isPosted###object 'Закрыт' (object) = object IS object##Posted PERSISTENT;

    post###object 'Провести' (object) = [ACTION (object) NEWSESSION AUTOAPPLY { CHANGECLASS object TO object##Posted; } ] (object)
                                    IF object IS object AND NOT object IS object##Posted TOOLBAR CONFIRM;

    unpost###object 'Распровести' (object) = [ACTION (object) NEWSESSION AUTOAPPLY { CHANGECLASS object TO object; } ] (object)
                                      IF object IS object##Posted TOOLBAR CONFIRM;
END

META defineDocumentDetailPostedCustom (object, detail)
    isPosted###detail 'Закрыт' (idetail) = isPosted###object(object###detail(idetail));
    isNotPosted###detail 'Открыт' (idetail) = idetail IS detail AND NOT isPosted###detail(idetail);
END

META defineDocumentDetailPosted (object)
    @defineDocumentDetailPostedCustom(object, object##Detail);
END

META defineDocumentPosted (object)
    @defineDocumentHeaderPosted(object);
    @defineDocumentDetailPosted(object);
END

META defineDocumentDetailIndexCustom (object, detail)
    index###detail 'Номер строки' (idetail) =
        PARTITION SUM 1 IF idetail IS detail BY object###detail(idetail)
        ORDER idetail IN recognizeGroup MINCHARWIDTH 3 PREFCHARWIDTH 3;
END

META defineDocumentDetailIndex (object)
    @defineDocumentDetailIndexCustom(object, object##Detail);
END

META defineDocumentDetailNumbered (object)
    number###object##Detail 'Номер' (detail) = numberObject(object###object##Detail(detail));
    series###object##Detail 'Серия' (detail) = seriesObject(object###object##Detail(detail));
    seriesNumber###object##Detail 'Серия/номер' (detail) = seriesNumberObject(object###object##Detail(detail));
END

GROUP itemDetailGroup 'Товар' : publicGroup;

META defineDocumentDetailItem (object)

    item###object##Detail = DATA item (object##Detail);

    nameAttributeItem###object##Detail 'Товар' (detail) =
        nameAttributeItem(item###object##Detail(detail)) IN itemDetailGroup;

    shortNameUnitOfMeasureItem###object##Detail 'Ед. изм.' (detail) =
        shortNameUnitOfMeasureItem(item###object##Detail(detail)) IN itemDetailGroup;

    articleItem###object##Detail 'Артикул' (detail) = articleItem(item###object##Detail(detail)) IN itemDetailGroup;

    nameCountryItem###object##Detail 'Страна' (detail) = nameCountryItem(item###object##Detail(detail)) IN itemDetailGroup;

    barcodeExSku###object##Detail 'Штрих-код' (detail) =
        barcodeEx(barcodeSku(item###object##Detail (detail))) IN itemDetailGroup;

END

META defineDocumentDetailItemExtra (object)

    controlExpiryItem###object##Detail 'Контролировать сроки годности товара?' (detail) =
        controlExpiryItem (item###object##Detail(detail)) IN itemDetailGroup;

    isManufacturedItem###object##Detail 'Товар производится?' (detail) = isManufacturedItem(item###object##Detail(detail)) IN itemDetailGroup;
    isWeightItem###object##Detail 'Весовой товар?' (detail) = isWeightItem(item###object##Detail(detail)) IN itemDetailGroup;

    nameInActionItemDepartment###object##Detail 'Товар акции?' (detail) = name(inActionItemDepartmentVal(item###object##Detail(detail),
        departmentStore###object##Detail(detail), date###object##Detail(detail))) IN itemDetailGroup FIXEDCHARWIDTH 3;

    hintItem###object##Detail 'Подсказка по товару' (detail) = hintItem(item###object##Detail(detail)) IN itemDetailGroup MINCHARWIDTH 20 PREFCHARWIDTH 20;

    nameBanRevaluationItemDepartment###object##Detail 'Запрет на переоценку' (detail) = name(banRevaluationItemDepartmentVal(item###object##Detail(detail),
        departmentStore###object##Detail(detail), date###object##Detail(detail))) IN itemDetailGroup FIXEDCHARWIDTH 3;

END

META defineDocumentDetailItemActions (object)

    add###object##DetailBarcode 'Добавить строку по штрих-коду' = ACTION (object) {
        FORM barcodeInput MODAL;

        IF formResult() == formResult.ok THEN {
            SET tmpSku() <- skuBarcodeStringDate(chosenString('barcode'), date###object(object));
            IF tmpSku() IS item THEN {
                ADDOBJ object##Detail;
                FOR o == addedObject() DO {
                    SET object###object##Detail(o) <- object AS object;
                    SET item###object##Detail(o) <- tmpSku();
            //        SET quantity###object##Detail(o) <- amountBarcode(valueBarcodeToDate(chosenString('barcode'), date###object(object)));
                };
            } ELSE
                MESSAGE 'Не найден штрих-код';
        };

    }TOOLBAR EDITKEY 'F4';

    cleanAll###object##Details###object 'Очистить документ' = ACTION (object) {
        FOR object###object##Detail (detail) == object DO {
          EXEC delete(detail AS object##Detail);
        };
    } IN documentPrmGroup TOOLBAR CONFIRM;

END

META defineDocumentDetailQuantity (object)
    quantity###object##Detail 'Кол-во' = DATA NUMERIC[14,3] (object##Detail);
END

GROUP priceDetailGroup 'Цены' : publicGroup;

META defineDocumentDetailInPrice (object)
    importerPrice###object##Detail 'Цена изготовителя/импортера' = DATA NUMERIC[14,2] (object##Detail) IN priceDetailGroup;
    supplierPrice###object##Detail 'Цена поставщика без НДС' = DATA NUMERIC[14,2] (object##Detail) IN priceDetailGroup;
END

META defineDocumentDetailInvoicePrice (object)
    supplierMarkup###object##Detail 'Оптовая надбавка/торговая скидка, %' (detail) = DATA NUMERIC[6,2] (object##Detail) IN priceDetailGroup;
    overSupplierMarkup###object##Detail 'Оптовая надбавка/торговая скидка, %' (detail) =
            UNION OVERRIDE 0 IF detail IS object##Detail, supplierMarkup###object##Detail(detail);

    supplierRange###object##Detail(detail) = DATA range (object##Detail);
    numberSupplierRange###object##Detail 'НДС поставщика, номер' (detail) = dataRange(supplierRange###object##Detail(detail)) IN priceDetailGroup;
    dataSupplierRange###object##Detail 'НДС поставщика,%' (detail) = dataActingRateRangeDate
        (supplierRange###object##Detail(detail), date###object##Detail(detail)) IN priceDetailGroup;

    CONSTRAINT taxRange(supplierRange###object##Detail(detail)) != tax.taxNDS CHECKED BY supplierRange###object##Detail MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';
END

META defineDocumentDetailWareRange (object)
    wareRange###object##Detail (detail) = rangeWareVal(ware###object##Detail(detail), date###object##Detail(detail));
    numberWareRange###object##Detail 'НДС посуды, номер' (detail) = dataRange(wareRange###object##Detail(detail)) IN priceDetailGroup;
    dataWareRange###object##Detail 'НДС посуды, %' (detail) = dataActingRateRangeDate(wareRange###object##Detail(detail), date###object##Detail(detail)) IN priceDetailGroup;
END

META defineDocumentDetailWare (object)
    ware###object##Detail = DATA ware(object##Detail);
    nameWare###object##Detail 'Посуда' (detail) = name(ware###object##Detail(detail)) IN priceDetailGroup;

    warePrice###object##Detail 'Цена посуды с НДС' = DATA NUMERIC[14,2] (object##Detail) IN priceDetailGroup;

    inWare###object##Detail 'Товар в посуде' (detail) = inWareItem(item###object##Detail(detail));

    @defineDocumentDetailWareRange(object);
END

META defineDocumentDetailRetailPrice (object)
    retailPrice###object##Detail 'Розничная цена' = DATA NUMERIC[14,2] (object##Detail) IN priceDetailGroup;
END

META defineDocumentDetailOutPrice (object)
    retailRange###object##Detail = DATA range (object##Detail);
    numberRetailRange###object##Detail 'НДС розничный, номер' (detail) = dataRange(retailRange###object##Detail(detail)) IN priceDetailGroup;
    dataRetailRange###object##Detail 'НДС розничный, %' (detail) =
       dataActingRateRangeDate(retailRange###object##Detail(detail), date###object##Detail(detail)) IN priceDetailGroup;

    CONSTRAINT taxRange(retailRange###object##Detail(detail)) != tax.taxNDS CHECKED BY retailRange###object##Detail MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

    @defineDocumentDetailRetailPrice(object);
END

META defineDocumentDetailBasePrice (object)
    @defineDocumentDetailWare(object);
    @defineDocumentDetailInPrice(object);
    @defineDocumentDetailOutPrice(object);
END

// todo : вот эту часть нужно будет грохнуть и переделать на один большой метакод

META defineDocumentDetailCurWareRange (object)
    curWareRange###object##Detail (detail) = rangeWareVal(curWare###object##Detail(detail), date###object##Detail(detail));
    curNumberWareRange###object##Detail 'Текущий НДС посуды, номер' (detail) = dataRange(curWareRange###object##Detail(detail));
    curDataWareRange###object##Detail 'Текущий НДС посуды, %' (detail) = dataActingRateRangeDate(curWareRange###object##Detail(detail), date###object##Detail(detail));
END

META defineDocumentDetailCurWare (object)
    curWare###object##Detail = DATA ware (object##Detail) IN idGroup;
    curNameWare###object##Detail 'Текущая посуда' (detail) = name(curWare###object##Detail(detail)) IN priceDetailGroup MINCHARWIDTH 20 PREFCHARWIDTH 20;

    curWarePrice###object##Detail 'Текущая цена посуды' (detail) = DATA NUMERIC[14,2] (object##Detail) IN priceDetailGroup;

    @defineDocumentDetailCurWareRange(object);
END

META defineDocumentDetailCurInPrice (object)
    curImporterPrice###object##Detail 'Тек. цена изготовителя/импортера' = DATA NUMERIC[14,2] (object##Detail) IN priceDetailGroup;
    curSupplierPrice###object##Detail 'Тек. цена поставщика' = DATA NUMERIC[14,2] (object##Detail) IN priceDetailGroup;
END

META defineDocumentDetailCurRetailPrice (object)
    curRetailPrice###object##Detail 'Тек. розничная цена' (detail) = DATA NUMERIC[14,2] (object##Detail) IN priceDetailGroup;
END

META defineDocumentDetailCurOutPrice (object)
    curRetailRange###object##Detail = DATA range (object##Detail);
    curNumberRetailRange###object##Detail 'Тек. НДС розничный, номер' (detail) = dataRange(curRetailRange###object##Detail(detail)) IN priceDetailGroup;
    curDataRetailRange###object##Detail 'Тек. НДС розничный, %' (detail) =
       dataActingRateRangeDate(curRetailRange###object##Detail(detail), date###object##Detail(detail)) IN priceDetailGroup;

    CONSTRAINT taxRange(curRetailRange###object##Detail(detail)) != tax.taxNDS CHECKED BY curRetailRange###object##Detail MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

    @defineDocumentDetailCurRetailPrice(object);
END

META defineDocumentDetailCurBasePrice (object)
    @defineDocumentDetailCurWare(object);
    @defineDocumentDetailCurInPrice(object);
    @defineDocumentDetailCurOutPrice(object);
END

META defineDocumentDetailCalcRange (object)
    calcRange###object##Detail = DATA range (object##Detail);
    calcRange###object##Detail (detail) <- rangeToTaxStore(tax.taxNDS,
                                storeDepartmentStore(departmentStore###object##Detail(detail))) WHEN detail IS object##Detail;

    numberCalcRange###object##Detail 'НДС расчетный, номер' (detail) = dataRange(calcRange###object##Detail(detail));
    dataCalcRange###object##Detail 'НДС расчетный, %' (detail) =
       dataActingRateRangeDate(calcRange###object##Detail(detail), date###object##Detail(detail));

    CONSTRAINT taxRange(calcRange###object##Detail(detail)) != tax.taxNDS CHECKED BY calcRange###object##Detail MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';
END

META defineDocumentDetailAccountPrice (object)
    accountPrice###object##Detail 'Учетная цена' = DATA NUMERIC[14,2] (object##Detail) IN baseGroup;
END

META defineDocumentDetailInSum (object)
    supplierISum###object##Detail 'Сумма поставщика без НДС' (detail) = round0(quantity###object##Detail(detail) * supplierPrice###object##Detail(detail));
END

META defineDocumentDetailCurInSum (object)
    curSupplierISum###object##Detail 'Текущая сумма поставщика без НДС' (detail) = round0(quantity###object##Detail(detail) * curSupplierPrice###object##Detail(detail));
END

META defineDocumentDetailInvoiceSum (object)
    supplierVATIPrice###object##Detail 'Цена НДС поставщика (без посуды)' (detail) = [X*Y/100](
        supplierPrice###object##Detail(detail), dataSupplierRange###object##Detail(detail));

    calcSupplierVATISum###object##Detail 'Сумма НДС (расч.)' (detail) = round0(
        quantity###object##Detail(detail) * supplierVATIPrice###object##Detail(detail));

    supplierVATISum###object##Detail 'Сумма НДС поставщика (без посуды)' (detail) = DATA NUMERIC[16,2] (object##Detail) IN baseGroup;
    supplierVATISum###object##Detail(detail) <- calcSupplierVATISum###object##Detail(detail)
                                                       WHEN CHANGED(calcSupplierVATISum###object##Detail(detail));

    calcInvoiceISum###object##Detail 'Сумма поставщика с НДС (расч.)' (detail) =
        supplierISum###object##Detail(detail) (+) supplierVATISum###object##Detail(detail);

    invoiceISum###object##Detail 'Сумма поставщика с НДС (без посуды)' (detail) = DATA NUMERIC[16,2] (object##Detail) IN baseGroup;
    invoiceISum###object##Detail(detail) <- calcInvoiceISum###object##Detail(detail)
                                          WHEN CHANGED(calcInvoiceISum###object##Detail(detail));

    invoiceSum###object##Detail 'Сумма поставщика с НДС' (detail) =
        invoiceISum###object##Detail(detail) (+) wareSum###object##Detail(detail);

    supplierSum###object##Detail 'Сумма поставщика без НДС' (detail) =
        invoiceISum###object##Detail (detail) (-) supplierVATISum###object##Detail (detail) (+) wareSupplierSum###object##Detail(detail);
END

META defineDocumentDetailWareSum (object)
    wareSum###object##Detail 'Сумма посуды с НДС' (detail) = quantity###object##Detail(detail) * warePrice###object##Detail(detail);

    wareVATPrice###object##Detail 'Цена НДС посуды' (object##Detail) = [round1(X*Y/(100+Y))](
        warePrice###object##Detail (object##Detail), dataWareRange###object##Detail(object##Detail));

    wareVATSum###object##Detail 'Сумма НДС по посуде' (object##Detail) = round0(
        quantity###object##Detail(object##Detail) * wareVATPrice###object##Detail(object##Detail));

    wareSupplierPrice###object##Detail 'Цена посуды без НДС' (object##Detail) =
        warePrice###object##Detail (object##Detail) (-) wareVATPrice###object##Detail(object##Detail);

    wareSupplierSum###object##Detail 'Сумма посуды без НДС' (object##Detail) =
        wareSum###object##Detail(object##Detail) (-) wareVATSum###object##Detail(object##Detail);
END

META defineDocumentDetailCurWareSum (object)
    curWareSum###object##Detail 'Текущая сумма посуды с НДС' (detail) = quantity###object##Detail(detail) * curWarePrice###object##Detail(detail);

    curWareVATPrice###object##Detail 'Текущая цена НДС посуды' (object##Detail) = [round1(X*Y/(100+Y))](
        curWarePrice###object##Detail (object##Detail), curDataWareRange###object##Detail(object##Detail));

    curWareVATSum###object##Detail 'Текущая сумма НДС по посуде' (object##Detail) = round0(
        quantity###object##Detail(object##Detail) * curWareVATPrice###object##Detail(object##Detail));

    curWareSupplierPrice###object##Detail 'Текущая цена посуды без НДС' (object##Detail) =
        curWarePrice###object##Detail (object##Detail) (-) curWareVATPrice###object##Detail(object##Detail);

    curWareSupplierSum###object##Detail 'Текущая сумма посуды без НДС' (object##Detail) =
        curWareSum###object##Detail(object##Detail) (-) curWareVATSum###object##Detail(object##Detail);
END

META defineDocumentDetailRetailSum (object)
    retailSum###object##Detail 'Розничная сумма' (detail) = round0(quantity###object##Detail(detail) * retailPrice###object##Detail(detail));
END

META defineDocumentDetailCurRetailSum (object)
    curRetailSum###object##Detail 'Текущая розничная сумма' (detail) = round0(quantity###object##Detail(detail) * curRetailPrice###object##Detail(detail));
END

META defineDocumentDetailOutSum (object)
    @defineDocumentDetailRetailSum(object);

    retailISum###object##Detail 'Розничная сумма (без посуды)' (detail) = retailSum###object##Detail(detail) (-) wareSum###object##Detail(detail);

    retailVATISum###object##Detail 'Сумма НДС (без посуды)' (detail) = [round0(X*Y/(100+Y))](
                retailISum###object##Detail(detail), dataRetailRange###object##Detail(detail));

    retailVATSum###object##Detail 'Сумма НДС' (detail) = retailVATISum###object##Detail(detail) (+) wareVATSum###object##Detail(detail);

    markupSum###object##Detail 'Сумма надбавки' (detail) =
        retailISum###object##Detail(detail) (-) retailVATISum###object##Detail(detail) (-) supplierISum###object##Detail(detail);
END

META defineDocumentDetailCurOutSum (object)
    @defineDocumentDetailCurRetailSum(object);

    curRetailISum###object##Detail 'Текущая розничная сумма (без посуды)' (detail) = curRetailSum###object##Detail(detail) (-) curWareSum###object##Detail(detail);

    curRetailVATISum###object##Detail 'Текущая сумма НДС (без посуды)' (detail) = [round0(X*Y/(100+Y))](
                curRetailISum###object##Detail(detail), curDataRetailRange###object##Detail(detail));

    curRetailVATSum###object##Detail 'Текущая сумма НДС' (detail) = curRetailVATISum###object##Detail(detail) (+) curWareVATSum###object##Detail(detail);

    curMarkupSum###object##Detail 'Текущая сумма надбавки' (detail) =
        curRetailISum###object##Detail(detail) (-) curRetailVATISum###object##Detail(detail) (-) curSupplierISum###object##Detail(detail);
END

META defineDocumentDetailCalcVATSum (object)
    calcVATSum###object##Detail 'Сумма НДС (расч.)' (detail) = round0(retailSum###object##Detail(detail) * dataCalcRange###object##Detail(detail) / 100);

    calcSaleSum###object##Detail 'Сумма без НДС (расч.)' (detail) = retailSum###object##Detail(detail) (-) calcVATSum###object##Detail(detail);
END

META defineDocumentDetailAccountSumCustom (object, detail)
    accountSum###detail 'Учетная сумма' (detail) = quantity###detail(detail) * accountPrice###detail(detail);
END

META defineDocumentDetailAccountSum (object)
    @defineDocumentDetailAccountSumCustom(object, object##Detail);
END

META defineDocumentHeaderQuantityCustom (object, detail)
    quantity###detail###object 'Кол-во (всего)' (object) = GROUP SUM quantity###detail(idetail) BY object###detail(idetail) IN documentSumGroup PERSISTENT;
END

META defineDocumentHeaderQuantity (object)
    @defineDocumentHeaderQuantityCustom(object, object##Detail);
END

META defineDocumentHeaderItemQuantityCustom (object, detail)
    quantity###detail##Item###object 'Кол-во товара в документе' (item, object) = GROUP SUM quantity###detail(idetail)
                                                                                      BY  item###detail(idetail),
                                                                                          object###detail(idetail);
END

META defineDocumentHeaderItemQuantity (object)
    @defineDocumentHeaderItemQuantityCustom(object, object###detail);
END

META defineDocumentHeaderInSum (object)
    supplierISum###object##Detail###object 'Сумма поставщика без НДС (без посуды)' (object) =
        GROUP SUM supplierISum###object##Detail(idetail) BY object###object##Detail(idetail) IN documentSumGroup;
END

META defineDocumentHeaderCurInSum (object)
    curSupplierISum###object##Detail###object 'Текущая сумма поставщика без НДС (без посуды)' (object) =
        GROUP SUM curSupplierISum###object##Detail(idetail) BY object###object##Detail(idetail) IN documentSumGroup;
END

META defineDocumentHeaderInvoiceSum (object)
    supplierVATISum###object##Detail###object 'Сумма НДС поставщика (без посуды)' (object) =
        GROUP SUM supplierVATISum###object##Detail(detail) BY object###object##Detail(detail);

    invoiceISum###object##Detail###object 'Сумма поставщика с НДС (без посуды)' (object) =
        GROUP SUM invoiceISum###object##Detail(object##Detail) BY object###object##Detail(object##Detail);

    invoiceVATSum###object##Detail###object 'Сумма НДС поставщика' (object) =
        supplierVATISum###object##Detail###object(object) (+) wareVATSum###object##Detail###object(object) IN documentSumGroup PERSISTENT;

    invoiceSum###object##Detail###object 'Сумма поставщика с НДС' (object) =
        invoiceISum###object##Detail###object(object) (+) wareSum###object##Detail###object(object) IN documentSumGroup PERSISTENT;

    supplierSum###object##Detail###object 'Сумма поставщика без НДС' (object) =
        invoiceSum###object##Detail###object (object) (-) invoiceVATSum###object##Detail###object (object);
END

META defineDocumentHeaderWareSumCustom (object, detail)
    wareSum###detail###object 'Сумма посуды с НДС' (object) =
        GROUP SUM wareSum###detail(idetail) BY object###detail(idetail) IN documentSumGroup;

    wareVATSum###detail###object 'Сумма НДС по посуде' (object) =
        GROUP SUM wareVATSum###detail(idetail) BY object###detail(idetail) IN documentSumGroup;
END

META defineDocumentHeaderWareSum (object)
    @defineDocumentHeaderWareSumCustom(object, object##Detail);
END

META defineDocumentHeaderCurWareSumCustom (object, detail)
    curWareSum###detail###object 'Текущая сумма посуды с НДС' (object) =
        GROUP SUM curWareSum###detail(idetail) BY object###detail(idetail) IN documentSumGroup;

    curWareVATSum###detail###object 'Текущая сумма НДС по посуде' (object) =
        GROUP SUM curWareVATSum###detail(idetail) BY object###detail(idetail) IN documentSumGroup;
END

META defineDocumentHeaderCurWareSum (object)
    @defineDocumentHeaderCurWareSumCustom(object, object##Detail);
END

META defineDocumentHeaderRetailSumCustom (object, detail)
    retailSum###detail###object 'Розничная сумма' (object) =
        GROUP SUM retailSum###detail(idetail) BY object###detail(idetail) IN documentSumGroup;

    retailSumItem###detail###object 'Розничная сумма (окр.), товар' (idetail) =
        GROUP SUM retailSum###detail(idetail) AND NOT isContainerItem(item###detail(idetail))
            BY object###detail(idetail) IN documentSumGroup;
    retailSumContainer###detail###object 'Розничная сумма (окр.), тара' (idetail) =
        GROUP SUM retailSum###detail(idetail) IF isContainerItem(item###detail(idetail))
            BY object###detail(idetail) IN documentSumGroup;
END

META defineDocumentHeaderRetailSum (object)
    @defineDocumentHeaderRetailSumCustom(object, object##Detail);
END

META defineDocumentHeaderCurRetailSumCustom (object, detail)
    curRetailSum###detail###object 'Текущая розничная сумма' (object) =
        GROUP SUM curRetailSum###detail(idetail) BY object###detail(idetail) IN documentSumGroup;
END

META defineDocumentHeaderCurRetailSum (object)
    @defineDocumentHeaderCurRetailSumCustom(object, object##Detail);
END

META defineDocumentHeaderOutSumCustom (object, detail)
    @defineDocumentHeaderRetailSumCustom(object, detail);

    retailVATISum###detail###object 'Сумма НДС (без посуды)' (object) =
        GROUP SUM retailVATISum###detail(idetail) BY object###detail(idetail);

    retailVATSum###detail###object 'Сумма НДС' (detail) = retailVATISum###detail###object(detail) (+) wareVATSum###detail###object(detail);

    markupSum###detail###object 'Сумма надбавки' (object) =
        GROUP SUM markupSum###detail(idetail) BY object###detail(idetail);
END

META defineDocumentHeaderOutSum (object)
    @defineDocumentHeaderOutSumCustom(object, object##Detail);
END

META defineDocumentHeaderCurOutSumCustom (object, detail)
    @defineDocumentHeaderCurRetailSumCustom(object, detail);

    curRetailVATISum###detail###object 'Текущая сумма НДС (без посуды)' (object) =
        GROUP SUM curRetailVATISum###detail(idetail) BY object###detail(idetail);

    curRetailVATSum###detail###object 'Текущая сумма НДС' (detail) = curRetailVATISum###detail###object(detail) (+) curWareVATSum###detail###object(detail);

    curMarkupSum###detail###object 'Текущая сумма надбавки' (object) =
        GROUP SUM curMarkupSum###detail(idetail) BY object###detail(idetail);
END

META defineDocumentHeaderCurOutSum (object)
    @defineDocumentHeaderCurOutSumCustom(object, object##Detail);
END

META defineDocumentHeaderItemSumCustom (object, detail)
    retailSum###detail##Item###object 'Розничная сумма товара в документе' (item, object) = GROUP SUM retailSum###detail(idetail)
                                                                                                  BY  item###detail(idetail),
                                                                                                      object###detail(idetail);
END

META defineDocumentHeaderItemSum (object)
    @defineDocumentHeaderItemSumCustom(object, object);
END

META defineDocumentHeaderCalcVATSumCustom (object, detail)
    calcVATSum###detail###object 'Сумма НДС (расч., окр.)' (iobject) = GROUP SUM calcVATSum###detail(idetail) BY object###detail(idetail) IN documentSumGroup;

    calcSaleSum###detail###object 'Сумма без НДС (расч., окр.)' (iobject) = retailSum###detail###object(iobject) (-) calcVATSum###detail###object(iobject) IN documentSumGroup;
END

META defineDocumentHeaderCalcVATSum (object)
    @defineDocumentHeaderCalcVATSumCustom(object, object##Detail);
END

META defineDocumentHeaderAccountSumCustom (object, detail)
    accountSum###detail###object 'Учетная сумма' (object) = GROUP SUM accountSum###detail(idetail) BY object###detail(idetail) IN documentSumGroup;

    accountSumItem###detail###object 'Учетная сумма, товар' (idetail) =
        GROUP SUM accountSum###detail(idetail) AND NOT isContainerItem(item###detail(idetail))
            BY object###detail(idetail) IN documentSumGroup;
    accountSumContainer###detail###object 'Учетная сумма, тара' (idetail) =
        GROUP SUM accountSum###detail(idetail) IF isContainerItem(item###detail(idetail))
            BY object###detail(idetail) IN documentSumGroup;
END

META defineDocumentHeaderAccountSum (object)
    @defineDocumentHeaderAccountSumCustom(object, object##Detail);
END

META defineDocumentHeaderRevaluation (object)
    numberDisposal###object '№ распоряжения на переоценку' (object) = DATA STRING[30] (object) IN documentPrmGroup;

    revaluationCommittee###object = DATA revaluationCommittee (object) IN idGroup;
    nameRevaluationCommittee###object 'Комиссия переоценки' (object) = name(revaluationCommittee###object(object)) IN documentPrmGroup;
    revaluationCommittee###object(object) <- revaluationCommitteeDepartmentStore(departmentStore###object(object))
        WHEN object IS object;
END

// ------------------------- Свойства для накладных ---------------------------------- //

META defineDocumentPackAndWeightConsignment (object, detail)

    packQuantity###object##Detail 'Количество грузовых мест' (idetail) = round0(quantity###object##Detail(idetail)/
        UNION OVERRIDE 1 IF idetail IS detail, quantityPackItem(item###object##Detail(idetail)));

    sumPackQuantity###object 'Общее количество грузовых мест' (object) = GROUP SUM packQuantity###object##Detail(idetail)
        BY object###object##Detail(idetail) IN sumConsignmentGroup;

    grossWeight###object##Detail 'Масса груза, т.' (idetail) = round3(
        grossWeightItem(item###object##Detail(idetail))*quantity###object##Detail(idetail)/1000);

    sumGrossWeight###object 'Общая масса груза, т.' (object) = GROUP SUM grossWeight###object##Detail(idetail)
        BY object###object##Detail(idetail) IN sumConsignmentGroup;

END

META defineDocumentHeaderConsignment (object)

    car###object 'Автомобиль' (object) = DATA STRING[30] (object);
    ownerCar###object 'Владелец автомобиля' (object) = DATA STRING[100] (object);
    trailer###object 'Прицеп' (object) = DATA STRING[10] (object);
    driverCar###object 'Водитель' (object) = DATA STRING[40] (object);
    waybill###object 'Путевой лист' (object) = DATA STRING[20] (object);

    transportPayer###object 'Заказчик перевозки (ИД)' (object) = DATA legalEntity (object);

    shipmentBase###object 'Основание отпуска' (object) = DATA STRING[30] (object);

    dataLoadingPlace###object 'Пункт погрузки' (object) = DATA STRING[50] (object);
    loadingPlace###object 'Пункт погрузки' (object) = UNION OVERRIDE addressStore(storeDepartmentStore(departmentStore###object(object))),
                                                           dataLoadingPlace###object (object);

    dataUnloadingPlace###object 'Пункт разгрузки' (object) = DATA STRING[50] (object);

    readdressing###object 'Переадресовка' (object) = DATA STRING[50] (object);

    issuanceAllowed###object 'Отпуск разрешил' (object) = DATA employee(object);
    issuanceExecuted###object 'Отпуск произвел' (object) = DATA employee(object);

    forwarder###object 'Товар к перевозке принял (экспедитор), должность, фамилия, инициалы' (object) = DATA STRING[40] (object);

    warrant###object 'По доверенности (номер, дата)' (object) = DATA STRING[30](object);
    warrantHolder###object 'По доверенности выданной (наименование орг-ии)' (object) = DATA STRING[100](object);

    goodsAccepted###object 'Принял грузополучатель' (object) = DATA STRING[40] (object);

    loadingExecuter###object 'Исполнитель ПРР' (object) = DATA employee(object);

    wayOfLoading###object 'Способ ПРР' (object) = DATA wayOfLoading(object);
    codeLoading###object 'Код ПРР' (object) = DATA STRING[3] (object);

    arrivalTime###object 'Время прибытия' (object) = DATA DATETIME(object);
    departureTime###object 'Время убытия' (object) = DATA DATETIME(object);
    downtime###object 'Время простоя' (object) = DATA STRING[10] (object);

    raceQuantity###object 'Количество ездок' (object) = DATA INTEGER (object);

    @defineDocumentPackAndWeightConsignment(object, object##Detail);

END

// ------------------------- Ссылка на "parent" объекты ---------------------------------- //

META defineDocumentHeaderAggregationNumberCustom (primObject, aggrObject, suffix)
    number###aggrObject 'Номер документа' (object) = number###suffix(primObject###aggrObject(object));
    series###aggrObject 'Серия документа' (object) = series###suffix(primObject###aggrObject(object));
    seriesNumber###aggrObject 'Серия/номер документ' (object) = seriesNumber###suffix(primObject###aggrObject(object));
END

META defineDocumentHeaderAggregationNumber (primObject, aggrObject)
    @defineDocumentHeaderAggregationNumberCustom (primObject, aggrObject, Object);
END

META defineDocumentHeaderAggregationDescription (primObject, aggrObject)
    description###aggrObject 'Название документа' (object) = description###primObject(primObject###aggrObject(object));
END

META defineDocumentHeaderAggregation (primObject, aggrObject)
    date###aggrObject 'Дата' (object) = date###primObject(primObject###aggrObject(object));
    time###aggrObject 'Время' (object) = time###primObject(primObject###aggrObject(object));
    dateTime###aggrObject 'Дата/время' (object) = dateTime###primObject(primObject###aggrObject(object));

    departmentStore###aggrObject (object) = departmentStore###primObject(primObject###aggrObject(object));
    nameDepartmentStore###aggrObject 'Отдел документа' (object) = name(departmentStore###aggrObject(object));

    isPosted###aggrObject 'Закрыт' (object) = isPosted###primObject(primObject###aggrObject(object));
END

META defineDocumentDetailAggregationHeader (primObject, aggrObject)
    isPosted###aggrObject##Detail 'Закрыт' (detail) = isPosted###primObject##Detail(primObject##Detail###aggrObject##Detail(detail));

    date###aggrObject##Detail 'Дата' (detail) = date###primObject##Detail(primObject##Detail###aggrObject##Detail(detail));
    dateTime###aggrObject##Detail 'Дата/время' (detail) = dateTime###primObject##Detail(primObject##Detail###aggrObject##Detail(detail));

    departmentStore###aggrObject##Detail (detail) = departmentStore###primObject##Detail(primObject##Detail###aggrObject##Detail(detail));
END

META defineDocumentDetailAggregationItem (primObject, aggrObject)
    item###aggrObject##Detail (detail) = item###primObject##Detail(primObject##Detail###aggrObject##Detail(detail));
    nameItem###aggrObject##Detail 'Товар' (detail) = nameAttributeItem(item###aggrObject##Detail(detail));
    barcodeExSku###aggrObject##Detail 'Штрих-код' (detail) = barcodeEx(barcodeSku(item###aggrObject##Detail(detail)));
END

META defineDocumentDetailAggregationPrice (primObject, aggrObject)
    importerPrice###aggrObject##Detail 'Цена изготовителя' (detail) = importerPrice###primObject##Detail(primObject##Detail###aggrObject##Detail(detail));
    supplierPrice###aggrObject##Detail 'Цена поставщика' (detail) = supplierPrice###primObject##Detail(primObject##Detail###aggrObject##Detail(detail));

    dataRetailRange###aggrObject##Detail 'НДС, %' (detail) = dataRetailRange###primObject##Detail(primObject##Detail###aggrObject##Detail(detail));

    ware###aggrObject##Detail 'Посуда' (detail) = ware###primObject##Detail(primObject##Detail###aggrObject##Detail(detail));
    dataWareRange###aggrObject##Detail 'НДС посуды, %' (detail) =
          dataActingRateRangeDate(rangeWareVal(ware###aggrObject##Detail(detail), date###aggrObject##Detail(detail)),
                                                                       date###aggrObject##Detail(detail));

    warePrice###aggrObject##Detail 'Цена посуды' (detail) =  warePrice###primObject##Detail(primObject##Detail###aggrObject##Detail(detail));

    retailPrice###aggrObject##Detail 'Розничная цена' (detail) = retailPrice###primObject##Detail(primObject##Detail###aggrObject##Detail(detail));
END

// ------------------------- Автоматическое изменение цен ---------------------------------- //

META defineDocumentPriceChange (object)
    needToPriceChange###object (object) = GROUP SUM 1 IF needToPriceChange###object##Detail(detail) BY object###object##Detail(detail);

    @metaCodeDetailAggregation(object, priceChange###object, needToPriceChange###object);

    @defineDocumentHeaderAggregation(object, priceChange###object);
    @defineDocumentHeaderAggregationDescription(object, priceChange###object);

    @defineDocumentDetailAggregationHeader(object, priceChange###object);
    @defineDocumentDetailAggregationItem(object, priceChange###object);

    numberDisposalPriceChange###object '№ распоряжения на переоценку' (object) = numberDisposal###object(object##PriceChange###object(object));
    revaluationCommitteePriceChange###object 'Комиссия переоценки ИД' (object) = revaluationCommittee###object(object##PriceChange###object(object));
END

META defineDocumentPriceChangeNumberCustom (object, suffix)
    @defineDocumentHeaderAggregationNumberCustom(object, priceChange###object, suffix);
END

META defineDocumentPriceChangeNumber (object)
    @defineDocumentPriceChangeNumberCustom(object, Object);
END

META defineDocumentPriceChangeQuantity (object)
    quantityPriceChange###object##Detail 'Количество' (detail) = quantity###object##Detail(object##DetailPriceChange###object##Detail(detail));
END

META defineDocumentPriceChangePrice (object)
    @defineDocumentDetailAggregationPrice(object, priceChange###object);
END

META defineDocumentPriceChangeCurRetailPrice (object)
    curRetailPricePriceChange###object##Detail 'Старая розничная цена' (detail) = curRetailPrice###object##Detail(object##DetailPriceChange###object##Detail(detail));
END

META defineDocumentPriceChangeCurPrice (object)

    curImporterPricePriceChange###object##Detail 'Цена изготовителя' (detail) = curImporterPrice###object##Detail(object##DetailPriceChange###object##Detail(detail));
    curSupplierPricePriceChange###object##Detail 'Цена поставщика' (detail) = curSupplierPrice###object##Detail(object##DetailPriceChange###object##Detail(detail));

    curDataRetailRangePriceChange###object##Detail 'НДС, %' (detail) = curDataRetailRange###object##Detail(object##DetailPriceChange###object##Detail(detail));

    curWarePriceChange###object##Detail 'Посуда' (detail) = curWare###object##Detail(object##DetailPriceChange###object##Detail(detail));
    curWarePricePriceChange###object##Detail 'Цена посуды' (detail) = curWarePrice###object##Detail(object##DetailPriceChange###object##Detail(detail));

    @defineDocumentPriceChangeCurRetailPrice (object);
END

// ----------------------------------- Поставщик ------------------------------------------ //

META defineDocumentHeaderSupplierContract(object)
    supplier###object 'Поставщик (ИД)' (object) = DATA supplier (object) IN idGroup;
    nameSupplier###object 'Поставщик' (object) = name(supplier###object(object)) IN documentPrmGroup MINCHARWIDTH 30 PREFCHARWIDTH 40;
    UNPSupplier###object 'УНП поставщика' (object) = UNPLegalEntity(supplier###object(object)) IN documentPrmGroup;
    supplier###object##Detail (detail) = supplier###object(object###object##Detail(detail));

    contract###object 'Договор' (object) = DATA contract (object) IN idGroup;

    contract###object (object) <- overrideContractCompanySupplier(companyDepartmentStore(departmentStore###object(object)), supplier###object(object))
                                   IF (countContracts(supplier###object(object), departmentStore###object(object)) == 1)
                                   WHEN CHANGED(supplier###object(object));

    numberContract###object 'Договор' (object) = numberContract(contract###object(object)) IN documentPrmGroup;

    dateContract###object 'Договор от' (object) = dateFromContract(contract###object(object)) IN documentPrmGroup;

    CONSTRAINT contract###object(object) AND NOT supplier###object(object) == supplierContract(contract###object(object))
        CHECKED BY contract###object MESSAGE 'Выберите договор данного поставщика';
    CONSTRAINT contract###object(object) AND NOT companyDepartmentStore(departmentStore###object(object)) == companyContract(contract###object(object))
        CHECKED BY contract###object MESSAGE 'Выберите договор данного юр. лица';
    CONSTRAINT contract###object(object) AND NOT isOperatingContract(contract###object(object), date###object(object))
        CHECKED BY contract###object MESSAGE 'Выберите действующий договор';
END

// ----------------------------------- Свойства для объектов Posted ------------------------------------------ //
META defineDocumentDefaultProperties (object)

    @defineDocumentTables(object);

    @defineDocumentRelation(object);

    @defineDocumentTime(object);
    @defineDocumentDepartmentStore(object);
    @defineDocumentHeaderNote(object);

    @defineDocumentDetailIndex(object);

    @defineDocumentDetailItem(object);
    @defineDocumentDetailItemActions(object);

    @defineDocumentPosted(object);

END

META metaCodeSingleAggregation (primObject, aggrObject, aggrProperty)

    primObject###aggrObject = DATA primObject (aggrObject);

    @metaCodeSinglePropsAggregation (primObject###aggrObject, aggrObject, aggrProperty);

END

META metaCodeSinglePropsAggregation (primProperty, aggrObject, aggrProperty)

    unique###aggrObject 'Одиночная агрегация' (primObject) =
        GROUP UNIQUE aggrObject BY primProperty(aggrObject)
        WHERE aggrObject IS aggrObject;

    aggrProperty(primObject) => unique###aggrObject(primObject) RESOLVE TRUE;

    is###aggrObject(aggrObject) = aggrObject IS aggrObject;
    is###aggrObject(aggrObject) => aggrProperty(primProperty(aggrObject)) RESOLVE FALSE;

END

META metaCodeDoubleAggregation (prim1Object, prim2Object, aggrObject, aggrProperty)

    prim1Object###aggrObject = DATA prim1Object (aggrObject);
    prim2Object###aggrObject = DATA prim2Object (aggrObject);

    @metaCodeDoublePropsAggregation(prim1Object###aggrObject, prim2Object###aggrObject, aggrObject, aggrProperty);

END

META metaCodeDoublePropsAggregation (prim1Property, prim2Property, aggrObject, aggrProperty)

    unique###aggrObject 'Двойная агрегация' (prim1Object, prim2Object) =
        GROUP UNIQUE aggrObject BY prim1Property(aggrObject), prim2Property(aggrObject)
        WHERE aggrObject IS aggrObject;

    aggrProperty(prim1Object, prim2Object) => unique###aggrObject(prim1Object, prim2Object) RESOLVE TRUE;

    is###aggrObject(aggrObject) = aggrObject IS aggrObject;
    is###aggrObject(aggrObject) => aggrProperty(prim1Property(aggrObject), prim2Property(aggrObject)) RESOLVE FALSE;

END


META metaCodeDetailAggregation (primObject, aggrObject, aggrProperty)

    @metaCodeSingleAggregation(primObject, aggrObject, aggrProperty);
    @metaCodeSingleAggregation(primObject##Detail, aggrObject##Detail, aggrProperty##Detail);

    aggrObject###aggrObject##Detail (detail) = unique###aggrObject(primObject###primObject##Detail(primObject##Detail###aggrObject##Detail(detail)));

END

// ----------------------------------- Товарный классификатор ------------------------------------------ //
CLASS itemGroup 'Товарная группа' : named, externalObject;
TABLE itemGroup(itemGroup);
TABLE itemGroupItemGroup (itemGroup, itemGroup);

parentItemGroup = DATA itemGroup (itemGroup); //AUTOSET;  --  пока не имеет смысла проставляет не ту группу
inParentItemGroupItemGroup (child, parent) = parentItemGroup(child) == parent;

nameParentItemGroup 'Родительская группа' = name(parentItemGroup(itemGroup));
maxTurnoverItemGroup 'Максимально допустимая товарооборачиваемость' (itemGroup) = DATA INTEGER (itemGroup);
minTurnoverItemGroup 'Минимально допустимая товарооборачиваемость' (itemGroup) = DATA INTEGER (itemGroup);

pieceNumeratorItemGroup = DATA numerator (itemGroup);
namePieceNumeratorItemGroup 'Нумератор штрих-кодов (для штучного товара)' (itemGroup) = name(pieceNumeratorItemGroup(itemGroup));

weightNumeratorItemGroup = DATA numerator (itemGroup);
nameWeightNumeratorItemGroup 'Нумератор штрих-кодов (для весового товара)' (itemGroup) = name(weightNumeratorItemGroup(itemGroup));

childNumberItemGroup 'Кол-во непосредственных потомков' (itemGroup) = GROUP SUM 1 BY parentItemGroup(group) PERSISTENT;

isLeafItemGroup 'Лист' (itemGroup) = itemGroup IS itemGroup AND NOT childNumberItemGroup(itemGroup) PERSISTENT;

hasParentItemGroupLevel 'Уровень' (child, parent) = RECURSION 1l AND child IS itemGroup AND parent == child
                                                                  STEP 2l AND parent == parentItemGroup($parent) PERSISTENT;
TABLE itemGroupStructure(itemGroup, itemGroup, LONG);

hasParentItemGroup 'Уровень' (child, parent) = TRUE AND hasParentItemGroupLevel(child, parent);

hasParentAndLeafItemGroup (child, parent) = hasParentItemGroup(child, parent) AND isLeafItemGroup(child);

canonicalNameItemGroup 'Каноническое имя' (itemGroup) = castToString255(
                           [GROUP CONCAT name(parent), ' / ' BY child ORDER DESC hasParentItemGroupLevel(child, parent)](itemGroup))

                           MINCHARWIDTH 50 MAXCHARWIDTH 100 PREFCHARWIDTH 100 PERSISTENT;
//levelItemGroup 'Уровень' (itemGroup) = GROUP SUM 1 IF hasParentItemGroup(child, parent) BY child PERSISTENT;

// формы за формами товара

// ----------------------------------- Единицы измерения ------------------------------------------ //
CLASS unitOfMeasure 'Единица измерения' : doubleNamed, externalObject;
TABLE unitOfMeasure (unitOfMeasure);

unitOfMeasureUnitOfMeasure 'Базовая ед.изм. ИД' = DATA unitOfMeasure(unitOfMeasure) IN idGroup;
shortNameUnitOfMeasureUnitOfMeasure 'Базовая ед.изм.' (unitOfMeasure) = shortName(unitOfMeasureUnitOfMeasure(unitOfMeasure)) IN baseGroup;
rightUnitOfMeasure 'Разместить от значения: справа' = DATA BOOLEAN (unitOfMeasure) IN baseGroup;
useUnitOfMeasure 'Используется' = DATA BOOLEAN (unitOfMeasure) IN baseGroup;
factorUnitOfMeasure 'Коэффициент пересчета в баз.ед.' = DATA NUMERIC[14,3] (unitOfMeasure) IN baseGroup;
weightUnitOfMeasure 'Для весовых товаров/услуг' = DATA BOOLEAN (unitOfMeasure) IN baseGroup;
pieceUnitOfMeasure 'Для штучных товаров/услуг' = DATA BOOLEAN (unitOfMeasure) IN baseGroup;


FORM unitOfMeasure 'Единица измерения'
OBJECTS u=unitOfMeasure FIXED PANEL
PROPERTIES(u) name, shortName, shortNameUnitOfMeasureUnitOfMeasure, factorUnitOfMeasure, rightUnitOfMeasure,
              useUnitOfMeasure, weightUnitOfMeasure, pieceUnitOfMeasure
EDIT unitOfMeasure OBJECT u;

FORM unitsOfMeasure 'Единицы измерений'
OBJECTS u=unitOfMeasure
PROPERTIES(u) READONLY name, shortName, shortNameUnitOfMeasureUnitOfMeasure, factorUnitOfMeasure, rightUnitOfMeasure,
              useUnitOfMeasure, weightUnitOfMeasure, pieceUnitOfMeasure
PROPERTIES(u) ADDFORM, EDITFORM, delete;

// ----------------------------------- Статистический классификатор ------------------------------------------ //

CLASS statisticGroup 'Статистическая группа' : named, externalObject;
TABLE statisticGroup(statisticGroup);
TABLE statisticGroupStatisticGroup (statisticGroup, statisticGroup);

CLASS STATIC groupStatic 'Ед. изм.' {
    liter 'Литр',
    thing 'Штука',
    pounds 'Килограмм',
    ruble 'Рубль'
};

parentStatisticGroup = DATA statisticGroup (statisticGroup);
nameParentStatisticGroup 'Родительская группа' (statisticGroup) = name(parentStatisticGroup(statisticGroup));

inParentStatisticGroupStatisticGroup (child, parent) = parentStatisticGroup(child) == parent;


childNumberStatisticGroup 'Кол-во непосредственных потомков' (statisticGroup) = GROUP SUM 1 BY parentStatisticGroup(group) PERSISTENT;

isLeafStatisticGroup 'Лист' (statisticGroup) = statisticGroup IS statisticGroup AND NOT childNumberStatisticGroup(statisticGroup) PERSISTENT;

hasParentStatisticGroupLevel 'Уровень' (child, parent) = RECURSION 1l AND child IS statisticGroup AND parent == child
                                                                  STEP 2l AND parent == parentStatisticGroup($parent) PERSISTENT;
TABLE statisticGroupStructure(statisticGroup, statisticGroup, LONG);

hasParentStatisticGroup 'Уровень' (child, parent) = TRUE AND hasParentStatisticGroupLevel(child, parent);

hasParentAndLeafStatisticGroup (child, parent) = hasParentStatisticGroup(child, parent) AND isLeafStatisticGroup(child);

unitMeasureStatisticGroup 'Ед. изм. ИД' (statisticGroup) = DATA groupStatic (statisticGroup) IN idGroup;
nameUnitOfMeasureStatisticGroup 'Ед. изм.' (statisticGroup) = name(unitMeasureStatisticGroup(statisticGroup)) MINCHARWIDTH 12 MAXCHARWIDTH 12 PREFCHARWIDTH 12;

sidStatisticGroup 'Код группы по ОКРБ 007-2007' (statisticGroup) = DATA STRING[12] (statisticGroup)  MINCHARWIDTH 12 MAXCHARWIDTH 12 PREFCHARWIDTH 12;
conversionFactorStatisticGroup 'Коэффициент перевода' (statisticGroup) = DATA NUMERIC[14,5] (statisticGroup);
canonicalNameStatisticGroup 'Каноническое имя' (statisticGroup) = castToString255(
                           [GROUP CONCAT name(parent), ' / ' BY child ORDER DESC hasParentStatisticGroupLevel(child, parent)](statisticGroup))
                           MINCHARWIDTH 50 MAXCHARWIDTH 100 PREFCHARWIDTH 100 PERSISTENT;

canonicalNumberStatisticGroup 'Каноническое код' (statisticGroup) = castToString255(
                           [GROUP CONCAT sidStatisticGroup(parent), ' / ' BY child ORDER DESC hasParentStatisticGroupLevel(child, parent)](statisticGroup))
                           MINCHARWIDTH 50 MAXCHARWIDTH 100 PREFCHARWIDTH 100 PERSISTENT;

canonicalNumberNameStatisticGroup 'Канонический код-название' (statisticGroup) = [FORMULA STRING[100] '$1 || \' / \' || $2'](
    canonicalNumberStatisticGroup(statisticGroup), name(statisticGroup));

FORM statisticGroup 'Статистическая группа'
    OBJECTS g=statisticGroup FIXED PANEL
    PROPERTIES(g)   name, nameParentStatisticGroup, sidStatisticGroup, nameUnitOfMeasureStatisticGroup,
                    conversionFactorStatisticGroup

    EDIT statisticGroup OBJECT g
;

addStatisticGroup 'Добавить' = ACTION (statisticGroup) NEWSESSION {
    ADDOBJ statisticGroup;
    FOR g == addedObject() DO {
        SET parentStatisticGroup(g) <- statisticGroup AS statisticGroup;
        FORM statisticGroup OBJECTS g=addedObject() MODAL;
        IF formResult() == formResult.ok THEN
            EXEC apply();
    };
} TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

FORM statisticGroups 'Статистические группы'
    TREE treeGroups g=statisticGroup PARENT parentStatisticGroup
    PROPERTIES READONLY name(g), sidStatisticGroup(g)
    PROPERTIES(g)       addStatisticGroup, EDITFORM
    ORDER BY sidStatisticGroup

    OBJECTS cg=statisticGroup
    PROPERTIES(cg)     READONLY canonicalNumberNameStatisticGroup, sidStatisticGroup, nameUnitOfMeasureStatisticGroup,
                       conversionFactorStatisticGroup
PROPERTIES(cg)  delete

    ORDER BY canonicalNumberNameStatisticGroup

    FILTERGROUP filters
        FILTER 'Все листья' 'F10' hasParentAndLeafStatisticGroup(cg, g) DEFAULT
        FILTER 'Всех потомков' 'F9' hasParentStatisticGroup(cg, g)
        FILTER 'Только непосредственных потомков' 'F8' inParentStatisticGroupStatisticGroup(cg, g)
;

DESIGN statisticGroups FROM DEFAULT {

    POSITION treeGroups.box TO THE LEFT cg.box;

    treeGroups.tree {
        fillHorizontal = 0.5;
    }

}

FORM statisticGroupDialog 'Статистические группы'
    TREE treeGroups g=statisticGroup PARENT parentStatisticGroup
    PROPERTIES(g) READONLY name, sidStatisticGroup
    PROPERTIES(g) addStatisticGroup, EDITFORM
    ORDER BY sidStatisticGroup

    DIALOG statisticGroup OBJECT g
;

// ------------------------------------ Цвета ------------------------------------------------ //
CLASS color 'Цвет' : named;
TABLE color (color);

FORM color 'Цвет'
OBJECTS c=color FIXED PANEL
PROPERTIES(c) name;

// ------------------------------------ Вкусы ------------------------------------------------------ //
CLASS taste 'Вкус' : named;
TABLE taste(taste);

FORM taste 'Вкус'
OBJECTS t=taste FIXED PANEL
PROPERTIES(t) name;

// ----------------------------------- Производители ---------------------------------- //
//CLASS manufacturer 'Производитель' : named;

//------------------------------------ Сорта-категории --------------------------------- //
CLASS sort 'Сорт/Категория' : named;
TABLE sort(sort);

FORM sort 'Сорт/Категория'
OBJECTS s=sort FIXED PANEL
PROPERTIES(s) name;

//------------------------------------ Упаковки ----------------------------------------//
CLASS pack 'Упаковка' : doubleNamed;
TABLE pack(pack);

FORM pack 'Упаковка'
OBJECTS p=pack FIXED PANEL
PROPERTIES(p) name, shortName;

//------------------------------------ Особенности изготовления ------------------------//
CLASS specialty 'Особенность' : doubleNamed;
TABLE specialty(specialty);

FORM specialty 'Особенность'
OBJECTS s=specialty FIXED PANEL
PROPERTIES(s) name, shortName;

//------------------------------------ Размеры/Калибры/Габариты ------------------------//
CLASS size 'Размер/калибр' : doubleNamed;
TABLE size(size);

FORM size 'Размер/калибр'
OBJECTS s=size FIXED PANEL
PROPERTIES(s) name, shortName;

//------------------------------------ Степень охлаждения ------------------------//
CLASS coolingDegree 'Степень охлаждения' : doubleNamed;
TABLE coolingDegree(coolingDegree);

FORM coolingDegree 'Степень охлаждения'
OBJECTS c=coolingDegree FIXED PANEL
PROPERTIES(c) name, shortName;

//------------------------------- Строки 1-торг ------------------------------------//
CLASS rowTorg1 'Строка формы 1-торг' : named;
TABLE rowTorg1(rowTorg1);

FORM rowTorg1 'Строка формы 1-торг'
OBJECTS r=rowTorg1 FIXED PANEL
PROPERTIES(r) name;

//------------------------------- Виды ------------------------------------//
CLASS typeItem 'Вид' : named;
TABLE typeItem(typeItem);

FORM typeItem 'Вид'
OBJECTS t=typeItem FIXED PANEL
PROPERTIES(t) name;

//--------------------------------- Форма товара (особенности нарезки/разделки)  --------------------------//
CLASS formItem 'Форма товара' : named;
TABLE formItem(formItem);

FORM formItem 'Форма товара'
OBJECTS f=formItem FIXED PANEL
PROPERTIES(f) name;

//--------------------------------- Кол-во в упаковке --------------------------//
//CLASS numberInPack 'Кол-во в упаковке' : named;
//
//FORM numberInPack 'Кол-во в упаковке'
//OBJECTS n=numberInPack FIXED PANEL
//PROPERTIES(n) name;

//---------------------------------- Норма отходов ------------------------------------//
CLASS rateWaste 'Норма отходов' : named, externalObject;
TABLE rateWaste(rateWaste);

percentRateWaste 'Норма,%' = DATA NUMERIC[10,3] (rateWaste) IN baseGroup;

FORM rateWaste 'Норма отходов'
OBJECTS r=rateWaste FIXED PANEL
PROPERTIES(r) name, percentRateWaste;

// ----------------------------------- Склад ------------------------------------------ //

CLASS ABSTRACT stock 'Склад' : named;

// ----------------------------------- Магазин ----------------------------------------- //

CLASS store 'Магазин' : named, externalObject;
TABLE store (store);
CLASS region 'Регион' : named;
TABLE region (region);

CLASS tradingNetwork 'Торговая сеть' : named, externalObject; // "Рублевский", "Базар"
TABLE tradingNetwork (tradingNetwork);

CLASS storeType 'Формат магазина' : named; //Мини, Супер, ...
TABLE storeType (storeType);

companyStore 'Юридическое лицо магазина (ИД)' = DATA company (store);
nameCompanyStore 'Компания' (store) = name(companyStore(store)) IN baseGroup;
addressStore 'Адрес магазина' = DATA STRING[100] (store);
regionStore 'Регион магазина ИД' = DATA region (store);
nameRegionStore 'Регион для стат. отчета' (store) = name(regionStore(store));

storeTypeStore 'Формат магазина (ИД)' = DATA storeType (store) AUTOSET;
nameStoreTypeStore 'Формат магазина' (store) = name(storeTypeStore(store)) IN baseGroup;
inStoreTypeStore (storeType, store) = storeTypeStore (store) == storeType;

tradingNetworkStoreType 'Торговая сеть формата магазина (ИД)' = DATA tradingNetwork (storeType);
nameTradingNetworkStoreType 'Торговая сеть формата магазина' (storeType) = name(tradingNetworkStoreType(storeType)) IN baseGroup;
nameToStoreType 'Формат магазина по имени и торговой сети' (name, tradingNetwork) = GROUP UNIQUE storeType BY name (storeType), tradingNetworkStoreType(storeType);

tradingNetworkStore 'Торговая сеть магазина (ИД)' (store) = tradingNetworkStoreType(storeTypeStore(store));
nameTradingNetworkStore 'Торговая сеть магазина' (store) = name(tradingNetworkStore(store)) IN baseGroup;
inTradingNetworkStore (tradingNetwork, store) = tradingNetworkStore(store) == tradingNetwork;

inTradingNetworkStoreTypeStore (tradingNetwork, storeType, store) = UNION OVERRIDE
    storeTypeStore(store) == storeType AND tradingNetwork,
    tradingNetworkStore(store) == tradingNetwork AND NOT storeType,
    store IS store AND NOT storeType AND NOT tradingNetwork;

inTradingNetworkStoreType(tradingNetwork, storeType) = tradingNetworkStoreType(storeType) == tradingNetwork;

// ----------------------------------- Торговая площадь -------------------------------------------------- //

CLASS tradingSquare 'Торговая площадь' : named;
TABLE tradingSquare(tradingSquare);

squareTradingSquare 'Размер торговой площади' = DATA NUMERIC[10,2] (tradingSquare) IN baseGroup;
departmentStoreTradingSquare 'Отдел торговой площади (ИД)' = DATA departmentStore (tradingSquare);
nameDepartmentStoreTradingSquare 'Отдел торговой площади' (tradingSquare) = name(departmentStoreTradingSquare(tradingSquare)) IN baseGroup;

dateTradingSquare 'Дата' = DATA DATE (tradingSquare) IN baseGroup;
dateTradingSquare (square) <- currentDate() WHEN ASSIGNED(square IS tradingSquare);

FORM tradingSquare 'Торговая площадь'
    OBJECTS s=tradingSquare FIXED PANEL
    PROPERTIES(s) name, squareTradingSquare, nameDepartmentStoreTradingSquare, dateTradingSquare
    EDIT tradingSquare OBJECT s
;

// ----------------------------------- Отдел магазина (Подразделение) ----------------------------------- //

GROUP orderDepartmentStoreGroup 'Заказ' : publicGroup;
GROUP controlDepartmentStoreGroup 'Контроль остатков' : publicGroup;
GROUP printDepartmentStoreGroup 'Печать' : publicGroup;

CLASS departmentStore 'Отдел магазина' : stock, externalObject;
TABLE departmentStore (departmentStore);

CLASS kafeteria 'Кафетерий' : departmentStore;
CLASS tradingFloar 'Торговый зал' : departmentStore;
CLASS wholesaleStock 'Оптовый склад' : departmentStore;
CLASS placeOfAcceptance 'Приемный пункт' : departmentStore;
CLASS restaurant 'Ресторан' : departmentStore;
//CLASS stock 'Склад' : departmentStore; в дальнейшем будет распределительный центр
CLASS manufactory 'Цех' : departmentStore;

CLASS STATIC itemStatus 'Статус товара'
{
    notTransfer '0',
    transfer '1',
    delete '2',
    requireTransfer '3',
    requireDelete '4'
};

storeDepartmentStore = DATA store (departmentStore) AUTOSET;
nameStoreDepartmentStore 'Магазин' (departmentStore) = name(storeDepartmentStore(departmentStore)) IN baseGroup;

revaluationCommitteeDepartmentStore 'Комиссия переоценки (ИД)' = DATA revaluationCommittee (departmentStore);
nameRevaluationCommitteeDepartmentStore 'Комиссия переоценки' (departmentStore) = name(revaluationCommitteeDepartmentStore(departmentStore)) IN printDepartmentStoreGroup;
isRevaluationCommitteeDepartmentStore 'По умолчанию' (revaluationCommittee, departmentStore) = revaluationCommitteeDepartmentStore(departmentStore) == revaluationCommittee;

registerCommitteeDepartmentStore 'Комиссия для реестра (ИД)' = DATA registerCommittee (departmentStore);
nameRegisterCommitteeDepartmentStore 'Комиссия для реестра' (departmentStore) = name(registerCommitteeDepartmentStore(departmentStore)) IN printDepartmentStoreGroup;
isRegisterCommitteeDepartmentStore 'По умолчанию' (registerCommittee, departmentStore) = registerCommitteeDepartmentStore(departmentStore) == registerCommittee;

wastageCommitteeDepartmentStore 'Комиссия для списания отходов (ИД)' = DATA wastageCommittee (departmentStore);
nameWastageCommitteeDepartmentStore 'Комиссия для реестра' (departmentStore) = name(wastageCommitteeDepartmentStore(departmentStore)) IN printDepartmentStoreGroup;
isWastageCommitteeDepartmentStore 'По умолчанию' (wastageCommittee, departmentStore) = wastageCommitteeDepartmentStore(departmentStore) == wastageCommittee;

controlMinusRestsDepartmentStore 'Контроль за минусовыми остатками' = DATA BOOLEAN (departmentStore) IN controlDepartmentStoreGroup;
deleteItemMinusRestsDepartmentStore 'Удалять товары с отрицательным остатком с весов и касс?' = DATA BOOLEAN (departmentStore) IN controlDepartmentStoreGroup;
controlMinusRestsContainerDepartmentStore 'Контроль за минусовыми остатками тары' = DATA BOOLEAN (departmentStore) IN controlDepartmentStoreGroup;
// controlAssortmentProviderDepartmentStore 'Контролировать ассортимент поставщиков в подразделении?' = DATA BOOLEAN (departmentStore);
verifyOrderArrivalDepartmentStore 'Сверять заказ и приход в подразделении?' = DATA BOOLEAN (departmentStore) IN controlDepartmentStoreGroup;
maxQuantityDeliveryHourDepartmentStore 'Максимальное допустимое число поставок в час' = DATA INTEGER (departmentStore) IN orderDepartmentStoreGroup;
resolveMaxQuantityDeliveryHourAssortmentLessDepartmentStore 'Разрешить превысить количество поставок/час при ассортименте <' = DATA DOUBLE (departmentStore) IN orderDepartmentStoreGroup;
resolveOrderItemDepartmentStore 'Разрешить заказ товара в подразделение?' = DATA BOOLEAN (departmentStore) IN orderDepartmentStoreGroup;
quantityCashChangeOneOperationAccountDepartmentStore 'Количество кассовых смен в одном оперативном отчете' = DATA INTEGER (departmentStore) IN orderDepartmentStoreGroup;
MRPDepartmentStore 'Материально ответственное лицо, подписывающее товарный отчет (ИД)' = DATA employee (departmentStore);
commonNameMRPDepartmentStore 'Материально ответственное лицо, подписывающее товарный отчет' (departmentStore) =
    commonName (MRPDepartmentStore(departmentStore)) IN printDepartmentStoreGroup;
bookkeeperDepartmentStore 'Бухгалтер, принимающий товарный отчет (ИД)' = DATA employee (departmentStore);
commonNameBookkeeperDepartmentStore 'Бухгалтер, принимающий товарный отчет' (departmentStore) = commonName(bookkeeperDepartmentStore(departmentStore)) IN printDepartmentStoreGroup;
personCheckDepartmentStore 'Кто проверяет товарный отчет (ИД)' = DATA employee (departmentStore);
commonNamePersonCheckDepartmentStore 'Кто проверяет товарный отчет' (departmentStore) = commonName(personCheckDepartmentStore(departmentStore)) IN printDepartmentStoreGroup;
idTradingSquareDepartmentStore 'Торговая площадь отдела магазина' (departmentStore) = GROUP MAX tradingSquare BY departmentStoreTradingSquare(tradingSquare);   //максимизирует только по ID, переделать после расширения функционала
defaultTradingSquareDepartmentStore 'Торговая площадь отдела магазина, кв.м.' (departmentStore) = squareTradingSquare(idTradingSquareDepartmentStore(departmentStore));
tradingSquareStore 'Торговая площадь магазина' = GROUP SUM defaultTradingSquareDepartmentStore(departmentStore) BY storeDepartmentStore(departmentStore);

inStoreDepartment(store, departmentStore) = storeDepartmentStore(departmentStore) == store;
inTradingSquareDepartmentStore(departmentStore, tradingSquare) = departmentStoreTradingSquare(tradingSquare) == departmentStore;

storeTypeDepartmentStore(departmentStore) = storeTypeStore(storeDepartmentStore(departmentStore)) PERSISTENT;
tradingNetworkDepartmentStore(departmentStore) = tradingNetworkStoreType(storeTypeDepartmentStore(departmentStore)) PERSISTENT;

inTradingNetworkStoreTypeStoreDepartment (tradingNetwork, storeType, store, department) = UNION OVERRIDE
    storeDepartmentStore(department) == store AND storeType AND tradingNetwork,
    storeTypeDepartmentStore(department) == storeType AND tradingNetwork AND NOT store,
    tradingNetworkDepartmentStore(department) == tradingNetwork AND NOT store AND NOT storeType,
    department IS departmentStore AND NOT store AND NOT storeType AND NOT tradingNetwork;

//---------------------------- Ценники ----------------------------------------//

CLASS STATIC printOrientation 'Ориентация' {
    portrait 'Книжная',
    landscape 'Альбомная'
}

CLASS labelType 'Тип ценника' : named;
TABLE labelType(labelType);

widthLabelType 'Ширина' = DATA INTEGER (labelType);
heightLabelType 'Высота' = DATA INTEGER (labelType);

orientationLabelType = DATA printOrientation (labelType);
nameOrientationLabelType 'Ориентация' (labelType) = name(orientationLabelType(labelType));

fileTemplateLabelType 'Файл шаблона' = DATA STRING[200] (labelType);

TABLE labelTypeDepartmentStore (labelType, departmentStore);
inLabelTypeDepartmentStore 'Включен' (labelType, departmentStore) = DATA BOOLEAN (labelType, departmentStore);

defaultLabelTypeDepartmentStore = DATA labelType (departmentStore);
isDefaultLabelTypeDepartmentStore 'По умолчанию' (labelType, departmentStore) = defaultLabelTypeDepartmentStore(departmentStore) == labelType;

FORM labelType 'Тип ценника'
    OBJECTS l = labelType FIXED PANEL
    PROPERTIES(l) name, widthLabelType, heightLabelType, nameOrientationLabelType, fileTemplateLabelType

    TREE treeStore a=STRING[3], t=tradingNetwork, st=storeType, s=store
    PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS stringEqualsAll(a), inTradingNetworkStoreType (t, st), inStoreTypeStore(st, s)

    OBJECTS d=departmentStore
    PROPERTIES(d) READONLY depName = name
    FILTERS inTradingNetworkStoreTypeStoreDepartment(t, st, s, d)
    ORDER BY depName

    PROPERTIES inLabelTypeDepartmentStore(l, d), isDefaultLabelTypeDepartmentStore(l, d)

    EDIT labelType OBJECT l
;

DESIGN labelType FROM DEFAULT {
    POSITION treeStore.box TO THE LEFT d.box;
    treeStore.tree {
        fillHorizontal = 0.3;
    }
}

FORM labelTypes 'Типы ценников'
    OBJECTS l = labelType
    PROPERTIES(l) READONLY name, widthLabelType, heightLabelType, nameOrientationLabelType, fileTemplateLabelType
    PROPERTIES(l)          ADDFORM, EDITFORM, delete
;

// ----------------------------------- Товар ------------------------------------------ //
GROUP descriptionGroup 'Наименование' : publicGroup;
GROUP rateGroup 'Нормы' : publicGroup;
GROUP headGroup 'Базовые свойства' : baseGroup;
GROUP sizeGroup 'Ячеистое хранение' : publicGroup;
GROUP retailGroup 'Ценообразование' : publicGroup;
GROUP discountGroup 'Скидки' : retailGroup;
GROUP expiryGroup 'Контроль сроков годности' : publicGroup;
GROUP equipmentGroup 'Внешние устройства' : publicGroup;
GROUP substanceGroup 'Пищевые характеристики' : publicGroup;
GROUP labelGroup 'Ценник' : publicGroup;

GROUP manufactoryGroup 'Производство' : publicGroup;
GROUP orderGroup 'Заказ' : publicGroup;
GROUP barGroup 'Бар' : publicGroup;
GROUP documentGroup 'Для документов' : publicGroup;
GROUP displayGroup 'Свойства для отображения' : baseGroup;

CLASS ABSTRACT sku 'SKU';
TABLE sku(sku);

CLASS item 'Товар' : sku, externalObject;
TABLE item(item);

CLASS ABSTRACT legalEntity 'Юридическое лицо' : named, externalObject;
TABLE legalEntity (legalEntity);
UNPLegalEntity 'УНП' = DATA STRING[9] (legalEntity) IN baseGroup FIXEDCHARWIDTH 9;

TABLE itemDate (item, DATE);

CLASS ware 'Посуда' : sku, named, externalObject;
TABLE ware(ware);
TABLE wareDate(ware, DATE);

CLASS brand 'Бренд' : named, externalObject;
TABLE brand(brand);

CLASS STATIC groupProduct 'Группа изделий для печати заборного листа'
{
   hot 'Горячее',
   cold  'Холодное'
};

tmpSku() = SESSION DATA sku ();

//baseGroup
itemGroupSku = DATA itemGroup(sku) IN idGroup AUTOSET;
nameItemGroupSku 'Группа товара' (sku) = name(itemGroupSku(sku));
canonicalNameItemGroupSku 'Группа товара' (sku) = canonicalNameItemGroup(itemGroupSku(sku)) IN baseGroup;

TABLE itemGroupSku (itemGroup, sku);

hasParentItemGroupSku (itemGroup, sku) = hasParentItemGroup(itemGroupSku(sku), itemGroup) PERSISTENT;

//descriptionGroup
captionItem 'Название' = DATA STRING[100](item) IN descriptionGroup;
@metaCodeShowItemAttribute(caption, 'Показывать наименование', displayGroup);

brandItem = DATA brand(item);
nameBrandItem 'Бренд' (item) = name(brandItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(brand, 'Показывать бренд', displayGroup);

typeItemItem = DATA typeItem(item) IN idGroup;
nameTypeItemItem 'Вид' = name(typeItemItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(type, 'Показывать тип', displayGroup);

unitOfMeasureItem = DATA unitOfMeasure (item) IN idGroup;
shortNameUnitOfMeasureItem 'Единица измерения' (item) = shortName(unitOfMeasureItem(item)) IN headGroup;
@metaCodeShowItemAttribute(unitOfMeasure, 'Показывать ед.измерения', displayGroup);

sortItem = DATA sort(item) IN idGroup;
nameSortItem 'Сорт/категория товара' = name(sortItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(sort, 'Показывать сорт', displayGroup);

packItem = DATA pack(item) IN idGroup;
shortNamePackItem 'Упаковка' = shortName(packItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(pack, 'Показывать упаковку', displayGroup);

specialtyItem = DATA specialty(item) IN idGroup;
shortNameSpecialtyItem 'Особенности' = shortName(specialtyItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(specialty, 'Показывать особенности', displayGroup);

sizeItem = DATA size(item) IN idGroup;
shortNameSizeItem 'Размер/калибр' = shortName(sizeItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(size, 'Показывать размер', displayGroup);

colorItem = DATA color (item) IN idGroup;
nameColorItem 'Цвет' = name(colorItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(color, 'Показывать цвет', displayGroup);

tasteItem = DATA taste (item) IN idGroup;
nameTasteItem 'Вкус' = name(tasteItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(taste, 'Показывать вкус', displayGroup);

hallmarkItem 'Отличительный признак (особенности)' = DATA STRING[100] (item) IN descriptionGroup;
@metaCodeShowItemAttribute(hallmark, 'Показывать отличительный признак', displayGroup);

articleItem 'Артикул поставщика/производителя' = DATA STRING[100] (item) IN descriptionGroup;
@metaCodeShowItemAttribute(article, 'Показывать артикул', displayGroup);

coolingDegreeItem 'Степень охлаждения (ИД)' = DATA coolingDegree (item) IN idGroup;
nameCoolingDegreeItem 'Степень охлаждения' = name(coolingDegreeItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(coolingDegree, 'Показывать степень охлаждения', displayGroup);

residentCountry 'Отечественное производство' (country) = DATA BOOLEAN (country) IN baseGroup;

countryItem = DATA country (item) IN idGroup;
nameCountryItem 'Страна' = name(countryItem(item)) IN headGroup;
@metaCodeShowItemAttribute(country, 'Показывать страну', displayGroup);
residentItem 'Отечественное производство' (item) = residentCountry(countryItem(item)) IN headGroup;

extSIDCountry 'Внешний код страны' = DATA STRING[60] (country);
extSIDToCountry 'Страна по коду' (string) = GROUP UNIQUE country BY extSIDCountry (country) WHERE country IS country;

isManufacturedItem 'Товар производится' = DATA BOOLEAN (item) IN manufactoryGroup;
hintItem 'Подсказка по товару' = DATA STRING[200] (item) IN documentGroup;

formItemItem = DATA formItem (item) IN idGroup;
nameFormItemItem 'Форма товара (особенности нарезки/разделки)' = name(formItemItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(formItem, 'Показывать форму', displayGroup);

//numberInPackItem = DATA numberInPack (item) IN idGroup;
numberInPackItem 'Кол-во в упаковке' = DATA NUMERIC[14,3] (item) IN orderGroup;
//@metaCodeShowItemAttribute(numberInPack, 'Показывать кол-во в упаковке', displayGroup);

rateWasteItem = DATA rateWaste(item) IN idGroup;
nameRateWasteItem 'Норма отходов' = name(rateWasteItem(item)) IN rateGroup;
percentRateWasteItem 'Норма отходов,%' = percentRateWaste(rateWasteItem(item)) IN rateGroup;
@metaCodeShowItemAttribute(rateWaste, 'Показывать норму отходов', displayGroup);

statisticGroupSku = DATA statisticGroup(sku) IN idGroup AUTOSET;
nameStatisticGroupSku 'Статистическая группа' (sku) = name(statisticGroupSku(sku)) IN rateGroup;

TABLE statisticGroupSku (statisticGroup, sku);

hasParentStatisticGroupSku (statisticGroup, sku) = hasParentStatisticGroup(statisticGroupSku(sku), statisticGroup) PERSISTENT;

wareItem = DATA ware (item) IN idGroup;
nameWareItem 'Посуда' = name(wareItem(item)) IN retailGroup;

inWareItem 'Товар в посуде' (item) = item IS item AND wareItem(item);

@metaCodeShowItemAttribute(ware, 'Показывать посуду', displayGroup);

isContainerItem 'Тара' = DATA BOOLEAN (item) IN headGroup;
//@metaCodeShowItemAttribute(Container, 'Показывать явл-ся ли тарой', displayGroup);

manufacturerItem 'Производитель (ИД)' = DATA legalEntity (item) IN idGroup;
nameManufacturerItem 'Производитель' (item) = name(manufacturerItem(item)) IN headGroup;
@metaCodeShowItemAttribute(manufacturer, 'Показывать производителя', displayGroup);

//equipmentGroup
isWeightItem 'Весовой товар' = DATA BOOLEAN (item) IN headGroup;
compositionScalesItem 'Состав товара (ингредиенты) для весов' = DATA TEXT (item) IN equipmentGroup;
isMarkItem 'Маркировать товар' = DATA BOOLEAN (item) IN equipmentGroup;
isLoafCutItem 'Буханка разрезается' = DATA BOOLEAN (item) IN equipmentGroup;
passScalesItem 'Передавать на весы' = DATA BOOLEAN (item) IN equipmentGroup;

//substanceGroup
percentFatItem '% жирности' =  DATA DOUBLE (item) IN substanceGroup;
percentAlcoholItem '% алкоголя' =  DATA DOUBLE (item) IN substanceGroup;
nutritionalValueItem 'Энергетическая и пищевая ценность' = DATA STRING[400] (item) IN substanceGroup MINCHARWIDTH 50;
energyItem 'Энергетическая ценность на 100г, ккал' = DATA DOUBLE (item) IN substanceGroup;
fatsItem 'Жиры на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
carbohydratesItem 'Углеводы на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
proteinsItem 'Белки на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
isContainGMOItem 'Содержит ГМО' = DATA BOOLEAN (item) IN substanceGroup;

//sizeGroup
lengthItem 'Длина товара' = DATA NUMERIC[8,2] (item) IN sizeGroup;
widthItem 'Ширина товара' = DATA NUMERIC[8,2] (item) IN sizeGroup;
heightItem 'Высота товара' = DATA NUMERIC[8,2] (item) IN sizeGroup;
grossWeightItem 'Вес брутто (кг)' = DATA NUMERIC[9,3] (item) IN orderGroup;
lengthPackItem 'Длина упаковки' = DATA NUMERIC[8,2] (item) IN sizeGroup;
widthPackItem 'Ширина упаковки' = DATA NUMERIC[8,2] (item) IN sizeGroup;
heightPackItem 'Высота упаковки' = DATA NUMERIC[8,2] (item) IN sizeGroup;
grossWeightPackItem 'Вес брутто упаковки' = DATA NUMERIC[9,3] (item) IN manufactoryGroup;
volumeItem 'Объём (л)' = DATA NUMERIC[9,3] (item) IN sizeGroup;
netWeightItem 'Вес нетто (кг)' = DATA NUMERIC[9,3] (item) IN orderGroup;
quantityPackItem 'Количество в грузовом месте' = DATA NUMERIC[9,3] (item) IN orderGroup;

//retailGroup
minQuantityOrderItem 'Минимальный заказ' = DATA INTEGER (item) IN orderGroup;
minReserveItem 'Минимальный резерв' = DATA INTEGER (item) IN orderGroup;
bonusReturnItem 'Уценка (бонус) по товару при возврате поставщику' = DATA NUMERIC[9,2] (item) IN documentGroup;
nameReturnItem 'Наименование для уценки, бонуса по товару в возврат' = DATA STRING[200] (item) IN documentGroup;
quantityDiscountItem 'Количество товара, при котором предост-ся скидка' = DATA INTEGER (item) IN discountGroup;
fixPriceItem 'Фиксированная цена при соотв.типе скидки' = DATA INTEGER (item) IN discountGroup;
isFixPriceItem 'Товар с фиксированной ценой' = DATA BOOLEAN (item) IN retailGroup;
banMarkdownItem 'Запретить уценку товара' = DATA BOOLEAN (item) IN retailGroup;
minTradeAllowanceItem 'MIN допустимая торговая надбавка, %' = DATA NUMERIC[8,3] (item) IN retailGroup;
maxTradeAllowanceItem 'MAX допустимая торговая надбавка, %' = DATA NUMERIC[8,3] (item) IN retailGroup;
minAllowedRetailPriceItem 'MIN допустимая розн.цена' = DATA NUMERIC[14,2] (item) IN retailGroup;
bonusItem 'Бонус получаемый по товару' = DATA NUMERIC[9,2] (item) IN documentGroup;
percentWholesaleMarkItem '% оптовой надбавки' = DATA NUMERIC[8,3] (item) IN retailGroup;
banSailItem 'Запрет продаж товара в указанное время' = DATA STRING[200] (item) IN equipmentGroup;


//manufactoryGroup
CLASS groupMenu 'Группа меню' : named;
TABLE groupMenu(groupMenu);

isCrudeItem 'Товар-сырьё для калькуляции?' = DATA BOOLEAN (item) IN manufactoryGroup;

groupProductItem = DATA groupProduct (item) IN idGroup;
nameGroupProductItem 'Группа изделий для печати заборного листа' = name(groupProductItem(item)) IN manufactoryGroup;

compositionMenuItem 'Состав изделия для печати в меню' = DATA STRING[400] (item)IN manufactoryGroup MINCHARWIDTH 50;
standartItem 'Стандарт изготовления изделия (СТБ и пр.)' = DATA STRING[100] (item) IN manufactoryGroup MINCHARWIDTH 50;
normOutItem 'Норма выхода для печати в меню и калькуляцию' = DATA STRING[100] (item) IN manufactoryGroup MINCHARWIDTH 50;
groupMenuItem 'Группа для печати в меню ИД' = DATA groupMenu (item) IN idGroup;
nameGroupMenuItem 'Группа для печати в меню' = name(groupMenuItem(item)) IN manufactoryGroup MINCHARWIDTH 50;
isCutedItem 'Товар разрубается/прорабатывается' = DATA BOOLEAN (item) IN manufactoryGroup;
storageTemperatureItem 'Температура хранения' =  DATA STRING[100] (item) IN equipmentGroup MINCHARWIDTH 50;

//expiryGroup
controlExpiryItem 'Контролировать сроки годности товара?' = DATA BOOLEAN (item) IN expiryGroup;
daysExpiryItem 'Срок годности в днях' = DATA NUMERIC[8,2] (item) IN expiryGroup;
daysExpiryPackItem 'Срок годности в днях с момента фасовки' = DATA NUMERIC[8,2] (item) IN expiryGroup;
hoursExpiryPackItem 'Срок годности в часах с момента фасовки' = DATA INTEGER (item) IN expiryGroup;
//rowTorg1Item 'Строка формы 1-торг (ИД)' = DATA rowTorg1(item) IN idGroup;

imageItem 'Изображение' = DATA IMAGEFILE (item);
loadImageItem 'Загрузить изображение' (item) = ACTION LOADFILE imageItem(item);

FORM country 'Страна'
    OBJECTS c=country FIXED PANEL
    PROPERTIES(c)      name, sidCountry, residentCountry

    EDIT country OBJECT c
;
FORM countries 'Страны'
    OBJECTS c=country
    PROPERTIES(c) READONLY name, sidCountry, residentCountry
    PROPERTIES(c) ADDFORM, EDITFORM, delete
;

// ----------------------------------- Атрибуты ------------------------------------------ //

CLASS ABSTRACT itemAttribute 'Атрибут товара' : named;
TABLE itemAttribute(itemAttribute);

TABLE itemItemAttribute(item, itemAttribute);

CLASS STATIC stringItemAttribute 'Строковый атрибут' {
    captionItem 'Название',
    article 'Артикул',
    hallmark 'Отличительный признак'
} : itemAttribute;

valueCaptionItemAttribute(item, attribute) = castToString255(captionItem(item)) AND attribute == stringItemAttribute.captionItem;
valueArticleItemAttribute(item, attribute) = castToString255(articleItem(item)) AND attribute == stringItemAttribute.article;
valueHallmarkItemAttribute(item, attribute) = castToString255(hallmarkItem(item)) AND attribute == stringItemAttribute.hallmark;

valueStringItemAttribute(item, attribute) = UNION EXCLUSIVE  valueCaptionItemAttribute(item, attribute),
                                                             valueArticleItemAttribute(item, attribute),
                                                             valueHallmarkItemAttribute(item, attribute);

CLASS STATIC integerItemAttribute 'Целочисленный атрибут' {
    length 'Длина',
    width 'Ширина',
    height 'Высота',
    numberInPack 'Количество в грузовом месте'
} : itemAttribute;

valueLengthItemAttribute(item, attribute) = lengthItem(item) AND attribute == integerItemAttribute.length;
valueWidthItemAttribute(item, attribute) = widthItem(item) AND attribute == integerItemAttribute.width;
valueHeightItemAttribute(item, attribute) = heightItem(item) AND attribute == integerItemAttribute.height;
valueNumberInPackItemAttribute(item, attribute) = numberInPackItem(item) AND attribute == integerItemAttribute.numberInPack;

valueIntegerItemAttribute(item, attribute) = UNION EXCLUSIVE valueLengthItemAttribute(item, attribute),
                                                             valueWidthItemAttribute(item, attribute),
                                                             valueHeightItemAttribute(item, attribute),
                                                             valueNumberInPackItemAttribute(item, attribute);
stringIntegerItemAttribute(item, attribute) = castToString255(valueIntegerItemAttribute(item, attribute));

CLASS STATIC doubleItemAttribute 'Дробный атрибут' {
    netWeight 'Вес нетто',
    grossWeight 'Вес брутто',
    volume 'Объём',
    percentFat '% жирности',
    percentAlcohol '% алкоголя'
} : itemAttribute;

valueNetWeightItemAttribute(item, attribute) = netWeightItem(item) AND attribute == doubleItemAttribute.netWeight;
valueGrossWeightItemAttribute(item, attribute) = grossWeightItem(item) AND attribute == doubleItemAttribute.grossWeight;
valueVolumeItemAttribute(item, attribute) = volumeItem(item) AND attribute == doubleItemAttribute.volume;
valuePercentFatItemAttribute(item, attribute) = percentFatItem(item) AND attribute == doubleItemAttribute.percentFat;
valuePercentAlcoholItemAttribute(item, attribute) = percentAlcoholItem(item) AND attribute == doubleItemAttribute.percentAlcohol;

valueDoubleItemAttribute(item, attribute) = UNION EXCLUSIVE valueNetWeightItemAttribute(item, attribute),
                                                            valueGrossWeightItemAttribute(item, attribute),
                                                            valueVolumeItemAttribute(item, attribute),
                                                            valuePercentFatItemAttribute(item, attribute),
                                                            valuePercentAlcoholItemAttribute(item, attribute);

stringDoubleItemAttribute(item, attribute) = castToString255(valueDoubleItemAttribute(item, attribute));

CLASS STATIC booleanItemAttribute 'Логический атрибут' {
    fixPrice 'Товар с фиксированной ценой',
    manufactured 'Товар производится'
} : itemAttribute;

valueFixPriceWeightItemAttribute(item, attribute) = isFixPriceItem(item) AND attribute == booleanItemAttribute.fixPrice;
valueManufacturedItemAttribute(item, attribute) = isManufacturedItem(item) AND attribute == booleanItemAttribute.manufactured;

valueBooleanItemAttribute(item, attribute) = UNION EXCLUSIVE valueFixPriceWeightItemAttribute(item, attribute),
                                                             valueManufacturedItemAttribute(item, attribute);
stringBooleanItemAttribute(item, attribute) = castToString255(valueBooleanItemAttribute(item, attribute));

CLASS STATIC objectItemAttribute 'Объектный атрибут' {
    itemGroup 'Группа',
    unitOfMeasure 'Единица измерения',
    brand 'Брэнд',
    typeItem 'Вид',
    formItem 'Форма',
    sort 'Сорт/категория',
    pack 'Упаковка',
    specialty 'Особенность',
    size 'Размер/калибр',
    coolingDegree 'Степень охлаждения',
    color 'Цвет',
    taste 'Вкус',
    countryOrigin 'Страна происхождения/производства'

} : itemAttribute;

valueItemGroupItemAttribute(item, attribute) = itemGroupSku(item) AND item IS item AND attribute == objectItemAttribute.itemGroup;
valueUOMItemAttribute(item, attribute) = unitOfMeasureItem(item) AND attribute == objectItemAttribute.unitOfMeasure;
valueBrandItemAttribute(item, attribute) = brandItem(item) AND attribute == objectItemAttribute.brand;
valueTypeItemAttribute(item, attribute) = typeItemItem(item) AND attribute == objectItemAttribute.typeItem;
valueFormItemAttribute(item, attribute) = formItemItem(item) AND attribute == objectItemAttribute.formItem;
valueSortItemAttribute(item, attribute) = sortItem(item) AND attribute == objectItemAttribute.sort;
valuePackItemAttribute(item, attribute) = packItem(item) AND attribute == objectItemAttribute.pack;
//valueNumberInPackItemAttribute(item, attribute) = numberInPackItem(item) AND attribute == objectItemAttribute.numberInPack;
valueSpecialtyItemAttribute(item, attribute) = specialtyItem(item) AND attribute == objectItemAttribute.specialty;
valueSizeItemAttribute(item, attribute) = sizeItem(item) AND attribute == objectItemAttribute.size;
valueCoolingDegreeItemAttribute(item, attribute) = coolingDegreeItem(item) AND attribute == objectItemAttribute.coolingDegree;
valueColorItemAttribute(item, attribute) = colorItem(item) AND attribute == objectItemAttribute.color;
valueTasteItemAttribute(item, attribute) = tasteItem(item) AND attribute == objectItemAttribute.taste;
valueCountryItemAttribute(item, attribute) = countryItem(item) AND attribute == objectItemAttribute.countryOrigin;

valueObjectItemAttribute(item, attribute) = UNION EXCLUSIVE valueItemGroupItemAttribute(item, attribute),
                                                            valueUOMItemAttribute(item, attribute),
                                                            valueBrandItemAttribute(item, attribute),
                                                            valueTypeItemAttribute(item, attribute),
                                                            valueFormItemAttribute(item, attribute),
                                                            valueSortItemAttribute(item, attribute),
                                                            valuePackItemAttribute(item, attribute),
                                                           // valueNumberInPackItemAttribute(item, attribute),
                                                            valueSpecialtyItemAttribute(item, attribute),
                                                            valueSizeItemAttribute(item, attribute),
                                                            valueCoolingDegreeItemAttribute(item, attribute),
                                                            valueColorItemAttribute(item, attribute),
                                                            valueTasteItemAttribute(item, attribute),
                                                            valueCountryItemAttribute(item, attribute) PERSISTENT;
nameObjectItemAttribute(item, attribute) = name(valueObjectItemAttribute(item, attribute));

CLASS STATIC objectItemShortAttribute 'Объектный краткий атрибут' {
    shortUnitOfMeasure 'Единица измерения (сокр.)',
    shortPack 'Упаковка (сокр.)',
    shortSpecialty 'Особенность (сокр.)',
    shortSize 'Размер/калибр (сокр.)',
    shortCoolingDegree 'Степень охлаждения (сокр.)'

} : itemAttribute;

valueUOMItemShortAttribute(item, attribute) = unitOfMeasureItem(item) AND attribute == objectItemShortAttribute.shortUnitOfMeasure;
valuePackItemShortAttribute(item, attribute) = packItem(item) AND attribute == objectItemShortAttribute.shortPack;
valueSpecialtyItemShortAttribute(item, attribute) = specialtyItem(item) AND attribute == objectItemShortAttribute.shortSpecialty;
valueSizeItemShortAttribute(item, attribute) = sizeItem(item) AND attribute == objectItemShortAttribute.shortSize;
valueCoolingDegreeItemShortAttribute(item, attribute) = coolingDegreeItem(item) AND attribute == objectItemShortAttribute.shortCoolingDegree;

valueObjectItemShortAttribute(item, attribute) = UNION EXCLUSIVE valueUOMItemShortAttribute(item, attribute),
                                                            valuePackItemShortAttribute(item, attribute),
                                                            valueSpecialtyItemShortAttribute(item, attribute),
                                                            valueSizeItemShortAttribute(item, attribute),
                                                            valueCoolingDegreeItemShortAttribute(item, attribute) PERSISTENT;

shortNameObjectItemAttribute(item, attribute) = shortName(valueObjectItemShortAttribute(item, attribute));

valueItemAttribute(item, attribute) = UNION EXCLUSIVE valueStringItemAttribute(item, attribute),
                                                      stringIntegerItemAttribute(item, attribute),
                                                      stringDoubleItemAttribute(item, attribute),
                                                      stringBooleanItemAttribute(item, attribute),
                                                      nameObjectItemAttribute(item, attribute),
                                                      shortNameObjectItemAttribute(item, attribute) PERSISTENT;

numberInNameItemAttribute 'Порядковый номер в наименовании' = DATA INTEGER (itemAttribute) IN baseGroup;
numberInNameCashItemAttribute 'Порядковый номер в наименовании для касс' = DATA INTEGER (itemAttribute) IN baseGroup;
numberInNameScalesItemAttribute 'Порядковый номер в наименовании для весов' = DATA INTEGER (itemAttribute) IN baseGroup;

nameAttributeItem 'Наименование' (item) = castToString255(
                [GROUP CONCAT valueItemAttribute(item, attribute), ' ' BY item ORDER numberInNameItemAttribute(attribute)](item))
                IN recognizeGroup PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 80 INDEXED AGGPROP;
nameCashAttributeItem 'Наименование для касс' (item) = castToString255(
                [GROUP CONCAT valueItemAttribute(item, attribute), ' ' BY item ORDER numberInNameCashItemAttribute(attribute)](item))
                PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 80;
nameScalesAttributeItem 'Наименование для весов' (item) = castToString255(
                [GROUP CONCAT valueItemAttribute(item, attribute), ' ' BY item ORDER numberInNameScalesItemAttribute(attribute)](item))
                PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 80;

nameAttributeItemGroupItem 'Наименование' (itemGroup, item) = nameAttributeItem(item) AND hasParentItemGroupSku(itemGroup, item) PERSISTENT INDEXED;

nameAttributeStatisticGroupItem 'Наименование' (statisticGroup, item) = nameAttributeItem(item) AND hasParentStatisticGroupSku(statisticGroup, item) PERSISTENT INDEXED;
// ---------------------------------------------------------------------------------------- //

TABLE departmentStoreDate (departmentStore, DATE);

TABLE stringDate (STRING[14], DATE);

// ----------------------------------- Штрих код ------------------------------------------ //

GROUP barcodeGroup : baseGroup;

CLASS barcode 'Штрих код';
TABLE barcode (barcode);

barcodeEx 'Штрих код' = DATA STRING[14] (barcode) IN recognizeGroup FIXEDCHARWIDTH 14 INDEXED;

dateUserBarcode 'Дата действия' = DATA DATE (barcode) IN baseGroup;
dateBarcode 'Дата действия' = UNION OVERRIDE 2001_01_01 IF barcode IS barcode, dateUserBarcode(barcode) IN baseGroup PERSISTENT;

skuBarcode = DATA sku(barcode) IN baseGroup;
nameSkuBarcode 'Товар штрих-кода' (barcode) = nameAttributeItem(skuBarcode(barcode)) IN recognizeGroup;

hasParentItemGroupBarcode (itemGroup, barcode) = hasParentItemGroupSku(itemGroup, skuBarcode(barcode));

barcodeToDate 'Штрих-код на дату' (string, date) = GROUP UNIQUE barcode BY barcodeEx(barcode), dateBarcode(barcode) PERSISTENT;

barcodeStringDate 'Дата действия' (string, date) = GROUP MAX LIST(dateSet, barcodeToDate(string, dateSet)) IF dateSet <= date AND date AS DATE BY string, date IN baseGroup;
valueBarcodeToDate 'Штрих-код на дату' (string, date) = barcodeStringDate(string, date)[2];

valueBarcodeToCurrentDate 'Штрих-код на тек. дату' (string) = valueBarcodeToDate(string, currentDate());

skuBarcodeStringDate 'Товар (ИД)' (string, date) = skuBarcode(valueBarcodeToDate(string, date));
nameSkuStringDate 'Товар' (string, date) = nameAttributeItem(skuBarcodeStringDate(string, date));

activeBarcodeDate 'Активный' (barcode, date) = valueBarcodeToDate(barcodeEx(barcode), date) == barcode;
activeBarcode 'Активный' (barcode) = valueBarcodeToCurrentDate(barcodeEx(barcode)) == barcode;

titleOriginScalesBarcode 'Наименование для весов' = DATA STRING[100] (barcode);
titleOriginCashBarcode 'Наименование для касс' = DATA STRING[100] (barcode);

titleScalesSkuBarcode 'Наименование для весов' = nameScalesAttributeItem(skuBarcode(barcode));
titleCashSkuBarcode 'Наименование для касс' = nameCashAttributeItem(skuBarcode(barcode));

titleScalesBarcode 'Наименование для весов' = UNION OVERRIDE titleScalesSkuBarcode(barcode), titleOriginScalesBarcode(barcode) IN barcodeGroup MINCHARWIDTH 30 PREFCHARWIDTH 30;
titleCashBarcode 'Наименование для касс' = UNION OVERRIDE titleCashSkuBarcode(barcode), titleOriginCashBarcode(barcode) IN barcodeGroup MINCHARWIDTH 30 PREFCHARWIDTH 30;

unitOfMeasureSkuBarcode (barcode) = unitOfMeasureItem(skuBarcode(barcode)) IN idGroup;
unitOfMeasureOriginBarcode = DATA unitOfMeasure (barcode) IN idGroup;
unitOfMeasureBarcode = UNION OVERRIDE unitOfMeasureSkuBarcode (barcode), unitOfMeasureOriginBarcode(barcode) IN idGroup;
shortNameUnitOfMeasureBarcode 'Единица измерения' (barcode) = shortName(unitOfMeasureBarcode(barcode)) IN barcodeGroup;

amountUserBarcode 'Количество (сколько списать при продаже)' = DATA NUMERIC[14,3] (barcode) IN barcodeGroup;
amountBarcode 'Количество (сколько списать при продаже)' = UNION OVERRIDE 1.0 IF barcode IS barcode, amountUserBarcode (barcode) IN barcodeGroup;
removeBarcode 'Заблокирован (удален с оборудования)' = DATA BOOLEAN (barcode) IN barcodeGroup;
commentRemoveBarcode 'Причина блокировки' = DATA STRING[100] (barcode) IN barcodeGroup;

userBarcodeSku = DATA barcode(sku) IN idGroup;
barcodeUserBarcodeSku 'Основной штрих-код' = barcodeEx(userBarcodeSku(sku)) IN baseGroup;

defaultBarcodeSku(sku) = GROUP MIN barcode BY skuBarcode(barcode) IN idGroup;
barcodeSku(sku) = UNION OVERRIDE defaultBarcodeSku(sku), userBarcodeSku(sku) IN baseGroup PERSISTENT;

primarySkuBarcode 'Основной штрих-код' (sku, barcode) = barcodeSku(sku) == barcode;

CONSTRAINT skuBarcode(barcodeSku(item)) != item CHECKED BY userBarcodeSku MESSAGE 'Товар основного штрих-кода должен совпадать с товаром';

barcodeBarcodeSku 'Основной штрих-код' = barcodeEx(barcodeSku(sku)) IN baseGroup PERSISTENT;
//barcodeToBarcode (barcode) = GROUP UNIQUE barcode BY barcodeEx(barcode);

inSkuBarcode(sku, barcode) = skuBarcode(barcode) == sku;

concatBarcodeBySkuDate 'Штрих-кода товара' (sku, date) = GROUP CONCAT barcodeEx(barcode) IF dateBarcode(barcode) <= date AND date AS DATE, ', ' BY skuBarcode(barcode), date IN baseGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;

pieceNumeratorSku (sku) = pieceNumeratorItemGroup(itemGroupSku(sku));
weightNumeratorSku (sku) = weightNumeratorItemGroup(itemGroupSku(sku));

tmpNum = SESSION DATA numerator();

generateBarcodeSku 'Сгенерировать штрих-код' = ACTION (sku) {
    ADDOBJ barcode;
    FOR b == addedObject() DO {
        SET skuBarcode(b) <- sku AS sku;
        IF isWeightItem(sku) THEN
            SET tmpNum() <- weightNumeratorSku(sku)
        ELSE
            SET tmpNum() <- pieceNumeratorSku(sku);
        SET barcodeEx(b) <- completeBarcode(curStringValueNumerator(tmpNum()));
        EXEC incrementValueNumerator(tmpNum());
    };
} TOOLBAR CONFIRM;


FORM barcode 'Штрих-код'
    OBJECTS       b=barcode
    PROPERTIES(b) barcodeEx, dateBarcode
;

FORM barcodeInput 'Ввод штрих-кода'
    OBJECTS             barcode=STRING[14] FIXED PANEL
    PROPERTIES(barcode) objValue = OBJVALUE
;

DESIGN barcodeInput FROM DEFAULT {
    PROPERTY (objValue) {
        caption = 'Штрих-код';
        font = 'Tahoma bold 64';
        panelLabelAbove = TRUE;
    }
}

// ----------------------------------- Компоненты ------------------------------------------ //
CLASS component 'Компонент' : sku, named;
TABLE component(component);

nettoBruttoCoeffComponent 'Сезонный коэффициент пересчета сырья из нетто в брутто' (component) = DATA NUMERIC[8,3] (component) IN manufactoryGroup;
percentHumidityFlourDepartmentStoreComponent '% влажности муки' = DATA NUMERIC[8,3] (departmentStore, component) IN manufactoryGroup;

FORM component 'Компонент'
OBJECTS c=component FIXED PANEL
PROPERTIES(c) name, nettoBruttoCoeffComponent
EDIT component OBJECT c;

FORM components 'Компоненты'
OBJECTS c=component
PROPERTIES(c) READONLY name, nettoBruttoCoeffComponent
PROPERTIES(c) ADDFORM, EDITFORM, delete;


// ----------------------------------- Генерация графика --------------------------------------- //

CLASS STATIC genType 'Тип генерации' {
    genWeek 'Генерация каждые N недель',
    genDays 'Генерация через N дней',
    genNumber 'Генерация по числам',
    genDayMonth 'Генерация по дням недели и месяца'
};

CLASS genTimeTable 'Генерация графика' : historyObject;
TABLE genTimeTable(genTimeTable);

//общие свойства
genTimeTableType 'Тип генерации графика (ИД)' = DATA genType (genTimeTable);
nameGenTimeTableType 'Тип генерации графика' (genTimeTable) = name(genTimeTableType(genTimeTable)) IN baseGroup;

supplierGenTimeTable 'Поставщик (ИД)' = DATA supplier (genTimeTable) AUTOSET;
nameSupplierGenTimeTable 'Поставщик' (genTimeTable) = name(supplierGenTimeTable(genTimeTable)) IN baseGroup;
UNPSupplierGenTimeTable 'УНП поставщика' (genTimeTable) = UNPLegalEntity(supplierGenTimeTable(genTimeTable)) IN baseGroup;

departmentStoreGenTimeTable 'Подразделение (ИД)' = DATA departmentStore (genTimeTable) AUTOSET;
nameDepartmentStoreGenTimeTable 'Подразделение' (genTimeTable) = name(departmentStoreGenTimeTable(genTimeTable)) IN baseGroup;

startDateGenTimeTable 'Дата начала' = DATA DATE (genTimeTable) IN baseGroup;
endDateGenTimeTable 'Дата окончания' = DATA DATE (genTimeTable) IN baseGroup;

dayBeforeGenTimeTable 'За сколько дней формировать заказ' = DATA INTEGER (genTimeTable);

//свойства "Каждые N недель"
periodGenTimeTable 'По прошествии скольки недель будет осуществится следующая поставка' = DATA INTEGER (genTimeTable);

//свойства "Каждые N дней"
dayAfterGenTimeTable 'Через сколько дней после последней поставки делать заказ' = DATA INTEGER (genTimeTable);
dayLastOrderGenTimeTable 'Дата последнего заказа' = DATA DATE (genTimeTable);

//свойства "По числам"
stringNumberGenTimeTable 'Числа месяца поставок (указывать через запятую)' = DATA STRING[100] (genTimeTable);
transferDayGenTimeTable 'День на который переносить поставки с Субботы и Воскресенья (ИД)' = DATA DOW (genTimeTable);
nameTransferDayGenTimeTable 'День на который переносить поставки с Субботы и Воскресенья' (genTimeTable) = name(transferDayGenTimeTable(genTimeTable));
CONSTRAINT transferDayGenTimeTable(genTimeTable) != DOW.friday AND transferDayGenTimeTable(genTimeTable) != DOW.monday CHECKED MESSAGE 'Выберите день с ПН по ПТ';

//свойства "По дням недели и месяца"
inMonthGenTimeTable 'Включать' = DATA BOOLEAN (genTimeTable, month);
inDayGenTimeTable 'Включать' = DATA BOOLEAN (genTimeTable, DOW);
inAllMonthGenTable 'Включить все месяцы' = DATA BOOLEAN (genTimeTable);
inMonthGenTimeTable(genTimeTable, month) <- inAllMonthGenTable(genTimeTable) WHEN ASSIGNED(inAllMonthGenTable(genTimeTable) AND month IS month);

toShowGenWeek (genTimeTable) = genTimeTableType(genTimeTable) == genType.genWeek;
toShowGenDay (genTimeTable) = genTimeTableType(genTimeTable) == genType.genDays;
toShowGenNumber (genTimeTable) = genTimeTableType(genTimeTable) == genType.genNumber;
toShowGenDayMonth (genTimeTable) = genTimeTableType(genTimeTable) == genType.genDayMonth;
toShowGenWeekOrDayMonth (genTimeTable) = UNION OVERRIDE toShowGenWeek(genTimeTable), toShowGenDayMonth(genTimeTable);

FORM genTimeTable 'Генерация графика'
OBJECTS g=genTimeTable FIXED PANEL, m=month, d=DOW
PROPERTIES(g) READONLY nameUserCreated, timeCreated
PROPERTIES(g) nameGenTimeTableType, nameDepartmentStoreGenTimeTable, nameSupplierGenTimeTable, UNPSupplierGenTimeTable, startDateGenTimeTable,
              endDateGenTimeTable, dayBeforeGenTimeTable,inAllMonthGenTable SHOWIF toShowGenDayMonth(g),
              dayAfterGenTimeTable SHOWIF toShowGenDay(g), periodGenTimeTable SHOWIF toShowGenWeek(g),
              stringNumberGenTimeTable SHOWIF toShowGenNumber(g), nameTransferDayGenTimeTable SHOWIF toShowGenNumber(g),
              dayLastOrderGenTimeTable SHOWIF toShowGenDay(g)
PROPERTIES(m) READONLY name SHOWIF toShowGenDayMonth(g)
PROPERTIES(d) READONLY name SHOWIF toShowGenWeekOrDayMonth(g)
PROPERTIES(g, m) inMonthGenTimeTable SHOWIF toShowGenDayMonth(g)
PROPERTIES(g, d) inDayGenTimeTable SHOWIF toShowGenWeekOrDayMonth(g)
EDIT genTimeTable OBJECT g;

DESIGN genTimeTable FROM DEFAULT {
    g.panel {
        fillVertical = 0.5;
        preferredSize = (1280, 1024);
    }
    ADD g.historyGroup BEFORE functions.box;
}

showFormGenTimeTable 'Показать генерацию графика' (genTimeTable) = ACTION FORM genTimeTable OBJECTS g MODAL;

FORM genTimeTables 'Графики' //служит для добавления сущности "генерации графиков" и в дальнейшем будет удалена
OBJECTS g=genTimeTable
PROPERTIES(g) READONLY name
PROPERTIES(g) ADDFORM, EDITFORM, delete;

// ----------------------------------- Физические лица -------------------------------------------------- //

GROUP employeeGroup 'Пользовательская информация' : baseGroup;

CLASS ABSTRACT person 'Физическое лицо';
TABLE person (person);

CLASS employee 'Сотрудник' : person, customUser;
TABLE employee(employee);

CLASS officer 'Должность' ;
TABLE officer(officer);

nameOfficer 'Должность' = DATA STRING[100] (officer) IN baseGroup;
officerEmployee(employee) = DATA officer (employee) IN idGroup;
nameOfficerEmployee 'Должность сотрудника' (employee) = nameOfficer(officerEmployee(employee)) IN baseGroup MINCHARWIDTH 15 PREFCHARWIDTH 15;

languageEmployee(employee) = DATA language (employee) IN idGroup;
nameLanguageEmployee 'Язык интерфейса' = name(languageEmployee(employee)) IN employeeGroup MINCHARWIDTH 10 PREFCHARWIDTH 10;
shortNameLanguageEmployee 'Язык интерфейса сокр.' = shortName(languageEmployee(employee)) IN employeeGroup MINCHARWIDTH 10 PREFCHARWIDTH 10;
numberEmployee 'Номер кассира для касс' = DATA STRING[10] (employee) IN employeeGroup MINCHARWIDTH 10 PREFCHARWIDTH 10;
passwordEmployee 'Пароль для касс' = DATA STRING[20] (employee) IN employeeGroup MINCHARWIDTH 10 PREFCHARWIDTH 10;
dataEmployee 'Данные для регистрации на кассе (штрих-код)' = DATA STRING[20] (employee) IN employeeGroup MINCHARWIDTH 15 PREFCHARWIDTH 15;


includeDepartmentStoreEmployee 'Сотрудник отдела' = DATA BOOLEAN (departmentStore, employee);
phoneEmployee 'Телефон' = DATA STRING[50] (employee) IN employeeGroup MINCHARWIDTH 15 PREFCHARWIDTH 15;

nameDepartmentByEmployee 'Отделы' (employee) =
     GROUP CONCAT name(departmentStore) IF includeDepartmentStoreEmployee(departmentStore, employee), ', '
     BY employee MINCHARWIDTH 50 PREFCHARWIDTH 50;

CONSTRAINT bookkeeperDepartmentStore(departmentStore) AND NOT includeDepartmentStoreEmployee(departmentStore, bookkeeperDepartmentStore(departmentStore))
    CHECKED BY bookkeeperDepartmentStore MESSAGE 'Бухгалтер не сотрудник отдела';
CONSTRAINT personCheckDepartmentStore(departmentStore) AND NOT includeDepartmentStoreEmployee(departmentStore, personCheckDepartmentStore(departmentStore))
    CHECKED BY personCheckDepartmentStore MESSAGE 'Проверяющий не сотрудник отдела';
CONSTRAINT MRPDepartmentStore(departmentStore) AND NOT includeDepartmentStoreEmployee(departmentStore, MRPDepartmentStore(departmentStore))
    CHECKED BY MRPDepartmentStore MESSAGE 'МОЛ не сотрудник отдела';
// ------------------------------------- Скидки ---------------------------------------------------------- //

@metaCodeNameObjectDateProperty(discount, departmentStore, 'Разрешать скидки', yesNo, baseGroup);

FORM officer 'Должность'
    OBJECTS of=officer FIXED PANEL
    PROPERTIES(of) nameOfficer
    EDIT officer OBJECT of
;

FORM employee 'Сотрудник'
    OBJECTS e=employee FIXED PANEL
    PROPERTIES(e)      userFirstName, userLastName, nameOfficerEmployee, phoneEmployee,
                       userLogin, userPassword, email, nameUserMainRole

    TREE treeStore t=tradingNetwork, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY name(t), name(st), name(s), name(ds)

    PROPERTIES(ds, e)  includeDepartmentStoreEmployee

    FILTERS   inTradingNetworkStoreType (t, st),
              inStoreTypeStore (st, s),
              inStoreDepartment (s, ds)

    EDIT employee OBJECT e
;

DESIGN employee FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        NEW oneCase BEFORE treeStore.box {
            title = 'Сотрудник';
            childConstraints = TO THE RIGHT;
            NEW twoCase {
                title = 'Личные данные';
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(userFirstName(e));
                ADD PROPERTY(userLastName(e));
                ADD PROPERTY(nameOfficerEmployee(e));
                ADD PROPERTY(phoneEmployee(e));
            };
            NEW threeCase {
                title = 'Данные пользователя';
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(userLogin(e));
                ADD PROPERTY(userPassword(e));
                ADD PROPERTY(email(e));
                ADD PROPERTY(nameUserMainRole(e));
            };

        }
        ADD functions.box;
    }
}

FORM employees 'Сотрудники'
    OBJECTS e=employee
    PROPERTIES(e) READONLY userFirstName, userLastName, nameOfficerEmployee
    PROPERTIES(e) ADDFORM, EDITFORM, delete

    OBJECTS ds=departmentStore
    PROPERTIES(ds) READONLY name, nameStoreDepartmentStore
    FILTERS includeDepartmentStoreEmployee(ds, e)
;

FORM employeeDialog 'Сотрудники'
    OBJECTS e=employee
    PROPERTIES(e)      userFirstName, userLastName, nameOfficerEmployee, phoneEmployee

    DIALOG employee OBJECT e
;

// ----------------------------------- Цех ----------------------------------- //

outDepartmentManufactory 'Подразделение, куда передаются изделия (ИД)' (manufactory) = DATA departmentStore(manufactory) IN idGroup;
nameOutDepartmentManufactory 'Подразделение, куда передаются изделия' (manufactory) = name(outDepartmentManufactory(manufactory)) IN manufactoryGroup;
inPriceDepartmentManufactory 'Подразделение, откуда брать цены (ИД)' (manufactory) = DATA departmentStore(manufactory) IN idGroup;
nameInPriceDepartmentManufactory 'Подразделение, откуда брать цены ' (manufactory) = name(inPriceDepartmentManufactory(manufactory)) IN manufactoryGroup;
marginPublicCateringManufactory 'Наценка общепита по умолчанию для формирования цены в подразделении' (manufactory) = DATA NUMERIC[8,3] (manufactory) IN manufactoryGroup;
rawDepartmentStore 'Подразделения, из которых можно получить сырье' = DATA BOOLEAN (manufactory, departmentStore);

inRawDepartmentStore(manufactory, departmentStore) = storeDepartmentStore(manufactory) == storeDepartmentStore(departmentStore);

//----------------------------------- Для товара и подразделения ------------------------------------------//
percentDiscountDepartmentItem 'Скидка на количество, % от розн.цены' = DATA NUMERIC[8,3] (departmentStore, item) IN discountGroup;

additionPriceDepartmentStoreItem 'Торговая надбавка в рублях' = DATA NUMERIC[14,2] (departmentStore, item) IN baseGroup;
boundCertificateDepartmentStoreItem 'Сертификат / удостоверение обязательны для товара?' = DATA BOOLEAN (departmentStore, item) IN baseGroup;
maxAllowedRetailPriceDepartmentStoreItem 'MAX допустимая розн.цена' = DATA INTEGER (departmentStore, item) IN retailGroup;
netWeightManufacturerDepartmentStoreItem 'Вес нетто продукта для производства' = DATA NUMERIC[8,3] (departmentStore, item) IN manufactoryGroup;
statusCashDepartmentStoreItem 'Статус товара на кассах (ИД)' = DATA itemStatus (departmentStore, item) IN idGroup;
nameStatusCashDepartmentStoreItem 'Статус товара на кассах' = name(statusCashDepartmentStoreItem (departmentStore, item)) IN equipmentGroup;

dateManufactureDepartmentStoreItem 'Дата изготовления' = DATA DATE (departmentStore, item) IN baseGroup;
dateFitToDepartmentStoreItem 'Годен до' = DATA DATE (departmentStore, item) IN baseGroup;
fromDateDeliveryDepartmentStoreItem 'Дату [Годен до] рассчитывать от даты поставки?' = DATA BOOLEAN (departmentStore, item) IN baseGroup;
banSaleDepartmentStoreItem 'Запрет продаж товара в подразделении' = DATA BOOLEAN (departmentStore, item) IN equipmentGroup;
banMovementDepartmentStoreItem 'Запрет на внутреннее перемещение товара' = DATA BOOLEAN (departmentStore, item) IN baseGroup;
reserveDepartmentStoreItem 'Резерв по товару' = DATA NUMERIC[14,3] (departmentStore, item) IN baseGroup;

topDepartmentStoreItem 'Топ' = DATA INTEGER (departmentStore, item) IN orderGroup;

//------------------------------------ Товар с историей -------------------------------------------------------------//
GROUP historyGroup 'Изменяемые характеристики' : baseGroup;

@metaCodeNameObjectDateProperty(isPortionBarItem, item, 'Порционный товар для бара', yesNo, barGroup);

@metaCodeNameObjectDateProperty(banDiscountItem, item, 'Запретить скидки по товару', yesNo, discountGroup);

@metaCodeObjectDateProperty(coefficientNetGrossItem, item, 'Сезонный коэффициент пересчета сырья из нетто в брутто', NUMERIC[8,3], manufactoryGroup);

//@metaCodeObjectDateProperty(rateNaturalLossItem, item, 'Норма естественной убыли,%', NUMERIC[8,3], rateGroup);

//@metaCodeObjectDateProperty(NDSSupplierItem, item, 'НДС поставщика,%', DOUBLE, historyGroup);

@metaCodeObjectDateProperty(importerPriceItem, item, 'Цена импортёра', NUMERIC[14,3], retailGroup);


//---------------------------- Налоги ----------------------------------------//

GROUP supplierNDSGroup 'НДС поставщика' : retailGroup;
GROUP retailNDSGroup 'НДС розничный' : retailGroup;

CLASS STATIC tax 'Налоги'
{
    taxNDS 'НДС',
    taxNP 'Налог с продаж'      // пусть будет для теста
};

nameTax 'Наименование налога' = DATA STRING[200] (tax) IN baseGroup;

CLASS range 'Шкала';
TABLE range(range);
dataRange 'Шкала' = DATA INTEGER (range) AGGPROP;

CLASS rate 'История изменений шкалы' : historyObject;
TABLE rate(rate);
rangeRate 'Шкала ИД' = DATA range (rate) IN idGroup;
taxRange 'Налог ИД' = DATA tax (range) IN idGroup;
nameTaxRange 'Налог' (range) = name(taxRange(range)) IN baseGroup;

maxDataRangeTax(tax) = UNION OVERRIDE 0 IF tax IS tax, [GROUP MAX dataRange(range) BY taxRange(range)](tax);
nextDataRangeTax(tax) = maxDataRangeTax(tax) + 1;

addNewRange 'Добавить шкалу' = ACTION (tax) {
    ADDOBJ range;
    SET dataRange(r) IF r == addedObject() <- nextDataRangeTax(tax);
} TOOLBAR IMAGE 'add.png';

CLASS STATIC rangeType 'Для каких подразделений действует шкала'
{
    common 'Общий',
    units 'Для подразделений'
};
rangeTypeRange 'Тип ИД' = DATA rangeType (range) IN idGroup;
nameRangeTypeRange 'Тип действия' = name(rangeTypeRange(range)) IN baseGroup;
inRangeStoreDefault 'Вкл.' (range, store) = DATA BOOLEAN (range, store) IN baseGroup;
inRangeStore 'Вкл.' (range, store) = inRangeStoreDefault(range, store)  IF rangeTypeRange(range) == rangeType.units IN baseGroup;
isUnitsTypeRange(range) = rangeTypeRange(range) == rangeType.units;

rangeTypeRange(range) <- rangeType.common WHEN ASSIGNED(range IS range);     /// потом согласовать, какое значение должно быть по-умолчанию ///

dataRate 'Значение ставки' = DATA NUMERIC[10,5] (rate) IN recognizeGroup;
dateFromRate 'Действует с' = DATA DATE (rate) IN baseGroup;
dateToRate 'Действует по' = DATA DATE (rate) IN baseGroup;

quantityRateRange 'Количество историй' (range) = GROUP SUM 1 IF rate BY rangeRate(rate);
CONSTRAINT range IS range AND NOT rangeTypeRange(range)  MESSAGE 'ошибка: Не выбран тип действия для шкалы';
CONSTRAINT rate IS rate AND NOT dataRate(rate)  MESSAGE 'ошибка: Не указано значение ставки';

inTaxNDSRangeStore(range, store) = inRangeStore(range, store) AND tax.taxNDS == taxRange(range);
rangeToTaxStore 'Шкала по налогу и складу' (tax, store) = GROUP UNIQUE range BY taxRange(range), store WHERE inTaxNDSRangeStore(range, store);

inRangeRate(range, rate) = rangeRate(rate) == range;
inTaxRange(tax, range) = taxRange(range) == tax;

actingRateDate(rate, date) = rate IF dateFromRate(rate) <= date AND NOT dateToRate(rate) < date AND date AS DATE;
actingRateRangeDate(range, date) = GROUP MAX actingRateDate(rate, date) BY rangeRate(rate), date;
dataActingRateRangeDate 'На дату' (range, date) = dataRate(actingRateRangeDate(range, date));
actingRateRange 'Действующая ставка (ИД)' (range) = actingRateRangeDate(range, currentDate()) IN idGroup PERSISTENT;
dataActingRateRange 'Действующая ставка' (range) = dataRate(actingRateRange(range)) IN baseGroup;
dateFromActingRateRange 'Действует с' (range) = dateFromRate(actingRateRange(range)) IN baseGroup;
dateToActingRateRange 'Действует по' (range) = dateToRate(actingRateRange(range)) IN baseGroup;
nameUserCreatedActingRateRange 'Создан пользователем' (range) = nameUserCreated(actingRateRange(range)) IN baseGroup;

quantityActingRateRangeDate(range, date) = GROUP SUM 1 IF actingRateDate(rate, date) BY rangeRate(rate), date;

quantityActingRateRange 'Количество действующих историй' (range) = quantityActingRateRangeDate(range, currentDate());
//CONSTRAINT quantityActingRateRange(range) > 1 MESSAGE 'ошибка: Одновременно не может быть несколько действующих ставок';

rateToRate (rt1, rt2) = UNION OVERRIDE dateFromRate(rt2) <= dateFromRate(rt1),
                                       dateToRate(rt1) < dateFromRate(rt2);


CONSTRAINT rangeRate(rt1) == rangeRate(rt2) AND NOT rateToRate (rt1, rt2)  MESSAGE 'ошибка: Одновременно не может быть несколько действующих ставок / или не задано: действует с';

supplierTaxNDSItem(item) = tax.taxNDS IF item IS item IN idGroup;
nameSupplierTaxNDSItem(item) = name(supplierTaxNDSItem(item));

supplierRangeItemDate 'Шкала' (item, date) = DATA range (item, DATE) IN idGroup;
dataSupplierRangeItemDate 'Шкала' (item, date) = dataRange(supplierRangeItemDate(item, date)) IN supplierNDSGroup;

dateSupplierRangeItemDate (item, date) = GROUP MAX dateIn AND supplierRangeItemDate(item, dateIn) AND dateIn <= (date AS DATE) BY item, date;
dataActingSupplierRangeItemDate 'НДС поставщика,%' (item, date) = dataActingRateRangeDate(supplierRangeItemDate(item, date), date) IN supplierNDSGroup;

supplierRangeItemVal 'На дату' (item, date) = supplierRangeItemDate(item, dateSupplierRangeItemDate(item, date)) IN idGroup;
supplierRangeItem 'Шкала' (item) = supplierRangeItemDate(item, dateSupplierRangeItemDate(item, currentDate())) IN idGroup;

taxSupplierItem(item) = taxRange(supplierRangeItem(item)) IN idGroup;
nameTaxSupplierItem 'Налог' (item) = nameTaxRange(supplierRangeItem(item)) IN baseGroup;

dataSupplierRangeItem 'Шкала НДС' (item) = dataRange(supplierRangeItem(item)) IN supplierNDSGroup;
dataActingRateSupplierRangeItem 'НДС поставщика,%' (item) = dataActingRateRange(supplierRangeItem(item)) IN supplierNDSGroup;

CONSTRAINT taxRange(supplierRangeItemDate(item, date)) != tax.taxNDS CHECKED BY supplierRangeItemDate MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

FORM addSupplierRangeItem 'Добавить Шкалу'
    OBJECTS i=item FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES nameAttributeItem(i) READONLY, OBJVALUE(d), dataSupplierRangeItemDate(i, d), dataActingSupplierRangeItemDate(i, d)
;

DESIGN addSupplierRangeItem FROM DEFAULT {
    PROPERTY(nameAttributeItem(i)) { focusable = FALSE; }
};

showFormAddSupplierRangeItem 'Добавить' (item) = ACTION FORM addSupplierRangeItem OBJECTS i MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

FORM supplierRangeItem 'Добавить Шкалу'
    OBJECTS i=item FIXED PANEL, d=DATE
    PROPERTIES       nameAttributeItem(i) READONLY, showFormAddSupplierRangeItem(i) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY
    PROPERTIES(i, d) dataSupplierRangeItemDate, dataActingSupplierRangeItemDate
    FILTERS supplierRangeItemDate(i, d)
;

DESIGN supplierRangeItem FROM DEFAULT {
    PROPERTY(nameAttributeItem(i)) { focusable = FALSE; }
};

showFormSupplierRangeItem 'Шкала' (item) = ACTION FORM supplierRangeItem OBJECTS i MODAL SHORTCUT dataSupplierRangeItem DEFAULT;

retailRangeItemDate 'Шкала' (item, date) = DATA range (item, DATE) IN idGroup;
dataRetailRangeItemDate 'Шкала' (item, date) = dataRange(retailRangeItemDate(item, date)) IN retailNDSGroup;

dateRetailRangeItemDate (item, date) = GROUP MAX dateIn AND retailRangeItemDate(item, dateIn) AND dateIn <= (date AS DATE) BY item, date;
dataActingRetailRangeItemDate 'Розничный НДС' (item, date) = dataActingRateRangeDate(retailRangeItemDate(item, date), date) IN retailNDSGroup;

retailRangeItemVal 'На дату' (item, date) = retailRangeItemDate(item, dateRetailRangeItemDate(item, date)) IN idGroup;
retailRangeItem 'Шкала' (item) = retailRangeItemDate(item, dateRetailRangeItemDate(item, currentDate())) IN idGroup;

taxRetailItem(item) = taxRange(retailRangeItem(item)) IN idGroup;
nameTaxRetailItem 'Налог' (item) = nameTaxRange(retailRangeItem(item)) IN baseGroup;

dataRetailRangeItem 'Шкала НДС' (item) = dataRange(retailRangeItem(item)) IN retailNDSGroup;
dataActingRateRetailRangeItem 'Розничный НДС' (item) = dataActingRateRange(retailRangeItem(item)) IN retailNDSGroup;

CONSTRAINT taxRange(retailRangeItem(item)) != tax.taxNDS CHECKED BY retailRangeItem MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

FORM addRetailRangeItem 'Добавить Шкалу'
    OBJECTS i=item FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES nameAttributeItem(i) READONLY, OBJVALUE(d), dataRetailRangeItemDate(i, d), dataActingRetailRangeItemDate(i, d)
;

DESIGN addRetailRangeItem FROM DEFAULT {
    PROPERTY(nameAttributeItem(i)) { focusable = FALSE; }
};

showFormAddRetailRangeItem 'Добавить' (item) = ACTION FORM addRetailRangeItem OBJECTS i MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

FORM retailRangeItem 'Добавить Шкалу'
    OBJECTS i=item FIXED PANEL, d=DATE
    PROPERTIES       nameAttributeItem(i) READONLY, showFormAddRetailRangeItem(i) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY
    PROPERTIES(i, d) dataRetailRangeItemDate, dataActingRetailRangeItemDate
    FILTERS retailRangeItemDate(i, d)
;
DESIGN retailRangeItem FROM DEFAULT {
    PROPERTY(nameAttributeItem(i)) { focusable = FALSE; }
};

showFormRetailRangeItem 'Шкала' (item) = ACTION FORM retailRangeItem OBJECTS i MODAL SHORTCUT dataRetailRangeItem DEFAULT;

toShowDataRangeItem(item) = TRUE IF item IS item AND dataActingRateSupplierRangeItem(item); // dataSupplierRateRangeItem(item);

inCompanyStore (company, store) = companyStore(store) == company;
isInCompanyStore (company, store)  = UNION OVERRIDE  companyStore(store) == company, store IS store AND NOT company;


dataActingRateRangeToRange 'Шкала по значению' (doubleValue) = GROUP UNIQUE range BY dataActingRateRange (range);

toShowAddNDSValue(tax) = tax == tax.taxNDS;
addNDSValue 'Добавить значение НДС' = ACTION (tax, number, value) {
    ADDOBJ range;
    FOR rn == addedObject() DO {
       SET rangeTypeRange(rn) <- rangeType.common;
       SET taxRange(rn) <- tax AS tax;
       SET dataRange(rn) <- number AS INTEGER;
       ADDOBJ rate;
       FOR ra == addedObject() DO {
          SET rangeRate(ra) <- rn AS range;
          SET dataRate(ra) <- value AS NUMERIC[10,5];
          SET dateFromRate(ra) <- 2001_01_01;
       };
    };
};

fillNDSDefaultValues 'Заполнить значения НДС по умолчанию' = [ACTION (tax) {
    EXEC addNDSValue(tax AS tax, 1, 0);
    EXEC addNDSValue(tax AS tax, 2, 9.09);
    EXEC addNDSValue(tax AS tax, 3, 16.67);
    EXEC addNDSValue(tax AS tax, 4, 10);
    EXEC addNDSValue(tax AS tax, 5, 20);
    EXEC addNDSValue(tax AS tax, 6, 24);
}](tax) AND tax==tax.taxNDS;

FORM tax 'Налог'
    OBJECTS           t=tax FIXED PANEL, ra=range
    PROPERTIES(t)     name, nameTax, addNewRange TODRAW ra

    PROPERTIES(ra)    dataRange, nameRangeTypeRange, delete
    PROPERTIES(ra)    READONLY dataActingRateRange, dateFromActingRateRange, dateToActingRateRange

    OBJECTS           rt=rate
    PROPERTIES(rt)    dataRate, dateFromRate, dateToRate, timeCreated, nameUserCreated, ADDOBJ, delete

    TREE treeCompanyStore a=STRING[3], co=company

    PROPERTIES READONLY OBJVALUE(a), name(co)

    OBJECTS           s=store
    PROPERTIES(s)     name, addressStore

    PROPERTIES(ra, s) inRangeStore SHOWIF isUnitsTypeRange(ra)

    PROPERTIES(t)     fillNDSDefaultValues SHOWIF toShowAddNDSValue(t) TODRAW t FORCE PANEL

    FILTERS           stringEqualsAll(a),
                      inRangeRate(ra, rt),
                      inTaxRange(t, ra),
                      isInCompanyStore(co, s)

    FILTERGROUP filters6
        FILTER 'Показывать магазины только для данного налога' 'F10' inRangeStore(ra, s)

    EDIT tax OBJECT t
;

DESIGN tax FROM DEFAULT {
    main {
       NEW secondCase BEFORE functions.box {
            ADD s.box {
                fillHorizontal = 3.8;
            };
            ADD treeCompanyStore.box {
                title = 'компании';
                fillHorizontal = 1.2;
            };
            POSITION treeCompanyStore.box TO THE LEFT s.box;
       }
       NEW firstCase BEFORE secondCase {
            ADD ra.box {
                fillHorizontal = 2.5;
            };
            ADD rt.box {
                fillHorizontal = 2.5;
            };
            POSITION ra.box TO THE LEFT rt.box;
       }
    }
}

FORM taxes 'Налоги'
    OBJECTS           t=tax
    PROPERTIES(t)     READONLY name, nameTax
    PROPERTIES(t)     EDITFORM, delete

    OBJECTS           ra=range
    PROPERTIES(ra)    READONLY dataRange, dataActingRateRange, dateFromActingRateRange, dateToActingRateRange, nameUserCreatedActingRateRange, nameRangeTypeRange, quantityRateRange

    OBJECTS           s=store
    PROPERTIES(s)     READONLY name, addressStore

    PROPERTIES(ra, s) READONLY inRangeStore

    FILTERS  inTaxRange(t, ra),
             inRangeStore(ra, s)
;

// ----------------------------------- Справочник норм естественной убыли -------------------------------------------- //

CLASS naturalLossItemGroup 'Группа естественной убыли': named, externalObject;

CLASS subNaturalLossItemGroup 'Группа естественной убыли': named, externalObject;;

    parentNaturalLossItemGroup 'Родительская группа' = DATA naturalLossItemGroup(subNaturalLossItemGroup);
    codeSubNaturalLossItemGroup 'Код нормы естественной убыли' = DATA STRING[3] (subNaturalLossItemGroup);
    percentNaturalLossItemGroup '% естественной убыли' = DATA NUMERIC[10,5] (subNaturalLossItemGroup, month);

    groupNaturalLossItem 'Группа естественной убыли товара(ИД)' = DATA subNaturalLossItemGroup (item);
    nameGroupNaturalLossItem 'Группа естественной убыли товара' (item) = name(groupNaturalLossItem(item)) IN rateGroup;
    rateGroupNaturalLossItem 'Норма естественной убыли, %' (item) =
        percentNaturalLossItemGroup(groupNaturalLossItem(item), monthInDate(currentDate())) IN rateGroup;
    rateGroupNaturalLossItemDate 'Норма естественной убыли, %' (item, date) =
        percentNaturalLossItemGroup(groupNaturalLossItem(item), monthInDate(date AS DATE));

    inParentNaturalLossItemGroup(naturalLossItemGroup, subNaturalLossItemGroup) =
        parentNaturalLossItemGroup(subNaturalLossItemGroup ) == naturalLossItemGroup;

    inParentSubNaturalLossItemGroup (naturalLossItemGroup, subNaturalLossItemGroup) = UNION OVERRIDE
        parentNaturalLossItemGroup(subNaturalLossItemGroup) == naturalLossItemGroup,
        subNaturalLossItemGroup IS subNaturalLossItemGroup AND NOT naturalLossItemGroup;

FORM naturalLossItem 'Справочник норм естественной убыли'

    TREE treeNaturalLossItem a=STRING[3], n=naturalLossItemGroup
    PROPERTIES READONLY OBJVALUE(a)
    PROPERTIES name(n), ADDOBJ(n), delete(n) FORCE PANEL
    ORDER BY name

    OBJECTS sg=subNaturalLossItemGroup, m=month
    PROPERTIES(sg) name, codeSubNaturalLossItemGroup, ADDOBJ TODRAW sg, delete FORCE PANEL
    PROPERTIES(m) READONLY name
    PROPERTIES percentNaturalLossItemGroup(sg, m)
    FILTERS stringEqualsAll(a), inParentSubNaturalLossItemGroup(n, sg)
    ORDER BY name
;

DESIGN naturalLossItem FROM DEFAULT {

    POSITION treeNaturalLossItem.box TO THE LEFT sg.box;
    POSITION treeNaturalLossItem.box TO THE LEFT m.box;
    POSITION m.box TO THE BOTTOM sg.box;

    treeNaturalLossItem.tree {
        fillHorizontal = 0.5;
    }

    PROPERTY (delete(n)) {
        caption = 'Удалить';
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }

    PROPERTY (delete(sg)) {
        caption = 'Удалить';
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }

}

FORM naturalLossItems 'Справочник норм естественной убыли'

    TREE treeNaturalLossItem a=STRING[3], n=naturalLossItemGroup
    PROPERTIES READONLY OBJVALUE(a), name(n)
    ORDER BY name

    OBJECTS sg=subNaturalLossItemGroup, m=month
    PROPERTIES READONLY name(sg), codeSubNaturalLossItemGroup(sg), name(m), percentNaturalLossItemGroup(sg, m)
    FILTERS stringEqualsAll(a), inParentSubNaturalLossItemGroup(n, sg)
    ORDER BY name

    DIALOG subNaturalLossItemGroup OBJECT sg
;

DESIGN naturalLossItems FROM DEFAULT {

    POSITION treeNaturalLossItem.box TO THE LEFT sg.box;
    POSITION treeNaturalLossItem.box TO THE LEFT m.box;
    POSITION m.box TO THE BOTTOM sg.box;

    treeNaturalLossItem.tree {
        fillHorizontal = 0.5;
    }
}

//------------------------------------ Товар для подразделения с историей -------------------------------------------//
//inActionItemDepartmentDate 'Товар акции' = DATA BOOLEAN (item, departmentStore, DATE) IN baseGroup;

TABLE itemDepartmentStore (item, departmentStore);
TABLE itemDepartmentStoreDate (item, departmentStore, DATE);

@metaCodeDoubleObjectDateProperty(maxReserveItemDepartment, item, departmentStore, 'Максимально допустимый товарный запас в днях', NUMERIC[8,2], orderGroup);
@metaCodeDoubleObjectDateProperty(minReserveItemDepartment, item, departmentStore, 'Минимально допустимый товарный запас в днях', NUMERIC[8,2], orderGroup);

@metaCodeNameYesNoDoubleObjectDateProperty(banRevaluationItemDepartment, item, departmentStore, 'Запрет на переоценку', yesNo, retailGroup);

@metaCodeNameYesNoDoubleObjectDateProperty(inActionItemDepartment, item, departmentStore, 'Товар акции', yesNo, discountGroup);

@metaCodeDoubleObjectDateProperty(marginProductionItemDepartment, item, departmentStore, 'Наценка производства', NUMERIC[8,3], retailGroup);

@metaCodeDoubleObjectDateProperty(retailPriceItemDepartment, item, departmentStore, 'Розничная цена', NUMERIC[14,2], retailGroup);

@metaCodeDoubleObjectDateProperty(accountPriceItemDepartment, item, departmentStore, 'Учётная цена', NUMERIC[14,2], retailGroup);

@metaCodeDoubleObjectDateProperty(discountItemDepartment, item, departmentStore, 'Скидка для товара', STRING[100], discountGroup);

defaultLabelTypeItemDepartmentStore(item, departmentStore) = defaultLabelTypeDepartmentStore(departmentStore) AND item IS item;
@metaCodeNameDoubleObjectDateProperty(labelItemDepartment, item, departmentStore, 'Ценник', labelType, labelGroup, defaultLabelTypeItemDepartmentStore);
labelBarcodeDepartmentVal (barcode, departmentStore, date) = labelItemDepartmentVal(skuBarcode(barcode), departmentStore, date);

CONSTRAINT labelItemDepartmentDate(item, departmentStore, date) AND NOT inLabelTypeDepartmentStore(labelItemDepartmentDate(item, departmentStore, date), departmentStore)
    CHECKED BY labelItemDepartmentDate MESSAGE 'Тип ценника запрещен для выбранного отдела магазина';

@metaCodeDoubleObjectDateProperty(multiplierItemDepartment, item, departmentStore, 'Множитель', INTEGER, labelGroup);
multiplierItemDepartmentValOver (item, departmentStore, date) = UNION OVERRIDE 1 IF item IS item AND departmentStore IS departmentStore AND date IS DATE,
                                                                               multiplierItemDepartmentVal(item, departmentStore, date);
multiplierBarcodeDepartmentValOver (barcode, departmentStore, date) = multiplierItemDepartmentValOver(skuBarcode(barcode), departmentStore, date);

@metaCodeDoubleObjectDateProperty(oldPriceItemDepartment, item, departmentStore, 'Старая цена', NUMERIC[14,2], labelGroup);

TABLE supplierItemDepartmentStoreDate (supplier, item, departmentStore, DATE);

@metaCodeNameTripleObjectDateProperty(isSupplierItemDepartment, supplier, item, departmentStore, 'Поставляется', yesNo, orderGroup);

@metaCodeTripleObjectDateProperty(priceSupplierItemDepartment, supplier, item, departmentStore, 'Цена поставщика', NUMERIC[14,2], retailGroup);

@metaCodeDoubleObjectDateProperty(markupItemDepartment, item, departmentStore, 'Торговая надбавка', NUMERIC[8,3], retailGroup);

@metaCodeNameTripleObjectDateProperty(banSupplierItemDepartment, supplier, item, departmentStore, 'Запретить закупку', yesNo, orderGroup);

// Посуда
@metaCodeObjectDateProperty(warePrice, ware, 'Цена', NUMERIC[14,2], baseGroup);

taxNDSWare(ware) = tax.taxNDS IF ware IS ware IN idGroup;
nameTaxNDSWare(ware) = name(taxNDSWare(ware));

rangeWareDate 'Шкала' (ware, date) = DATA range (ware, DATE) IN idGroup;
dataRangeWareDate 'Шкала' (ware, date) = dataRange(rangeWareDate(ware, date));

dateRangeWareDate (ware, date) = GROUP MAX dateIn AND rangeWareDate(ware, dateIn) AND dateIn <= (date AS DATE) BY ware, date;
dataActingRateRangeWareDate 'НДС,%' (ware, date) = dataActingRateRangeDate(rangeWareDate(ware, date), dateRangeWareDate (ware, date));

rangeWareVal 'На дату' (ware, date) = rangeWareDate(ware, dateRangeWareDate(ware, date)) IN baseGroup;
rangeWare 'Шкала' (ware) = rangeWareDate(ware, dateRangeWareDate(ware, currentDate())) IN baseGroup;

taxRangeWare(ware) = taxRange(rangeWare(ware)) IN idGroup;
nameTaxWare 'Налог' (ware) = nameTaxRange(rangeWare(ware)) IN baseGroup;

dataRangeWare 'Шкала НДС' (ware) = dataRange(rangeWare(ware)) IN baseGroup;
dataActingRateRangeWare 'НДС,%' (ware) = dataActingRateRange(rangeWare(ware)) IN baseGroup;

CONSTRAINT taxRange(rangeWareDate(ware, date)) != tax.taxNDS CHECKED BY retailRangeItem MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';


FORM addRangeWare 'Добавить Шкалу'
    OBJECTS w=ware FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(w) READONLY, OBJVALUE(d), dataRangeWareDate(w, d), dataActingRateRangeWareDate(w, d)
;

DESIGN addRangeWare FROM DEFAULT {
    PROPERTY(name(w)) { focusable = FALSE; }
};

showFormAddRangeWare 'Добавить' (ware) = ACTION FORM addRangeWare OBJECTS w MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

FORM rangeWare 'Добавить Шкалу'
OBJECTS w=ware FIXED PANEL, d=DATE
PROPERTIES name(w) READONLY, showFormAddRangeWare(w) TODRAW d, OBJVALUE(d) READONLY,
           dataRangeWareDate(w, d), dataActingRateRangeWareDate(w, d)
FILTERS rangeWareDate(w, d);

DESIGN rangeWare FROM DEFAULT {
PROPERTY(name(w)) { focusable = FALSE; }
};

showFormRangeWare 'Шкала' (ware) = ACTION FORM rangeWare OBJECTS w MODAL SHORTCUT dataRangeWare DEFAULT;

FORM ware 'Посуда'
OBJECTS w=ware FIXED PANEL
PROPERTIES(w) name, warePrice, showFormWarePrice
PROPERTIES(w) dataRangeWare, dataActingRateRangeWare, showFormRangeWare
EDIT ware OBJECT w;

FORM wares 'Посуда'
OBJECTS w=ware
PROPERTIES(w) READONLY barcodeBarcodeSku, name, warePrice, showFormWarePrice, dataRangeWare, dataActingRateRangeWare
PROPERTIES(w)          ADDFORM, EDITFORM, delete
DIALOG ware OBJECT w;

FORM item 'Товар'

    OBJECTS i=item FIXED PANEL

    PROPERTIES(i) nameAttributeItem, nameCashAttributeItem, nameScalesAttributeItem, canonicalNameItemGroupSku, barcodeBarcodeSku READONLY,

                  // Основные данные
                  captionItem SHOWIF toShowCaption(i), nameBrandItem SHOWIF toShowBrand(i), nameTypeItemItem SHOWIF toShowType(i),
                  nameSortItem SHOWIF toShowSort(i), shortNamePackItem SHOWIF toShowPack(i), shortNameSizeItem SHOWIF toShowSize(i),
                  shortNameSpecialtyItem SHOWIF toShowSpecialty(i), nameColorItem SHOWIF toShowColor(i),
                  nameTasteItem SHOWIF toShowTaste(i), hallmarkItem SHOWIF toShowHallmark(i), articleItem SHOWIF toShowArticle(i),
                  nameCoolingDegreeItem SHOWIF toShowCoolingDegree(i), nameFormItemItem SHOWIF toShowFormItem(i),

                  shortNameUnitOfMeasureItem SHOWIF toShowUnitOfMeasure(i), nameCountryItem SHOWIF toShowCountry(i),
                  nameManufacturerItem SHOWIF toShowManufacturer(i), isContainerItem,
                  isWeightItem, isManufacturedItem,
                  compositionMenuItem SHOWIF isManufacturedItem(i),
                  grossWeightPackItem SHOWIF isManufacturedItem(i), isCrudeItem SHOWIF isManufacturedItem(i),
                  nameGroupProductItem SHOWIF isManufacturedItem(i), standartItem SHOWIF isManufacturedItem(i),
                  normOutItem SHOWIF isManufacturedItem(i), nameGroupMenuItem SHOWIF isManufacturedItem(i),
                  isCutedItem SHOWIF isManufacturedItem(i), coefficientNetGrossItem SHOWIF isManufacturedItem(i), showFormCoefficientNetGrossItem,

                  nameRateWasteItem, percentRateWasteItem, nameGroupNaturalLossItem, rateGroupNaturalLossItem, nameStatisticGroupSku,

                  volumeItem, lengthItem, widthItem, heightItem, lengthPackItem, widthPackItem, heightPackItem,

                  nameIsPortionBarItem, showFormNameIsPortionBarItem,

                  // Дополнительные
                  passScalesItem, isMarkItem, isLoafCutItem,
                  compositionScalesItem, storageTemperatureItem, banSailItem,

                  importerPriceItem, showFormImporterPriceItem,
                  dataSupplierRangeItem, dataActingRateSupplierRangeItem, showFormSupplierRangeItem,
                  dataRetailRangeItem, dataActingRateRetailRangeItem, showFormRetailRangeItem,
                  percentWholesaleMarkItem, minTradeAllowanceItem, maxTradeAllowanceItem, minAllowedRetailPriceItem,
                  isFixPriceItem, banMarkdownItem, nameWareItem SHOWIF toShowWare(i),

                  quantityDiscountItem, fixPriceItem, nameBanDiscountItem, showFormNameBanDiscountItem,

                  percentFatItem, percentAlcoholItem, nutritionalValueItem, energyItem,
                  fatsItem, carbohydratesItem, proteinsItem, isContainGMOItem,

                  controlExpiryItem, daysExpiryItem, daysExpiryPackItem, hoursExpiryPackItem,

                  netWeightItem, grossWeightItem, quantityPackItem, minQuantityOrderItem, minReserveItem, numberInPackItem,

                  bonusReturnItem, nameReturnItem, hintItem, bonusItem,

                  imageItem, loadImageItem

    OBJECTS b=barcode
    PROPERTIES(b)       barcodeEx, dateBarcode, titleScalesBarcode, titleCashBarcode, shortNameUnitOfMeasureBarcode,
                        amountBarcode, removeBarcode, commentRemoveBarcode, activeBarcode
    PROPERTIES(i)       generateBarcodeSku TODRAW b FORCE PANEL
    PROPERTIES(b)       ADDOBJ, delete
    PROPERTIES(i, b)    primarySkuBarcode
    FILTERS inSkuBarcode(i, b)

    // Управленческие параметры
    TREE treeStore a=STRING[3], t=tradingNetwork, st=storeType, s=store
    PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS stringEqualsAll(a), inTradingNetworkStoreType (t, st), inStoreTypeStore (st, s)

    OBJECTS dt=DATE FIXED PANEL, sp=supplier FIXED PANEL, d=departmentStore
    PROPERTIES (d) name
    FILTERS inTradingNetworkStoreTypeStoreDepartment(t, st, s, d)

    PROPERTIES (dt) OBJVALUE BACKGROUND dateDiffersCurrent(dt)
    PROPERTIES (sp) SELECTOR name
    PROPERTIES      nameIsSupplierItemDepartmentOver(sp, i, d, dt) BACKGROUND nameIsSupplierItemDepartmentDate(sp, i, d, dt), showFormNameIsSupplierItemDepartmentOver(sp, i, d),
                    nameBanSupplierItemDepartmentOver(sp, i, d, dt) BACKGROUND nameBanSupplierItemDepartmentDate(sp, i, d, dt), showFormNameBanSupplierItemDepartmentOver(sp, i, d),
                    priceSupplierItemDepartmentOver(sp, i, d, dt) BACKGROUND priceSupplierItemDepartmentDate(sp, i, d, dt), showFormPriceSupplierItemDepartmentOver(sp, i, d),
                    markupItemDepartmentOver(i, d, dt) BACKGROUND markupItemDepartmentDate(i, d, dt), showFormMarkupItemDepartmentOver(i, d)
    PROPERTIES      retailPriceItemDepartmentOver(i, d, dt) BACKGROUND retailPriceItemDepartmentDate(i, d, dt), showFormRetailPriceItemDepartmentOver(i, d),
                    maxReserveItemDepartmentOver(i, d, dt) BACKGROUND maxReserveItemDepartmentDate(i, d, dt), showFormMaxReserveItemDepartmentOver(i, d),
                    minReserveItemDepartmentOver(i, d, dt) BACKGROUND minReserveItemDepartmentDate(i, d, dt), showFormMinReserveItemDepartmentOver(i, d),
                    nameBanRevaluationItemDepartmentOver(i, d, dt) BACKGROUND nameBanRevaluationItemDepartmentDate(i, d, dt), showFormNameBanRevaluationItemDepartmentOver(i, d),
                    nameInActionItemDepartmentOver(i, d, dt) BACKGROUND nameInActionItemDepartmentDate(i, d, dt), showFormNameInActionItemDepartmentOver(i, d),
                    marginProductionItemDepartmentOver(i, d, dt) BACKGROUND marginProductionItemDepartmentDate(i, d, dt), showFormMarginProductionItemDepartmentOver(i, d),
                    discountItemDepartmentOver(i, d, dt) BACKGROUND discountItemDepartmentDate(i, d, dt), showFormDiscountItemDepartmentOver(i, d),
                    nameLabelItemDepartmentOver(i, d, dt) BACKGROUND labelItemDepartmentDate(i, d, dt), showFormNameLabelItemDepartmentOver(i, d),
                    multiplierItemDepartmentOver(i, d, dt) BACKGROUND multiplierItemDepartmentDate(i, d, dt), showFormMultiplierItemDepartmentOver(i, d),
                    oldPriceItemDepartmentOver(i, d, dt) BACKGROUND oldPriceItemDepartmentDate(i, d, dt), showFormOldPriceItemDepartmentOver(i, d)

    EDIT item OBJECT i
;

DESIGN item FROM DEFAULT {
    main {
        i.panel {
            NEW itemPanelColumn1 {
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(nameAttributeItem);
                ADD PROPERTY(nameCashAttributeItem);
                ADD PROPERTY(nameScalesAttributeItem);
            }
            NEW itemPanelColumn2 {
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(canonicalNameItemGroupSku);
                ADD PROPERTY(barcodeBarcodeSku);
            }
        }
        NEW item.box BEFORE b.box {
            type = TABBED;
            NEW primary.box {
                title = 'Основные данные';
                fillVertical = 1.0;
                fillHorizontal = 1.0;
                NEW containerLeft {
                    childConstraints = TO THE BOTTOM;
                    ADD i.descriptionGroup {
                        fillVertical = 0.4;
                        NEW small.box {
                            ADD PROPERTY(shortNamePackItem(i));
                            ADD PROPERTY(shortNameSizeItem(i));
                            ADD PROPERTY(shortNameSpecialtyItem(i));
                            POSITION PROPERTY(shortNamePackItem(i)) TO THE LEFT PROPERTY(shortNameSizeItem(i));
                            POSITION PROPERTY(shortNameSizeItem(i)) TO THE LEFT PROPERTY(shortNameSpecialtyItem(i));
                        };
                    }
                    ADD i.manufactoryGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                }

                NEW containerRight {
                    childConstraints = TO THE BOTTOM;
                    ADD i.headGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.rateGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.sizeGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.barGroup;
                }
                POSITION containerLeft TO THE LEFT containerRight;
                ADD b.box;
            }

            NEW additional.box {

                title = 'Дополнительные';
                fillVertical = 1.0;
                fillHorizontal = 1.0;

                NEW containerALeft {
                    childConstraints = TO THE BOTTOM;
                    ADD i.equipmentGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.retailGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                };

                NEW containerARight {
                    childConstraints = TO THE BOTTOM;
                    ADD i.substanceGroup{
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.expiryGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.orderGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.documentGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                };

                POSITION containerALeft TO THE LEFT containerARight;
            }

            ADD d.box {

                title = 'Управленческие параметры';

                fillVertical = 1.0;
                fillHorizontal = 1.0;
                ADD dt.box BEFORE d.grid.box;
                ADD sp.box BEFORE d.grid.box;
                POSITION dt.box TO THE LEFT sp.box;
                ADD treeStore.box BEFORE d.grid.box;
                POSITION treeStore.box TO THE LEFT d.grid.box;
                POSITION d.grid.box TO THE LEFT d.panel;
                d.grid.box {
                    fillHorizontal = 3;
                };
            }

            NEW itemImage {
                title = 'Изображение';
                ADD PROPERTY(imageItem);
                PROPERTY(imageItem) {
                    caption = '';
                    fillVertical = 1.0;
                    fillHorizontal = 1.0;
                }

                ADD PROPERTY(loadImageItem);
            }
       }
    }
}

inItemGroupSku(itemGroup, sku) = itemGroupSku(sku) == itemGroup;

FORM items 'Товары'
    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS i=item
    PROPERTIES barcodeBarcodeSku(i) READONLY, nameAttributeItemGroupItem(g, i) READONLY, shortNameUnitOfMeasureItem(i) READONLY
    PROPERTIES(i) ADDFORM, EDITFORM, delete
    FILTERS nameAttributeItemGroupItem(g, i)
    ORDER BY nameAttributeItemGroupItem

    DIALOG item OBJECT i
;

DESIGN items FROM DEFAULT {
    POSITION treeGroup.box TO THE LEFT i.box;

    treeGroup.tree {
        fillHorizontal = 0.4;
    }

    i.grid {
        defaultComponent = TRUE;
    }
}



FORM barcodeForm 'Товары по Ш-К'
    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS b=barcode
    PROPERTIES(b) READONLY barcodeEx, nameSkuBarcode, shortNameUnitOfMeasureBarcode
    PROPERTIES(b) ADDFORM, EDITFORM, delete
    FILTERS hasParentItemGroupBarcode(g, b)
    ORDER BY nameSkuBarcode

    DIALOG barcode OBJECT b
;

DESIGN barcodeForm FROM DEFAULT {
    POSITION treeGroup.box TO THE LEFT b.box;

    treeGroup.tree {
        fillHorizontal = 0.4;
    }

    b.grid {
        defaultComponent = TRUE;
    }
}


FORM itemGroup 'Товарная группа'
    OBJECTS g=itemGroup FIXED PANEL
    PROPERTIES(g)  name, nameParentItemGroup, maxTurnoverItemGroup, minTurnoverItemGroup, namePieceNumeratorItemGroup, nameWeightNumeratorItemGroup,
                   showCaptionItemGroup, showBrandItemGroup, showTypeItemGroup, showUnitOfMeasureItemGroup, showSortItemGroup, showPackItemGroup,
                   showSpecialtyItemGroup, showSizeItemGroup, showColorItemGroup, showTasteItemGroup, showHallmarkItemGroup,
                   showArticleItemGroup, showCoolingDegreeItemGroup, showCountryItemGroup, showFormItemItemGroup,
                   showRateWasteItemGroup, showWareItemGroup, showManufacturerItemGroup
    EDIT itemGroup OBJECT g
;

addItemGroup 'Добавить' = ACTION (itemGroup) NEWSESSION {
    ADDOBJ itemGroup;
    FOR g == addedObject() DO {
        SET parentItemGroup(g) <- itemGroup AS itemGroup;
        FORM itemGroup OBJECTS g=addedObject() MODAL;
        IF formResult() == formResult.ok THEN
            EXEC apply();
    };
} TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

FORM itemGroups 'Товарные группы'
    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g), extSID(g)
    PROPERTIES(g)       addItemGroup, EDITFORM
    ORDER BY name

    OBJECTS cg=itemGroup
    PROPERTIES(cg)   canonicalNameItemGroup, maxTurnoverItemGroup, minTurnoverItemGroup, namePieceNumeratorItemGroup, nameWeightNumeratorItemGroup,
                     showCaptionItemGroup, showBrandItemGroup, showTypeItemGroup, showUnitOfMeasureItemGroup, showSortItemGroup, showPackItemGroup,
                     showSpecialtyItemGroup, showSizeItemGroup, showColorItemGroup, showTasteItemGroup, showHallmarkItemGroup,
                     showCoolingDegreeItemGroup, showCountryItemGroup, showFormItemItemGroup,
                     showRateWasteItemGroup, showWareItemGroup, showManufacturerItemGroup, delete

    ORDER BY canonicalNameItemGroup

    FILTERGROUP filters
        FILTER 'Все листья' 'F10' hasParentAndLeafItemGroup(cg, g) DEFAULT
        FILTER 'Всех потомков' 'F9' hasParentItemGroup(cg, g)
        FILTER 'Только непосредственных потомков' 'F8' inParentItemGroupItemGroup(cg, g)
;

DESIGN itemGroups FROM DEFAULT {

    POSITION treeGroups.box TO THE LEFT cg.box;

    treeGroups.tree {
        fillHorizontal = 0.5;
    }

    PROPERTY(extSID) {
        maximumCharWidth = 7;
    }
}

FORM itemGroupDialog 'Товарные группы'
    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES(g) READONLY name, extSID
    PROPERTIES(g) addItemGroup, EDITFORM
    ORDER BY name

    DIALOG itemGroup OBJECT g
;

// ----------------------------------- Ассортимент -------------------------------------------------------- //

CLASS assortment 'Ассортимент' : named;
TABLE assortment (assortment);
itemAssortment 'Товар включен в ассортимент' = DATA BOOLEAN (assortment, item);
infoAssortment 'Описание' = DATA STRING[100] (assortment) IN baseGroup;

FORM assortment 'Ассортимент'
OBJECTS a=assortment FIXED PANEL, i=item
PROPERTIES(a) name, infoAssortment
PROPERTIES(a, i) itemAssortment
PROPERTIES(i) nameAttributeItem
PROPERTIES(i) ADDSESSIONFORM, EDITSESSIONFORM, delete
FILTERGROUP assortment
    FILTER 'Только товары ассортимента' 'F10' itemAssortment(a, i) DEFAULT
EDIT assortment OBJECT a;

FORM assortments 'Ассортименты'
OBJECTS a=assortment, i=item
PROPERTIES(a) READONLY name, infoAssortment
PROPERTIES(a) ADDFORM, EDITFORM, delete
PROPERTIES(i) READONLY nameAttributeItem
FILTERS itemAssortment(a, i);

// ----------------------------------- Комиссии ---------------------------------------------------------- //

CLASS ABSTRACT committee 'Комиссия' : named;
TABLE committee (committee);

CLASS revaluationCommittee 'Комиссия переоценки' : committee;
CLASS inventoryCommittee 'Комиссия для инвентаризации' : committee;
CLASS registerCommittee 'Комиссия для реестра цен' : committee;
CLASS wastageCommittee 'Комиссия для списания отходов' : committee;

chairmanCommittee 'Председатель комиссии (ИД)' = DATA employee (committee);
nameChairmanCommittee 'Председатель комиссии' (committee) = commonName(chairmanCommittee(committee)) IN recognizeGroup;
nameOfficerChairmanCommittee 'Должность председаетеля' (committee) = nameOfficerEmployee(chairmanCommittee(committee));

inCommitteeEmployee 'Является членом комиссии' (committee, employee) = DATA BOOLEAN (committee, employee);
inCommitteeDepartmentStore 'Вкл.' (committee, departmentStore)= DATA BOOLEAN (committee, departmentStore) IN baseGroup;

includeDepartmentStoreEmployeeCommittee(departmentStore, employee, committee) = inCommitteeDepartmentStore(committee, departmentStore) AND includeDepartmentStoreEmployee(departmentStore, employee);
isIncludeEmployeeCommittee (employee, committee) = GROUP SUM 1 IF includeDepartmentStoreEmployeeCommittee(departmentStore, employee, committee) BY employee, committee;

CONSTRAINT registerCommitteeDepartmentStore(departmentStore) AND NOT inCommitteeDepartmentStore(registerCommitteeDepartmentStore(departmentStore), departmentStore)
    CHECKED BY registerCommitteeDepartmentStore MESSAGE 'Для отдела выбрана комиссия, которая для него не действует';

CONSTRAINT revaluationCommitteeDepartmentStore(departmentStore) AND NOT inCommitteeDepartmentStore(revaluationCommitteeDepartmentStore(departmentStore), departmentStore)
    CHECKED BY revaluationCommitteeDepartmentStore MESSAGE 'Для отдела выбрана комиссия, которая для него не действует';

CONSTRAINT wastageCommitteeDepartmentStore(departmentStore) AND NOT inCommitteeDepartmentStore(wastageCommitteeDepartmentStore(departmentStore), departmentStore)
    CHECKED BY wastageCommitteeDepartmentStore MESSAGE 'Для отдела выбрана комиссия, которая для него не действует';

formedManCommittee = DATA employee (registerCommittee);
checkedManCommittee = DATA employee (registerCommittee);
labeledManCommittee = DATA employee (registerCommittee);
accountantManCommittee = DATA employee (registerCommittee);
headManCommittee = DATA employee (registerCommittee);

nameFormedManCommittee 'Цены сформировал' (committee) = commonName(formedManCommittee(committee)) IN recognizeGroup;
nameCheckedManCommittee 'Реестр проверил' (committee) = commonName(checkedManCommittee(committee)) IN recognizeGroup;
nameLabeledManCommittee 'Товар промаркировал' (committee) = commonName(labeledManCommittee(committee)) IN recognizeGroup;
nameAccountantManCommittee 'Бухгалтер' (committee) = commonName(accountantManCommittee(committee)) IN recognizeGroup;
nameHeadManCommittee 'Зав. магазином' (committee) = commonName(headManCommittee(committee)) IN recognizeGroup;

CONSTRAINT chairmanCommittee(committee) AND NOT isIncludeEmployeeCommittee(chairmanCommittee(committee), committee)
    CHECKED BY chairmanCommittee MESSAGE 'Председатель комиссии не является сотрудником отдела';
CONSTRAINT formedManCommittee(committee) AND NOT isIncludeEmployeeCommittee(formedManCommittee(committee), committee)
    CHECKED BY formedManCommittee MESSAGE 'Сформировал цены не является сотрудником отдела';
CONSTRAINT checkedManCommittee(committee) AND NOT isIncludeEmployeeCommittee(checkedManCommittee(committee), committee)
    CHECKED BY checkedManCommittee MESSAGE 'Реестр проверил не является сотрудником отдела';
CONSTRAINT labeledManCommittee(committee) AND NOT isIncludeEmployeeCommittee(labeledManCommittee(committee), committee)
    CHECKED BY labeledManCommittee MESSAGE 'Товар промаркировал не является сотрудником отдела';
CONSTRAINT accountantManCommittee(committee) AND NOT isIncludeEmployeeCommittee(accountantManCommittee(committee), committee)
    CHECKED BY accountantManCommittee MESSAGE 'Бухгалтер не является сотрудником отдела';
CONSTRAINT headManCommittee(committee) AND NOT isIncludeEmployeeCommittee(headManCommittee(committee), committee)
    CHECKED BY headManCommittee MESSAGE 'Зав. магазином не является сотрудником отдела';

CONSTRAINT inCommitteeEmployee(committee, employee) AND NOT isIncludeEmployeeCommittee(employee, committee)
    CHECKED MESSAGE 'Член комиссии не является сотрудником отделов';

castOfficerEmployeeToString40 =
     FORMULA STRING[40] ' CAST($1 AS TEXT) || \' \' || CAST($2 AS TEXT)';
nameOfficerAndNameEmployee 'Должность ФИО' (employee) = castOfficerEmployeeToString40(nameOfficerEmployee(employee), commonName(employee));

nameOfficerEmployeeCommittee 'Члены комиссии' (committee) =
     GROUP CONCAT nameOfficerAndNameEmployee(employee) IF inCommitteeEmployee(committee, employee), ', '
     BY committee MINCHARWIDTH 50 PREFCHARWIDTH 50;

nameEmployeeCommittee 'Члены комиссии' (committee) =
     GROUP CONCAT commonName(employee) IF inCommitteeEmployee(committee, employee), ', '
     BY committee MINCHARWIDTH 50 PREFCHARWIDTH 50;

nameDepartmentByCommittee 'Отделы' (committee) =
     GROUP CONCAT name(departmentStore) IF inCommitteeDepartmentStore(committee, departmentStore), ', '
     BY committee MINCHARWIDTH 50 PREFCHARWIDTH 50;


FORM registerCommittee 'Комиссия для реестра цен'
    OBJECTS c=registerCommittee FIXED PANEL
    PROPERTIES(c)      name, nameFormedManCommittee, nameCheckedManCommittee,
                       nameLabeledManCommittee, nameAccountantManCommittee, nameHeadManCommittee

    TREE treeStore a=STRING[3], t=tradingNetwork, st=storeType, s=store
    PROPERTIES         READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS            stringEqualsAll(a), inTradingNetworkStoreType (t, st), inStoreTypeStore(st, s)

    OBJECTS dep=departmentStore
    PROPERTIES(dep)    READONLY depName = name
    PROPERTIES(c, dep) inCommitteeDepartmentStore, isRegisterCommitteeDepartmentStore
    FILTERS            inTradingNetworkStoreTypeStoreDepartment(t, st, s, dep)
    ORDER BY depName

    FILTERGROUP filters5
        FILTER 'Показывать отделы только для данной комиссии' 'F9' inCommitteeDepartmentStore(c, dep)

    EDIT registerCommittee OBJECT c
;

DESIGN registerCommittee FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        childConstraints = TO THE BOTTOM;

        NEW caseOne AFTER c.box {
            childConstraints = TO THE RIGHT;
            title = 'Отделы, для которых действуют комиссии';

            ADD treeStore.tree {
                fillHorizontal = 1;
            }

            ADD dep.box{
                fillHorizontal = 2;
            }
        }

        NEW oneCase AFTER caseOne{
            title = 'Состав комиссии';
            fillHorizontal = 3;
            childConstraints = TO THE BOTTOM;
            ADD PROPERTY (nameFormedManCommittee);
            ADD PROPERTY (nameCheckedManCommittee);
            ADD PROPERTY (nameLabeledManCommittee);
            ADD PROPERTY (nameAccountantManCommittee);
            ADD PROPERTY (nameHeadManCommittee);
        }

    }
}


FORM revaluationCommittee 'Комиссия переоценки'
    OBJECTS c=revaluationCommittee FIXED PANEL
    PROPERTIES(c)      name, nameChairmanCommittee

    TREE treeStore a=STRING[3], t=tradingNetwork, st=storeType, s=store
    PROPERTIES         READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS            stringEqualsAll(a), inTradingNetworkStoreType (t, st), inStoreTypeStore(st, s)

    OBJECTS dep=departmentStore
    PROPERTIES(dep)    READONLY depName = name
    PROPERTIES(c, dep) inCommitteeDepartmentStore, isRevaluationCommitteeDepartmentStore
    FILTERS            inTradingNetworkStoreTypeStoreDepartment(t, st, s, dep)
    ORDER BY depName


    OBJECTS e=employee
    PROPERTIES(e)      READONLY name, userFirstName, userLastName, nameOfficerEmployee
    PROPERTIES(e)      ADDSESSIONFORM, EDITSESSIONFORM, delete

    PROPERTIES(c, e)   inCommitteeEmployee
    FILTERS            isIncludeEmployeeCommittee (e, c)
    FILTERGROUP filters6
        FILTER 'Показывать только членов комиссии' 'F10' inCommitteeEmployee(c, e)

    FILTERGROUP filters5
        FILTER 'Показывать отделы только для данной комиссии' 'F9' inCommitteeDepartmentStore(c, dep)

    EDIT revaluationCommittee OBJECT c
;

DESIGN revaluationCommittee FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW OneCase BEFORE e.box {
            ADD PROPERTY (nameChairmanCommittee);
        }

        NEW caseOne BEFORE OneCase {
            childConstraints = TO THE RIGHT;
            title = 'Отделы, для которых действуют комиссии';

            ADD treeStore.tree {
                fillHorizontal = 1;
            }

            ADD dep.box {
                fillHorizontal = 2;
            }
        };
    }
}



FORM inventoryCommittee 'Комиссия для инвентаризации'
    OBJECTS c=inventoryCommittee FIXED PANEL
    PROPERTIES(c)      name, nameChairmanCommittee

    TREE treeStore a=STRING[3], t=tradingNetwork, st=storeType, s=store
    PROPERTIES         READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS            stringEqualsAll(a), inTradingNetworkStoreType (t, st), inStoreTypeStore(st, s)

    OBJECTS dep=departmentStore
    PROPERTIES(dep)    READONLY depName = name
    PROPERTIES(c, dep) inCommitteeDepartmentStore
    FILTERS            inTradingNetworkStoreTypeStoreDepartment(t, st, s, dep)
    ORDER BY depName

    OBJECTS e=employee
    PROPERTIES(e)      READONLY name, userFirstName, userLastName, nameOfficerEmployee
    PROPERTIES(e)      ADDSESSIONFORM, EDITSESSIONFORM, delete

    PROPERTIES(c, e)   inCommitteeEmployee
    FILTERS            isIncludeEmployeeCommittee (e, c)
    FILTERGROUP filters6
        FILTER 'Показывать только членов комиссии' 'F10' inCommitteeEmployee(c, e)

    FILTERGROUP filters5
        FILTER 'Показывать отделы только для данной комиссии' 'F9' inCommitteeDepartmentStore(c, dep)

    EDIT inventoryCommittee OBJECT c

;

DESIGN inventoryCommittee FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW OneCase BEFORE e.box {
            ADD PROPERTY (nameChairmanCommittee);
        }

        NEW caseOne BEFORE OneCase {
            childConstraints = TO THE RIGHT;
            title = 'Отделы, для которых действуют комиссии';

            ADD treeStore.tree {
                fillHorizontal = 1;
            }

            ADD dep.box {
                fillHorizontal = 2;
            }
        };
    }
}

FORM wastageCommittee 'Комиссия для списания отходов'
    OBJECTS c=wastageCommittee FIXED PANEL
    PROPERTIES(c)      name//, nameChairmanCommittee

    TREE treeStore a=STRING[3], t=tradingNetwork, st=storeType, s=store
    PROPERTIES         READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS            stringEqualsAll(a), inTradingNetworkStoreType (t, st), inStoreTypeStore(st, s)

    OBJECTS dep=departmentStore
    PROPERTIES(dep)    READONLY depName = name
    PROPERTIES(c, dep) inCommitteeDepartmentStore, isWastageCommitteeDepartmentStore
    FILTERS            inTradingNetworkStoreTypeStoreDepartment(t, st, s, dep)
    ORDER BY depName


    OBJECTS e=employee
    PROPERTIES(e)      READONLY name, userFirstName, userLastName, nameOfficerEmployee
    PROPERTIES(e)      ADDSESSIONFORM, EDITSESSIONFORM, delete

    PROPERTIES(c, e)   inCommitteeEmployee
    FILTERS            isIncludeEmployeeCommittee (e, c)
    FILTERGROUP filters6
        FILTER 'Показывать только членов комиссии' 'F10' inCommitteeEmployee(c, e)

    FILTERGROUP filters5
        FILTER 'Показывать отделы только для данной комиссии' 'F9' inCommitteeDepartmentStore(c, dep)

    EDIT wastageCommittee OBJECT c
;

DESIGN wastageCommittee FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

//        NEW OneCase BEFORE e.box {
//            ADD PROPERTY (nameChairmanCommittee);
//        }

        NEW caseOne BEFORE e.box {
            childConstraints = TO THE RIGHT;
            title = 'Отделы, для которых действуют комиссии';

            ADD treeStore.tree {
                fillHorizontal = 1;
            }

            ADD dep.box {
                fillHorizontal = 2;
            }
        };
    }
}

FORM registerCommitteeDialog 'Комиссии для реестра цен'
    OBJECTS r=registerCommittee
    PROPERTIES(r)      READONLY name, nameDepartmentByCommittee, nameFormedManCommittee, nameCheckedManCommittee, nameLabeledManCommittee,
                       nameAccountantManCommittee, nameHeadManCommittee
    PROPERTIES(r)      ADDFORM, EDITFORM

    DIALOG registerCommittee OBJECT r
;

FORM inventoryCommitteeDialog 'Комиссии для инвентаризации'
    OBJECTS ic=inventoryCommittee
    PROPERTIES(ic)      READONLY name, nameDepartmentByCommittee, nameEmployeeCommittee, nameChairmanCommittee
    PROPERTIES(ic)      ADDFORM, EDITFORM

    DIALOG inventoryCommittee OBJECT ic
;

FORM revaluationCommitteeDialog 'Комиссии переоценки'
    OBJECTS rc=revaluationCommittee
    PROPERTIES(rc)      READONLY name, nameDepartmentByCommittee, nameEmployeeCommittee, nameChairmanCommittee
    PROPERTIES(rc)      ADDFORM, EDITFORM

    DIALOG revaluationCommittee OBJECT rc
;

FORM wastageCommitteeDialog 'Комиссии для списания отходов'
    OBJECTS wc=wastageCommittee
    PROPERTIES(wc)      READONLY name, nameDepartmentByCommittee, nameEmployeeCommittee
    PROPERTIES(wc)      ADDFORM, EDITFORM

    DIALOG wastageCommittee OBJECT wc
;
// ----------------------------------- Банк ------------------------------------------- //

GROUP banksGroup 'Информация о банке' : baseGroup;

CLASS bank 'Банк' : named, externalObject;
TABLE bank (bank);
TABLE bankDate (bank, DATE);

MFOBank 'Код МФО' = DATA STRING[9] (bank) IN banksGroup;
departmentBank 'Отдел банка' = DATA STRING[100] (bank) IN banksGroup;
CBUBank 'ЦБУ' = DATA STRING[3] (bank) IN banksGroup;
infoBank 'Дополнительные сведения' = DATA STRING[100] (bank) IN banksGroup;

@metaCodeObjectDateProperty(addressBank, bank, 'Адрес банка', STRING[150], banksGroup);

FORM bank 'Банк'
OBJECTS b=bank FIXED PANEL
PROPERTIES(b)  name, addressBank, showFormAddressBank, MFOBank, departmentBank, CBUBank, infoBank
EDIT bank OBJECT b;

FORM banks 'Банки'
OBJECTS b=bank
PROPERTIES(b) READONLY name, addressBank, MFOBank, departmentBank, CBUBank, infoBank
PROPERTIES(b) ADDFORM, EDITFORM, delete;

// ----------------------------------- Расчетный счет ------------------------------------------ //

GROUP accountGroup 'Банковская информация' : baseGroup;

CLASS account 'Расчетный счет';
TABLE account (account);

bankAccount 'Банк (ИД)' = DATA bank (account) IN idGroup;

dataAccount 'Номер расчетного счета'  = DATA STRING[13] (account) IN accountGroup FIXEDCHARWIDTH 13;
dataAccountToAccount 'Расчетный счет по номеру' (string) = GROUP UNIQUE account BY dataAccount (account) WHERE account IS account;
nameBankAccount 'Наименование банка' (account) = name(bankAccount(account)) IN accountGroup;
addressBankAccount 'Адрес банка' (account) = addressBank(bankAccount(account)) IN accountGroup;
MFOBankAccount 'Код МФО банка' (account) = MFOBank(bankAccount(account)) IN accountGroup;
departmentBankAccount 'Отдел банка' (account) = departmentBank(bankAccount(account)) IN accountGroup;
CBUBankAccount 'ЦБУ банка' (account) = CBUBank(bankAccount(account)) IN accountGroup;
noteAccount 'Примечание'  = DATA STRING[50] (account) IN accountGroup;

// ----------------------------------- Форма собственности ------------------------------------------ //
CLASS ownership 'Форма собственности' : named;
TABLE ownership (ownership);
shortNameOwnership 'Cокращенное название' = DATA STRING[10] (ownership) IN baseGroup FIXEDCHARWIDTH 6;
shortNameToOwnership (string) = GROUP UNIQUE ownership BY shortNameOwnership (ownership) WHERE ownership IS ownership;

FORM ownership 'Форма собственности'
OBJECTS o=ownership FIXED PANEL
PROPERTIES(o) name, shortNameOwnership;

// ----------------------------------- Лицензия ------------------------------------------ //
GROUP licenseGroup 'Лицензионная информация' : baseGroup;
CLASS license 'Лицензия';
TABLE license (license);

dataLicense 'Номер лицензии' = DATA STRING[100] (license) IN licenseGroup;
dateFromLicense 'Действует с ' = DATA DATE (license) IN licenseGroup;
dateToLicense 'Действует по ' = DATA DATE (license) IN licenseGroup;

//tabaccoLicense 'Табачная' = DATA BOOLEAN  (license) IN licensGroup;

// ----------------------------------- Юридическое лицо ------------------------------------------ //

GROUP lawGroup 'Юридическая информация' : publicGroup;
GROUP contactGroup 'Контактная информация' : publicGroup;
GROUP docGroup 'Для договора' : publicGroup;

ownershipLegalEntity 'Форма собственности (ИД)' = DATA ownership (legalEntity) IN idGroup;

nameOwnershipLegalEntity 'Форма собственности' = name(ownershipLegalEntity(legalEntity)) IN lawGroup;
shortNameOwnershipLegalEntity 'Форма собственности (сокр.)' = shortNameOwnership(ownershipLegalEntity(legalEntity)) IN baseGroup;
fullNameLegalEntity 'Наименование для накладных' = DATA STRING[200] (legalEntity) IN baseGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;

//UNPLegalEntityToLegalEntity (UNPLegalEntity) = GROUP UNIQUE legalEntity BY UNPLegalEntity(legalEntity);
OKPOLegalEntity 'Код по ОКПО' = DATA STRING[20] (legalEntity) IN docGroup MINCHARWIDTH 15 PREFCHARWIDTH 15;     // подставить нужное потом значение
OKYLPLegalEntity 'Код ОКЮЛП' = DATA STRING[20] (legalEntity) IN docGroup MINCHARWIDTH 15 PREFCHARWIDTH 15;
emailLegalEntity 'e-mail' = DATA STRING[100] (legalEntity) IN contactGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
siteLegalEntity 'Сайт' = DATA STRING[100] (legalEntity) IN contactGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
contactsLegalEntity 'Дополнительная информация' = DATA STRING[300] (legalEntity) IN contactGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
residentLegalEntity 'Резидент РБ' = DATA BOOLEAN (legalEntity) IN lawGroup;
manufacturerLegalEntity 'Производитель' = DATA BOOLEAN (legalEntity) IN lawGroup;

legalEntityAccount 'Ю.Л. (ИД)' = DATA legalEntity (account) IN idGroup;
userAccountLegalEntity 'Р/сч. (ИД)' = DATA account (legalEntity) IN idGroup;
defaultAccountLegalEntity(legalEntity) = GROUP MAX account AS account BY legalEntityAccount(account);
overrideAccountLegalEntity 'Основной р/сч.' (legalEntity) = UNION OVERRIDE defaultAccountLegalEntity(legalEntity), userAccountLegalEntity(legalEntity);
dataOverrideAccountLegalEntity 'Основной р/сч.' (legalEntity) = dataAccount(overrideAccountLegalEntity(legalEntity)) IN lawGroup;

CONSTRAINT legalEntity != legalEntityAccount(userAccountLegalEntity(legalEntity)) CHECKED MESSAGE 'ошибка: Р/сч. по умолчанию должен соответствовать р/сч. Ю.Л.';
equalsLegalEntityAccount 'Основной р/сч.' (legalEntity, account) = userAccountLegalEntity(legalEntity) == account;

legalEntityLicense 'ЮЛ (ИД)' = DATA legalEntity (license) IN idGroup;

//userLicenseLegalEntity 'ЮЛ (ИД)' = DATA license (legalEntity) IN idGroup;
//actingLicense 'Действующая, м/у датами' (license) = license AS license IF dateFromLicense(license) <= currentDate() AND NOT dateToLicense(license) < currentDate();
actingLicenseDate 'Действующая между датами' (license, date) = license AS license IF dateFromLicense(license) <= date AND NOT dateToLicense(license) < date AND date AS DATE;
actingLicenseLegalEntityDate 'Действующая на дату' (legalEntity, date) = GROUP MAX actingLicenseDate(license, date) BY legalEntityLicense(license), date;
actingLicenseLegalEntity 'Действующая' (legalEntity) = actingLicenseLegalEntityDate(legalEntity, currentDate());
dataActingLicenseLegalEntity 'Действующая лицензия' (legalEntity) = dataLicense(actingLicenseLegalEntity(legalEntity)) IN lawGroup;

//actingLicenseLegalEntity (legalEntity) = GROUP MAX actingLicense(license) BY legalEntityLicense(license);        // сгруппировали по ID
//overrideLicenseLegalEntity 'Действующая' (legalEntity) = UNION OVERRIDE defaultLicenseLegalEntity(legalEntity) IF dateFromLicense(defaultLicenseLegalEntity(legalEntity)) < currentDate() AND dateToLicense(defaultLicenseLegalEntity(legalEntity)) > currentDate(),
//                                                                        userLicenseLegalEntity(legalEntity) IF dateFromLicense(userLicenseLegalEntity(legalEntity)) < currentDate() AND dateToLicense(userLicenseLegalEntity(legalEntity)) > currentDate();
                        // работает как то не так, надо проверить //
//CONSTRAINT legalEntity != legalEntityLicense(userLicenseLegalEntity(legalEntity)) CHECKED MESSAGE 'ошибка: Лицензия по умолчанию должен соответствовать лицензии Ю.Л.';
//CONSTRAINT  dateFromLicense(overrideLicenseLegalEntity(legalEntity)) > currentDate() MESSAGE 'ошибка: действие лицензии еще не началось';
//CONSTRAINT  dateToLicense(overrideLicenseLegalEntity(legalEntity)) < currentDate() MESSAGE 'ошибка: действие выбранной лицензии уже окончилось';
//equalsLegalEntityLicense 'Действующая' (legalEntity, license) = userLicenseLegalEntity(legalEntity) == license IN lawGroup;

// ----------------------------------- Юридическое лицо-дата ------------------------------------------ //

TABLE legalEntityDate (legalEntity, DATE);

@metaCodeObjectDateProperty(addressLegalEntity, legalEntity, 'Юридический адрес', STRING[150], baseGroup);
@metaCodeObjectDateProperty(managerLegalEntity, legalEntity, 'Руководитель', STRING[100], lawGroup);
@metaCodeObjectDateProperty(accountantLegalEntity, legalEntity, 'Главный бухгалтер', STRING[100], lawGroup);
@metaCodeObjectDateProperty(postAddressLegalEntity, legalEntity, 'Почтовый адрес', STRING[150], lawGroup);
@metaCodeObjectDateProperty(phoneLegalEntity, legalEntity, 'Телефон/факс', STRING[100], baseGroup);

// ----------------------------------- Компания отдела ------------------------------------- //

companyDepartmentStore (departmentStore) = companyStore(storeDepartmentStore(departmentStore)) PERSISTENT;
nameCompanyDepartmentStore 'Компания' (departmentStore) = name(companyDepartmentStore(departmentStore));
UNPDepartmentStore 'УНП' (departmentStore) = UNPLegalEntity(companyDepartmentStore(departmentStore));

// ----------------------------------- Договор ------------------------------------------ //

GROUP contractGroup 'Общая информация' : baseGroup;

CLASS ABSTRACT contract 'Договор';
TABLE contract (contract);
TABLE contractDate (contract, DATE);
CLASS contractProvider 'Договор с поставщиком' : contract;

CLASS STATIC contractType 'Тип договора'
{
    sale 'договор купли-продажи',
    commission 'договор комиссии'
};

CLASS STATIC contractForm 'Порядок оплаты'
{
    prepayment 'с отсрочкой платежа',
    implement 'По факту реализации',
    instruction 'Платежное поручение',
    requirement 'Платежное требование'
};

numberContract 'Номер договора' = DATA STRING[30] (contract) IN contractGroup;
typeContract(contract) = DATA contractType (contract) IN contractGroup;
nameTypeContract 'Тип договора' (contract) = name(UNION OVERRIDE contractType.sale IF contract IS contract,
                                                                 typeContract(contract)) IN contractGroup;
dateFromContract 'Дата начала договора' = DATA DATE (contract) IN contractGroup;
dateToContract 'Дата окончания договора' = DATA DATE (contract) IN contractGroup;
isOperatingContract 'Действуюший договор?' (contract, date) =
    (dateFromContract(contract) < (date AS DATE)) AND (dateToContract(contract) > (date AS DATE));
currencyContract 'Валюта взаиморасчетов' = DATA STRING[20] (contract) IN contractGroup; // может и не надо   или справочником
warnContract 'За сколько дней предупредить об окончании' = DATA INTEGER (contract) IN contractGroup;
banContract 'За сколько дней запретить закупку товара' = DATA INTEGER (contract) IN contractGroup;
//delayContract 'Отсрочка платежа, дней' = DATA INTEGER (contract) IN contractGroup;
requestContract 'Форма оплаты: Платежное требование' = DATA BOOLEAN (contract) IN contractGroup;
noteContract 'Примечание' = DATA STRING[500] (contract) IN contractGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;

@metaCodeNameObjectDateProperty(formContract, contract, 'Порядок оплаты по договору', contractForm, contractGroup);
CONSTRAINT contract IS contract AND NOT formContract(contract)  MESSAGE 'ошибка: Не выбран порядок оплаты по договору';
@metaCodeObjectDateProperty(delayContract, contract, 'Отсрочка платежа(кален. дней),при "-" предоплата', INTEGER, contractGroup);


// ----------------------------------- Поставщик ------------------------------------------ //

GROUP supplierGroup 'Информация о поставщике' : publicGroup;

CLASS supplier 'Поставщик' : legalEntity;
TABLE supplier (supplier);

CLASS company 'Компания' : legalEntity;
TABLE company (company);

CLASS customer 'Покупатель' : legalEntity;
TABLE customer (customer);

companyContract 'Организация (ИД)' = DATA company (contract) IN idGroup AUTOSET;
supplierContract 'Поставщик (ИД)' = DATA supplier (contract) IN idGroup AUTOSET;
userContractSupplier 'Контракт (ИД)' = DATA contract (supplier) IN idGroup;
//companySupplier 'Организация (ИД)' = DATA company (supplier) IN idGroup;

countContracts 'Кол-во контрактов для отдел-поставщик' (supplier, departmentStore) =
    GROUP SUM 1 IF (companyContract(contract) == companyDepartmentStore(departmentStore)
                    AND supplierContract(contract) == supplier)
    BY supplier, departmentStore;

payerSupplier 'Плательщик НДС' = DATA BOOLEAN (supplier) IN supplierGroup;
scheduleSupplier 'Разрешить доп.заказ товаров вне графика' = DATA BOOLEAN (supplier) IN supplierGroup;
surePercentSupplier 'Обязательный % заказанных товаров в прих. накладной' = DATA INTEGER (supplier) IN supplierGroup;
allowablePercentSupplier 'Допустимый % изменения цен 1го поставщика' = DATA INTEGER (supplier) IN supplierGroup;
afterDaysSupplier 'Максимальное число дней до поставки после заказа' = DATA INTEGER (supplier) IN supplierGroup;
forHoursSupplier 'За сколько часов до поставки закрыть заказ' = DATA INTEGER (supplier) IN supplierGroup;
limitSupplier 'Кредитный лимит' = DATA INTEGER (supplier) IN docGroup;
prioritySupplier 'Приоритет оплаты (1 - в первую очередь)' = DATA INTEGER (supplier) IN docGroup;
signsSupplier 'Число знаков после запятой для строки накладной' = DATA INTEGER (supplier) IN supplierGroup;
marksSupplier 'Число знаков после зап.в сумме к оплате по накладной' = DATA INTEGER (supplier) IN supplierGroup;
periodicitySupply 'Переодичность поставок, дней' = DATA INTEGER (supplier) IN supplierGroup;

returnLossSupplier '% потерь при возврате' (supplier) = DATA NUMERIC[8,3] (supplier) IN supplierGroup;

emailOrderSupplierDepartmentStore 'e-mail для передачи заказа' = DATA STRING[100] (supplier, departmentStore)IN supplierGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
contactSupplierDepartmentStore 'Контактная информация' = DATA STRING[500] (supplier, departmentStore)IN supplierGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
controlSupplierDepartmentStore(supplier, departmentStore) = DATA yesNo (supplier, departmentStore)IN idGroup;

nameControlSupplierDepartmentStore 'Контролировать ассортимент поставщика, ДА/НЕТ' (supplier, departmentStore) = name(UNION OVERRIDE
    yesNo.no IF supplier IS supplier AND departmentStore IS departmentStore,
    controlSupplierDepartmentStore(supplier, departmentStore)) IN supplierGroup;

@metaCodeNameYesNoDoubleObjectDateProperty(sureSupplierDepartmentStore, supplier, departmentStore, 'Обязателен заказ поставщику, ДА/НЕТ', yesNo, orderGroup);

overrideSupplierDepartmentStoreDate(supplier, departmentStore, date) = UNION OVERRIDE
    (TRUE IF UNION OVERRIDE emailOrderSupplierDepartmentStore(supplier, departmentStore) AND date IS DATE, contactSupplierDepartmentStore(supplier, departmentStore) AND date IS DATE),
    controlSupplierDepartmentStore(supplier, departmentStore) == yesNo.yes AND date IS DATE,
    sureSupplierDepartmentStoreVal(supplier, departmentStore, date) == yesNo.yes;

isYesControlSupplierDepartmentStore(supplier, departmentStore) = controlSupplierDepartmentStore(supplier, departmentStore) == yesNo.yes;
isYesSureSupplierDepartmentStoreVal(supplier, departmentStore, date) = sureSupplierDepartmentStoreVal(supplier, departmentStore, date) == yesNo.yes;

//numberContractSupplier 'Договор по умолчанию' (supplier) = numberContract(userContractSupplier(supplier));
defaultContractSupplier(supplier) = GROUP MAX contract AS contract BY supplierContract(contract);
//dataDefaultContractSupplier(supplier) = numberContract(defaultContractSupplier(supplier));

overrideContractSupplier 'Основной договор' (supplier) = UNION OVERRIDE defaultContractSupplier(supplier), userContractSupplier(supplier);
numberOverrideContractSupplier 'Основной договор' (supplier) = numberContract(overrideContractSupplier(supplier)) IN lawGroup;
CONSTRAINT supplier != supplierContract(userContractSupplier(supplier)) CHECKED MESSAGE 'ошибка: Договор по умолчанию для поставщика должен соответствовать договорам поставщика';
equalsSupplierContract 'Основной договор' (supplier, contract) = userContractSupplier(supplier) == contract;

inSupplierContract(supplier, contract) = supplierContract(contract) == supplier;
inSupplierAccount(supplier, account) = legalEntityAccount(account) == supplier;
inSupplierLicense(supplier, license) = legalEntityLicense(license) == supplier;

inCompanyContract(company, contract) = companyContract(contract) == company;
inCompanyAccount(company, account) = legalEntityAccount(account) == company;
inCustomerAccount(customer, account) = legalEntityAccount(account) == customer;

isInSupplierContractCompany(supplier, contract, company)  = inSupplierContract(supplier, contract) AND inCompanyContract(company, contract);
isInCompanySupplier (company, supplier) = GROUP SUM 1 IF isInSupplierContractCompany(supplier, contract, company) BY company, supplier;

nameSupplierContract 'Поставщик' (contract) = name(supplierContract(contract)) MAXCHARWIDTH 30 PREFCHARWIDTH 30;
nameCompanyContract 'Компания' (contract) = name(companyContract(contract)) MAXCHARWIDTH 30 PREFCHARWIDTH 30;

userContractCompanySupplier 'Контракт (ИД)' = DATA contract (company, supplier) IN idGroup;
//numberContractCompanySupplier 'Договор по умолчанию' (company, supplier) = numberContract(userContractCompany(company));
actingContract(contract) = contract IF dateFromContract(contract) <= currentDate() AND NOT dateToContract(contract) < currentDate();
actingContractCompanySupplier(company, supplier) = GROUP MAX actingContract(contract) BY companyContract(contract), supplierContract(contract);

overrideContractCompanySupplier 'Основной договор' (company, supplier) = UNION OVERRIDE actingContractCompanySupplier(company, supplier), userContractCompanySupplier(company, supplier);
numberOverrideContractCompanySupplier 'Основной договор' (company, supplier) = numberContract(overrideContractCompanySupplier(company, supplier)) IN lawGroup;
CONSTRAINT supplier != supplierContract(userContractCompanySupplier(company, supplier)) CHECKED MESSAGE 'ошибка: Договор по умолчанию для поставщика должен соответствовать договорам поставщика';
CONSTRAINT company != companyContract(userContractCompanySupplier(company, supplier)) CHECKED MESSAGE 'ошибка: Договор по умолчанию для компании должен соответствовать договорам компании';
equalsCompanySupplierContract 'Основной договор' (company, supplier, contract) = userContractCompanySupplier(company, supplier) == contract;

FORM contract 'Договор'
    OBJECTS c=contract FIXED PANEL
    PROPERTIES(c) numberContract, nameCompanyContract, nameSupplierContract, nameTypeContract, nameFormContract, showFormNameFormContract,
                   delayContract, showFormDelayContract, dateFromContract, dateToContract, currencyContract, warnContract, banContract,
                   requestContract, noteContract

    EDIT contract OBJECT c
    EDIT contractProvider OBJECT c
;

DESIGN contract FROM DEFAULT {
    main{
        c.box {
            childConstraints = TO THE BOTTOM;

            NEW oneCase {
                childConstraints = TO THE RIGHT;
                title = 'Контрагенты';
                ADD PROPERTY(numberContract);
                ADD PROPERTY(nameCompanyContract);
                ADD PROPERTY(nameSupplierContract);
            }

            NEW twoCase{
                title = 'Даты';
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(dateFromContract);
                ADD PROPERTY(dateToContract);
                ADD PROPERTY(currencyContract);
            }
            ADD c.contractGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    }
}

FORM contracts 'Договоры'
    OBJECTS c=contract
    PROPERTIES(c) READONLY numberContract, nameCompanyContract, nameSupplierContract,
                   nameTypeContract, dateFromContract, dateToContract

    PROPERTIES(c) ADDFORM, EDITFORM, delete
    ORDER BY nameCompanyContract, nameSupplierContract

    DIALOG contract OBJECT c
;

FORM supplier 'Поставщик'
    TREE treeStore y=STRING[3], t=tradingNetwork, st=storeType, so=store
    PROPERTIES READONLY OBJVALUE(y), name(t), name(st), name(so)

    OBJECTS s=supplier FIXED PANEL, dt=DATE FIXED PANEL
    PROPERTIES(s) name, fullNameLegalEntity, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity, addressLegalEntity, showFormAddressLegalEntity,
                  postAddressLegalEntity, showFormPostAddressLegalEntity, managerLegalEntity, showFormManagerLegalEntity,
                  accountantLegalEntity, showFormAccountantLegalEntity, phoneLegalEntity, showFormPhoneLegalEntity,
                  UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity, emailLegalEntity, siteLegalEntity, payerSupplier,
                  residentLegalEntity, manufacturerLegalEntity, surePercentSupplier, allowablePercentSupplier,
                  afterDaysSupplier, periodicitySupply, forHoursSupplier, limitSupplier, prioritySupplier, signsSupplier,
                  returnLossSupplier, marksSupplier //dataActingLicenseLegalEntity, numberOverrideContractSupplier, dataOverrideAccountLegalEntity

    OBJECTS a=account
    PROPERTIES(a) dataAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount, MFOBankAccount, noteAccount, ADDOBJ, delete

    OBJECTS co=company
    PROPERTIES(co) name

    OBJECTS c=contractProvider
    PROPERTIES(c)  READONLY numberContract, nameCompanyContract, nameFormContract, nameTypeContract, dateFromContract,
                   dateToContract, currencyContract, noteContract, delayContract
    PROPERTIES(c)  ADDFORM, EDITFORM, delete

    OBJECTS l=license
    PROPERTIES(l) dataLicense, dateFromLicense, dateToLicense, ADDOBJ, delete   //        tabaccoLicense

    OBJECTS d=departmentStore
    PROPERTIES(d) nameStoreDepartmentStore, name

    PROPERTIES (dt) OBJVALUE BACKGROUND dateDiffersCurrent(dt)

    PROPERTIES(s, d) emailOrderSupplierDepartmentStore, contactSupplierDepartmentStore, nameControlSupplierDepartmentStore
    PROPERTIES       nameSureSupplierDepartmentStoreOver(s, d, dt) BACKGROUND nameSureSupplierDepartmentStoreDate(s, d, dt), showFormNameSureSupplierDepartmentStoreOver(s, d)

//    PROPERTIES(s,c) equalsSupplierContract
    PROPERTIES(s,a) equalsLegalEntityAccount
    //PROPERTIES(s,l) equalsLegalEntityLicense

    PROPERTIES(co, s)    numberOverrideContractCompanySupplier
    PROPERTIES(co, s, c) equalsCompanySupplierContract

    FILTERS stringEqualsAll(y),
        inTradingNetworkStoreType (t, st),
        inStoreTypeStore (st, so),
        inTradingNetworkStoreTypeStoreDepartment(t, st, so, d),
        inSupplierContract(s, c),
        inSupplierAccount(s, a),
        inCompanyContract(co, c),
        inSupplierLicense(s, l)
    FILTERGROUP filters1
        FILTER 'Показывать только поставщиков, с которыми есть договор' 'F5' isInCompanySupplier(co, s) DEFAULT

    FILTERGROUP filters9
        FILTER 'Показывать только с заполненными полями' 'F10' overrideSupplierDepartmentStoreDate(s, d, dt)
        FILTER 'Показывать только с заполненным полем: e-mail' 'F9' emailOrderSupplierDepartmentStore(s, d)
        FILTER 'Показывать только с заполненным полем: контактная инф-ия' 'F8' contactSupplierDepartmentStore(s, d)
        FILTER 'Показывать только с заполненным полем: контролировать пост-ка' 'F7' isYesControlSupplierDepartmentStore(s, d)
        FILTER 'Показывать только с заполненным полем: обязателен заказ поставщику' 'F6' isYesSureSupplierDepartmentStoreVal(s, d, dt)

    EDIT supplier OBJECT s
;

DESIGN supplier FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        s.box {
            childConstraints = TO THE RIGHT;

            NEW oneCase {
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(name(s));
                ADD PROPERTY(fullNameLegalEntity(s));
                ADD PROPERTY(addressLegalEntity(s));
                ADD PROPERTY(phoneLegalEntity(s));
                ADD PROPERTY(UNPLegalEntity(s));
                ADD s.contactGroup;
                ADD s.lawGroup {
                    ADD PROPERTY(shortNameOwnershipLegalEntity(s));
                };
            };

            NEW twoCase{
                childConstraints = TO THE BOTTOM;
                ADD s.docGroup;
                ADD s.supplierGroup;
            }
        }

        NEW prop.box BEFORE functions.box{
            type = TABBED;
            ADD a.box;
            NEW firstCase {
                title = 'Компания-договор';
                childConstraints = TO THE RIGHT;
                ADD co.box;
                ADD c.box;
            }

            ADD l.box;

            ADD d.box {

                ADD dt.box BEFORE d.grid.box;
                ADD treeStore.box BEFORE d.grid.box;
                POSITION treeStore.box TO THE LEFT d.grid.box;
                d.grid.box {
                fillHorizontal = 3;
                };
            }

        }
    }
}

FORM suppliers 'Поставщики'
    OBJECTS s=supplier
    PROPERTIES(s) READONLY name, fullNameLegalEntity, shortNameOwnershipLegalEntity, UNPLegalEntity, dataOverrideAccountLegalEntity, addressLegalEntity, phoneLegalEntity
    PROPERTIES(s) ADDFORM, EDITFORM, delete
;

FORM company 'Компания'
    OBJECTS co=company FIXED PANEL
    PROPERTIES(co) name, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity, fullNameLegalEntity, addressLegalEntity,
                   showFormAddressLegalEntity, postAddressLegalEntity, showFormPostAddressLegalEntity, managerLegalEntity,
                   showFormManagerLegalEntity, accountantLegalEntity, showFormAccountantLegalEntity, phoneLegalEntity, showFormPhoneLegalEntity,
                   UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity, emailLegalEntity, siteLegalEntity

    OBJECTS a=account
    PROPERTIES(a)  dataAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount, MFOBankAccount, noteAccount, ADDOBJ, delete

    OBJECTS s=supplier
    PROPERTIES(s) name

    OBJECTS c=contractProvider
    PROPERTIES(c)  READONLY numberContract, nameSupplierContract, nameFormContract, nameTypeContract, dateFromContract,
                   dateToContract, currencyContract, noteContract, delayContract
    PROPERTIES(c)  ADDFORM, EDITFORM, delete

    PROPERTIES(co, a) equalsLegalEntityAccount
    PROPERTIES(co, s)    numberOverrideContractCompanySupplier
    PROPERTIES(co, s, c) equalsCompanySupplierContract
    FILTERS inCompanyContract(co, c),
            inCompanyAccount(co, a),
            inSupplierContract(s, c)

    FILTERGROUP filters1
        FILTER 'Показывать только поставщиков, с которыми есть договор' 'F10' isInCompanySupplier(co, s) DEFAULT

    EDIT company OBJECT co
;

DESIGN company FROM DEFAULT {
    main{
       preferredSize = (1024, 768);
       co.box {
            childConstraints = TO THE RIGHT;

            NEW oneCase {
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(name(co));
                ADD PROPERTY(fullNameLegalEntity(co));
                ADD PROPERTY(addressLegalEntity(co));
                ADD PROPERTY(phoneLegalEntity(co));
                ADD PROPERTY(UNPLegalEntity(co));
                ADD co.contactGroup;
            };

            NEW twoCase{
                childConstraints = TO THE BOTTOM;
                ADD co.docGroup;
                ADD co.lawGroup {
                    ADD PROPERTY(shortNameOwnershipLegalEntity(co));
                };
            }
       }

       NEW firstCase BEFORE functions.box {
            type = TABBED;
            ADD a.box;
            NEW v.box { title = 'Поставщик-договор'; }
            ADD s.box IN v.box;
            ADD c.box IN v.box;
            POSITION s.box TO THE LEFT c.box;
       }
   }
}
FORM companies 'Компании'
    OBJECTS co=company
    PROPERTIES(co) READONLY name, fullNameLegalEntity, shortNameOwnershipLegalEntity, UNPLegalEntity, dataOverrideAccountLegalEntity, addressLegalEntity, phoneLegalEntity
    PROPERTIES(co) ADDFORM, EDITFORM, delete
;

FORM customer 'Покупатель'
    OBJECTS cu=customer FIXED PANEL
    PROPERTIES(cu)     name, fullNameLegalEntity, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity, addressLegalEntity, showFormAddressLegalEntity,
                       postAddressLegalEntity, showFormPostAddressLegalEntity, managerLegalEntity, showFormManagerLegalEntity,
                       accountantLegalEntity, showFormAccountantLegalEntity, phoneLegalEntity, showFormPhoneLegalEntity,
                       UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity, emailLegalEntity, siteLegalEntity, payerSupplier,
                       residentLegalEntity
    OBJECTS a=account
    PROPERTIES(a)      dataAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount,
                       MFOBankAccount, noteAccount, ADDOBJ, delete

    PROPERTIES(cu, a) equalsLegalEntityAccount

    FILTERS inCustomerAccount(cu, a)

    EDIT customer OBJECT cu

;

FORM customers 'Покупатели'
    OBJECTS cu=customer
    PROPERTIES(cu)   READONLY name, fullNameLegalEntity, UNPLegalEntity, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity,
                              addressLegalEntity
    PROPERTIES(cu)   ADDFORM, EDITFORM, delete
;

//--------------------------------------Дисконтные карточки------------------------------------------------------------------//
CLASS discountCard 'Дисконтная карта';
TABLE discountCard (discountCard);

numberDiscountCard 'Номер дисконтной карты' (discountCard) = //DATA INTEGER (discountCard);
        PARTITION SUM 1 IF discountCard IS discountCard
        ORDER discountCard IN recognizeGroup MINCHARWIDTH 3 PREFCHARWIDTH 3;

customerDiscountCard (discountCard) = DATA customer(discountCard);
nameCustomerDiscountCard 'Держатель дисконтной карты' (discountCard) = name(customerDiscountCard(discountCard));

FORM discountCard 'Дисконтная карта'
    OBJECTS d=discountCard FIXED PANEL
    PROPERTIES(d) numberDiscountCard, nameCustomerDiscountCard

    EDIT discountCard OBJECT d
;

FORM discountCards 'Дисконтные карты'
    OBJECTS d=discountCard
    PROPERTIES(d) READONLY numberDiscountCard, nameCustomerDiscountCard
    PROPERTIES(d) ADDFORM, EDITFORM, delete
;

//---------------------------- по поставщикам и товарам ----------------------------------------

//--------------------------------------Формы--------------------------------------------------------------------------//
isManufactory (departmentStore) = departmentStore IS manufactory;

nameOfficerMRPDepartmentStore 'Материально ответственное лицо, подписывающее товарный отчет (должность)' =
    nameOfficerEmployee(MRPDepartmentStore(departmentStore)) IN printDepartmentStoreGroup;
nameOfficerBookkeeperDepartmentStore 'Бухгалтер, принимающий товарный отчет (должность)' =
    nameOfficerEmployee(bookkeeperDepartmentStore(departmentStore)) IN printDepartmentStoreGroup;
nameOfficerPersonCheckDepartmentStore 'Кто проверяет товарный отчет (должность)' =
    nameOfficerEmployee(personCheckDepartmentStore(departmentStore)) IN printDepartmentStoreGroup;

FORM departmentStore 'Отдел магазина'
    OBJECTS d=departmentStore FIXED PANEL
    PROPERTIES(d)   name, nameStoreDepartmentStore, controlMinusRestsDepartmentStore, deleteItemMinusRestsDepartmentStore, controlMinusRestsContainerDepartmentStore,
                    verifyOrderArrivalDepartmentStore, maxQuantityDeliveryHourDepartmentStore, resolveMaxQuantityDeliveryHourAssortmentLessDepartmentStore, resolveOrderItemDepartmentStore,
                    quantityCashChangeOneOperationAccountDepartmentStore, commonNameMRPDepartmentStore, nameOfficerMRPDepartmentStore,
                    commonNameBookkeeperDepartmentStore, nameOfficerBookkeeperDepartmentStore, commonNamePersonCheckDepartmentStore,
                    nameOfficerPersonCheckDepartmentStore, nameRevaluationCommitteeDepartmentStore,
                    nameRegisterCommitteeDepartmentStore, nameWastageCommitteeDepartmentStore, nameDiscount, showFormNameDiscount

    OBJECTS e=employee
    PROPERTIES(e) READONLY userFirstName, userLastName
    PROPERTIES(e) ADDSESSIONFORM, EDITSESSIONFORM, delete
    FILTERS includeDepartmentStoreEmployee(d, e)

    OBJECTS t=tradingSquare
    PROPERTIES(t) squareTradingSquare, dateTradingSquare
    PROPERTIES(t) ADDOBJ, delete
    FILTERS inTradingSquareDepartmentStore(d, t)

    OBJECTS d2=departmentStore
    PROPERTIES(d2) READONLY name SHOWIF isManufactory(d)
    PROPERTIES(d, d2) rawDepartmentStore SHOWIF isManufactory(d)
    FILTERS inRawDepartmentStore(d, d2)
    FILTERGROUP rawFilter
        FILTER 'Подразделения из которых полуется сырье' 'F10' rawDepartmentStore(d, d2)

    EDIT departmentStore OBJECT d
;

DESIGN departmentStore FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        d.box{
            childConstraints = TO THE RIGHTBOTTOM;
            NEW order {
                    childConstraints = TO THE BOTTOM;
                    title = 'Заказ';
                    ADD PROPERTY (name);
                    ADD PROPERTY (nameStoreDepartmentStore);
                    ADD PROPERTY (maxQuantityDeliveryHourDepartmentStore);
                    ADD PROPERTY (resolveMaxQuantityDeliveryHourAssortmentLessDepartmentStore);
                    ADD PROPERTY (resolveOrderItemDepartmentStore);
                    ADD PROPERTY (quantityCashChangeOneOperationAccountDepartmentStore);
                };
            ADD d.controlDepartmentStoreGroup{
                    ADD PROPERTY (nameDiscount);
                };
            ADD d.printDepartmentStoreGroup;
        };

        NEW prop.box BEFORE functions.box{
            type = TABBED;
            ADD e.box{
                    title = 'Сотрудники';
                };
            ADD t.box;
            ADD d2.box{
                    title = 'Отделы сырья';
                };
      }
   }
}

FORM departmentStores 'Отделы магазинов'
    TREE treeStore a=STRING[3], t=tradingNetwork, st=storeType, s=store
    PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS stringEqualsAll(a), inTradingNetworkStoreType (t, st), inStoreTypeStore(st, s)

    OBJECTS d=departmentStore
    PROPERTIES(d) READONLY depName = name
    FILTERS inTradingNetworkStoreTypeStoreDepartment(t, st, s, d)
    ORDER BY depName

    DIALOG departmentStore OBJECT d
;

DESIGN departmentStores FROM DEFAULT {
    POSITION treeStore.box TO THE LEFT d.box;
    treeStore.tree {
        fillHorizontal = 0.3;
    }
    d.grid {
        defaultComponent = TRUE;
    }
}

FORM store 'Магазин'
    OBJECTS s=store FIXED PANEL
    PROPERTIES(s) name, addressStore, nameStoreTypeStore, tradingSquareStore, nameCompanyStore, nameRegionStore

    OBJECTS d=departmentStore
    PROPERTIES(d) READONLY objectClassName, name, defaultTradingSquareDepartmentStore
    PROPERTIES(d)          ADDSESSIONFORM, EDITSESSIONFORM, delete
    FILTERS inStoreDepartment(s, d)

    EDIT store OBJECT s
;

FORM tradingNetwork 'Торговая сеть'
    OBJECTS n=tradingNetwork FIXED PANEL
    PROPERTIES(n) name

    OBJECTS s=storeType
    PROPERTIES(s) name
    PROPERTIES(s) ADDOBJ, delete
    FILTERS inTradingNetworkStoreType(n, s)

    EDIT tradingNetwork OBJECT n
;

FORM stores 'Магазины'
    TREE treeStore a=STRING[3], t=tradingNetwork, st=storeType
    PROPERTIES READONLY OBJVALUE(a), name(t), name(st)//, dumb1(st)

    FILTERS stringEqualsAll(a)
    FILTERS inTradingNetworkStoreType (t, st)

    PROPERTIES(t)          addT=ADDFORM FORCE PANEL, editT=EDITFORM FORCE PANEL, delete FORCE PANEL//FORCE PANEL

    OBJECTS s=store
    PROPERTIES(s) READONLY name, addressStore, nameStoreTypeStore, nameCompanyStore, nameRegionStore
    PROPERTIES(s)          ADDFORM, EDITFORM, delete
    FILTERS inTradingNetworkStoreTypeStore(t, st, s)

    OBJECTS d=departmentStore
    PROPERTIES(d) READONLY objectClassName, name
    FILTERS inStoreDepartment(s, d)
;

DESIGN stores FROM DEFAULT {
    POSITION treeStore.box TO THE LEFT s.box;
    POSITION treeStore.box TO THE LEFT d.box;

        PROPERTY (delete(t)) {
            caption = 'Удалить';
            panelLocation = TOOLBAR;
            askConfirm = TRUE;
        }

        PROPERTY (addT) {
            caption = 'Добавить';
        }

        PROPERTY (editT) {
            caption = 'Ред-ть';
            maximumCharWidth = 5;
        }
        s.box {
            fillHorizontal = 2.3;
        }

        d.box {
            fillHorizontal = 2.3;
        }
}


//---------------------------- Модели оборудования ----------------------------------------//
CLASS ABSTRACT model 'Модель' : named;
TABLE model (model);

CLASS cashRegisterModel 'Модель касс' : model;
CLASS scalesModel 'Модель весов' : model;
CLASS checkModel 'Модель прайс чекеров' : model;
CLASS terminalModel 'Модель ТСД' : model;

CLASS frontOffice 'Фронт офис';
TABLE frontOffice (frontOffice);

nameFrontOffice 'Версия фронт офиса на кассе' = DATA STRING[100] (frontOffice) IN baseGroup;

noteModel 'Примечание' = DATA STRING[200] (model) IN baseGroup;
useModel 'Модель используется' = DATA BOOLEAN (model) IN baseGroup;
lettersModel 'Преобразовать наименование товара В ЗАГЛАВНЫЕ БУКВЫ' = DATA BOOLEAN (model) IN baseGroup;
handlerModel 'Обработчик' = DATA STRING[200] (model) IN baseGroup;


frontOfficeCashRegisterModel 'Модель касс (ИД)' = DATA frontOffice (cashRegisterModel) IN idGroup;
nameFrontOfficeCashRegisterModel 'Версия фронт офиса на кассе' (cashRegisterModel) = nameFrontOffice(frontOfficeCashRegisterModel(cashRegisterModel)) IN baseGroup;
dateToCashRegisterModel 'Дата, до которой модель внесена в реестр' = DATA DATE (cashRegisterModel) IN baseGroup;
maxProductModel 'MAX допустимое колич.товаров' = DATA INTEGER (model) IN baseGroup;

CLASS flash 'Прошивка';
TABLE flash (flash);

nameFlash 'Модель весов/версия прошивки' = DATA STRING[100] (flash) IN baseGroup;

flashScalesModel 'Прошивка (ИД)' = DATA flash (scalesModel) IN idGroup;
nameFlashScalesModel 'Модель весов/версия прошивки' = nameFlash(flashScalesModel(scalesModel)) IN baseGroup;
maxTextScalesModel 'MAX допустимое колич.дополнительных текстов' = DATA INTEGER (scalesModel) IN baseGroup;
folderScalesModel 'Папка на сервере весов с драйвером весов' = DATA STRING[200] (scalesModel) IN baseGroup;
compositionScalesModel 'Число знаков в доп.тексте(составе товара)' = DATA INTEGER (scalesModel) IN baseGroup;

CLASS modelCheck 'Модель чекера';
TABLE modelCheck (modelCheck);

nameModelCheck 'Модель прайс чекера' = DATA STRING[100] (modelCheck) IN baseGroup;

modelCheckModel 'Модель (ИД)' = DATA modelCheck (checkModel) IN idGroup;
nameModelCheckModel 'Модель прайс чекера' = nameModelCheck(modelCheckModel(checkModel)) IN baseGroup;

FORM checkModels 'Модели прайс чекеров'
OBJECTS m=checkModel
PROPERTIES(m) READONLY objectClassName, name, useModel, maxProductModel, noteModel, handlerModel
PROPERTIES(m) ADDFORM, EDITFORM, delete;

FORM scalesModels 'Модели весов'
OBJECTS m=scalesModel
PROPERTIES(m) READONLY objectClassName, name, useModel, maxProductModel, noteModel, handlerModel
PROPERTIES(m) ADDFORM, EDITFORM, delete;

FORM cashRegistersModels 'Модели касс'
OBJECTS m=cashRegisterModel
PROPERTIES(m) READONLY objectClassName, name, useModel, maxProductModel, noteModel, handlerModel
PROPERTIES(m) ADDFORM, EDITFORM, delete;

FORM terminalModels 'Модели ТСД'
OBJECTS m=terminalModel
PROPERTIES(m) READONLY objectClassName, name, useModel, maxProductModel, noteModel, handlerModel
PROPERTIES(m) ADDFORM, EDITFORM, delete;

FORM checkModel 'Модель прайс чекера'
OBJECTS ch=checkModel FIXED PANEL
PROPERTIES(ch) name, nameModelCheckModel, noteModel, handlerModel, useModel, maxProductModel
EDIT checkModel OBJECT ch;

FORM cashRegisterModel 'Модель касс'
OBJECTS c=cashRegisterModel FIXED PANEL
PROPERTIES(c) name, nameFrontOfficeCashRegisterModel, noteModel, handlerModel, useModel, dateToCashRegisterModel, lettersModel
EDIT cashRegisterModel OBJECT c;

FORM scalesModel 'Модель весов'
OBJECTS s=scalesModel FIXED PANEL
PROPERTIES(s) name, nameFlashScalesModel, noteModel, handlerModel, useModel, maxProductModel, maxTextScalesModel,
              folderScalesModel, lettersModel, compositionScalesModel
EDIT scalesModel OBJECT s;

FORM terminalModel 'Модель ТСД'
OBJECTS t=terminalModel FIXED PANEL
PROPERTIES(t) name, noteModel, handlerModel, useModel, maxProductModel
EDIT terminalModel OBJECT t;

//---------------------------- Сервера управления оборудования ----------------------------//
CLASS equipmentServer 'Сервер оборудования' : named;
TABLE equipmentServer (equipmentServer);
sidEquipmentServer 'Идентификатор' = DATA STRING[20] (equipmentServer) IN baseGroup;
sidToEquipmentServer(equipmentServer)  = GROUP UNIQUE equipmentServer BY sidEquipmentServer (equipmentServer) WHERE equipmentServer IS equipmentServer;
delayEquipmentServer 'Задержка'= DATA INTEGER(equipmentServer) IN baseGroup;

//---------------------------- Ошибки сервера оборудования ----------------------------//
CLASS equipmentServerError 'Ошибки';
TABLE equipmentServerError (equipmentServerError);

dataEquipmentServerError 'Сообщение об ошибке' = DATA STRING[200] (equipmentServerError) IN baseGroup;
erTraceEquipmentServerError 'След ошибки' = DATA TEXT (equipmentServerError) IN baseGroup;
dateEquipmentServerError 'Время возникновения' = DATA DATETIME (equipmentServerError) IN baseGroup;
equipmentServerEquipmentServerError 'Сервер оборудования (ID)' = DATA equipmentServer(equipmentServerError) IN baseGroup;

//---------------------------- Лог сервера оборудования ----------------------------//
CLASS equipmentServerLog 'Лог';
TABLE equipmentServerLog (equipmentServerLog);

dataEquipmentServerLog 'Сообщение' = DATA TEXT (equipmentServerLog) IN baseGroup;
dateEquipmentServerLog 'Время' = DATA DATETIME (equipmentServerLog) IN baseGroup;
equipmentServerEquipmentServerLog 'Сервер оборудования (ID)' = DATA equipmentServer(equipmentServerLog) IN baseGroup;


//---------------------------- группы оборудования ----------------------------------------//

CLASS ABSTRACT groupMachinery 'Группы оборудования';
TABLE groupMachinery (groupMachinery);

CLASS groupScales 'Группы весов' : groupMachinery;
CLASS groupCashRegister 'Группы касс' : groupMachinery;
CLASS groupCheck 'Группы прайс чекеров' : groupMachinery;
CLASS groupTerminal 'Группы ТСД' : groupMachinery;

CLASS groupTerminalDocumentType 'Группа типов документов';

nameGroupTerminalDocumentType 'Наименование группы' = DATA STRING[200] (groupTerminalDocumentType) IN baseGroup MINCHARWIDTH 10 PREFCHARWIDTH 20;
groupTerminalDocumentTypeGroupTerminal 'Группа типов документов (ИД)' = DATA groupTerminalDocumentType (groupTerminal);
nameGroupTerminalDocumentTypeGroupTerminal 'Группа типов документов' (groupTerminal) = nameGroupTerminalDocumentType(groupTerminalDocumentTypeGroupTerminal(groupTerminal));

nameGroupMachinery 'Наименование группы' = DATA STRING[200] (groupMachinery) IN baseGroup MINCHARWIDTH 10 PREFCHARWIDTH 20;
transferGroupMachinery 'Передать товар на группу оборудования' = DATA BOOLEAN (groupMachinery) IN baseGroup;
roundSalesGroupMachinery 'Округление цен до' = DATA INTEGER (groupMachinery) IN baseGroup;

cellGroupScales 'Помещать на ценники номера ячеек с этой группы' = DATA BOOLEAN (groupScales) IN baseGroup;
sidSectionGroupScales 'Код отдела в Set Retail' = DATA INTEGER (groupScales) IN baseGroup;
directoryGroupScales 'Директория сервера Set Retail' = DATA STRING[200] (groupScales) IN baseGroup;

departmentStoreGroupMachinery 'Подразделение (ИД)' = DATA departmentStore (groupMachinery);
nameDepartmentStoreGroupMachinery 'Подразделение' (groupMachinery) = name(departmentStoreGroupMachinery(groupMachinery)) IN baseGroup;

equipmentServerGroupMachinery 'Сервер оборудования (ИД)' = DATA equipmentServer (groupMachinery);
nameEquipmentServerGroupMachinery 'Сервер оборудования' (groupMachinery) = name(equipmentServerGroupMachinery(groupMachinery));
sidEquipmentServerGroupMachinery 'Сервер оборудования' (groupMachinery) = sidEquipmentServer(equipmentServerGroupMachinery(groupMachinery));

//---------------------------- типы оборудования  ----------------------------------------//
CLASS ABSTRACT machinery 'Оборудование';
TABLE machinery(machinery);

CLASS cashRegister 'Касса' : machinery, computer;
CLASS scales 'Весы' : machinery;
CLASS check 'Прайс чекер' : machinery;
CLASS terminal 'ТСД' : machinery;

isGroupCashRegister (machinery) = machinery IS groupCashRegister;
groupCashRegisterCashRegister 'Группа (ИД)' = DATA groupCashRegister (cashRegister) IN idGroup;
isGroupCashRegisterCashRegister (groupCashRegister, cashRegister) = groupCashRegisterCashRegister(cashRegister) == groupCashRegister;

isGroupScales (machinery) = machinery IS groupScales;
groupScalesScales 'Группа (ИД)' = DATA groupScales (scales) IN idGroup;
isGroupScalesScales (groupScales, scales) = groupScalesScales(scales) == groupScales;

isGroupCheck (machinery) = machinery IS groupCheck;
groupCheckCheck 'Группа (ИД)' = DATA groupCheck (check) IN idGroup;
isGroupCheckCheck (groupCheck, check) = groupCheckCheck(check) == groupCheck;

isTerminal (machinery) = machinery IS terminal;
groupTerminalTerminal 'Группа (ИД)' = DATA groupTerminal (terminal) IN idGroup;
isGroupTerminalTerminal (groupTerminal, terminal) = groupTerminalTerminal(terminal) == groupTerminal;

// todo : persistent почему-то не работает
groupMachineryMachinery 'Группа (ИД)' (machinery) = UNION EXCLUSIVE groupCashRegisterCashRegister(machinery),
                                                                   groupScalesScales(machinery),
                                                                   groupCheckCheck(machinery),
                                                                   groupTerminalTerminal(machinery);
nameGroupMachineryMachinery 'Группа' (machinery) = nameGroupMachinery(groupMachineryMachinery(machinery));


nameGroupMachineryCashRegister 'Наименование группы' (cashRegister) = nameGroupMachinery(groupCashRegisterCashRegister(cashRegister)) IN baseGroup;
nameGroupMachineryScales 'Наименование группы' (scales) = nameGroupMachinery(groupScalesScales(scales)) IN baseGroup;
nameGroupMachineryCheck 'Наименование группы' (check) = nameGroupMachinery(groupCheckCheck(check)) IN baseGroup;
nameGroupMachineryTerminal 'Наименование группы' (terminal) = nameGroupMachinery(groupTerminalTerminal(terminal)) IN baseGroup;

nppMachinery 'Порядковый номер' = DATA INTEGER (machinery) IN baseGroup;
descriptionMachinery 'Описание' = DATA STRING[200] (machinery) IN baseGroup;
portMachinery 'Адрес/порт' = DATA STRING[100] (machinery) IN baseGroup;
useMachinery 'Оборудование используется' = DATA BOOLEAN (machinery) IN baseGroup;

numberCashRegister 'Регистрационный номер кассы' = DATA STRING[100] (cashRegister) IN baseGroup;
numberCashRegisterToCashRegister (cashRegister) = GROUP UNIQUE cashRegister BY numberCashRegister (cashRegister) WHERE cashRegister IS cashRegister;

cashRegisterModelCashRegister 'Модель ИД' = DATA cashRegisterModel (cashRegister) IN idGroup;
directoryCashRegister 'Директория обмена с кассой' = DATA STRING[100] (cashRegister) IN baseGroup;
nameCashRegisterModelCashRegister 'Модель кассы' (cashRegister) = name(cashRegisterModelCashRegister(cashRegister)) IN baseGroup;
handlerCashRegisterModelCashRegister 'Обработчик кассы' (cashRegister) = handlerModel(cashRegisterModelCashRegister(cashRegister)) IN baseGroup;
statusCashRegister 'Статус кассы (на момент посл.передачи)' = DATA STRING[200] (cashRegister) IN baseGroup;
resultCashRegister 'Результат передачи на кассу товаров' = DATA STRING[200] (cashRegister) IN baseGroup;
dateCashRegister 'Дата фискализации кассового аппарата' = DATA DATE (cashRegister) IN baseGroup;

terminalModelTerminal 'Модель ИД' = DATA terminalModel (terminal) IN idGroup;
directoryTerminal 'Директория обмена с ТСД' = DATA STRING[100] (terminal) IN baseGroup;
nameTerminalModelTerminal 'Модель ТСД' (terminal) = name(terminalModelTerminal(terminal)) IN baseGroup;
handlerTerminalModelTerminal 'Обработчик ТСД' (terminal) = handlerModel(terminalModelTerminal(terminal)) IN baseGroup;

CLASS STATIC feature 'Свойство для оборудования'
{
    never 'HET,(пример: для годен это значит - печатаем в поле этикетки "Годен до")',
    always 'ДА для ВСЕХ товаров поместить в состав',
    sometimes 'ДА (для товаров с признаком [Контролировать срок годности по товару?]'
};

scalesModelScales 'Модель ИД' = DATA scalesModel (scales) IN idGroup;
numberScales 'Заводской(серийный) номер ' = DATA STRING[100] (scales) IN baseGroup;
nameScalesModelScales 'Модель весов' (scales) = name(scalesModelScales(scales)) IN baseGroup;
handlerScalesModelScales 'Обработчик весов' (scales) = handlerModel(scalesModelScales(scales)) IN baseGroup;
dateScales 'Дата следующей обязательной поверки' = DATA DATE (scales) IN baseGroup;
passScales 'свойство ИД' = DATA feature (scales) IN idGroup;
namePassScales 'Свойство товара [Годен до] помещать в ингредиенты' (scales) = name(UNION OVERRIDE feature.always IF scales IS scales,
                                                                                                  passScales(scales)) IN baseGroup;
manufactureScales 'свойство ИД' = DATA feature (scales) IN idGroup;
nameManufactureScales 'Свойство товара [Дата изг.] помещать в ингредиенты' (scales) = name(UNION OVERRIDE feature.always IF scales IS scales,
                                                                                                  manufactureScales(scales)) IN baseGroup;
productionScales 'свойство ИД' = DATA feature (scales) IN idGroup;
nameProductionScales 'Св-во товара[Срок годн.в часах] поместить в ингр-ты' (scales) = name(UNION OVERRIDE feature.always IF scales IS scales,
                                                                                                  productionScales(scales)) IN baseGroup;
sidScales 'ID весов для Set Retail' = DATA INTEGER (scales) IN baseGroup;

// фильтрация по группам товаров

filterItemsGroupMachinery 'Фильтровать по группам товаров' = DATA BOOLEAN (groupMachinery);

inGroupMachineryItemGroup 'Вкл' = DATA BOOLEAN (groupMachinery, itemGroup);

//---------------------------- типы документов ----------------------------------------//

CLASS terminalDocumentType 'Тип документов';

nameTerminalDocumentType 'Название' = DATA STRING[200] (terminalDocumentType) IN baseGroup;
idTerminalDocumentType 'Код' = DATA STRING[10] (terminalDocumentType) IN baseGroup;
idToTerminalDocumentType (terminalDocumentType) = GROUP UNIQUE terminalDocumentType BY idTerminalDocumentType (terminalDocumentType) WHERE terminalDocumentType IS terminalDocumentType;

groupTerminalDocumentTypeTerminalDocumentType 'Группа типов документов (ИД)' = DATA groupTerminalDocumentType (terminalDocumentType);
nameGroupTerminalDocumentTypeTerminalDocumentType 'Группа типов документов' (terminalDocumentType) = nameGroupTerminalDocumentType(groupTerminalDocumentTypeTerminalDocumentType(terminalDocumentType));
isGroupTerminalDocumentTypeTerminalDocumentType (groupTerminalDocumentType, terminalDocumentType) = groupTerminalDocumentTypeTerminalDocumentType(terminalDocumentType) == groupTerminalDocumentType;

CLASS STATIC terminalHandbookType 'Вид справочника ТСД'
{
supplier 'Поставщик',
customer 'Покупатель'
};

idTerminalHandbookType 'Код' = DATA STRING[10] (terminalHandbookType) IN baseGroup;
idToTerminalHandbookType (terminalHandbookType) = GROUP UNIQUE terminalHandbookType BY idTerminalHandbookType (terminalHandbookType) WHERE terminalHandbookType IS terminalHandbookType;

terminalHandbookType1TerminalDocumentType = DATA terminalHandbookType (terminalDocumentType);
terminalHandbookType2TerminalDocumentType = DATA terminalHandbookType (terminalDocumentType);
idTerminalHandbookType1TerminalDocumentType 'Код' (terminalDocumentType)  = idTerminalHandbookType (terminalHandbookType1TerminalDocumentType(terminalDocumentType));
nameTerminalHandbookType1TerminalDocumentType 'Имя' (terminalDocumentType)  = name (terminalHandbookType1TerminalDocumentType(terminalDocumentType));
idTerminalHandbookType2TerminalDocumentType 'Код' (terminalDocumentType)  = idTerminalHandbookType (terminalHandbookType2TerminalDocumentType(terminalDocumentType));
nameTerminalHandbookType2TerminalDocumentType 'Имя' (terminalDocumentType)  = name (terminalHandbookType2TerminalDocumentType(terminalDocumentType));

nameInHandbook1TerminalDocumentType 'Наименование в справочнике 1' = DATA STRING[200] (terminalDocumentType) IN baseGroup;
nameInHandbook1TerminalDocumentType(terminalDocumentType) <- nameTerminalHandbookType1TerminalDocumentType(terminalDocumentType) WHEN CHANGED(terminalHandbookType1TerminalDocumentType(terminalDocumentType));
nameInHandbook2TerminalDocumentType 'Наименование в справочнике 2' = DATA STRING[200] (terminalDocumentType) IN baseGroup;
nameInHandbook2TerminalDocumentType(terminalDocumentType) <- nameTerminalHandbookType2TerminalDocumentType(terminalDocumentType) WHEN CHANGED(terminalHandbookType2TerminalDocumentType(terminalDocumentType));

CLASS terminalDocument 'Документ ТСД';

idTerminalDocument 'Номер' = DATA INTEGER (terminalDocument) IN baseGroup;
titleTerminalDocument 'Имя' = DATA STRING[100] (terminalDocument) IN baseGroup;
quantityTerminalDocument 'Количество' = DATA NUMERIC[14,3] (terminalDocument) IN baseGroup;
idTerminalHandbookType1TerminalDocument 'Код в справочнике 1' = DATA INTEGER (terminalDocument) IN baseGroup;
idTerminalHandbookType2TerminalDocument 'Код в справочнике 2' = DATA INTEGER (terminalDocument) IN baseGroup;

terminalDocumentTypeTerminalDocument = DATA terminalDocumentType(terminalDocument);
nameTerminalDocumentTypeTerminalDocument 'Тип документа' (terminalDocument) = nameTerminalDocumentType (terminalDocumentTypeTerminalDocument (terminalDocument));
idTerminalDocumentTypeTerminalDocument (terminalDocument) = idTerminalDocumentType (terminalDocumentTypeTerminalDocument (terminalDocument));


idToTerminalDocument (terminalDocument) = GROUP UNIQUE terminalDocument BY idTerminalDocument (terminalDocument) WHERE terminalDocument IS terminalDocument;

CLASS terminalDocumentDetail 'Строка документа ТСД';
terminalDocumentTerminalDocumentDetail = DATA terminalDocument(terminalDocumentDetail);
numberTerminalDocumentDetail 'Номер' = DATA INTEGER (terminalDocumentDetail) IN baseGroup;
barcodeTerminalDocumentDetail 'Штрихкод' = DATA STRING[14] (terminalDocumentDetail) IN baseGroup;
quantityTerminalDocumentDetail 'Количество' = DATA NUMERIC[14,3] (terminalDocumentDetail) IN baseGroup;
priceTerminalDocumentDetail 'Цена' = DATA NUMERIC[14,3] (terminalDocumentDetail) IN baseGroup;
sumTerminalDocumentDetail 'Сумма' = DATA NUMERIC[14,3] (terminalDocumentDetail) IN baseGroup;
nameTerminalDocumentDetail 'Наименование' = DATA STRING[200] (terminalDocumentDetail) IN baseGroup;
isNewTerminalDocumentDetail 'Новый товар' = DATA BOOLEAN (terminalDocumentDetail) IN baseGroup;

idTerminalDocumentNumberToTerminalDocumentDetail (terminalDocumentDetail, terminalDocument) = GROUP UNIQUE terminalDocumentDetail BY idTerminalDocument (terminalDocumentTerminalDocumentDetail(terminalDocumentDetail)), numberTerminalDocumentDetail(terminalDocumentDetail) WHERE terminalDocumentDetail IS terminalDocumentDetail;

FORM filterItemsGroupMachinery 'Фильтрация по группам товаров'
    OBJECTS gm = groupMachinery FIXED PANEL
    PROPERTIES(gm) READONLY nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery

    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS cg=itemGroup
    PROPERTIES(cg) READONLY canonicalNameItemGroup
    PROPERTIES(gm, cg)      inGroupMachineryItemGroup
    ORDER BY canonicalNameItemGroup
    FILTERS hasParentAndLeafItemGroup(cg, g)

    FILTERGROUP filters
        FILTER 'Только выбранные группы' 'F10' inGroupMachineryItemGroup(gm, cg)
;

DESIGN filterItemsGroupMachinery FROM DEFAULT {
    POSITION treeGroups.box TO THE LEFT cg.box;

    treeGroups.tree {
        fillHorizontal = 0.5;
    }
}

showFilterItemsGroupMachinery 'Выбрать группы' (groupMachinery) = ACTION FORM filterItemsGroupMachinery OBJECTS gm MODAL;

FORM cashRegister 'Касса'
    OBJECTS c=cashRegister FIXED PANEL
    PROPERTIES(c) nameGroupMachineryMachinery, nppMachinery, descriptionMachinery, portMachinery, useMachinery, numberCashRegister, directoryCashRegister, nameCashRegisterModelCashRegister,
                  dateCashRegister, statusCashRegister, resultCashRegister
    EDIT cashRegister OBJECT c
;

FORM scales 'Весы'
    OBJECTS s=scales FIXED PANEL
    PROPERTIES(s) nameGroupMachineryMachinery, nppMachinery, descriptionMachinery, portMachinery, useMachinery, numberScales, nameScalesModelScales,
                  dateScales, namePassScales, nameManufactureScales, nameProductionScales, sidScales
    EDIT scales OBJECT s
;

FORM check 'Прайс чекер'
    OBJECTS ch=check FIXED PANEL
    PROPERTIES(ch) nameGroupMachineryMachinery, nppMachinery, descriptionMachinery, portMachinery, useMachinery
    EDIT check OBJECT ch
;

FORM terminal 'ТСД'
    OBJECTS t=terminal FIXED PANEL
    PROPERTIES(t) nameGroupMachineryMachinery, nppMachinery, descriptionMachinery, portMachinery, useMachinery, directoryTerminal, nameTerminalModelTerminal
    EDIT terminal OBJECT t
;

FORM groupScales 'Группа весов'
    OBJECTS grs=groupScales FIXED PANEL
    PROPERTIES(grs) nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery,
                    roundSalesGroupMachinery,
                    transferGroupMachinery, cellGroupScales, sidSectionGroupScales, directoryGroupScales,
                    filterItemsGroupMachinery, showFilterItemsGroupMachinery SHOWIF filterItemsGroupMachinery(grs)

    OBJECTS s=scales
    PROPERTIES(s)   nameGroupMachineryMachinery, nppMachinery, descriptionMachinery, portMachinery, useMachinery, numberScales, nameScalesModelScales,
                    dateScales, namePassScales, nameManufactureScales, nameProductionScales, sidScales, ADDOBJ, delete
    FILTERGROUP filters1
        FILTER 'Показывать только для данной группы' 'F10' isGroupScalesScales(grs, s) DEFAULT
    EDIT groupScales OBJECT grs
;

FORM groupsScales 'Группы весов'
    OBJECTS grs=groupScales
    PROPERTIES(grs) READONLY nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery, roundSalesGroupMachinery,
                         transferGroupMachinery, filterItemsGroupMachinery, cellGroupScales, sidSectionGroupScales, directoryGroupScales
    PROPERTIES(grs) ADDFORM, EDITFORM, delete

    OBJECTS s=scales
    PROPERTIES(s)   READONLY nppMachinery, descriptionMachinery, portMachinery, useMachinery, numberScales, nameScalesModelScales,
                             dateScales, namePassScales, nameManufactureScales, nameProductionScales, sidScales
    FILTERS isGroupScalesScales(grs, s)
;

FORM groupCashRegister 'Группа касс'

    OBJECTS grc=groupCashRegister FIXED PANEL
    PROPERTIES(grc) nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery,
                    roundSalesGroupMachinery, transferGroupMachinery,
                    filterItemsGroupMachinery, showFilterItemsGroupMachinery SHOWIF filterItemsGroupMachinery(grc)

    OBJECTS c=cashRegister
    PROPERTIES(c)   nameGroupMachineryMachinery, nppMachinery, descriptionMachinery, portMachinery, useMachinery, numberCashRegister, directoryCashRegister, nameCashRegisterModelCashRegister,
                    dateCashRegister, statusCashRegister, resultCashRegister, ADDOBJ, delete

    FILTERGROUP filters2
        FILTER 'Показывать только для данной группы' 'F10' isGroupCashRegisterCashRegister(grc, c) DEFAULT

    EDIT groupCashRegister OBJECT grc
;


FORM groupsCashRegister 'Группы касс'
    OBJECTS grc=groupCashRegister, c=cashRegister
    PROPERTIES(grc)  READONLY nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery,
                     roundSalesGroupMachinery, transferGroupMachinery, filterItemsGroupMachinery
    PROPERTIES(grc)  ADDFORM, EDITFORM, delete

    PROPERTIES(c) READONLY nppMachinery, descriptionMachinery, portMachinery,
                           useMachinery, numberCashRegister, directoryCashRegister, nameCashRegisterModelCashRegister,
                           dateCashRegister, statusCashRegister, resultCashRegister
    FILTERS isGroupCashRegisterCashRegister(grc, c)
;

FORM groupCheck 'Группа прайс чекеров'
    OBJECTS grch=groupCheck FIXED PANEL
    PROPERTIES(grch) nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery,
                     roundSalesGroupMachinery, transferGroupMachinery,
                     filterItemsGroupMachinery, showFilterItemsGroupMachinery SHOWIF filterItemsGroupMachinery(grch)

    OBJECTS ch=check
    PROPERTIES(ch)  nameGroupMachineryMachinery, nppMachinery, descriptionMachinery, portMachinery, useMachinery, ADDOBJ, delete
    FILTERGROUP filters3
        FILTER 'Показывать только для данной группы' 'F10' isGroupCheckCheck(grch, ch) DEFAULT
    EDIT groupCheck OBJECT grch
;

FORM groupsCheck 'Группы прайс чекеров'
    OBJECTS grch=groupCheck
    PROPERTIES(grch) READONLY nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery,
                              roundSalesGroupMachinery, transferGroupMachinery, filterItemsGroupMachinery
    PROPERTIES(grch)          ADDFORM, EDITFORM, delete

    OBJECTS ch=check
    PROPERTIES(ch)   READONLY nppMachinery, descriptionMachinery, nameModelCheckModel, portMachinery, useMachinery
    FILTERS isGroupCheckCheck(grch, ch)
;

FORM groupTerminal 'Группа ТСД'

    OBJECTS grt=groupTerminal FIXED PANEL
    PROPERTIES(grt) nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery,
                    roundSalesGroupMachinery, transferGroupMachinery, nameGroupTerminalDocumentTypeGroupTerminal,
                    filterItemsGroupMachinery, showFilterItemsGroupMachinery SHOWIF filterItemsGroupMachinery(grt)

    OBJECTS t=terminal
    PROPERTIES(t)   nameGroupMachineryMachinery, nppMachinery, descriptionMachinery, portMachinery, useMachinery, directoryTerminal, nameTerminalModelTerminal,
                    ADDOBJ, delete

    FILTERGROUP filters3
        FILTER 'Показывать только для данной группы' 'F10' isGroupTerminalTerminal(grt, t) DEFAULT

    EDIT groupTerminal OBJECT grt
;


FORM groupsTerminal 'Группы ТСД'
    OBJECTS grt=groupTerminal, t=terminal
    PROPERTIES(grt)  READONLY nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery,
                     nameGroupTerminalDocumentTypeGroupTerminal,
                     roundSalesGroupMachinery, transferGroupMachinery, filterItemsGroupMachinery
    PROPERTIES(grt)  ADDFORM, EDITFORM, delete

    PROPERTIES(t) READONLY nppMachinery, descriptionMachinery, portMachinery,
                           useMachinery, directoryTerminal, nameTerminalModelTerminal,
                           nameInHandbook1TerminalDocumentType, idTerminalHandbookType1TerminalDocumentType,
                           nameInHandbook2TerminalDocumentType, idTerminalHandbookType2TerminalDocumentType
    FILTERS isGroupTerminalTerminal(grt, t)
;

FORM groupTerminalDocumentType 'Группа типов документов'

    OBJECTS gtdt=groupTerminalDocumentType FIXED PANEL
    PROPERTIES(gtdt) nameGroupTerminalDocumentType

    OBJECTS tdt=terminalDocumentType
    PROPERTIES(tdt)   idTerminalDocumentType, nameTerminalDocumentType, nameGroupTerminalDocumentTypeTerminalDocumentType,
                      nameInHandbook1TerminalDocumentType, idTerminalHandbookType1TerminalDocumentType,
                      nameInHandbook2TerminalDocumentType, idTerminalHandbookType2TerminalDocumentType,
                      ADDOBJ, delete

    FILTERGROUP filters3
        FILTER 'Показывать только для данной группы' 'F10' isGroupTerminalDocumentTypeTerminalDocumentType(gtdt, tdt) DEFAULT

    EDIT groupTerminalDocumentType OBJECT gtdt
;

FORM groupsTerminalDocumentType 'Группы типов документов'
    OBJECTS gtdt=groupTerminalDocumentType, tdt=terminalDocumentType
    PROPERTIES(gtdt) nameGroupTerminalDocumentType
    PROPERTIES(gtdt)  ADDFORM, EDITFORM, delete

    PROPERTIES(tdt) READONLY idTerminalDocumentType, nameTerminalDocumentType,
    nameInHandbook1TerminalDocumentType, idTerminalHandbookType1TerminalDocumentType,
    nameInHandbook2TerminalDocumentType, idTerminalHandbookType2TerminalDocumentType

    FILTERS groupTerminalDocumentTypeTerminalDocumentType (tdt) == gtdt
;

FORM handbooksTerminalDocumentType 'Виды справочников ТСД'
    OBJECTS h=terminalHandbookType
    PROPERTIES(h)  name, idTerminalHandbookType
    PROPERTIES(h)  ADDFORM, EDITFORM, delete
;

FORM equipmentServer 'Серверы оборудования'
    OBJECTS es=equipmentServer, e = equipmentServerError, l = equipmentServerLog
    PROPERTIES(es)  READONLY sidEquipmentServer
    PROPERTIES(es)  delayEquipmentServer, ADDFORM, EDITFORM, delete

    PROPERTIES(e) READONLY dataEquipmentServerError, dateEquipmentServerError
    PROPERTIES(e) delete
    PROPERTIES(e) FORCE PANEL erTraceEquipmentServerError

    PROPERTIES(l) READONLY dataEquipmentServerLog, dateEquipmentServerLog
    PROPERTIES(l) delete

    FILTERS equipmentServerEquipmentServerError (e) == es
    FILTERS equipmentServerEquipmentServerLog (l) == es

;

DESIGN equipmentServer FROM DEFAULT {

    main {

        NEW specContainer BEFORE functions.box {
            type = TABBED;

            NEW errorContainer {
            title = 'Ошибки';
            ADD e.box;
            PROPERTY(erTraceEquipmentServerError(e)) {
               fillHorizontal = 1;
               panelLabelAbove = TRUE;
               }
            }
            ADD l.box;
        }
    }
}
// ----------------------------------- Группы пользователей -------------------------------------------------- //

CLASS groupUser 'Группы пользователей';
TABLE groupUser (groupUser);

nameGroupUser 'Наименование группы' = DATA STRING[100] (groupUser) IN baseGroup;
sidGroupUser 'Идентификатор' = DATA STRING[20] (groupUser) IN baseGroup;

groupUserEmployee(employee) = DATA groupUser (employee)  IN idGroup;
nameGroupUserEmployee 'Наименование группы' (employee) = nameGroupUser(groupUserEmployee(employee)) IN baseGroup;

includedEmployeeCashRegister 'Подключить'  = DATA BOOLEAN (employee, cashRegister) IN baseGroup;
dateFromEmployeeCashRegister 'Дата с'  = DATA DATE (employee, cashRegister) IN baseGroup;
dateToEmployeeCashRegister 'Дата по'  = DATA DATE (employee, cashRegister) IN baseGroup;

CLASS STATIC typeAction 'Тип действия'
{
    all 'Все подразделения',
    notAll 'Отдельные подразделения'
};
actionEmployee(employee) = DATA typeAction (employee)  IN idGroup;
nameActionEmployee 'доступ к подразделениям' (employee) = name(UNION OVERRIDE typeAction.all IF employee IS employee,       // по-умолчанию все подразделения
                                                                              actionEmployee(employee)) IN baseGroup;

inEmployeeDepartmentStoreDefault(employee, departmentStore) = DATA BOOLEAN (employee, departmentStore);
inEmployeeDepartmentStore 'Подключить' (employee, departmentStore) = inEmployeeDepartmentStoreDefault(employee, departmentStore) IF actionEmployee(employee) == typeAction.notAll IN baseGroup;
dateFromEmployeeDepartmentStore 'Начало доступа'  = DATA DATE (employee, departmentStore) IN baseGroup;
dateToEmployeeDepartmentStore 'Окончание доступа'  = DATA DATE (employee, departmentStore) IN baseGroup;

isGroupUserEmployee(groupUser, employee) =  groupUserEmployee(employee) == groupUser;

departmentStoreCashRegister(cashRegister) = departmentStoreGroupMachinery(groupCashRegisterCashRegister(cashRegister)) IN idGroup;
nameDepartmentStoreCashRegister 'Наименование отдела' (cashRegister) = name(departmentStoreCashRegister(cashRegister)) IN baseGroup;
nameStoreDepartmentStoreCashRegister 'Наименование магазина' (cashRegister) = name(storeDepartmentStore(departmentStoreCashRegister(cashRegister)))  IN baseGroup;

CONSTRAINT  groupUserEmployee(employee) AND NOT nameActionEmployee(employee) MESSAGE 'Для сотрудника не выбран доступ к подразделениям';
// todo: надо сделать проверку для сотрудника на доступ к подразделению//


FORM groupUser 'Группa пользователей'
    OBJECTS gru=groupUser FIXED PANEL
    OBJECTS e=employee, c=cashRegister, d=departmentStore
    PROPERTIES(gru)  nameGroupUser, sidGroupUser
    PROPERTIES(e)    nameGroupUserEmployee, userFirstName, userLastName, phoneEmployee, nameActionEmployee,
                     shortNameLanguageEmployee, numberEmployee, passwordEmployee, dataEmployee
    PROPERTIES(c)    READONLY nameStoreDepartmentStoreCashRegister, nameDepartmentStoreCashRegister, nameGroupMachineryCashRegister, numberCashRegister, nppMachinery
    PROPERTIES(e, c) includedEmployeeCashRegister, dateFromEmployeeCashRegister, dateToEmployeeCashRegister
    PROPERTIES(d)    READONLY nameStoreDepartmentStore, name
    PROPERTIES(e, d) dateFromEmployeeDepartmentStore, dateToEmployeeDepartmentStore, inEmployeeDepartmentStore
    FILTERGROUP filters1
        FILTER 'Показывать кассы только для данного пользователя' 'F10' includedEmployeeCashRegister(e, c) DEFAULT
    FILTERGROUP filters2
        FILTER 'Показывать сотрудников только для данной группы пользователей' 'F9' isGroupUserEmployee(gru, e) DEFAULT
    FILTERGROUP filters3
        FILTER 'Показывать подразделения только для данного пользователя' 'F8' inEmployeeDepartmentStore(e, d) DEFAULT
    EDIT groupUser OBJECT gru
    ;

DESIGN groupUser FROM DEFAULT {
    main{
       NEW prop.box BEFORE functions.box {
            ADD c.box;
            ADD d.box;
            POSITION c.box TO THE LEFT d.box;
       }
       NEW xrop.box BEFORE prop.box {
            ADD e.box;
       }

    }
}

FORM groupsUser 'Группы пользователей'
OBJECTS gru=groupUser, e=employee, c=cashRegister, d=departmentStore
PROPERTIES(gru)  READONLY nameGroupUser, sidGroupUser
PROPERTIES(gru)  ADDFORM, EDITFORM, delete
PROPERTIES(e)    READONLY userFirstName, userLastName, phoneEmployee, nameActionEmployee
PROPERTIES(c)    READONLY nameStoreDepartmentStoreCashRegister, nameDepartmentStoreCashRegister, numberCashRegister, nameGroupMachineryCashRegister, nppMachinery
PROPERTIES(e, c) includedEmployeeCashRegister, dateFromEmployeeCashRegister, dateToEmployeeCashRegister
PROPERTIES(d)    READONLY nameStoreDepartmentStore, name
PROPERTIES(e, d) READONLY dateFromEmployeeDepartmentStore, dateToEmployeeDepartmentStore, inEmployeeDepartmentStore
FILTERS includedEmployeeCashRegister(e, c),
        isGroupUserEmployee(gru, e),
        inEmployeeDepartmentStore(e, d);

DESIGN groupsUser FROM DEFAULT {
    main{
       NEW prop.box BEFORE functions.box {
            type = TABBED;
            ADD c.box;
            ADD d.box;
       }
       NEW case.box BEFORE prop.box {
            ADD gru.box;
            ADD e.box;
            POSITION gru.box TO THE LEFT e.box;
       }
   }
}


//---------------------------- Рецепты блюд ----------------------------------------//
CLASS recipe 'Рецепт' : named;
TABLE recipe (recipe);

CLASS recipeDetail 'Сырье рецепта';
TABLE recipeDetail (recipeDetail);

dishRecipe  'Блюдо (ИД)' = DATA item (recipe) IN idGroup;
CONSTRAINT dishRecipe (recipe) AND NOT isManufacturedItem(dishRecipe(recipe)) CHECKED MESSAGE 'Блюдо должно производиться';
captionDishRecipe 'Блюдо' = captionItem (dishRecipe(recipe)) IN baseGroup;

beginDateRecipe 'Используется с' = DATA DATE (recipe) IN baseGroup;
isUsedRecipe 'Используется' = DATA BOOLEAN (recipe) IN baseGroup;
numberRecipe 'Номер рецептуры (из сборника и пр.)' = DATA STRING[40] (recipe) IN baseGroup;
notesRecipe 'Технология приготовления' = DATA STRING[100] (recipe) IN baseGroup;
outWeightRecipe 'Количество выхода изделия' = DATA NUMERIC[14,3] (recipe) IN baseGroup;

recipeRecipeDetail 'Рецепт (ИД)' = DATA recipe(recipeDetail) IN baseGroup;
componentRecipeDetail 'Компонент (ИД)' = DATA component(recipeDetail) IN idGroup;
nameComponentRecipeDetail 'Компонент' = name(componentRecipeDetail(recipeDetail)) IN baseGroup;
normQuantityRecipeDetail 'Норма закладки (брутто)' = DATA NUMERIC[9,3] (recipeDetail) IN baseGroup;

inRecipeRecipeDetail(recipe, recipeDetail) = recipeRecipeDetail(recipeDetail) == recipe;

FORM recipe 'Рецепт блюда'
    OBJECTS r=recipe FIXED PANEL
    PROPERTIES(r) captionDishRecipe, numberRecipe, beginDateRecipe, isUsedRecipe, notesRecipe, outWeightRecipe

    OBJECTS rd=recipeDetail
    PROPERTIES(rd) nameComponentRecipeDetail, normQuantityRecipeDetail, ADDOBJ, delete

    FILTERS inRecipeRecipeDetail(r, rd)

    EDIT recipe OBJECT r
;

FORM recipes 'Рецепты блюд'
    OBJECTS r=recipe
    PROPERTIES(r)  READONLY captionDishRecipe, numberRecipe, isUsedRecipe
    PROPERTIES(r)  ADDFORM, EDITFORM, delete

    OBJECTS rd=recipeDetail
    PROPERTIES(rd) READONLY nameComponentRecipeDetail, normQuantityRecipeDetail

    FILTERS   inRecipeRecipeDetail(r, rd)
;
//---------------------------- Документы качества ----------------------------------------//

CLASS ABSTRACT paper 'Документы качества' : named;
TABLE paper(paper);


CLASS customsCertificate 'Таможенный сертификат' : paper;
CLASS certificateGGR 'Удостоверение о ГГР' : paper;
CLASS certificateConformity 'Сертификат соответствия' : paper;
CLASS stateExamination 'Акт гос. сан.-гиг. экспертизы' : paper;

numberPaper 'Номер документа' (paper) = DATA STRING[30] (paper) IN baseGroup;
datePaper 'Дата документа' (paper) = DATA DATE (paper) IN baseGroup;
dateToPaper 'Срок действия' (paper) = DATA DATE (paper) IN baseGroup;
holderPaper 'Держатель ИД' (paper) = DATA legalEntity (paper) IN idGroup;
nameHolderPaper 'Наименование держателя' (paper) = name(holderPaper(paper)) IN baseGroup;
issuedPaper 'Документ выдал ИД' (paper) = DATA legalEntity (paper) IN idGroup;
nameIssuedPaper 'Наименование органа, выдавшего документ' (paper) = name(issuedPaper(paper)) IN baseGroup;

FORM paper 'Документ качества'
    OBJECTS p=paper FIXED PANEL
    PROPERTIES(p) numberPaper, datePaper, dateToPaper, nameHolderPaper, nameIssuedPaper

    EDIT paper OBJECT p
    EDIT customsCertificate OBJECT p
    EDIT certificateGGR OBJECT p
    EDIT certificateConformity OBJECT p
    EDIT stateExamination OBJECT p
;

DESIGN paper FROM DEFAULT {

    NEW row BEFORE functions.box{
        childConstraints = TO THE BOTTOM;

        NEW row1 {
            title = 'Шапка документа';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY(numberPaper(p));
            ADD PROPERTY(datePaper(p));
            ADD PROPERTY(dateToPaper(p));
        }
        NEW row2 {
            title = 'Организации';
            childConstraints = TO THE BOTTOM;
            ADD PROPERTY(nameHolderPaper(p));
            ADD PROPERTY(nameIssuedPaper(p));
        }
    }
}

FORM papers 'Документы качества'
    OBJECTS p=paper
    PROPERTIES(p)  objectClassName, numberPaper, datePaper, dateToPaper, nameHolderPaper, nameIssuedPaper
    PROPERTIES(p)  ADDFORM, EDITFORM, delete
    ORDER BY objectClassName
;

//---------------------------- Товар на оборудовании ----------------------------------------//

CLASS stage 'Ячейка';
TABLE stage(stage);
TABLE stageGroupMachinery(stage, groupMachinery);

valueStage 'Ячейка' = DATA INTEGER (stage) IN baseGroup;
barcodeStageGroupMachinery 'Штрих-код ИД' = DATA barcode (stage, groupMachinery) IN idGroup;
priceStageGroupMachinery 'Розничная цена для штрих-кода' (stage, groupMachinery) = DATA NUMERIC[14,2] (stage, groupMachinery) IN baseGroup;
dateStageGroupMachinery 'Дата истечения срока годности' (stage, groupMachinery) = DATA DATE (stage, groupMachinery) IN baseGroup;
timeStageGroupMachinery 'Время истечения срока годности' (stage, groupMachinery) = DATA INTEGER (stage, groupMachinery) IN baseGroup;
stockStageGroupMachinery 'Остаток на момент передачи' (stage, groupMachinery) = DATA NUMERIC[14,3] (stage, groupMachinery) IN baseGroup;

barcodeBarcodeStageGroupMachinery 'Штрих-код' (stage, groupMachinery) = barcodeEx(barcodeStageGroupMachinery(stage, groupMachinery)) IN baseGroup;
//nameSkuBarcodeStageGroupMachinery 'Товар' (stage, groupMachinery) = nameSkuBarcode(barcodeStageGroupMachinery(stage, groupMachinery)) IN baseGroup;
//titleScalesBarcodeStageGroupMachinery 'Наименование для весов' (stage, groupMachinery) = titleScalesBarcode(barcodeStageGroupMachinery(stage, groupMachinery));
//titleCashBarcodeStageGroupMachinery 'Наименование для касс' (stage, groupMachinery) = titleCashBarcode(barcodeStageGroupMachinery(stage, groupMachinery));
//amountBarcodeStageGroupMachinery 'Количество (сколько списать при продаже)' (stage, groupMachinery) = amountBarcode(barcodeStageGroupMachinery(stage, groupMachinery));
//removeBarcodeStageGroupMachinery 'Заблокирован (удален с оборудования)' (stage, groupMachinery) = removeBarcode(barcodeStageGroupMachinery(stage, groupMachinery));
//commentRemoveBarcodeStageGroupMachinery 'Причина блокировки' (stage, groupMachinery) = commentRemoveBarcode(barcodeStageGroupMachinery(stage, groupMachinery));

FORM stages 'Товары на оборудовании'
OBJECTS gr=groupMachinery
OBJECTS st=stage
PROPERTIES(gr) READONLY nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery
PROPERTIES(st) valueStage
PROPERTIES(st, gr)  barcodeBarcodeStageGroupMachinery, priceStageGroupMachinery, dateStageGroupMachinery,
                    timeStageGroupMachinery, stockStageGroupMachinery
FILTERS  barcodeStageGroupMachinery(st, gr);

//---------------------------- Ценовые регистры ----------------------------------------//

CLASS ABSTRACT importerPriceLedger 'Изменение цены изготовителя/импортера';
TABLE importerPriceLedger (importerPriceLedger);

CLASS ABSTRACT supplierPriceLedger 'Изменение цены поставщика';
TABLE supplierPriceLedger (supplierPriceLedger);

CLASS ABSTRACT retailVATLedger 'Изменение НДС';
TABLE retailVATLedger (retailVATLedger);

CLASS ABSTRACT accountPriceLedger 'Изменение учетной цены';
TABLE accountPriceLedger (accountPriceLedger);

CLASS ABSTRACT retailPriceLedger 'Изменение розничной цены';
TABLE retailPriceLedger (retailPriceLedger);

CLASS ABSTRACT warePriceLedger 'Изменение цены посуды' : importerPriceLedger; // todo : смотри выше
TABLE warePriceLedger (warePriceLedger);

//---------------------------- Количественные регистры ----------------------------------------//

CLASS ABSTRACT balanceItemLedger 'Изменение остатка по товару';
TABLE balanceItemLedger (balanceItemLedger);

CLASS ABSTRACT inBalanceItemLedger 'Приход' : balanceItemLedger;
CLASS ABSTRACT outBalanceItemLedger 'Расход' : balanceItemLedger;

CLASS ABSTRACT batch 'Партия' : inBalanceItemLedger, importerPriceLedger; // todo : смотри выше

CLASS ABSTRACT outUserBalanceItemLedger 'Внешний расход с указанной партией' : outBalanceItemLedger;
CLASS ABSTRACT outAutoBalanceItemLedger 'Внешний расход с автоматической себестоимостью' : outBalanceItemLedger;

CLASS ABSTRACT inAutoBalanceItemLedger 'Внутренний приход с автоматической себестоимостью' : inBalanceItemLedger;

//---------------------------- Разные маркеры ----------------------------------------//

CLASS ABSTRACT salesLedger 'Продажа товара' : balanceItemLedger;

//---------------------------- Суммовые регистры ----------------------------------------//

CLASS ABSTRACT accountSumDocumentLedger 'Учетный документ';
TABLE accountSumDocumentLedger (accountSumDocumentLedger);

CLASS ABSTRACT incAccountSumDocumentLedger 'Учетный документ (приход)' : accountSumDocumentLedger;
CLASS ABSTRACT outAccountSumDocumentLedger 'Учетный документ (расход)' : accountSumDocumentLedger;

CLASS ABSTRACT incAccountSumHistoryDocumentLedger 'Учетный документ (приход, с историей)' : incAccountSumDocumentLedger, historyObject;
CLASS ABSTRACT outAccountSumHistoryDocumentLedger 'Учетный документ (расход, с историей)' : outAccountSumDocumentLedger, historyObject;

//---------------------------- Накладные ----------------------------------------//

CLASS ABSTRACT consignment 'Накладная' : outAccountSumDocumentLedger; // todo : чит, чтобы правильно считался getClassWhere и не падал в локальный минимум
CLASS ABSTRACT consignmentDetail 'Строка накладной' : outBalanceItemLedger; // todo : тоже самое

//---------------------------- Переоценка (абстрактные классы) ----------------------------------------//

CLASS ABSTRACT priceChangeDocument 'Акт переоценки' : incAccountSumDocumentLedger;
TABLE priceChangeDocument (priceChangeDocument);

CLASS ABSTRACT priceChangeDocumentDetail 'Строка переоценки';
TABLE priceChangeDocumentDetail (priceChangeDocumentDetail);

//---------------------------- Загрузка в ВУ  ----------------------------------------//
CLASS ABSTRACT priceTransactionDocument 'Документ, требующий загрузки в оборудование';
TABLE priceTransactionDocument (priceTransactionDocument);

//---------------------------- Карты проработки (разруба) ----------------------------------------//
GROUP cutGroup 'Разделка' : baseGroup;
GROUP actGroup 'Акт' : publicGroup;
GROUP itemStudyOutputDetailInfo 'Ценовый характеристики п/ф' : publicGroup;

CLASS cutting 'Карта проработки (разделки)' : named, numeratedObject;
TABLE cutting (cutting);

CLASS cuttingDetail 'Компонента';
TABLE cuttingDetail (cuttingDetail);

dateCutting 'Дата создания' = DATA DATE (cutting) IN cutGroup;
dateCutting(cutting) <- currentDate() WHEN ASSIGNED(cutting IS cutting);

useCutting 'Используется' = DATA BOOLEAN (cutting) IN cutGroup;
descriptionCutting 'Описание' = DATA STRING[200] (cutting) IN cutGroup;

percAllowancesCutting 'Процент надбавок, %' = DATA NUMERIC[8,3] (cutting) IN cutGroup;
percLossesCutting 'Процент потерь, %' = DATA NUMERIC[8,3] (cutting) IN cutGroup;
percSweepsCutting 'Процент зачисток, %' = DATA NUMERIC[8,3] (cutting) IN cutGroup;

inDepartmentStoreCutting 'В каких подразделениях разрешено использовать карту' = DATA BOOLEAN (departmentStore, cutting) IN baseGroup;

@defineDocumentRelation(cutting);
@defineDocumentDetailItem(cutting);

factorCuttingDetail 'Рассчетный коэффициент цены' = DATA NUMERIC[8,3] (cuttingDetail) IN cutGroup;
percGoodsCuttingDetail '% выхода компонента (п/ф)' = DATA NUMERIC[8,3] (cuttingDetail) IN cutGroup;

notTotalPercGoodsCuttingDetail (cutting) = GROUP SUM percGoodsCuttingDetail(cuttingDetail) BY cuttingCuttingDetail(cuttingDetail);
totalPercGoodsCutting 'Итого % выхода по карте проработки (разделки)' (cutting) = notTotalPercGoodsCuttingDetail(cutting) (+)
    percLossesCutting(cutting) (+) percSweepsCutting(cutting);
highlightCutting(cutting) = totalPercGoodsCutting(cutting) > 100;

inItemCutting 'Вкл.' = DATA BOOLEAN (item, cutting) IN cutGroup;

FORM cutting 'Карта проработки'
    OBJECTS c=cutting FIXED PANEL
    OBJECTS d=cuttingDetail
    PROPERTIES(c)      nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, descriptionCutting, dateCutting,
                       useCutting, percAllowancesCutting, percLossesCutting, percSweepsCutting
    PROPERTIES(c)      totalPercGoodsCutting TODRAW d FORCE PANEL  BACKGROUND highlightCutting(c)


    PROPERTIES(d)      nameAttributeItemCuttingDetail, shortNameUnitOfMeasureItemCuttingDetail, factorCuttingDetail, percGoodsCuttingDetail, ADDOBJ, delete

    TREE treeStore a=STRING[3], t=tradingNetwork, st=storeType, s=store
        PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
        FILTERS stringEqualsAll(a), inTradingNetworkStoreType (t, st), inStoreTypeStore(st, s)

        OBJECTS dep=departmentStore
        PROPERTIES(dep) READONLY depName = name
        FILTERS inTradingNetworkStoreTypeStoreDepartment(t, st, s, dep)
        ORDER BY depName

    TREE treeGroup g=itemGroup PARENT parentItemGroup
        PROPERTIES READONLY gname = name(g)
        ORDER BY gname

        OBJECTS i=item
        PROPERTIES READONLY barcodeBarcodeSku(i), nameAttributeItemGroupItem(g, i), shortNameUnitOfMeasureItem(i), nameBrandItem(i)
        FILTERS nameAttributeItemGroupItem(g, i)
        ORDER BY nameAttributeItemGroupItem

    PROPERTIES(dep, c) inDepartmentStoreCutting
    PROPERTIES(i, c)   inItemCutting

    FILTERS inCuttingCuttingDetail(c, d)
    FILTERGROUP filters7
        FILTER 'Показывать подразделения только для данной карты' 'F10' inDepartmentStoreCutting(dep, c)
    FILTERGROUP filters8
        FILTER 'Показывать товар только для данной карты' 'F9' inItemCutting(i, c)

    EDIT cutting OBJECT c
;

DESIGN cutting FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW cut.box BEFORE functions.box{
            type = TABBED;
            ADD d.box;
            NEW caseOneBox {
                title = 'Подразделение';

                ADD treeStore.box {
                    fillHorizontal = 1;
                };
                ADD dep.box {
                    fillHorizontal = 2;
                };
                POSITION treeStore.box TO THE LEFT dep.box;
            }
            NEW caseTwoBox { title = 'Товар, для которого действует карта';
                ADD treeGroup.box {
                    fillHorizontal = 1;
                };
                ADD i.box {
                    fillHorizontal = 2;
                };
                POSITION treeGroup.box TO THE LEFT i.box;
            }
        }
    }
}

FORM cuttings 'Карты проработки'
    OBJECTS c=cutting
    PROPERTIES(c)      READONLY numberObject, seriesObject, descriptionCutting, dateCutting, useCutting, percAllowancesCutting,
                       percLossesCutting, percSweepsCutting
    PROPERTIES(c)      ADDFORM, EDITFORM, delete

    OBJECTS d=cuttingDetail
    PROPERTIES(d)      READONLY nameAttributeItemCuttingDetail, shortNameUnitOfMeasureItemCuttingDetail, factorCuttingDetail, percGoodsCuttingDetail

    OBJECTS dep=departmentStore
    PROPERTIES(dep)    READONLY nameStoreDepartmentStore, name

    OBJECTS i=item
    PROPERTIES(i)      READONLY barcodeBarcodeSku, nameAttributeItem, shortNameUnitOfMeasureItem, nameBrandItem

    PROPERTIES(dep, c) READONLY inDepartmentStoreCutting

    PROPERTIES(i, c) READONLY inItemCutting

    FILTERS   inCuttingCuttingDetail(c, d),
              inDepartmentStoreCutting(dep, c),
              inItemCutting(i, c)
    ORDER BY           nameStoreDepartmentStore, seriesObject, numberObject, nameAttributeItemCuttingDetail, name
    FILTERGROUP filters1
        FILTER 'Только используемые' 'F10' useCutting(c) DEFAULT

;


DESIGN cuttings FROM DEFAULT {
    main{

       NEW cut2.box BEFORE functions.box{
            ADD dep.box { title = 'Подразделение'; }

            ADD i.box { title = 'Товар, для которого действует карта'; }
            POSITION dep.box TO THE LEFT i.box;
       }
       NEW cut1.box BEFORE cut2.box{
            ADD d.box;

       }
   }
}

FORM seriesNumberCuttingStudyInputDetail 'Возможные карты проработки'
    OBJECTS dep=departmentStore FIXED PANEL, i=item FIXED PANEL

    PROPERTIES         READONLY depName = name(dep)
    PROPERTIES         READONLY nameAttributeItem(i)

    OBJECTS c=cutting
    PROPERTIES(c)      READONLY seriesNumberObject, descriptionCutting, dateCutting, useCutting, percAllowancesCutting, percLossesCutting,
                       percSweepsCutting, totalPercGoodsCutting

    FILTERS            inDepartmentStoreCutting(dep, c),
                       inItemCutting(i, c),
                       useCutting(c)
;

DESIGN seriesNumberCuttingStudyInputDetail FROM DEFAULT {
    PROPERTY(depName) {
        focusable = FALSE;
    }
    PROPERTY(nameAttributeItem) {
        focusable = FALSE;
    }
}

// Акты проработки

CLASS actOfStudy 'Акт проработки (разделки)' : historyObject, numeratedObject, priceTransactionDocument;
TABLE actOfStudy (actOfStudy);

CLASS actOfStudyPosted 'Акт проработки закрытый' : actOfStudy, postedObject;

// шапка дакта
@defineDocumentHeaderTime(actOfStudy);
@defineDocumentHeaderDepartmentStore(actOfStudy);
@defineDocumentHeaderPosted (actOfStudy);

CLASS studyInputDetail 'Строка проработки (вход)' : outAutoBalanceItemLedger;
TABLE studyInputDetail(studyInputDetail);

CLASS studyOutputDetail 'Строка проработки (выход)' : batch, importerPriceLedger, supplierPriceLedger, retailVATLedger, accountPriceLedger, retailPriceLedger;
TABLE studyOutputDetail(studyOutputDetail);

// строки расхода
@defineDocumentRelationCustom(actOfStudy, studyInputDetail);

@defineDocumentDetailDepartmentStoreCustom(actOfStudy, studyInputDetail);
@defineDocumentDetailTimeCustom(actOfStudy, studyInputDetail);

@defineDocumentDetailItem(studyInput);

@defineDocumentDetailQuantity(studyInput);
@defineDocumentDetailBasePrice(studyInput);

@defineDocumentDetailWareSum(studyInput);
@defineDocumentDetailInSum(studyInput);
@defineDocumentDetailOutSum(studyInput);

@defineDocumentDetailPostedCustom(actOfStudy, studyInputDetail);

@defineDocumentHeaderQuantityCustom(actOfStudy, studyInputDetail);
@defineDocumentHeaderItemQuantityCustom(actOfStudy, studyInputDetail);

@defineDocumentHeaderWareSumCustom(actOfStudy, studyInputDetail);
@defineDocumentHeaderOutSumCustom(actOfStudy, studyInputDetail);
@defineDocumentHeaderItemSumCustom(actOfStudy, studyInputDetail);

// custom информация по акту
contractorDepartmentStoreActOfStudy (actOfStudy)= DATA departmentStore (actOfStudy) IN idGroup;
nameContractorDepartmentStoreActOfStudy 'Отдел-контрагент' (actOfStudy) = name(contractorDepartmentStoreActOfStudy(actOfStudy)) IN documentPrmGroup;

numberOutputActOfStudy 'Номер расходной накладной' (actOfStudy) = DATA STRING[7] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 7;
seriesOutputActOfStudy 'Серия расходной накладной' (actOfStudy) = DATA STRING[2] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 3;

numberInputActOfStudy 'Номер приходной накладной' (actOfStudy) = DATA STRING[7] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 7;
seriesInputActOfStudy 'Серия приходной накладной' (actOfStudy) = DATA STRING[2] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 3;

descriptionActOfStudy 'Название документа' (actOfStudy) =
    [FORMULA STRING[200] '\'Акт разруба \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'] (
    seriesNumberObject(actOfStudy), dateActOfStudy(actOfStudy), nameContractorDepartmentStoreActOfStudy(actOfStudy));

cuttingStudyInputDetail = DATA cutting (studyInputDetail) IN idGroup;
seriesNumberCuttingStudyInputDetail 'Номер карты' (studyInputDetail) = seriesNumberObject(cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
dateCuttingStudyInputDetail 'Дата создания карты' (studyInputDetail) = dateCutting(cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
descriptionCuttingStudyInputDetail 'Описание' (studyInputDetail) = descriptionCutting(cuttingStudyInputDetail(studyInputDetail)) IN actGroup MINCHARWIDTH 20 PREFCHARWIDTH 20;

percAllowancesCuttingStudyInputDetail 'Процент надбавок, %' (studyInputDetail) = percAllowancesCutting(cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
percLossesCuttingStudyInputDetail 'Процент потерь, %' (studyInputDetail) = percLossesCutting (cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
percSweepsCuttingStudyInputDetail 'Процент зачисток, %' (studyInputDetail) = percSweepsCutting (cuttingStudyInputDetail(studyInputDetail)) IN actGroup;

// строки расхода

studyInputDetailStudyOutputDetail = DATA studyInputDetail (studyOutputDetail) IN idGroup;
actOfStudyStudyOutputDetail(studyOutputDetail) = actOfStudyStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail)) PERSISTENT;

@defineDocumentDetailDepartmentStoreCustom(actOfStudy, studyOutputDetail);
@defineDocumentDetailTimeCustom(actOfStudy, studyOutputDetail);

@defineDocumentDetailItem(studyOutput);

factorStudyOutputDetail 'Рассчетный коэффициент цены' = DATA NUMERIC[8,3] (studyOutputDetail) IN actGroup;
percGoodsStudyOutputDetail '% выхода компонента (п/ф)' = DATA NUMERIC[10,5] (studyOutputDetail) IN actGroup;

percAllowancesStudyOutputDetail 'Процент надбавок, %' = DATA NUMERIC[8,3] (studyOutputDetail) IN actGroup;
overPercAllowancesStudyOutputDetail (studyOutputDetail) = UNION OVERRIDE 0 IF studyOutputDetail IS studyOutputDetail,
                                                                         percAllowancesStudyOutputDetail(studyOutputDetail);

calculatedStudyOutputDetail 'Количество выхода п/ф' (studyOutputDetail) =  [X*Y/100]
    (quantityStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail)), percGoodsStudyOutputDetail(studyOutputDetail));

actualQuantityStudyOutputDetail 'Фактический выход п/ф'(studyOutputDetail) = DATA NUMERIC[14,3] (studyOutputDetail);
quantityStudyOutputDetail(studyOutputDetail) = UNION OVERRIDE calculatedStudyOutputDetail(studyOutputDetail),
                                                              actualQuantityStudyOutputDetail(studyOutputDetail);

@defineDocumentDetailBasePrice(studyOutput);
@defineDocumentDetailCurBasePrice(studyOutput);

@defineDocumentDetailWareSum(studyOutput);
@defineDocumentDetailInSum(studyOutput);
@defineDocumentDetailOutSum(studyOutput);

@defineDocumentDetailPostedCustom(actOfStudy, studyOutputDetail);

@defineDocumentHeaderQuantityCustom(actOfStudy, studyOutputDetail);
@defineDocumentHeaderItemQuantityCustom(actOfStudy, studyOutputDetail);

@defineDocumentHeaderWareSumCustom(actOfStudy, studyOutputDetail);
@defineDocumentHeaderOutSumCustom(actOfStudy, studyOutputDetail);
@defineDocumentHeaderItemSumCustom(actOfStudy, studyOutputDetail);

// используется для закачки в мета-коде
quantityActOfStudyDetailItemActOfStudy 'Кол-во для закачки в оборудование' (item, actOfStudy) = GROUP SUM quantityStudyOutputDetail(studyOutputDetail) BY itemStudyOutputDetail(studyOutputDetail), actOfStudyStudyOutputDetail(studyOutputDetail);

notTotalPercGoodsStudyInputDetail (studyInputDetail)= GROUP SUM percGoodsStudyOutputDetail(studyOutputDetail) BY studyInputDetailStudyOutputDetail(studyOutputDetail);
totalPercGoodsStudyInputDetail 'Итого % выхода по товару' (studyInputDetail) = notTotalPercGoodsStudyInputDetail(studyInputDetail) (+)
    percLossesCuttingStudyInputDetail(studyInputDetail)(+) percSweepsCuttingStudyInputDetail(studyInputDetail);
highlightStudyInputDetail(studyInputDetail) = totalPercGoodsStudyInputDetail(studyInputDetail) > 100;

roundImporterPriceStudyOutputDetail 'Расчетная цена импортера' (studyOutputDetail) = round2(
    importerPriceStudyInputDetail (studyInputDetailStudyOutputDetail(studyOutputDetail)) * factorStudyOutputDetail(studyOutputDetail));

roundSupplierPriceStudyOutputDetail 'Расчетная цена поставщика' (studyOutputDetail) = round2(
    supplierPriceStudyInputDetail (studyInputDetailStudyOutputDetail(studyOutputDetail)) * factorStudyOutputDetail(studyOutputDetail));

roundRetailPriceStudyOutputDetail 'Расчетная розничная цена' (studyOutputDetail) = roundM1([X*Y*(100+Z)/100]
    (retailPriceStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail)), factorStudyOutputDetail(studyOutputDetail), overPercAllowancesStudyOutputDetail(studyOutputDetail)));

toFillStudyOutputDetailsStudyInputDetail 'Заполнить данные для п/ф' (studyInputDetail) =  ACTION (studyInputDetail) {
    FOR cuttingCuttingDetail(cuttingDetail) == cuttingStudyInputDetail(studyInputDetail) DO {
        ADDOBJ studyOutputDetail;
        FOR sod == addedObject() DO {
            SET itemStudyOutputDetail(sod) <- itemCuttingDetail(cuttingDetail);
            SET factorStudyOutputDetail(sod) <- factorCuttingDetail(cuttingDetail);
            SET percGoodsStudyOutputDetail(sod) <- percGoodsCuttingDetail(cuttingDetail);
            SET percAllowancesStudyOutputDetail(sod) <- percAllowancesCutting(cuttingCuttingDetail(cuttingDetail));
            SET retailPriceStudyOutputDetail(sod) <- roundRetailPriceStudyOutputDetail(sod);
            SET importerPriceStudyOutputDetail(sod) <- roundImporterPriceStudyOutputDetail(sod);
            SET supplierPriceStudyOutputDetail(sod) <- roundSupplierPriceStudyOutputDetail(sod);
            SET retailRangeStudyOutputDetail(sod) <- retailRangeStudyInputDetail(studyInputDetailStudyOutputDetail(sod));
        };
    }
} CONFIRM;

showNotStudyInputDetailStudyOutputDetail(studyInputDetail, studyOutputDetail) = studyInputDetail IS studyInputDetail AND NOT studyInputDetailStudyOutputDetail(studyOutputDetail);

cleanAllStudyInputDetail 'Очистить позиции' = ACTION (studyInputDetail) {
    FOR studyInputDetailStudyOutputDetail(studyOutputDetail) == studyInputDetail DO {
        EXEC delete(studyOutputDetail AS studyOutputDetail);
    }
} CONFIRM;

//---------------------------- Документы изменяющие суммы при разрубе --------------------------------//

//  приходный документ //

CLASS parish 'Приходный документ (разруб)' : incAccountSumDocumentLedger;
TABLE parish (parish);

isActOfStudy(actOfStudy) = actOfStudy IS actOfStudy;

         //  приходный документ //
@metaCodeSingleAggregation(actOfStudy, parish, isActOfStudy);

dateParish (parish) = dateActOfStudy(actOfStudyParish(parish));
dateTimeParish 'Дата/время' (parish) = dateTimeActOfStudy(actOfStudyParish(parish));
seriesNumberParish 'Серия/Номер' (parish) = seriesNumberObject(actOfStudyParish(parish));
isPostedParish (parish) = isPostedActOfStudy(actOfStudyParish(parish));
departmentStoreParish (parish) = departmentStoreActOfStudy(actOfStudyParish(parish));

contractorDepartmentStoreParish (parish) = contractorDepartmentStoreActOfStudy(actOfStudyParish(parish));
nameContractorDepartmentStoreParish 'Отдел поставки' (parish) = name(contractorDepartmentStoreParish(parish));

retailSumParish 'Сумма прихода' (parish) = retailSumStudyOutputDetailActOfStudy(actOfStudyParish(parish));

descriptionParish 'Название документа' (parish) =
    [FORMULA STRING[200] '\'Акт разруба приход \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberParish(parish), dateParish(parish), nameContractorDepartmentStoreParish(parish)) PERSISTENT;

descriptionStudyOutputDetail 'Название документа' (studyOutputDetail) = descriptionParish(uniqueParish(actOfStudyStudyOutputDetail(studyOutputDetail))) PERSISTENT;

//  расходный документ //

CLASS consumption 'Расходный документ (разруб)' : outAccountSumDocumentLedger;
TABLE consumption (consumption);

@metaCodeSingleAggregation(actOfStudy, consumption, isActOfStudy);

dateConsumption (consumption) = dateActOfStudy(actOfStudyConsumption(consumption));
dateTimeConsumption 'Дата/время' (consumption) = dateTimeActOfStudy(actOfStudyConsumption(consumption));
seriesNumberConsumption 'Серия/Номер' (consumption) = seriesNumberObject(actOfStudyConsumption(consumption));
isPostedConsumption (consumption) = isPostedActOfStudy(actOfStudyConsumption(consumption));
departmentStoreConsumption (consumption) = departmentStoreActOfStudy(actOfStudyConsumption(consumption));

contractorDepartmentStoreConsumption (consumption) = contractorDepartmentStoreActOfStudy(actOfStudyConsumption(consumption));
nameContractorDepartmentStoreConsumption 'Отдел назначения' (consumption) = name(contractorDepartmentStoreConsumption(consumption));

retailSumConsumption 'Сумма расхода' (consumption) = retailSumStudyInputDetailActOfStudy(actOfStudyConsumption(consumption));

descriptionConsumption 'Название документа' (consumption) =
    [FORMULA STRING[200] '\'Акт разруба расход \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberConsumption(consumption), dateConsumption(consumption), nameContractorDepartmentStoreConsumption(consumption));

descriptionStudyInputDetail 'Название документа' (studyInputDetail) = descriptionConsumption(uniqueConsumption(actOfStudyStudyInputDetail(studyInputDetail))) PERSISTENT;

showSeriesNumberCuttingStudyInputDetail 'Карта проработки' = ACTION (detail) {
    FORM seriesNumberCuttingStudyInputDetail OBJECTS dep=departmentStoreStudyInputDetail(detail), i=itemStudyInputDetail(detail) MODAL;
    IF formResult() == formResult.ok THEN {
        SET cuttingStudyInputDetail(detail) <- chosenObject('c');
    }
} SHORTCUT seriesNumberCuttingStudyInputDetail DEFAULT;


//---------------------------- Проведение инвентаризации ----------------------------------------//

CLASS STATIC typeOfAddition 'Тип инвентаризации' {
    register 'Товары из описей',
    remains 'Товары по остаткам',
    many    'Множество товаров'
};

// Документ инвентаризации

CLASS inventory 'Инвентаризация (открытая)' : historyObject, numeratedObject;
TABLE inventory (inventory);

CLASS inventoryPosted 'Инвентаризация (закрытая)' : inventory, postedObject;

@defineDocumentHeaderPosted (inventory) ;

@defineDocumentHeaderTime(inventory);
@defineDocumentHeaderNote(inventory);

nameInventory 'Название инвентаризации' = DATA STRING[100] (inventory) IN documentPrmGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
infoInventory 'Дополнительная информация по инвентаризации' = DATA STRING[500] (inventory) IN documentPrmGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;

includeDepartmentStoreInventory 'Вкл' = DATA BOOLEAN (departmentStore, inventory) IN inventoryGroup;
nameDepartmentInventory 'Отделы документа' (inventory) =
    GROUP CONCAT name(departmentStore) IF includeDepartmentStoreInventory(departmentStore, inventory), ', ' BY inventory IN inventoryGroup MINCHARWIDTH 50 PREFCHARWIDTH 150;

typeOfAdditionInventory(inventory) = DATA typeOfAddition (inventory);
nameTypeOfAdditionInventory 'Тип инвентаризации' (inventory) = name(typeOfAdditionInventory(inventory)) IN documentPrmGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;

userTypeOfAdditionDepartmentStoreInventory(departmentStore, inventory) = DATA typeOfAddition (departmentStore, inventory);
nameUserTypeOfAdditionDepartmentStoreInventory 'Тип инвентаризации' (departmentStore, inventory) = name(userTypeOfAdditionDepartmentStoreInventory(departmentStore, inventory)) IN inventoryGroup;

typeOfAdditionDepartmentStoreInventory(departmentStore, inventory) = UNION OVERRIDE typeOfAdditionInventory(inventory) AND departmentStore IS departmentStore,
                                                                                    userTypeOfAdditionDepartmentStoreInventory(departmentStore, inventory);

CONSTRAINT includeDepartmentStoreInventory(departmentStore, inventory) AND NOT typeOfAdditionDepartmentStoreInventory(departmentStore, inventory) MESSAGE 'Ошибка: обязательно задавать тип сличительной ведомости для выбранного отдела';
userTypeOfAdditionDepartmentStoreInventory(departmentStore, inventory) => includeDepartmentStoreInventory(departmentStore, inventory) RESOLVE FALSE;

CLASS listInventory 'Опись (открытая)';
TABLE listInventory (listInventory);

CLASS listInventoryPosted 'Опись (закрытая)' : listInventory, postedObject;

@defineDocumentHeaderPosted(listInventory);
@defineDocumentHeaderDepartmentStore(listInventory);
@defineDocumentHeaderNote(listInventory);

@defineDocumentRelationCustom(inventory, listInventory);
@defineDocumentDetailIndexCustom(inventory, listInventory);

nameInventoryListInventory 'Название инвентаризации' (listInventory) = nameInventory(inventoryListInventory(listInventory)) IN listInventoryGroup;
nameListInventory 'Номер описи' (listInventory) = [FORMULA STRING[30] '$1 || CAST ($2 AS character(20))']
                                                  ('Опись ', indexListInventory(listInventory)) IN listInventoryGroup;

committeeListInventory(listInventory) = DATA inventoryCommittee (listInventory) IN idGroup;
nameCommitteeListInventory 'Название комиссии' (listInventory) = commonName(committeeListInventory(listInventory)) IN inventoryCommitteeGroup;
nameChairmanCommitteeListInventory 'Председатель комиссии' (listInventory) = nameChairmanCommittee(committeeListInventory(listInventory)) IN inventoryCommitteeGroup;
nameEmployeeListInventory 'Члены комиссии' (listInventory) = nameEmployeeCommittee(committeeListInventory(listInventory)) IN inventoryCommitteeGroup;

CLASS pageInventory 'Страница описи';
TABLE pageInventory (pageInventory);

@defineDocumentHeaderNote(pageInventory);

@defineDocumentRelationCustom(listInventory, pageInventory);
@defineDocumentDetailIndexCustom(listInventory, pageInventory);

namePageInventory 'Номер страницы' (pageInventory) = [FORMULA STRING[30] '$1 || CAST ($2 AS character(20))']
                                           ('Страница ', indexPageInventory(pageInventory)) IN baseGroup;

CLASS pageInventoryDetail 'Строка';
TABLE pageInventoryDetail (pageInventoryDetail);

@defineDocumentRelation(pageInventory);

listInventoryPageInventoryDetail(pageInventoryDetail) = listInventoryPageInventory(pageInventoryPageInventoryDetail(pageInventoryDetail)) PERSISTENT;
departmentStorePageInventoryDetail(pageInventoryDetail) = departmentStoreListInventory(listInventoryPageInventoryDetail(pageInventoryDetail)) PERSISTENT;
inventoryPageInventoryDetail(pageInventoryDetail) = inventoryListInventory(listInventoryPageInventoryDetail(pageInventoryDetail)) PERSISTENT;

dateTimePageInventoryDetail(pageInventoryDetail) = dateTimeInventory(inventoryPageInventoryDetail(pageInventoryDetail)) PERSISTENT;

barcodePageInventoryDetail(pageInventoryDetail) = DATA barcode (pageInventoryDetail) IN idGroup;

barcodeExPageInventoryDetail 'Штрих-код' (pageInventoryDetail) = barcodeEx(barcodePageInventoryDetail(pageInventoryDetail));
itemPageInventoryDetail (pageInventoryDetail) =  skuBarcode(barcodePageInventoryDetail(pageInventoryDetail));
nameAttributeItemPageInventoryDetail 'Товар' (pageInventoryDetail) = nameAttributeItem(itemPageInventoryDetail(pageInventoryDetail)) IN recognizeGroup;

@defineDocumentDetailIndex(pageInventory);

@defineDocumentDetailQuantity(pageInventory);
@defineDocumentDetailAccountPrice(pageInventory);
@defineDocumentDetailAccountSum(pageInventory);

@defineDocumentHeaderQuantity(pageInventory);
@defineDocumentHeaderAccountSum(pageInventory);

// Сличительная ведомость

CLASS ABSTRACT collationSheet 'Сличительная ведомость' : outAccountSumDocumentLedger;
TABLE collationSheet (collationSheet);

CLASS registerCollationSheet 'Сличительная ведомость по описи' : collationSheet;
CLASS remainsCollationSheet 'Сличительная ведомость по остаткам' : collationSheet;
CLASS manyCollationSheet 'Сличительная ведомость по множеству товаров' : collationSheet;

@defineDocumentHeaderDepartmentStore(collationSheet);

@defineDocumentRelationCustom(inventory, collationSheet);

@defineDocumentDetailPostedCustom(inventory, collationSheet);
@defineDocumentDetailIndexCustom(inventory, collationSheet);
@defineDocumentDetailTimeCustom(inventory, collationSheet);

nameInventoryCollationSheet 'Название инвентаризации' (collationSheet) = nameInventory(inventoryCollationSheet(collationSheet)) IN collationSheetGroup;

nameCollationSheet 'Внутренний номер' (collationSheet) = [FORMULA STRING[30] '$1 || \'-\' || CAST ($2 AS character(20))'](
        seriesNumberObject(inventoryCollationSheet(collationSheet)),
        indexCollationSheet(collationSheet)) IN collationSheetGroup;

uniqueCollationSheetDepartmentStoreInventory 'Сличительная ведомость по складу и инвентаризации' (departmentStore, inventory) =
    GROUP UNIQUE collationSheet BY departmentStoreCollationSheet(collationSheet), inventoryCollationSheet(collationSheet);
collationSheetListInventory(listInventory) = uniqueCollationSheetDepartmentStoreInventory(departmentStoreListInventory(listInventory), inventoryListInventory(listInventory));
nameCollationSheetListInventory 'Название сл. ведомости' (listInventory) = nameCollationSheet(collationSheetListInventory(listInventory)) IN listInventoryGroup;

collationSheetPageInventoryDetail (pageInventoryDetail) = collationSheetListInventory(listInventoryPageInventoryDetail(pageInventoryDetail)) PERSISTENT;

typeOfAdditionCollationSheet(collationSheet)= typeOfAdditionDepartmentStoreInventory(departmentStoreCollationSheet(collationSheet), inventoryCollationSheet(collationSheet));
nameTypeOfAdditionCollationSheet 'Тип сличительной ведомости' (collationSheet) = name(typeOfAdditionCollationSheet(collationSheet)) IN baseGroup;

inInventoryDepartmentStoreListInventoryPageInventoryPageInventoryDetail (inventory, departmentStore, listInventory, pageInventory, pageInventoryDetail) = UNION OVERRIDE
    pageInventoryPageInventoryDetail(pageInventoryDetail) == pageInventory AND listInventory AND departmentStore AND inventory,
    listInventoryPageInventoryDetail(pageInventoryDetail) == listInventory AND departmentStore AND NOT pageInventory AND inventory,
    departmentStorePageInventoryDetail(pageInventoryDetail) == departmentStore AND inventory == inventoryPageInventoryDetail(pageInventoryDetail) AND NOT pageInventory AND NOT listInventory;

descriptionCollationSheet 'Название документа' (collationSheet) =
    [FORMULA STRING[200] '\'Сличительная ведомость \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'] (
    nameCollationSheet(collationSheet), dateCollationSheet(collationSheet));

GROUP inventoryGroup 'Информация об инвентаризации' : publicGroup;
GROUP collationSheetGroup 'Информация о сличительных ведомостях' : baseGroup;
GROUP listInventoryGroup 'Информация об описях' : baseGroup;
GROUP inventoryCommitteeGroup 'Комиссия' : baseGroup;

//---------------------------- Подсчет всех сумм ----------------------------//

countListInventoryCollationSheet 'К-во описей' (collationSheet) =
    GROUP SUM 1 IF listInventory IS listInventory BY collationSheetListInventory(listInventory);
countPageInventoryCollationSheet 'К-во страниц' (collationSheet) =
    GROUP SUM 1 IF pageInventory IS pageInventory BY collationSheetListInventory(listInventoryPageInventory(pageInventory));

countPageInventoryDetailListInventory 'Кол-во строк' (listInventory) = GROUP SUM countPageInventoryDetailPageInventory(pageInventory) BY listInventoryPageInventory(pageInventory) IN documentSumGroup;
quantityPageInventoryDetailListInventory 'Кол-во по описям' (listInventory) = GROUP SUM quantityPageInventoryDetailPageInventory(pageInventory) BY listInventoryPageInventory(pageInventory) IN documentSumGroup;
accountSumPageInventoryDetailListInventory 'Сумма по описям' (listInventory) = GROUP SUM accountSumPageInventoryDetailPageInventory(pageInventory) BY listInventoryPageInventory(pageInventory) IN documentSumGroup;

countPageInventoryDetailDepartmentStoreInventory 'Кол-во строк' (departmentStore, inventory) =
    GROUP SUM countPageInventoryDetailListInventory(listInventory) BY departmentStoreListInventory(listInventory), inventoryListInventory(listInventory) IN documentSumGroup;
quantityPageInventoryDetailDepartmentStoreInventory 'Кол-во по описям' (departmentStore, inventory) =
    GROUP SUM quantityPageInventoryDetailListInventory(listInventory) BY departmentStoreListInventory(listInventory), inventoryListInventory(listInventory) IN documentSumGroup;
accountSumPageInventoryDetailDepartmentStoreInventory 'Сумма по описям' (departmentStore, inventory) =
    GROUP SUM accountSumPageInventoryDetailListInventory(listInventory) BY departmentStoreListInventory(listInventory), inventoryListInventory(listInventory) IN documentSumGroup;

quantityPageInventoryDetailCollationSheetItem 'Кол-во по описям' (collationSheet, item) = GROUP SUM quantityPageInventoryDetail(pageInventoryDetail)
    BY collationSheetPageInventoryDetail(pageInventoryDetail), itemPageInventoryDetail(pageInventoryDetail);
accountPricePageInventoryDetailCollationSheetItem 'Цена по описям' (collationSheet, item) = GROUP EQUAL accountPricePageInventoryDetail(pageInventoryDetail) BY collationSheetListInventory(listInventoryPageInventoryDetail(pageInventoryDetail)), itemPageInventoryDetail(pageInventoryDetail);
accountSumPageInventoryDetailCollationSheetItem 'Сумма по описям' (collationSheet, item) = GROUP SUM accountSumPageInventoryDetail(pageInventoryDetail)
    BY collationSheetPageInventoryDetail(pageInventoryDetail), itemPageInventoryDetail(pageInventoryDetail);

quantityPageInventoryDetailCollationSheet 'Кол-во по описям' (collationSheet) =
    GROUP SUM quantityPageInventoryDetailCollationSheetItem(collationSheet, item) BY collationSheet;
accountSumPageInventoryDetailCollationSheet 'Сумма по описям' (collationSheet) =
    GROUP SUM accountSumPageInventoryDetailCollationSheetItem(collationSheet, item) BY collationSheet;

quantityBalanceCollationSheetItem 'Кол-во по остаткам' (collationSheet, item) = DATA NUMERIC[14,3] (collationSheet, item);
accountPriceBalanceCollationSheetItem 'Цена по остаткам' (collationSheet, item) = DATA NUMERIC[14,2] (collationSheet, item);
accountSumBalanceCollationSheetItem 'Сумма по остаткам' (collationSheet, item) =
    quantityBalanceCollationSheetItem(collationSheet, item) * accountPriceBalanceCollationSheetItem(collationSheet, item);

quantityBalanceCollationSheet 'Кол-во по остаткам' (collationSheet) =
    GROUP SUM quantityBalanceCollationSheetItem(collationSheet, item) BY collationSheet PERSISTENT;
accountSumBalanceCollationSheet 'Сумма по остаткам' (collationSheet) =
    GROUP SUM accountSumBalanceCollationSheetItem(collationSheet, item) BY collationSheet PERSISTENT;

quantityShortageCollationSheetItem 'Кол-во недостачи' (collationSheet, item) =
    quantityBalanceCollationSheetItem(collationSheet, item) (-) quantityPageInventoryDetailCollationSheetItem(collationSheet, item) PERSISTENT;
accountSumShortageCollationSheetItem 'Сумма недостачи' (collationSheet, item) =
    accountSumBalanceCollationSheetItem(collationSheet, item) (-) accountSumPageInventoryDetailCollationSheetItem(collationSheet, item) PERSISTENT;

quantityShortageCollationSheet 'Кол-во недостачи' (collationSheet) =
    GROUP SUM quantityShortageCollationSheetItem(collationSheet, item) BY collationSheet PERSISTENT;
accountSumShortageCollationSheet 'Сумма недостачи' (collationSheet) =
    GROUP SUM accountSumShortageCollationSheetItem(collationSheet, item) BY collationSheet PERSISTENT;

accountSumItemShortageCollationSheet 'Сумма недостачи, товар' (collationSheet) =
    GROUP SUM accountSumShortageCollationSheetItem(collationSheet, item) IF NOT isContainerItem(item) BY collationSheet;
accountSumContainerShortageCollationSheet 'Сумма недостачи, тара' (collationSheet) =
    GROUP SUM accountSumShortageCollationSheetItem(collationSheet, item) IF isContainerItem(item) BY collationSheet;

differentPriceCollationSheetItem(collationSheet, item) = accountPricePageInventoryDetailCollationSheetItem(collationSheet, item) != accountPriceBalanceCollationSheetItem(collationSheet, item);

//---------------------------- Состав сличительной ведомости ----------------------------//

inManyCollationSheetItem 'Вкл в ведомость' = DATA BOOLEAN (manyCollationSheet, item) IN baseGroup;

includeCollationSheetItem(collationSheet, item) = UNION EXCLUSIVE
    collationSheet IS registerCollationSheet IF quantityPageInventoryDetailCollationSheetItem(collationSheet, item),
    (UNION OVERRIDE inManyCollationSheetItem(collationSheet, item), collationSheet IS manyCollationSheet IF quantityPageInventoryDetailCollationSheetItem(collationSheet, item)),
    (collationSheet IS remainsCollationSheet IF UNION OVERRIDE quantityBalanceCollationSheetItem(collationSheet, item) != 0, TRUE IF quantityPageInventoryDetailCollationSheetItem(collationSheet, item));

//---------------------------- Генерация сличительных ведомостей ----------------------------//

// автоматическое создание сличительной ведомости (товары из описей) //
includeRegisterDepartmentStoreInventory(departmentStore, inventory) =
    includeDepartmentStoreInventory(departmentStore, inventory) AND typeOfAdditionDepartmentStoreInventory(departmentStore, inventory) == typeOfAddition.register;

@metaCodeDoublePropsAggregation(departmentStoreCollationSheet, inventoryCollationSheet, registerCollationSheet, includeRegisterDepartmentStoreInventory);

// автоматическое создание сличительной ведомости (по остаткам) //
includeRemainsDepartmentStoreInventory(departmentStore, inventory) =
    includeDepartmentStoreInventory(departmentStore, inventory) AND typeOfAdditionDepartmentStoreInventory(departmentStore, inventory) == typeOfAddition.remains;

@metaCodeDoublePropsAggregation(departmentStoreCollationSheet, inventoryCollationSheet, remainsCollationSheet, includeRemainsDepartmentStoreInventory);

// автоматическое создание сличительной ведомости (по множеству товаров) //
includeManyDepartmentStoreInventory(departmentStore, inventory) =
    includeDepartmentStoreInventory(departmentStore, inventory) AND typeOfAdditionDepartmentStoreInventory(departmentStore, inventory) == typeOfAddition.many;

@metaCodeDoublePropsAggregation(departmentStoreCollationSheet, inventoryCollationSheet, manyCollationSheet, includeManyDepartmentStoreInventory);

//---------------------------- Изменение остатка инвентаризации ----------------------------//

CLASS ABSTRACT inventoryLedger 'Изменение остатка инвентаризации' : balanceItemLedger; // todo : опять же для ClassWhere
TABLE inventoryLedger (inventoryLedger);

CLASS outInventoryLedger 'Недостача инвентаризации' : inventoryLedger, outAutoBalanceItemLedger;
CLASS inInventoryLedger 'Излишки инвентаризации' : inventoryLedger, inAutoBalanceItemLedger;

needToOutLedgerCollationSheetItem (collationSheet, item) = quantityShortageCollationSheetItem(collationSheet, item) > 0
    AND isPostedCollationSheet(collationSheet);

needToInLedgerCollationSheetItem (collationSheet, item) = quantityShortageCollationSheetItem(collationSheet, item) < 0
    AND isPostedCollationSheet(collationSheet);

@metaCodeDoubleAggregation(collationSheet, item, outInventoryLedger, needToOutLedgerCollationSheetItem);
@metaCodeDoubleAggregation(collationSheet, item, inInventoryLedger, needToInLedgerCollationSheetItem);

collationSheetInventoryLedger(inventoryLedger) = UNION EXCLUSIVE collationSheetOutInventoryLedger(inventoryLedger),
                                                                 collationSheetInInventoryLedger(inventoryLedger);

inventoryInventoryLedger(inventoryLedger) = inventoryCollationSheet(collationSheetInventoryLedger(inventoryLedger)) PERSISTENT;

@defineDocumentDetailTimeCustom(inventory, inventoryLedger);
@defineDocumentDetailPostedCustom(inventory, inventoryLedger);
@defineDocumentDetailDepartmentStoreCustom(collationSheet, inventoryLedger);

quantityOutInventoryLedger = quantityShortageCollationSheetItem(collationSheetOutInventoryLedger(inventoryLedger), itemOutInventoryLedger(inventoryLedger));
quantityInInventoryLedger = -quantityShortageCollationSheetItem(collationSheetInInventoryLedger(inventoryLedger), itemInInventoryLedger(inventoryLedger));

itemInventoryLedger(inventoryLedger) = UNION EXCLUSIVE itemOutInventoryLedger(inventoryLedger),
                                                       itemInInventoryLedger(inventoryLedger) PERSISTENT;
nameAttributeItemInventoryLedger 'Товар' (inventoryLedger) = nameAttributeItem(itemInventoryLedger(inventoryLedger)) MINCHARWIDTH 15 PREFCHARWIDTH 15;
barcodeExInventoryLedger 'Щтрих-код' (inventoryLedger) =  barcodeEx(barcodeSku(itemInventoryLedger(inventoryLedger)));

quantityInventoryLedger 'Кол-во недостачи' (inventoryLedger) = quantityShortageCollationSheetItem(collationSheetInventoryLedger(inventoryLedger), itemInventoryLedger(inventoryLedger)) PERSISTENT;
accountSumInventoryLedger 'Сумма недостачи' (inventoryLedger) = accountSumShortageCollationSheetItem(collationSheetInventoryLedger(inventoryLedger), itemInventoryLedger(inventoryLedger)) PERSISTENT;

descriptionOutInventoryLedger 'Название документа' (inventoryLedger) =
    [FORMULA STRING[200] '\'Недостача по инвентаризации \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'] (
    nameCollationSheet(collationSheetOutInventoryLedger(inventoryLedger)), dateCollationSheet(collationSheetOutInventoryLedger(inventoryLedger)));

descriptionInInventoryLedger 'Название документа' (inventoryLedger) =
    [FORMULA STRING[200] '\'Излишек по инвентаризации \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'] (
    nameCollationSheet(collationSheetInInventoryLedger(inventoryLedger)), dateCollationSheet(collationSheetInInventoryLedger(inventoryLedger)));

//---------------------------- Отгрузка по безналу(розница) ----------------------------//

GROUP customerGroup 'Покупатель' : documentPrmGroup;
GROUP itemSpecificationDetailInfo 'Информация по товару' : baseGroup;

CLASS objectiveAcquiring 'Цель приобретения' : named;
TABLE objectiveAcquiring (objectiveAcquiring);

CLASS specification 'Счет-фактура': historyObject, numeratedObject;
CLASS specificationDetail 'Строка документа';

@defineDocumentTables(specification);

@defineDocumentRelation(specification);

@defineDocumentTime(specification);
@defineDocumentDepartmentStore(specification);
@defineDocumentHeaderNote(specification);

@defineDocumentDetailNumbered(specification);

@defineDocumentDetailIndex(specification);
@defineDocumentDetailItem(specification);
@defineDocumentDetailItemActions(specification);

@defineDocumentDetailQuantity(specification);
@defineDocumentDetailRetailPrice(specification);
@defineDocumentDetailRetailSum(specification);

@defineDocumentDetailCalcRange(specification);
@defineDocumentDetailCalcVATSum(specification);

@defineDocumentHeaderQuantity(specification);
@defineDocumentHeaderItemQuantity(specification);

@defineDocumentHeaderRetailSum(specification);
@defineDocumentHeaderCalcVATSum(specification);

descriptionSpecificationDetail(specificationDetail) = [FORMULA STRING[40] '$1 || CAST ($2 AS character(20)) || $3 || $4 || CAST ($5 AS character(20))']
            ('Счет-фактура № ', seriesNumberSpecificationDetail(specificationDetail), ' от ', ' ', dateSpecificationDetail(specificationDetail));

customerSpecification(specification) = DATA customer (specification) IN idGroup;
nameCustomerSpecification 'Покупатель' (specification) = name(customerSpecification(specification)) IN customerGroup;
fullNameCustomerSpecification 'Полное наименование' (specification) = fullNameLegalEntity(customerSpecification(specification)) IN customerGroup;
UNPCustomerSpecification 'УНП покупателя' (specification) = UNPLegalEntity(customerSpecification(specification)) IN customerGroup;
addressCustomerSpecification 'Юридический адрес' (specification) = addressLegalEntityVal(customerSpecification(specification), dateSpecification(specification)) IN customerGroup;
nameOwnershipCustomerSpecification 'Форма собственности' (specification) = nameOwnershipLegalEntity(customerSpecification(specification)) IN customerGroup;
postAddressCustomerSpecification 'Почтовый адрес' (specification) = postAddressLegalEntity(customerSpecification(specification)) IN customerGroup;
managerCustomerSpecification 'Руководитель' (specification) = managerLegalEntity(customerSpecification(specification)) IN customerGroup;
phoneCustomerSpecification 'Телефон покупателя' (specification) = phoneLegalEntityVal(customerSpecification(specification), dateSpecification(specification)) IN customerGroup;

objectiveAcquiringSpecification(specification) = DATA objectiveAcquiring (specification) IN idGroup;
nameObjectiveAcquiringSpecification 'Цель приобретения' (specification) = name(objectiveAcquiringSpecification(specification)) IN documentPrmGroup;

accountCustomerSpecification 'Р/сч. покупателя ИД' (specification) = overrideAccountLegalEntity(customerSpecification(specification));
dataAccountCustomerSpecification 'Р/сч. покупателя' (specification) = dataAccount(accountCustomerSpecification(specification));
nameBankAccountCustomerSpecification 'Банк покупателя' (specification) = nameBankAccount(accountCustomerSpecification(specification));
addressBankAccountCustomerSpecification 'Адрес банка покупателя' (specification) = addressBankVal(bankAccount(accountCustomerSpecification(specification)), dateSpecification(specification));
MFOBankAccountCustomerSpecification 'Код МФО банка покупателя' (specification) = MFOBankAccount(accountCustomerSpecification(specification));
departmentBankAccountCustomerSpecification 'Отдел банка покупателя' (specification) = departmentBankAccount(accountCustomerSpecification(specification));
CBUBankAccountCustomerSpecification 'ЦБУ банка покупателя' (specification) = CBUBankAccount(accountCustomerSpecification(specification));

dateToSpecification 'Срок действия с/ф' (specification) = DATA DATE (specification) IN documentPrmGroup;
overdueSpecification 'Просрочена' (specification) = dateToSpecification(specification) < currentDate();
noOverdueSpecification 'Непросрочена' (specification) = dateToSpecification(specification) >= currentDate();

overdueSpecificationDate 'Просрочена' (specification, date) = dateToSpecification(specification) < date AND date AS DATE;
noOverdueSpecificationDate 'Непросрочена' (specification, date) = dateToSpecification(specification) >= date AND date AS DATE;

companySpecification 'Компания ИД' (specification) = companyDepartmentStore(departmentStoreSpecification(specification));
UNPCompanySpecification 'УНП компании' (specification) = UNPLegalEntity(companySpecification(specification));
fullNameCompanySpecification 'Полное наименование компании' (specification) = fullNameLegalEntity(companySpecification(specification));
addressCompanySpecification 'Юридический адрес компании' (specification) = addressLegalEntityVal(companySpecification(specification), dateSpecification(specification));

accountCompanySpecification 'Р/сч. компании ИД' (specification) = overrideAccountLegalEntity(companySpecification(specification));
dataAccountCompanySpecification 'Р/сч. компании' (specification) = dataAccount(accountCompanySpecification(specification));

nameBankAccountCompanySpecification 'Банк компании' (specification) = nameBankAccount(accountCompanySpecification(specification));
addressBankAccountCompanySpecification 'Адрес банка компании' (specification) = addressBankVal(bankAccount(accountCompanySpecification(specification)), dateSpecification(specification));
MFOBankAccountCompanySpecification 'Код МФО банка компании' (specification) = MFOBankAccount(accountCompanySpecification(specification));
departmentBankAccountCompanySpecification 'Отдел банка компании' (specification) = departmentBankAccount(accountCompanySpecification(specification));
CBUBankAccountCompanySpecification 'ЦБУ банка компании' (specification) = CBUBankAccount(accountCompanySpecification(specification));
phoneCompanySpecification 'Телефон компании' (specification) = phoneLegalEntityVal(companySpecification(specification), dateSpecification(specification)) IN customerGroup;

CONSTRAINT specification IS specification AND NOT dateToSpecification(specification) MESSAGE 'Не задан срок действия с/ф';
CONSTRAINT dateToSpecification(specification) < dateSpecification(specification) MESSAGE 'Дата действия с/ф не может быть меньше даты документа';

//---------------------------- Документ на отгрузку из розницы ----------------------------------------//

GROUP specificationGroup 'Счет-фактуры' : publicGroup;

CLASS statement 'Выписка из розницы' : outAccountSumDocumentLedger, historyObject, numberedObject, consignment;
CLASS statementDetail 'Строка выписки из розницы' : outAutoBalanceItemLedger, salesLedger, consignmentDetail;
CLASS statementPosted 'Закрытая выписка из розницы' : statement, postedObject;

@defineDocumentDefaultProperties(statement);

@defineDocumentHeaderRevaluation(statement);

@defineDocumentDetailQuantity(statement);
@defineDocumentDetailBasePrice(statement);
@defineDocumentDetailRetailSum(statement);

@defineDocumentDetailCalcRange(statement);
@defineDocumentDetailCalcVATSum(statement);

@defineDocumentDetailCurRetailPrice(statement);

@defineDocumentDetailNote(statement);

@defineDocumentHeaderQuantity(statement);
@defineDocumentHeaderItemQuantity(statement);

@defineDocumentHeaderRetailSum(statement);
@defineDocumentHeaderCalcVATSum(statement);

//    шапка документа поставки
customerStatement 'Покупатель (ИД)' (statement) = DATA customer (statement) IN idGroup;
nameCustomerStatement 'Покупатель' (statement) = name(customerStatement(statement)) IN documentPrmGroup
    MINCHARWIDTH 30 PREFCHARWIDTH 40;
UNPCustomerStatement 'УНП покупателя' (statement) = UNPLegalEntity(customerStatement(statement)) IN documentPrmGroup;

inStatementSpecification 'Включить в накладную' (statement, specification) = DATA BOOLEAN (statement, specification)
    IN idGroup MINCHARWIDTH 20 PREFCHARWIDTH 20;

specificationsStatement 'Ввести на основании с/ф' (statement) = GROUP CONCAT castToString255(seriesNumberObject(specification))
    IF inStatementSpecification(statement, specification), ', ' BY statement IN specificationGroup MINCHARWIDTH 20 PREFCHARWIDTH 20;

countStatementSpecification(specification) = GROUP SUM 1 IF inStatementSpecification(statement, specification) AND isPostedStatement(statement) BY specification;
noStatementSpecification(specification) = specification IS specification AND NOT countStatementSpecification(specification);

differsPriceStatementDetail(statementDetail) = retailPriceStatementDetail(statementDetail) != curRetailPriceStatementDetail(statementDetail);

statusSpecification 'Расход' (specification) = IF countStatementSpecification(specification)
                                                  THEN 'Отгрузки были' IF specification IS specification
                                                  ELSE 'Отгрузок не было' IF specification IS specification
                                                MINCHARWIDTH 15 PREFCHARWIDTH 15;

statusStatementSpecification 'Статус' (statement, specification) = IF dateStatement(statement) > dateToSpecification(specification)
                                                                      THEN 'Просрочена' IF statement IS statement IF specification IS specification
                                                                      ELSE 'Непросрочена' IF statement IS statement IF specification IS specification
                                                                   MINCHARWIDTH 15 PREFCHARWIDTH 15;

descriptionStatement 'Название документа' (statement) =
    [FORMULA STRING[200] '\'Выписка из розницы \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)']
    (seriesNumberObject(statement), dateStatement(statement), nameCustomerStatement(statement));

descriptionStatementDetail 'Название документа' (statementDetail) = descriptionStatement(statementStatementDetail(statementDetail));

toFillStatementDetailsStatement 'Заполнить отгрузку на основании с/ф' =  ACTION (statement) {
    FOR inStatementSpecification (statement, specification) AND inSpecificationSpecificationDetail(specification, specificationDetail) DO {
        ADDOBJ statementDetail;
        FOR d == addedObject() DO {
            SET itemStatementDetail(d) <- itemSpecificationDetail(specificationDetail);
            SET quantityStatementDetail(d) <- quantitySpecificationDetail(specificationDetail);
            SET retailPriceStatementDetail(d) <- retailPriceSpecificationDetail(specificationDetail);
            SET noteStatementDetail(d) <- descriptionSpecificationDetail(specificationDetail);
        };
    };
} IN specificationGroup CONFIRM;

// ---------------------------------- Переоценка при реализации из розницы ------------------------------------------

CLASS priceChangeStatement 'Переоценка при отгрузке из розницы' : priceChangeDocument;
CLASS priceChangeStatementDetail 'Строка переоценки при отгрузке из розницы' : priceChangeDocumentDetail;

needToPriceChangeStatementDetail (statementDetail) = curRetailPriceStatementDetail(statementDetail) != retailPriceStatementDetail(statementDetail) AND
                                                   quantityStatementDetail(statementDetail) >0; // <= balanceDepartmentStoreItemStatementDetail(statementDetail);

@defineDocumentPriceChange(statement);
@defineDocumentPriceChangeNumber(statement);
@defineDocumentPriceChangeQuantity(statement);
@defineDocumentPriceChangePrice(statement);
@defineDocumentPriceChangeCurRetailPrice(statement);

@metaCodeIsPriceChangeWrong(statement);

CLASS wayOfLoading 'Способ ПРР' : named;
TABLE wayOfLoading (wayOfLoading);

nameWayOfLoading 'Способ ПРР' (wayOfLoading) = name(wayOfLoading) IF wayOfLoading IS wayOfLoading IN baseGroup;

// для накладной (шапка и хвост)

@defineDocumentHeaderConsignment(statement);
unloadingPlaceStatement 'Пункт разгрузки' (statement) = UNION OVERRIDE addressLegalEntity(customerStatement(statement)),
                                                       dataUnloadingPlaceStatement (statement);

//---------------------------- Приход товара от поставщика ----------------------------------------//
GROUP shipmentOrderGroup 'Заказ' : documentPrmGroup;
GROUP additionalInfo 'Дополнительно' : baseGroup;

CLASS shipment 'Поставка' : incAccountSumDocumentLedger, historyObject, numberedObject, priceTransactionDocument;
CLASS shipmentDetail 'Строка поставки' : batch, importerPriceLedger, supplierPriceLedger, retailVATLedger, accountPriceLedger, retailPriceLedger, warePriceLedger;
CLASS shipmentPosted 'Закрытая поставка' : shipment, postedObject;

@defineDocumentDefaultProperties(shipment);

@defineDocumentHeaderSupplierContract(shipment);
@defineDocumentHeaderRevaluation(shipment);

@defineDocumentDetailItemExtra(shipment);
@defineDocumentDetailNumbered(shipment);

@defineDocumentDetailQuantity(shipment);

@defineDocumentDetailBasePrice(shipment);
@defineDocumentDetailInvoicePrice(shipment);

@defineDocumentDetailCurBasePrice(shipment);

@defineDocumentDetailWareSum(shipment);
@defineDocumentDetailInSum(shipment);
@defineDocumentDetailOutSum(shipment);
@defineDocumentDetailInvoiceSum(shipment);

@defineDocumentHeaderQuantity(shipment);
@defineDocumentHeaderItemQuantity(shipment);

@defineDocumentHeaderWareSum(shipment);
@defineDocumentHeaderOutSum(shipment);
@defineDocumentHeaderInvoiceSum(shipment);

sidShipmentDetail 'Уникальный номер накладной' (shipmentDetail) = DATA STRING[50] (shipmentDetail) IN documentHeaderGroup;

sidNumberSeriesToShipmentDetail (sid, number, series) = GROUP UNIQUE shipmentDetail
            BY sidShipmentDetail (shipmentDetail), numberShipmentDetail (shipmentDetail), seriesShipmentDetail (shipmentDetail)
            WHERE shipmentDetail IS shipmentDetail;

numberSeriesToShipment (number, series) = GROUP UNIQUE shipment BY numberObject(shipment), seriesObject(shipment) WHERE shipment IS shipment;

consigneeShipment 'Грузополучатель' (shipment) =
    [FORMULA STRING[200] 'CAST($1 AS TEXT) || \', \' || CAST($2 AS TEXT) || \', отдел  \' || CAST($3 AS TEXT)'](
    nameCompanyDepartmentStore(departmentStoreShipment(shipment)),
    name(storeDepartmentStore(departmentStoreShipment(shipment))),
    nameDepartmentStoreShipment(shipment)) IN documentPrmGroup;

carryingChargesShipment 'Транспортные расходы' (shipment) = DATA NUMERIC[16,2] (shipment) IN documentSumGroup;

registerCommitteeShipment(shipment) = DATA registerCommittee(shipment);
nameRegisterCommitteeShipment 'Комиссия для реестра цен' (shipment) = commonName(registerCommitteeShipment(shipment)) IN documentPrmGroup MINCHARWIDTH 20 PREFCHARWIDTH 40;
registerCommitteeShipment(shipment) <- registerCommitteeDepartmentStore(departmentStoreShipment(shipment))
    WHEN ASSIGNED(shipment IS shipment);

//количество-цены по строкам
GROUP pricingShipmentDetailInfo 'Дополнительные ценовые параметры': baseGroup;

balanceBeforeShipmentShipmentDetail 'Остаток до поставки' (shipmentDetail) = DATA NUMERIC[14,3] (shipmentDetail) IN baseGroup;

dateFitToShipmentDetail 'Годен до' (shipmentDetail) = DATA DATE(shipmentDetail) IN baseGroup;

CONSTRAINT controlExpiryItemShipmentDetail(shipmentDetail) AND NOT dateFitToShipmentDetail(shipmentDetail) MESSAGE 'Для товара не задан срок годности';
//    CHECKED BY controlExpiryItemShipmentDetail MESSAGE 'Не задан для товара срок годности';

isFixPriceShipmentDetail 'Товар с фиксированной ценой' (shipmentDetail) = DATA BOOLEAN (shipmentDetail) IN itemDetailGroup;
isFixPriceShipmentDetail(shipmentDetail) <- isFixPriceItem (itemShipmentDetail (shipmentDetail)) WHEN CHANGED(itemShipmentDetail(shipmentDetail));

retailMarkupShipmentDetail 'Торговая надбавка, %'(shipmentDetail) = DATA NUMERIC[8,3] (shipmentDetail) IN baseGroup;
importerMarkupShipmentDetail '% надбавки с уч. оптовой' (shipmentDetail) = [X*(100+Y)/100](
    retailMarkupShipmentDetail(shipmentDetail), supplierMarkupShipmentDetail(shipmentDetail));

descriptionShipment 'Название документа' (shipment) =
    [FORMULA STRING[200] '\'Приход \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberObject(shipment), dateShipment(shipment), nameSupplierShipment(shipment));

descriptionShipmentDetail 'Название документа' (shipmentDetail) = descriptionShipment(shipmentShipmentDetail(shipmentDetail));

// ------ Запись значений по умолчанию ----- //

supplierPriceShipmentDetail(shipmentDetail) <-
    priceSupplierItemDepartmentVal (supplierShipmentDetail(shipmentDetail), itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))
    WHEN CHANGED(itemShipmentDetail(shipmentDetail));

nonRoundImporterPriceShipmentDetail 'Цена изготовителя/импортера (неокругленная)' (shipmentDetail) =
     IF isFixPriceShipmentDetail(shipmentDetail) THEN
     [X*(100+Y)/100](supplierPriceShipmentDetail(shipmentDetail), overSupplierMarkupShipmentDetail(shipmentDetail)) ELSE
     [X*100/(100+Y)](supplierPriceShipmentDetail(shipmentDetail), overSupplierMarkupShipmentDetail(shipmentDetail));

importerPriceShipmentDetail (shipmentDetail) <-
    round0(nonRoundImporterPriceShipmentDetail(shipmentDetail))
    WHEN CHANGED(nonRoundImporterPriceShipmentDetail(shipmentDetail));

supplierRangeShipmentDetail(shipmentDetail) <-
    supplierRangeItemVal(itemShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))
    WHEN CHANGED(itemShipmentDetail(shipmentDetail));

retailMarkupShipmentDetail(shipmentDetail) <-
    markupItemDepartmentVal (itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))
    WHEN CHANGED(itemShipmentDetail(shipmentDetail));

retailRangeShipmentDetail(shipmentDetail) <-
    retailRangeItemVal(itemShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))
    WHEN CHANGED(itemShipmentDetail(shipmentDetail));

wareShipmentDetail(shipmentDetail) <-
    wareItem(itemShipmentDetail(shipmentDetail))
    WHEN CHANGED(itemShipmentDetail(shipmentDetail));

warePriceShipmentDetail (shipmentDetail) <-
    warePriceVal (wareShipmentDetail (shipmentDetail), dateShipmentDetail(shipmentDetail))
    WHEN CHANGED(wareShipmentDetail(shipmentDetail));

nonRoundRetailPriceShipmentDetail 'Цена розничная (неокруглен.)'(shipmentDetail) = [X*(Y+100)*(Z+100)/10000] (
    supplierPriceShipmentDetail(shipmentDetail),
    (UNION OVERRIDE 0.0 IF shipmentDetail IS shipmentDetail, retailMarkupShipmentDetail(shipmentDetail)),
    (UNION OVERRIDE 0.0 IF shipmentDetail IS shipmentDetail, dataRetailRangeShipmentDetail(shipmentDetail)));

// todo : такой подход создает охрененную сложность на сохранении
//markupPriceShipmentDetail 'Сумма торговой надбавки (за ед.)' (shipmentDetail) =
//    supplierPriceShipmentDetail(shipmentDetail) *
//    (UNION OVERRIDE 0 IF shipmentDetail IS shipmentDetail, retailMarkupShipmentDetail(shipmentDetail))/100;
//
//saleVATPriceShipmentDetail 'Сумма розничного НДС (за ед.)' (shipmentDetail) =
//    (supplierPriceShipmentDetail(shipmentDetail) (+) markupPriceShipmentDetail(shipmentDetail))*
//    (UNION OVERRIDE 0 IF shipmentDetail IS shipmentDetail, dataRetailRangeShipmentDetail(shipmentDetail))/100;

//nonRoundRetailPriceShipmentDetail 'Цена розничная (неокруглен.)'(shipmentDetail) = supplierPriceShipmentDetail(shipmentDetail) (+) markupPriceShipmentDetail(shipmentDetail) (+) saleVATPriceShipmentDetail(shipmentDetail);

calculatedRetailPriceShipmentDetail 'Новая розничная цена (расч.)' (shipmentDetail) = IF isFixPriceShipmentDetail(shipmentDetail)
    THEN roundM1(importerPriceShipmentDetail(shipmentDetail) (+) warePriceShipmentDetail(shipmentDetail))
    ELSE roundM1(nonRoundRetailPriceShipmentDetail(shipmentDetail) (+) warePriceShipmentDetail(shipmentDetail));

retailPriceShipmentDetail (shipmentDetail) <-
    calculatedRetailPriceShipmentDetail (shipmentDetail)
    WHEN CHANGED(calculatedRetailPriceShipmentDetail (shipmentDetail));

//-------------------- Документы качества ----------------------------//

customsCertificateShipmentDetail 'Таможенный сертификат ИД' (shipmentDetail)= DATA customsCertificate (shipmentDetail) IN idGroup;
certificateGGRShipmentDetail 'Удостоверение о ГГР ИД' (shipmentDetail)= DATA certificateGGR (shipmentDetail) IN idGroup;
certificateConformityShipmentDetail 'Сертификат соответствия ИД' (shipmentDetail)= DATA certificateConformity (shipmentDetail) IN idGroup;
stateExaminationShipmentDetail 'Акт гос. сан.-гиг. экспертизы ИД' (shipmentDetail)= DATA stateExamination (shipmentDetail) IN idGroup;

numberCustomsCertificateShipmentDetail 'Номер таможенного сертификата' (shipmentDetail) = numberPaper(customsCertificateShipmentDetail(shipmentDetail)) IN recognizeGroup;
numberCertificateGGRShipmentDetail 'Номер удостоверения о ГГР' (shipmentDetail) = numberPaper(certificateGGRShipmentDetail(shipmentDetail)) IN recognizeGroup;
numberCertificateConformityShipmentDetail 'Номер сертификата соответствия' (shipmentDetail) = numberPaper(certificateConformityShipmentDetail(shipmentDetail)) IN recognizeGroup;
numberStateExaminationShipmentDetail 'Номер акта гос. сан.-гиг. экспертизы' (shipmentDetail) = numberPaper(stateExaminationShipmentDetail(shipmentDetail)) IN recognizeGroup;

actingPaperDate(paper, date) =  datePaper(paper) <= date AND NOT  dateToPaper(paper) < date AND date AS DATE;

CONSTRAINT customsCertificateShipmentDetail(shipmentDetail) AND NOT actingPaperDate(customsCertificateShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))
    CHECKED BY customsCertificateShipmentDetail MESSAGE 'Таможенный сертификат не действующий';
CONSTRAINT certificateGGRShipmentDetail(shipmentDetail) AND NOT actingPaperDate(certificateGGRShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))
    CHECKED BY certificateGGRShipmentDetail MESSAGE 'Удостоверение о ГГР не действующее';
CONSTRAINT certificateConformityShipmentDetail(shipmentDetail) AND NOT actingPaperDate(certificateConformityShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))
    CHECKED BY certificateConformityShipmentDetail MESSAGE 'Сертификат соответствия не действующий';
CONSTRAINT stateExaminationShipmentDetail(shipmentDetail) AND NOT actingPaperDate(stateExaminationShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))
    CHECKED BY stateExaminationShipmentDetail MESSAGE 'Акт гос. сан.-гиг. не действующий';

// ---------------------------------- Дооценка на приходе ------------------------------------------

CLASS priceChangeShipment 'Переоценка на приходе' : priceChangeDocument;
CLASS priceChangeShipmentDetail 'Строка переоценки на приходе' : priceChangeDocumentDetail;

needToPriceChangeShipmentDetail (shipmentDetail) = curRetailPriceShipmentDetail(shipmentDetail) != retailPriceShipmentDetail(shipmentDetail) AND
                                                   balanceBeforeShipmentShipmentDetail(shipmentDetail) != 0;

@defineDocumentPriceChange(shipment);
@defineDocumentPriceChangeNumber(shipment);
quantityPriceChangeShipmentDetail (priceChangeShipmentDetail) = balanceBeforeShipmentShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));
@defineDocumentPriceChangePrice(shipment);
@defineDocumentPriceChangeCurPrice(shipment);

supplierPriceChangeShipment (priceChangeShipment) = supplierShipment(shipmentPriceChangeShipment(priceChangeShipment));
nameSupplierPriceChangeShipment 'Поставщик' (priceChangeShipment) = name(supplierPriceChangeShipment(priceChangeShipment));

@metaCodeIsPriceChangeWrong(shipment);

//----------------------------------- Списание отходов по нормам -------------------------------------------------//
percentRateWasteShipmentDetail 'Процент для списания отходов' (shipmentDetail) = DATA NUMERIC[10,3] (shipmentDetail);

percentRateWasteShipmentDetail (shipmentDetail) <- percentRateWasteItem(itemShipmentDetail(shipmentDetail))
    WHEN CHANGED(itemShipmentDetail(shipmentDetail));

needToWasteShipmentDetail (shipmentDetail) = TRUE IF percentRateWasteShipmentDetail(shipmentDetail);
needToWasteShipment (shipment) = GROUP SUM 1 IF needToWasteShipmentDetail(shipmentDetail) BY shipmentShipmentDetail(shipmentDetail) IN baseGroup;

CLASS wastage 'Списание отходов' : outAccountSumDocumentLedger, historyObject;
CLASS wastagePosted 'Закрытое списание отходов' : wastage, postedObject;
CLASS wastageDetail 'Строка документа': outAutoBalanceItemLedger;

@metaCodeDetailAggregation (shipment, wastage, needToWasteShipment);

@defineDocumentTables(wastage);
@defineDocumentDetailIndex(wastage);
@defineDocumentHeaderCount(wastage);

@defineDocumentHeaderAggregation(shipment, wastage);
@defineDocumentHeaderAggregationNumber(shipment, wastage);

@defineDocumentDetailAggregationHeader(shipment, wastage);
@defineDocumentDetailAggregationItem(shipment, wastage);

quantityItemWastageDetail 'Количество' (wastageDetail) =  quantityShipmentDetail(shipmentDetailWastageDetail(wastageDetail));
quantityItemWastageDetailWastage 'Общее количество' (wastage) = GROUP SUM quantityItemWastageDetail(wastageDetail) BY wastageWastageDetail(wastageDetail) IN documentSumGroup;

percentRateWasteWastageDetail 'Процент списания' (wastageDetail) = percentRateWasteShipmentDetail(shipmentDetailWastageDetail(wastageDetail));

quantityWastageDetail 'Количество для списания '(wastageDetail) = [round3(X*Y/100)](
    quantityShipmentDetail(shipmentDetailWastageDetail(wastageDetail)), percentRateWasteWastageDetail (wastageDetail));

@defineDocumentDetailAggregationPrice(shipment, wastage);

@defineDocumentDetailWareSum(wastage);
@defineDocumentDetailInSum(wastage);
@defineDocumentDetailOutSum(wastage);

@defineDocumentHeaderQuantity(wastage);

@defineDocumentHeaderWareSum(wastage);
@defineDocumentHeaderInSum(wastage);
@defineDocumentHeaderOutSum(wastage);

supplierWastage (wastage) = supplierShipment(shipmentWastage(wastage));
nameSupplierWastage 'Поставщик' (wastage) = name(supplierWastage(wastage));

nameCompanyWastage 'Компания' (wastage) = nameCompanyDepartmentStore(departmentStoreWastage(wastage));

descriptionWastage 'Название документа' (wastage) =
    [FORMULA STRING[200] '\'Списание отходов \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberWastage(wastage), dateWastage(wastage), nameSupplierWastage(wastage));

descriptionWastageDetail 'Название документа' (wastageDetail) = descriptionWastage(wastageWastageDetail(wastageDetail));

//----------------------------------- Комиссия -------------------------------------------------//

wastageCommitteeShipment (shipment) = DATA wastageCommittee (shipment) IN idGroup;
nameWastageCommitteeShipment 'Комиссия для списания отходов' (shipment) = name(wastageCommitteeShipment(shipment)) IN documentPrmGroup;
wastageCommitteeShipment(shipment) <- wastageCommitteeDepartmentStore(departmentStoreShipment(shipment))
    WHEN ASSIGNED(shipment IS shipment);

wastageCommitteeWastage (wastage) = wastageCommitteeShipment(shipmentWastage(wastage));
inWastageEmployee (wastage, employee) = inCommitteeEmployee(wastageCommitteeWastage(wastage), employee);
nameWastageCommitteeWastage 'Комиссия' (wastage) = name(wastageCommitteeWastage(wastage));
commonNameEmployee 'Имя' (employee) = commonName(employee) AND employee IS employee;

//----------------------------------------------- Списание товара ---------------------------------------------------//
CLASS reasonOff 'Причина списания' : named;
TABLE reasonOff (reasonOff);

FORM reasonOff 'Причина списания'
    OBJECTS r=reasonOff  FIXED PANEL
    PROPERTIES(r) name
;

CLASS writeOff 'Списание' : outAccountSumDocumentLedger, historyObject, numeratedObject;
CLASS writeOffDetail 'Строка списания' : outAutoBalanceItemLedger;
CLASS writeOffPosted 'Закрытое списание' : writeOff, postedObject;

@defineDocumentDefaultProperties (writeOff);

@defineDocumentDetailQuantity(writeOff);
@defineDocumentDetailBasePrice(writeOff);
@defineDocumentDetailAccountPrice(writeOff);

@defineDocumentDetailInSum(writeOff);
@defineDocumentDetailWareSum(writeOff);
@defineDocumentDetailOutSum(writeOff);
@defineDocumentDetailAccountSum(writeOff);

@defineDocumentHeaderQuantity(writeOff);
@defineDocumentHeaderWareSum(writeOff);
@defineDocumentHeaderAccountSum(writeOff);

reasonOffWriteOff 'Причина списания (ИД)' = DATA reasonOff (writeOff) IN idGroup;
nameReasonOffWriteOff 'Причина списания' (writeOff) = name(reasonOffWriteOff (writeOff)) IN documentPrmGroup;

descriptionWriteOff 'Название документа' (writeOff) =
    [FORMULA STRING[200] '\'Списание \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'](
    seriesNumberObject(writeOff), dateWriteOff(writeOff));

descriptionWriteOffDetail 'Название документа' (writeOffDetail) = descriptionWriteOff(writeOffWriteOffDetail(writeOffDetail));

//----------------------------------- Внутреннее перемещение (расход) -------------------------------------------------//

CLASS innerFlow 'Расход в отдел' : outAccountSumDocumentLedger, historyObject, numberedObject, consignment;
CLASS innerFlowDetail 'Строка расхода в отдел' : outAutoBalanceItemLedger, consignmentDetail;
CLASS innerFlowPosted 'Закрытый расход в отдел' : innerFlow, postedObject;

@defineDocumentDefaultProperties (innerFlow);

@defineDocumentDetailQuantity(innerFlow);
@defineDocumentDetailBasePrice(innerFlow);

@defineDocumentDetailInSum(innerFlow);
@defineDocumentDetailWareSum(innerFlow);
@defineDocumentDetailOutSum(innerFlow);

@defineDocumentHeaderQuantity(innerFlow);
@defineDocumentHeaderItemQuantity(innerFlow);

@defineDocumentHeaderWareSum(innerFlow);
@defineDocumentHeaderOutSum(innerFlow);

recipientDepartmentInnerFlow (innerFlow) = DATA departmentStore(innerFlow);
nameRecipientDepartmentInnerFlow 'Отдел-получатель' (innerFlow) = name(recipientDepartmentInnerFlow(innerFlow)) IN documentPrmGroup;

descriptionInnerFlow 'Название документа' (innerFlow) =
    [FORMULA STRING[200] '\'Расход в отдел \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberObject(innerFlow), dateInnerFlow(innerFlow), nameRecipientDepartmentInnerFlow(innerFlow));

descriptionInnerFlowDetail 'Название документа' (innerFlowDetail) = descriptionInnerFlow(innerFlowInnerFlowDetail(innerFlowDetail));

// расчет цен для внутреннего прихода

importerPriceItemInnerFlow 'Цена изготовителя (максим.)' (item, innerFlow) = GROUP MAX importerPriceInnerFlowDetail (innerFlowDetail)
    IF innerFlowInnerFlowDetail(innerFlowDetail) == innerFlow BY itemInnerFlowDetail(innerFlowDetail), innerFlowInnerFlowDetail(innerFlowDetail);

retailPriceItemInnerFlow 'Цена (максим.)' (item, innerFlow) = GROUP MAX retailPriceInnerFlowDetail (innerFlowDetail)
    IF innerFlowInnerFlowDetail(innerFlowDetail) == innerFlow
    BY itemInnerFlowDetail(innerFlowDetail), innerFlowInnerFlowDetail(innerFlowDetail);

// для накладной (шапка и хвост)

@defineDocumentHeaderConsignment(innerFlow);
unloadingPlaceInnerFlow 'Пункт разгрузки' (innerFlow) = UNION OVERRIDE addressLegalEntity(recipientDepartmentInnerFlow(innerFlow)),
                                                       dataUnloadingPlaceInnerFlow (innerFlow);

supplierMarkupInnerFlowDetail 'Оптовая надбавка' (innerFlowDetail) =
    (supplierPriceInnerFlowDetail(innerFlowDetail)/importerPriceInnerFlowDetail(innerFlowDetail) - 1)*100;

// todo : все таки наверное нужно с собой тянуть надбавку (по крайней мере для реестра цен)
retailMarkupInnerFlowDetail 'Торговая надбавка' (innerFlowDetail) =
    [(X*100/(100+Y)/Z-1)*100](
    retailPriceInnerFlowDetail(innerFlowDetail), dataRetailRangeInnerFlowDetail(innerFlowDetail), importerPriceInnerFlowDetail(innerFlowDetail));

noteInnerFlowDetail 'Примечание' (innerFlowDetail) =
    IF supplierMarkupInnerFlowDetail(innerFlowDetail)!=0
    THEN [FORMULA STRING[200] '\'РОЦ: \' || CAST($1 AS TEXT) ||  \'; Оптовая надбавка: \' || CAST($2 AS TEXT)||  \'; Торговая наценка: \' || CAST($3 AS TEXT)']
         (importerPriceInnerFlowDetail(innerFlowDetail), supplierMarkupInnerFlowDetail(innerFlowDetail), retailMarkupInnerFlowDetail(innerFlowDetail))
    ELSE [FORMULA STRING[200] '\'РОЦ: \' || CAST($1 AS TEXT) ||  \'; Торговая наценка: \' || CAST($2 AS TEXT)']
         (importerPriceInnerFlowDetail(innerFlowDetail), retailMarkupInnerFlowDetail(innerFlowDetail));

//----------------------------------- Внутреннее перемещение (приход) -------------------------------------------------//
CLASS innerArrival 'Приход в отдел' : incAccountSumDocumentLedger, historyObject, priceTransactionDocument;
CLASS innerArrivalDetail 'Строка прихода в отдел' : balanceItemLedger, importerPriceLedger, supplierPriceLedger, accountPriceLedger, retailPriceLedger, retailVATLedger, warePriceLedger;
CLASS innerArrivalPosted 'Закрытый приход в отдел' : innerArrival, postedObject;

@defineDocumentDefaultProperties(innerArrival);

@defineDocumentHeaderRevaluation(innerArrival);

@defineDocumentDetailQuantity(innerArrival);
@defineDocumentDetailBasePrice(innerArrival);

@defineDocumentDetailCurBasePrice(innerArrival);

@defineDocumentDetailRetailSum(innerArrival);

@defineDocumentHeaderQuantity(innerArrival);
@defineDocumentHeaderItemQuantity(innerArrival);

@defineDocumentHeaderRetailSum(innerArrival);

innerFlowInnerArrival (innerArrival) = DATA innerFlowPosted (innerArrival);
innerArrivalInnerFlow (innerFlow) = GROUP UNIQUE innerArrival BY innerFlowInnerArrival (innerArrival);
CONSTRAINT innerFlowInnerArrival(p1) == innerFlowInnerArrival(p2) AND p1 != p2 CHECKED BY innerFlowInnerArrival MESSAGE 'Накладная задействована в другом приходе';

numberInnerArrival 'Номер накладной' (innerArrival) = numberObject(innerFlowInnerArrival(innerArrival)) IN documentHeaderGroup PERSISTENT;
seriesInnerArrival 'Серия накладной' (innerArrival) = seriesObject(innerFlowInnerArrival(innerArrival)) IN documentHeaderGroup PERSISTENT;
seriesNumberInnerArrival 'Серия/Номер' (innerArrival) = seriesNumberObject(innerFlowInnerArrival(innerArrival)) PERSISTENT;

dateInnerArrival (innerArrival) <- dateInnerFlow(innerFlowInnerArrival(innerArrival)) WHEN CHANGED(innerFlowInnerArrival(innerArrival));

senderDepartmentInnerArrival (innerArrival) = DATA departmentStore(innerArrival);
nameSenderDepartmentInnerArrival 'Отдел-отправитель' (innerArrival) = name(senderDepartmentInnerArrival(innerArrival)) IN documentPrmGroup;
senderDepartmentInnerArrival (innerArrival) <- departmentStoreInnerFlow(innerFlowInnerArrival(innerArrival))
    WHEN CHANGED(innerFlowInnerArrival(innerArrival));

CONSTRAINT recipientDepartmentInnerFlow(innerFlowInnerArrival(innerArrival)) != departmentStoreInnerArrival(innerArrival) CHECKED BY innerFlowInnerArrival
    MESSAGE 'Накладная с другого отдела';

balanceBeforeInnerArrivalInnerArrivalDetail 'Остаток до' (innerArrivalDetail) = DATA NUMERIC[14,3] (innerArrivalDetail);

importerPriceItemInnerArrival 'Цена изготовителя (максим.)' (item, innerArrival) = importerPriceItemInnerFlow(
    item, innerFlowInnerArrival(innerArrival));

retailPriceItemInnerArrival 'Розничная цена (максим.)' (item, innerArrival) = retailPriceItemInnerFlow (
    item, innerFlowInnerArrival(innerArrival));

quantityItemInnerFlowInnerArrival 'Количество в расходе' (item, innerArrival) = quantityInnerFlowDetailItemInnerFlow(item, innerFlowInnerArrival(innerArrival));
diffQuantityItemInnerArrival 'Расхождение' (item, innerArrival) =
    quantityItemInnerFlowInnerArrival(item, innerArrival) (-) quantityInnerArrivalDetailItemInnerArrival(item, innerArrival);

toFillInnerArrivalDetailsInnerArrival 'Заполнить документ из расхода' =  ACTION (innerArrival) {
    FOR innerArrivalInnerFlow(innerFlowInnerFlowDetail(innerFlowDetail)) == innerArrival DO {
        ADDOBJ innerArrivalDetail;
        FOR d == addedObject() DO {
            SET innerArrivalInnerArrivalDetail(d) <- innerArrival AS innerArrival;
            SET quantityInnerArrivalDetail (d) <- quantityInnerFlowDetail(innerFlowDetail);
            SET itemInnerArrivalDetail (d) <- itemInnerFlowDetail(innerFlowDetail);
            SET retailPriceInnerArrivalDetail (d) <- retailPriceInnerFlowDetail(innerFlowDetail);
            SET importerPriceInnerArrivalDetail (d) <- importerPriceInnerFlowDetail(innerFlowDetail);
            SET supplierPriceInnerArrivalDetail (d) <- supplierPriceInnerFlowDetail(innerFlowDetail);
            SET wareInnerArrivalDetail(d) <- wareInnerFlowDetail(innerFlowDetail);
            SET warePriceInnerArrivalDetail (d) <- warePriceInnerFlowDetail(innerFlowDetail);
            SET retailRangeInnerArrivalDetail (d) <- retailRangeInnerFlowDetail(innerFlowDetail);
        };
    };
} CONFIRM;

descriptionInnerArrival 'Название документа' (innerArrival) =
    [FORMULA STRING[200] '\'Приход в отдел \'|| CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberInnerArrival(innerArrival), dateInnerArrival(innerArrival), nameSenderDepartmentInnerArrival(innerArrival));

descriptionInnerArrivalDetail 'Название документа' (innerArrivalDetail) = descriptionInnerArrival(innerArrivalInnerArrivalDetail(innerArrivalDetail));

// ---------------------------------- Дооценка на внутреннем перемещении (приход) ------------------------------------------

CLASS priceChangeInnerArrival 'Переоценка на внутреннем перемещении' : priceChangeDocument;
CLASS priceChangeInnerArrivalDetail 'Строка переоценки на внутреннем перемещении' : priceChangeDocumentDetail;

needToPriceChangeInnerArrivalDetail (innerArrivalDetail) = curRetailPriceInnerArrivalDetail(innerArrivalDetail) != retailPriceInnerArrivalDetail(innerArrivalDetail) AND
                                                   balanceBeforeInnerArrivalInnerArrivalDetail(innerArrivalDetail) != 0;

@defineDocumentPriceChange(innerArrival);
@defineDocumentPriceChangeNumberCustom(innerArrival, innerArrival);

quantityPriceChangeInnerArrivalDetail 'Остаток' (priceChangeInnerArrivalDetail) =
    balanceBeforeInnerArrivalInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

@defineDocumentPriceChangePrice(innerArrival);
@defineDocumentPriceChangeCurPrice(innerArrival);

senderDepartmentPriceChangeInnerArrival (priceChangeInnerArrival) = senderDepartmentInnerArrival(innerArrivalPriceChangeInnerArrival(priceChangeInnerArrival));
nameSenderDepartmentPriceChangeInnerArrival 'Отдел-отправитель' (priceChangeInnerArrival) = name(senderDepartmentPriceChangeInnerArrival(priceChangeInnerArrival));

@metaCodeIsPriceChangeWrong(innerArrival);

//----------------------------- Возврат поставщику ---------------------------------------------------------------//

CLASS returnSupplier 'Возврат поставщику' : outAccountSumDocumentLedger, historyObject, numberedObject, consignment;
CLASS returnSupplierDetail 'Строка возврата поставщику' : outUserBalanceItemLedger, consignmentDetail;
CLASS returnSupplierPosted 'Закрытый возврат поставщику' : returnSupplier, postedObject;

@defineDocumentDefaultProperties(returnSupplier);

@defineDocumentHeaderSupplierContract(returnSupplier);
@defineDocumentHeaderRevaluation(returnSupplier);

@defineDocumentDetailItemExtra(returnSupplier);

@defineDocumentDetailQuantity(returnSupplier);

@defineDocumentDetailBasePrice(returnSupplier);
@defineDocumentDetailInvoicePrice(returnSupplier);

@defineDocumentDetailCurBasePrice(returnSupplier);

@defineDocumentDetailWareSum(returnSupplier);
@defineDocumentDetailInSum(returnSupplier);
@defineDocumentDetailOutSum(returnSupplier);
@defineDocumentDetailInvoiceSum(returnSupplier);

@defineDocumentHeaderQuantity(returnSupplier);

@defineDocumentHeaderWareSum(returnSupplier);
@defineDocumentHeaderOutSum(returnSupplier);
@defineDocumentHeaderInvoiceSum(returnSupplier);

// количество/цены по строкам

batchReturnSupplierDetail = DATA shipmentDetail (returnSupplierDetail) IN idGroup;
commonInfoBatchReturnSupplierDetail 'Партия' (returnSupplierDetail) = descriptionShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail));

// Запись "старых" значений в документ

importerPriceReturnSupplierDetail (returnSupplierDetail) <- importerPriceShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                    WHEN CHANGED(batchReturnSupplierDetail(returnSupplierDetail));

supplierPriceReturnSupplierDetail (returnSupplierDetail) <- supplierPriceShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                    WHEN CHANGED(batchReturnSupplierDetail(returnSupplierDetail));

supplierMarkupReturnSupplierDetail (returnSupplierDetail) <- supplierMarkupShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                             WHEN CHANGED(batchReturnSupplierDetail(returnSupplierDetail));

supplierRangeReturnSupplierDetail (returnSupplierDetail) <- supplierRangeShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                             WHEN CHANGED(batchReturnSupplierDetail(returnSupplierDetail));

wareReturnSupplierDetail (returnSupplierDetail) <- wareShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                   WHEN CHANGED(batchReturnSupplierDetail(returnSupplierDetail));

warePriceReturnSupplierDetail (returnSupplierDetail) <- warePriceShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                        WHEN CHANGED(batchReturnSupplierDetail(returnSupplierDetail));

retailRangeReturnSupplierDetail (returnSupplierDetail) <- retailRangeShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                             WHEN CHANGED(batchReturnSupplierDetail(returnSupplierDetail));

retailPriceReturnSupplierDetail (returnSupplierDetail) <- retailPriceShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                          WHEN CHANGED(batchReturnSupplierDetail(returnSupplierDetail));

//Потери при возврате

returnLossSupplierReturnSupplier '% потерь при возврате' (returnSupplier) = DATA NUMERIC[8,3] (returnSupplier) IN documentPrmGroup;

returnLossSupplierReturnSupplier (returnSupplier) <- returnLossSupplier(supplierReturnSupplier(returnSupplier))
    WHEN CHANGED(supplierReturnSupplier(returnSupplier));

lossSumCleanSupplierReturnSupplier 'Сумма потерь при возврате (без НДС)' (returnSupplier) =
    invoiceISumReturnSupplierDetailReturnSupplier (returnSupplier) * returnLossSupplierReturnSupplier(returnSupplier);

lossSumIncVATReturnSupplier 'Сумма НДС по потерям при возврате' (returnSupplier) =
    invoiceVATSumReturnSupplierDetailReturnSupplier (returnSupplier) * returnLossSupplierReturnSupplier(returnSupplier);

carryingChargesReturnSupplier 'Транспортные расходы' (returnSupplier) = DATA NUMERIC[16,2] (returnSupplier) IN documentSumGroup;

sumQuantityItemShipment (departmentStore, supplier, item) =
    GROUP SUM quantityShipmentDetail(shipmentDetail) AND isPostedShipmentDetail(shipmentDetail)
    BY departmentStoreShipmentDetail(shipmentDetail), supplierShipmentDetail(shipmentDetail), itemShipmentDetail(shipmentDetail);

CONSTRAINT itemShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail)) != itemReturnSupplierDetail(returnSupplierDetail)
    OR departmentStoreShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail)) != departmentStoreReturnSupplierDetail(returnSupplierDetail)
    OR supplierShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail)) != supplierReturnSupplierDetail(returnSupplierDetail)
    OR isNotPostedShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
    CHECKED BY batchReturnSupplierDetail MESSAGE 'Выберите партию этого товара';

CONSTRAINT quantityReturnSupplierDetail(returnSupplierDetail) > quantityShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
    MESSAGE 'Выбрано количество товара больше чем в приходе';


descriptionReturnSupplier 'Название документа' (returnSupplier) =
    [FORMULA STRING[200] '\'Возврат поставщику \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'] (
    seriesNumberObject(returnSupplier), dateReturnSupplier(returnSupplier), nameSupplierReturnSupplier(returnSupplier));

descriptionReturnSupplierDetail 'Название документа' (returnSupplierDetail) = descriptionReturnSupplier(returnSupplierReturnSupplierDetail(returnSupplierDetail));

// для возвратной накладной (шапка и хвост)

@defineDocumentHeaderConsignment(returnSupplier);
unloadingPlaceReturnSupplier 'Пункт разгрузки' (returnSupplier) = UNION OVERRIDE addressLegalEntity(supplierReturnSupplier(returnSupplier)),
                                                                                 dataUnloadingPlaceReturnSupplier (returnSupplier);

// ---------------------------------- Переоценка на возврате ------------------------------------------

CLASS priceChangeReturnSupplier 'Переоценка на возврате' : priceChangeDocument;
CLASS priceChangeReturnSupplierDetail 'Строка переоценки на возврате' : priceChangeDocumentDetail;

needToPriceChangeReturnSupplierDetail (returnSupplierDetail) = retailPriceReturnSupplierDetail(returnSupplierDetail) != curRetailPriceReturnSupplierDetail(returnSupplierDetail);

@defineDocumentPriceChange(returnSupplier);
@defineDocumentPriceChangeNumber(returnSupplier);
@defineDocumentPriceChangeQuantity(returnSupplier);
@defineDocumentPriceChangePrice(returnSupplier);
@defineDocumentPriceChangeCurPrice(returnSupplier);

supplierPriceChangeReturnSupplier (priceChangeReturnSupplier) = supplierReturnSupplier(returnSupplierPriceChangeReturnSupplier(priceChangeReturnSupplier));
nameSupplierPriceChangeReturnSupplier 'Поставщик' (priceChangeReturnSupplier) = name(supplierPriceChangeReturnSupplier(priceChangeReturnSupplier));

@metaCodeIsPriceChangeWrong(returnSupplier);

// ----------------------------- Z - отчеты ---------------------------- //

CLASS zReport 'Z-отчет (открытый)' : outAccountSumDocumentLedger, historyObject;
CLASS zReportPosted 'Z-отчет (закрытый)' : zReport, postedObject;

TABLE zReport (zReport);

@defineDocumentHeaderPosted(zReport);

@defineDocumentHeaderTime(zReport);
@defineDocumentHeaderDepartmentStore(zReport);

numberZReport 'Номер Z-отчета' (zReport) = DATA INTEGER(zReport) IN documentPrmGroup;
numberToZReportPosted (zReportPosted) = GROUP UNIQUE zReportPosted BY numberZReport (zReportPosted) WHERE zReportPosted IS zReportPosted;

cashRegisterZReport (zReport) = DATA cashRegister(zReport);
numberCashRegisterZReport 'Касса Z-отчета' (zReport) = numberCashRegister(cashRegisterZReport(zReport)) IN documentPrmGroup;

departmentStoreZReport(zReport) <- departmentStoreCashRegister(cashRegisterZReport(zReport))
    WHEN CHANGED(cashRegisterZReport(zReport));

descriptionZReport (zReport) =
    [FORMULA STRING[200] '\'Продажа по кассе \' || CAST($1 AS TEXT) || \' отдела \' || CAST($2 AS TEXT) ||  \' от \' || CAST($3 AS TEXT)'](
    numberCashRegisterZReport(zReport), nameDepartmentStoreZReport(zReport), dateZReport(zReport));

//----------------------------------------------- Чеки ---------------------------------------------------//

CLASS bill 'Чек' : historyObject;

CLASS ABSTRACT billDetail 'Строка чека';
CLASS billSaleDetail 'Строка продажи' : billDetail, outAutoBalanceItemLedger, salesLedger;
CLASS billReturnDetail 'Строка возврата' : billDetail, inAutoBalanceItemLedger;

TABLE bill (bill);
TABLE billSaleDetail (billSaleDetail);
TABLE billReturnDetail (billReturnDetail);

@defineDocumentRelationCustom(zReport, bill);

@defineDocumentHeaderTime(bill);

@defineDocumentDetailDepartmentStoreCustom(zReport, bill);
@defineDocumentDetailPostedCustom(zReport, bill);

@defineDocumentRelationCustom(bill, billSaleDetail);
@defineDocumentRelationCustom(bill, billReturnDetail);
billBillDetail (billDetail) = billBillReturnDetail(billDetail) OR billBillSaleDetail(billDetail);

@defineDocumentDetailTimeCustom(bill, billSaleDetail);
@defineDocumentDetailTimeCustom(bill, billReturnDetail);
dateTimeBillDetail 'Дата/время' (billDetail) = dateTimeBillReturnDetail(billDetail) OR dateTimeBillSaleDetail(billDetail);

@defineDocumentDetailPostedCustom(bill, billSaleDetail);
@defineDocumentDetailPostedCustom(bill, billReturnDetail);
isPostedBillDetail 'Закрыт' (billDetail) = isPostedBillReturnDetail(billDetail) OR isPostedBillSaleDetail(billDetail);

@defineDocumentDetailDepartmentStoreCustom(bill, billSaleDetail);
@defineDocumentDetailDepartmentStoreCustom(bill, billReturnDetail);
departmentStoreBillDetail (billDetail) = departmentStoreBillReturnDetail(billDetail) OR departmentStoreBillSaleDetail(billDetail);

@defineDocumentDetailItem(billSale);
@defineDocumentDetailItem(billReturn);
itemBillDetail (billDetail) = itemBillReturnDetail(billDetail) OR itemBillSaleDetail(billDetail);
nameAttributeItemBillDetail 'Товар' (billDetail) = nameAttributeItem(itemBillDetail(billDetail)) IN recognizeGroup;

numberBill 'Номер чека' (bill) = DATA INTEGER (bill) IN documentHeaderGroup;
zReportBillToBill (zReport, bill) = GROUP UNIQUE bill BY numberZReport(zReportBill(bill)), numberBill(bill) WHERE bill IS bill;

discountCardBill (bill) = DATA discountCard (bill);
numberDiscountCardBill 'Номер дисконтной карты' (bill) = numberDiscountCard(discountCardBill(bill));
nameCustomerDiscountCardBill 'Держатель дисконтной карты' (bill) = nameCustomerDiscountCard(discountCardBill(bill));

zReportBillDetail (billDetail) = zReportBill(billBillDetail(billDetail));

barcodeExBillDetail 'Штрих-код' (billDetail) = DATA STRING[14] (billDetail);

quantityBillSaleDetail 'Количество' (billDetail) = DATA NUMERIC[14,3] (billSaleDetail);
retailPriceBillSaleDetail 'Цена' (billDetail) = DATA NUMERIC[14,2] (billSaleDetail);
retailSumBillSaleDetail 'Сумма' (billDetail) = DATA NUMERIC[16,2] (billSaleDetail);
discountSumBillSaleDetail 'Сумма скидки' (billDetail) = DATA NUMERIC[16,2] (billSaleDetail);

quantityBillReturnDetail 'Количество' (billDetail) = DATA NUMERIC[14,3] (billReturnDetail);
retailPriceBillReturnDetail 'Цена' (billDetail) = DATA NUMERIC[14,2] (billReturnDetail);
retailSumBillReturnDetail 'Сумма' (billDetail) = DATA NUMERIC[16,2] (billReturnDetail);
discountSumBillReturnDetail 'Сумма скидки' (billDetail) = DATA NUMERIC[16,2] (billReturnDetail);

quantityBillDetail 'Количество' (billDetail) = quantityBillReturnDetail(billDetail) OR quantityBillSaleDetail(billDetail);
retailPriceBillDetail 'Цена' (billDetail) = retailPriceBillReturnDetail(billDetail) OR retailPriceBillSaleDetail(billDetail);
retailSumBillDetail 'Сумма' (billDetail) = retailSumBillReturnDetail(billDetail) OR retailSumBillSaleDetail(billDetail);
discountSumBillDetail 'Сумма скидки' (billDetail) = discountSumBillReturnDetail(billDetail) OR discountSumBillSaleDetail(billDetail);

retailSumSaleBillDetailSaleBill 'Сумма продажи' (bill) = GROUP SUM retailSumBillSaleDetail(billDetail)
    BY billBillSaleDetail (billDetail) IN documentSumGroup PERSISTENT;

retailSumReturnBillDetailReturnBill 'Сумма возврата' (bill) = GROUP SUM retailSumBillReturnDetail(billDetail)
    BY billBillReturnDetail (billDetail) IN documentSumGroup PERSISTENT;

retailSumBillDetailBill 'Сумма чека' (bill) = retailSumSaleBillDetailSaleBill(bill) (-) retailSumReturnBillDetailReturnBill(bill);

discountSumSaleBillDetailSaleBill 'Сумма скидки (продажи)' (bill) = GROUP SUM discountSumBillSaleDetail(billDetail)
    BY billBillSaleDetail (billDetail) IN documentSumGroup;

discountSumReturnBillDetailReturnBill 'Сумма скидки (возврат)' (bill) = GROUP SUM discountSumBillReturnDetail(billDetail)
    BY billBillReturnDetail (billDetail) IN documentSumGroup;

discountSumBillDetailBill 'Сумма скидки' (bill) = discountSumSaleBillDetailSaleBill(bill) (-) discountSumReturnBillDetailReturnBill(bill);

@defineDocumentHeaderCount(bill);

@defineDocumentHeaderQuantity(bill);
@defineDocumentHeaderItemQuantity(bill);

retailRangeBillSaleDetail = DATA range (billSaleDetail);
retailRangeBillReturnDetail = DATA range (billReturnDetail);
retailRangeBillDetail (billDetail) = retailRangeBillReturnDetail(billDetail) OR retailRangeBillSaleDetail(billDetail);

// используется только для приема реализации из внешних касс
numberBillDetail 'Номер позиции чека' = DATA INTEGER (billDetail);
zReportBillBillDetailToBillDetail (zReport, bill, billDetail) = GROUP UNIQUE billDetail BY numberZReport(zReportBillDetail(billDetail)), numberBill(billBillDetail(billDetail)), numberBillDetail(billDetail) WHERE billDetail IS billDetail;
//

addBillDetailBarcodeFill 'Добавить продажу по штрих-коду' = ACTION (bill) {
    FORM barcodeInput MODAL;

    IF formResult() == formResult.ok THEN {
         SET tmpSku() <- skuBarcodeStringDate(chosenString('barcode'), dateBill(bill));
         IF tmpSku() IS item THEN {
             ADDOBJ billSaleDetail;
             FOR o == addedObject() DO {
                 SET billBillSaleDetail(o) <- bill AS bill;
                 SET itemBillDetail(o) <- tmpSku();
                 SET barcodeExBillDetail(o) <- chosenString('barcode');
            //   SET quantity###object##Detail(o) <- amountBarcode(valueBarcodeToDate(chosenString('barcode'), date###object(object)));
            };
        } ELSE
        MESSAGE 'Не найден штрих-код';
    };

} TOOLBAR EDITKEY 'F4';

descriptionBill 'Название документа' (bill) = [FORMULA STRING[200] '\'Чек № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) '](
                                               numberBill(bill), dateTimeBill(bill));

descriptionBillSaleDetail (billDetail) = [FORMULA STRING[200] '\'Продажа № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) '] (
                                          numberBill(billBillSaleDetail(billDetail)), dateTimeBill(billBillSaleDetail(billDetail)));

descriptionBillReturnDetail (billDetail) = [FORMULA STRING[200] '\'Возврат № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) '] (
                                            numberBill(billBillReturnDetail(billDetail)), dateTimeBill(billBillReturnDetail(billDetail)));

descriptionBillDetail (billDetail) = descriptionBillReturnDetail(billDetail) OR descriptionBillSaleDetail(billDetail);

// ----------------- Оплаты по чеку ------------------------------

CLASS payment 'Оплата по чеку';
TABLE payment (payment);

CLASS STATIC paymentMeans 'Форма оплаты'{
    cash 'Наличные',
    card 'Карточка'
};
CLASS paymentType 'Тип платежа' : named;
TABLE paymentType (paymentType);

paymentMeansPaymentType (paymentType) = DATA paymentMeans (paymentType);
namePaymentMeansPaymentType 'Форма оплаты' (paymentType) = name(paymentMeansPaymentType(paymentType)) IN baseGroup;

sidPaymentType 'Идентификатор' = DATA STRING[10] (paymentType) IN baseGroup;
sidToTypePayment (tp) = GROUP UNIQUE paymentType BY sidPaymentType(paymentType) WHERE paymentType IS paymentType;

billPayment (payment) = DATA bill (payment);

numberPayment 'Номер платежа' (payment) = DATA INTEGER (payment);
zReportBillPaymentToPayment (zReport, bill, number) = GROUP UNIQUE payment BY numberZReport(zReportBill(billPayment(payment))), numberBill(billPayment(payment)), numberPayment(payment) WHERE payment IS payment;

sumPayment 'Сумма платежа' (payment) = DATA NUMERIC[16,2] (payment);

sumPaymentBill (bill) = GROUP SUM sumPayment(payment) BY billPayment(payment);

CONSTRAINT bill IS bill AND NOT retailSumBillDetailBill(bill) == sumPaymentBill(bill) MESSAGE 'Сумма платежей по чеку не соответствует сумме чека';

// todo: проверить работает ли CONSTRAINT

paymentTypePayment (payment) = DATA paymentType(payment);
namePaymentTypePayment 'Тип платежа' (payment) = name(paymentTypePayment(payment));

paymentMeansPayment (payment) = paymentMeansPaymentType(paymentTypePayment(payment));
namePaymentMeansPayment 'Форма оплаты' (payment) = name(paymentMeansPayment(payment));

// Итоги по Z-отчету

@defineDocumentHeaderQuantityCustom(zReport, billDetail);

retailSumBillDetailZReport 'Сумма Z-отчета' (zReport) = GROUP SUM retailSumBillDetailBill(bill) BY zReportBill(bill) PERSISTENT IN documentSumGroup;
discountSumBillDetailZReport 'Сумма скидок Z-отчета' (zReport) = GROUP SUM discountSumBillDetailBill(bill) BY zReportBill(bill) PERSISTENT IN documentSumGroup;

//---------------------------- Кассовые отчеты ----------------------------------------//
CLASS cashReport 'Кассовый отчет' : transaction;
TABLE cashReport (cashReport);

CLASS cashDocument 'Кассовый документ';
TABLE cashDocument (cashDocument);

CLASS incomeCashOrder 'ПКО': cashDocument;
CLASS outcomeCashOrder 'РКО': cashDocument;
CLASS bankCardsReport 'Отчет по банковским карточкам': cashDocument;

numberCashReport 'Номер кассового отчета' (cashReport) = DATA INTEGER (cashReport) IN baseGroup;
startDateCashReport 'Дата начала' (cashReport) = DATA DATE (cashReport) IN baseGroup;
endDateCashReport 'Дата окончания' (cashReport) = DATA DATE (cashReport) IN baseGroup;

reportCashDocument 'Отчет документа (ИД)' (cashDocument) = DATA cashReport (cashDocument) IN idGroup;
numberCashDocument 'Номер документа' (cashDocument) = DATA INTEGER (cashDocument) IN baseGroup;
sumCashDocument 'Сумма документа' (cashDocument) = DATA NUMERIC[16,2] (cashDocument) IN baseGroup;
dopInfoCashDocument 'Описание' (cashDocument) = DATA STRING[10] (cashDocument) IN baseGroup;

@metaCodeSingleAggregation(zReport, incomeCashOrder, isPostedZReport);

retailSumIncomeCashOrder(incomeCashOrder) = retailSumBillDetailZReport(zReportIncomeCashOrder(incomeCashOrder));
sumCashDocument (incomeCashOrder) <- retailSumIncomeCashOrder(incomeCashOrder) WHEN CHANGED(retailSumIncomeCashOrder(incomeCashOrder));

cashRegisterIncomeCashOrder (incomeCashOrder) = cashRegisterZReport(zReportIncomeCashOrder(incomeCashOrder));
numberCashRegisterIncomeCashOrder 'Номер кассы' (incomeCashOrder) = numberCashRegister(cashRegisterIncomeCashOrder(incomeCashOrder));

infoCashDocument 'Основание документа' (cashDocument) = UNION EXCLUSIVE numberCashRegisterIncomeCashOrder(cashDocument), dopInfoCashDocument (cashDocument);

FORM cashReport 'Кассовый отчет'
    OBJECTS r=cashReport FIXED PANEL
    OBJECTS d=cashDocument
    PROPERTIES (r) numberCashReport, startDateCashReport, endDateCashReport
    PROPERTIES (d) objectClassName, numberCashDocument, infoCashDocument, sumCashDocument, ADDOBJ, delete
    FILTERS reportCashDocument(d) == r
    EDIT cashReport OBJECT r
;

FORM cashReports 'Кассовые отчеты'
    OBJECTS r=cashReport, d=cashDocument
    PROPERTIES (r) startDateCashReport, endDateCashReport
    PROPERTIES (r) ADDFORM, EDITFORM, delete
    PROPERTIES (d) READONLY numberCashDocument, sumCashDocument
    FILTERS reportCashDocument(d) == r
;

// документ скидок для товарного отчета
CLASS saleDiscountDocument 'Скидка по продаже через кассы' : outAccountSumDocumentLedger;
TABLE saleDiscountDocument (saleDiscountDocument);

@metaCodeSingleAggregation(zReport, saleDiscountDocument, discountSumBillDetailZReport);
@defineDocumentHeaderAggregation(zReport, saleDiscountDocument);

numberCashRegisterSaleDiscountDocument (saleDiscountDocument) = numberCashRegisterZReport(zReportSaleDiscountDocument(saleDiscountDocument));

discountSaleDiscountDocument (saleDiscountDocument) = discountSumBillDetailZReport(zReportSaleDiscountDocument(saleDiscountDocument));

descriptionSaleDiscountDocument (saleDiscountDocument) =
    [FORMULA STRING[200] '\'Скидка по кассе \' || CAST($1 AS TEXT) || \' отдела \' || CAST($2 AS TEXT) ||  \' от \' || CAST($3 AS TEXT)'](
    numberCashRegisterSaleDiscountDocument(saleDiscountDocument), nameDepartmentStoreSaleDiscountDocument(saleDiscountDocument), dateSaleDiscountDocument(saleDiscountDocument));

//----------------------------------------------- Переоценка товара ---------------------------------------------------//

CLASS userPriceChange 'Переоценка товаров' : priceChangeDocument, numeratedObject, priceTransactionDocument, historyObject;
CLASS userPriceChangeDetail 'Строка переоценки товаров' : priceChangeDocumentDetail, importerPriceLedger, supplierPriceLedger, accountPriceLedger, retailPriceLedger, retailVATLedger, warePriceLedger;
CLASS userPriceChangePosted 'Закрытая переоценка товаров' : userPriceChange, postedObject;

@defineDocumentDefaultProperties(userPriceChange);

numberUserPriceChange (userPriceChange) = numberObject(userPriceChange) AND userPriceChange IS userPriceChange;
seriesUserPriceChange (userPriceChange) = seriesObject(userPriceChange) AND userPriceChange IS userPriceChange;

@defineDocumentDetailQuantity(userPriceChange);
@defineDocumentDetailBasePrice(userPriceChange);
@defineDocumentDetailCurBasePrice(userPriceChange);

@defineDocumentHeaderItemQuantity(userPriceChange);

@defineDocumentHeaderRevaluation(userPriceChange);

descriptionUserPriceChange 'Название документа' (userPriceChange) =
    [FORMULA STRING[200] '\'Акт переоценки \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT)'](
    seriesNumberObject(userPriceChange), dateUserPriceChange(userPriceChange));

descriptionUserPriceChangeDetail 'Название документа' (userPriceChangeDetail) = descriptionUserPriceChange(userPriceChangeUserPriceChangeDetail(userPriceChangeDetail));

//------------------------------------ Проверка на запрет переоценки ------------------------------------------------- //

isPriceChangeWrongUserPriceChange (userPriceChangeDetail) =
    retailPriceUserPriceChangeDetail(userPriceChangeDetail) < curRetailPriceUserPriceChangeDetail(userPriceChangeDetail)
    IF banMarkdownItem(itemUserPriceChangeDetail(userPriceChangeDetail)) == TRUE;
//    IF banRevaluationItemDepartmentVal(
//        itemUserPriceChangeDetail(userPriceChangeDetail),
//        departmentStoreUserPriceChangeDetail(userPriceChangeDetail),
//        dateUserPriceChangeDetail(userPriceChangeDetail)) == yesNo.yes;

CONSTRAINT isPriceChangeWrongUserPriceChange (userPriceChangeDetail) MESSAGE 'Уценка товара запрещена';

//----------------------------------- Пересорт товара -------------------------------------------------------

CLASS disparity 'Пересортица' : historyObject, numeratedObject;    // incAccountSumDocumentLedger
CLASS disparityPosted 'Закрытая пересортица' : disparity, postedObject;
TABLE disparity (disparity);

CLASS inDisparityLedger 'Приход пересортицы' : batch, importerPriceLedger, supplierPriceLedger, retailVATLedger, accountPriceLedger, retailPriceLedger;
TABLE inDisparityLedger (inDisparityLedger);

CLASS disparityDetail 'Строка пересортицы': outAutoBalanceItemLedger;


// шапка дакта
@defineDocumentRelation(disparity);

@defineDocumentDepartmentStore(disparity);
@defineDocumentTime(disparity);
@defineDocumentPosted(disparity);
@defineDocumentDetailIndex(disparity);

@defineDocumentHeaderRevaluation(disparity);
                                // Расход //
itemOutputDisparityDetail = DATA item (disparityDetail);

nameAttributeItemOutputDisparityDetail 'Товар, расход' (disparityDetail) =
    nameAttributeItem(itemOutputDisparityDetail(disparityDetail)) IN itemDetailGroup;

shortNameUnitOfMeasureItemOutputDisparityDetail 'Ед. изм.' (disparityDetail) =
    shortNameUnitOfMeasureItem(itemOutputDisparityDetail(disparityDetail)) IN itemDetailGroup;

barcodeExSkuOutputDisparityDetail 'Штрих-код' (disparityDetail) =
    barcodeEx(barcodeSku(itemOutputDisparityDetail(disparityDetail))) IN itemDetailGroup;

quantityOutputDisparityDetail 'Кол-во, расход' (disparityDetail) = DATA NUMERIC[14,3] (disparityDetail);

importerPriceOutputDisparityDetail 'Цена изготовителя/импортера' = DATA NUMERIC[14,2] (disparityDetail) IN priceDetailGroup;
supplierPriceOutputDisparityDetail 'Цена поставщика без НДС' = DATA NUMERIC[14,2] (disparityDetail) IN priceDetailGroup;

wareOutputDisparityDetail = DATA ware(disparityDetail);
nameWareOutputDisparityDetail 'Посуда' (disparityDetail) = name(wareOutputDisparityDetail(disparityDetail)) IN priceDetailGroup;
dataWareRangeOutputDisparityDetail 'НДС посуды, %' (disparityDetail) =
    dataActingRateRangeDate(rangeWareVal(wareOutputDisparityDetail(disparityDetail), dateDisparityDetail(disparityDetail)),
                            dateDisparityDetail(disparityDetail));
inWareOutputDisparityDetail 'Товар в посуде' (disparityDetail) = inWareItem(itemOutputDisparityDetail(disparityDetail));

warePriceOutputDisparityDetail 'Цена посуды с НДС' = DATA NUMERIC[14,2] (disparityDetail) IN priceDetailGroup;

retailPriceOutputDisparityDetail 'Розничная цена' = DATA NUMERIC[14,2] (disparityDetail) IN priceDetailGroup;

retailRangeOutputDisparityDetail = DATA range (disparityDetail);
numberRetailRangeOutputDisparityDetail 'НДС розничный, номер' (disparityDetail) = dataRange(retailRangeOutputDisparityDetail(disparityDetail)) IN priceDetailGroup;
dataRetailRangeOutputDisparityDetail 'НДС розничный, %' (disparityDetail) =
   dataActingRateRangeDate(retailRangeOutputDisparityDetail(disparityDetail), dateDisparityDetail(disparityDetail)) IN priceDetailGroup;

CONSTRAINT taxRange(retailRangeOutputDisparityDetail(disparityDetail)) != tax.taxNDS CHECKED BY retailRangeOutputDisparityDetail MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

quantityOutputDetailDisparity 'Кол-во (всего)' (disparity) = GROUP SUM quantityOutputDisparityDetail(disparityDetail) BY disparityDisparityDetail(disparityDetail) IN documentSumGroup;

@defineDocumentDetailRetailSum(outputDisparity);

retailSumOutputDisparityDetailDisparity 'Розничная сумма' (disparity) =
    GROUP SUM retailSumOutputDisparityDetail(disparityDetail) BY disparityDisparityDetail(disparityDetail) IN documentSumGroup;

                                  // Приход
itemInputDisparityDetail = DATA item (disparityDetail);

nameAttributeItemInputDisparityDetail 'Товар, приход' (disparityDetail) =
    nameAttributeItem(itemInputDisparityDetail(disparityDetail)) IN itemDetailGroup;

shortNameUnitOfMeasureItemInputDisparityDetail 'Ед. изм.' (disparityDetail) =
    shortNameUnitOfMeasureItem(itemInputDisparityDetail(disparityDetail)) IN itemDetailGroup;

barcodeExSkuInputDisparityDetail 'Штрих-код' (disparityDetail) =
    barcodeEx(barcodeSku(itemInputDisparityDetail(disparityDetail))) IN itemDetailGroup;

quantityInputDisparityDetail 'Кол-во, приход' (disparityDetail) = DATA NUMERIC[14,3] (disparityDetail);

importerPriceInputDisparityDetail 'Цена изготовителя/импортера' = DATA NUMERIC[14,2] (disparityDetail) IN priceDetailGroup;
supplierPriceInputDisparityDetail 'Цена поставщика без НДС' = DATA NUMERIC[14,2] (disparityDetail) IN priceDetailGroup;

wareInputDisparityDetail = DATA ware(disparityDetail);
nameWareInputDisparityDetail 'Посуда' (disparityDetail) = name(wareInputDisparityDetail(disparityDetail)) IN priceDetailGroup;
dataWareRangeInputDisparityDetail 'НДС посуды, %' (disparityDetail) =
    dataActingRateRangeDate(rangeWareVal(wareInputDisparityDetail(disparityDetail), dateDisparityDetail(disparityDetail)),
                            dateDisparityDetail(disparityDetail));
inWareInputDisparityDetail 'Товар в посуде' (disparityDetail) = inWareItem(itemInputDisparityDetail(disparityDetail));
warePriceInputDisparityDetail 'Цена посуды с НДС' = DATA NUMERIC[14,2] (disparityDetail) IN priceDetailGroup;

retailPriceInputDisparityDetail 'Розничная цена' = DATA NUMERIC[14,2] (disparityDetail) IN priceDetailGroup;

retailRangeInputDisparityDetail = DATA range (disparityDetail);
numberRetailRangeInputDisparityDetail 'НДС розничный, номер' (disparityDetail) = dataRange(retailRangeInputDisparityDetail(disparityDetail)) IN priceDetailGroup;
dataRetailRangeInputDisparityDetail 'НДС розничный, %' (disparityDetail) =
   dataActingRateRangeDate(retailRangeInputDisparityDetail(disparityDetail), dateDisparityDetail(disparityDetail)) IN priceDetailGroup;

CONSTRAINT taxRange(retailRangeInputDisparityDetail(disparityDetail)) != tax.taxNDS CHECKED BY retailRangeInputDisparityDetail MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

quantityInputDetailDisparity 'Кол-во (всего)' (disparity) = GROUP SUM quantityInputDisparityDetail(disparityDetail) BY disparityDisparityDetail(disparityDetail) IN documentSumGroup;

@defineDocumentDetailRetailSum(inputDisparity);

retailSumInputDisparityDetailDisparity 'Розничная сумма' (disparity) =
    GROUP SUM retailSumInputDisparityDetail(disparityDetail) BY disparityDisparityDetail(disparityDetail) IN documentSumGroup;

                                  // Текущее значение расхода //


curRetailPriceInputDisparityDetail 'Тек. розничная цена' (disparityDetail) = DATA NUMERIC[14,2] (disparityDetail) IN priceDetailGroup;


//----------------------------  Изменение остатка пересорт --------------------------------------------//

needToInDisparityLedgerDetail (disparityDetail) = quantityInputDisparityDetail(disparityDetail) > 0
    AND isPostedDisparityDetail(disparityDetail);

@metaCodeSingleAggregation(disparityDetail, inDisparityLedger, needToInDisparityLedgerDetail);

itemInDisparityLedger (inDisparityLedger) = itemInputDisparityDetail(disparityDetailInDisparityLedger(inDisparityLedger));
nameAttributeItemInDisparityLedger 'Товар' (inDisparityLedger) = nameAttributeItem(itemInDisparityLedger(inDisparityLedger)) MINCHARWIDTH 15 PREFCHARWIDTH 15;
barcodeExSkuInDisparityLedger 'Штрих-код' (inDisparityLedger) = barcodeExSkuInputDisparityDetail(disparityDetailInDisparityLedger(inDisparityLedger));
dateTimeInDisparityLedger(inDisparityLedger) = dateTimeDisparityDetail(disparityDetailInDisparityLedger(inDisparityLedger));
dateInDisparityLedger(inDisparityLedger) = dateDisparityDetail(disparityDetailInDisparityLedger(inDisparityLedger));
isPostedInDisparityLedger(inDisparityLedger) = isPostedDisparityDetail(disparityDetailInDisparityLedger(inDisparityLedger));
departmentStoreInDisparityLedger(inDisparityLedger) = departmentStoreDisparityDetail(disparityDetailInDisparityLedger(inDisparityLedger));
quantityInDisparityLedger(inDisparityLedger) = quantityInputDisparityDetail(disparityDetailInDisparityLedger(inDisparityLedger));

importerPriceInDisparityLedger 'Цена изготовителя' (inDisparityLedger) = importerPriceOutputDisparityDetail(disparityDetailInDisparityLedger(inDisparityLedger));
supplierPriceInDisparityLedger 'Цена поставщика' (inDisparityLedger) = supplierPriceOutputDisparityDetail(disparityDetailInDisparityLedger(inDisparityLedger));

dataRetailRangeInDisparityLedger 'НДС, %' (inDisparityLedger) = dataRetailRangeOutputDisparityDetail(disparityDetailInDisparityLedger(inDisparityLedger));

wareInDisparityLedger 'Посуда' (inDisparityLedger) = wareOutputDisparityDetail(disparityDetailInDisparityLedger(inDisparityLedger));
dataWareRangeInDisparityLedger 'НДС посуды, %' (inDisparityLedger) =
      dataActingRateRangeDate(rangeWareVal(wareInDisparityLedger(inDisparityLedger), dateInDisparityLedger(inDisparityLedger)),
                                                                   dateInDisparityLedger(inDisparityLedger));

warePriceInDisparityLedger 'Цена посуды' (inDisparityLedger) =  warePriceOutputDisparityDetail(disparityDetailInDisparityLedger(inDisparityLedger));

retailPriceInDisparityLedger 'Розничная цена' (inDisparityLedger) = retailPriceInputDisparityDetail(disparityDetailInDisparityLedger(inDisparityLedger));

descriptionDisparity 'Название документа' (disparity) =
    [FORMULA STRING[200] '\'Пересортица \' ||  \' \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'](
    seriesNumberObject(disparity), dateDisparity(disparity));

descriptionInDisparityLedger 'Название документа' (inDisparityLedger) =
    [FORMULA STRING[200] '\'Пересортица (приход)\' ||  \' \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'](
    seriesNumberObject(disparityDisparityDetail(disparityDetailInDisparityLedger(inDisparityLedger))), dateDisparity(disparityDisparityDetail(disparityDetailInDisparityLedger(inDisparityLedger))));

descriptionDisparityDetail 'Название документа' (disparityDetail) =
    [FORMULA STRING[200] '\'Пересортица (расход)\' ||  \' \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'](
    seriesNumberObject(disparityDisparityDetail(disparityDetail)), dateDisparity(disparityDisparityDetail(disparityDetail)));


// ---------------------------------- Дооценка остатка при пересорте ------------------------------------------

balanceBeforeDisparityDetail 'Остаток до пересорта' (disparityDetail) = DATA NUMERIC[14,3] (disparityDetail) IN baseGroup;

CLASS mixPriceChangeDisparity 'Переоценка остатка при пересортице' : priceChangeDocument;
CLASS mixPriceChangeDisparityDetail 'Строка переоценки остатка при пересортице' : priceChangeDocumentDetail;

needToMixPriceChangeDisparityDetail (disparityDetail) = curRetailPriceInputDisparityDetail(disparityDetail) != retailPriceInputDisparityDetail(disparityDetail) AND
                                                   balanceBeforeDisparityDetail(disparityDetail) !=0;


needToMixPriceChangeDisparity (disparity) = GROUP SUM 1 IF needToMixPriceChangeDisparityDetail(disparityDetail) BY disparityDisparityDetail(disparityDetail);

@metaCodeDetailAggregation(disparity, mixPriceChangeDisparity, needToMixPriceChangeDisparity);
@defineDocumentHeaderAggregation(disparity, mixPriceChangeDisparity);
@defineDocumentHeaderAggregationDescription(disparity, mixPriceChangeDisparity);

@defineDocumentDetailAggregationHeader(disparity, mixPriceChangeDisparity);

itemMixPriceChangeDisparityDetail (mixPriceChangeDisparityDetail) = itemInputDisparityDetail(disparityDetailMixPriceChangeDisparityDetail(mixPriceChangeDisparityDetail));
nameItemMixPriceChangeDisparityDetail 'Товар' (mixPriceChangeDisparityDetail) = nameAttributeItem(itemMixPriceChangeDisparityDetail(mixPriceChangeDisparityDetail));
barcodeExSkuMixPriceChangeDisparityDetail 'Штрих-код' (mixPriceChangeDisparityDetail) = barcodeEx(barcodeSku(itemMixPriceChangeDisparityDetail(mixPriceChangeDisparityDetail)));
quantityMixPriceChangeDisparityDetail 'Количество' (mixPriceChangeDisparityDetail) = balanceBeforeDisparityDetail(disparityDetailMixPriceChangeDisparityDetail(mixPriceChangeDisparityDetail));

importerPriceMixPriceChangeDisparityDetail 'Цена изготовителя' (mixPriceChangeDisparityDetail) = importerPriceInputDisparityDetail(disparityDetailMixPriceChangeDisparityDetail(mixPriceChangeDisparityDetail));
supplierPriceMixPriceChangeDisparityDetail 'Цена поставщика' (mixPriceChangeDisparityDetail) = supplierPriceInputDisparityDetail(disparityDetailMixPriceChangeDisparityDetail(mixPriceChangeDisparityDetail));

dataRetailRangeMixPriceChangeDisparityDetail 'НДС, %' (mixPriceChangeDisparityDetail) = dataRetailRangeInputDisparityDetail(disparityDetailMixPriceChangeDisparityDetail(mixPriceChangeDisparityDetail));

wareMixPriceChangeDisparityDetail 'Посуда' (mixPriceChangeDisparityDetail) = wareInputDisparityDetail(disparityDetailMixPriceChangeDisparityDetail(mixPriceChangeDisparityDetail));
dataWareRangeMixPriceChangeDisparityDetail 'НДС посуды, %' (mixPriceChangeDisparityDetail) =
      dataActingRateRangeDate(rangeWareVal(wareMixPriceChangeDisparityDetail(mixPriceChangeDisparityDetail), dateMixPriceChangeDisparityDetail(mixPriceChangeDisparityDetail)),
                                                                   dateMixPriceChangeDisparityDetail(mixPriceChangeDisparityDetail));

warePriceMixPriceChangeDisparityDetail 'Цена посуды' (mixPriceChangeDisparityDetail) =  warePriceInputDisparityDetail(disparityDetailMixPriceChangeDisparityDetail(mixPriceChangeDisparityDetail));

retailPriceMixPriceChangeDisparityDetail 'Розничная цена' (mixPriceChangeDisparityDetail) = retailPriceInputDisparityDetail(disparityDetailMixPriceChangeDisparityDetail(mixPriceChangeDisparityDetail));


curRetailPriceMixPriceChangeDisparityDetail 'Текущая розничная цена' (mixPriceChangeDisparityDetail) = curRetailPriceInputDisparityDetail(disparityDetailMixPriceChangeDisparityDetail(mixPriceChangeDisparityDetail));

numberDisposalMixPriceChangeDisparity '№ распоряжения на переоценку' (mixPriceChangeDisparity) = numberDisposalDisparity(disparityMixPriceChangeDisparity(mixPriceChangeDisparity));
revaluationCommitteeMixPriceChangeDisparity 'Комиссия переоценки ИД' (mixPriceChangeDisparity) = revaluationCommitteeDisparity(disparityMixPriceChangeDisparity(mixPriceChangeDisparity));

numberMixPriceChangeDisparity 'Номер документа' (mixPriceChangeDisparity) = numberObject(disparityMixPriceChangeDisparity(mixPriceChangeDisparity));
seriesMixPriceChangeDisparity 'Серия документа' (mixPriceChangeDisparity) = seriesObject(disparityMixPriceChangeDisparity(mixPriceChangeDisparity));
seriesNumberMixPriceChangeDisparity 'Серия/номер документ' (mixPriceChangeDisparity) = seriesNumberObject(disparityMixPriceChangeDisparity(mixPriceChangeDisparity));

isPriceChangeWrongMixPriceChangeDisparityDetail (mixPriceChangeDisparityDetail) =
    retailPriceMixPriceChangeDisparityDetail(mixPriceChangeDisparityDetail) < curRetailPriceMixPriceChangeDisparityDetail(mixPriceChangeDisparityDetail)
      AND banMarkdownItem(itemMixPriceChangeDisparityDetail(mixPriceChangeDisparityDetail));

CONSTRAINT isPriceChangeWrongMixPriceChangeDisparityDetail (mixPriceChangeDisparityDetail) MESSAGE 'Уценка товара запрещена';

// ---------------------------------- Переоценка при пересорте ------------------------------------------

CLASS priceChangeDisparity 'Переоценка при пересортице' : priceChangeDocument;
CLASS priceChangeDisparityDetail 'Строка переоценки при пересортице' : priceChangeDocumentDetail;

needToPriceChangeDisparityDetail (disparityDetail) = retailPriceOutputDisparityDetail(disparityDetail) != retailPriceInputDisparityDetail(disparityDetail) AND
                                                   quantityOutputDisparityDetail(disparityDetail) >0 AND quantityInputDisparityDetail(disparityDetail) >0;


needToPriceChangeDisparity (disparity) = GROUP SUM 1 IF needToPriceChangeDisparityDetail(disparityDetail) BY disparityDisparityDetail(disparityDetail);

@metaCodeDetailAggregation(disparity, priceChangeDisparity, needToPriceChangeDisparity);
@defineDocumentHeaderAggregation(disparity, priceChangeDisparity);
@defineDocumentHeaderAggregationDescription(disparity, priceChangeDisparity);

@defineDocumentDetailAggregationHeader(disparity, priceChangeDisparity);

itemPriceChangeDisparityDetail (priceChangeDisparityDetail) = itemInputDisparityDetail(disparityDetailPriceChangeDisparityDetail(priceChangeDisparityDetail));
nameItemPriceChangeDisparityDetail 'Товар' (priceChangeDisparityDetail) = nameAttributeItem(itemPriceChangeDisparityDetail(priceChangeDisparityDetail));
barcodeExSkuPriceChangeDisparityDetail 'Штрих-код' (priceChangeDisparityDetail) = barcodeEx(barcodeSku(itemPriceChangeDisparityDetail(priceChangeDisparityDetail)));
quantityPriceChangeDisparityDetail 'Количество' (priceChangeDisparityDetail) = quantityInputDisparityDetail(disparityDetailPriceChangeDisparityDetail(priceChangeDisparityDetail));


retailPricePriceChangeDisparityDetail 'Розничная цена' (priceChangeDisparityDetail) = retailPriceInputDisparityDetail(disparityDetailPriceChangeDisparityDetail(priceChangeDisparityDetail));


curRetailPricePriceChangeDisparityDetail 'Текущая розничная цена' (priceChangeDisparityDetail) = retailPriceOutputDisparityDetail(disparityDetailPriceChangeDisparityDetail(priceChangeDisparityDetail));

importerPricePriceChangeDisparityDetail 'Цена изготовителя' (priceChangeDisparityDetail) = importerPriceOutputDisparityDetail(disparityDetailPriceChangeDisparityDetail(priceChangeDisparityDetail));
supplierPricePriceChangeDisparityDetail 'Цена поставщика' (priceChangeDisparityDetail) = supplierPriceOutputDisparityDetail(disparityDetailPriceChangeDisparityDetail(priceChangeDisparityDetail));

dataRetailRangePriceChangeDisparityDetail 'НДС, %' (priceChangeDisparityDetail) = dataRetailRangeOutputDisparityDetail(disparityDetailPriceChangeDisparityDetail(priceChangeDisparityDetail));

warePriceChangeDisparityDetail 'Посуда' (priceChangeDisparityDetail) = wareOutputDisparityDetail(disparityDetailPriceChangeDisparityDetail(priceChangeDisparityDetail));
warePricePriceChangeDisparityDetail 'Цена посуды' (priceChangeDisparityDetail) = warePriceOutputDisparityDetail(disparityDetailPriceChangeDisparityDetail(priceChangeDisparityDetail));

numberDisposalPriceChangeDisparity '№ распоряжения на переоценку' (priceChangeDisparity) = numberDisposalDisparity(disparityPriceChangeDisparity(priceChangeDisparity));
revaluationCommitteePriceChangeDisparity 'Комиссия переоценки ИД' (priceChangeDisparity) = revaluationCommitteeDisparity(disparityPriceChangeDisparity(priceChangeDisparity));


@defineDocumentPriceChangeNumber(disparity);
@metaCodeIsPriceChangeWrong(disparity);

//---------------------------- Количественные регистры (конкретная реализация) ----------------------------------------//

dateTimeBalanceItemLedger 'Дата/время' = ABSTRACT DATETIME (balanceItemLedger) PERSISTENT INDEXED;
dateBalanceItemLedger 'Дата' (ledger) = dateInTime(dateTimeBalanceItemLedger(ledger)) PERSISTENT;

orderBalanceItemLedger (ledger) = LIST(dateTimeBalanceItemLedger(ledger), ledger);

isPostedBalanceItemLedger 'Закрыт' = ABSTRACT BOOLEAN (balanceItemLedger) PERSISTENT;

itemBalanceItemLedger = ABSTRACT item (balanceItemLedger) PERSISTENT INDEXED;
nameItemBalanceItemLedger 'Товар' (ledger) = nameAttributeItem(itemBalanceItemLedger(ledger));

departmentStoreBalanceItemLedger = ABSTRACT departmentStore(balanceItemLedger) PERSISTENT INDEXED;
nameDepartmentStoreBalanceItemLedger 'Отдел магазина' (ledger) = name(departmentStoreBalanceItemLedger(ledger));

descriptionBalanceItemLedger 'Название документа' = ABSTRACT STRING[200] (balanceItemLedger);

// ---------------------------- Расчет себестоимости -------------------------------- //

TABLE batch(batch);
TABLE balanceItemLedgerBatch (balanceItemLedger, batch);
TABLE batchDepartmentStore(batch, departmentStore);

quantityBatch 'Кол-во в партии' = ABSTRACT NUMERIC[14,3] (batch);

quantityOutAutoBalanceItemLedger 'Кол-во' = ABSTRACT NUMERIC[14,3] (outAutoBalanceItemLedger);

quantityOutUserBalanceItemLedger 'Кол-во' = ABSTRACT NUMERIC[14,3] (outUserBalanceItemLedger);
batchOutUserBalanceItemLedger 'Партия' = ABSTRACT batch (outUserBalanceItemLedger);

quantityOutBalanceItemLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityOutAutoBalanceItemLedger(ledger),
                                                                 quantityOutUserBalanceItemLedger(ledger) PERSISTENT;

quantityInAutoBalanceItemLedger 'Кол-во' (ledger) = ABSTRACT NUMERIC[14,3] (inAutoBalanceItemLedger);

quantityInBalanceItemLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityBatch(ledger),
                                                                quantityInAutoBalanceItemLedger(ledger),
                                                                quantityInnerArrivalDetail(ledger) PERSISTENT;

quantityBalanceItemLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityInBalanceItemLedger(ledger),
                                                              quantityOutBalanceItemLedger(ledger) PERSISTENT;

signedQuantityBalanceItemLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityInBalanceItemLedger(ledger),
                                                                    -quantityOutBalanceItemLedger(ledger) PERSISTENT;

// ---------------------------- Остаток по товару -------------------------------- //

currentBalanceItemLedger 'Текущий остаток' (item, departmentStore) = GROUP SUM signedQuantityBalanceItemLedger (ledger) AND isPostedBalanceItemLedger(ledger)
                                                          BY itemBalanceItemLedger(ledger), departmentStoreBalanceItemLedger(ledger) PERSISTENT;
countBalanceItemLedger 'Кол-во движений' (item, departmentStore) = GROUP SUM 1 AND signedQuantityBalanceItemLedger (ledger) AND isPostedBalanceItemLedger(ledger)
                                                          BY itemBalanceItemLedger(ledger), departmentStoreBalanceItemLedger(ledger) PERSISTENT;

quantityInItemDepartmentStoreDate (item, departmentStore, date) = GROUP SUM quantityInBalanceItemLedger(ledger) AND isPostedBalanceItemLedger(ledger)
                                                                        BY itemBalanceItemLedger(ledger), departmentStoreBalanceItemLedger(ledger), dateBalanceItemLedger(ledger) PERSISTENT;

quantityOutItemDepartmentStoreDate (item, departmentStore, date) = GROUP SUM quantityOutBalanceItemLedger(ledger) AND isPostedBalanceItemLedger(ledger)
                                                                         BY itemBalanceItemLedger(ledger), departmentStoreBalanceItemLedger(ledger), dateBalanceItemLedger(ledger) PERSISTENT;

quantityItemDepartmentStoreDate (item, departmentStore, date) = quantityInItemDepartmentStoreDate(item, departmentStore, date)
                                                                (+)
                                                                quantityOutItemDepartmentStoreDate(item, departmentStore, date) PERSISTENT;

signedQuantityItemDepartmentStoreDate (item, departmentStore, date) = quantityInItemDepartmentStoreDate(item, departmentStore, date)
                                                                      (-)
                                                                      quantityOutItemDepartmentStoreDate(item, departmentStore, date) PERSISTENT;

// без учета текущей даты/времени
balanceBItemLedgerDate 'Остаток на начало дня' (item, departmentStore, date) = UNION SUM currentBalanceItemLedger(item, departmentStore) AND date IS DATE,
                                                                                         -[GROUP SUM signedQuantityItemDepartmentStoreDate (item, departmentStore, dateIn) AND dateIn >= (date AS DATE)
                                                                                                 BY item, departmentStore, date](item, departmentStore, date);

// с учетом текущей даты/времени
balanceAItemLedgerDate 'Остаток на конец дня' (item, departmentStore, date) = UNION SUM currentBalanceItemLedger(item, departmentStore) AND date IS DATE,
                                                                                         -[GROUP SUM signedQuantityItemDepartmentStoreDate (item, departmentStore, dateIn) AND dateIn > (date AS DATE)
                                                                                                 BY item, departmentStore, date](item, departmentStore, date);

// без учета текущей даты/времени
balanceBItemLedgerDateTime 'Остаток на начало дня' (item, departmentStore, dateTime) = UNION SUM currentBalanceItemLedger(item, departmentStore) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM signedQuantityBalanceItemLedger (ledger) AND dateTimeBalanceItemLedger(ledger) >= (dateTime AS DATETIME) AND isPostedBalanceItemLedger(ledger)
                                                                         BY itemBalanceItemLedger(ledger), departmentStoreBalanceItemLedger(ledger), dateTime](item, departmentStore, dateTime);

// с учетом текущей даты/времени
balanceAItemLedgerDateTime 'Остаток на конец дня' (item, departmentStore, dateTime) = UNION SUM currentBalanceItemLedger(item, departmentStore) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM signedQuantityBalanceItemLedger (ledger) AND dateTimeBalanceItemLedger(ledger) > (dateTime AS DATETIME) AND isPostedBalanceItemLedger(ledger)
                                                                         BY itemBalanceItemLedger(ledger), departmentStoreBalanceItemLedger(ledger), dateTime](item, departmentStore, dateTime);

costBalanceItemLedgerBatch 'Расписано' (ledger, batch) = DATA NUMERIC[14,3] (balanceItemLedger, batch);

signedCostBalanceItemLedgerBatch (ledger, batch) = IF ledger IS outBalanceItemLedger
                                                        THEN -costBalanceItemLedgerBatch(ledger, batch)
                                                        ELSE costBalanceItemLedgerBatch(ledger, batch);

currentBalanceBatchLedger 'Текущий остаток' (batch, departmentStore) = GROUP SUM signedCostBalanceItemLedgerBatch (ledger, batch) AND isPostedBalanceItemLedger(ledger)
                                                          BY batch, departmentStoreBalanceItemLedger(ledger) PERSISTENT;

costedBalanceItemLedger 'Расписано' (ledger) = GROUP SUM costBalanceItemLedgerBatch (ledger, batch) BY ledger PERSISTENT;
needToCostBalanceItemLedger 'Требуется расчет себестоимости' (ledger) = quantityBalanceItemLedger(ledger) > 0 AND isPostedBalanceItemLedger(ledger)
                                                                        AND NOT quantityBalanceItemLedger(ledger) == costedBalanceItemLedger(ledger);

quantityBatchBatch 'Кол-во' (ledger, batch) = quantityBatch(ledger) AND batch == ledger;

dateTimeBatch 'Дата/время' (batch) = UNION EXCLUSIVE dateTimeShipmentDetail (batch),
                                                     dateTimeStudyOutputDetail (batch),
                                                     dateTimeInDisparityLedger(batch) PERSISTENT INDEXED;

orderBatch (batch) = LIST (dateTimeBatch(batch), batch) PERSISTENT;

isPostedBatch 'Закрыт' (batch) = UNION EXCLUSIVE isPostedShipmentDetail (batch),
                                                 isPostedStudyOutputDetail (batch),
                                                 isPostedInDisparityLedger(batch) PERSISTENT;

itemBatch 'Товар (ИД)' (batch) = UNION EXCLUSIVE itemShipmentDetail (batch),
                                                 itemStudyOutputDetail (batch),
                                                 itemInDisparityLedger(batch) PERSISTENT INDEXED;

supplierPriceBatch 'Цена поставщика' (batch) = UNION EXCLUSIVE supplierPriceShipmentDetail(batch),
                                                               supplierPriceStudyOutputDetail(batch),
                                                               supplierPriceInDisparityLedger(batch) PERSISTENT;

descriptionBatch 'Описание' (batch) = UNION EXCLUSIVE descriptionShipmentDetail(batch),
                                                      descriptionStudyOutputDetail(batch),
                                                      descriptionInDisparityLedger(batch) PERSISTENT;

currentBalanceBatch 'Остаток (всего)' = GROUP SUM currentBalanceBatchLedger(batch, departmentStore) BY batch PERSISTENT;

quantityOutUserBalanceItemLedgerBatch (ledger, batch) = quantityOutUserBalanceItemLedger(ledger) AND batch == batchOutUserBalanceItemLedger(ledger);
quantityOutAutoBalanceItemLedgerBatch (ledger, batch) =
        PARTITION UNGROUP quantityOutAutoBalanceItemLedger
                  LIMIT currentBalanceBatchLedger(batch, departmentStoreBalanceItemLedger(ledger)) AND itemBatch(batch) == itemBalanceItemLedger(ledger)
                  BY ledger
                  ORDER orderBatch(batch);

quantityOutBalanceItemLedgerBatch (ledger, batch) = UNION EXCLUSIVE quantityOutUserBalanceItemLedgerBatch(ledger, batch),
                                                                    quantityOutAutoBalanceItemLedgerBatch(ledger, batch);

quantityInBalanceItemLedgerBatch (ledger, batch) =
        PARTITION UNGROUP quantityInAutoBalanceItemLedger
                  LIMIT (quantityBatch(batch) (-) currentBalanceBatch(batch))
                    AND countBalanceItemLedger(itemBalanceItemLedger(ledger), departmentStoreBalanceItemLedger(ledger))
                    AND itemBatch(batch) == itemBalanceItemLedger(ledger)
                  BY ledger
                  ORDER DESC orderBatch(batch);

quantityInnerFlowBatch (innerFlow, batch) = GROUP SUM costBalanceItemLedgerBatch (innerFlowDetail, batch)
                                                  BY innerFlowInnerFlowDetail(innerFlowDetail), batch;

quantityInnerArrivalBatch (innerArrival, batch) = quantityInnerFlowBatch (innerFlowInnerArrival(innerArrival), batch);

quantityInnerArrivalDetailBatch (ledger, batch) =
        PARTITION UNGROUP quantityInnerArrivalDetail
                  LIMIT quantityInnerArrivalBatch(innerArrivalInnerArrivalDetail(ledger), batch)
                    AND itemBatch(batch) == itemInnerArrivalDetail(ledger)
                  BY ledger
                  ORDER DESC orderBatch(batch);

quantityBalanceItemLedgerBatch (ledger, batch) = UNION EXCLUSIVE quantityBatchBatch(ledger, batch),
                                                                 quantityOutBalanceItemLedgerBatch(ledger, batch),
                                                                 quantityInBalanceItemLedgerBatch(ledger, batch),
                                                                 quantityInnerArrivalDetailBatch(ledger, batch);

supplierSumBalanceItemLedgerBatch 'Сумма поставщика без НДС' (ledger, batch) = costBalanceItemLedgerBatch(ledger, batch) * supplierPriceBatch(batch);
supplierSumBalanceItemLedger 'Сумма поставщика без НДС' = GROUP SUM supplierSumBalanceItemLedgerBatch(ledger, batch) BY ledger;

resetCostBalanceItemLedgerBatch 'Перерассчитать себестоимость' = ACTION (ledger) NEWSESSION AUTOAPPLY {
    IF costedBalanceItemLedger(ledger) THEN {
        SET costBalanceItemLedgerBatch(ledger, batch) <- NULL;
        EXEC apply(); // todo : здесь apply не нужен, но без этого следующая команда повиснет
    }
    SET costBalanceItemLedgerBatch(ledger, batch) <- quantityBalanceItemLedgerBatch(ledger, batch);
}

setBalanceItemLedgerBatchCost 'Дорассчитать себестоимость' = ACTION () NEWSESSION {

    SET costBalanceItemLedgerBatch(ledger, batch) AND needToCostBalanceItemLedger(ledger) <- NULL;
    EXEC apply();

    FOR needToCostBalanceItemLedger(ledger) ORDER orderBalanceItemLedger(ledger) DO {
        SET costBalanceItemLedgerBatch(ledger, batch) <- quantityBalanceItemLedgerBatch(ledger, batch);
        EXEC apply();
    }
} CONFIRM;

resetBalanceItemLedgerBatchCost 'Перерассчитать себестоимость' = ACTION () NEWSESSION {

    FORM dialogDate MODAL;
    IF formResult() == formResult.ok THEN {

        FOR d == chosenDate('d') DO {
            SET costBalanceItemLedgerBatch(ledger, batch) AND dateBalanceItemLedger(ledger) >= (d AS DATE) <- NULL;
            EXEC apply();

            FOR dateBalanceItemLedger(ledger) >= (d AS DATE) AND isPostedBalanceItemLedger(ledger) ORDER orderBalanceItemLedger(ledger) DO {
                SET costBalanceItemLedgerBatch(ledger, batch) <- quantityBalanceItemLedgerBatch(ledger, batch);
                EXEC apply();
            }
        }
    }
} CONFIRM;

clearBalanceItemLedgerBatchCost 'Сбросить всю себестоимость' = ACTION() NEWSESSION AUTOAPPLY {
    SET costBalanceItemLedgerBatch(ledger, batch) <- NULL;
} CONFIRM;

dateTimeBalanceItemLedger (ledger) += dateTimeShipmentDetail(ledger);
dateTimeBalanceItemLedger (ledger) += dateTimeReturnSupplierDetail(ledger);
dateTimeBalanceItemLedger (ledger) += dateTimeInnerArrivalDetail(ledger);
dateTimeBalanceItemLedger (ledger) += dateTimeWriteOffDetail(ledger);
dateTimeBalanceItemLedger (ledger) += dateTimeStatementDetail(ledger);
dateTimeBalanceItemLedger (ledger) += dateTimeInnerFlowDetail(ledger);
dateTimeBalanceItemLedger (ledger) += dateTimeWastageDetail(ledger);
dateTimeBalanceItemLedger (ledger) += dateTimeInventoryLedger(ledger);
dateTimeBalanceItemLedger (ledger) += dateTimeBillDetail(ledger);
dateTimeBalanceItemLedger (ledger) += dateTimeStudyInputDetail(ledger);
dateTimeBalanceItemLedger (ledger) += dateTimeStudyOutputDetail(ledger);
dateTimeBalanceItemLedger (ledger) += dateTimeInDisparityLedger(ledger);
dateTimeBalanceItemLedger (ledger) += dateTimeDisparityDetail(ledger);

isPostedBalanceItemLedger (ledger) += isPostedShipmentDetail(ledger);
isPostedBalanceItemLedger (ledger) += isPostedReturnSupplierDetail(ledger);
isPostedBalanceItemLedger (ledger) += isPostedInnerArrivalDetail(ledger);
isPostedBalanceItemLedger (ledger) += isPostedWriteOffDetail(ledger);
isPostedBalanceItemLedger (ledger) += isPostedStatementDetail(ledger);
isPostedBalanceItemLedger (ledger) += isPostedInnerFlowDetail(ledger);
isPostedBalanceItemLedger (ledger) += isPostedWastageDetail(ledger);
isPostedBalanceItemLedger (ledger) += isPostedInventoryLedger(ledger);
isPostedBalanceItemLedger (ledger) += isPostedBillDetail(ledger);
isPostedBalanceItemLedger (ledger) += isPostedStudyInputDetail(ledger);
isPostedBalanceItemLedger (ledger) += isPostedStudyOutputDetail(ledger);
isPostedBalanceItemLedger (ledger) += isPostedInDisparityLedger(ledger);
isPostedBalanceItemLedger (ledger) += isPostedDisparityDetail(ledger);

itemBalanceItemLedger (ledger) += itemShipmentDetail(ledger);
itemBalanceItemLedger (ledger) += itemReturnSupplierDetail(ledger);
itemBalanceItemLedger (ledger) += itemInnerArrivalDetail(ledger);
itemBalanceItemLedger (ledger) += itemWriteOffDetail(ledger);
itemBalanceItemLedger (ledger) += itemStatementDetail(ledger);
itemBalanceItemLedger (ledger) += itemInnerFlowDetail(ledger);
itemBalanceItemLedger (ledger) += itemWastageDetail(ledger);
itemBalanceItemLedger (ledger) += itemInventoryLedger(ledger);
itemBalanceItemLedger (ledger) += itemBillDetail(ledger);
itemBalanceItemLedger (ledger) += itemStudyInputDetail(ledger);
itemBalanceItemLedger (ledger) += itemStudyOutputDetail(ledger);
itemBalanceItemLedger (ledger) += itemInDisparityLedger(ledger);
itemBalanceItemLedger (ledger) += itemOutputDisparityDetail(ledger);

departmentStoreBalanceItemLedger (ledger) += departmentStoreShipmentDetail(ledger);
departmentStoreBalanceItemLedger (ledger) += departmentStoreReturnSupplierDetail(ledger);
departmentStoreBalanceItemLedger (ledger) += departmentStoreInnerArrivalDetail(ledger);
departmentStoreBalanceItemLedger (ledger) += departmentStoreWriteOffDetail(ledger);
departmentStoreBalanceItemLedger (ledger) += departmentStoreStatementDetail(ledger);
departmentStoreBalanceItemLedger (ledger) += departmentStoreInnerFlowDetail(ledger);
departmentStoreBalanceItemLedger (ledger) += departmentStoreWastageDetail(ledger);
departmentStoreBalanceItemLedger (ledger) += departmentStoreInventoryLedger(ledger);
departmentStoreBalanceItemLedger (ledger) += departmentStoreBillDetail(ledger);
departmentStoreBalanceItemLedger (ledger) += departmentStoreStudyInputDetail(ledger);
departmentStoreBalanceItemLedger (ledger) += departmentStoreStudyOutputDetail(ledger);
departmentStoreBalanceItemLedger (ledger) += departmentStoreInDisparityLedger(ledger);
departmentStoreBalanceItemLedger (ledger) += departmentStoreDisparityDetail(ledger);

descriptionBalanceItemLedger (ledger) += descriptionShipmentDetail(ledger);
descriptionBalanceItemLedger (ledger) += descriptionInnerArrivalDetail(ledger);
descriptionBalanceItemLedger (ledger) += descriptionWriteOffDetail(ledger);
descriptionBalanceItemLedger (ledger) += descriptionStatementDetail(ledger);
descriptionBalanceItemLedger (ledger) += descriptionInnerFlowDetail(ledger);
descriptionBalanceItemLedger (ledger) += descriptionWastageDetail(ledger);
descriptionBalanceItemLedger (ledger) += descriptionReturnSupplierDetail(ledger);
descriptionBalanceItemLedger (ledger) += descriptionOutInventoryLedger(ledger);
descriptionBalanceItemLedger (ledger) += descriptionInInventoryLedger(ledger);
descriptionBalanceItemLedger (ledger) += descriptionBillDetail(ledger);
descriptionBalanceItemLedger (ledger) += descriptionStudyOutputDetail(ledger);
descriptionBalanceItemLedger (ledger) += descriptionStudyInputDetail(ledger);
descriptionBalanceItemLedger (ledger) += descriptionInDisparityLedger(ledger);
descriptionBalanceItemLedger (ledger) += descriptionDisparityDetail(ledger);

quantityBatch (ledger) += quantityShipmentDetail(ledger);
quantityBatch (ledger) += quantityStudyOutputDetail(ledger);
quantityBatch (ledger) += quantityInDisparityLedger(ledger);

quantityOutAutoBalanceItemLedger (ledger) += quantityWriteOffDetail(ledger);
quantityOutAutoBalanceItemLedger (ledger) += quantityStatementDetail(ledger);
quantityOutAutoBalanceItemLedger (ledger) += quantityInnerFlowDetail(ledger);
quantityOutAutoBalanceItemLedger (ledger) += quantityWastageDetail(ledger);
quantityOutAutoBalanceItemLedger (ledger) += quantityOutInventoryLedger(ledger);
quantityOutAutoBalanceItemLedger (ledger) += quantityBillSaleDetail(ledger);
quantityOutAutoBalanceItemLedger (ledger) += quantityStudyInputDetail(ledger);
quantityOutAutoBalanceItemLedger (ledger) += quantityOutputDetailDisparity(ledger);

quantityOutUserBalanceItemLedger (ledger) += quantityReturnSupplierDetail(ledger);
batchOutUserBalanceItemLedger (ledger) += batchReturnSupplierDetail(ledger);

quantityInAutoBalanceItemLedger (ledger) += quantityInInventoryLedger(ledger);
quantityInAutoBalanceItemLedger (ledger) += quantityBillReturnDetail(ledger);

// --------------------------- Использование регистров количества (автоматическое заполнение) ---------------------------------

balanceDepartmentStoreItemWriteOff 'Текущий остаток' (writeOffDetail) =
    currentBalanceItemLedger(itemWriteOffDetail(writeOffDetail), departmentStoreWriteOffDetail(writeOffDetail)) PERSISTENT;

//---------------------------- Ценовые регистры (конкретная реализация) ----------------------------------------//

META metaCodeItemDepartmentStoreLedger(prefix)

    nameItem###prefix##Ledger 'Товар' (ledger) = nameAttributeItem(item###prefix##Ledger(ledger));
    nameDepartmentStore###prefix##Ledger 'Отдел магазина' (ledger) = name(departmentStore###prefix##Ledger(ledger));
//    date###prefix##Ledger 'Дата' (ledger) = dateInTime(dateTime###prefix##Ledger(ledger)) PERSISTENT;

    // todo : переделать на concat и deconcat

    order###prefix##Ledger = LIST(dateTime###prefix##Ledger(ledger), ledger) PERSISTENT;

    concatLedgerB###prefix##DateTime (item, departmentStore, dateTime) = GROUP MAX order###prefix##Ledger(ledger) AND
        isPosted###prefix##Ledger(ledger) AND dateTime###prefix##Ledger(ledger) < (dateTime AS DATETIME)
        BY item###prefix##Ledger(ledger), departmentStore###prefix##Ledger(ledger), dateTime;

    ledgerB###prefix##DateTime (item, departmentStore, dateTime) = concatLedgerB###prefix##DateTime(item, departmentStore, dateTime)[2];

    concatLedgerA###prefix##DateTime (item, departmentStore, dateTime) = GROUP MAX order###prefix##Ledger(ledger) AND
        isPosted###prefix##Ledger(ledger) AND dateTime###prefix##Ledger(ledger) <= (dateTime AS DATETIME)
        BY item###prefix##Ledger(ledger), departmentStore###prefix##Ledger(ledger), dateTime;

    ledgerA###prefix##DateTime (item, departmentStore, dateTime) = concatLedgerA###prefix##DateTime(item, departmentStore, dateTime)[2];

    concatLedgerCurrent###prefix (item, departmentStore) = GROUP MAX order###prefix##Ledger(ledger) AND
        isPosted###prefix##Ledger(ledger)
        BY item###prefix##Ledger(ledger), departmentStore###prefix##Ledger(ledger);

    currentLedger###prefix (item, departmentStore) = concatLedgerCurrent###prefix(item, departmentStore)[2];
                           //На дату//
    orderBy###prefix##Ledger = LIST(date###prefix##Ledger(ledger), ledger) PERSISTENT;

    concatLedgerB###prefix##Date (item, departmentStore, date) = GROUP MAX orderBy###prefix##Ledger(ledger) AND
        isPosted###prefix##Ledger(ledger) AND date###prefix##Ledger(ledger) < (date AS DATE)
        BY item###prefix##Ledger(ledger), departmentStore###prefix##Ledger(ledger), date;

    ledgerB###prefix##Date (item, departmentStore, date) = concatLedgerB###prefix##Date(item, departmentStore, date)[2];

    concatLedgerA###prefix##Date (item, departmentStore, date) = GROUP MAX orderBy###prefix##Ledger(ledger) AND
        isPosted###prefix##Ledger(ledger) AND date###prefix##Ledger(ledger) <= (date AS DATE)
        BY item###prefix##Ledger(ledger), departmentStore###prefix##Ledger(ledger), date;

    ledgerA###prefix##Date (item, departmentStore, date) = concatLedgerA###prefix##Date(item, departmentStore, date)[2];

    concatLedgerCurrentDate###prefix (item, departmentStore) = GROUP MAX orderBy###prefix##Ledger(ledger) AND
        isPosted###prefix##Ledger(ledger)
        BY item###prefix##Ledger(ledger), departmentStore###prefix##Ledger(ledger);

    currentLedgerDate###prefix (item, departmentStore) = concatLedgerCurrentDate###prefix(item, departmentStore)[2];

END


// Цена изготовителя / импортера
dateTimeImporterPriceLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeShipmentDetail(ledger),
                                                                    dateTimeInnerArrivalDetail(ledger),
                                                                    dateTimeUserPriceChangeDetail(ledger),
                                                                    dateTimeStudyOutputDetail(ledger),
                                                                    dateTimeInDisparityLedger(ledger) PERSISTENT INDEXED;

dateImporterPriceLedger 'Дата' (ledger) = dateInTime(dateTimeImporterPriceLedger(ledger)) PERSISTENT;

isPostedImporterPriceLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedShipmentDetail(ledger),
                                                                isPostedInnerArrivalDetail(ledger),
                                                                isPostedUserPriceChangeDetail(ledger),
                                                                isPostedStudyOutputDetail(ledger),
                                                                isPostedInDisparityLedger(ledger) PERSISTENT;

itemImporterPriceLedger (ledger) = UNION EXCLUSIVE itemShipmentDetail(ledger),
                                                   itemInnerArrivalDetail(ledger),
                                                   itemUserPriceChangeDetail(ledger),
                                                   itemStudyOutputDetail(ledger),
                                                   itemInDisparityLedger(ledger) PERSISTENT INDEXED;

departmentStoreImporterPriceLedger (ledger) = UNION EXCLUSIVE departmentStoreShipmentDetail(ledger),
                                                              departmentStoreInnerArrivalDetail(ledger),
                                                              departmentStoreUserPriceChangeDetail(ledger),
                                                              departmentStoreStudyOutputDetail(ledger),
                                                              departmentStoreInDisparityLedger(ledger) PERSISTENT INDEXED;

descriptionImporterPriceLedger 'Название документа' (ledger) = UNION EXCLUSIVE descriptionShipmentDetail(ledger),
                                                                               descriptionInnerArrivalDetail(ledger),
                                                                               descriptionUserPriceChangeDetail(ledger),
                                                                               descriptionStudyOutputDetail(ledger),
                                                                               descriptionInDisparityLedger(ledger);

priceImporterLedger 'Цена' (ledger) = UNION EXCLUSIVE importerPriceShipmentDetail(ledger),
                                                      importerPriceInnerArrivalDetail(ledger),
                                                      importerPriceUserPriceChangeDetail(ledger),
                                                      importerPriceStudyOutputDetail(ledger),
                                                      importerPriceInDisparityLedger(ledger) PERSISTENT;
@metaCodeItemDepartmentStoreLedger(importerPrice);

priceImporterBLedgerDateTime 'Цена изготовителя (до)' (item, departmentStore, dateTime) = priceImporterLedger(ledgerBImporterPriceDateTime(item, departmentStore, dateTime));
priceImporterALedgerDateTime 'Цена изготовителя (после)' (item, departmentStore, dateTime) = priceImporterLedger(ledgerAImporterPriceDateTime(item, departmentStore, dateTime));

currentPriceImporterLedger 'Цена изготовителя' (item, departmentStore) = priceImporterLedger(currentLedgerImporterPrice(item, departmentStore));

// Цена поставщика
dateTimeSupplierPriceLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeShipmentDetail(ledger),
                                                                    dateTimeInnerArrivalDetail(ledger),
                                                                    dateTimeUserPriceChangeDetail(ledger),
                                                                    dateTimeStudyOutputDetail(ledger),
                                                                    dateTimeInDisparityLedger(ledger) PERSISTENT INDEXED;

dateSupplierPriceLedger 'Дата' (ledger) = dateInTime(dateTimeSupplierPriceLedger(ledger)) PERSISTENT;

isPostedSupplierPriceLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedShipmentDetail(ledger),
                                                                isPostedInnerArrivalDetail(ledger),
                                                                isPostedUserPriceChangeDetail(ledger),
                                                                isPostedStudyOutputDetail(ledger),
                                                                isPostedInDisparityLedger(ledger) PERSISTENT;

itemSupplierPriceLedger (ledger) = UNION EXCLUSIVE itemShipmentDetail(ledger),
                                                   itemInnerArrivalDetail(ledger),
                                                   itemUserPriceChangeDetail(ledger),
                                                   itemStudyOutputDetail(ledger),
                                                   itemInDisparityLedger(ledger) PERSISTENT INDEXED;

departmentStoreSupplierPriceLedger (ledger) = UNION EXCLUSIVE departmentStoreShipmentDetail(ledger),
                                                              departmentStoreInnerArrivalDetail(ledger),
                                                              departmentStoreUserPriceChangeDetail(ledger),
                                                              departmentStoreStudyOutputDetail(ledger),
                                                              departmentStoreInDisparityLedger(ledger) PERSISTENT INDEXED;

descriptionSupplierPriceLedger 'Название документа' (ledger) = UNION EXCLUSIVE descriptionShipmentDetail(ledger),
                                                                               descriptionInnerArrivalDetail(ledger),
                                                                               descriptionUserPriceChangeDetail(ledger),
                                                                               descriptionStudyOutputDetail(ledger),
                                                                               descriptionInDisparityLedger(ledger);

priceSupplierLedger 'Цена' (ledger) = UNION EXCLUSIVE supplierPriceShipmentDetail(ledger),
                                                      supplierPriceInnerArrivalDetail(ledger),
                                                      supplierPriceUserPriceChangeDetail(ledger),
                                                      supplierPriceStudyOutputDetail(ledger),
                                                      supplierPriceInDisparityLedger(ledger) PERSISTENT;
@metaCodeItemDepartmentStoreLedger(supplierPrice);

priceSupplierBLedgerDateTime 'Цена поставщика (до)' (item, departmentStore, dateTime) = priceSupplierLedger(ledgerBSupplierPriceDateTime(item, departmentStore, dateTime));
priceSupplierALedgerDateTime 'Цена поставщика (после)' (item, departmentStore, dateTime) = priceSupplierLedger(ledgerASupplierPriceDateTime(item, departmentStore, dateTime));

currentPriceSupplierLedger 'Цена поставщика' (item, departmentStore) = priceSupplierLedger(currentLedgerSupplierPrice(item, departmentStore));

// Цена посуды
dateTimeWarePriceLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeShipmentDetail(ledger),
                                                                dateTimeInnerArrivalDetail(ledger),
                                                                dateTimeUserPriceChangeDetail(ledger) PERSISTENT INDEXED;

dateWarePriceLedger 'Дата' (ledger) = dateInTime(dateTimeWarePriceLedger(ledger)) PERSISTENT;

isPostedWarePriceLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedShipmentDetail(ledger),
                                                            isPostedInnerArrivalDetail(ledger),
                                                            isPostedUserPriceChangeDetail(ledger) PERSISTENT;

itemWarePriceLedger (ledger) = UNION EXCLUSIVE itemShipmentDetail(ledger),
                                               itemInnerArrivalDetail(ledger),
                                               itemUserPriceChangeDetail(ledger) PERSISTENT INDEXED;

departmentStoreWarePriceLedger (ledger) = UNION EXCLUSIVE departmentStoreShipmentDetail(ledger),
                                                          departmentStoreInnerArrivalDetail(ledger),
                                                          departmentStoreUserPriceChangeDetail(ledger) PERSISTENT INDEXED;

descriptionWarePriceLedger 'Название документа' (ledger) = UNION EXCLUSIVE descriptionShipmentDetail(ledger),
                                                                           descriptionInnerArrivalDetail(ledger),
                                                                           descriptionUserPriceChangeDetail(ledger);

wareWarePriceLedger(ledger) = UNION EXCLUSIVE wareShipmentDetail(ledger),
                                              wareInnerArrivalDetail(ledger),
                                              wareUserPriceChangeDetail(ledger) PERSISTENT;

wareWarePricePriceLedger 'Цена' (ledger) = UNION EXCLUSIVE warePriceShipmentDetail(ledger),
                                                           warePriceInnerArrivalDetail(ledger),
                                                           warePriceUserPriceChangeDetail(ledger) PERSISTENT;

nameWareWarePriceLedger 'Посуда' (ledger) = name(wareWarePriceLedger(ledger));
@metaCodeItemDepartmentStoreLedger(warePrice);

warePriceBLedgerDateTime 'Цена посуды (до)' (item, departmentStore, dateTime) = wareWarePricePriceLedger(ledgerBWarePriceDateTime(item, departmentStore, dateTime));
warePriceALedgerDateTime 'Цена посуды (после)' (item, departmentStore, dateTime) = wareWarePricePriceLedger(ledgerAWarePriceDateTime(item, departmentStore, dateTime));

currentWareLedger 'Посуда' (item, departmentStore) = wareWarePriceLedger(currentLedgerWarePrice(item, departmentStore));
currentWarePriceLedger 'Цена посуды' (item, departmentStore) = wareWarePricePriceLedger(currentLedgerWarePrice(item, departmentStore));

wareBLedgerDateTime (item, departmentStore, dateTime) = wareWarePriceLedger(ledgerBWarePriceDateTime(item, departmentStore, dateTime));

// Розничный НДС
dateTimeRetailVATLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeShipmentDetail(ledger),
                                                                dateTimeInnerArrivalDetail(ledger),
                                                                dateTimeUserPriceChangeDetail(ledger),
                                                                dateTimeStudyOutputDetail(ledger),
                                                                dateTimeInDisparityLedger(ledger) PERSISTENT INDEXED;

dateRetailVATLedger 'Дата' (ledger) = dateInTime(dateTimeRetailVATLedger(ledger)) PERSISTENT;


isPostedRetailVATLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedShipmentDetail(ledger),
                                                            isPostedInnerArrivalDetail(ledger),
                                                            isPostedUserPriceChangeDetail(ledger),
                                                            isPostedStudyOutputDetail(ledger),
                                                            isPostedInDisparityLedger(ledger) PERSISTENT;

itemRetailVATLedger (ledger) = UNION EXCLUSIVE itemShipmentDetail(ledger),
                                               itemInnerArrivalDetail(ledger),
                                               itemUserPriceChangeDetail(ledger),
                                               itemStudyOutputDetail(ledger),
                                               itemInDisparityLedger(ledger) PERSISTENT INDEXED;

departmentStoreRetailVATLedger (ledger) = UNION EXCLUSIVE departmentStoreShipmentDetail(ledger),
                                                          departmentStoreInnerArrivalDetail(ledger),
                                                          departmentStoreUserPriceChangeDetail(ledger),
                                                          departmentStoreStudyOutputDetail(ledger),
                                                          departmentStoreInDisparityLedger(ledger) PERSISTENT INDEXED;

descriptionRetailVATLedger 'Название документа' (ledger) = UNION EXCLUSIVE descriptionShipmentDetail(ledger),
                                                                           descriptionInnerArrivalDetail(ledger),
                                                                           descriptionUserPriceChangeDetail(ledger),
                                                                           descriptionStudyOutputDetail(ledger),
                                                                           descriptionInDisparityLedger(ledger);

rangeRetailLedger (ledger) = UNION EXCLUSIVE retailRangeShipmentDetail(ledger),
                                             retailRangeInnerArrivalDetail(ledger),
                                             retailRangeUserPriceChangeDetail(ledger),
                                             retailRangeStudyOutputDetail(ledger),
                                             retailRangeInputDisparityDetail(ledger) PERSISTENT;

dataRetailLedger 'НДС, %' (ledger) = dataActingRateRangeDate(rangeRetailLedger(ledger), dateInTime(dateTimeRetailVATLedger(ledger))) PERSISTENT;

@metaCodeItemDepartmentStoreLedger(retailVAT);

rangeRetailBLedgerDateTime 'НДС (до)' (item, departmentStore, dateTime) = rangeRetailLedger(ledgerBRetailVATDateTime(item, departmentStore, dateTime));
dataRetailBLedgerDateTime 'НДС, % (до)' (item, departmentStore, dateTime) =
            dataActingRateRangeDate(rangeRetailBLedgerDateTime(item, departmentStore, dateTime), dateInTime(dateTime));
rangeRetailALedgerDateTime 'НДС (после)' (item, departmentStore, dateTime) = rangeRetailLedger(ledgerARetailVATDateTime(item, departmentStore, dateTime));
dataRetailALedgerDateTime 'НДС, % (после)' (item, departmentStore, dateTime) =
            dataActingRateRangeDate(rangeRetailALedgerDateTime(item, departmentStore, dateTime), dateInTime(dateTime));

currentRangeRetailLedger 'НДС' (item, departmentStore) = rangeRetailLedger(currentLedgerRetailVAT(item, departmentStore));
dataCurrentRetailLedger 'НДС, %' (item, departmentStore) =
            dataActingRateRange(currentRangeRetailLedger(item, departmentStore));


// Цена учетная
dateTimeAccountPriceLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeShipmentDetail(ledger),
                                                                   dateTimeInnerArrivalDetail(ledger),
                                                                   dateTimeUserPriceChangeDetail(ledger),
                                                                   dateTimeStudyOutputDetail(ledger),
                                                                   dateTimeInDisparityLedger(ledger) PERSISTENT INDEXED;

dateAccountPriceLedger 'Дата' (ledger) = dateInTime(dateTimeAccountPriceLedger(ledger)) PERSISTENT;

isPostedAccountPriceLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedShipmentDetail(ledger),
                                                               isPostedInnerArrivalDetail(ledger),
                                                               isPostedUserPriceChangeDetail(ledger),
                                                               isPostedStudyOutputDetail(ledger),
                                                               isPostedInDisparityLedger(ledger) PERSISTENT;

itemAccountPriceLedger (ledger) = UNION EXCLUSIVE itemShipmentDetail(ledger),
                                                  itemInnerArrivalDetail(ledger),
                                                  itemUserPriceChangeDetail(ledger),
                                                  itemStudyOutputDetail(ledger),
                                                  itemInDisparityLedger(ledger) PERSISTENT INDEXED;


departmentStoreAccountPriceLedger (ledger) = UNION EXCLUSIVE departmentStoreShipmentDetail(ledger),
                                                             departmentStoreInnerArrivalDetail(ledger),
                                                             departmentStoreUserPriceChangeDetail(ledger),
                                                             departmentStoreStudyOutputDetail(ledger),
                                                             departmentStoreInDisparityLedger(ledger) PERSISTENT INDEXED;

descriptionAccountPriceLedger 'Название документа' (ledger) = UNION EXCLUSIVE descriptionShipmentDetail(ledger),
                                                                              descriptionInnerArrivalDetail(ledger),
                                                                              descriptionUserPriceChangeDetail(ledger),
                                                                              descriptionStudyOutputDetail(ledger),
                                                                              descriptionInDisparityLedger(ledger);


priceAccountLedger 'Цена' (ledger) = UNION EXCLUSIVE retailPriceShipmentDetail(ledger),
                                                     retailPriceInnerArrivalDetail(ledger),
                                                     retailPriceUserPriceChangeDetail(ledger),
                                                     retailPriceStudyOutputDetail(ledger),
                                                     retailPriceInDisparityLedger(ledger) PERSISTENT;

@metaCodeItemDepartmentStoreLedger(accountPrice);

priceAccountBLedgerDateTime 'Учетная цена (до)' (item, departmentStore, dateTime) = priceAccountLedger(ledgerBAccountPriceDateTime(item, departmentStore, dateTime));
priceAccountALedgerDateTime 'Учетная цена (после)' (item, departmentStore, dateTime) = priceAccountLedger(ledgerAAccountPriceDateTime(item, departmentStore, dateTime));

currentPriceAccountLedger 'Учетная цена' (item, departmentStore) = priceAccountLedger(currentLedgerAccountPrice(item, departmentStore));

// Цена розничная
dateTimeRetailPriceLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeShipmentDetail(ledger),
                                                                  dateTimeInnerArrivalDetail(ledger),
                                                                  dateTimeUserPriceChangeDetail(ledger),
                                                                  dateTimeStudyOutputDetail(ledger),
                                                                  dateTimeInDisparityLedger(ledger) PERSISTENT INDEXED;

dateRetailPriceLedger 'Дата' (ledger) = dateInTime(dateTimeRetailPriceLedger(ledger)) PERSISTENT;

isPostedRetailPriceLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedShipmentDetail(ledger),
                                                              isPostedInnerArrivalDetail(ledger),
                                                              isPostedUserPriceChangeDetail(ledger),
                                                              isPostedStudyOutputDetail(ledger),
                                                              isPostedInDisparityLedger(ledger) PERSISTENT;

itemRetailPriceLedger (ledger) = UNION EXCLUSIVE itemShipmentDetail(ledger),
                                                 itemInnerArrivalDetail(ledger),
                                                 itemUserPriceChangeDetail(ledger),
                                                 itemStudyOutputDetail(ledger),
                                                 itemInDisparityLedger(ledger) PERSISTENT INDEXED;

departmentStoreRetailPriceLedger (ledger) = UNION EXCLUSIVE departmentStoreShipmentDetail(ledger),
                                                            departmentStoreInnerArrivalDetail(ledger),
                                                            departmentStoreUserPriceChangeDetail(ledger),
                                                            departmentStoreStudyOutputDetail(ledger),
                                                            departmentStoreInDisparityLedger(ledger) PERSISTENT INDEXED;

descriptionRetailPriceLedger 'Название документа' (ledger) = UNION EXCLUSIVE descriptionShipmentDetail(ledger),
                                                                             descriptionInnerArrivalDetail(ledger),
                                                                             descriptionUserPriceChangeDetail(ledger),
                                                                             descriptionStudyOutputDetail(ledger),
                                                                             descriptionInDisparityLedger(ledger);

priceRetailLedger 'Цена' (ledger) = UNION EXCLUSIVE retailPriceShipmentDetail(ledger),
                                                    retailPriceInnerArrivalDetail(ledger),
                                                    retailPriceUserPriceChangeDetail(ledger),
                                                    retailPriceStudyOutputDetail(ledger),
                                                    retailPriceInDisparityLedger(ledger) PERSISTENT;

@metaCodeItemDepartmentStoreLedger(retailPrice);

priceRetailBLedgerDateTime 'Розничная цена (до)' (item, departmentStore, dateTime) = priceRetailLedger(ledgerBRetailPriceDateTime(item, departmentStore, dateTime));
priceRetailALedgerDateTime 'Розничная цена (после)' (item, departmentStore, dateTime) = priceRetailLedger(ledgerARetailPriceDateTime(item, departmentStore, dateTime));

priceRetailBLedgerDate 'Розничная цена (до)' (item, departmentStore, date) = priceRetailLedger(ledgerBRetailPriceDate(item, departmentStore, date));
priceRetailALedgerDate 'Розничная цена (после)' (item, departmentStore, date) = priceRetailLedger(ledgerARetailPriceDate(item, departmentStore, date));

currentPriceRetailLedger 'Розничная цена' (item, departmentStore) = priceRetailLedger(currentLedgerRetailPrice(item, departmentStore)) PERSISTENT;
ledgerPriceBarcodeDepartmentStore 'Текущая цена по учету' (barcode, departmentStore) = currentPriceRetailLedger(skuBarcode(barcode), departmentStore);

// --------------------------- Продажные регистры  ---------------------------------
TABLE salesLedger(salesLedger);

dateTimeSalesLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeBillSaleDetail(ledger),
                                                            dateTimeStatementDetail(ledger) PERSISTENT INDEXED;

dateSalesLedger 'Дата' (ledger) = dateInTime(dateTimeSalesLedger(ledger)) PERSISTENT INDEXED;

isPostedSalesLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedBillSaleDetail(ledger),
                                                        isPostedStatementDetail(ledger) PERSISTENT;

itemSalesLedger (ledger) = UNION EXCLUSIVE itemBillSaleDetail(ledger),
                                           itemStatementDetail(ledger) PERSISTENT INDEXED;

nameItemSalesLedger 'Товар' (ledger) = nameAttributeItem(itemSalesLedger(ledger));

departmentStoreSalesLedger (ledger) = UNION EXCLUSIVE departmentStoreBillSaleDetail(ledger),
                                                      departmentStoreStatementDetail(ledger) PERSISTENT INDEXED;
nameDepartmentStoreSalesLedger 'Отдел магазина' (ledger) = name(departmentStoreSalesLedger(ledger));

descriptionSalesLedger 'Название документа' (ledger) = UNION EXCLUSIVE descriptionBillSaleDetail(ledger),
                                                                       descriptionStatementDetail(ledger);

quantitySalesLedger 'Кол-во' (ledger) = quantityBalanceItemLedger(ledger) AND ledger IS salesLedger;

retailSumSalesLedger 'Сумма продажи' (ledger) = UNION EXCLUSIVE retailSumBillSaleDetail(ledger),
                                                                retailSumStatementDetail(ledger) PERSISTENT;

retailRangeSalesLedger 'НДС (ИД)' (ledger) = UNION EXCLUSIVE retailRangeBillSaleDetail(ledger),
                                                             retailRangeStatementDetail(ledger) PERSISTENT;
dataRetailRangeSalesLedger 'НДС, %' (ledger) = dataActingRateRangeDate(retailRangeSalesLedger(ledger), dateSalesLedger(ledger));

vatSumSalesLedger 'Сумма НДС' (ledger) = [X*Y/(100+Y)](
        retailSumSalesLedger(ledger), dataRetailRangeSalesLedger(ledger));

markupSumSalesLedger 'Надбавка' (ledger) = retailSumSalesLedger(ledger) - vatSumSalesLedger(ledger) - supplierSumBalanceItemLedger(ledger);

quantitySoldItemDepartmentStoreDateFromTo 'Продано' (item, departmentStore, dateFrom, dateTo) = GROUP SUM
        quantitySalesLedger(ledger) AND dateSalesLedger(ledger) >= (dateFrom AS DATE) AND dateSalesLedger(ledger) <= (dateTo AS DATE)
        BY itemSalesLedger(ledger), departmentStoreSalesLedger(ledger), dateFrom, dateTo;

retailSumSoldItemDepartmentStoreDateFromTo 'Сумма проданного товара, руб.' (item, departmentStore, dateFrom, dateTo) = GROUP SUM
        retailSumSalesLedger(ledger) AND dateSalesLedger(ledger) >= (dateFrom AS DATE) AND dateSalesLedger(ledger) <= (dateTo AS DATE)
        BY itemSalesLedger(ledger), departmentStoreSalesLedger(ledger), dateFrom, dateTo;

itemDepartmentStoreAverageInterval 'Интервал расчета продаж в день' = DATA INTEGER ();

averageSoldItemDepartmentStore 'Продаж в день' = DATA NUMERIC[14,3] (item, departmentStore) IN orderGroup;

calcQuantitySoldInterval = ACTION (dateFrom, dateTo) {
    LOCAL balance = NUMERIC[14,3] (item, departmentStore);
    LOCAL days = INTEGER (item, departmentStore);
    LOCAL dateCur = DATE();

    SET dateCur() <- (dateFrom AS DATE);
    SET balance(item, departmentStore) <- balanceBItemLedgerDate(item, departmentStore, dateFrom);

    WHILE dateCur() <= (dateTo AS DATE) DO {
        SET days(item, departmentStore) <- days(item, departmentStore) (+)
                   (1 IF ((balance(item, departmentStore) > 0) OR (quantityItemDepartmentStoreDate(item, departmentStore, dateCur()) > 0)));
        SET balance(item, departmentStore) <- balance(item, departmentStore) (+)
                   signedQuantityItemDepartmentStoreDate(item, departmentStore, dateCur());
        SET dateCur() <- sumDate(dateCur(), 1);
    }

    SET averageSoldItemDepartmentStore(item, departmentStore) <- quantitySoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) / days(item, departmentStore);
}
calcCurrentQuantitySoldInterval 'Пересчитать однодневные продажи' = ACTION () NEWSESSION AUTOAPPLY {
    EXEC calcQuantitySoldInterval(subtractDate(currentDate(), itemDepartmentStoreAverageInterval()), subtractDate(currentDate(), 1));
}

//------------------------------------- Ведомость расчета естественной убыли ----------------------------------//

CLASS naturalLoss 'Ведомость естественной убыли' : named,  historyObject, externalObject, numberedObject;
CLASS naturalLossDetail 'Строка ведомости естественной убыли': named, externalObject;
CLASS naturalLossPosted 'Закрытая ведомость естественной убыли' : naturalLoss, postedObject;

@defineDocumentDefaultProperties(naturalLoss);
@defineDocumentDetailQuantity(naturalLoss);
@defineDocumentDetailBasePrice(naturalLoss);
//@defineDocumentDetailInSum(naturalLoss);
//@defineDocumentDetailWareSum(naturalLoss);
//@defineDocumentDetailOutSum(naturalLoss);

dateFromNaturalLoss 'с' = DATA DATE (naturalLoss) IN documentPrmGroup;
dateToNaturalLoss 'по' = DATA DATE (naturalLoss) IN documentPrmGroup;

dateFromNaturalLossDetail 'с' (naturalLossDetail) = dateFromNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail));
dateToNaturalLossDetail 'по' (naturalLossDetail) = dateToNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail));

subNaturalLossItemGroupNaturalLossDetail = DATA subNaturalLossItemGroup(naturalLossDetail);
nameSubNaturalLossItemGroupNaturalLossDetail 'Группа естественной убыли' =
    name(subNaturalLossItemGroupNaturalLossDetail(naturalLossDetail));
subNaturalLossItemGroupNaturalLossDetail(naturalLossDetail) <-
    groupNaturalLossItem(itemNaturalLossDetail(naturalLossDetail))
    WHEN CHANGED(itemNaturalLossDetail(naturalLossDetail));

codeNaturalLossDetail 'Код нормы естественной убыли' = DATA STRING[3] (naturalLossDetail);
codeNaturalLossDetail(naturalLossDetail) <-
    codeSubNaturalLossItemGroup(subNaturalLossItemGroupNaturalLossDetail(naturalLossDetail))
    WHEN CHANGED(subNaturalLossItemGroupNaturalLossDetail(naturalLossDetail));

supplierPriceNaturalLossDetail (naturalLossDetail) <-
    priceSupplierBLedgerDateTime(itemNaturalLossDetail(naturalLossDetail),
                                 departmentStoreNaturalLossDetail(naturalLossDetail),
                                 dateTimeNaturalLossDetail(naturalLossDetail))
    WHEN CHANGED(itemNaturalLossDetail(naturalLossDetail));

retailPriceNaturalLossDetail (naturalLossDetail) <-
    priceRetailBLedgerDateTime(itemNaturalLossDetail(naturalLossDetail),
                               departmentStoreNaturalLossDetail(naturalLossDetail),
                               dateTimeNaturalLossDetail(naturalLossDetail))
    WHEN CHANGED(itemNaturalLossDetail(naturalLossDetail));

quantityLossNaturalLossDetail 'Кол-во' = DATA NUMERIC[14,3] (naturalLossDetail);
quantityLossNaturalLossDetail (naturalLossDetail) <-
    quantitySoldItemDepartmentStoreDateFromTo(itemNaturalLossDetail(naturalLossDetail),
                                              departmentStoreNaturalLossDetail(naturalLossDetail),
                                              dateFromNaturalLossDetail(naturalLossDetail),
                                              dateToNaturalLossDetail(naturalLossDetail))
    WHEN CHANGED(itemNaturalLossDetail(naturalLossDetail));

supplierSumLossNaturalLossDetail 'Сумма поставщика, руб.' = DATA NUMERIC[16,2] (naturalLossDetail);
calcSupplierSumLossNaturalLossDetail (naturalLossDetail) =
    supplierPriceNaturalLossDetail(naturalLossDetail) * quantityLossNaturalLossDetail(naturalLossDetail);
supplierSumLossNaturalLossDetail (naturalLossDetail) <- calcSupplierSumLossNaturalLossDetail(naturalLossDetail)
    WHEN CHANGED(calcSupplierSumLossNaturalLossDetail(naturalLossDetail));

retailSumLossNaturalLossDetail 'Розничная сумма, руб' = DATA NUMERIC[16,2] (naturalLossDetail);
retailSumLossNaturalLossDetail (naturalLossDetail) <-
    retailSumSoldItemDepartmentStoreDateFromTo(itemNaturalLossDetail(naturalLossDetail),
                                               departmentStoreNaturalLossDetail(naturalLossDetail),
                                               dateFromNaturalLossDetail(naturalLossDetail),
                                               dateToNaturalLossDetail(naturalLossDetail))
    WHEN CHANGED(itemNaturalLossDetail(naturalLossDetail));

percentNaturalLossDetail 'Норма естественной убыли, %' = DATA NUMERIC[10,3] (naturalLossDetail);
percentNaturalLossDetail(naturalLossDetail) <-
    percentNaturalLossItemGroup(subNaturalLossItemGroupNaturalLossDetail(naturalLossDetail),
                                monthInDate(dateToNaturalLossDetail(naturalLossDetail)))
    WHEN CHANGED(subNaturalLossItemGroupNaturalLossDetail(naturalLossDetail));

calcQuantityNaturalLossDetail (naturalLossDetail) = percentNaturalLossDetail(naturalLossDetail) * quantityLossNaturalLossDetail(naturalLossDetail) /100;
quantityNaturalLossDetail (naturalLossDetail) <- calcQuantityNaturalLossDetail(naturalLossDetail)
    WHEN CHANGED(calcQuantityNaturalLossDetail(naturalLossDetail));

supplierSumNaturalLossDetail 'Сумма поставщика, руб.' = DATA NUMERIC[16,2] (naturalLossDetail);
calcSupplierSumNaturalLossDetail (naturalLossDetail) =
    supplierPriceNaturalLossDetail(naturalLossDetail) * quantityNaturalLossDetail(naturalLossDetail);
supplierSumNaturalLossDetail (naturalLossDetail) <- calcSupplierSumNaturalLossDetail(naturalLossDetail)
    WHEN CHANGED(calcSupplierSumNaturalLossDetail(naturalLossDetail));

retailSumNaturalLossDetail 'Розничная сумма, руб.' = DATA NUMERIC[16,2] (naturalLossDetail);
calcRetailSumNaturalLossDetail (naturalLossDetail) = retailPriceNaturalLossDetail(naturalLossDetail) * quantityNaturalLossDetail(naturalLossDetail);
retailSumNaturalLossDetail (naturalLossDetail) <- calcRetailSumNaturalLossDetail(naturalLossDetail)
    WHEN CHANGED(calcRetailSumNaturalLossDetail(naturalLossDetail));

invoiceSumNaturalLossDetailNaturalLoss 'Сумма поставщика' (naturalLoss) =
    GROUP SUM supplierSumNaturalLossDetail(naturalLossDetail) BY naturalLossNaturalLossDetail(naturalLossDetail) IN documentSumGroup PERSISTENT;

toFillNaturalLossDetail 'Заполнить ведомость естественной убыли' = ACTION (naturalLoss) {
    FOR quantitySoldItemDepartmentStoreDateFromTo(item AS item,
                                                  departmentStoreNaturalLoss(naturalLoss),
                                                  dateFromNaturalLoss(naturalLoss),
                                                  dateToNaturalLoss(naturalLoss))
        AND groupNaturalLossItem(item) DO {
        ADDOBJ naturalLossDetail;
        FOR d == addedObject() DO {
            SET itemNaturalLossDetail(d) <- item AS item;
        };
    };
} IN documentPrmGroup CONFIRM;

//@defineDocumentHeaderInvoiceSum(naturalLoss);
@defineDocumentHeaderRetailSum(naturalLoss);
@defineDocumentHeaderQuantity(naturalLoss);

FORM naturalLossPrint 'Ведомость естественной убыли' PRINT
    OBJECTS s=naturalLoss FIXED PANEL
    PROPERTIES(s) READONLY SELECTOR numberObject, nameDepartmentStoreNaturalLoss, timeNaturalLoss, seriesObject,
                           dateNaturalLoss, dateFromNaturalLoss, dateToNaturalLoss,
                           quantityNaturalLossDetailNaturalLoss, invoiceSumNaturalLossDetailNaturalLoss,
                           retailSumNaturalLossDetailNaturalLoss, noteNaturalLoss
    OBJECTS d=naturalLossDetail
    PROPERTIES(d) READONLY indexNaturalLossDetail, nameAttributeItemNaturalLossDetail, codeNaturalLossDetail,
                           shortNameUnitOfMeasureItemNaturalLossDetail, quantityLossNaturalLossDetail,
                           supplierPriceNaturalLossDetail, retailPriceNaturalLossDetail, supplierSumLossNaturalLossDetail,
                           retailSumLossNaturalLossDetail, nameSubNaturalLossItemGroupNaturalLossDetail, percentNaturalLossDetail,
                           quantityNaturalLossDetail, supplierSumNaturalLossDetail, retailSumNaturalLossDetail

    FILTERS inNaturalLossNaturalLossDetail(s, d)
;

toPrintNaturalLoss 'Ведомость естественной убыли' (naturalLoss) = ACTION FORM naturalLossPrint OBJECTS s IMAGE 'print.png' IN printGroup CONFIRM;

FORM naturalLoss 'Ведомость естественной убыли'
    OBJECTS s=naturalLoss FIXED PANEL
    PROPERTIES(s) numberObject, nameDepartmentStoreNaturalLoss, timeNaturalLoss, seriesObject,
                  dateNaturalLoss, dateFromNaturalLoss, dateToNaturalLoss, toFillNaturalLossDetail,
                  quantityNaturalLossDetailNaturalLoss, invoiceSumNaturalLossDetailNaturalLoss,
                  retailSumNaturalLossDetailNaturalLoss, noteNaturalLoss
    OBJECTS d=naturalLossDetail
    PROPERTIES(d) indexNaturalLossDetail, nameAttributeItemNaturalLossDetail, codeNaturalLossDetail,
                  shortNameUnitOfMeasureItemNaturalLossDetail, quantityLossNaturalLossDetail,
                  supplierPriceNaturalLossDetail, retailPriceNaturalLossDetail, supplierSumLossNaturalLossDetail,
                  retailSumLossNaturalLossDetail, nameSubNaturalLossItemGroupNaturalLossDetail, percentNaturalLossDetail,
                  quantityNaturalLossDetail, supplierSumNaturalLossDetail, retailSumNaturalLossDetail, ADDOBJ, delete

    FILTERS inNaturalLossNaturalLossDetail(s, d)

    EDIT naturalLoss OBJECT s
;

DESIGN naturalLoss FROM DEFAULT{

    NEW header.box  BEFORE d.box{
        childConstraints = TO THE RIGHT;

        NEW headerCol1 {
            childConstraints = TO THE BOTTOM;

            ADD s.documentHeaderGroup {
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(nameDepartmentStoreNaturalLoss);
                ADD PROPERTY(numberObject);
                ADD PROPERTY(seriesObject);
                ADD PROPERTY(dateNaturalLoss);
                ADD PROPERTY(timeNaturalLoss);
            };

            NEW headerCol1Row2 {
                childConstraints = TO THE RIGHT;
                ADD s.documentPrmGroup {
                }
            }

            ADD PROPERTY(noteNaturalLoss);
        }

        ADD s.documentSumGroup {
            childConstraints = TO THE BOTTOM;
        }
    }
}

FORM naturalLosses 'Ведомости естественной убыли'
    OBJECTS s=naturalLoss
    PROPERTIES(s) READONLY numberObject, seriesObject, dateNaturalLoss, timeNaturalLoss,
                           nameDepartmentStoreNaturalLoss, dateFromNaturalLoss, dateToNaturalLoss,
                           quantityNaturalLossDetailNaturalLoss, invoiceSumNaturalLossDetailNaturalLoss,
                           retailSumNaturalLossDetailNaturalLoss, noteNaturalLoss
    PROPERTIES(s) toPrintNaturalLoss FORCE PANEL
    PROPERTIES(s) ADDFORM, EDITFORM SHOWIF isDraftNaturalLoss(s), delete FORCE PANEL SHOWIF isDraftNaturalLoss(s),
                  postNaturalLoss SHOWIF isDraftNaturalLoss(s), unpostNaturalLoss SHOWIF isPostedNaturalLoss(s)
    PROPERTIES(s) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed
    OBJECTS d=naturalLossDetail
    PROPERTIES(d) READONLY indexNaturalLossDetail, nameAttributeItemNaturalLossDetail, codeNaturalLossDetail,
                           shortNameUnitOfMeasureItemNaturalLossDetail, quantityLossNaturalLossDetail,
                           supplierPriceNaturalLossDetail, retailPriceNaturalLossDetail, supplierSumLossNaturalLossDetail,
                           retailSumLossNaturalLossDetail, nameSubNaturalLossItemGroupNaturalLossDetail,
                           percentNaturalLossDetail, quantityNaturalLossDetail, supplierSumNaturalLossDetail, retailSumNaturalLossDetail

    FILTERS inNaturalLossNaturalLossDetail(s, d)
;

DESIGN naturalLosses FROM DEFAULT {

    PROPERTY (delete(s)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }

    ADD s.printGroup AFTER d.box{
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    }

    ADD s.historyGroup AFTER d.box{
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    }

    ADD s.postedGroup AFTER d.box{
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    }

    POSITION s.postedGroup TO THE RIGHT s.historyGroup;
    POSITION s.printGroup TO THE BOTTOM s.postedGroup;
    POSITION s.printGroup TO THE BOTTOM s.historyGroup;
}

//--------------------------------------Заказ------------------------------------------------------------------//

GROUP orderSupplierGroup 'Информация о заказе' : publicGroup;
GROUP dateOrderSupplierGroup 'Даты' : publicGroup;

CLASS preliminaryOrder 'Предварительный заказ' : historyObject;
TABLE preliminaryOrder (preliminaryOrder);

dateOrderPreliminaryOrder 'Дата заказа' = DATA DATE (preliminaryOrder) IN baseGroup;
dateSupplyPreliminaryOrder 'Дата поставки' = DATA DATE (preliminaryOrder) IN baseGroup;
departmentStorePreliminaryOrder 'Отдел заказа (ИД)' = DATA departmentStore (preliminaryOrder) AUTOSET;
nameDepartmentStorePreliminaryOrder 'Отдел заказа' (preliminaryOrder) = name(departmentStorePreliminaryOrder(preliminaryOrder)) IN orderSupplierGroup AUTOSET;
supplierPreliminaryOrder 'Поставщик заказа (ИД)' = DATA supplier (preliminaryOrder);
nameSupplierPreliminaryOrder 'Поставщик заказа' (preliminaryOrder) = name(supplierPreliminaryOrder(preliminaryOrder)) IN supplierGroup;
genTimeTablePreliminaryOrder 'График поставок'  = DATA genTimeTable (preliminaryOrder);

TABLE supplierDepartmentStoreDate (supplier, departmentStore, DATE);

@metaCodeDoubleObjectDateProperty(timeTable, supplier, departmentStore, 'Поставка', BOOLEAN, baseGroup);

CLASS ABSTRACT order 'Заказ' : historyObject, numeratedObject;
//TABLE order(order);

CLASS orderSupplier 'Заказ поставщику' : order;
CLASS orderSupplierPosted 'Закрытый заказ поставщику' :orderSupplier, postedObject;
//CLASS orderStock 'Заказ складу' :order;

TABLE orderSupplier(orderSupplier);
TABLE orderSupplierItem(orderSupplier, item);

departmentStoreOrderSupplier 'Отдел заказа (ИД)' = DATA departmentStore (orderSupplier);
nameDepartmentStoreOrderSupplier 'Отдел заказа' (orderSupplier) = name(departmentStoreOrderSupplier(orderSupplier)) IN documentHeaderGroup;

supplierOrderSupplier 'Поставщик заказа (ИД)' = DATA supplier (orderSupplier);
nameSupplierOrderSupplier 'Поставщик заказа' (orderSupplier) = name(supplierOrderSupplier(orderSupplier)) IN documentPrmGroup;
UNPSupplierOrderSupplier 'УНП поставщика' (orderSupplier) = UNPLegalEntity(supplierOrderSupplier(orderSupplier)) IN documentPrmGroup;

curDateOrderSupplier 'Дата заказа' = DATA DATE (orderSupplier) IN dateOrderSupplierGroup;
curDateOrderSupplier (orderSupplier) <- currentDate() WHEN ASSIGNED(departmentStoreOrderSupplier(orderSupplier));
dateOrderSupplier 'Дата поставки' = DATA DATE (orderSupplier) IN dateOrderSupplierGroup;
dateOrderSupplier (orderSupplier) <- sumDate(currentDate(),1) WHEN ASSIGNED(departmentStoreOrderSupplier(orderSupplier));

preliminaryOrderOrderSupplier 'Предварительный заказ заказа' = DATA preliminaryOrder (orderSupplier);

preliminaryOrderToOrderSupplier 'Заказ по предварительному заказу' (preliminaryOrder) = GROUP UNIQUE orderSupplier BY preliminaryOrderOrderSupplier(orderSupplier);
dataOrderPreliminaryOrder 'Номер заказа для предварительного заказа' (preliminaryOrder) = seriesNumberObject(preliminaryOrderToOrderSupplier(preliminaryOrder));

completePercentageOrderSupplier 'Процент выполнения' (orderSupplier) = DATA NUMERIC[8,3] (orderSupplier) IN orderSupplierGroup;
allowablePercentOrderSupplier 'Допустимый % изменения цен 1го поставщика' = DATA INTEGER (orderSupplier) IN documentPrmGroup;

packQuantityItemOrderSupplier 'Заказ(мест)' = DATA NUMERIC[14,3] (orderSupplier, item);
sumQuantityItemOrderSupplier 'Заказ(единиц)' (orderSupplier, item) = DATA NUMERIC[14,3] (orderSupplier, item);
sumQuantityItemOrderSupplier (orderSupplier, item) <- (UNION OVERRIDE 1 IF item IS item, quantityPackItem(item)) * packQuantityItemOrderSupplier(orderSupplier, item)
                                                      WHEN CHANGED(packQuantityItemOrderSupplier(orderSupplier, item));
priceSupplierItemOrderSupplier 'Цена поставщика' (orderSupplier, item) = DATA NUMERIC[14,2] (orderSupplier, item);
priceSupplierItemOrderSupplier (orderSupplier, item) <- priceSupplierItemDepartmentOver(supplierOrderSupplier(orderSupplier), item, departmentStoreOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier))
    WHEN ASSIGNED(packQuantityItemOrderSupplier(orderSupplier, item));

supplierRangeItemDateOrderSupplier 'Шкала' (orderSupplier, item) = DATA range (orderSupplier, item) IN idGroup;
supplierRangeItemDateOrderSupplier (orderSupplier, item) <- supplierRangeItemVal(item, dateOrderSupplier(orderSupplier))
                                                             WHEN ASSIGNED(packQuantityItemOrderSupplier(orderSupplier, item));
numberSupplierRangeOrderSupplier 'НДС поставщика, номер' (orderSupplier, item) =
    dataRange(supplierRangeItemDateOrderSupplier(orderSupplier, item));
dataSupplierRangeOrderSupplier 'НДС поставщика, %' (orderSupplier, item) =
    UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item,
                   dataActingRateRangeDate(supplierRangeItemDateOrderSupplier(orderSupplier, item), dateOrderSupplier(orderSupplier));
CONSTRAINT taxRange(supplierRangeItemDateOrderSupplier(orderSupplier, item)) != tax.taxNDS CHECKED BY supplierRangeItemDateOrderSupplier MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

retailPriceItemOrderSupplierVal 'Розничная цена' (orderSupplier, item) =
    retailPriceItemDepartmentVal(item, departmentStoreOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier));
retailPriceItemOrderSupplier 'Розничная цена' (orderSupplier, item) =
    UNION OVERRIDE 0 IF (orderSupplier IS orderSupplier AND item IS item), retailPriceItemOrderSupplierVal(orderSupplier, item);

wareOrderSupplier 'Посуда (ИД)' (orderSupplier, item) = DATA ware (orderSupplier, item);
wareOrderSupplier (orderSupplier, item) <- wareItem(item) WHEN ASSIGNED(packQuantityItemOrderSupplier(orderSupplier, item));
nameWareOrderSupplier 'Посуда' (orderSupplier, item) = name(wareOrderSupplier(orderSupplier, item));
warePriceOrderSupplier 'Цена посуды' (orderSupplier, item) = warePriceVal(wareOrderSupplier(orderSupplier, item), dateOrderSupplier(orderSupplier));
dataRangeWareOrderSupplier 'Шкала(ИД)' (orderSupplier, item) = DATA range (orderSupplier, item) IN idGroup;
dataRangeWareOrderSupplier (orderSupplier, item) <- rangeWareVal(wareOrderSupplier(orderSupplier, item), dateOrderSupplier(orderSupplier))
                                                    WHEN CHANGED(wareOrderSupplier(orderSupplier, item));
numberDataRangeWareOrderSupplier 'Шкала НДС посуды' (orderSupplier, item) =
    dataRange(dataRangeWareOrderSupplier(orderSupplier, item));
dataWareRangeOrderSupplier 'НДС посуды, %' (orderSupplier, item) =
    dataActingRateRangeDate(dataRangeWareOrderSupplier(orderSupplier, item), dateOrderSupplier(orderSupplier));

sumWareOrderSupplier 'Сумма по посуде' (orderSupplier, item) =
    UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item,
                   sumQuantityItemOrderSupplier(orderSupplier, item) * warePriceOrderSupplier(orderSupplier, item);
wareSumOrderSupplier 'Общая сумма по посуде' (orderSupplier) =
    GROUP SUM sumWareOrderSupplier(orderSupplier, item) BY orderSupplier;

sumItemOrderSupplier 'Сумма заказа' (orderSupplier, item) =
    sumQuantityItemOrderSupplier(orderSupplier, item) * priceSupplierItemOrderSupplier(orderSupplier, item) IN baseGroup;
totalSumOrderSupplier 'Общая сумма заказа' (orderSupplier) = GROUP SUM sumItemOrderSupplier(orderSupplier, item) BY orderSupplier IN orderSupplierGroup;

sumVatOrderSupplier 'Сумма НДС, за ед.' (orderSupplier, item) =
    round0(
    (UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item, priceSupplierItemOrderSupplier(orderSupplier, item) *
     UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item, dataSupplierRangeOrderSupplier(orderSupplier, item))/100);
retailVATISumOrderSupplier 'Сумма НДС по товару' (orderSupplier, item) =
    round0(
    (UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item,
                    sumQuantityItemOrderSupplier(orderSupplier, item) * sumVatOrderSupplier(orderSupplier, item)));

sumVatWareOrderSupplier 'Сумма НДС по посуде, за ед.' (orderSupplier, item) =
    round0(
    (UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item, warePriceOrderSupplier(orderSupplier, item) *
     UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item, dataWareRangeOrderSupplier(orderSupplier, item))/100);
retailVATISumWareOrderSupplier 'Сума НДС по посуде' (orderSupplier, item) =
    round0(
    (UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item,
                    sumQuantityItemOrderSupplier(orderSupplier, item) * sumVatWareOrderSupplier(orderSupplier, item)));
retailVATISumItemOrderSupplier 'Сумма НДС' (orderSupplier, item) =
    retailVATISumOrderSupplier(orderSupplier, item) (+) retailVATISumWareOrderSupplier(orderSupplier, item);

totalSumVatOrderSupplier 'Общая сумма НДС' (orderSupplier) =
    GROUP SUM retailVATISumItemOrderSupplier(orderSupplier, item) BY orderSupplier IN orderSupplierGroup;

fullSumItemOrderSupplier 'Сумма заказа с НДС' (orderSupplier, item) =
    sumItemOrderSupplier(orderSupplier, item) (+) retailVATISumOrderSupplier(orderSupplier, item) (+) sumWareOrderSupplier(orderSupplier, item);
totalFullSumOrderSupplier 'Общая сумма заказа с НДС' (orderSupplier) =
    GROUP SUM fullSumItemOrderSupplier(orderSupplier, item) BY orderSupplier IN orderSupplierGroup;

nameinActionItemOrderSupplier 'Товар акции' (orderSupplier, item) =
    nameInActionItemDepartmentOver(item, departmentStoreOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier));
banMovementDepartmentStoreOrderSupplier 'Запрет на внутреннее перемещение товара' (orderSupplier, item) =
    banMovementDepartmentStoreItem(departmentStoreOrderSupplier(orderSupplier), item);
topItem 'Топ' (orderSupplier, item) = topDepartmentStoreItem(departmentStoreOrderSupplier(orderSupplier), item);
CONSTRAINT packQuantityItemOrderSupplier(orderSupplier, item) <= 0 MESSAGE 'Количество должно быть положительным';
CONSTRAINT priceSupplierItemOrderSupplier(orderSupplier, item) <= 0 MESSAGE 'Цена должна быть положительной';

castFiveObjectsToString100 =
     FORMULA STRING[200] '\'№\' || CAST($1 AS TEXT) || \'  от \' || CAST($2 AS TEXT) || \'  Количество: \' || CAST($3 AS TEXT) || \'  Розн. цена: \' || CAST($4 AS TEXT) || \'(\' || CAST($5 AS TEXT) || \')\' ';
//если разбивать формулу на 2 строки выдает ошибку

isItemInOrderSupplier 'Товар в заказе' (orderSupplier, item) = packQuantityItemOrderSupplier(orderSupplier, item) > 0;
lastOrderSupplierVal 'Последний заказ(ИД)' (orderSupplier, item) =
     PARTITION PREV orderSupplier AND isItemInOrderSupplier(orderSupplier, item)
     BY supplierOrderSupplier(orderSupplier), departmentStoreOrderSupplier(orderSupplier), item
     ORDER dateOrderSupplier(orderSupplier);
lastOrderSupplier 'Последний заказ' (orderSupplier, item) =
     castFiveObjectsToString100(seriesNumberObject(lastOrderSupplierVal(orderSupplier, item)),
                                dateOrderSupplier(lastOrderSupplierVal(orderSupplier, item)),
                                packQuantityItemOrderSupplier(lastOrderSupplierVal(orderSupplier, item), item),
                                retailPriceItemOrderSupplier(lastOrderSupplierVal(orderSupplier, item), item),
                                nameSupplierOrderSupplier(lastOrderSupplierVal(orderSupplier, item))
     );

quantityDaysNextOrder 'Дней до поставки' (orderSupplier) =
    UNION MAX 0 IF orderSupplier IS orderSupplier,
              daysInclBetweenDates(curDateOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier)) IN dateOrderSupplierGroup;

quantityOrderOrderSupplier 'Заказов на дату заказа' (supplier, departmentStore, date) =
    GROUP SUM 1 IF orderSupplier
    BY supplierOrderSupplier(orderSupplier), departmentStoreOrderSupplier(orderSupplier), curDateOrderSupplier(orderSupplier);

quantitySupplyOrderSupplier 'Заказов на дату поставки' (supplier, departmentStore, date) =
    GROUP SUM 1 IF orderSupplier BY supplierOrderSupplier(orderSupplier), departmentStoreOrderSupplier(orderSupplier),
                                    dateOrderSupplier(orderSupplier);
quantityOrderPreliminaryOrder 'Предварительных заказов на дату заказа' (supplier, departmentStore, date) =
    GROUP SUM 1 IF preliminaryOrder BY supplierPreliminaryOrder(preliminaryOrder), departmentStorePreliminaryOrder(preliminaryOrder),
                                       dateOrderPreliminaryOrder(preliminaryOrder);
quantitySupplyPreliminaryOrder 'Предварительных заказов на дату поставки' (supplier, departmentStore, date) =
    GROUP SUM 1 IF preliminaryOrder BY supplierPreliminaryOrder(preliminaryOrder), departmentStorePreliminaryOrder(preliminaryOrder),
                                       dateSupplyPreliminaryOrder(preliminaryOrder);
nextDateOrder 'Дата следующей поставки' (preliminaryOrder) =
    PARTITION PREV dateSupplyPreliminaryOrder(preliminaryOrder)
    BY supplierPreliminaryOrder(preliminaryOrder), departmentStorePreliminaryOrder(preliminaryOrder)
    ORDER DESC dateSupplyPreliminaryOrder(preliminaryOrder);

minDateSupplyOrderSupplier (supplier, departmentStore, date) = GROUP MIN dateSupplyPreliminaryOrder(preliminaryOrder)
                                                                         IF dateSupplyPreliminaryOrder(preliminaryOrder) > (date AS DATE)
                                                                         BY supplierPreliminaryOrder(preliminaryOrder), departmentStorePreliminaryOrder(preliminaryOrder), date;

nextDateOrderSupplier 'Дата следующей поставки' (orderSupplier) = DATA DATE (orderSupplier) IN dateOrderSupplierGroup;
nextDateOrderSupplier (orderSupplier) <- [UNION OVERRIDE sumDate(dateOrderSupplier(orderSupplier),
                                                                  periodicitySupply(supplierOrderSupplier(orderSupplier))),
                                                         minDateSupplyOrderSupplier(
                                                                  supplierOrderSupplier(orderSupplier),
                                                                  departmentStoreOrderSupplier(orderSupplier),
                                                                  dateOrderSupplier(orderSupplier))] (orderSupplier)
                                         WHEN ASSIGNED(supplierOrderSupplier(orderSupplier));

quantityDaysAfterNextOrder 'Дней до следующей поставки' (orderSupplier) =
    daysInclBetweenDates(curDateOrderSupplier(orderSupplier), nextDateOrderSupplier(orderSupplier)) IN dateOrderSupplierGroup;

CONSTRAINT nextDateOrderSupplier(orderSupplier) < dateOrderSupplier(orderSupplier) MESSAGE 'Дата поставки не должна превышать дату поставки следующей поставки';

currentBalanceOrderSupplierItem 'Текущий остаток' (orderSupplier, item) = currentBalanceItemLedger(item, departmentStoreOrderSupplier(orderSupplier));

quantityToSellNextOrder 'Предполагаемое количество реализации товара до следующей поставки' (orderSupplier, item) =
    averageSoldItemDepartmentStore(item, departmentStoreOrderSupplier(orderSupplier)) * daysInclBetweenDates(currentDate(), nextDateOrderSupplier(orderSupplier));

balanceExtraDepartmentStoreItem 'Величина остатков товара за вычетом минимального резерва' (orderSupplier, item) =
    currentBalanceOrderSupplierItem(orderSupplier, item) (-) (minReserveItem(item) IF orderSupplier IS orderSupplier);

quantityNeededOrderSupplierItem 'Кол-во товара для заказа' (orderSupplier, item) =
    quantityToSellNextOrder (orderSupplier, item) (-) balanceExtraDepartmentStoreItem(orderSupplier, item);

recommendCountOrderSupplier 'Рекомендуемый заказ' (orderSupplier, item) =
    (UNION MAX ceil(quantityNeededOrderSupplierItem(orderSupplier, item) /
                     (UNION OVERRIDE 1 IF item IS item, quantityPackItem(item))),
               (minQuantityOrderItem(item) IF orderSupplier IS orderSupplier))
    IF quantityNeededOrderSupplierItem(orderSupplier, item) > 0;

isBanSupplierItemDepartmentOrderSupplier (orderSupplier, item) = banSupplierItemDepartmentVal (
    supplierOrderSupplier(orderSupplier), item, departmentStoreOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier)) != yesNo.yes;

isSupplierItemDepartmentOrderSupplier (orderSupplier, item) = isSupplierItemDepartmentVal(
    supplierOrderSupplier(orderSupplier), item, departmentStoreOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier)) == yesNo.yes;

isSupplyDatePreliminaryOrder (preliminaryOrder, date) = dateSupplyPreliminaryOrder(preliminaryOrder) >= (date AS DATE) ;
isOrderDatePreliminaryOrder (preliminaryOrder, date) = dateOrderPreliminaryOrder(preliminaryOrder) >= (date AS DATE) ;

inShipmentOrder 'Поставка по заказу' (shipment, orderSupplier) = DATA BOOLEAN (shipment, orderSupplier)
    IN idGroup MINCHARWIDTH 10 PREFCHARWIDTH 10;

ordersShipment 'Заявка' (shipment) = GROUP CONCAT castToString255(seriesNumberObject(orderSupplier))
    IF inShipmentOrder(shipment, orderSupplier), ', ' BY shipment IN shipmentOrderGroup MINCHARWIDTH 10 PREFCHARWIDTH 10;

sumOrdersShipment (shipment) = GROUP SUM 1 IF inShipmentOrder(shipment, orderSupplier) BY shipment PERSISTENT;

isSupplierShipmentOrder 'Заявка поставщика поставки' (shipment, orderSupplier) = supplierShipment(shipment)== supplierOrderSupplier(orderSupplier);

isDepartmentStoreShipmentOrder 'Заявка отдела поставки' (shipment, orderSupplier) = departmentStoreShipment(shipment)== departmentStoreOrderSupplier(orderSupplier);

CONSTRAINT sureSupplierDepartmentStoreVal(supplierShipment(shipment), departmentStoreShipment(shipment), dateShipment(shipment)) == yesNo.yes
    AND NOT sumOrdersShipment (shipment)  MESSAGE 'Отсутствует обязательный заказ для данного поставщика';

//контроль ассортимента поставки по заказам с учетом ограничений по поставщику
sumQuantityOrderedItemShipment 'Количество по товару в заказах поставки' (item, shipment) = GROUP SUM
    sumQuantityItemOrderSupplier (orderSupplier, item)
    IF inShipmentOrder (shipment, orderSupplier) BY item, shipment;

isOrderedItemShipment 'Товар есть в заказах поставки' (item, shipment) =  sumQuantityOrderedItemShipment(item, shipment) > 0;

isShippedOrOrderedItemShipment 'Товар или заказан или поставлен' (item, shipment) =
    sumQuantityOrderedItemShipment(item, shipment) OR quantityShipmentDetailItemShipment(item, shipment);

isNotShipedOrderedItemShipment 'Товар есть в заказе и отсутствует в поставке' (item, shipment) =
    isOrderedItemShipment (item, shipment) AND NOT quantityShipmentDetailItemShipment(item, shipment) > 0;

isOrderedShipmentDetail 'Товар поставки есть в заказах поставки' (shipmentDetail) = isOrderedItemShipment(itemShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail));

quantityOrderedShipmentDetailsShipment 'Количество позиций, для которых есть заказ' (shipment) = GROUP SUM 1 IF isOrderedShipmentDetail(shipmentDetail) AND shipmentShipmentDetail(shipmentDetail)==shipment BY shipment;
percentOrderedShipmentDetailsShipment 'Процент позиций поставки, для которых есть заказ' (shipment) =
    UNION OVERRIDE 0 AND shipment IS shipment, [X*100/Y](
    quantityOrderedShipmentDetailsShipment(shipment),
    UNION OVERRIDE 1 IF shipment IS shipment, countShipmentDetailShipment(shipment)) IN shipmentOrderGroup;

surePercentSupplierShipment 'Обязательный % заказанных товаров в прих. накладной' (shipment) = UNION OVERRIDE 0 AND shipment IS shipment, [DATA INTEGER (shipment)](shipment);
surePercentSupplierShipment (shipment) <- surePercentSupplier(supplierShipment (shipment)) WHEN CHANGED(supplierShipment(shipment));
controlSupplierDepartmentStoreShipment 'Контролировать ассортимент поставщика' (shipment) = DATA yesNo(shipment);
controlSupplierDepartmentStoreShipment(shipment) <- controlSupplierDepartmentStore (supplierShipment(shipment), departmentStoreShipment(shipment)) WHEN CHANGED(supplierShipment(shipment)); //неполный случай, нужно доделывать

enoughOrderedShipmentDetailsShipment(shipment) = percentOrderedShipmentDetailsShipment(shipment) >= surePercentSupplierShipment (shipment);

CONSTRAINT controlSupplierDepartmentStoreShipment(shipment) == yesNo.yes AND NOT enoughOrderedShipmentDetailsShipment (shipment)
            MESSAGE 'Процент заказанных позиций меньше допустимого для поставщика';

isAvailableOrderShipment 'Заявка допустимая для заказа' (shipment, orderSupplier) = dateShipment (shipment) <= sumDate(dateOrderSupplier (orderSupplier), UNION OVERRIDE 0 IF shipment IS shipment, afterDaysSupplier (supplierShipment(shipment)));

@defineDocumentHeaderPosted(orderSupplier);

FORM ordersShipment 'Заказы'
    OBJECTS s=shipment FIXED PANEL
    PROPERTIES (s) READONLY seriesNumberObject, dateShipment

    OBJECTS o=orderSupplier

    PROPERTIES (s, o) inShipmentOrder
    PROPERTIES (o) READONLY numberObject, seriesObject, curDateOrderSupplier, dateOrderSupplier, nameDepartmentStoreOrderSupplier,
          nameSupplierOrderSupplier, completePercentageOrderSupplier, totalSumOrderSupplier, timeCreated, nameUserCreated

    FILTERS isSupplierShipmentOrder (s, o),
            isDepartmentStoreShipmentOrder (s, o),
            isAvailableOrderShipment (s, o),
            isPostedOrderSupplier(o)
;

showFormOrdersShipment 'Заказы' (shipment) = ACTION FORM ordersShipment OBJECTS s MODAL SHORTCUT ordersShipment DEFAULT;

quantityShipmentOrderItem 'Поставленное количество' (orderSupplier, item) = GROUP SUM quantityShipmentDetail (shipmentDetail) IF inShipmentOrder (shipmentShipmentDetail (shipmentDetail), orderSupplier) BY orderSupplier, itemShipmentDetail(shipmentDetail);

//контроль цен поставки по заказам с учетом допустимых отклонений по поставщику
priceOrderItemShipment 'Цена товара в заказах поставки (максим.)' (item, shipment) = GROUP MAX
        priceSupplierItemOrderSupplier(orderSupplier, item) IF inShipmentOrder (shipment, orderSupplier) BY item, shipment;

maxAllowPriceItemShipment 'Максимально допустимая цена в поставке' (item, shipment) = [X*(100+Y)/100](
    priceOrderItemShipment (item, shipment),
    UNION OVERRIDE 0 IF shipment IS shipment, allowablePercentSupplier(supplierShipment(shipment)));

minAllowPriceItemShipment 'Минимально допустимая цена в поставке' (item, shipment) = [X*(100-Y)/100](
    priceOrderItemShipment (item, shipment),
    UNION OVERRIDE 0 IF shipment IS shipment, allowablePercentSupplier(supplierShipment(shipment)));

//    priceOrderItemShipment (item, shipment) * (100 - [UNION OVERRIDE 0 IF shipment IS shipment, allowablePercentSupplier (supplierShipment(shipment))](shipment))/100;
CONSTRAINT supplierPriceShipmentDetail (shipmentDetail) > maxAllowPriceItemShipment (itemShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail))
    AND isPostedShipmentDetail (shipmentDetail) AND allowablePercentSupplier (supplierShipment(shipmentShipmentDetail(shipmentDetail))) MESSAGE 'Цена поставки больше цены заказа';

CONSTRAINT supplierPriceShipmentDetail (shipmentDetail) < minAllowPriceItemShipment (itemShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail))
    AND isPostedShipmentDetail (shipmentDetail) AND allowablePercentSupplier (supplierShipment(shipmentShipmentDetail(shipmentDetail))) MESSAGE 'Цена поставки меньше цены заказа';

isAllowPriceItemShipment 'Допустимая цена поставки' (shipmentDetail) =
    supplierPriceShipmentDetail (shipmentDetail) > maxAllowPriceItemShipment (itemShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail)) OR
    supplierPriceShipmentDetail (shipmentDetail) < minAllowPriceItemShipment (itemShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail));

toFillShipmentDetailsShipment 'Заполнить поставку из заказов' =  ACTION (shipment) {
    FOR isNotShipedOrderedItemShipment (item, shipment) DO {
        ADDOBJ shipmentDetail;
        FOR s == addedObject() DO {
            SET itemShipmentDetail(s) <- item AS item;
            SET quantityShipmentDetail(s) <- sumQuantityOrderedItemShipment(item, shipment);
            SET supplierPriceShipmentDetail(s) <- priceOrderItemShipment(item, shipment);
            SET shipmentShipmentDetail (s) <- shipment AS shipment;
        };
    };
} IN shipmentOrderGroup CONFIRM;

FORM preliminaryOrder 'Предварительный заказ'
OBJECTS p=preliminaryOrder FIXED PANEL
PROPERTIES(p) nameDepartmentStorePreliminaryOrder, nameSupplierPreliminaryOrder, dateOrderPreliminaryOrder,
              dateSupplyPreliminaryOrder
EDIT preliminaryOrder OBJECT p;

DESIGN preliminaryOrder FROM DEFAULT {
    p.box{
        title = 'Предварительный заказ';
        childConstraints = TO THE BOTTOM;
        ADD PROPERTY (nameDepartmentStorePreliminaryOrder);
        ADD PROPERTY (nameSupplierPreliminaryOrder);
        ADD PROPERTY (dateOrderPreliminaryOrder);
        ADD PROPERTY (dateSupplyPreliminaryOrder);
    }
}

tmpGTT = SESSION DATA genTimeTable();
tmpDate = SESSION DATA DATE();
tmpDateS = SESSION DATA DATE();

createGenTimeTable 'Создать график поставок' = ACTION () NEWSESSION {
    FORM genTimeTable INIT [ACTION ADDOBJ genTimeTable]() MODAL;

    IF formResult() == formResult.ok THEN {

        SET tmpGTT() <- chosenObject('g');
        // генерация через N недель
        IF genTimeTableType(tmpGTT()) == genType.genWeek THEN {
            // бежим по всем дням недели
            FOR inDayGenTimeTable(tmpGTT(), dow) DO {
                SET tmpDate() <- startDateGenTimeTable(tmpGTT());
                // ищем первую дату начиная со стартовой с нужным днем недели
                WHILE DOWInDate(tmpDate()) != dow AS DOW DO {
                    SET tmpDate() <- sumDate(tmpDate(), 1);
                };

                // итерируемся по всем датам через период * 7 дней
                WHILE tmpDate() <= endDateGenTimeTable(tmpGTT()) DO {
                    ADDOBJ preliminaryOrder;
                    FOR o == addedObject() DO {
                        SET departmentStorePreliminaryOrder(o) <- departmentStoreGenTimeTable(tmpGTT());
                        SET supplierPreliminaryOrder(o) <- supplierGenTimeTable(tmpGTT());
                        SET dateOrderPreliminaryOrder(o) <- subtractDate(tmpDate(), dayBeforeGenTimeTable(tmpGTT()));
                        SET dateSupplyPreliminaryOrder(o) <- tmpDate();
                        SET genTimeTablePreliminaryOrder(o) <- tmpGTT();
                    };
                    SET tmpDate() <- sumDate(tmpDate(), periodGenTimeTable(tmpGTT()) * 7);
                };
            };
        };

        // генерация через N дней
        IF genTimeTableType(tmpGTT()) == genType.genDays THEN {
            SET tmpDate() <- dayLastOrderGenTimeTable(tmpGTT());
            // итерируемся по всем датам через n дней
            WHILE tmpDate() <= endDateGenTimeTable(tmpGTT()) DO {
                IF tmpDate() >= startDateGenTimeTable(tmpGTT()) THEN {
                    ADDOBJ preliminaryOrder;
                    FOR o == addedObject() DO {
                        SET departmentStorePreliminaryOrder(o) <- departmentStoreGenTimeTable(tmpGTT());
                        SET supplierPreliminaryOrder(o) <- supplierGenTimeTable(tmpGTT());
                        SET dateOrderPreliminaryOrder(o) <- subtractDate(tmpDate(), dayBeforeGenTimeTable(tmpGTT()));
                        SET dateSupplyPreliminaryOrder(o) <- tmpDate();
                        SET genTimeTablePreliminaryOrder(o) <- tmpGTT();
                    };
                };
                SET tmpDate() <- sumDate(tmpDate(), dayAfterGenTimeTable(tmpGTT()));
            };
        };

        // генерация по числам
        IF genTimeTableType(tmpGTT()) == genType.genNumber THEN {
            SET tmpDate() <- startDateGenTimeTable(tmpGTT());
            // итерируемся по всем датам через 1 день
            WHILE tmpDate() <= endDateGenTimeTable(tmpGTT()) DO {
                IF isWordInCSV(dayInDate(tmpDate()), stringNumberGenTimeTable(tmpGTT())) == 1 THEN {
                    ADDOBJ preliminaryOrder;
                    FOR o == addedObject() DO {
                        SET departmentStorePreliminaryOrder(o) <- departmentStoreGenTimeTable(tmpGTT());
                        SET supplierPreliminaryOrder(o) <- supplierGenTimeTable(tmpGTT());
                        SET tmpDateS() <- tmpDate();
                        SET genTimeTablePreliminaryOrder(o) <- tmpGTT();
                        // если попали на субботу или воскресенье
                        IF UNION OVERRIDE numberDOWInDate(tmpDateS()) == 0, numberDOWInDate(tmpDateS()) == 6 THEN {
                            IF numberDOW(transferDayGenTimeTable(tmpGTT())) == 1 THEN {
                                // если нужно переносить на понедельник, то добавляем
                                WHILE numberDOWInDate(tmpDateS()) != 1 DO SET tmpDateS() <- sumDate(tmpDateS(), 1);
                            } ELSE {
                                // если нужно переносить на пятницу, то отнимаем
                                WHILE numberDOWInDate(tmpDateS()) != 5 DO SET tmpDateS() <- subtractDate(tmpDateS(), 1);
                            };
                        };
                        SET dateSupplyPreliminaryOrder(o) <- tmpDateS();
                        SET dateOrderPreliminaryOrder(o) <- subtractDate(tmpDateS(), dayBeforeGenTimeTable(tmpGTT()));
                    };
                };
                SET tmpDate() <- sumDate(tmpDate(), 1);
            };
        };

        // генерация по дням и месяцам
        IF genTimeTableType(tmpGTT()) == genType.genDayMonth THEN {
            SET tmpDate() <- startDateGenTimeTable(tmpGTT());
            // итерируемся по всем датам через 1 день
            WHILE tmpDate() <= endDateGenTimeTable(tmpGTT()) DO {
                IF inMonthGenTimeTable(tmpGTT(), monthInDate(tmpDate())) AND inDayGenTimeTable(tmpGTT(), DOWInDate(tmpDate())) THEN {
                    ADDOBJ preliminaryOrder;
                    FOR o == addedObject() DO {
                        SET departmentStorePreliminaryOrder(o) <- departmentStoreGenTimeTable(tmpGTT());
                        SET supplierPreliminaryOrder(o) <- supplierGenTimeTable(tmpGTT());
                        SET dateOrderPreliminaryOrder(o) <- subtractDate(tmpDate(), dayBeforeGenTimeTable(tmpGTT()));
                        SET dateSupplyPreliminaryOrder(o) <- tmpDate();
                        SET genTimeTablePreliminaryOrder(o) <- tmpGTT();
                    };
                };
                SET tmpDate() <- sumDate(tmpDate(), 1);
            };
        };

        EXEC apply();
    };
};
//nextDateOrderSupplier (orderSupplier) <- nextDateOrder(preliminaryOrderOrderSupplier(orderSupplier)) WHEN ASSIGNED(orderSupplier);

// todo : здесь вообще-то нужно заполнять только ассортиментом данного поставщика, а не всем подряд как сейчас
fillInOrderSupplier 'Заполнить заказ рекомендованным количеством' = ACTION (orderSupplier) {
    FOR recommendCountOrderSupplier(orderSupplier, item AS item) DO {
        SET packQuantityItemOrderSupplier(orderSupplier, item) <- recommendCountOrderSupplier(orderSupplier, item AS item) ;
    };
};

//addOrderSupplier 'Создать заказ' = ACTION () NEWSESSION {
//    ADDOBJ orderSupplier;
//    FOR os == addedObject() DO {
//        SET curDateOrderSupplier(os) <- currentDate();
//        FORM orderSupplier OBJECTS o = os AS orderSupplier MODAL;
//        IF formResult() == formResult.ok THEN {
//            EXEC apply();
//        }
//    }
//} TOOLBAR;

createOrderSupplier 'Создать заказ' = [ACTION (preliminaryOrder) {
    ADDOBJ orderSupplier;
    FOR o == addedObject() DO {
        SET dateOrderSupplier(o) <- dateSupplyPreliminaryOrder(preliminaryOrder);
        SET curDateOrderSupplier(o) <- dateOrderPreliminaryOrder(preliminaryOrder);
        SET departmentStoreOrderSupplier(o) <- departmentStorePreliminaryOrder(preliminaryOrder);
        SET supplierOrderSupplier(o) <- supplierPreliminaryOrder(preliminaryOrder);
        SET allowablePercentOrderSupplier(o) <- allowablePercentSupplier(supplierPreliminaryOrder(preliminaryOrder));
        SET preliminaryOrderOrderSupplier(o) <- preliminaryOrder AS preliminaryOrder;
        SET nextDateOrderSupplier(o) <- nextDateOrder(preliminaryOrder);
        EXEC fillInOrderSupplier(o AS orderSupplier);
    }
    EXEC apply();
}] (preliminaryOrder) AND NOT preliminaryOrderToOrderSupplier(preliminaryOrder) CONFIRM;

FORM orderSupplier 'Заказ поставщику'

    TREE treeGroup g=itemGroup PARENT parentItemGroup

    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS o=orderSupplier FIXED PANEL

    PROPERTIES(o)          nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject,
                           curDateOrderSupplier, quantityDaysNextOrder, dateOrderSupplier,
                           quantityDaysAfterNextOrder, nextDateOrderSupplier, nameDepartmentStoreOrderSupplier,
                           nameSupplierOrderSupplier, UNPSupplierOrderSupplier, totalSumOrderSupplier, totalSumVatOrderSupplier,
                           totalFullSumOrderSupplier, allowablePercentOrderSupplier
    PROPERTIES(o) READONLY completePercentageOrderSupplier

    OBJECTS i=item

    PROPERTIES             nameAttributeItemGroupItem(g, i) READONLY, barcodeBarcodeSku(i) READONLY
    FILTERS                nameAttributeItemGroupItem(g, i)
    ORDER BY               nameAttributeItemGroupItem

    PROPERTIES(o, i)       topItem, packQuantityItemOrderSupplier, sumQuantityItemOrderSupplier

    PROPERTIES(i) quantityPackItem, minQuantityOrderItem
    PROPERTIES FORCE PANEL nameWareOrderSupplier(o, i)
    PROPERTIES FORCE PANEL READONLY articleItem(i), nameCountryItem(i), retailPriceItemOrderSupplier(o, i),
                                    nameinActionItemOrderSupplier(o, i), banMovementDepartmentStoreOrderSupplier(o, i),
                                    lastOrderSupplier(o, i), warePriceOrderSupplier(o, i), numberDataRangeWareOrderSupplier(o, i),
                                    dataWareRangeOrderSupplier(o, i)

    PROPERTIES             currentBalanceOrderSupplierItem(o, i), quantityToSellNextOrder(o, i), minReserveItem(i), recommendCountOrderSupplier(o, i)
    PROPERTIES(o, i)       priceSupplierItemOrderSupplier, numberSupplierRangeOrderSupplier,
                           dataSupplierRangeOrderSupplier, sumWareOrderSupplier, retailVATISumItemOrderSupplier,
                           fullSumItemOrderSupplier

    PROPERTIES(o)          fillInOrderSupplier TODRAW i FORCE PANEL

    FILTERS isSupplierItemDepartmentOrderSupplier(o, i),
            isBanSupplierItemDepartmentOrderSupplier(o, i)

    FILTERGROUP filters1
        FILTER 'Показывать только заказанные позиции' 'F10' sumQuantityItemOrderSupplier(o, i) DEFAULT

    EDIT orderSupplier OBJECT o
;

DESIGN orderSupplier FROM DEFAULT {

    main {

        NEW header.box BEFORE o.box {
            childConstraints = TO THE RIGHT;

            NEW headerLeft {
                childConstraints = TO THE BOTTOM;
                ADD o.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreOrderSupplier);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                }
                ADD o.documentPrmGroup;
            }
            ADD o.dateOrderSupplierGroup{
                childConstraints = TO THE BOTTOM;
            };
            ADD o.orderSupplierGroup {
                childConstraints = TO THE BOTTOM;
            };
        }
    }

    POSITION treeGroup.box TO THE LEFT i.box;
    POSITION treeGroup.box TO THE BOTTOM header.box;

    i.grid {
        fillHorizontal = 4;
    }

    i.panel{
        childConstraints = TO THE RIGHT;
            NEW itemBox {
                childConstraints = TO THE BOTTOM;
                title = 'Информация по товару';
                ADD PROPERTY(articleItem);
                ADD PROPERTY(nameCountryItem);
                ADD PROPERTY(retailPriceItemOrderSupplier);
                ADD PROPERTY(numberSupplierRangeOrderSupplier);
                ADD PROPERTY(nameinActionItemOrderSupplier);
                ADD PROPERTY(banMovementDepartmentStoreOrderSupplier);
                ADD PROPERTY(lastOrderSupplier);
            };
            NEW wareBox {
                childConstraints = TO THE BOTTOM;
                title = 'Посуда';
                ADD PROPERTY(nameWareOrderSupplier);
                ADD PROPERTY(warePriceOrderSupplier);
                ADD PROPERTY(numberDataRangeWareOrderSupplier);
                ADD PROPERTY(dataWareRangeOrderSupplier);
            };
    }

    PROPERTY (fillInOrderSupplier) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
}

FORM orderSuppliers 'Заказы поставщику'

    OBJECTS o=orderSupplier
    PROPERTIES(o) READONLY objectClassName, numberObject, seriesObject, curDateOrderSupplier, quantityDaysNextOrder, dateOrderSupplier,
                           quantityDaysAfterNextOrder, nextDateOrderSupplier, nameDepartmentStoreOrderSupplier,
                           nameSupplierOrderSupplier, completePercentageOrderSupplier, totalSumOrderSupplier, timeCreated,
                           nameUserCreated, allowablePercentOrderSupplier

    PROPERTIES(o)          ADDFORM, EDITFORM SHOWIF isDraftOrderSupplier(o), delete FORCE PANEL SHOWIF isDraftOrderSupplier(o),
                           postOrderSupplier SHOWIF isDraftOrderSupplier(o), unpostOrderSupplier SHOWIF isPostedOrderSupplier(o)
    PROPERTIES(o) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    OBJECTS i=item

    PROPERTIES(i) READONLY nameAttributeItem, barcodeBarcodeSku
    ORDER BY               nameAttributeItem

    PROPERTIES(o, i) READONLY  topItem, packQuantityItemOrderSupplier, sumQuantityItemOrderSupplier

    PROPERTIES(i) READONLY     quantityPackItem, minQuantityOrderItem

    PROPERTIES(o, i) READONLY  priceSupplierItemOrderSupplier, numberSupplierRangeOrderSupplier,
                               dataSupplierRangeOrderSupplier, sumWareOrderSupplier, retailVATISumItemOrderSupplier,
                               fullSumItemOrderSupplier

    FILTERS sumQuantityItemOrderSupplier(o, i)
;

DESIGN orderSuppliers FROM DEFAULT{

    PROPERTY (delete(o)){
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
    ADD o.historyGroup BEFORE functions.box {
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    };
    ADD o.postedGroup BEFORE functions.box {
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    };
    POSITION o.historyGroup TO THE LEFT o.postedGroup;
}


// ----------------------------------- Разрешать поставки ------------------------------------------- //

isOrderDate (date, preliminaryOrder) = dateOrderPreliminaryOrder(preliminaryOrder) == date AS DATE;
isSupplyDate (date, preliminaryOrder) = dateSupplyPreliminaryOrder(preliminaryOrder) == date AS DATE;
isSupplierDepartmentStore (departmentStore, supplier, preliminaryOrder) =
    departmentStorePreliminaryOrder(preliminaryOrder) == departmentStore AND supplierPreliminaryOrder(preliminaryOrder) ==supplier;

showFormGenTimeTablePreliminaryOrder 'Показать генерацию графика' (preliminaryOrder) = showFormGenTimeTable(genTimeTablePreliminaryOrder(preliminaryOrder));

FORM timeTableDate 'График поставок'

    OBJECTS t=DATE FIXED PANEL
    PROPERTIES(t) OBJVALUE

    OBJECTS d=departmentStore FIXED PANEL
    PROPERTIES name(d) SELECTOR, createGenTimeTable()

    OBJECTS s=supplier
    PROPERTIES(s) READONLY name

    OBJECTS p=preliminaryOrder
    PROPERTIES(p) showFormGenTimeTablePreliminaryOrder
    PROPERTIES(p) READONLY dateOrderPreliminaryOrder, dateSupplyPreliminaryOrder, dataOrderPreliminaryOrder
    PROPERTIES(p) nextDateOrder, createOrderSupplier
    PROPERTIES(p) ADDFORM, EDITFORM, delete FORCE PANEL
    PROPERTIES(s, d, t) READONLY quantityOrderOrderSupplier, quantitySupplyOrderSupplier, quantityOrderPreliminaryOrder, quantitySupplyPreliminaryOrder

    FILTERS isSupplierDepartmentStore(d, s, p)
    FILTERGROUP filters
        FILTER 'С предварительным заказом на дату заказа' 'F10' quantityOrderPreliminaryOrder(s, d, t)
        FILTER 'С предварительным заказом на дату поставки' 'F10' quantitySupplyPreliminaryOrder(s, d, t)
        FILTER 'С заказом на дату заказа' 'F10' quantityOrderOrderSupplier(s, d, t)
        FILTER 'С заказом на дату поставки' 'F10' quantitySupplyOrderSupplier(s, d, t)
    FILTERGROUP filters2
        FILTER 'Заказы после даты заказа' 'F10' isOrderDatePreliminaryOrder(p, t) DEFAULT
        FILTER 'Заказы после даты поставки' 'F10' isSupplyDatePreliminaryOrder(p, t)
        FILTER 'Заказы на дату заказа' 'F10' isOrderDate(t, p)
        FILTER 'Заказы на дату поставки' 'F10' isSupplyDate(t, p)

    ORDER BY dateOrderPreliminaryOrder
;

DESIGN timeTableDate FROM DEFAULT {
        POSITION s.box TO THE LEFT p.box;
        p.box {fillHorizontal = 4;}

        ADD PROPERTY(createGenTimeTable) IN d.panel;
        PROPERTY (delete(p)) {
            panelLocation = TOOLBAR;
            askConfirm = TRUE;
            }
}

// --------------------------- Использование регистров (автоматическое заполнение) ---------------------------------

balanceBeforeShipmentShipmentDetail (shipmentDetail) <- balanceBItemLedgerDateTime (
                itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateTimeShipmentDetail(shipmentDetail))
                WHEN CHANGED(itemShipmentDetail(shipmentDetail));

balanceBeforeInnerArrivalInnerArrivalDetail(innerArrivalDetail) <- balanceBItemLedgerDateTime (
                itemInnerArrivalDetail(innerArrivalDetail), departmentStoreInnerArrivalDetail(innerArrivalDetail), dateTimeInnerArrivalDetail(innerArrivalDetail))
                WHEN CHANGED(itemInnerArrivalDetail(innerArrivalDetail));


curImporterPriceShipmentDetail (shipmentDetail) <- priceImporterBLedgerDateTime (
                itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateTimeShipmentDetail(shipmentDetail))
                WHEN CHANGED(itemShipmentDetail(shipmentDetail));

curSupplierPriceShipmentDetail (shipmentDetail) <- priceSupplierBLedgerDateTime (
                itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateTimeShipmentDetail(shipmentDetail))
                WHEN CHANGED(itemShipmentDetail(shipmentDetail));

curRetailRangeShipmentDetail (shipmentDetail) <- rangeRetailBLedgerDateTime(
                itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateTimeShipmentDetail(shipmentDetail))
                WHEN CHANGED(itemShipmentDetail(shipmentDetail));

curRetailPriceShipmentDetail (shipmentDetail) <- priceAccountBLedgerDateTime(
                itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateTimeShipmentDetail(shipmentDetail))
                WHEN CHANGED(itemShipmentDetail(shipmentDetail));

curWarePriceShipmentDetail (shipmentDetail) <- warePriceBLedgerDateTime(
                itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateTimeShipmentDetail(shipmentDetail))
                WHEN CHANGED(wareShipmentDetail(shipmentDetail));

curWareShipmentDetail (shipmentDetail)  <- wareBLedgerDateTime(
                itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateTimeShipmentDetail(shipmentDetail))
                WHEN CHANGED(itemShipmentDetail(shipmentDetail));


accountPriceWriteOffDetail (writeOffDetail) <- priceAccountBLedgerDateTime(
                itemWriteOffDetail(writeOffDetail), departmentStoreWriteOffDetail(writeOffDetail), dateTimeWriteOffDetail(writeOffDetail))
                WHEN CHANGED(itemWriteOffDetail(writeOffDetail));

//retailPriceWriteOffDetail 'Розничная цена' (writeOffDetail) = priceRetailBLedgerDateTime (
//                itemWriteOffDetail(writeOffDetail), departmentStoreWriteOffDetail(writeOffDetail), dateTimeWriteOffDetail(writeOffDetail));
retailPriceWriteOffDetail (writeOffDetail) <- priceRetailBLedgerDateTime(
                itemWriteOffDetail(writeOffDetail), departmentStoreWriteOffDetail(writeOffDetail), dateTimeWriteOffDetail(writeOffDetail))
                WHEN CHANGED(itemWriteOffDetail(writeOffDetail));

supplierPriceWriteOffDetail (writeOffDetail) <- priceSupplierBLedgerDateTime(
                itemWriteOffDetail(writeOffDetail), departmentStoreWriteOffDetail(writeOffDetail), dateTimeWriteOffDetail(writeOffDetail))
                WHEN CHANGED(itemWriteOffDetail(writeOffDetail));

wareWriteOffDetail (writeOffDetail)  <- wareBLedgerDateTime(
                itemWriteOffDetail(writeOffDetail), departmentStoreWriteOffDetail(writeOffDetail), dateTimeWriteOffDetail(writeOffDetail))
                WHEN CHANGED(itemWriteOffDetail(writeOffDetail));

warePriceWriteOffDetail (writeOffDetail) <- warePriceBLedgerDateTime(
                itemWriteOffDetail(writeOffDetail), departmentStoreWriteOffDetail(writeOffDetail), dateTimeWriteOffDetail(writeOffDetail))
                WHEN CHANGED(itemWriteOffDetail(writeOffDetail));

retailRangeWriteOffDetail (writeOffDetail) <- rangeRetailBLedgerDateTime(
                itemWriteOffDetail(writeOffDetail), departmentStoreWriteOffDetail(writeOffDetail), dateTimeWriteOffDetail(writeOffDetail))
                WHEN CHANGED(itemWriteOffDetail(writeOffDetail));


retailPriceInnerFlowDetail (innerFlowDetail) <- priceRetailBLedgerDateTime(
                itemInnerFlowDetail(innerFlowDetail), departmentStoreInnerFlowDetail(innerFlowDetail), dateTimeInnerFlowDetail(innerFlowDetail))
                WHEN CHANGED(itemInnerFlowDetail(innerFlowDetail));

importerPriceInnerFlowDetail (innerFlowDetail) <- priceImporterBLedgerDateTime(
                itemInnerFlowDetail(innerFlowDetail), departmentStoreInnerFlowDetail(innerFlowDetail), dateTimeInnerFlowDetail(innerFlowDetail))
                WHEN CHANGED(itemInnerFlowDetail(innerFlowDetail));

supplierPriceInnerFlowDetail (innerFlowDetail) <- priceSupplierBLedgerDateTime(
                itemInnerFlowDetail(innerFlowDetail), departmentStoreInnerFlowDetail(innerFlowDetail), dateTimeInnerFlowDetail(innerFlowDetail))
                WHEN CHANGED(itemInnerFlowDetail(innerFlowDetail));

retailRangeInnerFlowDetail (innerFlowDetail) <- rangeRetailBLedgerDateTime(
                itemInnerFlowDetail(innerFlowDetail), departmentStoreInnerFlowDetail(innerFlowDetail), dateTimeInnerFlowDetail(innerFlowDetail))
                WHEN CHANGED(itemInnerFlowDetail(innerFlowDetail));

warePriceInnerFlowDetail (innerFlowDetail) <- warePriceBLedgerDateTime(
                itemInnerFlowDetail(innerFlowDetail), departmentStoreInnerFlowDetail(innerFlowDetail), dateTimeInnerFlowDetail(innerFlowDetail))
                WHEN CHANGED(itemInnerFlowDetail(innerFlowDetail));

wareInnerFlowDetail (innerFlowDetail) <- wareBLedgerDateTime(
                itemInnerFlowDetail(innerFlowDetail), departmentStoreInnerFlowDetail(innerFlowDetail), dateTimeInnerFlowDetail(innerFlowDetail))
                WHEN CHANGED(itemInnerFlowDetail(innerFlowDetail));


curRetailPriceInnerArrivalDetail (innerArrivalDetail) <- priceRetailBLedgerDateTime(
                itemInnerArrivalDetail(innerArrivalDetail), departmentStoreInnerArrivalDetail(innerArrivalDetail), dateTimeInnerArrivalDetail(innerArrivalDetail))
                WHEN CHANGED(itemInnerArrivalDetail(innerArrivalDetail));

curImporterPriceInnerArrivalDetail (innerArrivalDetail) <- priceImporterBLedgerDateTime(
                itemInnerArrivalDetail(innerArrivalDetail), departmentStoreInnerArrivalDetail(innerArrivalDetail), dateTimeInnerArrivalDetail(innerArrivalDetail))
                WHEN CHANGED(itemInnerArrivalDetail(innerArrivalDetail));

curSupplierPriceInnerArrivalDetail (innerArrivalDetail) <- priceSupplierBLedgerDateTime(
                itemInnerArrivalDetail(innerArrivalDetail), departmentStoreInnerArrivalDetail(innerArrivalDetail), dateTimeInnerArrivalDetail(innerArrivalDetail))
                WHEN CHANGED(itemInnerArrivalDetail(innerArrivalDetail));

curRetailRangeInnerArrivalDetail (innerArrivalDetail) <- rangeRetailBLedgerDateTime(
                itemInnerArrivalDetail(innerArrivalDetail), departmentStoreInnerArrivalDetail(innerArrivalDetail), dateTimeInnerArrivalDetail(innerArrivalDetail))
                WHEN CHANGED(itemInnerArrivalDetail(innerArrivalDetail));

curWarePriceInnerArrivalDetail (innerArrivalDetail) <- warePriceBLedgerDateTime(
                itemInnerArrivalDetail(innerArrivalDetail), departmentStoreInnerArrivalDetail(innerArrivalDetail), dateTimeInnerArrivalDetail(innerArrivalDetail))
                WHEN CHANGED(itemInnerArrivalDetail(innerArrivalDetail));

curWareInnerArrivalDetail (innerArrivalDetail) <- wareBLedgerDateTime(
                itemInnerArrivalDetail(innerArrivalDetail), departmentStoreInnerArrivalDetail(innerArrivalDetail), dateTimeInnerArrivalDetail(innerArrivalDetail))
                WHEN CHANGED(itemInnerArrivalDetail(innerArrivalDetail));

curRetailPriceReturnSupplierDetail (returnSupplierDetail) <- priceAccountBLedgerDateTime(
                itemReturnSupplierDetail(returnSupplierDetail), departmentStoreReturnSupplierDetail(returnSupplierDetail),
                dateTimeReturnSupplierDetail(returnSupplierDetail)) WHEN CHANGED(itemReturnSupplierDetail(returnSupplierDetail));

curRetailRangeReturnSupplierDetail (returnSupplierDetail) <- rangeRetailBLedgerDateTime(
                itemReturnSupplierDetail(returnSupplierDetail), departmentStoreReturnSupplierDetail(returnSupplierDetail),
                dateTimeReturnSupplierDetail(returnSupplierDetail)) WHEN CHANGED(itemReturnSupplierDetail(returnSupplierDetail));

curImporterPriceReturnSupplierDetail (returnSupplierDetail) <- priceImporterBLedgerDateTime (
                itemReturnSupplierDetail(returnSupplierDetail), departmentStoreReturnSupplierDetail(returnSupplierDetail),
                dateTimeReturnSupplierDetail(returnSupplierDetail)) WHEN CHANGED(itemReturnSupplierDetail(returnSupplierDetail));

curSupplierPriceReturnSupplierDetail (returnSupplierDetail) <- priceSupplierBLedgerDateTime (
                itemReturnSupplierDetail(returnSupplierDetail), departmentStoreReturnSupplierDetail(returnSupplierDetail),
                dateTimeReturnSupplierDetail(returnSupplierDetail)) WHEN CHANGED(itemReturnSupplierDetail(returnSupplierDetail));

curWareReturnSupplierDetail (returnSupplierDetail)  <- wareBLedgerDateTime(
                itemReturnSupplierDetail(returnSupplierDetail), departmentStoreReturnSupplierDetail(returnSupplierDetail),
                dateTimeReturnSupplierDetail(returnSupplierDetail)) WHEN CHANGED(itemReturnSupplierDetail(returnSupplierDetail));

curWarePriceReturnSupplierDetail (returnSupplierDetail) <- warePriceBLedgerDateTime(
                itemReturnSupplierDetail(returnSupplierDetail), departmentStoreReturnSupplierDetail(returnSupplierDetail),
                dateTimeReturnSupplierDetail(returnSupplierDetail)) WHEN CHANGED(itemReturnSupplierDetail(returnSupplierDetail));

//----------------------------------- Подбор товаров -------------------------------------------------------

quantityInputItem 'Кол-во' = SESSION DATA NUMERIC[14,3] (item);
isInputItem 'Вкл' = SESSION DATA BOOLEAN (item);

FORM itemDepartmentStoreInput 'Подбор товаров'
    OBJECTS d=departmentStore FIXED PANEL
    PROPERTIES(d) READONLY name

    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY gname = name(g)
    ORDER BY gname

    OBJECTS i=item
    PROPERTIES barcodeBarcodeSku(i) READONLY, nameAttributeItemGroupItem(g, i) READONLY, shortNameUnitOfMeasureItem(i) READONLY
    FILTERS nameAttributeItemGroupItem(g, i)
    ORDER BY nameAttributeItemGroupItem

    PROPERTIES currentBalanceItemLedger(i, d), currentPriceRetailLedger(i, d), quantityInputItem(i)

    FILTERGROUP filterBalance
        FILTER 'На остатках' 'F10' currentBalanceItemLedger(i, d)
    FILTERGROUP filterSelected
        FILTER 'Выбранные' 'F9' quantityInputItem(i)
;

DESIGN itemDepartmentStoreInput FROM DEFAULT {
    POSITION treeGroup.box TO THE LEFT i.box;

    treeGroup.tree {
        fillHorizontal = 0.4;
    }

    i.grid {
        defaultComponent = TRUE;
    }
}

META metaCodeInputMultipleItems (object)

    inputMultipleItems###object 'Подбор товаров' = ACTION (object) {
        FORM itemDepartmentStoreInput OBJECTS d = departmentStore###object(object) MODAL;
        IF formResult() == formResult.ok THEN {
            FOR quantityInputItem(item) DO {
                ADDOBJ object##Detail;
                FOR w == addedObject() DO {
                    SET object###object##Detail(w) <- object AS object;
                    SET item###object##Detail(w) <- item AS item;
                    SET quantity###object##Detail(w) <- quantityInputItem(item);
                }
            }
        }
        SET quantityInputItem(item) <- NULL;
    } TOOLBAR;

END

//------------------------------------------------Подбор товара для возврата поставщику-----------------------------------------

FORM itemDepartmentStoreSupplierInput 'Подбор товаров'
    OBJECTS d=departmentStore FIXED PANEL
    PROPERTIES(d) READONLY name

    OBJECTS s=supplier FIXED PANEL
    PROPERTIES(s) READONLY name

    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY gname = name(g)
    ORDER BY gname

    OBJECTS i=item
    PROPERTIES barcodeBarcodeSku(i) READONLY, nameAttributeItemGroupItem(g, i) READONLY, shortNameUnitOfMeasureItem(i) READONLY
    FILTERS nameAttributeItemGroupItem(g, i)
    ORDER BY nameAttributeItemGroupItem

    PROPERTIES currentBalanceItemLedger(i, d), currentPriceRetailLedger(i, d), quantityInputItem(i)

    FILTERGROUP filterSupply
        FILTER 'Поставлявшиеся' 'F11' sumQuantityItemShipment(d, s, i) DEFAULT
    FILTERGROUP filterBalance
        FILTER 'На остатках' 'F10' currentBalanceItemLedger(i, d) DEFAULT
    FILTERGROUP filterSelected
        FILTER 'Выбранные' 'F9' quantityInputItem(i)
;

DESIGN itemDepartmentStoreSupplierInput FROM DEFAULT {
    POSITION treeGroup.box TO THE LEFT i.box;
    POSITION d.box TO THE LEFT s.box;

    treeGroup.tree {
        fillHorizontal = 0.4;
    }

    i.grid {
        defaultComponent = TRUE;
    }
}

META metaCodeInputMultipleItemsSupplier (object)

    inputMultipleItemsSupplier###object 'Подбор товаров' = ACTION (object) {
        FORM itemDepartmentStoreSupplierInput OBJECTS d = departmentStore###object(object), s = supplier###object(object) MODAL;
        IF formResult() == formResult.ok THEN {
            FOR quantityInputItem(item) DO {
                ADDOBJ object##Detail;
                FOR w == addedObject() DO {
                    SET object###object##Detail(w) <- object AS object;
                    SET item###object##Detail(w) <- item AS item;
                    SET quantity###object##Detail(w) <- quantityInputItem(item);
                }
            }
        }
        SET quantityInputItem(item) <- NULL;
    } TOOLBAR;

END

//----------------------------------- Подбор товаров для переоценки -------------------------------------------------------

FORM itemDepartmentStoreBalanceInput 'Подбор товаров'
    OBJECTS d=departmentStore FIXED PANEL
    PROPERTIES(d) READONLY name

    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY gname = name(g)
    ORDER BY gname

    OBJECTS i=item
    PROPERTIES barcodeBarcodeSku(i) READONLY, nameAttributeItemGroupItem(g, i) READONLY, shortNameUnitOfMeasureItem(i) READONLY
    FILTERS nameAttributeItemGroupItem(g, i)
    ORDER BY nameAttributeItemGroupItem

    PROPERTIES currentBalanceItemLedger(i, d), currentPriceRetailLedger(i, d), isInputItem(i)

    FILTERGROUP filterBalance
        FILTER 'На остатках' 'F10' currentBalanceItemLedger(i, d)
    FILTERGROUP filterSelected
        FILTER 'Выбранные' 'F9' quantityInputItem(i)
;

DESIGN itemDepartmentStoreBalanceInput FROM DEFAULT {
    POSITION treeGroup.box TO THE LEFT i.box;

    treeGroup.tree {
        fillHorizontal = 0.4;
    }

    i.grid {
        defaultComponent = TRUE;
    }
}

META metaCodeInputMultipleItemsBalance (object)

    inputMultipleItemsBalance###object 'Подбор товаров' = ACTION (object) {
        FORM itemDepartmentStoreBalanceInput OBJECTS d = departmentStore###object(object) MODAL;
        IF formResult() == formResult.ok THEN {
            FOR isInputItem(item) DO {
                ADDOBJ object##Detail;
                FOR w == addedObject() DO {
                    SET object###object##Detail(w) <- object AS object;
                    SET item###object##Detail(w) <- item AS item;
                    SET quantity###object##Detail(w) <- currentBalanceItemLedger(item, departmentStore###object(object));
                }
            }
        }
        SET isInputItem(item) <- NULL;
    } TOOLBAR;

END

//----------------------------------- Загрузка в ВУ -------------------------------------------------------

inGroupMachineryItem 'Вкл' (groupMachinery, item) = groupMachinery IS groupMachinery
                                                    AND item IS item
                                                         AND NOT (filterItemsGroupMachinery(groupMachinery) AND NOT inGroupMachineryItemGroup(groupMachinery, itemGroupSku(item)))
                                                         AND NOT (groupMachinery IS groupScales AND NOT passScalesItem(item));

CLASS ABSTRACT machineryPriceTransaction 'Загрузка прайса в оборудование' : historyObject;
TABLE machineryPriceTransaction (machineryPriceTransaction);
TABLE machineryPriceTransactionBarcode (machineryPriceTransaction, barcode);

CLASS cashRegisterPriceTransaction 'Загрузка прайса в кассы' : machineryPriceTransaction;
CLASS scalesPriceTransaction 'Загрузка прайса в весы' : machineryPriceTransaction;
CLASS checkPriceTransaction 'Загрузка прайса в прайс чекеры' : machineryPriceTransaction;
CLASS terminalPriceTransaction 'Загрузка прайса в ТСД' : machineryPriceTransaction;

groupCashRegisterCashRegisterPriceTransaction 'Группа касс' = DATA groupCashRegister (cashRegisterPriceTransaction);
groupScalesScalesRegisterPriceTransaction 'Группа весов' = DATA groupScales (scalesPriceTransaction);
groupCheckCheckRegisterPriceTransaction 'Группа прайс чекеров' = DATA groupCheck (checkPriceTransaction);
groupTerminalTerminalPriceTransaction 'Группа ТСД' = DATA groupTerminal (terminalPriceTransaction);

groupMachineryMachineryPriceTransaction 'Группа оборудования (ИД)' (transaction) = UNION EXCLUSIVE groupCashRegisterCashRegisterPriceTransaction(transaction),
                                                                                                   groupScalesScalesRegisterPriceTransaction(transaction),
                                                                                                   groupCheckCheckRegisterPriceTransaction(transaction),
                                                                                                   groupTerminalTerminalPriceTransaction(transaction)PERSISTENT;

nameGroupMachineryMachineryPriceTransaction 'Группа оборудования' (transaction) = nameGroupMachinery(groupMachineryMachineryPriceTransaction(transaction));

departmentStoreMachineryPriceTransaction (transaction) = departmentStoreGroupMachinery(groupMachineryMachineryPriceTransaction(transaction));

equipmentServerMachineryPriceTransaction (transaction) = equipmentServerGroupMachinery(groupMachineryMachineryPriceTransaction(transaction));

sidEquipmentServerMachineryPriceTransaction (transaction) = sidEquipmentServer(equipmentServerMachineryPriceTransaction (transaction));

dateMachineryPriceTransaction 'Дата' = DATA DATE (machineryPriceTransaction);
dateMachineryPriceTransaction (transaction) <- currentDate() WHEN ASSIGNED(transaction IS machineryPriceTransaction);

timeMachineryPriceTransaction 'Время' = DATA TIME (machineryPriceTransaction);
timeMachineryPriceTransaction (transaction) <- currentTime() WHEN ASSIGNED(transaction IS machineryPriceTransaction);

dateTimeMachineryPriceTransaction 'Дата/время' (transaction) = toDateTime(dateMachineryPriceTransaction(transaction), timeMachineryPriceTransaction(transaction));

snapshotMachineryPriceTransaction 'Целиком' = DATA BOOLEAN (machineryPriceTransaction);

succeededMachineryPriceTransaction 'Загружена' = DATA BOOLEAN (machineryPriceTransaction);
canceledMachineryPriceTransaction 'Отменена' = DATA BOOLEAN (machineryPriceTransaction);
processMachineryPriceTransaction 'Требуется загрузка' = machineryPriceTransaction IS machineryPriceTransaction AND NOT
                                                        succeededMachineryPriceTransaction(machineryPriceTransaction) AND NOT
                                                        canceledMachineryPriceTransaction(machineryPriceTransaction);

inMachineryPriceTransactionMachinery 'Вкл' = DATA BOOLEAN (machineryPriceTransaction, machinery);
nppsMachineryPriceTransaction 'Номера устройств' = GROUP CONCAT castToString3(nppMachinery(machinery)) IF inMachineryPriceTransactionMachinery(transaction, machinery), ',' BY transaction PERSISTENT;

orderMachineryPriceTransaction (transaction) = LIST(dateTimeMachineryPriceTransaction(transaction), transaction) PERSISTENT;

inMachineryPriceTransactionBarcode 'Вкл' = DATA BOOLEAN (machineryPriceTransaction, barcode);
nameMachineryPriceTransactionBarcode 'Наименование' = DATA STRING[255] (machineryPriceTransaction, barcode);
priceMachineryPriceTransactionBarcode 'Цена' = DATA NUMERIC[14,2] (machineryPriceTransaction, barcode);

TABLE barcodeGroupMachinery (barcode, groupMachinery);

lastOrderTransactionBarcodeGroupMachinery (barcode, groupMachinery) = GROUP MAX orderMachineryPriceTransaction(transaction)
                                                                          AND inMachineryPriceTransactionBarcode(transaction, barcode)
                                                                          AND NOT snapshotMachineryPriceTransaction(transaction)
                                                                          AND NOT canceledMachineryPriceTransaction(transaction)
                                                                      BY barcode, groupMachineryMachineryPriceTransaction(transaction);
lastTransactionBarcodeGroupMachinery (barcode, groupMachinery) = lastOrderTransactionBarcodeGroupMachinery(barcode, groupMachinery) [2] PERSISTENT;

transactionNameBarcodeGroupMachinery 'Текущее наименование в оборудовании' (barcode, groupMachinery)  =
    nameMachineryPriceTransactionBarcode(lastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode);

transactionPriceBarcodeGroupMachinery 'Текущая цена в оборудовании' (barcode, groupMachinery)  =
    priceMachineryPriceTransactionBarcode(lastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode);
ledgerPriceBarcodeGroupMachinery 'Текущая цена по учету' (barcode, groupMachinery) = ledgerPriceBarcodeDepartmentStore(barcode, departmentStoreGroupMachinery(groupMachinery));

commentMachineryPriceTransaction 'Примечание' = DATA STRING[30] (machineryPriceTransaction);

isDraftPriceTransactionDocument 'Открыт' = ABSTRACT BOOLEAN (priceTransactionDocument);
descriptionPriceTransactionDocument 'Название документа загрузки' = ABSTRACT STRING[200] (priceTransactionDocument);

priceTransactionDocumentMachineryPriceTransaction = DATA priceTransactionDocument (machineryPriceTransaction);
descriptionPriceTransactionDocumentMachineryPriceTransaction 'Основание загрузки' (transaction) =
    descriptionPriceTransactionDocument(priceTransactionDocumentMachineryPriceTransaction(transaction));

// todo : persistent почему-то не работает
descriptionMachineryPriceTransaction 'Основание' (document) = UNION OVERRIDE descriptionPriceTransactionDocumentMachineryPriceTransaction(document),
                                                                             commentMachineryPriceTransaction(document);

sentPriceTransactionDocument 'Принят к загрузке в оборудование' = DATA BOOLEAN (priceTransactionDocument);
sentPriceTransactionDocument(document) <- NULL WHEN ASSIGNED(isDraftPriceTransactionDocument(document));

// todo : это свойство тоже не становится PERSISTENT
countProcessPriceTransactionDocument 'Кол-во ожидающих транзакций' (document) = GROUP SUM 1 IF processMachineryPriceTransaction(transaction)
                                                                                 BY priceTransactionDocumentMachineryPriceTransaction(transaction) PERSISTENT;

succeededPriceTransactionDocument 'Загружен в оборудование' (document) = sentPriceTransactionDocument (document) AND NOT countProcessPriceTransactionDocument(document);

statusEquipmentPriceTransactionDocument 'Статус загрузки в оборудование' (document) =
                                                        CASE
                                                            WHEN succeededPriceTransactionDocument(document) THEN 'Успешно загружен' IF document IS priceTransactionDocument
                                                            WHEN sentPriceTransactionDocument(document) THEN 'Принят к загрузке' IF document IS priceTransactionDocument
                                                            DEFAULT 'Не загружен' IF document IS priceTransactionDocument
                                                        END;

// перезагрузка прайса целиком
selectedMachinery 'Вкл' = SESSION DATA BOOLEAN (machinery);

GROUP snapshotMachineryPriceGroup 'Перезагрузка прайса' : publicGroup;

//--------------------Сообщения об ошибках транзакций--------------------//
CLASS machineryPriceTransactionError 'Ошибка';
TABLE machineryPriceTransactionError (machineryPriceTransactionError);

dataMachineryPriceTransactionError 'Сообщение об ошибке' = DATA STRING[200] (machineryPriceTransactionError) IN baseGroup;
dateMachineryPriceTransactionError 'Время возникновения' = DATA DATETIME (machineryPriceTransactionError) IN baseGroup;
errorTraceMachineryPriceTransactionError 'След исключения' = DATA TEXT (machineryPriceTransactionError) IN baseGroup;
machineryPriceTransactionMachineryPriceTransactionError 'Транзакция (ID)' = DATA machineryPriceTransaction(machineryPriceTransactionError) IN baseGroup;
quantityMachineryPriceTransactionErrorMachineryPriceTransaction 'Количество ошибок' (MachineryPriceTransaction) = GROUP SUM 1 IF machineryPriceTransactionMachineryPriceTransactionError (machineryPriceTransactionError) == MachineryPriceTransaction
    BY machineryPriceTransactionMachineryPriceTransactionError (machineryPriceTransactionError) IN baseGroup;


FORM groupMachineryInput 'Выбор оборудования для перезагрузки прайса'

    OBJECTS d = departmentStore FIXED PANEL
    PROPERTIES(d) READONLY dname = name

    OBJECTS g = groupMachinery
    PROPERTIES(g) READONLY nameGroupMachinery, nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery
    FILTERS departmentStoreGroupMachinery(g) == d

    OBJECTS m = machinery
    PROPERTIES(m)          selectedMachinery
    PROPERTIES(m) READONLY nppMachinery, descriptionMachinery, portMachinery, useMachinery

    PROPERTIES(m) READONLY FORCE GRID SHOWIF isGroupCashRegister(g) numberCashRegister, directoryCashRegister,
                                                                    nameCashRegisterModelCashRegister, dateCashRegister

    PROPERTIES(m) READONLY FORCE GRID SHOWIF isGroupScales(g)       numberScales, nameScalesModelScales

    FILTERS groupMachineryMachinery(m) == g
;

DESIGN groupMachineryInput FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
    }
    PROPERTY(dname) {
        focusable = FALSE;
    }
}

snapshotGroupMachineryDepartmentStore 'Перезагрузить прайс' = ACTION (departmentStore) NEWSESSION {
    FORM groupMachineryInput OBJECTS d = (departmentStore AS departmentStore) MODAL;
    IF formResult() == formResult.ok THEN {
        LOCAL groupMachinery = groupMachinery ();
        SET groupMachinery() <- chosenObject('g');
        IF groupMachinery() IS groupScales THEN
            ADDOBJ scalesPriceTransaction
        ELSE IF groupMachinery() IS groupCheck THEN
            ADDOBJ checkPriceTransaction
        ELSE IF groupMachinery() IS groupTerminal THEN
            ADDOBJ terminalPriceTransaction
        ELSE
            ADDOBJ cashRegisterPriceTransaction;
        FOR t == addedObject() DO {
            SET groupMachineryMachineryPriceTransaction(t) <- groupMachinery();
            SET commentMachineryPriceTransaction(t) <- 'Перезагрузка прайса целиком';
            SET snapshotMachineryPriceTransaction(t) <- TRUE;
            SET inMachineryPriceTransactionMachinery(t, machinery) <- selectedMachinery(machinery);
            SET inMachineryPriceTransactionBarcode(t, barcode) <- TRUE AND lastTransactionBarcodeGroupMachinery(barcode, groupMachinery())
                                                                       AND inGroupMachineryItem(groupMachinery(), skuBarcode(barcode)) // важно, что товар должен быть активным на текущий момент
                                                                       AND activeBarcode(barcode);
            SET nameMachineryPriceTransactionBarcode(t, barcode) <- transactionNameBarcodeGroupMachinery(barcode, groupMachinery());
            SET priceMachineryPriceTransactionBarcode(t, barcode) <- transactionPriceBarcodeGroupMachinery(barcode, groupMachinery());
        }
        EXEC apply();
    }
} CONFIRM IN snapshotMachineryPriceGroup;

// Инкрементная загрузка
GROUP incrementMachineryPriceGroup 'Инкрементная загрузка' : publicGroup;

createMachineryPriceTransactionSnapshot = SESSION DATA BOOLEAN ();

createMachineryPriceTransactionItem = SESSION DATA BOOLEAN (item);
createMachineryPriceTransactionBarcodeGroupMachinery (barcode, groupMachinery) = createMachineryPriceTransactionItem(skuBarcode(barcode)) // если передали параметром
                                                                                 AND inGroupMachineryItem(groupMachinery, skuBarcode(barcode)) // если на эту группу оборудования должна закачиваться
                                                                                 AND activeBarcode(barcode) // если активный штрих-код
                                                                                 AND ledgerPriceBarcodeGroupMachinery(barcode, groupMachinery); // если есть цена розничная

createMachineryPriceTransactionDocument = SESSION DATA priceTransactionDocument();
createMachineryPriceTransactionComment = SESSION DATA STRING[20] ();

createMachineryPriceTransaction 'Создать транзакцию' = ACTION (departmentStore) {
    LOCAL message = STRING[3000] ();
    LOCAL sentSomething = BOOLEAN();
    SET message() <- 'Принято к загрузке в оборудование : \n';

    FOR departmentStoreGroupMachinery(groupMachinery) == departmentStore DO {
        LOCAL inBarcode = BOOLEAN (barcode);
        // todo : не работает
//        SET tempBarcode(barcode) <- NULL;
        IF createMachineryPriceTransactionSnapshot() THEN
            SET inBarcode(barcode) <- createMachineryPriceTransactionBarcodeGroupMachinery(barcode, groupMachinery)
        ELSE
            SET inBarcode(barcode) <- createMachineryPriceTransactionBarcodeGroupMachinery(barcode, groupMachinery)
                                        AND NOT (ledgerPriceBarcodeGroupMachinery(barcode, groupMachinery) == transactionPriceBarcodeGroupMachinery(barcode, groupMachinery)); // если цена изменилась

        LOCAL countBarcode = INTEGER();
        SET countBarcode() <- [GROUP SUM 1 IF inBarcode(barcode)]();
        IF countBarcode() THEN {

            IF groupMachinery IS groupScales THEN
                ADDOBJ scalesPriceTransaction
            ELSE IF groupMachinery IS groupCheck THEN
                ADDOBJ checkPriceTransaction
            ELSE IF groupMachinery IS groupTerminal THEN
                ADDOBJ terminalPriceTransaction
            ELSE
                ADDOBJ cashRegisterPriceTransaction;

            FOR t == addedObject() DO {
                SET groupMachineryMachineryPriceTransaction(t) <- groupMachinery AS groupMachinery;
                SET priceTransactionDocumentMachineryPriceTransaction(t) <- createMachineryPriceTransactionDocument();
                SET commentMachineryPriceTransaction(t) <- createMachineryPriceTransactionComment();
                SET inMachineryPriceTransactionBarcode(t, barcode) <- inBarcode(barcode);
                IF groupMachinery IS groupScales THEN
                    SET nameMachineryPriceTransactionBarcode(t, barcode) AND inMachineryPriceTransactionBarcode(t, barcode) <- titleScalesBarcode(barcode)
                ELSE
                    SET nameMachineryPriceTransactionBarcode(t, barcode) AND inMachineryPriceTransactionBarcode(t, barcode) <- titleCashBarcode(barcode);
                SET priceMachineryPriceTransactionBarcode(t, barcode) AND inMachineryPriceTransactionBarcode(t, barcode) <- ledgerPriceBarcodeGroupMachinery(barcode, groupMachinery);
            }
            SET message() <- [FORMULA STRING[3000] '$1 || $2 || \' - \' || CAST($3 as text) || \' товаров.\'\n']
                             (message(), nameGroupMachinery(groupMachinery), countBarcode());
            SET sentSomething() <- TRUE;
        }
    }

    IF sentSomething() THEN
        MESSAGE message()
    ELSE
        MESSAGE 'Загрузка прайса в оборудование не требуется.';
};

createBalanceMachineryPriceTransaction 'Остатки' = ACTION (departmentStore) NEWSESSION AUTOAPPLY {
    SET createMachineryPriceTransactionItem(item) <- TRUE IF currentBalanceItemLedger(item, departmentStore);
    SET createMachineryPriceTransactionComment() <- 'Инкрементная загрузка остатков';
    EXEC createMachineryPriceTransaction(departmentStore AS departmentStore);
} CONFIRM IN incrementMachineryPriceGroup;

createPriceMachineryPriceTransaction 'Все товары' = ACTION (departmentStore) NEWSESSION AUTOAPPLY {
    SET createMachineryPriceTransactionItem(item) <- TRUE IF currentPriceRetailLedger(item, departmentStore);
    SET createMachineryPriceTransactionComment() <- 'Инкрементная загрузка товаров';
    EXEC createMachineryPriceTransaction(departmentStore AS departmentStore);
} CONFIRM IN incrementMachineryPriceGroup;

META metaCodeDocumentMachineryPriceTransaction (document)

    create###document##MachineryPriceTransaction 'Загрузить в оборудование' = ACTION (document) NEWSESSION AUTOAPPLY {
        SET createMachineryPriceTransactionItem(item) <- TRUE IF quantity###document##DetailItem###document(item, document);
        SET createMachineryPriceTransactionDocument() <- document AS priceTransactionDocument;
        EXEC createMachineryPriceTransaction(departmentStore###document(document));
        SET sentPriceTransactionDocument(document) <- TRUE;
    } TOOLBAR CONFIRM;

    createSnapshot###document##MachineryPriceTransaction 'Перегрузить все позиции' = ACTION (document) NEWSESSION AUTOAPPLY {
        SET createMachineryPriceTransactionSnapshot() <- TRUE;
        SET createMachineryPriceTransactionItem(item) <- TRUE IF quantity###document##DetailItem###document(item, document);
        SET createMachineryPriceTransactionDocument() <- document AS priceTransactionDocument;
        EXEC createMachineryPriceTransaction(departmentStore###document(document));
        SET sentPriceTransactionDocument(document) <- TRUE;
    } SHORTCUT statusEquipmentPriceTransactionDocument CONFIRM;

    showCreateMachineryPriceTransaction###document 'Показывать' (document) = isPosted###document(document) AND NOT sentPriceTransactionDocument(document);
    backgroundCreateMachineryPriceTransaction###document 'Цвет' (document) = IF countProcessPriceTransactionDocument(document) THEN
                                                                                RGB(255,255,128)
                                                                             ELSE
                                                                                RGB(212,255,212) IF showCreateMachineryPriceTransaction###document(document);
END

FORM machineryPriceTransaction 'Загрузка прайса в оборудование'
    OBJECTS t = machineryPriceTransaction FIXED PANEL
    PROPERTIES(t) nameGroupMachineryMachineryPriceTransaction, dateMachineryPriceTransaction, timeMachineryPriceTransaction,
                  snapshotMachineryPriceTransaction, succeededMachineryPriceTransaction, canceledMachineryPriceTransaction

    OBJECTS b = barcode
    PROPERTIES(b) READONLY barcodeEx
    PROPERTIES(t, b)       inMachineryPriceTransactionBarcode, nameMachineryPriceTransactionBarcode, priceMachineryPriceTransactionBarcode
    FILTERS inMachineryPriceTransactionBarcode(t, b)

    EDIT machineryPriceTransaction OBJECT t;
;

FORM machineryPriceTransactions 'Загрузки прайса в оборудование'
    OBJECTS d = departmentStore FIXED PANEL
    PROPERTIES name(d) SELECTOR, createBalanceMachineryPriceTransaction(d), createPriceMachineryPriceTransaction(d), snapshotGroupMachineryDepartmentStore(d)

    OBJECTS t = machineryPriceTransaction
    PROPERTIES(t) READONLY snapshotMachineryPriceTransaction, nameGroupMachineryMachineryPriceTransaction, dateMachineryPriceTransaction, timeMachineryPriceTransaction,
                           descriptionMachineryPriceTransaction, succeededMachineryPriceTransaction, canceledMachineryPriceTransaction,
                           quantityMachineryPriceTransactionErrorMachineryPriceTransaction BACKGROUND quantityMachineryPriceTransactionErrorMachineryPriceTransaction(t),
                           nppsMachineryPriceTransaction FORCE PANEL SHOWIF snapshotMachineryPriceTransaction(t)
    PROPERTIES(t) READONLY nameUserCreated, hostnameComputerCreated
    PROPERTIES(t)          ADDFORM, EDITFORM, delete
    FILTERS departmentStoreMachineryPriceTransaction(t) == d

    OBJECTS b = barcode
    PROPERTIES(b)    barcodeEx
    PROPERTIES(t, b) nameMachineryPriceTransactionBarcode, priceMachineryPriceTransactionBarcode

    FILTERS inMachineryPriceTransactionBarcode(t, b)

    OBJECTS e = machineryPriceTransactionError
    PROPERTIES(e)    dataMachineryPriceTransactionError, dateMachineryPriceTransactionError
    PROPERTIES(e)  FORCE PANEL  errorTraceMachineryPriceTransactionError
    FILTERS machineryPriceTransactionMachineryPriceTransactionError(e) == t
;

DESIGN machineryPriceTransactions FROM DEFAULT {

    main {

        t.box {
            preferredSize = ( -1, 300);
            minimumSize = ( -1, 300);
            maximumSize = ( -1, 300);
        }

        NEW specContainer BEFORE functions.box {
            type = TABBED;
            ADD b.box;
            NEW errorContainer {
               title = 'Сообщения об ошибках';
               ADD e.box;
               PROPERTY(errorTraceMachineryPriceTransactionError(e)) {
                  fillHorizontal = 1;
                  panelLabelAbove = TRUE;
               }
            }
        }
    }
}

FORM terminalDocuments 'Документы ТСД'
    OBJECTS td=terminalDocument, tdd=terminalDocumentDetail
    PROPERTIES(td)  idTerminalDocument, nameTerminalDocumentTypeTerminalDocument, idTerminalHandbookType1TerminalDocument,
                    idTerminalHandbookType2TerminalDocument, titleTerminalDocument, quantityTerminalDocument
    PROPERTIES(td)  ADDFORM, EDITFORM, delete

    PROPERTIES(tdd) numberTerminalDocumentDetail, barcodeTerminalDocumentDetail, nameTerminalDocumentDetail,
    isNewTerminalDocumentDetail, priceTerminalDocumentDetail, quantityTerminalDocumentDetail, sumTerminalDocumentDetail

    FILTERS terminalDocumentTerminalDocumentDetail(tdd) == td
;

isDraftPriceTransactionDocument (document) += isDraftShipment(document);
isDraftPriceTransactionDocument (document) += isDraftInnerArrival(document);
isDraftPriceTransactionDocument (document) += isDraftUserPriceChange(document);
isDraftPriceTransactionDocument (document) += isDraftActOfStudy(document);

descriptionPriceTransactionDocument (document) += descriptionShipment(document);
descriptionPriceTransactionDocument (document) += descriptionInnerArrival(document);
descriptionPriceTransactionDocument (document) += descriptionUserPriceChange(document);
descriptionPriceTransactionDocument (document) += descriptionActOfStudy(document);

//----------------------------------- Печать ценников -------------------------------------------------------

CLASS labelTransaction 'Печать ценников' : historyObject;
TABLE labelTransaction(labelTransaction);

dateLabelTransaction 'Дата' = DATA DATE (labelTransaction);
dateLabelTransaction (transaction) <- currentDate() WHEN ASSIGNED(transaction IS labelTransaction);

timeLabelTransaction 'Время' = DATA TIME (labelTransaction);
timeLabelTransaction (transaction) <- currentTime() WHEN ASSIGNED(transaction IS labelTransaction);

departmentStoreLabelTransaction = DATA departmentStore (labelTransaction);
nameDepartmentStoreLabelTransaction 'Отдел магазина' (transaction) = name(departmentStoreLabelTransaction(transaction));
nameStoreLabelTransaction 'Магазин' (transaction) = name(storeDepartmentStore(departmentStoreLabelTransaction(transaction)));
nameCompanyLabelTransaction 'Компания' (transaction) = nameCompanyDepartmentStore(departmentStoreLabelTransaction(transaction));

labelTypeLabelTransaction = DATA labelType (labelTransaction);
nameLabelTypeLabelTransaction 'Тип ценника' (transaction) = name(labelTypeLabelTransaction(transaction));

CONSTRAINT labelTypeLabelTransaction(transaction) AND NOT inLabelTypeDepartmentStore(labelTypeLabelTransaction(transaction), departmentStoreLabelTransaction(transaction))
           CHECKED BY labelTypeLabelTransaction MESSAGE 'Тип ценника запрещен для выбранного подразделения';

fileTemplateLabelTransaction 'Файл шаблона' (transaction) = fileTemplateLabelType(labelTypeLabelTransaction(transaction));

printedPriceTransactionDocument 'Распечатан' = DATA BOOLEAN (priceTransactionDocument);
printedPriceTransactionDocument(document) <- NULL WHEN ASSIGNED(isDraftPriceTransactionDocument(document));

priceTransactionDocumentLabelTransaction = DATA priceTransactionDocument (labelTransaction);
descriptionLabelTransaction 'Основание загрузки' (transaction) =
    descriptionPriceTransactionDocument(priceTransactionDocumentLabelTransaction(transaction));

statusPrintPriceTransactionDocument 'Статус печати ценника' (document) =
    IF printedPriceTransactionDocument(document) THEN 'Распечатан' AND document IS priceTransactionDocument
                                                 ELSE 'Не распечатан' AND document IS priceTransactionDocument;

TABLE labelTransactionBarcode(labelTransaction, barcode);

inLabelTransactionBarcode 'Вкл' (labelTransaction, barcode) = DATA BOOLEAN (labelTransaction, barcode);

quantityLabelTransactionBarcode 'Кол-во' (labelTransaction, barcode) = DATA INTEGER (labelTransaction, barcode);
nameLabelTransactionBarcode 'Наименование' = DATA STRING[255] (labelTransaction, barcode);
priceLabelTransactionBarcode 'Цена' = DATA NUMERIC[14,2] (labelTransaction, barcode);
shortNameUnitOfMeasureLabelTransactionBarcode 'Ед. изм.' =  DATA STRING[5] (labelTransaction, barcode);
countryLabelTransactionBarcode 'Страна'  = DATA STRING[255] (labelTransaction, barcode);
manufacturerLabelTransactionBarcode 'Производитель'  = DATA STRING[255] (labelTransaction, barcode);

FORM printLabelTransaction 'Печать ценников' PRINT
    OBJECTS l = labelTransaction REPORTFILE fileTemplateLabelTransaction(l) FIXED PANEL
    PROPERTIES(l) READONLY nameLabelTypeLabelTransaction, nameDepartmentStoreLabelTransaction, descriptionLabelTransaction,
                  dateLabelTransaction, timeLabelTransaction, nameStoreLabelTransaction, nameCompanyLabelTransaction

    OBJECTS b = barcode
    PROPERTIES(l, b) READONLY inLabelTransactionBarcode
    PROPERTIES(b)    READONLY barcodeEx
    PROPERTIES(l, b) READONLY quantityLabelTransactionBarcode, nameLabelTransactionBarcode, priceLabelTransactionBarcode,
                     shortNameUnitOfMeasureLabelTransactionBarcode, countryLabelTransactionBarcode, manufacturerLabelTransactionBarcode
    FILTERS inLabelTransactionBarcode(l, b)
;

FORM customLabelTransaction 'Печать ценников'
    OBJECTS l = labelTransaction FIXED PANEL
    PROPERTIES(l) nameLabelTypeLabelTransaction, nameDepartmentStoreLabelTransaction, descriptionLabelTransaction, dateLabelTransaction, timeLabelTransaction,
                  nameStoreLabelTransaction, nameCompanyLabelTransaction

    OBJECTS b = barcode
    PROPERTIES(l, b)          inLabelTransactionBarcode
    PROPERTIES(b)    READONLY barcodeEx
    PROPERTIES(l, b)          quantityLabelTransactionBarcode, nameLabelTransactionBarcode, priceLabelTransactionBarcode,
                              shortNameUnitOfMeasureLabelTransactionBarcode, countryLabelTransactionBarcode, manufacturerLabelTransactionBarcode
    FILTERS inLabelTransactionBarcode(l, b)
;

FORM labelTransactions 'Печать ценников'
    OBJECTS d = departmentStore FIXED PANEL
    PROPERTIES name(d) SELECTOR

    OBJECTS l = labelTransaction
    PROPERTIES(l) READONLY nameLabelTypeLabelTransaction, descriptionLabelTransaction, dateLabelTransaction, timeLabelTransaction
    PROPERTIES(l) READONLY nameUserCreated, hostnameComputerCreated
    FILTERS departmentStoreLabelTransaction(l) == d

    OBJECTS b = barcode
    PROPERTIES(l, b) READONLY inLabelTransactionBarcode
    PROPERTIES(b)    READONLY barcodeEx
    PROPERTIES(l, b) READONLY quantityLabelTransactionBarcode, nameLabelTransactionBarcode, priceLabelTransactionBarcode
    FILTERS inLabelTransactionBarcode(l, b)
;

createLabelTransactionItem = SESSION DATA BOOLEAN (item);
createLabelTransactionDocument = SESSION DATA priceTransactionDocument();
createLabelTransactionSnapshot = SESSION DATA BOOLEAN();

createLabelTransactionFillParams 'Заполнить параметры' = ACTION (labelTransaction, departmentStore) {

    SET departmentStoreLabelTransaction(labelTransaction) <- departmentStore AS departmentStore;
    SET priceTransactionDocumentLabelTransaction(labelTransaction) <- createLabelTransactionDocument();

    SET nameLabelTransactionBarcode(labelTransaction, barcode) AND inLabelTransactionBarcode(labelTransaction, barcode) <- nameSkuBarcode(barcode);
    SET priceLabelTransactionBarcode(labelTransaction, barcode) AND inLabelTransactionBarcode(labelTransaction, barcode) <- ledgerPriceBarcodeDepartmentStore(barcode, departmentStore);
    SET shortNameUnitOfMeasureLabelTransactionBarcode(labelTransaction, barcode) AND inLabelTransactionBarcode(labelTransaction, barcode) <- shortNameUnitOfMeasureItem(skuBarcode(barcode));
    SET countryLabelTransactionBarcode(labelTransaction, barcode) AND inLabelTransactionBarcode(labelTransaction, barcode) <- countryItem(skuBarcode(barcode));
    SET manufacturerLabelTransactionBarcode(labelTransaction, barcode) AND inLabelTransactionBarcode(labelTransaction, barcode) <- manufacturerItem(skuBarcode(barcode));
}

createLabelTransaction 'Распечатать ценники' = ACTION (departmentStore, date) {

    LOCAL inBarcode = BOOLEAN (barcode);
    SET inBarcode(barcode) <- createLabelTransactionItem(skuBarcode(barcode)) // если передали параметром
                                                         AND activeBarcode(barcode) // если активный штрих-код
                                                         AND ledgerPriceBarcodeDepartmentStore(barcode, departmentStore);

    IF createLabelTransactionSnapshot() THEN {
        ADDOBJ labelTransaction;
        FOR t == addedObject() DO {
            SET inLabelTransactionBarcode(t, barcode) <- inBarcode(barcode);
            SET quantityLabelTransactionBarcode(t, barcode) AND inLabelTransactionBarcode(t, barcode) <- 1;
            EXEC createLabelTransactionFillParams(t AS labelTransaction, departmentStore AS departmentStore);
            FORM customLabelTransaction OBJECTS l = t AS labelTransaction MODAL;
            IF formResult() == formResult.ok THEN {
                FORM printLabelTransaction OBJECTS l = t AS labelTransaction;
            }
        }
    } ELSE {
        // бежим по всем типам ценников из управленческих параметров
        FOR ([GROUP SUM 1 AND inBarcode(barcode) BY labelBarcodeDepartmentVal(barcode, departmentStore, date), departmentStore, date](l, departmentStore, date)) DO {
            // для каждого создаем по операции печати ценников
            ADDOBJ labelTransaction;
            FOR t == addedObject() DO {
                SET inLabelTransactionBarcode(t, barcode) <- inBarcode(barcode) AND labelBarcodeDepartmentVal(barcode, departmentStore, date) == l;
                SET quantityLabelTransactionBarcode(t, barcode) AND inLabelTransactionBarcode(t, barcode) <- multiplierBarcodeDepartmentValOver(barcode, departmentStore, date);
                SET labelTypeLabelTransaction(t) <- l AS labelType;
                EXEC createLabelTransactionFillParams(t AS labelTransaction, departmentStore AS departmentStore);
                // вызываем печатную форму для каждого из них
                FORM printLabelTransaction OBJECTS l = t AS labelTransaction;
            }
        }
    }
};

META metaCodeDocumentLabelTransaction (document)

    create###document##LabelTransaction 'Печать ценников' = ACTION (document) NEWSESSION AUTOAPPLY {
        SET createLabelTransactionItem(item) <- TRUE IF quantity###document##DetailItem###document(item, document);
        SET createLabelTransactionDocument() <- document AS priceTransactionDocument;
        EXEC createLabelTransaction(departmentStore###document(document), date###document(document));
        SET printedPriceTransactionDocument(document) <- TRUE;
    } TOOLBAR CONFIRM;

    createSnapshot###document##LabelTransaction 'Перепечатать ценники' = ACTION (document) NEWSESSION AUTOAPPLY {
        SET createLabelTransactionItem(item) <- TRUE IF quantity###document##DetailItem###document(item, document);
        SET createLabelTransactionDocument() <- document AS priceTransactionDocument;
        SET createLabelTransactionSnapshot() <- TRUE;
        EXEC createLabelTransaction(departmentStore###document(document), date###document(document));
    } SHORTCUT statusPrintPriceTransactionDocument CONFIRM;

    showPrintLabelTransaction###document 'Показывать' (document) = isPosted###document(document) AND NOT printedPriceTransactionDocument(document);
    backgroundPrintLabelTransaction###document 'Цвет' (document) = RGB(212,255,212) IF showPrintLabelTransaction###document(document);
END

// ---------------------------- Атрибуты для накладной --------------------------------- //
// для накладной (шапка и хвост)
carConsignment 'Автомобиль' (consignment) = UNION EXCLUSIVE carStatement (consignment),
                                                            carReturnSupplier (consignment),
                                                            carInnerFlow (consignment) IN carConsignmentGroup;

trailerConsignment 'Прицеп' (consignment) = UNION EXCLUSIVE trailerStatement (consignment),
                                                            trailerReturnSupplier (consignment),
                                                            trailerInnerFlow (consignment) IN carConsignmentGroup;

ownerCarConsignment 'Владелец автомобиля' (consignment) = UNION EXCLUSIVE ownerCarStatement (consignment),
                                                                          ownerCarReturnSupplier (consignment),
                                                                          ownerCarInnerFlow (consignment) IN carConsignmentGroup;

driverCarConsignment 'Водитель' (consignment) = UNION EXCLUSIVE driverCarStatement (consignment),
                                                                driverCarReturnSupplier (consignment),
                                                                driverCarInnerFlow (consignment) IN carConsignmentGroup;

waybillConsignment 'Путевой лист' (consignment) = UNION EXCLUSIVE waybillStatement (consignment),
                                                                  waybillReturnSupplier (consignment),
                                                                  waybillInnerFlow (consignment) IN carConsignmentGroup;

transportPayerConsignment 'Заказчик перевозки (ИД)' (consignment) = UNION EXCLUSIVE transportPayerStatement (consignment),
                                                                                    transportPayerReturnSupplier (consignment),
                                                                                    transportPayerInnerFlow (consignment);

departmentStoreConsignment 'Отдел (ИД)' (consignment) = UNION EXCLUSIVE departmentStoreStatement (consignment),
                                                                        departmentStoreReturnSupplier (consignment),
                                                                        departmentStoreInnerFlow (consignment);

recipientConsignment 'Получатель (ИД)' (consignment) = UNION EXCLUSIVE   customerStatement(consignment),
                                                                         supplierReturnSupplier(consignment),
                                                                         companyDepartmentStore(recipientDepartmentInnerFlow(consignment));

senderConsignment 'Отправитель ИД' (consignment) = companyDepartmentStore(departmentStoreConsignment(consignment));

UNPSenderConsignment 'УНП отправителя' (consignment) = UNPLegalEntity(senderConsignment(consignment));
UNPRecipientConsignment 'УНП получателя' (consignment) = UNPLegalEntity(recipientConsignment(consignment));
UNPTransportPayerConsignment 'УНП заказчика перевозки' (consignment) = UNPLegalEntity(transportPayerConsignment(consignment));

dateConsignment 'Дата' (consignment) = UNION EXCLUSIVE dateStatement (consignment),
                                                       dateReturnSupplier (consignment),
                                                       dateInnerFlow (consignment);

addressSenderConsignment 'Юридический адрес отправителя' (consignment) = addressLegalEntityVal(senderConsignment(consignment), dateConsignment(consignment));
addressRecipientConsignment 'Юридический адрес получателя' (consignment) = addressLegalEntityVal(recipientConsignment(consignment), dateConsignment(consignment));
addressTransportPayerConsignment 'Юридический адрес заказчика перевозки' (consignment) =
    addressLegalEntityVal(transportPayerConsignment(consignment), dateConsignment(consignment));

fullNameSenderConsignment 'Наименование для накладных отправителя' (consignment) = fullNameLegalEntity(senderConsignment(consignment));
fullNameRecipientConsignment 'Наименование для накладных получателя' (consignment) = fullNameLegalEntity(recipientConsignment(consignment));
fullNameTransportPayerConsignment 'Наименование для накладных заказчика перевозки' (consignment) =
    fullNameLegalEntity(transportPayerConsignment(consignment));

nameTransportPayerConsignment 'Заказчик перевозки ' (consignment) =
    [FORMULA STRING[100] 'CAST($1 AS TEXT) ||  \' , \' || CAST($2 AS TEXT)']
    (name(transportPayerConsignment(consignment)), UNPLegalEntity(transportPayerConsignment(consignment))) IN carConsignmentGroup;

dataLoadingPlaceConsignment 'Пункт погрузки' (consignment) = UNION EXCLUSIVE dataLoadingPlaceStatement (consignment),
                                                                             dataLoadingPlaceReturnSupplier (consignment),
                                                                             dataLoadingPlaceInnerFlow (consignment);

loadingPlaceConsignment 'Пункт погрузки' (consignment) = UNION EXCLUSIVE loadingPlaceStatement (consignment),
                                                                         loadingPlaceReturnSupplier (consignment),
                                                                         loadingPlaceInnerFlow (consignment) IN carConsignmentGroup;

dataUnloadingPlaceConsignment 'Пункт разгрузки' (consignment) = UNION EXCLUSIVE dataUnloadingPlaceStatement (consignment),
                                                                                dataUnloadingPlaceReturnSupplier (consignment),
                                                                                dataUnloadingPlaceInnerFlow (consignment);

unloadingPlaceConsignment 'Пункт разгрузки' (consignment) = UNION EXCLUSIVE unloadingPlaceStatement (consignment),
                                                                            unloadingPlaceReturnSupplier (consignment),
                                                                            unloadingPlaceInnerFlow (consignment) IN carConsignmentGroup;

readdressingConsignment 'Переадресовка' (consignment) = UNION EXCLUSIVE readdressingStatement (consignment),
                                                                        readdressingReturnSupplier (consignment),
                                                                        readdressingInnerFlow (consignment) IN carConsignmentGroup;

issuanceAllowedConsignment 'Отпуск разрешил (ИД)' (consignment) = UNION EXCLUSIVE issuanceAllowedStatement(consignment),
                                                                             issuanceAllowedReturnSupplier(consignment),
                                                                             issuanceAllowedInnerFlow(consignment);

commonNameIssuanceAllowedConsignment 'Отпуск разрешил' (consignment) = commonName(issuanceAllowedConsignment(consignment)) IN issuanceConsignmentGroup;

issuanceExecutedConsignment 'Отпуск произвел (ИД)' (consignment) = UNION EXCLUSIVE issuanceExecutedStatement(consignment),
                                                                              issuanceExecutedReturnSupplier(consignment),
                                                                              issuanceExecutedInnerFlow(consignment);

commonNameIssuanceExecutedConsignment 'Отпуск произвел' (consignment) = commonName(issuanceExecutedConsignment(consignment)) IN issuanceConsignmentGroup;

shipmentBaseConsignment 'Основание отпуска' (consignment) = UNION EXCLUSIVE shipmentBaseStatement (consignment),
                                                                            shipmentBaseReturnSupplier (consignment),
                                                                            shipmentBaseInnerFlow (consignment) IN issuanceConsignmentGroup;

forwarderConsignment 'Товар к перевозке принял (экспедитор), должность, фамилия, инициалы' (consignment) = UNION EXCLUSIVE forwarderStatement(consignment),
                                                                                             forwarderReturnSupplier(consignment),
                                                                                             forwarderInnerFlow(consignment) IN issuanceConsignmentGroup;

warrantConsignment 'По доверенности (номер, дата)' (consignment) = UNION EXCLUSIVE warrantStatement (consignment),
                                                                                   warrantReturnSupplier (consignment),
                                                                                   warrantInnerFlow (consignment) IN issuanceConsignmentGroup;

warrantHolderConsignment 'По доверенности выданной (наименование орг-ии)' (consignment) = UNION EXCLUSIVE warrantHolderStatement (consignment),
                                                                                                          warrantHolderReturnSupplier (consignment),
                                                                                                          warrantHolderInnerFlow (consignment) IN issuanceConsignmentGroup;

goodsAcceptedConsignment 'Принял грузополучатель' (consignment) = UNION EXCLUSIVE goodsAcceptedStatement (consignment),
                                                                                  goodsAcceptedReturnSupplier (consignment),
                                                                                  goodsAcceptedInnerFlow (consignment) IN issuanceConsignmentGroup;

loadingExecuterConsignment 'Исполнитель ПРР (ИД)' (consignment) = UNION EXCLUSIVE loadingExecuterStatement(consignment),
                                                                             loadingExecuterReturnSupplier(consignment),
                                                                             loadingExecuterInnerFlow(consignment);

commonNameLoadingExecuterConsignment 'Исполнитель ПРР' (consignment) = commonName(loadingExecuterConsignment(consignment)) IN loadingConsignmentGroup;

wayOfLoadingConsignment 'Способ ПРР (ИД)' (consignment) = UNION EXCLUSIVE wayOfLoadingStatement(consignment),
                                                                          wayOfLoadingReturnSupplier(consignment),
                                                                          wayOfLoadingInnerFlow(consignment);

nameWayOfLoadingConsignment 'Способ ПРР' (consignment) = name(wayOfLoadingConsignment(consignment)) IN loadingConsignmentGroup;

codeLoadingConsignment 'Код ПРР' (consignment) = UNION EXCLUSIVE codeLoadingStatement (consignment),
                                                                 codeLoadingReturnSupplier (consignment),
                                                                 codeLoadingInnerFlow (consignment) IN loadingConsignmentGroup;

arrivalTimeConsignment 'Время прибытия' (consignment) = UNION EXCLUSIVE arrivalTimeStatement (consignment),
                                                                        arrivalTimeReturnSupplier (consignment),
                                                                        arrivalTimeInnerFlow (consignment) IN carConsignmentGroup;

departureTimeConsignment 'Время убытия' (consignment) = UNION EXCLUSIVE departureTimeStatement (consignment),
                                                                        departureTimeReturnSupplier (consignment),
                                                                        departureTimeInnerFlow (consignment) IN carConsignmentGroup;

downtimeConsignment 'Время простоя' (consignment) = UNION EXCLUSIVE downtimeStatement (consignment),
                                                                    downtimeReturnSupplier (consignment),
                                                                    downtimeInnerFlow (consignment) IN carConsignmentGroup;

raceQuantityConsignment 'Количество ездок' (consignment) = UNION EXCLUSIVE raceQuantityStatement(consignment),
                                                                           raceQuantityReturnSupplier(consignment),
                                                                           raceQuantityInnerFlow(consignment) IN carConsignmentGroup;

quantityConsignmentDetailsConsignment 'Количество строк' (consignment) = UNION EXCLUSIVE countStatementDetailStatement(consignment),
                                                                                         countReturnSupplierDetailReturnSupplier(consignment),
                                                                                         countInnerFlowDetailInnerFlow(consignment) IN carConsignmentGroup;


// для накладной (спецификация)
nameItemConsignmentDetail 'Наименование товара' (consignmentDetail) = UNION EXCLUSIVE nameAttributeItem(itemStatementDetail(consignmentDetail)),
                                                                                      nameAttributeItem(itemReturnSupplierDetail(consignmentDetail)),
                                                                                      nameAttributeItem(itemInnerFlowDetail(consignmentDetail));

unitOfMeasureConsignmentDetail 'Единица измерения (ИД)' (consignmentDetail) = UNION EXCLUSIVE unitOfMeasureItem(itemStatementDetail(consignmentDetail)),
                                                                                         unitOfMeasureItem(itemReturnSupplierDetail(consignmentDetail)),
                                                                                         unitOfMeasureItem(itemInnerFlowDetail(consignmentDetail));

shortNameConsignmentDetail 'Единица измерения' (consignmentDetail) = shortName(unitOfMeasureConsignmentDetail(consignmentDetail));

quantityConsignmentDetail 'Количество' (consignmentDetail) = UNION EXCLUSIVE quantityStatementDetail(consignmentDetail),
                                                                             quantityReturnSupplierDetail(consignmentDetail),
                                                                             quantityInnerFlowDetail(consignmentDetail);

sumQuantityConsignment 'Общее количество' (consignment) = UNION EXCLUSIVE quantityStatementDetailStatement(consignment),
                                                                          quantityReturnSupplierDetailReturnSupplier(consignment),
                                                                          quantityInnerFlowDetailInnerFlow(consignment) IN sumConsignmentGroup;

priceConsignmentDetail 'Цена' (consignmentDetail) = UNION EXCLUSIVE retailPriceStatementDetail (consignmentDetail),
                                                                    supplierPriceReturnSupplierDetail (consignmentDetail),
                                                                    retailPriceInnerFlowDetail(consignmentDetail);

costConsignmentDetail 'Стоимость' (consignmentDetail) = UNION EXCLUSIVE retailSumStatementDetail (consignmentDetail),
                                                                        supplierSumReturnSupplierDetail (consignmentDetail),
                                                                        retailSumInnerFlowDetail (consignmentDetail);

sumCostConsignmentDetail 'Общая стоимость' (consignment) = UNION EXCLUSIVE retailSumStatementDetailStatement(consignment),
                                                                           supplierSumReturnSupplierDetailReturnSupplier(consignment),
                                                                           retailSumInnerFlowDetailInnerFlow(consignment) IN sumConsignmentGroup;

vatConsignmentDetail 'Ставка НДС' (consignmentDetail) = UNION EXCLUSIVE dataCalcRangeStatementDetail (consignmentDetail),
                                                                               dataSupplierRangeReturnSupplierDetail (consignmentDetail),
                                                                               dataRetailRangeInnerFlowDetail (consignmentDetail);

sumVATConsignmentDetail 'Сумма НДС' (consignmentDetail) = UNION EXCLUSIVE calcVATSumStatementDetail (consignmentDetail),
                                                                          supplierVATISumReturnSupplierDetail (consignmentDetail),
                                                                          retailVATISumInnerFlowDetail (consignmentDetail);

totalSumVATConsignmentDetail 'Общая сумма НДС' (consignment) = UNION EXCLUSIVE calcVATSumStatementDetailStatement (consignment),
                                                                               invoiceVATSumReturnSupplierDetailReturnSupplier (consignment),
                                                                               retailVATSumInnerFlowDetailInnerFlow (consignment) IN sumConsignmentGroup;


costWithVATConsignmentDetail 'Сумма с НДС' (consignmentDetail) = UNION EXCLUSIVE retailSumStatementDetail (consignmentDetail),
                                                                                 invoiceISumReturnSupplierDetail (consignmentDetail),
                                                                                 retailSumInnerFlowDetail (consignmentDetail);

costWithVATConsignment 'Сумма с НДС' (consignment) = UNION EXCLUSIVE retailSumStatementDetailStatement (consignment),
                                                                     invoiceSumReturnSupplierDetailReturnSupplier (consignment),
                                                                     retailSumInnerFlowDetailInnerFlow (consignment) IN sumConsignmentGroup;


packQuantityConsignmentDetail 'Количество грузовых мест' (consignmentDetail) = UNION EXCLUSIVE packQuantityStatementDetail(consignmentDetail),
                                                                                               packQuantityReturnSupplierDetail(consignmentDetail),
                                                                                               packQuantityInnerFlowDetail(consignmentDetail);

sumPackQuantityConsignment 'Общее количество грузовых мест' (consignment) = UNION EXCLUSIVE sumPackQuantityStatement(consignment),
                                                                                            sumPackQuantityReturnSupplier(consignment),
                                                                                            sumPackQuantityInnerFlow(consignment) IN sumConsignmentGroup;

grossWeightConsignmentDetail 'Масса груза, т.' (consignmentDetail) = UNION EXCLUSIVE grossWeightStatementDetail(consignmentDetail),
                                                                                     grossWeightReturnSupplierDetail(consignmentDetail),
                                                                                     grossWeightInnerFlowDetail(consignmentDetail);

sumGrossWeightConsignmentDetail 'Общая масса груза, т.' (consignment) = UNION EXCLUSIVE sumGrossWeightStatement(consignment),
                                                                                        sumGrossWeightReturnSupplier(consignment),
                                                                                        sumGrossWeightInnerFlow(consignment) IN sumConsignmentGroup;

sumKgGrossWeightConsignment(consignment) = sumGrossWeightConsignmentDetail(consignment)*1000;

consignmentConsignmentDetail (consignmentDetail) = UNION EXCLUSIVE statementStatementDetail(consignmentDetail),
                                                                   returnSupplierReturnSupplierDetail(consignmentDetail),
                                                                   innerFlowInnerFlowDetail(consignmentDetail);

isReturnSupplierConsignment (consignment) = consignment IS returnSupplier;

// ---------------------------- Формы для накладных --------------------------------- //


META metaCodeConsignmentTwo(prop, caption)

    FORM prop caption PRINT
        OBJECTS c=consignment FIXED PANEL

        PROPERTIES (c) dateConsignment, shipmentBaseConsignment, commonNameIssuanceAllowedConsignment, commonNameIssuanceExecutedConsignment,
                       forwarderConsignment, warrantConsignment, warrantHolderConsignment, goodsAcceptedConsignment,
                       sumQuantityConsignment, sumCostConsignmentDetail, totalSumVATConsignmentDetail, costWithVATConsignment, UNPRecipientConsignment,
                       UNPSenderConsignment, addressSenderConsignment, addressRecipientConsignment, fullNameSenderConsignment,
                       fullNameRecipientConsignment, numberObject, seriesObject, quantityConsignmentDetailsConsignment,
                       isReturnSupplierConsignment

        OBJECTS d=consignmentDetail

        PROPERTIES(d) nameItemConsignmentDetail, shortNameConsignmentDetail, quantityConsignmentDetail, priceConsignmentDetail,
                      costConsignmentDetail, vatConsignmentDetail, sumVATConsignmentDetail, costWithVATConsignmentDetail,
                      noteInnerFlowDetail, nameWareReturnSupplierDetail, warePriceReturnSupplierDetail, wareSumReturnSupplierDetail,
                      dataWareRangeReturnSupplierDetail, wareVATSumReturnSupplierDetail, wareSupplierPriceReturnSupplierDetail,
                      wareSupplierSumReturnSupplierDetail

        FILTERS consignmentConsignmentDetail(d) == c
    ;
    toPrint###prop caption (consignment) = ACTION FORM prop OBJECTS c IMAGE 'print.png' IN printGroup CONFIRM;

END

@metaCodeConsignmentTwo(consignmentTwoVertical, 'ТН-2, вертикальная');
@metaCodeConsignmentTwo(consignmentTwoHorizontal, 'ТН-2, горизонтальная');
@metaCodeConsignmentTwo(consignmentTwoAttach, 'Приложение к ТН-2');

META metaCodeTransportConsignment(prop, caption)
    FORM prop caption PRINT
        OBJECTS c=consignment FIXED PANEL

        PROPERTIES (c) dateConsignment, UNPRecipientConsignment, UNPSenderConsignment, addressSenderConsignment, addressRecipientConsignment, fullNameSenderConsignment,
                       fullNameRecipientConsignment, carConsignment, ownerCarConsignment, trailerConsignment, driverCarConsignment, waybillConsignment,
                       nameTransportPayerConsignment, shipmentBaseConsignment, loadingPlaceConsignment, unloadingPlaceConsignment,
                       readdressingConsignment, commonNameIssuanceAllowedConsignment, commonNameIssuanceExecutedConsignment,
                       forwarderConsignment, warrantConsignment, warrantHolderConsignment, goodsAcceptedConsignment,
                       commonNameLoadingExecuterConsignment, nameWayOfLoadingConsignment, codeLoadingConsignment,
                       arrivalTimeConsignment, departureTimeConsignment, downtimeConsignment, raceQuantityConsignment,
                       sumQuantityConsignment, sumPackQuantityConsignment, sumGrossWeightConsignmentDetail, sumKgGrossWeightConsignment,
                       sumCostConsignmentDetail, totalSumVATConsignmentDetail, costWithVATConsignment, UNPRecipientConsignment, UNPSenderConsignment,
                       addressSenderConsignment, addressRecipientConsignment, fullNameSenderConsignment, fullNameRecipientConsignment,
                       quantityConsignmentDetailsConsignment, wareSumReturnSupplierDetailReturnSupplier, supplierSumReturnSupplierDetailReturnSupplier,
                       seriesObject, numberObject, isReturnSupplierConsignment

        OBJECTS d=consignmentDetail

        PROPERTIES(d) nameItemConsignmentDetail, shortNameConsignmentDetail, quantityConsignmentDetail, priceConsignmentDetail,
                      costConsignmentDetail, vatConsignmentDetail, sumVATConsignmentDetail, costWithVATConsignmentDetail,
                      packQuantityConsignmentDetail, grossWeightConsignmentDetail, noteInnerFlowDetail,
                      nameWareReturnSupplierDetail, warePriceReturnSupplierDetail, dataWareRangeReturnSupplierDetail,
                      wareSupplierPriceReturnSupplierDetail, wareSumReturnSupplierDetail, wareSupplierSumReturnSupplierDetail,
                      wareVATSumReturnSupplierDetail, wareSumReturnSupplierDetail

        FILTERS consignmentConsignmentDetail(d) == c
    ;
    toPrint###prop caption (consignment) = ACTION FORM prop OBJECTS c IMAGE 'print.png' IN printGroup CONFIRM;

END

@metaCodeTransportConsignment(transportConsignmentVerticalA, 'ТТН-1, вертикальная (сторона А)');
@metaCodeTransportConsignment(transportConsignmentHorizontalA, 'ТТН-1, горизонтальная (сторона А)');
@metaCodeTransportConsignment(transportConsignmentVerticalB, 'ТТН-1, вертикальная (сторона Б)');
@metaCodeTransportConsignment(transportConsignmentHorizontalB, 'ТТН-1, горизонтальная (сторона Б)');
@metaCodeTransportConsignment(transportConsignmentAttach, 'Приложение к ТТН-1');


//----------------------------------- Формы поступления товара -------------------------------------------------------
@metaCodeInputMultipleItems(shipment);
@metaCodeDocumentMachineryPriceTransaction(shipment);
@metaCodeDocumentLabelTransaction(shipment);

toShowPriceImporterShipment 'Есть оптовая надбавка' (shipment) = DATA BOOLEAN (shipment) IN documentPrmGroup;

quantityMarkupDetailsShipment 'Количество строк с оптовой надбавкой' (shipment) = GROUP SUM 1
    IF supplierMarkupShipmentDetail(shipmentDetail) BY shipmentShipmentDetail(shipmentDetail);

quantityMarkupDetailsShipment(shipment) => toShowPriceImporterShipment(shipment) RESOLVE FALSE;

toShowWareShipment 'Есть стеклопосуда' (shipment) = DATA BOOLEAN (shipment) IN documentPrmGroup;
toShowPapersShipment 'Документы качества' (shipment) = DATA BOOLEAN (shipment) IN documentPrmGroup;

quantityWareDetailsShipment 'Количество строк с посудой' (shipment) = GROUP SUM 1
    IF wareShipmentDetail(shipmentDetail) BY shipmentShipmentDetail(shipmentDetail);

quantityWareDetailsShipment(shipment) => toShowWareShipment(shipment) RESOLVE FALSE;

nameFormedManShipment 'Цены сформировал' (shipment) = nameFormedManCommittee(registerCommitteeShipment(shipment));
nameCheckedManShipment 'Реестр проверил' (shipment) = nameCheckedManCommittee(registerCommitteeShipment(shipment));
nameLabeledManShipment 'Товар промаркировал' (shipment) = nameLabeledManCommittee(registerCommitteeShipment(shipment));
nameAccountantManShipment 'Бухгалтер' (shipment) = nameAccountantManCommittee(registerCommitteeShipment(shipment));
nameHeadManShipment 'Зав. магазином' (shipment) = nameHeadManCommittee(registerCommitteeShipment(shipment));

FORM pricesRegister 'Реестр цен' PRINT
    OBJECTS s=shipment FIXED PANEL
    PROPERTIES (s)  SELECTOR numberObject, objectClassName, dateShipment, nameDepartmentStoreShipment,
                    numberContractShipment, dateContractShipment,  nameSupplierShipment, consigneeShipment,
                    quantityShipmentDetailShipment, supplierSumShipmentDetailShipment, supplierVATISumShipmentDetailShipment,
                    wareSumShipmentDetailShipment, wareVATSumShipmentDetailShipment, invoiceSumShipmentDetailShipment, markupSumShipmentDetailShipment,
                    retailVATSumShipmentDetailShipment, retailSumShipmentDetailShipment, nameRegisterCommitteeShipment,
                    nameFormedManShipment, nameCheckedManShipment, nameLabeledManShipment, nameAccountantManShipment,
                    nameHeadManShipment

    OBJECTS d=shipmentDetail
    PROPERTIES (d)  indexShipmentDetail, barcodeExSkuShipmentDetail, nameAttributeItemShipmentDetail, shortNameUnitOfMeasureItemShipmentDetail, quantityShipmentDetail,
                    importerPriceShipmentDetail, supplierSumShipmentDetail, supplierMarkupShipmentDetail, supplierVATISumShipmentDetail, dataSupplierRangeShipmentDetail,
                    wareSumShipmentDetail, warePriceShipmentDetail, wareVATSumShipmentDetail, dataWareRangeShipmentDetail,
                    invoiceSumShipmentDetail, importerMarkupShipmentDetail, markupSumShipmentDetail, dataRetailRangeShipmentDetail,
                    retailVATSumShipmentDetail, retailPriceShipmentDetail, retailSumShipmentDetail

    FILTERS inShipmentShipmentDetail(s, d)
;

// --------------------------- Формы списания ---------------------------------
companyWriteOff (writeOff) = companyDepartmentStore(departmentStoreWriteOff(writeOff));
nameCompanyWriteOff 'Компания' (writeOff) = name(companyWriteOff(writeOff));
nameStoreWriteOff 'Магазин' (writeOff) = nameStoreDepartmentStore(departmentStoreWriteOff(writeOff));
addressLegalEntityWriteOff 'Адрес' (writeOff) = addressLegalEntityVal(companyWriteOff(writeOff), dateWriteOff(writeOff));
UNPLegalEntityWriteOff 'УНП' (writeOff) = UNPLegalEntity(companyWriteOff(writeOff));

wastageCommitteeWriteOff (writeOff) = DATA wastageCommittee (writeOff) IN idGroup;
nameWastageCommitteeWriteOff 'Комиссия для списания' (writeOff) = name(wastageCommitteeWriteOff(writeOff)) IN documentPrmGroup;
wastageCommitteeWriteOff(writeOff) <- wastageCommitteeDepartmentStore(departmentStoreWriteOff(writeOff))
    WHEN ASSIGNED(writeOff IS writeOff);

inWriteOffEmployee (writeOff, employee) = inCommitteeEmployee(wastageCommitteeWriteOff(writeOff), employee);
nameOfficerEmployeeWriteOff 'Члены комиссии' (writeOff) = nameOfficerEmployeeCommittee(wastageCommitteeWriteOff(writeOff)) MINCHARWIDTH 50 PREFCHARWIDTH 50;

FORM writeOffPrint 'Списание' PRINT
    OBJECTS w=writeOff FIXED PANEL
    PROPERTIES (w)  SELECTOR numberObject, seriesObject, nameDepartmentStoreWriteOff,
                   dateWriteOff, timeWriteOff, nameReasonOffWriteOff, noteWriteOff, quantityWriteOffDetailWriteOff, accountSumWriteOffDetailWriteOff,
                   nameCompanyWriteOff, nameStoreWriteOff, addressLegalEntityWriteOff, UNPLegalEntityWriteOff, nameWastageCommitteeWriteOff,
                   nameOfficerEmployeeWriteOff, wastageCommitteeWriteOff

    OBJECTS d=writeOffDetail
    PROPERTIES (d) READONLY indexWriteOffDetail, barcodeExSkuWriteOffDetail, nameAttributeItemWriteOffDetail, shortNameUnitOfMeasureItemWriteOffDetail,
                   quantityWriteOffDetail, accountPriceWriteOffDetail, accountSumWriteOffDetail, ADDOBJ, delete

    PROPERTIES FORCE PANEL READONLY articleItemWriteOffDetail(d), nameCountryItemWriteOffDetail(d), retailPriceWriteOffDetail(d),
                                    balanceDepartmentStoreItemWriteOff(d)

    OBJECTS e=employee

    PROPERTIES(e) SELECTOR   commonName, nameOfficerEmployee

    FILTERS inWriteOffWriteOffDetail(w, d),
            inWriteOffEmployee(w, e)

    EDIT writeOff OBJECT w
;

toPrintWriteOff 'Списание' (writeOff) = ACTION FORM writeOffPrint OBJECTS w IMAGE 'print.png' IN printGroup CONFIRM;


@metaCodeInputMultipleItems(writeOff);

FORM writeOff 'Списание'
    OBJECTS w=writeOff FIXED PANEL
    PROPERTIES (w) nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, nameDepartmentStoreWriteOff,
                   dateWriteOff, timeWriteOff, nameReasonOffWriteOff, noteWriteOff, quantityWriteOffDetailWriteOff,
                   accountSumWriteOffDetailWriteOff, nameWastageCommitteeWriteOff

    OBJECTS d=writeOffDetail
    PROPERTIES (d) indexWriteOffDetail, barcodeExSkuWriteOffDetail, nameAttributeItemWriteOffDetail, quantityWriteOffDetail,
                   accountPriceWriteOffDetail, accountSumWriteOffDetail, ADDOBJ, delete

    PROPERTIES FORCE PANEL READONLY articleItemWriteOffDetail(d), nameCountryItemWriteOffDetail(d), retailPriceWriteOffDetail(d),
                                    balanceDepartmentStoreItemWriteOff(d)

    PROPERTIES inputMultipleItemsWriteOff(w) TODRAW d, addWriteOffDetailBarcode(w) TODRAW d, cleanAllWriteOffDetailsWriteOff(w) FORCE PANEL TODRAW d
    FILTERS inWriteOffWriteOffDetail(w, d)

    EDIT writeOff OBJECT w
;

DESIGN writeOff FROM DEFAULT{

    main {
        preferredSize = (1024, 768);

        NEW header.box BEFORE d.box {
            childConstraints = TO THE RIGHT;

            NEW headerRow1 {
                childConstraints = TO THE BOTTOM;

                ADD w.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreWriteOff);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateWriteOff);
                    ADD PROPERTY(timeWriteOff);
                }

                ADD w.documentPrmGroup {
                    childConstraints = TO THE RIGHT;
                }
            }

            ADD w.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }

        d.panel{
            childConstraints = TO THE BOTTOM;
        }
    }
}

FORM writeOffs 'Списания'
    OBJECTS w=writeOff
    PROPERTIES (w) READONLY objectClassName, numberObject, seriesObject, dateWriteOff, timeWriteOff, nameDepartmentStoreWriteOff,
                            nameReasonOffWriteOff, noteWriteOff, quantityWriteOffDetailWriteOff, countWriteOffDetailWriteOff,
                            accountSumWriteOffDetailWriteOff, nameWastageCommitteeWriteOff

    PROPERTIES (w) ADDFORM, EDITFORM SHOWIF isDraftWriteOff(w), delete FORCE PANEL SHOWIF isDraftWriteOff(w),
                   postWriteOff SHOWIF isDraftWriteOff(w), unpostWriteOff SHOWIF isPostedWriteOff(w)


    OBJECTS d=writeOffDetail
    PROPERTIES (d) READONLY indexWriteOffDetail, barcodeExSkuWriteOffDetail, nameAttributeItemWriteOffDetail, quantityWriteOffDetail,
                   accountPriceWriteOffDetail, accountSumWriteOffDetail

    PROPERTIES(w) FORCE PANEL toPrintWriteOff

    FILTERS inWriteOffWriteOffDetail(w, d)
;

DESIGN writeOffs FROM DEFAULT {
    ADD w.box {
        PROPERTY(objectClassName) {
            preferredCharWidth = 15;
        }
        PROPERTY (delete(w)) {
            panelLocation = TOOLBAR;
            askConfirm = TRUE;
        }
    }
    ADD d.box;
    ADD w.printGroup;
    ADD functions.box;
}

// --------------------------- Использование регистров (автоматическое заполнение)-------------//

// ПЕРЕСОРТ
balanceBeforeDisparityDetail (disparityDetail) <- balanceBItemLedgerDateTime (
                itemInputDisparityDetail(disparityDetail), departmentStoreDisparityDetail(disparityDetail), dateTimeDisparityDetail(disparityDetail))
                WHEN CHANGED(itemInputDisparityDetail(disparityDetail));

importerPriceOutputDisparityDetail (disparityDetail) <- [PREV(priceImporterBLedgerDateTime(item, departmentStore, dateTime))] (
                itemOutputDisparityDetail(disparityDetail), departmentStoreDisparityDetail(disparityDetail), dateTimeDisparityDetail(disparityDetail))
                WHEN CHANGED(itemOutputDisparityDetail(disparityDetail));

supplierPriceOutputDisparityDetail (disparityDetail) <- [PREV(priceSupplierBLedgerDateTime(item, departmentStore, dateTime))] (
                itemOutputDisparityDetail(disparityDetail), departmentStoreDisparityDetail(disparityDetail), dateTimeDisparityDetail(disparityDetail))
                WHEN CHANGED(itemOutputDisparityDetail(disparityDetail));

retailRangeOutputDisparityDetail (disparityDetail) <- [PREV(rangeRetailBLedgerDateTime(item, departmentStore, dateTime))](
                itemOutputDisparityDetail(disparityDetail), departmentStoreDisparityDetail(disparityDetail), dateTimeDisparityDetail(disparityDetail))
                WHEN CHANGED(itemOutputDisparityDetail(disparityDetail));

warePriceOutputDisparityDetail (disparityDetail) <- warePriceBLedgerDateTime(
                itemOutputDisparityDetail(disparityDetail), departmentStoreDisparityDetail(disparityDetail), dateTimeDisparityDetail(disparityDetail))
                WHEN CHANGED(itemOutputDisparityDetail(disparityDetail));

wareOutputDisparityDetail (disparityDetail) <- wareBLedgerDateTime(
                itemOutputDisparityDetail(disparityDetail), departmentStoreDisparityDetail(disparityDetail), dateTimeDisparityDetail(disparityDetail))
                WHEN CHANGED(itemOutputDisparityDetail(disparityDetail));

retailPriceOutputDisparityDetail (disparityDetail) <- [PREV(priceRetailBLedgerDateTime(item, departmentStore, dateTime))] (
                itemOutputDisparityDetail(disparityDetail), departmentStoreDisparityDetail(disparityDetail), dateTimeDisparityDetail(disparityDetail))
                WHEN CHANGED(itemOutputDisparityDetail(disparityDetail));


importerPriceInputDisparityDetail (disparityDetail) <- [PREV(priceImporterBLedgerDateTime(item, departmentStore, dateTime))] (
                itemInputDisparityDetail(disparityDetail), departmentStoreDisparityDetail(disparityDetail), dateTimeDisparityDetail(disparityDetail))
                WHEN CHANGED(itemInputDisparityDetail(disparityDetail));

supplierPriceInputDisparityDetail (disparityDetail) <- [PREV(priceSupplierBLedgerDateTime(item, departmentStore, dateTime))] (
                itemInputDisparityDetail(disparityDetail), departmentStoreDisparityDetail(disparityDetail), dateTimeDisparityDetail(disparityDetail))
                WHEN CHANGED(itemInputDisparityDetail(disparityDetail));

retailRangeInputDisparityDetail (disparityDetail) <- [PREV(rangeRetailBLedgerDateTime(item, departmentStore, dateTime))](
                itemInputDisparityDetail(disparityDetail), departmentStoreDisparityDetail(disparityDetail), dateTimeDisparityDetail(disparityDetail))
                WHEN CHANGED(itemInputDisparityDetail(disparityDetail));

warePriceInputDisparityDetail (disparityDetail) <- warePriceBLedgerDateTime(
                itemInputDisparityDetail(disparityDetail), departmentStoreDisparityDetail(disparityDetail), dateTimeDisparityDetail(disparityDetail))
                WHEN CHANGED(itemInputDisparityDetail(disparityDetail));

wareInputDisparityDetail (disparityDetail) <- wareBLedgerDateTime(
                itemInputDisparityDetail(disparityDetail), departmentStoreDisparityDetail(disparityDetail), dateTimeDisparityDetail(disparityDetail))
                WHEN CHANGED(itemInputDisparityDetail(disparityDetail));

curRetailPriceInputDisparityDetail (disparityDetail) <- [PREV(priceRetailBLedgerDateTime(item, departmentStore, dateTime))] (
                itemInputDisparityDetail(disparityDetail), departmentStoreDisparityDetail(disparityDetail), dateTimeDisparityDetail(disparityDetail))
                WHEN CHANGED(itemInputDisparityDetail(disparityDetail));


retailPriceSpecificationDetail (specificationDetail) <- priceRetailBLedgerDateTime(
                itemSpecificationDetail(specificationDetail), departmentStoreSpecificationDetail(specificationDetail), dateTimeSpecificationDetail(specificationDetail))
                WHEN CHANGED(itemSpecificationDetail(specificationDetail));

// АКТ ПРОРАБОТКИ
retailPriceStudyInputDetail (studyInputDetail) <- priceRetailBLedgerDateTime(
                itemStudyInputDetail(studyInputDetail), departmentStoreStudyInputDetail(studyInputDetail), dateTimeStudyInputDetail(studyInputDetail))
                WHEN CHANGED(itemStudyInputDetail(studyInputDetail));

importerPriceStudyInputDetail (studyInputDetail) <- priceImporterBLedgerDateTime (
                itemStudyInputDetail(studyInputDetail), departmentStoreStudyInputDetail(studyInputDetail), dateTimeStudyInputDetail(studyInputDetail))
                WHEN CHANGED(itemStudyInputDetail(studyInputDetail));

supplierPriceStudyInputDetail (studyInputDetail) <- priceSupplierBLedgerDateTime (
                itemStudyInputDetail(studyInputDetail), departmentStoreStudyInputDetail(studyInputDetail), dateTimeStudyInputDetail(studyInputDetail))
                WHEN CHANGED(itemStudyInputDetail(studyInputDetail));

retailRangeStudyInputDetail (studyInputDetail) <- rangeRetailBLedgerDateTime(
                itemStudyInputDetail(studyInputDetail), departmentStoreStudyInputDetail(studyInputDetail), dateTimeStudyInputDetail(studyInputDetail))
                WHEN CHANGED(itemStudyInputDetail(studyInputDetail));

curImporterPriceStudyOutputDetail (studyOutputDetail) <- priceImporterBLedgerDateTime(
                itemStudyOutputDetail(studyOutputDetail), departmentStoreStudyOutputDetail(studyOutputDetail), dateTimeStudyOutputDetail(studyOutputDetail))
                WHEN CHANGED(itemStudyOutputDetail(studyOutputDetail));

curSupplierPriceStudyOutputDetail (studyOutputDetail) <- priceSupplierBLedgerDateTime(
                itemStudyOutputDetail(studyOutputDetail), departmentStoreStudyOutputDetail(studyOutputDetail), dateTimeStudyOutputDetail(studyOutputDetail))
                WHEN CHANGED(itemStudyOutputDetail(studyOutputDetail));

curRetailRangeStudyOutputDetail (studyOutputDetail) <- rangeRetailBLedgerDateTime(
                itemStudyOutputDetail(studyOutputDetail), departmentStoreStudyOutputDetail(studyOutputDetail), dateTimeStudyOutputDetail(studyOutputDetail))
                WHEN CHANGED(itemStudyOutputDetail(studyOutputDetail));

curRetailPriceStudyOutputDetail (studyOutputDetail) <- priceRetailBLedgerDateTime(
                itemStudyOutputDetail(studyOutputDetail), departmentStoreStudyOutputDetail(studyOutputDetail), dateTimeStudyOutputDetail(studyOutputDetail))
                WHEN CHANGED(itemStudyOutputDetail(studyOutputDetail));

// ОТГРУЗКА ИЗ РОЗНИЦЫ
importerPriceStatementDetail (statementDetail) <- priceImporterBLedgerDateTime (
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail))
                WHEN CHANGED(itemStatementDetail(statementDetail));

supplierPriceStatementDetail (statementDetail) <- priceSupplierBLedgerDateTime (
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail))
                WHEN CHANGED(itemStatementDetail(statementDetail));

retailRangeStatementDetail (statementDetail) <- rangeRetailBLedgerDateTime(
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail))
                WHEN CHANGED(itemStatementDetail(statementDetail));

curRetailPriceStatementDetail (statementDetail) <- priceRetailBLedgerDateTime (
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail))
                WHEN CHANGED(itemStatementDetail(statementDetail));

retailPriceStatementDetail (statementDetail) <- priceRetailBLedgerDateTime (
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail))
                WHEN CHANGED(itemStatementDetail(statementDetail));

warePriceStatementDetail (statementDetail) <- warePriceBLedgerDateTime(
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail))
                WHEN CHANGED(itemStatementDetail(statementDetail));

wareStatementDetail (statementDetail) <- wareBLedgerDateTime(
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail))
                WHEN CHANGED(itemStatementDetail(statementDetail));

//  ПЕРЕОЦЕНКА
curRetailPriceUserPriceChangeDetail(userPriceChangeDetail) <- priceRetailBLedgerDateTime(
                itemUserPriceChangeDetail(userPriceChangeDetail), departmentStoreUserPriceChangeDetail(userPriceChangeDetail), dateTimeUserPriceChangeDetail(userPriceChangeDetail))
                WHEN CHANGED(itemUserPriceChangeDetail(userPriceChangeDetail));

curImporterPriceUserPriceChangeDetail (userPriceChangeDetail) <- priceImporterBLedgerDateTime(
                itemUserPriceChangeDetail(userPriceChangeDetail), departmentStoreUserPriceChangeDetail(userPriceChangeDetail), dateTimeUserPriceChangeDetail(userPriceChangeDetail))
                WHEN CHANGED(itemUserPriceChangeDetail(userPriceChangeDetail));

curSupplierPriceUserPriceChangeDetail (userPriceChangeDetail) <- priceSupplierBLedgerDateTime(
                itemUserPriceChangeDetail(userPriceChangeDetail), departmentStoreUserPriceChangeDetail(userPriceChangeDetail), dateTimeUserPriceChangeDetail(userPriceChangeDetail))
                WHEN CHANGED(itemUserPriceChangeDetail(userPriceChangeDetail));

curRetailRangeUserPriceChangeDetail (userPriceChangeDetail) <- rangeRetailBLedgerDateTime(
                itemUserPriceChangeDetail(userPriceChangeDetail), departmentStoreUserPriceChangeDetail(userPriceChangeDetail), dateTimeUserPriceChangeDetail(userPriceChangeDetail))
                WHEN CHANGED(itemUserPriceChangeDetail(userPriceChangeDetail));

curWarePriceUserPriceChangeDetail (userPriceChangeDetail) <- warePriceBLedgerDateTime(
                itemUserPriceChangeDetail(userPriceChangeDetail), departmentStoreUserPriceChangeDetail(userPriceChangeDetail), dateTimeUserPriceChangeDetail(userPriceChangeDetail))
                WHEN CHANGED(itemUserPriceChangeDetail(userPriceChangeDetail));

curWareUserPriceChangeDetail (userPriceChangeDetail) <- wareBLedgerDateTime(
                itemUserPriceChangeDetail(userPriceChangeDetail), departmentStoreUserPriceChangeDetail(userPriceChangeDetail), dateTimeUserPriceChangeDetail(userPriceChangeDetail))
                WHEN CHANGED(itemUserPriceChangeDetail(userPriceChangeDetail));

retailRangeBillDetail (billDetail) <- rangeRetailBLedgerDateTime(
                itemBillDetail(billDetail), departmentStoreBillDetail(billDetail), dateTimeBillDetail(billDetail))
                WHEN CHANGED(itemBillDetail(billDetail));

balanceDepartmentStoreItemStatementDetail 'Текущий остаток' (statementDetail) = balanceBItemLedgerDateTime(
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail)) IN itemDetailGroup;

quantityItemByStatementDetail(statementDetail) = quantityStatementDetailItemStatement(itemStatementDetail(statementDetail), statementStatementDetail(statementDetail));
highlightStatementDetail(statementDetail) =  quantityItemByStatementDetail(statementDetail) > balanceDepartmentStoreItemStatementDetail(statementDetail);

balanceDepartmentStoreItemSpecificationDetail 'Текущий остаток' (specificationDetail) = balanceBItemLedgerDateTime(
                itemSpecificationDetail(specificationDetail), departmentStoreSpecificationDetail(specificationDetail), dateTimeSpecificationDetail(specificationDetail)) IN itemDetailGroup;

quantityItemBySpecificationDetail(specificationDetail) = quantitySpecificationDetailItemSpecification( itemSpecificationDetail(specificationDetail), specificationSpecificationDetail(specificationDetail));
highlightSpecificationDetail(specificationDetail) =  quantityItemBySpecificationDetail(specificationDetail) > balanceDepartmentStoreItemSpecificationDetail(specificationDetail);

reservedItemDepartmentStoreDate 'Количество выставленного товара' (departmentStore, item, date) = GROUP SUM
    quantitySpecificationDetail(specificationDetail)
    IF dateToSpecification(specificationSpecificationDetail(specificationDetail)) >= date AND date AS DATE
    BY departmentStoreSpecificationDetail(specificationDetail), itemSpecificationDetail(specificationDetail), date;


quantityExhibitedItemBySpecificationDetail(specificationDetail) = reservedItemDepartmentStoreDate(departmentStoreSpecificationDetail(specificationDetail),
    itemSpecificationDetail(specificationDetail), dateSpecification(specificationSpecificationDetail(specificationDetail)));

availableQuantityItemBySpecificationDetail 'Доступное к-во, с учетом непросроченных с/ф' (specificationDetail) =
    balanceDepartmentStoreItemSpecificationDetail(specificationDetail)-quantityExhibitedItemBySpecificationDetail(specificationDetail) IN itemDetailGroup;

notNullAvailableQuantityItemBySpecificationDetail(specificationDetail) = availableQuantityItemBySpecificationDetail(specificationDetail) < 0;

overdueSpecificationStatement 'Просроченные с/ф' (specification, statement) = overdueSpecificationDate(specification, dateStatement(statement));
noOverdueSpecificationStatement 'Непросроченные с/ф' (specification, statement) = noOverdueSpecificationDate(specification, dateStatement(statement));

// --------------------------- Использование регистров (автоматическое заполнение): инвентаризация---------------//

accountPricePageInventoryDetail(pageInventoryDetail) <- priceAccountBLedgerDateTime(
                itemPageInventoryDetail(pageInventoryDetail), departmentStorePageInventoryDetail(pageInventoryDetail), dateTimePageInventoryDetail(pageInventoryDetail))
                WHEN CHANGED(itemPageInventoryDetail(pageInventoryDetail));

accountPriceBalanceCollationSheetItem(collationSheet, item) <- priceAccountBLedgerDateTime(
                item, departmentStoreCollationSheet(collationSheet), dateTimeInventory(inventoryCollationSheet(collationSheet)))
                WHEN ASSIGNED(includeCollationSheetItem(collationSheet, item));

fillBalanceInventory 'Заполнить остатки' (inventory) = ACTION(inventory) {
    SET quantityBalanceCollationSheetItem(collationSheet, item) AND inventoryCollationSheet(collationSheet)==inventory  AND item IS item
        <- balanceBItemLedgerDateTime(item, departmentStoreCollationSheet(collationSheet), dateTimeInventory(inventoryCollationSheet(collationSheet)));

} CONFIRM;
//  todo: зацикливается на includeCollationSheetItem, пока на action поставили - переделать потом

convertPriceInventory 'Пересчитать цены по всей инвентаризации' (inventory) = ACTION(inventory) {
    SET accountPricePageInventoryDetail(pageInventoryDetail) AND inventoryPageInventoryDetail(pageInventoryDetail) == inventory <- priceAccountBLedgerDateTime(
            itemPageInventoryDetail(pageInventoryDetail), departmentStorePageInventoryDetail(pageInventoryDetail), dateTimePageInventoryDetail(pageInventoryDetail))
            AND inventoryPageInventoryDetail(pageInventoryDetail) == inventory;
    SET accountPriceBalanceCollationSheetItem(collationSheet, item) AND inventoryCollationSheet(collationSheet) == inventory <- priceAccountBLedgerDateTime(
            item, departmentStoreCollationSheet(collationSheet), dateTimeInventory(inventoryCollationSheet(collationSheet)))
            AND inventoryCollationSheet(collationSheet) == inventory;
} CONFIRM;

// todo: какой-то баг, не всегда срабатывает action

convertPriceCollationSheet 'Пересчитать цены в сличительной ведомости' (collationSheet) = ACTION(collationSheet) {
    SET accountPricePageInventoryDetail(pageInventoryDetail) AND collationSheetListInventory(listInventoryPageInventoryDetail(pageInventoryDetail)) == collationSheet <- priceAccountBLedgerDateTime(
            itemPageInventoryDetail(pageInventoryDetail), departmentStorePageInventoryDetail(pageInventoryDetail), dateTimePageInventoryDetail(pageInventoryDetail))
            AND collationSheetListInventory(listInventoryPageInventoryDetail(pageInventoryDetail)) == collationSheet;
    SET accountPriceBalanceCollationSheetItem(collationSheet, item) <- priceAccountBLedgerDateTime(
            item, departmentStoreCollationSheet(collationSheet), dateTimeInventory(inventoryCollationSheet(collationSheet)));
} CONFIRM;



//---------------------------- Переоценка (конкретная реализация) ----------------------------------------//

dateTimePriceChangeDocument 'Дата/время' (priceChangeDocument) = UNION EXCLUSIVE dateTimePriceChangeShipment(priceChangeDocument),
                                                                                 dateTimePriceChangeReturnSupplier(priceChangeDocument),
                                                                                 dateTimePriceChangeStatement(priceChangeDocument),
                                                                                 dateTimePriceChangeInnerArrival(priceChangeDocument),
                                                                                 dateTimeUserPriceChange(priceChangeDocument),
                                                                                 dateTimeMixPriceChangeDisparity(priceChangeDocument),
                                                                                 dateTimePriceChangeDisparity(priceChangeDocument) PERSISTENT;

descriptionPriceChangeDocument 'Название документа' (priceChangeDocument) = [FORMULA STRING[200] '\'Переоценка.\' || \' \' || CAST($1 AS TEXT)'](
                                                                            UNION EXCLUSIVE descriptionPriceChangeShipment(priceChangeDocument),
                                                                                    descriptionPriceChangeReturnSupplier(priceChangeDocument),
                                                                                    descriptionPriceChangeStatement(priceChangeDocument),
                                                                                    descriptionPriceChangeInnerArrival(priceChangeDocument),
                                                                                    descriptionUserPriceChange(priceChangeDocument),
                                                                                    descriptionMixPriceChangeDisparity(priceChangeDocument),
                                                                                    descriptionPriceChangeDisparity(priceChangeDocument)) PERSISTENT;

datePriceChangeDocument 'Дата' (priceChangeDocument) = dateInTime(dateTimePriceChangeDocument(priceChangeDocument)) PERSISTENT;

isPostedPriceChangeDocument 'Закрыт' (priceChangeDocument) = UNION EXCLUSIVE isPostedPriceChangeShipment(priceChangeDocument),
                                                                             isPostedPriceChangeReturnSupplier(priceChangeDocument),
                                                                             isPostedPriceChangeStatement(priceChangeDocument),
                                                                             isPostedPriceChangeInnerArrival(priceChangeDocument),
                                                                             isPostedUserPriceChange(priceChangeDocument),
                                                                             isPostedMixPriceChangeDisparity(priceChangeDocument),
                                                                             isPostedPriceChangeDisparity(priceChangeDocument) PERSISTENT;

numberPriceChangeDocument 'Номер документа' (priceChangeDocument) = UNION EXCLUSIVE numberPriceChangeShipment(priceChangeDocument),
                                                                                    numberPriceChangeReturnSupplier(priceChangeDocument),
                                                                                    numberPriceChangeInnerArrival(priceChangeDocument),
                                                                                    numberPriceChangeStatement(priceChangeDocument),
                                                                                    numberUserPriceChange(priceChangeDocument),
                                                                                    numberMixPriceChangeDisparity(priceChangeDocument),
                                                                                    numberPriceChangeDisparity(priceChangeDocument) PERSISTENT;

seriesPriceChangeDocument 'Серия документа' (priceChangeDocument) = UNION EXCLUSIVE seriesPriceChangeShipment(priceChangeDocument),
                                                                                    seriesPriceChangeReturnSupplier(priceChangeDocument),
                                                                                    seriesPriceChangeInnerArrival(priceChangeDocument),
                                                                                    seriesPriceChangeStatement (priceChangeDocument),
                                                                                    seriesUserPriceChange(priceChangeDocument),
                                                                                    seriesMixPriceChangeDisparity(priceChangeDocument),
                                                                                    seriesPriceChangeDisparity(priceChangeDocument) PERSISTENT;

numberDisposalPriceChangeDocument '№ распоряжения на переоценку' (priceChangeDocument) = UNION EXCLUSIVE
                                                                                    numberDisposalPriceChangeShipment(priceChangeDocument),
                                                                                    numberDisposalPriceChangeReturnSupplier(priceChangeDocument),
                                                                                    numberDisposalPriceChangeInnerArrival(priceChangeDocument),
                                                                                    numberDisposalPriceChangeStatement(priceChangeDocument),
                                                                                    numberDisposalUserPriceChange(priceChangeDocument),
                                                                                    numberDisposalMixPriceChangeDisparity(priceChangeDocument),
                                                                                    numberDisposalPriceChangeDisparity(priceChangeDocument) PERSISTENT;

revaluationCommitteePriceChangeDocument 'Комиссия переоценки ИД' (priceChangeDocument) = UNION EXCLUSIVE
                                                                                    revaluationCommitteePriceChangeShipment(priceChangeDocument),
                                                                                    revaluationCommitteePriceChangeReturnSupplier(priceChangeDocument),
                                                                                    revaluationCommitteePriceChangeInnerArrival(priceChangeDocument),
                                                                                    revaluationCommitteePriceChangeStatement(priceChangeDocument),
                                                                                    revaluationCommitteeUserPriceChange(priceChangeDocument),
                                                                                    revaluationCommitteeMixPriceChangeDisparity(priceChangeDocument),
                                                                                    revaluationCommitteePriceChangeDisparity(priceChangeDocument) PERSISTENT;

departmentStorePriceChangeDocument (priceChangeDocument) = UNION EXCLUSIVE departmentStorePriceChangeShipment(priceChangeDocument),
                                                                           departmentStorePriceChangeReturnSupplier(priceChangeDocument),
                                                                           departmentStorePriceChangeStatement(priceChangeDocument),
                                                                           departmentStorePriceChangeInnerArrival(priceChangeDocument),
                                                                           departmentStoreUserPriceChange(priceChangeDocument),
                                                                           departmentStoreMixPriceChangeDisparity(priceChangeDocument),
                                                                           departmentStorePriceChangeDisparity(priceChangeDocument) PERSISTENT;

nameDepartmentStorePriceChangeDocument 'Отдел магазина' (priceChangeDocument) = name(departmentStorePriceChangeDocument(priceChangeDocument));

priceChangeDocumentPriceChangeDocumentDetail(priceChangeDocumentDetail) = UNION EXCLUSIVE priceChangeShipmentPriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                priceChangeReturnSupplierPriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                priceChangeStatementPriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                priceChangeInnerArrivalPriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                userPriceChangeUserPriceChangeDetail(priceChangeDocumentDetail),
                                                                                mixPriceChangeDisparityMixPriceChangeDisparityDetail(priceChangeDocumentDetail),
                                                                                priceChangeDisparityPriceChangeDisparityDetail(priceChangeDocumentDetail) PERSISTENT;

datePriceChangeDocumentDetail 'Дата' (priceChangeDocumentDetail) = datePriceChangeDocument(priceChangeDocumentPriceChangeDocumentDetail(priceChangeDocumentDetail)) PERSISTENT;

itemPriceChangeDocumentDetail (priceChangeDocumentDetail) = UNION EXCLUSIVE itemPriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                            itemPriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                            itemPriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                            itemPriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                            itemUserPriceChangeDetail(priceChangeDocumentDetail),
                                                                            itemMixPriceChangeDisparityDetail(priceChangeDocumentDetail),
                                                                            itemPriceChangeDisparityDetail(priceChangeDocumentDetail) PERSISTENT;

nameItemPriceChangeDocumentDetail 'Товар' (priceChangeDocumentDetail) = nameAttributeItem(itemPriceChangeDocumentDetail(priceChangeDocumentDetail));

shortNameUnitOfMeasureItemPriceChangeDocumentDetail 'Ед. изм.' (priceChangeDocumentDetail) = shortNameUnitOfMeasureItem(itemPriceChangeDocumentDetail(priceChangeDocumentDetail));

quantityPriceChangeDocumentDetail 'Остаток' (priceChangeDocumentDetail) = UNION EXCLUSIVE quantityPriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                          quantityPriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                          quantityPriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                          quantityPriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                          quantityUserPriceChangeDetail(priceChangeDocumentDetail),
                                                                                          quantityMixPriceChangeDisparityDetail(priceChangeDocumentDetail),
                                                                                          quantityPriceChangeDisparityDetail(priceChangeDocumentDetail) PERSISTENT;

curWarePriceChangeDocumentDetail (priceChangeDocumentDetail) = UNION EXCLUSIVE
                                                                            curWarePriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                            curWarePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                            warePriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                            curWarePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                            curWareUserPriceChangeDetail(priceChangeDocumentDetail),
                                                                            wareMixPriceChangeDisparityDetail(priceChangeDocumentDetail),
                                                                            warePriceChangeDisparityDetail(priceChangeDocumentDetail) PERSISTENT;

warePriceChangeDocumentDetail (priceChangeDocumentDetail) = UNION EXCLUSIVE
                                                                                            warePriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                            warePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                            warePriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                            warePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                            wareUserPriceChangeDetail(priceChangeDocumentDetail),
                                                                                            wareMixPriceChangeDisparityDetail(priceChangeDocumentDetail),
                                                                                            warePriceChangeDisparityDetail(priceChangeDocumentDetail) PERSISTENT;

curWarePricePriceChangeDocumentDetail 'Текущая цена посуды' (priceChangeDocumentDetail) = UNION EXCLUSIVE
                                                                                            curWarePricePriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                            curWarePricePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                            warePricePriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                            curWarePricePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                            curWarePriceUserPriceChangeDetail(priceChangeDocumentDetail),
                                                                                            warePriceMixPriceChangeDisparityDetail(priceChangeDocumentDetail),
                                                                                            warePricePriceChangeDisparityDetail(priceChangeDocumentDetail) PERSISTENT;

warePricePriceChangeDocumentDetail 'Цена посуды' (priceChangeDocumentDetail) = UNION EXCLUSIVE
                                                                                            warePricePriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                            warePricePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                            warePricePriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                            warePricePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                            warePriceUserPriceChangeDetail(priceChangeDocumentDetail),
                                                                                            warePriceMixPriceChangeDisparityDetail(priceChangeDocumentDetail),
                                                                                            warePricePriceChangeDisparityDetail(priceChangeDocumentDetail) PERSISTENT;

@defineDocumentDetailWareRange(priceChangeDocument);
@defineDocumentDetailCurWareRange(priceChangeDocument);

curImporterPricePriceChangeDocumentDetail 'Текущая цена изготовителя' (priceChangeDocumentDetail) = UNION EXCLUSIVE curImporterPricePriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                                              curImporterPricePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                                              importerPricePriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                                              curImporterPricePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                                              curImporterPriceUserPriceChangeDetail(priceChangeDocumentDetail),
                                                                                                              importerPriceMixPriceChangeDisparityDetail(priceChangeDocumentDetail),
                                                                                                              importerPricePriceChangeDisparityDetail(priceChangeDocumentDetail) PERSISTENT;
importerPricePriceChangeDocumentDetail 'Цена изготовителя' (priceChangeDocumentDetail) = UNION EXCLUSIVE importerPricePriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                                               importerPricePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                                               importerPricePriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                                               importerPricePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                                               importerPriceUserPriceChangeDetail(priceChangeDocumentDetail),
                                                                                                               importerPriceMixPriceChangeDisparityDetail(priceChangeDocumentDetail),
                                                                                                               importerPricePriceChangeDisparityDetail(priceChangeDocumentDetail) PERSISTENT;

curSupplierPricePriceChangeDocumentDetail 'Текущая цена поставщика' (priceChangeDocumentDetail) = UNION EXCLUSIVE curSupplierPricePriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                                            curSupplierPricePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                                            supplierPricePriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                                            curSupplierPricePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                                            curSupplierPriceUserPriceChangeDetail(priceChangeDocumentDetail),
                                                                                                            supplierPriceMixPriceChangeDisparityDetail(priceChangeDocumentDetail),
                                                                                                            supplierPricePriceChangeDisparityDetail(priceChangeDocumentDetail) PERSISTENT;
supplierPricePriceChangeDocumentDetail 'Цена поставщика' (priceChangeDocumentDetail) = UNION EXCLUSIVE supplierPricePriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                                        supplierPricePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                                        supplierPricePriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                                        supplierPricePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                                        supplierPriceUserPriceChangeDetail(priceChangeDocumentDetail),
                                                                                                        supplierPriceMixPriceChangeDisparityDetail(priceChangeDocumentDetail),
                                                                                                        supplierPricePriceChangeDisparityDetail(priceChangeDocumentDetail) PERSISTENT;

curDataRetailRangePriceChangeDocumentDetail 'Текущий НДС, %' (priceChangeDocumentDetail) = UNION EXCLUSIVE curDataRetailRangePriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                                          curDataRetailRangePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                                          dataRetailRangePriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                                          curDataRetailRangePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                                          curDataRetailRangeUserPriceChangeDetail(priceChangeDocumentDetail),
                                                                                                          dataRetailRangeMixPriceChangeDisparityDetail(priceChangeDocumentDetail),
                                                                                                          dataRetailRangePriceChangeDisparityDetail(priceChangeDocumentDetail) PERSISTENT;
dataRetailRangePriceChangeDocumentDetail 'НДС, %' (priceChangeDocumentDetail) = UNION EXCLUSIVE dataRetailRangePriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                                      dataRetailRangePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                                      dataRetailRangePriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                                      dataRetailRangePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                                      dataRetailRangeUserPriceChangeDetail(priceChangeDocumentDetail),
                                                                                                      dataRetailRangeMixPriceChangeDisparityDetail(priceChangeDocumentDetail),
                                                                                                      dataRetailRangePriceChangeDisparityDetail(priceChangeDocumentDetail) PERSISTENT;


curRetailPricePriceChangeDocumentDetail 'Текущая розничная цена' (priceChangeDocumentDetail) = UNION EXCLUSIVE curRetailPricePriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                                         curRetailPricePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                                         curRetailPricePriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                                         curRetailPricePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                                         curRetailPriceUserPriceChangeDetail(priceChangeDocumentDetail),
                                                                                                         curRetailPriceMixPriceChangeDisparityDetail(priceChangeDocumentDetail),
                                                                                                         curRetailPricePriceChangeDisparityDetail(priceChangeDocumentDetail) PERSISTENT;

retailPricePriceChangeDocumentDetail 'Розничная цена' (priceChangeDocumentDetail) = UNION EXCLUSIVE retailPricePriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                                     retailPricePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                                     retailPricePriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                                     retailPricePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                                     retailPriceUserPriceChangeDetail(priceChangeDocumentDetail),
                                                                                                     retailPriceMixPriceChangeDisparityDetail(priceChangeDocumentDetail),
                                                                                                     retailPricePriceChangeDisparityDetail(priceChangeDocumentDetail) PERSISTENT;

@defineDocumentDetailIndex(priceChangeDocument);

@defineDocumentDetailWareSum(priceChangeDocument);
@defineDocumentDetailInSum(priceChangeDocument);
@defineDocumentDetailOutSum(priceChangeDocument);

@defineDocumentDetailCurWareSum(priceChangeDocument);
@defineDocumentDetailCurInSum(priceChangeDocument);
@defineDocumentDetailCurOutSum(priceChangeDocument);

@defineDocumentHeaderQuantity(priceChangeDocument);

@defineDocumentHeaderWareSum(priceChangeDocument);
@defineDocumentHeaderInSum(priceChangeDocument);
@defineDocumentHeaderOutSum(priceChangeDocument);

@defineDocumentHeaderCurWareSum(priceChangeDocument);
@defineDocumentHeaderCurInSum(priceChangeDocument);
@defineDocumentHeaderCurOutSum(priceChangeDocument);

retailMarkupPriceChangeDocumentDetail 'Наценка,%' (priceChangeDocumentDetail) = [round2(X*100/Y)](
    markupSumPriceChangeDocumentDetail(priceChangeDocumentDetail), supplierPricePriceChangeDocumentDetail(priceChangeDocumentDetail));

curRetailMarkupPriceChangeDocumentDetail 'Текущая наценка,%' (priceChangeDocumentDetail) = [round2(X*100/Y)](
    curMarkupSumPriceChangeDocumentDetail(priceChangeDocumentDetail), curSupplierPricePriceChangeDocumentDetail(priceChangeDocumentDetail));

commonMarkupPriceChangeDocumentDetail 'Общий процент надбавки от цены изготовителя' (priceChangeDocumentDetail) = [(X/Y-1)*100](
    supplierPricePriceChangeDocumentDetail(priceChangeDocumentDetail), importerPricePriceChangeDocumentDetail(priceChangeDocumentDetail));

                         // ---------Дельта  показателей переоценки (detail)--------------- //

diffWareSumPriceChangeDocumentDetail 'Изменение суммы посуды' (priceChangeDocumentDetail) =
    wareSumPriceChangeDocumentDetail(priceChangeDocumentDetail) (-) curWareSumPriceChangeDocumentDetail(priceChangeDocumentDetail);

diffWareVATSumPriceChangeDocumentDetail 'Изменение суммы НДС посуды' (priceChangeDocumentDetail) =
    wareVATSumPriceChangeDocumentDetail(priceChangeDocumentDetail) (-) curWareVATSumPriceChangeDocumentDetail(priceChangeDocumentDetail);

diffSupplierISumPriceChangeDocumentDetail 'Изменение суммы поставщика' (priceChangeDocumentDetail) =
    supplierISumPriceChangeDocumentDetail(priceChangeDocumentDetail) (-) curSupplierISumPriceChangeDocumentDetail(priceChangeDocumentDetail);

diffMarkupSumPriceChangeDocumentDetail 'Изменение суммы надбавки' (priceChangeDocumentDetail) =
    markupSumPriceChangeDocumentDetail(priceChangeDocumentDetail) (-) curMarkupSumPriceChangeDocumentDetail(priceChangeDocumentDetail);

diffRetailVATISumPriceChangeDocumentDetail 'Изменение суммы розничного НДС' (priceChangeDocumentDetail) =
    retailVATISumPriceChangeDocumentDetail(priceChangeDocumentDetail) (-) curRetailVATISumPriceChangeDocumentDetail(priceChangeDocumentDetail);

diffRetailSumPriceChangeDocumentDetail 'Изменение розничной суммы' (priceChangeDocumentDetail) =
    retailSumPriceChangeDocumentDetail(priceChangeDocumentDetail) (-) curRetailSumPriceChangeDocumentDetail(priceChangeDocumentDetail);

                         // ---------Дельта  показателей переоценки (header)--------------- //

diffWareSumPriceChangeDocumentDetailPriceChangeDocument 'Изменение суммы посуды' (priceChangeDocument) =
    wareSumPriceChangeDocumentDetailPriceChangeDocument(priceChangeDocument) (-) curWareSumPriceChangeDocumentDetailPriceChangeDocument(priceChangeDocument) IN documentSumGroup;

diffWareVATSumPriceChangeDocumentDetailPriceChangeDocument 'Изменение суммы НДС посуды' (priceChangeDocument) =
    wareVATSumPriceChangeDocumentDetailPriceChangeDocument(priceChangeDocument) (-) curWareVATSumPriceChangeDocumentDetailPriceChangeDocument(priceChangeDocument) IN documentSumGroup;

diffSupplierISumPriceChangeDocumentDetailPriceChangeDocument 'Изменение суммы поставщика' (priceChangeDocument) =
    supplierISumPriceChangeDocumentDetailPriceChangeDocument(priceChangeDocument) (-) curSupplierISumPriceChangeDocumentDetailPriceChangeDocument(priceChangeDocument) IN documentSumGroup;

diffMarkupSumPriceChangeDocumentDetailPriceChangeDocument 'Изменение суммы надбавки' (priceChangeDocument) =
    markupSumPriceChangeDocumentDetailPriceChangeDocument(priceChangeDocument) (-) curMarkupSumPriceChangeDocumentDetailPriceChangeDocument(priceChangeDocument) IN documentSumGroup;

diffRetailVATISumPriceChangeDocumentDetailPriceChangeDocument 'Изменение суммы розничного НДС' (priceChangeDocument) =
    retailVATISumPriceChangeDocumentDetailPriceChangeDocument(priceChangeDocument) (-) curRetailVATISumPriceChangeDocumentDetailPriceChangeDocument(priceChangeDocument) IN documentSumGroup;

diffRetailSumPriceChangeDocumentDetailPriceChangeDocument 'Сумма переоценки' (priceChangeDocument) =
    retailSumPriceChangeDocumentDetailPriceChangeDocument(priceChangeDocument) (-) curRetailSumPriceChangeDocumentDetailPriceChangeDocument(priceChangeDocument) IN documentSumGroup;

                         // ---------Дельта для товарного отчета --------------- //

diffRetailSumItemPriceChangeDocumentDetailPriceChangeDocument 'Сумма переоценки, товар' (priceChangeDocument) =
    GROUP SUM diffRetailSumPriceChangeDocumentDetail(priceChangeDocumentDetail) AND NOT isContainerItem(itemPriceChangeDocumentDetail(priceChangeDocumentDetail))
        BY  priceChangeDocumentPriceChangeDocumentDetail(priceChangeDocumentDetail);
diffRetailSumContainerPriceChangeDocumentDetailPriceChangeDocument 'Сумма переоценки, тара' (priceChangeDocument) =
    GROUP SUM diffRetailSumPriceChangeDocumentDetail(priceChangeDocumentDetail) IF isContainerItem(itemPriceChangeDocumentDetail(priceChangeDocumentDetail))
        BY  priceChangeDocumentPriceChangeDocumentDetail(priceChangeDocumentDetail);

                         // --------- Комиссия переоценки --------------- //

isRevaluationCommitteePriceChangeDocument(priceChangeDocument) = priceChangeDocument IS priceChangeDocument AND revaluationCommitteePriceChangeDocument(priceChangeDocument);

nameRevaluationCommitteePriceChangeDocument 'Комиссия переоценки' (priceChangeDocument) = name(revaluationCommitteePriceChangeDocument(priceChangeDocument));
commonNameEmployeeCommitteePriceChangeDocument 'Сотрудники комиссии' (priceChangeDocument) = nameOfficerEmployeeCommittee(revaluationCommitteePriceChangeDocument(priceChangeDocument));
inPriceChangeDocumentEmployee (priceChangeDocument, employee) = inCommitteeEmployee(revaluationCommitteePriceChangeDocument(priceChangeDocument), employee);
commonNameChairmanPriceChangeDocument 'Председатель комиссии' (priceChangeDocument) = nameChairmanCommittee(revaluationCommitteePriceChangeDocument(priceChangeDocument));
nameOfficerChairmanPriceChangeDocument 'Должность' (priceChangeDocument) = nameOfficerChairmanCommittee(revaluationCommitteePriceChangeDocument(priceChangeDocument));

                            //----------печатная форма--------//
FORM actOfRevaluation 'Акт переоценки' PRINT
    OBJECTS pc=priceChangeDocument  FIXED PANEL
    PROPERTIES(pc) SELECTOR  numberPriceChangeDocument, seriesPriceChangeDocument, objectClassName, isPostedPriceChangeDocument,
                             nameDepartmentStorePriceChangeDocument, datePriceChangeDocument, nameRevaluationCommitteePriceChangeDocument,
                             commonNameChairmanPriceChangeDocument, nameOfficerChairmanPriceChangeDocument, commonNameEmployeeCommitteePriceChangeDocument,
                             quantityPriceChangeDocumentDetailPriceChangeDocument, numberDisposalPriceChangeDocument, isRevaluationCommitteePriceChangeDocument,
                             curSupplierISumPriceChangeDocumentDetailPriceChangeDocument, curMarkupSumPriceChangeDocumentDetailPriceChangeDocument, curRetailVATISumPriceChangeDocumentDetailPriceChangeDocument,
                             curWareSumPriceChangeDocumentDetailPriceChangeDocument, curWareVATSumPriceChangeDocumentDetailPriceChangeDocument, curRetailSumPriceChangeDocumentDetailPriceChangeDocument,
                             supplierISumPriceChangeDocumentDetailPriceChangeDocument, markupSumPriceChangeDocumentDetailPriceChangeDocument, retailVATISumPriceChangeDocumentDetailPriceChangeDocument,
                             wareSumPriceChangeDocumentDetailPriceChangeDocument, wareVATSumPriceChangeDocumentDetailPriceChangeDocument, retailSumPriceChangeDocumentDetailPriceChangeDocument,
                             diffSupplierISumPriceChangeDocumentDetailPriceChangeDocument, diffMarkupSumPriceChangeDocumentDetailPriceChangeDocument, diffRetailVATISumPriceChangeDocumentDetailPriceChangeDocument,
                             diffWareSumPriceChangeDocumentDetailPriceChangeDocument, diffWareVATSumPriceChangeDocumentDetailPriceChangeDocument, diffRetailSumPriceChangeDocumentDetailPriceChangeDocument

    OBJECTS pcd=priceChangeDocumentDetail
    PROPERTIES(pcd) READONLY indexPriceChangeDocumentDetail, nameItemPriceChangeDocumentDetail, shortNameUnitOfMeasureItemPriceChangeDocumentDetail,
                             quantityPriceChangeDocumentDetail,
                             curSupplierISumPriceChangeDocumentDetail, curMarkupSumPriceChangeDocumentDetail,
                             curRetailVATISumPriceChangeDocumentDetail, curWareSumPriceChangeDocumentDetail,
                             curWareVATSumPriceChangeDocumentDetail, curRetailPricePriceChangeDocumentDetail, curRetailSumPriceChangeDocumentDetail,
                             supplierISumPriceChangeDocumentDetail, markupSumPriceChangeDocumentDetail,
                             retailVATISumPriceChangeDocumentDetail, wareSumPriceChangeDocumentDetail,
                             wareVATSumPriceChangeDocumentDetail, retailPricePriceChangeDocumentDetail, retailSumPriceChangeDocumentDetail,
                             diffSupplierISumPriceChangeDocumentDetail, diffMarkupSumPriceChangeDocumentDetail,
                             diffRetailVATISumPriceChangeDocumentDetail, diffWareSumPriceChangeDocumentDetail,
                             diffWareVATSumPriceChangeDocumentDetail, diffRetailSumPriceChangeDocumentDetail

    OBJECTS e=employee
    PROPERTIES(e) READONLY   commonName, nameOfficerEmployee

    FILTERS                  priceChangeDocumentPriceChangeDocumentDetail(pcd) == pc,
                             inPriceChangeDocumentEmployee(pc, e)
;

toPrintActOfRevaluation 'Акт переоценки' (priceChangeDocument) = ACTION FORM actOfRevaluation OBJECTS pc IMAGE 'print.png' IN printGroup CONFIRM;


FORM priceChangeDocuments 'Акты переоценки'
    OBJECTS pc=priceChangeDocument
    PROPERTIES(pc) READONLY objectClassName, isPostedPriceChangeDocument FORCE GRID, dateTimePriceChangeDocument, nameDepartmentStorePriceChangeDocument,
                            numberPriceChangeDocument, seriesPriceChangeDocument, nameSupplierPriceChangeShipment, nameSupplierPriceChangeReturnSupplier,
                            nameSenderDepartmentPriceChangeInnerArrival,
                            diffSupplierISumPriceChangeDocumentDetailPriceChangeDocument, diffMarkupSumPriceChangeDocumentDetailPriceChangeDocument, diffRetailVATISumPriceChangeDocumentDetailPriceChangeDocument,
                            diffWareSumPriceChangeDocumentDetailPriceChangeDocument, diffWareVATSumPriceChangeDocumentDetailPriceChangeDocument, diffRetailSumPriceChangeDocumentDetailPriceChangeDocument, nameRevaluationCommitteePriceChangeDocument

    OBJECTS pcd=priceChangeDocumentDetail
    PROPERTIES(pcd) READONLY nameItemPriceChangeDocumentDetail, quantityPriceChangeDocumentDetail,
                             curImporterPricePriceChangeDocumentDetail, importerPricePriceChangeDocumentDetail,
                             curSupplierPricePriceChangeDocumentDetail, supplierPricePriceChangeDocumentDetail,
                             curDataRetailRangePriceChangeDocumentDetail, dataRetailRangePriceChangeDocumentDetail,
                             curRetailPricePriceChangeDocumentDetail, retailPricePriceChangeDocumentDetail,
                             curWarePricePriceChangeDocumentDetail, warePricePriceChangeDocumentDetail

    PROPERTIES(pc) FORCE PANEL toPrintActOfRevaluation

    FILTERS priceChangeDocumentPriceChangeDocumentDetail(pcd) == pc
;

DESIGN priceChangeDocuments FROM DEFAULT{
    main{
        ADD pc.box;
        ADD pcd.box;
        ADD pc.printGroup;
        ADD functions.box;
    }
}

FORM specificationPrint 'Счет-фактура' PRINT
    OBJECTS sp=specification FIXED PANEL
    PROPERTIES (sp) SELECTOR seriesNumberObject, nameDepartmentStoreSpecification, dateSpecification, dateToSpecification,
                    fullNameCustomerSpecification, UNPCustomerSpecification, addressCustomerSpecification,
                    dataAccountCustomerSpecification, nameBankAccountCustomerSpecification, addressBankAccountCustomerSpecification,
                    MFOBankAccountCustomerSpecification, departmentBankAccountCustomerSpecification, CBUBankAccountCustomerSpecification,
                    fullNameCompanySpecification, addressCompanySpecification, UNPCompanySpecification,
                    dataAccountCompanySpecification, nameBankAccountCompanySpecification, addressBankAccountCompanySpecification,
                    MFOBankAccountCompanySpecification, departmentBankAccountCompanySpecification, CBUBankAccountCompanySpecification,
                    nameObjectiveAcquiringSpecification, noteSpecification, phoneCustomerSpecification, phoneCompanySpecification,
                    quantitySpecificationDetailSpecification, calcSaleSumSpecificationDetailSpecification, calcVATSumSpecificationDetailSpecification, retailSumSpecificationDetailSpecification

    OBJECTS d=specificationDetail
    PROPERTIES (d) READONLY indexSpecificationDetail, barcodeExSkuSpecificationDetail, nameAttributeItemSpecificationDetail,
                            shortNameUnitOfMeasureItemSpecificationDetail, quantitySpecificationDetail,
                            retailPriceSpecificationDetail, calcSaleSumSpecificationDetail, numberCalcRangeSpecificationDetail, dataCalcRangeSpecificationDetail,
                            calcVATSumSpecificationDetail, retailSumSpecificationDetail

    FILTERS inSpecificationSpecificationDetail(sp, d)
;

toPrintSpecification 'Счет-фактура'(specification) = ACTION FORM specificationPrint OBJECTS sp IMAGE 'print.png' IN printGroup CONFIRM;

//------------------------------------------- Пересорт товара----------------------------------------------------//

toPrintActOfRevaluationDisparity 'Акт переоценки (приход)' (disparity) = toPrintActOfRevaluation(uniquePriceChangeDisparity(disparity)) IN printGroup;
toPrintActOfRevaluationMixDisparity 'Акт переоценки (остатки)' (disparity) = toPrintActOfRevaluation(uniqueMixPriceChangeDisparity(disparity)) IN printGroup;

FORM disparity 'Пересортица'

    OBJECTS dis=disparity FIXED PANEL

    PROPERTIES(dis) nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, nameDepartmentStoreDisparity,
                    dateDisparity, timeDisparity,
                    quantityOutputDetailDisparity, retailSumOutputDisparityDetailDisparity,
                    quantityInputDetailDisparity, retailSumInputDisparityDetailDisparity, numberDisposalDisparity, nameRevaluationCommitteeDisparity

    OBJECTS d=disparityDetail

    PROPERTIES(d)   indexDisparityDetail,
                    barcodeExSkuOutputDisparityDetail, nameAttributeItemOutputDisparityDetail, shortNameUnitOfMeasureItemOutputDisparityDetail,
                    quantityOutputDisparityDetail, retailPriceOutputDisparityDetail, retailSumOutputDisparityDetail,
                    barcodeExSkuInputDisparityDetail, nameAttributeItemInputDisparityDetail, shortNameUnitOfMeasureItemInputDisparityDetail,
                    quantityInputDisparityDetail, retailPriceInputDisparityDetail, retailSumInputDisparityDetail
    PROPERTIES(d) ADDOBJ, delete


    PROPERTIES (d)  FORCE PANEL importerPriceInputDisparityDetail, supplierPriceInputDisparityDetail, nameWareInputDisparityDetail,
                                warePriceInputDisparityDetail, dataRetailRangeInputDisparityDetail, curRetailPriceInputDisparityDetail,
                                balanceBeforeDisparityDetail

    FILTERS         disparityDisparityDetail(d) == dis

    EDIT disparity OBJECT dis
;

DESIGN disparity FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW header.box{
            childConstraints = TO THE RIGHT;
            NEW caseTwo {
                childConstraints = TO THE BOTTOM;
                ADD dis.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreDisparity);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateDisparity);
                    ADD PROPERTY(timeDisparity);
                }
                ADD dis.documentPrmGroup;
            }
                ADD dis.documentSumGroup {
                    childConstraints = TO THE BOTTOM;
                }

        }

        ADD d.box {
            childConstraints = TO THE BOTTOM;
            ADD d.priceDetailGroup {
                    childConstraints = TO THE RIGHT;
                    title = 'Цены (приход)';
                    ADD PROPERTY (importerPriceInputDisparityDetail);
                    ADD PROPERTY (supplierPriceInputDisparityDetail);
                    ADD PROPERTY (nameWareInputDisparityDetail);
                    ADD PROPERTY (warePriceInputDisparityDetail);
                    ADD PROPERTY (dataRetailRangeInputDisparityDetail);
                    ADD PROPERTY (curRetailPriceInputDisparityDetail);
            }
            NEW case {
                childConstraints = TO THE RIGHT;
                title = 'Остаток (приход)';
                ADD PROPERTY (balanceBeforeDisparityDetail);
            }
        }
        ADD functions.box;
    }
}

FORM disparities 'Пересортицы'

    OBJECTS dis=disparity
    PROPERTIES(dis)  READONLY objectClassName, numberObject, seriesObject, nameDepartmentStoreDisparity, dateDisparity, timeDisparity,
                              countDisparityDetailDisparity, quantityOutputDetailDisparity, retailSumOutputDisparityDetailDisparity,
                              quantityInputDetailDisparity, retailSumInputDisparityDetailDisparity

    PROPERTIES(dis)  READONLY FORCE PANEL timeCreated, nameUserCreated, hostnameComputerCreated, timeClosed, nameUserClosed, hostnameComputerClosed


    PROPERTIES (dis) toPrintActOfRevaluationDisparity FORCE PANEL SHOWIF needToPriceChangeDisparity(dis),
                     toPrintActOfRevaluationMixDisparity FORCE PANEL SHOWIF needToMixPriceChangeDisparity(dis),
                     ADDFORM, EDITFORM SHOWIF isDraftDisparity(dis), delete FORCE PANEL SHOWIF isDraftDisparity(dis),
                     postDisparity SHOWIF isDraftDisparity(dis), unpostDisparity SHOWIF isPostedDisparity(dis)

    OBJECTS d=disparityDetail
    PROPERTIES(d)   READONLY indexDisparityDetail,
                    barcodeExSkuOutputDisparityDetail, nameAttributeItemOutputDisparityDetail, shortNameUnitOfMeasureItemOutputDisparityDetail,
                    quantityOutputDisparityDetail, retailPriceOutputDisparityDetail, retailSumOutputDisparityDetail,
                    barcodeExSkuInputDisparityDetail, nameAttributeItemInputDisparityDetail, shortNameUnitOfMeasureItemInputDisparityDetail,
                    quantityInputDisparityDetail, retailPriceInputDisparityDetail, retailSumInputDisparityDetail

    FILTERS         disparityDisparityDetail(d) == dis
;
DESIGN disparities FROM DEFAULT {
    ADD dis.box {
        PROPERTY(objectClassName) {
            preferredCharWidth = 25;
        }
        PROPERTY (delete(dis)) {
            panelLocation = TOOLBAR;
            askConfirm = TRUE;
        }
    }
    ADD d.box;
    NEW caseOne {
        childConstraints = TO THE RIGHT;
        ADD dis.historyGroup {
            childConstraints = TO THE BOTTOM;
            fillHorizontal = 1;
        }
        ADD dis.postedGroup {
            childConstraints = TO THE BOTTOM;
            fillHorizontal = 1;
        }
        ADD dis.printGroup {
            childConstraints = TO THE BOTTOM;
            fillHorizontal = 1;
        }
    }
    ADD functions.box;
}

//------------------------------------------- Приход товара----------------------------------------------------//

toPrintPricesRegister 'Реестр цен' (shipment) = ACTION FORM pricesRegister OBJECTS s IMAGE 'print.png' IN printGroup CONFIRM;
toPrintActOfRevaluationShipment 'Акт переоценки' (shipment) = toPrintActOfRevaluation(uniquePriceChangeShipment(shipment)) IN printGroup;

FORM shipment 'Поставка'
    OBJECTS s=shipment FIXED PANEL
    PROPERTIES (s) nameDepartmentStoreShipment, numberObject, seriesObject, dateShipment, timeShipment,
                   nameSupplierShipment, UNPSupplierShipment, numberContractShipment, ordersShipment, toFillShipmentDetailsShipment,
                   percentOrderedShipmentDetailsShipment, showFormOrdersShipment,
                   carryingChargesShipment, quantityShipmentDetailShipment, invoiceVATSumShipmentDetailShipment, invoiceSumShipmentDetailShipment, retailSumShipmentDetailShipment,
                   noteShipment, toShowPriceImporterShipment, toShowWareShipment, toShowPapersShipment, nameRegisterCommitteeShipment, numberDisposalShipment SHOWIF needToPriceChangeShipment(s),
                   nameRevaluationCommitteeShipment SHOWIF needToPriceChangeShipment(s), nameWastageCommitteeShipment SHOWIF needToWasteShipment(s)

    OBJECTS d=shipmentDetail
    PROPERTIES (d)  indexShipmentDetail, barcodeExSkuShipmentDetail, nameAttributeItemShipmentDetail, quantityShipmentDetail,
                    supplierPriceShipmentDetail BACKGROUND isAllowPriceItemShipment(d), supplierMarkupShipmentDetail SHOWIF toShowPriceImporterShipment(s),
                    importerPriceShipmentDetail READONLY SHOWIF toShowPriceImporterShipment(s), dateFitToShipmentDetail,
                    balanceBeforeShipmentShipmentDetail, numberSupplierRangeShipmentDetail, dataSupplierRangeShipmentDetail,
                    supplierVATISumShipmentDetail, invoiceISumShipmentDetail, nameWareShipmentDetail SHOWIF toShowWareShipment(s),
                    warePriceShipmentDetail SHOWIF toShowWareShipment(s), numberRetailRangeShipmentDetail, dataRetailRangeShipmentDetail,
                    retailMarkupShipmentDetail, curRetailPriceShipmentDetail, retailPriceShipmentDetail,
                    numberCustomsCertificateShipmentDetail SHOWIF toShowPapersShipment(s),  numberCertificateGGRShipmentDetail SHOWIF toShowPapersShipment(s),
                    numberCertificateConformityShipmentDetail SHOWIF toShowPapersShipment(s), numberStateExaminationShipmentDetail SHOWIF toShowPapersShipment(s),
                    ADDOBJ, delete
    PROPERTIES (d) FORCE PANEL isFixPriceShipmentDetail,
                               controlExpiryItemShipmentDetail, isManufacturedItemShipmentDetail, isWeightItemShipmentDetail, nameInActionItemDepartmentShipmentDetail,
                               hintItemShipmentDetail, nameCountryItemShipmentDetail, nameBanRevaluationItemDepartmentShipmentDetail,
                               curImporterPriceShipmentDetail, curSupplierPriceShipmentDetail, curDataRetailRangeShipmentDetail, curNameWareShipmentDetail SHOWIF inWareShipmentDetail(d),
                               dataWareRangeShipmentDetail SHOWIF inWareShipmentDetail(d), curWarePriceShipmentDetail SHOWIF inWareShipmentDetail(d)


    PROPERTIES inputMultipleItemsShipment(s) TODRAW d, addShipmentDetailBarcode(s) TODRAW d, cleanAllShipmentDetailsShipment(s) FORCE PANEL TODRAW d

    FILTERS inShipmentShipmentDetail(s, d)

    OBJECTS i=item

    PROPERTIES (i) nameAttributeItem
    PROPERTIES (i, s) minAllowPriceItemShipment, maxAllowPriceItemShipment, quantityShipmentDetailItemShipment, sumQuantityOrderedItemShipment

    FILTERS isShippedOrOrderedItemShipment(i, s)

    HINTNOUPDATE LIST isPostedShipment,
                  balanceBItemLedgerDateTime, priceImporterBLedgerDateTime, wareBLedgerDateTime, warePriceBLedgerDateTime,
                  rangeRetailBLedgerDateTime, priceRetailBLedgerDateTime, priceSupplierBLedgerDateTime, priceAccountBLedgerDateTime

    EDIT shipment OBJECT s
;


DESIGN shipment FROM DEFAULT{
    main{
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            type = TABBED;
            ADD d.box {
                childConstraints = TO THE BOTTOM;
                title = 'Спецификация';
                ADD d.itemDetailGroup;
                ADD d.priceDetailGroup;
            };
            ADD i.box;
        };
        NEW header.box BEFORE specification.box {
            childConstraints = TO THE RIGHT;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;

                ADD s.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreShipment);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateShipment);
                    ADD PROPERTY(timeShipment);
                };

                NEW headerCol1Row2 {
                    childConstraints = TO THE RIGHT;
                    ADD s.documentPrmGroup {
                        childConstraints = TO THE BOTTOM;
                    }
                    ADD s.shipmentOrderGroup {
                        childConstraints = TO THE BOTTOM;
                    }
                }
            }

            ADD s.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        };
    };
};

FORM shipments 'Поставки'
    OBJECTS s=shipment
    PROPERTIES (s) READONLY objectClassName, numberObject, seriesObject, dateShipment, timeShipment, nameDepartmentStoreShipment,
                            nameSupplierShipment, countShipmentDetailShipment, supplierSumShipmentDetailShipment, invoiceVATSumShipmentDetailShipment,
                            invoiceSumShipmentDetailShipment, retailSumShipmentDetailShipment,
                            statusPrintPriceTransactionDocument BACKGROUND backgroundPrintLabelTransactionShipment(s),
                            statusEquipmentPriceTransactionDocument BACKGROUND backgroundCreateMachineryPriceTransactionShipment(s)

    PROPERTIES (s) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES (s)          createShipmentLabelTransaction FORCE PANEL SHOWIF showPrintLabelTransactionShipment(s),
                            createSnapshotShipmentLabelTransaction FORCE PANEL SHOWIF isPostedShipment(s),
                            createShipmentMachineryPriceTransaction FORCE PANEL SHOWIF showCreateMachineryPriceTransactionShipment(s),
                            createSnapshotShipmentMachineryPriceTransaction FORCE PANEL SHOWIF isPostedShipment(s),
                            toPrintActOfRevaluationShipment FORCE PANEL SHOWIF needToPriceChangeShipment(s), toPrintPricesRegister FORCE PANEL,
                            ADDFORM, EDITFORM SHOWIF isDraftShipment(s), delete FORCE PANEL SHOWIF isDraftShipment(s),
                            postShipment SHOWIF isDraftShipment(s), unpostShipment SHOWIF isPostedShipment(s)

    OBJECTS d=shipmentDetail
    PROPERTIES (d) READONLY  indexShipmentDetail, barcodeExSkuShipmentDetail, nameAttributeItemShipmentDetail, quantityShipmentDetail,
                             supplierPriceShipmentDetail, supplierMarkupShipmentDetail, importerPriceShipmentDetail, dateFitToShipmentDetail,
                             balanceBeforeShipmentShipmentDetail, numberSupplierRangeShipmentDetail, dataSupplierRangeShipmentDetail,
                             supplierVATISumShipmentDetail, invoiceISumShipmentDetail, nameWareShipmentDetail, warePriceShipmentDetail,
                             numberRetailRangeShipmentDetail, dataRetailRangeShipmentDetail, retailMarkupShipmentDetail,
                             curRetailPriceShipmentDetail, retailPriceShipmentDetail

    FILTERS inShipmentShipmentDetail(s, d)
;

DESIGN shipments FROM DEFAULT {
    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }

    PROPERTY (delete(s)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }

    s.printGroup {
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    }

    s.historyGroup {
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    }
    s.postedGroup {
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    }
    POSITION s.historyGroup TO THE LEFT s.postedGroup;
    POSITION s.postedGroup TO THE LEFT s.printGroup;
    POSITION s.historyGroup TO THE LEFT s.printGroup;

    ADD d.grid.box BEFORE s.historyGroup;
}

//-------------------------------Печатная форма---------------------------------//
FORM wastagePrint 'Списания отходов' PRINT

    OBJECTS w=wastage FIXED PANEL
    PROPERTIES (w) SELECTOR numberWastage, seriesWastage, dateWastage, timeWastage, nameCompanyWastage, nameDepartmentStoreWastage, nameSupplierWastage,
                   countWastageDetailWastage, quantityItemWastageDetailWastage, quantityWastageDetailWastage, supplierISumWastageDetailWastage,
                   markupSumWastageDetailWastage, retailVATSumWastageDetailWastage, retailSumWastageDetailWastage, wastageCommitteeWastage

    OBJECTS d=wastageDetail
    PROPERTIES (d) SELECTOR indexWastageDetail, barcodeExSkuWastageDetail, nameItemWastageDetail, quantityItemWastageDetail, quantityWastageDetail, percentRateWasteWastageDetail,
                   supplierISumWastageDetail, markupSumWastageDetail, retailVATSumWastageDetail, retailSumWastageDetail

    OBJECTS e=employee
    PROPERTIES(e) SELECTOR   commonName, nameOfficerEmployee
    OBJECTS a=employee
    PROPERTIES(a) SELECTOR   commonNameEmployee, nameOfficerEmployee

    FILTERS                  wastageWastageDetail(d)== w,
                             inWastageEmployee(w, e),
                             inWastageEmployee(w, a)
;

toPrintWastage 'Списание отходов' (wastage) = ACTION FORM wastagePrint OBJECTS w IMAGE 'print.png' IN printGroup CONFIRM;

FORM wastages 'Списания отходов'

    OBJECTS w=wastage
    PROPERTIES (w) READONLY numberWastage, seriesWastage, dateWastage, timeWastage, nameDepartmentStoreWastage, nameSupplierWastage,
                   countWastageDetailWastage, quantityItemWastageDetailWastage, quantityWastageDetailWastage, supplierISumWastageDetailWastage, markupSumWastageDetailWastage,
                   retailVATSumWastageDetailWastage, retailSumWastageDetailWastage, nameWastageCommitteeWastage

    OBJECTS d=wastageDetail
    PROPERTIES (d) READONLY indexWastageDetail, barcodeExSkuWastageDetail, nameItemWastageDetail, quantityItemWastageDetail, quantityWastageDetail,
                   supplierISumWastageDetail, markupSumWastageDetail, retailVATSumWastageDetail, retailSumWastageDetail

    PROPERTIES     FORCE PANEL toPrintWastage(w) TODRAW d

    FILTERS wastageWastageDetail(d)== w;
;

//-----------------------------------Формы возврата поставщику-------------------------------------------------------

@metaCodeInputMultipleItemsSupplier(returnSupplier);

toPrintActOfRevaluationReturnSupplier 'Акт переоценки' (returnSupplier) = toPrintActOfRevaluation(uniquePriceChangeReturnSupplier(returnSupplier)) IN printGroup;

FORM commonInfoBatchReturnSupplierDetail 'Партии'
    OBJECTS b=shipmentDetail    //
    PROPERTIES(b) READONLY seriesShipmentDetail, numberShipmentDetail, dateShipmentDetail,
                           quantityShipmentDetail, supplierPriceShipmentDetail, dataSupplierRangeShipmentDetail,
                           retailPriceShipmentDetail
    DIALOG shipmentDetail OBJECT b;     // batchShipment
;


FORM returnSupplier 'Возврат поставщику'
    OBJECTS r=returnSupplier FIXED PANEL
    PROPERTIES(r) numberObject, seriesObject, dateReturnSupplier, timeReturnSupplier,
                  nameDepartmentStoreReturnSupplier, nameSupplierReturnSupplier, UNPSupplierReturnSupplier, numberContractReturnSupplier, noteReturnSupplier, carryingChargesReturnSupplier,
                  quantityReturnSupplierDetailReturnSupplier, invoiceVATSumReturnSupplierDetailReturnSupplier, invoiceSumReturnSupplierDetailReturnSupplier,
                  retailSumReturnSupplierDetailReturnSupplier, returnLossSupplierReturnSupplier, numberDisposalReturnSupplier SHOWIF needToPriceChangeReturnSupplier(r),
                  nameRevaluationCommitteeReturnSupplier SHOWIF needToPriceChangeReturnSupplier(r)

    PROPERTIES(r) carConsignment, ownerCarConsignment, trailerConsignment, driverCarConsignment, waybillConsignment,
                  nameTransportPayerConsignment, shipmentBaseConsignment, loadingPlaceConsignment, unloadingPlaceConsignment,
                  readdressingConsignment, commonNameIssuanceAllowedConsignment, commonNameIssuanceExecutedConsignment,
                  forwarderConsignment, warrantConsignment, warrantHolderConsignment, goodsAcceptedConsignment,
                  commonNameLoadingExecuterConsignment, nameWayOfLoadingConsignment, codeLoadingConsignment,
                  arrivalTimeConsignment, departureTimeConsignment, downtimeConsignment, raceQuantityConsignment,
                  sumQuantityConsignment, sumPackQuantityConsignment, sumGrossWeightConsignmentDetail,
                  sumCostConsignmentDetail, totalSumVATConsignmentDetail, costWithVATConsignment

    OBJECTS d=returnSupplierDetail
    PROPERTIES(d) indexReturnSupplierDetail, barcodeExSkuReturnSupplierDetail, nameAttributeItemReturnSupplierDetail,
                  commonInfoBatchReturnSupplierDetail, quantityReturnSupplierDetail, supplierPriceReturnSupplierDetail,
                  supplierMarkupReturnSupplierDetail, importerPriceReturnSupplierDetail READONLY, numberSupplierRangeReturnSupplierDetail,
                  dataSupplierRangeReturnSupplierDetail, supplierVATISumReturnSupplierDetail, invoiceISumReturnSupplierDetail,
                  nameWareReturnSupplierDetail, warePriceReturnSupplierDetail, numberRetailRangeReturnSupplierDetail, dataRetailRangeReturnSupplierDetail,
                  retailPriceReturnSupplierDetail
    PROPERTIES(d) ADDOBJ, delete
    PROPERTIES inputMultipleItemsSupplierReturnSupplier(r) TODRAW d, addReturnSupplierDetailBarcode(r) TODRAW d, cleanAllReturnSupplierDetailsReturnSupplier(r) FORCE PANEL TODRAW d
    PROPERTIES FORCE PANEL READONLY curImporterPriceReturnSupplierDetail(d), curSupplierPriceReturnSupplierDetail(d),
                                    curRetailPriceReturnSupplierDetail(d), curDataRetailRangeReturnSupplierDetail(d),
                                    controlExpiryItemReturnSupplierDetail(d), isManufacturedItemReturnSupplierDetail(d),
                                    isWeightItemReturnSupplierDetail(d), nameInActionItemDepartmentReturnSupplierDetail(d),
                                    hintItemReturnSupplierDetail(d), nameCountryItemReturnSupplierDetail(d),
                                    nameBanRevaluationItemDepartmentReturnSupplierDetail(d), dataWareRangeReturnSupplierDetail(d),
                                    curNameWareReturnSupplierDetail(d), curWarePriceReturnSupplierDetail(d)

    FILTERS returnSupplierReturnSupplierDetail(d) == r

    EDIT returnSupplier OBJECT r
;

FORM returnSuppliers 'Возвраты поставщику'

    OBJECTS r=returnSupplier
    PROPERTIES(r) READONLY objectClassName, numberObject, seriesObject, dateReturnSupplier, timeReturnSupplier,
                           nameDepartmentStoreReturnSupplier, nameSupplierReturnSupplier, noteReturnSupplier, carryingChargesReturnSupplier,
                           quantityReturnSupplierDetailReturnSupplier, invoiceVATSumReturnSupplierDetailReturnSupplier, invoiceSumReturnSupplierDetailReturnSupplier, retailSumReturnSupplierDetailReturnSupplier
    PROPERTIES (r) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES(r) FORCE PANEL toPrintTransportConsignmentVerticalA, toPrintTransportConsignmentHorizontalA,
                              toPrintTransportConsignmentVerticalB, toPrintTransportConsignmentHorizontalB,
                              toPrintTransportConsignmentAttach, toPrintConsignmentTwoHorizontal,
                              toPrintConsignmentTwoVertical, toPrintConsignmentTwoAttach,
                              toPrintActOfRevaluationReturnSupplier SHOWIF needToPriceChangeReturnSupplier(r)

    PROPERTIES(r) postReturnSupplier SHOWIF isDraftReturnSupplier(r), unpostReturnSupplier SHOWIF isPostedReturnSupplier(r),
                  ADDFORM, EDITFORM SHOWIF isDraftReturnSupplier(r), delete FORCE PANEL SHOWIF isDraftReturnSupplier(r)

    OBJECTS d=returnSupplierDetail
    PROPERTIES(d) READONLY indexReturnSupplierDetail, barcodeExSkuReturnSupplierDetail, nameAttributeItemReturnSupplierDetail,
                           commonInfoBatchReturnSupplierDetail, quantityReturnSupplierDetail, supplierPriceReturnSupplierDetail,
                           supplierMarkupReturnSupplierDetail, importerPriceReturnSupplierDetail, numberSupplierRangeReturnSupplierDetail,
                           dataSupplierRangeReturnSupplierDetail, supplierVATISumReturnSupplierDetail, invoiceISumReturnSupplierDetail,
                           nameWareReturnSupplierDetail, warePriceReturnSupplierDetail, numberRetailRangeReturnSupplierDetail, dataRetailRangeReturnSupplierDetail,
                           retailPriceReturnSupplierDetail
    FILTERS returnSupplierReturnSupplierDetail(d) == r
;

DESIGN returnSupplier FROM DEFAULT {

    NEW specification.box BEFORE functions.box{
        type = TABBED;

        ADD d.box{
            title = 'Спецификация';
            ADD d.grid{
                fillVertical = 12;
            };
            ADD d.panel{
            childConstraints = TO THE RIGHT;
                NEW curVal {
                    childConstraints = TO THE BOTTOM;
                    title = 'Текущие ценовые параметры';
                    ADD PROPERTY(curImporterPriceReturnSupplierDetail);
                    ADD PROPERTY(curSupplierPriceReturnSupplierDetail);
                    ADD PROPERTY(curRetailPriceReturnSupplierDetail);
                    ADD PROPERTY(curDataRetailRangeReturnSupplierDetail);
                };
                ADD d.itemDetailGroup;
                NEW ware {
                    childConstraints = TO THE BOTTOM;
                    title = 'Посуда';
                    ADD PROPERTY(curNameWareReturnSupplierDetail);
                    ADD PROPERTY(curWarePriceReturnSupplierDetail);
                    ADD PROPERTY(dataWareRangeReturnSupplierDetail);
                };
            };
        };
        NEW consignment{
            title = 'Накладная';
            childConstraints = TO THE BOTTOM;
            ADD r.carConsignmentGroup;
            ADD r.issuanceConsignmentGroup;
            ADD r.loadingConsignmentGroup;
            ADD r.sumConsignmentGroup{
                childConstraints = TO THE RIGHT;
            };
            POSITION r.issuanceConsignmentGroup TO THE RIGHT r.carConsignmentGroup;
            POSITION r.loadingConsignmentGroup TO THE RIGHT r.carConsignmentGroup;
            POSITION r.sumConsignmentGroup TO THE RIGHT r.carConsignmentGroup;
        };
    };

    NEW header.box BEFORE specification.box {

        childConstraints = TO THE RIGHT;

        NEW headerCol1 {
            childConstraints = TO THE BOTTOM;

            ADD r.documentHeaderGroup {
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(nameDepartmentStoreReturnSupplier);
                ADD PROPERTY(numberObject);
                ADD PROPERTY(seriesObject);
                ADD PROPERTY(dateReturnSupplier);
                ADD PROPERTY(timeReturnSupplier);
            };

            ADD r.documentPrmGroup {
                childConstraints = TO THE BOTTOM;
            };
        }

        ADD r.documentSumGroup{
            childConstraints = TO THE BOTTOM;
        };
    };

    ADD PROPERTY(delete(d)){
        askConfirm=TRUE;
    }
}

DESIGN returnSuppliers FROM DEFAULT{

    ADD PROPERTY(delete(r)){
        panelLocation=TOOLBAR;
        askConfirm=TRUE;
    }

    ADD r.printGroup BEFORE functions.box {
        childConstraints = TO THE RIGHT;
        NEW ttn1{
            childConstraints = TO THE RIGHT;
            title = 'ТТН-1';
            NEW a{
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(toPrintTransportConsignmentVerticalA);
                ADD PROPERTY(toPrintTransportConsignmentHorizontalA);
            }
            NEW b{
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(toPrintTransportConsignmentVerticalB);
                ADD PROPERTY(toPrintTransportConsignmentHorizontalB);
            }
            NEW c{
                ADD PROPERTY(toPrintTransportConsignmentAttach);
            }
        }
        NEW tn{
            childConstraints = TO THE RIGHT;
            title = 'ТН-2';
            NEW a1{
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(toPrintConsignmentTwoVertical);
                ADD PROPERTY(toPrintConsignmentTwoHorizontal);
            }
            NEW b1{
                ADD PROPERTY(toPrintConsignmentTwoAttach);
            }
        }
//        fillHorizontal = 1;
    };

    ADD r.historyGroup BEFORE r.printGroup {
        childConstraints = TO THE BOTTOM;
    };
    ADD r.postedGroup BEFORE r.printGroup {
        childConstraints = TO THE BOTTOM;
    };

    POSITION r.historyGroup TO THE LEFT r.postedGroup;
    POSITION r.printGroup TO THE BOTTOM r.historyGroup;
}

DESIGN commonInfoBatchReturnSupplierDetail FROM DEFAULT {
    main {
        preferredSize = (800, 500);
    };
}

// ---------------------------------- Контроль предельных надбавок ------------------------------------------

// todo : здесь надо деление на 0 во что-то обернуть - иначе будет division by zero
CONSTRAINT [(X*(Y+100)/Z/100-1)*100](
            supplierPriceShipmentDetail(shipmentDetail), retailMarkupShipmentDetail(shipmentDetail), importerPriceShipmentDetail(shipmentDetail))
                >
            maxTradeAllowanceItem (itemShipmentDetail(shipmentDetail)) MESSAGE 'Превышена предельно допустимая наценка';

CONSTRAINT commonMarkupPriceChangeDocumentDetail (priceChangeDocumentDetail) >
    maxTradeAllowanceItem (itemPriceChangeDocumentDetail(priceChangeDocumentDetail)) MESSAGE 'Превышена предельно допустимая наценка';

//------------------------------------ Изменение учетных сумм ------------------------------------------//

GROUP ledgerByItemGroup 'Суммы по товару' : baseGroup;
GROUP ledgerByContainerGroup 'Суммы по таре' : baseGroup;
GROUP ledgerGroup 'Суммы общие' : baseGroup;

dateTimeAccountSumDocumentLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeShipment(ledger),
                                                                         dateTimeReturnSupplier(ledger),
                                                                         dateTimeInnerArrival(ledger),
                                                                         dateTimePriceChangeDocument(ledger),
                                                                         dateTimeWriteOff(ledger),
                                                                         dateTimeStatement(ledger),
                                                                         dateTimeInnerFlow(ledger),
                                                                         dateTimeWastage(ledger),
                                                                         dateTimeInventory(inventoryCollationSheet(ledger)),
                                                                         dateTimeZReport(ledger),
                                                                         dateTimeSaleDiscountDocument(ledger),
                                                                         dateTimeParish(ledger),
                                                                         dateTimeConsumption(ledger) PERSISTENT INDEXED;

descriptionDocumentLedger 'Название документа' (ledger) = UNION EXCLUSIVE descriptionShipment(ledger),
                                                                          descriptionReturnSupplier(ledger),
                                                                          descriptionInnerArrival(ledger),
                                                                          descriptionPriceChangeDocument(ledger),
                                                                          descriptionWriteOff(ledger),
                                                                          descriptionStatement(ledger),
                                                                          descriptionInnerFlow(ledger),
                                                                          descriptionWastage(ledger),
                                                                          descriptionCollationSheet(ledger),
                                                                          descriptionZReport(ledger),
                                                                          descriptionSaleDiscountDocument(ledger),
                                                                          descriptionParish(ledger),
                                                                          descriptionConsumption(ledger) PERSISTENT;
                                                                          //descriptionUserPriceChange(ledger) PERSISTENT;


dateAccountSumDocumentLedger 'Дата' (ledger) = dateInTime(dateTimeAccountSumDocumentLedger(ledger)) PERSISTENT;

isPostedAccountSumDocumentLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedShipment(ledger),
                                                                     isPostedReturnSupplier(ledger),
                                                                     isPostedInnerArrival(ledger),
                                                                     isPostedPriceChangeDocument(ledger),
                                                                     isPostedWriteOff(ledger),
                                                                     isPostedStatement(ledger),
                                                                     isPostedInnerFlow(ledger),
                                                                     isPostedWastage(ledger),
                                                                     isPostedInventory(inventoryCollationSheet(ledger)),
                                                                     isPostedZReport(ledger),
                                                                     isPostedSaleDiscountDocument(ledger),
                                                                     isPostedParish(ledger),
                                                                     isPostedConsumption(ledger) PERSISTENT TABLE accountSumDocumentLedger;

departmentStoreAccountSumDocumentLedger (ledger) = UNION EXCLUSIVE departmentStoreShipment(ledger),
                                                                   departmentStoreReturnSupplier(ledger),
                                                                   departmentStoreInnerArrival(ledger),
                                                                   departmentStorePriceChangeDocument(ledger),
                                                                   departmentStoreWriteOff(ledger),
                                                                   departmentStoreStatement(ledger),
                                                                   departmentStoreInnerFlow(ledger),
                                                                   departmentStoreWastage(ledger),
                                                                   departmentStoreCollationSheet(ledger),
                                                                   departmentStoreZReport(ledger),
                                                                   departmentStoreSaleDiscountDocument(ledger),
                                                                   departmentStoreParish(ledger),
                                                                   departmentStoreConsumption(ledger) PERSISTENT;

nameDepartmentStoreAccountSumDocumentLedger 'Отдел магазина' (ledger) = name(departmentStoreAccountSumDocumentLedger(ledger));

sumIncAccountDocumentLedger 'Сумма прихода' (ledger) = UNION EXCLUSIVE retailSumShipmentDetailShipment(ledger),
                                                                       retailSumInnerArrivalDetailInnerArrival(ledger),
                                                                       diffRetailSumPriceChangeDocumentDetailPriceChangeDocument(ledger),
                                                                       retailSumParish(ledger) PERSISTENT IN ledgerGroup;

sumIncAccountByItemDocumentLedger 'Сумма прихода, товар' (ledger) = UNION EXCLUSIVE retailSumItemShipmentDetailShipment(ledger),
                                                                                    retailSumItemInnerArrivalDetailInnerArrival(ledger),
                                                                                    diffRetailSumItemPriceChangeDocumentDetailPriceChangeDocument(ledger),
                                                                                    retailSumParish(ledger) PERSISTENT IN ledgerByItemGroup;//      subtotalByItemParish(ledger)

sumIncAccountByContainerDocumentLedger 'Сумма прихода, тара' (ledger) = UNION EXCLUSIVE retailSumContainerShipmentDetailShipment(ledger),
                                                                                        retailSumContainerInnerArrivalDetailInnerArrival(ledger),
                                                                                        diffRetailSumContainerPriceChangeDocumentDetailPriceChangeDocument(ledger) PERSISTENT IN ledgerByContainerGroup; //  subtotalByContainerParish(ledger)

sumOutAccountDocumentLedger 'Сумма расхода' (ledger) = UNION EXCLUSIVE accountSumWriteOffDetailWriteOff(ledger),
                                                                       retailSumReturnSupplierDetailReturnSupplier(ledger),
                                                                       retailSumInnerFlowDetailInnerFlow(ledger),
                                                                       retailSumStatementDetailStatement(ledger),
                                                                       retailSumWastageDetailWastage(ledger),
                                                                       accountSumShortageCollationSheet(ledger),
                                                                       retailSumBillDetailZReport(ledger),
                                                                       discountSaleDiscountDocument(ledger),
                                                                       retailSumConsumption(ledger) PERSISTENT IN ledgerGroup;


sumOutAccountByItemDocumentLedger 'Сумма расхода, товар' (ledger) = UNION EXCLUSIVE accountSumItemWriteOffDetailWriteOff(ledger),
                                                                       retailSumItemReturnSupplierDetailReturnSupplier(ledger),
                                                                       retailSumItemInnerFlowDetailInnerFlow(ledger),
                                                                       retailSumItemStatementDetailStatement(ledger),
                                                                       retailSumItemWastageDetailWastage(ledger),
                                                                       accountSumItemShortageCollationSheet(ledger),
                                                                       retailSumBillDetailZReport(ledger),
                                                                       discountSaleDiscountDocument(ledger),
                                                                       retailSumConsumption(ledger) PERSISTENT IN ledgerByItemGroup;



sumOutAccountByContainerDocumentLedger 'Сумма расхода, тара' (ledger) = UNION EXCLUSIVE accountSumContainerWriteOffDetailWriteOff(ledger),
                                                                       retailSumContainerReturnSupplierDetailReturnSupplier(ledger),
                                                                       retailSumContainerInnerFlowDetailInnerFlow(ledger),
                                                                       retailSumContainerStatementDetailStatement(ledger),
                                                                       accountSumContainerShortageCollationSheet(ledger) PERSISTENT IN ledgerByContainerGroup;
//
quantityIncAccountSumDocumentLedger 'Количество приходных док-ов' (departmentStore, dtFrom, dtTo)=
    GROUP SUM 1 IF incAccountSumDocumentLedger AS incAccountSumDocumentLedger AND isPostedAccountSumDocumentLedger(incAccountSumDocumentLedger)
        AND dateAccountSumDocumentLedger(incAccountSumDocumentLedger) >= (dtFrom AS DATE) AND dateAccountSumDocumentLedger(incAccountSumDocumentLedger) <= (dtTo AS DATE)
            BY departmentStoreAccountSumDocumentLedger(incAccountSumDocumentLedger), dtFrom, dtTo IN ledgerGroup;

quantityOutAccountSumDocumentLedger 'Количество расходных док-ов' (departmentStore, dtFrom, dtTo)=
    GROUP SUM 1 IF outAccountSumDocumentLedger AS outAccountSumDocumentLedger AND isPostedAccountSumDocumentLedger(outAccountSumDocumentLedger)
        AND dateAccountSumDocumentLedger(outAccountSumDocumentLedger) >= (dtFrom AS DATE) AND dateAccountSumDocumentLedger(outAccountSumDocumentLedger) <= (dtTo AS DATE)
            BY departmentStoreAccountSumDocumentLedger(outAccountSumDocumentLedger), dtFrom, dtTo IN ledgerGroup;


totalSumIncAccountSumByItemDocumentLedger 'Общая сумма прихода, товар' (departmentStore, dtFrom, dtTo)=
    GROUP SUM sumIncAccountByItemDocumentLedger(incAccountSumDocumentLedger)  AND isPostedAccountSumDocumentLedger(incAccountSumDocumentLedger)
        AND dateAccountSumDocumentLedger(incAccountSumDocumentLedger) >= (dtFrom AS DATE) AND dateAccountSumDocumentLedger(incAccountSumDocumentLedger) <= (dtTo AS DATE)
            BY departmentStoreAccountSumDocumentLedger(incAccountSumDocumentLedger), dtFrom, dtTo IN ledgerByItemGroup;
totalSumIncAccountSumByContainerDocumentLedger 'Общая сумма прихода, тара' (departmentStore, dtFrom, dtTo)=
    GROUP SUM sumIncAccountByContainerDocumentLedger(incAccountSumDocumentLedger) AND isPostedAccountSumDocumentLedger(incAccountSumDocumentLedger)
        AND dateAccountSumDocumentLedger(incAccountSumDocumentLedger) >= (dtFrom AS DATE) AND dateAccountSumDocumentLedger(incAccountSumDocumentLedger) <= (dtTo AS DATE)
            BY departmentStoreAccountSumDocumentLedger(incAccountSumDocumentLedger), dtFrom, dtTo IN ledgerByContainerGroup;


totalSumOutAccountSumByItemDocumentLedger 'Общая сумма расхода, товар' (departmentStore, dtFrom, dtTo)=
    GROUP SUM sumOutAccountByItemDocumentLedger(outAccountSumDocumentLedger) AND isPostedAccountSumDocumentLedger(outAccountSumDocumentLedger)
        AND dateAccountSumDocumentLedger(outAccountSumDocumentLedger) >= (dtFrom AS DATE) AND dateAccountSumDocumentLedger(outAccountSumDocumentLedger) <= (dtTo AS DATE)
            BY departmentStoreAccountSumDocumentLedger(outAccountSumDocumentLedger), dtFrom, dtTo IN ledgerByItemGroup;
totalSumOutAccountSumByContainerDocumentLedger 'Общая сумма расхода, тара' (departmentStore, dtFrom, dtTo)=
    GROUP SUM sumOutAccountByContainerDocumentLedger(outAccountSumDocumentLedger) AND isPostedAccountSumDocumentLedger(outAccountSumDocumentLedger)
        AND dateAccountSumDocumentLedger(outAccountSumDocumentLedger) >= (dtFrom AS DATE) AND dateAccountSumDocumentLedger(outAccountSumDocumentLedger) <= (dtTo AS DATE)
            BY departmentStoreAccountSumDocumentLedger(outAccountSumDocumentLedger), dtFrom, dtTo IN ledgerByContainerGroup;

sumAccountDocumentLedger 'Сумма' (ledger) = UNION EXCLUSIVE sumIncAccountDocumentLedger(ledger), -sumOutAccountDocumentLedger(ledger) PERSISTENT;

sumAccountByItemDocumentLedger 'Сумма, товар' (ledger) = UNION EXCLUSIVE sumIncAccountByItemDocumentLedger(ledger), -sumOutAccountByItemDocumentLedger(ledger) PERSISTENT;
sumAccountByContainerDocumentLedger 'Сумма, тара' (ledger) = UNION EXCLUSIVE sumIncAccountByContainerDocumentLedger(ledger), -sumOutAccountByContainerDocumentLedger(ledger) PERSISTENT;

currentSumAccountDocumentLedger 'Текущий остаток по документам' (departmentStore) = GROUP SUM sumAccountDocumentLedger (ledger) AND isPostedAccountSumDocumentLedger(ledger)
                                                                                           BY departmentStoreAccountSumDocumentLedger(ledger) PERSISTENT;

currentSumAccountByItemDocumentLedger 'Текущий остаток по документам, товар' (departmentStore) = GROUP SUM sumAccountByItemDocumentLedger (ledger) AND isPostedAccountSumDocumentLedger(ledger)
                                                                                           BY departmentStoreAccountSumDocumentLedger(ledger) PERSISTENT;
currentSumAccountByContainerDocumentLedger 'Текущий остаток по документам, тара' (departmentStore) = GROUP SUM sumAccountByContainerDocumentLedger (ledger) AND isPostedAccountSumDocumentLedger(ledger)
                                                                                           BY departmentStoreAccountSumDocumentLedger(ledger) PERSISTENT;
//без учета текущей даты/времени
sumAccountBDocumentLedgerDateTime (departmentStore, dateTime) = UNION SUM currentSumAccountDocumentLedger(departmentStore) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM sumAccountDocumentLedger (ledger) AND dateTimeAccountSumDocumentLedger(ledger) >= (dateTime AS DATETIME) AND isPostedAccountSumDocumentLedger(ledger)
                                                                         BY departmentStoreAccountSumDocumentLedger(ledger), dateTime](departmentStore, dateTime);

sumAccountBDocumentLedgerDate 'Остаток на начало' (departmentStore, date) = UNION SUM currentSumAccountDocumentLedger(departmentStore) AND date IS DATE,
                                                                            -[GROUP SUM sumAccountDocumentLedger (ledger) AND dateAccountSumDocumentLedger(ledger) >= (date AS DATE) AND isPostedAccountSumDocumentLedger(ledger)
                                                                            BY departmentStoreAccountSumDocumentLedger(ledger), date](departmentStore, date) IN ledgerGroup;

sumAccountByItemBDocumentLedgerDateTime (departmentStore, dateTime) = UNION SUM currentSumAccountByItemDocumentLedger(departmentStore) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM sumAccountByItemDocumentLedger (ledger) AND dateTimeAccountSumDocumentLedger(ledger) >= (dateTime AS DATETIME) AND isPostedAccountSumDocumentLedger(ledger)
                                                                         BY departmentStoreAccountSumDocumentLedger(ledger), dateTime](departmentStore, dateTime);

sumAccountByItemBDocumentLedgerDate 'Остаток на начало, товар' (departmentStore, date) = UNION SUM currentSumAccountByItemDocumentLedger(departmentStore) AND date IS DATE,
                                                                            -[GROUP SUM sumAccountByItemDocumentLedger (ledger) AND dateAccountSumDocumentLedger(ledger) >= (date AS DATE) AND isPostedAccountSumDocumentLedger(ledger)
                                                                            BY departmentStoreAccountSumDocumentLedger(ledger), date](departmentStore, date) IN ledgerByItemGroup;

sumAccountByContainerBDocumentLedgerDateTime (departmentStore, dateTime) = UNION SUM currentSumAccountByContainerDocumentLedger(departmentStore) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM sumAccountByContainerDocumentLedger (ledger) AND dateTimeAccountSumDocumentLedger(ledger) >= (dateTime AS DATETIME) AND isPostedAccountSumDocumentLedger(ledger)
                                                                         BY departmentStoreAccountSumDocumentLedger(ledger), dateTime](departmentStore, dateTime);

sumAccountByContainerBDocumentLedgerDate 'Остаток на начало, тара' (departmentStore, date) = UNION SUM currentSumAccountByContainerDocumentLedger(departmentStore) AND date IS DATE,
                                                                            -[GROUP SUM sumAccountByContainerDocumentLedger (ledger) AND dateAccountSumDocumentLedger(ledger) >= (date AS DATE) AND isPostedAccountSumDocumentLedger(ledger)
                                                                            BY departmentStoreAccountSumDocumentLedger(ledger), date](departmentStore, date) IN ledgerByContainerGroup;

subtotalIncAccountSumByItemDocumentLedger 'Итого с остатком, товар' (departmentStore, dtFrom, dtTo) = UNION SUM
    sumAccountByItemBDocumentLedgerDate(departmentStore, dtFrom) AND dtTo AS DATE,
    totalSumIncAccountSumByItemDocumentLedger(departmentStore, dtFrom, dtTo) IN ledgerByItemGroup;
subtotalIncAccountSumByContainerDocumentLedger 'Итого с остатком, тара' (departmentStore, dtFrom, dtTo) = UNION SUM
    sumAccountByContainerBDocumentLedgerDate(departmentStore, dtFrom) AND dtTo AS DATE,
    totalSumIncAccountSumByContainerDocumentLedger(departmentStore, dtFrom, dtTo) IN ledgerByContainerGroup;


//с учетом текущей даты/времени
sumAccountADocumentLedgerDateTime (departmentStore, dateTime) = UNION SUM currentSumAccountDocumentLedger(departmentStore) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM sumAccountDocumentLedger (ledger) AND dateTimeAccountSumDocumentLedger(ledger) > (dateTime AS DATETIME) AND isPostedAccountSumDocumentLedger(ledger)
                                                                         BY departmentStoreAccountSumDocumentLedger(ledger), dateTime](departmentStore, dateTime);

sumAccountADocumentLedgerDate 'Остаток на конец' (departmentStore, date) = UNION SUM currentSumAccountDocumentLedger(departmentStore) AND date IS DATE,
                                                                           -[GROUP SUM sumAccountDocumentLedger (ledger) AND dateAccountSumDocumentLedger(ledger) > (date AS DATE) AND isPostedAccountSumDocumentLedger(ledger)
                                                                           BY departmentStoreAccountSumDocumentLedger(ledger), date](departmentStore, date) IN ledgerGroup;

sumAccountByItemADocumentLedgerDateTime (departmentStore, dateTime) = UNION SUM currentSumAccountByItemDocumentLedger(departmentStore) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM sumAccountByItemDocumentLedger (ledger) AND dateTimeAccountSumDocumentLedger(ledger) > (dateTime AS DATETIME) AND isPostedAccountSumDocumentLedger(ledger)
                                                                         BY departmentStoreAccountSumDocumentLedger(ledger), dateTime](departmentStore, dateTime);

sumAccountByItemADocumentLedgerDate 'Остаток на конец, товар' (departmentStore, date) = UNION SUM currentSumAccountByItemDocumentLedger(departmentStore) AND date IS DATE,
                                                                           -[GROUP SUM sumAccountByItemDocumentLedger (ledger) AND dateAccountSumDocumentLedger(ledger) > (date AS DATE) AND isPostedAccountSumDocumentLedger(ledger)
                                                                           BY departmentStoreAccountSumDocumentLedger(ledger), date](departmentStore, date) IN ledgerByItemGroup;

sumAccountByContainerADocumentLedgerDateTime (departmentStore, dateTime) = UNION SUM currentSumAccountByContainerDocumentLedger(departmentStore) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM sumAccountByContainerDocumentLedger (ledger) AND dateTimeAccountSumDocumentLedger(ledger) > (dateTime AS DATETIME) AND isPostedAccountSumDocumentLedger(ledger)
                                                                         BY departmentStoreAccountSumDocumentLedger(ledger), dateTime](departmentStore, dateTime);

sumAccountByContainerADocumentLedgerDate 'Остаток на конец, тара' (departmentStore, date) = UNION SUM currentSumAccountByContainerDocumentLedger(departmentStore) AND date IS DATE,
                                                                           -[GROUP SUM sumAccountByContainerDocumentLedger (ledger) AND dateAccountSumDocumentLedger(ledger) > (date AS DATE) AND isPostedAccountSumDocumentLedger(ledger)
                                                                           BY departmentStoreAccountSumDocumentLedger(ledger), date](departmentStore, date) IN ledgerByContainerGroup;

// ------------------------- Печатная форма----------------------------- //
FORM sumAccountDocumentLedgerPrint 'Товарный отчет' PRINT
    OBJECTS params = (dtFrom = DATE, dtTo = DATE) FIXED PANEL,
            ds = departmentStore FIXED PANEL
    PROPERTIES objFrom = OBJVALUE(dtFrom), objTo = OBJVALUE(dtTo)
    PROPERTIES(ds) SELECTOR name, nameStoreDepartmentStore, nameCompanyDepartmentStore, UNPDepartmentStore,
    commonNameMRPDepartmentStore, nameOfficerMRPDepartmentStore, commonNameBookkeeperDepartmentStore,
    nameOfficerBookkeeperDepartmentStore, commonNamePersonCheckDepartmentStore, nameOfficerPersonCheckDepartmentStore

    PROPERTIES sumAccountBDocumentLedgerDate(ds, dtFrom), sumAccountByItemBDocumentLedgerDate(ds, dtFrom), sumAccountByContainerBDocumentLedgerDate(ds, dtFrom),
               sumAccountByItemADocumentLedgerDate(ds, dtFrom), sumAccountByContainerADocumentLedgerDate(ds, dtFrom), sumAccountADocumentLedgerDate(ds, dtTo)
    PROPERTIES(ds, dtFrom, dtTo) quantityIncAccountSumDocumentLedger, quantityOutAccountSumDocumentLedger,
               totalSumIncAccountSumByItemDocumentLedger, totalSumIncAccountSumByContainerDocumentLedger,
               subtotalIncAccountSumByItemDocumentLedger, subtotalIncAccountSumByContainerDocumentLedger,
               totalSumOutAccountSumByItemDocumentLedger, totalSumOutAccountSumByContainerDocumentLedger

    OBJECTS il = incAccountSumDocumentLedger
    PROPERTIES(il) SELECTOR iDateTime = dateTimeAccountSumDocumentLedger, objectClassName, descriptionDocumentLedger,
                   sumIncAccountByItemDocumentLedger, sumIncAccountByContainerDocumentLedger, sumIncAccountDocumentLedger
    FILTERS isPostedAccountSumDocumentLedger(il),
            departmentStoreAccountSumDocumentLedger(il) == ds,
            dateAccountSumDocumentLedger(il) >= dtFrom,
            dateAccountSumDocumentLedger(il) <= dtTo
    ORDER BY iDateTime

    OBJECTS ol = outAccountSumDocumentLedger
    PROPERTIES(ol) SELECTOR oDateTime = dateTimeAccountSumDocumentLedger, objectClassName, descriptionDocumentLedger,
                   sumOutAccountByItemDocumentLedger, sumOutAccountByContainerDocumentLedger, sumOutAccountDocumentLedger
    FILTERS isPostedAccountSumDocumentLedger(ol),
            departmentStoreAccountSumDocumentLedger(ol) == ds,
            dateAccountSumDocumentLedger(ol) >= dtFrom,
            dateAccountSumDocumentLedger(ol) <= dtTo
    ORDER BY oDateTime
;

DESIGN sumAccountDocumentLedgerPrint FROM DEFAULT {
    PROPERTY(objFrom) {
        caption = 'Дата (с)';
    }
    PROPERTY(objTo) {
        caption = 'Дата (по)';
    }
}
toPrintAccountDocumentLedger 'Тов. отчет' (departmentStore, dtInFrom, dtOutTo) =
    ACTION FORM sumAccountDocumentLedgerPrint OBJECTS ds = (departmentStore AS departmentStore), dtFrom = (dtInFrom AS DATE), dtTo = (dtOutTo AS DATE)  IMAGE 'print.png' IN printGroup CONFIRM;


FORM sumAccountDocumentLedger 'Товарный отчет'
    OBJECTS params = (dtFrom = DATE, dtTo = DATE) FIXED PANEL,
            ds = departmentStore FIXED PANEL
    PROPERTIES objFrom = OBJVALUE(dtFrom), objTo = OBJVALUE(dtTo)
    PROPERTIES(ds) SELECTOR name
    PROPERTIES(ds) commonNameMRPDepartmentStore, nameOfficerMRPDepartmentStore, commonNameBookkeeperDepartmentStore,
                   nameOfficerBookkeeperDepartmentStore, commonNamePersonCheckDepartmentStore, nameOfficerPersonCheckDepartmentStore
    PROPERTIES READONLY sumAccountBDocumentLedgerDate(ds, dtFrom), sumAccountByItemBDocumentLedgerDate(ds, dtFrom), sumAccountByContainerBDocumentLedgerDate(ds, dtFrom),
                   sumAccountADocumentLedgerDate(ds, dtTo)
    PROPERTIES(ds, dtFrom, dtTo) READONLY quantityIncAccountSumDocumentLedger, quantityOutAccountSumDocumentLedger,
                   totalSumIncAccountSumByItemDocumentLedger, totalSumIncAccountSumByContainerDocumentLedger,
//               subtotalIncAccountSumByItemDocumentLedger, subtotalIncAccountSumByContainerDocumentLedger,
                   totalSumOutAccountSumByItemDocumentLedger, totalSumOutAccountSumByContainerDocumentLedger
    PROPERTIES READONLY sumAccountByItemADocumentLedgerDate(ds, dtFrom), sumAccountByContainerADocumentLedgerDate(ds, dtFrom)

    PROPERTIES(ds, dtFrom, dtTo) FORCE PANEL toPrintAccountDocumentLedger

    OBJECTS il = incAccountSumDocumentLedger
    PROPERTIES(il) READONLY iDateTime = dateTimeAccountSumDocumentLedger, objectClassName, descriptionDocumentLedger,
                   sumIncAccountByItemDocumentLedger, sumIncAccountByContainerDocumentLedger, sumIncAccountDocumentLedger
    FILTERS isPostedAccountSumDocumentLedger(il),
            departmentStoreAccountSumDocumentLedger(il) == ds,
            dateAccountSumDocumentLedger(il) >= dtFrom,
            dateAccountSumDocumentLedger(il) <= dtTo
    ORDER BY iDateTime

    OBJECTS ol = outAccountSumDocumentLedger
    PROPERTIES(ol) READONLY oDateTime = dateTimeAccountSumDocumentLedger, objectClassName, descriptionDocumentLedger,
                   sumOutAccountByItemDocumentLedger, sumOutAccountByContainerDocumentLedger, sumOutAccountDocumentLedger
    FILTERS isPostedAccountSumDocumentLedger(ol),
            departmentStoreAccountSumDocumentLedger(ol) == ds,
            dateAccountSumDocumentLedger(ol) >= dtFrom,
            dateAccountSumDocumentLedger(ol) <= dtTo
    ORDER BY oDateTime
;

DESIGN sumAccountDocumentLedger FROM DEFAULT {
    NEW row BEFORE il.box {
        childConstraints = TO THE RIGHT;
        title = 'Комиссия';
        NEW row1 {
            title = 'МОЛ';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY (commonNameMRPDepartmentStore(ds)){
                caption = 'Имя';
            }
            ADD PROPERTY (nameOfficerMRPDepartmentStore(ds)){
                caption = 'Должность';
            }
        }
        NEW row2 {
            title = 'Проверяющий';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY (commonNamePersonCheckDepartmentStore(ds)){
                caption = 'Имя';
            }
            ADD PROPERTY (nameOfficerPersonCheckDepartmentStore(ds)){
                caption = 'Должность';
            }
        }
        NEW row3{
            title = 'Бухгалтер';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY (commonNameBookkeeperDepartmentStore(ds)){
                caption = 'Имя';
            }
            ADD PROPERTY (nameOfficerBookkeeperDepartmentStore(ds)){
                caption = 'Должность';
            }
        }
    }

    NEW HeaderCase BEFORE row{
        title = 'Суммы';
        childConstraints = TO THE RIGHT;
        ADD ds.ledgerByItemGroup;
        ADD ds.ledgerByContainerGroup;
        ADD ds.ledgerGroup;
    }

    NEW OneCase BEFORE HeaderCase{
        childConstraints = TO THE RIGHT;
        NEW dateCase {
            title = 'Даты';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY(objFrom) {
                caption = 'Дата (с)';
            }
            ADD PROPERTY(objTo) {
                caption = 'Дата (по)';
            }
        }
        NEW departmentCase {
            title = 'Отдел';
            ADD PROPERTY (name(ds)) {
                caption = 'Название';
            };
        }
    }

    NEW printCase {
        title = 'Печатные формы';
        ADD PROPERTY (toPrintAccountDocumentLedger(ds, dtFrom, dtTo));
    }
    ADD functions.box;
}

//------------------------------------Формы для инвентаризации------------------------------------------//

FORM nameDepartmentInventory 'Подразделения для инвентаризации'
    OBJECTS in=inventory FIXED PANEL
    PROPERTIES (in) READONLY seriesNumberObject, nameInventory, dateInventory

    TREE treeStore t=tradingNetwork, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY name(t), name(st), name(s), name(ds)

    FILTERS inTradingNetworkStoreType (t, st),
            inStoreTypeStore (st, s),
            inStoreDepartment (s, ds)

    PROPERTIES (ds, in) includeDepartmentStoreInventory, nameUserTypeOfAdditionDepartmentStoreInventory

;

showFormNameDepartmentByInventory 'Подразделения для инвентаризации' (inventory) =
    ACTION FORM nameDepartmentInventory OBJECTS in MODAL SHORTCUT nameDepartmentInventory DEFAULT;

FORM collationSheetItem 'Товары для добавления в сличительную ведомость'
    OBJECTS cs=manyCollationSheet FIXED PANEL
    PROPERTIES (cs) READONLY nameCollationSheet, nameTypeOfAdditionCollationSheet, nameDepartmentStoreCollationSheet

    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS i=item
    PROPERTIES(i) READONLY barcodeBarcodeSku, nameAttributeItem, shortNameUnitOfMeasureItem

    PROPERTIES(cs, i) inManyCollationSheetItem

    FILTERS hasParentItemGroupSku(g, i)
    ORDER BY nameAttributeItem
;

DESIGN collationSheetItem FROM DEFAULT {
    POSITION treeGroup.box TO THE LEFT i.box;
        treeGroup.box{ fillHorizontal = 1.5;}
        i.box{ fillHorizontal = 3.5;}

}

showFormItemByCollationSheet 'Добавить товар' (collationSheet) = [ACTION FORM collationSheetItem OBJECTS cs MODAL](collationSheet) AND collationSheet IS manyCollationSheet;

FORM listInventory 'Опись'
    OBJECTS         li=listInventory FIXED PANEL
    PROPERTIES (li) nameListInventory, nameDepartmentStoreListInventory, nameInventoryListInventory, noteListInventory,
                    nameCommitteeListInventory, nameChairmanCommitteeListInventory, nameEmployeeListInventory,
                    countPageInventoryDetailListInventory, quantityPageInventoryDetailListInventory, accountSumPageInventoryDetailListInventory, countPageInventoryListInventory

    OBJECTS         pl=pageInventory
    PROPERTIES(pl)  namePageInventory, notePageInventory FORCE PANEL, countPageInventoryDetailPageInventory, quantityPageInventoryDetailPageInventory, accountSumPageInventoryDetailPageInventory, ADDOBJ, delete

    OBJECTS         dp=pageInventoryDetail
    PROPERTIES (dp) indexPageInventoryDetail, barcodeExPageInventoryDetail, nameAttributeItemPageInventoryDetail, quantityPageInventoryDetail, accountPricePageInventoryDetail,
                    accountSumPageInventoryDetail, ADDOBJ, delete

    FILTERS listInventoryPageInventory(pl) == li,
            pageInventoryPageInventoryDetail(dp) == pl

EDIT listInventory OBJECT li
;

DESIGN listInventory FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        li.box {
            childConstraints = TO THE BOTTOM;
            POSITION li.inventoryCommitteeGroup TO THE LEFT li.documentSumGroup;
        }
        POSITION pl.box TO THE LEFT dp.box;
        pl.box {
            fillHorizontal = 1;
            childConstraints = TO THE BOTTOM;
        };
        dp.box {fillHorizontal = 2;}
    }
}

FORM inventory 'Инвентаризация'
    OBJECTS          in=inventory FIXED PANEL
    PROPERTIES (in)  nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject,
                     nameInventory, nameTypeOfAdditionInventory, dateInventory, timeInventory,
                     noteInventory, infoInventory, nameDepartmentInventory, showFormNameDepartmentByInventory, convertPriceInventory,
                     fillBalanceInventory

    TREE treeDepartmentStore ds=departmentStore, li=listInventory, pl=pageInventory
    PROPERTIES       READONLY name(ds),  nameListInventory(li), namePageInventory(pl)

    PROPERTIES(ds, in) READONLY countPageInventoryDetailDepartmentStoreInventory, quantityPageInventoryDetailDepartmentStoreInventory, accountSumPageInventoryDetailDepartmentStoreInventory

    PROPERTIES(li)   READONLY countPageInventoryDetailListInventory, quantityPageInventoryDetailListInventory, accountSumPageInventoryDetailListInventory, objectClassName

    PROPERTIES(li)   ADDFORM, editLI = EDITFORM FORCE PANEL SHOWIF isDraftListInventory(li), delete FORCE PANEL SHOWIF isDraftListInventory(li), //delete SHOWIF isDraftListInventory(li),      //FORCE PANEL
                     postListInventory FORCE PANEL SHOWIF isDraftListInventory(li), unpostListInventory FORCE PANEL SHOWIF isPostedListInventory(li)

    PROPERTIES(pl)   READONLY countPageInventoryDetailPageInventory, quantityPageInventoryDetailPageInventory, accountSumPageInventoryDetailPageInventory, dumb1

    OBJECTS          dp=pageInventoryDetail
    PROPERTIES (dp)  READONLY indexPageInventoryDetail, barcodeExPageInventoryDetail, nameAttributeItemPageInventoryDetail, quantityPageInventoryDetail,
                     accountPricePageInventoryDetail, accountSumPageInventoryDetail

    OBJECTS          cs=collationSheet

    PROPERTIES (cs)  READONLY nameCollationSheet
    PROPERTIES (cs)  READONLY nameTypeOfAdditionCollationSheet, nameDepartmentStoreCollationSheet,
                     quantityPageInventoryDetailCollationSheet, quantityBalanceCollationSheet, quantityShortageCollationSheet,
                     accountSumPageInventoryDetailCollationSheet, accountSumBalanceCollationSheet, accountSumShortageCollationSheet,
                     countListInventoryCollationSheet, countPageInventoryCollationSheet
    PROPERTIES (cs)  showFormItemByCollationSheet, convertPriceCollationSheet, delete


    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS          i=item
    PROPERTIES (i)   READONLY nameAttributeItem, barcodeBarcodeSku

    PROPERTIES(cs, i) quantityPageInventoryDetailCollationSheetItem, quantityBalanceCollationSheetItem, quantityShortageCollationSheetItem
    PROPERTIES       accountPricePageInventoryDetailCollationSheetItem (cs,i) BACKGROUND differentPriceCollationSheetItem(cs, i),
                     accountPriceBalanceCollationSheetItem(cs, i) BACKGROUND differentPriceCollationSheetItem(cs, i)

    PROPERTIES(cs, i) accountSumPageInventoryDetailCollationSheetItem, accountSumBalanceCollationSheetItem, accountSumShortageCollationSheetItem

    FILTERS inInventoryDepartmentStoreListInventoryPageInventoryPageInventoryDetail(in, ds, li, pl, dp),
            inventoryListInventory(li) == in,
            departmentStoreListInventory(li) == ds,
            listInventoryPageInventory(pl) == li,
            includeDepartmentStoreInventory(ds, in),
            inventoryCollationSheet(cs) == in,
            includeCollationSheetItem(cs, i),
            hasParentItemGroupSku(g, i)

    ORDER BY nameAttributeItem

    FILTERGROUP notEqualsPriceFilters
            FILTER 'Показать товар с разными ценами' 'F10' differentPriceCollationSheetItem(cs, i)

    EDIT inventory OBJECT in
;

DESIGN inventory FROM DEFAULT {
    main{
        NEW header.box BEFORE in.box {
            childConstraints = TO THE BOTTOM;

            ADD in.documentHeaderGroup {
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(nameDepartmentInventory);
                ADD PROPERTY(nameNumeratorObject);
                ADD PROPERTY(numberObject);
                ADD PROPERTY(seriesObject);
                ADD PROPERTY(dateInventory);
                ADD PROPERTY(timeInventory);
            }

            NEW headerRow2 {
                childConstraints = TO THE RIGHT;
                ADD in.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                    NEW headerRow2Col1Row1 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(nameTypeOfAdditionInventory);
                        ADD PROPERTY(nameInventory);
                    }
                    NEW headerRow2Col1Row2 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(noteInventory);
                        ADD PROPERTY(infoInventory);
                    }
                }
                NEW actionContainer {
                    title = 'Действия';
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY(fillBalanceInventory);
                    ADD PROPERTY(convertPriceInventory);
                }
            }
        }

        NEW secondCase BEFORE functions.box {
                type = TABBED;
                NEW z.box { title = 'Описи';
                    fillVertical = 5;
                    ADD treeDepartmentStore.box { fillHorizontal = 2;};
                    ADD dp.box  {fillHorizontal = 3;};
                    POSITION treeDepartmentStore.box TO THE LEFT dp.box;
                    PROPERTY(objectClassName) {
                            preferredCharWidth = 15;
                    }
                    PROPERTY (dumb1) {
                        caption = 'Статус';
                        minimumCharWidth = 15;
                    }
                    PROPERTY (postListInventory) {
                        caption = 'Закрыть';
                    }
                    PROPERTY (unpostListInventory) {
                        caption = 'Открыть';
                    }
                    PROPERTY (editLI) {
                        caption = 'Редактировать';
                    }
                    PROPERTY (delete(li)) {
                        caption = 'Удалить';
                        panelLocation = TOOLBAR;
                        askConfirm = TRUE;
                    }
                }

                NEW x.box { title = 'Сличительные ведомости';
                    fillVertical = 5;

                    ADD cs.box  { fillVertical = 1;};

                    NEW firstCase { title = 'Пересчитанный товар';
                        fillVertical = 4;
                        ADD treeGroup.box { title = 'Товарные группы';};
                        ADD i.box;
                        POSITION treeGroup.box TO THE LEFT i.box;
                            treeGroup.box{ fillHorizontal = 1.5;}
                            i.box{ fillHorizontal = 3.5;}

                    ADD PROPERTY(showFormItemByCollationSheet(cs)) IN i.panel;
                    }
                }

        }
    }
}

FORM inventories 'Инвентаризации'
    OBJECTS in=inventory
    PROPERTIES(in) READONLY objectClassName, numberObject, seriesObject, dateInventory, timeInventory,
                            nameDepartmentInventory, nameInventory, noteInventory

    PROPERTIES(in) FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES(in)  ADDFORM, EDITFORM SHOWIF isDraftInventory(in), delete FORCE PANEL SHOWIF isDraftInventory(in),
                    postInventory SHOWIF isDraftInventory(in), unpostInventory SHOWIF isPostedInventory(in)//(in) ADDFORM, EDITFORM, delete

    OBJECTS il=inventoryLedger
    PROPERTIES(il) READONLY barcodeExInventoryLedger, nameAttributeItemInventoryLedger, quantityInventoryLedger, accountSumInventoryLedger, nameDepartmentStoreInventoryLedger
    FILTERS                 inventoryInventoryLedger(il)==in

    ORDER BY        nameDepartmentStoreInventoryLedger
;

DESIGN inventories FROM DEFAULT {
    PROPERTY(objectClassName) {
        preferredCharWidth = 25;
    }
    PROPERTY (delete(in)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
    in.historyGroup {
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    }
    in.postedGroup {
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    }
    POSITION in.historyGroup TO THE LEFT in.postedGroup;
    ADD il.grid.box BEFORE in.historyGroup;
    il.grid.box {title = 'Товары с недостачей (излишком)';};
}


//---------------------------Акты переоценок-------------------------------------//

@metaCodeInputMultipleItemsBalance (userPriceChange);
@metaCodeDocumentMachineryPriceTransaction(userPriceChange);
@metaCodeDocumentLabelTransaction(userPriceChange);

percMarkupUserPriceChange 'Процент торговой надбавки'  = DATA NUMERIC[8,3] (userPriceChange);
percDiscountUserPriceChange 'Процент скидки от розн. цены'  = DATA NUMERIC[8,3] (userPriceChange);
toShowDiscountUserPriceChange (userPriceChange) =  userPriceChange IS userPriceChange AND NOT percMarkupUserPriceChange(userPriceChange);
toShowMarkupUserPriceChange (userPriceChange) =  userPriceChange IS userPriceChange AND NOT percDiscountUserPriceChange(userPriceChange);

newDiscountRetailPriceUserPriceChangeDetail (userPriceChange, userPriceChangeDetail) =  [roundM1(X-(X*Y)/100)](
    curRetailPriceUserPriceChangeDetail(userPriceChangeDetail), percDiscountUserPriceChange(userPriceChange));

newMarkupRetailPriceUserPriceChangeDetail (userPriceChange, userPriceChangeDetail) = [roundM1(X+(X*Y)/100+(X+(X*Y)/100)*Z/100+F)](
    curSupplierPriceUserPriceChangeDetail(userPriceChangeDetail),
    percMarkupUserPriceChange(userPriceChange),
    curDataRetailRangeUserPriceChangeDetail(userPriceChangeDetail),
    (UNION OVERRIDE 0.0 IF userPriceChangeDetail IS userPriceChangeDetail, curWarePriceUserPriceChangeDetail(userPriceChangeDetail)));



FORM addPercMarkupUserPriceChange 'Изменить наценку товара'
    OBJECTS u=userPriceChange FIXED PANEL
    PROPERTIES (u) percMarkupUserPriceChange
;

DESIGN addPercMarkupUserPriceChange FROM DEFAULT {
    PROPERTY (percMarkupUserPriceChange) {
        caption = 'Введите наценку';
        font = 'Tahoma bold 64';
        panelLabelAbove = TRUE;
    }
}

showFormAddPercMarkupUserPriceChange 'Изменить наценку товара' (userPriceChange) = ACTION (userPriceChange) {
        FORM addPercMarkupUserPriceChange OBJECTS u = userPriceChange AS userPriceChange MODAL;
        IF formResult() == formResult.ok THEN {
            FOR userPriceChangeUserPriceChangeDetail(userPriceChangeDetail) == userPriceChange DO {
                SET importerPriceUserPriceChangeDetail(userPriceChangeDetail) <- curImporterPriceUserPriceChangeDetail(userPriceChangeDetail);
                SET supplierPriceUserPriceChangeDetail(userPriceChangeDetail) <- curSupplierPriceUserPriceChangeDetail(userPriceChangeDetail);
                SET retailRangeUserPriceChangeDetail(userPriceChangeDetail) <- curRetailRangeUserPriceChangeDetail(userPriceChangeDetail);
                SET wareUserPriceChangeDetail(userPriceChangeDetail) <- curWareUserPriceChangeDetail(userPriceChangeDetail);
                SET warePriceUserPriceChangeDetail(userPriceChangeDetail) <- curWarePriceUserPriceChangeDetail(userPriceChangeDetail);
                SET retailPriceUserPriceChangeDetail(userPriceChangeDetail) <- newMarkupRetailPriceUserPriceChangeDetail(userPriceChange, userPriceChangeDetail);
            }
        }
} TOOLBAR CONFIRM;


FORM addPercDiscountUserPriceChange 'Сделать скидку'
    OBJECTS u=userPriceChange FIXED PANEL
    PROPERTIES (u) percDiscountUserPriceChange
;

DESIGN addPercDiscountUserPriceChange FROM DEFAULT {
    PROPERTY (percDiscountUserPriceChange) {
        caption = 'Введите скидку';
        font = 'Tahoma bold 64';
        panelLabelAbove = TRUE;
    }
}

showFormAddPercDiscountUserPriceChange 'Сделать скидку' (userPriceChange) = ACTION (userPriceChange) {
        FORM addPercDiscountUserPriceChange OBJECTS u = userPriceChange AS userPriceChange MODAL;
        IF formResult() == formResult.ok THEN {
            FOR userPriceChangeUserPriceChangeDetail(userPriceChangeDetail) == userPriceChange DO {
                SET importerPriceUserPriceChangeDetail(userPriceChangeDetail) <- curImporterPriceUserPriceChangeDetail(userPriceChangeDetail);
                SET supplierPriceUserPriceChangeDetail(userPriceChangeDetail) <- curSupplierPriceUserPriceChangeDetail(userPriceChangeDetail);
                SET retailRangeUserPriceChangeDetail(userPriceChangeDetail) <- curRetailRangeUserPriceChangeDetail(userPriceChangeDetail);
                SET wareUserPriceChangeDetail(userPriceChangeDetail) <- curWareUserPriceChangeDetail(userPriceChangeDetail);
                SET warePriceUserPriceChangeDetail(userPriceChangeDetail) <- curWarePriceUserPriceChangeDetail(userPriceChangeDetail);
                SET retailPriceUserPriceChangeDetail(userPriceChangeDetail) <- newDiscountRetailPriceUserPriceChangeDetail(userPriceChange, userPriceChangeDetail);
            }
        }
} TOOLBAR CONFIRM;

// todo: пока что сделал так, что можно выбрать только один экшн на изменение цены.
//       Для расчета новых показателей цены, необходимо чтобы все поля были не пустые.....

FORM userPriceChange 'Переоценка товаров'
    OBJECTS u=userPriceChange FIXED PANEL
    PROPERTIES (u) nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject,
                   dateUserPriceChange, timeUserPriceChange, nameDepartmentStoreUserPriceChange,
                   diffSupplierISumPriceChangeDocumentDetailPriceChangeDocument, diffMarkupSumPriceChangeDocumentDetailPriceChangeDocument, diffRetailVATISumPriceChangeDocumentDetailPriceChangeDocument,
                   diffWareSumPriceChangeDocumentDetailPriceChangeDocument, diffWareVATSumPriceChangeDocumentDetailPriceChangeDocument,
                   noteUserPriceChange, numberDisposalUserPriceChange, nameRevaluationCommitteeUserPriceChange

    OBJECTS d=userPriceChangeDetail
    PROPERTIES (d) indexUserPriceChangeDetail, barcodeExSkuUserPriceChangeDetail, nameAttributeItemUserPriceChangeDetail, quantityUserPriceChangeDetail,
                   curImporterPriceUserPriceChangeDetail, importerPriceUserPriceChangeDetail,
                   curSupplierPriceUserPriceChangeDetail, supplierPriceUserPriceChangeDetail,
                   curRetailMarkupPriceChangeDocumentDetail, retailMarkupPriceChangeDocumentDetail,
                   curNumberRetailRangeUserPriceChangeDetail, curDataRetailRangeUserPriceChangeDetail,
                   numberRetailRangeUserPriceChangeDetail, dataRetailRangeUserPriceChangeDetail,
                   curWarePriceUserPriceChangeDetail, warePriceUserPriceChangeDetail,
                   curNumberWareRangeUserPriceChangeDetail, curDataWareRangeUserPriceChangeDetail,
                   numberWareRangeUserPriceChangeDetail, dataWareRangeUserPriceChangeDetail,
                   curRetailPriceUserPriceChangeDetail, retailPriceUserPriceChangeDetail, ADDOBJ, delete
//    PROPERTIES (u, d)  newMarkupRetailPriceUserPriceChangeDetail, newDiscountRetailPriceUserPriceChangeDetail

    PROPERTIES showFormAddPercMarkupUserPriceChange(u) TODRAW d SHOWIF toShowMarkupUserPriceChange(u),
               showFormAddPercDiscountUserPriceChange(u) TODRAW d SHOWIF toShowDiscountUserPriceChange(u),
               inputMultipleItemsBalanceUserPriceChange(u) TODRAW d, addUserPriceChangeDetailBarcode(u) TODRAW d,
               cleanAllUserPriceChangeDetailsUserPriceChange(u) FORCE PANEL TODRAW d

    FILTERS inUserPriceChangeUserPriceChangeDetail(u, d)

    EDIT userPriceChange OBJECT u
;

DESIGN userPriceChange FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW header.box BEFORE d.box {
            childConstraints = TO THE RIGHT;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;
                ADD u.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreUserPriceChange);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateUserPriceChange);
                    ADD PROPERTY(timeUserPriceChange);
                }
                ADD u.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }

            ADD u.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }

        PROPERTY(importerPriceUserPriceChangeDetail) { background = #FFFFCC; }
        PROPERTY(supplierPriceUserPriceChangeDetail) { background = #FFFFCC; }
        PROPERTY(retailMarkupPriceChangeDocumentDetail) { background = #FFFFCC; }
        PROPERTY(numberRetailRangeUserPriceChangeDetail) { background = #FFFFCC; }
        PROPERTY(dataRetailRangeUserPriceChangeDetail) { background = #FFFFCC; }
        PROPERTY(warePriceUserPriceChangeDetail) { background = #FFFFCC; }
        PROPERTY(numberWareRangeUserPriceChangeDetail) { background = #FFFFCC; }
        PROPERTY(dataWareRangeUserPriceChangeDetail) { background = #FFFFCC; }
        PROPERTY(retailPriceUserPriceChangeDetail) { background = #FFFFCC; }
    }
}

FORM userPriceChanges 'Переоценки товаров'

    OBJECTS u=userPriceChange
    PROPERTIES (u) READONLY objectClassName, numberObject, seriesObject, dateUserPriceChange, timeUserPriceChange, nameDepartmentStoreUserPriceChange,
                   diffSupplierISumPriceChangeDocumentDetailPriceChangeDocument, diffMarkupSumPriceChangeDocumentDetailPriceChangeDocument, diffRetailVATISumPriceChangeDocumentDetailPriceChangeDocument,
                   diffWareSumPriceChangeDocumentDetailPriceChangeDocument, diffWareVATSumPriceChangeDocumentDetailPriceChangeDocument, diffRetailSumPriceChangeDocumentDetailPriceChangeDocument,
                   statusPrintPriceTransactionDocument BACKGROUND backgroundPrintLabelTransactionUserPriceChange(u),
                   statusEquipmentPriceTransactionDocument BACKGROUND backgroundCreateMachineryPriceTransactionUserPriceChange(u)

    PROPERTIES (u) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES (u)          createUserPriceChangeLabelTransaction FORCE PANEL SHOWIF showPrintLabelTransactionUserPriceChange(u),
                            createSnapshotUserPriceChangeLabelTransaction FORCE PANEL SHOWIF isPostedUserPriceChange(u),
                            createUserPriceChangeMachineryPriceTransaction FORCE PANEL SHOWIF showCreateMachineryPriceTransactionUserPriceChange(u),
                            createSnapshotUserPriceChangeMachineryPriceTransaction FORCE PANEL SHOWIF isPostedUserPriceChange(u),
                            toPrintActOfRevaluation FORCE PANEL,
                            ADDFORM, EDITFORM SHOWIF isDraftUserPriceChange(u), delete FORCE PANEL SHOWIF isDraftUserPriceChange(u),
                            postUserPriceChange SHOWIF isDraftUserPriceChange(u), unpostUserPriceChange SHOWIF isPostedUserPriceChange(u)

    OBJECTS d=userPriceChangeDetail
    PROPERTIES (d) READONLY indexUserPriceChangeDetail, barcodeExSkuUserPriceChangeDetail, nameAttributeItemUserPriceChangeDetail, quantityUserPriceChangeDetail,
                            curImporterPriceUserPriceChangeDetail, importerPriceUserPriceChangeDetail,
                            curSupplierPriceUserPriceChangeDetail, supplierPriceUserPriceChangeDetail,
                            curRetailMarkupPriceChangeDocumentDetail, retailMarkupPriceChangeDocumentDetail,
                            curNumberRetailRangeUserPriceChangeDetail, curDataRetailRangeUserPriceChangeDetail,
                            numberRetailRangeUserPriceChangeDetail, dataRetailRangeUserPriceChangeDetail,
                            curWarePriceUserPriceChangeDetail, warePriceUserPriceChangeDetail,
                            curNumberWareRangeUserPriceChangeDetail, curDataWareRangeUserPriceChangeDetail,
                            numberWareRangeUserPriceChangeDetail, dataWareRangeUserPriceChangeDetail,
                            curRetailPriceUserPriceChangeDetail, retailPriceUserPriceChangeDetail


    FILTERS inUserPriceChangeUserPriceChangeDetail(u, d)
;

DESIGN userPriceChanges FROM DEFAULT {
    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }
    PROPERTY (delete(u)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
        u.printGroup {
            childConstraints = TO THE BOTTOM;
            fillHorizontal = 1;
        }

        u.historyGroup {
            childConstraints = TO THE BOTTOM;
            fillHorizontal = 1;
        }

        u.postedGroup {
            childConstraints = TO THE BOTTOM;
            fillHorizontal = 1;
        }

        POSITION u.historyGroup TO THE LEFT u.postedGroup;
        POSITION u.postedGroup TO THE LEFT u.printGroup;
        POSITION u.historyGroup TO THE LEFT u.printGroup;

        ADD d.grid.box BEFORE u.historyGroup;
}


//---------------- Формы внутреннего перемещения (приход и расход)-------------------------------------//

@metaCodeInputMultipleItems (innerFlow);
@metaCodeInputMultipleItems (innerArrival);
@metaCodeDocumentMachineryPriceTransaction(innerArrival);
@metaCodeDocumentLabelTransaction(innerArrival);

FORM innerFlow 'Расход в другой отдел'
    OBJECTS f=innerFlow FIXED PANEL
    PROPERTIES (f) numberObject, seriesObject, dateInnerFlow, timeInnerFlow, nameDepartmentStoreInnerFlow,
                   nameRecipientDepartmentInnerFlow, noteInnerFlow, quantityInnerFlowDetailInnerFlow, retailSumInnerFlowDetailInnerFlow

    PROPERTIES (f) carConsignment, ownerCarConsignment, trailerConsignment, driverCarConsignment, waybillConsignment,
                   nameTransportPayerConsignment, shipmentBaseConsignment, loadingPlaceConsignment, unloadingPlaceConsignment,
                   readdressingConsignment, commonNameIssuanceAllowedConsignment, commonNameIssuanceExecutedConsignment,
                   forwarderConsignment, warrantConsignment, warrantHolderConsignment, goodsAcceptedConsignment,
                   commonNameLoadingExecuterConsignment, nameWayOfLoadingConsignment, codeLoadingConsignment,
                   arrivalTimeConsignment, departureTimeConsignment, downtimeConsignment, raceQuantityConsignment,
                   sumQuantityConsignment, sumPackQuantityConsignment, sumGrossWeightConsignmentDetail,
                   sumCostConsignmentDetail, totalSumVATConsignmentDetail, costWithVATConsignment

    OBJECTS d=innerFlowDetail
    PROPERTIES (d) indexInnerFlowDetail, barcodeExSkuInnerFlowDetail, nameAttributeItemInnerFlowDetail,
                   quantityInnerFlowDetail, importerPriceInnerFlowDetail, supplierPriceInnerFlowDetail, numberRetailRangeInnerFlowDetail,
                   dataRetailRangeInnerFlowDetail, nameWareInnerFlowDetail, warePriceInnerFlowDetail,
                   retailPriceInnerFlowDetail, retailSumInnerFlowDetail, ADDOBJ, delete

    PROPERTIES inputMultipleItemsInnerFlow(f) TODRAW d, addInnerFlowDetailBarcode(f) TODRAW d, cleanAllInnerFlowDetailsInnerFlow(f) FORCE PANEL TODRAW d
    FILTERS inInnerFlowInnerFlowDetail(f, d)

    EDIT innerFlow OBJECT f
;

DESIGN innerFlow FROM DEFAULT{
    main{
        preferredSize = (1024, 768);

        NEW specification.box BEFORE functions.box{
            type = TABBED;
            ADD d.box{
                title = 'Спецификация';
                ADD d.grid{
                    fillVertical = 12;
                };
            };
            NEW consignment{
                title = 'Накладная';
                childConstraints = TO THE BOTTOM;
                ADD f.carConsignmentGroup;
                ADD f.issuanceConsignmentGroup;
                ADD f.loadingConsignmentGroup;
                ADD f.sumConsignmentGroup{
                    childConstraints = TO THE RIGHT;
                };
                POSITION f.issuanceConsignmentGroup TO THE RIGHT f.carConsignmentGroup;
                POSITION f.loadingConsignmentGroup TO THE RIGHT f.carConsignmentGroup;
                POSITION f.sumConsignmentGroup TO THE RIGHT f.carConsignmentGroup;
            };
        };

        NEW header.box BEFORE specification.box {

            childConstraints = TO THE RIGHT;

            NEW headerRow1 {
                childConstraints = TO THE BOTTOM;

                ADD f.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreInnerFlow);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateInnerFlow);
                    ADD PROPERTY(timeInnerFlow);
                }

                ADD f.documentPrmGroup {
                    childConstraints = TO THE RIGHT;
                }
            }

            ADD f.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    };
};

FORM innerFlows 'Расходы в другие отделы'
    OBJECTS f=innerFlow
    PROPERTIES (f) READONLY objectClassName, numberObject, seriesObject, dateInnerFlow, timeInnerFlow, nameDepartmentStoreInnerFlow,
                            nameRecipientDepartmentInnerFlow, countInnerFlowDetailInnerFlow,
                            quantityInnerFlowDetailInnerFlow, retailSumInnerFlowDetailInnerFlow

    PROPERTIES(f) FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed
    PROPERTIES (f) FORCE PANEL toPrintTransportConsignmentVerticalA, toPrintTransportConsignmentHorizontalA,
                               toPrintTransportConsignmentVerticalB, toPrintTransportConsignmentHorizontalB,
                               toPrintTransportConsignmentAttach, toPrintConsignmentTwoHorizontal, toPrintConsignmentTwoVertical,
                               toPrintConsignmentTwoAttach

    PROPERTIES (f) ADDFORM, EDITFORM SHOWIF isDraftInnerFlow(f), delete FORCE PANEL SHOWIF isDraftInnerFlow(f),
                   postInnerFlow SHOWIF isDraftInnerFlow(f), unpostInnerFlow SHOWIF isPostedInnerFlow(f)

    OBJECTS d=innerFlowDetail
    PROPERTIES (d) READONLY indexInnerFlowDetail, barcodeExSkuInnerFlowDetail, nameAttributeItemInnerFlowDetail,
                            quantityInnerFlowDetail, importerPriceInnerFlowDetail, supplierPriceInnerFlowDetail, numberRetailRangeInnerFlowDetail,
                            dataRetailRangeInnerFlowDetail, nameWareInnerFlowDetail, warePriceInnerFlowDetail,
                            retailPriceInnerFlowDetail, retailSumInnerFlowDetail
    FILTERS inInnerFlowInnerFlowDetail(f, d)
;

DESIGN innerFlows FROM DEFAULT {
    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }

    PROPERTY (delete(f)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }

    ADD f.printGroup BEFORE functions.box {
        childConstraints = TO THE RIGHT;
        NEW ttn1{
            childConstraints = TO THE RIGHT;
            title = 'ТТН-1';
            NEW a{
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(toPrintTransportConsignmentVerticalA);
                ADD PROPERTY(toPrintTransportConsignmentHorizontalA);
            }
            NEW b{
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(toPrintTransportConsignmentVerticalB);
                ADD PROPERTY(toPrintTransportConsignmentHorizontalB);
            }
            NEW c{
                ADD PROPERTY(toPrintTransportConsignmentAttach);
            }
        }
        NEW tn{
            childConstraints = TO THE RIGHT;
            title = 'ТН-2';
            NEW a1{
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(toPrintConsignmentTwoVertical);
                ADD PROPERTY(toPrintConsignmentTwoHorizontal);
            }
            NEW b1{
                ADD PROPERTY(toPrintConsignmentTwoAttach);
            }
        }
//        fillHorizontal = 1;
    };

    ADD f.historyGroup BEFORE f.printGroup{
        childConstraints = TO THE BOTTOM;
//        fillHorizontal = 1;
    }

    ADD f.postedGroup BEFORE f.printGroup{
        childConstraints = TO THE BOTTOM;
//        fillHorizontal = 1;
    }

    POSITION f.historyGroup TO THE LEFT f.postedGroup;

    ADD d.grid.box BEFORE f.historyGroup;
}


FORM innerFlowPosted 'Расходы в другие отделы'
    OBJECTS f=innerFlowPosted
    PROPERTIES (f) READONLY objectClassName, numberObject, seriesObject, dateInnerFlow, timeInnerFlow, nameDepartmentStoreInnerFlow,
                            nameRecipientDepartmentInnerFlow, countInnerFlowDetailInnerFlow,
                            quantityInnerFlowDetailInnerFlow, retailSumInnerFlowDetailInnerFlow

    OBJECTS d=innerFlowDetail
    PROPERTIES (d) READONLY indexInnerFlowDetail, barcodeExSkuInnerFlowDetail, nameAttributeItemInnerFlowDetail,
                            quantityInnerFlowDetail, importerPriceInnerFlowDetail, supplierPriceInnerFlowDetail, numberRetailRangeInnerFlowDetail,
                            dataRetailRangeInnerFlowDetail, nameWareInnerFlowDetail, warePriceInnerFlowDetail,
                            retailPriceInnerFlowDetail, retailSumInnerFlowDetail
    FILTERS inInnerFlowInnerFlowDetail(f, d)

    DIALOG innerFlowPosted OBJECT f
;

DESIGN innerFlowPosted FROM DEFAULT {

    main {
        preferredSize = (1024, 768);

        PROPERTY(objectClassName) {
            preferredCharWidth = 15;
        }
    }
}

toPrintActOfRevaluationInnerArrival 'Акт переоценки' (innerArrival) = toPrintActOfRevaluation(uniquePriceChangeInnerArrival(innerArrival)) IN printGroup;


FORM innerArrival 'Приход из другого отдела'
    OBJECTS a=innerArrival FIXED PANEL
    PROPERTIES (a) nameDepartmentStoreInnerArrival, numberInnerArrival SHOWIF departmentStoreInnerArrival(a), seriesInnerArrival SHOWIF departmentStoreInnerArrival(a),
                   dateInnerArrival SHOWIF innerFlowInnerArrival(a), timeInnerArrival SHOWIF innerFlowInnerArrival(a), nameSenderDepartmentInnerArrival READONLY SHOWIF innerFlowInnerArrival(a),
                   toFillInnerArrivalDetailsInnerArrival SHOWIF innerFlowInnerArrival(a),
                   noteInnerArrival READONLY SHOWIF innerFlowInnerArrival(a), quantityInnerArrivalDetailInnerArrival SHOWIF innerFlowInnerArrival(a),
                   retailSumInnerArrivalDetailInnerArrival SHOWIF innerFlowInnerArrival(a), numberDisposalInnerArrival SHOWIF needToPriceChangeInnerArrival(a),
                   nameRevaluationCommitteeInnerArrival SHOWIF needToPriceChangeInnerArrival(a)

    OBJECTS d=innerArrivalDetail
    PROPERTIES (d) SHOWIF innerFlowInnerArrival(a)
                   indexInnerArrivalDetail, barcodeExSkuInnerArrivalDetail, nameAttributeItemInnerArrivalDetail,
                   quantityInnerArrivalDetail, balanceBeforeInnerArrivalInnerArrivalDetail, importerPriceInnerArrivalDetail, supplierPriceInnerArrivalDetail, numberRetailRangeInnerArrivalDetail,
                   dataRetailRangeInnerArrivalDetail, nameWareInnerArrivalDetail, warePriceInnerArrivalDetail, retailPriceInnerArrivalDetail,
                   retailSumInnerArrivalDetail, ADDOBJ, delete
    PROPERTIES (d) FORCE PANEL curImporterPriceInnerArrivalDetail, curSupplierPriceInnerArrivalDetail, curNameWareInnerArrivalDetail,
                   curWarePriceInnerArrivalDetail, curDataRetailRangeInnerArrivalDetail, curRetailPriceInnerArrivalDetail

    PROPERTIES inputMultipleItemsInnerArrival(a) TODRAW d, addInnerArrivalDetailBarcode(a) TODRAW d, cleanAllInnerArrivalDetailsInnerArrival(a) FORCE PANEL  TODRAW d // SHOWIF innerFlowInnerArrival(a)
    FILTERS inInnerArrivalInnerArrivalDetail(a, d)

    OBJECTS i=item
    PROPERTIES (i) SHOWIF innerFlowInnerArrival(a) nameAttributeItem
    PROPERTIES (i, a) SHOWIF innerFlowInnerArrival(a) quantityItemInnerFlowInnerArrival, quantityInnerArrivalDetailItemInnerArrival,
                             diffQuantityItemInnerArrival, importerPriceItemInnerArrival, retailPriceItemInnerArrival
    FILTERS quantityInnerArrivalDetailItemInnerArrival(i, a)

    EDIT innerArrival OBJECT a
;

DESIGN innerArrival FROM DEFAULT{
    main{
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            type = TABBED;
            ADD d.box {
                childConstraints = TO THE BOTTOM;
                title = 'Спецификация';
                d.priceDetailGroup {
                    childConstraints = TO THE RIGHTBOTTOM;
                }
            };
            ADD i.box;
        };
        NEW header.box BEFORE specification.box {
            childConstraints = TO THE RIGHT;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;

                ADD a.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreInnerArrival);
                    ADD PROPERTY(numberInnerArrival);
                    ADD PROPERTY(seriesInnerArrival);
                    ADD PROPERTY(dateInnerArrival);
                    ADD PROPERTY(timeInnerArrival);
                }

                NEW headerCol1Row2 {
                    childConstraints = TO THE RIGHT;

                    ADD a.documentPrmGroup {
                        childConstraints = TO THE BOTTOM;
                    }

                    NEW headerCol1Actions {
                        title = 'Действия';
                        childConstraints = TO THE BOTTOM;
                        ADD PROPERTY (toFillInnerArrivalDetailsInnerArrival);
                        ADD PROPERTY (cleanAllInnerArrivalDetailsInnerArrival);
                    }
                }
            }

            ADD a.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    }
}

FORM innerArrivals 'Приходы из других отделов'
    OBJECTS a=innerArrival
    PROPERTIES (a) READONLY objectClassName, numberInnerArrival, seriesInnerArrival, dateInnerArrival, timeInnerArrival, nameDepartmentStoreInnerArrival,
                            nameSenderDepartmentInnerArrival, countInnerArrivalDetailInnerArrival, quantityInnerArrivalDetailInnerArrival, retailSumInnerArrivalDetailInnerArrival,
                            statusPrintPriceTransactionDocument BACKGROUND backgroundPrintLabelTransactionInnerArrival(a),
                            statusEquipmentPriceTransactionDocument BACKGROUND backgroundCreateMachineryPriceTransactionInnerArrival(a)

    PROPERTIES (a)          createInnerArrivalLabelTransaction FORCE PANEL SHOWIF showPrintLabelTransactionInnerArrival(a),
                            createSnapshotInnerArrivalLabelTransaction FORCE PANEL SHOWIF isPostedInnerArrival(a),
                            createInnerArrivalMachineryPriceTransaction FORCE PANEL SHOWIF showCreateMachineryPriceTransactionInnerArrival(a),
                            createSnapshotInnerArrivalMachineryPriceTransaction FORCE PANEL SHOWIF isPostedInnerArrival(a),
                            toPrintActOfRevaluationInnerArrival FORCE PANEL SHOWIF needToPriceChangeInnerArrival(a),
                            ADDFORM, EDITFORM SHOWIF isDraftInnerArrival(a), delete FORCE PANEL SHOWIF isDraftInnerArrival(a),
                            postInnerArrival SHOWIF isDraftInnerArrival(a), unpostInnerArrival SHOWIF isPostedInnerArrival(a)

    PROPERTIES(a) FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    OBJECTS d=innerArrivalDetail
    PROPERTIES (d) READONLY indexInnerArrivalDetail, barcodeExSkuInnerArrivalDetail, nameAttributeItemInnerArrivalDetail,
                            quantityInnerArrivalDetail, balanceBeforeInnerArrivalInnerArrivalDetail, importerPriceInnerArrivalDetail,
                            numberRetailRangeInnerArrivalDetail, dataRetailRangeInnerArrivalDetail, nameWareInnerArrivalDetail,
                            warePriceInnerArrivalDetail, retailPriceInnerArrivalDetail, retailSumInnerArrivalDetail

    FILTERS inInnerArrivalInnerArrivalDetail(a, d)
;

DESIGN innerArrivals FROM DEFAULT {
    ADD a.box{
        PROPERTY(objectClassName) {
            preferredCharWidth = 15;
        }

        PROPERTY (delete(a)) {
            panelLocation = TOOLBAR;
            askConfirm = TRUE;
        }

    }
    ADD d.box;
    NEW row {
        childConstraints = TO THE RIGHT;

        ADD a.historyGroup {
            childConstraints = TO THE BOTTOM;
            fillHorizontal = 1;
        }

        ADD a.postedGroup {
            childConstraints = TO THE BOTTOM;
            fillHorizontal = 1;
        }

        ADD a.printGroup {
            childConstraints = TO THE BOTTOM;
            fillHorizontal = 1;
        }
    }

    ADD functions.box;
}

//------------------------------------формы: Отпуск из розницы-------------------------//

FORM specificationForm 'Отгрузки по данной с/ф'
    OBJECTS sp=specification FIXED PANEL
    PROPERTIES (sp) READONLY seriesObject, numberObject, nameDepartmentStoreSpecification, dateSpecification, timeSpecification,
    dateToSpecification, nameCustomerSpecification, nameObjectiveAcquiringSpecification, noteSpecification,
    quantitySpecificationDetailSpecification, calcSaleSumSpecificationDetailSpecification, calcVATSumSpecificationDetailSpecification, retailSumSpecificationDetailSpecification

    OBJECTS st=statement
    PROPERTIES (st) READONLY seriesNumberObject, dateStatement, nameCustomerStatement, nameDepartmentStoreStatement,
                             noteStatement, quantityStatementDetailStatement, calcVATSumStatementDetailStatement, retailSumStatementDetailStatement

    OBJECTS d=statementDetail
    PROPERTIES (d)  READONLY indexStatementDetail, barcodeExSkuStatementDetail, nameAttributeItemStatementDetail, quantityStatementDetail,
                             retailPriceStatementDetail, calcSaleSumStatementDetail, numberCalcRangeStatementDetail,
                             dataCalcRangeStatementDetail, calcVATSumStatementDetail,
                             retailSumStatementDetail, noteStatementDetail

    FILTERS inStatementSpecification(st, sp),
            isPostedStatement(st),
            inStatementStatementDetail(st, d)
;

DESIGN specificationForm FROM DEFAULT{
    main {
        preferredSize = (1024, 768);

        NEW case BEFORE functions.box{
            title = 'Накладные на отгрузку по данной с/ф';
            ADD st.grid;
            ADD d.grid;
        }
        NEW header.box BEFORE case {
            title = 'Счет-фактура';
            childConstraints = TO THE RIGHT;

            NEW headerRow1 {
                childConstraints = TO THE BOTTOM;

                ADD sp.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreSpecification);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateSpecification);
                    ADD PROPERTY(timeSpecification);
                }

                ADD sp.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                    NEW headerRow21 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(nameCustomerSpecification);
                        ADD PROPERTY(nameObjectiveAcquiringSpecification);
                    }
                    NEW headerRow22 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(dateToSpecification);
                        ADD PROPERTY(noteSpecification);
                    }
                }
            }

            ADD sp.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    }
}


showFormSpecificationForm 'Показать отгрузки по данной с/ф' (specification) = ACTION FORM specificationForm OBJECTS sp MODAL TOOLBAR;

@metaCodeInputMultipleItems (specification);

FORM specification 'Счет-фактура'
    OBJECTS sp=specification FIXED PANEL
    PROPERTIES (sp) nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, nameDepartmentStoreSpecification,
                    dateSpecification, timeSpecification, dateToSpecification, nameCustomerSpecification, UNPCustomerSpecification,
                    nameObjectiveAcquiringSpecification, noteSpecification,
                    quantitySpecificationDetailSpecification, calcSaleSumSpecificationDetailSpecification, calcVATSumSpecificationDetailSpecification, retailSumSpecificationDetailSpecification

    OBJECTS d=specificationDetail
    PROPERTIES (d) indexSpecificationDetail, barcodeExSkuSpecificationDetail, nameAttributeItemSpecificationDetail, quantitySpecificationDetail,
                   retailPriceSpecificationDetail, calcSaleSumSpecificationDetail, numberCalcRangeSpecificationDetail, dataCalcRangeSpecificationDetail,
                   calcVATSumSpecificationDetail, retailSumSpecificationDetail,
                   ADDOBJ, delete

    PROPERTIES FORCE PANEL READONLY articleItemSpecificationDetail(d), nameCountryItemSpecificationDetail(d), balanceDepartmentStoreItemSpecificationDetail(d)
                   BACKGROUND highlightSpecificationDetail(d), availableQuantityItemBySpecificationDetail(d) BACKGROUND notNullAvailableQuantityItemBySpecificationDetail(d)

    PROPERTIES inputMultipleItemsSpecification(sp) TODRAW d, addSpecificationDetailBarcode(sp) TODRAW d, cleanAllSpecificationDetailsSpecification(sp) FORCE PANEL TODRAW d
    FILTERS inSpecificationSpecificationDetail(sp, d)

    EDIT specification OBJECT sp
;

DESIGN specification FROM DEFAULT{
    main {
        preferredSize = (1024, 768);

        NEW header.box BEFORE d.box {
            childConstraints = TO THE RIGHT;

            NEW headerRow1 {
                childConstraints = TO THE BOTTOM;

                ADD sp.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreSpecification);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateSpecification);
                    ADD PROPERTY(timeSpecification);
                }

                ADD sp.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                    NEW headerRow21 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(nameCustomerSpecification);
                        ADD PROPERTY(UNPCustomerSpecification);
                        ADD PROPERTY(nameObjectiveAcquiringSpecification);
                    }
                    NEW headerRow22 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(dateToSpecification);
                        ADD PROPERTY(noteSpecification);
                    }
                }
            }

            ADD sp.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    }
}

FORM specifications 'Счет-фактуры'
    OBJECTS sp=specification
    PROPERTIES (sp) READONLY numberObject, seriesObject, dateSpecification, timeSpecification, nameDepartmentStoreSpecification,
                             nameCustomerSpecification, dateToSpecification, countSpecificationDetailSpecification, quantitySpecificationDetailSpecification,
                             calcSaleSumSpecificationDetailSpecification, calcVATSumSpecificationDetailSpecification, retailSumSpecificationDetailSpecification
    PROPERTIES (sp)          showFormSpecificationForm FORCE PANEL SHOWIF  countStatementSpecification(sp)

    PROPERTIES (sp)          ADDFORM, EDITFORM, delete

    OBJECTS d=specificationDetail
    PROPERTIES (d) READONLY  indexSpecificationDetail, barcodeExSkuSpecificationDetail, nameAttributeItemSpecificationDetail,
                             quantitySpecificationDetail, retailPriceSpecificationDetail,
                             calcSaleSumSpecificationDetail, numberCalcRangeSpecificationDetail, dataCalcRangeSpecificationDetail,
                             calcVATSumSpecificationDetail, retailSumSpecificationDetail

    PROPERTIES      FORCE PANEL toPrintSpecification(sp) TODRAW d
    FILTERS         inSpecificationSpecificationDetail(sp, d)

    FILTERGROUP filters6
            FILTER 'Просроченные с/ф' 'F10' overdueSpecification(sp)
            FILTER 'Непросроченные с/ф' 'F9' noOverdueSpecification(sp)
;

DESIGN specifications FROM DEFAULT {
    sp.box;
    d.box {
        d.panel {
            childConstraints = TO THE RIGHT;
            NEW caseOne{
                title = 'Печатные формы';
                ADD PROPERTY (toPrintSpecification(sp));
            }
        }
    }
    functions.box;
}

FORM specificationsStatement 'Счета'
    OBJECTS st=statement FIXED PANEL
    PROPERTIES (st) READONLY seriesNumberObject, dateStatement

    OBJECTS sp=specification

    PROPERTIES (st, sp) inStatementSpecification
    PROPERTIES (sp)     READONLY seriesNumberObject, dateSpecification, nameCustomerSpecification, nameDepartmentStoreSpecification,
                                 dateToSpecification, quantitySpecificationDetailSpecification, retailSumSpecificationDetailSpecification, statusSpecification
    PROPERTIES (st, sp) statusStatementSpecification

    FILTERS customerStatement(st) == customerSpecification(sp),
            departmentStoreStatement(st)== departmentStoreSpecification(sp),
            dateSpecification(sp) <= dateStatement(st)

    FILTERGROUP filters6
            FILTER 'Просроченные с/ф' 'F10' overdueSpecificationStatement(sp, st)
            FILTER 'Непросроченные с/ф' 'F9' noOverdueSpecificationStatement(sp, st) DEFAULT
            FILTER 'Без отгрузок с/ф ' 'F8' noStatementSpecification(sp)
;

showFormSpecificationsStatement 'Заказы' (statement) = ACTION FORM specificationsStatement OBJECTS st MODAL SHORTCUT specificationsStatement DEFAULT;

@metaCodeInputMultipleItems (statement);

toPrintActOfRevaluationStatement 'Акт переоценки' (statement) = toPrintActOfRevaluation(uniquePriceChangeStatement(statement)) IN printGroup;

FORM statement 'Отгрузка из розницы'
    OBJECTS st=statement FIXED PANEL
    PROPERTIES (st) numberObject, seriesObject, dateStatement, timeStatement, nameCustomerStatement, UNPCustomerStatement,
                    nameDepartmentStoreStatement, specificationsStatement, toFillStatementDetailsStatement, showFormSpecificationsStatement,
                    noteStatement, quantityStatementDetailStatement, calcSaleSumStatementDetailStatement, calcVATSumStatementDetailStatement, retailSumStatementDetailStatement,
                    numberDisposalStatement SHOWIF needToPriceChangeStatement(st), nameRevaluationCommitteeStatement SHOWIF needToPriceChangeStatement(st)

    PROPERTIES(st) carConsignment, ownerCarConsignment, trailerConsignment, driverCarConsignment, waybillConsignment,
                   nameTransportPayerConsignment, shipmentBaseConsignment, loadingPlaceConsignment, unloadingPlaceConsignment,
                   readdressingConsignment, commonNameIssuanceAllowedConsignment, commonNameIssuanceExecutedConsignment,
                   forwarderConsignment, warrantConsignment, warrantHolderConsignment, goodsAcceptedConsignment,
                   commonNameLoadingExecuterConsignment, nameWayOfLoadingConsignment, codeLoadingConsignment,
                   arrivalTimeConsignment, departureTimeConsignment, downtimeConsignment, raceQuantityConsignment,
                   sumQuantityConsignment, sumPackQuantityConsignment, sumGrossWeightConsignmentDetail,
                   sumCostConsignmentDetail, totalSumVATConsignmentDetail, costWithVATConsignment

    OBJECTS d=statementDetail
    PROPERTIES (d)  indexStatementDetail, barcodeExSkuStatementDetail, nameAttributeItemStatementDetail, quantityStatementDetail,
                    retailPriceStatementDetail, calcSaleSumStatementDetail, numberCalcRangeStatementDetail, dataCalcRangeStatementDetail,
                    calcVATSumStatementDetail, retailSumStatementDetail,
                    noteStatementDetail, ADDOBJ, delete

    PROPERTIES (d)  FORCE PANEL importerPriceStatementDetail, supplierPriceStatementDetail, nameWareStatementDetail, warePriceStatementDetail, dataRetailRangeStatementDetail,
                                curRetailPriceStatementDetail BACKGROUND differsPriceStatementDetail(d),
                                articleItemStatementDetail, nameCountryItemStatementDetail,
                                balanceDepartmentStoreItemStatementDetail BACKGROUND highlightStatementDetail(d)


    PROPERTIES      inputMultipleItemsStatement(st) TODRAW d, addStatementDetailBarcode(st) TODRAW d, cleanAllStatementDetailsStatement(st) FORCE PANEL TODRAW d

    FILTERS         inStatementStatementDetail(st, d)

    EDIT statement OBJECT st
;

DESIGN statement FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW specification.box BEFORE functions.box{
            type = TABBED;
            ADD d.box{
                title = 'Спецификация';
                ADD d.panel {
                    POSITION d.priceDetailGroup TO THE LEFT d.itemDetailGroup;
                }
            }
            NEW consignment{
                title = 'Накладная';
                childConstraints = TO THE BOTTOM;
                ADD st.carConsignmentGroup;
                ADD st.issuanceConsignmentGroup;
                ADD st.loadingConsignmentGroup;
                ADD st.sumConsignmentGroup {
                    childConstraints = TO THE RIGHT;
                }
                POSITION st.issuanceConsignmentGroup TO THE RIGHT st.carConsignmentGroup;
                POSITION st.loadingConsignmentGroup TO THE RIGHT st.carConsignmentGroup;
                POSITION st.sumConsignmentGroup TO THE RIGHT st.carConsignmentGroup;
            }
        }

        NEW header.box BEFORE specification.box {
            childConstraints = TO THE RIGHT;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;
                ADD st.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreStatement);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateStatement);
                    ADD PROPERTY(timeStatement);
                }
                ADD st.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                }
                ADD st.specificationGroup {
                    childConstraints = TO THE BOTTOM;
                }
                POSITION st.documentPrmGroup TO THE LEFT st.specificationGroup;
            }

            ADD st.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    }
}


FORM statements 'Отгрузки из розницы'
    OBJECTS st=statement
    PROPERTIES (st)  READONLY objectClassName, numberObject, seriesObject, dateStatement, timeStatement, nameDepartmentStoreStatement,
                     nameCustomerStatement, countStatementDetailStatement, quantityStatementDetailStatement,
                     calcSaleSumStatementDetailStatement, calcVATSumStatementDetailStatement, retailSumStatementDetailStatement
    PROPERTIES (st)  FORCE PANEL toPrintTransportConsignmentVerticalA, toPrintTransportConsignmentHorizontalA,
                     toPrintTransportConsignmentVerticalB, toPrintTransportConsignmentHorizontalB,
                     toPrintTransportConsignmentAttach, toPrintConsignmentTwoHorizontal,
                     toPrintConsignmentTwoVertical, toPrintConsignmentTwoAttach, toPrintActOfRevaluationStatement SHOWIF needToPriceChangeStatement(st),
                     nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES (st)  ADDFORM, EDITFORM SHOWIF isDraftStatement(st), delete FORCE PANEL SHOWIF isDraftStatement(st),
                     postStatement SHOWIF isDraftStatement(st), unpostStatement SHOWIF isPostedStatement(st)

    OBJECTS d=statementDetail
    PROPERTIES (d)   READONLY indexStatementDetail, barcodeExSkuStatementDetail, nameAttributeItemStatementDetail, quantityStatementDetail,
                              retailPriceStatementDetail, calcSaleSumStatementDetail, numberCalcRangeStatementDetail, dataCalcRangeStatementDetail,
                              calcVATSumStatementDetail, retailSumStatementDetail, noteStatementDetail

    FILTERS          inStatementStatementDetail(st, d)
;

DESIGN statements FROM DEFAULT {
    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }

    PROPERTY (delete(st)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }

    NEW footer.container BEFORE functions.box {
        childConstraints = TO THE RIGHT;

        ADD st.printGroup BEFORE functions.box {
            childConstraints = TO THE RIGHT;
            NEW ttn1{
                childConstraints = TO THE RIGHT;
                title = 'ТТН-1';
                NEW a{
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY(toPrintTransportConsignmentVerticalA);
                    ADD PROPERTY(toPrintTransportConsignmentHorizontalA);
                }
                NEW b{
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY(toPrintTransportConsignmentVerticalB);
                    ADD PROPERTY(toPrintTransportConsignmentHorizontalB);
                }
                NEW c{
                    ADD PROPERTY(toPrintTransportConsignmentAttach);
                }
            }
            NEW tn{
                childConstraints = TO THE RIGHT;
                title = 'ТН-2';
                NEW a1{
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY(toPrintConsignmentTwoVertical);
                    ADD PROPERTY(toPrintConsignmentTwoHorizontal);
                }
                NEW b1{
                    ADD PROPERTY(toPrintConsignmentTwoAttach);
                }
            }
    //        fillHorizontal = 1;
        }

        ADD st.historyGroup BEFORE st.printGroup{
            childConstraints = TO THE BOTTOM;
//            fillHorizontal = 1;
        }

        ADD st.postedGroup BEFORE st.printGroup{
            childConstraints = TO THE BOTTOM;
//            fillHorizontal = 1;
        }

        POSITION st.historyGroup TO THE LEFT st.postedGroup;
    }

 //   ADD d.box BEFORE footer.container;
}

//----------------------------------- Формы чеков -------------------------------------------------//

FORM bill 'Z-отчет'
    OBJECTS z=zReport FIXED PANEL
    PROPERTIES (z) numberCashRegisterZReport, nameDepartmentStoreZReport READONLY, dateZReport, timeZReport, numberZReport,
                    countBillZReport, quantityBillDetailZReport, retailSumBillDetailZReport, discountSumBillDetailZReport

    OBJECTS b=bill
    PROPERTIES(b) numberBill, dateBill, timeBill, nameDepartmentStoreBill READONLY,
                  numberDiscountCardBill, nameCustomerDiscountCardBill, retailSumBillDetailBill, discountSumBillDetailBill, countBillDetailBill, quantityBillDetailBill, ADDOBJ, delete
    FILTERS zReportBill(b)==z

    OBJECTS d=billDetail
    PROPERTIES(d) barcodeExBillDetail, nameAttributeItemBillDetail, quantityBillDetail, retailPriceBillDetail, retailSumBillDetail, discountSumBillDetail, ADDOBJ, delete

    FILTERS billBillDetail(d)==b

    OBJECTS p=payment
    PROPERTIES(p) namePaymentTypePayment, namePaymentMeansPayment, sumPayment, ADDOBJ, delete
    PROPERTIES addBillDetailBarcodeFill (b) TODRAW d

    FILTERS billPayment(p)==b

    EDIT zReport OBJECT z
;

DESIGN bill FROM DEFAULT{
    NEW row.box BEFORE functions.box{
        ADD d.box{
            title = 'Строка чека';
            fillHorizontal = 3;
        };
        ADD p.box{
            fillHorizontal = 1;
        };
        POSITION d.box TO THE LEFT p.box;
    }
};

FORM bills 'Чеки'
    OBJECTS z=zReport
    PROPERTIES (z) READONLY objectClassName, numberCashRegisterZReport, nameDepartmentStoreZReport, dateZReport, timeZReport,
                            numberZReport, countBillZReport, quantityBillDetailZReport, retailSumBillDetailZReport, discountSumBillDetailZReport
    PROPERTIES (z) ADDFORM, EDITFORM SHOWIF isDraftZReport(z), delete FORCE PANEL SHOWIF isDraftZReport(z),
                            postZReport SHOWIF isDraftZReport(z), unpostZReport SHOWIF isPostedZReport(z)

    OBJECTS b=bill
    PROPERTIES(b) READONLY  numberBill, dateBill, timeBill, nameDepartmentStoreBill,
                            numberDiscountCardBill, nameCustomerDiscountCardBill, retailSumBillDetailBill, discountSumBillDetailBill,
                            countBillDetailBill, quantityBillDetailBill

    FILTERS zReportBill(b)==z

    OBJECTS d=billDetail
    PROPERTIES(d) READONLY  barcodeExBillDetail, nameAttributeItemBillDetail, quantityBillDetail, retailPriceBillDetail,
                            supplierSumBalanceItemLedger, retailSumBillDetail, discountSumBillDetail

    FILTERS billBillDetail(d)==b

    OBJECTS p=payment
    PROPERTIES(p) READONLY  namePaymentTypePayment, namePaymentMeansPayment, sumPayment

    FILTERS billPayment(p)==b
;

DESIGN bills FROM DEFAULT{
        PROPERTY(objectClassName) {
            preferredCharWidth = 15;
        }
        PROPERTY (delete(z)) {
            panelLocation = TOOLBAR;
            askConfirm = TRUE;
        }
    NEW row.box BEFORE functions.box{
        ADD d.box{
            title = 'Строка чека';
            fillHorizontal = 3;
        };
        ADD p.box{
            fillHorizontal = 1;
        };
        POSITION d.box TO THE LEFT p.box;
    }
};

//----------------------------------- Акты проработки -------------------------------------------------//
@metaCodeDocumentMachineryPriceTransaction(actOfStudy);
@metaCodeDocumentLabelTransaction(actOfStudy);

FORM actOfStudy 'Акт проработки'

    OBJECTS a=actOfStudy FIXED PANEL

    PROPERTIES(a)   nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, nameDepartmentStoreActOfStudy,
                    dateActOfStudy, timeActOfStudy, nameContractorDepartmentStoreActOfStudy,
                    quantityStudyOutputDetailActOfStudy, retailSumStudyOutputDetailActOfStudy, quantityStudyInputDetailActOfStudy, retailSumStudyInputDetailActOfStudy,
                    numberOutputActOfStudy, seriesOutputActOfStudy, numberInputActOfStudy, seriesInputActOfStudy

    OBJECTS sid=studyInputDetail
    OBJECTS sod=studyOutputDetail

    PROPERTIES(sid) nameAttributeItemStudyInputDetail
    PROPERTIES(sid) seriesNumberCuttingStudyInputDetail READONLY, showSeriesNumberCuttingStudyInputDetail
    PROPERTIES(sid) READONLY dateCuttingStudyInputDetail, descriptionCuttingStudyInputDetail,
                    percAllowancesCuttingStudyInputDetail, percLossesCuttingStudyInputDetail, percSweepsCuttingStudyInputDetail
    PROPERTIES(sid) importerPriceStudyInputDetail, supplierPriceStudyInputDetail, numberRetailRangeStudyInputDetail, dataRetailRangeStudyInputDetail,
                    retailPriceStudyInputDetail, quantityStudyInputDetail, retailSumStudyInputDetail,
                    totalPercGoodsStudyInputDetail BACKGROUND highlightStudyInputDetail(sid) READONLY, ADDOBJ, delete

    PROPERTIES(sid) toFillStudyOutputDetailsStudyInputDetail FORCE PANEL SHOWIF showNotStudyInputDetailStudyOutputDetail(sid,sod),
                    cleanAllStudyInputDetail FORCE PANEL

    PROPERTIES(sod) nameAttributeItemStudyOutputDetail, shortNameUnitOfMeasureItemStudyOutputDetail, importerPriceStudyOutputDetail, supplierPriceStudyOutputDetail,
                    numberRetailRangeStudyOutputDetail, dataRetailRangeStudyOutputDetail, factorStudyOutputDetail, percGoodsStudyOutputDetail,
                    retailPriceStudyOutputDetail, calculatedStudyOutputDetail, actualQuantityStudyOutputDetail, retailSumStudyOutputDetail

    PROPERTIES(sod) FORCE PANEL curImporterPriceStudyOutputDetail, curSupplierPriceStudyOutputDetail, curNumberRetailRangeStudyOutputDetail,
                    curDataRetailRangeStudyOutputDetail, curRetailPriceStudyOutputDetail

    FILTERS         actOfStudyStudyInputDetail(sid) == a,
                    studyInputDetailStudyOutputDetail(sod) == sid

    EDIT actOfStudy OBJECT a
;

DESIGN actOfStudy FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW header.box BEFORE sid.box {
            childConstraints = TO THE RIGHT;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;

                ADD a.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreActOfStudy);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateActOfStudy);
                    ADD PROPERTY(timeActOfStudy);
                }

                ADD a.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                }

                NEW headerOut {
                    title = 'Расходная накладная';
                    ADD PROPERTY(numberOutputActOfStudy);
                    ADD PROPERTY(seriesOutputActOfStudy);
                }
                POSITION a.documentPrmGroup TO THE LEFT headerOut;

                NEW headerIn {
                    title = 'Приходная накладная';
                    ADD PROPERTY(numberInputActOfStudy);
                    ADD PROPERTY(seriesInputActOfStudy);
                }
                POSITION a.documentPrmGroup TO THE LEFT headerIn;
                POSITION headerOut TO THE LEFT headerIn;
            }

            NEW sumsContainer {
                childConstraints = TO THE BOTTOM;
                NEW inSumsContainer {
                    title = 'Итоги (вход)';
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY(quantityStudyInputDetailActOfStudy);
                    ADD PROPERTY(retailSumStudyInputDetailActOfStudy);
                }
                NEW outSumsContainer {
                    title = 'Итоги (выход)';
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY(quantityStudyOutputDetailActOfStudy);
                    ADD PROPERTY(retailSumStudyOutputDetailActOfStudy);
                }
            }
        }
    }
}


FORM actOfStudies 'Акты проработки'

    OBJECTS a=actOfStudy
    PROPERTIES(a)  READONLY objectClassName, numberObject, seriesObject, dateActOfStudy, timeActOfStudy, nameDepartmentStoreActOfStudy,
                            nameContractorDepartmentStoreActOfStudy, quantityStudyOutputDetailActOfStudy, retailSumStudyOutputDetailActOfStudy, quantityStudyInputDetailActOfStudy, retailSumStudyInputDetailActOfStudy,
                            statusPrintPriceTransactionDocument BACKGROUND backgroundPrintLabelTransactionActOfStudy(a),
                            statusEquipmentPriceTransactionDocument BACKGROUND backgroundCreateMachineryPriceTransactionActOfStudy(a)

    PROPERTIES(a) READONLY FORCE PANEL timeCreated, nameUserCreated, hostnameComputerCreated, timeClosed, nameUserClosed, hostnameComputerClosed

    PROPERTIES (a)          createActOfStudyLabelTransaction FORCE PANEL SHOWIF showPrintLabelTransactionActOfStudy(a),
                            createSnapshotActOfStudyLabelTransaction FORCE PANEL SHOWIF isPostedActOfStudy(a),
                            createActOfStudyMachineryPriceTransaction FORCE PANEL SHOWIF showCreateMachineryPriceTransactionActOfStudy(a),
                            createSnapshotActOfStudyMachineryPriceTransaction FORCE PANEL SHOWIF isPostedActOfStudy(a),
                            ADDFORM, EDITFORM SHOWIF isDraftActOfStudy(a), delete FORCE PANEL SHOWIF isDraftActOfStudy(a),
                            postActOfStudy SHOWIF isDraftActOfStudy(a), unpostActOfStudy SHOWIF isPostedActOfStudy(a)

    OBJECTS i = item
    PROPERTIES(i)      READONLY nameAttributeItem, shortNameUnitOfMeasureItem
    PROPERTIES(i, a)   READONLY quantityStudyInputDetailItemActOfStudy, retailSumStudyInputDetailItemActOfStudy, quantityStudyOutputDetailItemActOfStudy, retailSumStudyOutputDetailItemActOfStudy

    ORDER BY           retailSumStudyInputDetailItemActOfStudy, retailSumStudyOutputDetailItemActOfStudy
    FILTERS            quantityStudyInputDetailItemActOfStudy(i, a) OR quantityStudyOutputDetailItemActOfStudy(i, a)

    FILTERGROUP filters1
        FILTER 'Показать приход' 'F10' retailSumStudyOutputDetailItemActOfStudy(i, a)
        FILTER 'Показать расход' 'F9' retailSumStudyInputDetailItemActOfStudy(i, a)
;

DESIGN actOfStudies FROM DEFAULT {
    PROPERTY(objectClassName) {
        preferredCharWidth = 25;
    }
    PROPERTY (delete(a)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
    a.historyGroup {
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    }
    a.postedGroup {
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    }
    POSITION a.historyGroup TO THE LEFT a.postedGroup;
    ADD i.box BEFORE a.historyGroup;
}

//----------------------------------- Форма для остатков -------------------------------------------------//

inTradingNetworkStoreTypeStoreDepartmentDepartment (tradingNetwork, storeType, store, department, depStore) = UNION OVERRIDE
    department == depStore AND store  AND tradingNetwork AND storeType,
    storeDepartmentStore(department) == store AND NOT depStore AND tradingNetwork AND storeType,
    storeTypeDepartmentStore(department) == storeType AND NOT depStore AND tradingNetwork AND NOT store,
    tradingNetworkDepartmentStore(department) == tradingNetwork AND NOT store AND NOT storeType AND NOT depStore,
    department IS departmentStore AND NOT store AND NOT storeType AND NOT tradingNetwork AND NOT depStore;

countDayMovedItem 'Кол-во дней (30)' = SESSION DATA INTEGER (departmentStore) TOOLBAR;
countDayMovedItemOver 'кол-во дней' (departmentStore) =
    UNION OVERRIDE 30 AND departmentStore AS departmentStore, countDayMovedItem(departmentStore);

//для оптимизации быстродействия не добавлял дату в GROUP MAX
dateLastMovedItem 'Дата последнего движения товара' (item, departmentStore) =
    GROUP MAX dateTimeBalanceItemLedger(ledger)
    BY itemBalanceItemLedger(ledger), departmentStoreBalanceItemLedger(ledger) PERSISTENT;

dateLastMovedItemOver(item, departmentStore, date) =
    (dateLastMovedItem(item, departmentStore) AND (date AS DATETIME)) >= sumDate(dateInTime(date), -countDayMovedItemOver(departmentStore));

dateLastMovedUnionBalanceItem(item, departmentStore, date) =
    TRUE IF balanceAItemLedgerDateTime(item, departmentStore, date) OR TRUE IF dateLastMovedItemOver(item, departmentStore, date);

curDateLastMovedItemOver(item, departmentStore) =
    dateLastMovedItem(item, departmentStore) >= sumDate(currentDate(), -countDayMovedItemOver(departmentStore));

curDateLastMovedUnionBalanceItem(item, departmentStore) =
    TRUE IF currentBalanceItemLedger(item, departmentStore) OR TRUE IF curDateLastMovedItemOver(item, departmentStore);

FORM balanceItemDepartment 'Остатки на дату'

    OBJECTS t=DATETIME FIXED PANEL
    PROPERTIES(t) OBJVALUE

    TREE treeStore a=STRING[3], tn=tradingNetwork, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY OBJVALUE(a), name(tn), name(st), name(s), name(ds)
    FILTERS stringEqualsAll(a), inTradingNetworkStoreType (tn, st), inStoreTypeStore (st, s), inStoreDepartment(s, ds)

    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY gname = name(g)
    ORDER BY gname

    OBJECTS           dsi=(dep=departmentStore, i=item)
    PROPERTIES        READONLY nameIt=nameAttributeItem(i), nameDep=name(dep)  //  barcodeBarcodeSku
    FILTERS           hasParentItemGroupSku(g, i),
                      inTradingNetworkStoreTypeStoreDepartmentDepartment(tn, st, s, dep, ds)


    PROPERTIES(i, dep, t) READONLY balanceAItemLedgerDateTime, priceImporterALedgerDateTime, priceSupplierALedgerDateTime,
                                   priceAccountALedgerDateTime, dataRetailALedgerDateTime, priceRetailALedgerDateTime,
                                   warePriceALedgerDateTime

    PROPERTIES(i, dep) READONLY dateLastMovedItem

    PROPERTIES countDayMovedItem(dep) TODRAW dsi FORCE PANEL

    FILTERGROUP filters
        FILTER 'Товары с остатком' 'F10' balanceAItemLedgerDateTime(i, dep, t) DEFAULT
        FILTER 'Товары с движением не позднее' 'F9' dateLastMovedUnionBalanceItem(i, dep, t)

    OBJECTS apl=accountPriceLedger
    PROPERTIES (apl) descriptionAccountPriceLedger, dateTimeAccountPriceLedger, priceAccountLedger
    FILTERS isPostedAccountPriceLedger(apl) AND itemAccountPriceLedger(apl)==i AND departmentStoreAccountPriceLedger(apl)==dep
    ORDER BY dateTimeAccountPriceLedger DESC

    OBJECTS rpl=retailPriceLedger
    PROPERTIES (rpl) descriptionRetailPriceLedger, dateTimeRetailPriceLedger, priceRetailLedger
    FILTERS isPostedRetailPriceLedger(rpl) AND itemRetailPriceLedger(rpl)==i AND departmentStoreRetailPriceLedger(rpl)==dep
    ORDER BY dateTimeRetailPriceLedger DESC

    OBJECTS bil=balanceItemLedger
    PROPERTIES(bil) descriptionBalanceItemLedger, dateTimeBalanceItemLedger, signedQuantityBalanceItemLedger READONLY
    FILTERS isPostedBalanceItemLedger(bil) AND itemBalanceItemLedger(bil)==i AND departmentStoreBalanceItemLedger(bil)==dep
    ORDER BY dateTimeBalanceItemLedger DESC

    OBJECTS ipl=importerPriceLedger
    PROPERTIES(ipl) descriptionImporterPriceLedger, dateTimeImporterPriceLedger, priceImporterLedger
    FILTERS isPostedImporterPriceLedger(ipl) AND itemImporterPriceLedger(ipl)==i AND departmentStoreImporterPriceLedger(ipl)==dep
    ORDER BY dateTimeImporterPriceLedger DESC

    OBJECTS spl=supplierPriceLedger
    PROPERTIES(spl) descriptionSupplierPriceLedger, dateTimeSupplierPriceLedger, priceSupplierLedger
    FILTERS isPostedSupplierPriceLedger(spl) AND itemSupplierPriceLedger(spl)==i AND departmentStoreSupplierPriceLedger(spl)==dep
    ORDER BY dateTimeSupplierPriceLedger DESC

    OBJECTS rvl=retailVATLedger
    PROPERTIES(rvl) descriptionRetailVATLedger, dateTimeRetailVATLedger, dataRetailLedger
    FILTERS isPostedRetailVATLedger(rvl) AND itemRetailVATLedger(rvl)==i AND departmentStoreRetailVATLedger(rvl)==dep
    ORDER BY dateTimeRetailVATLedger DESC

    OBJECTS wpl= warePriceLedger
    PROPERTIES(wpl) descriptionWarePriceLedger, dateTimeWarePriceLedger, nameWareWarePriceLedger, wareWarePricePriceLedger
    FILTERS isPostedWarePriceLedger(wpl) AND itemWarePriceLedger(wpl)==i AND departmentStoreWarePriceLedger(wpl)==dep
    ORDER BY dateTimeWarePriceLedger DESC
;

DESIGN balanceItemDepartment FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW firstCase {
                fillHorizontal = 1;
                childConstraints = TO THE BOTTOM;
                ADD t.box;
                ADD treeStore.box {title = 'Магазины';};
                ADD treeGroups.box {title = 'Товарные группы';};
        }

        NEW secondCase {
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD dsi.box {fillVertical = 2;}

                NEW ledger.box {
                    fillVertical = 1;
                    title = 'Изменение цен';
                    type = TABBED;
                    ADD bil.box;
                    ADD apl.box;
                    ADD rpl.box;
                    ADD ipl.box;
                    ADD spl.box;
                    ADD rvl.box;
                    ADD wpl.box;
                }

        }
        POSITION firstCase TO THE LEFT secondCase;

        ADD functions.box;
    }
}

FORM curBalanceItemDepartment 'Текущие остатки'

    TREE treeStore a=STRING[3], tn=tradingNetwork, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY OBJVALUE(a), name(tn), name(st), name(s), name(ds)
    FILTERS stringEqualsAll(a), inTradingNetworkStoreType (tn, st), inStoreTypeStore (st, s), inStoreDepartment(s, ds)

    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY gname = name(g)
    ORDER BY gname

    OBJECTS           dsi=(dep=departmentStore, i=item)
    PROPERTIES        READONLY nameIt=nameAttributeItemGroupItem(g, i), nameDep=name(dep)  //  barcodeBarcodeSku
    FILTERS           nameAttributeItemGroupItem (g, i),
                      inTradingNetworkStoreTypeStoreDepartmentDepartment(tn, st, s, dep, ds)
    ORDER BY          nameIt


    PROPERTIES(i, dep) READONLY currentBalanceItemLedger, currentPriceImporterLedger, currentPriceSupplierLedger,
                                currentPriceAccountLedger, dataCurrentRetailLedger, currentPriceRetailLedger,
                                currentWarePriceLedger, dateLastMovedItem, averageSoldItemDepartmentStore

    PROPERTIES countDayMovedItem(dep) TODRAW dsi FORCE PANEL

    FILTERGROUP filters
        FILTER 'Товары с остатком' 'F10' currentBalanceItemLedger(i, dep) DEFAULT
        FILTER 'Товары с движением не позднее' 'F9' curDateLastMovedUnionBalanceItem(i, dep)

    OBJECTS apl=accountPriceLedger
    PROPERTIES (apl) descriptionAccountPriceLedger, dateTimeAccountPriceLedger, priceAccountLedger
    FILTERS isPostedAccountPriceLedger(apl) AND itemAccountPriceLedger(apl)==i AND departmentStoreAccountPriceLedger(apl)==dep
    ORDER BY dateTimeAccountPriceLedger DESC

    OBJECTS rpl=retailPriceLedger
    PROPERTIES (rpl) descriptionRetailPriceLedger, dateTimeRetailPriceLedger, priceRetailLedger
    FILTERS isPostedRetailPriceLedger(rpl) AND itemRetailPriceLedger(rpl)==i AND departmentStoreRetailPriceLedger(rpl)==dep
    ORDER BY dateTimeRetailPriceLedger DESC

    OBJECTS bil=balanceItemLedger
    PROPERTIES(bil) descriptionBalanceItemLedger, dateTimeBalanceItemLedger, signedQuantityBalanceItemLedger READONLY
    FILTERS isPostedBalanceItemLedger(bil) AND itemBalanceItemLedger(bil)==i AND departmentStoreBalanceItemLedger(bil)==dep
    ORDER BY dateTimeBalanceItemLedger DESC

    OBJECTS ipl=importerPriceLedger
    PROPERTIES(ipl) descriptionImporterPriceLedger, dateTimeImporterPriceLedger, priceImporterLedger
    FILTERS isPostedImporterPriceLedger(ipl) AND itemImporterPriceLedger(ipl)==i AND departmentStoreImporterPriceLedger(ipl)==dep
    ORDER BY dateTimeImporterPriceLedger DESC

    OBJECTS spl=supplierPriceLedger
    PROPERTIES(spl) descriptionSupplierPriceLedger, dateTimeSupplierPriceLedger, priceSupplierLedger
    FILTERS isPostedSupplierPriceLedger(spl) AND itemSupplierPriceLedger(spl)==i AND departmentStoreSupplierPriceLedger(spl)==dep
    ORDER BY dateTimeSupplierPriceLedger DESC

    OBJECTS rvl=retailVATLedger
    PROPERTIES(rvl) descriptionRetailVATLedger, dateTimeRetailVATLedger, dataRetailLedger
    FILTERS isPostedRetailVATLedger(rvl) AND itemRetailVATLedger(rvl)==i AND departmentStoreRetailVATLedger(rvl)==dep
    ORDER BY dateTimeRetailVATLedger DESC

    OBJECTS wpl=warePriceLedger
    PROPERTIES(wpl) descriptionWarePriceLedger, dateTimeWarePriceLedger, nameWareWarePriceLedger, wareWarePricePriceLedger
    FILTERS isPostedWarePriceLedger(wpl) AND itemWarePriceLedger(wpl)==i AND departmentStoreWarePriceLedger(wpl)==dep
    ORDER BY dateTimeWarePriceLedger DESC

    OBJECTS bt=batch
    PROPERTIES(bt) READONLY      dateTimeBatch, descriptionBatch, quantityBatch, supplierPriceBatch
    PROPERTIES(bt, dep) READONLY currentBalanceBatchLedger
    FILTERS isPostedBatch(bt) AND itemBatch(bt)==i
    ORDER BY dateTimeBatch DESC
;

DESIGN curBalanceItemDepartment FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;

            NEW firstBottom {
                type = SPLITV;
                ADD treeStore.box {title = 'Магазины';};
                ADD treeGroups.box {title = 'Товарные группы';};
            }

            NEW secondCase {
                type = SPLITV;
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD dsi.box { fillVertical = 2; }

                NEW ledger.box {
                    fillVertical = 1;
                    title = 'Изменение цен';
                    type = TABBED;
                    ADD bil.box;
                    ADD bt.box;
                    ADD apl.box;
                    ADD rpl.box;
                    ADD ipl.box;
                    ADD spl.box;
                    ADD rvl.box;
                    ADD wpl.box;
                }
            }
        }

        ADD functions.box;
    }
}

FORM costItemLedger 'Себестоимость'
    OBJECTS bil = balanceItemLedger
    PROPERTIES(bil) READONLY dateTimeBalanceItemLedger, descriptionBalanceItemLedger, nameItemBalanceItemLedger, nameDepartmentStoreBalanceItemLedger,
                             quantityBalanceItemLedger, costedBalanceItemLedger
    PROPERTIES(bil)          resetCostBalanceItemLedgerBatch
    ORDER BY dateTimeBalanceItemLedger

    FILTERGROUP needToCostBalanceItemLedger
        FILTER 'Нерасписанные строки' 'F9' needToCostBalanceItemLedger(bil)

    OBJECTS bt = batch
    PROPERTIES(bt) READONLY dateTimeBatch, descriptionBatch, quantityBatch, supplierPriceBatch, currentBalanceBatch
    PROPERTIES(bil, bt)     costBalanceItemLedgerBatch FORCE GRID
    FILTERS itemBatch(bt) == itemBalanceItemLedger(bil)
    ORDER BY dateTimeBatch DESC

    FILTERGROUP inBalanceItemLedgerBatch
        FILTER 'Только расписанные партии' 'F10' costBalanceItemLedgerBatch (bil, bt) DEFAULT

    PROPERTIES() setBalanceItemLedgerBatchCost, resetBalanceItemLedgerBatchCost, clearBalanceItemLedgerBatchCost
;

DESIGN costItemLedger FROM DEFAULT {
    NEW buttonCont BEFORE functions.box {
        childConstraints = TO THE RIGHT;
        ADD PROPERTY(setBalanceItemLedgerBatchCost);
        ADD PROPERTY(resetBalanceItemLedgerBatchCost);
        ADD PROPERTY(clearBalanceItemLedgerBatchCost);
    }
}

//---------------------------------------------- Формы продаж -------------------------------------//

FORM salesLedger 'Продажи по позициям'

    OBJECTS (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES OBJVALUE(dFrom), OBJVALUE(dTo)

    OBJECTS s = salesLedger
    PROPERTIES(s) READONLY dateSalesLedger, dateTimeSalesLedger, nameDepartmentStoreSalesLedger, nameItemSalesLedger, descriptionSalesLedger,
                           quantitySalesLedger, supplierSumBalanceItemLedger, markupSumSalesLedger, vatSumSalesLedger, retailSumSalesLedger
    FILTERS isPostedSalesLedger(s)
    FILTERS dateSalesLedger(s) >= dFrom, dateSalesLedger(s) <= dTo
;

FORM salesItemDepartmentStore 'Продажи по товарам'

    OBJECTS dates = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES OBJVALUE(dFrom), OBJVALUE(dTo)

    TREE treeStore a=STRING[3], tn=tradingNetwork, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY OBJVALUE(a), name(tn), name(st), name(s), name(ds)
    FILTERS stringEqualsAll(a), inTradingNetworkStoreType (tn, st), inStoreTypeStore (st, s), inStoreDepartment(s, ds)

    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY gname = name(g)
    ORDER BY gname

    OBJECTS           dsi=(dep=departmentStore, i=item)
    PROPERTIES        READONLY nameIt=nameAttributeItemGroupItem(g, i), nameDep=name(dep)  //  barcodeBarcodeSku
    FILTERS           nameAttributeItemGroupItem (g, i),
                      inTradingNetworkStoreTypeStoreDepartmentDepartment(tn, st, s, dep, ds)
    ORDER BY          nameIt

    PROPERTIES        balanceBItemLedgerDate(i, dep, dFrom),
                      quantitySoldItemDepartmentStoreDateFromTo(i, dep, dFrom, dTo),
                      balanceAItemLedgerDate(i, dep, dTo)
;

DESIGN salesItemDepartmentStore FROM DEFAULT {

    main{
        NEW firstCase {
                childConstraints = TO THE BOTTOM;
                ADD treeStore.box {title = 'Магазины';};
                ADD treeGroups.box {title = 'Товарные группы';};
        }

        NEW secondCase {
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD dates.box;
                ADD dsi.box {fillVertical = 2;}

        }
        POSITION firstCase TO THE LEFT secondCase;

        ADD functions.box;
    }
}

//---------------------------------------------- Формы стат. отчетов -------------------------------------//

//  12 ТОРГ ПРОДАЖИ

netWeightSoldItemDepartmentStoreDateFromTo 'Вес проданного товара, кг' (item, departmentStore, dateFrom, dateTo) =
    quantitySoldItemDepartmentStoreDateFromTo(item, departmentStore, dateFrom, dateTo) *
    (UNION OVERRIDE 1 IF item IS item, netWeightItem(item) AND NOT isWeightItem(item));
volumeSoldItemDepartmentStoreDateFromTo 'Объем проданного товара, л' (item, departmentStore, dateFrom, dateTo) =
    quantitySoldItemDepartmentStoreDateFromTo(item, departmentStore, dateFrom, dateTo) * volumeItem(item);
// retailSumSoldItemDepartmentStoreDateFromTo 'Продано, сумма' (item, departmentStore, dateFrom, dateTo)   - рубли
//quantitySoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo)                      - шт.

retailSumCardDepartmentDateFromTo 'Продано с использованием банк. карточек' (departmentStore, dateFrom, dateTo) = GROUP SUM sumPayment(payment) AND paymentMeansPayment(payment)==paymentMeans.card
    AND dateBill(billPayment(payment)) >= (dateFrom AS DATE) AND dateBill(billPayment(payment)) <= (dateTo AS DATE) AND isPostedBill(billPayment(payment))
        BY departmentStoreBill(billPayment(payment)), dateFrom, dateTo;

retailSumSaleDepartmentDateFromTo 'Продано по кассе' (departmentStore, dateFrom, dateTo) = GROUP SUM retailSumBillDetailBill(bill)
    AND dateBill(bill) >= (dateFrom AS DATE) AND dateBill(bill) <= (dateTo AS DATE) AND isPostedBill(bill)
        BY departmentStoreBill(bill), dateFrom, dateTo;

                            //с коэффициентом пересчета за период//
//всего
quantitySoldByStatisticGroupDateFromTo 'Продано, шт' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM quantitySoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
netWeightSoldByStatisticGroupDateFromTo 'Продано, кг' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM netWeightSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
volumeSoldByStatisticGroupDateFromTo 'Продано, л' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM volumeSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
retailSumSoldByStatisticGroupDateFromTo 'Продано, руб.' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM retailSumSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

//бел. пр-ва
quantitySoldResidentByStatisticGroupDateFromTo 'Продано, шт' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM quantitySoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
netWeightSoldResidentByStatisticGroupDateFromTo 'Продано, кг' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM netWeightSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
volumeSoldResidentByStatisticGroupDateFromTo 'Продано, л' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM volumeSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
retailSumSoldResidentByStatisticGroupDateFromTo 'Продано, руб.' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM retailSumSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

netWeightBalanceAItemLedgerDate 'Вес товара на конец , кг' (item, departmentStore, dateTo) =
    balanceAItemLedgerDate (item, departmentStore, dateTo) * (UNION OVERRIDE 1 IF item IS item, netWeightItem(item) AND NOT isWeightItem(item));
volumeBalanceAItemLedgerDate 'Объем товара на конец , л' (item, departmentStore, dateTo) =
    balanceAItemLedgerDate (item, departmentStore, dateTo) * volumeItem(item);
retailSumBalanceAItemLedgerDate 'Сумма товара на конец , руб' (item, departmentStore, dateTo) =
    priceRetailALedgerDate (item, departmentStore, dateTo) * balanceAItemLedgerDate(item, departmentStore, dateTo);
//balanceAItemLedgerDate (item, departmentStore, dateTo)    - шт.

                                   //с коэффициентом пересчета на коцен//
// всего
balanceByStatisticGroupDateTo 'Остаток на конец' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM balanceAItemLedgerDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
netWeightByStatisticGroupDateTo 'Вес на конец, кг' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM netWeightBalanceAItemLedgerDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
volumeByStatisticGroupDateTo 'Объем на конец, л' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM volumeBalanceAItemLedgerDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
retailSumByStatisticGroupDateTo 'Сумма на конец, руб' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM retailSumBalanceAItemLedgerDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

// бел. пр-ва
balanceResidentByStatisticGroupDateTo 'Остаток на конец' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM balanceAItemLedgerDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
netWeightResidentByStatisticGroupDateTo 'Вес на конец, кг' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM netWeightBalanceAItemLedgerDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
volumeResidentByStatisticGroupDateTo 'Объем на конец, л' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM volumeBalanceAItemLedgerDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
retailSumResidentByStatisticGroupDateTo 'Сумма на конец, руб' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM retailSumBalanceAItemLedgerDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

valueByStatisticGroupDateFromTo 'Продано' (statisticGroup, departmentStore, dateFrom, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN quantitySoldByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightSoldByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeSoldByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumSoldByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        DEFAULT 0 AND statisticGroup IS statisticGroup AND departmentStore IS departmentStore AND dateFrom IS DATE AND dateTo IS DATE
    END;
valueResidentByStatisticGroupDateFromTo 'Продано, бел. пр-ва' (statisticGroup, departmentStore, dateFrom, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN quantitySoldResidentByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightSoldResidentByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeSoldResidentByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumSoldResidentByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        DEFAULT 0 AND statisticGroup IS statisticGroup AND departmentStore IS departmentStore AND dateFrom IS DATE AND dateTo IS DATE
    END;

valueByStatisticGroupDateTo 'Остаток на конец' (statisticGroup, departmentStore, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN balanceByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        DEFAULT 0 IF statisticGroup IS statisticGroup AND departmentStore IS departmentStore AND dateTo IS DATE
    END;
valueResidentByStatisticGroupDateTo 'Остаток на конец, бел. пр-ва' (statisticGroup, departmentStore, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN balanceResidentByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightResidentByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeResidentByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumResidentByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        DEFAULT 0 IF statisticGroup IS statisticGroup AND departmentStore IS departmentStore AND dateTo IS DATE
    END;

FORM statisticalReport '12-Торг (продажи) справочно'

    OBJECTS dates = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES OBJVALUE(dFrom), OBJVALUE(dTo)

    TREE treeStore a=STRING[3], tn=tradingNetwork, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY OBJVALUE(a), name(tn), name(st), name(s), name(ds)
    FILTERS stringEqualsAll(a), inTradingNetworkStoreType (tn, st), inStoreTypeStore (st, s), inStoreDepartment(s, ds)

    TREE treeGroups g=statisticGroup PARENT parentStatisticGroup
    PROPERTIES READONLY gname = name(g), sidStatisticGroup(g), nameUnitOfMeasureStatisticGroup(g)
    ORDER BY gname

    OBJECTS           dsi=(dep=departmentStore, i=item)
    PROPERTIES        READONLY nameIt=nameAttributeStatisticGroupItem(g, i), nameDep=name(dep)
    FILTERS           nameAttributeStatisticGroupItem (g, i),
                      inTradingNetworkStoreTypeStoreDepartmentDepartment(tn, st, s, dep, ds)
    ORDER BY          nameIt

    PROPERTIES        balanceBItemLedgerDate(i, dep, dFrom),
                      quantitySoldItemDepartmentStoreDateFromTo(i, dep, dFrom, dTo),
                      balanceAItemLedgerDate(i, dep, dTo)
    PROPERTIES  FORCE PANEL valueByStatisticGroupDateFromTo(g, ds, dFrom, dTo), valueResidentByStatisticGroupDateFromTo(g, ds, dFrom, dTo)
    PROPERTIES  FORCE PANEL valueByStatisticGroupDateTo(g, ds, dTo), valueResidentByStatisticGroupDateTo(g, ds, dTo)
    PROPERTIES  FORCE PANEL retailSumCardDepartmentDateFromTo(ds, dFrom, dTo), retailSumSaleDepartmentDateFromTo(ds, dFrom, dTo)
;

DESIGN statisticalReport FROM DEFAULT {

    main{
        NEW firstCase {
                childConstraints = TO THE BOTTOM;
                ADD treeStore.box {title = 'Магазины';};
                ADD treeGroups.box {title = 'Статистические группы';};
        }

        NEW secondCase {
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD dates.box;
                ADD dsi.box {fillVertical = 2;
                    title = 'Показатели по продажам в номинальных еденицах';
                }

        }
        POSITION firstCase TO THE LEFT secondCase;
        NEW row {
            title = 'Суммы';
            childConstraints = TO THE BOTTOM;
            NEW row1 {
            title = 'По отдел-группа, с учетом ед. изм. и коэфф. перевода';
            ADD PROPERTY(valueByStatisticGroupDateFromTo(g, ds, dFrom, dTo));
            ADD PROPERTY(valueResidentByStatisticGroupDateFromTo(g, ds, dFrom, dTo));
            ADD PROPERTY(valueByStatisticGroupDateTo(g, ds, dTo));
            ADD PROPERTY(valueResidentByStatisticGroupDateTo(g, ds, dTo));
            }
            NEW row2 {
            title = 'По отделу, руб.';
            ADD PROPERTY(retailSumCardDepartmentDateFromTo(ds, dFrom, dTo));
            ADD PROPERTY(retailSumSaleDepartmentDateFromTo(ds, dFrom, dTo));
            }
        }
        ADD functions.box;
    }
}
                ///////////////--------по регионам и компании----------/////////////////
regionDepartmentStore(departmentStore) = regionStore(storeDepartmentStore(departmentStore));

                           //c коэффициентом пересчета за период//
// всего
quantitySoldByStatisticGroupRegionDateFromTo 'Продано, шт' (statisticGroup, company, region, dateFrom, dateTo)=
    [GROUP SUM quantitySoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, company, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

netWeightSoldByStatisticGroupRegionDateFromTo 'Продано, кг' (statisticGroup, company, region, dateFrom, dateTo)=
    [GROUP SUM netWeightSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, company, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

volumeSoldByStatisticGroupRegionDateFromTo 'Продано, л' (statisticGroup, company, region, dateFrom, dateTo)=
    [GROUP SUM volumeSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, company, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

retailSumSoldByStatisticGroupRegionDateFromTo 'Продано, руб.' (statisticGroup, company, region, dateFrom, dateTo)=
    [GROUP SUM retailSumSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, company, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

// белорусского производствава
quantitySoldResidentByStatisticGroupRegionDateFromTo 'Продано, шт' (statisticGroup, company, region, dateFrom, dateTo)=
    [GROUP SUM quantitySoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, company, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

netWeightSoldResidentByStatisticGroupRegionDateFromTo 'Продано, кг' (statisticGroup, company, region, dateFrom, dateTo)=
    [GROUP SUM netWeightSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, company, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

volumeSoldResidentByStatisticGroupRegionDateFromTo 'Продано, л' (statisticGroup, company, region, dateFrom, dateTo)=
    [GROUP SUM volumeSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, company, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

retailSumSoldResidentByStatisticGroupRegionDateFromTo 'Продано, руб.' (statisticGroup, company, region, dateFrom, dateTo)=
    [GROUP SUM retailSumSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, company, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

                             //с коэффициентом пересчета на коцен//
// всего
balanceByStatisticGroupRegionDateTo 'Остаток на конец' (statisticGroup, company, region, dateTo)=
    [GROUP SUM balanceAItemLedgerDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, company, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

netWeightByStatisticGroupRegionDateTo 'Вес на конец, кг' (statisticGroup, company, region, dateTo)=
    [GROUP SUM netWeightBalanceAItemLedgerDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, company, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

volumeByStatisticGroupRegionDateTo 'Объем на конец, л' (statisticGroup, company, region, dateTo)=
    [GROUP SUM volumeBalanceAItemLedgerDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, company, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

retailSumByStatisticGroupRegionDateTo 'Сумма на конец, руб' (statisticGroup, company, region, dateTo)=
    [GROUP SUM retailSumBalanceAItemLedgerDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, company, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
// белорусского производства
balanceResidentByStatisticGroupRegionDateTo 'Остаток на конец' (statisticGroup, company, region, dateTo)=
    [GROUP SUM balanceAItemLedgerDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, company, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

netWeightResidentByStatisticGroupRegionDateTo 'Вес на конец, кг' (statisticGroup, company, region, dateTo)=
    [GROUP SUM netWeightBalanceAItemLedgerDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, company, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

volumeResidentByStatisticGroupRegionDateTo 'Объем на конец, л' (statisticGroup, company, region, dateTo)=
    [GROUP SUM volumeBalanceAItemLedgerDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, company, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

retailSumResidentByStatisticGroupRegionDateTo 'Сумма на конец, руб' (statisticGroup, company, region, dateTo)=
    [GROUP SUM retailSumBalanceAItemLedgerDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, company, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

valueByStatisticGroupCompanyRegionDateFromTo 'Продано всего' (statisticGroup, company, region, dateFrom, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN quantitySoldByStatisticGroupRegionDateFromTo(statisticGroup, company, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightSoldByStatisticGroupRegionDateFromTo(statisticGroup, company, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeSoldByStatisticGroupRegionDateFromTo(statisticGroup, company, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumSoldByStatisticGroupRegionDateFromTo(statisticGroup, company, region, dateFrom, dateTo)
        DEFAULT 0 AND statisticGroup IS statisticGroup AND company IS company AND region IS region AND dateFrom IS DATE AND dateTo IS DATE
    END;

valueByStatisticGroupCompanyRegionDateTo 'Остаток на конец всего' (statisticGroup, company, region, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN balanceByStatisticGroupRegionDateTo(statisticGroup, company, region, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightByStatisticGroupRegionDateTo(statisticGroup, company, region, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeByStatisticGroupRegionDateTo(statisticGroup, company, region, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumByStatisticGroupRegionDateTo(statisticGroup, company, region, dateTo)
        DEFAULT 0 IF statisticGroup IS statisticGroup AND company IS company AND region IS region AND dateTo IS DATE
    END;

valueResidentByStatisticGroupCompanyRegionDateFromTo 'Продано отеч. пр-ва' (statisticGroup, company, region, dateFrom, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN quantitySoldResidentByStatisticGroupRegionDateFromTo(statisticGroup, company, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightSoldResidentByStatisticGroupRegionDateFromTo(statisticGroup, company, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeSoldResidentByStatisticGroupRegionDateFromTo(statisticGroup, company, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumSoldResidentByStatisticGroupRegionDateFromTo(statisticGroup, company, region, dateFrom, dateTo)
        DEFAULT 0 AND statisticGroup IS statisticGroup AND company IS company AND region IS region AND dateFrom IS DATE AND dateTo IS DATE
    END;

valueResidentByStatisticGroupCompanyRegionDateTo 'Остаток на конец отеч. пр-ва' (statisticGroup, company, region, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN balanceResidentByStatisticGroupRegionDateTo(statisticGroup, company, region, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightResidentByStatisticGroupRegionDateTo(statisticGroup, company, region, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeResidentByStatisticGroupRegionDateTo(statisticGroup, company, region, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumResidentByStatisticGroupRegionDateTo(statisticGroup, company, region, dateTo)
        DEFAULT 0 IF statisticGroup IS statisticGroup AND company IS company AND region IS region AND dateTo IS DATE
    END;

totalRetailSumSoldByStatisticGroupRegionDateFromTo 'Итого продано, руб.' (statisticGroup, company, region, dateFrom, dateTo)=
    GROUP SUM retailSumSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo;

retailSumCardCompanyRegionDateFromTo 'Продано с использованием банк. карточек' (company, region, dateFrom, dateTo) =
    GROUP SUM  retailSumCardDepartmentDateFromTo(departmentStore, dateFrom, dateTo)
        BY companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo;

retailSumSaleCompanyRegionDateFromTo 'Продано по кассе' (company, region, dateFrom, dateTo) =
    GROUP SUM  retailSumSaleDepartmentDateFromTo(departmentStore, dateFrom, dateTo)
        BY companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo;


FORM torgSales '12-Торг (продажи)'

    OBJECTS params = (dFrom = DATE, dTo = DATE) FIXED PANEL

    PROPERTIES objFrom = OBJVALUE(dFrom), objTo = OBJVALUE(dTo)

    OBJECTS c=company  FIXED PANEL
    PROPERTIES(c) SELECTOR name

    OBJECTS r=region  FIXED PANEL
    PROPERTIES(r) SELECTOR name

    TREE treeGroups g=statisticGroup PARENT parentStatisticGroup
    PROPERTIES READONLY gname = name(g), sidStatisticGroup(g), nameUnitOfMeasureStatisticGroup(g)
    ORDER BY sidStatisticGroup

    PROPERTIES(g, c, r, dFrom, dTo) valueByStatisticGroupCompanyRegionDateFromTo, valueResidentByStatisticGroupCompanyRegionDateFromTo
    PROPERTIES(g, c, r, dTo) valueByStatisticGroupCompanyRegionDateTo, valueResidentByStatisticGroupCompanyRegionDateTo
    PROPERTIES(g, c, r, dFrom, dTo) totalRetailSumSoldByStatisticGroupRegionDateFromTo
    PROPERTIES(c, r, dFrom, dTo) retailSumSaleCompanyRegionDateFromTo, retailSumCardCompanyRegionDateFromTo
;

DESIGN torgSales FROM DEFAULT {

    main{
        ADD treeGroups.box  BEFORE functions.box {
            title = 'Показатели по стат. группам с учетом ед. изм. и коэфф. перевода';
        }
        NEW firstCase BEFORE treeGroups.box {
            childConstraints = TO THE RIGHT;
            title = 'Параметры отчета';

            NEW dateCase {
                title = 'Даты';
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(objFrom) {
                    caption = 'Дата (с)';
                }
                ADD PROPERTY(objTo) {
                    caption = 'Дата (по)';
                }
            }
            ADD c.box;
            ADD r.box;
        }
        NEW secondCase {
            childConstraints = TO THE RIGHT;
            title = 'Суммы, руб.';
            ADD PROPERTY(retailSumSaleCompanyRegionDateFromTo(c, r, dFrom, dTo));
            ADD PROPERTY(retailSumCardCompanyRegionDateFromTo(c, r, dFrom, dTo));
        }

        ADD functions.box;
    }
}

//---------------------------------------------- Форма поставки товаров в отдел -------------------------------------//

inSupplierItemDepartmentOver(sp, i, dep, t) = isSupplierItemDepartmentOver(sp, i, dep, t) == yesNo.yes;

FORM isSupplierItemDepartmentStore 'Ассортимент поставщиков'

    OBJECTS t=DATE FIXED PANEL
    PROPERTIES(t) OBJVALUE

    TREE treeStore a=STRING[3], tn=tradingNetwork, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY OBJVALUE(a), name(tn), name(st), name(s), name(ds)
    FILTERS stringEqualsAll(a), inTradingNetworkStoreType (tn, st), inStoreTypeStore (st, s), inStoreDepartment(s, ds)

    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)

    OBJECTS           sp=supplier
    PROPERTIES(sp)    READONLY name

    OBJECTS           dsi=(dep=departmentStore, i=item)
    PROPERTIES        READONLY nameDep=name(dep), nameIt=nameAttributeItem(i), barcodeBarcodeSku(i)
    ORDER BY          nameDep
    PROPERTIES        nameIsSupplierItemDepartmentOver(sp, i, dep, t) BACKGROUND nameIsSupplierItemDepartmentDate(sp, i, dep, t), showFormNameIsSupplierItemDepartmentOver(sp, i, dep),
                      priceSupplierItemDepartmentOver(sp, i, dep, t) BACKGROUND priceSupplierItemDepartmentDate(sp, i, dep, t), showFormPriceSupplierItemDepartmentOver(sp, i, dep)
    FILTERS           inTradingNetworkStoreTypeStoreDepartmentDepartment(tn, st, s, dep, ds)
    FILTERS           hasParentItemGroupSku(g, i)
    FILTERGROUP filters10
        FILTER 'Показывать поставляемые товары' 'F10' inSupplierItemDepartmentOver(sp, i, dep, t) DEFAULT
;

DESIGN isSupplierItemDepartmentStore FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW firstCase {
                fillHorizontal = 1;
                childConstraints = TO THE BOTTOM;
                ADD t.box;
                ADD treeStore.box {title = 'Магазины';};
                ADD treeGroups.box {title = 'Товарные группы';};
        }

        NEW secondCase {
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD sp.box;
                ADD dsi.box {fillVertical = 2;}

        }
        POSITION firstCase TO THE LEFT secondCase;

        ADD functions.box;
    }
}

// ---------------------------- Нумераторы по умолчанию --------------------------------- //

defaultNumeratorDocuments = DATA numerator ();
nameDefaultNumeratorDocuments 'Нумератор для документов' = name(defaultNumeratorDocuments());

numeratorObject(object) <- defaultNumeratorDocuments() WHEN ASSIGNED(object IS numeratedObject);

defaultNumeratorOrders = DATA numerator ();
nameDefaultNumeratorOrders 'Нумератор для заказов' = name(defaultNumeratorOrders());

numeratorOrder(order) = numeratorObject(order) AND order IS order;
// todo : включение этого derived'а отключает верхний derived
//numeratorOrder(order) <- defaultNumeratorOrders() WHEN ASSIGNED(order IS order);

//---------------------------------------------- Параметры -----------------------------------------------------//

FORM parameters 'Параметры'
    PROPERTIES() nameDefaultNumeratorDocuments, nameDefaultNumeratorOrders, itemDepartmentStoreAverageInterval, calcCurrentQuantitySoldInterval;
;

//---------------------------------------------- Импорт данных -----------------------------------------------------//

//GROUP formularGroup 'Formular' : baseGroup;

importDataAction 'Импортировать данные (Formular)' = ACTION CUSTOM 'retail.actions.ImportDataActionProperty';// IN formularGroup;
importUrl 'URL' = DATA STRING[200] (); //IN formularGroup;
importLogin 'Логин' = DATA STRING[200] ();// IN formularGroup;
importPassword 'Пароль' = DATA STRING[200] ();// IN formularGroup;

//GROUP lstradeGroup 'LS Trade' : baseGroup;

importLSTDataAction 'Импортировать данные (LS Trade)' = ACTION CUSTOM 'retail.actions.ImportLSTDataActionProperty';// IN lstradeGroup;
importLSTDirectory 'Папка' = DATA STRING[200] ();// IN lstradeGroup;
importInactive 'Импортировать в том числе неактивные' = DATA BOOLEAN ();
importGroupItems 'Импортировать группы товаров' = DATA BOOLEAN ();
importWares 'Импортировать посуду' = DATA BOOLEAN ();
importItems 'Импортировать товары' = DATA BOOLEAN ();
importNumberItems 'Кол-во' = DATA INTEGER ();
importNumberItemsAtATime 'Разбивать на пакеты по' = DATA INTEGER ();
importPrices 'Импортировать цены товаров' = DATA BOOLEAN ();
importAssortment 'Импортировать ассортимент' = DATA BOOLEAN();
importShipment 'Импортировать документы прихода' = DATA BOOLEAN ();
importCompanies 'Импортировать компании' = DATA BOOLEAN ();
importSuppliers 'Импортировать поставщиков' = DATA BOOLEAN ();
importCustomers 'Импортировать покупателей' = DATA BOOLEAN ();
importStores 'Импортировать магазины' = DATA BOOLEAN ();
importDepartmentStores 'Импортировать отделы магазина' = DATA BOOLEAN();
importBanks 'Импортировать банки' = DATA BOOLEAN();
importRateWastes 'Импортировать нормы отходов' = DATA BOOLEAN();
FORM importData 'Импорт данных'
    PROPERTIES() importDataAction, importUrl, importLogin, importPassword
    PROPERTIES() importLSTDataAction, importLSTDirectory, importInactive, importGroupItems, importWares, importItems,
    importNumberItems, importNumberItemsAtATime, importPrices, importAssortment, importShipment,
    importCompanies, importSuppliers, importCustomers, importStores, importDepartmentStores, importBanks, importRateWastes
;

//---------------------------- Настройка навигатора ----------------------------------------//

WINDOW TOOLBAR topToolbar 'Папки' VERTICAL HIDETITLE HIDESCROLLBARS POSITION(0, 0, 20, 5);
WINDOW TOOLBAR formsToolbar 'Формы' VERTICAL HIDETITLE POSITION (0, 5, 20, 65);
WINDOW TREE formsTree 'Формы' HIDETITLE POSITION (0, 5, 20, 65);

HIDE WINDOW BaseLogicsModule.relevantForms;
HIDE WINDOW BaseLogicsModule.relevantClassForms;

NAVIGATOR {

    baseElement TO topToolbar;

    NEW lists 'Справочники' TO formsToolbar {
        NEW goods 'Товары' {
            ADD items;
            ADD wares;
            ADD components;
            ADD itemGroups;
            ADD statisticGroups;
            ADD unitsOfMeasure;
            ADD countries;
            ADD assortments;
            ADD naturalLossItem;
            ADD papers;
        }
        NEW shopStructure 'Магазины' {
            ADD companies;
//            ADD qualifier;
            ADD stores;
        }
        NEW employeeRelations 'Сотрудники' {
            ADD employees;
            NEW committeeRelations 'Комиссии' {
                ADD registerCommitteeDialog;
                ADD revaluationCommitteeDialog;
                ADD inventoryCommitteeDialog;
                ADD wastageCommitteeDialog;
            }
            ADD groupsUser;
        }
        NEW contragents 'Контрагенты'{
            ADD suppliers;
            ADD customers;
            ADD contracts;
            ADD discountCards;
            ADD banks;
        }
        NEW equipment 'Оборудование' {
            NEW equipmentCashRegisters 'Кассы'{
                ADD groupsCashRegister;
                ADD cashRegistersModels;
            }
            NEW equipmentScales 'Весы'{
                ADD groupsScales;
                ADD scalesModels;
            }
            NEW equipmentChecks 'Прайс чекеры'{
                ADD groupsCheck;
                ADD checkModels;
            }
            NEW equipmentTerminals 'ТСД' {
                ADD groupsTerminal;
                ADD terminalModels;
                ADD groupsTerminalDocumentType;
                ADD handbooksTerminalDocumentType;
            }
            ADD stages;
            ADD labelTypes;
            ADD equipmentServer;
        }
        NEW producing 'Производство'{
            ADD cuttings;
            ADD recipes;
        }
        NEW pricing 'Ценообразование'{
            ADD taxes;
        }
    }

    NEW processes 'Бизнес-процессы' TO formsToolbar {
        NEW orders 'Заказы' {
            ADD timeTableDate;
            ADD isSupplierItemDepartmentStore;
            ADD orderSuppliers;
        }
        NEW incomeShipments 'Поставки' {
            ADD shipments;
            ADD wastages;
            ADD returnSuppliers;
        }
        NEW carryingInventories 'Инвентаризация' {
            ADD inventories;
            ADD naturalLosses;
        }
        NEW itemWriteOffs 'Списания' {
            ADD writeOffs;
        }
        NEW itemInnerFlows 'Внутренние перемещения' {
            ADD innerFlows;
            ADD innerArrivals;
        }
        NEW itemSpecifications 'Отпуск из розницы' {
            ADD specifications;
            ADD statements;
        }
        NEW retailSale 'Розничные продажи'{
            ADD bills;
            ADD cashReports;
        }
        NEW priceManagement 'Управление ценами' {
            ADD userPriceChanges;
        }
        NEW mixturePatterns 'Пересортица' {
            ADD disparities;
        }
        NEW production 'Производство'{
            ADD actOfStudies;
        }
        NEW frontOffice 'Фронт-офис' {
            ADD machineryPriceTransactions;
            ADD labelTransactions;
            ADD terminalDocuments;
        }
    }
    NEW accountInfo 'Сводная информация' TO formsToolbar{
        ADD sumAccountDocumentLedger;
        ADD priceChangeDocuments;
        ADD costItemLedger;
        NEW balance 'Остатки' {
            ADD curBalanceItemDepartment;
            ADD balanceItemDepartment;
        }
        NEW sales 'Продажи' {
            ADD salesLedger;
            ADD salesItemDepartmentStore;
        }
        NEW report 'Отчеты' {
            ADD statisticalReport;
            ADD torgSales;
        }
    }
    NEW printedForms 'Печатные формы' TO formsToolbar{
        ADD pricesRegister;
        ADD actOfRevaluation;
        ADD transportConsignmentVerticalA;
        ADD transportConsignmentHorizontalA;
        ADD transportConsignmentVerticalB;
        ADD transportConsignmentHorizontalB;
        ADD transportConsignmentAttach;
        ADD consignmentTwoHorizontal;
        ADD consignmentTwoVertical;
        ADD consignmentTwoAttach;
        ADD specificationPrint;
        ADD sumAccountDocumentLedgerPrint;
        ADD wastagePrint;
        ADD naturalLossPrint;
        ADD writeOffPrint;
    }

    ADD adminElement TO formsTree {
        NEW objects 'Карточки' {
            ADD itemGroup;
            ADD itemGroupDialog;
            ADD statisticGroup;
            ADD statisticGroupDialog;
            ADD unitOfMeasure;
            ADD item;
            ADD ware;
            ADD barcode;
            ADD barcodeInput;
            ADD employee;
            ADD employeeDialog;
            ADD country;
            ADD officer;
            ADD groupUser;
            ADD tradingSquare;
            ADD departmentStore;
            ADD departmentStores;
            ADD store;
            ADD tradingNetwork;
            ADD registerCommittee;
            ADD revaluationCommittee;
            ADD inventoryCommittee;
            ADD wastageCommittee;
            ADD bank;
            ADD ownership;
            ADD supplier;
            ADD customer;
            ADD company;
            ADD contract;
            ADD cashRegisterModel;
            ADD scalesModel;
            ADD checkModel;
            ADD terminalModel;
            ADD assortment;
            ADD typeItem;
            ADD rowTorg1;
            ADD color;
            ADD taste;
            ADD pack;
            ADD sort;
            ADD size;
            ADD specialty;
            ADD coolingDegree;
            ADD formItem;
            ADD naturalLossItems;
            ADD innerFlowPosted;
        //    ADD numberInPack;
            ADD rateWaste;
            ADD addNameIsPortionBarItem;
            ADD nameIsPortionBarItem;
            ADD addNameBanDiscountItem;
            ADD nameBanDiscountItem;
            ADD addCoefficientNetGrossItem;
            ADD coefficientNetGrossItem;
        //    ADD addrateNaturalLossItem;
        //    ADD rateNaturalLossItem;
            ADD genTimeTables;
            ADD addWarePrice;
            ADD warePrice;
            ADD rangeWare;
            ADD addRangeWare;
            ADD supplierRangeItem;
            ADD addSupplierRangeItem;
            ADD retailRangeItem;
            ADD addRetailRangeItem;
            ADD addImporterPriceItem;
            ADD importerPriceItem;
            ADD addMaxReserveItemDepartment;
            ADD maxReserveItemDepartment;
            ADD addMinReserveItemDepartment;
            ADD minReserveItemDepartment;
            ADD addNameBanRevaluationItemDepartment;
            ADD nameBanRevaluationItemDepartment;
            ADD addNameInActionItemDepartment;
            ADD nameInActionItemDepartment;
            ADD addMarginProductionItemDepartment;
            ADD marginProductionItemDepartment;
            ADD addRetailPriceItemDepartment;
            ADD retailPriceItemDepartment;
            ADD addAccountPriceItemDepartment;
            ADD accountPriceItemDepartment;
            ADD addDiscountItemDepartment;
            ADD discountItemDepartment;
            ADD addNameLabelItemDepartment;
            ADD nameLabelItemDepartment;
            ADD addMultiplierItemDepartment;
            ADD multiplierItemDepartment;
            ADD addOldPriceItemDepartment;
            ADD oldPriceItemDepartment;
            ADD addNameIsSupplierItemDepartment;
            ADD nameIsSupplierItemDepartment;
            ADD addPriceSupplierItemDepartment;
            ADD priceSupplierItemDepartment;
            ADD addMarkupItemDepartment;
            ADD markupItemDepartment;
            ADD addNameBanSupplierItemDepartment;
            ADD nameBanSupplierItemDepartment;
            ADD preliminaryOrder;
            ADD cashRegister;
            ADD scales;
            ADD check;
            ADD terminal;
            ADD tax;
            ADD cutting;
            ADD recipe;
            ADD groupCashRegister;
            ADD groupScales;
            ADD groupCheck;
            ADD groupTerminal;
            ADD groupTerminalDocumentType;
            ADD component;
            ADD addAddressLegalEntity;
            ADD addressLegalEntity;
            ADD addPostAddressLegalEntity;
            ADD postAddressLegalEntity;
            ADD addManagerLegalEntity;
            ADD managerLegalEntity;
            ADD addAccountantLegalEntity;
            ADD accountantLegalEntity;
            ADD addPhoneLegalEntity;
            ADD phoneLegalEntity;
            ADD addNameSureSupplierDepartmentStore;
            ADD nameSureSupplierDepartmentStore;
            ADD addressBank;
            ADD addAddressBank;
            ADD nameFormContract;
            ADD addNameFormContract;
            ADD delayContract;
            ADD addDelayContract;
            ADD genTimeTable;
            ADD addNameDiscount;
            ADD addTimeTable;
            ADD orderSupplier;
            ADD timeTable;
            ADD cashReport;
            ADD nameDiscount;
            ADD rateWaste;
            ADD ordersShipment;
            ADD shipment;
            ADD inventory;
            ADD reasonOff;
            ADD writeOff;
            ADD listInventory;
            ADD nameDepartmentInventory;
            ADD collationSheetItem;
            ADD innerFlow;
            ADD innerArrival;
            ADD specification;
            ADD specificationsStatement;
            ADD specificationForm;
            ADD statement;
            ADD numerator;
            ADD userPriceChange;
            ADD disparity;
            ADD addPercDiscountUserPriceChange;
            ADD addPercMarkupUserPriceChange;
            ADD returnSupplier;
            ADD barcodeForm;
            ADD bill;
            ADD commonInfoBatchReturnSupplierDetail;
            ADD discountCard;
            ADD actOfStudy;
            ADD seriesNumberCuttingStudyInputDetail;
            ADD itemDepartmentStoreInput;
            ADD itemDepartmentStoreBalanceInput;
            ADD machineryPriceTransaction;
            ADD groupMachineryInput;
            ADD filterItemsGroupMachinery;
            ADD itemDepartmentStoreSupplierInput;
            ADD labelType;
            ADD printLabelTransaction;
            ADD customLabelTransaction;
            ADD paper;
            ADD dialogDate;
            ADD naturalLoss;
        }
        ADD parameters;
        ADD importData;
    }

    catalogElement {
        ADD numerators;
    }
}

