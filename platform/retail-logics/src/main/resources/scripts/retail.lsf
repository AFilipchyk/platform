MODULE retail;

// Кол-ва - NUMERIC[14,3]
// Цены - NUMERIC[14,2]
// Суммы - NUMERIC[16,2]
// Ставка налога - NUMERIC[10,5]
// Надбавка - NUMERIC[8,3]
// Норма списания отходов - NUMERIC[10,3]

REQUIRE BaseLogicsModule,
        Utils,
        Hierarchy,
        Historizable,
        Numerator,
        Stock,
        Barcode,
        Document,
        Tax,
        Ware,
        LegalEntity,
        Employee,
        Store,
        ListRegister,
        Consignment,
        AccountDocument,
        StorePrice,
        Supplier,
        Sales,
        PriceChange;

GROUP emailGroup 'E-mail' : baseGroup;
GROUP committeeGroup 'Комиссия' : publicGroup;

// ----------------------------------- Отображение атрибутов товаров по свойству товарной группы ------------------------------------------ //
META metaCodeShowItemAttribute (attribute, caption, group)

    show###attribute##ItemGroup caption (itemGroup) = DATA BOOLEAN (itemGroup) IN group;
    toShow###attribute caption (item) = show###attribute##ItemGroup(itemGroupSku(item));
    show###attribute##ItemGroup(itemGroup) <- TRUE WHEN ASSIGNED(itemGroup IS itemGroup);

END

// ----------------------------------- Свойства изменения объектов в Posted ------------------------------------------ //

GROUP itemDetailGroup 'Товар' : publicGroup;

META defineDocumentDetailItemPrefix (object, prefix, caption)

    prefix###item###object##Detail = DATA item (object##Detail);

    prefix###nameAttributeItem###object##Detail 'Товар'###caption (detail) =
        nameAttributeItem(prefix###item###object##Detail(detail)) IN itemDetailGroup;

    prefix###shortNameUOMItem###object##Detail 'Ед. изм.'###caption (detail) =
        shortNameUOMItem(prefix###item###object##Detail(detail)) IN itemDetailGroup;

    prefix###articleItem###object##Detail 'Артикул'###caption (detail) = articleItem(prefix###item###object##Detail(detail)) IN itemDetailGroup;

    prefix###nameCountryItem###object##Detail 'Страна'###caption (detail) = nameCountryItem(prefix###item###object##Detail(detail)) IN itemDetailGroup;

    prefix###idBarcodeSku###object##Detail 'Штрих-код'###caption (detail) =
        idBarcodeSku(prefix###item###object##Detail (detail)) IN itemDetailGroup;

    prefix###inWare###object##Detail 'Товар в посуде'###caption (detail) = inWareItem(prefix###item###object##Detail(detail));
END

META defineDocumentDetailItem (object)
    @defineDocumentDetailItemPrefix(object, , );
END

META defineDocumentDetailItemExtra (object)

    controlExpiryItem###object##Detail 'Контролировать сроки годности товара?' (detail) =
        controlExpiryItem (item###object##Detail(detail)) IN itemDetailGroup;

    isManufacturedItem###object##Detail 'Товар производится?' (detail) = isManufacturedItem(item###object##Detail(detail)) IN itemDetailGroup;
    isWeightItem###object##Detail 'Весовой товар?' (detail) = isWeightItem(item###object##Detail(detail)) IN itemDetailGroup;

    nameInActionItemDepartment###object##Detail 'Товар акции?' (detail) = nameInActionItemDepartmentDate(item###object##Detail(detail),
        departmentStore###object##Detail(detail), date###object##Detail(detail)) IN itemDetailGroup FIXEDCHARWIDTH 3;

    hintItem###object##Detail 'Подсказка по товару' (detail) = hintItem(item###object##Detail(detail)) IN itemDetailGroup MINCHARWIDTH 20 PREFCHARWIDTH 20;

    nameBanPriceChangeItemDepartment###object##Detail 'Запрет на переоценку' (detail) = name(banPriceChangeItemDepartmentDate(item###object##Detail(detail),
        departmentStore###object##Detail(detail), date###object##Detail(detail))) IN itemDetailGroup FIXEDCHARWIDTH 3;

END

META defineDocumentDetailItemActions (object)
    add###object##DetailBarcode 'Добавить строку по штрих-коду' = ACTION (object) {
        FORM barcodeInput MODAL;

        IF formResult() == formResult.ok THEN {
            SET tmpSku() <- skuBarcodeIdDate(chosenString('barcode'), date###object(object));
            IF tmpSku() IS item THEN {
                ADDOBJ object##Detail;
                FOR o == addedObject() DO {
                    SET object###object##Detail(o) <- object AS object;
                    SET item###object##Detail(o) <- tmpSku();
            //        SET quantity###object##Detail(o) <- amountBarcode(barcodeIdDate(chosenString('barcode'), date###object(object)));
                };
            } ELSE
                MESSAGE 'Не найден штрих-код';
        };

    } TOOLBAR EDITKEY 'F4';
END

META defineDocumentBaseDepartmentStoreItem (object)
    @defineDocumentBase(object);

    @defineDocumentDepartmentStore(object);

    @defineDocumentDetailItem(object);
    @defineDocumentDetailItemActions(object);
END

META defineDocumentBasePostedDepartmentStoreItem (object)
    @defineDocumentBaseDepartmentStoreItem(object);

    @defineDocumentPosted(object);
END

META defineDocumentHeaderItemQuantityCustom (object, detail)
    quantity###detail##Item###object 'Кол-во товара в документе' (item, object) = GROUP SUM quantity###detail(idetail)
                                                                                      BY  item###detail(idetail),
                                                                                          object###detail(idetail);
END

META defineDocumentHeaderItemQuantity (object)
    @defineDocumentHeaderItemQuantityCustom(object, object###detail);
END

META defineDocumentHeaderItemRetailSumCustomPrefix (object, detail, prefix, caption)
    prefix###retailSum###detail##Item###object 'Розничная сумма (окр.) товара в документе' (item, object) =
            GROUP SUM retailSum###detail(idetail)
                  BY  item###detail(idetail),
                      object###detail(idetail);

    prefix###retailSumItem###detail###object 'Розничная сумма (окр.), товар'###caption (idetail) =
        GROUP SUM prefix###retailSum###detail(idetail) AND NOT isContainerItem(item###detail(idetail))
            BY object###detail(idetail) IN documentSumGroup;
    prefix###retailSumContainer###detail###object 'Розничная сумма (окр.), тара'###caption (idetail) =
        GROUP SUM prefix###retailSum###detail(idetail) IF isContainerItem(item###detail(idetail))
            BY object###detail(idetail) IN documentSumGroup;
END
META defineDocumentHeaderItemRetailSumCustom (object, detail)
    @defineDocumentHeaderItemRetailSumCustomPrefix(object, detail, , );
END
META defineDocumentHeaderItemRetailSumPrefix (object, prefix, caption)
    @defineDocumentHeaderItemRetailSumCustomPrefix(object, object##Detail, prefix, caption);
END
META defineDocumentHeaderItemRetailSum (object)
    @defineDocumentHeaderItemRetailSumCustomPrefix(object, object##Detail, , );
END

META defineDocumentHeaderItemAccountSumCustom (object, detail)
    accountSumItem###detail###object 'Учетная сумма, товар' (idetail) =
        GROUP SUM accountSum###detail(idetail) AND NOT isContainerItem(item###detail(idetail))
            BY object###detail(idetail) IN documentSumGroup;
    accountSumContainer###detail###object 'Учетная сумма, тара' (idetail) =
        GROUP SUM accountSum###detail(idetail) IF isContainerItem(item###detail(idetail))
            BY object###detail(idetail) IN documentSumGroup;
END

META defineDocumentHeaderItemAccountSum (object)
    @defineDocumentHeaderItemAccountSumCustom(object, object##Detail);
END

META defineDocumentDetailAggregationItemPrefix (primObject, aggrObject, prefix)
    item###aggrObject##Detail (detail) = prefix###item###primObject##Detail(primObject##Detail###aggrObject##Detail(detail));
    nameItem###aggrObject##Detail 'Товар' (detail) = nameAttributeItem(item###aggrObject##Detail(detail));
    idBarcodeSku###aggrObject##Detail 'Штрих-код' (detail) = idBarcodeSku(item###aggrObject##Detail(detail));
END
META defineDocumentDetailAggregationItem (primObject, aggrObject)
    @defineDocumentDetailAggregationItemPrefix(primObject, aggrObject, );
END

// ----------------------------- количество упаковок и вес товаров ----------------------- //
META defineDocumentDetailPackWeightItem (object)
    packQuantity###object##Detail 'Количество грузовых мест' (idetail) = round0(quantity###object##Detail(idetail)/
        UNION OVERRIDE 1 IF idetail IS object##Detail, quantityPackItem(item###object##Detail(idetail)));

    grossWeight###object##Detail 'Масса груза, т.' (idetail) = round3(
        grossWeightItem(item###object##Detail(idetail))*quantity###object##Detail(idetail)/1000);
END


//-----------------------------Заполнение из документа ТСД--------------------------------//

META defineDocumentDetailItemOfTerminal (object)
    fillOfTerminalDocument###object 'Заполнить из документа ТСД' (object) = ACTION (object) {
        FORM terminalDocumentsDialog MODAL;
        IF formResult() == formResult.ok THEN {
            LOCAL document = terminalDocument ();
            SET document() <- chosenObject('td');
            SET usedTerminalDocument(terminalDocument) IF terminalDocument == document()  <- TRUE;

            FOR terminalDocumentTerminalDocumentDetail(tdd) == document()  DO {
                ADDOBJ object##Detail;
                FOR o == addedObject() DO {
                    SET object###object##Detail(o) <- object AS object;
                    SET item###object##Detail(o) <- skuBarcode(barcodeIdDate(barcodeTerminalDocumentDetail(tdd), date###object(object)));
                    SET quantity###object##Detail(o) <- quantityTerminalDocumentDetail(tdd);

                }
            }

        }
    } TOOLBAR;
END



// ----------------------------------- Поставщик ------------------------------------------ //

META defineDocumentHeaderSupplierContractDepartmentStore(object)
    @defineDocumentHeaderSupplierContract(object);

    contract###object (object) <- contractCompanySupplier(companyDepartmentStore(departmentStore###object(object)), supplier###object(object))
                                  IF countContractCompanySupplier(companyDepartmentStore(departmentStore###object(object)), supplier###object(object)) == 1
                                  WHEN CHANGED(supplier###object(object));
    CONSTRAINT contract###object(object) AND NOT companyDepartmentStore(departmentStore###object(object)) == companyContract(contract###object(object))
        CHECKED BY contract###object MESSAGE 'Выберите договор данного юр. лица';
END

// ----------------------------------- Товарный классификатор ------------------------------------------ //
CLASS itemGroup 'Товарная группа' : named, externalObject;

@defineHierarchy(itemGroup);

pieceNumeratorItemGroup = DATA numerator (itemGroup);
namePieceNumeratorItemGroup 'Нумератор штрих-кодов (для штучного товара)' (itemGroup) = name(pieceNumeratorItemGroup(itemGroup));

weightNumeratorItemGroup = DATA numerator (itemGroup);
nameWeightNumeratorItemGroup 'Нумератор штрих-кодов (для весового товара)' (itemGroup) = name(weightNumeratorItemGroup(itemGroup));

// формы за формами товара

// ----------------------------------- Статистический классификатор ------------------------------------------ //

CLASS statisticGroup 'Статистическая группа' : named, externalObject;
TABLE statisticGroup(statisticGroup);
TABLE statisticGroupStatisticGroup (statisticGroup, statisticGroup);

CLASS STATIC groupStatic 'Ед. изм.' {
    liter 'Литр',
    thing 'Штука',
    pounds 'Килограмм',
    ruble 'Рубль'
};

parentStatisticGroup = DATA statisticGroup (statisticGroup);
nameParentStatisticGroup 'Родительская группа' (statisticGroup) = name(parentStatisticGroup(statisticGroup));

inParentStatisticGroupStatisticGroup (child, parent) = parentStatisticGroup(child) == parent;


childNumberStatisticGroup 'Кол-во непосредственных потомков' (statisticGroup) = GROUP SUM 1 BY parentStatisticGroup(group) PERSISTENT;

isLeafStatisticGroup 'Лист' (statisticGroup) = statisticGroup IS statisticGroup AND NOT childNumberStatisticGroup(statisticGroup) PERSISTENT;

hasParentStatisticGroupLevel 'Уровень' (child, parent) = RECURSION 1l AND child IS statisticGroup AND parent == child
                                                                  STEP 2l AND parent == parentStatisticGroup($parent) PERSISTENT;
TABLE statisticGroupStructure(statisticGroup, statisticGroup, LONG);

hasParentStatisticGroup 'Уровень' (child, parent) = TRUE AND hasParentStatisticGroupLevel(child, parent);

hasParentAndLeafStatisticGroup (child, parent) = hasParentStatisticGroup(child, parent) AND isLeafStatisticGroup(child);

unitMeasureStatisticGroup 'Ед. изм. ИД' (statisticGroup) = DATA groupStatic (statisticGroup) IN idGroup;
nameUOMStatisticGroup 'Ед. изм.' (statisticGroup) = name(unitMeasureStatisticGroup(statisticGroup)) MINCHARWIDTH 12 MAXCHARWIDTH 12 PREFCHARWIDTH 12;

sidStatisticGroup 'Код группы по ОКРБ 007-2007' (statisticGroup) = DATA STRING[12] (statisticGroup)  MINCHARWIDTH 12 MAXCHARWIDTH 12 PREFCHARWIDTH 12;
conversionFactorStatisticGroup 'Коэффициент перевода' (statisticGroup) = DATA NUMERIC[14,5] (statisticGroup);
canonicalNameStatisticGroup 'Каноническое имя' (statisticGroup) = castToString255(
                           [GROUP CONCAT name(parent), ' / ' BY child ORDER DESC hasParentStatisticGroupLevel(child, parent)](statisticGroup))
                           MINCHARWIDTH 50 MAXCHARWIDTH 100 PREFCHARWIDTH 100 PERSISTENT;

canonicalNumberStatisticGroup 'Каноническое код' (statisticGroup) = castToString255(
                           [GROUP CONCAT sidStatisticGroup(parent), ' / ' BY child ORDER DESC hasParentStatisticGroupLevel(child, parent)](statisticGroup))
                           MINCHARWIDTH 50 MAXCHARWIDTH 100 PREFCHARWIDTH 100 PERSISTENT;

canonicalNumberNameStatisticGroup 'Канонический код-название' (statisticGroup) = [FORMULA STRING[100] '$1 || \' / \' || $2'](
    canonicalNumberStatisticGroup(statisticGroup), name(statisticGroup));

FORM statisticGroup 'Статистическая группа'
    OBJECTS g=statisticGroup FIXED PANEL
    PROPERTIES(g)   name, nameParentStatisticGroup, sidStatisticGroup, nameUOMStatisticGroup,
                    conversionFactorStatisticGroup

    EDIT statisticGroup OBJECT g
;

addStatisticGroup 'Добавить' = ACTION (statisticGroup) NEWSESSION {
    ADDOBJ statisticGroup;
    FOR g == addedObject() DO {
        SET parentStatisticGroup(g) <- statisticGroup AS statisticGroup;
        FORM statisticGroup OBJECTS g=addedObject() MODAL;
        IF formResult() == formResult.ok THEN
            EXEC apply();
    };
} TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

FORM statisticGroups 'Статистические группы'
    TREE treeGroups g=statisticGroup PARENT parentStatisticGroup
    PROPERTIES READONLY name(g), sidStatisticGroup(g)
    PROPERTIES(g)       addStatisticGroup, EDITFORM
    ORDER BY sidStatisticGroup

    OBJECTS cg=statisticGroup
    PROPERTIES(cg)     READONLY canonicalNumberNameStatisticGroup, sidStatisticGroup, nameUOMStatisticGroup,
                       conversionFactorStatisticGroup
PROPERTIES(cg)  delete

    ORDER BY canonicalNumberNameStatisticGroup

    FILTERGROUP filters
        FILTER 'Все листья' 'F10' hasParentAndLeafStatisticGroup(cg, g) DEFAULT
        FILTER 'Всех потомков' 'F9' hasParentStatisticGroup(cg, g)
        FILTER 'Только непосредственных потомков' 'F8' inParentStatisticGroupStatisticGroup(cg, g)
;

DESIGN statisticGroups FROM DEFAULT {

    NEW topContainer{
        childConstraints = TO THE RIGHT;
        type = SPLITH;

        ADD treeGroups.box;

        ADD cg.box{
            fillHorizontal = 4;
        }
    }

    ADD functions.box;
}

FORM statisticGroupDialog 'Статистические группы'
    TREE treeGroups g=statisticGroup PARENT parentStatisticGroup
    PROPERTIES(g) READONLY name, sidStatisticGroup
    PROPERTIES(g) addStatisticGroup, EDITFORM
    ORDER BY sidStatisticGroup

    DIALOG statisticGroup OBJECT g
;

// ------------------------------------ Цвета ------------------------------------------------ //
CLASS color 'Цвет' : named;
TABLE color (color);

FORM color 'Цвет'
OBJECTS c=color FIXED PANEL
PROPERTIES(c) name;

// ------------------------------------ Вкусы ------------------------------------------------------ //
CLASS taste 'Вкус' : named;
TABLE taste(taste);

FORM taste 'Вкус'
OBJECTS t=taste FIXED PANEL
PROPERTIES(t) name;

// ----------------------------------- Производители ---------------------------------- //
//CLASS manufacturer 'Производитель' : named;

//------------------------------------ Сорта-категории --------------------------------- //
CLASS sort 'Сорт/Категория' : named;
TABLE sort(sort);

FORM sort 'Сорт/Категория'
OBJECTS s=sort FIXED PANEL
PROPERTIES(s) name;

//------------------------------------ Упаковки ----------------------------------------//
CLASS pack 'Упаковка' : doubleNamed;
TABLE pack(pack);

FORM pack 'Упаковка'
OBJECTS p=pack FIXED PANEL
PROPERTIES(p) name, shortName;

//------------------------------------ Особенности изготовления ------------------------//
CLASS specialty 'Особенность' : doubleNamed;
TABLE specialty(specialty);

FORM specialty 'Особенность'
OBJECTS s=specialty FIXED PANEL
PROPERTIES(s) name, shortName;

//------------------------------------ Размеры/Калибры/Габариты ------------------------//
CLASS size 'Размер/калибр' : doubleNamed;
TABLE size(size);

FORM size 'Размер/калибр'
OBJECTS s=size FIXED PANEL
PROPERTIES(s) name, shortName;

//------------------------------------ Степень охлаждения ------------------------//
CLASS coolingDegree 'Степень охлаждения' : doubleNamed;
TABLE coolingDegree(coolingDegree);

FORM coolingDegree 'Степень охлаждения'
OBJECTS c=coolingDegree FIXED PANEL
PROPERTIES(c) name, shortName;

//------------------------------- Строки 1-торг ------------------------------------//
CLASS rowTorg1 'Строка формы 1-торг' : named;
TABLE rowTorg1(rowTorg1);

FORM rowTorg1 'Строка формы 1-торг'
OBJECTS r=rowTorg1 FIXED PANEL
PROPERTIES(r) name;

//------------------------------- Виды ------------------------------------//
CLASS typeItem 'Вид' : named;
TABLE typeItem(typeItem);

FORM typeItem 'Вид'
OBJECTS t=typeItem FIXED PANEL
PROPERTIES(t) name;

//--------------------------------- Форма товара (особенности нарезки/разделки)  --------------------------//
CLASS formItem 'Форма товара' : named;
TABLE formItem(formItem);

FORM formItem 'Форма товара'
OBJECTS f=formItem FIXED PANEL
PROPERTIES(f) name;

//--------------------------------- Кол-во в упаковке --------------------------//
//CLASS numberInPack 'Кол-во в упаковке' : named;
//
//FORM numberInPack 'Кол-во в упаковке'
//OBJECTS n=numberInPack FIXED PANEL
//PROPERTIES(n) name;

//---------------------------------- Норма отходов ------------------------------------//
CLASS rateWaste 'Норма отходов' : named, externalObject;
TABLE rateWaste(rateWaste);

percentRateWaste 'Норма,%' = DATA NUMERIC[10,3] (rateWaste) IN baseGroup;

FORM rateWaste 'Норма отходов'
OBJECTS r=rateWaste FIXED PANEL
PROPERTIES(r) name, percentRateWaste;

// ----------------------------------- Отдел магазина (Подразделение) ----------------------------------- //

GROUP printDepartmentStoreGroup 'Печать' : publicGroup;

wastageCommitteeDepartmentStore 'Комиссия для списания отходов (ИД)' = DATA wastageCommittee (departmentStore);
nameWastageCommitteeDepartmentStore 'Комиссия для реестра' (departmentStore) = name(wastageCommitteeDepartmentStore(departmentStore)) IN printDepartmentStoreGroup;
isWastageCommitteeDepartmentStore 'По умолчанию' (wastageCommittee, departmentStore) = wastageCommitteeDepartmentStore(departmentStore) == wastageCommittee;
CONSTRAINT wastageCommitteeDepartmentStore(departmentStore) AND NOT inCommitteeEmployeeDivision(wastageCommitteeDepartmentStore(departmentStore), departmentStore)
    CHECKED BY wastageCommitteeDepartmentStore MESSAGE 'Для отдела выбрана комиссия, которая для него не действует';

EXTEND FORM departmentStore PROPERTIES nameWastageCommitteeDepartmentStore(d);

//--------------------------------------Формы--------------------------------------------------------------------------//

expirationDateSkuDepartmentStore 'Крайний срок годности'= DATA DATE (sku, departmentStore) IN baseGroup;

//---------------------------- Ценники ----------------------------------------//

CLASS STATIC printOrientation 'Ориентация' {
    portrait 'Книжная',
    landscape 'Альбомная'
}

CLASS labelType 'Тип ценника' : named;
TABLE labelType(labelType);

widthLabelType 'Ширина' = DATA INTEGER (labelType);
heightLabelType 'Высота' = DATA INTEGER (labelType);

orientationLabelType = DATA printOrientation (labelType);
nameOrientationLabelType 'Ориентация' (labelType) = name(orientationLabelType(labelType));

fileTemplateLabelType 'Файл шаблона' = DATA STRING[200] (labelType);

TABLE labelTypeDepartmentStore (labelType, departmentStore);
inLabelTypeDepartmentStore 'Включен' (labelType, departmentStore) = DATA BOOLEAN (labelType, departmentStore);

defaultLabelTypeDepartmentStore = DATA labelType (departmentStore);
isDefaultLabelTypeDepartmentStore 'По умолчанию' (labelType, departmentStore) = defaultLabelTypeDepartmentStore(departmentStore) == labelType;

FORM labelType 'Тип ценника'
    OBJECTS l = labelType FIXED PANEL
    PROPERTIES(l) name, widthLabelType, heightLabelType, nameOrientationLabelType, fileTemplateLabelType

    TREE treeStore a=STRING[3], t=chainStores, st=storeType, s=store
    PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS stringEqualsAll(a), inChainStoresStoreType (t, st), inStoreTypeStore(st, s)

    OBJECTS d=departmentStore
    PROPERTIES(d) READONLY depName = name
    FILTERS inChainStoresStoreTypeStoreDepartment(t, st, s, d)
    ORDER BY depName

    PROPERTIES inLabelTypeDepartmentStore(l, d), isDefaultLabelTypeDepartmentStore(l, d)

    EDIT labelType OBJECT l
;

DESIGN labelType FROM DEFAULT {
    POSITION treeStore.box TO THE LEFT d.box;
    treeStore.tree {
        fillHorizontal = 0.3;
    }
}

FORM labelTypes 'Типы ценников'
    OBJECTS l = labelType
    PROPERTIES(l) READONLY name, widthLabelType, heightLabelType, nameOrientationLabelType, fileTemplateLabelType
    PROPERTIES(l)          ADDFORM, EDITFORM, delete
;

//---------------------------- Этикетки в весы ----------------------------------------//

CLASS labelFormat 'Формат этикетки' : named;

idLabelFormat 'Код формата этикетки' = DATA INTEGER (labelFormat) IN baseGroup;
idToLabelFormat (labelFormat) = GROUP UNIQUE labelFormat BY idLabelFormat(labelFormat) WHERE labelFormat IS labelFormat;

fileLabelFormat = DATA CUSTOMFILE (labelFormat);
loadFileLabelFormat 'Загрузить файл этикетки' (labelFormat) = ACTION LOADFILE fileLabelFormat(labelFormat) IN baseGroup;

fileMessageLabelFormat = DATA CUSTOMFILE (labelFormat);
loadFileMessageLabelFormat 'Загрузить файл спец.сообщений' (labelFormat) = ACTION LOADFILE fileMessageLabelFormat(labelFormat) IN baseGroup;

scalesModelLabelFormat 'Модель весов'= DATA scalesModel (labelFormat);
nameScalesModelLabelFormat 'Модель весов' (labelFormat) = name(scalesModelLabelFormat(labelFormat));

FORM labelFormats 'Форматы этикеток весов'
    OBJECTS c=labelFormat
    PROPERTIES(c) idLabelFormat, name, nameScalesModelLabelFormat, loadFileLabelFormat, loadFileMessageLabelFormat
    PROPERTIES(c) ADDFORM, EDITFORM, delete
;

// ----------------------------------- Товар ------------------------------------------ //
GROUP descriptionGroup 'Наименование' : publicGroup;
GROUP rateGroup 'Нормы' : publicGroup;
GROUP headGroup 'Базовые свойства' : baseGroup;
GROUP sizeGroup 'Ячеистое хранение' : publicGroup;
GROUP retailGroup 'Ценообразование' : publicGroup;
GROUP discountGroup 'Скидки' : retailGroup;
GROUP expiryGroup 'Контроль сроков годности' : publicGroup;
GROUP equipmentGroup 'Внешние устройства' : publicGroup;
GROUP substanceGroup 'Пищевые характеристики' : publicGroup;
GROUP labelGroup 'Ценник' : publicGroup;

GROUP manufactoryGroup 'Производство' : publicGroup;
GROUP orderGroup 'Заказ' : publicGroup;
GROUP barGroup 'Бар' : publicGroup;
GROUP activeGroup 'Активность товара' : publicGroup;
GROUP documentGroup 'Для документов' : publicGroup;
GROUP displayGroup 'Свойства для отображения' : baseGroup;

CLASS item 'Товар' : sku, externalObject;
TABLE item(item);

TABLE itemDate (item, DATE);

CLASS brand 'Бренд' : named, externalObject;
TABLE brand(brand);

CLASS STATIC groupProduct 'Группа изделий для печати заборного листа'
{
   hot 'Горячее',
   cold  'Холодное'
};

tmpSku() = SESSION DATA sku ();

//baseGroup
itemGroupSku = DATA itemGroup(sku) IN idGroup AUTOSET;
nameItemGroupSku 'Группа товара' (sku) = name(itemGroupSku(sku));
canonicalNameItemGroupSku 'Группа товара' (sku) = canonicalNameItemGroup(itemGroupSku(sku)) IN baseGroup;

TABLE itemGroupSku (itemGroup, sku);

isParentItemGroupSku (itemGroup, sku) = isParentItemGroupItemGroup(itemGroupSku(sku), itemGroup) PERSISTENT;

//descriptionGroup
captionItem 'Название' = DATA STRING[100](item) IN descriptionGroup;
@metaCodeShowItemAttribute(caption, 'Показывать наименование', displayGroup);

brandItem = DATA brand(item);
nameBrandItem 'Бренд' (item) = name(brandItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(brand, 'Показывать бренд', displayGroup);

typeItemItem = DATA typeItem(item) IN idGroup;
nameTypeItemItem 'Вид' = name(typeItemItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(type, 'Показывать тип', displayGroup);

UOMItem = DATA UOM (item) IN idGroup;
shortNameUOMItem 'Единица измерения' (item) = shortName(UOMItem(item)) IN headGroup;
@metaCodeShowItemAttribute(UOM, 'Показывать ед.измерения', displayGroup);

sortItem = DATA sort(item) IN idGroup;
nameSortItem 'Сорт/категория товара' = name(sortItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(sort, 'Показывать сорт', displayGroup);

packItem = DATA pack(item) IN idGroup;
shortNamePackItem 'Упаковка' = shortName(packItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(pack, 'Показывать упаковку', displayGroup);

specialtyItem = DATA specialty(item) IN idGroup;
shortNameSpecialtyItem 'Особенности' = shortName(specialtyItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(specialty, 'Показывать особенности', displayGroup);

sizeItem = DATA size(item) IN idGroup;
shortNameSizeItem 'Размер/калибр' = shortName(sizeItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(size, 'Показывать размер', displayGroup);

colorItem = DATA color (item) IN idGroup;
nameColorItem 'Цвет' = name(colorItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(color, 'Показывать цвет', displayGroup);

tasteItem = DATA taste (item) IN idGroup;
nameTasteItem 'Вкус' = name(tasteItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(taste, 'Показывать вкус', displayGroup);

hallmarkItem 'Отличительный признак (особенности)' = DATA STRING[100] (item) IN descriptionGroup;
@metaCodeShowItemAttribute(hallmark, 'Показывать отличительный признак', displayGroup);

articleItem 'Артикул поставщика/производителя' = DATA STRING[100] (item) IN descriptionGroup;
@metaCodeShowItemAttribute(article, 'Показывать артикул', displayGroup);

coolingDegreeItem 'Степень охлаждения (ИД)' = DATA coolingDegree (item) IN idGroup;
nameCoolingDegreeItem 'Степень охлаждения' = name(coolingDegreeItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(coolingDegree, 'Показывать степень охлаждения', displayGroup);

residentCountry 'Отечественное производство' (country) = DATA BOOLEAN (country) IN baseGroup;

countryItem = DATA country (item) IN idGroup;
nameCountryItem 'Страна' = name(countryItem(item)) IN headGroup;
@metaCodeShowItemAttribute(country, 'Показывать страну', displayGroup);
residentItem 'Отечественное производство' (item) = residentCountry(countryItem(item)) IN headGroup;

extSIDCountry 'Внешний код страны' = DATA STRING[60] (country);
extSIDToCountry 'Страна по коду' (string) = GROUP UNIQUE country BY extSIDCountry (country) WHERE country IS country;

isManufacturedItem 'Товар производится' = DATA BOOLEAN (item) IN manufactoryGroup;
hintItem 'Подсказка по товару' = DATA STRING[200] (item) IN documentGroup;

formItemItem = DATA formItem (item) IN idGroup;
nameFormItemItem 'Форма товара (особенности нарезки/разделки)' = name(formItemItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(formItem, 'Показывать форму', displayGroup);

//numberInPackItem = DATA numberInPack (item) IN idGroup;
numberInPackItem 'Кол-во в упаковке' = DATA NUMERIC[14,3] (item) IN orderGroup;
//@metaCodeShowItemAttribute(numberInPack, 'Показывать кол-во в упаковке', displayGroup);

rateWasteItem = DATA rateWaste(item) IN idGroup;
nameRateWasteItem 'Норма отходов' = name(rateWasteItem(item)) IN rateGroup;
percentRateWasteItem 'Норма отходов,%' = percentRateWaste(rateWasteItem(item)) IN rateGroup;
@metaCodeShowItemAttribute(rateWaste, 'Показывать норму отходов', displayGroup);

statisticGroupSku = DATA statisticGroup(sku) IN idGroup AUTOSET;
nameStatisticGroupSku 'Статистическая группа' (sku) = name(statisticGroupSku(sku)) IN rateGroup;

TABLE statisticGroupSku (statisticGroup, sku);

hasParentStatisticGroupSku (statisticGroup, sku) = hasParentStatisticGroup(statisticGroupSku(sku), statisticGroup) PERSISTENT;

wareItem = DATA ware (item) IN idGroup;
nameWareItem 'Посуда' = name(wareItem(item)) IN retailGroup;

inWareItem 'Товар в посуде' (item) = item IS item AND wareItem(item);

@metaCodeShowItemAttribute(ware, 'Показывать посуду', displayGroup);

isContainerItem 'Тара' = DATA BOOLEAN (item) IN headGroup;
//@metaCodeShowItemAttribute(Container, 'Показывать явл-ся ли тарой', displayGroup);

manufacturerItem 'Производитель (ИД)' = DATA legalEntity (item) IN idGroup;
nameManufacturerItem 'Производитель' (item) = name(manufacturerItem(item)) IN headGroup;
@metaCodeShowItemAttribute(manufacturer, 'Показывать производителя', displayGroup);

//equipmentGroup
isWeightItem 'Весовой товар' = DATA BOOLEAN (item) IN headGroup;
compositionScalesItem 'Состав товара (ингредиенты) для весов' = DATA TEXT (item) IN equipmentGroup;
isMarkItem 'Маркировать товар' = DATA BOOLEAN (item) IN equipmentGroup;
isLoafCutItem 'Буханка разрезается' = DATA BOOLEAN (item) IN equipmentGroup;
passScalesItem 'Передавать на весы' = DATA BOOLEAN (item) IN equipmentGroup;

labelFormatPackItem = DATA labelFormat(item);
idLabelFormatPackItem 'Код формата этикетки' (item) = idLabelFormat(labelFormatPackItem(item)) IN equipmentGroup;

//substanceGroup
percentFatItem '% жирности' =  DATA DOUBLE (item) IN substanceGroup;
percentAlcoholItem '% алкоголя' =  DATA DOUBLE (item) IN substanceGroup;
nutritionalValueItem 'Энергетическая и пищевая ценность' = DATA STRING[400] (item) IN substanceGroup MINCHARWIDTH 50;
energyItem 'Энергетическая ценность на 100г, ккал' = DATA DOUBLE (item) IN substanceGroup;
fatsItem 'Жиры на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
carbohydratesItem 'Углеводы на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
proteinsItem 'Белки на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
isContainGMOItem 'Содержит ГМО' = DATA BOOLEAN (item) IN substanceGroup;

//sizeGroup
lengthItem 'Длина товара' = DATA NUMERIC[8,2] (item) IN sizeGroup;
widthItem 'Ширина товара' = DATA NUMERIC[8,2] (item) IN sizeGroup;
heightItem 'Высота товара' = DATA NUMERIC[8,2] (item) IN sizeGroup;
grossWeightItem 'Вес брутто (кг)' = DATA NUMERIC[9,3] (item) IN orderGroup;
lengthPackItem 'Длина упаковки' = DATA NUMERIC[8,2] (item) IN sizeGroup;
widthPackItem 'Ширина упаковки' = DATA NUMERIC[8,2] (item) IN sizeGroup;
heightPackItem 'Высота упаковки' = DATA NUMERIC[8,2] (item) IN sizeGroup;
grossWeightPackItem 'Вес брутто упаковки' = DATA NUMERIC[9,3] (item) IN manufactoryGroup;
volumeItem 'Объём (л)' = DATA NUMERIC[9,3] (item) IN sizeGroup;
netWeightItem 'Вес нетто (кг)' = DATA NUMERIC[9,3] (item) IN orderGroup;
quantityPackItem 'Количество в грузовом месте' = DATA NUMERIC[9,3] (item) IN orderGroup;

//retailGroup
minQuantityOrderItem 'Минимальный заказ' = DATA INTEGER (item) IN orderGroup;
minReserveItem 'Минимальный резерв' = DATA INTEGER (item) IN orderGroup;
bonusReturnItem 'Уценка (бонус) по товару при возврате поставщику' = DATA NUMERIC[9,2] (item) IN documentGroup;
nameReturnItem 'Наименование для уценки, бонуса по товару в возврат' = DATA STRING[200] (item) IN documentGroup;
quantityDiscountItem 'Количество товара, при котором предост-ся скидка' = DATA INTEGER (item) IN discountGroup;
fixPriceItem 'Фиксированная цена при соотв.типе скидки' = DATA INTEGER (item) IN discountGroup;
isFixPriceItem 'Товар с фиксированной ценой' = DATA BOOLEAN (item) IN retailGroup;
banMarkdownItem 'Запретить уценку товара' = DATA BOOLEAN (item) IN retailGroup;
//minTradeAllowanceItem 'MIN допустимая торговая надбавка, %' = DATA NUMERIC[8,3] (item) IN retailGroup;
//maxTradeAllowanceItem 'MAX допустимая торговая надбавка, %' = DATA NUMERIC[8,3] (item) IN retailGroup;
minAllowedRetailPriceItem 'MIN допустимая розн.цена' = DATA NUMERIC[14,2] (item) IN retailGroup;
bonusItem 'Бонус получаемый по товару' = DATA NUMERIC[9,2] (item) IN documentGroup;
percentWholesaleMarkItem '% оптовой надбавки' = DATA NUMERIC[8,3] (item) IN retailGroup;
banSailItem 'Запрет продаж товара в указанное время' = DATA STRING[200] (item) IN equipmentGroup;

//manufactoryGroup
CLASS groupMenu 'Группа меню' : named;
TABLE groupMenu(groupMenu);

isCrudeItem 'Товар-сырьё для калькуляции?' = DATA BOOLEAN (item) IN manufactoryGroup;

groupProductItem = DATA groupProduct (item) IN idGroup;
nameGroupProductItem 'Группа изделий для печати заборного листа' = name(groupProductItem(item)) IN manufactoryGroup;

compositionMenuItem 'Состав изделия для печати в меню' = DATA STRING[400] (item)IN manufactoryGroup MINCHARWIDTH 50;
standartItem 'Стандарт изготовления изделия (СТБ и пр.)' = DATA STRING[100] (item) IN manufactoryGroup MINCHARWIDTH 50;
normOutItem 'Норма выхода для печати в меню и калькуляцию' = DATA STRING[100] (item) IN manufactoryGroup MINCHARWIDTH 50;
groupMenuItem 'Группа для печати в меню ИД' = DATA groupMenu (item) IN idGroup;
nameGroupMenuItem 'Группа для печати в меню' = name(groupMenuItem(item)) IN manufactoryGroup MINCHARWIDTH 50;
isCutedItem 'Товар разрубается/прорабатывается' = DATA BOOLEAN (item) IN manufactoryGroup;
storageTemperatureItem 'Температура хранения' =  DATA STRING[100] (item) IN equipmentGroup MINCHARWIDTH 50;

//expiryGroup
controlExpiryItem 'Контролировать сроки годности товара?' = DATA BOOLEAN (item) IN expiryGroup;
daysExpiryItem 'Срок годности в днях' = DATA NUMERIC[8,2] (item) IN expiryGroup;
daysExpiryPackItem 'Срок годности в днях с момента фасовки' = DATA NUMERIC[8,2] (item) IN expiryGroup;
hoursExpiryPackItem 'Срок годности в часах с момента фасовки' = DATA INTEGER (item) IN expiryGroup;
//rowTorg1Item 'Строка формы 1-торг (ИД)' = DATA rowTorg1(item) IN idGroup;

imageItem 'Изображение' = DATA IMAGEFILE (item);
loadImageItem 'Загрузить изображение' (item) = ACTION LOADFILE imageItem(item);

FORM country 'Страна'
    OBJECTS c=country FIXED PANEL
    PROPERTIES(c)      name, sidCountry, residentCountry

    EDIT country OBJECT c
;
FORM countries 'Страны'
    OBJECTS c=country
    PROPERTIES(c) READONLY name, sidCountry, residentCountry
    PROPERTIES(c) ADDFORM, EDITFORM, delete
;

FORM currency 'Валюта'
    OBJECTS c=currency FIXED PANEL
    PROPERTIES(c)      name, shortNameCurrency, symbolCurrency

    EDIT currency OBJECT c
;
FORM currencies 'Валюты'
    OBJECTS c=currency
    PROPERTIES(c) READONLY name, shortNameCurrency, symbolCurrency
    PROPERTIES(c) ADDFORM, EDITFORM, delete
;

// ----------------------------------- Атрибуты ------------------------------------------ //

CLASS ABSTRACT itemAttribute 'Атрибут товара' : named;
TABLE itemAttribute(itemAttribute);

TABLE itemItemAttribute(item, itemAttribute);

CLASS STATIC stringItemAttribute 'Строковый атрибут' {
    captionItem 'Название',
    article 'Артикул',
    hallmark 'Отличительный признак'
} : itemAttribute;

valueCaptionItemAttribute(item, attribute) = castToString255(captionItem(item)) AND attribute == stringItemAttribute.captionItem;
valueArticleItemAttribute(item, attribute) = castToString255(articleItem(item)) AND attribute == stringItemAttribute.article;
valueHallmarkItemAttribute(item, attribute) = castToString255(hallmarkItem(item)) AND attribute == stringItemAttribute.hallmark;

valueStringItemAttribute(item, attribute) = UNION EXCLUSIVE  valueCaptionItemAttribute(item, attribute),
                                                             valueArticleItemAttribute(item, attribute),
                                                             valueHallmarkItemAttribute(item, attribute);

CLASS STATIC integerItemAttribute 'Целочисленный атрибут' {
    length 'Длина',
    width 'Ширина',
    height 'Высота',
    numberInPack 'Количество в грузовом месте'
} : itemAttribute;

valueLengthItemAttribute(item, attribute) = lengthItem(item) AND attribute == integerItemAttribute.length;
valueWidthItemAttribute(item, attribute) = widthItem(item) AND attribute == integerItemAttribute.width;
valueHeightItemAttribute(item, attribute) = heightItem(item) AND attribute == integerItemAttribute.height;
valueNumberInPackItemAttribute(item, attribute) = numberInPackItem(item) AND attribute == integerItemAttribute.numberInPack;

valueIntegerItemAttribute(item, attribute) = UNION EXCLUSIVE valueLengthItemAttribute(item, attribute),
                                                             valueWidthItemAttribute(item, attribute),
                                                             valueHeightItemAttribute(item, attribute),
                                                             valueNumberInPackItemAttribute(item, attribute);
stringIntegerItemAttribute(item, attribute) = castToString255(valueIntegerItemAttribute(item, attribute));

CLASS STATIC doubleItemAttribute 'Дробный атрибут' {
    netWeight 'Вес нетто',
    grossWeight 'Вес брутто',
    volume 'Объём',
    percentFat '% жирности',
    percentAlcohol '% алкоголя'
} : itemAttribute;

valueNetWeightItemAttribute(item, attribute) = netWeightItem(item) AND attribute == doubleItemAttribute.netWeight;
valueGrossWeightItemAttribute(item, attribute) = grossWeightItem(item) AND attribute == doubleItemAttribute.grossWeight;
valueVolumeItemAttribute(item, attribute) = volumeItem(item) AND attribute == doubleItemAttribute.volume;
valuePercentFatItemAttribute(item, attribute) = percentFatItem(item) AND attribute == doubleItemAttribute.percentFat;
valuePercentAlcoholItemAttribute(item, attribute) = percentAlcoholItem(item) AND attribute == doubleItemAttribute.percentAlcohol;

valueDoubleItemAttribute(item, attribute) = UNION EXCLUSIVE valueNetWeightItemAttribute(item, attribute),
                                                            valueGrossWeightItemAttribute(item, attribute),
                                                            valueVolumeItemAttribute(item, attribute),
                                                            valuePercentFatItemAttribute(item, attribute),
                                                            valuePercentAlcoholItemAttribute(item, attribute);

stringDoubleItemAttribute(item, attribute) = castToString255(valueDoubleItemAttribute(item, attribute));

CLASS STATIC booleanItemAttribute 'Логический атрибут' {
    fixPrice 'Товар с фиксированной ценой',
    manufactured 'Товар производится'
} : itemAttribute;

valueFixPriceWeightItemAttribute(item, attribute) = isFixPriceItem(item) AND attribute == booleanItemAttribute.fixPrice;
valueManufacturedItemAttribute(item, attribute) = isManufacturedItem(item) AND attribute == booleanItemAttribute.manufactured;

valueBooleanItemAttribute(item, attribute) = UNION EXCLUSIVE valueFixPriceWeightItemAttribute(item, attribute),
                                                             valueManufacturedItemAttribute(item, attribute);
stringBooleanItemAttribute(item, attribute) = castToString255(valueBooleanItemAttribute(item, attribute));

CLASS STATIC objectItemAttribute 'Объектный атрибут' {
    itemGroup 'Группа',
    UOM 'Единица измерения',
    brand 'Брэнд',
    typeItem 'Вид',
    formItem 'Форма',
    sort 'Сорт/категория',
    pack 'Упаковка',
    specialty 'Особенность',
    size 'Размер/калибр',
    coolingDegree 'Степень охлаждения',
    color 'Цвет',
    taste 'Вкус',
    countryOrigin 'Страна происхождения/производства'

} : itemAttribute;

valueItemGroupItemAttribute(item, attribute) = itemGroupSku(item) AND item IS item AND attribute == objectItemAttribute.itemGroup;
valueUOMItemAttribute(item, attribute) = UOMItem(item) AND attribute == objectItemAttribute.UOM;
valueBrandItemAttribute(item, attribute) = brandItem(item) AND attribute == objectItemAttribute.brand;
valueTypeItemAttribute(item, attribute) = typeItemItem(item) AND attribute == objectItemAttribute.typeItem;
valueFormItemAttribute(item, attribute) = formItemItem(item) AND attribute == objectItemAttribute.formItem;
valueSortItemAttribute(item, attribute) = sortItem(item) AND attribute == objectItemAttribute.sort;
valuePackItemAttribute(item, attribute) = packItem(item) AND attribute == objectItemAttribute.pack;
//valueNumberInPackItemAttribute(item, attribute) = numberInPackItem(item) AND attribute == objectItemAttribute.numberInPack;
valueSpecialtyItemAttribute(item, attribute) = specialtyItem(item) AND attribute == objectItemAttribute.specialty;
valueSizeItemAttribute(item, attribute) = sizeItem(item) AND attribute == objectItemAttribute.size;
valueCoolingDegreeItemAttribute(item, attribute) = coolingDegreeItem(item) AND attribute == objectItemAttribute.coolingDegree;
valueColorItemAttribute(item, attribute) = colorItem(item) AND attribute == objectItemAttribute.color;
valueTasteItemAttribute(item, attribute) = tasteItem(item) AND attribute == objectItemAttribute.taste;
valueCountryItemAttribute(item, attribute) = countryItem(item) AND attribute == objectItemAttribute.countryOrigin;

valueObjectItemAttribute(item, attribute) = UNION EXCLUSIVE valueItemGroupItemAttribute(item, attribute),
                                                            valueUOMItemAttribute(item, attribute),
                                                            valueBrandItemAttribute(item, attribute),
                                                            valueTypeItemAttribute(item, attribute),
                                                            valueFormItemAttribute(item, attribute),
                                                            valueSortItemAttribute(item, attribute),
                                                            valuePackItemAttribute(item, attribute),
                                                           // valueNumberInPackItemAttribute(item, attribute),
                                                            valueSpecialtyItemAttribute(item, attribute),
                                                            valueSizeItemAttribute(item, attribute),
                                                            valueCoolingDegreeItemAttribute(item, attribute),
                                                            valueColorItemAttribute(item, attribute),
                                                            valueTasteItemAttribute(item, attribute),
                                                            valueCountryItemAttribute(item, attribute) PERSISTENT;
nameObjectItemAttribute(item, attribute) = name(valueObjectItemAttribute(item, attribute));

CLASS STATIC objectItemShortAttribute 'Объектный краткий атрибут' {
    shortUOM 'Единица измерения (сокр.)',
    shortPack 'Упаковка (сокр.)',
    shortSpecialty 'Особенность (сокр.)',
    shortSize 'Размер/калибр (сокр.)',
    shortCoolingDegree 'Степень охлаждения (сокр.)'

} : itemAttribute;

valueUOMItemShortAttribute(item, attribute) = UOMItem(item) AND attribute == objectItemShortAttribute.shortUOM;
valuePackItemShortAttribute(item, attribute) = packItem(item) AND attribute == objectItemShortAttribute.shortPack;
valueSpecialtyItemShortAttribute(item, attribute) = specialtyItem(item) AND attribute == objectItemShortAttribute.shortSpecialty;
valueSizeItemShortAttribute(item, attribute) = sizeItem(item) AND attribute == objectItemShortAttribute.shortSize;
valueCoolingDegreeItemShortAttribute(item, attribute) = coolingDegreeItem(item) AND attribute == objectItemShortAttribute.shortCoolingDegree;

valueObjectItemShortAttribute(item, attribute) = UNION EXCLUSIVE valueUOMItemShortAttribute(item, attribute),
                                                            valuePackItemShortAttribute(item, attribute),
                                                            valueSpecialtyItemShortAttribute(item, attribute),
                                                            valueSizeItemShortAttribute(item, attribute),
                                                            valueCoolingDegreeItemShortAttribute(item, attribute) PERSISTENT;

shortNameObjectItemAttribute(item, attribute) = shortName(valueObjectItemShortAttribute(item, attribute));

valueItemAttribute(item, attribute) = UNION EXCLUSIVE valueStringItemAttribute(item, attribute),
                                                      stringIntegerItemAttribute(item, attribute),
                                                      stringDoubleItemAttribute(item, attribute),
                                                      stringBooleanItemAttribute(item, attribute),
                                                      nameObjectItemAttribute(item, attribute),
                                                      shortNameObjectItemAttribute(item, attribute) PERSISTENT;

numberInNameItemAttribute 'Порядковый номер в наименовании' = DATA INTEGER (itemAttribute) IN baseGroup;
numberInNameCashItemAttribute 'Порядковый номер в наименовании для касс' = DATA INTEGER (itemAttribute) IN baseGroup;
numberInNameScalesItemAttribute 'Порядковый номер в наименовании для весов' = DATA INTEGER (itemAttribute) IN baseGroup;

nameAttributeItem 'Наименование' (item) = castToString255(
                [GROUP CONCAT valueItemAttribute(item, attribute), ' ' BY item ORDER numberInNameItemAttribute(attribute)](item))
                IN recognizeGroup PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 80 INDEXED AGGPROP;
nameSku(item) += nameAttributeItem(item);
UOMSku(item) += UOMItem(item);

nameCashAttributeItem 'Наименование для касс' (item) = castToString255(
                [GROUP CONCAT valueItemAttribute(item, attribute), ' ' BY item ORDER numberInNameCashItemAttribute(attribute)](item))
                PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 80;
nameScalesAttributeItem 'Наименование для весов' (item) = castToString255(
                [GROUP CONCAT valueItemAttribute(item, attribute), ' ' BY item ORDER numberInNameScalesItemAttribute(attribute)](item))
                PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 80;

nameAttributeItemGroupItem 'Наименование' (itemGroup, item) = nameAttributeItem(item) AND isParentItemGroupSku(itemGroup, item) PERSISTENT INDEXED;

nameAttributeStatisticGroupItem 'Наименование' (statisticGroup, item) = nameAttributeItem(item) AND hasParentStatisticGroupSku(statisticGroup, item) PERSISTENT INDEXED;

// ----------------------------------- Штрих код ------------------------------------------ //

hasParentItemGroupBarcode (itemGroup, barcode) = isParentItemGroupSku(itemGroup, skuBarcode(barcode));

titleOriginScalesBarcode 'Наименование для весов' = DATA STRING[100] (barcode);
titleOriginCashBarcode 'Наименование для касс' = DATA STRING[100] (barcode);

titleScalesSkuBarcode 'Наименование для весов' = nameScalesAttributeItem(skuBarcode(barcode));
titleCashSkuBarcode 'Наименование для касс' = nameCashAttributeItem(skuBarcode(barcode));

daysExpiryMachineryBarcode 'Срок годности в днях' = daysExpiryPackItem(skuBarcode(barcode));
hoursExpiryMachineryBarcode 'Срок годности в часах' = hoursExpiryPackItem(skuBarcode(barcode));
labelFormatMachineryBarcode 'Формат этикетки' = idLabelFormatPackItem(skuBarcode(barcode));
compositionMachineryBarcode 'Состав товара' = compositionScalesItem(skuBarcode(barcode));
isWeightMachineryBarcode 'Вес товара' = isWeightItem(skuBarcode(barcode));
itemGroupMachineryBarcode 'Группа товара' = itemGroupSku(skuBarcode(barcode));
expirationDateSkuDepartmentStoreMachineryBarcode 'Крайний срок годности' = expirationDateSkuDepartmentStore(skuBarcode(barcode), departmentStore);

titleScalesBarcode 'Наименование для весов' = UNION OVERRIDE titleScalesSkuBarcode(barcode), titleOriginScalesBarcode(barcode) MINCHARWIDTH 30 PREFCHARWIDTH 30;
titleCashBarcode 'Наименование для касс' = UNION OVERRIDE titleCashSkuBarcode(barcode), titleOriginCashBarcode(barcode) MINCHARWIDTH 30 PREFCHARWIDTH 30;

pieceNumeratorSku (sku) = pieceNumeratorItemGroup(itemGroupSku(sku));
weightNumeratorSku (sku) = weightNumeratorItemGroup(itemGroupSku(sku));

generateBarcodeSku 'Сгенерировать штрих-код' = ACTION (sku) {
    ADDOBJ barcode;
    FOR b == addedObject() DO {
        SET skuBarcode(b) <- sku AS sku;
        LOCAL tmpNum = numerator();
        IF isWeightItem(sku) THEN
            SET tmpNum() <- weightNumeratorSku(sku)
        ELSE
            SET tmpNum() <- pieceNumeratorSku(sku);
        SET idBarcode(b) <- completeBarcode(curStringValueNumerator(tmpNum()));
        EXEC incrementValueNumerator(tmpNum());
    };
} TOOLBAR CONFIRM;


// ----------------------------------- Компоненты ------------------------------------------ //
CLASS component 'Компонент' : sku, named;
TABLE component(component);

nettoBruttoCoeffComponent 'Сезонный коэффициент пересчета сырья из нетто в брутто' (component) = DATA NUMERIC[8,3] (component) IN manufactoryGroup;
percentHumidityFlourDepartmentStoreComponent '% влажности муки' = DATA NUMERIC[8,3] (departmentStore, component) IN manufactoryGroup;

FORM component 'Компонент'
OBJECTS c=component FIXED PANEL
PROPERTIES(c) name, nettoBruttoCoeffComponent
EDIT component OBJECT c;

FORM components 'Компоненты'
OBJECTS c=component
PROPERTIES(c) READONLY name, nettoBruttoCoeffComponent
PROPERTIES(c) ADDFORM, EDITFORM, delete;



// ----------------------------------- Генерация графика --------------------------------------- //

CLASS STATIC genType 'Тип генерации' {
    genDays 'Генерация через N дней',
    genNumber 'Генерация по числам',
    genDayMonth 'Генерация по дням недели и месяца'
};

CLASS genTimeTable 'Генерация графика' : historyObject;
TABLE genTimeTable(genTimeTable);

//общие свойства
genTimeTableType 'Тип генерации графика (ИД)' = DATA genType (genTimeTable);
nameGenTimeTableType 'Тип генерации графика' (genTimeTable) = name(genTimeTableType(genTimeTable)) IN baseGroup;

supplierGenTimeTable 'Поставщик (ИД)' = DATA supplier (genTimeTable) AUTOSET;
nameSupplierGenTimeTable 'Поставщик' (genTimeTable) = name(supplierGenTimeTable(genTimeTable)) IN baseGroup;
UNPSupplierGenTimeTable 'УНП поставщика' (genTimeTable) = UNPLegalEntity(supplierGenTimeTable(genTimeTable)) IN baseGroup;

departmentStoreGenTimeTable 'Подразделение (ИД)' = DATA departmentStore (genTimeTable) AUTOSET;
nameDepartmentStoreGenTimeTable 'Подразделение' (genTimeTable) = name(departmentStoreGenTimeTable(genTimeTable)) IN baseGroup;

startDateGenTimeTable 'Дата начала' = DATA DATE (genTimeTable) IN baseGroup;
endDateGenTimeTable 'Дата окончания' = DATA DATE (genTimeTable) IN baseGroup;

dayBeforeGenTimeTable 'За сколько дней формировать заказ' = DATA INTEGER (genTimeTable);

//свойства "Каждые N недель"
periodGenTimeTable 'По прошествии скольки недель будет осуществится следующая поставка' = DATA INTEGER (genTimeTable);

//свойства "Каждые N дней"
dayAfterGenTimeTable 'Через сколько дней после последней поставки делать заказ' = DATA INTEGER (genTimeTable);
dayLastOrderGenTimeTable 'Дата последнего заказа' = DATA DATE (genTimeTable);

//свойства "По числам"
stringNumberGenTimeTable 'Числа месяца поставок (указывать через запятую)' = DATA STRING[100] (genTimeTable);
transferDayGenTimeTable 'День на который переносить поставки с Субботы и Воскресенья (ИД)' = DATA DOW (genTimeTable);
nameTransferDayGenTimeTable 'День на который переносить поставки с Субботы и Воскресенья' (genTimeTable) = name(transferDayGenTimeTable(genTimeTable));
CONSTRAINT transferDayGenTimeTable(genTimeTable) != DOW.friday AND transferDayGenTimeTable(genTimeTable) != DOW.monday CHECKED MESSAGE 'Выберите день с ПН по ПТ';

//свойства "По дням недели и месяца"
inMonthGenTimeTable 'Включать' = DATA BOOLEAN (genTimeTable, month);
inDayGenTimeTable 'Включать' = DATA BOOLEAN (genTimeTable, DOW);
inAllMonthGenTable 'Включить все месяцы' = DATA BOOLEAN (genTimeTable);
inMonthGenTimeTable(genTimeTable, month) <- inAllMonthGenTable(genTimeTable) WHEN ASSIGNED(inAllMonthGenTable(genTimeTable) AND month IS month);

toShowGenDay (genTimeTable) = genTimeTableType(genTimeTable) == genType.genDays;
toShowGenNumber (genTimeTable) = genTimeTableType(genTimeTable) == genType.genNumber;
toShowGenDayMonth (genTimeTable) = genTimeTableType(genTimeTable) == genType.genDayMonth;

//------------------------------------ Товар с историей -------------------------------------------------------------//
GROUP historyGroup 'Изменяемые характеристики' : baseGroup;

@defineHistorizableCustom(inactiveItem, 'Неактивный товар', yesNo, name, item, nameAttributeItem, activeGroup);
isActiveItem (item) = item IS item AND NOT inactiveItem(item) == yesNo.yes PERSISTENT;

@defineHistorizableCustom(isPortionBarItem, 'Порционный товар для бара', yesNo, name, item, nameAttributeItem, barGroup);

@defineHistorizableCustom(banDiscountItem, 'Запретить скидки по товару', yesNo, name, item, nameAttributeItem, discountGroup);

@defineHistorizable(coefficientNetGrossItem, 'Сезонный коэффициент пересчета сырья из нетто в брутто', NUMERIC[8,3], item, nameAttributeItem, manufactoryGroup);

@defineHistorizable(importerPriceItem, 'Цена импортёра', NUMERIC[14,3], item, nameAttributeItem, retailGroup);

@defineHistorizable(minTradeAllowanceItem, 'MIN допустимая торговая надбавка, %', NUMERIC[8,3], item, nameAttributeItem, retailGroup);
@defineHistorizable(maxTradeAllowanceItem, 'MAX допустимая торговая надбавка, %', NUMERIC[8,3], item, nameAttributeItem, retailGroup);

//---------------------------- Налоги ----------------------------------------//

GROUP supplierVATGroup 'НДС поставщика' : retailGroup;
@defineHistorizableCustom(supplierRangeItem, 'НДС поставщика', range, numberRange, item, nameAttributeItem, supplierVATGroup);

CONSTRAINT taxRange(dataSupplierRangeItemDate(item, date)) != tax.taxVAT CHECKED BY dataSupplierRangeItemDate MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

dataValueSupplierRangeItemDate 'НДС поставщика, %' (item, date) = valueRateRangeDate(dataSupplierRangeItemDate(item, date), date) IN supplierVATGroup;
valueCurrentRateSupplierRangeItem 'НДС поставщика, %' (item) = valueCurrentRateRange(supplierRangeItem(item)) IN supplierVATGroup;

EXTEND FORM addSupplierRangeItem
    PROPERTIES READONLY dataValueSupplierRangeItemDate(a, d)
;
EXTEND FORM dialogSupplierRangeItem
    PROPERTIES dataValueSupplierRangeItemDate(a, d)
;

//---------------------------- НДС розничный для товара ----------------------------------------//

GROUP retailVATGroup 'НДС розничный' : retailGroup;

@defineHistorizableCustom(retailRangeItem, 'НДС розничный', range, numberRange, item, nameAttributeItem, retailVATGroup);

CONSTRAINT taxRange(dataRetailRangeItemDate(item, date)) != tax.taxVAT CHECKED BY dataRetailRangeItemDate MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

dataValueRetailRangeItemDate 'НДС розничный, %' (item, date) = valueRateRangeDate(dataRetailRangeItemDate(item, date), date) IN retailVATGroup;
valueCurrentRateRetailRangeItem 'НДС розничный, %' (item) = valueCurrentRateRange(retailRangeItem(item)) IN retailVATGroup;

EXTEND FORM addRetailRangeItem
    PROPERTIES READONLY dataValueRetailRangeItemDate(a, d)
;
EXTEND FORM dialogRetailRangeItem
    PROPERTIES dataValueRetailRangeItemDate(a, d)
;

// --------- Суммы для товарного отчета по переоценке --------------- //

diffRetailSumItemPriceChangeDocumentDetailPriceChangeDocument 'Сумма переоценки, товар' (priceChangeDocument) =
    GROUP SUM diffRetailSumPriceChangeDocumentDetail(priceChangeDocumentDetail) AND NOT isContainerItem(skuPriceChangeDocumentDetail(priceChangeDocumentDetail))
        BY  priceChangeDocumentPriceChangeDocumentDetail(priceChangeDocumentDetail);
diffRetailSumContainerPriceChangeDocumentDetailPriceChangeDocument 'Сумма переоценки, тара' (priceChangeDocument) =
    GROUP SUM diffRetailSumPriceChangeDocumentDetail(priceChangeDocumentDetail) IF isContainerItem(skuPriceChangeDocumentDetail(priceChangeDocumentDetail))
        BY  priceChangeDocumentPriceChangeDocumentDetail(priceChangeDocumentDetail);

sumItemIncAccountDocumentLedger (ledger) += diffRetailSumItemPriceChangeDocumentDetailPriceChangeDocument(ledger);
sumContainerIncAccountDocumentLedger (ledger) += diffRetailSumContainerPriceChangeDocumentDetailPriceChangeDocument(ledger);

// ----------------------------------- Справочник норм естественной убыли -------------------------------------------- //

CLASS naturalLossItemGroup 'Группа естественной убыли': named, externalObject;

CLASS subNaturalLossItemGroup 'Группа естественной убыли': named, externalObject;
CLASS subNaturalLossItemGroupDetail 'Строка группы естественной убыли' : externalObject;

parentNaturalLossItemGroup 'Родительская группа' = DATA naturalLossItemGroup(subNaturalLossItemGroup);
codeSubNaturalLossItemGroup 'Код нормы естественной убыли' = DATA STRING[3] (subNaturalLossItemGroup);

subNaturalLossItemGroupSubNaturalLossItemGroupDetail = DATA subNaturalLossItemGroup (subNaturalLossItemGroupDetail);
dayFromNaturalLossItemGroupDetail 'День' = DATA INTEGER (subNaturalLossItemGroupDetail);
monthFromNaturalLossItemGroupDetail = DATA month (subNaturalLossItemGroupDetail);
nameMonthFromNaturalLossItemGroupDetail 'Месяц' = name(monthFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail));
dayToNaturalLossItemGroupDetail 'День' = DATA INTEGER (subNaturalLossItemGroupDetail);
monthToNaturalLossItemGroupDetail = DATA month (subNaturalLossItemGroupDetail);
nameMonthToNaturalLossItemGroupDetail 'Месяц' = name(monthToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail));
percentNaturalLossItemGroupDetail '% естественной убыли' = DATA NUMERIC[10,5] (subNaturalLossItemGroupDetail);

dateToNumber(prm1, prm2) = prm2*32 + prm1;
inInterval(prm1, prm2, prm3, prm4, prm5, prm6) = (dateToNumber(prm1, prm2) >= dateToNumber(prm3, prm4))
                                                  AND (dateToNumber(prm1, prm2) <= dateToNumber(prm5, prm6));

inIntervalNaturalLoss (date, subNaturalLossItemGroupDetail) =
    inInterval(dayInDate(date), numberMonthInDate(date),
               dayFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail),
               numberMonth(monthFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail)),
               dayToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail),
               numberMonth(monthToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail))) AND date IS DATE;

castInterval =
    FORMULA STRING[100] ' CAST($1 AS TEXT) || \' \' || CAST($2 AS TEXT) || \' - \' || CAST($3 AS TEXT) || \' \' || CAST($4 AS TEXT)';
castIntervalNaturalLoss (subNaturalLossItemGroupDetail) =
    castInterval(dayFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail),
                 nameMonthFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail),
                 dayToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail),
                 nameMonthToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail));

castConcat = FORMULA STRING[15] 'CAST($1 AS TEXT)';
concatSubNaturalLossItemGroupDetail (subNaturalLossItemGroup) =
    GROUP CONCAT castConcat(percentNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail)), ','
    BY subNaturalLossItemGroupSubNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail)
    MINCHARWIDTH 100 PREFCHARWIDTH 150;

inSubNaturalLossItemGroup (subNaturalLossItemGroup, subNaturalLossItemGroupDetail) =
    subNaturalLossItemGroupSubNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail) ==  subNaturalLossItemGroup;

groupNaturalLossItem 'Группа естественной убыли товара(ИД)' = DATA subNaturalLossItemGroup (item);
nameGroupNaturalLossItem 'Группа естественной убыли товара' (item) = name(groupNaturalLossItem(item)) IN rateGroup;
rateGroupNaturalLossItem 'Норма естественной убыли, %' (item) =
    concatSubNaturalLossItemGroupDetail(groupNaturalLossItem(item)) IN rateGroup;

inParentNaturalLossItemGroup(naturalLossItemGroup, subNaturalLossItemGroup) =
    parentNaturalLossItemGroup(subNaturalLossItemGroup ) == naturalLossItemGroup;

inParentSubNaturalLossItemGroup (naturalLossItemGroup, subNaturalLossItemGroup) = UNION OVERRIDE
    parentNaturalLossItemGroup(subNaturalLossItemGroup) == naturalLossItemGroup,
    subNaturalLossItemGroup IS subNaturalLossItemGroup AND NOT naturalLossItemGroup;

numberFromSubNaturalLossItemGroupDetail (subNaturalLossItemGroupDetail) =
    dateToNumber(dayFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail),
                 numberMonth(monthFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail)));

numberToSubNaturalLossItemGroupDetail (subNaturalLossItemGroupDetail) =
    dateToNumber(dayToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail),
                 numberMonth(monthToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail)));

intersect(prm1, prm2, prm3, prm4) = (prm4-prm1)*(prm2-prm3) >= 0;

intersectNaturalLoss(interval1, interval2) = intersect(numberFromSubNaturalLossItemGroupDetail(interval1),
                                                       numberToSubNaturalLossItemGroupDetail(interval1),
                                                       numberFromSubNaturalLossItemGroupDetail(interval2),
                                                       numberToSubNaturalLossItemGroupDetail(interval2));

CONSTRAINT intersectNaturalLoss(interval1, interval2) AND interval1 != interval2
           AND subNaturalLossItemGroupSubNaturalLossItemGroupDetail(interval1) == subNaturalLossItemGroupSubNaturalLossItemGroupDetail(interval2)
           CHECKED BY intersectNaturalLoss MESSAGE 'Интервалы не могут пересекаться';

    CONSTRAINT dayFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail) < 1
           OR dayFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail) > 31
           CHECKED BY dayFromNaturalLossItemGroupDetail MESSAGE 'Задайте корректный день месяца';

    CONSTRAINT dayToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail) < 1
           OR dayToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail) > 31
           CHECKED BY dayToNaturalLossItemGroupDetail MESSAGE 'Задайте корректный день месяца';

FORM naturalLossItem 'Справочник норм естественной убыли'

    TREE treeNaturalLossItem a=STRING[3], n=naturalLossItemGroup
    PROPERTIES READONLY OBJVALUE(a)
    PROPERTIES name(n), ADDOBJ(n), delete(n) FORCE PANEL
    ORDER BY name

    OBJECTS sg=subNaturalLossItemGroup, d=subNaturalLossItemGroupDetail
    PROPERTIES(sg) name, codeSubNaturalLossItemGroup, ADDOBJ TODRAW sg, delete FORCE PANEL
    PROPERTIES(d) dayFromNaturalLossItemGroupDetail, nameMonthFromNaturalLossItemGroupDetail,
                   dayToNaturalLossItemGroupDetail, nameMonthToNaturalLossItemGroupDetail,
                   percentNaturalLossItemGroupDetail, ADDOBJ ,delete
    FILTERS stringEqualsAll(a), inParentSubNaturalLossItemGroup(n, sg),  inSubNaturalLossItemGroup(sg, d)
    ORDER BY name
;

DESIGN naturalLossItem FROM DEFAULT {

    NEW topContainer {

        type = SPLITH;
        childConstraints = TO THE RIGHT;

        ADD treeNaturalLossItem.box;

        NEW firstCase {

            type = SPLITV;
            childConstraints = TO THE BOTTOM;
            fillHorizontal = 4;

            ADD sg.box;
            ADD d.box;
        }
    }

    ADD functions.box;

    PROPERTY (delete(n)) {
        caption = 'Удалить';
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }

    PROPERTY (delete(sg)) {
        caption = 'Удалить';
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
}

FORM naturalLossItems 'Справочник норм естественной убыли'

    TREE treeNaturalLossItem a=STRING[3], n=naturalLossItemGroup
    PROPERTIES READONLY OBJVALUE(a), name(n)
    ORDER BY name

    OBJECTS sg=subNaturalLossItemGroup, d=subNaturalLossItemGroupDetail
    PROPERTIES(sg) READONLY name, codeSubNaturalLossItemGroup
    PROPERTIES(d) READONLY dayFromNaturalLossItemGroupDetail, nameMonthFromNaturalLossItemGroupDetail,
                           dayToNaturalLossItemGroupDetail, nameMonthToNaturalLossItemGroupDetail,
                           percentNaturalLossItemGroupDetail
    FILTERS stringEqualsAll(a), inParentSubNaturalLossItemGroup(n, sg), inSubNaturalLossItemGroup(sg, d)
    ORDER BY name

    DIALOG subNaturalLossItemGroup OBJECT sg
;

DESIGN naturalLossItems FROM DEFAULT {

    NEW topContainer {

        type = SPLITH;
        childConstraints = TO THE RIGHT;

        ADD treeNaturalLossItem.box;

        NEW firstCase {

            type = SPLITV;
            childConstraints = TO THE BOTTOM;
            fillHorizontal = 4;

            ADD sg.box;
            ADD d.box;
        }
    }

    ADD functions.box;
}

//------------------------------------ Товар для подразделения с историей -------------------------------------------//
//inActionItemDepartmentDate 'Товар акции' = DATA BOOLEAN (item, departmentStore, DATE) IN baseGroup;

TABLE itemDepartmentStore (item, departmentStore);
TABLE itemDepartmentStoreDate (item, departmentStore, DATE);

@defineHistorizableDouble(maxReserveItemDepartment, 'Максимально допустимый товарный запас в днях', NUMERIC[8,2], item, nameAttributeItem, departmentStore, name, orderGroup);
@defineHistorizableDouble(minReserveItemDepartment, 'Минимально допустимый товарный запас в днях', NUMERIC[8,2], item, nameAttributeItem, departmentStore, name, orderGroup);

@defineHistorizableDoubleYesNo(banPriceChangeItemDepartment, 'Запрет на переоценку', item, nameAttributeItem, departmentStore, name, retailGroup);

@defineHistorizableDoubleYesNo(inActionItemDepartment, 'Товар акции', item, nameAttributeItem, departmentStore, name, discountGroup);

@defineHistorizableDouble(marginProductionItemDepartment, 'Наценка производства', NUMERIC[8,3], item, nameAttributeItem, departmentStore, name, retailGroup);

@defineHistorizableDouble(retailPriceItemDepartment, 'Розничная цена', NUMERIC[14,2], item, nameAttributeItem, departmentStore, name, retailGroup);

@defineHistorizableDouble(accountPriceItemDepartment, 'Учётная цена', NUMERIC[14,2], item, nameAttributeItem, departmentStore, name, retailGroup);

@defineHistorizableDouble(discountItemDepartment, 'Скидка для товара', STRING[100], item, nameAttributeItem, departmentStore, name, discountGroup);

defaultLabelTypeItemDepartmentStore(item, departmentStore) = defaultLabelTypeDepartmentStore(departmentStore) AND item IS item;
@defineHistorizableDoubleDefaultCustom(labelItemDepartment, defaultLabelTypeItemDepartmentStore, 'Ценник', labelType, name, item, nameAttributeItem, departmentStore, name, 10, labelGroup);
labelBarcodeDepartmentDate (barcode, departmentStore, date) = labelItemDepartmentDate(skuBarcode(barcode), departmentStore, date);

CONSTRAINT dataLabelItemDepartmentDate(item, departmentStore, date) AND NOT inLabelTypeDepartmentStore(dataLabelItemDepartmentDate(item, departmentStore, date), departmentStore)
    CHECKED BY dataLabelItemDepartmentDate MESSAGE 'Тип ценника запрещен для выбранного отдела магазина';

@defineHistorizableDouble(multiplierItemDepartment, 'Множитель', INTEGER, item, nameAttributeItem, departmentStore, name, labelGroup);
valOverMultiplierItemDepartmentDate (item, departmentStore, date) = UNION OVERRIDE 1 IF item IS item AND departmentStore IS departmentStore AND date IS DATE,
                                                                               multiplierItemDepartmentDate(item, departmentStore, date);
valOverMultiplierBarcodeDepartmentDate (barcode, departmentStore, date) = valOverMultiplierItemDepartmentDate(skuBarcode(barcode), departmentStore, date);

@defineHistorizableDouble(oldPriceItemDepartment, 'Старая цена', NUMERIC[14,2], item, nameAttributeItem, departmentStore, name, labelGroup);

TABLE supplierItemDepartmentStoreDate (supplier, item, departmentStore, DATE);

@defineHistorizableTripleYesNo(isSupplierItemDepartment, 'Поставляется', supplier, name, item, nameAttributeItem, departmentStore, name, orderGroup);

@defineHistorizableTriple(priceSupplierItemDepartment, 'Цена поставщика', NUMERIC[14,2], supplier, name, item, nameAttributeItem, departmentStore, name, retailGroup);

@defineHistorizableDouble(markupItemDepartment, 'Торговая надбавка', NUMERIC[8,3], item, nameAttributeItem, departmentStore, name, retailGroup);

@defineHistorizableTripleYesNo(banSupplierItemDepartment, 'Запретить закупку', supplier, name, item, nameAttributeItem, departmentStore, name, orderGroup);

FORM item 'Товар'

    OBJECTS i=item FIXED PANEL

    PROPERTIES(i) nameAttributeItem, nameCashAttributeItem, nameScalesAttributeItem, canonicalNameItemGroupSku, idBarcodeSku READONLY,

                  // Основные данные
                  captionItem SHOWIF toShowCaption(i), nameBrandItem SHOWIF toShowBrand(i), nameTypeItemItem SHOWIF toShowType(i),
                  nameSortItem SHOWIF toShowSort(i), shortNamePackItem SHOWIF toShowPack(i), shortNameSizeItem SHOWIF toShowSize(i),
                  shortNameSpecialtyItem SHOWIF toShowSpecialty(i), nameColorItem SHOWIF toShowColor(i),
                  nameTasteItem SHOWIF toShowTaste(i), hallmarkItem SHOWIF toShowHallmark(i), articleItem SHOWIF toShowArticle(i),
                  nameCoolingDegreeItem SHOWIF toShowCoolingDegree(i), nameFormItemItem SHOWIF toShowFormItem(i),

                  shortNameUOMItem SHOWIF toShowUOM(i), nameCountryItem SHOWIF toShowCountry(i),
                  nameManufacturerItem SHOWIF toShowManufacturer(i), isContainerItem,
                  isWeightItem, isManufacturedItem,
                  compositionMenuItem SHOWIF isManufacturedItem(i),
                  grossWeightPackItem SHOWIF isManufacturedItem(i), isCrudeItem SHOWIF isManufacturedItem(i),
                  nameGroupProductItem SHOWIF isManufacturedItem(i), standartItem SHOWIF isManufacturedItem(i),
                  normOutItem SHOWIF isManufacturedItem(i), nameGroupMenuItem SHOWIF isManufacturedItem(i),
                  isCutedItem SHOWIF isManufacturedItem(i), coefficientNetGrossItem SHOWIF isManufacturedItem(i), dialogCoefficientNetGrossItem,

                  nameRateWasteItem, percentRateWasteItem, nameGroupNaturalLossItem, rateGroupNaturalLossItem, nameStatisticGroupSku,

                  volumeItem, lengthItem, widthItem, heightItem, lengthPackItem, widthPackItem, heightPackItem,

                  nameIsPortionBarItem, dialogIsPortionBarItem, nameInactiveItem, dialogInactiveItem,

                  // Дополнительные
                  passScalesItem, isMarkItem, isLoafCutItem,
                  compositionScalesItem, idLabelFormatPackItem, storageTemperatureItem, banSailItem,

                  importerPriceItem, dialogImporterPriceItem,
                  numberRangeSupplierRangeItem, valueCurrentRateSupplierRangeItem, dialogSupplierRangeItem,
                  numberRangeRetailRangeItem, valueCurrentRateRetailRangeItem, dialogRetailRangeItem,
                  percentWholesaleMarkItem, minTradeAllowanceItem, dialogMinTradeAllowanceItem, maxTradeAllowanceItem, dialogMaxTradeAllowanceItem,
                  minAllowedRetailPriceItem, isFixPriceItem, banMarkdownItem, nameWareItem SHOWIF toShowWare(i),

                  quantityDiscountItem, fixPriceItem, nameBanDiscountItem, dialogBanDiscountItem,

                  percentFatItem, percentAlcoholItem, nutritionalValueItem, energyItem,
                  fatsItem, carbohydratesItem, proteinsItem, isContainGMOItem,

                  controlExpiryItem, daysExpiryItem, daysExpiryPackItem, hoursExpiryPackItem,

                  netWeightItem, grossWeightItem, quantityPackItem, minQuantityOrderItem, minReserveItem, numberInPackItem,

                  bonusReturnItem, nameReturnItem, hintItem, bonusItem,

                  imageItem, loadImageItem

    OBJECTS b=barcode
    PROPERTIES(b)       idBarcode, dateBarcode, titleScalesBarcode, titleCashBarcode, shortNameUOMBarcode,
                        amountBarcode, activeBarcode, primaryBarcode
    PROPERTIES(i)       generateBarcodeSku TODRAW b FORCE PANEL
    PROPERTIES(b)       ADDOBJ, delete
    FILTERS skuBarcode(b) == i

    // Управленческие параметры
    TREE treeStore a=STRING[3], t=chainStores, st=storeType, s=store
    PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS stringEqualsAll(a), inChainStoresStoreType (t, st), inStoreTypeStore (st, s)

    OBJECTS dt=DATE FIXED PANEL, sp=supplier FIXED PANEL, d=departmentStore
    PROPERTIES (d) name
    FILTERS inChainStoresStoreTypeStoreDepartment(t, st, s, d)

    PROPERTIES (dt) OBJVALUE BACKGROUND dateDiffersCurrent(dt)
    PROPERTIES (sp) SELECTOR name
    PROPERTIES      overNameIsSupplierItemDepartmentDate(sp, i, d, dt) BACKGROUND dataIsSupplierItemDepartmentDate(sp, i, d, dt), overDialogIsSupplierItemDepartmentDate(sp, i, d),
                    overNameBanSupplierItemDepartmentDate(sp, i, d, dt) BACKGROUND dataBanSupplierItemDepartmentDate(sp, i, d, dt), overDialogBanSupplierItemDepartmentDate(sp, i, d),
                    overPriceSupplierItemDepartmentDate(sp, i, d, dt) BACKGROUND dataPriceSupplierItemDepartmentDate(sp, i, d, dt), overDialogPriceSupplierItemDepartmentDate(sp, i, d),
                    overMarkupItemDepartmentDate(i, d, dt) BACKGROUND dataMarkupItemDepartmentDate(i, d, dt), overDialogMarkupItemDepartmentDate(i, d)
    PROPERTIES      overRetailPriceItemDepartmentDate(i, d, dt) BACKGROUND dataRetailPriceItemDepartmentDate(i, d, dt), overDialogRetailPriceItemDepartmentDate(i, d),
                    overMaxReserveItemDepartmentDate(i, d, dt) BACKGROUND dataMaxReserveItemDepartmentDate(i, d, dt), overDialogMaxReserveItemDepartmentDate(i, d),
                    overMinReserveItemDepartmentDate(i, d, dt) BACKGROUND dataMinReserveItemDepartmentDate(i, d, dt), overDialogMinReserveItemDepartmentDate(i, d),
                    overNameBanPriceChangeItemDepartmentDate(i, d, dt) BACKGROUND dataNameBanPriceChangeItemDepartmentDate(i, d, dt), overDialogBanPriceChangeItemDepartmentDate(i, d),
                    overNameInActionItemDepartmentDate(i, d, dt) BACKGROUND dataNameInActionItemDepartmentDate(i, d, dt), overDialogInActionItemDepartmentDate(i, d),
                    overMarginProductionItemDepartmentDate(i, d, dt) BACKGROUND dataMarginProductionItemDepartmentDate(i, d, dt), overDialogMarginProductionItemDepartmentDate(i, d),
                    overDiscountItemDepartmentDate(i, d, dt) BACKGROUND dataDiscountItemDepartmentDate(i, d, dt), overDialogDiscountItemDepartmentDate(i, d),
                    overNameLabelItemDepartmentDate(i, d, dt) BACKGROUND dataLabelItemDepartmentDate(i, d, dt), overDialogLabelItemDepartmentDate(i, d),
                    overMultiplierItemDepartmentDate(i, d, dt) BACKGROUND dataMultiplierItemDepartmentDate(i, d, dt), overDialogMultiplierItemDepartmentDate(i, d),
                    overOldPriceItemDepartmentDate(i, d, dt) BACKGROUND dataOldPriceItemDepartmentDate(i, d, dt), overDialogOldPriceItemDepartmentDate(i, d)

    EDIT item OBJECT i
;

DESIGN item FROM DEFAULT {
    main {
        i.panel {
            NEW itemPanelColumn1 {
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(nameAttributeItem);
                ADD PROPERTY(nameCashAttributeItem);
                ADD PROPERTY(nameScalesAttributeItem);
            }
            NEW itemPanelColumn2 {
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(canonicalNameItemGroupSku);
                ADD PROPERTY(idBarcodeSku);
            }
        }
        NEW item.box BEFORE b.box {
            type = TABBED;
            NEW primary.box {
                title = 'Основные данные';
                fillVertical = 1.0;
                fillHorizontal = 1.0;
                NEW containerLeft {
                    childConstraints = TO THE BOTTOM;
                    ADD i.descriptionGroup {
                        fillVertical = 0.4;
                        NEW small.box {
                            ADD PROPERTY(shortNamePackItem(i));
                            ADD PROPERTY(shortNameSizeItem(i));
                            ADD PROPERTY(shortNameSpecialtyItem(i));
                            POSITION PROPERTY(shortNamePackItem(i)) TO THE LEFT PROPERTY(shortNameSizeItem(i));
                            POSITION PROPERTY(shortNameSizeItem(i)) TO THE LEFT PROPERTY(shortNameSpecialtyItem(i));
                        };
                    }
                    ADD i.manufactoryGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                }

                NEW containerRight {
                    childConstraints = TO THE BOTTOM;
                    ADD i.headGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.rateGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.sizeGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.barGroup;
                    ADD i.activeGroup;
                }
                POSITION containerLeft TO THE LEFT containerRight;
                ADD b.box;
            }

            NEW additional.box {

                title = 'Дополнительные';
                fillVertical = 1.0;
                fillHorizontal = 1.0;

                NEW containerALeft {
                    childConstraints = TO THE BOTTOM;
                    ADD i.equipmentGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.retailGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                };

                NEW containerARight {
                    childConstraints = TO THE BOTTOM;
                    ADD i.substanceGroup{
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.expiryGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.orderGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.documentGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                };

                POSITION containerALeft TO THE LEFT containerARight;
            }

            ADD d.box {

                title = 'Управленческие параметры';

                fillVertical = 1.0;
                fillHorizontal = 1.0;
                ADD dt.box BEFORE d.grid.box;
                ADD sp.box BEFORE d.grid.box;
                POSITION dt.box TO THE LEFT sp.box;
                ADD treeStore.box BEFORE d.grid.box;
                POSITION treeStore.box TO THE LEFT d.grid.box;
                POSITION d.grid.box TO THE LEFT d.panel;
                d.grid.box {
                    fillHorizontal = 3;
                };
            }

            NEW itemImage {
                title = 'Изображение';
                ADD PROPERTY(imageItem);
                PROPERTY(imageItem) {
                    caption = '';
                    fillVertical = 1.0;
                    fillHorizontal = 1.0;
                }

                ADD PROPERTY(loadImageItem);
            }
       }
    }
}

toEditItem 'Ред-ть товар' (item) = ACTION FORM item OBJECTS i MODAL TOOLBAR;
inItemGroupSku(itemGroup, sku) = itemGroupSku(sku) == itemGroup;

FORM items 'Товары'
    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS i=item
    PROPERTIES idBarcodeSku(i) READONLY, nameAttributeItemGroupItem(g, i) READONLY, shortNameUOMItem(i) READONLY
    PROPERTIES(i) ADDFORM, EDITFORM, delete
    FILTERS nameAttributeItemGroupItem(g, i)
    ORDER BY nameAttributeItemGroupItem

    FILTERGROUP filters
        FILTER 'Отображать только активные товары' 'F10' isActiveItem(i) DEFAULT

    DIALOG item OBJECT i
;

DESIGN items FROM DEFAULT {

    NEW topContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            ADD treeGroup.tree {
                fillHorizontal = 0.4;
            }

            ADD i.grid {
                defaultComponent = TRUE;
            }
    }

    ADD functions.box;
}



FORM barcodeForm 'Товары по Ш-К'
    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS b=barcode
    PROPERTIES(b) READONLY idBarcode, nameSkuBarcode, shortNameUOMBarcode
    PROPERTIES(b) ADDFORM, EDITFORM, delete
    FILTERS hasParentItemGroupBarcode(g, b)
    ORDER BY nameSkuBarcode

    DIALOG barcode OBJECT b
;

DESIGN barcodeForm FROM DEFAULT {
    POSITION treeGroup.box TO THE LEFT b.box;

    treeGroup.tree {
        fillHorizontal = 0.4;
    }

    b.grid {
        defaultComponent = TRUE;
    }
}


FORM itemGroup 'Товарная группа'
    OBJECTS g=itemGroup FIXED PANEL
    PROPERTIES(g)  name, nameParentItemGroup, namePieceNumeratorItemGroup, nameWeightNumeratorItemGroup,
                   showCaptionItemGroup, showBrandItemGroup, showTypeItemGroup, showUOMItemGroup, showSortItemGroup, showPackItemGroup,
                   showSpecialtyItemGroup, showSizeItemGroup, showColorItemGroup, showTasteItemGroup, showHallmarkItemGroup,
                   showArticleItemGroup, showCoolingDegreeItemGroup, showCountryItemGroup, showFormItemItemGroup,
                   showRateWasteItemGroup, showWareItemGroup, showManufacturerItemGroup
    EDIT itemGroup OBJECT g
;

addItemGroup 'Добавить' = ACTION (itemGroup) NEWSESSION {
    ADDOBJ itemGroup;
    FOR g == addedObject() DO {
        SET parentItemGroup(g) <- itemGroup AS itemGroup;
        FORM itemGroup OBJECTS g=addedObject() MODAL;
        IF formResult() == formResult.ok THEN
            EXEC apply();
    };
} TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

FORM itemGroups 'Товарные группы'
    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g), extSID(g)
    PROPERTIES(g)       addItemGroup, EDITFORM
    ORDER BY name

    OBJECTS cg=itemGroup
    PROPERTIES(cg)   canonicalNameItemGroup, namePieceNumeratorItemGroup, nameWeightNumeratorItemGroup,
                     showCaptionItemGroup, showBrandItemGroup, showTypeItemGroup, showUOMItemGroup, showSortItemGroup, showPackItemGroup,
                     showSpecialtyItemGroup, showSizeItemGroup, showColorItemGroup, showTasteItemGroup, showHallmarkItemGroup,
                     showCoolingDegreeItemGroup, showCountryItemGroup, showFormItemItemGroup,
                     showRateWasteItemGroup, showWareItemGroup, showManufacturerItemGroup, delete

    ORDER BY canonicalNameItemGroup

    FILTERGROUP filters
        FILTER 'Все листья' 'F10' isParentLeafItemGroupItemGroup(cg, g) DEFAULT
        FILTER 'Всех потомков' 'F9' isParentItemGroupItemGroup(cg, g)
        FILTER 'Только непосредственных потомков' 'F8' parentItemGroup(cg) == g
;

DESIGN itemGroups FROM DEFAULT {

    NEW topContainer {
        childConstraints = TO THE RIGHT;
        type = SPLITH;

        ADD treeGroups.box ;

        ADD cg.box{
            fillHorizontal = 4;
        }
    }

    PROPERTY(extSID) {
        maximumCharWidth = 7;
    }

    ADD functions.box;
}

FORM itemGroupDialog 'Товарные группы'
    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES(g) READONLY name, extSID
    PROPERTIES(g) addItemGroup, EDITFORM
    ORDER BY name

    DIALOG itemGroup OBJECT g
;

// ----------------------------------- Ассортимент -------------------------------------------------------- //

CLASS assortment 'Ассортимент' : named;
TABLE assortment (assortment);
itemAssortment 'Товар включен в ассортимент' = DATA BOOLEAN (assortment, item);
infoAssortment 'Описание' = DATA STRING[100] (assortment) IN baseGroup;

FORM assortment 'Ассортимент'
OBJECTS a=assortment FIXED PANEL, i=item
PROPERTIES(a) name, infoAssortment
PROPERTIES(a, i) itemAssortment
PROPERTIES(i) nameAttributeItem
PROPERTIES(i) ADDSESSIONFORM, EDITSESSIONFORM, delete
FILTERGROUP assortment
    FILTER 'Только товары ассортимента' 'F10' itemAssortment(a, i) DEFAULT
EDIT assortment OBJECT a;

FORM assortments 'Ассортименты'
    OBJECTS a=assortment, i=item
    PROPERTIES(a) READONLY name, infoAssortment
    PROPERTIES(a) ADDFORM, EDITFORM, delete
    PROPERTIES(i) READONLY nameAttributeItem
    FILTERS itemAssortment(a, i)
;

DESIGN assortments FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;
        ADD a.box;
        ADD i.box;
    }

    ADD functions.box;
}

// ----------------------------------- Комиссии ---------------------------------------------------------- //

CLASS inventoryCommittee 'Комиссия для инвентаризации' : committee;

FORM inventoryCommittee 'Комиссия для инвентаризации'
    OBJECTS c=inventoryCommittee FIXED PANEL
    PROPERTIES(c)      name, nameChairmanCommittee

    TREE treeStore a=STRING[3], t=chainStores, st=storeType, s=store
    PROPERTIES         READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS            stringEqualsAll(a), inChainStoresStoreType (t, st), inStoreTypeStore(st, s)

    OBJECTS dep=departmentStore
    PROPERTIES(dep)    READONLY depName = name
    PROPERTIES(c, dep) inCommitteeEmployeeDivision
    FILTERS            inChainStoresStoreTypeStoreDepartment(t, st, s, dep)
    ORDER BY depName

    OBJECTS e=employee
    PROPERTIES(e)      READONLY name, userFirstName, userLastName, namePositionEmployee
    PROPERTIES(e)      ADDSESSIONFORM, EDITSESSIONFORM, delete

    PROPERTIES(c, e)   inCommitteeEmployee
    FILTERS            countDivisionEmployeeCommittee (e, c)
    FILTERGROUP filters6
        FILTER 'Показывать только членов комиссии' 'F10' inCommitteeEmployee(c, e)

    FILTERGROUP filters5
        FILTER 'Показывать отделы только для данной комиссии' 'F9' inCommitteeEmployeeDivision(c, dep)

    EDIT inventoryCommittee OBJECT c

;

DESIGN inventoryCommittee FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW OneCase BEFORE e.box {
            ADD PROPERTY (nameChairmanCommittee);
        }

        NEW caseOne BEFORE OneCase {
            childConstraints = TO THE RIGHT;
            title = 'Отделы, для которых действуют комиссии';

            ADD treeStore.tree {
                fillHorizontal = 1;
            }

            ADD dep.box {
                fillHorizontal = 2;
            }
        };
    }
}

FORM inventoryCommitteeDialog 'Комиссии для инвентаризации'
    OBJECTS ic=inventoryCommittee
    PROPERTIES(ic)      READONLY name, nameEmployeeDivisionCommittee, nameEmployeeCommittee, nameChairmanCommittee
    PROPERTIES(ic)      ADDFORM, EDITFORM

    DIALOG inventoryCommittee OBJECT ic
;

CLASS wastageCommittee 'Комиссия для списания отходов' : committee;

FORM wastageCommittee 'Комиссия для списания отходов'
    OBJECTS c=wastageCommittee FIXED PANEL
    PROPERTIES(c)      name//, nameChairmanCommittee

    TREE treeStore a=STRING[3], t=chainStores, st=storeType, s=store
    PROPERTIES         READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS            stringEqualsAll(a), inChainStoresStoreType (t, st), inStoreTypeStore(st, s)

    OBJECTS dep=departmentStore
    PROPERTIES(dep)    READONLY depName = name
    PROPERTIES(c, dep) inCommitteeEmployeeDivision, isWastageCommitteeDepartmentStore
    FILTERS            inChainStoresStoreTypeStoreDepartment(t, st, s, dep)
    ORDER BY depName


    OBJECTS e=employee
    PROPERTIES(e)      READONLY name, userFirstName, userLastName, namePositionEmployee
    PROPERTIES(e)      ADDSESSIONFORM, EDITSESSIONFORM, delete

    PROPERTIES(c, e)   inCommitteeEmployee
    FILTERS            countDivisionEmployeeCommittee (e, c)
    FILTERGROUP filters6
        FILTER 'Показывать только членов комиссии' 'F10' inCommitteeEmployee(c, e)

    FILTERGROUP filters5
        FILTER 'Показывать отделы только для данной комиссии' 'F9' inCommitteeEmployeeDivision(c, dep)

    EDIT wastageCommittee OBJECT c
;

DESIGN wastageCommittee FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

//        NEW OneCase BEFORE e.box {
//            ADD PROPERTY (nameChairmanCommittee);
//        }

        NEW caseOne BEFORE e.box {
            childConstraints = TO THE RIGHT;
            title = 'Отделы, для которых действуют комиссии';

            ADD treeStore.tree {
                fillHorizontal = 1;
            }

            ADD dep.box {
                fillHorizontal = 2;
            }
        };
    }
}

FORM wastageCommitteeDialog 'Комиссии для списания отходов'
    OBJECTS wc=wastageCommittee
    PROPERTIES(wc)      READONLY name, nameEmployeeDivisionCommittee, nameEmployeeCommittee
    PROPERTIES(wc)      ADDFORM, EDITFORM

    DIALOG wastageCommittee OBJECT wc
;

// ----------------------------------- Договор ------------------------------------------ //

FORM company 'Компания'
    OBJECTS co=company FIXED PANEL
    PROPERTIES(co) name, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity, fullNameLegalEntity, addressLegalEntity,
                   dialogAddressLegalEntity, postAddressLegalEntity, dialogPostAddressLegalEntity, managerLegalEntity,
                   dialogManagerLegalEntity, accountantLegalEntity, dialogAccountantLegalEntity, phoneLegalEntity, dialogPhoneLegalEntity,
                   UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity, emailLegalEntity, siteLegalEntity

    OBJECTS a=account
    PROPERTIES(a)  numberAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount, MFOBankAccount, noteAccount, ADDOBJ, delete
    FILTERS legalEntityAccount(a) == co

    OBJECTS s=supplier
    PROPERTIES(s)       name
    PROPERTIES(co, s)   numberContractCompanySupplier

    OBJECTS c=contract
    PROPERTIES(c)  READONLY numberContract, nameSupplierContract, nameFormContract, nameTypeContract, dateFromContract,
                   dateToContract, nameCurrencyContract, noteContract, delayContract
    PROPERTIES(c)  ADDFORM, EDITFORM, delete
    FILTERS companyContract(c) == co,
            supplierContract(c) == s

    FILTERGROUP filters
        FILTER 'Показывать только поставщиков, с которыми есть договор' 'F10' countContractCompanySupplier(co, s) DEFAULT

    EDIT company OBJECT co
;

DESIGN company FROM DEFAULT {
    main{
       preferredSize = (1024, 768);
       co.box {
            childConstraints = TO THE RIGHT;

            NEW oneCase {
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(name(co));
                ADD PROPERTY(fullNameLegalEntity(co));
                ADD PROPERTY(addressLegalEntity(co));
                ADD PROPERTY(phoneLegalEntity(co));
                ADD PROPERTY(UNPLegalEntity(co));
                ADD co.contactGroup;
            };

            NEW twoCase{
                childConstraints = TO THE BOTTOM;
                ADD co.docGroup;
            }
       }

       NEW firstCase BEFORE functions.box {
            type = TABBED;
            ADD a.box;
            NEW v.box { title = 'Поставщик-договор'; }
            ADD s.box IN v.box;
            ADD c.box IN v.box;
            POSITION s.box TO THE LEFT c.box;
       }
   }
}
FORM companies 'Компании'
    OBJECTS co=company
    PROPERTIES(co) READONLY name, fullNameLegalEntity, shortNameOwnershipLegalEntity, UNPLegalEntity, numberAccountLegalEntity, addressLegalEntity, phoneLegalEntity
    PROPERTIES(co) ADDFORM, EDITFORM, delete
;

FORM customer 'Покупатель'
    OBJECTS cu=customer FIXED PANEL
    PROPERTIES(cu)     name, fullNameLegalEntity, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity, addressLegalEntity, dialogAddressLegalEntity,
                       postAddressLegalEntity, dialogPostAddressLegalEntity, managerLegalEntity, dialogManagerLegalEntity,
                       accountantLegalEntity, dialogAccountantLegalEntity, phoneLegalEntity, dialogPhoneLegalEntity,
                       UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity, emailLegalEntity, siteLegalEntity
    OBJECTS a=account
    PROPERTIES(a)      numberAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount,
                       MFOBankAccount, noteAccount, ADDOBJ, delete

    PROPERTIES(cu, a) equalsLegalEntityAccount

    FILTERS legalEntityAccount(a) == cu

    EDIT customer OBJECT cu

;

CLASS customer 'Покупатель' : legalEntity;
TABLE customer (customer);

FORM customers 'Покупатели'
    OBJECTS cu=customer
    PROPERTIES(cu)   READONLY name, fullNameLegalEntity, UNPLegalEntity, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity,
                              addressLegalEntity
    PROPERTIES(cu)   ADDFORM, EDITFORM, delete
;

//--------------------------------------Дисконтные карточки------------------------------------------------------------------//
CLASS discountCard 'Дисконтная карта';
TABLE discountCard (discountCard);

numberDiscountCard 'Номер дисконтной карты' (discountCard) = //DATA INTEGER (discountCard);
        PARTITION SUM 1 IF discountCard IS discountCard
        ORDER discountCard IN recognizeGroup MINCHARWIDTH 3 PREFCHARWIDTH 3;

customerDiscountCard (discountCard) = DATA customer(discountCard);
nameCustomerDiscountCard 'Держатель дисконтной карты' (discountCard) = name(customerDiscountCard(discountCard));

FORM discountCard 'Дисконтная карта'
    OBJECTS d=discountCard FIXED PANEL
    PROPERTIES(d) numberDiscountCard, nameCustomerDiscountCard

    EDIT discountCard OBJECT d
;

FORM discountCards 'Дисконтные карты'
    OBJECTS d=discountCard
    PROPERTIES(d) READONLY numberDiscountCard, nameCustomerDiscountCard
    PROPERTIES(d) ADDFORM, EDITFORM, delete
;

//---------------------------- Модели оборудования ----------------------------------------//
CLASS ABSTRACT model 'Модель' : named;
TABLE model (model);

CLASS cashRegisterModel 'Модель касс' : model;
CLASS scalesModel 'Модель весов' : model;
CLASS checkModel 'Модель прайс чекеров' : model;
CLASS terminalModel 'Модель ТСД' : model;

CLASS frontOffice 'Фронт офис';
TABLE frontOffice (frontOffice);

nameFrontOffice 'Версия фронт офиса на кассе' = DATA STRING[100] (frontOffice) IN baseGroup;

noteModel 'Примечание' = DATA STRING[200] (model) IN baseGroup;
useModel 'Модель используется' = DATA BOOLEAN (model) IN baseGroup;
lettersModel 'Преобразовать наименование товара В ЗАГЛАВНЫЕ БУКВЫ' = DATA BOOLEAN (model) IN baseGroup;
handlerModel 'Обработчик' = DATA STRING[200] (model) IN baseGroup;


frontOfficeCashRegisterModel 'Модель касс (ИД)' = DATA frontOffice (cashRegisterModel) IN idGroup;
nameFrontOfficeCashRegisterModel 'Версия фронт офиса на кассе' (cashRegisterModel) = nameFrontOffice(frontOfficeCashRegisterModel(cashRegisterModel)) IN baseGroup;
dateToCashRegisterModel 'Дата, до которой модель внесена в реестр' = DATA DATE (cashRegisterModel) IN baseGroup;
maxProductModel 'MAX допустимое колич.товаров' = DATA INTEGER (model) IN baseGroup;

CLASS flash 'Прошивка';
TABLE flash (flash);

nameFlash 'Модель весов/версия прошивки' = DATA STRING[100] (flash) IN baseGroup;

flashScalesModel 'Прошивка (ИД)' = DATA flash (scalesModel) IN idGroup;
nameFlashScalesModel 'Модель весов/версия прошивки' = nameFlash(flashScalesModel(scalesModel)) IN baseGroup;
maxTextScalesModel 'MAX допустимое колич.дополнительных текстов' = DATA INTEGER (scalesModel) IN baseGroup;
folderScalesModel 'Папка на сервере весов с драйвером весов' = DATA STRING[200] (scalesModel) IN baseGroup;
compositionScalesModel 'Число знаков в доп.тексте(составе товара)' = DATA INTEGER (scalesModel) IN baseGroup;
nameToScalesModel (scalesModel) = GROUP UNIQUE scalesModel BY name (scalesModel) WHERE scalesModel IS scalesModel;

CLASS modelCheck 'Модель чекера';
TABLE modelCheck (modelCheck);

nameModelCheck 'Модель прайс чекера' = DATA STRING[100] (modelCheck) IN baseGroup;

modelCheckModel 'Модель (ИД)' = DATA modelCheck (checkModel) IN idGroup;
nameModelCheckModel 'Модель прайс чекера' = nameModelCheck(modelCheckModel(checkModel)) IN baseGroup;

FORM checkModels 'Модели прайс чекеров'
OBJECTS m=checkModel
PROPERTIES(m) READONLY objectClassName, name, useModel, maxProductModel, noteModel, handlerModel
PROPERTIES(m) ADDFORM, EDITFORM, delete;

FORM scalesModels 'Модели весов'
OBJECTS m=scalesModel
PROPERTIES(m) READONLY objectClassName, name, useModel, maxProductModel, noteModel, handlerModel
PROPERTIES(m) ADDFORM, EDITFORM, delete;

FORM cashRegistersModels 'Модели касс'
OBJECTS m=cashRegisterModel
PROPERTIES(m) READONLY objectClassName, name, useModel, maxProductModel, noteModel, handlerModel
PROPERTIES(m) ADDFORM, EDITFORM, delete;

FORM terminalModels 'Модели ТСД'
OBJECTS m=terminalModel
PROPERTIES(m) READONLY objectClassName, name, useModel, maxProductModel, noteModel, handlerModel
PROPERTIES(m) ADDFORM, EDITFORM, delete;

FORM checkModel 'Модель прайс чекера'
OBJECTS ch=checkModel FIXED PANEL
PROPERTIES(ch) name, nameModelCheckModel, noteModel, handlerModel, useModel, maxProductModel
EDIT checkModel OBJECT ch;

FORM cashRegisterModel 'Модель касс'
OBJECTS c=cashRegisterModel FIXED PANEL
PROPERTIES(c) name, nameFrontOfficeCashRegisterModel, noteModel, handlerModel, useModel, dateToCashRegisterModel, lettersModel
EDIT cashRegisterModel OBJECT c;

FORM scalesModel 'Модель весов'
OBJECTS s=scalesModel FIXED PANEL
PROPERTIES(s) name, nameFlashScalesModel, noteModel, handlerModel, useModel, maxProductModel, maxTextScalesModel,
              folderScalesModel, lettersModel, compositionScalesModel
EDIT scalesModel OBJECT s;

FORM terminalModel 'Модель ТСД'
OBJECTS t=terminalModel FIXED PANEL
PROPERTIES(t) name, noteModel, handlerModel, useModel, maxProductModel
EDIT terminalModel OBJECT t;

//---------------------------- Сервера управления оборудования ----------------------------//
CLASS equipmentServer 'Сервер оборудования' : named;
TABLE equipmentServer (equipmentServer);
sidEquipmentServer 'Идентификатор' = DATA STRING[20] (equipmentServer) IN baseGroup;
sidToEquipmentServer(equipmentServer) = GROUP UNIQUE equipmentServer BY sidEquipmentServer (equipmentServer) WHERE equipmentServer IS equipmentServer;
delayEquipmentServer 'Период обновления (в миллисекундах)' = DATA INTEGER (equipmentServer) IN baseGroup;

//---------------------------- Ошибки сервера оборудования ----------------------------//
CLASS equipmentServerError 'Ошибки';
TABLE equipmentServerError (equipmentServerError);

dataEquipmentServerError 'Сообщение об ошибке' = DATA STRING[200] (equipmentServerError) IN baseGroup;
erTraceEquipmentServerError 'След ошибки' = DATA TEXT (equipmentServerError) IN baseGroup;
dateEquipmentServerError 'Время возникновения' = DATA DATETIME (equipmentServerError) IN baseGroup;
equipmentServerEquipmentServerError 'Сервер оборудования (ID)' = DATA equipmentServer(equipmentServerError) IN baseGroup;

//---------------------------- Лог сервера оборудования ----------------------------//
CLASS equipmentServerLog 'Лог';
TABLE equipmentServerLog (equipmentServerLog);

dataEquipmentServerLog 'Сообщение' = DATA TEXT (equipmentServerLog) IN baseGroup;
dateEquipmentServerLog 'Время' = DATA DATETIME (equipmentServerLog) IN baseGroup;
equipmentServerEquipmentServerLog 'Сервер оборудования (ID)' = DATA equipmentServer(equipmentServerLog) IN baseGroup;


//---------------------------- группы оборудования ----------------------------------------//

CLASS ABSTRACT groupMachinery 'Группы оборудования';
TABLE groupMachinery (groupMachinery);

CLASS groupScales 'Группы весов' : groupMachinery;
CLASS groupCashRegister 'Группы касс' : groupMachinery;
CLASS groupCheck 'Группы прайс чекеров' : groupMachinery;
CLASS groupTerminal 'Группы ТСД' : groupMachinery;

CLASS groupTerminalDocumentType 'Группа типов документов';

nameGroupTerminalDocumentType 'Наименование группы' = DATA STRING[200] (groupTerminalDocumentType) IN baseGroup MINCHARWIDTH 10 PREFCHARWIDTH 20;
groupTerminalDocumentTypeGroupTerminal 'Группа типов документов (ИД)' = DATA groupTerminalDocumentType (groupTerminal);
nameGroupTerminalDocumentTypeGroupTerminal 'Группа типов документов' (groupTerminal) = nameGroupTerminalDocumentType(groupTerminalDocumentTypeGroupTerminal(groupTerminal));

nameGroupMachinery 'Наименование группы' = DATA STRING[200] (groupMachinery) IN baseGroup MINCHARWIDTH 10 PREFCHARWIDTH 20;
transferGroupMachinery 'Передать товар на группу оборудования' = DATA BOOLEAN (groupMachinery) IN baseGroup;
roundSalesGroupMachinery 'Округление цен до' = DATA INTEGER (groupMachinery) IN baseGroup;

cellGroupScales 'Помещать на ценники номера ячеек с этой группы' = DATA BOOLEAN (groupScales) IN baseGroup;
sidSectionGroupScales 'Код отдела в Set Retail' = DATA INTEGER (groupScales) IN baseGroup;
directoryGroupScales 'Директория сервера Set Retail' = DATA STRING[200] (groupScales) IN baseGroup;
pieceItemCodeGroupScales 'Код для штучных товаров' = DATA STRING[2] (groupScales) IN baseGroup;
weightItemCodeGroupScales 'Код для весовых товаров' = DATA STRING[2] (groupScales) IN baseGroup;

departmentStoreGroupMachinery 'Подразделение (ИД)' = DATA departmentStore (groupMachinery);
nameDepartmentStoreGroupMachinery 'Подразделение' (groupMachinery) = name(departmentStoreGroupMachinery(groupMachinery)) IN baseGroup;

equipmentServerGroupMachinery 'Сервер оборудования (ИД)' = DATA equipmentServer (groupMachinery);
nameEquipmentServerGroupMachinery 'Сервер оборудования' (groupMachinery) = name(equipmentServerGroupMachinery(groupMachinery));
sidEquipmentServerGroupMachinery 'Сервер оборудования' (groupMachinery) = sidEquipmentServer(equipmentServerGroupMachinery(groupMachinery));

//---------------------------- типы оборудования  ----------------------------------------//
CLASS ABSTRACT machinery 'Оборудование';
TABLE machinery(machinery);

CLASS cashRegister 'Касса' : machinery, computer;
CLASS scales 'Весы' : machinery;
CLASS check 'Прайс чекер' : machinery;
CLASS terminal 'ТСД' : machinery;

isGroupCashRegister (machinery) = machinery IS groupCashRegister;
groupCashRegisterCashRegister 'Группа (ИД)' = DATA groupCashRegister (cashRegister) IN idGroup;
isGroupCashRegisterCashRegister (groupCashRegister, cashRegister) = groupCashRegisterCashRegister(cashRegister) == groupCashRegister;

isGroupScales (machinery) = machinery IS groupScales;
groupScalesScales 'Группа (ИД)' = DATA groupScales (scales) IN idGroup;
isGroupScalesScales (groupScales, scales) = groupScalesScales(scales) == groupScales;

isGroupCheck (machinery) = machinery IS groupCheck;
groupCheckCheck 'Группа (ИД)' = DATA groupCheck (check) IN idGroup;
isGroupCheckCheck (groupCheck, check) = groupCheckCheck(check) == groupCheck;

isTerminal (machinery) = machinery IS terminal;
groupTerminalTerminal 'Группа (ИД)' = DATA groupTerminal (terminal) IN idGroup;
isGroupTerminalTerminal (groupTerminal, terminal) = groupTerminalTerminal(terminal) == groupTerminal;

// todo : persistent почему-то не работает
groupMachineryMachinery 'Группа (ИД)' (machinery) = UNION EXCLUSIVE groupCashRegisterCashRegister(machinery),
                                                                   groupScalesScales(machinery),
                                                                   groupCheckCheck(machinery),
                                                                   groupTerminalTerminal(machinery);
nameGroupMachineryMachinery 'Группа' (machinery) = nameGroupMachinery(groupMachineryMachinery(machinery));

departmentStoreMachinery(cashRegister) = departmentStoreGroupMachinery(groupMachineryMachinery(cashRegister));
nameDepartmentStoreMachinery 'Наименование отдела' (cashRegister) = name(departmentStoreMachinery(cashRegister)) IN baseGroup;
nameStoreDepartmentStoreMachinery 'Наименование магазина' (cashRegister) = name(storeDepartmentStore(departmentStoreMachinery(cashRegister))) IN baseGroup;

nameGroupMachineryCashRegister 'Наименование группы' (cashRegister) = nameGroupMachinery(groupCashRegisterCashRegister(cashRegister)) IN baseGroup;
nameGroupMachineryScales 'Наименование группы' (scales) = nameGroupMachinery(groupScalesScales(scales)) IN baseGroup;
nameGroupMachineryCheck 'Наименование группы' (check) = nameGroupMachinery(groupCheckCheck(check)) IN baseGroup;
nameGroupMachineryTerminal 'Наименование группы' (terminal) = nameGroupMachinery(groupTerminalTerminal(terminal)) IN baseGroup;

nppMachinery 'Порядковый номер' = DATA INTEGER (machinery) IN baseGroup;
descriptionMachinery 'Описание' = DATA STRING[200] (machinery) IN baseGroup;
portMachinery 'Адрес/порт' = DATA STRING[100] (machinery) IN baseGroup;
useMachinery 'Оборудование используется' = DATA BOOLEAN (machinery) IN baseGroup;

numberCashRegister 'Регистрационный номер кассы' = DATA STRING[100] (cashRegister) IN baseGroup;
numberCashRegisterToCashRegister (cashRegister) = GROUP UNIQUE cashRegister BY numberCashRegister (cashRegister) WHERE cashRegister IS cashRegister;

cashRegisterModelCashRegister 'Модель ИД' = DATA cashRegisterModel (cashRegister) IN idGroup;
directoryCashRegister 'Директория обмена с кассой' = DATA STRING[100] (cashRegister) IN baseGroup;
nameCashRegisterModelCashRegister 'Модель кассы' (cashRegister) = name(cashRegisterModelCashRegister(cashRegister)) IN baseGroup;
handlerCashRegisterModelCashRegister 'Обработчик кассы' (cashRegister) = handlerModel(cashRegisterModelCashRegister(cashRegister)) IN baseGroup;
dateCashRegister 'Дата фискализации кассового аппарата' = DATA DATE (cashRegister) IN baseGroup;

terminalModelTerminal 'Модель ИД' = DATA terminalModel (terminal) IN idGroup;
directoryTerminal 'Директория обмена с ТСД' = DATA STRING[100] (terminal) IN baseGroup;
nameTerminalModelTerminal 'Модель ТСД' (terminal) = name(terminalModelTerminal(terminal)) IN baseGroup;
handlerTerminalModelTerminal 'Обработчик ТСД' (terminal) = handlerModel(terminalModelTerminal(terminal)) IN baseGroup;

CLASS STATIC feature 'Свойство для оборудования'
{
    never 'HET,(пример: для годен это значит - печатаем в поле этикетки "Годен до")',
    always 'ДА для ВСЕХ товаров поместить в состав',
    sometimes 'ДА (для товаров с признаком [Контролировать срок годности по товару?]'
};

scalesModelScales 'Модель ИД' = DATA scalesModel (scales) IN idGroup;
numberScales 'Заводской(серийный) номер ' = DATA STRING[100] (scales) IN baseGroup;
nameScalesModelScales 'Модель весов' (scales) = name(scalesModelScales(scales)) IN baseGroup;
handlerScalesModelScales 'Обработчик весов' (scales) = handlerModel(scalesModelScales(scales)) IN baseGroup;
dateScales 'Дата следующей обязательной поверки' = DATA DATE (scales) IN baseGroup;
passScales 'свойство ИД' = DATA feature (scales) IN idGroup;
namePassScales 'Свойство товара [Годен до] помещать в ингредиенты' (scales) = name(UNION OVERRIDE feature.always IF scales IS scales,
                                                                                                  passScales(scales)) IN baseGroup;
manufactureScales 'свойство ИД' = DATA feature (scales) IN idGroup;
nameManufactureScales 'Свойство товара [Дата изг.] помещать в ингредиенты' (scales) = name(UNION OVERRIDE feature.always IF scales IS scales,
                                                                                                  manufactureScales(scales)) IN baseGroup;
productionScales 'свойство ИД' = DATA feature (scales) IN idGroup;
nameProductionScales 'Св-во товара[Срок годн.в часах] поместить в ингр-ты' (scales) = name(UNION OVERRIDE feature.always IF scales IS scales,
                                                                                                  productionScales(scales)) IN baseGroup;
sidScales 'ID весов для Set Retail' = DATA INTEGER (scales) IN baseGroup;

// фильтрация по группам товаров

filterItemsGroupMachinery 'Фильтровать по группам товаров' = DATA BOOLEAN (groupMachinery);

inGroupMachineryItemGroup 'Вкл' = DATA BOOLEAN (groupMachinery, itemGroup);

CLASS cellScales 'Ячейка весов';
groupScalesCellScales 'Группа весов ИД' = DATA groupScales (cellScales);
compositionCellScales 'Ячейка' = DATA TEXT (cellScales);
numberCellScales 'Номер' = PARTITION SUM 1 IF c IS cellScales BY groupScalesCellScales (c) ORDER c;
groupScalesCompositionToCellScales (groupScales, composition) = GROUP UNIQUE cellScales BY groupScalesCellScales (cellScales), compositionCellScales (cellScales) WHERE cellScales IS cellScales;
isGroupScalesCellScales (groupScales, cellScales) = groupScalesCellScales(cellScales) == groupScales;
//---------------------------- типы документов ----------------------------------------//

CLASS terminalDocumentType 'Тип документов';

nameTerminalDocumentType 'Название' = DATA STRING[200] (terminalDocumentType) IN baseGroup;
idTerminalDocumentType 'Код' = DATA STRING[10] (terminalDocumentType) IN baseGroup;
idToTerminalDocumentType (terminalDocumentType) = GROUP UNIQUE terminalDocumentType BY idTerminalDocumentType (terminalDocumentType) WHERE terminalDocumentType IS terminalDocumentType;

groupTerminalDocumentTypeTerminalDocumentType 'Группа типов документов (ИД)' = DATA groupTerminalDocumentType (terminalDocumentType);
nameGroupTerminalDocumentTypeTerminalDocumentType 'Группа типов документов' (terminalDocumentType) = nameGroupTerminalDocumentType(groupTerminalDocumentTypeTerminalDocumentType(terminalDocumentType));
isGroupTerminalDocumentTypeTerminalDocumentType (groupTerminalDocumentType, terminalDocumentType) = groupTerminalDocumentTypeTerminalDocumentType(terminalDocumentType) == groupTerminalDocumentType;

CLASS STATIC terminalHandbookType 'Вид справочника ТСД'
{
supplier 'Поставщик',
customer 'Покупатель'
};

idTerminalHandbookType 'Код' = DATA STRING[10] (terminalHandbookType) IN baseGroup;
idToTerminalHandbookType (terminalHandbookType) = GROUP UNIQUE terminalHandbookType BY idTerminalHandbookType (terminalHandbookType) WHERE terminalHandbookType IS terminalHandbookType;

terminalHandbookType1TerminalDocumentType = DATA terminalHandbookType (terminalDocumentType);
terminalHandbookType2TerminalDocumentType = DATA terminalHandbookType (terminalDocumentType);
idTerminalHandbookType1TerminalDocumentType 'Код' (terminalDocumentType)  = idTerminalHandbookType (terminalHandbookType1TerminalDocumentType(terminalDocumentType));
nameTerminalHandbookType1TerminalDocumentType 'Имя' (terminalDocumentType)  = name (terminalHandbookType1TerminalDocumentType(terminalDocumentType));
idTerminalHandbookType2TerminalDocumentType 'Код' (terminalDocumentType)  = idTerminalHandbookType (terminalHandbookType2TerminalDocumentType(terminalDocumentType));
nameTerminalHandbookType2TerminalDocumentType 'Имя' (terminalDocumentType)  = name (terminalHandbookType2TerminalDocumentType(terminalDocumentType));

nameInHandbook1TerminalDocumentType 'Наименование в справочнике 1' = DATA STRING[200] (terminalDocumentType) IN baseGroup;
nameInHandbook1TerminalDocumentType(terminalDocumentType) <- nameTerminalHandbookType1TerminalDocumentType(terminalDocumentType) WHEN CHANGED(terminalHandbookType1TerminalDocumentType(terminalDocumentType));
nameInHandbook2TerminalDocumentType 'Наименование в справочнике 2' = DATA STRING[200] (terminalDocumentType) IN baseGroup;
nameInHandbook2TerminalDocumentType(terminalDocumentType) <- nameTerminalHandbookType2TerminalDocumentType(terminalDocumentType) WHEN CHANGED(terminalHandbookType2TerminalDocumentType(terminalDocumentType));

CLASS terminalDocument 'Документ ТСД';

idTerminalDocument 'Номер' = DATA INTEGER (terminalDocument) IN baseGroup;
titleTerminalDocument 'Имя' = DATA STRING[100] (terminalDocument) IN baseGroup;
quantityTerminalDocument 'Количество' = DATA NUMERIC[14,3] (terminalDocument) IN baseGroup;
idTerminalHandbookType1TerminalDocument 'Код в справочнике 1' = DATA INTEGER (terminalDocument) IN baseGroup;
idTerminalHandbookType2TerminalDocument 'Код в справочнике 2' = DATA INTEGER (terminalDocument) IN baseGroup;

terminalDocumentTypeTerminalDocument = DATA terminalDocumentType(terminalDocument);
nameTerminalDocumentTypeTerminalDocument 'Тип документа' (terminalDocument) = nameTerminalDocumentType (terminalDocumentTypeTerminalDocument (terminalDocument));
idTerminalDocumentTypeTerminalDocument (terminalDocument) = idTerminalDocumentType (terminalDocumentTypeTerminalDocument (terminalDocument));
usedTerminalDocument 'Использован' (terminalDocument) = DATA BOOLEAN (terminalDocument) IN baseGroup;
noUsedTerminalDocument 'Неиспользован' (terminalDocument) = terminalDocument IS terminalDocument AND NOT usedTerminalDocument(terminalDocument);

idToTerminalDocument (terminalDocument) = GROUP UNIQUE terminalDocument BY idTerminalDocument (terminalDocument) WHERE terminalDocument IS terminalDocument;

CLASS terminalDocumentDetail 'Строка документа ТСД';
terminalDocumentTerminalDocumentDetail = DATA terminalDocument(terminalDocumentDetail);
numberTerminalDocumentDetail 'Номер' = DATA INTEGER (terminalDocumentDetail) IN baseGroup;
barcodeTerminalDocumentDetail 'Штрихкод' = DATA STRING[14] (terminalDocumentDetail) IN baseGroup;
quantityTerminalDocumentDetail 'Количество' = DATA NUMERIC[14,3] (terminalDocumentDetail) IN baseGroup;
priceTerminalDocumentDetail 'Цена' = DATA NUMERIC[14,3] (terminalDocumentDetail) IN baseGroup;
sumTerminalDocumentDetail 'Сумма' = DATA NUMERIC[14,3] (terminalDocumentDetail) IN baseGroup;
nameTerminalDocumentDetail 'Наименование' = DATA STRING[200] (terminalDocumentDetail) IN baseGroup;
isNewTerminalDocumentDetail 'Новый товар' = DATA BOOLEAN (terminalDocumentDetail) IN baseGroup;

idTerminalDocumentNumberToTerminalDocumentDetail (terminalDocumentDetail, terminalDocument) = GROUP UNIQUE terminalDocumentDetail BY idTerminalDocument (terminalDocumentTerminalDocumentDetail(terminalDocumentDetail)), numberTerminalDocumentDetail(terminalDocumentDetail) WHERE terminalDocumentDetail IS terminalDocumentDetail;

FORM filterItemsGroupMachinery 'Фильтрация по группам товаров'
    OBJECTS gm = groupMachinery FIXED PANEL
    PROPERTIES(gm) READONLY nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery

    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS cg=itemGroup
    PROPERTIES(cg) READONLY canonicalNameItemGroup
    PROPERTIES(gm, cg)      inGroupMachineryItemGroup
    ORDER BY canonicalNameItemGroup
    FILTERS isParentLeafItemGroupItemGroup(cg, g)

    FILTERGROUP filters
        FILTER 'Только выбранные группы' 'F10' inGroupMachineryItemGroup(gm, cg)
;

DESIGN filterItemsGroupMachinery FROM DEFAULT {
    POSITION treeGroups.box TO THE LEFT cg.box;

    treeGroups.tree {
        fillHorizontal = 0.5;
    }
}

showFilterItemsGroupMachinery 'Выбрать группы' (groupMachinery) = ACTION FORM filterItemsGroupMachinery OBJECTS gm MODAL;

FORM cashRegister 'Касса'
    OBJECTS c=cashRegister FIXED PANEL
    PROPERTIES(c) nameGroupMachineryMachinery, nppMachinery, descriptionMachinery, portMachinery, useMachinery, numberCashRegister, directoryCashRegister, nameCashRegisterModelCashRegister,
                  dateCashRegister
    EDIT cashRegister OBJECT c
;

FORM scales 'Весы'
    OBJECTS s=scales FIXED PANEL
    PROPERTIES(s) nameGroupMachineryMachinery, nppMachinery, descriptionMachinery, portMachinery, useMachinery, numberScales, nameScalesModelScales,
                  dateScales, namePassScales, nameManufactureScales, nameProductionScales, sidScales
    EDIT scales OBJECT s
;

FORM check 'Прайс чекер'
    OBJECTS ch=check FIXED PANEL
    PROPERTIES(ch) nameGroupMachineryMachinery, nppMachinery, descriptionMachinery, portMachinery, useMachinery
    EDIT check OBJECT ch
;

FORM terminal 'ТСД'
    OBJECTS t=terminal FIXED PANEL
    PROPERTIES(t) nameGroupMachineryMachinery, nppMachinery, descriptionMachinery, portMachinery, useMachinery, directoryTerminal, nameTerminalModelTerminal
    EDIT terminal OBJECT t
;

FORM groupScales 'Группа весов'
    OBJECTS grs=groupScales FIXED PANEL
    PROPERTIES(grs) nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery,
                    roundSalesGroupMachinery,
                    transferGroupMachinery, cellGroupScales, sidSectionGroupScales, directoryGroupScales,
                    pieceItemCodeGroupScales, weightItemCodeGroupScales,
                    filterItemsGroupMachinery, showFilterItemsGroupMachinery SHOWIF filterItemsGroupMachinery(grs)

    OBJECTS s=scales
    PROPERTIES(s)   nameGroupMachineryMachinery, nppMachinery, descriptionMachinery, portMachinery, useMachinery, numberScales, nameScalesModelScales,
                    dateScales, namePassScales, nameManufactureScales, nameProductionScales, sidScales, ADDOBJ, delete
    FILTERGROUP filters1
        FILTER 'Показывать только для данной группы' 'F10' isGroupScalesScales(grs, s) DEFAULT
    EDIT groupScales OBJECT grs
;

FORM groupsScales 'Группы весов'
    OBJECTS grs=groupScales
    PROPERTIES(grs) READONLY nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery, roundSalesGroupMachinery,
                         transferGroupMachinery, filterItemsGroupMachinery, cellGroupScales, sidSectionGroupScales, directoryGroupScales,
                         pieceItemCodeGroupScales, weightItemCodeGroupScales
    PROPERTIES(grs) ADDFORM, EDITFORM, delete

    OBJECTS s=scales
    PROPERTIES(s)   READONLY nppMachinery, descriptionMachinery, portMachinery, useMachinery, numberScales, nameScalesModelScales,
                             dateScales, namePassScales, nameManufactureScales, nameProductionScales, sidScales
    FILTERS isGroupScalesScales(grs, s)
;

DESIGN groupsScales FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD grs.box;
        ADD s.box;
    }
    ADD functions.box;
}

FORM groupCashRegister 'Группа касс'

    OBJECTS grc=groupCashRegister FIXED PANEL
    PROPERTIES(grc) nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery,
                    roundSalesGroupMachinery, transferGroupMachinery,
                    filterItemsGroupMachinery, showFilterItemsGroupMachinery SHOWIF filterItemsGroupMachinery(grc)

    OBJECTS c=cashRegister
    PROPERTIES(c)   nameGroupMachineryMachinery, nppMachinery, descriptionMachinery, portMachinery, useMachinery, numberCashRegister, directoryCashRegister, nameCashRegisterModelCashRegister,
                    dateCashRegister, ADDOBJ, delete

    FILTERGROUP filters2
        FILTER 'Показывать только для данной группы' 'F10' isGroupCashRegisterCashRegister(grc, c) DEFAULT

    EDIT groupCashRegister OBJECT grc
;


FORM groupsCashRegister 'Группы касс'
    OBJECTS grc=groupCashRegister, c=cashRegister
    PROPERTIES(grc)  READONLY nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery,
                     roundSalesGroupMachinery, transferGroupMachinery, filterItemsGroupMachinery
    PROPERTIES(grc)  ADDFORM, EDITFORM, delete

    PROPERTIES(c) READONLY nppMachinery, descriptionMachinery, portMachinery,
                           useMachinery, numberCashRegister, directoryCashRegister, nameCashRegisterModelCashRegister,
                           dateCashRegister
    FILTERS isGroupCashRegisterCashRegister(grc, c)
;

DESIGN groupsCashRegister FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD grc.box;
        ADD c.box;
    }
    ADD functions.box;
}

FORM groupCheck 'Группа прайс чекеров'
    OBJECTS grch=groupCheck FIXED PANEL
    PROPERTIES(grch) nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery,
                     roundSalesGroupMachinery, transferGroupMachinery,
                     filterItemsGroupMachinery, showFilterItemsGroupMachinery SHOWIF filterItemsGroupMachinery(grch)

    OBJECTS ch=check
    PROPERTIES(ch)  nameGroupMachineryMachinery, nppMachinery, descriptionMachinery, portMachinery, useMachinery, ADDOBJ, delete
    FILTERGROUP filters3
        FILTER 'Показывать только для данной группы' 'F10' isGroupCheckCheck(grch, ch) DEFAULT
    EDIT groupCheck OBJECT grch
;

FORM groupsCheck 'Группы прайс чекеров'
    OBJECTS grch=groupCheck
    PROPERTIES(grch) READONLY nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery,
                              roundSalesGroupMachinery, transferGroupMachinery, filterItemsGroupMachinery
    PROPERTIES(grch)          ADDFORM, EDITFORM, delete

    OBJECTS ch=check
    PROPERTIES(ch)   READONLY nppMachinery, descriptionMachinery, nameModelCheckModel, portMachinery, useMachinery
    FILTERS isGroupCheckCheck(grch, ch)
;

DESIGN groupsCheck FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD grch.box;
        ADD ch.box;
    }
    ADD functions.box;
}

FORM groupTerminal 'Группа ТСД'

    OBJECTS grt=groupTerminal FIXED PANEL
    PROPERTIES(grt) nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery,
                    roundSalesGroupMachinery, transferGroupMachinery, nameGroupTerminalDocumentTypeGroupTerminal,
                    filterItemsGroupMachinery, showFilterItemsGroupMachinery SHOWIF filterItemsGroupMachinery(grt)

    OBJECTS t=terminal
    PROPERTIES(t)   nameGroupMachineryMachinery, nppMachinery, descriptionMachinery, portMachinery, useMachinery, directoryTerminal, nameTerminalModelTerminal,
                    ADDOBJ, delete

    FILTERGROUP filters3
        FILTER 'Показывать только для данной группы' 'F10' isGroupTerminalTerminal(grt, t) DEFAULT

    EDIT groupTerminal OBJECT grt
;


FORM groupsTerminal 'Группы ТСД'
    OBJECTS grt=groupTerminal, t=terminal
    PROPERTIES(grt)  READONLY nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery,
                     nameGroupTerminalDocumentTypeGroupTerminal,
                     roundSalesGroupMachinery, transferGroupMachinery, filterItemsGroupMachinery
    PROPERTIES(grt)  ADDFORM, EDITFORM, delete

    PROPERTIES(t) READONLY nppMachinery, descriptionMachinery, portMachinery,
                           useMachinery, directoryTerminal, nameTerminalModelTerminal,
                           nameInHandbook1TerminalDocumentType, idTerminalHandbookType1TerminalDocumentType,
                           nameInHandbook2TerminalDocumentType, idTerminalHandbookType2TerminalDocumentType
    FILTERS isGroupTerminalTerminal(grt, t)
;

DESIGN groupsTerminal FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD grt.box;
        ADD t.box;
    }
    ADD functions.box;
}

FORM groupTerminalDocumentType 'Группа типов документов'

    OBJECTS gtdt=groupTerminalDocumentType FIXED PANEL
    PROPERTIES(gtdt) nameGroupTerminalDocumentType

    OBJECTS tdt=terminalDocumentType
    PROPERTIES(tdt)   idTerminalDocumentType, nameTerminalDocumentType, nameGroupTerminalDocumentTypeTerminalDocumentType,
                      nameInHandbook1TerminalDocumentType, idTerminalHandbookType1TerminalDocumentType,
                      nameInHandbook2TerminalDocumentType, idTerminalHandbookType2TerminalDocumentType,
                      ADDOBJ, delete

    FILTERGROUP filters3
        FILTER 'Показывать только для данной группы' 'F10' isGroupTerminalDocumentTypeTerminalDocumentType(gtdt, tdt) DEFAULT

    EDIT groupTerminalDocumentType OBJECT gtdt
;

FORM groupsTerminalDocumentType 'Группы типов документов'
    OBJECTS gtdt=groupTerminalDocumentType, tdt=terminalDocumentType
    PROPERTIES(gtdt) nameGroupTerminalDocumentType
    PROPERTIES(gtdt)  ADDFORM, EDITFORM, delete

    PROPERTIES(tdt) READONLY idTerminalDocumentType, nameTerminalDocumentType,
    nameInHandbook1TerminalDocumentType, idTerminalHandbookType1TerminalDocumentType,
    nameInHandbook2TerminalDocumentType, idTerminalHandbookType2TerminalDocumentType

    FILTERS groupTerminalDocumentTypeTerminalDocumentType (tdt) == gtdt
;

DESIGN groupsTerminalDocumentType FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD gtdt.box;
        ADD tdt.box;
    }
    ADD functions.box;
}

FORM handbooksTerminalDocumentType 'Виды справочников ТСД'
    OBJECTS h=terminalHandbookType
    PROPERTIES(h)  name, idTerminalHandbookType
    PROPERTIES(h)  ADDFORM, EDITFORM, delete
;

FORM equipmentServer 'Серверы оборудования'
    OBJECTS es=equipmentServer, e = equipmentServerError, l = equipmentServerLog
    PROPERTIES(es)  READONLY sidEquipmentServer
    PROPERTIES(es)  delayEquipmentServer, ADDFORM, EDITFORM, delete

    PROPERTIES(e) READONLY dataEquipmentServerError, dateEquipmentServerError
    PROPERTIES(e) delete
    PROPERTIES(e) FORCE PANEL erTraceEquipmentServerError

    PROPERTIES(l) READONLY dataEquipmentServerLog, dateEquipmentServerLog
    PROPERTIES(l) delete

    FILTERS equipmentServerEquipmentServerError (e) == es
    FILTERS equipmentServerEquipmentServerLog (l) == es

;

DESIGN equipmentServer FROM DEFAULT {

    main {

        NEW topContainer {

            type = SPLITV;
            childConstraints =  TO THE BOTTOM;

            ADD es.box;

            NEW specContainer {
                type = TABBED;

                NEW errorContainer {
                title = 'Ошибки';
                ADD e.box;
                PROPERTY(erTraceEquipmentServerError(e)) {
                fillHorizontal = 1;
                panelLabelAbove = TRUE;
                }
                }
                ADD l.box;
            }
        }

        ADD functions.box;
    }
}

//---------------------------- Рецепты блюд ----------------------------------------//
CLASS recipe 'Рецепт' : named;
TABLE recipe (recipe);

CLASS recipeDetail 'Сырье рецепта';
TABLE recipeDetail (recipeDetail);

dishRecipe  'Блюдо (ИД)' = DATA item (recipe) IN idGroup;
CONSTRAINT dishRecipe (recipe) AND NOT isManufacturedItem(dishRecipe(recipe)) CHECKED MESSAGE 'Блюдо должно производиться';
captionDishRecipe 'Блюдо' = captionItem (dishRecipe(recipe)) IN baseGroup;

beginDateRecipe 'Используется с' = DATA DATE (recipe) IN baseGroup;
isUsedRecipe 'Используется' = DATA BOOLEAN (recipe) IN baseGroup;
numberRecipe 'Номер рецептуры (из сборника и пр.)' = DATA STRING[40] (recipe) IN baseGroup;
notesRecipe 'Технология приготовления' = DATA STRING[100] (recipe) IN baseGroup;
outWeightRecipe 'Количество выхода изделия' = DATA NUMERIC[14,3] (recipe) IN baseGroup;

recipeRecipeDetail 'Рецепт (ИД)' = DATA recipe(recipeDetail) IN baseGroup;
componentRecipeDetail 'Компонент (ИД)' = DATA component(recipeDetail) IN idGroup;
nameComponentRecipeDetail 'Компонент' = name(componentRecipeDetail(recipeDetail)) IN baseGroup;
normQuantityRecipeDetail 'Норма закладки (брутто)' = DATA NUMERIC[9,3] (recipeDetail) IN baseGroup;

inRecipeRecipeDetail(recipe, recipeDetail) = recipeRecipeDetail(recipeDetail) == recipe;

FORM recipe 'Рецепт блюда'
    OBJECTS r=recipe FIXED PANEL
    PROPERTIES(r) captionDishRecipe, numberRecipe, beginDateRecipe, isUsedRecipe, notesRecipe, outWeightRecipe

    OBJECTS rd=recipeDetail
    PROPERTIES(rd) nameComponentRecipeDetail, normQuantityRecipeDetail, ADDOBJ, delete

    FILTERS inRecipeRecipeDetail(r, rd)

    EDIT recipe OBJECT r
;

FORM recipes 'Рецепты блюд'
    OBJECTS r=recipe
    PROPERTIES(r)  READONLY captionDishRecipe, numberRecipe, isUsedRecipe
    PROPERTIES(r)  ADDFORM, EDITFORM, delete

    OBJECTS rd=recipeDetail
    PROPERTIES(rd) READONLY nameComponentRecipeDetail, normQuantityRecipeDetail

    FILTERS   inRecipeRecipeDetail(r, rd)
;

DESIGN recipes FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD r.box;
        ADD rd.box;
    }
    ADD functions.box;
}
//---------------------------- Документы качества ----------------------------------------//

CLASS ABSTRACT paper 'Документы качества' : named;
TABLE paper(paper);


CLASS customsCertificate 'Таможенный сертификат' : paper;
CLASS certificateGGR 'Удостоверение о ГГР' : paper;
CLASS certificateConformity 'Сертификат соответствия' : paper;
CLASS stateExamination 'Акт гос. сан.-гиг. экспертизы' : paper;

numberPaper 'Номер документа' (paper) = DATA STRING[30] (paper) IN baseGroup;
datePaper 'Дата документа' (paper) = DATA DATE (paper) IN baseGroup;
dateToPaper 'Срок действия' (paper) = DATA DATE (paper) IN baseGroup;
holderPaper 'Держатель ИД' (paper) = DATA legalEntity (paper) IN idGroup;
nameHolderPaper 'Наименование держателя' (paper) = name(holderPaper(paper)) IN baseGroup;
issuedPaper 'Документ выдал ИД' (paper) = DATA legalEntity (paper) IN idGroup;
nameIssuedPaper 'Наименование органа, выдавшего документ' (paper) = name(issuedPaper(paper)) IN baseGroup;

FORM paper 'Документ качества'
    OBJECTS p=paper FIXED PANEL
    PROPERTIES(p) numberPaper, datePaper, dateToPaper, nameHolderPaper, nameIssuedPaper

    EDIT paper OBJECT p
    EDIT customsCertificate OBJECT p
    EDIT certificateGGR OBJECT p
    EDIT certificateConformity OBJECT p
    EDIT stateExamination OBJECT p
;

DESIGN paper FROM DEFAULT {

    NEW row BEFORE functions.box{
        childConstraints = TO THE BOTTOM;

        NEW row1 {
            title = 'Шапка документа';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY(numberPaper(p));
            ADD PROPERTY(datePaper(p));
            ADD PROPERTY(dateToPaper(p));
        }
        NEW row2 {
            title = 'Организации';
            childConstraints = TO THE BOTTOM;
            ADD PROPERTY(nameHolderPaper(p));
            ADD PROPERTY(nameIssuedPaper(p));
        }
    }
}

FORM papers 'Документы качества'
    OBJECTS p=paper
    PROPERTIES(p)  objectClassName, numberPaper, datePaper, dateToPaper, nameHolderPaper, nameIssuedPaper
    PROPERTIES(p)  ADDFORM, EDITFORM, delete
    ORDER BY objectClassName
;

//---------------------------- Загрузка в ВУ  ----------------------------------------//
CLASS ABSTRACT priceTransactionDocument 'Документ, требующий загрузки в оборудование';
TABLE priceTransactionDocument (priceTransactionDocument);

isDraftPriceTransactionDocument 'Открыт' = ABSTRACT BOOLEAN (priceTransactionDocument);
descriptionPriceTransactionDocument 'Название документа загрузки' = ABSTRACT STRING[200] (priceTransactionDocument);

//---------------------------- Карты проработки (разруба) ----------------------------------------//
GROUP cutGroup 'Разделка' : baseGroup;
GROUP actGroup 'Акт' : publicGroup;
GROUP itemStudyOutputDetailInfo 'Ценовый характеристики п/ф' : publicGroup;

CLASS cutting 'Карта проработки (разделки)' : named, numeratedObject;
TABLE cutting (cutting);

CLASS cuttingDetail 'Компонента';
TABLE cuttingDetail (cuttingDetail);

dateCutting 'Дата создания' = DATA DATE (cutting) IN cutGroup;
dateCutting(cutting) <- currentDate() WHEN ASSIGNED(cutting IS cutting);

useCutting 'Используется' = DATA BOOLEAN (cutting) IN cutGroup;
descriptionCutting 'Описание' = DATA STRING[200] (cutting) IN cutGroup;

percAllowancesCutting 'Процент надбавок, %' = DATA NUMERIC[8,3] (cutting) IN cutGroup;
percLossesCutting 'Процент потерь, %' = DATA NUMERIC[8,3] (cutting) IN cutGroup;
percSweepsCutting 'Процент зачисток, %' = DATA NUMERIC[8,3] (cutting) IN cutGroup;

inDepartmentStoreCutting 'В каких подразделениях разрешено использовать карту' = DATA BOOLEAN (departmentStore, cutting) IN baseGroup;

@defineDocumentRelation(cutting);
@defineDocumentDetailItem(cutting);

factorCuttingDetail 'Рассчетный коэффициент цены' = DATA NUMERIC[8,3] (cuttingDetail) IN cutGroup;
percGoodsCuttingDetail '% выхода компонента (п/ф)' = DATA NUMERIC[8,3] (cuttingDetail) IN cutGroup;

notTotalPercGoodsCuttingDetail (cutting) = GROUP SUM percGoodsCuttingDetail(cuttingDetail) BY cuttingCuttingDetail(cuttingDetail);
totalPercGoodsCutting 'Итого % выхода по карте проработки (разделки)' (cutting) = notTotalPercGoodsCuttingDetail(cutting) (+)
    percLossesCutting(cutting) (+) percSweepsCutting(cutting);
highlightCutting(cutting) = totalPercGoodsCutting(cutting) > 100;

inItemCutting 'Вкл.' = DATA BOOLEAN (item, cutting) IN cutGroup;

FORM cutting 'Карта проработки'
    OBJECTS c=cutting FIXED PANEL
    OBJECTS d=cuttingDetail
    PROPERTIES(c)      nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, descriptionCutting, dateCutting,
                       useCutting, percAllowancesCutting, percLossesCutting, percSweepsCutting
    PROPERTIES(c)      totalPercGoodsCutting TODRAW d FORCE PANEL  BACKGROUND highlightCutting(c)


    PROPERTIES(d)      nameAttributeItemCuttingDetail, shortNameUOMItemCuttingDetail, factorCuttingDetail, percGoodsCuttingDetail, ADDOBJ, delete

    TREE treeStore a=STRING[3], t=chainStores, st=storeType, s=store
        PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
        FILTERS stringEqualsAll(a), inChainStoresStoreType (t, st), inStoreTypeStore(st, s)

        OBJECTS dep=departmentStore
        PROPERTIES(dep) READONLY depName = name
        FILTERS inChainStoresStoreTypeStoreDepartment(t, st, s, dep)
        ORDER BY depName

    TREE treeGroup g=itemGroup PARENT parentItemGroup
        PROPERTIES READONLY gname = name(g)
        ORDER BY gname

        OBJECTS i=item
        PROPERTIES READONLY idBarcodeSku(i), nameAttributeItemGroupItem(g, i), shortNameUOMItem(i), nameBrandItem(i)
        FILTERS nameAttributeItemGroupItem(g, i)
        ORDER BY nameAttributeItemGroupItem

    PROPERTIES(dep, c) inDepartmentStoreCutting
    PROPERTIES(i, c)   inItemCutting

    FILTERS inCuttingCuttingDetail(c, d)
    FILTERGROUP filters7
        FILTER 'Показывать подразделения только для данной карты' 'F10' inDepartmentStoreCutting(dep, c)
    FILTERGROUP filters8
        FILTER 'Показывать товар только для данной карты' 'F9' inItemCutting(i, c)

    EDIT cutting OBJECT c
;

DESIGN cutting FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW cut.box BEFORE functions.box{
            type = TABBED;
            ADD d.box;
            NEW caseOneBox {
                title = 'Подразделение';

                ADD treeStore.box {
                    fillHorizontal = 1;
                };
                ADD dep.box {
                    fillHorizontal = 2;
                };
                POSITION treeStore.box TO THE LEFT dep.box;
            }
            NEW caseTwoBox { title = 'Товар, для которого действует карта';
                ADD treeGroup.box {
                    fillHorizontal = 1;
                };
                ADD i.box {
                    fillHorizontal = 2;
                };
                POSITION treeGroup.box TO THE LEFT i.box;
            }
        }
    }
}

FORM cuttings 'Карты проработки'
    OBJECTS c=cutting
    PROPERTIES(c)      READONLY numberObject, seriesObject, descriptionCutting, dateCutting, useCutting, percAllowancesCutting,
                       percLossesCutting, percSweepsCutting
    PROPERTIES(c)      ADDFORM, EDITFORM, delete

    OBJECTS d=cuttingDetail
    PROPERTIES(d)      READONLY nameAttributeItemCuttingDetail, shortNameUOMItemCuttingDetail, factorCuttingDetail, percGoodsCuttingDetail

    OBJECTS dep=departmentStore
    PROPERTIES(dep)    READONLY nameStoreDepartmentStore, name

    OBJECTS i=item
    PROPERTIES(i)      READONLY idBarcodeSku, nameAttributeItem, shortNameUOMItem, nameBrandItem

    PROPERTIES(dep, c) READONLY inDepartmentStoreCutting

    PROPERTIES(i, c) READONLY inItemCutting

    FILTERS   inCuttingCuttingDetail(c, d),
              inDepartmentStoreCutting(dep, c),
              inItemCutting(i, c)
    ORDER BY           nameStoreDepartmentStore, seriesObject, numberObject, nameAttributeItemCuttingDetail, name
    FILTERGROUP filters1
        FILTER 'Только используемые' 'F10' useCutting(c) DEFAULT

;


DESIGN cuttings FROM DEFAULT {
    main{

        NEW topContainer {

            type = SPLITV;
            childConstraints = TO THE RIGHT;

            NEW firstCase{

                type = SPLITV;

                ADD c.box;
                ADD d.box;
            }

            NEW secondCase {

                type = SPLITH;
                childConstraints = TO THE RIGHT;

                ADD dep.box { title = 'Подразделение'; }
                ADD i.box { title = 'Товар, для которого действует карта'; }
            }
        }

        ADD functions.box;
    }
}

FORM seriesNumberCuttingStudyInputDetail 'Возможные карты проработки'
    OBJECTS dep=departmentStore FIXED PANEL, i=item FIXED PANEL

    PROPERTIES         READONLY depName = name(dep)
    PROPERTIES         READONLY nameAttributeItem(i)

    OBJECTS c=cutting
    PROPERTIES(c)      READONLY seriesNumberObject, descriptionCutting, dateCutting, useCutting, percAllowancesCutting, percLossesCutting,
                       percSweepsCutting, totalPercGoodsCutting

    FILTERS            inDepartmentStoreCutting(dep, c),
                       inItemCutting(i, c),
                       useCutting(c)
;

DESIGN seriesNumberCuttingStudyInputDetail FROM DEFAULT {
    PROPERTY(depName) {
        focusable = FALSE;
    }
    PROPERTY(nameAttributeItem) {
        focusable = FALSE;
    }
}

// Акты проработки

CLASS actOfStudy 'Акт проработки (разделки)' : historyObject, numeratedObject, priceTransactionDocument;
TABLE actOfStudy (actOfStudy);

CLASS actOfStudyPosted 'Акт проработки закрытый' : actOfStudy, postedObject;

// шапка дакта
@defineDocumentHeaderTime(actOfStudy);
@defineDocumentHeaderDepartmentStore(actOfStudy);
@defineDocumentHeaderPosted (actOfStudy);

CLASS studyInputDetail 'Строка проработки (вход)' : outAutoBalanceSkuLedger;
TABLE studyInputDetail(studyInputDetail);

CLASS studyOutputDetail 'Строка проработки (выход)' : batch, importerPriceLedger, supplierPriceLedger, retailRangeLedger, accountPriceLedger, retailPriceLedger;
TABLE studyOutputDetail(studyOutputDetail);

// строки расхода
@defineDocumentRelationCustom(actOfStudy, studyInputDetail);

@defineDocumentDetailDepartmentStoreCustom(actOfStudy, studyInputDetail);
@defineDocumentDetailTimeCustom(actOfStudy, studyInputDetail);

@defineDocumentDetailItem(studyInput);

@defineDocumentDetailQuantity(studyInput);

@defineDocumentDetailBasePrice(studyInput);
@deriveBasePriceLedgerOnSkuChange(studyInput, item);

@defineDocumentDetailBaseSum(studyInput);

@defineDocumentDetailPostedCustom(actOfStudy, studyInputDetail);

@defineDocumentHeaderQuantityCustom(actOfStudy, studyInputDetail);
@defineDocumentHeaderItemQuantityCustom(actOfStudy, studyInputDetail);

@defineDocumentHeaderBaseSumCustom(actOfStudy, studyInputDetail);

@defineDocumentHeaderItemRetailSumCustom(actOfStudy, studyInputDetail);

// custom информация по акту
contractorDepartmentStoreActOfStudy (actOfStudy)= DATA departmentStore (actOfStudy) IN idGroup;
nameContractorDepartmentStoreActOfStudy 'Отдел-контрагент' (actOfStudy) = name(contractorDepartmentStoreActOfStudy(actOfStudy)) IN documentPrmGroup;

numberOutputActOfStudy 'Номер расходной накладной' (actOfStudy) = DATA STRING[7] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 7;
seriesOutputActOfStudy 'Серия расходной накладной' (actOfStudy) = DATA STRING[2] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 3;

numberInputActOfStudy 'Номер приходной накладной' (actOfStudy) = DATA STRING[7] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 7;
seriesInputActOfStudy 'Серия приходной накладной' (actOfStudy) = DATA STRING[2] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 3;

descriptionActOfStudy 'Название документа' (actOfStudy) =
    [FORMULA STRING[200] '\'Акт разруба \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'] (
    seriesNumberObject(actOfStudy), dateActOfStudy(actOfStudy), nameContractorDepartmentStoreActOfStudy(actOfStudy));

cuttingStudyInputDetail = DATA cutting (studyInputDetail) IN idGroup;
seriesNumberCuttingStudyInputDetail 'Номер карты' (studyInputDetail) = seriesNumberObject(cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
dateCuttingStudyInputDetail 'Дата создания карты' (studyInputDetail) = dateCutting(cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
descriptionCuttingStudyInputDetail 'Описание' (studyInputDetail) = descriptionCutting(cuttingStudyInputDetail(studyInputDetail)) IN actGroup MINCHARWIDTH 20 PREFCHARWIDTH 20;

percAllowancesCuttingStudyInputDetail 'Процент надбавок, %' (studyInputDetail) = percAllowancesCutting(cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
percLossesCuttingStudyInputDetail 'Процент потерь, %' (studyInputDetail) = percLossesCutting (cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
percSweepsCuttingStudyInputDetail 'Процент зачисток, %' (studyInputDetail) = percSweepsCutting (cuttingStudyInputDetail(studyInputDetail)) IN actGroup;

// строки расхода

studyInputDetailStudyOutputDetail = DATA studyInputDetail (studyOutputDetail) IN idGroup;
actOfStudyStudyOutputDetail(studyOutputDetail) = actOfStudyStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail)) PERSISTENT;

@defineDocumentDetailDepartmentStoreCustom(actOfStudy, studyOutputDetail);
@defineDocumentDetailTimeCustom(actOfStudy, studyOutputDetail);

@defineDocumentDetailItem(studyOutput);

factorStudyOutputDetail 'Рассчетный коэффициент цены' = DATA NUMERIC[8,3] (studyOutputDetail) IN actGroup;
percGoodsStudyOutputDetail '% выхода компонента (п/ф)' = DATA NUMERIC[10,5] (studyOutputDetail) IN actGroup;

percAllowancesStudyOutputDetail 'Процент надбавок, %' = DATA NUMERIC[8,3] (studyOutputDetail) IN actGroup;
overPercAllowancesStudyOutputDetail (studyOutputDetail) = UNION OVERRIDE 0 IF studyOutputDetail IS studyOutputDetail,
                                                                         percAllowancesStudyOutputDetail(studyOutputDetail);

calculatedStudyOutputDetail 'Количество выхода п/ф' (studyOutputDetail) =  [X*Y/100]
    (quantityStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail)), percGoodsStudyOutputDetail(studyOutputDetail));

actualQuantityStudyOutputDetail 'Фактический выход п/ф'(studyOutputDetail) = DATA NUMERIC[14,3] (studyOutputDetail);
quantityStudyOutputDetail(studyOutputDetail) = UNION OVERRIDE calculatedStudyOutputDetail(studyOutputDetail),
                                                              actualQuantityStudyOutputDetail(studyOutputDetail);

@defineDocumentDetailBasePrice(studyOutput);
@defineDocumentDetailBaseSum(studyOutput);

@defineDocumentDetailBasePricePrefix(studyOutput, cur, ' (тек.)');
@deriveBasePriceLedgerOnSkuChangePrefix(studyOutput, cur, item);

@defineDocumentDetailPostedCustom(actOfStudy, studyOutputDetail);

@defineDocumentHeaderQuantityCustom(actOfStudy, studyOutputDetail);
@defineDocumentHeaderItemQuantityCustom(actOfStudy, studyOutputDetail);

@defineDocumentHeaderBaseSumCustom(actOfStudy, studyOutputDetail);

@defineDocumentHeaderItemRetailSumCustom(actOfStudy, studyOutputDetail);

dateExpireStudyOutputDetail 'Годен до' (studyOutputDetail) = DATA DATE(studyOutputDetail) IN baseGroup;

// используется для закачки в мета-коде
quantityActOfStudyDetailItemActOfStudy 'Кол-во для закачки в оборудование' (item, actOfStudy) = GROUP SUM quantityStudyOutputDetail(studyOutputDetail) BY itemStudyOutputDetail(studyOutputDetail), actOfStudyStudyOutputDetail(studyOutputDetail);

notTotalPercGoodsStudyInputDetail (studyInputDetail)= GROUP SUM percGoodsStudyOutputDetail(studyOutputDetail) BY studyInputDetailStudyOutputDetail(studyOutputDetail);
totalPercGoodsStudyInputDetail 'Итого % выхода по товару' (studyInputDetail) = notTotalPercGoodsStudyInputDetail(studyInputDetail) (+)
    percLossesCuttingStudyInputDetail(studyInputDetail)(+) percSweepsCuttingStudyInputDetail(studyInputDetail);
highlightStudyInputDetail(studyInputDetail) = totalPercGoodsStudyInputDetail(studyInputDetail) > 100;

roundImporterPriceStudyOutputDetail 'Расчетная цена импортера' (studyOutputDetail) = round2(
    importerPriceStudyInputDetail (studyInputDetailStudyOutputDetail(studyOutputDetail)) * factorStudyOutputDetail(studyOutputDetail));

roundSupplierPriceStudyOutputDetail 'Расчетная цена поставщика' (studyOutputDetail) = round2(
    supplierPriceStudyInputDetail (studyInputDetailStudyOutputDetail(studyOutputDetail)) * factorStudyOutputDetail(studyOutputDetail));

roundRetailPriceStudyOutputDetail 'Расчетная розничная цена' (studyOutputDetail) = roundM1([X*Y*(100+Z)/100]
    (retailPriceStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail)), factorStudyOutputDetail(studyOutputDetail), overPercAllowancesStudyOutputDetail(studyOutputDetail)));

toFillStudyOutputDetailsStudyInputDetail 'Заполнить данные для п/ф' (studyInputDetail) =  ACTION (studyInputDetail) {
    FOR cuttingCuttingDetail(cuttingDetail) == cuttingStudyInputDetail(studyInputDetail) DO {
        ADDOBJ studyOutputDetail;
        FOR sod == addedObject() DO {
            SET itemStudyOutputDetail(sod) <- itemCuttingDetail(cuttingDetail);
            SET factorStudyOutputDetail(sod) <- factorCuttingDetail(cuttingDetail);
            SET percGoodsStudyOutputDetail(sod) <- percGoodsCuttingDetail(cuttingDetail);
            SET percAllowancesStudyOutputDetail(sod) <- percAllowancesCutting(cuttingCuttingDetail(cuttingDetail));
            SET retailPriceStudyOutputDetail(sod) <- roundRetailPriceStudyOutputDetail(sod);
            SET importerPriceStudyOutputDetail(sod) <- roundImporterPriceStudyOutputDetail(sod);
            SET supplierPriceStudyOutputDetail(sod) <- roundSupplierPriceStudyOutputDetail(sod);
            SET retailRangeStudyOutputDetail(sod) <- retailRangeStudyInputDetail(studyInputDetailStudyOutputDetail(sod));
        };
    }
} CONFIRM;

showNotStudyInputDetailStudyOutputDetail(studyInputDetail, studyOutputDetail) = studyInputDetail IS studyInputDetail AND NOT studyInputDetailStudyOutputDetail(studyOutputDetail);

cleanAllStudyInputDetail 'Очистить позиции' = ACTION (studyInputDetail) {
    FOR studyInputDetailStudyOutputDetail(studyOutputDetail) == studyInputDetail DO {
        EXEC delete(studyOutputDetail AS studyOutputDetail);
    }
} CONFIRM;

//---------------------------- Документы изменяющие суммы при разрубе --------------------------------//

//  приходный документ //

CLASS parish 'Приходный документ (разруб)' : incAccountDocumentLedger;
TABLE parish (parish);

isActOfStudy(actOfStudy) = actOfStudy IS actOfStudy;

         //  приходный документ //
@defineAggregation(actOfStudy, parish, isActOfStudy);

dateParish (parish) = dateActOfStudy(actOfStudyParish(parish));
dateTimeParish 'Дата/время' (parish) = dateTimeActOfStudy(actOfStudyParish(parish));
seriesNumberParish 'Серия/Номер' (parish) = seriesNumberObject(actOfStudyParish(parish));
isPostedParish (parish) = isPostedActOfStudy(actOfStudyParish(parish));
departmentStoreParish (parish) = departmentStoreActOfStudy(actOfStudyParish(parish));

contractorDepartmentStoreParish (parish) = contractorDepartmentStoreActOfStudy(actOfStudyParish(parish));
nameContractorDepartmentStoreParish 'Отдел поставки' (parish) = name(contractorDepartmentStoreParish(parish));

retailSumParish 'Сумма прихода' (parish) = retailSumStudyOutputDetailActOfStudy(actOfStudyParish(parish));

descriptionParish 'Название документа' (parish) =
    [FORMULA STRING[200] '\'Акт разруба приход \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberParish(parish), dateParish(parish), nameContractorDepartmentStoreParish(parish)) PERSISTENT;

descriptionStudyOutputDetail 'Название документа' (studyOutputDetail) = descriptionParish(uniqueParish(actOfStudyStudyOutputDetail(studyOutputDetail))) PERSISTENT;

@implementBalanceSkuLedger(studyOutput, item, departmentStore);
@implementBatch(studyOutput, item);
quantityBatch (ledger) += quantityStudyOutputDetail(ledger);
dateExpireBatch (ledger) += dateExpireStudyOutputDetail(ledger);

@implementBaseISkuDepartmentStoreLedger(studyOutput, item);

@implementAccountDocumentLedger(parish);
sumIncAccountDocumentLedger (ledger) += retailSumParish(ledger);
sumItemIncAccountDocumentLedger (ledger) += retailSumParish(ledger);
sumContainerIncAccountDocumentLedger (ledger) += 0.0 IF ledger IS parish;

//  расходный документ //

CLASS consumption 'Расходный документ (разруб)' : outAccountDocumentLedger;
TABLE consumption (consumption);

@defineAggregation(actOfStudy, consumption, isActOfStudy);

dateConsumption (consumption) = dateActOfStudy(actOfStudyConsumption(consumption));
dateTimeConsumption 'Дата/время' (consumption) = dateTimeActOfStudy(actOfStudyConsumption(consumption));
seriesNumberConsumption 'Серия/Номер' (consumption) = seriesNumberObject(actOfStudyConsumption(consumption));
isPostedConsumption (consumption) = isPostedActOfStudy(actOfStudyConsumption(consumption));
departmentStoreConsumption (consumption) = departmentStoreActOfStudy(actOfStudyConsumption(consumption));

contractorDepartmentStoreConsumption (consumption) = contractorDepartmentStoreActOfStudy(actOfStudyConsumption(consumption));
nameContractorDepartmentStoreConsumption 'Отдел назначения' (consumption) = name(contractorDepartmentStoreConsumption(consumption));

retailSumConsumption 'Сумма расхода' (consumption) = retailSumStudyInputDetailActOfStudy(actOfStudyConsumption(consumption));

descriptionConsumption 'Название документа' (consumption) =
    [FORMULA STRING[200] '\'Акт разруба расход \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberConsumption(consumption), dateConsumption(consumption), nameContractorDepartmentStoreConsumption(consumption));

descriptionStudyInputDetail 'Название документа' (studyInputDetail) = descriptionConsumption(uniqueConsumption(actOfStudyStudyInputDetail(studyInputDetail))) PERSISTENT;

@implementBalanceSkuLedger(studyInput, item, departmentStore);
quantityOutAutoBalanceSkuLedger (ledger) += quantityStudyInputDetail(ledger);

@implementAccountDocumentLedger(consumption);
sumOutAccountDocumentLedger (ledger) += retailSumConsumption(ledger);
sumItemOutAccountDocumentLedger (ledger) += retailSumConsumption(ledger);
sumContainerOutAccountDocumentLedger (ledger) += 0.0 IF ledger IS consumption;

isDraftPriceTransactionDocument (document) += isDraftActOfStudy(document);
descriptionPriceTransactionDocument (document) += descriptionActOfStudy(document);

showSeriesNumberCuttingStudyInputDetail 'Карта проработки' = ACTION (detail) {
    FORM seriesNumberCuttingStudyInputDetail OBJECTS dep=departmentStoreStudyInputDetail(detail), i=itemStudyInputDetail(detail) MODAL;
    IF formResult() == formResult.ok THEN {
        SET cuttingStudyInputDetail(detail) <- chosenObject('c');
    }
} SHORTCUT seriesNumberCuttingStudyInputDetail DEFAULT;

//---------------------------- Проведение инвентаризации ----------------------------------------//

CLASS STATIC typeOfAddition 'Тип инвентаризации' {
    register 'Товары из описей',
    remains 'Товары по остаткам',
    many    'Множество товаров'
};

// Документ инвентаризации

CLASS inventory 'Инвентаризация (открытая)' : historyObject, numeratedObject;
TABLE inventory (inventory);

CLASS inventoryPosted 'Инвентаризация (закрытая)' : inventory, postedObject;

@defineDocumentHeaderPosted (inventory) ;

@defineDocumentHeaderTime(inventory);
@defineDocumentHeaderNote(inventory);

nameInventory 'Название инвентаризации' = DATA STRING[100] (inventory) IN documentPrmGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
infoInventory 'Дополнительная информация по инвентаризации' = DATA STRING[500] (inventory) IN documentPrmGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;

timeFromInventory 'Начато' (inventory) =DATA DATETIME (inventory) IN documentPrmGroup;
timeToInventory 'Закончено' (inventory) =DATA DATETIME (inventory) IN documentPrmGroup;

headManInventory 'Зав.маг.' (inventory) =DATA employee (inventory);
nameHeadManInventory  'Зав. магазином' (inventory) = commonName(headManInventory(inventory)) IN documentPrmGroup;

includeDepartmentStoreInventory 'Вкл' = DATA BOOLEAN (departmentStore, inventory) IN inventoryGroup;
nameDepartmentInventory 'Отделы документа' (inventory) =
    GROUP CONCAT name(departmentStore) IF includeDepartmentStoreInventory(departmentStore, inventory), ', ' BY inventory IN inventoryGroup MINCHARWIDTH 50 PREFCHARWIDTH 150;

typeOfAdditionInventory(inventory) = DATA typeOfAddition (inventory);
nameTypeOfAdditionInventory 'Тип инвентаризации' (inventory) = name(typeOfAdditionInventory(inventory)) IN documentPrmGroup MINCHARWIDTH 20 PREFCHARWIDTH 20;

userTypeOfAdditionDepartmentStoreInventory(departmentStore, inventory) = DATA typeOfAddition (departmentStore, inventory);
nameUserTypeOfAdditionDepartmentStoreInventory 'Тип инвентаризации' (departmentStore, inventory) = name(userTypeOfAdditionDepartmentStoreInventory(departmentStore, inventory)) IN inventoryGroup;

typeOfAdditionDepartmentStoreInventory(departmentStore, inventory) = UNION OVERRIDE typeOfAdditionInventory(inventory) AND departmentStore IS departmentStore,
                                                                                    userTypeOfAdditionDepartmentStoreInventory(departmentStore, inventory);

CONSTRAINT includeDepartmentStoreInventory(departmentStore, inventory) AND NOT typeOfAdditionDepartmentStoreInventory(departmentStore, inventory) MESSAGE 'Ошибка: обязательно задавать тип сличительной ведомости для выбранного отдела';
userTypeOfAdditionDepartmentStoreInventory(departmentStore, inventory) => includeDepartmentStoreInventory(departmentStore, inventory) RESOLVE FALSE;

committeeInventory(inventory) = DATA inventoryCommittee (inventory) IN idGroup;
nameCommitteeInventory 'Название комиссии' (inventory) = commonName(committeeInventory(inventory)) IN inventoryCommitteeGroup MINCHARWIDTH 30 PREFCHARWIDTH 30;
nameChairmanCommitteeInventory 'Председатель комиссии' (inventory) = nameChairmanCommittee(committeeInventory(inventory)) IN inventoryCommitteeGroup MINCHARWIDTH 30 PREFCHARWIDTH 30;
namePositionChairmanInventory 'Должность председателя' (inventory)  = namePositionChairmanCommittee(committeeInventory(inventory)) IN inventoryCommitteeGroup MINCHARWIDTH 30 PREFCHARWIDTH 30;
nameEmployeeInventory 'Члены комиссии' (inventory) = nameEmployeeCommittee(committeeInventory(inventory)) IN inventoryCommitteeGroup MINCHARWIDTH 30 PREFCHARWIDTH 30;
inInventoryEmployee 'Является членом комиссии' (inventory, employee) = inCommitteeEmployee(committeeInventory(inventory), employee);


CLASS listInventory 'Опись (открытая)';
TABLE listInventory (listInventory);

CLASS listInventoryPosted 'Опись (закрытая)' : listInventory, postedObject;

@defineDocumentHeaderPosted(listInventory);
@defineDocumentHeaderDepartmentStore(listInventory);
@defineDocumentHeaderNote(listInventory);

inventoryListInventory = DATA inventory (listInventory) IN idGroup AUTOSET;
inInventoryListInventory(inventory, listInventory) = inventoryListInventory(listInventory) == inventory;

@defineDocumentDetailIndexCustom(inventory, listInventory);

nameInventoryListInventory 'Название инвентаризации' (listInventory) = nameInventory(inventoryListInventory(listInventory)) IN listInventoryGroup;
nameListInventory 'Номер описи' (listInventory) = [FORMULA STRING[30] '$1 || CAST ($2 AS character(20))']
                                                  ('Опись ', indexListInventory(listInventory)) IN listInventoryGroup;


userCommitteeListInventory(listInventory) = DATA inventoryCommittee (listInventory) IN idGroup;
committeeListInventory(listInventory) = UNION OVERRIDE committeeInventory(inventoryListInventory(listInventory)), userCommitteeListInventory(listInventory);
nameCommitteeListInventory 'Название комиссии' (listInventory) = commonName(committeeListInventory(listInventory)) IN inventoryCommitteeGroup MINCHARWIDTH 30 PREFCHARWIDTH 30;
nameChairmanCommitteeListInventory 'Председатель комиссии' (listInventory) = nameChairmanCommittee(committeeListInventory(listInventory)) IN inventoryCommitteeGroup MINCHARWIDTH 30 PREFCHARWIDTH 30;
namePositionChairmanListInventory 'Должность председателя' (listInventory)  = namePositionChairmanCommittee(committeeListInventory(listInventory)) IN inventoryCommitteeGroup MINCHARWIDTH 30 PREFCHARWIDTH 30;
nameEmployeeListInventory 'Члены комиссии' (listInventory) = nameEmployeeCommittee(committeeListInventory(listInventory)) IN inventoryCommitteeGroup MINCHARWIDTH 30 PREFCHARWIDTH 30;
inListInventoryEmployee 'Является членом комиссии' (listInventory, employee) = inCommitteeEmployee(committeeListInventory(listInventory), employee);

dateListInventory 'Дата' (listInventory) = dateInventory(inventoryListInventory(listInventory));

CLASS pageInventory 'Страница описи';
TABLE pageInventory (pageInventory);

@defineDocumentHeaderNote(pageInventory);

@defineDocumentRelationCustom(listInventory, pageInventory);
@defineDocumentDetailIndexCustom(listInventory, pageInventory);

namePageInventory 'Номер страницы' (pageInventory) = [FORMULA STRING[30] '$1 || CAST ($2 AS character(20))']
                                           ('Страница ', indexPageInventory(pageInventory)) IN baseGroup;

CLASS pageInventoryDetail 'Строка';
TABLE pageInventoryDetail (pageInventoryDetail);

@defineDocumentRelation(pageInventory);

listInventoryPageInventoryDetail(pageInventoryDetail) = listInventoryPageInventory(pageInventoryPageInventoryDetail(pageInventoryDetail)) PERSISTENT;
departmentStorePageInventoryDetail(pageInventoryDetail) = departmentStoreListInventory(listInventoryPageInventoryDetail(pageInventoryDetail)) PERSISTENT;
inventoryPageInventoryDetail(pageInventoryDetail) = inventoryListInventory(listInventoryPageInventoryDetail(pageInventoryDetail)) PERSISTENT;

dateTimePageInventoryDetail(pageInventoryDetail) = dateTimeInventory(inventoryPageInventoryDetail(pageInventoryDetail)) PERSISTENT;

barcodePageInventoryDetail(pageInventoryDetail) = DATA barcode (pageInventoryDetail) IN idGroup;

idBarcodePageInventoryDetail 'Штрих-код' (pageInventoryDetail) = idBarcode(barcodePageInventoryDetail(pageInventoryDetail));
itemPageInventoryDetail (pageInventoryDetail) =  skuBarcode(barcodePageInventoryDetail(pageInventoryDetail));
nameAttributeItemPageInventoryDetail 'Товар' (pageInventoryDetail) = nameAttributeItem(itemPageInventoryDetail(pageInventoryDetail)) IN recognizeGroup MINCHARWIDTH 20 PREFCHARWIDTH 50;

@defineDocumentDetailIndex(pageInventory);

@defineDocumentDetailQuantity(pageInventory);

@defineDocumentDetailAccountPrice(pageInventory);
@derivePriceLedgerOnSkuChange(accountPrice, pageInventory, item);

@defineDocumentDetailAccountSum(pageInventory);

@defineDocumentHeaderQuantity(pageInventory);
@defineDocumentHeaderAccountSum(pageInventory);

// Сличительная ведомость

CLASS ABSTRACT collationSheet 'Сличительная ведомость' : outAccountDocumentLedger;
TABLE collationSheet (collationSheet);

CLASS registerCollationSheet 'Сличительная ведомость по описи' : collationSheet;
CLASS remainsCollationSheet 'Сличительная ведомость по остаткам' : collationSheet;
CLASS manyCollationSheet 'Сличительная ведомость по множеству товаров' : collationSheet;

@defineDocumentHeaderDepartmentStore(collationSheet);

@defineDocumentRelationCustom(inventory, collationSheet);

@defineDocumentDetailPostedCustom(inventory, collationSheet);
@defineDocumentDetailIndexCustom(inventory, collationSheet);
@defineDocumentDetailTimeCustom(inventory, collationSheet);

nameInventoryCollationSheet 'Название инвентаризации' (collationSheet) = nameInventory(inventoryCollationSheet(collationSheet)) IN collationSheetGroup;

nameCollationSheet 'Внутренний номер' (collationSheet) = [FORMULA STRING[30] '$1 || \'-\' || CAST ($2 AS character(20))'](
        seriesNumberObject(inventoryCollationSheet(collationSheet)),
        indexCollationSheet(collationSheet)) IN collationSheetGroup;

uniqueCollationSheetDepartmentStoreInventory 'Сличительная ведомость по складу и инвентаризации' (departmentStore, inventory) =
    GROUP UNIQUE collationSheet BY departmentStoreCollationSheet(collationSheet), inventoryCollationSheet(collationSheet);
collationSheetListInventory(listInventory) = uniqueCollationSheetDepartmentStoreInventory(departmentStoreListInventory(listInventory), inventoryListInventory(listInventory));
nameCollationSheetListInventory 'Название сл. ведомости' (listInventory) = nameCollationSheet(collationSheetListInventory(listInventory)) IN listInventoryGroup;

collationSheetPageInventoryDetail (pageInventoryDetail) = collationSheetListInventory(listInventoryPageInventoryDetail(pageInventoryDetail)) PERSISTENT;

typeOfAdditionCollationSheet(collationSheet)= typeOfAdditionDepartmentStoreInventory(departmentStoreCollationSheet(collationSheet), inventoryCollationSheet(collationSheet));
nameTypeOfAdditionCollationSheet 'Тип сличительной ведомости' (collationSheet) = name(typeOfAdditionCollationSheet(collationSheet)) IN baseGroup MINCHARWIDTH 20 PREFCHARWIDTH 20;

inInventoryDepartmentStoreListInventoryPageInventoryPageInventoryDetail (inventory, departmentStore, listInventory, pageInventory, pageInventoryDetail) = UNION OVERRIDE
    pageInventoryPageInventoryDetail(pageInventoryDetail) == pageInventory AND listInventory AND departmentStore AND inventory,
    listInventoryPageInventoryDetail(pageInventoryDetail) == listInventory AND departmentStore AND NOT pageInventory AND inventory,
    departmentStorePageInventoryDetail(pageInventoryDetail) == departmentStore AND inventory == inventoryPageInventoryDetail(pageInventoryDetail) AND NOT pageInventory AND NOT listInventory;

descriptionCollationSheet 'Название документа' (collationSheet) =
    [FORMULA STRING[200] '\'Сличительная ведомость \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'] (
    nameCollationSheet(collationSheet), dateCollationSheet(collationSheet));

prevDateCollationSheet 'Дата предыдущей инвентаризации' (collationSheet) =DATA DATE (collationSheet) IN baseGroup;

inventoryPrevDepartmentStoreInventory (departmentStore, inventory) = PARTITION PREV inventory IF includeDepartmentStoreInventory(departmentStore, inventory) AND isPostedInventory(inventory)
    BY departmentStore ORDER DESC dateInventory(inventory);

datePrevCollationSheet 'Дата предыдущей инвентаризации' (collationSheet) = PARTITION PREV dateCollationSheet(collationSheet)
    //IF includeDepartmentStoreInventory(departmentStoreCollationSheet(collationSheet), inventoryCollationSheet(collationSheet)) AND isPostedInventory(inventoryCollationSheet(collationSheet))
    BY departmentStoreCollationSheet(collationSheet) ORDER  dateCollationSheet(collationSheet);

overDateCollationSheet 'Дата предыдущей инвентаризации' (collationSheet) = UNION OVERRIDE datePrevCollationSheet(collationSheet), prevDateCollationSheet(collationSheet);

GROUP inventoryGroup 'Информация об инвентаризации' : publicGroup;
GROUP collationSheetGroup 'Информация о сличительных ведомостях' : baseGroup;
GROUP listInventoryGroup 'Информация об описях' : baseGroup;
GROUP inventoryCommitteeGroup 'Комиссия' : baseGroup;

//---------------------------- Подсчет всех сумм ----------------------------//

countListInventoryCollationSheet 'К-во описей' (collationSheet) =
    GROUP SUM 1 IF listInventory IS listInventory BY collationSheetListInventory(listInventory);
countPageInventoryCollationSheet 'К-во страниц' (collationSheet) =
    GROUP SUM 1 IF pageInventory IS pageInventory BY collationSheetListInventory(listInventoryPageInventory(pageInventory));

countPageInventoryDetailListInventory 'Кол-во строк' (listInventory) = GROUP SUM countPageInventoryDetailPageInventory(pageInventory) BY listInventoryPageInventory(pageInventory) IN documentSumGroup;
quantityPageInventoryDetailListInventory 'Кол-во товара' (listInventory) = GROUP SUM quantityPageInventoryDetailPageInventory(pageInventory) BY listInventoryPageInventory(pageInventory) IN documentSumGroup;
accountSumPageInventoryDetailListInventory 'Сумма товара' (listInventory) = GROUP SUM accountSumPageInventoryDetailPageInventory(pageInventory) BY listInventoryPageInventory(pageInventory) IN documentSumGroup;

countPageInventoryDetailDepartmentStoreInventory 'Кол-во строк' (departmentStore, inventory) =
    GROUP SUM countPageInventoryDetailListInventory(listInventory) BY departmentStoreListInventory(listInventory), inventoryListInventory(listInventory) IN documentSumGroup;
quantityPageInventoryDetailDepartmentStoreInventory 'Кол-во по описям' (departmentStore, inventory) =
    GROUP SUM quantityPageInventoryDetailListInventory(listInventory) BY departmentStoreListInventory(listInventory), inventoryListInventory(listInventory) IN documentSumGroup;
accountSumPageInventoryDetailDepartmentStoreInventory 'Сумма по описям' (departmentStore, inventory) =
    GROUP SUM accountSumPageInventoryDetailListInventory(listInventory) BY departmentStoreListInventory(listInventory), inventoryListInventory(listInventory) IN documentSumGroup;

quantityPageInventoryDetailCollationSheetItem 'Кол-во по описям' (collationSheet, item) = GROUP SUM quantityPageInventoryDetail(pageInventoryDetail)
    BY collationSheetPageInventoryDetail(pageInventoryDetail), itemPageInventoryDetail(pageInventoryDetail);
accountPricePageInventoryDetailCollationSheetItem 'Цена по описям' (collationSheet, item) = GROUP EQUAL accountPricePageInventoryDetail(pageInventoryDetail) BY collationSheetListInventory(listInventoryPageInventoryDetail(pageInventoryDetail)), itemPageInventoryDetail(pageInventoryDetail);
accountSumPageInventoryDetailCollationSheetItem 'Сумма по описям' (collationSheet, item) = GROUP SUM accountSumPageInventoryDetail(pageInventoryDetail)
    BY collationSheetPageInventoryDetail(pageInventoryDetail), itemPageInventoryDetail(pageInventoryDetail);

quantityPageInventoryDetailListInventoryItem 'Кол-во в описи' (listInventory, item) = GROUP SUM quantityPageInventoryDetail(pageInventoryDetail)
    BY listInventoryPageInventoryDetail(pageInventoryDetail), itemPageInventoryDetail(pageInventoryDetail);
accountPricePageInventoryDetailListInventoryItem 'Цена в описи' (listInventory, item) = GROUP EQUAL accountPricePageInventoryDetail(pageInventoryDetail) BY listInventoryPageInventoryDetail(pageInventoryDetail), itemPageInventoryDetail(pageInventoryDetail);
accountSumPageInventoryDetailListInventoryItem 'Сумма в описи' (listInventory, item) = GROUP SUM accountSumPageInventoryDetail(pageInventoryDetail)
    BY listInventoryPageInventoryDetail(pageInventoryDetail), itemPageInventoryDetail(pageInventoryDetail);

indexListInventoryItem '№ п/п' (listInventory, item) = PARTITION SUM 1 IF  quantityPageInventoryDetailListInventoryItem(listInventory, item)>0 BY listInventory ORDER nameAttributeItem(item);
countIndexListInventory 'Количество наименований товара'(listInventory) = GROUP SUM 1 IF  quantityPageInventoryDetailListInventoryItem(listInventory, item)>0
    BY listInventory IN documentSumGroup;

quantityPageInventoryDetailCollationSheet 'Кол-во по описям' (collationSheet) =
    GROUP SUM quantityPageInventoryDetailCollationSheetItem(collationSheet, item) BY collationSheet;
accountSumPageInventoryDetailCollationSheet 'Сумма по описям' (collationSheet) =
    GROUP SUM accountSumPageInventoryDetailCollationSheetItem(collationSheet, item) BY collationSheet;

quantityBalanceCollationSheetItem 'Кол-во по остаткам' (collationSheet, item) = DATA NUMERIC[14,3] (collationSheet, item);

//---------------------------- Состав сличительной ведомости ----------------------------//

inManyCollationSheetItem 'Вкл в ведомость' = DATA BOOLEAN (manyCollationSheet, item) IN baseGroup;

includeCollationSheetItem(collationSheet, item) = UNION EXCLUSIVE
    collationSheet IS registerCollationSheet IF quantityPageInventoryDetailCollationSheetItem(collationSheet, item),
    (UNION OVERRIDE inManyCollationSheetItem(collationSheet, item), collationSheet IS manyCollationSheet IF quantityPageInventoryDetailCollationSheetItem(collationSheet, item)),
    (collationSheet IS remainsCollationSheet IF UNION OVERRIDE quantityBalanceCollationSheetItem(collationSheet, item) != 0, TRUE IF quantityPageInventoryDetailCollationSheetItem(collationSheet, item));

accountPriceBalanceCollationSheetItem 'Цена по остаткам' (collationSheet, item) = DATA NUMERIC[14,2] (collationSheet, item);
accountPriceBalanceCollationSheetItem(collationSheet, item) <- accountPriceBLedgerDateTime(
                item, departmentStoreCollationSheet(collationSheet), dateTimeInventory(inventoryCollationSheet(collationSheet)))
                WHEN ASSIGNED(includeCollationSheetItem(collationSheet, item));

accountSumBalanceCollationSheetItem 'Сумма по остаткам' (collationSheet, item) =
    quantityBalanceCollationSheetItem(collationSheet, item) * accountPriceBalanceCollationSheetItem(collationSheet, item);

quantityBalanceCollationSheet 'Кол-во по остаткам' (collationSheet) =
    GROUP SUM quantityBalanceCollationSheetItem(collationSheet, item) IF includeCollationSheetItem(collationSheet, item) BY collationSheet PERSISTENT;
accountSumBalanceCollationSheet 'Сумма по остаткам' (collationSheet) =  round0(
    [GROUP SUM accountSumBalanceCollationSheetItem(collationSheet, item) IF includeCollationSheetItem(collationSheet, item) BY collationSheet](collationSheet)) PERSISTENT;


quantityShortageCollationSheetItem 'Кол-во недостачи' (collationSheet, item) =
    quantityBalanceCollationSheetItem(collationSheet, item) (-) quantityPageInventoryDetailCollationSheetItem(collationSheet, item) PERSISTENT;
accountSumShortageCollationSheetItem 'Сумма недостачи' (collationSheet, item) =
    accountSumBalanceCollationSheetItem(collationSheet, item) (-) accountSumPageInventoryDetailCollationSheetItem(collationSheet, item) PERSISTENT;

quantityShortageCollationSheet 'Кол-во недостачи' (collationSheet) =
    GROUP SUM quantityShortageCollationSheetItem(collationSheet, item) IF includeCollationSheetItem(collationSheet, item) BY collationSheet PERSISTENT;
accountSumShortageCollationSheet 'Сумма недостачи' (collationSheet) = round0(
    [GROUP SUM accountSumShortageCollationSheetItem(collationSheet, item) IF includeCollationSheetItem(collationSheet, item) BY collationSheet](collationSheet)) PERSISTENT;

accountSumItemBalanceCollationSheet 'Сумма по остаткам, товар' (collationSheet) = round0(
    [GROUP SUM accountSumBalanceCollationSheetItem(collationSheet, item) IF includeCollationSheetItem(collationSheet, item) IF NOT isContainerItem(item) BY collationSheet](collationSheet)) PERSISTENT;
accountSumContainerBalanceCollationSheet 'Сумма по остаткам, тара' (collationSheet) = round0(
    [GROUP SUM accountSumBalanceCollationSheetItem(collationSheet, item) IF includeCollationSheetItem(collationSheet, item) IF isContainerItem(item) BY collationSheet](collationSheet)) PERSISTENT;

accountSumItemPageInventoryDetailCollationSheet 'Сумма по факту, товар' (collationSheet) = round0(
    [GROUP SUM accountSumPageInventoryDetailCollationSheetItem(collationSheet, item) IF includeCollationSheetItem(collationSheet, item) IF NOT isContainerItem(item) BY collationSheet](collationSheet));
accountSumContainerPageInventoryDetailCollationSheet 'Сумма по факту, тара' (collationSheet) = round0(
    [GROUP SUM accountSumPageInventoryDetailCollationSheetItem(collationSheet, item) IF includeCollationSheetItem(collationSheet, item) IF isContainerItem(item) BY collationSheet](collationSheet));

accountSumItemShortageCollationSheet 'Сумма недостачи, товар' (collationSheet) = round0(
    [GROUP SUM accountSumShortageCollationSheetItem(collationSheet, item) IF includeCollationSheetItem(collationSheet, item) IF NOT isContainerItem(item) BY collationSheet](collationSheet));
accountSumContainerShortageCollationSheet 'Сумма недостачи, тара' (collationSheet) = round0(
    [GROUP SUM accountSumShortageCollationSheetItem(collationSheet, item) IF includeCollationSheetItem(collationSheet, item) IF isContainerItem(item) BY collationSheet](collationSheet));

@implementAccountDocumentLedger(collationSheet);
sumOutAccountDocumentLedger (ledger) += accountSumShortageCollationSheet(ledger);
sumItemOutAccountDocumentLedger (ledger) += accountSumItemShortageCollationSheet(ledger);
sumContainerOutAccountDocumentLedger (ledger) += accountSumContainerShortageCollationSheet(ledger);

differentPriceCollationSheetItem(collationSheet, item) = accountPricePageInventoryDetailCollationSheetItem(collationSheet, item) != accountPriceBalanceCollationSheetItem(collationSheet, item);


fillBalanceInventory 'Заполнить остатки' (inventory) = ACTION(inventory) {
    SET quantityBalanceCollationSheetItem(collationSheet, item) AND inventoryCollationSheet(collationSheet)==inventory  AND item IS item
        <- balanceBSkuLedgerDateTime(item, departmentStoreCollationSheet(collationSheet), dateTimeInventory(inventoryCollationSheet(collationSheet)));

} CONFIRM;
//  todo: зацикливается на includeCollationSheetItem, пока на action поставили - переделать потом

convertPriceInventory 'Пересчитать цены по всей инвентаризации' (inventory) = ACTION(inventory) {
    SET accountPricePageInventoryDetail(pageInventoryDetail) AND inventoryPageInventoryDetail(pageInventoryDetail) == inventory <- accountPriceBLedgerDateTime(
            itemPageInventoryDetail(pageInventoryDetail), departmentStorePageInventoryDetail(pageInventoryDetail), dateTimePageInventoryDetail(pageInventoryDetail))
            AND inventoryPageInventoryDetail(pageInventoryDetail) == inventory;
    SET accountPriceBalanceCollationSheetItem(collationSheet, item) AND inventoryCollationSheet(collationSheet) == inventory <- accountPriceBLedgerDateTime(
            item, departmentStoreCollationSheet(collationSheet), dateTimeInventory(inventoryCollationSheet(collationSheet)))
            AND inventoryCollationSheet(collationSheet) == inventory;
} CONFIRM;

// todo: какой-то баг, не всегда срабатывает action

convertPriceCollationSheet 'Пересчитать цены в сличительной ведомости' (collationSheet) = ACTION(collationSheet) {
    SET accountPricePageInventoryDetail(pageInventoryDetail) AND collationSheetListInventory(listInventoryPageInventoryDetail(pageInventoryDetail)) == collationSheet <- accountPriceBLedgerDateTime(
            itemPageInventoryDetail(pageInventoryDetail), departmentStorePageInventoryDetail(pageInventoryDetail), dateTimePageInventoryDetail(pageInventoryDetail))
            AND collationSheetListInventory(listInventoryPageInventoryDetail(pageInventoryDetail)) == collationSheet;
    SET accountPriceBalanceCollationSheetItem(collationSheet, item) <- accountPriceBLedgerDateTime(
            item, departmentStoreCollationSheet(collationSheet), dateTimeInventory(inventoryCollationSheet(collationSheet)));
} CONFIRM;

//---------------------------- Генерация сличительных ведомостей ----------------------------//

// автоматическое создание сличительной ведомости (товары из описей) //
includeRegisterDepartmentStoreInventory(departmentStore, inventory) =
    includeDepartmentStoreInventory(departmentStore, inventory) AND typeOfAdditionDepartmentStoreInventory(departmentStore, inventory) == typeOfAddition.register;

@defineAggregationDoubleCustom(departmentStoreCollationSheet, inventoryCollationSheet, registerCollationSheet, includeRegisterDepartmentStoreInventory);

// автоматическое создание сличительной ведомости (по остаткам) //
includeRemainsDepartmentStoreInventory(departmentStore, inventory) =
    includeDepartmentStoreInventory(departmentStore, inventory) AND typeOfAdditionDepartmentStoreInventory(departmentStore, inventory) == typeOfAddition.remains;

@defineAggregationDoubleCustom(departmentStoreCollationSheet, inventoryCollationSheet, remainsCollationSheet, includeRemainsDepartmentStoreInventory);

// автоматическое создание сличительной ведомости (по множеству товаров) //
includeManyDepartmentStoreInventory(departmentStore, inventory) =
    includeDepartmentStoreInventory(departmentStore, inventory) AND typeOfAdditionDepartmentStoreInventory(departmentStore, inventory) == typeOfAddition.many;

@defineAggregationDoubleCustom(departmentStoreCollationSheet, inventoryCollationSheet, manyCollationSheet, includeManyDepartmentStoreInventory);

//---------------------------- Изменение остатка инвентаризации ----------------------------//

CLASS ABSTRACT inventoryDetail 'Изменение остатка инвентаризации' : balanceSkuLedger; // todo : опять же для ClassWhere
TABLE inventoryDetail (inventoryDetail);

CLASS outInventoryDetail 'Недостача инвентаризации' : inventoryDetail, outAutoBalanceSkuLedger;
CLASS inInventoryDetail 'Излишки инвентаризации' : inventoryDetail, inAutoBalanceSkuLedger;

needToOutLedgerCollationSheetItem (collationSheet, item) = quantityShortageCollationSheetItem(collationSheet, item) > 0
    AND includeCollationSheetItem(collationSheet, item) AND isPostedCollationSheet(collationSheet);

needToInLedgerCollationSheetItem (collationSheet, item) = quantityShortageCollationSheetItem(collationSheet, item) < 0
    AND includeCollationSheetItem(collationSheet, item) AND isPostedCollationSheet(collationSheet);

@defineAggregationDouble(collationSheet, item, outInventoryDetail, needToOutLedgerCollationSheetItem);
@defineAggregationDouble(collationSheet, item, inInventoryDetail, needToInLedgerCollationSheetItem);

collationSheetInventoryDetail(inventoryDetail) = UNION EXCLUSIVE collationSheetOutInventoryDetail(inventoryDetail),
                                                                 collationSheetInInventoryDetail(inventoryDetail);

inventoryInventoryDetail(inventoryDetail) = inventoryCollationSheet(collationSheetInventoryDetail(inventoryDetail)) PERSISTENT;

@defineDocumentDetailTimeCustom(inventory, inventoryDetail);
@defineDocumentDetailPostedCustom(inventory, inventoryDetail);
@defineDocumentDetailDepartmentStoreCustom(collationSheet, inventoryDetail);

quantityOutInventoryDetail = quantityShortageCollationSheetItem(collationSheetOutInventoryDetail(inventoryDetail), itemOutInventoryDetail(inventoryDetail));
quantityInInventoryDetail = -quantityShortageCollationSheetItem(collationSheetInInventoryDetail(inventoryDetail), itemInInventoryDetail(inventoryDetail));

itemInventoryDetail(inventoryDetail) = UNION EXCLUSIVE itemOutInventoryDetail(inventoryDetail),
                                                       itemInInventoryDetail(inventoryDetail) PERSISTENT;
nameAttributeItemInventoryDetail 'Товар' (inventoryDetail) = nameAttributeItem(itemInventoryDetail(inventoryDetail)) MINCHARWIDTH 15 PREFCHARWIDTH 15;
idBarcodeInventoryDetail 'Штрих-код' (inventoryDetail) =  idBarcodeSku(itemInventoryDetail(inventoryDetail));

quantityInventoryDetail 'Кол-во недостачи' (inventoryDetail) = quantityShortageCollationSheetItem(collationSheetInventoryDetail(inventoryDetail), itemInventoryDetail(inventoryDetail)) PERSISTENT;
accountSumInventoryDetail 'Сумма недостачи' (inventoryDetail) = accountSumShortageCollationSheetItem(collationSheetInventoryDetail(inventoryDetail), itemInventoryDetail(inventoryDetail)) PERSISTENT;
includeItemInventoryDetail(inventoryDetail) = includeCollationSheetItem(collationSheetInventoryDetail(inventoryDetail), itemInventoryDetail(inventoryDetail)) PERSISTENT;

descriptionOutInventoryDetail 'Название документа' (inventoryDetail) =
    [FORMULA STRING[200] '\'Недостача по инвентаризации \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'] (
    nameCollationSheet(collationSheetOutInventoryDetail(inventoryDetail)), dateCollationSheet(collationSheetOutInventoryDetail(inventoryDetail)));

descriptionInInventoryDetail 'Название документа' (inventoryDetail) =
    [FORMULA STRING[200] '\'Излишек по инвентаризации \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'] (
    nameCollationSheet(collationSheetInInventoryDetail(inventoryDetail)), dateCollationSheet(collationSheetInInventoryDetail(inventoryDetail)));

descriptionInventoryDetail 'Название документа' (inventoryDetail) = descriptionOutInventoryDetail(inventoryDetail) OR descriptionInInventoryDetail(inventoryDetail);

@implementBalanceSkuLedger(inventory, item, departmentStore);
quantityOutAutoBalanceSkuLedger (ledger) += quantityOutInventoryDetail(ledger);
quantityInAutoBalanceSkuLedger (ledger) += quantityInInventoryDetail(ledger);

//---------------------------- Отгрузка по безналу(розница) ----------------------------//

GROUP customerGroup 'Покупатель' : documentPrmGroup;
GROUP itemSpecificationDetailInfo 'Информация по товару' : baseGroup;

CLASS objectiveAcquiring 'Цель приобретения' : named;
TABLE objectiveAcquiring (objectiveAcquiring);

CLASS specification 'Счет-фактура': historyObject, numeratedObject;
CLASS specificationDetail 'Строка счет-фактуры';

@defineDocumentBaseDepartmentStoreItem(specification);

@defineDocumentDetailNumbered(specification);

@defineDocumentDetailQuantity(specification);

@defineDocumentDetailRetailPrice(specification);
@derivePriceLedgerOnSkuChange(retailPrice, specification, item);

@defineDocumentDetailRetailSum(specification);

@defineDocumentDetailCalcRange(specification);
@defineDocumentDetailCalcVATSum(specification);

@defineDocumentHeaderQuantity(specification);
@defineDocumentHeaderItemQuantity(specification);

@defineDocumentHeaderRetailSum(specification);
@defineDocumentHeaderCalcVATSum(specification);

//descriptionSpecificationDetail(specificationDetail) = [FORMULA STRING[40] '$1 || CAST ($2 AS character(20)) || $3 || $4 || CAST ($5 AS character(20))']
//            ('С/ф № ', seriesNumberSpecificationDetail(specificationDetail), ' от ', ' ', dateSpecificationDetail(specificationDetail));

descriptionSpecificationDetail(specificationDetail) = [FORMULA STRING[40] '\'С-ф № \' || \' \' || CAST($1 AS TEXT) || \' от \' || \' \' || CAST($2 AS TEXT)']
            (seriesNumberSpecificationDetail(specificationDetail), dateSpecificationDetail(specificationDetail));

customerSpecification(specification) = DATA customer (specification) IN idGroup;
nameCustomerSpecification 'Покупатель' (specification) = name(customerSpecification(specification)) IN customerGroup;
fullNameCustomerSpecification 'Полное наименование' (specification) = fullNameLegalEntity(customerSpecification(specification)) IN customerGroup;
UNPCustomerSpecification 'УНП покупателя' (specification) = UNPLegalEntity(customerSpecification(specification)) IN customerGroup;
addressCustomerSpecification 'Юридический адрес' (specification) = addressLegalEntityDate(customerSpecification(specification), dateSpecification(specification)) IN customerGroup;
nameOwnershipCustomerSpecification 'Форма собственности' (specification) = nameOwnershipLegalEntity(customerSpecification(specification)) IN customerGroup;
postAddressCustomerSpecification 'Почтовый адрес' (specification) = postAddressLegalEntity(customerSpecification(specification)) IN customerGroup;
managerCustomerSpecification 'Руководитель' (specification) = managerLegalEntity(customerSpecification(specification)) IN customerGroup;
phoneCustomerSpecification 'Телефон покупателя' (specification) = phoneLegalEntityDate(customerSpecification(specification), dateSpecification(specification)) IN customerGroup;

objectiveAcquiringSpecification(specification) = DATA objectiveAcquiring (specification) IN idGroup;
nameObjectiveAcquiringSpecification 'Цель приобретения' (specification) = name(objectiveAcquiringSpecification(specification)) IN documentPrmGroup;

accountCustomerSpecification 'Р/сч. покупателя ИД' (specification) = accountLegalEntity(customerSpecification(specification));
numberAccountCustomerSpecification 'Р/сч. покупателя' (specification) = numberAccount(accountCustomerSpecification(specification));
nameBankAccountCustomerSpecification 'Банк покупателя' (specification) = nameBankAccount(accountCustomerSpecification(specification));
addressBankAccountCustomerSpecification 'Адрес банка покупателя' (specification) = addressBankDate(bankAccount(accountCustomerSpecification(specification)), dateSpecification(specification));
MFOBankAccountCustomerSpecification 'Код МФО банка покупателя' (specification) = MFOBankAccount(accountCustomerSpecification(specification));
departmentBankAccountCustomerSpecification 'Отдел банка покупателя' (specification) = departmentBankAccount(accountCustomerSpecification(specification));
CBUBankAccountCustomerSpecification 'ЦБУ банка покупателя' (specification) = CBUBankAccount(accountCustomerSpecification(specification));

dateToSpecification 'Срок действия с/ф' (specification) = DATA DATE (specification) IN documentPrmGroup;
overdueSpecification 'Просрочена' (specification) = dateToSpecification(specification) < currentDate();
noOverdueSpecification 'Непросрочена' (specification) = dateToSpecification(specification) >= currentDate();

overdueSpecificationDate 'Просрочена' (specification, date) = dateToSpecification(specification) < date AND date AS DATE;
noOverdueSpecificationDate 'Непросрочена' (specification, date) = dateToSpecification(specification) >= date AND date AS DATE;

companySpecification 'Компания ИД' (specification) = companyDepartmentStore(departmentStoreSpecification(specification));
UNPCompanySpecification 'УНП компании' (specification) = UNPLegalEntity(companySpecification(specification));
fullNameCompanySpecification 'Полное наименование компании' (specification) = fullNameLegalEntity(companySpecification(specification));
addressCompanySpecification 'Юридический адрес компании' (specification) = addressLegalEntityDate(companySpecification(specification), dateSpecification(specification));

accountCompanySpecification 'Р/сч. компании ИД' (specification) = accountLegalEntity(companySpecification(specification));
numberAccountCompanySpecification 'Р/сч. компании' (specification) = numberAccount(accountCompanySpecification(specification));

nameBankAccountCompanySpecification 'Банк компании' (specification) = nameBankAccount(accountCompanySpecification(specification));
addressBankAccountCompanySpecification 'Адрес банка компании' (specification) = addressBankDate(bankAccount(accountCompanySpecification(specification)), dateSpecification(specification));
MFOBankAccountCompanySpecification 'Код МФО банка компании' (specification) = MFOBankAccount(accountCompanySpecification(specification));
departmentBankAccountCompanySpecification 'Отдел банка компании' (specification) = departmentBankAccount(accountCompanySpecification(specification));
CBUBankAccountCompanySpecification 'ЦБУ банка компании' (specification) = CBUBankAccount(accountCompanySpecification(specification));
phoneCompanySpecification 'Телефон компании' (specification) = phoneLegalEntityDate(companySpecification(specification), dateSpecification(specification)) IN customerGroup;

CONSTRAINT specification IS specification AND NOT dateToSpecification(specification) MESSAGE 'Не задан срок действия с/ф';
CONSTRAINT dateToSpecification(specification) < dateSpecification(specification) MESSAGE 'Дата действия с/ф не может быть меньше даты документа';

balanceDepartmentStoreItemSpecificationDetail 'Текущий остаток' (specificationDetail) = balanceBSkuLedgerDateTime(
                itemSpecificationDetail(specificationDetail), departmentStoreSpecificationDetail(specificationDetail), dateTimeSpecificationDetail(specificationDetail)) IN itemDetailGroup;

highlightSpecificationDetail(specificationDetail) =  quantitySpecificationDetailItemSpecification(itemSpecificationDetail(specificationDetail), specificationSpecificationDetail(specificationDetail)) > balanceDepartmentStoreItemSpecificationDetail(specificationDetail);

reservedItemDepartmentStoreDate 'Количество выставленного товара' (departmentStore, item, date) = GROUP SUM
    quantitySpecificationDetail(specificationDetail)
    IF dateToSpecification(specificationSpecificationDetail(specificationDetail)) >= date AND date AS DATE
    BY departmentStoreSpecificationDetail(specificationDetail), itemSpecificationDetail(specificationDetail), date;

quantityExhibitedItemBySpecificationDetail(specificationDetail) = reservedItemDepartmentStoreDate(departmentStoreSpecificationDetail(specificationDetail),
    itemSpecificationDetail(specificationDetail), dateSpecification(specificationSpecificationDetail(specificationDetail)));

availableQuantityItemBySpecificationDetail 'Доступное к-во, с учетом непросроченных с/ф' (specificationDetail) =
    balanceDepartmentStoreItemSpecificationDetail(specificationDetail)-quantityExhibitedItemBySpecificationDetail(specificationDetail) IN itemDetailGroup;

notNullAvailableQuantityItemBySpecificationDetail(specificationDetail) = availableQuantityItemBySpecificationDetail(specificationDetail) < 0;

//---------------------------- Документ на отгрузку из розницы ----------------------------------------//

GROUP specificationGroup 'Счет-фактуры' : publicGroup;

CLASS statement 'Выписка из розницы' : outAccountDocumentLedger, historyObject, numberedObject, consignment;
CLASS statementDetail 'Строка выписки из розницы' : outAutoBalanceSkuLedger, salesLedger, consignmentDetail;
CLASS statementPosted 'Закрытая выписка из розницы' : statement, postedObject;

@defineDocumentBasePostedDepartmentStoreItem(statement);

@defineDocumentHeaderPriceChange(statement);

@defineDocumentDetailQuantity(statement);

@defineDocumentDetailBasePrice(statement);
@deriveBasePriceLedgerOnSkuChange(statement, item);

@defineDocumentDetailRetailSum(statement);

@defineDocumentDetailCalcRange(statement);
@defineDocumentDetailCalcVATSum(statement);

@defineDocumentDetailRetailPricePrefix(statement, cur, ' (тек.)');
@derivePriceLedgerOnSkuChangePrefix(retailPrice, statement, cur, item);

@defineDocumentDetailNote(statement);

@defineDocumentHeaderQuantity(statement);
@defineDocumentHeaderItemQuantity(statement);

@defineDocumentHeaderRetailSum(statement);
@defineDocumentHeaderItemRetailSum(statement);

@defineDocumentHeaderCalcVATSum(statement);

//    шапка документа поставки
customerStatement 'Покупатель (ИД)' (statement) = DATA customer (statement) IN idGroup;
nameCustomerStatement 'Покупатель' (statement) = name(customerStatement(statement)) IN documentPrmGroup
    MINCHARWIDTH 30 PREFCHARWIDTH 40;
UNPCustomerStatement 'УНП покупателя' (statement) = UNPLegalEntity(customerStatement(statement)) IN documentPrmGroup;

inStatementSpecification 'Включить в накладную' (statement, specification) = DATA BOOLEAN (statement, specification)
    IN idGroup MINCHARWIDTH 20 PREFCHARWIDTH 20;

specificationsStatement 'Ввести на основании с/ф' (statement) = GROUP CONCAT castToString255(seriesNumberObject(specification))
    IF inStatementSpecification(statement, specification), ', ' BY statement IN specificationGroup MINCHARWIDTH 20 PREFCHARWIDTH 20;

countStatementSpecification(specification) = GROUP SUM 1 IF inStatementSpecification(statement, specification) AND isPostedStatement(statement) BY specification;
noStatementSpecification(specification) = specification IS specification AND NOT countStatementSpecification(specification);

differsPriceStatementDetail(statementDetail) = retailPriceStatementDetail(statementDetail) != curRetailPriceStatementDetail(statementDetail);

statusSpecification 'Расход' (specification) = IF countStatementSpecification(specification)
                                                  THEN 'Отгрузки были' IF specification IS specification
                                                  ELSE 'Отгрузок не было' IF specification IS specification
                                                MINCHARWIDTH 15 PREFCHARWIDTH 15;

statusStatementSpecification 'Статус' (statement, specification) = IF dateStatement(statement) > dateToSpecification(specification)
                                                                      THEN 'Просрочена' IF statement IS statement IF specification IS specification
                                                                      ELSE 'Непросрочена' IF statement IS statement IF specification IS specification
                                                                   MINCHARWIDTH 15 PREFCHARWIDTH 15;

descriptionStatement 'Название документа' (statement) =
    [FORMULA STRING[200] '\'Выписка из розницы \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)']
    (seriesNumberObject(statement), dateStatement(statement), nameCustomerStatement(statement));

descriptionStatementDetail 'Название документа' (statementDetail) = descriptionStatement(statementStatementDetail(statementDetail));

@implementBalanceSkuLedger(statement, item, departmentStore);
quantityOutAutoBalanceSkuLedger (ledger) += quantityStatementDetail(ledger);

@implementAccountDocumentLedger(statement);
sumOutAccountDocumentLedger (ledger) += retailSumStatementDetailStatement(ledger);
sumItemOutAccountDocumentLedger (ledger) += retailSumItemStatementDetailStatement(ledger);
sumContainerOutAccountDocumentLedger (ledger) += retailSumContainerStatementDetailStatement(ledger);

@implementSalesLedgerStore(statement);

balanceDepartmentStoreItemStatementDetail 'Текущий остаток' (statementDetail) = balanceBSkuLedgerDateTime(
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail)) IN itemDetailGroup;

highlightStatementDetail(statementDetail) = quantityStatementDetailItemStatement(itemStatementDetail(statementDetail), statementStatementDetail(statementDetail)) > balanceDepartmentStoreItemStatementDetail(statementDetail);

overdueSpecificationStatement 'Просроченные с/ф' (specification, statement) = overdueSpecificationDate(specification, dateStatement(statement));
noOverdueSpecificationStatement 'Непросроченные с/ф' (specification, statement) = noOverdueSpecificationDate(specification, dateStatement(statement));

toFillStatementDetailsStatement 'Заполнить отгрузку на основании с/ф' =  ACTION (statement) {
    FOR inStatementSpecification (statement, specification) AND inSpecificationSpecificationDetail(specification, specificationDetail) DO {
        ADDOBJ statementDetail;
        FOR d == addedObject() DO {
            SET itemStatementDetail(d) <- itemSpecificationDetail(specificationDetail);
            SET quantityStatementDetail(d) <- quantitySpecificationDetail(specificationDetail);
            SET retailPriceStatementDetail(d) <- retailPriceSpecificationDetail(specificationDetail);
            SET noteStatementDetail(d) <- descriptionSpecificationDetail(specificationDetail);
        };
    };
} IN specificationGroup CONFIRM;

// ---------------------------------- Переоценка при реализации из розницы ------------------------------------------

CLASS priceChangeStatement 'Переоценка при отгрузке из розницы' : priceChangeDocument;
CLASS priceChangeStatementDetail 'Строка переоценки при отгрузке из розницы' : priceChangeDocumentDetail;

needToPriceChangeStatementDetail (statementDetail) = curRetailPriceStatementDetail(statementDetail) != retailPriceStatementDetail(statementDetail) AND
                                                   quantityStatementDetail(statementDetail) >0; // <= balanceDepartmentStoreItemStatementDetail(statementDetail);

@defineDocumentPriceChange(statement);
@defineDocumentPriceChangeNumber(statement);
@defineDocumentPriceChangeSku(statement, item);
@defineDocumentPriceChangeQuantity(statement);
@defineDocumentPriceChangePrice(statement);
@defineDocumentPriceChangeRetailPricePrefix(statement, cur, ' (тек.)');

@implementPriceChangeDocument(priceChangeStatement, sku);
@implementPriceChangeDocumentDetailRetailPrice(priceChangeStatement);

// для накладной (шапка и хвост)

@defineDocumentDetailPackWeightItem(statement);

@defineConsignment(statement);
@implementConsignment(statement, departmentStore);

senderConsignment (consignment) += companyDepartmentStore(departmentStoreStatement(consignment));
recipientConsignment (consignment) += customerStatement(consignment);

priceConsignmentDetail (consignmentDetail) += retailPriceStatementDetail (consignmentDetail);
sumConsignmentDetail (consignmentDetail) += retailSumStatementDetail (consignmentDetail);
vatConsignmentDetail (consignmentDetail) += dataCalcRangeStatementDetail (consignmentDetail);
sumVATConsignmentDetail (consignmentDetail) += calcVATSumStatementDetail (consignmentDetail);
sumInvoiceConsignmentDetail (consignmentDetail) += retailSumStatementDetail (consignmentDetail);
noteConsignmentDetail (consignmentDetail) += noteStatementDetail (consignmentDetail);

//---------------------------- Приход товара от поставщика ----------------------------------------//
GROUP shipmentOrderGroup 'Заказ' : documentPrmGroup;
GROUP additionalInfo 'Дополнительно' : baseGroup;

CLASS shipment 'Поставка' : incAccountDocumentLedger, historyObject, numberedObject, priceTransactionDocument, listRegister;
CLASS shipmentDetail 'Строка поставки' : batch, importerPriceLedger, supplierPriceLedger, retailRangeLedger, accountPriceLedger, retailPriceLedger, warePriceLedger, listRegisterDetail;
CLASS shipmentPosted 'Закрытая поставка' : shipment, postedObject;

@defineDocumentBasePostedDepartmentStoreItem(shipment);

@defineDocumentHeaderSupplierContract(shipment);
@defineDocumentHeaderPriceChange(shipment);

@defineDocumentDetailItemExtra(shipment);
@defineDocumentDetailNumbered(shipment);

@defineDocumentDetailQuantity(shipment);

@defineDocumentDetailBasePrice(shipment);
@defineDocumentDetailBaseSum(shipment);

@defineDocumentDetailInvoicePrice(shipment);
@defineDocumentDetailInvoiceSum(shipment);

@defineDocumentDetailBasePricePrefix(shipment, cur, ' (тек.)');
@deriveBasePriceLedgerOnSkuChangePrefix(shipment, cur, item);

@defineDocumentHeaderQuantity(shipment);
@defineDocumentHeaderItemQuantity(shipment);

@defineDocumentHeaderBaseSum(shipment);
@defineDocumentHeaderItemRetailSum(shipment);

@defineDocumentHeaderInvoiceSum(shipment);

@defineDocumentHeaderListRegister(shipment);

sidShipmentDetail 'Уникальный номер накладной' (shipmentDetail) = DATA STRING[50] (shipmentDetail) IN documentHeaderGroup;

sidNumberSeriesToShipmentDetail (sid, number, series) = GROUP UNIQUE shipmentDetail
            BY sidShipmentDetail (shipmentDetail), numberShipmentDetail (shipmentDetail), seriesShipmentDetail (shipmentDetail)
            WHERE shipmentDetail IS shipmentDetail;

numberSeriesToShipment (number, series) = GROUP UNIQUE shipment BY numberObject(shipment), seriesObject(shipment) WHERE shipment IS shipment;

carryingChargesShipment 'Транспортные расходы' (shipment) = DATA NUMERIC[16,2] (shipment) IN documentSumGroup;

//количество-цены по строкам
GROUP pricingShipmentDetailInfo 'Дополнительные ценовые параметры': baseGroup;

dateExpireShipmentDetail 'Годен до' (shipmentDetail) = DATA DATE(shipmentDetail) IN baseGroup;

CONSTRAINT controlExpiryItemShipmentDetail(shipmentDetail) AND NOT dateExpireShipmentDetail(shipmentDetail) MESSAGE 'Для товара не задан срок годности';
//    CHECKED BY controlExpiryItemShipmentDetail MESSAGE 'Не задан для товара срок годности';

isFixPriceShipmentDetail 'Товар с фиксированной ценой' (shipmentDetail) = DATA BOOLEAN (shipmentDetail) IN itemDetailGroup;
isFixPriceShipmentDetail(shipmentDetail) <- isFixPriceItem (itemShipmentDetail (shipmentDetail)) WHEN CHANGED(itemShipmentDetail(shipmentDetail));

retailMarkupShipmentDetail 'Торговая надбавка, %'(shipmentDetail) = DATA NUMERIC[8,3] (shipmentDetail) IN baseGroup;
importerMarkupShipmentDetail '% надбавки с уч. оптовой' (shipmentDetail) = [X*(100+Y)/100](
    retailMarkupShipmentDetail(shipmentDetail), supplierMarkupShipmentDetail(shipmentDetail));

descriptionShipment 'Название документа' (shipment) =
    [FORMULA STRING[200] '\'Приход \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberObject(shipment), dateShipment(shipment), nameSupplierShipment(shipment));

descriptionShipmentDetail 'Название документа' (shipmentDetail) = descriptionShipment(shipmentShipmentDetail(shipmentDetail));

@implementBalanceSkuLedger(shipment, item, departmentStore);
@implementBatch(shipment, item);
quantityBatch (ledger) += quantityShipmentDetail(ledger);
dateExpireBatch (ledger) += dateExpireShipmentDetail(ledger);

@implementBaseSkuDepartmentStoreLedger(shipment, item);

@implementAccountDocumentLedger(shipment);
sumIncAccountDocumentLedger (ledger) += retailSumShipmentDetailShipment(ledger);
sumItemIncAccountDocumentLedger (ledger) += retailSumItemShipmentDetailShipment(ledger);
sumContainerIncAccountDocumentLedger (ledger) += retailSumContainerShipmentDetailShipment(ledger);

isDraftPriceTransactionDocument (document) += isDraftShipment(document);
descriptionPriceTransactionDocument (document) += descriptionShipment(document);

//----------------------------------Для реестра цен----------------------------//

@implementListRegister(shipment, item);
@implementHeaderInputListRegisterNumber(shipment);

senderListRegister (inputListRegister) += supplierShipment(inputListRegister);
shipperListRegister (inputListRegister) += nameSupplierShipment(inputListRegister);

supplierSumListRegisterDetail (inputListRegisterDetail) += supplierSumShipmentDetail(inputListRegisterDetail);
supplierSumListRegisterDetailListRegister (inputListRegister) += supplierSumShipmentDetailShipment(inputListRegister);

dataFromContractListRegister (listRegister) += dateFromContractShipment(listRegister);
numberContractListRegister (listRegister) += numberContractShipment(listRegister);

// ------ Запись значений по умолчанию ----- //

supplierPriceShipmentDetail(shipmentDetail) <-
    priceSupplierItemDepartmentDate (supplierShipmentDetail(shipmentDetail), itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))
    WHEN CHANGED(itemShipmentDetail(shipmentDetail));

nonRoundImporterPriceShipmentDetail 'Цена изготовителя/импортера (неокругленная)' (shipmentDetail) =
     IF isFixPriceShipmentDetail(shipmentDetail) THEN
     [X*(100+Y)/100](supplierPriceShipmentDetail(shipmentDetail), overSupplierMarkupShipmentDetail(shipmentDetail)) ELSE
     [X*100/(100+Y)](supplierPriceShipmentDetail(shipmentDetail), overSupplierMarkupShipmentDetail(shipmentDetail));

importerPriceShipmentDetail (shipmentDetail) <-
    round0(nonRoundImporterPriceShipmentDetail(shipmentDetail))
    WHEN CHANGED(nonRoundImporterPriceShipmentDetail(shipmentDetail));

supplierRangeShipmentDetail(shipmentDetail) <-
    supplierRangeItemDate(itemShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))
    WHEN CHANGED(itemShipmentDetail(shipmentDetail));

retailMarkupShipmentDetail(shipmentDetail) <-
    markupItemDepartmentDate(itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))
    WHEN CHANGED(itemShipmentDetail(shipmentDetail));

retailRangeShipmentDetail(shipmentDetail) <-
    retailRangeItemDate(itemShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))
    WHEN CHANGED(itemShipmentDetail(shipmentDetail));

wareShipmentDetail(shipmentDetail) <-
    wareItem(itemShipmentDetail(shipmentDetail))
    WHEN CHANGED(itemShipmentDetail(shipmentDetail));

warePriceShipmentDetail (shipmentDetail) <-
    warePriceDate(wareShipmentDetail (shipmentDetail), dateShipmentDetail(shipmentDetail))
    WHEN CHANGED(wareShipmentDetail(shipmentDetail));

nonRoundRetailPriceShipmentDetail 'Цена розничная (неокруглен.)'(shipmentDetail) = [X*(Y+100)*(Z+100)/10000] (
    supplierPriceShipmentDetail(shipmentDetail),
    (UNION OVERRIDE 0.0 IF shipmentDetail IS shipmentDetail, retailMarkupShipmentDetail(shipmentDetail)),
    (UNION OVERRIDE 0.0 IF shipmentDetail IS shipmentDetail, valueRetailRangeShipmentDetail(shipmentDetail)));

// todo : такой подход создает охрененную сложность на сохранении
//markupPriceShipmentDetail 'Сумма торговой надбавки (за ед.)' (shipmentDetail) =
//    supplierPriceShipmentDetail(shipmentDetail) *
//    (UNION OVERRIDE 0 IF shipmentDetail IS shipmentDetail, retailMarkupShipmentDetail(shipmentDetail))/100;
//
//saleVATPriceShipmentDetail 'Сумма розничного НДС (за ед.)' (shipmentDetail) =
//    (supplierPriceShipmentDetail(shipmentDetail) (+) markupPriceShipmentDetail(shipmentDetail))*
//    (UNION OVERRIDE 0 IF shipmentDetail IS shipmentDetail, valueRetailRangeShipmentDetail(shipmentDetail))/100;

//nonRoundRetailPriceShipmentDetail 'Цена розничная (неокруглен.)'(shipmentDetail) = supplierPriceShipmentDetail(shipmentDetail) (+) markupPriceShipmentDetail(shipmentDetail) (+) saleVATPriceShipmentDetail(shipmentDetail);

calculatedRetailPriceShipmentDetail 'Новая розничная цена (расч.)' (shipmentDetail) = IF isFixPriceShipmentDetail(shipmentDetail)
    THEN roundM1(importerPriceShipmentDetail(shipmentDetail) (+) warePriceShipmentDetail(shipmentDetail))
    ELSE roundM1(nonRoundRetailPriceShipmentDetail(shipmentDetail) (+) warePriceShipmentDetail(shipmentDetail));

retailPriceShipmentDetail (shipmentDetail) <-
    calculatedRetailPriceShipmentDetail (shipmentDetail)
    WHEN CHANGED(calculatedRetailPriceShipmentDetail (shipmentDetail));

// Запись текущих параметров
balanceBeforeShipmentShipmentDetail 'Остаток до поставки' (shipmentDetail) = DATA NUMERIC[14,3] (shipmentDetail);
balanceBeforeShipmentShipmentDetail (shipmentDetail) <- balanceBSkuLedgerDateTime (
                itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateTimeShipmentDetail(shipmentDetail))
                WHEN CHANGED(itemShipmentDetail(shipmentDetail));

//-------------------- Документы качества ----------------------------//

customsCertificateShipmentDetail 'Таможенный сертификат ИД' (shipmentDetail)= DATA customsCertificate (shipmentDetail) IN idGroup;
certificateGGRShipmentDetail 'Удостоверение о ГГР ИД' (shipmentDetail)= DATA certificateGGR (shipmentDetail) IN idGroup;
certificateConformityShipmentDetail 'Сертификат соответствия ИД' (shipmentDetail)= DATA certificateConformity (shipmentDetail) IN idGroup;
stateExaminationShipmentDetail 'Акт гос. сан.-гиг. экспертизы ИД' (shipmentDetail)= DATA stateExamination (shipmentDetail) IN idGroup;

numberCustomsCertificateShipmentDetail 'Номер таможенного сертификата' (shipmentDetail) = numberPaper(customsCertificateShipmentDetail(shipmentDetail)) IN recognizeGroup;
numberCertificateGGRShipmentDetail 'Номер удостоверения о ГГР' (shipmentDetail) = numberPaper(certificateGGRShipmentDetail(shipmentDetail)) IN recognizeGroup;
numberCertificateConformityShipmentDetail 'Номер сертификата соответствия' (shipmentDetail) = numberPaper(certificateConformityShipmentDetail(shipmentDetail)) IN recognizeGroup;
numberStateExaminationShipmentDetail 'Номер акта гос. сан.-гиг. экспертизы' (shipmentDetail) = numberPaper(stateExaminationShipmentDetail(shipmentDetail)) IN recognizeGroup;

actingPaperDate(paper, date) =  datePaper(paper) <= date AND NOT  dateToPaper(paper) < date AND date AS DATE;

CONSTRAINT customsCertificateShipmentDetail(shipmentDetail) AND NOT actingPaperDate(customsCertificateShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))
    CHECKED BY customsCertificateShipmentDetail MESSAGE 'Таможенный сертификат не действующий';
CONSTRAINT certificateGGRShipmentDetail(shipmentDetail) AND NOT actingPaperDate(certificateGGRShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))
    CHECKED BY certificateGGRShipmentDetail MESSAGE 'Удостоверение о ГГР не действующее';
CONSTRAINT certificateConformityShipmentDetail(shipmentDetail) AND NOT actingPaperDate(certificateConformityShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))
    CHECKED BY certificateConformityShipmentDetail MESSAGE 'Сертификат соответствия не действующий';
CONSTRAINT stateExaminationShipmentDetail(shipmentDetail) AND NOT actingPaperDate(stateExaminationShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))
    CHECKED BY stateExaminationShipmentDetail MESSAGE 'Акт гос. сан.-гиг. не действующий';

// ---------------------------------- Дооценка на приходе ------------------------------------------

CLASS priceChangeShipment 'Переоценка на приходе' : priceChangeDocument;
CLASS priceChangeShipmentDetail 'Строка переоценки на приходе' : priceChangeDocumentDetail;

needToPriceChangeShipmentDetail (shipmentDetail) = curRetailPriceShipmentDetail(shipmentDetail) != retailPriceShipmentDetail(shipmentDetail) AND
                                                   balanceBeforeShipmentShipmentDetail(shipmentDetail) != 0;

@defineDocumentPriceChange(shipment);
@defineDocumentPriceChangeNumber(shipment);
@defineDocumentPriceChangeSku(shipment, item);
quantityPriceChangeShipmentDetail (priceChangeShipmentDetail) = balanceBeforeShipmentShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));
@defineDocumentPriceChangePrice(shipment);
@defineDocumentPriceChangePricePrefix(shipment, cur, cur, ' (тек.)');

supplierPriceChangeShipment (priceChangeShipment) = supplierShipment(shipmentPriceChangeShipment(priceChangeShipment));
nameSupplierPriceChangeShipment 'Поставщик' (priceChangeShipment) = name(supplierPriceChangeShipment(priceChangeShipment));

@implementPriceChangeDocument(priceChangeShipment, sku);
@implementPriceChangeDocumentDetailAllPrice(priceChangeShipment);

//----------------------------------- Списание отходов по нормам -------------------------------------------------//
percentRateWasteShipmentDetail 'Процент для списания отходов' (shipmentDetail) = DATA NUMERIC[10,3] (shipmentDetail);

percentRateWasteShipmentDetail (shipmentDetail) <- percentRateWasteItem(itemShipmentDetail(shipmentDetail))
    WHEN CHANGED(itemShipmentDetail(shipmentDetail));

needToWasteShipmentDetail (shipmentDetail) = TRUE IF percentRateWasteShipmentDetail(shipmentDetail);
needToWasteShipment (shipment) = GROUP SUM 1 IF needToWasteShipmentDetail(shipmentDetail) BY shipmentShipmentDetail(shipmentDetail) IN baseGroup;

CLASS wastage 'Списание отходов' : outAccountDocumentLedger, historyObject;
CLASS wastagePosted 'Закрытое списание отходов' : wastage, postedObject;
CLASS wastageDetail 'Строка документа': outAutoBalanceSkuLedger;

@defineDocumentAggregation (shipment, wastage, needToWasteShipment);

@defineDocumentTables(wastage);
@defineDocumentDetailIndex(wastage);
@defineDocumentHeaderCount(wastage);

@defineDocumentHeaderAggregation(shipment, wastage);
@defineDocumentHeaderAggregationDepartmentStore(shipment, wastage);
@defineDocumentHeaderAggregationNumber(shipment, wastage);

@defineDocumentDetailAggregationHeader(shipment, wastage);
@defineDocumentDetailAggregationDepartmentStore(shipment, wastage);
@defineDocumentDetailAggregationItem(shipment, wastage);

quantityItemWastageDetail 'Количество' (wastageDetail) =  quantityShipmentDetail(shipmentDetailWastageDetail(wastageDetail));
quantityItemWastageDetailWastage 'Общее количество' (wastage) = GROUP SUM quantityItemWastageDetail(wastageDetail) BY wastageWastageDetail(wastageDetail) IN documentSumGroup;

percentRateWasteWastageDetail 'Процент списания' (wastageDetail) = percentRateWasteShipmentDetail(shipmentDetailWastageDetail(wastageDetail));

quantityWastageDetail 'Количество для списания '(wastageDetail) = [round3(X*Y/100)](
    quantityShipmentDetail(shipmentDetailWastageDetail(wastageDetail)), percentRateWasteWastageDetail (wastageDetail));

@defineDocumentDetailAggregationPrice(shipment, wastage);

@defineDocumentDetailBaseSum(wastage);

@defineDocumentHeaderQuantity(wastage);

@defineDocumentHeaderBaseSum(wastage);
@defineDocumentHeaderItemRetailSum(wastage);

supplierWastage (wastage) = supplierShipment(shipmentWastage(wastage));
nameSupplierWastage 'Поставщик' (wastage) = name(supplierWastage(wastage));

nameCompanyWastage 'Компания' (wastage) = nameCompanyDepartmentStore(departmentStoreWastage(wastage));

descriptionWastage 'Название документа' (wastage) =
    [FORMULA STRING[200] '\'Списание отходов \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberWastage(wastage), dateWastage(wastage), nameSupplierWastage(wastage));

descriptionWastageDetail 'Название документа' (wastageDetail) = descriptionWastage(wastageWastageDetail(wastageDetail));

@implementBalanceSkuLedger(wastage, item, departmentStore);
quantityOutAutoBalanceSkuLedger (ledger) += quantityWastageDetail(ledger);

@implementAccountDocumentLedger(wastage);
sumOutAccountDocumentLedger (ledger) += retailSumWastageDetailWastage(ledger);
sumItemOutAccountDocumentLedger (ledger) += retailSumItemWastageDetailWastage(ledger);
sumContainerOutAccountDocumentLedger (ledger) += retailSumContainerWastageDetailWastage(ledger);

//----------------------------------- Комиссия -------------------------------------------------//

wastageCommitteeShipment (shipment) = DATA wastageCommittee (shipment) IN idGroup;
nameWastageCommitteeShipment 'Комиссия для списания отходов' (shipment) = name(wastageCommitteeShipment(shipment)) IN documentPrmGroup;
wastageCommitteeShipment(shipment) <- wastageCommitteeDepartmentStore(departmentStoreShipment(shipment))
    WHEN ASSIGNED(shipment IS shipment);

wastageCommitteeWastage (wastage) = wastageCommitteeShipment(shipmentWastage(wastage));
inWastageEmployee (wastage, employee) = inCommitteeEmployee(wastageCommitteeWastage(wastage), employee);
nameWastageCommitteeWastage 'Комиссия' (wastage) = name(wastageCommitteeWastage(wastage));
commonNameEmployee 'Имя' (employee) = commonName(employee) AND employee IS employee;
namePositionEmployeeEmployee 'Должность' (employee) = namePositionEmployee(employee) AND employee IS employee;

//----------------------------------------------- Списание товара ---------------------------------------------------//
CLASS reasonOff 'Причина списания' : named;
TABLE reasonOff (reasonOff);

FORM reasonOff 'Причина списания'
    OBJECTS r=reasonOff  FIXED PANEL
    PROPERTIES(r) name
;

CLASS writeOff 'Списание' : outAccountDocumentLedger, historyObject, numeratedObject;
CLASS writeOffDetail 'Строка списания' : outAutoBalanceSkuLedger;
CLASS writeOffPosted 'Закрытое списание' : writeOff, postedObject;

@defineDocumentBasePostedDepartmentStoreItem (writeOff);

@defineDocumentDetailQuantity(writeOff);

@defineDocumentDetailBasePrice(writeOff);
@deriveBasePriceLedgerOnSkuChange(writeOff, item);

@defineDocumentDetailBaseSum(writeOff);

@defineDocumentDetailAccountPrice(writeOff);
@derivePriceLedgerOnSkuChange(accountPrice, writeOff, item);

@defineDocumentDetailAccountSum(writeOff);
@defineDocumentHeaderQuantity(writeOff);

@defineDocumentHeaderAccountSum(writeOff);
@defineDocumentHeaderItemAccountSum(writeOff);

reasonOffWriteOff 'Причина списания (ИД)' = DATA reasonOff (writeOff) IN idGroup;
nameReasonOffWriteOff 'Причина списания' (writeOff) = name(reasonOffWriteOff (writeOff)) IN documentPrmGroup;

balanceDepartmentStoreItemWriteOff 'Текущий остаток' (writeOffDetail) =
    currentBalanceSkuLedger(itemWriteOffDetail(writeOffDetail), departmentStoreWriteOffDetail(writeOffDetail)) PERSISTENT;

descriptionWriteOff 'Название документа' (writeOff) =
    [FORMULA STRING[200] '\'Списание \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'](
    seriesNumberObject(writeOff), dateWriteOff(writeOff));

descriptionWriteOffDetail 'Название документа' (writeOffDetail) = descriptionWriteOff(writeOffWriteOffDetail(writeOffDetail));

@implementBalanceSkuLedger(writeOff, item, departmentStore);
quantityOutAutoBalanceSkuLedger (ledger) += quantityWriteOffDetail(ledger);

@implementAccountDocumentLedger(writeOff);
sumOutAccountDocumentLedger (ledger) += accountSumWriteOffDetailWriteOff(ledger);
sumItemOutAccountDocumentLedger (ledger) += accountSumItemWriteOffDetailWriteOff(ledger);
sumContainerOutAccountDocumentLedger (ledger) += accountSumContainerWriteOffDetailWriteOff(ledger);

//----------------------------------- Внутреннее перемещение (расход) -------------------------------------------------//

CLASS innerFlow 'Расход в отдел' : outAccountDocumentLedger, historyObject, numberedObject, consignment;
CLASS innerFlowDetail 'Строка расхода в отдел' : outAutoBalanceSkuLedger, consignmentDetail;
CLASS innerFlowPosted 'Закрытый расход в отдел' : innerFlow, postedObject;

@defineDocumentBasePostedDepartmentStoreItem (innerFlow);

@defineDocumentDetailQuantity(innerFlow);

@defineDocumentDetailBasePrice(innerFlow);
@deriveBasePriceLedgerOnSkuChange(innerFlow, item);

@defineDocumentDetailBaseSum(innerFlow);

@defineDocumentHeaderQuantity(innerFlow);
@defineDocumentHeaderItemQuantity(innerFlow);

@defineDocumentHeaderBaseSum(innerFlow);
@defineDocumentHeaderItemRetailSum(innerFlow);

recipientDepartmentInnerFlow (innerFlow) = DATA departmentStore(innerFlow);
nameRecipientDepartmentInnerFlow 'Отдел-получатель' (innerFlow) = name(recipientDepartmentInnerFlow(innerFlow)) IN documentPrmGroup;

descriptionInnerFlow 'Название документа' (innerFlow) =
    [FORMULA STRING[200] '\'Расход в отдел \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberObject(innerFlow), dateInnerFlow(innerFlow), nameRecipientDepartmentInnerFlow(innerFlow));

descriptionInnerFlowDetail 'Название документа' (innerFlowDetail) = descriptionInnerFlow(innerFlowInnerFlowDetail(innerFlowDetail));

@implementBalanceSkuLedger(innerFlow, item, departmentStore);
quantityOutAutoBalanceSkuLedger (ledger) += quantityInnerFlowDetail(ledger);

@implementAccountDocumentLedger(innerFlow);
sumOutAccountDocumentLedger (ledger) += retailSumInnerFlowDetailInnerFlow(ledger);
sumItemOutAccountDocumentLedger (ledger) += retailSumItemInnerFlowDetailInnerFlow(ledger);
sumContainerOutAccountDocumentLedger (ledger) += retailSumContainerInnerFlowDetailInnerFlow(ledger);

@defineDocumentDetailPackWeightItem(innerFlow);

@defineConsignment(innerFlow);
@implementConsignment(innerFlow, departmentStore);

senderConsignment (consignment) += companyDepartmentStore(departmentStoreInnerFlow(consignment));
recipientConsignment (consignment) += companyDepartmentStore(recipientDepartmentInnerFlow(consignment));

priceConsignmentDetail (consignmentDetail) += retailPriceInnerFlowDetail(consignmentDetail);
sumConsignmentDetail (consignmentDetail) += retailSumInnerFlowDetail (consignmentDetail);
vatConsignmentDetail (consignmentDetail) += valueRetailRangeInnerFlowDetail (consignmentDetail);
sumVATConsignmentDetail (consignmentDetail) += retailVATISumInnerFlowDetail (consignmentDetail);
sumInvoiceConsignmentDetail (consignmentDetail) += retailSumInnerFlowDetail (consignmentDetail);

// расчет цен для внутреннего прихода

importerPriceItemInnerFlow 'Цена изготовителя (максим.)' (item, innerFlow) = GROUP MAX importerPriceInnerFlowDetail (innerFlowDetail)
    IF innerFlowInnerFlowDetail(innerFlowDetail) == innerFlow BY itemInnerFlowDetail(innerFlowDetail), innerFlowInnerFlowDetail(innerFlowDetail);

retailPriceItemInnerFlow 'Цена (максим.)' (item, innerFlow) = GROUP MAX retailPriceInnerFlowDetail (innerFlowDetail)
    IF innerFlowInnerFlowDetail(innerFlowDetail) == innerFlow
    BY itemInnerFlowDetail(innerFlowDetail), innerFlowInnerFlowDetail(innerFlowDetail);

supplierMarkupInnerFlowDetail 'Оптовая надбавка' (innerFlowDetail) =
    (supplierPriceInnerFlowDetail(innerFlowDetail)/importerPriceInnerFlowDetail(innerFlowDetail) - 1)*100;

// todo : все таки наверное нужно с собой тянуть надбавку (по крайней мере для реестра цен)
retailMarkupInnerFlowDetail 'Торговая надбавка' (innerFlowDetail) =
    round3([(X*100/(100+Y)/Z-1)*100](
    retailPriceInnerFlowDetail(innerFlowDetail), valueRetailRangeInnerFlowDetail(innerFlowDetail), importerPriceInnerFlowDetail(innerFlowDetail)));

noteInnerFlowDetail 'Примечание' (innerFlowDetail) =
    IF supplierMarkupInnerFlowDetail(innerFlowDetail)!=0
    THEN [FORMULA STRING[200] '\'РОЦ: \' || CAST($1 AS TEXT) ||  \'; Оптовая надбавка: \' || CAST($2 AS TEXT)||  \'; Торговая наценка: \' || CAST($3 AS TEXT)']
         (importerPriceInnerFlowDetail(innerFlowDetail), supplierMarkupInnerFlowDetail(innerFlowDetail), retailMarkupInnerFlowDetail(innerFlowDetail))
    ELSE [FORMULA STRING[200] '\'РОЦ: \' || CAST($1 AS TEXT) ||  \'; Торговая наценка: \' || CAST($2 AS TEXT)']
         (importerPriceInnerFlowDetail(innerFlowDetail), retailMarkupInnerFlowDetail(innerFlowDetail));

noteConsignmentDetail (consignmentDetail) += noteInnerFlowDetail (consignmentDetail);

showWareInnerFlow 'Есть посуда' (innerFlow) = DATA BOOLEAN (innerFlow) IN documentPrmGroup;

//----------------------------------- Внутреннее перемещение (приход) -------------------------------------------------//


CLASS innerArrival 'Приход в отдел' : incAccountDocumentLedger, historyObject, priceTransactionDocument, inputListRegister;
CLASS innerArrivalDetail 'Строка прихода в отдел' : inTransferBalanceSkuLedger, importerPriceLedger, supplierPriceLedger, accountPriceLedger, retailPriceLedger, retailRangeLedger, warePriceLedger, inputListRegisterDetail;
CLASS innerArrivalPosted 'Закрытый приход в отдел' : innerArrival, postedObject;


@defineDocumentBasePostedDepartmentStoreItem(innerArrival);

@defineDocumentHeaderPriceChange(innerArrival);
@defineDocumentHeaderListRegister(innerArrival);

@defineDocumentDetailQuantity(innerArrival);
@defineDocumentDetailBasePrice(innerArrival);
@defineDocumentDetailBaseSum(innerArrival);

@defineDocumentDetailBasePricePrefix(innerArrival, cur, ' (тек.)');
@deriveBasePriceLedgerOnSkuChangePrefix(innerArrival, cur, item);

@defineDocumentHeaderQuantity(innerArrival);
@defineDocumentHeaderItemQuantity(innerArrival);

@defineDocumentHeaderBaseSum(innerArrival);
@defineDocumentHeaderItemRetailSum(innerArrival);

innerFlowInnerArrival (innerArrival) = DATA innerFlowPosted (innerArrival);
innerArrivalInnerFlow (innerFlow) = GROUP UNIQUE innerArrival BY innerFlowInnerArrival (innerArrival);
CONSTRAINT innerFlowInnerArrival(p1) == innerFlowInnerArrival(p2) AND p1 != p2 CHECKED BY innerFlowInnerArrival MESSAGE 'Накладная задействована в другом приходе';

numberInnerArrival 'Номер накладной' (innerArrival) = numberObject(innerFlowInnerArrival(innerArrival)) IN documentHeaderGroup PERSISTENT;
seriesInnerArrival 'Серия накладной' (innerArrival) = seriesObject(innerFlowInnerArrival(innerArrival)) IN documentHeaderGroup PERSISTENT;
seriesNumberInnerArrival 'Серия/Номер' (innerArrival) = seriesNumberObject(innerFlowInnerArrival(innerArrival)) PERSISTENT;

dateInnerArrival (innerArrival) <- dateInnerFlow(innerFlowInnerArrival(innerArrival)) WHEN CHANGED(innerFlowInnerArrival(innerArrival));

senderDepartmentInnerArrival (innerArrival) = DATA departmentStore(innerArrival);
nameSenderDepartmentInnerArrival 'Отдел-отправитель' (innerArrival) = name(senderDepartmentInnerArrival(innerArrival)) IN documentPrmGroup;
senderDepartmentInnerArrival (innerArrival) <- departmentStoreInnerFlow(innerFlowInnerArrival(innerArrival))
    WHEN CHANGED(innerFlowInnerArrival(innerArrival));

showWareInnerArrival 'Есть посуда' (innerArrival) = DATA BOOLEAN (innerArrival) IN documentPrmGroup;

CONSTRAINT recipientDepartmentInnerFlow(innerFlowInnerArrival(innerArrival)) != departmentStoreInnerArrival(innerArrival) CHECKED BY innerFlowInnerArrival
    MESSAGE 'Накладная с другого отдела';

balanceBeforeInnerArrivalInnerArrivalDetail 'Остаток до' (innerArrivalDetail) = DATA NUMERIC[14,3] (innerArrivalDetail);
balanceBeforeInnerArrivalInnerArrivalDetail(innerArrivalDetail) <- balanceBSkuLedgerDateTime (
                itemInnerArrivalDetail(innerArrivalDetail), departmentStoreInnerArrivalDetail(innerArrivalDetail), dateTimeInnerArrivalDetail(innerArrivalDetail))
                WHEN CHANGED(itemInnerArrivalDetail(innerArrivalDetail));

importerPriceItemInnerArrival 'Цена изготовителя (максим.)' (item, innerArrival) = importerPriceItemInnerFlow(
    item, innerFlowInnerArrival(innerArrival));

retailPriceItemInnerArrival 'Розничная цена (максим.)' (item, innerArrival) = retailPriceItemInnerFlow (
    item, innerFlowInnerArrival(innerArrival));

quantityItemInnerFlowInnerArrival 'Количество в расходе' (item, innerArrival) = quantityInnerFlowDetailItemInnerFlow(item, innerFlowInnerArrival(innerArrival));
diffQuantityItemInnerArrival 'Расхождение' (item, innerArrival) =
    quantityItemInnerFlowInnerArrival(item, innerArrival) (-) quantityInnerArrivalDetailItemInnerArrival(item, innerArrival);

retailMarkupInnerArrivalDetail 'Торговая надбавка (расч.)' (innerArrivalDetail) =
    round3([(X*100/(100+Y)/Z-1)*100](
    retailPriceInnerArrivalDetail(innerArrivalDetail), valueRetailRangeInnerArrivalDetail(innerArrivalDetail), importerPriceInnerArrivalDetail(innerArrivalDetail)));

supplierMarkupInnerArrivalDetail 'Оптовая надбавка (расч.)' (innerArrivalDetail) =
    (supplierPriceInnerArrivalDetail(innerArrivalDetail)/importerPriceInnerArrivalDetail(innerArrivalDetail) - 1)*100;
//retailMarkupInnerArrivalDetail 'Торговая надбавка, %'(innerArrivalDetail) = DATA NUMERIC[8,3] (innerArrivalDetail) IN baseGroup;
//retailMarkupInnerArrivalDetail (innerArrivalDetail) <- calcRetailMarkupInnerArrivalDetail(innerArrivalDetail)
//                                                    WHEN CHANGED(itemInnerArrivalDetail(innerArrivalDetail));
//supplierMarkupInnerArrivalDetail 'Оптовая надбавка/торговая скидка, %' (innerArrivalDetail) = DATA NUMERIC[8,3] (innerArrivalDetail) IN priceDetailGroup;
//supplierMarkupInnerArrivalDetail (innerArrivalDetail) <- calcSupplierMarkupInnerArrivalDetail(innerArrivalDetail)
//                                                    WHEN CHANGED(itemInnerArrivalDetail(innerArrivalDetail));

importerMarkupInnerArrivalDetail '% надбавки с уч. оптовой' (innerArrivalDetail) = [X*(100+Y)/100](
    retailMarkupInnerArrivalDetail(innerArrivalDetail), supplierMarkupInnerArrivalDetail(innerArrivalDetail));

toFillInnerArrivalDetailsInnerArrival 'Заполнить документ из расхода' =  ACTION (innerArrival) {
    FOR innerArrivalInnerFlow(innerFlowInnerFlowDetail(innerFlowDetail)) == innerArrival DO {
        ADDOBJ innerArrivalDetail;
        FOR d == addedObject() DO {
            SET innerArrivalInnerArrivalDetail(d) <- innerArrival AS innerArrival;
            SET quantityInnerArrivalDetail (d) <- quantityInnerFlowDetail(innerFlowDetail);
            SET itemInnerArrivalDetail (d) <- itemInnerFlowDetail(innerFlowDetail);
            SET retailPriceInnerArrivalDetail (d) <- retailPriceInnerFlowDetail(innerFlowDetail);
            SET importerPriceInnerArrivalDetail (d) <- importerPriceInnerFlowDetail(innerFlowDetail);
            SET supplierPriceInnerArrivalDetail (d) <- supplierPriceInnerFlowDetail(innerFlowDetail);
            SET wareInnerArrivalDetail(d) <- wareInnerFlowDetail(innerFlowDetail);
            SET warePriceInnerArrivalDetail (d) <- warePriceInnerFlowDetail(innerFlowDetail);
            SET retailRangeInnerArrivalDetail (d) <- retailRangeInnerFlowDetail(innerFlowDetail);
//            SET supplierMarkupInnerArrivalDetail (d) <- supplierMarkupInnerFlowDetail(innerFlowDetail);
//            SET retailMarkupInnerArrivalDetail (d) <- retailMarkupInnerFlowDetail(innerFlowDetail);
        };
    };
} CONFIRM;

descriptionInnerArrival 'Название документа' (innerArrival) =
    [FORMULA STRING[200] '\'Приход в отдел \'|| CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberInnerArrival(innerArrival), dateInnerArrival(innerArrival), nameSenderDepartmentInnerArrival(innerArrival));

descriptionInnerArrivalDetail 'Название документа' (innerArrivalDetail) = descriptionInnerArrival(innerArrivalInnerArrivalDetail(innerArrivalDetail));

// для расчета себестоимости

quantityInnerFlowBatch (innerFlow, batch) = GROUP SUM costBalanceSkuLedgerBatch (innerFlowDetail, batch)
                                                  BY innerFlowInnerFlowDetail(innerFlowDetail), batch;

quantityInnerArrivalBatch (innerArrival, batch) = quantityInnerFlowBatch (innerFlowInnerArrival(innerArrival), batch);

quantityInnerArrivalDetailBatch (innerArrivalDetail, batch) = quantityInnerArrivalBatch(innerArrivalInnerArrivalDetail(innerArrivalDetail), batch);

limitInTransferBalanceSkuLedgerBatch (innerArrivalDetail, batch) += quantityInnerArrivalDetailBatch (innerArrivalDetail, batch);

@implementBalanceSkuLedger(innerArrival, item, departmentStore);
quantityInTransferBalanceSkuLedger(innerArrivalDetail) += quantityInnerArrivalDetail (innerArrivalDetail);

@implementBaseSkuDepartmentStoreLedger(innerArrival, item);

@implementAccountDocumentLedger(innerArrival);
sumIncAccountDocumentLedger (ledger) += retailSumInnerArrivalDetailInnerArrival(ledger);
sumItemIncAccountDocumentLedger (ledger) += retailSumItemInnerArrivalDetailInnerArrival(ledger);
sumContainerIncAccountDocumentLedger (ledger) += retailSumContainerInnerArrivalDetailInnerArrival(ledger);

isDraftPriceTransactionDocument (document) += isDraftInnerArrival(document);
descriptionPriceTransactionDocument (document) += descriptionInnerArrival(document);

//----------------------------------Для реестра цен----------------------------//

@implementInputListRegister(innerArrival, item);
@implementHeaderInputListRegisterNumberCustom(innerArrival, innerArrival);

senderListRegister (inputListRegister) += companyDepartmentStore(senderDepartmentInnerArrival(inputListRegister));
shipperListRegister (inputListRegister) += [FORMULA STRING[200] 'CAST($1 AS TEXT) || \', \' || CAST($2 AS TEXT) || \', отдел  \' || CAST($3 AS TEXT)'](
                                        nameCompanyDepartmentStore(senderDepartmentInnerArrival(inputListRegister)),
                                        nameStoreDepartmentStore(senderDepartmentInnerArrival(inputListRegister)),
                                        name(senderDepartmentInnerArrival(inputListRegister)));
supplierSumListRegisterDetailListRegister (inputListRegister) += supplierISumInnerArrivalDetailInnerArrival(inputListRegister) (+) wareSumInnerArrivalDetailInnerArrival(inputListRegister);

supplierSumListRegisterDetail (inputListRegisterDetail) += supplierISumInnerArrivalDetail(inputListRegisterDetail) (+) wareSumInnerArrivalDetail(inputListRegisterDetail);


// ---------------------------------- Дооценка на внутреннем перемещении (приход) ------------------------------------------

CLASS priceChangeInnerArrival 'Переоценка на внутреннем перемещении' : priceChangeDocument;
CLASS priceChangeInnerArrivalDetail 'Строка переоценки на внутреннем перемещении' : priceChangeDocumentDetail;

needToPriceChangeInnerArrivalDetail (innerArrivalDetail) = curRetailPriceInnerArrivalDetail(innerArrivalDetail) != retailPriceInnerArrivalDetail(innerArrivalDetail) AND
                                                   balanceBeforeInnerArrivalInnerArrivalDetail(innerArrivalDetail) != 0;

@defineDocumentPriceChange(innerArrival);
@defineDocumentPriceChangeNumberCustom(innerArrival, innerArrival);
@defineDocumentPriceChangeSku(innerArrival, item);

quantityPriceChangeInnerArrivalDetail 'Остаток' (priceChangeInnerArrivalDetail) =
    balanceBeforeInnerArrivalInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

@defineDocumentPriceChangePrice(innerArrival);
@defineDocumentPriceChangePricePrefix(innerArrival, cur, cur, ' (тек.)');

senderDepartmentPriceChangeInnerArrival (priceChangeInnerArrival) = senderDepartmentInnerArrival(innerArrivalPriceChangeInnerArrival(priceChangeInnerArrival));
nameSenderDepartmentPriceChangeInnerArrival 'Отдел-отправитель' (priceChangeInnerArrival) = name(senderDepartmentPriceChangeInnerArrival(priceChangeInnerArrival));

@implementPriceChangeDocument(priceChangeInnerArrival, sku);
@implementPriceChangeDocumentDetailAllPrice(priceChangeInnerArrival);

//----------------------------- Возврат поставщику ---------------------------------------------------------------//

CLASS returnSupplier 'Возврат поставщику' : outAccountDocumentLedger, historyObject, numberedObject, consignment;
CLASS returnSupplierDetail 'Строка возврата поставщику' : outUserBalanceSkuLedger, consignmentDetail;
CLASS returnSupplierPosted 'Закрытый возврат поставщику' : returnSupplier, postedObject;

@defineDocumentBasePostedDepartmentStoreItem(returnSupplier);

@defineDocumentHeaderSupplierContract(returnSupplier);
@defineDocumentHeaderPriceChange(returnSupplier);

@defineDocumentDetailItemExtra(returnSupplier);

@defineDocumentDetailQuantity(returnSupplier);

@defineDocumentDetailBasePrice(returnSupplier);
@defineDocumentDetailBaseSum(returnSupplier);

@defineDocumentDetailInvoicePrice(returnSupplier);
@defineDocumentDetailInvoiceSum(returnSupplier);

@defineDocumentDetailBasePricePrefix(returnSupplier, cur, ' (тек.)');
@deriveBasePriceLedgerOnSkuChangePrefix(returnSupplier, cur, item);

@defineDocumentHeaderQuantity(returnSupplier);

@defineDocumentHeaderBaseSum(returnSupplier);
@defineDocumentHeaderItemRetailSum(returnSupplier);

@defineDocumentHeaderInvoiceSum(returnSupplier);

// количество/цены по строкам

batchReturnSupplierDetail = DATA shipmentDetail (returnSupplierDetail) IN idGroup;
commonInfoBatchReturnSupplierDetail 'Партия' (returnSupplierDetail) = descriptionShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail));

// Запись "старых" значений в документ

importerPriceReturnSupplierDetail (returnSupplierDetail) <- importerPriceShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                    WHEN CHANGED(batchReturnSupplierDetail(returnSupplierDetail));

supplierPriceReturnSupplierDetail (returnSupplierDetail) <- supplierPriceShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                    WHEN CHANGED(batchReturnSupplierDetail(returnSupplierDetail));

supplierMarkupReturnSupplierDetail (returnSupplierDetail) <- supplierMarkupShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                             WHEN CHANGED(batchReturnSupplierDetail(returnSupplierDetail));

supplierRangeReturnSupplierDetail (returnSupplierDetail) <- supplierRangeShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                             WHEN CHANGED(batchReturnSupplierDetail(returnSupplierDetail));

wareReturnSupplierDetail (returnSupplierDetail) <- wareShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                   WHEN CHANGED(batchReturnSupplierDetail(returnSupplierDetail));

warePriceReturnSupplierDetail (returnSupplierDetail) <- warePriceShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                        WHEN CHANGED(batchReturnSupplierDetail(returnSupplierDetail));

retailRangeReturnSupplierDetail (returnSupplierDetail) <- retailRangeShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                             WHEN CHANGED(batchReturnSupplierDetail(returnSupplierDetail));

retailPriceReturnSupplierDetail (returnSupplierDetail) <- retailPriceShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                          WHEN CHANGED(batchReturnSupplierDetail(returnSupplierDetail));

//Потери при возврате

returnLossSupplierReturnSupplier '% потерь при возврате' (returnSupplier) = DATA NUMERIC[8,3] (returnSupplier) IN documentPrmGroup;

returnLossSupplierReturnSupplier (returnSupplier) <- returnLossSupplier(supplierReturnSupplier(returnSupplier))
    WHEN CHANGED(supplierReturnSupplier(returnSupplier));

lossSumCleanSupplierReturnSupplier 'Сумма потерь при возврате (без НДС)' (returnSupplier) =
    invoiceISumReturnSupplierDetailReturnSupplier (returnSupplier) * returnLossSupplierReturnSupplier(returnSupplier);

lossSumIncVATReturnSupplier 'Сумма НДС по потерям при возврате' (returnSupplier) =
    invoiceVATSumReturnSupplierDetailReturnSupplier (returnSupplier) * returnLossSupplierReturnSupplier(returnSupplier);

carryingChargesReturnSupplier 'Транспортные расходы' (returnSupplier) = DATA NUMERIC[16,2] (returnSupplier) IN documentSumGroup;

sumQuantityItemShipment (departmentStore, supplier, item) =
    GROUP SUM quantityShipmentDetail(shipmentDetail) AND isPostedShipmentDetail(shipmentDetail)
    BY departmentStoreShipmentDetail(shipmentDetail), supplierShipmentDetail(shipmentDetail), itemShipmentDetail(shipmentDetail);

CONSTRAINT itemShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail)) != itemReturnSupplierDetail(returnSupplierDetail)
    OR departmentStoreShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail)) != departmentStoreReturnSupplierDetail(returnSupplierDetail)
    OR supplierShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail)) != supplierReturnSupplierDetail(returnSupplierDetail)
    OR isNotPostedShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
    CHECKED BY batchReturnSupplierDetail MESSAGE 'Выберите партию этого товара';

CONSTRAINT quantityReturnSupplierDetail(returnSupplierDetail) > quantityShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
    MESSAGE 'Выбрано количество товара больше чем в приходе';


descriptionReturnSupplier 'Название документа' (returnSupplier) =
    [FORMULA STRING[200] '\'Возврат поставщику \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'] (
    seriesNumberObject(returnSupplier), dateReturnSupplier(returnSupplier), nameSupplierReturnSupplier(returnSupplier));

descriptionReturnSupplierDetail 'Название документа' (returnSupplierDetail) = descriptionReturnSupplier(returnSupplierReturnSupplierDetail(returnSupplierDetail));

@implementBalanceSkuLedger(returnSupplier, item, departmentStore);
quantityOutUserBalanceSkuLedger (ledger) += quantityReturnSupplierDetail(ledger);
batchOutUserBalanceSkuLedger (ledger) += batchReturnSupplierDetail(ledger);

@implementAccountDocumentLedger(returnSupplier);
sumOutAccountDocumentLedger (ledger) += retailSumReturnSupplierDetailReturnSupplier(ledger);
sumItemOutAccountDocumentLedger (ledger) += retailSumItemReturnSupplierDetailReturnSupplier(ledger);
sumContainerOutAccountDocumentLedger (ledger) += retailSumContainerReturnSupplierDetailReturnSupplier(ledger);

// для возвратной накладной (шапка и хвост)

@defineDocumentDetailPackWeightItem(returnSupplier);

@defineConsignment(returnSupplier);
@implementConsignment(returnSupplier, departmentStore);

senderConsignment (consignment) += companyDepartmentStore(departmentStoreReturnSupplier(consignment));
recipientConsignment (consignment) += supplierReturnSupplier(consignment);

isWareConsignment (consignment) += consignment IS returnSupplier;
wareSumConsignmentDetailConsignment  (consignment) += wareSumReturnSupplierDetailReturnSupplier (consignment);
supplierSumConsignmentDetailConsignment (consignment) += supplierSumReturnSupplierDetailReturnSupplier (consignment);

priceConsignmentDetail (consignmentDetail) += supplierPriceReturnSupplierDetail (consignmentDetail);
sumConsignmentDetail (consignmentDetail) += supplierISumReturnSupplierDetail (consignmentDetail);
vatConsignmentDetail (consignmentDetail) += valueSupplierRangeReturnSupplierDetail (consignmentDetail);
sumVATConsignmentDetail (consignmentDetail) += supplierVATISumReturnSupplierDetail (consignmentDetail);
sumInvoiceConsignmentDetail (consignmentDetail) += invoiceISumReturnSupplierDetail (consignmentDetail);

wareConsignmentDetail (consignmentDetail) += wareReturnSupplierDetail(consignmentDetail);
warePriceConsignmentDetail (consignmentDetail) += warePriceReturnSupplierDetail(consignmentDetail);
wareSumConsignmentDetail  (consignmentDetail) += wareSumReturnSupplierDetail(consignmentDetail);
valueWareRangeConsignmentDetail (consignmentDetail) += valueWareRangeReturnSupplierDetail(consignmentDetail);
wareVATSumConsignmentDetail (consignmentDetail) += wareVATSumReturnSupplierDetail(consignmentDetail);
wareSupplierPriceConsignmentDetail (consignmentDetail) += wareSupplierPriceReturnSupplierDetail(consignmentDetail);
wareSupplierSumConsignmentDetail (consignmentDetail) += wareSupplierSumReturnSupplierDetail(consignmentDetail);

// ---------------------------------- Переоценка на возврате ------------------------------------------

CLASS priceChangeReturnSupplier 'Переоценка на возврате' : priceChangeDocument;
CLASS priceChangeReturnSupplierDetail 'Строка переоценки на возврате' : priceChangeDocumentDetail;

needToPriceChangeReturnSupplierDetail (returnSupplierDetail) = retailPriceReturnSupplierDetail(returnSupplierDetail) != curRetailPriceReturnSupplierDetail(returnSupplierDetail);

@defineDocumentPriceChange(returnSupplier);
@defineDocumentPriceChangeNumber(returnSupplier);
@defineDocumentPriceChangeSku(returnSupplier, item);
@defineDocumentPriceChangeQuantity(returnSupplier);
@defineDocumentPriceChangePrice(returnSupplier);
@defineDocumentPriceChangePricePrefix(returnSupplier, cur, cur, ' (тек.)');

supplierPriceChangeReturnSupplier (priceChangeReturnSupplier) = supplierReturnSupplier(returnSupplierPriceChangeReturnSupplier(priceChangeReturnSupplier));
nameSupplierPriceChangeReturnSupplier 'Поставщик' (priceChangeReturnSupplier) = name(supplierPriceChangeReturnSupplier(priceChangeReturnSupplier));

@implementPriceChangeDocument(priceChangeReturnSupplier, sku);
@implementPriceChangeDocumentDetailAllPrice(priceChangeReturnSupplier);

// ----------------------------- Z - отчеты ---------------------------- //

CLASS zReport 'Z-отчет (открытый)' : outAccountDocumentLedger, historyObject;
CLASS zReportPosted 'Z-отчет (закрытый)' : zReport, postedObject;

TABLE zReport (zReport);

@defineDocumentHeaderPosted(zReport);

@defineDocumentHeaderTime(zReport);
@defineDocumentHeaderDepartmentStore(zReport);

numberZReport 'Номер Z-отчета' (zReport) = DATA INTEGER(zReport) IN documentPrmGroup;
numberToZReportPosted (zReportPosted) = GROUP UNIQUE zReportPosted BY numberZReport (zReportPosted) WHERE zReportPosted IS zReportPosted;

cashRegisterZReport (zReport) = DATA cashRegister(zReport);
numberCashRegisterZReport 'Касса Z-отчета' (zReport) = numberCashRegister(cashRegisterZReport(zReport)) IN documentPrmGroup;

departmentStoreZReport(zReport) <- departmentStoreMachinery(cashRegisterZReport(zReport))
    WHEN CHANGED(cashRegisterZReport(zReport));

descriptionZReport (zReport) =
    [FORMULA STRING[200] '\'Продажа по кассе \' || CAST($1 AS TEXT) || \' отдела \' || CAST($2 AS TEXT) ||  \' от \' || CAST($3 AS TEXT)'](
    numberCashRegisterZReport(zReport), nameDepartmentStoreZReport(zReport), dateZReport(zReport));

//----------------------------------------------- Чеки ---------------------------------------------------//

CLASS bill 'Чек' : historyObject;

CLASS ABSTRACT billDetail 'Строка чека';
CLASS billSaleDetail 'Строка продажи' : billDetail, outAutoBalanceSkuLedger, salesLedger;
CLASS billReturnDetail 'Строка возврата' : billDetail, inAutoBalanceSkuLedger;

TABLE bill (bill);
TABLE billSaleDetail (billSaleDetail);
TABLE billReturnDetail (billReturnDetail);

@defineDocumentRelationCustom(zReport, bill);

@defineDocumentHeaderTime(bill);

@defineDocumentDetailDepartmentStoreCustom(zReport, bill);
@defineDocumentDetailPostedCustom(zReport, bill);

@defineDocumentRelationCustom(bill, billSaleDetail);
@defineDocumentRelationCustom(bill, billReturnDetail);
billBillDetail (billDetail) = billBillReturnDetail(billDetail) OR billBillSaleDetail(billDetail);

@defineDocumentDetailTimeCustom(bill, billSaleDetail);
@defineDocumentDetailTimeCustom(bill, billReturnDetail);
dateTimeBillDetail 'Дата/время' (billDetail) = dateTimeBillReturnDetail(billDetail) OR dateTimeBillSaleDetail(billDetail);

@defineDocumentDetailPostedCustom(bill, billSaleDetail);
@defineDocumentDetailPostedCustom(bill, billReturnDetail);
isPostedBillDetail 'Закрыт' (billDetail) = isPostedBillReturnDetail(billDetail) OR isPostedBillSaleDetail(billDetail);

@defineDocumentDetailDepartmentStoreCustom(bill, billSaleDetail);
@defineDocumentDetailDepartmentStoreCustom(bill, billReturnDetail);
departmentStoreBillDetail (billDetail) = departmentStoreBillReturnDetail(billDetail) OR departmentStoreBillSaleDetail(billDetail);

@defineDocumentDetailItem(billSale);
@defineDocumentDetailItem(billReturn);
itemBillDetail (billDetail) = itemBillReturnDetail(billDetail) OR itemBillSaleDetail(billDetail);
nameAttributeItemBillDetail 'Товар' (billDetail) = nameAttributeItem(itemBillDetail(billDetail)) IN recognizeGroup;

numberBill 'Номер чека' (bill) = DATA INTEGER (bill) IN documentHeaderGroup;
zReportBillToBill (zReport, bill) = GROUP UNIQUE bill BY numberZReport(zReportBill(bill)), numberBill(bill) WHERE bill IS bill;

discountCardBill (bill) = DATA discountCard (bill);
numberDiscountCardBill 'Номер дисконтной карты' (bill) = numberDiscountCard(discountCardBill(bill));
nameCustomerDiscountCardBill 'Держатель дисконтной карты' (bill) = nameCustomerDiscountCard(discountCardBill(bill));

zReportBillDetail (billDetail) = zReportBill(billBillDetail(billDetail));

idBarcodeBillDetail 'Штрих-код' (billDetail) = DATA STRING[14] (billDetail);

quantityBillSaleDetail 'Количество' (billDetail) = DATA NUMERIC[14,3] (billSaleDetail);
retailPriceBillSaleDetail 'Цена' (billDetail) = DATA NUMERIC[14,2] (billSaleDetail);
retailSumBillSaleDetail 'Сумма' (billDetail) = DATA NUMERIC[16,2] (billSaleDetail);
discountSumBillSaleDetail 'Сумма скидки' (billDetail) = DATA NUMERIC[16,2] (billSaleDetail);

quantityBillReturnDetail 'Количество' (billDetail) = DATA NUMERIC[14,3] (billReturnDetail);
retailPriceBillReturnDetail 'Цена' (billDetail) = DATA NUMERIC[14,2] (billReturnDetail);
retailSumBillReturnDetail 'Сумма' (billDetail) = DATA NUMERIC[16,2] (billReturnDetail);
discountSumBillReturnDetail 'Сумма скидки' (billDetail) = DATA NUMERIC[16,2] (billReturnDetail);

quantityBillDetail 'Количество' (billDetail) = quantityBillReturnDetail(billDetail) OR quantityBillSaleDetail(billDetail);
retailPriceBillDetail 'Цена' (billDetail) = retailPriceBillReturnDetail(billDetail) OR retailPriceBillSaleDetail(billDetail);
retailSumBillDetail 'Сумма' (billDetail) = retailSumBillReturnDetail(billDetail) OR retailSumBillSaleDetail(billDetail);
discountSumBillDetail 'Сумма скидки' (billDetail) = discountSumBillReturnDetail(billDetail) OR discountSumBillSaleDetail(billDetail);

retailSumSaleBillDetailSaleBill 'Сумма продажи' (bill) = GROUP SUM retailSumBillSaleDetail(billDetail)
    BY billBillSaleDetail (billDetail) IN documentSumGroup PERSISTENT;

retailSumReturnBillDetailReturnBill 'Сумма возврата' (bill) = GROUP SUM retailSumBillReturnDetail(billDetail)
    BY billBillReturnDetail (billDetail) IN documentSumGroup PERSISTENT;

retailSumBillDetailBill 'Сумма чека' (bill) = retailSumSaleBillDetailSaleBill(bill) (-) retailSumReturnBillDetailReturnBill(bill);

discountSumSaleBillDetailSaleBill 'Сумма скидки (продажи)' (bill) = GROUP SUM discountSumBillSaleDetail(billDetail)
    BY billBillSaleDetail (billDetail) IN documentSumGroup;

discountSumReturnBillDetailReturnBill 'Сумма скидки (возврат)' (bill) = GROUP SUM discountSumBillReturnDetail(billDetail)
    BY billBillReturnDetail (billDetail) IN documentSumGroup;

discountSumBillDetailBill 'Сумма скидки' (bill) = discountSumSaleBillDetailSaleBill(bill) (-) discountSumReturnBillDetailReturnBill(bill);

@defineDocumentHeaderCount(bill);

@defineDocumentHeaderQuantity(bill);
@defineDocumentHeaderItemQuantity(bill);

retailRangeBillSaleDetail = DATA range (billSaleDetail);
retailRangeBillReturnDetail = DATA range (billReturnDetail);
retailRangeBillDetail (billDetail) = retailRangeBillReturnDetail(billDetail) OR retailRangeBillSaleDetail(billDetail);
@derivePriceLedgerOnSkuChange(retailRange, bill, item);

// используется только для приема реализации из внешних касс
numberBillDetail 'Номер позиции чека' = DATA INTEGER (billDetail);
zReportBillBillDetailToBillDetail (zReport, bill, billDetail) = GROUP UNIQUE billDetail BY numberZReport(zReportBillDetail(billDetail)), numberBill(billBillDetail(billDetail)), numberBillDetail(billDetail) WHERE billDetail IS billDetail;
//

addBillDetailBarcodeFill 'Добавить продажу по штрих-коду' = ACTION (bill) {
    FORM barcodeInput MODAL;

    IF formResult() == formResult.ok THEN {
         SET tmpSku() <- skuBarcodeIdDate(chosenString('barcode'), dateBill(bill));
         IF tmpSku() IS item THEN {
             ADDOBJ billSaleDetail;
             FOR o == addedObject() DO {
                 SET billBillSaleDetail(o) <- bill AS bill;
                 SET itemBillDetail(o) <- tmpSku();
                 SET idBarcodeBillDetail(o) <- chosenString('barcode');
            //   SET quantity###object##Detail(o) <- amountBarcode(barcodeIdDate(chosenString('barcode'), date###object(object)));
            };
        } ELSE
        MESSAGE 'Не найден штрих-код';
    };

} TOOLBAR EDITKEY 'F4';

descriptionBill 'Название документа' (bill) = [FORMULA STRING[200] '\'Чек № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) '](
                                               numberBill(bill), dateTimeBill(bill));

descriptionBillSaleDetail (billDetail) = [FORMULA STRING[200] '\'Продажа № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) '] (
                                          numberBill(billBillSaleDetail(billDetail)), dateTimeBill(billBillSaleDetail(billDetail)));

descriptionBillReturnDetail (billDetail) = [FORMULA STRING[200] '\'Возврат № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) '] (
                                            numberBill(billBillReturnDetail(billDetail)), dateTimeBill(billBillReturnDetail(billDetail)));

descriptionBillDetail (billDetail) = descriptionBillReturnDetail(billDetail) OR descriptionBillSaleDetail(billDetail);

@implementBalanceSkuLedger(bill, item, departmentStore);
quantityOutAutoBalanceSkuLedger (ledger) += quantityBillSaleDetail(ledger);
quantityInAutoBalanceSkuLedger (ledger) += quantityBillReturnDetail(ledger);

@implementSalesLedgerStore(billSale);

// ----------------- Оплаты по чеку ------------------------------

CLASS payment 'Оплата по чеку';
TABLE payment (payment);

CLASS STATIC paymentMeans 'Форма оплаты'{
    cash 'Наличные',
    card 'Карточка'
};
CLASS paymentType 'Тип платежа' : named;
TABLE paymentType (paymentType);

paymentMeansPaymentType (paymentType) = DATA paymentMeans (paymentType);
namePaymentMeansPaymentType 'Форма оплаты' (paymentType) = name(paymentMeansPaymentType(paymentType)) IN baseGroup;

sidPaymentType 'Идентификатор' = DATA STRING[10] (paymentType) IN baseGroup;
sidToTypePayment (tp) = GROUP UNIQUE paymentType BY sidPaymentType(paymentType) WHERE paymentType IS paymentType;

billPayment (payment) = DATA bill (payment);

numberPayment 'Номер платежа' (payment) = DATA INTEGER (payment);
zReportBillPaymentToPayment (zReport, bill, number) = GROUP UNIQUE payment BY numberZReport(zReportBill(billPayment(payment))), numberBill(billPayment(payment)), numberPayment(payment) WHERE payment IS payment;

sumPayment 'Сумма платежа' (payment) = DATA NUMERIC[16,2] (payment);

sumPaymentBill (bill) = GROUP SUM sumPayment(payment) BY billPayment(payment);

CONSTRAINT bill IS bill AND NOT retailSumBillDetailBill(bill) == sumPaymentBill(bill) MESSAGE 'Сумма платежей по чеку не соответствует сумме чека';

// todo: проверить работает ли CONSTRAINT

paymentTypePayment (payment) = DATA paymentType(payment);
namePaymentTypePayment 'Тип платежа' (payment) = name(paymentTypePayment(payment));

paymentMeansPayment (payment) = paymentMeansPaymentType(paymentTypePayment(payment));
namePaymentMeansPayment 'Форма оплаты' (payment) = name(paymentMeansPayment(payment));

// Итоги по Z-отчету

@defineDocumentHeaderQuantityCustom(zReport, billDetail);

retailSumBillDetailZReport 'Сумма Z-отчета' (zReport) = GROUP SUM retailSumBillDetailBill(bill) BY zReportBill(bill) PERSISTENT IN documentSumGroup;
discountSumBillDetailZReport 'Сумма скидок Z-отчета' (zReport) = GROUP SUM discountSumBillDetailBill(bill) BY zReportBill(bill) PERSISTENT IN documentSumGroup;

@implementAccountDocumentLedger(zReport);
sumOutAccountDocumentLedger (ledger) += retailSumBillDetailZReport(ledger);
sumItemOutAccountDocumentLedger (ledger) += retailSumBillDetailZReport(ledger);
sumContainerOutAccountDocumentLedger (ledger) += 0.0 IF ledger IS zReport;

//---------------------------- Кассовые отчеты ----------------------------------------//
CLASS cashReport 'Кассовый отчет' : transaction;
TABLE cashReport (cashReport);

CLASS cashDocument 'Кассовый документ';
TABLE cashDocument (cashDocument);

CLASS incomeCashOrder 'ПКО': cashDocument;
CLASS outcomeCashOrder 'РКО': cashDocument;
CLASS bankCardsReport 'Отчет по банковским карточкам': cashDocument;

numberCashReport 'Номер кассового отчета' (cashReport) = DATA INTEGER (cashReport) IN baseGroup;
startDateCashReport 'Дата начала' (cashReport) = DATA DATE (cashReport) IN baseGroup;
endDateCashReport 'Дата окончания' (cashReport) = DATA DATE (cashReport) IN baseGroup;

reportCashDocument 'Отчет документа (ИД)' (cashDocument) = DATA cashReport (cashDocument) IN idGroup;
numberCashDocument 'Номер документа' (cashDocument) = DATA INTEGER (cashDocument) IN baseGroup;
sumCashDocument 'Сумма документа' (cashDocument) = DATA NUMERIC[16,2] (cashDocument) IN baseGroup;
dopInfoCashDocument 'Описание' (cashDocument) = DATA STRING[10] (cashDocument) IN baseGroup;

@defineAggregation(zReport, incomeCashOrder, isPostedZReport);

retailSumIncomeCashOrder(incomeCashOrder) = retailSumBillDetailZReport(zReportIncomeCashOrder(incomeCashOrder));
sumCashDocument (incomeCashOrder) <- retailSumIncomeCashOrder(incomeCashOrder) WHEN CHANGED(retailSumIncomeCashOrder(incomeCashOrder));

cashRegisterIncomeCashOrder (incomeCashOrder) = cashRegisterZReport(zReportIncomeCashOrder(incomeCashOrder));
numberCashRegisterIncomeCashOrder 'Номер кассы' (incomeCashOrder) = numberCashRegister(cashRegisterIncomeCashOrder(incomeCashOrder));

infoCashDocument 'Основание документа' (cashDocument) = UNION EXCLUSIVE numberCashRegisterIncomeCashOrder(cashDocument), dopInfoCashDocument (cashDocument);

FORM cashReport 'Кассовый отчет'
    OBJECTS r=cashReport FIXED PANEL
    OBJECTS d=cashDocument
    PROPERTIES (r) numberCashReport, startDateCashReport, endDateCashReport
    PROPERTIES (d) objectClassName, numberCashDocument, infoCashDocument, sumCashDocument, ADDOBJ, delete
    FILTERS reportCashDocument(d) == r
    EDIT cashReport OBJECT r
;

FORM cashReports 'Кассовые отчеты'
    OBJECTS r=cashReport, d=cashDocument

    PROPERTIES (r) startDateCashReport, endDateCashReport
    PROPERTIES (r) ADDFORM, EDITFORM, delete
    PROPERTIES (d) READONLY numberCashDocument, sumCashDocument

    FILTERS reportCashDocument(d) == r
;

DESIGN cashReports FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD r.box;
        ADD d.box;
    }

    ADD functions.box;
}

// документ скидок для товарного отчета
CLASS saleDiscountDocument 'Скидка по продаже через кассы' : outAccountDocumentLedger;
TABLE saleDiscountDocument (saleDiscountDocument);

@defineAggregation(zReport, saleDiscountDocument, discountSumBillDetailZReport);
@defineDocumentHeaderAggregation(zReport, saleDiscountDocument);
@defineDocumentHeaderAggregationDepartmentStore(zReport, saleDiscountDocument);

numberCashRegisterSaleDiscountDocument (saleDiscountDocument) = numberCashRegisterZReport(zReportSaleDiscountDocument(saleDiscountDocument));

discountSaleDiscountDocument (saleDiscountDocument) = discountSumBillDetailZReport(zReportSaleDiscountDocument(saleDiscountDocument));

descriptionSaleDiscountDocument (saleDiscountDocument) =
    [FORMULA STRING[200] '\'Скидка по кассе \' || CAST($1 AS TEXT) || \' отдела \' || CAST($2 AS TEXT) ||  \' от \' || CAST($3 AS TEXT)'](
    numberCashRegisterSaleDiscountDocument(saleDiscountDocument), nameDepartmentStoreSaleDiscountDocument(saleDiscountDocument), dateSaleDiscountDocument(saleDiscountDocument));

@implementAccountDocumentLedger(saleDiscountDocument);
sumOutAccountDocumentLedger (ledger) += discountSaleDiscountDocument(ledger);
sumItemOutAccountDocumentLedger (ledger) += discountSaleDiscountDocument(ledger);
sumContainerOutAccountDocumentLedger (ledger) += 0.0 IF ledger IS saleDiscountDocument;

//----------------------------------------------- Переоценка товара ---------------------------------------------------//

CLASS userPriceChange 'Переоценка товаров' : priceChangeDocument, numeratedObject, priceTransactionDocument, historyObject;
CLASS userPriceChangeDetail 'Строка переоценки товаров' : priceChangeDocumentDetail, importerPriceLedger, supplierPriceLedger, accountPriceLedger, retailPriceLedger, retailRangeLedger, warePriceLedger;
CLASS userPriceChangePosted 'Закрытая переоценка товаров' : userPriceChange, postedObject;

@defineDocumentBasePostedDepartmentStoreItem(userPriceChange);

numberUserPriceChange (userPriceChange) = numberObject(userPriceChange) AND userPriceChange IS userPriceChange;
seriesUserPriceChange (userPriceChange) = seriesObject(userPriceChange) AND userPriceChange IS userPriceChange;

@defineDocumentDetailQuantity(userPriceChange);
@defineDocumentDetailBasePrice(userPriceChange);

@defineDocumentDetailBasePricePrefix(userPriceChange, cur, ' (тек.)');
@deriveBasePriceLedgerOnSkuChangePrefix(userPriceChange, cur, item);

@defineDocumentHeaderItemQuantity(userPriceChange);

@defineDocumentHeaderPriceChange(userPriceChange);

descriptionUserPriceChange 'Название документа' (userPriceChange) =
    [FORMULA STRING[200] '\'Акт переоценки \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT)'](
    seriesNumberObject(userPriceChange), dateUserPriceChange(userPriceChange));

descriptionUserPriceChangeDetail 'Название документа' (userPriceChangeDetail) = descriptionUserPriceChange(userPriceChangeUserPriceChangeDetail(userPriceChangeDetail));

@implementBaseSkuDepartmentStoreLedger(userPriceChange, item);

@implementPriceChangeDocument(userPriceChange, item);
@implementPriceChangeDocumentDetailAllPrice(userPriceChange);

isDraftPriceTransactionDocument (document) += isDraftUserPriceChange(document);
descriptionPriceTransactionDocument (document) += descriptionUserPriceChange(document);

//------------------------------------ Проверка на запрет переоценки ------------------------------------------------- //

isPriceChangeWrongUserPriceChange (userPriceChangeDetail) =
    retailPriceUserPriceChangeDetail(userPriceChangeDetail) < curRetailPriceUserPriceChangeDetail(userPriceChangeDetail)
    IF banMarkdownItem(itemUserPriceChangeDetail(userPriceChangeDetail)) == TRUE;

CONSTRAINT isPriceChangeWrongUserPriceChange (userPriceChangeDetail) MESSAGE 'Уценка товара запрещена';

//----------------------------------- Пересорт товара -------------------------------------------------------

CLASS disparity 'Пересортица' : historyObject, numeratedObject, priceTransactionDocument;
CLASS disparityPosted 'Закрытая пересортица' : disparity, postedObject;
CLASS disparityDetail 'Строка пересортицы': outAutoBalanceSkuLedger;

@defineDocumentBasePostedDepartmentStoreItem(disparity);
@defineDocumentHeaderPriceChange(disparity);

@defineDocumentDetailQuantity(disparity);

@defineDocumentDetailBasePrice(disparity);
@derivePrevBasePriceLedgerOnSkuChange(disparity, item);

@defineDocumentDetailBaseSum(disparity);

@defineDocumentHeaderQuantity(disparity);
@defineDocumentHeaderBaseSum(disparity);

descriptionDisparityDetail 'Название документа' (disparityDetail) =
    [FORMULA STRING[200] '\'Пересортица (расход)\' ||  \' \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'](
    seriesNumberObject(disparityDisparityDetail(disparityDetail)), dateDisparity(disparityDisparityDetail(disparityDetail)));

@implementBalanceSkuLedger(disparity, item, departmentStore);
quantityOutAutoBalanceSkuLedger (ledger) += quantityDisparityDetail(ledger);

                                  // Приход

@defineDocumentDetailItemPrefix(disparity, input, ' (приход)');

@defineDocumentDetailQuantityPrefix(disparity, input, ' (приход)');

@defineDocumentDetailBasePricePrefix(disparity, input, ' (приход)');
@derivePrevBasePriceLedgerOnSkuChangePrefix(disparity, input, inputItem);

//@defineDocumentDetailRetailSumPrefix(disparity, input, ' (приход)');
inputRetailSumDisparityDetail 'Розничная сумма (приход)'(disparityDetail) = round0(inputQuantityDisparityDetail(disparityDetail) * inputRetailPriceDisparityDetail(disparityDetail));
//inputQuantityDisparityDetailDisparity 'Кол-во (всего) (приход)' (disparityDetail) = GROUP SUM inputQuantityDisparityDetail(disparityDetail) BY disparityDisparityDetail(disparityDetail) IN documentSumGroup PERSISTENT;
@defineDocumentHeaderQuantityPrefix(disparity, input, ' (приход)');
@defineDocumentHeaderRetailSumPrefix(disparity, input, ' (приход)');

                                  // Текущее значение расхода //

@defineDocumentDetailBasePricePrefix(disparity, inputCur, ' (тек.)');
@derivePrevBasePriceLedgerOnSkuChangePrefix(disparity, inputCur, inputItem);

balanceBeforeDisparityDetail 'Остаток до пересорта (расход)' (disparityDetail) = DATA NUMERIC[14,3] (disparityDetail) IN baseGroup;
balanceBeforeDisparityDetail (disparityDetail) <- balanceBSkuLedgerDateTime (
                itemDisparityDetail(disparityDetail), departmentStoreDisparityDetail(disparityDetail), dateTimeDisparityDetail(disparityDetail))
                WHEN CHANGED(itemDisparityDetail(disparityDetail));

//----------------------------  Изменение остатка пересорт --------------------------------------------//

CLASS inputDisparityDetail 'Приход пересортицы' : batch, importerPriceLedger, supplierPriceLedger, retailRangeLedger, accountPriceLedger, retailPriceLedger;
TABLE inputDisparityDetail (inputDisparityDetail);

needToInputDisparityDetailDetail (disparityDetail) = inputQuantityDisparityDetail(disparityDetail) > 0
    AND isPostedDisparityDetail(disparityDetail);

@defineAggregation(disparityDetail, inputDisparityDetail, needToInputDisparityDetailDetail);

@defineDocumentDetailAggregationHeader(disparity, inputDisparity);
@defineDocumentDetailAggregationDepartmentStore(disparity, inputDisparity);
@defineDocumentDetailAggregationItemPrefix(disparity, inputDisparity, input);
quantityInputDisparityDetail(inputDisparityDetail) = inputQuantityDisparityDetail(disparityDetailInputDisparityDetail(inputDisparityDetail));

@defineDocumentDetailAggregationPricePrefix(disparity, inputDisparity, input, , );

dateExpireInputDisparityDetail 'Годен до' (inputDisparityDetail) = DATA DATE(inputDisparityDetail) IN baseGroup;

descriptionInputDisparityDetail 'Название документа' (inputDisparityDetail) =
    [FORMULA STRING[200] '\'Пересортица (приход)\' ||  \' \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'](
    seriesNumberObject(disparityDisparityDetail(disparityDetailInputDisparityDetail(inputDisparityDetail))), dateDisparity(disparityDisparityDetail(disparityDetailInputDisparityDetail(inputDisparityDetail))));

@implementBalanceSkuLedger(inputDisparity, item, departmentStore);
@implementBatch(inputDisparity, item);
quantityBatch (ledger) += quantityInputDisparityDetail(ledger);
dateExpireBatch (ledger) += dateExpireInputDisparityDetail(ledger);

@implementBaseISkuDepartmentStoreLedger(inputDisparity, item);

descriptionDisparity 'Название документа' (disparity) =
    [FORMULA STRING[200] '\'Пересортица \' ||  \' \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'](
    seriesNumberObject(disparity), dateDisparity(disparity));

isDraftPriceTransactionDocument (document) += isDraftDisparity(document);
descriptionPriceTransactionDocument (document) += descriptionDisparity(document);
// ---------------------------------- Дооценка остатка при пересорте ------------------------------------------

inputBalanceBeforeDisparityDetail 'Остаток до пересорта (приход)' (disparityDetail) = DATA NUMERIC[14,3] (disparityDetail) IN priceDetailGroup;
inputBalanceBeforeDisparityDetail (disparityDetail) <- balanceBSkuLedgerDateTime (
                inputItemDisparityDetail(disparityDetail), departmentStoreDisparityDetail(disparityDetail), dateTimeDisparityDetail(disparityDetail))
                WHEN CHANGED(inputItemDisparityDetail(disparityDetail));

CLASS priceChangeInputDisparity 'Переоценка остатка при пересортице' : priceChangeDocument;
CLASS priceChangeInputDisparityDetail 'Строка переоценки остатка при пересортице' : priceChangeDocumentDetail;

needToPriceChangeInputDisparityDetail (disparityDetail) = inputCurRetailPriceDisparityDetail(disparityDetail) != inputRetailPriceDisparityDetail(disparityDetail) AND
                                                   inputBalanceBeforeDisparityDetail(disparityDetail) !=0;

needToPriceChangeInputDisparity (disparity) = GROUP SUM 1 IF needToPriceChangeInputDisparityDetail(disparityDetail) BY disparityDisparityDetail(disparityDetail);

@defineDocumentAggregation(disparity, priceChangeInputDisparity, needToPriceChangeInputDisparity);
@defineDocumentHeaderAggregation(disparity, priceChangeInputDisparity);
@defineDocumentHeaderAggregationDepartmentStore(disparity, priceChangeInputDisparity);
@defineDocumentHeaderAggregationDescription(disparity, priceChangeInputDisparity);

@defineDocumentDetailAggregationHeader(disparity, priceChangeInputDisparity);
@defineDocumentDetailAggregationDepartmentStore(disparity, priceChangeInputDisparity);
@defineDocumentDetailAggregationSkuPrefix(disparity, priceChangeInputDisparity, item, input);
quantityPriceChangeInputDisparityDetail 'Количество' (priceChangeInputDisparityDetail) = inputBalanceBeforeDisparityDetail(disparityDetailPriceChangeInputDisparityDetail(priceChangeInputDisparityDetail));

@defineDocumentDetailAggregationPricePrefix(disparity, priceChangeInputDisparity, input, , );
@defineDocumentDetailAggregationPricePrefix(disparity, priceChangeInputDisparity, inputCur, cur, ' (тек.)');
//curRetailPricePriceChangeInputDisparityDetail 'Розничная цена (тек.)' (priceChangeInputDisparityDetail) = inputCurRetailPriceDisparityDetail(disparityDetailPriceChangeInputDisparityDetail(priceChangeInputDisparityDetail));

numberDisposalPriceChangeInputDisparity '№ распоряжения на переоценку' (priceChangeInputDisparity) = numberDisposalDisparity(disparityPriceChangeInputDisparity(priceChangeInputDisparity));
priceChangeCommitteePriceChangeInputDisparity 'Комиссия переоценки ИД' (priceChangeInputDisparity) = priceChangeCommitteeDisparity(disparityPriceChangeInputDisparity(priceChangeInputDisparity));

numberPriceChangeInputDisparity 'Номер документа' (priceChangeInputDisparity) = numberObject(disparityPriceChangeInputDisparity(priceChangeInputDisparity));
seriesPriceChangeInputDisparity 'Серия документа' (priceChangeInputDisparity) = seriesObject(disparityPriceChangeInputDisparity(priceChangeInputDisparity));
seriesNumberPriceChangeInputDisparity 'Серия/номер документ' (priceChangeInputDisparity) = seriesNumberObject(disparityPriceChangeInputDisparity(priceChangeInputDisparity));

isPriceChangeWrongPriceChangeInputDisparityDetail (priceChangeInputDisparityDetail) =
    retailPricePriceChangeInputDisparityDetail(priceChangeInputDisparityDetail) < curRetailPricePriceChangeInputDisparityDetail(priceChangeInputDisparityDetail)
      AND banMarkdownItem(skuPriceChangeInputDisparityDetail(priceChangeInputDisparityDetail));
CONSTRAINT isPriceChangeWrongPriceChangeInputDisparityDetail (priceChangeInputDisparityDetail) MESSAGE 'Уценка товара запрещена';

@implementPriceChangeDocument(priceChangeInputDisparity, sku);
@implementPriceChangeDocumentDetailAllPrice(priceChangeInputDisparity);

// ---------------------------------- Переоценка при пересорте ------------------------------------------

CLASS priceChangeDisparity 'Переоценка при пересортице' : priceChangeDocument;
CLASS priceChangeDisparityDetail 'Строка переоценки при пересортице' : priceChangeDocumentDetail;

needToPriceChangeDisparityDetail (disparityDetail) = retailPriceDisparityDetail(disparityDetail) != inputRetailPriceDisparityDetail(disparityDetail) AND
                                                     inputQuantityDisparityDetail(disparityDetail) > 0;

@defineDocumentPriceChange(disparity);
@defineDocumentPriceChangeNumber(disparity);
@defineDocumentPriceChangeSkuPrefix(disparity, item, input);
quantityPriceChangeDisparityDetail 'Количество' (priceChangeDisparityDetail) = inputQuantityDisparityDetail(disparityDetailPriceChangeDisparityDetail(priceChangeDisparityDetail));

@defineDocumentPriceChangePricePrefix(disparity, , input, );
@defineDocumentPriceChangePricePrefix(disparity, cur , , ' (тек.)');

@implementPriceChangeDocument(priceChangeDisparity, sku);
@implementPriceChangeDocumentDetailAllPrice(priceChangeDisparity);

needPriceChangeDisparityDetail (disparityDetail) = UNION OVERRIDE needToPriceChangeInputDisparityDetail (disparityDetail), needToPriceChangeDisparityDetail (disparityDetail);

showPriceChangeDisparity 'Отображать комиссию при пересорте' (disparity) = GROUP SUM 1 IF needPriceChangeDisparityDetail(disparityDetail) BY disparityDisparityDetail(disparityDetail);

//------------------------------------- Ведомость расчета естественной убыли ----------------------------------//

CLASS naturalLoss 'Ведомость естественной убыли' : historyObject, externalObject, numberedObject;
CLASS naturalLossDetail 'Строка ведомости естественной убыли': externalObject;
CLASS naturalLossPosted 'Закрытая ведомость естественной убыли' : naturalLoss, postedObject;

@defineDocumentBasePostedDepartmentStoreItem(naturalLoss);
@defineDocumentDetailQuantity(naturalLoss);
@defineDocumentDetailBasePrice(naturalLoss);

//@defineDocumentDetailWareSum(naturalLoss);
//@defineDocumentDetailInSum(naturalLoss);
//@defineDocumentDetailOutSum(naturalLoss);

dateFromNaturalLoss 'с' = DATA DATE (naturalLoss) IN documentPrmGroup;
dateToNaturalLoss 'по' = DATA DATE (naturalLoss) IN documentPrmGroup;

dateFromNaturalLossDetail 'с' (naturalLossDetail) = dateFromNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail));
dateToNaturalLossDetail 'по' (naturalLossDetail) = dateToNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail));

subNaturalLossItemGroupNaturalLossDetail = DATA subNaturalLossItemGroup(naturalLossDetail);
nameSubNaturalLossItemGroupNaturalLossDetail 'Группа естественной убыли' =
    name(subNaturalLossItemGroupNaturalLossDetail(naturalLossDetail));
codeNaturalLossDetail 'Код нормы естественной убыли' =
    codeSubNaturalLossItemGroup(groupNaturalLossItem(itemNaturalLossDetail(naturalLossDetail)));
percentNaturalLossDetail 'Норма естественной убыли, %' = DATA NUMERIC[10,3] (naturalLossDetail);

subNaturalDetailNaturalLossDetail = DATA subNaturalLossItemGroupDetail(naturalLossDetail);
nameSubNaturalDetailNaturalLossDetail 'Период' (naturalLossDetail) =
    castIntervalNaturalLoss(subNaturalDetailNaturalLossDetail(naturalLossDetail));

castTwoObjectsToString150 = FORMULA STRING[150] 'CAST($1 AS TEXT) || \'  \' || CAST($2 AS TEXT)';
castNameSubNaturalLossItemGroup 'Группа естественной убыли' (naturalLossDetail) =
    castTwoObjectsToString150(nameSubNaturalLossItemGroupNaturalLossDetail(naturalLossDetail),
                              nameSubNaturalDetailNaturalLossDetail(naturalLossDetail));

quantityLossNaturalLossDetail 'Кол-во' = DATA NUMERIC[14,3] (naturalLossDetail);
//supplierSumLossNaturalLossDetail 'Сумма поставщика, руб.' = DATA NUMERIC[16,2] (naturalLossDetail);
//retailSumLossNaturalLossDetail 'Розничная сумма, руб' = DATA NUMERIC[16,2] (naturalLossDetail);
//supplierSumNaturalLossDetail 'Сумма поставщика, руб.' = DATA NUMERIC[16,2] (naturalLossDetail);
//retailSumNaturalLossDetail 'Розничная сумма, руб.' = DATA NUMERIC[16,2] (naturalLossDetail);

supplierPriceNaturalLossDetail(naturalLossDetail) <- supplierPriceBLedgerDateTime(
                                                        itemNaturalLossDetail(naturalLossDetail),
                                                        departmentStoreNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail)),
                                                        dateTimeNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail)))
    WHEN CHANGED(itemNaturalLossDetail(naturalLossDetail));

retailPriceNaturalLossDetail(naturalLossDetail) <- retailPriceBLedgerDateTime(
                                                        itemNaturalLossDetail(naturalLossDetail),
                                                        departmentStoreNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail)),
                                                        dateTimeNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail)))
    WHEN CHANGED(itemNaturalLossDetail(naturalLossDetail));

retailSumLossNaturalLossDetail 'Розничная сумма, руб' (naturalLossDetail) = round0(retailPriceNaturalLossDetail(naturalLossDetail) * quantityLossNaturalLossDetail(naturalLossDetail));
supplierSumLossNaturalLossDetail 'Сумма поставщика, руб.' (naturalLossDetail) = round0(supplierPriceNaturalLossDetail(naturalLossDetail) * quantityLossNaturalLossDetail(naturalLossDetail));
supplierSumNaturalLossDetail 'Сумма поставщика, руб.' (naturalLossDetail)  = round0(supplierPriceNaturalLossDetail(naturalLossDetail) * quantityNaturalLossDetail(naturalLossDetail));
retailSumNaturalLossDetail 'Розничная сумма, руб.' (naturalLossDetail) = round0(retailPriceNaturalLossDetail(naturalLossDetail) * quantityNaturalLossDetail(naturalLossDetail));

invoiceSumNaturalLossDetailNaturalLoss 'Сумма поставщика' (naturalLoss) =
    GROUP SUM supplierSumNaturalLossDetail(naturalLossDetail) BY naturalLossNaturalLossDetail(naturalLossDetail) IN documentSumGroup PERSISTENT;

quantitySoldItemDepartmentNaturalLoss 'Продано' (item, departmentStore, dateFrom, dateTo, subNaturalLossItemGroupDetail) =
    GROUP SUM quantitySalesLedger(ledger) AND dateSalesLedger(ledger) >= (dateFrom AS DATE) AND dateSalesLedger(ledger) <= (dateTo AS DATE)
              AND inIntervalNaturalLoss(dateSalesLedger(ledger), subNaturalLossItemGroupDetail)
              AND groupNaturalLossItem(skuSalesLedger(ledger)) == subNaturalLossItemGroupSubNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail)
              BY skuSalesLedger(ledger), stockSalesLedger(ledger), dateFrom, dateTo, subNaturalLossItemGroupDetail;

toFillNaturalLossDetail 'Заполнить ведомость естественной убыли' = ACTION (naturalLoss) {
    FOR quantitySoldItemDepartmentNaturalLoss(item,
                                              departmentStoreNaturalLoss(naturalLoss),
                                              dateFromNaturalLoss(naturalLoss),
                                              dateToNaturalLoss(naturalLoss),
                                              subNaturalLossItemGroupDetail) ORDER nameAttributeItem(item), subNaturalLossItemGroupDetail
        DO {
        ADDOBJ naturalLossDetail;
        FOR d == addedObject() DO {
            SET itemNaturalLossDetail(d) <- item AS item;
            SET subNaturalLossItemGroupNaturalLossDetail(d) <- groupNaturalLossItem(item AS item);
            SET quantityLossNaturalLossDetail(d) <- quantitySoldItemDepartmentNaturalLoss(
                                                                    item AS item,
                                                                    departmentStoreNaturalLoss(naturalLoss),
                                                                    dateFromNaturalLoss(naturalLoss),
                                                                    dateToNaturalLoss(naturalLoss),
                                                                    subNaturalLossItemGroupDetail AS subNaturalLossItemGroupDetail);
            SET subNaturalDetailNaturalLossDetail(d) <- subNaturalLossItemGroupDetail AS subNaturalLossItemGroupDetail;
            SET percentNaturalLossDetail(d) <- percentNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail AS subNaturalLossItemGroupDetail);
            SET quantityNaturalLossDetail (d) <- percentNaturalLossDetail(d) * quantityLossNaturalLossDetail(d) /100;
        };
    };
} IN documentPrmGroup CONFIRM;

//@defineDocumentHeaderInvoiceSum(naturalLoss);
@defineDocumentHeaderRetailSum(naturalLoss);
@defineDocumentHeaderQuantity(naturalLoss);

FORM naturalLossPrint 'Ведомость естественной убыли' PRINT
    OBJECTS s=naturalLoss FIXED PANEL
    PROPERTIES(s) READONLY SELECTOR numberObject, nameDepartmentStoreNaturalLoss, timeNaturalLoss, seriesObject,
                           dateNaturalLoss, dateFromNaturalLoss, dateToNaturalLoss,
                           quantityNaturalLossDetailNaturalLoss, invoiceSumNaturalLossDetailNaturalLoss,
                           retailSumNaturalLossDetailNaturalLoss, noteNaturalLoss
    OBJECTS d=naturalLossDetail
    PROPERTIES(d) READONLY indexNaturalLossDetail, nameAttributeItemNaturalLossDetail, codeNaturalLossDetail,
                           shortNameUOMItemNaturalLossDetail, quantityLossNaturalLossDetail,
                           supplierPriceNaturalLossDetail, retailPriceNaturalLossDetail, supplierSumLossNaturalLossDetail,
                           retailSumLossNaturalLossDetail, nameSubNaturalLossItemGroupNaturalLossDetail,
                           nameSubNaturalDetailNaturalLossDetail, castNameSubNaturalLossItemGroup, percentNaturalLossDetail,
                           quantityNaturalLossDetail, supplierSumNaturalLossDetail, retailSumNaturalLossDetail

    FILTERS inNaturalLossNaturalLossDetail(s, d)
;

toPrintNaturalLoss 'Ведомость естественной убыли' (naturalLoss) = ACTION FORM naturalLossPrint OBJECTS s IMAGE 'print.png' IN printGroup;

FORM naturalLoss 'Ведомость естественной убыли'
    OBJECTS s=naturalLoss FIXED PANEL
    PROPERTIES(s) numberObject, nameDepartmentStoreNaturalLoss, timeNaturalLoss, seriesObject,
                  dateNaturalLoss, dateFromNaturalLoss, dateToNaturalLoss, toFillNaturalLossDetail,
                  quantityNaturalLossDetailNaturalLoss, invoiceSumNaturalLossDetailNaturalLoss,
                  retailSumNaturalLossDetailNaturalLoss, noteNaturalLoss
    OBJECTS d=naturalLossDetail
    PROPERTIES(d) indexNaturalLossDetail, nameAttributeItemNaturalLossDetail, codeNaturalLossDetail,
                  quantityLossNaturalLossDetail, supplierPriceNaturalLossDetail, retailPriceNaturalLossDetail,
                  supplierSumLossNaturalLossDetail, retailSumLossNaturalLossDetail,
                  nameSubNaturalLossItemGroupNaturalLossDetail, shortNameUOMItemNaturalLossDetail,
                  nameSubNaturalDetailNaturalLossDetail, percentNaturalLossDetail,
                  quantityNaturalLossDetail, supplierSumNaturalLossDetail, retailSumNaturalLossDetail, ADDOBJ, delete

    FILTERS inNaturalLossNaturalLossDetail(s, d)

    EDIT naturalLoss OBJECT s
;

DESIGN naturalLoss FROM DEFAULT{

    NEW header.box  BEFORE d.box{
        childConstraints = TO THE RIGHT;

        NEW headerCol1 {
            childConstraints = TO THE BOTTOM;

            ADD s.documentHeaderGroup {
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(nameDepartmentStoreNaturalLoss);
                ADD PROPERTY(numberObject);
                ADD PROPERTY(seriesObject);
                ADD PROPERTY(dateNaturalLoss);
                ADD PROPERTY(timeNaturalLoss);
            };

            NEW headerCol1Row2 {
                childConstraints = TO THE RIGHT;
                ADD s.documentPrmGroup {
                }
            }

            ADD PROPERTY(noteNaturalLoss);
        }

        ADD s.documentSumGroup {
            childConstraints = TO THE BOTTOM;
        }
    }
}

FORM naturalLosses 'Ведомости естественной убыли'
    OBJECTS s=naturalLoss
    PROPERTIES(s) READONLY numberObject, seriesObject, dateNaturalLoss, timeNaturalLoss,
                           nameDepartmentStoreNaturalLoss, dateFromNaturalLoss, dateToNaturalLoss,
                           quantityNaturalLossDetailNaturalLoss, invoiceSumNaturalLossDetailNaturalLoss,
                           retailSumNaturalLossDetailNaturalLoss, noteNaturalLoss
    PROPERTIES(s) toPrintNaturalLoss FORCE PANEL
    PROPERTIES(s) ADDFORM, EDITFORM SHOWIF isDraftNaturalLoss(s), delete FORCE PANEL SHOWIF isDraftNaturalLoss(s),
                  postNaturalLoss SHOWIF isDraftNaturalLoss(s), unpostNaturalLoss SHOWIF isPostedNaturalLoss(s)
    PROPERTIES(s) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed
    OBJECTS d=naturalLossDetail
    PROPERTIES(d) READONLY indexNaturalLossDetail, nameAttributeItemNaturalLossDetail, codeNaturalLossDetail,
                           shortNameUOMItemNaturalLossDetail, quantityLossNaturalLossDetail,
                           supplierPriceNaturalLossDetail, retailPriceNaturalLossDetail, supplierSumLossNaturalLossDetail,
                           retailSumLossNaturalLossDetail, nameSubNaturalLossItemGroupNaturalLossDetail,
                           percentNaturalLossDetail, quantityNaturalLossDetail,
                           supplierSumNaturalLossDetail, retailSumNaturalLossDetail

    FILTERS inNaturalLossNaturalLossDetail(s, d)
;

DESIGN naturalLosses FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD s.box;
        ADD d.box;
    }

    PROPERTY (delete(s)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }

    ADD s.printGroup{
        childConstraints = TO THE BOTTOM;
    }

    ADD s.historyGroup{
        childConstraints = TO THE BOTTOM;
    }

    ADD s.postedGroup{
        childConstraints = TO THE BOTTOM;
    }

    POSITION s.postedGroup TO THE RIGHT s.historyGroup;
    POSITION s.printGroup TO THE BOTTOM s.postedGroup;
    POSITION s.printGroup TO THE BOTTOM s.historyGroup;

    ADD functions.box;
}

//--------------------------------------Заказ------------------------------------------------------------------//

GROUP orderSupplierGroup 'Информация о заказе' : publicGroup;
GROUP dateOrderSupplierGroup 'Даты' : publicGroup;

CLASS preliminaryOrder 'Предварительный заказ' : historyObject;
TABLE preliminaryOrder (preliminaryOrder);

dateOrderPreliminaryOrder 'Дата заказа' = DATA DATE (preliminaryOrder) IN baseGroup;
dateSupplyPreliminaryOrder 'Дата поставки' = DATA DATE (preliminaryOrder) IN baseGroup;
departmentStorePreliminaryOrder 'Отдел заказа (ИД)' = DATA departmentStore (preliminaryOrder) AUTOSET;
nameDepartmentStorePreliminaryOrder 'Отдел заказа' (preliminaryOrder) = name(departmentStorePreliminaryOrder(preliminaryOrder)) IN orderSupplierGroup AUTOSET;
supplierPreliminaryOrder 'Поставщик заказа (ИД)' = DATA supplier (preliminaryOrder);
nameSupplierPreliminaryOrder 'Поставщик заказа' (preliminaryOrder) = name(supplierPreliminaryOrder(preliminaryOrder));
genTimeTablePreliminaryOrder 'График поставок'  = DATA genTimeTable (preliminaryOrder);

TABLE supplierDepartmentStoreDate (supplier, departmentStore, DATE);

@defineHistorizableDouble(timeTable, 'Поставка', BOOLEAN, supplier, name, departmentStore, name, baseGroup);

CLASS ABSTRACT order 'Заказ' : historyObject, numeratedObject;
//TABLE order(order);

CLASS orderSupplier 'Заказ поставщику' : order;
CLASS orderSupplierPosted 'Закрытый заказ поставщику' :orderSupplier, postedObject;
//CLASS orderStock 'Заказ складу' :order;

TABLE orderSupplier(orderSupplier);
TABLE orderSupplierItem(orderSupplier, item);

departmentStoreOrderSupplier 'Отдел заказа (ИД)' = DATA departmentStore (orderSupplier);
nameDepartmentStoreOrderSupplier 'Отдел заказа' (orderSupplier) = name(departmentStoreOrderSupplier(orderSupplier)) IN documentHeaderGroup;
companyOrderSupplier 'Компания заказа' (orderSupplier) =
    fullNameLegalEntity(companyStore(storeDepartmentStore(departmentStoreOrderSupplier(orderSupplier)))) IN documentHeaderGroup;

castSubject = FORMULA STRING[100] '\'Заказ № \' || CAST($1 AS TEXT) || \' \' || CAST($2 AS TEXT) || \' от \' || CAST($3 AS TEXT)';
subjectOrderSupplier (orderSupplier) =
    castSubject(seriesObject(orderSupplier), numberObject(orderSupplier), companyOrderSupplier(orderSupplier)) IN documentHeaderGroup;

supplierOrderSupplier 'Поставщик заказа (ИД)' = DATA supplier (orderSupplier);
nameSupplierOrderSupplier 'Поставщик заказа' (orderSupplier) = name(supplierOrderSupplier(orderSupplier)) IN documentPrmGroup;
UNPSupplierOrderSupplier 'УНП поставщика' (orderSupplier) = UNPLegalEntity(supplierOrderSupplier(orderSupplier)) IN documentPrmGroup;
emailSupplierOrderSupplier 'E-mail поставщика' (orderSupplier) = emailLegalEntity(supplierOrderSupplier(orderSupplier)) IN documentPrmGroup;

curDateOrderSupplier 'Дата заказа' = DATA DATE (orderSupplier) IN dateOrderSupplierGroup;
curDateOrderSupplier (orderSupplier) <- currentDate() WHEN ASSIGNED(departmentStoreOrderSupplier(orderSupplier));
dateOrderSupplier 'Дата поставки' = DATA DATE (orderSupplier) IN dateOrderSupplierGroup;
dateOrderSupplier (orderSupplier) <- sumDate(currentDate(),1) WHEN ASSIGNED(departmentStoreOrderSupplier(orderSupplier));

preliminaryOrderOrderSupplier 'Предварительный заказ заказа' = DATA preliminaryOrder (orderSupplier);

preliminaryOrderToOrderSupplier 'Заказ по предварительному заказу' (preliminaryOrder) = GROUP UNIQUE orderSupplier BY preliminaryOrderOrderSupplier(orderSupplier);
dataOrderPreliminaryOrder 'Номер заказа для предварительного заказа' (preliminaryOrder) = seriesNumberObject(preliminaryOrderToOrderSupplier(preliminaryOrder));

uniquePreliminaryOrder (date1, date2, departmentStore, supplier) = GROUP UNIQUE preliminaryOrder
                                                                   BY dateOrderPreliminaryOrder(preliminaryOrder),
                                                                      dateSupplyPreliminaryOrder(preliminaryOrder),
                                                                      departmentStorePreliminaryOrder(preliminaryOrder),
                                                                      supplierPreliminaryOrder(preliminaryOrder);

completePercentageOrderSupplier 'Процент выполнения' (orderSupplier) = DATA NUMERIC[8,3] (orderSupplier) IN orderSupplierGroup;
allowablePercentOrderSupplier 'Допустимый % изменения цен 1го поставщика' = DATA INTEGER (orderSupplier) IN documentPrmGroup;

packQuantityItemOrderSupplier 'Заказ(мест)' = DATA NUMERIC[14,3] (orderSupplier, item);
sumQuantityItemOrderSupplier 'Заказ(единиц)' (orderSupplier, item) = DATA NUMERIC[14,3] (orderSupplier, item);
sumQuantityItemOrderSupplier (orderSupplier, item) <- (UNION OVERRIDE 1 IF item IS item, quantityPackItem(item)) * packQuantityItemOrderSupplier(orderSupplier, item)
                                                      WHEN CHANGED(packQuantityItemOrderSupplier(orderSupplier, item));
priceSupplierItemOrderSupplier 'Цена поставщика' (orderSupplier, item) = DATA NUMERIC[14,2] (orderSupplier, item);
priceSupplierItemOrderSupplier (orderSupplier, item) <- priceSupplierItemDepartmentDate(supplierOrderSupplier(orderSupplier), item, departmentStoreOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier))
    WHEN ASSIGNED(packQuantityItemOrderSupplier(orderSupplier, item));

supplierRangeItemDateOrderSupplier 'Шкала' (orderSupplier, item) = DATA range (orderSupplier, item) IN idGroup;
supplierRangeItemDateOrderSupplier (orderSupplier, item) <- supplierRangeItemDate(item, dateOrderSupplier(orderSupplier))
                                                             WHEN ASSIGNED(packQuantityItemOrderSupplier(orderSupplier, item));
numberSupplierRangeOrderSupplier 'НДС поставщика, номер' (orderSupplier, item) =
    numberRange(supplierRangeItemDateOrderSupplier(orderSupplier, item));
valueSupplierRangeOrderSupplier 'НДС поставщика, %' (orderSupplier, item) =
    UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item,
                   valueRateRangeDate(supplierRangeItemDateOrderSupplier(orderSupplier, item), dateOrderSupplier(orderSupplier));
CONSTRAINT taxRange(supplierRangeItemDateOrderSupplier(orderSupplier, item)) != tax.taxVAT CHECKED BY supplierRangeItemDateOrderSupplier MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

retailPriceItemOrderSupplierDate 'Розничная цена' (orderSupplier, item) =
    retailPriceItemDepartmentDate(item, departmentStoreOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier));
retailPriceItemOrderSupplier 'Розничная цена' (orderSupplier, item) =
    UNION OVERRIDE 0 IF (orderSupplier IS orderSupplier AND item IS item), retailPriceItemOrderSupplierDate(orderSupplier, item);

wareOrderSupplier 'Посуда (ИД)' (orderSupplier, item) = DATA ware (orderSupplier, item);
wareOrderSupplier (orderSupplier, item) <- wareItem(item) WHEN ASSIGNED(packQuantityItemOrderSupplier(orderSupplier, item));
nameWareOrderSupplier 'Посуда' (orderSupplier, item) = name(wareOrderSupplier(orderSupplier, item));
warePriceOrderSupplier 'Цена посуды' (orderSupplier, item) = warePriceDate(wareOrderSupplier(orderSupplier, item), dateOrderSupplier(orderSupplier));
dataRangeWareOrderSupplier 'Шкала(ИД)' (orderSupplier, item) = DATA range (orderSupplier, item) IN idGroup;
dataRangeWareOrderSupplier (orderSupplier, item) <- rangeWareDate(wareOrderSupplier(orderSupplier, item), dateOrderSupplier(orderSupplier))
                                                    WHEN CHANGED(wareOrderSupplier(orderSupplier, item));
numberDataRangeWareOrderSupplier 'Шкала НДС посуды' (orderSupplier, item) =
    numberRange(dataRangeWareOrderSupplier(orderSupplier, item));
valueWareRangeOrderSupplier 'НДС посуды, %' (orderSupplier, item) =
    valueRateRangeDate(dataRangeWareOrderSupplier(orderSupplier, item), dateOrderSupplier(orderSupplier));

sumWareOrderSupplier 'Сумма по посуде' (orderSupplier, item) =
    UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item,
                   sumQuantityItemOrderSupplier(orderSupplier, item) * warePriceOrderSupplier(orderSupplier, item);
wareSumOrderSupplier 'Общая сумма по посуде' (orderSupplier) =
    GROUP SUM sumWareOrderSupplier(orderSupplier, item) BY orderSupplier;

sumItemOrderSupplier 'Сумма заказа' (orderSupplier, item) =
    sumQuantityItemOrderSupplier(orderSupplier, item) * priceSupplierItemOrderSupplier(orderSupplier, item) IN baseGroup;
totalSumOrderSupplier 'Общая сумма заказа' (orderSupplier) = GROUP SUM sumItemOrderSupplier(orderSupplier, item) BY orderSupplier IN orderSupplierGroup;

sumVatOrderSupplier 'Сумма НДС, за ед.' (orderSupplier, item) =
    round0(
    (UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item, priceSupplierItemOrderSupplier(orderSupplier, item) *
     UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item, valueSupplierRangeOrderSupplier(orderSupplier, item))/100);
retailVATISumOrderSupplier 'Сумма НДС по товару' (orderSupplier, item) =
    round0(
    (UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item,
                    sumQuantityItemOrderSupplier(orderSupplier, item) * sumVatOrderSupplier(orderSupplier, item)));

sumVatWareOrderSupplier 'Сумма НДС по посуде, за ед.' (orderSupplier, item) =
    round0(
    (UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item, warePriceOrderSupplier(orderSupplier, item) *
     UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item, valueWareRangeOrderSupplier(orderSupplier, item))/100);
retailVATISumWareOrderSupplier 'Сума НДС по посуде' (orderSupplier, item) =
    round0(
    (UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item,
                    sumQuantityItemOrderSupplier(orderSupplier, item) * sumVatWareOrderSupplier(orderSupplier, item)));
retailVATISumItemOrderSupplier 'Сумма НДС' (orderSupplier, item) =
    retailVATISumOrderSupplier(orderSupplier, item) (+) retailVATISumWareOrderSupplier(orderSupplier, item);

totalSumVatOrderSupplier 'Общая сумма НДС' (orderSupplier) =
    GROUP SUM retailVATISumItemOrderSupplier(orderSupplier, item) BY orderSupplier IN orderSupplierGroup;

fullSumItemOrderSupplier 'Сумма заказа с НДС' (orderSupplier, item) =
    sumItemOrderSupplier(orderSupplier, item) (+) retailVATISumOrderSupplier(orderSupplier, item) (+) sumWareOrderSupplier(orderSupplier, item);
totalFullSumOrderSupplier 'Общая сумма заказа с НДС' (orderSupplier) =
    GROUP SUM fullSumItemOrderSupplier(orderSupplier, item) BY orderSupplier IN orderSupplierGroup;

nameinActionItemOrderSupplier 'Товар акции' (orderSupplier, item) =
    nameInActionItemDepartmentDate(item, departmentStoreOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier));
CONSTRAINT packQuantityItemOrderSupplier(orderSupplier, item) <= 0 MESSAGE 'Количество должно быть положительным';
CONSTRAINT priceSupplierItemOrderSupplier(orderSupplier, item) <= 0 MESSAGE 'Цена должна быть положительной';

castFiveObjectsToString100 =
     FORMULA STRING[200] '\'№\' || CAST($1 AS TEXT) || \'  от \' || CAST($2 AS TEXT) || \'  Количество: \' || CAST($3 AS TEXT) || \'  Розн. цена: \' || CAST($4 AS TEXT) || \'(\' || CAST($5 AS TEXT) || \')\' ';
//если разбивать формулу на 2 строки выдает ошибку

isItemInOrderSupplier 'Товар в заказе' (orderSupplier, item) = packQuantityItemOrderSupplier(orderSupplier, item) > 0;
lastOrderSupplierDate 'Последний заказ(ИД)' (orderSupplier, item) =
     PARTITION PREV orderSupplier AND isItemInOrderSupplier(orderSupplier, item)
     BY supplierOrderSupplier(orderSupplier), departmentStoreOrderSupplier(orderSupplier), item
     ORDER dateOrderSupplier(orderSupplier);
lastOrderSupplier 'Последний заказ' (orderSupplier, item) =
     castFiveObjectsToString100(seriesNumberObject(lastOrderSupplierDate(orderSupplier, item)),
                                dateOrderSupplier(lastOrderSupplierDate(orderSupplier, item)),
                                packQuantityItemOrderSupplier(lastOrderSupplierDate(orderSupplier, item), item),
                                retailPriceItemOrderSupplier(lastOrderSupplierDate(orderSupplier, item), item),
                                nameSupplierOrderSupplier(lastOrderSupplierDate(orderSupplier, item))
     );

quantityDaysNextOrder 'Дней до поставки' (orderSupplier) =
    UNION MAX 0 IF orderSupplier IS orderSupplier,
              daysInclBetweenDates(curDateOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier)) IN dateOrderSupplierGroup;

quantityOrderOrderSupplier 'Заказов на дату заказа' (supplier, departmentStore, date) =
    GROUP SUM 1 IF orderSupplier
    BY supplierOrderSupplier(orderSupplier), departmentStoreOrderSupplier(orderSupplier), curDateOrderSupplier(orderSupplier);

quantitySupplyOrderSupplier 'Заказов на дату поставки' (supplier, departmentStore, date) =
    GROUP SUM 1 IF orderSupplier BY supplierOrderSupplier(orderSupplier), departmentStoreOrderSupplier(orderSupplier),
                                    dateOrderSupplier(orderSupplier);
quantityOrderPreliminaryOrder 'Предварительных заказов на дату заказа' (supplier, departmentStore, date) =
    GROUP SUM 1 IF preliminaryOrder BY supplierPreliminaryOrder(preliminaryOrder), departmentStorePreliminaryOrder(preliminaryOrder),
                                       dateOrderPreliminaryOrder(preliminaryOrder);
quantitySupplyPreliminaryOrder 'Предварительных заказов на дату поставки' (supplier, departmentStore, date) =
    GROUP SUM 1 IF preliminaryOrder BY supplierPreliminaryOrder(preliminaryOrder), departmentStorePreliminaryOrder(preliminaryOrder),
                                       dateSupplyPreliminaryOrder(preliminaryOrder);
nextDateOrder 'Дата следующей поставки' (preliminaryOrder) =
    PARTITION PREV dateSupplyPreliminaryOrder(preliminaryOrder)
    BY supplierPreliminaryOrder(preliminaryOrder), departmentStorePreliminaryOrder(preliminaryOrder)
    ORDER DESC dateSupplyPreliminaryOrder(preliminaryOrder);

minDateSupplyOrderSupplier (supplier, departmentStore, date) = GROUP MIN dateSupplyPreliminaryOrder(preliminaryOrder)
                                                                         IF dateSupplyPreliminaryOrder(preliminaryOrder) > (date AS DATE)
                                                                         BY supplierPreliminaryOrder(preliminaryOrder), departmentStorePreliminaryOrder(preliminaryOrder), date;

nextDateOrderSupplier 'Дата следующей поставки' (orderSupplier) = DATA DATE (orderSupplier) IN dateOrderSupplierGroup;
nextDateOrderSupplier (orderSupplier) <- [UNION OVERRIDE sumDate(dateOrderSupplier(orderSupplier),
                                                                  periodicitySupply(supplierOrderSupplier(orderSupplier))),
                                                         minDateSupplyOrderSupplier(
                                                                  supplierOrderSupplier(orderSupplier),
                                                                  departmentStoreOrderSupplier(orderSupplier),
                                                                  dateOrderSupplier(orderSupplier))] (orderSupplier)
                                         WHEN ASSIGNED(supplierOrderSupplier(orderSupplier));

quantityDaysAfterNextOrder 'Дней до следующей поставки' (orderSupplier) =
    daysInclBetweenDates(curDateOrderSupplier(orderSupplier), nextDateOrderSupplier(orderSupplier)) IN dateOrderSupplierGroup;

CONSTRAINT nextDateOrderSupplier(orderSupplier) < dateOrderSupplier(orderSupplier) MESSAGE 'Дата поставки не должна превышать дату поставки следующей поставки';

currentBalanceOrderSupplierItem 'Текущий остаток' (orderSupplier, item) = currentBalanceSkuLedger(item, departmentStoreOrderSupplier(orderSupplier));

quantityToSellNextOrder 'Предполагаемое количество реализации товара до следующей поставки' (orderSupplier, item) =
    averageSoldSkuStock(item, departmentStoreOrderSupplier(orderSupplier)) * daysInclBetweenDates(currentDate(), nextDateOrderSupplier(orderSupplier));

balanceExtraDepartmentStoreItem 'Величина остатков товара за вычетом минимального резерва' (orderSupplier, item) =
    currentBalanceOrderSupplierItem(orderSupplier, item) (-) (minReserveItem(item) IF orderSupplier IS orderSupplier);

quantityNeededOrderSupplierItem 'Кол-во товара для заказа' (orderSupplier, item) =
    quantityToSellNextOrder (orderSupplier, item) (-) balanceExtraDepartmentStoreItem(orderSupplier, item);

recommendCountOrderSupplier 'Рекомендуемый заказ' (orderSupplier, item) =
    (UNION MAX ceil(quantityNeededOrderSupplierItem(orderSupplier, item) /
                     (UNION OVERRIDE 1 IF item IS item, quantityPackItem(item))),
               (minQuantityOrderItem(item) IF orderSupplier IS orderSupplier))
    IF quantityNeededOrderSupplierItem(orderSupplier, item) > 0;

isBanSupplierItemDepartmentOrderSupplier (orderSupplier, item) = banSupplierItemDepartmentDate(
    supplierOrderSupplier(orderSupplier), item, departmentStoreOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier)) != yesNo.yes;

isSupplierItemDepartmentOrderSupplier (orderSupplier, item) = isSupplierItemDepartmentDate(
    supplierOrderSupplier(orderSupplier), item, departmentStoreOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier)) == yesNo.yes;

isSupplyDatePreliminaryOrder (preliminaryOrder, date) = dateSupplyPreliminaryOrder(preliminaryOrder) >= (date AS DATE) ;
isOrderDatePreliminaryOrder (preliminaryOrder, date) = dateOrderPreliminaryOrder(preliminaryOrder) >= (date AS DATE) ;
inSupplyIntervalPreliminaryOrder (preliminaryOrder, date1, date2) =
    dateSupplyPreliminaryOrder(preliminaryOrder) >= (date1 AS DATE) AND
    dateSupplyPreliminaryOrder(preliminaryOrder) <= (date2 AS DATE);

isDepartmentPreliminaryOrder (preliminaryOrder, departmentStore) =
   departmentStorePreliminaryOrder(preliminaryOrder) == departmentStore AS departmentStore;

dateLastPreliminaryOrder 'Дата последнего заказа' (departmentStore, supplier, date) =
    GROUP MAX dateOrderPreliminaryOrder(preliminaryOrder)
              AND dateOrderPreliminaryOrder(preliminaryOrder) < (date AS DATE)
              AND preliminaryOrderToOrderSupplier(preliminaryOrder)
          BY departmentStorePreliminaryOrder(preliminaryOrder), supplierPreliminaryOrder(preliminaryOrder), date;

dayLastOrderGenTimeTable (genTimeTable) <- dateLastPreliminaryOrder(departmentStoreGenTimeTable(genTimeTable),
                                                                    supplierGenTimeTable(genTimeTable),
                                                                    startDateGenTimeTable(genTimeTable))
                                           WHEN CHANGED(startDateGenTimeTable(genTimeTable));

CONSTRAINT startDateGenTimeTable(genTimeTable) > endDateGenTimeTable(genTimeTable)
    MESSAGE 'Некорректно заданный интервал';

inDateMonth (date1, date2, month) = numberMonth(month AS month) >= numberMonthInDate(date1 AS DATE) AND
                                    numberMonth(month AS month) <= numberMonthInDate(date2 AS DATE);
inDateMonthGTT(genTimeTable, month) = inDateMonth(startDateGenTimeTable(genTimeTable),
                                                  endDateGenTimeTable(genTimeTable), month);

inShipmentOrder 'Поставка по заказу' (shipment, orderSupplier) = DATA BOOLEAN (shipment, orderSupplier)
    IN idGroup MINCHARWIDTH 10 PREFCHARWIDTH 10;

ordersShipment 'Заявка' (shipment) = GROUP CONCAT castToString255(seriesNumberObject(orderSupplier))
    IF inShipmentOrder(shipment, orderSupplier), ', ' BY shipment IN shipmentOrderGroup MINCHARWIDTH 10 PREFCHARWIDTH 10;

sumOrdersShipment (shipment) = GROUP SUM 1 IF inShipmentOrder(shipment, orderSupplier) BY shipment PERSISTENT;

isSupplierShipmentOrder 'Заявка поставщика поставки' (shipment, orderSupplier) = supplierShipment(shipment)== supplierOrderSupplier(orderSupplier);

isDepartmentStoreShipmentOrder 'Заявка отдела поставки' (shipment, orderSupplier) = departmentStoreShipment(shipment)== departmentStoreOrderSupplier(orderSupplier);

CONSTRAINT sureSupplierStockDate(supplierShipment(shipment), departmentStoreShipment(shipment), dateShipment(shipment)) == yesNo.yes
    AND NOT sumOrdersShipment (shipment)  MESSAGE 'Отсутствует обязательный заказ для данного поставщика';

//контроль ассортимента поставки по заказам с учетом ограничений по поставщику
sumQuantityOrderedItemShipment 'Количество по товару в заказах поставки' (item, shipment) = GROUP SUM
    sumQuantityItemOrderSupplier (orderSupplier, item)
    IF inShipmentOrder (shipment, orderSupplier) BY item, shipment;

isOrderedItemShipment 'Товар есть в заказах поставки' (item, shipment) =  sumQuantityOrderedItemShipment(item, shipment) > 0;

isShippedOrOrderedItemShipment 'Товар или заказан или поставлен' (item, shipment) =
    sumQuantityOrderedItemShipment(item, shipment) OR quantityShipmentDetailItemShipment(item, shipment);

isNotShipedOrderedItemShipment 'Товар есть в заказе и отсутствует в поставке' (item, shipment) =
    isOrderedItemShipment (item, shipment) AND NOT quantityShipmentDetailItemShipment(item, shipment) > 0;

isOrderedShipmentDetail 'Товар поставки есть в заказах поставки' (shipmentDetail) = isOrderedItemShipment(itemShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail));

quantityOrderedShipmentDetailsShipment 'Количество позиций, для которых есть заказ' (shipment) = GROUP SUM 1 IF isOrderedShipmentDetail(shipmentDetail) AND shipmentShipmentDetail(shipmentDetail)==shipment BY shipment;
percentOrderedShipmentDetailsShipment 'Процент позиций поставки, для которых есть заказ' (shipment) =
    UNION OVERRIDE 0 AND shipment IS shipment, [X*100/Y](
    quantityOrderedShipmentDetailsShipment(shipment),
    UNION OVERRIDE 1 IF shipment IS shipment, countShipmentDetailShipment(shipment)) IN shipmentOrderGroup;

controlSupplierStockShipment 'Контролировать ассортимент поставщика' (shipment) = DATA yesNo (shipment);
controlSupplierStockShipment(shipment) <- controlSupplierStockDate (supplierShipment(shipment), departmentStoreShipment(shipment), dateShipment(shipment))
                WHEN CHANGED(supplierShipment(shipment));

surePercentSupplierShipment 'Обязательный % заказанных товаров в прих. накладной' = DATA INTEGER (shipment);
surePercentSupplierShipment (shipment) <- surePercentSupplier(supplierShipment (shipment)) WHEN CHANGED(supplierShipment(shipment));

enoughOrderedShipmentDetailsShipment(shipment) = percentOrderedShipmentDetailsShipment(shipment) >= surePercentSupplierShipment (shipment);

CONSTRAINT controlSupplierStockShipment(shipment) == yesNo.yes AND NOT enoughOrderedShipmentDetailsShipment (shipment)
            MESSAGE 'Процент заказанных позиций меньше допустимого для поставщика';

isAvailableOrderShipment 'Заявка допустимая для заказа' (shipment, orderSupplier) = dateShipment (shipment) <= sumDate(dateOrderSupplier (orderSupplier), UNION OVERRIDE 0 IF shipment IS shipment, afterDaysSupplier (supplierShipment(shipment)));

@defineDocumentHeaderPosted(orderSupplier);

FORM ordersShipment 'Заказы'
    OBJECTS s=shipment FIXED PANEL
    PROPERTIES (s) READONLY seriesNumberObject, dateShipment

    OBJECTS o=orderSupplier

    PROPERTIES (s, o) inShipmentOrder
    PROPERTIES (o) READONLY numberObject, seriesObject, curDateOrderSupplier, dateOrderSupplier, nameDepartmentStoreOrderSupplier,
          nameSupplierOrderSupplier, completePercentageOrderSupplier, totalSumOrderSupplier, timeCreated, nameUserCreated

    FILTERS isSupplierShipmentOrder (s, o),
            isDepartmentStoreShipmentOrder (s, o),
            isAvailableOrderShipment (s, o),
            isPostedOrderSupplier(o)
;

DESIGN ordersShipment FROM DEFAULT {
    PROPERTY(seriesNumberObject(s)) { focusable = FALSE; }
    PROPERTY(dateShipment(s)) { focusable = FALSE; }
}

dialogOrdersShipment 'Заказы' (shipment) = ACTION FORM ordersShipment OBJECTS s MODAL SHORTCUT ordersShipment DEFAULT;

quantityShipmentOrderItem 'Поставленное количество' (orderSupplier, item) = GROUP SUM quantityShipmentDetail (shipmentDetail) IF inShipmentOrder (shipmentShipmentDetail (shipmentDetail), orderSupplier) BY orderSupplier, itemShipmentDetail(shipmentDetail);

//контроль цен поставки по заказам с учетом допустимых отклонений по поставщику
priceOrderItemShipment 'Цена товара в заказах поставки (максим.)' (item, shipment) = GROUP MAX
        priceSupplierItemOrderSupplier(orderSupplier, item) IF inShipmentOrder (shipment, orderSupplier) BY item, shipment;

maxAllowPriceItemShipment 'Максимально допустимая цена в поставке' (item, shipment) = [X*(100+Y)/100](
    priceOrderItemShipment (item, shipment),
    UNION OVERRIDE 0 IF shipment IS shipment, allowablePercentSupplier(supplierShipment(shipment)));

minAllowPriceItemShipment 'Минимально допустимая цена в поставке' (item, shipment) = [X*(100-Y)/100](
    priceOrderItemShipment (item, shipment),
    UNION OVERRIDE 0 IF shipment IS shipment, allowablePercentSupplier(supplierShipment(shipment)));

//    priceOrderItemShipment (item, shipment) * (100 - [UNION OVERRIDE 0 IF shipment IS shipment, allowablePercentSupplier (supplierShipment(shipment))](shipment))/100;
CONSTRAINT supplierPriceShipmentDetail (shipmentDetail) > maxAllowPriceItemShipment (itemShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail))
    AND isPostedShipmentDetail (shipmentDetail) AND allowablePercentSupplier (supplierShipment(shipmentShipmentDetail(shipmentDetail))) MESSAGE 'Цена поставки больше цены заказа';

CONSTRAINT supplierPriceShipmentDetail (shipmentDetail) < minAllowPriceItemShipment (itemShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail))
    AND isPostedShipmentDetail (shipmentDetail) AND allowablePercentSupplier (supplierShipment(shipmentShipmentDetail(shipmentDetail))) MESSAGE 'Цена поставки меньше цены заказа';

isAllowPriceItemShipment 'Допустимая цена поставки' (shipmentDetail) =
    supplierPriceShipmentDetail (shipmentDetail) > maxAllowPriceItemShipment (itemShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail)) OR
    supplierPriceShipmentDetail (shipmentDetail) < minAllowPriceItemShipment (itemShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail));

toFillShipmentDetailsShipment 'Заполнить поставку из заказов' =  ACTION (shipment) {
    FOR isNotShipedOrderedItemShipment (item, shipment) DO {
        ADDOBJ shipmentDetail;
        FOR s == addedObject() DO {
            SET itemShipmentDetail(s) <- item AS item;
            SET quantityShipmentDetail(s) <- sumQuantityOrderedItemShipment(item, shipment);
            SET supplierPriceShipmentDetail(s) <- priceOrderItemShipment(item, shipment);
            SET shipmentShipmentDetail (s) <- shipment AS shipment;
        };
    };
} IN shipmentOrderGroup CONFIRM;

FORM genTimeTable 'Генерация графика'
OBJECTS g=genTimeTable FIXED PANEL, m=month, d=DOW
PROPERTIES(g) READONLY nameUserCreated, timeCreated
PROPERTIES(g) nameGenTimeTableType, nameDepartmentStoreGenTimeTable, nameSupplierGenTimeTable, UNPSupplierGenTimeTable, startDateGenTimeTable,
              endDateGenTimeTable, dayBeforeGenTimeTable, periodGenTimeTable SHOWIF toShowGenDayMonth(g),
              dayAfterGenTimeTable SHOWIF toShowGenDay(g), inAllMonthGenTable SHOWIF toShowGenDayMonth(g),
              stringNumberGenTimeTable SHOWIF toShowGenNumber(g), nameTransferDayGenTimeTable SHOWIF toShowGenNumber(g),
              dayLastOrderGenTimeTable SHOWIF toShowGenDay(g)
PROPERTIES(m) READONLY name SHOWIF toShowGenDayMonth(g)
PROPERTIES(d) READONLY name SHOWIF toShowGenDayMonth(g)
PROPERTIES(g, m) inMonthGenTimeTable SHOWIF toShowGenDayMonth(g)
PROPERTIES(g, d) inDayGenTimeTable SHOWIF toShowGenDayMonth(g)
FILTERS inDateMonthGTT(g, m)
EDIT genTimeTable OBJECT g;

DESIGN genTimeTable FROM DEFAULT {
    g.panel {
        fillVertical = 0.5;
        preferredSize = (1280, 1024);
    }
    ADD g.historyGroup BEFORE functions.box;
}

dialogGenTimeTable 'Показать генерацию графика' (genTimeTable) = ACTION FORM genTimeTable OBJECTS g MODAL;

FORM genTimeTables 'Графики' //служит для добавления сущности "генерации графиков" и в дальнейшем будет удалена
OBJECTS g=genTimeTable
PROPERTIES(g) READONLY name
PROPERTIES(g) ADDFORM, EDITFORM, delete;

FORM preliminaryOrder 'Предварительный заказ'
OBJECTS p=preliminaryOrder FIXED PANEL
PROPERTIES(p) nameDepartmentStorePreliminaryOrder, nameSupplierPreliminaryOrder, dateOrderPreliminaryOrder,
              dateSupplyPreliminaryOrder
EDIT preliminaryOrder OBJECT p;

DESIGN preliminaryOrder FROM DEFAULT {
    p.box{
        title = 'Предварительный заказ';
        childConstraints = TO THE BOTTOM;
        ADD PROPERTY (nameDepartmentStorePreliminaryOrder);
        ADD PROPERTY (nameSupplierPreliminaryOrder);
        ADD PROPERTY (dateOrderPreliminaryOrder);
        ADD PROPERTY (dateSupplyPreliminaryOrder);
    }
}

tmpGTT = SESSION DATA genTimeTable();
tmpDate = SESSION DATA DATE();
tmpDateP = SESSION DATA DATE();
tmpDateS = SESSION DATA DATE();


createGenTimeTable 'Создать график поставок' = ACTION (departmentStore, supplier) NEWSESSION {

    ADDOBJ genTimeTable;
    FOR gt == addedObject() DO {
        SET departmentStoreGenTimeTable(gt) <- departmentStore AS departmentStore;
        SET supplierGenTimeTable(gt) <- supplier AS supplier;
        SET startDateGenTimeTable(gt) <- currentDate();
        SET endDateGenTimeTable(gt) <- sumDate(currentDate(), 30);
        SET dayBeforeGenTimeTable(gt) <- 1;
        SET periodGenTimeTable(gt) <- 0;
        SET dayAfterGenTimeTable(gt) <- 1;
        SET inAllMonthGenTable(gt) <- TRUE;
        //SET dayLastOrderGenTimeTable(gt) <- dateLastPreliminaryOrder(departmentStore, supplier, startDateGenTimeTable(gt));
        FORM genTimeTable OBJECTS g = (gt AS genTimeTable) MODAL;
    }

    IF formResult() == formResult.ok THEN {

        SET tmpGTT() <- chosenObject('g');

        // генерация через N дней
        IF genTimeTableType(tmpGTT()) == genType.genDays THEN {
            SET tmpDate() <- dayLastOrderGenTimeTable(tmpGTT());
            // итерируемся по всем датам через n дней
            WHILE tmpDate() <= endDateGenTimeTable(tmpGTT()) DO {
                IF tmpDate() >= startDateGenTimeTable(tmpGTT()) THEN {
                    ADDOBJ preliminaryOrder;
                    FOR o == addedObject() DO {
                        SET departmentStorePreliminaryOrder(o) <- departmentStoreGenTimeTable(tmpGTT());
                        SET supplierPreliminaryOrder(o) <- supplierGenTimeTable(tmpGTT());
                        SET dateOrderPreliminaryOrder(o) <- subtractDate(tmpDate(), dayBeforeGenTimeTable(tmpGTT()));
                        SET dateSupplyPreliminaryOrder(o) <- tmpDate();
                        SET genTimeTablePreliminaryOrder(o) <- tmpGTT();
                    };
                };
                SET tmpDate() <- sumDate(tmpDate(), dayAfterGenTimeTable(tmpGTT()));
            };
        };

        // генерация по числам
        IF genTimeTableType(tmpGTT()) == genType.genNumber THEN {
            SET tmpDate() <- startDateGenTimeTable(tmpGTT());
            // итерируемся по всем датам через 1 день
            WHILE tmpDate() <= endDateGenTimeTable(tmpGTT()) DO {
                IF isWordInCSV(dayInDate(tmpDate()), stringNumberGenTimeTable(tmpGTT())) == 1 THEN {
                    ADDOBJ preliminaryOrder;
                    FOR o == addedObject() DO {
                        SET departmentStorePreliminaryOrder(o) <- departmentStoreGenTimeTable(tmpGTT());
                        SET supplierPreliminaryOrder(o) <- supplierGenTimeTable(tmpGTT());
                        SET tmpDateS() <- tmpDate();
                        SET genTimeTablePreliminaryOrder(o) <- tmpGTT();
                        // если попали на субботу или воскресенье
                        IF UNION OVERRIDE numberDOWInDate(tmpDateS()) == 0, numberDOWInDate(tmpDateS()) == 6 THEN {
                            IF numberDOW(transferDayGenTimeTable(tmpGTT())) == 1 THEN {
                                // если нужно переносить на понедельник, то добавляем
                                WHILE numberDOWInDate(tmpDateS()) != 1 DO SET tmpDateS() <- sumDate(tmpDateS(), 1);
                            } ELSE {
                                // если нужно переносить на пятницу, то отнимаем
                                WHILE numberDOWInDate(tmpDateS()) != 5 DO SET tmpDateS() <- subtractDate(tmpDateS(), 1);
                            };
                        };
                        SET dateSupplyPreliminaryOrder(o) <- tmpDateS();
                        SET dateOrderPreliminaryOrder(o) <- subtractDate(tmpDateS(), dayBeforeGenTimeTable(tmpGTT()));
                    };
                };
                SET tmpDate() <- sumDate(tmpDate(), 1);
            };
        };

        // генерация по дням и месяцам
        IF genTimeTableType(tmpGTT()) == genType.genDayMonth THEN {
            SET tmpDate() <- startDateGenTimeTable(tmpGTT());
            // итерируемся по всем датам через 1 день
            WHILE tmpDate() <= endDateGenTimeTable(tmpGTT()) DO {
                SET tmpDateP() <- tmpDate();
                WHILE tmpDate() < sumDate(tmpDateP(), 7) AND tmpDate() <= endDateGenTimeTable(tmpGTT()) DO {
                    IF inMonthGenTimeTable(tmpGTT(), monthInDate(tmpDate())) AND inDayGenTimeTable(tmpGTT(), DOWInDate(tmpDate())) THEN {
                        ADDOBJ preliminaryOrder;
                        FOR o == addedObject() DO {
                            SET departmentStorePreliminaryOrder(o) <- departmentStoreGenTimeTable(tmpGTT());
                            SET supplierPreliminaryOrder(o) <- supplierGenTimeTable(tmpGTT());
                            SET dateOrderPreliminaryOrder(o) <- subtractDate(tmpDate(), dayBeforeGenTimeTable(tmpGTT()));
                            SET dateSupplyPreliminaryOrder(o) <- tmpDate();
                            SET genTimeTablePreliminaryOrder(o) <- tmpGTT();
                        };
                    };
                    SET tmpDate() <- sumDate(tmpDate(), 1);
                };
                SET tmpDate() <- sumDate(tmpDate(), periodGenTimeTable(tmpGTT()) * 7);
            };
        };

        EXEC apply();
    };
};
//nextDateOrderSupplier (orderSupplier) <- nextDateOrder(preliminaryOrderOrderSupplier(orderSupplier)) WHEN ASSIGNED(orderSupplier);

// todo : здесь вообще-то нужно заполнять только ассортиментом данного поставщика, а не всем подряд как сейчас
fillInOrderSupplier 'Заполнить заказ рекомендованным количеством' = ACTION (orderSupplier) {
    FOR recommendCountOrderSupplier(orderSupplier, item AS item) AND isSupplierItemDepartmentOrderSupplier(orderSupplier, item AS item)
        AND isBanSupplierItemDepartmentOrderSupplier(orderSupplier, item AS item) DO {
        SET packQuantityItemOrderSupplier(orderSupplier, item) <- recommendCountOrderSupplier(orderSupplier, item AS item) ;
    };
};

//addOrderSupplier 'Создать заказ' = ACTION () NEWSESSION {
//    ADDOBJ orderSupplier;
//    FOR os == addedObject() DO {
//        SET curDateOrderSupplier(os) <- currentDate();
//        FORM orderSupplier OBJECTS o = os AS orderSupplier MODAL;
//        IF formResult() == formResult.ok THEN {
//            EXEC apply();
//        }
//    }
//} TOOLBAR;


createOrderSupplier 'Создать заказ' = [ACTION (preliminaryOrder) {
    ADDOBJ orderSupplier;
    FOR o == addedObject() DO {
        SET dateOrderSupplier(o) <- dateSupplyPreliminaryOrder(preliminaryOrder);
        SET curDateOrderSupplier(o) <- dateOrderPreliminaryOrder(preliminaryOrder);
        SET departmentStoreOrderSupplier(o) <- departmentStorePreliminaryOrder(preliminaryOrder);
        SET supplierOrderSupplier(o) <- supplierPreliminaryOrder(preliminaryOrder);
        SET allowablePercentOrderSupplier(o) <- allowablePercentSupplier(supplierPreliminaryOrder(preliminaryOrder));
        SET preliminaryOrderOrderSupplier(o) <- preliminaryOrder AS preliminaryOrder;
        SET nextDateOrderSupplier(o) <- nextDateOrder(preliminaryOrder);
        EXEC fillInOrderSupplier(o AS orderSupplier);
    }
    EXEC apply();
}] (preliminaryOrder) AND NOT preliminaryOrderToOrderSupplier(preliminaryOrder) CONFIRM;

FORM orderSupplier 'Заказ поставщику'

    TREE treeGroup g=itemGroup PARENT parentItemGroup

    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS o=orderSupplier FIXED PANEL

    PROPERTIES(o)          nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject,
                           curDateOrderSupplier, quantityDaysNextOrder, dateOrderSupplier,
                           quantityDaysAfterNextOrder, nextDateOrderSupplier, nameDepartmentStoreOrderSupplier,
                           nameSupplierOrderSupplier, UNPSupplierOrderSupplier, totalSumOrderSupplier, totalSumVatOrderSupplier,
                           totalFullSumOrderSupplier, allowablePercentOrderSupplier
    PROPERTIES(o) READONLY completePercentageOrderSupplier

    OBJECTS i=item

    PROPERTIES             nameAttributeItemGroupItem(g, i) READONLY, idBarcodeSku(i) READONLY
    FILTERS                nameAttributeItemGroupItem(g, i)
    ORDER BY               nameAttributeItemGroupItem

    PROPERTIES(o, i)       packQuantityItemOrderSupplier, sumQuantityItemOrderSupplier

    PROPERTIES(i) quantityPackItem, minQuantityOrderItem
    PROPERTIES FORCE PANEL nameWareOrderSupplier(o, i)
    PROPERTIES FORCE PANEL READONLY articleItem(i), nameCountryItem(i), retailPriceItemOrderSupplier(o, i),
                                    nameinActionItemOrderSupplier(o, i),
                                    lastOrderSupplier(o, i), warePriceOrderSupplier(o, i), numberDataRangeWareOrderSupplier(o, i),
                                    valueWareRangeOrderSupplier(o, i)

    PROPERTIES             currentBalanceOrderSupplierItem(o, i), quantityToSellNextOrder(o, i), minReserveItem(i), recommendCountOrderSupplier(o, i)
    PROPERTIES(o, i)       priceSupplierItemOrderSupplier, numberSupplierRangeOrderSupplier,
                           valueSupplierRangeOrderSupplier, sumWareOrderSupplier, retailVATISumItemOrderSupplier,
                           fullSumItemOrderSupplier

    PROPERTIES(o)          fillInOrderSupplier TODRAW i FORCE PANEL

    FILTERS isSupplierItemDepartmentOrderSupplier(o, i),
            isBanSupplierItemDepartmentOrderSupplier(o, i)

    FILTERGROUP filters1
        FILTER 'Показывать только заказанные позиции' 'F10' sumQuantityItemOrderSupplier(o, i) DEFAULT

    EDIT orderSupplier OBJECT o
;

DESIGN orderSupplier FROM DEFAULT {

    main {

        NEW header.box BEFORE o.box {
            childConstraints = TO THE RIGHT;

            NEW headerLeft {
                childConstraints = TO THE BOTTOM;
                ADD o.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreOrderSupplier);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                }
                ADD o.documentPrmGroup;
            }
            ADD o.dateOrderSupplierGroup{
                childConstraints = TO THE BOTTOM;
            };
            ADD o.orderSupplierGroup {
                childConstraints = TO THE BOTTOM;
            };
        }
    }

    POSITION treeGroup.box TO THE LEFT i.box;
    POSITION treeGroup.box TO THE BOTTOM header.box;

    i.grid {
        fillHorizontal = 4;
    }

    i.panel{
        childConstraints = TO THE RIGHT;
            NEW itemBox {
                childConstraints = TO THE BOTTOM;
                title = 'Информация по товару';
                ADD PROPERTY(articleItem);
                ADD PROPERTY(nameCountryItem);
                ADD PROPERTY(retailPriceItemOrderSupplier);
                ADD PROPERTY(numberSupplierRangeOrderSupplier);
                ADD PROPERTY(nameinActionItemOrderSupplier);
                ADD PROPERTY(lastOrderSupplier);
            };
            NEW wareBox {
                childConstraints = TO THE BOTTOM;
                title = 'Посуда';
                ADD PROPERTY(nameWareOrderSupplier);
                ADD PROPERTY(warePriceOrderSupplier);
                ADD PROPERTY(numberDataRangeWareOrderSupplier);
                ADD PROPERTY(valueWareRangeOrderSupplier);
            };
    }

    PROPERTY (fillInOrderSupplier) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
}

FORM orderSupplierPrint 'Заказ поставщику' PRINT

    OBJECTS o=orderSupplier FIXED PANEL

    PROPERTIES(o)          nameNumeratorObject, numberObject, seriesObject,
                           setValueNumeratedObject, curDateOrderSupplier, quantityDaysNextOrder, dateOrderSupplier,
                           quantityDaysAfterNextOrder, nextDateOrderSupplier, nameDepartmentStoreOrderSupplier,
                           companyOrderSupplier, nameSupplierOrderSupplier, UNPSupplierOrderSupplier,
                           emailSupplierOrderSupplier, totalSumOrderSupplier,
                           totalSumVatOrderSupplier, totalFullSumOrderSupplier, allowablePercentOrderSupplier
    PROPERTIES(o) READONLY completePercentageOrderSupplier

    OBJECTS i=item

    PROPERTIES(i) READONLY nameAttributeItem , idBarcodeSku
    ORDER BY               nameAttributeItem

    PROPERTIES(o, i)       packQuantityItemOrderSupplier, sumQuantityItemOrderSupplier

    PROPERTIES(i) quantityPackItem, minQuantityOrderItem
    PROPERTIES FORCE PANEL nameWareOrderSupplier(o, i)
    PROPERTIES FORCE PANEL READONLY articleItem(i), nameCountryItem(i), retailPriceItemOrderSupplier(o, i),
                                    nameinActionItemOrderSupplier(o, i),
                                    lastOrderSupplier(o, i), warePriceOrderSupplier(o, i), numberDataRangeWareOrderSupplier(o, i),
                                    valueWareRangeOrderSupplier(o, i)

    PROPERTIES             currentBalanceOrderSupplierItem(o, i), quantityToSellNextOrder(o, i), minReserveItem(i), recommendCountOrderSupplier(o, i)
    PROPERTIES(o, i)       priceSupplierItemOrderSupplier, numberSupplierRangeOrderSupplier,
                           valueSupplierRangeOrderSupplier, sumWareOrderSupplier, retailVATISumItemOrderSupplier,
                           fullSumItemOrderSupplier

    FILTERS isSupplierItemDepartmentOrderSupplier(o, i),
            isBanSupplierItemDepartmentOrderSupplier(o, i)

    FILTERGROUP filters1
        FILTER 'Показывать только заказанные позиции' 'F10' sumQuantityItemOrderSupplier(o, i) DEFAULT

;

toPrintOrderSupplier 'Печать заказа поставщику' (orderSupplier) = ACTION FORM orderSupplierPrint OBJECTS o IMAGE 'print.png' IN printGroup;

emailPrintOrderSupplier 'Отослать заказ поставщику' (orderSupplier) =
    ACTION EMAIL FROM companyOrderSupplier(orderSupplier)
                 SUBJECT subjectOrderSupplier(orderSupplier)
                 TO emailSupplierOrderSupplier(orderSupplier)
                 INLINE orderSupplierPrint OBJECTS o = orderSupplier IN emailGroup CONFIRM;

FORM orderSuppliers 'Заказы поставщику'

    OBJECTS o=orderSupplier
    PROPERTIES(o) READONLY objectClassName, numberObject, seriesObject, curDateOrderSupplier, quantityDaysNextOrder, dateOrderSupplier,
                           quantityDaysAfterNextOrder, nextDateOrderSupplier, nameDepartmentStoreOrderSupplier,
                           nameSupplierOrderSupplier, completePercentageOrderSupplier, totalSumOrderSupplier, timeCreated,
                           nameUserCreated, allowablePercentOrderSupplier

    PROPERTIES(o)          ADDFORM, EDITFORM SHOWIF isDraftOrderSupplier(o), delete FORCE PANEL SHOWIF isDraftOrderSupplier(o),
                           postOrderSupplier SHOWIF isDraftOrderSupplier(o), unpostOrderSupplier SHOWIF isPostedOrderSupplier(o)
    PROPERTIES(o) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES(o) FORCE PANEL toPrintOrderSupplier, emailPrintOrderSupplier

    OBJECTS i=item

    PROPERTIES(i) READONLY nameAttributeItem, idBarcodeSku
    ORDER BY               nameAttributeItem

    PROPERTIES(o, i) READONLY  packQuantityItemOrderSupplier, sumQuantityItemOrderSupplier

    PROPERTIES(i) READONLY     quantityPackItem, minQuantityOrderItem

    PROPERTIES(o, i) READONLY  priceSupplierItemOrderSupplier, numberSupplierRangeOrderSupplier,
                               valueSupplierRangeOrderSupplier, sumWareOrderSupplier, retailVATISumItemOrderSupplier,
                               fullSumItemOrderSupplier

    FILTERS sumQuantityItemOrderSupplier(o, i)

    //        isSupplierItemDepartmentOrderSupplier(o, i),
    //        isBanSupplierItemDepartmentOrderSupplier(o, i)
;

DESIGN orderSuppliers FROM DEFAULT{

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD o.box;
        ADD i.box;
    }

    PROPERTY (delete(o)){
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
    ADD o.historyGroup{
        childConstraints = TO THE BOTTOM;
    };
    ADD o.postedGroup{
        childConstraints = TO THE BOTTOM;
    };
    POSITION o.historyGroup TO THE LEFT o.postedGroup;

    ADD o.printGroup;
    ADD o.emailGroup;
    POSITION o.emailGroup TO THE RIGHT o.printGroup;

    ADD functions.box;
}

// ----------------------------------- Разрешать поставки ------------------------------------------- //

isOrderDate (date, preliminaryOrder) = dateOrderPreliminaryOrder(preliminaryOrder) == date AS DATE;
isSupplyDate (date, preliminaryOrder) = dateSupplyPreliminaryOrder(preliminaryOrder) == date AS DATE;
isSupplierDepartmentStore (departmentStore, supplier, preliminaryOrder) =
    departmentStorePreliminaryOrder(preliminaryOrder) == departmentStore AND supplierPreliminaryOrder(preliminaryOrder) ==supplier;

dialogGenTimeTablePreliminaryOrder 'Показать генерацию графика' (preliminaryOrder) = dialogGenTimeTable(genTimeTablePreliminaryOrder(preliminaryOrder));

FORM timeTableDate 'График поставок'

    OBJECTS t=DATE FIXED PANEL
    PROPERTIES(t) OBJVALUE

    OBJECTS d=departmentStore FIXED PANEL
    PROPERTIES name(d) SELECTOR

    OBJECTS s=supplier
    PROPERTIES(s) READONLY name

    PROPERTIES createGenTimeTable(d, s) FORCE PANEL

    OBJECTS p=preliminaryOrder
    PROPERTIES(p) dialogGenTimeTablePreliminaryOrder
    PROPERTIES(p) READONLY dateOrderPreliminaryOrder, dateSupplyPreliminaryOrder, dataOrderPreliminaryOrder
    PROPERTIES(p) nextDateOrder, createOrderSupplier
    PROPERTIES(p) ADDFORM, EDITFORM, delete FORCE PANEL
    PROPERTIES(s, d, t) READONLY quantityOrderOrderSupplier, quantitySupplyOrderSupplier, quantityOrderPreliminaryOrder, quantitySupplyPreliminaryOrder

    FILTERS isSupplierDepartmentStore(d, s, p)
    FILTERGROUP filters
        FILTER 'С предварительным заказом на дату заказа' 'F10' quantityOrderPreliminaryOrder(s, d, t)
        FILTER 'С предварительным заказом на дату поставки' 'F10' quantitySupplyPreliminaryOrder(s, d, t)
        FILTER 'С заказом на дату заказа' 'F10' quantityOrderOrderSupplier(s, d, t)
        FILTER 'С заказом на дату поставки' 'F10' quantitySupplyOrderSupplier(s, d, t)
    FILTERGROUP filters2
        FILTER 'Заказы после даты заказа' 'F10' isOrderDatePreliminaryOrder(p, t) DEFAULT
        FILTER 'Заказы после даты поставки' 'F10' isSupplyDatePreliminaryOrder(p, t)
        FILTER 'Заказы на дату заказа' 'F10' isOrderDate(t, p)
        FILTER 'Заказы на дату поставки' 'F10' isSupplyDate(t, p)

    ORDER BY dateOrderPreliminaryOrder
;

DESIGN timeTableDate FROM DEFAULT {

    NEW topContainer{

        type = SPLITH;
        childConstraints = TO THE RIGHT;

        ADD s.box{
            fillHorizontal = 3;
        }
        ADD p.box{
            fillHorizontal = 2;
        }
    }

    ADD PROPERTY(createGenTimeTable) IN d.panel;
    PROPERTY (delete(p)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }

    ADD functions.box;
}

FORM printTimeTable 'Печать графика поставок по датам'

    OBJECTS interval = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES objFrom = OBJVALUE(dFrom), objTo = OBJVALUE(dTo)

    OBJECTS d=departmentStore FIXED PANEL
    PROPERTIES name(d) SELECTOR

    OBJECTS p=preliminaryOrder
    PROPERTIES(p) dialogGenTimeTablePreliminaryOrder
    PROPERTIES(p) READONLY dateOrderPreliminaryOrder, dateSupplyPreliminaryOrder, dataOrderPreliminaryOrder,
                           nameSupplierPreliminaryOrder, nextDateOrder
    PROPERTIES(p) createOrderSupplier
    PROPERTIES(p) ADDFORM, EDITFORM, delete FORCE PANEL

    FILTERS inSupplyIntervalPreliminaryOrder(p, dFrom, dTo)
    FILTERS isDepartmentPreliminaryOrder(p, d)

    ORDER BY dateSupplyPreliminaryOrder
;

DESIGN printTimeTable FROM DEFAULT {

    ADD interval.box BEFORE d.box{
        caption = 'Период';
        childConstraints = TO THE RIGHT;
        PROPERTY(objFrom) {
            caption = 'Дата (с)';
        }
        PROPERTY(objTo) {
            caption = 'Дата (по)';
        }
    }
    ADD d.box BEFORE p.box;

    ADD p.box;

    PROPERTY (delete(p)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
    POSITION d.box TO THE BOTTOM interval.box;

    ADD functions.box;
}

//----------------------------------- Подбор товаров -------------------------------------------------------

quantityInputItem 'Кол-во' = SESSION DATA NUMERIC[14,3] (item);
isInputItem 'Вкл' = SESSION DATA BOOLEAN (item);

FORM itemDepartmentStoreInput 'Подбор товаров'
    OBJECTS d=departmentStore FIXED PANEL
    PROPERTIES(d) READONLY name

    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY gname = name(g)
    ORDER BY gname

    OBJECTS i=item
    PROPERTIES idBarcodeSku(i) READONLY, nameAttributeItemGroupItem(g, i) READONLY, shortNameUOMItem(i) READONLY
    FILTERS nameAttributeItemGroupItem(g, i)
    ORDER BY nameAttributeItemGroupItem

    PROPERTIES currentBalanceSkuLedger(i, d), currentRetailPriceLedger(i, d), quantityInputItem(i)

    FILTERGROUP filterBalance
        FILTER 'На остатках' 'F10' currentBalanceSkuLedger(i, d)
    FILTERGROUP filterSelected
        FILTER 'Выбранные' 'F9' quantityInputItem(i)
;

DESIGN itemDepartmentStoreInput FROM DEFAULT {
    POSITION treeGroup.box TO THE LEFT i.box;

    treeGroup.tree {
        fillHorizontal = 0.4;
    }

    i.grid {
        defaultComponent = TRUE;
    }
}

META metaCodeInputMultipleItems (object)

    inputMultipleItems###object 'Подбор товаров' = ACTION (object) {
        FORM itemDepartmentStoreInput OBJECTS d = departmentStore###object(object) MODAL;
        IF formResult() == formResult.ok THEN {
            FOR quantityInputItem(item) DO {
                ADDOBJ object##Detail;
                FOR w == addedObject() DO {
                    SET object###object##Detail(w) <- object AS object;
                    SET item###object##Detail(w) <- item AS item;
                    SET quantity###object##Detail(w) <- quantityInputItem(item);
                }
            }
        }
        SET quantityInputItem(item) <- NULL;
    } TOOLBAR;

END

META metaCodeInputMultipleItemsBill (object)

    inputMultipleItems###object 'Подбор товаров (продажа)' = ACTION (object) {
        FORM itemDepartmentStoreInput OBJECTS d = departmentStore###object(object) MODAL;
        IF formResult() == formResult.ok THEN {
            FOR quantityInputItem(item) DO {
                ADDOBJ object##Sale##Detail;
                FOR w == addedObject() DO {
                    SET object###object##Sale##Detail(w) <- object AS object;
                    SET item###object##Sale##Detail(w) <- item AS item;
                    SET quantity###object##Sale##Detail(w) <- quantityInputItem(item);
                }
            }
        }
        SET quantityInputItem(item) <- NULL;
    } TOOLBAR;

END

//------------------------------------------------Подбор товара для возврата поставщику-----------------------------------------

FORM itemDepartmentStoreSupplierInput 'Подбор товаров'
    OBJECTS d=departmentStore FIXED PANEL
    PROPERTIES(d) READONLY name

    OBJECTS s=supplier FIXED PANEL
    PROPERTIES(s) READONLY name

    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY gname = name(g)
    ORDER BY gname

    OBJECTS i=item
    PROPERTIES idBarcodeSku(i) READONLY, nameAttributeItemGroupItem(g, i) READONLY, shortNameUOMItem(i) READONLY
    FILTERS nameAttributeItemGroupItem(g, i)
    ORDER BY nameAttributeItemGroupItem

    PROPERTIES currentBalanceSkuLedger(i, d), currentRetailPriceLedger(i, d), quantityInputItem(i)

    FILTERGROUP filterSupply
        FILTER 'Поставлявшиеся' 'F11' sumQuantityItemShipment(d, s, i) DEFAULT
    FILTERGROUP filterBalance
        FILTER 'На остатках' 'F10' currentBalanceSkuLedger(i, d) DEFAULT
    FILTERGROUP filterSelected
        FILTER 'Выбранные' 'F9' quantityInputItem(i)
;

DESIGN itemDepartmentStoreSupplierInput FROM DEFAULT {
    POSITION treeGroup.box TO THE LEFT i.box;
    POSITION d.box TO THE LEFT s.box;

    treeGroup.tree {
        fillHorizontal = 0.4;
    }

    i.grid {
        defaultComponent = TRUE;
    }
}

META metaCodeInputMultipleItemsSupplier (object)

    inputMultipleItemsSupplier###object 'Подбор товаров' = ACTION (object) {
        FORM itemDepartmentStoreSupplierInput OBJECTS d = departmentStore###object(object), s = supplier###object(object) MODAL;
        IF formResult() == formResult.ok THEN {
            FOR quantityInputItem(item) DO {
                ADDOBJ object##Detail;
                FOR w == addedObject() DO {
                    SET object###object##Detail(w) <- object AS object;
                    SET item###object##Detail(w) <- item AS item;
                    SET quantity###object##Detail(w) <- quantityInputItem(item);
                }
            }
        }
        SET quantityInputItem(item) <- NULL;
    } TOOLBAR;

END

META metaCodeInputMultipleItemsSupplierBill (object)

    inputMultipleItemsSupplier###object 'Подбор товаров (возврат)' = ACTION (object) {
        FORM itemDepartmentStoreInput OBJECTS d = departmentStore###object(object) MODAL;
        IF formResult() == formResult.ok THEN {
            FOR quantityInputItem(item) DO {
                ADDOBJ object##Return##Detail;
                FOR w == addedObject() DO {
                    SET object###object##Return##Detail(w) <- object AS object;
                    SET item###object##Return##Detail(w) <- item AS item;
                    SET quantity###object##Return##Detail(w) <- quantityInputItem(item);
                }
            }
        }
        SET quantityInputItem(item) <- NULL;
    } TOOLBAR;

END

//----------------------------------- Подбор товаров для переоценки -------------------------------------------------------

FORM itemDepartmentStoreBalanceInput 'Подбор товаров'
    OBJECTS d=departmentStore FIXED PANEL
    PROPERTIES(d) READONLY name

    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY gname = name(g)
    ORDER BY gname

    OBJECTS i=item
    PROPERTIES idBarcodeSku(i) READONLY, nameAttributeItemGroupItem(g, i) READONLY, shortNameUOMItem(i) READONLY
    FILTERS nameAttributeItemGroupItem(g, i)
    ORDER BY nameAttributeItemGroupItem

    PROPERTIES currentBalanceSkuLedger(i, d), currentRetailPriceLedger(i, d), isInputItem(i)

    FILTERGROUP filterBalance
        FILTER 'На остатках' 'F10' currentBalanceSkuLedger(i, d)
    FILTERGROUP filterSelected
        FILTER 'Выбранные' 'F9' quantityInputItem(i)
;

DESIGN itemDepartmentStoreBalanceInput FROM DEFAULT {
    POSITION treeGroup.box TO THE LEFT i.box;

    treeGroup.tree {
        fillHorizontal = 0.4;
    }

    i.grid {
        defaultComponent = TRUE;
    }
}

META metaCodeInputMultipleItemsBalance (object)

    inputMultipleItemsBalance###object 'Подбор товаров' = ACTION (object) {
        FORM itemDepartmentStoreBalanceInput OBJECTS d = departmentStore###object(object) MODAL;
        IF formResult() == formResult.ok THEN {
            FOR isInputItem(item) DO {
                ADDOBJ object##Detail;
                FOR w == addedObject() DO {
                    SET object###object##Detail(w) <- object AS object;
                    SET item###object##Detail(w) <- item AS item;
                    SET quantity###object##Detail(w) <- currentBalanceSkuLedger(item, departmentStore###object(object));
                }
            }
        }
        SET isInputItem(item) <- NULL;
    } TOOLBAR;

END

//----------------------------------- Загрузка в ВУ -------------------------------------------------------

inGroupMachineryItem 'Вкл' (groupMachinery, item) = groupMachinery IS groupMachinery
                                                    AND item IS item
                                                         AND NOT (filterItemsGroupMachinery(groupMachinery) AND NOT inGroupMachineryItemGroup(groupMachinery, itemGroupSku(item)))
                                                         AND NOT (groupMachinery IS groupScales AND NOT passScalesItem(item));

CLASS ABSTRACT machineryPriceTransaction 'Загрузка прайса в оборудование' : historyObject;
TABLE machineryPriceTransaction (machineryPriceTransaction);
TABLE machineryPriceTransactionBarcode (machineryPriceTransaction, barcode);

CLASS cashRegisterPriceTransaction 'Загрузка прайса в кассы' : machineryPriceTransaction;
CLASS scalesPriceTransaction 'Загрузка прайса в весы' : machineryPriceTransaction;
CLASS checkPriceTransaction 'Загрузка прайса в прайс чекеры' : machineryPriceTransaction;
CLASS terminalPriceTransaction 'Загрузка прайса в ТСД' : machineryPriceTransaction;

groupCashRegisterCashRegisterPriceTransaction 'Группа касс' = DATA groupCashRegister (cashRegisterPriceTransaction);
groupScalesScalesRegisterPriceTransaction 'Группа весов' = DATA groupScales (scalesPriceTransaction);
groupCheckCheckRegisterPriceTransaction 'Группа прайс чекеров' = DATA groupCheck (checkPriceTransaction);
groupTerminalTerminalPriceTransaction 'Группа ТСД' = DATA groupTerminal (terminalPriceTransaction);

groupMachineryMachineryPriceTransaction 'Группа оборудования (ИД)' (transaction) = UNION EXCLUSIVE groupCashRegisterCashRegisterPriceTransaction(transaction),
                                                                                                   groupScalesScalesRegisterPriceTransaction(transaction),
                                                                                                   groupCheckCheckRegisterPriceTransaction(transaction),
                                                                                                   groupTerminalTerminalPriceTransaction(transaction)PERSISTENT;

nameGroupMachineryMachineryPriceTransaction 'Группа оборудования' (transaction) = nameGroupMachinery(groupMachineryMachineryPriceTransaction(transaction));

departmentStoreMachineryPriceTransaction (transaction) = departmentStoreGroupMachinery(groupMachineryMachineryPriceTransaction(transaction));

equipmentServerMachineryPriceTransaction (transaction) = equipmentServerGroupMachinery(groupMachineryMachineryPriceTransaction(transaction));

sidEquipmentServerMachineryPriceTransaction (transaction) = sidEquipmentServer(equipmentServerMachineryPriceTransaction (transaction));

dateMachineryPriceTransaction 'Дата' = DATA DATE (machineryPriceTransaction);
dateMachineryPriceTransaction (transaction) <- currentDate() WHEN ASSIGNED(transaction IS machineryPriceTransaction);

timeMachineryPriceTransaction 'Время' = DATA TIME (machineryPriceTransaction);
timeMachineryPriceTransaction (transaction) <- currentTime() WHEN ASSIGNED(transaction IS machineryPriceTransaction);

dateTimeMachineryPriceTransaction 'Дата/время' (transaction) = toDateTime(dateMachineryPriceTransaction(transaction), timeMachineryPriceTransaction(transaction));

snapshotMachineryPriceTransaction 'Целиком' = DATA BOOLEAN (machineryPriceTransaction);

succeededMachineryPriceTransaction 'Загружена' = DATA BOOLEAN (machineryPriceTransaction);
canceledMachineryPriceTransaction 'Отменена' = DATA BOOLEAN (machineryPriceTransaction);
processMachineryPriceTransaction 'Требуется загрузка' = machineryPriceTransaction IS machineryPriceTransaction AND NOT
                                                        succeededMachineryPriceTransaction(machineryPriceTransaction) AND NOT
                                                        canceledMachineryPriceTransaction(machineryPriceTransaction);

inMachineryPriceTransactionMachinery 'Вкл' = DATA BOOLEAN (machineryPriceTransaction, machinery);
nppsMachineryPriceTransaction 'Номера устройств' = GROUP CONCAT castToString3(nppMachinery(machinery)) IF inMachineryPriceTransactionMachinery(transaction, machinery), ',' BY transaction PERSISTENT;

orderMachineryPriceTransaction (transaction) = LIST(dateTimeMachineryPriceTransaction(transaction), transaction) PERSISTENT;

inMachineryPriceTransactionBarcode 'Вкл' = DATA BOOLEAN (machineryPriceTransaction, barcode);
nameMachineryPriceTransactionBarcode 'Наименование' = DATA STRING[255] (machineryPriceTransaction, barcode);
priceMachineryPriceTransactionBarcode 'Цена' = DATA NUMERIC[14,2] (machineryPriceTransaction, barcode);
daysExpiryMachineryPriceTransactionBarcode 'Срок годности в днях с момента фасовки' = DATA NUMERIC[8,2] (machineryPriceTransaction, barcode);
hoursExpiryMachineryPriceTransactionBarcode 'Срок годности в часах с момента фасовки' = DATA INTEGER (machineryPriceTransaction, barcode);
labelFormatMachineryPriceTransactionBarcode 'Формат этикетки' = DATA INTEGER (machineryPriceTransaction, barcode);
compositionMachineryPriceTransactionBarcode 'Состав товара' = DATA TEXT (machineryPriceTransaction, barcode);
FORM cellScales 'Ячейки весов'
    OBJECTS grs=groupScales
        PROPERTIES(grs) READONLY nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery, roundSalesGroupMachinery,
                             transferGroupMachinery, filterItemsGroupMachinery, cellGroupScales, sidSectionGroupScales, directoryGroupScales,
                             pieceItemCodeGroupScales, weightItemCodeGroupScales

    OBJECTS cs=cellScales
    PROPERTIES(cs)  numberCellScales, compositionCellScales, delete

    FILTERS isGroupScalesCellScales(grs, cs)
;

DESIGN cellScales FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD grs.box;
        ADD cs.box;
    }
    ADD functions.box;
}

isWeightMachineryPriceTransactionBarcode 'Весовой товар' = DATA BOOLEAN (machineryPriceTransaction, barcode);
itemGroupMachineryPriceTransactionBarcode 'Группа товара' = DATA itemGroup (machineryPriceTransaction, barcode);
expirationDateSkuDepartmentStoreMachineryPriceTransactionBarcode 'Крайний срок годности' = DATA DATE (machineryPriceTransaction, barcode);
TABLE barcodeGroupMachinery (barcode, groupMachinery);

lastOrderTransactionBarcodeGroupMachinery (barcode, groupMachinery) = GROUP MAX orderMachineryPriceTransaction(transaction)
                                                                          AND inMachineryPriceTransactionBarcode(transaction, barcode)
                                                                          AND NOT snapshotMachineryPriceTransaction(transaction)
                                                                          AND NOT canceledMachineryPriceTransaction(transaction)
                                                                      BY barcode, groupMachineryMachineryPriceTransaction(transaction);
lastTransactionBarcodeGroupMachinery (barcode, groupMachinery) = lastOrderTransactionBarcodeGroupMachinery(barcode, groupMachinery) [2] PERSISTENT;

transactionNameBarcodeGroupMachinery 'Текущее наименование в оборудовании' (barcode, groupMachinery)  =
    nameMachineryPriceTransactionBarcode(lastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode);
transactionDaysExpiryBarcodeGroupMachinery 'Текущий срок годности в днях в оборудовании' (barcode, groupMachinery)  =
    daysExpiryMachineryPriceTransactionBarcode(lastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode);
transactionHoursExpiryBarcodeGroupMachinery 'Текущий срок годности в часах в оборудовании' (barcode, groupMachinery)  =
    hoursExpiryMachineryPriceTransactionBarcode(lastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode);
transactionLabelFormatBarcodeGroupMachinery 'Формат этикетки' (barcode, groupMachinery)  =
    labelFormatMachineryPriceTransactionBarcode(lastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode);
transactionCompositionBarcodeGroupMachinery 'Состав товара' (barcode, groupMachinery)  =
    compositionMachineryPriceTransactionBarcode(lastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode);
isWeightBarcodeGroupMachinery 'Весовой товар' (barcode, groupMachinery)  =
    isWeightMachineryPriceTransactionBarcode(lastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode);
itemGroupBarcodeGroupMachinery 'Группа товара' (barcode, groupMachinery)  =
    itemGroupMachineryPriceTransactionBarcode(lastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode);
expirationDateSkuDepartmentStoreBarcodeGroupMachinery 'Крайний срок годности' (barcode, groupMachinery)  =
    expirationDateSkuDepartmentStoreMachineryPriceTransactionBarcode(lastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode);
transactionPriceBarcodeGroupMachinery 'Текущая цена в оборудовании' (barcode, groupMachinery)  =
    priceMachineryPriceTransactionBarcode(lastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode);
ledgerPriceBarcodeGroupMachinery 'Текущая цена по учету' (barcode, groupMachinery) = currentRetailPriceBarcodeDepartmentStore(barcode, departmentStoreGroupMachinery(groupMachinery));

commentMachineryPriceTransaction 'Примечание' = DATA STRING[30] (machineryPriceTransaction);

priceTransactionDocumentMachineryPriceTransaction = DATA priceTransactionDocument (machineryPriceTransaction);
descriptionPriceTransactionDocumentMachineryPriceTransaction 'Основание загрузки' (transaction) =
    descriptionPriceTransactionDocument(priceTransactionDocumentMachineryPriceTransaction(transaction));

// todo : persistent почему-то не работает
descriptionMachineryPriceTransaction 'Основание' (document) = UNION OVERRIDE descriptionPriceTransactionDocumentMachineryPriceTransaction(document),
                                                                             commentMachineryPriceTransaction(document);

sentPriceTransactionDocument 'Принят к загрузке в оборудование' = DATA BOOLEAN (priceTransactionDocument);
sentPriceTransactionDocument(document) <- NULL WHEN ASSIGNED(isDraftPriceTransactionDocument(document));

// todo : это свойство тоже не становится PERSISTENT
countProcessPriceTransactionDocument 'Кол-во ожидающих транзакций' (document) = GROUP SUM 1 IF processMachineryPriceTransaction(transaction)
                                                                                 BY priceTransactionDocumentMachineryPriceTransaction(transaction) PERSISTENT;

succeededPriceTransactionDocument 'Загружен в оборудование' (document) = sentPriceTransactionDocument (document) AND NOT countProcessPriceTransactionDocument(document);

statusEquipmentPriceTransactionDocument 'Статус загрузки в оборудование' (document) =
                                                        CASE
                                                            WHEN succeededPriceTransactionDocument(document) THEN 'Успешно загружен' IF document IS priceTransactionDocument
                                                            WHEN sentPriceTransactionDocument(document) THEN 'Принят к загрузке' IF document IS priceTransactionDocument
                                                            DEFAULT 'Не загружен' IF document IS priceTransactionDocument
                                                        END;

// перезагрузка прайса целиком
selectedMachinery 'Вкл' = SESSION DATA BOOLEAN (machinery);

GROUP snapshotMachineryPriceGroup 'Перезагрузка прайса' : publicGroup;

//--------------------Сообщения об ошибках транзакций--------------------//
CLASS machineryPriceTransactionError 'Ошибка';
TABLE machineryPriceTransactionError (machineryPriceTransactionError);

dataMachineryPriceTransactionError 'Сообщение об ошибке' = DATA STRING[200] (machineryPriceTransactionError) IN baseGroup;
dateMachineryPriceTransactionError 'Время возникновения' = DATA DATETIME (machineryPriceTransactionError) IN baseGroup;
errorTraceMachineryPriceTransactionError 'След исключения' = DATA TEXT (machineryPriceTransactionError) IN baseGroup;
machineryPriceTransactionMachineryPriceTransactionError 'Транзакция (ID)' = DATA machineryPriceTransaction(machineryPriceTransactionError) IN baseGroup;
quantityMachineryPriceTransactionErrorMachineryPriceTransaction 'Количество ошибок' (MachineryPriceTransaction) = GROUP SUM 1 IF machineryPriceTransactionMachineryPriceTransactionError (machineryPriceTransactionError) == MachineryPriceTransaction
    BY machineryPriceTransactionMachineryPriceTransactionError (machineryPriceTransactionError) IN baseGroup;


FORM groupMachineryInput 'Выбор оборудования для перезагрузки прайса'

    OBJECTS d = departmentStore FIXED PANEL
    PROPERTIES(d) READONLY dname = name

    OBJECTS g = groupMachinery
    PROPERTIES(g) READONLY nameGroupMachinery, nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery
    FILTERS departmentStoreGroupMachinery(g) == d

    OBJECTS m = machinery
    PROPERTIES(m)          selectedMachinery
    PROPERTIES(m) READONLY nppMachinery, descriptionMachinery, portMachinery, useMachinery

    PROPERTIES(m) READONLY FORCE GRID SHOWIF isGroupCashRegister(g) numberCashRegister, directoryCashRegister,
                                                                    nameCashRegisterModelCashRegister, dateCashRegister

    PROPERTIES(m) READONLY FORCE GRID SHOWIF isGroupScales(g)       numberScales, nameScalesModelScales

    FILTERS groupMachineryMachinery(m) == g
;

DESIGN groupMachineryInput FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
    }
    PROPERTY(dname) {
        focusable = FALSE;
    }
}

snapshotGroupMachineryDepartmentStore 'Перезагрузить прайс' = ACTION (departmentStore) NEWSESSION {
    FORM groupMachineryInput OBJECTS d = (departmentStore AS departmentStore) MODAL;
    IF formResult() == formResult.ok THEN {
        LOCAL groupMachinery = groupMachinery ();
        SET groupMachinery() <- chosenObject('g');
        IF groupMachinery() IS groupScales THEN
            ADDOBJ scalesPriceTransaction
        ELSE IF groupMachinery() IS groupCheck THEN
            ADDOBJ checkPriceTransaction
        ELSE IF groupMachinery() IS groupTerminal THEN
            ADDOBJ terminalPriceTransaction
        ELSE
            ADDOBJ cashRegisterPriceTransaction;
        FOR t == addedObject() DO {
            SET groupMachineryMachineryPriceTransaction(t) <- groupMachinery();
            SET commentMachineryPriceTransaction(t) <- 'Перезагрузка прайса целиком';
            SET snapshotMachineryPriceTransaction(t) <- TRUE;
            SET inMachineryPriceTransactionMachinery(t, machinery) <- selectedMachinery(machinery);
            SET inMachineryPriceTransactionBarcode(t, barcode) <- TRUE AND lastTransactionBarcodeGroupMachinery(barcode, groupMachinery())
                                                                       AND inGroupMachineryItem(groupMachinery(), skuBarcode(barcode)) // важно, что товар должен быть активным на текущий момент
                                                                       AND activeBarcode(barcode);
            SET nameMachineryPriceTransactionBarcode(t, barcode) <- transactionNameBarcodeGroupMachinery(barcode, groupMachinery());
            SET daysExpiryMachineryPriceTransactionBarcode(t, barcode) <- transactionDaysExpiryBarcodeGroupMachinery(barcode, groupMachinery());
            SET hoursExpiryMachineryPriceTransactionBarcode(t, barcode) <- transactionHoursExpiryBarcodeGroupMachinery(barcode, groupMachinery());
            SET labelFormatMachineryPriceTransactionBarcode(t, barcode) <- transactionLabelFormatBarcodeGroupMachinery(barcode, groupMachinery());
            SET compositionMachineryPriceTransactionBarcode(t, barcode) <- transactionCompositionBarcodeGroupMachinery(barcode, groupMachinery());
            FOR compositionMachineryPriceTransactionBarcode(t, barcode) AND groupMachineryMachineryPriceTransaction(t) IS groupScales
                AND NOT groupScalesCompositionToCellScales (groupMachineryMachineryPriceTransaction(t), compositionMachineryPriceTransactionBarcode(t, barcode)) DO {

                ADDOBJ cellScales;
                FOR c == addedObject() DO {
                    SET groupScalesCellScales(c) <- groupMachinery() AS groupScales;
                    SET compositionCellScales(c) <- compositionMachineryPriceTransactionBarcode (t, barcode);
                }
            }
            SET isWeightMachineryPriceTransactionBarcode(t, barcode) <- isWeightBarcodeGroupMachinery(barcode, groupMachinery());
            SET itemGroupMachineryPriceTransactionBarcode(t, barcode) <- itemGroupBarcodeGroupMachinery(barcode, groupMachinery());
            SET expirationDateSkuDepartmentStoreMachineryPriceTransactionBarcode(t, barcode) <- expirationDateSkuDepartmentStoreBarcodeGroupMachinery(barcode, groupMachinery());
            SET priceMachineryPriceTransactionBarcode(t, barcode) <- transactionPriceBarcodeGroupMachinery(barcode, groupMachinery());
        }
        EXEC apply();
    }
} CONFIRM IN snapshotMachineryPriceGroup;

// Инкрементная загрузка
GROUP incrementMachineryPriceGroup 'Инкрементная загрузка' : publicGroup;

createMachineryPriceTransactionSnapshot = SESSION DATA BOOLEAN ();

createMachineryPriceTransactionItem = SESSION DATA BOOLEAN (item);
createMachineryPriceTransactionBarcodeGroupMachinery (barcode, groupMachinery) = createMachineryPriceTransactionItem(skuBarcode(barcode)) // если передали параметром
                                                                                 AND inGroupMachineryItem(groupMachinery, skuBarcode(barcode)) // если на эту группу оборудования должна закачиваться
                                                                                 AND activeBarcode(barcode) // если активный штрих-код
                                                                                 AND ledgerPriceBarcodeGroupMachinery(barcode, groupMachinery); // если есть цена розничная

createMachineryPriceTransactionDocument = SESSION DATA priceTransactionDocument();
createMachineryPriceTransactionComment = SESSION DATA STRING[20] ();

createMachineryPriceTransaction 'Создать транзакцию' = ACTION (departmentStore) {
    LOCAL message = STRING[3000] ();
    LOCAL sentSomething = BOOLEAN();
    SET message() <- 'Принято к загрузке в оборудование : \n';

    FOR departmentStoreGroupMachinery(groupMachinery) == departmentStore DO {
        LOCAL inBarcode = BOOLEAN (barcode);
        // todo : не работает
//        SET tempBarcode(barcode) <- NULL;
        IF createMachineryPriceTransactionSnapshot() THEN
            SET inBarcode(barcode) <- createMachineryPriceTransactionBarcodeGroupMachinery(barcode, groupMachinery)
        ELSE
            SET inBarcode(barcode) <- createMachineryPriceTransactionBarcodeGroupMachinery(barcode, groupMachinery)
                                        AND NOT (ledgerPriceBarcodeGroupMachinery(barcode, groupMachinery) == transactionPriceBarcodeGroupMachinery(barcode, groupMachinery)); // если цена изменилась

        LOCAL countBarcode = INTEGER();
        SET countBarcode() <- [GROUP SUM 1 IF inBarcode(barcode)]();
        IF countBarcode() THEN {

            IF groupMachinery IS groupScales THEN
                ADDOBJ scalesPriceTransaction
            ELSE IF groupMachinery IS groupCheck THEN
                ADDOBJ checkPriceTransaction
            ELSE IF groupMachinery IS groupTerminal THEN
                ADDOBJ terminalPriceTransaction
            ELSE
                ADDOBJ cashRegisterPriceTransaction;

            FOR t == addedObject() DO {
                SET groupMachineryMachineryPriceTransaction(t) <- groupMachinery AS groupMachinery;
                SET priceTransactionDocumentMachineryPriceTransaction(t) <- createMachineryPriceTransactionDocument();
                SET commentMachineryPriceTransaction(t) <- createMachineryPriceTransactionComment();
                SET inMachineryPriceTransactionBarcode(t, barcode) <- inBarcode(barcode);
                IF groupMachinery IS groupScales THEN
                    SET nameMachineryPriceTransactionBarcode(t, barcode) AND inMachineryPriceTransactionBarcode(t, barcode) <- titleScalesBarcode(barcode)
                ELSE
                    SET nameMachineryPriceTransactionBarcode(t, barcode) AND inMachineryPriceTransactionBarcode(t, barcode) <- titleCashBarcode(barcode);
                SET daysExpiryMachineryPriceTransactionBarcode(t, barcode) AND inMachineryPriceTransactionBarcode(t, barcode) <- daysExpiryMachineryBarcode(barcode);
                SET hoursExpiryMachineryPriceTransactionBarcode(t, barcode) AND inMachineryPriceTransactionBarcode(t, barcode) <- hoursExpiryMachineryBarcode(barcode);
                SET labelFormatMachineryPriceTransactionBarcode(t, barcode) AND inMachineryPriceTransactionBarcode(t, barcode) <- labelFormatMachineryBarcode(barcode);
                SET compositionMachineryPriceTransactionBarcode(t, barcode) AND inMachineryPriceTransactionBarcode(t, barcode) <- compositionMachineryBarcode(barcode);
                FOR compositionMachineryPriceTransactionBarcode(t, barcode) AND groupMachineryMachineryPriceTransaction(t) IS groupScales
                    AND NOT groupScalesCompositionToCellScales (groupMachineryMachineryPriceTransaction(t), compositionMachineryPriceTransactionBarcode(t, barcode)) DO {

                    ADDOBJ cellScales;
                    FOR c == addedObject() DO {
                        SET groupScalesCellScales(c) <- groupMachinery AS groupScales;
                        SET compositionCellScales(c) <- compositionMachineryPriceTransactionBarcode (t, barcode);
                    }
                }
                SET isWeightMachineryPriceTransactionBarcode(t, barcode) AND inMachineryPriceTransactionBarcode(t, barcode) <- isWeightMachineryBarcode(barcode);
                SET itemGroupMachineryPriceTransactionBarcode(t, barcode) AND inMachineryPriceTransactionBarcode(t, barcode) <- itemGroupMachineryBarcode(barcode);
                SET expirationDateSkuDepartmentStoreMachineryPriceTransactionBarcode(t, barcode) AND inMachineryPriceTransactionBarcode(t, barcode) <- expirationDateSkuDepartmentStoreMachineryBarcode(barcode, departmentStore);
                SET priceMachineryPriceTransactionBarcode(t, barcode) AND inMachineryPriceTransactionBarcode(t, barcode) <- ledgerPriceBarcodeGroupMachinery(barcode, groupMachinery);
            }
            SET message() <- [FORMULA STRING[3000] '$1 || $2 || \' - \' || CAST($3 as text) || \' товаров.\'\n']
                             (message(), nameGroupMachinery(groupMachinery), countBarcode());
            SET sentSomething() <- TRUE;
        }
    }

    IF sentSomething() THEN
        MESSAGE message()
    ELSE
        MESSAGE 'Загрузка прайса в оборудование не требуется.';
};

createBalanceMachineryPriceTransaction 'Остатки' = ACTION (departmentStore) NEWSESSION AUTOAPPLY {
    SET createMachineryPriceTransactionItem(item) <- TRUE IF currentBalanceSkuLedger(item, departmentStore);
    SET createMachineryPriceTransactionComment() <- 'Инкрементная загрузка остатков';
    EXEC createMachineryPriceTransaction(departmentStore AS departmentStore);
} CONFIRM IN incrementMachineryPriceGroup;

createPriceMachineryPriceTransaction 'Все товары' = ACTION (departmentStore) NEWSESSION AUTOAPPLY {
    SET createMachineryPriceTransactionItem(item) <- TRUE IF currentRetailPriceLedger(item, departmentStore);
    SET createMachineryPriceTransactionComment() <- 'Инкрементная загрузка товаров';
    EXEC createMachineryPriceTransaction(departmentStore AS departmentStore);
} CONFIRM IN incrementMachineryPriceGroup;

META metaCodeDocumentMachineryPriceTransaction (document)

    create###document##MachineryPriceTransaction 'Загрузить в оборудование' = ACTION (document) NEWSESSION AUTOAPPLY {
        SET createMachineryPriceTransactionItem(item) <- TRUE IF quantity###document##DetailItem###document(item, document);
        SET createMachineryPriceTransactionDocument() <- document AS priceTransactionDocument;
        EXEC createMachineryPriceTransaction(departmentStore###document(document));
        SET sentPriceTransactionDocument(document) <- TRUE;
    } TOOLBAR CONFIRM;

    createSnapshot###document##MachineryPriceTransaction 'Перегрузить все позиции' = ACTION (document) NEWSESSION AUTOAPPLY {
        SET createMachineryPriceTransactionSnapshot() <- TRUE;
        SET createMachineryPriceTransactionItem(item) <- TRUE IF quantity###document##DetailItem###document(item, document);
        SET createMachineryPriceTransactionDocument() <- document AS priceTransactionDocument;
        EXEC createMachineryPriceTransaction(departmentStore###document(document));
        SET sentPriceTransactionDocument(document) <- TRUE;
    } SHORTCUT statusEquipmentPriceTransactionDocument CONFIRM;

    showCreateMachineryPriceTransaction###document 'Показывать' (document) = isPosted###document(document) AND NOT sentPriceTransactionDocument(document);
    backgroundCreateMachineryPriceTransaction###document 'Цвет' (document) = IF countProcessPriceTransactionDocument(document) THEN
                                                                                RGB(255,255,128)
                                                                             ELSE
                                                                                RGB(212,255,212) IF showCreateMachineryPriceTransaction###document(document);
END

FORM machineryPriceTransaction 'Загрузка прайса в оборудование'
    OBJECTS t = machineryPriceTransaction FIXED PANEL
    PROPERTIES(t) nameGroupMachineryMachineryPriceTransaction, dateMachineryPriceTransaction, timeMachineryPriceTransaction,
                  snapshotMachineryPriceTransaction, succeededMachineryPriceTransaction, canceledMachineryPriceTransaction

    OBJECTS b = barcode, d = departmentStore
    PROPERTIES(b) READONLY idBarcode
    PROPERTIES(t, b)       inMachineryPriceTransactionBarcode, nameMachineryPriceTransactionBarcode, priceMachineryPriceTransactionBarcode,
     daysExpiryMachineryPriceTransactionBarcode, hoursExpiryMachineryPriceTransactionBarcode, labelFormatMachineryPriceTransactionBarcode,
     isWeightMachineryPriceTransactionBarcode, expirationDateSkuDepartmentStoreMachineryPriceTransactionBarcode,
     compositionMachineryPriceTransactionBarcode FORCE PANEL
    FILTERS inMachineryPriceTransactionBarcode(t, b)

    EDIT machineryPriceTransaction OBJECT t;
;

FORM machineryPriceTransactions 'Загрузки прайса в оборудование'
    OBJECTS d = departmentStore FIXED PANEL
    PROPERTIES name(d) SELECTOR, createBalanceMachineryPriceTransaction(d), createPriceMachineryPriceTransaction(d), snapshotGroupMachineryDepartmentStore(d)

    OBJECTS t = machineryPriceTransaction
    PROPERTIES(t) READONLY snapshotMachineryPriceTransaction, nameGroupMachineryMachineryPriceTransaction, dateMachineryPriceTransaction, timeMachineryPriceTransaction,
                           descriptionMachineryPriceTransaction, succeededMachineryPriceTransaction, canceledMachineryPriceTransaction,
                           quantityMachineryPriceTransactionErrorMachineryPriceTransaction BACKGROUND quantityMachineryPriceTransactionErrorMachineryPriceTransaction(t),
                           nppsMachineryPriceTransaction FORCE PANEL SHOWIF snapshotMachineryPriceTransaction(t)
    PROPERTIES(t) READONLY nameUserCreated, hostnameComputerCreated
    PROPERTIES(t)          ADDFORM, EDITFORM, delete
    FILTERS departmentStoreMachineryPriceTransaction(t) == d

    OBJECTS b = barcode
    PROPERTIES(b)    idBarcode
    PROPERTIES(t, b) nameMachineryPriceTransactionBarcode, priceMachineryPriceTransactionBarcode,
    daysExpiryMachineryPriceTransactionBarcode, hoursExpiryMachineryPriceTransactionBarcode,
    expirationDateSkuDepartmentStoreMachineryPriceTransactionBarcode,
    labelFormatMachineryPriceTransactionBarcode

    FILTERS inMachineryPriceTransactionBarcode(t, b)

    OBJECTS e = machineryPriceTransactionError
    PROPERTIES(e)    dataMachineryPriceTransactionError, dateMachineryPriceTransactionError
    PROPERTIES(e)  FORCE PANEL  errorTraceMachineryPriceTransactionError
    FILTERS machineryPriceTransactionMachineryPriceTransactionError(e) == t
;

DESIGN machineryPriceTransactions FROM DEFAULT {

    main {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD t.box {
            preferredSize = ( -1, 300);
            minimumSize = ( -1, 300);
            maximumSize = ( -1, 300);
        }

        NEW specContainer{
            type = TABBED;
            ADD b.box;
            NEW errorContainer {
               title = 'Сообщения об ошибках';
               ADD e.box;
               PROPERTY(errorTraceMachineryPriceTransactionError(e)) {
                  fillHorizontal = 1;
                  panelLabelAbove = TRUE;
               }
            }
        }
    }
    }

    ADD functions.box;
}

FORM terminalDocuments 'Документы ТСД'
    OBJECTS td=terminalDocument, tdd=terminalDocumentDetail
    PROPERTIES(td)  idTerminalDocument, nameTerminalDocumentTypeTerminalDocument, idTerminalHandbookType1TerminalDocument,
                    idTerminalHandbookType2TerminalDocument, titleTerminalDocument, quantityTerminalDocument, usedTerminalDocument READONLY
    PROPERTIES(td)  ADDFORM, EDITFORM, delete

    PROPERTIES(tdd) numberTerminalDocumentDetail, barcodeTerminalDocumentDetail, nameTerminalDocumentDetail,
    isNewTerminalDocumentDetail, priceTerminalDocumentDetail, quantityTerminalDocumentDetail, sumTerminalDocumentDetail, ADDOBJ

    FILTERS terminalDocumentTerminalDocumentDetail(tdd) == td

    FILTERGROUP filterUse
        FILTER 'Неиспользованные' 'F10' noUsedTerminalDocument(td) DEFAULT

;

DESIGN terminalDocuments FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW topContainer{

            type = SPLITV;
            childConstraints = TO THE BOTTOM;

            ADD td.box;
            ADD tdd.box;
        }
    }

    ADD functions.box;
}

FORM terminalDocumentsDialog 'Документы ТСД'
    OBJECTS td=terminalDocument, tdd=terminalDocumentDetail
    PROPERTIES(td)  READONLY idTerminalDocument, nameTerminalDocumentTypeTerminalDocument, idTerminalHandbookType1TerminalDocument,
                    idTerminalHandbookType2TerminalDocument, titleTerminalDocument, quantityTerminalDocument

    PROPERTIES(tdd) READONLY numberTerminalDocumentDetail, barcodeTerminalDocumentDetail, nameTerminalDocumentDetail,
    isNewTerminalDocumentDetail, priceTerminalDocumentDetail, quantityTerminalDocumentDetail, sumTerminalDocumentDetail

    FILTERS terminalDocumentTerminalDocumentDetail(tdd) == td
    FILTERGROUP filterUse
        FILTER 'Неиспользованные' 'F10' noUsedTerminalDocument(td) DEFAULT
;

DESIGN terminalDocumentsDialog FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW topContainer{

            type = SPLITV;
            childConstraints = TO THE BOTTOM;

            ADD td.box;
            ADD tdd.box;
        }
    }

    ADD functions.box;
}

//----------------------------------- Печать ценников -------------------------------------------------------

CLASS labelTransaction 'Печать ценников' : historyObject;
TABLE labelTransaction(labelTransaction);

dateLabelTransaction 'Дата' = DATA DATE (labelTransaction);
dateLabelTransaction (transaction) <- currentDate() WHEN ASSIGNED(transaction IS labelTransaction);

timeLabelTransaction 'Время' = DATA TIME (labelTransaction);
timeLabelTransaction (transaction) <- currentTime() WHEN ASSIGNED(transaction IS labelTransaction);

departmentStoreLabelTransaction = DATA departmentStore (labelTransaction);
nameDepartmentStoreLabelTransaction 'Отдел магазина' (transaction) = name(departmentStoreLabelTransaction(transaction));
nameStoreLabelTransaction 'Магазин' (transaction) = name(storeDepartmentStore(departmentStoreLabelTransaction(transaction)));
nameCompanyLabelTransaction 'Компания' (transaction) = nameCompanyDepartmentStore(departmentStoreLabelTransaction(transaction));

labelTypeLabelTransaction = DATA labelType (labelTransaction);
nameLabelTypeLabelTransaction 'Тип ценника' (transaction) = name(labelTypeLabelTransaction(transaction));

CONSTRAINT labelTypeLabelTransaction(transaction) AND NOT inLabelTypeDepartmentStore(labelTypeLabelTransaction(transaction), departmentStoreLabelTransaction(transaction))
           CHECKED BY labelTypeLabelTransaction MESSAGE 'Тип ценника запрещен для выбранного подразделения';

fileTemplateLabelTransaction 'Файл шаблона' (transaction) = fileTemplateLabelType(labelTypeLabelTransaction(transaction));

printedPriceTransactionDocument 'Распечатан' = DATA BOOLEAN (priceTransactionDocument);
printedPriceTransactionDocument(document) <- NULL WHEN ASSIGNED(isDraftPriceTransactionDocument(document));

priceTransactionDocumentLabelTransaction = DATA priceTransactionDocument (labelTransaction);
descriptionLabelTransaction 'Основание загрузки' (transaction) =
    descriptionPriceTransactionDocument(priceTransactionDocumentLabelTransaction(transaction));

statusPrintPriceTransactionDocument 'Статус печати ценника' (document) =
    IF printedPriceTransactionDocument(document) THEN 'Распечатан' AND document IS priceTransactionDocument
                                                 ELSE 'Не распечатан' AND document IS priceTransactionDocument;

TABLE labelTransactionBarcode(labelTransaction, barcode);

inLabelTransactionBarcode 'Вкл' (labelTransaction, barcode) = DATA BOOLEAN (labelTransaction, barcode);

quantityLabelTransactionBarcode 'Кол-во' (labelTransaction, barcode) = DATA INTEGER (labelTransaction, barcode);
nameLabelTransactionBarcode 'Наименование' = DATA STRING[255] (labelTransaction, barcode);
priceLabelTransactionBarcode 'Цена' = DATA NUMERIC[14,2] (labelTransaction, barcode);
shortNameUOMLabelTransactionBarcode 'Ед. изм.' =  DATA STRING[5] (labelTransaction, barcode);
countryLabelTransactionBarcode 'Страна'  = DATA STRING[255] (labelTransaction, barcode);
manufacturerLabelTransactionBarcode 'Производитель'  = DATA STRING[255] (labelTransaction, barcode);

FORM printLabelTransaction 'Печать ценников' PRINT
    OBJECTS l = labelTransaction REPORTFILE fileTemplateLabelTransaction(l) FIXED PANEL
    PROPERTIES(l) READONLY nameLabelTypeLabelTransaction, nameDepartmentStoreLabelTransaction, descriptionLabelTransaction,
                  dateLabelTransaction, timeLabelTransaction, nameStoreLabelTransaction, nameCompanyLabelTransaction

    OBJECTS b = barcode
    PROPERTIES(l, b) READONLY inLabelTransactionBarcode
    PROPERTIES(b)    READONLY idBarcode
    PROPERTIES(l, b) READONLY quantityLabelTransactionBarcode, nameLabelTransactionBarcode, priceLabelTransactionBarcode,
                     shortNameUOMLabelTransactionBarcode, countryLabelTransactionBarcode, manufacturerLabelTransactionBarcode
    FILTERS inLabelTransactionBarcode(l, b)
;

FORM customLabelTransaction 'Печать ценников'
    OBJECTS l = labelTransaction FIXED PANEL
    PROPERTIES(l) nameLabelTypeLabelTransaction, nameDepartmentStoreLabelTransaction, descriptionLabelTransaction, dateLabelTransaction, timeLabelTransaction,
                  nameStoreLabelTransaction, nameCompanyLabelTransaction

    OBJECTS b = barcode
    PROPERTIES(l, b)          inLabelTransactionBarcode
    PROPERTIES(b)    READONLY idBarcode
    PROPERTIES(l, b)          quantityLabelTransactionBarcode, nameLabelTransactionBarcode, priceLabelTransactionBarcode,
                              shortNameUOMLabelTransactionBarcode, countryLabelTransactionBarcode, manufacturerLabelTransactionBarcode
    FILTERS inLabelTransactionBarcode(l, b)
;

FORM labelTransactions 'Печать ценников'
    OBJECTS d = departmentStore FIXED PANEL
    PROPERTIES name(d) SELECTOR

    OBJECTS l = labelTransaction
    PROPERTIES(l) READONLY nameLabelTypeLabelTransaction, descriptionLabelTransaction, dateLabelTransaction, timeLabelTransaction
    PROPERTIES(l) READONLY nameUserCreated, hostnameComputerCreated
    FILTERS departmentStoreLabelTransaction(l) == d

    OBJECTS b = barcode
    PROPERTIES(l, b) READONLY inLabelTransactionBarcode
    PROPERTIES(b)    READONLY idBarcode
    PROPERTIES(l, b) READONLY quantityLabelTransactionBarcode, nameLabelTransactionBarcode, priceLabelTransactionBarcode
    FILTERS inLabelTransactionBarcode(l, b)
;

DESIGN labelTransactions FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD l.box;
        ADD b.box;
    }

    ADD functions.box;
}

createLabelTransactionItem = SESSION DATA BOOLEAN (item);
createLabelTransactionDocument = SESSION DATA priceTransactionDocument();
createLabelTransactionSnapshot = SESSION DATA BOOLEAN();

createLabelTransactionFillParams 'Заполнить параметры' = ACTION (labelTransaction, departmentStore) {

    SET departmentStoreLabelTransaction(labelTransaction) <- departmentStore AS departmentStore;
    SET priceTransactionDocumentLabelTransaction(labelTransaction) <- createLabelTransactionDocument();

    SET nameLabelTransactionBarcode(labelTransaction, barcode) AND inLabelTransactionBarcode(labelTransaction, barcode) <- nameSkuBarcode(barcode);
    SET priceLabelTransactionBarcode(labelTransaction, barcode) AND inLabelTransactionBarcode(labelTransaction, barcode) <- currentRetailPriceBarcodeDepartmentStore(barcode, departmentStore);
    SET shortNameUOMLabelTransactionBarcode(labelTransaction, barcode) AND inLabelTransactionBarcode(labelTransaction, barcode) <- shortNameUOMItem(skuBarcode(barcode));
    SET countryLabelTransactionBarcode(labelTransaction, barcode) AND inLabelTransactionBarcode(labelTransaction, barcode) <- countryItem(skuBarcode(barcode));
    SET manufacturerLabelTransactionBarcode(labelTransaction, barcode) AND inLabelTransactionBarcode(labelTransaction, barcode) <- manufacturerItem(skuBarcode(barcode));
}

createLabelTransaction 'Распечатать ценники' = ACTION (departmentStore, date) {

    LOCAL inBarcode = BOOLEAN (barcode);
    SET inBarcode(barcode) <- createLabelTransactionItem(skuBarcode(barcode)) // если передали параметром
                                                         AND activeBarcode(barcode) // если активный штрих-код
                                                         AND currentRetailPriceBarcodeDepartmentStore(barcode, departmentStore);

    IF createLabelTransactionSnapshot() THEN {
        ADDOBJ labelTransaction;
        FOR t == addedObject() DO {
            SET inLabelTransactionBarcode(t, barcode) <- inBarcode(barcode);
            SET quantityLabelTransactionBarcode(t, barcode) AND inLabelTransactionBarcode(t, barcode) <- 1;
            EXEC createLabelTransactionFillParams(t AS labelTransaction, departmentStore AS departmentStore);
            FORM customLabelTransaction OBJECTS l = t AS labelTransaction MODAL;
            IF formResult() == formResult.ok THEN {
                FORM printLabelTransaction OBJECTS l = t AS labelTransaction;
            }
        }
    } ELSE {
        // бежим по всем типам ценников из управленческих параметров
        FOR ([GROUP SUM 1 AND inBarcode(barcode) BY labelBarcodeDepartmentDate(barcode, departmentStore, date), departmentStore, date](l, departmentStore, date)) DO {
            // для каждого создаем по операции печати ценников
            ADDOBJ labelTransaction;
            FOR t == addedObject() DO {
                SET inLabelTransactionBarcode(t, barcode) <- inBarcode(barcode) AND labelBarcodeDepartmentDate(barcode, departmentStore, date) == l;
                SET quantityLabelTransactionBarcode(t, barcode) AND inLabelTransactionBarcode(t, barcode) <- valOverMultiplierBarcodeDepartmentDate(barcode, departmentStore, date);
                SET labelTypeLabelTransaction(t) <- l AS labelType;
                EXEC createLabelTransactionFillParams(t AS labelTransaction, departmentStore AS departmentStore);
                // вызываем печатную форму для каждого из них
                FORM printLabelTransaction OBJECTS l = t AS labelTransaction;
            }
        }
    }
};

META metaCodeDocumentLabelTransaction (document)

    create###document##LabelTransaction 'Печать ценников' = ACTION (document) NEWSESSION AUTOAPPLY {
        SET createLabelTransactionItem(item) <- TRUE IF quantity###document##DetailItem###document(item, document);
        SET createLabelTransactionDocument() <- document AS priceTransactionDocument;
        EXEC createLabelTransaction(departmentStore###document(document), date###document(document));
        SET printedPriceTransactionDocument(document) <- TRUE;
    } TOOLBAR CONFIRM;

    createSnapshot###document##LabelTransaction 'Перепечатать ценники' = ACTION (document) NEWSESSION AUTOAPPLY {
        SET createLabelTransactionItem(item) <- TRUE IF quantity###document##DetailItem###document(item, document);
        SET createLabelTransactionDocument() <- document AS priceTransactionDocument;
        SET createLabelTransactionSnapshot() <- TRUE;
        EXEC createLabelTransaction(departmentStore###document(document), date###document(document));
    } SHORTCUT statusPrintPriceTransactionDocument CONFIRM;

    showPrintLabelTransaction###document 'Показывать' (document) = isPosted###document(document) AND NOT printedPriceTransactionDocument(document);
    backgroundPrintLabelTransaction###document 'Цвет' (document) = RGB(212,255,212) IF showPrintLabelTransaction###document(document);
END

//----------------------------------- Формы поступления товара -------------------------------------------------------
@metaCodeInputMultipleItems(shipment);
@metaCodeDocumentMachineryPriceTransaction(shipment);
@metaCodeDocumentLabelTransaction(shipment);

toShowPriceImporterShipment 'Есть оптовая надбавка' (shipment) = DATA BOOLEAN (shipment) IN documentPrmGroup;

quantityMarkupDetailsShipment 'Количество строк с оптовой надбавкой' (shipment) = GROUP SUM 1
    IF supplierMarkupShipmentDetail(shipmentDetail) BY shipmentShipmentDetail(shipmentDetail);

quantityMarkupDetailsShipment(shipment) => toShowPriceImporterShipment(shipment) RESOLVE FALSE;

toShowWareShipment 'Есть стеклопосуда' (shipment) = DATA BOOLEAN (shipment) IN documentPrmGroup;
toShowPapersShipment 'Документы качества' (shipment) = DATA BOOLEAN (shipment) IN documentPrmGroup;

quantityWareDetailsShipment 'Количество строк с посудой' (shipment) = GROUP SUM 1
    IF wareShipmentDetail(shipmentDetail) BY shipmentShipmentDetail(shipmentDetail);

quantityWareDetailsShipment(shipment) => toShowWareShipment(shipment) RESOLVE FALSE;

// --------------------------- Формы списания ---------------------------------
companyWriteOff (writeOff) = companyDepartmentStore(departmentStoreWriteOff(writeOff));
nameCompanyWriteOff 'Компания' (writeOff) = name(companyWriteOff(writeOff));
nameStoreWriteOff 'Магазин' (writeOff) = nameStoreDepartmentStore(departmentStoreWriteOff(writeOff));
addressLegalEntityWriteOff 'Адрес' (writeOff) = addressLegalEntityDate(companyWriteOff(writeOff), dateWriteOff(writeOff));
UNPLegalEntityWriteOff 'УНП' (writeOff) = UNPLegalEntity(companyWriteOff(writeOff));

wastageCommitteeWriteOff (writeOff) = DATA wastageCommittee (writeOff) IN idGroup;
nameWastageCommitteeWriteOff 'Комиссия для списания' (writeOff) = name(wastageCommitteeWriteOff(writeOff)) IN documentPrmGroup;
wastageCommitteeWriteOff(writeOff) <- wastageCommitteeDepartmentStore(departmentStoreWriteOff(writeOff))
    WHEN ASSIGNED(writeOff IS writeOff);

inWriteOffEmployee (writeOff, employee) = inCommitteeEmployee(wastageCommitteeWriteOff(writeOff), employee);
namePositionEmployeeWriteOff 'Члены комиссии' (writeOff) = namePositionEmployeeCommittee(wastageCommitteeWriteOff(writeOff)) MINCHARWIDTH 50 PREFCHARWIDTH 50;

FORM writeOffPrint 'Списание' PRINT
    OBJECTS w=writeOff FIXED PANEL
    PROPERTIES (w)  SELECTOR numberObject, seriesObject, nameDepartmentStoreWriteOff,
                   dateWriteOff, timeWriteOff, nameReasonOffWriteOff, noteWriteOff, quantityWriteOffDetailWriteOff, accountSumWriteOffDetailWriteOff,
                   nameCompanyWriteOff, nameStoreWriteOff, addressLegalEntityWriteOff, UNPLegalEntityWriteOff, nameWastageCommitteeWriteOff,
                   namePositionEmployeeWriteOff, wastageCommitteeWriteOff

    OBJECTS d=writeOffDetail
    PROPERTIES (d) READONLY indexWriteOffDetail, idBarcodeSkuWriteOffDetail, nameAttributeItemWriteOffDetail, shortNameUOMItemWriteOffDetail,
                   quantityWriteOffDetail, accountPriceWriteOffDetail, accountSumWriteOffDetail, ADDOBJ, delete

    PROPERTIES FORCE PANEL READONLY articleItemWriteOffDetail(d), nameCountryItemWriteOffDetail(d), retailPriceWriteOffDetail(d),
                                    balanceDepartmentStoreItemWriteOff(d)

    OBJECTS e=employee

    PROPERTIES(e) SELECTOR   commonName, namePositionEmployee

    FILTERS inWriteOffWriteOffDetail(w, d),
            inWriteOffEmployee(w, e)

    EDIT writeOff OBJECT w
;

toPrintWriteOff 'Списание' (writeOff) = ACTION FORM writeOffPrint OBJECTS w IMAGE 'print.png' IN printGroup;


@metaCodeInputMultipleItems(writeOff);
@defineDocumentDetailItemOfTerminal(writeOff);

FORM writeOff 'Списание'
    OBJECTS w=writeOff FIXED PANEL
    PROPERTIES (w) nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, nameDepartmentStoreWriteOff,
                   dateWriteOff, timeWriteOff, nameReasonOffWriteOff, noteWriteOff, quantityWriteOffDetailWriteOff,
                   accountSumWriteOffDetailWriteOff, nameWastageCommitteeWriteOff

    OBJECTS d=writeOffDetail
    PROPERTIES (d) indexWriteOffDetail, idBarcodeSkuWriteOffDetail, nameAttributeItemWriteOffDetail, quantityWriteOffDetail,
                   accountPriceWriteOffDetail, accountSumWriteOffDetail, ADDOBJ, delete

    PROPERTIES FORCE PANEL READONLY articleItemWriteOffDetail(d), nameCountryItemWriteOffDetail(d), retailPriceWriteOffDetail(d),
                                    balanceDepartmentStoreItemWriteOff(d)

    PROPERTIES  inputMultipleItemsWriteOff(w) TODRAW d, fillOfTerminalDocumentWriteOff(w) TODRAW d, addWriteOffDetailBarcode(w) TODRAW d,
                cleanAllWriteOffDetailsWriteOff(w) FORCE PANEL TODRAW d
    FILTERS inWriteOffWriteOffDetail(w, d)

    EDIT writeOff OBJECT w
;

DESIGN writeOff FROM DEFAULT{

    main {
        preferredSize = (1024, 768);

        NEW header.box BEFORE d.box {
            childConstraints = TO THE RIGHT;

            NEW headerRow1 {
                childConstraints = TO THE BOTTOM;

                ADD w.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreWriteOff);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateWriteOff);
                    ADD PROPERTY(timeWriteOff);
                }

                ADD w.documentPrmGroup {
                    childConstraints = TO THE RIGHT;
                }
            }

            ADD w.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }

        d.panel{
            childConstraints = TO THE BOTTOM;
        }
    }
}

FORM writeOffs 'Списания'
    OBJECTS w=writeOff
    PROPERTIES (w) READONLY objectClassName, numberObject, seriesObject, dateWriteOff, timeWriteOff, nameDepartmentStoreWriteOff,
                            nameReasonOffWriteOff, noteWriteOff, quantityWriteOffDetailWriteOff, countWriteOffDetailWriteOff,
                            accountSumWriteOffDetailWriteOff, nameWastageCommitteeWriteOff

    PROPERTIES (w) ADDFORM, EDITFORM SHOWIF isDraftWriteOff(w), delete FORCE PANEL SHOWIF isDraftWriteOff(w),
                   postWriteOff SHOWIF isDraftWriteOff(w), unpostWriteOff SHOWIF isPostedWriteOff(w)


    OBJECTS d=writeOffDetail
    PROPERTIES (d) READONLY indexWriteOffDetail, idBarcodeSkuWriteOffDetail, nameAttributeItemWriteOffDetail, quantityWriteOffDetail,
                   accountPriceWriteOffDetail, accountSumWriteOffDetail

    PROPERTIES(w) FORCE PANEL toPrintWriteOff

    FILTERS inWriteOffWriteOffDetail(w, d)
;

DESIGN writeOffs FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD w.box{

            PROPERTY(objectClassName) {
                preferredCharWidth = 15;
            }

            PROPERTY (delete(w)) {
                panelLocation = TOOLBAR;
                askConfirm = TRUE;
            }
        }
        ADD d.box;
    }

    ADD w.printGroup;
    ADD functions.box;
}


FORM specificationPrint 'Счет-фактура' PRINT
    OBJECTS sp=specification FIXED PANEL
    PROPERTIES (sp) SELECTOR seriesNumberObject, nameDepartmentStoreSpecification, dateSpecification, dateToSpecification,
                    fullNameCustomerSpecification, UNPCustomerSpecification, addressCustomerSpecification,
                    numberAccountCustomerSpecification, nameBankAccountCustomerSpecification, addressBankAccountCustomerSpecification,
                    MFOBankAccountCustomerSpecification, departmentBankAccountCustomerSpecification, CBUBankAccountCustomerSpecification,
                    fullNameCompanySpecification, addressCompanySpecification, UNPCompanySpecification,
                    numberAccountCompanySpecification, nameBankAccountCompanySpecification, addressBankAccountCompanySpecification,
                    MFOBankAccountCompanySpecification, departmentBankAccountCompanySpecification, CBUBankAccountCompanySpecification,
                    nameObjectiveAcquiringSpecification, noteSpecification, phoneCustomerSpecification, phoneCompanySpecification,
                    quantitySpecificationDetailSpecification, calcSaleSumSpecificationDetailSpecification, calcVATSumSpecificationDetailSpecification, retailSumSpecificationDetailSpecification

    OBJECTS d=specificationDetail
    PROPERTIES (d) READONLY indexSpecificationDetail, idBarcodeSkuSpecificationDetail, nameAttributeItemSpecificationDetail,
                            shortNameUOMItemSpecificationDetail, quantitySpecificationDetail,
                            retailPriceSpecificationDetail, calcSaleSumSpecificationDetail, numberCalcRangeSpecificationDetail, dataCalcRangeSpecificationDetail,
                            calcVATSumSpecificationDetail, retailSumSpecificationDetail

    FILTERS inSpecificationSpecificationDetail(sp, d)
;

toPrintSpecification 'Счет-фактура'(specification) = ACTION FORM specificationPrint OBJECTS sp IMAGE 'print.png' IN printGroup;

//------------------------------------------- Пересорт товара----------------------------------------------------//

quantityDisparityDetailItemDisparity 'Кол-во для закачки в оборудование (приход)' (item, disparity) = GROUP SUM inputQuantityDisparityDetail(disparityDetail) BY inputItemDisparityDetail(disparityDetail), disparityDisparityDetail(disparityDetail);

@metaCodeDocumentMachineryPriceTransaction(disparity);
@metaCodeDocumentLabelTransaction(disparity);

printPriceChangeDisparity 'Акт переоценки (приход)' (disparity) = printPriceChange(uniquePriceChangeDisparity(disparity)) IN printGroup;
printPriceChangeInputDisparity 'Акт переоценки (остатки)' (disparity) = printPriceChange(uniquePriceChangeInputDisparity(disparity)) IN printGroup;

@metaCodeInputMultipleItems(disparity);

FORM disparity 'Пересортица'

    OBJECTS dis=disparity FIXED PANEL, d=disparityDetail

    PROPERTIES(dis) nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, nameDepartmentStoreDisparity,
                    dateDisparity, timeDisparity,
                    quantityDisparityDetailDisparity, retailSumDisparityDetailDisparity,
                    inputQuantityDisparityDetailDisparity, inputRetailSumDisparityDetailDisparity,
                    numberDisposalDisparity SHOWIF showPriceChangeDisparity(dis),
                    namePriceChangeCommitteeDisparity SHOWIF showPriceChangeDisparity(dis),
                    inputMultipleItemsDisparity TODRAW d

    PROPERTIES(d)   indexDisparityDetail,
                    idBarcodeSkuDisparityDetail, nameAttributeItemDisparityDetail, shortNameUOMItemDisparityDetail,
                    quantityDisparityDetail, retailPriceDisparityDetail, retailSumDisparityDetail,
                    inputIdBarcodeSkuDisparityDetail, inputNameAttributeItemDisparityDetail, inputShortNameUOMItemDisparityDetail,
                    inputQuantityDisparityDetail, inputRetailPriceDisparityDetail, inputRetailSumDisparityDetail
    PROPERTIES(d) ADDOBJ, delete

    PROPERTIES      addDisparityDetailBarcode(dis) TODRAW d

    PROPERTIES (d)  FORCE PANEL importerPriceDisparityDetail, supplierPriceDisparityDetail, nameWareDisparityDetail,
                                warePriceDisparityDetail, valueRetailRangeDisparityDetail, balanceBeforeDisparityDetail,
                                inputCurImporterPriceDisparityDetail, inputCurSupplierPriceDisparityDetail, inputCurNameWareDisparityDetail,
                                inputCurWarePriceDisparityDetail, inputCurValueRetailRangeDisparityDetail, inputCurRetailPriceDisparityDetail,
                                inputImporterPriceDisparityDetail, inputSupplierPriceDisparityDetail, inputNameWareDisparityDetail,
                                inputWarePriceDisparityDetail, inputValueRetailRangeDisparityDetail, inputBalanceBeforeDisparityDetail

    FILTERS         disparityDisparityDetail(d) == dis

    EDIT disparity OBJECT dis
;

DESIGN disparity FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW header.box{
            childConstraints = TO THE RIGHT;
            NEW caseTwo {
                childConstraints = TO THE BOTTOM;
                ADD dis.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreDisparity);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateDisparity);
                    ADD PROPERTY(timeDisparity);
                }
                ADD dis.documentPrmGroup{
                }
            }
                ADD dis.documentSumGroup {
                    childConstraints = TO THE BOTTOM;
                }

        }

        ADD d.box {
            childConstraints = TO THE BOTTOM;
            title = 'Ценовый и количественные показатели';

            NEW row {
                childConstraints = TO THE RIGHT;
                title = 'Расход';
                ADD PROPERTY (importerPriceDisparityDetail);
                ADD PROPERTY (supplierPriceDisparityDetail);
                ADD PROPERTY (nameWareDisparityDetail);
                ADD PROPERTY (warePriceDisparityDetail);
                ADD PROPERTY (valueRetailRangeDisparityDetail);
                ADD PROPERTY (balanceBeforeDisparityDetail);

            }

            NEW row1 {
                title = 'Приход';
                childConstraints = TO THE RIGHT;

                NEW row11{
                    fillHorizontal = 1;
                    childConstraints = TO THE BOTTOM;
                    title = 'Цены (приход) текущие';
                    ADD PROPERTY (inputCurImporterPriceDisparityDetail);
                    ADD PROPERTY (inputCurSupplierPriceDisparityDetail);
                    ADD PROPERTY (inputCurNameWareDisparityDetail);
                    ADD PROPERTY (inputCurWarePriceDisparityDetail);
                    ADD PROPERTY (inputCurValueRetailRangeDisparityDetail);
                    ADD PROPERTY (inputCurRetailPriceDisparityDetail);
                }
                NEW row12{
                    fillHorizontal = 1;
                    childConstraints = TO THE BOTTOM;
                    title = 'Цены (приход) новые';
                    ADD PROPERTY (inputImporterPriceDisparityDetail);
                    ADD PROPERTY (inputSupplierPriceDisparityDetail);
                    ADD PROPERTY (inputNameWareDisparityDetail);
                    ADD PROPERTY (inputWarePriceDisparityDetail);
                    ADD PROPERTY (inputValueRetailRangeDisparityDetail);
                    ADD PROPERTY (inputBalanceBeforeDisparityDetail);
                }
            }
        }
        ADD functions.box;
    }
}

FORM disparities 'Пересортицы'

    OBJECTS dis=disparity
    PROPERTIES(dis)  READONLY objectClassName, numberObject, seriesObject, nameDepartmentStoreDisparity, dateDisparity, timeDisparity,
                              countDisparityDetailDisparity, quantityDisparityDetailDisparity, retailSumDisparityDetailDisparity,
                              inputQuantityDisparityDetailDisparity, inputRetailSumDisparityDetailDisparity,
                              statusPrintPriceTransactionDocument BACKGROUND backgroundPrintLabelTransactionDisparity(dis),
                              statusEquipmentPriceTransactionDocument BACKGROUND backgroundCreateMachineryPriceTransactionDisparity(dis)

    PROPERTIES(dis)  READONLY FORCE PANEL timeCreated, nameUserCreated, hostnameComputerCreated, timeClosed, nameUserClosed, hostnameComputerClosed

    PROPERTIES (dis) createDisparityLabelTransaction FORCE PANEL SHOWIF showPrintLabelTransactionDisparity(dis),
                     createSnapshotDisparityLabelTransaction FORCE PANEL SHOWIF isPostedDisparity(dis),
                     createDisparityMachineryPriceTransaction FORCE PANEL SHOWIF showCreateMachineryPriceTransactionDisparity(dis),
                     createSnapshotDisparityMachineryPriceTransaction FORCE PANEL SHOWIF isPostedDisparity(dis),
                     printPriceChangeDisparity FORCE PANEL SHOWIF needToPriceChangeDisparity(dis),
                     printPriceChangeInputDisparity FORCE PANEL SHOWIF needToPriceChangeInputDisparity(dis),
                     ADDFORM, EDITFORM SHOWIF isDraftDisparity(dis), delete FORCE PANEL SHOWIF isDraftDisparity(dis),
                     postDisparity SHOWIF isDraftDisparity(dis), unpostDisparity SHOWIF isPostedDisparity(dis)

    OBJECTS d=disparityDetail
    PROPERTIES(d)   READONLY indexDisparityDetail,
                    idBarcodeSkuDisparityDetail, nameAttributeItemDisparityDetail, shortNameUOMItemDisparityDetail,
                    quantityDisparityDetail, retailPriceDisparityDetail, retailSumDisparityDetail,
                    inputIdBarcodeSkuDisparityDetail, inputNameAttributeItemDisparityDetail, inputShortNameUOMItemDisparityDetail,
                    inputQuantityDisparityDetail, inputRetailPriceDisparityDetail, inputRetailSumDisparityDetail

    FILTERS         disparityDisparityDetail(d) == dis
;
DESIGN disparities FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD dis.box {
            PROPERTY(objectClassName) {
                preferredCharWidth = 25;
            }
            PROPERTY (delete(dis)) {
                panelLocation = TOOLBAR;
                askConfirm = TRUE;
            }
        }
        ADD d.box;
    }

    NEW caseOne {
        childConstraints = TO THE RIGHT;
        ADD dis.historyGroup {
            childConstraints = TO THE BOTTOM;
        }
        ADD dis.postedGroup {
            childConstraints = TO THE BOTTOM;
        }
        ADD dis.printGroup {
            childConstraints = TO THE BOTTOM;
        }
    }

    ADD functions.box;
}

//------------------------------------------- Приход товара----------------------------------------------------//

@defineDocumentDetailItemOfTerminal(shipment);
printPriceChangeShipment 'Акт переоценки' (shipment) = printPriceChange(uniquePriceChangeShipment(shipment)) IN printGroup;

FORM shipment 'Поставка'
    OBJECTS s=shipment FIXED PANEL
    PROPERTIES (s) nameDepartmentStoreShipment, numberObject, seriesObject, dateShipment, timeShipment,
                   nameSupplierShipment, UNPSupplierShipment, numberContractShipment, ordersShipment, toFillShipmentDetailsShipment,
                   percentOrderedShipmentDetailsShipment, dialogOrdersShipment,
                   carryingChargesShipment, quantityShipmentDetailShipment, invoiceVATSumShipmentDetailShipment, invoiceSumShipmentDetailShipment, retailSumShipmentDetailShipment,
                   noteShipment, toShowPriceImporterShipment, toShowWareShipment, toShowPapersShipment, nameRegisterCommitteeShipment, numberDisposalShipment SHOWIF needToPriceChangeShipment(s),
                   namePriceChangeCommitteeShipment SHOWIF needToPriceChangeShipment(s), nameWastageCommitteeShipment SHOWIF needToWasteShipment(s)

    OBJECTS d=shipmentDetail
    PROPERTIES (d)  indexShipmentDetail, idBarcodeSkuShipmentDetail, nameAttributeItemShipmentDetail, quantityShipmentDetail,
                    supplierPriceShipmentDetail BACKGROUND isAllowPriceItemShipment(d), supplierMarkupShipmentDetail SHOWIF toShowPriceImporterShipment(s),
                    importerPriceShipmentDetail READONLY SHOWIF toShowPriceImporterShipment(s), dateExpireShipmentDetail,
                    balanceBeforeShipmentShipmentDetail, numberSupplierRangeShipmentDetail, valueSupplierRangeShipmentDetail,
                    supplierVATISumShipmentDetail, invoiceISumShipmentDetail, nameWareShipmentDetail SHOWIF toShowWareShipment(s),
                    warePriceShipmentDetail SHOWIF toShowWareShipment(s), numberRetailRangeShipmentDetail, valueRetailRangeShipmentDetail,
                    retailMarkupShipmentDetail, curRetailPriceShipmentDetail, retailPriceShipmentDetail,
                    numberCustomsCertificateShipmentDetail SHOWIF toShowPapersShipment(s),  numberCertificateGGRShipmentDetail SHOWIF toShowPapersShipment(s),
                    numberCertificateConformityShipmentDetail SHOWIF toShowPapersShipment(s), numberStateExaminationShipmentDetail SHOWIF toShowPapersShipment(s),
                    ADDOBJ, delete
    PROPERTIES (d) FORCE PANEL isFixPriceShipmentDetail,
                               controlExpiryItemShipmentDetail, isManufacturedItemShipmentDetail, isWeightItemShipmentDetail, nameInActionItemDepartmentShipmentDetail,
                               hintItemShipmentDetail, nameCountryItemShipmentDetail, nameBanPriceChangeItemDepartmentShipmentDetail,
                               curImporterPriceShipmentDetail, curSupplierPriceShipmentDetail, curValueRetailRangeShipmentDetail, curNameWareShipmentDetail SHOWIF inWareShipmentDetail(d),
                               valueWareRangeShipmentDetail SHOWIF inWareShipmentDetail(d), curWarePriceShipmentDetail SHOWIF inWareShipmentDetail(d)


    PROPERTIES     inputMultipleItemsShipment(s) TODRAW d, fillOfTerminalDocumentShipment(s) TODRAW d,
                   addShipmentDetailBarcode(s) TODRAW d, cleanAllShipmentDetailsShipment(s) FORCE PANEL TODRAW d


    FILTERS inShipmentShipmentDetail(s, d)

    OBJECTS i=item

    PROPERTIES (i) nameAttributeItem
    PROPERTIES (i, s) minAllowPriceItemShipment, maxAllowPriceItemShipment, quantityShipmentDetailItemShipment, sumQuantityOrderedItemShipment

    FILTERS isShippedOrOrderedItemShipment(i, s)

    HINTNOUPDATE LIST isPostedShipment,
                  balanceBSkuLedgerDateTime, importerPriceBLedgerDateTime, wareBLedgerDateTime, warePriceBLedgerDateTime,
                  retailRangeBLedgerDateTime, retailPriceBLedgerDateTime, supplierPriceBLedgerDateTime, accountPriceBLedgerDateTime

    EDIT shipment OBJECT s
;


DESIGN shipment FROM DEFAULT{
    main{
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            type = TABBED;
            ADD d.box {
                childConstraints = TO THE BOTTOM;
                title = 'Спецификация';
                ADD d.itemDetailGroup;
                ADD d.priceDetailGroup;
            };
            ADD i.box;
        };
        NEW header.box BEFORE specification.box {
            childConstraints = TO THE RIGHT;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;

                ADD s.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreShipment);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateShipment);
                    ADD PROPERTY(timeShipment);
                };

                NEW headerCol1Row2 {
                    childConstraints = TO THE RIGHT;
                    ADD s.documentPrmGroup {
                        childConstraints = TO THE BOTTOM;
                    }
                    ADD s.shipmentOrderGroup {
                        childConstraints = TO THE BOTTOM;
                    }
                }
            }

            ADD s.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        };
    };
};

FORM shipments 'Поставки'
    OBJECTS s=shipment
    PROPERTIES (s) READONLY objectClassName, numberObject, seriesObject, dateShipment, timeShipment, nameDepartmentStoreShipment,
                            nameSupplierShipment, countShipmentDetailShipment, supplierSumShipmentDetailShipment, invoiceVATSumShipmentDetailShipment,
                            invoiceSumShipmentDetailShipment, retailSumShipmentDetailShipment,
                            statusPrintPriceTransactionDocument BACKGROUND backgroundPrintLabelTransactionShipment(s),
                            statusEquipmentPriceTransactionDocument BACKGROUND backgroundCreateMachineryPriceTransactionShipment(s)

    PROPERTIES (s) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES (s)          createShipmentLabelTransaction FORCE PANEL SHOWIF showPrintLabelTransactionShipment(s),
                            createSnapshotShipmentLabelTransaction FORCE PANEL SHOWIF isPostedShipment(s),
                            createShipmentMachineryPriceTransaction FORCE PANEL SHOWIF showCreateMachineryPriceTransactionShipment(s),
                            createSnapshotShipmentMachineryPriceTransaction FORCE PANEL SHOWIF isPostedShipment(s),
                            printPriceChangeShipment FORCE PANEL SHOWIF needToPriceChangeShipment(s), printListRegister FORCE PANEL,
                            ADDFORM, EDITFORM SHOWIF isDraftShipment(s), delete FORCE PANEL SHOWIF isDraftShipment(s),
                            postShipment SHOWIF isDraftShipment(s), unpostShipment SHOWIF isPostedShipment(s)

    OBJECTS d=shipmentDetail
    PROPERTIES (d) READONLY  indexShipmentDetail, idBarcodeSkuShipmentDetail, nameAttributeItemShipmentDetail, quantityShipmentDetail,
                             supplierPriceShipmentDetail, supplierMarkupShipmentDetail, importerPriceShipmentDetail, dateExpireShipmentDetail,
                             balanceBeforeShipmentShipmentDetail, numberSupplierRangeShipmentDetail, valueSupplierRangeShipmentDetail,
                             supplierVATISumShipmentDetail, invoiceISumShipmentDetail, nameWareShipmentDetail, warePriceShipmentDetail,
                             numberRetailRangeShipmentDetail, valueRetailRangeShipmentDetail, retailMarkupShipmentDetail,
                             curRetailPriceShipmentDetail, retailPriceShipmentDetail

    FILTERS inShipmentShipmentDetail(s, d)
;

DESIGN shipments FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD s.box;
        ADD d.box;
    }

    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }

    PROPERTY (delete(s)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }

    ADD s.printGroup{
        childConstraints = TO THE BOTTOM;
    }

    ADD s.historyGroup{
        childConstraints = TO THE BOTTOM;
    }
    ADD s.postedGroup{
        childConstraints = TO THE BOTTOM;
    }

    POSITION s.historyGroup TO THE LEFT s.postedGroup;
    POSITION s.postedGroup TO THE LEFT s.printGroup;
    POSITION s.historyGroup TO THE LEFT s.printGroup;

    ADD functions.box;
}

//-------------------------------Печатная форма---------------------------------//
FORM wastagePrint 'Списания отходов' PRINT

    OBJECTS w=wastage FIXED PANEL
    PROPERTIES (w) SELECTOR numberWastage, seriesWastage, dateWastage, timeWastage, nameCompanyWastage, nameDepartmentStoreWastage, nameSupplierWastage,
                   countWastageDetailWastage, quantityItemWastageDetailWastage, quantityWastageDetailWastage, supplierISumWastageDetailWastage,
                   markupSumWastageDetailWastage, retailVATSumWastageDetailWastage, retailSumWastageDetailWastage, wastageCommitteeWastage

    OBJECTS d=wastageDetail
    PROPERTIES (d) SELECTOR indexWastageDetail, idBarcodeSkuWastageDetail, nameItemWastageDetail, quantityItemWastageDetail, quantityWastageDetail, percentRateWasteWastageDetail,
                   supplierISumWastageDetail, markupSumWastageDetail, retailVATSumWastageDetail, retailSumWastageDetail

    OBJECTS e=employee
    PROPERTIES(e) SELECTOR   commonName, namePositionEmployee
    OBJECTS a=employee
    PROPERTIES(a) SELECTOR   commonNameEmployee, namePositionEmployee

    FILTERS                  wastageWastageDetail(d)== w,
                             inWastageEmployee(w, e),
                             inWastageEmployee(w, a)
;

toPrintWastage 'Списание отходов' (wastage) = ACTION FORM wastagePrint OBJECTS w IMAGE 'print.png' IN printGroup;

FORM wastages 'Списания отходов'

    OBJECTS w=wastage
    PROPERTIES (w) READONLY numberWastage, seriesWastage, dateWastage, timeWastage, nameDepartmentStoreWastage, nameSupplierWastage,
                   countWastageDetailWastage, quantityItemWastageDetailWastage, quantityWastageDetailWastage, supplierISumWastageDetailWastage, markupSumWastageDetailWastage,
                   retailVATSumWastageDetailWastage, retailSumWastageDetailWastage, nameWastageCommitteeWastage

    OBJECTS d=wastageDetail
    PROPERTIES (d) READONLY indexWastageDetail, idBarcodeSkuWastageDetail, nameItemWastageDetail, quantityItemWastageDetail, quantityWastageDetail,
                   supplierISumWastageDetail, markupSumWastageDetail, retailVATSumWastageDetail, retailSumWastageDetail

    PROPERTIES     FORCE PANEL toPrintWastage(w) TODRAW d

    FILTERS wastageWastageDetail(d)== w;
;

DESIGN wastages FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD w.box;
        ADD d.box;
    }

    ADD functions.box;
}

//-----------------------------------Формы возврата поставщику-------------------------------------------------------

@metaCodeInputMultipleItemsSupplier(returnSupplier);
@defineDocumentDetailItemOfTerminal(returnSupplier);

printPriceChangeReturnSupplier 'Акт переоценки' (returnSupplier) = printPriceChange(uniquePriceChangeReturnSupplier(returnSupplier)) IN printGroup;

FORM commonInfoBatchReturnSupplierDetail 'Партии'
    OBJECTS b=shipmentDetail    //
    PROPERTIES(b) READONLY seriesShipmentDetail, numberShipmentDetail, dateShipmentDetail,
                           quantityShipmentDetail, supplierPriceShipmentDetail, valueSupplierRangeShipmentDetail,
                           retailPriceShipmentDetail
    DIALOG shipmentDetail OBJECT b;     // batchShipment
;


FORM returnSupplier 'Возврат поставщику'
    OBJECTS r=returnSupplier FIXED PANEL
    PROPERTIES(r) numberObject, seriesObject, dateReturnSupplier, timeReturnSupplier,
                  nameDepartmentStoreReturnSupplier, nameSupplierReturnSupplier, UNPSupplierReturnSupplier, numberContractReturnSupplier, noteReturnSupplier, carryingChargesReturnSupplier,
                  quantityReturnSupplierDetailReturnSupplier, invoiceVATSumReturnSupplierDetailReturnSupplier, invoiceSumReturnSupplierDetailReturnSupplier,
                  retailSumReturnSupplierDetailReturnSupplier, returnLossSupplierReturnSupplier, numberDisposalReturnSupplier SHOWIF needToPriceChangeReturnSupplier(r),
                  namePriceChangeCommitteeReturnSupplier SHOWIF needToPriceChangeReturnSupplier(r)

    PROPERTIES(r) carConsignment, ownerCarConsignment, trailerConsignment, driverCarConsignment, waybillConsignment,
                  nameTransportPayerConsignment, shipmentBaseConsignment, loadingPlaceConsignment, unloadingPlaceConsignment,
                  readdressingConsignment, commonNameIssuanceAllowedConsignment, commonNameIssuanceExecutedConsignment,
                  forwarderConsignment, warrantConsignment, warrantHolderConsignment, goodsAcceptedConsignment,
                  commonNameLoadingExecuterConsignment, nameWayOfLoadingConsignment, codeLoadingConsignment,
                  arrivalTimeConsignment, departureTimeConsignment, downtimeConsignment, raceQuantityConsignment,
                  quantityConsignmentDetailConsignment, packQuantityConsignmentDetailConsignment, grossWeightConsignmentDetailConsignment,
                  sumConsignmentDetailConsignment, sumVATConsignmentDetailConsignment, sumInvoiceConsignmentDetailConsignment

    OBJECTS d=returnSupplierDetail
    PROPERTIES(d) indexReturnSupplierDetail, idBarcodeSkuReturnSupplierDetail, nameAttributeItemReturnSupplierDetail,
                  commonInfoBatchReturnSupplierDetail, quantityReturnSupplierDetail, supplierPriceReturnSupplierDetail,
                  supplierMarkupReturnSupplierDetail, importerPriceReturnSupplierDetail READONLY, numberSupplierRangeReturnSupplierDetail,
                  valueSupplierRangeReturnSupplierDetail, supplierVATISumReturnSupplierDetail, invoiceISumReturnSupplierDetail,
                  nameWareReturnSupplierDetail, warePriceReturnSupplierDetail, numberRetailRangeReturnSupplierDetail, valueRetailRangeReturnSupplierDetail,
                  retailPriceReturnSupplierDetail
    PROPERTIES(d) ADDOBJ, delete
    PROPERTIES    inputMultipleItemsSupplierReturnSupplier(r) TODRAW d, fillOfTerminalDocumentReturnSupplier(r) TODRAW d, addReturnSupplierDetailBarcode(r) TODRAW d,
                  cleanAllReturnSupplierDetailsReturnSupplier(r) FORCE PANEL TODRAW d
    PROPERTIES FORCE PANEL READONLY curImporterPriceReturnSupplierDetail(d), curSupplierPriceReturnSupplierDetail(d),
                                    curRetailPriceReturnSupplierDetail(d), curValueRetailRangeReturnSupplierDetail(d),
                                    controlExpiryItemReturnSupplierDetail(d), isManufacturedItemReturnSupplierDetail(d),
                                    isWeightItemReturnSupplierDetail(d), nameInActionItemDepartmentReturnSupplierDetail(d),
                                    hintItemReturnSupplierDetail(d), nameCountryItemReturnSupplierDetail(d),
                                    nameBanPriceChangeItemDepartmentReturnSupplierDetail(d), valueWareRangeReturnSupplierDetail(d),
                                    curNameWareReturnSupplierDetail(d), curWarePriceReturnSupplierDetail(d)

    FILTERS returnSupplierReturnSupplierDetail(d) == r

    EDIT returnSupplier OBJECT r
;

FORM returnSuppliers 'Возвраты поставщику'

    OBJECTS r=returnSupplier
    PROPERTIES(r) READONLY objectClassName, numberObject, seriesObject, dateReturnSupplier, timeReturnSupplier,
                           nameDepartmentStoreReturnSupplier, nameSupplierReturnSupplier, noteReturnSupplier, carryingChargesReturnSupplier,
                           quantityReturnSupplierDetailReturnSupplier, invoiceVATSumReturnSupplierDetailReturnSupplier, invoiceSumReturnSupplierDetailReturnSupplier, retailSumReturnSupplierDetailReturnSupplier
    PROPERTIES (r) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES(r) FORCE PANEL printConsignmentVerticalA, printConsignmentHorizontalA,
                              printConsignmentVerticalB, printConsignmentHorizontalB,
                              printConsignmentAttach, printConsignmentSimpleHorizontal,
                              printConsignmentSimpleVertical, printConsignmentSimpleAttach, editConsignment,
                              printPriceChangeReturnSupplier SHOWIF needToPriceChangeReturnSupplier(r)

    PROPERTIES(r) postReturnSupplier SHOWIF isDraftReturnSupplier(r), unpostReturnSupplier SHOWIF isPostedReturnSupplier(r),
                  ADDFORM, EDITFORM SHOWIF isDraftReturnSupplier(r), delete FORCE PANEL SHOWIF isDraftReturnSupplier(r)

    OBJECTS d=returnSupplierDetail
    PROPERTIES(d) READONLY indexReturnSupplierDetail, idBarcodeSkuReturnSupplierDetail, nameAttributeItemReturnSupplierDetail,
                           commonInfoBatchReturnSupplierDetail, quantityReturnSupplierDetail, supplierPriceReturnSupplierDetail,
                           supplierMarkupReturnSupplierDetail, importerPriceReturnSupplierDetail, numberSupplierRangeReturnSupplierDetail,
                           valueSupplierRangeReturnSupplierDetail, supplierVATISumReturnSupplierDetail, invoiceISumReturnSupplierDetail,
                           nameWareReturnSupplierDetail, warePriceReturnSupplierDetail, numberRetailRangeReturnSupplierDetail, valueRetailRangeReturnSupplierDetail,
                           retailPriceReturnSupplierDetail
    FILTERS returnSupplierReturnSupplierDetail(d) == r
;

DESIGN returnSupplier FROM DEFAULT {

    NEW specification.box BEFORE functions.box{
        type = TABBED;

        ADD d.box{
            title = 'Спецификация';
            ADD d.grid{
                fillVertical = 12;
            };
            ADD d.panel{
            childConstraints = TO THE RIGHT;
                NEW curVal {
                    childConstraints = TO THE BOTTOM;
                    title = 'Текущие ценовые параметры';
                    ADD PROPERTY(curImporterPriceReturnSupplierDetail);
                    ADD PROPERTY(curSupplierPriceReturnSupplierDetail);
                    ADD PROPERTY(curRetailPriceReturnSupplierDetail);
                    ADD PROPERTY(curValueRetailRangeReturnSupplierDetail);
                };
                ADD d.itemDetailGroup;
                NEW ware {
                    childConstraints = TO THE BOTTOM;
                    title = 'Посуда';
                    ADD PROPERTY(curNameWareReturnSupplierDetail);
                    ADD PROPERTY(curWarePriceReturnSupplierDetail);
                    ADD PROPERTY(valueWareRangeReturnSupplierDetail);
                };
            };
        };

        NEW consignment{
            title = 'Накладная';
            childConstraints = TO THE RIGHT;

            ADD r.carConsignmentGroup;

            NEW wor1 {
                childConstraints = TO THE BOTTOM;
                ADD r.issuanceConsignmentGroup;
                ADD r.loadingConsignmentGroup;
                ADD r.sumConsignmentGroup {
                    childConstraints = TO THE BOTTOM;
                    NEW wor21 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(quantityConsignmentDetailConsignment);
                        ADD PROPERTY(packQuantityConsignmentDetailConsignment);
                        ADD PROPERTY(grossWeightConsignmentDetailConsignment);
                    }
                    NEW wor22 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(sumConsignmentDetailConsignment);
                        ADD PROPERTY(sumVATConsignmentDetailConsignment);
                        ADD PROPERTY(sumInvoiceConsignmentDetailConsignment);
                    }
                }
            }

        }

    };

    NEW header.box BEFORE specification.box {

        childConstraints = TO THE RIGHT;

        NEW headerCol1 {
            childConstraints = TO THE BOTTOM;

            ADD r.documentHeaderGroup {
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(nameDepartmentStoreReturnSupplier);
                ADD PROPERTY(numberObject);
                ADD PROPERTY(seriesObject);
                ADD PROPERTY(dateReturnSupplier);
                ADD PROPERTY(timeReturnSupplier);
            };

            ADD r.documentPrmGroup {
                childConstraints = TO THE BOTTOM;
                NEW row11 {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameSupplierReturnSupplier);
                    ADD PROPERTY(UNPSupplierReturnSupplier);
                    ADD PROPERTY(numberContractReturnSupplier);
                }
                NEW row22 {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(noteReturnSupplier);
                    ADD PROPERTY(carryingChargesReturnSupplier);
                    ADD PROPERTY(returnLossSupplierReturnSupplier);
                }

            };
        }

        ADD r.documentSumGroup{
            childConstraints = TO THE BOTTOM;

        };
    };

    ADD PROPERTY(delete(d)){
        askConfirm=TRUE;
    }
}


DESIGN returnSuppliers FROM DEFAULT {
    main {
        childConstraints = TO THE BOTTOM;


        NEW topContainer{

            type = SPLITV;

            ADD r.box {
                PROPERTY(objectClassName) {
                    preferredCharWidth = 15;
                }
            }
            ADD d.box;
        }

        PROPERTY (delete(r)) {
            panelLocation = TOOLBAR;
            askConfirm = TRUE;
        }

        NEW footer.container {
            childConstraints = TO THE BOTTOM;

            NEW cont3 {
                childConstraints = TO THE RIGHT;
                ADD r.historyGroup {
                    childConstraints = TO THE BOTTOM;
                }

                ADD r.postedGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }

            ADD r.printGroup {
                childConstraints = TO THE BOTTOM;
                NEW case55{
                    childConstraints = TO THE RIGHT;

                    NEW contOne {
                        title = 'Накладная';
                        ADD PROPERTY(editConsignment);
                    }
                    NEW tn{
                        childConstraints = TO THE RIGHT;
                        title = 'ТН-2';
                        ADD PROPERTY(printConsignmentSimpleVertical);
                        ADD PROPERTY(printConsignmentSimpleHorizontal);
                        ADD PROPERTY(printConsignmentSimpleAttach);
                    }
                }
                NEW ttn1{
                    childConstraints = TO THE RIGHT;
                    title = 'ТТН-1';
                    ADD PROPERTY(printConsignmentVerticalA);
                    ADD PROPERTY(printConsignmentHorizontalA);
                    ADD PROPERTY(printConsignmentVerticalB);
                    ADD PROPERTY(printConsignmentHorizontalB);
                    ADD PROPERTY(printConsignmentAttach);
                }

            }

        }
        ADD functions.box;
    }
}

DESIGN commonInfoBatchReturnSupplierDetail FROM DEFAULT {
    main {
        preferredSize = (800, 500);
    };
}

// ---------------------------------- Контроль предельных надбавок ------------------------------------------

// todo : здесь надо деление на 0 во что-то обернуть - иначе будет division by zero
CONSTRAINT [(X*(Y+100)/Z/100-1)*100](
            supplierPriceShipmentDetail(shipmentDetail), retailMarkupShipmentDetail(shipmentDetail), importerPriceShipmentDetail(shipmentDetail))
                >
            maxTradeAllowanceItemDate (itemShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail)) MESSAGE 'Превышена предельно допустимая наценка';

CONSTRAINT commonMarkupPriceChangeDocumentDetail (priceChangeDocumentDetail) >
            maxTradeAllowanceItemDate (skuPriceChangeDocumentDetail(priceChangeDocumentDetail), datePriceChangeDocumentDetail(priceChangeDocumentDetail)) MESSAGE 'Превышена предельно допустимая наценка';

CONSTRAINT [(X*(Y+100)/Z/100-1)*100](
            supplierPriceInnerArrivalDetail(innerArrivalDetail), retailMarkupInnerArrivalDetail(innerArrivalDetail), importerPriceInnerArrivalDetail(innerArrivalDetail))
                >
            maxTradeAllowanceItemDate (itemInnerArrivalDetail(innerArrivalDetail), dateInnerArrivalDetail(innerArrivalDetail)) MESSAGE 'Превышена предельно допустимая наценка';


CONSTRAINT [(X*(Y+100)/Z/100-1)*100](
            supplierPriceShipmentDetail(shipmentDetail), retailMarkupShipmentDetail(shipmentDetail), importerPriceShipmentDetail(shipmentDetail))
                <
            minTradeAllowanceItemDate (itemShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail)) MESSAGE 'Наценка меньше минимально допустимой';

CONSTRAINT commonMarkupPriceChangeDocumentDetail (priceChangeDocumentDetail) <
            minTradeAllowanceItemDate (skuPriceChangeDocumentDetail(priceChangeDocumentDetail), datePriceChangeDocumentDetail(priceChangeDocumentDetail)) MESSAGE 'Наценка меньше минимально допустимой';

CONSTRAINT [(X*(Y+100)/Z/100-1)*100](
            supplierPriceInnerArrivalDetail(innerArrivalDetail), retailMarkupInnerArrivalDetail(innerArrivalDetail), importerPriceInnerArrivalDetail(innerArrivalDetail))
                <
            minTradeAllowanceItemDate (itemInnerArrivalDetail(innerArrivalDetail), dateInnerArrivalDetail(innerArrivalDetail)) MESSAGE 'Наценка меньше минимально допустимой';

//------------------------------------Печатная форма описи------------------------------------------//

nameCompanyListInventory 'Компания' (listInventory) = name(companyDepartmentStore(departmentStoreListInventory(listInventory)));
nameStoreListInventory 'Магазин' (listInventory) = name(storeDepartmentStore(departmentStoreListInventory(listInventory)));

FORM listInventoryPrint 'Опись' PRINT

    OBJECTS         li=listInventory FIXED PANEL
    PROPERTIES (li) dateListInventory, nameCompanyListInventory, nameStoreListInventory, nameDepartmentStoreListInventory,
                    nameInventoryListInventory, nameListInventory, noteListInventory, committeeListInventory,
                    nameCommitteeListInventory, nameChairmanCommitteeListInventory, namePositionChairmanListInventory, nameEmployeeListInventory,
                    countPageInventoryListInventory, countPageInventoryDetailListInventory, quantityPageInventoryDetailListInventory,
                    accountSumPageInventoryDetailListInventory, countIndexListInventory

    OBJECTS t=DATETIME FIXED PANEL
    PROPERTIES(t) OBJVALUE

    OBJECTS         i=item
    PROPERTIES (li,i) indexListInventoryItem
    PROPERTIES (i)    idBarcodeSku, nameAttributeItem
    PROPERTIES (li,i) quantityPageInventoryDetailListInventoryItem, accountPricePageInventoryDetailListInventoryItem, accountSumPageInventoryDetailListInventoryItem

    OBJECTS e=employee
    PROPERTIES(e) READONLY   commonName, namePositionEmployee

    FILTERS        inListInventoryEmployee(li, e),
                   quantityPageInventoryDetailListInventoryItem(li,i)>0

;

DESIGN listInventoryPrint FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        childConstraints = TO THE BOTTOM;
        ADD li.box {
            childConstraints = TO THE RIGHTBOTTOM;
            NEW row {
                childConstraints = TO THE BOTTOM;
                ADD li.documentHeaderGroup {
                    childConstraints = TO THE RIGHTBOTTOM;
                    ADD PROPERTY(nameInventoryListInventory);
                    ADD PROPERTY(nameListInventory);
                }
                ADD li.inventoryCommitteeGroup {
                    childConstraints = TO THE RIGHTBOTTOM;
                }
                ADD li.documentPrmGroup;


            }
            ADD li.documentSumGroup {
                childConstraints = TO THE BOTTOM;
                PROPERTY(countPageInventoryListInventory) {
                    caption = 'Количество страниц';
                }
            }
        }

        ADD i.box;
        ADD e.box;
        ADD functions.box;
    }
}

toPrintListInventoryTime 'Опись' (listInventory, time) =
    ACTION FORM listInventoryPrint OBJECTS li=(listInventory AS listInventory), t=(time AS DATETIME) IMAGE 'print.png' IN printGroup;

toPrintListInventory 'Опись' (listInventory) = toPrintListInventoryTime(listInventory, currentDateTime());


fillOfTerminalDocumentListInventory 'Заполнить из документа ТСД' (listInventory) = ACTION (listInventory) {
    FORM terminalDocumentsDialog MODAL;
    IF formResult() == formResult.ok THEN {
        LOCAL document = terminalDocument ();
        SET document() <- chosenObject('td');
        SET usedTerminalDocument(terminalDocument) IF terminalDocument == document()  <- TRUE;

        LOCAL page = pageInventory ();
        LOCAL detailCount = INTEGER();
        SET detailCount() <- 0;

        FOR terminalDocumentTerminalDocumentDetail(tdd) == document() DO {
            IF detailCount() == 0 THEN {
                ADDOBJ pageInventory;
                FOR pi == addedObject() DO {
                    SET listInventoryPageInventory(pi) <- listInventory AS listInventory;
                    SET page() <- pi IS pageInventory;
                }
            }

            ADDOBJ pageInventoryDetail;
            FOR pid == addedObject() DO {
                SET pageInventoryPageInventoryDetail(pid) <- page();
                SET barcodePageInventoryDetail(pid) <- barcodeIdDate(barcodeTerminalDocumentDetail(tdd), dateListInventory(listInventory));
                SET quantityPageInventoryDetail(pid) <- quantityTerminalDocumentDetail(tdd);

                SET detailCount() <- detailCount() + 1;

                IF detailCount() >= 20 THEN {
                    SET detailCount() <- 0;
                }
            }
        }

    }
} TOOLBAR;


//------------------------------------Формы для инвентаризации------------------------------------------//

FORM nameDepartmentInventory 'Подразделения для инвентаризации'
    OBJECTS in=inventory FIXED PANEL
    PROPERTIES (in) READONLY seriesNumberObject, nameInventory, dateInventory

    TREE treeStore t=chainStores, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY name(t), name(st), name(s), name(ds)

    FILTERS inChainStoresStoreType (t, st),
            inStoreTypeStore (st, s),
            inStoreDepartment (s, ds)

    PROPERTIES (ds, in) includeDepartmentStoreInventory, nameUserTypeOfAdditionDepartmentStoreInventory

;

dialogDepartmentByInventory 'Подразделения для инвентаризации' (inventory) =
    ACTION FORM nameDepartmentInventory OBJECTS in MODAL SHORTCUT nameDepartmentInventory DEFAULT;

FORM collationSheetItem 'Товары для добавления в сличительную ведомость'
    OBJECTS cs=manyCollationSheet FIXED PANEL
    PROPERTIES (cs) READONLY nameCollationSheet, nameTypeOfAdditionCollationSheet, nameDepartmentStoreCollationSheet

    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS i=item
    PROPERTIES(i) READONLY idBarcodeSku, nameAttributeItem, shortNameUOMItem

    PROPERTIES(cs, i) inManyCollationSheetItem

    FILTERS isParentItemGroupSku(g, i)
    ORDER BY nameAttributeItem
;

DESIGN collationSheetItem FROM DEFAULT {
    POSITION treeGroup.box TO THE LEFT i.box;
        treeGroup.box{ fillHorizontal = 1.5;}
        i.box{ fillHorizontal = 3.5;}

}

dialogItemByCollationSheet 'Добавить товар' (collationSheet) = [ACTION FORM collationSheetItem OBJECTS cs MODAL](collationSheet) AND collationSheet IS manyCollationSheet;

FORM listInventory 'Опись'
    OBJECTS         li=listInventory FIXED PANEL
    PROPERTIES (li) nameDepartmentStoreListInventory, nameInventoryListInventory, nameListInventory, noteListInventory,
                    nameCommitteeListInventory, nameChairmanCommitteeListInventory, nameEmployeeListInventory,
                    countPageInventoryListInventory, countPageInventoryDetailListInventory, quantityPageInventoryDetailListInventory,
                    accountSumPageInventoryDetailListInventory

    OBJECTS         pl=pageInventory
    PROPERTIES(pl)  namePageInventory, notePageInventory FORCE PANEL, countPageInventoryDetailPageInventory, quantityPageInventoryDetailPageInventory, accountSumPageInventoryDetailPageInventory, ADDOBJ, delete

    OBJECTS         dp=pageInventoryDetail
    PROPERTIES (dp) indexPageInventoryDetail, idBarcodePageInventoryDetail, nameAttributeItemPageInventoryDetail, quantityPageInventoryDetail, accountPricePageInventoryDetail,
                    accountSumPageInventoryDetail, ADDOBJ, delete

    OBJECTS         i=item
    PROPERTIES (li,i) indexListInventoryItem
    PROPERTIES (i)    idBarcodeSku, nameAttributeItem
    PROPERTIES (li,i) quantityPageInventoryDetailListInventoryItem, accountPricePageInventoryDetailListInventoryItem, accountSumPageInventoryDetailListInventoryItem

    PROPERTIES      fillOfTerminalDocumentListInventory(li) TODRAW dp

    FILTERS listInventoryPageInventory(pl) == li,
            pageInventoryPageInventoryDetail(dp) == pl,
            quantityPageInventoryDetailListInventoryItem(li,i)>0

    EDIT listInventory OBJECT li
;

DESIGN listInventory FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        childConstraints = TO THE BOTTOM;
        ADD li.box {
            childConstraints = TO THE RIGHT;
            NEW row {
                childConstraints = TO THE BOTTOM;
                ADD li.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameInventoryListInventory);
                    ADD PROPERTY(nameListInventory);
                }
                ADD li.inventoryCommitteeGroup {
                    childConstraints = TO THE RIGHT;
                }
                ADD li.documentPrmGroup;


            }
            ADD li.documentSumGroup {
                childConstraints = TO THE BOTTOM;
                PROPERTY(countPageInventoryListInventory) {
                    caption = 'Количество страниц';
                }
            }
        }
        NEW wor {
            childConstraints = TO THE RIGHT;
            ADD pl.box {
                fillHorizontal = 1;
            }
            NEW case1 {
                fillHorizontal = 2;
                type = TABBED;

                ADD dp.box;
                ADD i.box {
                    title = 'Опись-товар';
                }
            }
        }
        ADD functions.box;
    }
}
nameCompanyCollationSheet 'Компания' (collationSheet) = nameCompanyDepartmentStore(departmentStoreCollationSheet(collationSheet));
nameStoreCollationSheet 'Магазин' (collationSheet) = nameStoreDepartmentStore(departmentStoreCollationSheet(collationSheet));
committeeCollationSheet = committeeInventory(inventoryCollationSheet(collationSheet));
nameCommitteeCollationSheet 'Название комиссии' (collationSheet) = commonName(committeeCollationSheet(collationSheet)) IN inventoryCommitteeGroup MINCHARWIDTH 30 PREFCHARWIDTH 30;
nameChairmanCommitteeCollationSheet 'Председатель комиссии' (collationSheet) = nameChairmanCommittee(committeeCollationSheet(collationSheet)) IN inventoryCommitteeGroup MINCHARWIDTH 30 PREFCHARWIDTH 30;
namePositionChairmanCollationSheet 'Должность председателя' (collationSheet)  = namePositionChairmanCommittee(committeeCollationSheet(collationSheet)) IN inventoryCommitteeGroup MINCHARWIDTH 30 PREFCHARWIDTH 30;
nameEmployeeCollationSheet 'Члены комиссии' (collationSheet) = nameEmployeeCommittee(committeeCollationSheet(collationSheet)) IN inventoryCommitteeGroup MINCHARWIDTH 30 PREFCHARWIDTH 30;
inCollationSheetEmployee 'Является членом комиссии' (collationSheet, employee) = inCommitteeEmployee(committeeCollationSheet(collationSheet), employee);

timeFromCollationSheet 'Снятие остатков начато' (collationSheet) = timeFromInventory(inventoryCollationSheet(collationSheet));
timeToCollationSheet 'Снятие остатков закончено' (collationSheet) = timeToInventory(inventoryCollationSheet(collationSheet));
nameHeadManCollationSheet  'Зав. магазином' (collationSheet) = nameHeadManInventory(inventoryCollationSheet(collationSheet));

FORM  collationSheetPrint 'Результирующая ведомость' PRINT

    OBJECTS          cs=collationSheet FIXED PANEL

    PROPERTIES (cs)  SELECTOR nameCollationSheet, nameCompanyCollationSheet, nameStoreCollationSheet, nameCommitteeCollationSheet,
                     nameChairmanCommitteeCollationSheet, namePositionChairmanCollationSheet, nameEmployeeCollationSheet,
                     timeFromCollationSheet, timeToCollationSheet, dateCollationSheet, nameHeadManCollationSheet
    PROPERTIES (cs)  SELECTOR nameTypeOfAdditionCollationSheet, nameDepartmentStoreCollationSheet,
                     quantityPageInventoryDetailCollationSheet, quantityBalanceCollationSheet, quantityShortageCollationSheet,
                     accountSumPageInventoryDetailCollationSheet, accountSumBalanceCollationSheet, accountSumShortageCollationSheet,
                     countListInventoryCollationSheet, countPageInventoryCollationSheet, overDateCollationSheet
    PROPERTIES (cs)  SELECTOR accountSumItemBalanceCollationSheet, accountSumContainerBalanceCollationSheet, accountSumItemPageInventoryDetailCollationSheet,
                     accountSumContainerPageInventoryDetailCollationSheet, accountSumItemShortageCollationSheet, accountSumContainerShortageCollationSheet

;

toPrintCollationSheet 'Резул. в-ть' (collationSheet) =
    ACTION FORM collationSheetPrint OBJECTS cs IMAGE 'print.png' IN printGroup;

FORM  detailCollationSheetPrint 'Сличительная ведомость' PRINT

    OBJECTS          cs=collationSheet FIXED PANEL
    PROPERTIES (cs)  SELECTOR nameCollationSheet, nameCompanyCollationSheet, nameStoreCollationSheet, nameCommitteeCollationSheet,
                     nameChairmanCommitteeCollationSheet, namePositionChairmanCollationSheet, nameEmployeeCollationSheet,
                     nameTypeOfAdditionCollationSheet, nameDepartmentStoreCollationSheet, dateCollationSheet,
                     quantityPageInventoryDetailCollationSheet, quantityBalanceCollationSheet, quantityShortageCollationSheet,
                     accountSumPageInventoryDetailCollationSheet, accountSumBalanceCollationSheet, accountSumShortageCollationSheet,
                     countListInventoryCollationSheet, countPageInventoryCollationSheet, overDateCollationSheet,
                     accountSumItemPageInventoryDetailCollationSheet, accountSumContainerPageInventoryDetailCollationSheet,
                     accountSumItemBalanceCollationSheet, accountSumContainerBalanceCollationSheet,
                     accountSumItemShortageCollationSheet, accountSumContainerShortageCollationSheet

    OBJECTS          i=item
    PROPERTIES (i)   SELECTOR nameAttributeItem, idBarcodeSku

    PROPERTIES(cs, i) SELECTOR quantityPageInventoryDetailCollationSheetItem, quantityBalanceCollationSheetItem, quantityShortageCollationSheetItem
    PROPERTIES       accountPricePageInventoryDetailCollationSheetItem (cs,i) BACKGROUND differentPriceCollationSheetItem(cs, i),
                     accountPriceBalanceCollationSheetItem(cs, i) BACKGROUND differentPriceCollationSheetItem(cs, i)

    PROPERTIES(cs, i) SELECTOR accountSumPageInventoryDetailCollationSheetItem, accountSumBalanceCollationSheetItem, accountSumShortageCollationSheetItem

    FILTERS         includeCollationSheetItem(cs, i)

    ORDER BY nameAttributeItem
;

toPrintDetailCollationSheet 'Слич. в-ть' (collationSheet) =
    ACTION FORM detailCollationSheetPrint OBJECTS cs IMAGE 'print.png' IN printGroup;

FORM inventory 'Инвентаризация'
    OBJECTS          in=inventory FIXED PANEL
    PROPERTIES (in)  nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject,
                     nameInventory, nameTypeOfAdditionInventory, dateInventory, timeInventory,
                     noteInventory, infoInventory, nameDepartmentInventory, dialogDepartmentByInventory, convertPriceInventory,
                     fillBalanceInventory, timeFromInventory, timeToInventory, nameHeadManInventory,
                     nameCommitteeInventory, nameChairmanCommitteeInventory, nameEmployeeInventory

    TREE treeDepartmentStore ds=departmentStore, li=listInventory, pl=pageInventory
    PROPERTIES       READONLY name(ds),  nameListInventory(li), namePageInventory(pl)

    PROPERTIES(ds, in) READONLY countPageInventoryDetailDepartmentStoreInventory, quantityPageInventoryDetailDepartmentStoreInventory, accountSumPageInventoryDetailDepartmentStoreInventory

    PROPERTIES(li)   READONLY countPageInventoryDetailListInventory, quantityPageInventoryDetailListInventory, accountSumPageInventoryDetailListInventory, objectClassName

    PROPERTIES(li)   ADDFORM, editLI = EDITFORM FORCE PANEL SHOWIF isDraftListInventory(li), delete FORCE PANEL SHOWIF isDraftListInventory(li), //delete SHOWIF isDraftListInventory(li),      //FORCE PANEL
                     postListInventory FORCE PANEL SHOWIF isDraftListInventory(li), unpostListInventory FORCE PANEL SHOWIF isPostedListInventory(li)


    PROPERTIES(pl)   READONLY countPageInventoryDetailPageInventory, quantityPageInventoryDetailPageInventory, accountSumPageInventoryDetailPageInventory, dumb1

    OBJECTS          dp=pageInventoryDetail
    PROPERTIES (dp)  READONLY indexPageInventoryDetail, idBarcodePageInventoryDetail, nameAttributeItemPageInventoryDetail, quantityPageInventoryDetail,
                     accountPricePageInventoryDetail, accountSumPageInventoryDetail

    OBJECTS         it=item
    PROPERTIES (li,it) indexListInventoryItem
    PROPERTIES (it)    idBarcodeSku, nameAttributeItem
    PROPERTIES (li,it) quantityPageInventoryDetailListInventoryItem, accountPricePageInventoryDetailListInventoryItem, accountSumPageInventoryDetailListInventoryItem


    OBJECTS          cs=collationSheet

    PROPERTIES (cs)  READONLY nameCollationSheet
    PROPERTIES (cs)  READONLY nameTypeOfAdditionCollationSheet, nameDepartmentStoreCollationSheet,
                     quantityPageInventoryDetailCollationSheet, quantityBalanceCollationSheet, quantityShortageCollationSheet,
                     accountSumPageInventoryDetailCollationSheet, accountSumBalanceCollationSheet, accountSumShortageCollationSheet,
                     countListInventoryCollationSheet, countPageInventoryCollationSheet
    PROPERTIES (cs)  dialogItemByCollationSheet, overDateCollationSheet, convertPriceCollationSheet, delete
    PROPERTIES (cs)  FORCE PANEL accountSumItemPageInventoryDetailCollationSheet, accountSumContainerPageInventoryDetailCollationSheet,
                     accountSumItemBalanceCollationSheet, accountSumContainerBalanceCollationSheet,
                     accountSumItemShortageCollationSheet, accountSumContainerShortageCollationSheet



    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS          i=item
    PROPERTIES (i)   READONLY nameAttributeItem, idBarcodeSku

    PROPERTIES(cs, i) quantityPageInventoryDetailCollationSheetItem, quantityBalanceCollationSheetItem, quantityShortageCollationSheetItem
    PROPERTIES       accountPricePageInventoryDetailCollationSheetItem (cs,i) BACKGROUND differentPriceCollationSheetItem(cs, i),
                     accountPriceBalanceCollationSheetItem(cs, i) BACKGROUND differentPriceCollationSheetItem(cs, i)

    PROPERTIES(cs, i) accountSumPageInventoryDetailCollationSheetItem, accountSumBalanceCollationSheetItem, accountSumShortageCollationSheetItem

    FILTERS inInventoryDepartmentStoreListInventoryPageInventoryPageInventoryDetail(in, ds, li, pl, dp),
            inventoryListInventory(li) == in,
            departmentStoreListInventory(li) == ds,
            listInventoryPageInventory(pl) == li,
            includeDepartmentStoreInventory(ds, in),
            inventoryCollationSheet(cs) == in,
            includeCollationSheetItem(cs, i),
            isParentItemGroupSku(g, i),
            quantityPageInventoryDetailListInventoryItem(li,it)>0

    ORDER BY nameAttributeItem

    FILTERGROUP notEqualsPriceFilters
            FILTER 'Показать товар с разными ценами' 'F10' differentPriceCollationSheetItem(cs, i)

    EDIT inventory OBJECT in
;

DESIGN inventory FROM DEFAULT {
    main{
        NEW header.box BEFORE in.box {
            childConstraints = TO THE BOTTOM;

            ADD in.documentHeaderGroup {
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(nameDepartmentInventory);
                ADD PROPERTY(nameNumeratorObject);
                ADD PROPERTY(numberObject);
                ADD PROPERTY(seriesObject);
                ADD PROPERTY(dateInventory);
                ADD PROPERTY(timeInventory);
            }

            NEW headerRow2 {
                childConstraints = TO THE RIGHT;
                ADD in.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                    NEW headerRow2Col1Row1 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(nameTypeOfAdditionInventory);
                        ADD PROPERTY(nameInventory);
                    }
                    NEW headerRow2Col1Row2 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(noteInventory);
                        ADD PROPERTY(infoInventory);
                    }
                    NEW headerRow2Col1Row3 {
                        ADD in.inventoryCommitteeGroup {
                            childConstraints = TO THE RIGHT;
                        }
                    }

                    NEW headerRow2Col1Row4 {
                        childConstraints = TO THE RIGHT;

                        NEW headerRow2Col1Row41 {
                            title = 'Снятие остатков';
                            childConstraints = TO THE RIGHT;
                            ADD PROPERTY(timeFromInventory);
                            ADD PROPERTY(timeToInventory);
                        }
                        NEW headerRow2Col1Row42 {
                            title = 'Руководство';
                            ADD PROPERTY(nameHeadManInventory);
                        }
                    }
                }
                NEW actionContainer {
                    title = 'Действия';
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY(fillBalanceInventory);
                    ADD PROPERTY(convertPriceInventory);
                }
            }
        }

        NEW secondCase BEFORE functions.box {
            type = TABBED;
            NEW z.box { title = 'Описи';
                fillVertical = 5;
                childConstraints = TO THE RIGHT;
                ADD treeDepartmentStore.box {
                    fillHorizontal = 2;

                    PROPERTY(objectClassName) {
                            preferredCharWidth = 15;
                    }
                    PROPERTY (dumb1) {
                        caption = 'Статус';
                        minimumCharWidth = 15;
                    }
                    PROPERTY (postListInventory) {
                        caption = 'Закрыть';
                    }
                    PROPERTY (unpostListInventory) {
                        caption = 'Открыть';
                    }
                    PROPERTY (editLI) {
                        caption = 'Редактировать';
                    }
                    PROPERTY (delete(li)) {
                        caption = 'Удалить';
                        panelLocation = TOOLBAR;
                        askConfirm = TRUE;
                    }
                }
                NEW case1  {
                    type = TABBED;
                    fillHorizontal = 3;
                    ADD dp.box;
                    ADD it.box {
                        title = 'Опись-товар';
                    }
                }
            }

            NEW x.box { title = 'Сличительные ведомости';
                fillVertical = 5;
                NEW pop1 {
                    childConstraints = TO THE RIGHT;
                    ADD cs.grid.box  {
                        fillVertical = 1;
                        fillHorizontal = 4;
                    }
                    ADD cs.panel {
                        title = 'Суммы товар/тара';
                        childConstraints = TO THE BOTTOM;
                        fillHorizontal = 1;
                    }
                }
                NEW firstCase { title = 'Пересчитанный товар';
                    fillVertical = 4;
                    ADD treeGroup.box { title = 'Товарные группы';};
                    ADD i.box;
                    POSITION treeGroup.box TO THE LEFT i.box;
                        treeGroup.box{ fillHorizontal = 1.5;}
                        i.box{ fillHorizontal = 3.5;}

                ADD PROPERTY(dialogItemByCollationSheet(cs)) IN i.panel;
                }
            }

        }
    }
}

FORM inventories 'Инвентаризации'
    OBJECTS in=inventory
    PROPERTIES(in) READONLY objectClassName, numberObject, seriesObject, dateInventory, timeInventory,
                            nameDepartmentInventory, nameInventory, noteInventory

    PROPERTIES(in) FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES(in)  ADDFORM, EDITFORM SHOWIF isDraftInventory(in), delete FORCE PANEL SHOWIF isDraftInventory(in),
                    postInventory SHOWIF isDraftInventory(in), unpostInventory SHOWIF isPostedInventory(in)//(in) ADDFORM, EDITFORM, delete

    OBJECTS il=inventoryDetail
    PROPERTIES(il) READONLY nameDepartmentStoreInventoryDetail, idBarcodeInventoryDetail, nameAttributeItemInventoryDetail, quantityInventoryDetail, accountSumInventoryDetail

    OBJECTS li=listInventory

    PROPERTIES(li) READONLY nameListInventory, nameDepartmentStoreListInventory, countIndexListInventory,
                   quantityPageInventoryDetailListInventory, accountSumPageInventoryDetailListInventory

    OBJECTS         i=item
    PROPERTIES (li,i) indexListInventoryItem
    PROPERTIES (i)    idBarcodeSku, nameAttributeItem
    PROPERTIES (li,i) quantityPageInventoryDetailListInventoryItem, accountPricePageInventoryDetailListInventoryItem, accountSumPageInventoryDetailListInventoryItem

    PROPERTIES(li)  toPrintListInventory

    OBJECTS          cs=collationSheet

    PROPERTIES (cs)  READONLY nameCollationSheet, nameTypeOfAdditionCollationSheet, nameDepartmentStoreCollationSheet,
                     quantityPageInventoryDetailCollationSheet, quantityBalanceCollationSheet, quantityShortageCollationSheet,
                     accountSumPageInventoryDetailCollationSheet, accountSumBalanceCollationSheet, accountSumShortageCollationSheet

    PROPERTIES (cs)  FORCE PANEL accountSumItemPageInventoryDetailCollationSheet, accountSumContainerPageInventoryDetailCollationSheet,
                     accountSumItemBalanceCollationSheet, accountSumContainerBalanceCollationSheet,
                     accountSumItemShortageCollationSheet, accountSumContainerShortageCollationSheet

    OBJECTS          it=item
    PROPERTIES (it)   READONLY nAItem=nameAttributeItem, idBarcodeSku

    PROPERTIES(cs, it) READONLY quantityPageInventoryDetailCollationSheetItem, quantityBalanceCollationSheetItem, quantityShortageCollationSheetItem
    PROPERTIES       accountPricePageInventoryDetailCollationSheetItem (cs,it) BACKGROUND differentPriceCollationSheetItem(cs, it),
                     accountPriceBalanceCollationSheetItem(cs, it) BACKGROUND differentPriceCollationSheetItem(cs, it)

    PROPERTIES(cs, it) READONLY accountSumPageInventoryDetailCollationSheetItem, accountSumBalanceCollationSheetItem, accountSumShortageCollationSheetItem
    PROPERTIES(cs)  toPrintCollationSheet, toPrintDetailCollationSheet

    FILTERS         inventoryInventoryDetail(il)==in,
                    inventoryListInventory(li)==in,
                    quantityPageInventoryDetailListInventoryItem(li,i)>0,
                    inventoryCollationSheet(cs) == in,
                    includeCollationSheetItem(cs, it),
                    includeItemInventoryDetail(il)

    ORDER BY        nameDepartmentStoreInventoryDetail, nameAttributeItemInventoryDetail, nameDepartmentStoreListInventory,
                    nameDepartmentStoreCollationSheet, indexListInventoryItem, nAItem
;

DESIGN inventories FROM DEFAULT {
    main {
        childConstraints = TO THE BOTTOM;

        NEW topContainer{

            type = SPLITV;

            ADD in.box {
                fillVertical = 1;
                PROPERTY(objectClassName) {
                    preferredCharWidth = 25;
                }
                PROPERTY (delete(in)) {
                    panelLocation = TOOLBAR;
                    askConfirm = TRUE;
                }
            }

            NEW wor {
                fillVertical = 2;
                type = TABBED;

                NEW wor1 {
                    title = 'Товары';
                    ADD il.box {
                        title = 'Товары с недостачей (излишком)';
                    }
                }

                NEW wor2 {
                    title = 'Описи';
                    childConstraints = TO THE RIGHT;
                    ADD li.box;
                    ADD i.box;
                }

                NEW wor3 {
                    title = 'Ведомости';
                    childConstraints = TO THE RIGHT;
                    ADD cs.box;
                    ADD it.box;
                }
            }
        }
        NEW row {
            childConstraints = TO THE RIGHT;

            ADD in.historyGroup {
                childConstraints = TO THE BOTTOM;
                fillHorizontal = 1;
            }
            ADD in.postedGroup {
                childConstraints = TO THE BOTTOM;
                fillHorizontal = 1;
            }
        }
        ADD functions.box;
    }
}

//---------------------------Акты переоценок-------------------------------------//

@metaCodeInputMultipleItemsBalance (userPriceChange);
@metaCodeDocumentMachineryPriceTransaction(userPriceChange);
@metaCodeDocumentLabelTransaction(userPriceChange);
@defineDocumentDetailItemOfTerminal(userPriceChange);


percMarkupUserPriceChange 'Процент торговой надбавки'  = DATA NUMERIC[8,3] (userPriceChange);
percDiscountUserPriceChange 'Процент скидки от розн. цены'  = DATA NUMERIC[8,3] (userPriceChange);
toShowDiscountUserPriceChange (userPriceChange) =  userPriceChange IS userPriceChange AND NOT percMarkupUserPriceChange(userPriceChange);
toShowMarkupUserPriceChange (userPriceChange) =  userPriceChange IS userPriceChange AND NOT percDiscountUserPriceChange(userPriceChange);

newDiscountRetailPriceUserPriceChangeDetail (userPriceChange, userPriceChangeDetail) =  [roundM1(X-(X*Y)/100)](
    curRetailPriceUserPriceChangeDetail(userPriceChangeDetail), percDiscountUserPriceChange(userPriceChange));

newMarkupRetailPriceUserPriceChangeDetail (userPriceChange, userPriceChangeDetail) = [roundM1(X+(X*Y)/100+(X+(X*Y)/100)*Z/100+F)](
    curSupplierPriceUserPriceChangeDetail(userPriceChangeDetail),
    percMarkupUserPriceChange(userPriceChange),
    curValueRetailRangeUserPriceChangeDetail(userPriceChangeDetail),
    (UNION OVERRIDE 0.0 IF userPriceChangeDetail IS userPriceChangeDetail, curWarePriceUserPriceChangeDetail(userPriceChangeDetail)));



FORM addPercMarkupUserPriceChange 'Изменить наценку товара'
    OBJECTS u=userPriceChange FIXED PANEL
    PROPERTIES (u) percMarkupUserPriceChange
;

DESIGN addPercMarkupUserPriceChange FROM DEFAULT {
    PROPERTY (percMarkupUserPriceChange) {
        caption = 'Введите наценку';
        font = 'Tahoma bold 64';
        panelLabelAbove = TRUE;
    }
}

dialogAddPercMarkupUserPriceChange 'Изменить наценку товара' (userPriceChange) = ACTION (userPriceChange) {
        FORM addPercMarkupUserPriceChange OBJECTS u = userPriceChange AS userPriceChange MODAL;
        IF formResult() == formResult.ok THEN {
            FOR userPriceChangeUserPriceChangeDetail(userPriceChangeDetail) == userPriceChange DO {
                SET importerPriceUserPriceChangeDetail(userPriceChangeDetail) <- curImporterPriceUserPriceChangeDetail(userPriceChangeDetail);
                SET supplierPriceUserPriceChangeDetail(userPriceChangeDetail) <- curSupplierPriceUserPriceChangeDetail(userPriceChangeDetail);
                SET retailRangeUserPriceChangeDetail(userPriceChangeDetail) <- curRetailRangeUserPriceChangeDetail(userPriceChangeDetail);
                SET wareUserPriceChangeDetail(userPriceChangeDetail) <- curWareUserPriceChangeDetail(userPriceChangeDetail);
                SET warePriceUserPriceChangeDetail(userPriceChangeDetail) <- curWarePriceUserPriceChangeDetail(userPriceChangeDetail);
                SET retailPriceUserPriceChangeDetail(userPriceChangeDetail) <- newMarkupRetailPriceUserPriceChangeDetail(userPriceChange, userPriceChangeDetail);
            }
        }
} TOOLBAR CONFIRM;


FORM addPercDiscountUserPriceChange 'Сделать скидку'
    OBJECTS u=userPriceChange FIXED PANEL
    PROPERTIES (u) percDiscountUserPriceChange
;

DESIGN addPercDiscountUserPriceChange FROM DEFAULT {
    PROPERTY (percDiscountUserPriceChange) {
        caption = 'Введите скидку';
        font = 'Tahoma bold 64';
        panelLabelAbove = TRUE;
    }
}

dialogAddPercDiscountUserPriceChange 'Сделать скидку' (userPriceChange) = ACTION (userPriceChange) {
        FORM addPercDiscountUserPriceChange OBJECTS u = userPriceChange AS userPriceChange MODAL;
        IF formResult() == formResult.ok THEN {
            FOR userPriceChangeUserPriceChangeDetail(userPriceChangeDetail) == userPriceChange DO {
                SET importerPriceUserPriceChangeDetail(userPriceChangeDetail) <- curImporterPriceUserPriceChangeDetail(userPriceChangeDetail);
                SET supplierPriceUserPriceChangeDetail(userPriceChangeDetail) <- curSupplierPriceUserPriceChangeDetail(userPriceChangeDetail);
                SET retailRangeUserPriceChangeDetail(userPriceChangeDetail) <- curRetailRangeUserPriceChangeDetail(userPriceChangeDetail);
                SET wareUserPriceChangeDetail(userPriceChangeDetail) <- curWareUserPriceChangeDetail(userPriceChangeDetail);
                SET warePriceUserPriceChangeDetail(userPriceChangeDetail) <- curWarePriceUserPriceChangeDetail(userPriceChangeDetail);
                SET retailPriceUserPriceChangeDetail(userPriceChangeDetail) <- newDiscountRetailPriceUserPriceChangeDetail(userPriceChange, userPriceChangeDetail);
            }
        }
} TOOLBAR CONFIRM;

// todo: пока что сделал так, что можно выбрать только один экшн на изменение цены.
//       Для расчета новых показателей цены, необходимо чтобы все поля были не пустые.....

FORM userPriceChange 'Переоценка товаров'
    OBJECTS u=userPriceChange FIXED PANEL
    PROPERTIES (u) nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject,
                   dateUserPriceChange, timeUserPriceChange, nameDepartmentStoreUserPriceChange,
                   diffSupplierISumPriceChangeDocumentDetailPriceChangeDocument, diffMarkupSumPriceChangeDocumentDetailPriceChangeDocument, diffRetailVATISumPriceChangeDocumentDetailPriceChangeDocument,
                   diffWareSumPriceChangeDocumentDetailPriceChangeDocument, diffWareVATSumPriceChangeDocumentDetailPriceChangeDocument,
                   noteUserPriceChange, numberDisposalUserPriceChange, namePriceChangeCommitteeUserPriceChange

    OBJECTS d=userPriceChangeDetail
    PROPERTIES (d) indexUserPriceChangeDetail, idBarcodeSkuUserPriceChangeDetail, nameAttributeItemUserPriceChangeDetail, quantityUserPriceChangeDetail,
                   curImporterPriceUserPriceChangeDetail, importerPriceUserPriceChangeDetail,
                   curSupplierPriceUserPriceChangeDetail, supplierPriceUserPriceChangeDetail,
                   curRetailMarkupPriceChangeDocumentDetail, retailMarkupPriceChangeDocumentDetail,
                   curNumberRetailRangeUserPriceChangeDetail, curValueRetailRangeUserPriceChangeDetail,
                   numberRetailRangeUserPriceChangeDetail, valueRetailRangeUserPriceChangeDetail,
                   curWarePriceUserPriceChangeDetail, warePriceUserPriceChangeDetail,
                   curNumberWareRangeUserPriceChangeDetail, curValueWareRangeUserPriceChangeDetail,
                   numberWareRangeUserPriceChangeDetail, valueWareRangeUserPriceChangeDetail,
                   curRetailPriceUserPriceChangeDetail, retailPriceUserPriceChangeDetail, ADDOBJ, delete
//    PROPERTIES (u, d)  newMarkupRetailPriceUserPriceChangeDetail, newDiscountRetailPriceUserPriceChangeDetail

    PROPERTIES dialogAddPercMarkupUserPriceChange(u) TODRAW d SHOWIF toShowMarkupUserPriceChange(u),
               dialogAddPercDiscountUserPriceChange(u) TODRAW d SHOWIF toShowDiscountUserPriceChange(u),
               fillOfTerminalDocumentUserPriceChange(u) TODRAW d,
               inputMultipleItemsBalanceUserPriceChange(u) TODRAW d, addUserPriceChangeDetailBarcode(u) TODRAW d,
               cleanAllUserPriceChangeDetailsUserPriceChange(u) FORCE PANEL TODRAW d

    FILTERS inUserPriceChangeUserPriceChangeDetail(u, d)

    EDIT userPriceChange OBJECT u
;

DESIGN userPriceChange FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW header.box BEFORE d.box {
            childConstraints = TO THE RIGHT;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;
                ADD u.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreUserPriceChange);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateUserPriceChange);
                    ADD PROPERTY(timeUserPriceChange);
                }
                ADD u.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }

            ADD u.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }

        PROPERTY(importerPriceUserPriceChangeDetail) { background = #FFFFCC; }
        PROPERTY(supplierPriceUserPriceChangeDetail) { background = #FFFFCC; }
        PROPERTY(retailMarkupPriceChangeDocumentDetail) { background = #FFFFCC; }
        PROPERTY(numberRetailRangeUserPriceChangeDetail) { background = #FFFFCC; }
        PROPERTY(valueRetailRangeUserPriceChangeDetail) { background = #FFFFCC; }
        PROPERTY(warePriceUserPriceChangeDetail) { background = #FFFFCC; }
        PROPERTY(numberWareRangeUserPriceChangeDetail) { background = #FFFFCC; }
        PROPERTY(valueWareRangeUserPriceChangeDetail) { background = #FFFFCC; }
        PROPERTY(retailPriceUserPriceChangeDetail) { background = #FFFFCC; }
    }
}

FORM userPriceChanges 'Переоценки товаров'

    OBJECTS u=userPriceChange
    PROPERTIES (u) READONLY objectClassName, numberObject, seriesObject, dateUserPriceChange, timeUserPriceChange, nameDepartmentStoreUserPriceChange,
                   diffSupplierISumPriceChangeDocumentDetailPriceChangeDocument, diffMarkupSumPriceChangeDocumentDetailPriceChangeDocument, diffRetailVATISumPriceChangeDocumentDetailPriceChangeDocument,
                   diffWareSumPriceChangeDocumentDetailPriceChangeDocument, diffWareVATSumPriceChangeDocumentDetailPriceChangeDocument, diffRetailSumPriceChangeDocumentDetailPriceChangeDocument,
                   statusPrintPriceTransactionDocument BACKGROUND backgroundPrintLabelTransactionUserPriceChange(u),
                   statusEquipmentPriceTransactionDocument BACKGROUND backgroundCreateMachineryPriceTransactionUserPriceChange(u)

    PROPERTIES (u) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES (u)          createUserPriceChangeLabelTransaction FORCE PANEL SHOWIF showPrintLabelTransactionUserPriceChange(u),
                            createSnapshotUserPriceChangeLabelTransaction FORCE PANEL SHOWIF isPostedUserPriceChange(u),
                            createUserPriceChangeMachineryPriceTransaction FORCE PANEL SHOWIF showCreateMachineryPriceTransactionUserPriceChange(u),
                            createSnapshotUserPriceChangeMachineryPriceTransaction FORCE PANEL SHOWIF isPostedUserPriceChange(u),
                            printPriceChange FORCE PANEL,
                            ADDFORM, EDITFORM SHOWIF isDraftUserPriceChange(u), delete FORCE PANEL SHOWIF isDraftUserPriceChange(u),
                            postUserPriceChange SHOWIF isDraftUserPriceChange(u), unpostUserPriceChange SHOWIF isPostedUserPriceChange(u)

    OBJECTS d=userPriceChangeDetail
    PROPERTIES (d) READONLY indexUserPriceChangeDetail, idBarcodeSkuUserPriceChangeDetail, nameAttributeItemUserPriceChangeDetail, quantityUserPriceChangeDetail,
                            curImporterPriceUserPriceChangeDetail, importerPriceUserPriceChangeDetail,
                            curSupplierPriceUserPriceChangeDetail, supplierPriceUserPriceChangeDetail,
                            curRetailMarkupPriceChangeDocumentDetail, retailMarkupPriceChangeDocumentDetail,
                            curNumberRetailRangeUserPriceChangeDetail, curValueRetailRangeUserPriceChangeDetail,
                            numberRetailRangeUserPriceChangeDetail, valueRetailRangeUserPriceChangeDetail,
                            curWarePriceUserPriceChangeDetail, warePriceUserPriceChangeDetail,
                            curNumberWareRangeUserPriceChangeDetail, curValueWareRangeUserPriceChangeDetail,
                            numberWareRangeUserPriceChangeDetail, valueWareRangeUserPriceChangeDetail,
                            curRetailPriceUserPriceChangeDetail, retailPriceUserPriceChangeDetail


    FILTERS inUserPriceChangeUserPriceChangeDetail(u, d)
;

DESIGN userPriceChanges FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD u.box;
        ADD d.box;
    }

    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }
    PROPERTY (delete(u)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }

    ADD u.printGroup {
        childConstraints = TO THE BOTTOM;
    }

    ADD u.historyGroup {
        childConstraints = TO THE BOTTOM;
    }

    ADD u.postedGroup {
        childConstraints = TO THE BOTTOM;
    }

    POSITION u.historyGroup TO THE LEFT u.postedGroup;
    POSITION u.postedGroup TO THE LEFT u.printGroup;
    POSITION u.historyGroup TO THE LEFT u.printGroup;

    ADD functions.box;
}


//---------------- Формы внутреннего перемещения (приход и расход)-------------------------------------//

@metaCodeInputMultipleItems (innerFlow);
@metaCodeInputMultipleItems (innerArrival);
@metaCodeDocumentMachineryPriceTransaction(innerArrival);
@metaCodeDocumentLabelTransaction(innerArrival);
@defineDocumentDetailItemOfTerminal(innerFlow);

FORM innerFlow 'Расход в другой отдел'
    OBJECTS f=innerFlow FIXED PANEL
    PROPERTIES (f) numberObject, seriesObject, dateInnerFlow, timeInnerFlow, nameDepartmentStoreInnerFlow,
                   nameRecipientDepartmentInnerFlow, showWareInnerFlow, noteInnerFlow, quantityInnerFlowDetailInnerFlow,
                   retailSumInnerFlowDetailInnerFlow

    PROPERTIES (f) carConsignment, ownerCarConsignment, trailerConsignment, driverCarConsignment, waybillConsignment,
                   nameTransportPayerConsignment, shipmentBaseConsignment, loadingPlaceConsignment, unloadingPlaceConsignment,
                   readdressingConsignment, commonNameIssuanceAllowedConsignment, commonNameIssuanceExecutedConsignment,
                   forwarderConsignment, warrantConsignment, warrantHolderConsignment, goodsAcceptedConsignment,
                   commonNameLoadingExecuterConsignment, nameWayOfLoadingConsignment, codeLoadingConsignment,
                   arrivalTimeConsignment, departureTimeConsignment, downtimeConsignment, raceQuantityConsignment,
                   quantityConsignmentDetailConsignment, packQuantityConsignmentDetailConsignment, grossWeightConsignmentDetailConsignment,
                   sumConsignmentDetailConsignment, sumVATConsignmentDetailConsignment, sumInvoiceConsignmentDetailConsignment

    OBJECTS d=innerFlowDetail
    PROPERTIES (d) indexInnerFlowDetail, idBarcodeSkuInnerFlowDetail, nameAttributeItemInnerFlowDetail,
                   quantityInnerFlowDetail, importerPriceInnerFlowDetail, supplierPriceInnerFlowDetail, numberRetailRangeInnerFlowDetail,
                   valueRetailRangeInnerFlowDetail, nameWareInnerFlowDetail SHOWIF showWareInnerFlow(f),
                   warePriceInnerFlowDetail SHOWIF showWareInnerFlow(f),
                   retailPriceInnerFlowDetail, retailSumInnerFlowDetail, ADDOBJ, delete

    PROPERTIES     inputMultipleItemsInnerFlow(f) TODRAW d, fillOfTerminalDocumentInnerFlow(f) TODRAW d, addInnerFlowDetailBarcode(f) TODRAW d,
                   cleanAllInnerFlowDetailsInnerFlow(f) FORCE PANEL TODRAW d
    FILTERS inInnerFlowInnerFlowDetail(f, d)

    EDIT innerFlow OBJECT f
;

DESIGN innerFlow FROM DEFAULT{
    main{
        preferredSize = (1024, 768);

        NEW specification.box BEFORE functions.box{
            type = TABBED;
            ADD d.box{
                title = 'Спецификация';
                ADD d.grid{
                    fillVertical = 12;
                };
            };
            NEW consignment{
                title = 'Накладная';
                childConstraints = TO THE BOTTOM;

                    childConstraints = TO THE RIGHT;

                ADD f.carConsignmentGroup{
                };
                NEW caseTwo {
                    childConstraints = TO THE BOTTOM;
                    ADD f.issuanceConsignmentGroup {
                    };
                    ADD f.loadingConsignmentGroup{
                    };

                    ADD f.sumConsignmentGroup{
                        childConstraints = TO THE BOTTOM;
                        NEW oneCase {
                            childConstraints = TO THE RIGHT;
                            ADD PROPERTY (quantityConsignmentDetailConsignment);
                            ADD PROPERTY (packQuantityConsignmentDetailConsignment);
                            ADD PROPERTY (grossWeightConsignmentDetailConsignment);
                        }
                        NEW twoCase {
                            childConstraints = TO THE RIGHT;
                            ADD PROPERTY (sumConsignmentDetailConsignment);
                            ADD PROPERTY (sumVATConsignmentDetailConsignment);
                            ADD PROPERTY (sumInvoiceConsignmentDetailConsignment);
                        }
                    };
                }
            };
        };

        NEW header.box BEFORE specification.box {
            childConstraints = TO THE RIGHT;

            NEW headerRow1 {
                childConstraints = TO THE BOTTOM;

                ADD f.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreInnerFlow);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateInnerFlow);
                    ADD PROPERTY(timeInnerFlow);
                }

                ADD f.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                    POSITION PROPERTY(noteInnerFlow) TO THE RIGHT PROPERTY(showWareInnerFlow);
                }
            }

            ADD f.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    };
};

FORM innerFlows 'Расходы в другие отделы'
    OBJECTS f=innerFlow
    PROPERTIES (f) READONLY objectClassName, numberObject, seriesObject, dateInnerFlow, timeInnerFlow, nameDepartmentStoreInnerFlow,
                            nameRecipientDepartmentInnerFlow, countInnerFlowDetailInnerFlow,
                            quantityInnerFlowDetailInnerFlow, retailSumInnerFlowDetailInnerFlow

    PROPERTIES(f) FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed
    PROPERTIES (f) FORCE PANEL printConsignmentVerticalA, printConsignmentHorizontalA,
                               printConsignmentVerticalB, printConsignmentHorizontalB,
                               printConsignmentAttach, printConsignmentSimpleHorizontal, printConsignmentSimpleVertical,
                               printConsignmentSimpleAttach, editConsignment

    PROPERTIES (f) ADDFORM, EDITFORM SHOWIF isDraftInnerFlow(f), delete FORCE PANEL SHOWIF isDraftInnerFlow(f),
                   postInnerFlow SHOWIF isDraftInnerFlow(f), unpostInnerFlow SHOWIF isPostedInnerFlow(f)

    OBJECTS d=innerFlowDetail
    PROPERTIES (d) READONLY indexInnerFlowDetail, idBarcodeSkuInnerFlowDetail, nameAttributeItemInnerFlowDetail,
                            quantityInnerFlowDetail, importerPriceInnerFlowDetail, supplierPriceInnerFlowDetail, numberRetailRangeInnerFlowDetail,
                            valueRetailRangeInnerFlowDetail, nameWareInnerFlowDetail, warePriceInnerFlowDetail,
                            retailPriceInnerFlowDetail, retailSumInnerFlowDetail
    FILTERS inInnerFlowInnerFlowDetail(f, d)
;


DESIGN innerFlows FROM DEFAULT {
    main {
        childConstraints = TO THE BOTTOM;

        NEW topContainer{

            type = SPLITV;

            ADD f.box {
                PROPERTY(objectClassName) {
                    preferredCharWidth = 15;
                }
                PROPERTY (delete(f)) {
                    panelLocation = TOOLBAR;
                    askConfirm = TRUE;
                }
            }
            ADD d.box;
        }

        NEW footer.container {
            childConstraints = TO THE BOTTOM;

            NEW cont3 {
                childConstraints = TO THE RIGHT;
                ADD f.historyGroup {
                    childConstraints = TO THE BOTTOM;
                }

                ADD f.postedGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }

            ADD f.printGroup {
                childConstraints = TO THE BOTTOM;
                NEW case55{
                    childConstraints = TO THE RIGHT;

                    NEW contOne {
                        title = 'Накладная';
                        ADD PROPERTY(editConsignment);
                    }
                    NEW tn{
                        childConstraints = TO THE RIGHT;
                        title = 'ТН-2';
                        ADD PROPERTY(printConsignmentSimpleVertical);
                        ADD PROPERTY(printConsignmentSimpleHorizontal);
                        ADD PROPERTY(printConsignmentSimpleAttach);
                    }
                }
                NEW ttn1{
                    childConstraints = TO THE RIGHT;
                    title = 'ТТН-1';
                    ADD PROPERTY(printConsignmentVerticalA);
                    ADD PROPERTY(printConsignmentHorizontalA);
                    ADD PROPERTY(printConsignmentVerticalB);
                    ADD PROPERTY(printConsignmentHorizontalB);
                    ADD PROPERTY(printConsignmentAttach);
                }

            }

        }
        ADD functions.box;
    }
}

FORM innerFlowPosted 'Расходы в другие отделы'
    OBJECTS f=innerFlowPosted
    PROPERTIES (f) READONLY objectClassName, numberObject, seriesObject, dateInnerFlow, timeInnerFlow, nameDepartmentStoreInnerFlow,
                            nameRecipientDepartmentInnerFlow, countInnerFlowDetailInnerFlow,
                            quantityInnerFlowDetailInnerFlow, retailSumInnerFlowDetailInnerFlow

    OBJECTS d=innerFlowDetail
    PROPERTIES (d) READONLY indexInnerFlowDetail, idBarcodeSkuInnerFlowDetail, nameAttributeItemInnerFlowDetail,
                            quantityInnerFlowDetail, importerPriceInnerFlowDetail, supplierPriceInnerFlowDetail, numberRetailRangeInnerFlowDetail,
                            valueRetailRangeInnerFlowDetail, nameWareInnerFlowDetail, warePriceInnerFlowDetail,
                            retailPriceInnerFlowDetail, retailSumInnerFlowDetail
    FILTERS inInnerFlowInnerFlowDetail(f, d)

    DIALOG innerFlowPosted OBJECT f
;

DESIGN innerFlowPosted FROM DEFAULT {

    main {
        preferredSize = (1024, 768);

        NEW topContainer{

            type = SPLITV;
            childConstraints = TO THE BOTTOM;

            ADD f.box;
            ADD d.box;
        }

        PROPERTY(objectClassName) {
            preferredCharWidth = 15;
        }
    }

    ADD functions.box;
}

printPriceChangeInnerArrival 'Акт переоценки' (innerArrival) = printPriceChange(uniquePriceChangeInnerArrival(innerArrival)) IN printGroup;


FORM innerArrival 'Приход из другого отдела'
    OBJECTS a=innerArrival FIXED PANEL
    PROPERTIES (a) nameDepartmentStoreInnerArrival, numberInnerArrival SHOWIF departmentStoreInnerArrival(a),
                   seriesInnerArrival SHOWIF departmentStoreInnerArrival(a), dateInnerArrival SHOWIF innerFlowInnerArrival(a),
                   timeInnerArrival SHOWIF innerFlowInnerArrival(a), nameSenderDepartmentInnerArrival READONLY SHOWIF innerFlowInnerArrival(a),
                   toFillInnerArrivalDetailsInnerArrival SHOWIF innerFlowInnerArrival(a), showWareInnerArrival,
                   noteInnerArrival READONLY SHOWIF innerFlowInnerArrival(a), quantityInnerArrivalDetailInnerArrival SHOWIF innerFlowInnerArrival(a),
                   retailSumInnerArrivalDetailInnerArrival SHOWIF innerFlowInnerArrival(a), numberDisposalInnerArrival SHOWIF needToPriceChangeInnerArrival(a),
                   namePriceChangeCommitteeInnerArrival SHOWIF needToPriceChangeInnerArrival(a)

    OBJECTS d=innerArrivalDetail
    PROPERTIES (d) SHOWIF innerFlowInnerArrival(a)
                   indexInnerArrivalDetail, idBarcodeSkuInnerArrivalDetail, nameAttributeItemInnerArrivalDetail,
                   quantityInnerArrivalDetail, balanceBeforeInnerArrivalInnerArrivalDetail, importerPriceInnerArrivalDetail,
                   supplierPriceInnerArrivalDetail, numberRetailRangeInnerArrivalDetail,
                   valueRetailRangeInnerArrivalDetail, nameWareInnerArrivalDetail SHOWIF showWareInnerArrival(a),
                   warePriceInnerArrivalDetail SHOWIF showWareInnerArrival(a), retailPriceInnerArrivalDetail,
                   retailSumInnerArrivalDetail, ADDOBJ, delete
    PROPERTIES (d) FORCE PANEL curImporterPriceInnerArrivalDetail, curSupplierPriceInnerArrivalDetail, curNameWareInnerArrivalDetail,
                   curWarePriceInnerArrivalDetail, curValueRetailRangeInnerArrivalDetail, curRetailPriceInnerArrivalDetail

    PROPERTIES inputMultipleItemsInnerArrival(a) TODRAW d, addInnerArrivalDetailBarcode(a) TODRAW d, cleanAllInnerArrivalDetailsInnerArrival(a) FORCE PANEL  TODRAW d // SHOWIF innerFlowInnerArrival(a)
    FILTERS inInnerArrivalInnerArrivalDetail(a, d)

    OBJECTS i=item
    PROPERTIES (i) SHOWIF innerFlowInnerArrival(a) nameAttributeItem
    PROPERTIES (i, a) SHOWIF innerFlowInnerArrival(a) quantityItemInnerFlowInnerArrival, quantityInnerArrivalDetailItemInnerArrival,
                             diffQuantityItemInnerArrival, importerPriceItemInnerArrival, retailPriceItemInnerArrival
    FILTERS quantityInnerArrivalDetailItemInnerArrival(i, a)

    EDIT innerArrival OBJECT a
;

DESIGN innerArrival FROM DEFAULT{
    main{
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            type = TABBED;
            ADD d.box {
                childConstraints = TO THE BOTTOM;
                title = 'Спецификация';
                d.priceDetailGroup {
                    childConstraints = TO THE RIGHTBOTTOM;
                }
            };
            ADD i.box;
        };
        NEW header.box BEFORE specification.box {
            childConstraints = TO THE RIGHT;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;

                ADD a.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreInnerArrival);
                    ADD PROPERTY(numberInnerArrival);
                    ADD PROPERTY(seriesInnerArrival);
                    ADD PROPERTY(dateInnerArrival);
                    ADD PROPERTY(timeInnerArrival);
                }

                NEW headerCol1Row2 {
                    childConstraints = TO THE RIGHT;

                    ADD a.documentPrmGroup {
                        childConstraints = TO THE BOTTOM;
                        POSITION PROPERTY(noteInnerArrival) TO THE RIGHT PROPERTY(showWareInnerArrival);
                    }

                    NEW headerCol1Actions {
                        title = 'Действия';
                        childConstraints = TO THE BOTTOM;
                        ADD PROPERTY (toFillInnerArrivalDetailsInnerArrival);
                        ADD PROPERTY (cleanAllInnerArrivalDetailsInnerArrival);
                    }
                }
            }

            ADD a.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    }
}

FORM innerArrivals 'Приходы из других отделов'
    OBJECTS a=innerArrival
    PROPERTIES (a) READONLY objectClassName, numberInnerArrival, seriesInnerArrival, dateInnerArrival, timeInnerArrival, nameDepartmentStoreInnerArrival,
                            nameSenderDepartmentInnerArrival, countInnerArrivalDetailInnerArrival, quantityInnerArrivalDetailInnerArrival, retailSumInnerArrivalDetailInnerArrival,
                            statusPrintPriceTransactionDocument BACKGROUND backgroundPrintLabelTransactionInnerArrival(a),
                            statusEquipmentPriceTransactionDocument BACKGROUND backgroundCreateMachineryPriceTransactionInnerArrival(a)

    PROPERTIES (a)          createInnerArrivalLabelTransaction FORCE PANEL SHOWIF showPrintLabelTransactionInnerArrival(a),
                            createSnapshotInnerArrivalLabelTransaction FORCE PANEL SHOWIF isPostedInnerArrival(a),
                            createInnerArrivalMachineryPriceTransaction FORCE PANEL SHOWIF showCreateMachineryPriceTransactionInnerArrival(a),
                            createSnapshotInnerArrivalMachineryPriceTransaction FORCE PANEL SHOWIF isPostedInnerArrival(a),
                            printPriceChangeInnerArrival FORCE PANEL SHOWIF needToPriceChangeInnerArrival(a),
                            printInputListRegister FORCE PANEL,
                            ADDFORM, EDITFORM SHOWIF isDraftInnerArrival(a), delete FORCE PANEL SHOWIF isDraftInnerArrival(a),
                            postInnerArrival SHOWIF isDraftInnerArrival(a), unpostInnerArrival SHOWIF isPostedInnerArrival(a)

    PROPERTIES(a) FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    OBJECTS d=innerArrivalDetail
    PROPERTIES (d) READONLY indexInnerArrivalDetail, idBarcodeSkuInnerArrivalDetail, nameAttributeItemInnerArrivalDetail,
                            quantityInnerArrivalDetail, balanceBeforeInnerArrivalInnerArrivalDetail, importerPriceInnerArrivalDetail,
                            numberRetailRangeInnerArrivalDetail, valueRetailRangeInnerArrivalDetail, nameWareInnerArrivalDetail,
                            warePriceInnerArrivalDetail, retailPriceInnerArrivalDetail, retailSumInnerArrivalDetail

    FILTERS inInnerArrivalInnerArrivalDetail(a, d)
;

DESIGN innerArrivals FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD a.box{
            PROPERTY(objectClassName) {
                preferredCharWidth = 15;
            }

            PROPERTY (delete(a)) {
                panelLocation = TOOLBAR;
                askConfirm = TRUE;
            }
        }
        ADD d.box;
    }

    NEW row {
        childConstraints = TO THE RIGHT;

        ADD a.historyGroup {
            childConstraints = TO THE BOTTOM;
            fillHorizontal = 1;
        }

        ADD a.postedGroup {
            childConstraints = TO THE BOTTOM;
            fillHorizontal = 1;
        }

        ADD a.printGroup {
            childConstraints = TO THE BOTTOM;
            fillHorizontal = 1;
        }
    }

    ADD functions.box;
}

//------------------------------------формы: Отпуск из розницы-------------------------//

FORM specificationForm 'Отгрузки по данной с/ф'
    OBJECTS sp=specification FIXED PANEL
    PROPERTIES (sp) READONLY seriesObject, numberObject, nameDepartmentStoreSpecification, dateSpecification, timeSpecification,
    dateToSpecification, nameCustomerSpecification, nameObjectiveAcquiringSpecification, noteSpecification,
    quantitySpecificationDetailSpecification, calcSaleSumSpecificationDetailSpecification, calcVATSumSpecificationDetailSpecification, retailSumSpecificationDetailSpecification

    OBJECTS st=statement
    PROPERTIES (st) READONLY seriesNumberObject, dateStatement, nameCustomerStatement, nameDepartmentStoreStatement,
                             noteStatement, quantityStatementDetailStatement, calcVATSumStatementDetailStatement, retailSumStatementDetailStatement

    OBJECTS d=statementDetail
    PROPERTIES (d)  READONLY indexStatementDetail, idBarcodeSkuStatementDetail, nameAttributeItemStatementDetail, quantityStatementDetail,
                             retailPriceStatementDetail, calcSaleSumStatementDetail, numberCalcRangeStatementDetail,
                             dataCalcRangeStatementDetail, calcVATSumStatementDetail,
                             retailSumStatementDetail, noteStatementDetail

    FILTERS inStatementSpecification(st, sp),
            isPostedStatement(st),
            inStatementStatementDetail(st, d)
;

DESIGN specificationForm FROM DEFAULT{
    main {
        preferredSize = (1024, 768);

        NEW case BEFORE functions.box{
            title = 'Накладные на отгрузку по данной с/ф';
            ADD st.grid;
            ADD d.grid;
        }
        NEW header.box BEFORE case {
            title = 'Счет-фактура';
            childConstraints = TO THE RIGHT;

            NEW headerRow1 {
                childConstraints = TO THE BOTTOM;

                ADD sp.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreSpecification);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateSpecification);
                    ADD PROPERTY(timeSpecification);
                }

                ADD sp.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                    NEW headerRow21 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(nameCustomerSpecification);
                        ADD PROPERTY(nameObjectiveAcquiringSpecification);
                    }
                    NEW headerRow22 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(dateToSpecification);
                        ADD PROPERTY(noteSpecification);
                    }
                }
            }

            ADD sp.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    }
}


dialogSpecificationForm 'Показать отгрузки по данной с/ф' (specification) = ACTION FORM specificationForm OBJECTS sp MODAL TOOLBAR;

@metaCodeInputMultipleItems (specification);
@defineDocumentDetailItemOfTerminal(specification);

FORM specification 'Счет-фактура'
    OBJECTS sp=specification FIXED PANEL
    PROPERTIES (sp) nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, nameDepartmentStoreSpecification,
                    dateSpecification, timeSpecification, dateToSpecification, nameCustomerSpecification, UNPCustomerSpecification,
                    nameObjectiveAcquiringSpecification, noteSpecification,
                    quantitySpecificationDetailSpecification, calcSaleSumSpecificationDetailSpecification, calcVATSumSpecificationDetailSpecification, retailSumSpecificationDetailSpecification

    OBJECTS d=specificationDetail
    PROPERTIES (d) indexSpecificationDetail, idBarcodeSkuSpecificationDetail, nameAttributeItemSpecificationDetail, quantitySpecificationDetail,
                   retailPriceSpecificationDetail, calcSaleSumSpecificationDetail, numberCalcRangeSpecificationDetail, dataCalcRangeSpecificationDetail,
                   calcVATSumSpecificationDetail, retailSumSpecificationDetail,
                   ADDOBJ, delete

    PROPERTIES FORCE PANEL READONLY articleItemSpecificationDetail(d), nameCountryItemSpecificationDetail(d), balanceDepartmentStoreItemSpecificationDetail(d)
                   BACKGROUND highlightSpecificationDetail(d), availableQuantityItemBySpecificationDetail(d) BACKGROUND notNullAvailableQuantityItemBySpecificationDetail(d)

    PROPERTIES     inputMultipleItemsSpecification(sp) TODRAW d, fillOfTerminalDocumentSpecification(sp) TODRAW d, addSpecificationDetailBarcode(sp) TODRAW d,
                   cleanAllSpecificationDetailsSpecification(sp) FORCE PANEL TODRAW d
    FILTERS inSpecificationSpecificationDetail(sp, d)

    EDIT specification OBJECT sp
;

DESIGN specification FROM DEFAULT{
    main {
        preferredSize = (1024, 768);

        NEW header.box BEFORE d.box {
            childConstraints = TO THE RIGHT;

            NEW headerRow1 {
                childConstraints = TO THE BOTTOM;

                ADD sp.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreSpecification);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateSpecification);
                    ADD PROPERTY(timeSpecification);
                }

                ADD sp.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                    NEW headerRow21 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(nameCustomerSpecification);
                        ADD PROPERTY(UNPCustomerSpecification);
                        ADD PROPERTY(nameObjectiveAcquiringSpecification);
                    }
                    NEW headerRow22 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(dateToSpecification);
                        ADD PROPERTY(noteSpecification);
                    }
                }
            }

            ADD sp.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    }
}

FORM specifications 'Счет-фактуры'
    OBJECTS sp=specification
    PROPERTIES (sp) READONLY numberObject, seriesObject, dateSpecification, timeSpecification, nameDepartmentStoreSpecification,
                             nameCustomerSpecification, dateToSpecification, countSpecificationDetailSpecification, quantitySpecificationDetailSpecification,
                             calcSaleSumSpecificationDetailSpecification, calcVATSumSpecificationDetailSpecification, retailSumSpecificationDetailSpecification
    PROPERTIES (sp)          dialogSpecificationForm FORCE PANEL SHOWIF  countStatementSpecification(sp)

    PROPERTIES (sp)          ADDFORM, EDITFORM, delete

    OBJECTS d=specificationDetail
    PROPERTIES (d) READONLY  indexSpecificationDetail, idBarcodeSkuSpecificationDetail, nameAttributeItemSpecificationDetail,
                             quantitySpecificationDetail, retailPriceSpecificationDetail,
                             calcSaleSumSpecificationDetail, numberCalcRangeSpecificationDetail, dataCalcRangeSpecificationDetail,
                             calcVATSumSpecificationDetail, retailSumSpecificationDetail

    PROPERTIES      FORCE PANEL toPrintSpecification(sp) TODRAW d
    FILTERS         inSpecificationSpecificationDetail(sp, d)

    FILTERGROUP filters6
            FILTER 'Просроченные с/ф' 'F10' overdueSpecification(sp)
            FILTER 'Непросроченные с/ф' 'F9' noOverdueSpecification(sp)
;

DESIGN specifications FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD sp.box;
        ADD d.box {
            d.panel {
                childConstraints = TO THE RIGHT;
                NEW caseOne{
                    title = 'Печатные формы';
                    ADD PROPERTY (toPrintSpecification(sp));
                }
            }
        }
    }

    ADD functions.box;
}

FORM specificationsStatement 'Счета'
    OBJECTS st=statement FIXED PANEL
    PROPERTIES (st) READONLY seriesNumberObject, dateStatement

    OBJECTS sp=specification

    PROPERTIES (st, sp) inStatementSpecification
    PROPERTIES (sp)     READONLY seriesNumberObject, dateSpecification, nameCustomerSpecification, nameDepartmentStoreSpecification,
                                 dateToSpecification, quantitySpecificationDetailSpecification, retailSumSpecificationDetailSpecification, statusSpecification
    PROPERTIES (st, sp) statusStatementSpecification

    FILTERS customerStatement(st) == customerSpecification(sp),
            departmentStoreStatement(st)== departmentStoreSpecification(sp),
            dateSpecification(sp) <= dateStatement(st)

    FILTERGROUP filters6
            FILTER 'Просроченные с/ф' 'F10' overdueSpecificationStatement(sp, st)
            FILTER 'Непросроченные с/ф' 'F9' noOverdueSpecificationStatement(sp, st) DEFAULT
            FILTER 'Без отгрузок с/ф ' 'F8' noStatementSpecification(sp)
;

dialogSpecificationsStatement 'Заказы' (statement) = ACTION FORM specificationsStatement OBJECTS st MODAL SHORTCUT specificationsStatement DEFAULT;

@metaCodeInputMultipleItems (statement);
@defineDocumentDetailItemOfTerminal(statement);

printPriceChangeStatement 'Акт переоценки' (statement) = printPriceChange(uniquePriceChangeStatement(statement)) IN printGroup;

FORM statement 'Отгрузка из розницы'
    OBJECTS st=statement FIXED PANEL
    PROPERTIES (st) numberObject, seriesObject, dateStatement, timeStatement, nameCustomerStatement, UNPCustomerStatement,
                    nameDepartmentStoreStatement, specificationsStatement, toFillStatementDetailsStatement, dialogSpecificationsStatement,
                    noteStatement, quantityStatementDetailStatement, calcSaleSumStatementDetailStatement, calcVATSumStatementDetailStatement, retailSumStatementDetailStatement,
                    numberDisposalStatement SHOWIF needToPriceChangeStatement(st), namePriceChangeCommitteeStatement SHOWIF needToPriceChangeStatement(st)

    PROPERTIES(st) carConsignment, ownerCarConsignment, trailerConsignment, driverCarConsignment, waybillConsignment,
                   nameTransportPayerConsignment, shipmentBaseConsignment, loadingPlaceConsignment, unloadingPlaceConsignment,
                   readdressingConsignment, commonNameIssuanceAllowedConsignment, commonNameIssuanceExecutedConsignment,
                   forwarderConsignment, warrantConsignment, warrantHolderConsignment, goodsAcceptedConsignment,
                   commonNameLoadingExecuterConsignment, nameWayOfLoadingConsignment, codeLoadingConsignment,
                   arrivalTimeConsignment, departureTimeConsignment, downtimeConsignment, raceQuantityConsignment,
                   quantityConsignmentDetailConsignment, packQuantityConsignmentDetailConsignment, grossWeightConsignmentDetailConsignment,
                   sumConsignmentDetailConsignment, sumVATConsignmentDetailConsignment, sumInvoiceConsignmentDetailConsignment

    OBJECTS d=statementDetail
    PROPERTIES (d)  indexStatementDetail, idBarcodeSkuStatementDetail, nameAttributeItemStatementDetail, quantityStatementDetail,
                    retailPriceStatementDetail, calcSaleSumStatementDetail, numberCalcRangeStatementDetail, dataCalcRangeStatementDetail,
                    calcVATSumStatementDetail, retailSumStatementDetail,
                    noteStatementDetail, ADDOBJ, delete

    PROPERTIES (d)  FORCE PANEL importerPriceStatementDetail, supplierPriceStatementDetail, nameWareStatementDetail, warePriceStatementDetail, valueRetailRangeStatementDetail,
                                curRetailPriceStatementDetail BACKGROUND differsPriceStatementDetail(d),
                                articleItemStatementDetail, nameCountryItemStatementDetail,
                                balanceDepartmentStoreItemStatementDetail BACKGROUND highlightStatementDetail(d)


    PROPERTIES      inputMultipleItemsStatement(st) TODRAW d, fillOfTerminalDocumentStatement(st) TODRAW d, addStatementDetailBarcode(st) TODRAW d,
                    cleanAllStatementDetailsStatement(st) FORCE PANEL TODRAW d

    FILTERS         inStatementStatementDetail(st, d)

    EDIT statement OBJECT st
;

DESIGN statement FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW specification.box BEFORE functions.box{
            type = TABBED;
            ADD d.box{
                title = 'Спецификация';
                ADD d.panel {
                    POSITION d.priceDetailGroup TO THE LEFT d.itemDetailGroup;
                }
            }
            NEW consignment{
                title = 'Накладная';
                childConstraints = TO THE RIGHT;

                ADD st.carConsignmentGroup;

                NEW wor1 {
                    childConstraints = TO THE BOTTOM;
                    ADD st.issuanceConsignmentGroup;
                    ADD st.loadingConsignmentGroup;
                    ADD st.sumConsignmentGroup {
                        childConstraints = TO THE BOTTOM;
                        NEW wor21 {
                            childConstraints = TO THE RIGHT;
                            ADD PROPERTY(quantityConsignmentDetailConsignment);
                            ADD PROPERTY(packQuantityConsignmentDetailConsignment);
                            ADD PROPERTY(grossWeightConsignmentDetailConsignment);
                        }
                        NEW wor22 {
                            childConstraints = TO THE RIGHT;
                            ADD PROPERTY(sumConsignmentDetailConsignment);
                            ADD PROPERTY(sumVATConsignmentDetailConsignment);
                            ADD PROPERTY(sumInvoiceConsignmentDetailConsignment);
                        }
                    }
                }
            }
        }

        NEW header.box BEFORE specification.box {
            childConstraints = TO THE RIGHT;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;
                ADD st.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreStatement);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateStatement);
                    ADD PROPERTY(timeStatement);
                }
                ADD st.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                }
                ADD st.specificationGroup {
                    childConstraints = TO THE BOTTOM;
                }
                POSITION st.documentPrmGroup TO THE LEFT st.specificationGroup;
            }

            ADD st.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    }
}


FORM statements 'Отгрузки из розницы'
    OBJECTS st=statement
    PROPERTIES (st)  READONLY objectClassName, numberObject, seriesObject, dateStatement, timeStatement, nameDepartmentStoreStatement,
                     nameCustomerStatement, countStatementDetailStatement, quantityStatementDetailStatement,
                     calcSaleSumStatementDetailStatement, calcVATSumStatementDetailStatement, retailSumStatementDetailStatement
    PROPERTIES (st)  FORCE PANEL printConsignmentVerticalA, printConsignmentHorizontalA,
                     printConsignmentVerticalB, printConsignmentHorizontalB,
                     printConsignmentAttach, printConsignmentSimpleHorizontal, editConsignment,
                     printConsignmentSimpleVertical, printConsignmentSimpleAttach, printPriceChangeStatement SHOWIF needToPriceChangeStatement(st),
                     nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES (st)  ADDFORM, EDITFORM SHOWIF isDraftStatement(st), delete FORCE PANEL SHOWIF isDraftStatement(st),
                     postStatement SHOWIF isDraftStatement(st), unpostStatement SHOWIF isPostedStatement(st)

    OBJECTS d=statementDetail
    PROPERTIES (d)   READONLY indexStatementDetail, idBarcodeSkuStatementDetail, nameAttributeItemStatementDetail, quantityStatementDetail,
                              retailPriceStatementDetail, calcSaleSumStatementDetail, numberCalcRangeStatementDetail, dataCalcRangeStatementDetail,
                              calcVATSumStatementDetail, retailSumStatementDetail, noteStatementDetail

    FILTERS          inStatementStatementDetail(st, d)
;

DESIGN statements FROM DEFAULT {
    main {
        childConstraints = TO THE BOTTOM;

        NEW topContainer{

            type = SPLITV;

            ADD st.box {
                PROPERTY(objectClassName) {
                    preferredCharWidth = 15;
                }
                PROPERTY (delete(st)) {
                    panelLocation = TOOLBAR;
                    askConfirm = TRUE;
                }
            }
            ADD d.box;
        }

        NEW footer.container {
            childConstraints = TO THE BOTTOM;

            NEW cont3 {
                childConstraints = TO THE RIGHT;
                ADD st.historyGroup {
                    childConstraints = TO THE BOTTOM;
                }

                ADD st.postedGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }

            ADD st.printGroup {
                childConstraints = TO THE BOTTOM;
                NEW case55{
                    childConstraints = TO THE RIGHT;

                    NEW contOne {
                        title = 'Накладная';
                        ADD PROPERTY(editConsignment);
                    }
                    NEW tn{
                        childConstraints = TO THE RIGHT;
                        title = 'ТН-2';
                        ADD PROPERTY(printConsignmentSimpleVertical);
                        ADD PROPERTY(printConsignmentSimpleHorizontal);
                        ADD PROPERTY(printConsignmentSimpleAttach);
                    }
                }
                NEW ttn1{
                    childConstraints = TO THE RIGHT;
                    title = 'ТТН-1';
                    ADD PROPERTY(printConsignmentVerticalA);
                    ADD PROPERTY(printConsignmentHorizontalA);
                    ADD PROPERTY(printConsignmentVerticalB);
                    ADD PROPERTY(printConsignmentHorizontalB);
                    ADD PROPERTY(printConsignmentAttach);
                }

            }

        }
        ADD functions.box;
    }
}

//----------------------------------- Подбор товаров для чеков -------------------------------------------------------//

@metaCodeInputMultipleItemsBill(bill);
@metaCodeInputMultipleItemsSupplierBill(bill);

//----------------------------------- Формы чеков -------------------------------------------------//

FORM bill 'Z-отчет'
    OBJECTS z=zReport FIXED PANEL
    PROPERTIES (z) numberCashRegisterZReport, nameDepartmentStoreZReport READONLY, dateZReport, timeZReport, numberZReport,
                    countBillZReport, quantityBillDetailZReport, retailSumBillDetailZReport, discountSumBillDetailZReport

    OBJECTS b=bill, d=billDetail
    PROPERTIES(b) numberBill, dateBill, timeBill, nameDepartmentStoreBill READONLY,
                  numberDiscountCardBill, nameCustomerDiscountCardBill, retailSumBillDetailBill, discountSumBillDetailBill,
                  countBillDetailBill, quantityBillDetailBill, inputMultipleItemsBill TODRAW d,
                  inputMultipleItemsSupplierBill TODRAW d, ADDOBJ, delete
    FILTERS zReportBill(b)==z

    PROPERTIES(d) objectClassName, idBarcodeBillDetail, nameAttributeItemBillDetail, quantityBillDetail, retailPriceBillDetail,
                  retailSumBillDetail, discountSumBillDetail, ADDOBJ, delete

    FILTERS billBillDetail(d)==b

    OBJECTS p=payment
    PROPERTIES(p) namePaymentTypePayment, namePaymentMeansPayment, sumPayment, ADDOBJ, delete
    PROPERTIES addBillDetailBarcodeFill (b) TODRAW d

    FILTERS billPayment(p)==b

    EDIT zReport OBJECT z
;

DESIGN bill FROM DEFAULT{
    NEW row.box BEFORE functions.box{
        ADD d.box{
            title = 'Строка чека';
            fillHorizontal = 3;
        };
        ADD p.box{
            fillHorizontal = 1;
        };
        POSITION d.box TO THE LEFT p.box;
    }
};

FORM bills 'Чеки'
    OBJECTS z=zReport
    PROPERTIES (z) READONLY objectClassName, numberCashRegisterZReport, nameDepartmentStoreZReport, dateZReport, timeZReport,
                            numberZReport, countBillZReport, quantityBillDetailZReport, retailSumBillDetailZReport, discountSumBillDetailZReport
    PROPERTIES (z) ADDFORM, EDITFORM SHOWIF isDraftZReport(z), delete FORCE PANEL SHOWIF isDraftZReport(z),
                            postZReport SHOWIF isDraftZReport(z), unpostZReport SHOWIF isPostedZReport(z)

    OBJECTS b=bill
    PROPERTIES(b) READONLY  numberBill, dateBill, timeBill, nameDepartmentStoreBill,
                            numberDiscountCardBill, nameCustomerDiscountCardBill, retailSumBillDetailBill, discountSumBillDetailBill,
                            countBillDetailBill, quantityBillDetailBill

    FILTERS zReportBill(b)==z

    OBJECTS d=billDetail
    PROPERTIES(d) READONLY  objectClassName, idBarcodeBillDetail, nameAttributeItemBillDetail, quantityBillDetail, retailPriceBillDetail,
                            supplierSumBalanceSkuLedger, retailSumBillDetail, discountSumBillDetail

    FILTERS billBillDetail(d)==b

    OBJECTS p=payment
    PROPERTIES(p) READONLY  namePaymentTypePayment, namePaymentMeansPayment, sumPayment

    FILTERS billPayment(p)==b
;

DESIGN bills FROM DEFAULT{

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        NEW firstCase {

            type = SPLITV;

            ADD z.box;
            ADD b.box;
        }

        NEW secondCase{

            type = SPLITH;
            childConstraints = TO THE RIGHT;

            ADD d.box{
                title = 'Строка чека';
                fillHorizontal = 3;
            }
            ADD p.box;
        }
    }

        PROPERTY(objectClassName) {
            preferredCharWidth = 15;
        }
        PROPERTY (delete(z)) {
            panelLocation = TOOLBAR;
            askConfirm = TRUE;
        }

    ADD functions.box;
}

//----------------------------------- Акты проработки -------------------------------------------------//
@metaCodeDocumentMachineryPriceTransaction(actOfStudy);
@metaCodeDocumentLabelTransaction(actOfStudy);

FORM actOfStudy 'Акт проработки'

    OBJECTS a=actOfStudy FIXED PANEL

    PROPERTIES(a)   nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, nameDepartmentStoreActOfStudy,
                    dateActOfStudy, timeActOfStudy, nameContractorDepartmentStoreActOfStudy,
                    quantityStudyOutputDetailActOfStudy, retailSumStudyOutputDetailActOfStudy, quantityStudyInputDetailActOfStudy, retailSumStudyInputDetailActOfStudy,
                    numberOutputActOfStudy, seriesOutputActOfStudy, numberInputActOfStudy, seriesInputActOfStudy

    OBJECTS sid=studyInputDetail
    OBJECTS sod=studyOutputDetail

    PROPERTIES(sid) nameAttributeItemStudyInputDetail
    PROPERTIES(sid) seriesNumberCuttingStudyInputDetail READONLY, showSeriesNumberCuttingStudyInputDetail
    PROPERTIES(sid) READONLY dateCuttingStudyInputDetail, descriptionCuttingStudyInputDetail,
                    percAllowancesCuttingStudyInputDetail, percLossesCuttingStudyInputDetail, percSweepsCuttingStudyInputDetail
    PROPERTIES(sid) importerPriceStudyInputDetail, supplierPriceStudyInputDetail, numberRetailRangeStudyInputDetail, valueRetailRangeStudyInputDetail,
                    retailPriceStudyInputDetail, quantityStudyInputDetail, retailSumStudyInputDetail,
                    totalPercGoodsStudyInputDetail BACKGROUND highlightStudyInputDetail(sid) READONLY, ADDOBJ, delete

    PROPERTIES(sid) toFillStudyOutputDetailsStudyInputDetail FORCE PANEL SHOWIF showNotStudyInputDetailStudyOutputDetail(sid,sod),
                    cleanAllStudyInputDetail FORCE PANEL

    PROPERTIES(sod) nameAttributeItemStudyOutputDetail, shortNameUOMItemStudyOutputDetail, importerPriceStudyOutputDetail, supplierPriceStudyOutputDetail,
                    numberRetailRangeStudyOutputDetail, valueRetailRangeStudyOutputDetail, factorStudyOutputDetail, percGoodsStudyOutputDetail,
                    retailPriceStudyOutputDetail, calculatedStudyOutputDetail, actualQuantityStudyOutputDetail, retailSumStudyOutputDetail

    PROPERTIES(sod) FORCE PANEL curImporterPriceStudyOutputDetail, curSupplierPriceStudyOutputDetail, curNumberRetailRangeStudyOutputDetail,
                    curValueRetailRangeStudyOutputDetail, curRetailPriceStudyOutputDetail

    FILTERS         actOfStudyStudyInputDetail(sid) == a,
                    studyInputDetailStudyOutputDetail(sod) == sid

    EDIT actOfStudy OBJECT a
;

DESIGN actOfStudy FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW header.box BEFORE sid.box {
            childConstraints = TO THE RIGHT;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;

                ADD a.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreActOfStudy);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateActOfStudy);
                    ADD PROPERTY(timeActOfStudy);
                }

                ADD a.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                }

                NEW headerOut {
                    title = 'Расходная накладная';
                    ADD PROPERTY(numberOutputActOfStudy);
                    ADD PROPERTY(seriesOutputActOfStudy);
                }
                POSITION a.documentPrmGroup TO THE LEFT headerOut;

                NEW headerIn {
                    title = 'Приходная накладная';
                    ADD PROPERTY(numberInputActOfStudy);
                    ADD PROPERTY(seriesInputActOfStudy);
                }
                POSITION a.documentPrmGroup TO THE LEFT headerIn;
                POSITION headerOut TO THE LEFT headerIn;
            }

            NEW sumsContainer {
                childConstraints = TO THE BOTTOM;
                NEW inSumsContainer {
                    title = 'Итоги (вход)';
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY(quantityStudyInputDetailActOfStudy);
                    ADD PROPERTY(retailSumStudyInputDetailActOfStudy);
                }
                NEW outSumsContainer {
                    title = 'Итоги (выход)';
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY(quantityStudyOutputDetailActOfStudy);
                    ADD PROPERTY(retailSumStudyOutputDetailActOfStudy);
                }
            }
        }
    }
}


FORM actOfStudies 'Акты проработки'

    OBJECTS a=actOfStudy
    PROPERTIES(a)  READONLY objectClassName, numberObject, seriesObject, dateActOfStudy, timeActOfStudy, nameDepartmentStoreActOfStudy,
                            nameContractorDepartmentStoreActOfStudy, quantityStudyOutputDetailActOfStudy, retailSumStudyOutputDetailActOfStudy, quantityStudyInputDetailActOfStudy, retailSumStudyInputDetailActOfStudy,
                            statusPrintPriceTransactionDocument BACKGROUND backgroundPrintLabelTransactionActOfStudy(a),
                            statusEquipmentPriceTransactionDocument BACKGROUND backgroundCreateMachineryPriceTransactionActOfStudy(a)

    PROPERTIES(a) READONLY FORCE PANEL timeCreated, nameUserCreated, hostnameComputerCreated, timeClosed, nameUserClosed, hostnameComputerClosed

    PROPERTIES (a)          createActOfStudyLabelTransaction FORCE PANEL SHOWIF showPrintLabelTransactionActOfStudy(a),
                            createSnapshotActOfStudyLabelTransaction FORCE PANEL SHOWIF isPostedActOfStudy(a),
                            createActOfStudyMachineryPriceTransaction FORCE PANEL SHOWIF showCreateMachineryPriceTransactionActOfStudy(a),
                            createSnapshotActOfStudyMachineryPriceTransaction FORCE PANEL SHOWIF isPostedActOfStudy(a),
                            ADDFORM, EDITFORM SHOWIF isDraftActOfStudy(a), delete FORCE PANEL SHOWIF isDraftActOfStudy(a),
                            postActOfStudy SHOWIF isDraftActOfStudy(a), unpostActOfStudy SHOWIF isPostedActOfStudy(a)

    OBJECTS i = item
    PROPERTIES(i)      READONLY nameAttributeItem, shortNameUOMItem
    PROPERTIES(i, a)   READONLY quantityStudyInputDetailItemActOfStudy, retailSumStudyInputDetailItemActOfStudy, quantityStudyOutputDetailItemActOfStudy, retailSumStudyOutputDetailItemActOfStudy

    ORDER BY           retailSumStudyInputDetailItemActOfStudy, retailSumStudyOutputDetailItemActOfStudy
    FILTERS            quantityStudyInputDetailItemActOfStudy(i, a) OR quantityStudyOutputDetailItemActOfStudy(i, a)

    FILTERGROUP filters1
        FILTER 'Показать приход' 'F10' retailSumStudyOutputDetailItemActOfStudy(i, a)
        FILTER 'Показать расход' 'F9' retailSumStudyInputDetailItemActOfStudy(i, a)
;

DESIGN actOfStudies FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD a.box;
        ADD i.box;
    }

    PROPERTY(objectClassName) {
        preferredCharWidth = 25;
    }

    PROPERTY (delete(a)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }

    ADD a.historyGroup {
        childConstraints = TO THE BOTTOM;
    }

    ADD a.postedGroup {
        childConstraints = TO THE BOTTOM;
    }

    POSITION a.historyGroup TO THE LEFT a.postedGroup;

    ADD functions.box;
}

//----------------------------------- Форма для остатков -------------------------------------------------//

inChainStoresStoreTypeStoreDepartmentDepartment (chainStores, storeType, store, department, depStore) = UNION OVERRIDE
    department == depStore AND store  AND chainStores AND storeType,
    storeDepartmentStore(department) == store AND NOT depStore AND chainStores AND storeType,
    storeTypeDepartmentStore(department) == storeType AND NOT depStore AND chainStores AND NOT store,
    chainStoresDepartmentStore(department) == chainStores AND NOT store AND NOT storeType AND NOT depStore,
    department IS departmentStore AND NOT store AND NOT storeType AND NOT chainStores AND NOT depStore;

countDayMovedItem 'Кол-во дней (30)' = SESSION DATA INTEGER (departmentStore) TOOLBAR;
countDayMovedItemOver 'кол-во дней' (departmentStore) =
    UNION OVERRIDE 30 AND departmentStore AS departmentStore, countDayMovedItem(departmentStore);

//для оптимизации быстродействия не добавлял дату в GROUP MAX

dateLastMovedItemOver(item, departmentStore, date) =
    (dateLastMovedSkuStock(item, departmentStore) AND (date AS DATETIME)) >= sumDate(dateInTime(date), -countDayMovedItemOver(departmentStore));

dateLastMovedUnionBalanceItem(item, departmentStore, date) =
    TRUE IF balanceASkuLedgerDateTime(item, departmentStore, date) OR TRUE IF dateLastMovedItemOver(item, departmentStore, date);

curDateLastMovedItemOver(item, departmentStore) =
    dateLastMovedSkuStock(item, departmentStore) >= sumDate(currentDate(), -countDayMovedItemOver(departmentStore));

curDateLastMovedUnionBalanceItem(item, departmentStore) =
    TRUE IF currentBalanceSkuLedger(item, departmentStore) OR TRUE IF curDateLastMovedItemOver(item, departmentStore);

FORM balanceItemDepartment 'Остатки на дату'

    OBJECTS t=DATETIME FIXED PANEL
    PROPERTIES(t) OBJVALUE

    TREE treeStore a=STRING[3], tn=chainStores, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY OBJVALUE(a), name(tn), name(st), name(s), name(ds)
    FILTERS stringEqualsAll(a), inChainStoresStoreType (tn, st), inStoreTypeStore (st, s), inStoreDepartment(s, ds)

    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY gname = name(g)
    ORDER BY gname

    OBJECTS           dsi=(dep=departmentStore, i=item)
    PROPERTIES        READONLY nameIt=nameAttributeItem(i), nameDep=name(dep)  //  idBarcodeSku
    PROPERTIES        toEditItem(i)
    FILTERS           isParentItemGroupSku(g, i),
                      inChainStoresStoreTypeStoreDepartmentDepartment(tn, st, s, dep, ds)


    PROPERTIES(i, dep, t) READONLY balanceASkuLedgerDateTime, importerPriceALedgerDateTime, supplierPriceALedgerDateTime,
                                   accountPriceBLedgerDateTime, valueRetailRangeALedgerDateTime, retailPriceALedgerDateTime,
                                   warePriceALedgerDateTime

    PROPERTIES(i, dep) READONLY dateLastMovedSkuStock

    PROPERTIES countDayMovedItem(dep) TODRAW dsi FORCE PANEL

    FILTERGROUP filters
        FILTER 'Товары с остатком' 'F10' balanceASkuLedgerDateTime(i, dep, t) DEFAULT
        FILTER 'Товары с движением не позднее' 'F9' dateLastMovedUnionBalanceItem(i, dep, t)

    OBJECTS apl=accountPriceLedger
    PROPERTIES (apl) descriptionAccountPriceLedger, dateTimeAccountPriceLedger, accountPriceAccountPriceLedger
    FILTERS isPostedAccountPriceLedger(apl) AND skuAccountPriceLedger(apl)==i AND departmentStoreAccountPriceLedger(apl)==dep
    ORDER BY dateTimeAccountPriceLedger DESC

    OBJECTS rpl=retailPriceLedger
    PROPERTIES (rpl) descriptionRetailPriceLedger, dateTimeRetailPriceLedger, retailPriceRetailPriceLedger
    FILTERS isPostedRetailPriceLedger(rpl) AND skuRetailPriceLedger(rpl)==i AND departmentStoreRetailPriceLedger(rpl)==dep
    ORDER BY dateTimeRetailPriceLedger DESC

    OBJECTS bil=balanceSkuLedger
    PROPERTIES(bil) descriptionBalanceSkuLedger, dateTimeBalanceSkuLedger, signedQuantityBalanceSkuLedger READONLY
    FILTERS isPostedBalanceSkuLedger(bil) AND skuBalanceSkuLedger(bil)==i AND stockBalanceSkuLedger(bil)==dep
    ORDER BY dateTimeBalanceSkuLedger DESC

    OBJECTS ipl=importerPriceLedger
    PROPERTIES(ipl) descriptionImporterPriceLedger, dateTimeImporterPriceLedger, importerPriceImporterPriceLedger
    FILTERS isPostedImporterPriceLedger(ipl) AND skuImporterPriceLedger(ipl)==i AND departmentStoreImporterPriceLedger(ipl)==dep
    ORDER BY dateTimeImporterPriceLedger DESC

    OBJECTS spl=supplierPriceLedger
    PROPERTIES(spl) descriptionSupplierPriceLedger, dateTimeSupplierPriceLedger, supplierPriceSupplierPriceLedger
    FILTERS isPostedSupplierPriceLedger(spl) AND skuSupplierPriceLedger(spl)==i AND departmentStoreSupplierPriceLedger(spl)==dep
    ORDER BY dateTimeSupplierPriceLedger DESC

    OBJECTS rvl=retailRangeLedger
    PROPERTIES(rvl) descriptionRetailRangeLedger, dateTimeRetailRangeLedger, valueRetailRangeRetailRangeLedger
    FILTERS isPostedRetailRangeLedger(rvl) AND skuRetailRangeLedger(rvl)==i AND departmentStoreRetailRangeLedger(rvl)==dep
    ORDER BY dateTimeRetailRangeLedger DESC

    OBJECTS wpl= warePriceLedger
    PROPERTIES(wpl) descriptionWarePriceLedger, dateTimeWarePriceLedger, nameWareWarePriceLedger, warePriceWarePriceLedger
    FILTERS isPostedWarePriceLedger(wpl) AND skuWarePriceLedger(wpl)==i AND departmentStoreWarePriceLedger(wpl)==dep
    ORDER BY dateTimeWarePriceLedger DESC
;

DESIGN balanceItemDepartment FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            NEW firstCase {
                type = SPLITV;
                fillHorizontal = 1;
                childConstraints = TO THE BOTTOM;
                ADD t.box;
                NEW firstCaseTwo {
                    type = SPLITV;
                    ADD treeStore.box {title = 'Магазины';};
                    ADD treeGroups.box {title = 'Товарные группы';};
                }
            }

            NEW secondCase {
                type = SPLITV;
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD dsi.box {fillVertical = 2;}

                NEW ledger.box {
                    fillVertical = 1;
                    title = 'Изменение цен';
                    type = TABBED;
                    ADD bil.box;
                    ADD apl.box;
                    ADD rpl.box;
                    ADD ipl.box;
                    ADD spl.box;
                    ADD rvl.box;
                    ADD wpl.box;
                }

            }
        }

        ADD functions.box;
    }
}

FORM curBalanceItemDepartment 'Текущие остатки'

    TREE treeStore a=STRING[3], tn=chainStores, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY OBJVALUE(a), name(tn), name(st), name(s), name(ds)
    FILTERS stringEqualsAll(a), inChainStoresStoreType (tn, st), inStoreTypeStore (st, s), inStoreDepartment(s, ds)

    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY gname = name(g)
    ORDER BY gname

    OBJECTS           dsi=(dep=departmentStore, i=item)
    PROPERTIES        READONLY nameIt=nameAttributeItemGroupItem(g, i), nameDep=name(dep)  //  idBarcodeSku
    PROPERTIES        toEditItem(i)
    FILTERS           nameAttributeItemGroupItem (g, i),
                      inChainStoresStoreTypeStoreDepartmentDepartment(tn, st, s, dep, ds)
    ORDER BY          nameIt


    PROPERTIES(i, dep) READONLY currentBalanceSkuLedger, currentImporterPriceLedger, currentSupplierPriceLedger,
                                currentAccountPriceLedger, currentValueRetailRangeLedger, currentRetailPriceLedger,
                                currentWarePriceLedger, dateLastMovedSkuStock, averageSoldSkuStock
    PROPERTIES(i, dep)          expirationDateSkuDepartmentStore

    PROPERTIES countDayMovedItem(dep) TODRAW dsi FORCE PANEL

    FILTERGROUP filters
        FILTER 'Товары с остатком' 'F10' currentBalanceSkuLedger(i, dep) DEFAULT
        FILTER 'Товары с движением не позднее' 'F9' curDateLastMovedUnionBalanceItem(i, dep)

    OBJECTS apl=accountPriceLedger
    PROPERTIES (apl) descriptionAccountPriceLedger, dateTimeAccountPriceLedger, accountPriceAccountPriceLedger
    FILTERS isPostedAccountPriceLedger(apl) AND skuAccountPriceLedger(apl)==i AND departmentStoreAccountPriceLedger(apl)==dep
    ORDER BY dateTimeAccountPriceLedger DESC

    OBJECTS rpl=retailPriceLedger
    PROPERTIES (rpl) descriptionRetailPriceLedger, dateTimeRetailPriceLedger, retailPriceRetailPriceLedger
    FILTERS isPostedRetailPriceLedger(rpl) AND skuRetailPriceLedger(rpl)==i AND departmentStoreRetailPriceLedger(rpl)==dep
    ORDER BY dateTimeRetailPriceLedger DESC

    OBJECTS bil=balanceSkuLedger
    PROPERTIES(bil) descriptionBalanceSkuLedger, dateTimeBalanceSkuLedger, signedQuantityBalanceSkuLedger READONLY
    FILTERS isPostedBalanceSkuLedger(bil) AND skuBalanceSkuLedger(bil)==i AND stockBalanceSkuLedger(bil)==dep
    ORDER BY dateTimeBalanceSkuLedger DESC

    OBJECTS ipl=importerPriceLedger
    PROPERTIES(ipl) descriptionImporterPriceLedger, dateTimeImporterPriceLedger, importerPriceImporterPriceLedger
    FILTERS isPostedImporterPriceLedger(ipl) AND skuImporterPriceLedger(ipl)==i AND departmentStoreImporterPriceLedger(ipl)==dep
    ORDER BY dateTimeImporterPriceLedger DESC

    OBJECTS spl=supplierPriceLedger
    PROPERTIES(spl) descriptionSupplierPriceLedger, dateTimeSupplierPriceLedger, supplierPriceSupplierPriceLedger
    FILTERS isPostedSupplierPriceLedger(spl) AND skuSupplierPriceLedger(spl)==i AND departmentStoreSupplierPriceLedger(spl)==dep
    ORDER BY dateTimeSupplierPriceLedger DESC

    OBJECTS rvl=retailRangeLedger
    PROPERTIES(rvl) descriptionRetailRangeLedger, dateTimeRetailRangeLedger, valueRetailRangeRetailRangeLedger
    FILTERS isPostedRetailRangeLedger(rvl) AND skuRetailRangeLedger(rvl)==i AND departmentStoreRetailRangeLedger(rvl)==dep
    ORDER BY dateTimeRetailRangeLedger DESC

    OBJECTS wpl=warePriceLedger
    PROPERTIES(wpl) descriptionWarePriceLedger, dateTimeWarePriceLedger, nameWareWarePriceLedger, warePriceWarePriceLedger
    FILTERS isPostedWarePriceLedger(wpl) AND skuWarePriceLedger(wpl)==i AND departmentStoreWarePriceLedger(wpl)==dep
    ORDER BY dateTimeWarePriceLedger DESC

    OBJECTS bt=batch
    PROPERTIES(bt) READONLY      dateTimeBatch, descriptionBatch, quantityBatch, supplierPriceBatch
    PROPERTIES(bt, dep) READONLY currentBalanceBatchLedger
    FILTERS isPostedBatch(bt) AND skuBatch(bt)==i
    ORDER BY dateTimeBatch DESC
;

DESIGN curBalanceItemDepartment FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;

            NEW firstBottom {
                type = SPLITV;
                ADD treeStore.box {title = 'Магазины';};
                ADD treeGroups.box {title = 'Товарные группы';};
            }

            NEW secondCase {
                type = SPLITV;
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD dsi.box { fillVertical = 2; }

                NEW ledger.box {
                    fillVertical = 1;
                    title = 'Изменение цен';
                    type = TABBED;
                    ADD bil.box;
                    ADD bt.box;
                    ADD apl.box;
                    ADD rpl.box;
                    ADD ipl.box;
                    ADD spl.box;
                    ADD rvl.box;
                    ADD wpl.box;
                }
            }
        }

        ADD functions.box;
    }
}

//------------------------------------Отчет по таре-------------------------------------------//

nameAttributeItemBatch 'Товар' (batch) = nameAttributeItem(skuBatch(batch));
idBarcodeSkuBatch 'Штрих-код' (batch) = idBarcodeSku(skuBatch(batch));
dateBatch 'Дата' (batch) = dateInTime(dateTimeBatch(batch));
isContainerBatch 'Тара' (batch) = isContainerItem(skuBatch(batch));

supplierSumInBalanceBatchStockDateFromTo 'Сумма прихода' (batch, stock, dateFrom, dateTo) =
    supplierPriceBatch(batch) * costInBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo);

supplierSumOutBalanceBatchStockDateFromTo 'Сумма расхода' (batch, stock, dateFrom, dateTo) =
    supplierPriceBatch(batch) * costOutBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo);

supplierSumBatchStockDateFrom 'Сумма на начало' (batch, stock, dateFrom) = supplierPriceBatch(batch) * balanceBBatchStockDate(batch, stock, dateFrom);

supplierSumBatchStockDateTo 'Сумма на конец' (batch, stock, dateTo) = supplierPriceBatch(batch) * balanceABatchStockDate(batch, stock, dateTo);

supplierSumContainerStockDateFrom 'Остаток на начало по складу' (stock, dateFrom) = GROUP SUM supplierSumBatchStockDateFrom(batch, stock, dateFrom)
    IF isContainerItem(skuBatch(batch)) BY stock, dateFrom;

supplierSumContainerStockDateTo 'Остаток на конец по складу' (stock, dateTo) = GROUP SUM supplierSumBatchStockDateTo(batch, stock, dateTo)
    IF isContainerItem(skuBatch(batch)) BY stock, dateTo;

overMotionContainerBatchStockDateFromTo (batch, stock, dateFrom, dateTo) = UNION OVERRIDE
    balanceBBatchStockDate(batch, stock, dateFrom) AND dateTo AS DATE,
    balanceABatchStockDate(batch, stock, dateTo) AND dateFrom AS DATE,
    costInBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo),
    costOutBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo);

FORM sumMotionContainerDepartmentPrint 'Отчет по таре' PRINT

    OBJECTS params = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES objFrom = OBJVALUE(dFrom), objTo = OBJVALUE(dTo)

    OBJECTS dep = departmentStore  FIXED PANEL
    PROPERTIES(dep) SELECTOR name, nameStoreDepartmentStore, nameCompanyDepartmentStore

    OBJECTS bt=batch

    PROPERTIES READONLY supplierSumContainerStockDateFrom(dep, dFrom), supplierSumContainerStockDateTo(dep, dTo)
    PROPERTIES(bt) READONLY idBarcodeSkuBatch, nameAttributeItemBatch, supplierPriceBatch
    PROPERTIES(bt, dep, dFrom) READONLY balanceBBatchStockDate, supplierSumBatchStockDateFrom
    PROPERTIES(bt, dep, dTo) READONLY balanceABatchStockDate, supplierSumBatchStockDateTo
    PROPERTIES(bt, dep, dFrom, dTo) READONLY costInBalanceBatchStockDateFromTo, supplierSumInBalanceBatchStockDateFromTo,
               costOutBalanceBatchStockDateFromTo, supplierSumOutBalanceBatchStockDateFromTo

    FILTERS isPostedBatch(bt),
            isContainerBatch(bt),
            overMotionContainerBatchStockDateFromTo(bt, dep, dFrom, dTo)!=0
;

countToExpireDayBatch 'Кол-во дней (30)' = SESSION DATA INTEGER (DATETIME) TOOLBAR;
countToExpireDayBatchOver 'кол-во дней' (date) =
    UNION OVERRIDE 30 AND date AS DATETIME, countToExpireDayBatch(date AS DATETIME);
balanceBBatchDateTime 'Остаток на начало дня' (batch, date) = balanceBStockBatchDateTime(batch, stockBalanceSkuLedger(batch), date);
inChainStoresStoreTypeStoreDepartmentDepartmentBatch (tn, st, s, batch, ds) =
    inChainStoresStoreTypeStoreDepartmentDepartment(tn, st, s, stockBalanceSkuLedger(batch), ds);
isDateExpireBatch (batch, date) = dateExpireBatch(batch) < (date AS DATETIME);
isDateTimeBatch (batch, date) = dateTimeBatch(batch) < (date AS DATETIME);
isCountToExpireDayBatch (batch, date) =
    dateExpireBatch(batch) < sumDate(dateInTime(date AS DATETIME), countToExpireDayBatchOver(date AS DATETIME));

FORM balanceStockBatchDate 'Остатки по партиям на дату'

    OBJECTS t=DATETIME FIXED PANEL
    PROPERTIES(t) OBJVALUE

    TREE treeStore a=STRING[3], tn=chainStores, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY OBJVALUE(a), name(tn), name(st), name(s), name(ds)
    FILTERS stringEqualsAll(a), inChainStoresStoreType (tn, st), inStoreTypeStore (st, s), inStoreDepartment(s, ds)

    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY gname = name(g)
    ORDER BY gname

    OBJECTS           ib = (i=item, bt=batch)
    PROPERTIES        READONLY nameIt=nameAttributeItemGroupItem(g, i), nameStockBalanceSkuLedger(bt)     //  barcodeBarcodeSku
    PROPERTIES(bt)    READONLY dateTimeBatch, descriptionBatch, quantityBatch, supplierPriceBatch, dateExpireBatch
    PROPERTIES        balanceBBatchDateTime(bt, t)
    PROPERTIES        toEditItem(i)
    ORDER BY          dateTimeBatch

    PROPERTIES countToExpireDayBatch(t) TODRAW ib FORCE PANEL

    FILTERS           isParentItemGroupSku(g, i),
                      inChainStoresStoreTypeStoreDepartmentDepartmentBatch(tn, st, s, bt, ds),
                      isSkuBatch(bt, i),
                      isDateTimeBatch(bt, t)

    FILTERGROUP filters2
        FILTER 'Партии с остатком' 'F11' balanceBBatchDateTime(bt, t) > 0 DEFAULT

    FILTERGROUP filters3
        FILTER 'Партии с истекшим сроком годности' 'F10' isDateExpireBatch(bt, t)
        FILTER 'Период просрочки' 'F9' isCountToExpireDayBatch(bt, t)

;

DESIGN balanceStockBatchDate FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            NEW firstCase {
                type = SPLITV;
                fillHorizontal = 1;
                childConstraints = TO THE BOTTOM;
                ADD t.box;
                NEW firstCaseTwo {
                    type = SPLITV;
                    ADD treeStore.box {title = 'Магазины';};
                    ADD treeGroups.box {title = 'Товарные группы';};
                }
            }

            NEW secondCase {
                type = SPLITV;
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD ib.box {title = 'Партии';};
            }
        }

        ADD functions.box;
    }
}

currentBalanceBatch 'Текущий остаток' (batch) = currentBalanceBatchLedger(batch, stockBalanceSkuLedger(batch));
isCurDateExpireBatch (batch) = dateExpireBatch(batch) < currentDateTime();
isCurDateTimeBatch (batch) = dateTimeBatch(batch) < currentDateTime();
isCurCountToExpireDayBatch (batch, date) =
    dateExpireBatch(batch) < sumDate(currentDate(), countToExpireDayBatchOver(date AS DATETIME));

FORM curBalanceStockBatchDate 'Текущие остатки по партиям'

    OBJECTS t=DATETIME FIXED PANEL

    TREE treeStore a=STRING[3], tn=chainStores, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY OBJVALUE(a), name(tn), name(st), name(s), name(ds)
    FILTERS stringEqualsAll(a), inChainStoresStoreType (tn, st), inStoreTypeStore (st, s), inStoreDepartment(s, ds)

    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY gname = name(g)
    ORDER BY gname

    OBJECTS           ib = (i=item, bt=batch)
    PROPERTIES        READONLY nameIt=nameAttributeItemGroupItem(g, i), nameStockBalanceSkuLedger(bt) //  barcodeBarcodeSku
    PROPERTIES(bt)    READONLY dateTimeBatch, descriptionBatch, quantityBatch, supplierPriceBatch, dateExpireBatch
    PROPERTIES        currentBalanceBatch(bt)
    PROPERTIES        toEditItem(i)
    ORDER BY          dateTimeBatch

    PROPERTIES countToExpireDayBatch(t) TODRAW ib FORCE PANEL

    FILTERS           isParentItemGroupSku(g, i),
                      inChainStoresStoreTypeStoreDepartmentDepartmentBatch(tn, st, s, bt, ds),
                      isSkuBatch(bt, i),
                      isCurDateTimeBatch(bt)

    FILTERGROUP filters2
        FILTER 'Партии с остатком' 'F11' currentBalanceBatch(bt) > 0 DEFAULT

    FILTERGROUP filters3
        FILTER 'Партии с истекшим сроком годности' 'F10' isCurDateExpireBatch(bt)
        FILTER 'Период просрочки' 'F9' isCurCountToExpireDayBatch(bt, t)

;

DESIGN curBalanceStockBatchDate FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            NEW firstCase {
                type = SPLITV;
                fillHorizontal = 1;
                childConstraints = TO THE BOTTOM;
                ADD treeStore.box {title = 'Магазины';};
                ADD treeGroups.box {title = 'Товарные группы';};
            }

            NEW secondCase {
                type = SPLITV;
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD ib.box {title = 'Партии';};
            }
        }

        ADD functions.box;
    }
}

// ------------------------------------------------- Форма продаж по товарам ------------------------ //

FORM salesItemDepartmentStore 'Продажи по товарам'

    OBJECTS dates = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES OBJVALUE(dFrom), OBJVALUE(dTo)

    TREE treeStore a=STRING[3], tn=chainStores, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY OBJVALUE(a), name(tn), name(st), name(s), name(ds)
    FILTERS stringEqualsAll(a), inChainStoresStoreType (tn, st), inStoreTypeStore (st, s), inStoreDepartment(s, ds)

    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY gname = name(g)
    ORDER BY gname

    OBJECTS           dsi=(dep=departmentStore, i=item)
    PROPERTIES        READONLY nameIt=nameAttributeItemGroupItem(g, i), nameDep=name(dep)  //  idBarcodeSku
    FILTERS           nameAttributeItemGroupItem (g, i),
                      inChainStoresStoreTypeStoreDepartmentDepartment(tn, st, s, dep, ds)
    ORDER BY          nameIt

    PROPERTIES        balanceBSkuLedgerDate(i, dep, dFrom),
                      quantitySoldSkuStockDateFromTo(i, dep, dFrom, dTo),
                      balanceASkuLedgerDate(i, dep, dTo)
;

DESIGN salesItemDepartmentStore FROM DEFAULT {

    main{

    NEW topContainer{

        type = SPLITH;
        childConstraints = TO THE RIGHT;

            NEW firstCase {

                type = SPLITV;
                childConstraints = TO THE BOTTOM;

                ADD treeStore.box {title = 'Магазины';};
                ADD treeGroups.box {title = 'Товарные группы';};
            }

            NEW secondCase {

                type = SPLITV;
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;

                ADD dates.box;
                ADD dsi.box {fillVertical = 2;}
            }
    }
    }

    ADD functions.box;
}

//---------------------------------------------- Формы стат. отчетов -------------------------------------//

//  12 ТОРГ ПРОДАЖИ

netWeightSoldItemDepartmentStoreDateFromTo 'Вес проданного товара, кг' (item, departmentStore, dateFrom, dateTo) =
    quantitySoldSkuStockDateFromTo(item, departmentStore, dateFrom, dateTo) *
    (UNION OVERRIDE 1 IF item IS item, netWeightItem(item) AND NOT isWeightItem(item));
volumeSoldItemDepartmentStoreDateFromTo 'Объем проданного товара, л' (item, departmentStore, dateFrom, dateTo) =
    quantitySoldSkuStockDateFromTo(item, departmentStore, dateFrom, dateTo) * volumeItem(item);
// sumSoldSkuStockDateFromTo 'Продано, сумма' (item, departmentStore, dateFrom, dateTo)   - рубли
//quantitySoldSkuStockDateFromTo (item, departmentStore, dateFrom, dateTo)                      - шт.

retailSumCardDepartmentDateFromTo 'Продано с использованием банк. карточек' (departmentStore, dateFrom, dateTo) = GROUP SUM sumPayment(payment) AND paymentMeansPayment(payment)==paymentMeans.card
    AND dateBill(billPayment(payment)) >= (dateFrom AS DATE) AND dateBill(billPayment(payment)) <= (dateTo AS DATE) AND isPostedBill(billPayment(payment))
        BY departmentStoreBill(billPayment(payment)), dateFrom, dateTo;

retailSumSaleDepartmentDateFromTo 'Продано по кассе' (departmentStore, dateFrom, dateTo) = GROUP SUM retailSumBillDetailBill(bill)
    AND dateBill(bill) >= (dateFrom AS DATE) AND dateBill(bill) <= (dateTo AS DATE) AND isPostedBill(bill)
        BY departmentStoreBill(bill), dateFrom, dateTo;

                            //с коэффициентом пересчета за период//
//всего
quantitySoldByStatisticGroupDateFromTo 'Продано, шт' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM quantitySoldSkuStockDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
netWeightSoldByStatisticGroupDateFromTo 'Продано, кг' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM netWeightSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
volumeSoldByStatisticGroupDateFromTo 'Продано, л' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM volumeSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
retailSumSoldByStatisticGroupDateFromTo 'Продано, руб.' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM sumSoldSkuStockDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

//бел. пр-ва
quantitySoldResidentByStatisticGroupDateFromTo 'Продано, шт' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM quantitySoldSkuStockDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
netWeightSoldResidentByStatisticGroupDateFromTo 'Продано, кг' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM netWeightSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
volumeSoldResidentByStatisticGroupDateFromTo 'Продано, л' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM volumeSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
retailSumSoldResidentByStatisticGroupDateFromTo 'Продано, руб.' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM sumSoldSkuStockDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

netWeightBalanceAItemLedgerDate 'Вес товара на конец , кг' (item, departmentStore, dateTo) =
    balanceASkuLedgerDate (item, departmentStore, dateTo) * (UNION OVERRIDE 1 IF item IS item, netWeightItem(item) AND NOT isWeightItem(item));
volumeBalanceAItemLedgerDate 'Объем товара на конец , л' (item, departmentStore, dateTo) =
    balanceASkuLedgerDate (item, departmentStore, dateTo) * volumeItem(item);
retailSumBalanceAItemLedgerDate 'Сумма товара на конец , руб' (item, departmentStore, dateTo) =
    retailPriceALedgerDate (item, departmentStore, dateTo) * balanceASkuLedgerDate(item, departmentStore, dateTo);
//balanceASkuLedgerDate (item, departmentStore, dateTo)    - шт.

                                   //с коэффициентом пересчета на коцен//
// всего
balanceByStatisticGroupDateTo 'Остаток на конец' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM balanceASkuLedgerDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
netWeightByStatisticGroupDateTo 'Вес на конец, кг' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM netWeightBalanceAItemLedgerDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
volumeByStatisticGroupDateTo 'Объем на конец, л' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM volumeBalanceAItemLedgerDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
retailSumByStatisticGroupDateTo 'Сумма на конец, руб' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM retailSumBalanceAItemLedgerDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

// бел. пр-ва
balanceResidentByStatisticGroupDateTo 'Остаток на конец' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM balanceASkuLedgerDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
netWeightResidentByStatisticGroupDateTo 'Вес на конец, кг' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM netWeightBalanceAItemLedgerDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
volumeResidentByStatisticGroupDateTo 'Объем на конец, л' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM volumeBalanceAItemLedgerDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
retailSumResidentByStatisticGroupDateTo 'Сумма на конец, руб' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM retailSumBalanceAItemLedgerDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

valueByStatisticGroupDateFromTo 'Продано' (statisticGroup, departmentStore, dateFrom, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN quantitySoldByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightSoldByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeSoldByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumSoldByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        DEFAULT 0 AND statisticGroup IS statisticGroup AND departmentStore IS departmentStore AND dateFrom IS DATE AND dateTo IS DATE
    END;
valueResidentByStatisticGroupDateFromTo 'Продано, бел. пр-ва' (statisticGroup, departmentStore, dateFrom, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN quantitySoldResidentByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightSoldResidentByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeSoldResidentByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumSoldResidentByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        DEFAULT 0 AND statisticGroup IS statisticGroup AND departmentStore IS departmentStore AND dateFrom IS DATE AND dateTo IS DATE
    END;

valueByStatisticGroupDateTo 'Остаток на конец' (statisticGroup, departmentStore, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN balanceByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        DEFAULT 0 IF statisticGroup IS statisticGroup AND departmentStore IS departmentStore AND dateTo IS DATE
    END;
valueResidentByStatisticGroupDateTo 'Остаток на конец, бел. пр-ва' (statisticGroup, departmentStore, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN balanceResidentByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightResidentByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeResidentByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumResidentByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        DEFAULT 0 IF statisticGroup IS statisticGroup AND departmentStore IS departmentStore AND dateTo IS DATE
    END;

FORM statisticalReport '12-Торг (продажи) справочно'

    OBJECTS dates = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES OBJVALUE(dFrom), OBJVALUE(dTo)

    TREE treeStore a=STRING[3], tn=chainStores, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY OBJVALUE(a), name(tn), name(st), name(s), name(ds)
    FILTERS stringEqualsAll(a), inChainStoresStoreType (tn, st), inStoreTypeStore (st, s), inStoreDepartment(s, ds)

    TREE treeGroups g=statisticGroup PARENT parentStatisticGroup
    PROPERTIES READONLY gname = name(g), sidStatisticGroup(g), nameUOMStatisticGroup(g)
    ORDER BY gname

    OBJECTS           dsi=(dep=departmentStore, i=item)
    PROPERTIES        READONLY nameIt=nameAttributeStatisticGroupItem(g, i), nameDep=name(dep)
    FILTERS           nameAttributeStatisticGroupItem (g, i),
                      inChainStoresStoreTypeStoreDepartmentDepartment(tn, st, s, dep, ds)
    ORDER BY          nameIt

    PROPERTIES        balanceBSkuLedgerDate(i, dep, dFrom),
                      quantitySoldSkuStockDateFromTo(i, dep, dFrom, dTo),
                      balanceASkuLedgerDate(i, dep, dTo)
    PROPERTIES  FORCE PANEL valueByStatisticGroupDateFromTo(g, ds, dFrom, dTo), valueResidentByStatisticGroupDateFromTo(g, ds, dFrom, dTo)
    PROPERTIES  FORCE PANEL valueByStatisticGroupDateTo(g, ds, dTo), valueResidentByStatisticGroupDateTo(g, ds, dTo)
    PROPERTIES  FORCE PANEL retailSumCardDepartmentDateFromTo(ds, dFrom, dTo), retailSumSaleDepartmentDateFromTo(ds, dFrom, dTo)
;

DESIGN statisticalReport FROM DEFAULT {

    main{

        NEW topContainer{

            type = SPLITH;
            childConstraints = TO THE RIGHT;

            NEW firstCase {

                type = SPLITV;
                childConstraints = TO THE BOTTOM;

                ADD treeStore.box {title = 'Магазины';};
                ADD treeGroups.box {title = 'Статистические группы';};
            }

            NEW secondCase {

                type = SPLITV;
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;

                ADD dates.box;
                ADD dsi.box {fillVertical = 2;
                    title = 'Показатели по продажам в номинальных единицах';
                }
            }
        }

        NEW row {
            title = 'Суммы';
            childConstraints = TO THE BOTTOM;
            NEW row1 {
            title = 'По отдел-группа, с учетом ед. изм. и коэфф. перевода';
            ADD PROPERTY(valueByStatisticGroupDateFromTo(g, ds, dFrom, dTo));
            ADD PROPERTY(valueResidentByStatisticGroupDateFromTo(g, ds, dFrom, dTo));
            ADD PROPERTY(valueByStatisticGroupDateTo(g, ds, dTo));
            ADD PROPERTY(valueResidentByStatisticGroupDateTo(g, ds, dTo));
            }
            NEW row2 {
            title = 'По отделу, руб.';
            ADD PROPERTY(retailSumCardDepartmentDateFromTo(ds, dFrom, dTo));
            ADD PROPERTY(retailSumSaleDepartmentDateFromTo(ds, dFrom, dTo));
            }
        }
    }

    ADD functions.box;
}

                ///////////////--------по регионам и компании----------/////////////////
regionDepartmentStore(departmentStore) = regionStore(storeDepartmentStore(departmentStore));

                           //c коэффициентом пересчета за период//
// всего
quantitySoldByStatisticGroupRegionDateFromTo 'Продано, шт' (statisticGroup, company, region, dateFrom, dateTo)=
    [GROUP SUM quantitySoldSkuStockDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, company, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

netWeightSoldByStatisticGroupRegionDateFromTo 'Продано, кг' (statisticGroup, company, region, dateFrom, dateTo)=
    [GROUP SUM netWeightSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, company, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

volumeSoldByStatisticGroupRegionDateFromTo 'Продано, л' (statisticGroup, company, region, dateFrom, dateTo)=
    [GROUP SUM volumeSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, company, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

retailSumSoldByStatisticGroupRegionDateFromTo 'Продано, руб.' (statisticGroup, company, region, dateFrom, dateTo)=
    [GROUP SUM sumSoldSkuStockDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, company, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

// белорусского производствава
quantitySoldResidentByStatisticGroupRegionDateFromTo 'Продано, шт' (statisticGroup, company, region, dateFrom, dateTo)=
    [GROUP SUM quantitySoldSkuStockDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, company, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

netWeightSoldResidentByStatisticGroupRegionDateFromTo 'Продано, кг' (statisticGroup, company, region, dateFrom, dateTo)=
    [GROUP SUM netWeightSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, company, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

volumeSoldResidentByStatisticGroupRegionDateFromTo 'Продано, л' (statisticGroup, company, region, dateFrom, dateTo)=
    [GROUP SUM volumeSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, company, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

retailSumSoldResidentByStatisticGroupRegionDateFromTo 'Продано, руб.' (statisticGroup, company, region, dateFrom, dateTo)=
    [GROUP SUM sumSoldSkuStockDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, company, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

                             //с коэффициентом пересчета на коцен//
// всего
balanceByStatisticGroupRegionDateTo 'Остаток на конец' (statisticGroup, company, region, dateTo)=
    [GROUP SUM balanceASkuLedgerDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, company, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

netWeightByStatisticGroupRegionDateTo 'Вес на конец, кг' (statisticGroup, company, region, dateTo)=
    [GROUP SUM netWeightBalanceAItemLedgerDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, company, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

volumeByStatisticGroupRegionDateTo 'Объем на конец, л' (statisticGroup, company, region, dateTo)=
    [GROUP SUM volumeBalanceAItemLedgerDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, company, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

retailSumByStatisticGroupRegionDateTo 'Сумма на конец, руб' (statisticGroup, company, region, dateTo)=
    [GROUP SUM retailSumBalanceAItemLedgerDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, company, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
// белорусского производства
balanceResidentByStatisticGroupRegionDateTo 'Остаток на конец' (statisticGroup, company, region, dateTo)=
    [GROUP SUM balanceASkuLedgerDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, company, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

netWeightResidentByStatisticGroupRegionDateTo 'Вес на конец, кг' (statisticGroup, company, region, dateTo)=
    [GROUP SUM netWeightBalanceAItemLedgerDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, company, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

volumeResidentByStatisticGroupRegionDateTo 'Объем на конец, л' (statisticGroup, company, region, dateTo)=
    [GROUP SUM volumeBalanceAItemLedgerDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, company, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

retailSumResidentByStatisticGroupRegionDateTo 'Сумма на конец, руб' (statisticGroup, company, region, dateTo)=
    [GROUP SUM retailSumBalanceAItemLedgerDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, company, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

valueByStatisticGroupCompanyRegionDateFromTo 'Продано всего' (statisticGroup, company, region, dateFrom, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN quantitySoldByStatisticGroupRegionDateFromTo(statisticGroup, company, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightSoldByStatisticGroupRegionDateFromTo(statisticGroup, company, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeSoldByStatisticGroupRegionDateFromTo(statisticGroup, company, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumSoldByStatisticGroupRegionDateFromTo(statisticGroup, company, region, dateFrom, dateTo)
        DEFAULT 0 AND statisticGroup IS statisticGroup AND company IS company AND region IS region AND dateFrom IS DATE AND dateTo IS DATE
    END;

valueByStatisticGroupCompanyRegionDateTo 'Остаток на конец всего' (statisticGroup, company, region, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN balanceByStatisticGroupRegionDateTo(statisticGroup, company, region, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightByStatisticGroupRegionDateTo(statisticGroup, company, region, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeByStatisticGroupRegionDateTo(statisticGroup, company, region, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumByStatisticGroupRegionDateTo(statisticGroup, company, region, dateTo)
        DEFAULT 0 IF statisticGroup IS statisticGroup AND company IS company AND region IS region AND dateTo IS DATE
    END;

valueResidentByStatisticGroupCompanyRegionDateFromTo 'Продано отеч. пр-ва' (statisticGroup, company, region, dateFrom, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN quantitySoldResidentByStatisticGroupRegionDateFromTo(statisticGroup, company, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightSoldResidentByStatisticGroupRegionDateFromTo(statisticGroup, company, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeSoldResidentByStatisticGroupRegionDateFromTo(statisticGroup, company, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumSoldResidentByStatisticGroupRegionDateFromTo(statisticGroup, company, region, dateFrom, dateTo)
        DEFAULT 0 AND statisticGroup IS statisticGroup AND company IS company AND region IS region AND dateFrom IS DATE AND dateTo IS DATE
    END;

valueResidentByStatisticGroupCompanyRegionDateTo 'Остаток на конец отеч. пр-ва' (statisticGroup, company, region, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN balanceResidentByStatisticGroupRegionDateTo(statisticGroup, company, region, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightResidentByStatisticGroupRegionDateTo(statisticGroup, company, region, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeResidentByStatisticGroupRegionDateTo(statisticGroup, company, region, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumResidentByStatisticGroupRegionDateTo(statisticGroup, company, region, dateTo)
        DEFAULT 0 IF statisticGroup IS statisticGroup AND company IS company AND region IS region AND dateTo IS DATE
    END;

totalRetailSumSoldByStatisticGroupRegionDateFromTo 'Итого продано, руб.' (statisticGroup, company, region, dateFrom, dateTo)=
    GROUP SUM sumSoldSkuStockDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo;

retailSumCardCompanyRegionDateFromTo 'Продано с использованием банк. карточек' (company, region, dateFrom, dateTo) =
    GROUP SUM  retailSumCardDepartmentDateFromTo(departmentStore, dateFrom, dateTo)
        BY companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo;

retailSumSaleCompanyRegionDateFromTo 'Продано по кассе' (company, region, dateFrom, dateTo) =
    GROUP SUM  retailSumSaleDepartmentDateFromTo(departmentStore, dateFrom, dateTo)
        BY companyDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo;


FORM torgSales '12-Торг (продажи)'

    OBJECTS params = (dFrom = DATE, dTo = DATE) FIXED PANEL

    PROPERTIES objFrom = OBJVALUE(dFrom), objTo = OBJVALUE(dTo)

    OBJECTS c=company  FIXED PANEL
    PROPERTIES(c) SELECTOR name

    OBJECTS r=region  FIXED PANEL
    PROPERTIES(r) SELECTOR name

    TREE treeGroups g=statisticGroup PARENT parentStatisticGroup
    PROPERTIES READONLY gname = name(g), sidStatisticGroup(g), nameUOMStatisticGroup(g)
    ORDER BY sidStatisticGroup

    PROPERTIES(g, c, r, dFrom, dTo) valueByStatisticGroupCompanyRegionDateFromTo, valueResidentByStatisticGroupCompanyRegionDateFromTo
    PROPERTIES(g, c, r, dTo) valueByStatisticGroupCompanyRegionDateTo, valueResidentByStatisticGroupCompanyRegionDateTo
    PROPERTIES(g, c, r, dFrom, dTo) totalRetailSumSoldByStatisticGroupRegionDateFromTo
    PROPERTIES(c, r, dFrom, dTo) retailSumSaleCompanyRegionDateFromTo, retailSumCardCompanyRegionDateFromTo
;

DESIGN torgSales FROM DEFAULT {

    main{
        ADD treeGroups.box  BEFORE functions.box {
            title = 'Показатели по стат. группам с учетом ед. изм. и коэфф. перевода';
        }
        NEW firstCase BEFORE treeGroups.box {
            childConstraints = TO THE RIGHT;
            title = 'Параметры отчета';

            NEW dateCase {
                title = 'Даты';
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(objFrom) {
                    caption = 'Дата (с)';
                }
                ADD PROPERTY(objTo) {
                    caption = 'Дата (по)';
                }
            }
            ADD c.box;
            ADD r.box;
        }
        NEW secondCase {
            childConstraints = TO THE RIGHT;
            title = 'Суммы, руб.';
            ADD PROPERTY(retailSumSaleCompanyRegionDateFromTo(c, r, dFrom, dTo));
            ADD PROPERTY(retailSumCardCompanyRegionDateFromTo(c, r, dFrom, dTo));
        }

        ADD functions.box;
    }
}

//---------------------------------------------- Форма поставки товаров в отдел -------------------------------------//

FORM isSupplierItemDepartmentStore 'Ассортимент поставщиков'

    OBJECTS t=DATE FIXED PANEL
    PROPERTIES(t) OBJVALUE

    TREE treeStore a=STRING[3], tn=chainStores, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY OBJVALUE(a), name(tn), name(st), name(s), name(ds)
    FILTERS stringEqualsAll(a), inChainStoresStoreType (tn, st), inStoreTypeStore (st, s), inStoreDepartment(s, ds)

    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)

    OBJECTS           sp=supplier
    PROPERTIES(sp)    READONLY name

    OBJECTS           dsi=(dep=departmentStore, i=item)
    PROPERTIES        READONLY nameDep=name(dep), nameIt=nameAttributeItem(i), idBarcodeSku(i)
    PROPERTIES        toEditItem(i)
    ORDER BY          nameDep
    PROPERTIES        overNameIsSupplierItemDepartmentDate(sp, i, dep, t) BACKGROUND dataIsSupplierItemDepartmentDate(sp, i, dep, t), overDialogIsSupplierItemDepartmentDate(sp, i, dep),
                      overPriceSupplierItemDepartmentDate(sp, i, dep, t) BACKGROUND dataPriceSupplierItemDepartmentDate(sp, i, dep, t), overDialogPriceSupplierItemDepartmentDate(sp, i, dep)
    FILTERS           inChainStoresStoreTypeStoreDepartmentDepartment(tn, st, s, dep, ds)
    FILTERS           isParentItemGroupSku(g, i)
    FILTERGROUP filters10
        FILTER 'Показывать поставляемые товары' 'F10' isSupplierItemDepartmentDate(sp, i, dep, t) == yesNo.yes DEFAULT
;

DESIGN isSupplierItemDepartmentStore FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {

            type = SPLITH;
            childConstraints = TO THE RIGHT;

            NEW firstCase {

                type = SPLITV;
                fillHorizontal = 1;
                childConstraints = TO THE BOTTOM;
                ADD t.box;
                NEW firstCaseTwo {

                    type = SPLITV;
                    ADD treeStore.box {title = 'Магазины';};
                    ADD treeGroups.box {title = 'Товарные группы';};
                }
            }

            NEW secondCase {

                type = SPLITV;
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD sp.box;
                ADD dsi.box {fillVertical = 2;}

            }
        }

        ADD functions.box;
    }
}

// ---------------------------- Нумераторы по умолчанию --------------------------------- //

defaultNumeratorDocuments = DATA numerator ();
nameDefaultNumeratorDocuments 'Нумератор для документов' = name(defaultNumeratorDocuments());

numeratorObject(object) <- defaultNumeratorDocuments() WHEN ASSIGNED(object IS numeratedObject);

defaultNumeratorOrders = DATA numerator ();
nameDefaultNumeratorOrders 'Нумератор для заказов' = name(defaultNumeratorOrders());

numeratorOrder(order) = numeratorObject(order) AND order IS order;
// todo : включение этого derived'а отключает верхний derived
//numeratorOrder(order) <- defaultNumeratorOrders() WHEN ASSIGNED(order IS order);

//---------------------------------------------- Автоматическое заполнение -----------------------------------------------------//

fillVATDefaultValues 'Заполнить значения НДС по умолчанию' = ACTION () {
    EXEC addTaxNumberValue(1, 0);
    EXEC addTaxNumberValue(2, 9.09);
    EXEC addTaxNumberValue(3, 16.67);
    EXEC addTaxNumberValue(4, 10);
    EXEC addTaxNumberValue(5, 20);
    EXEC addTaxNumberValue(6, 24);
};

//---------------------------------------------- Параметры -----------------------------------------------------//

FORM parameters 'Параметры'
    PROPERTIES() nameDefaultNumeratorDocuments, nameDefaultNumeratorOrders, skuStockAverageInterval, calcCurrentQuantitySoldInterval,
                 fillVATDefaultValues;
;

//---------------------------------------------- Импорт данных -----------------------------------------------------//

//GROUP formularGroup 'Formular' : baseGroup;

importDataAction 'Импортировать данные (Formular)' = ACTION CUSTOM 'retail.actions.ImportDataActionProperty';// IN formularGroup;
importUrl 'URL' = DATA STRING[200] (); //IN formularGroup;
importLogin 'Логин' = DATA STRING[200] ();// IN formularGroup;
importPassword 'Пароль' = DATA STRING[200] ();// IN formularGroup;

//GROUP lstradeGroup 'LS Trade' : baseGroup;

importLSTDataAction 'Импортировать данные (LS Trade)' = ACTION CUSTOM 'retail.actions.ImportLSTDataActionProperty';// IN lstradeGroup;
importLSTDirectory 'Папка' = DATA STRING[200] ();// IN lstradeGroup;
importInactive 'Импортировать в том числе неактивные' = DATA BOOLEAN ();
importGroupItems 'Импортировать группы товаров' = DATA BOOLEAN ();
importWares 'Импортировать посуду' = DATA BOOLEAN ();
importItems 'Импортировать товары' = DATA BOOLEAN ();
importNumberItems 'Кол-во' = DATA INTEGER ();
importNumberItemsAtATime 'Разбивать на пакеты по' = DATA INTEGER ();
importPrices 'Импортировать цены товаров' = DATA BOOLEAN ();
importAssortment 'Импортировать ассортимент' = DATA BOOLEAN();
importShipment 'Импортировать документы прихода' = DATA BOOLEAN ();
importCompanies 'Импортировать компании' = DATA BOOLEAN ();
importSuppliers 'Импортировать поставщиков' = DATA BOOLEAN ();
importCustomers 'Импортировать покупателей' = DATA BOOLEAN ();
importStores 'Импортировать магазины' = DATA BOOLEAN ();
importDepartmentStores 'Импортировать отделы магазина' = DATA BOOLEAN();
importBanks 'Импортировать банки' = DATA BOOLEAN();
importRateWastes 'Импортировать нормы отходов' = DATA BOOLEAN();
FORM importData 'Импорт данных'
    PROPERTIES() importDataAction, importUrl, importLogin, importPassword
    PROPERTIES() importLSTDataAction, importLSTDirectory, importInactive, importGroupItems, importWares, importItems,
    importNumberItems, importNumberItemsAtATime, importPrices, importAssortment, importShipment,
    importCompanies, importSuppliers, importCustomers, importStores, importDepartmentStores, importBanks, importRateWastes
;

//---------------------------- Настройка навигатора ----------------------------------------//

WINDOW TOOLBAR topToolbar 'Папки' VERTICAL HIDETITLE HIDESCROLLBARS POSITION(0, 0, 20, 5);
WINDOW TOOLBAR formsToolbar 'Формы' VERTICAL HIDETITLE POSITION (0, 5, 20, 65);
WINDOW TREE formsTree 'Формы' HIDETITLE POSITION (0, 5, 20, 65);

HIDE WINDOW BaseLogicsModule.relevantForms;
HIDE WINDOW BaseLogicsModule.relevantClassForms;

NAVIGATOR {

    baseElement TO topToolbar;

    NEW lists 'Справочники' TO formsToolbar {
        NEW goods 'Товары' {
            ADD items;
            ADD wares;
            ADD components;
            ADD itemGroups;
            ADD statisticGroups;
            ADD unitsOfMeasure;
            ADD countries;
            ADD currencies;
            ADD assortments;
            ADD naturalLossItem;
            ADD papers;
        }
        NEW shopStructure 'Подразделения' {
            ADD companies;
//            ADD qualifier;
            ADD stores;
        }
        NEW employeeRelations 'Сотрудники' {
            ADD employees;
            NEW committeeRelations 'Комиссии' {
                ADD registerCommitteeDialog;
                ADD priceChangeCommitteeDialog;
                ADD inventoryCommitteeDialog;
                ADD wastageCommitteeDialog;
            }
        }
        NEW contragents 'Контрагенты'{
            ADD suppliers;
            ADD customers;
            ADD contracts;
            ADD discountCards;
            ADD banks;
        }
        NEW equipment 'Оборудование' {
            ADD equipmentServer;
            NEW equipmentCashRegisters 'Кассы'{
                ADD groupsCashRegister;
                ADD cashRegistersModels;
            }
            NEW equipmentScales 'Весы'{
                ADD groupsScales;
                ADD scalesModels;
                ADD labelFormats;
                ADD cellScales;
            }
            NEW equipmentChecks 'Прайс чекеры'{
                ADD groupsCheck;
                ADD checkModels;
            }
            NEW equipmentTerminals 'ТСД' {
                ADD groupsTerminal;
                ADD terminalModels;
                ADD groupsTerminalDocumentType;
                ADD handbooksTerminalDocumentType;
            }
            ADD labelTypes;
        }
        NEW producing 'Производство'{
            ADD cuttings;
            ADD recipes;
        }
        NEW pricing 'Ценообразование'{
            ADD taxes;
        }
    }

    NEW processes 'Бизнес-процессы' TO formsToolbar {
        NEW orders 'Заказы' {
            ADD isSupplierItemDepartmentStore;
            ADD timeTableDate;
            ADD printTimeTable;
            ADD orderSuppliers;
        }
        NEW incomeShipments 'Поставки' {
            ADD shipments;
            ADD wastages;
            ADD returnSuppliers;
        }
        NEW carryingInventories 'Инвентаризация' {
            ADD inventories;
            ADD naturalLosses;
        }
        NEW itemWriteOffs 'Списания' {
            ADD writeOffs;
        }
        NEW itemInnerFlows 'Внутренние перемещения' {
            ADD innerFlows;
            ADD innerArrivals;
        }
        NEW itemSpecifications 'Отпуск из розницы' {
            ADD specifications;
            ADD statements;
        }
        NEW retailSale 'Розничные продажи'{
            ADD bills;
            ADD cashReports;
        }
        NEW priceManagement 'Управление ценами' {
            ADD userPriceChanges;
        }
        NEW mixturePatterns 'Пересортица' {
            ADD disparities;
        }
        NEW production 'Производство'{
            ADD actOfStudies;
        }
        NEW frontOffice 'Фронт-офис' {
            ADD machineryPriceTransactions;
            ADD labelTransactions;
            ADD terminalDocuments;
        }
    }
    NEW accountInfo 'Сводная информация' TO formsToolbar{
        ADD sumAccountDocumentLedger;
        ADD priceChangeDocuments;
        NEW costLedger 'Себестоимость' {
            ADD costSkuLedger;
            ADD costSkuBatchLedger;
        }
        NEW balance 'Остатки' {
            NEW balanceItem 'Остатки по товару' {
                ADD curBalanceItemDepartment;
                ADD balanceItemDepartment;
            }
            NEW balanceBatch 'Остатки по партиям' {
                ADD curBalanceStockBatchDate;
                ADD balanceStockBatchDate;
            }
        }
        NEW sales 'Продажи' {
            ADD salesLedger;
            ADD salesItemDepartmentStore;
        }
        NEW report 'Отчеты' {
            ADD statisticalReport;
            ADD torgSales;
            ADD sumMotionContainerDepartmentPrint;
        }
    }
    NEW printedForms 'Печатные формы' TO formsToolbar{
        ADD listRegister;
        ADD inputListRegister;
        ADD priceChangePrint;
        ADD consignmentVerticalA;
        ADD consignmentHorizontalA;
        ADD consignmentVerticalB;
        ADD consignmentHorizontalB;
        ADD consignmentAttach;
        ADD consignmentSimpleHorizontal;
        ADD consignmentSimpleVertical;
        ADD consignmentSimpleAttach;
        ADD specificationPrint;
        ADD wastagePrint;
        ADD naturalLossPrint;
        ADD writeOffPrint;
        ADD orderSupplierPrint;
        ADD listInventoryPrint;
        ADD collationSheetPrint;
        ADD detailCollationSheetPrint;
    }

    ADD adminElement TO formsTree {
        NEW objects 'Карточки' {
            ADD itemGroup;
            ADD itemGroupDialog;
            ADD statisticGroup;
            ADD statisticGroupDialog;
            ADD UOM;
            ADD item;
            ADD ware;
            ADD barcodeInput;
            ADD employee;
            ADD employeeDialog;
            ADD country;
            ADD currency;
            ADD position;
            ADD addTradingSquareDepartmentStore;
            ADD dialogTradingSquareDepartmentStore;
            ADD departmentStore;
            ADD departmentStores;
            ADD store;
            ADD chainStores;
            ADD registerCommittee;
            ADD priceChangeCommittee;
            ADD inventoryCommittee;
            ADD wastageCommittee;
            ADD bank;
            ADD ownership;
            ADD supplier;
            ADD customer;
            ADD company;
            ADD contract;
            ADD cashRegisterModel;
            ADD scalesModel;
            ADD checkModel;
            ADD terminalModel;
            ADD assortment;
            ADD typeItem;
            ADD rowTorg1;
            ADD color;
            ADD taste;
            ADD pack;
            ADD sort;
            ADD size;
            ADD specialty;
            ADD coolingDegree;
            ADD formItem;
            ADD naturalLossItems;
            ADD innerFlowPosted;
        //    ADD numberInPack;
            ADD rateWaste;
            ADD addIsPortionBarItem;
            ADD dialogIsPortionBarItem;
            ADD addBanDiscountItem;
            ADD dialogBanDiscountItem;
            ADD addInactiveItem;
            ADD dialogInactiveItem;
            ADD addCoefficientNetGrossItem;
            ADD dialogCoefficientNetGrossItem;
        //    ADD addrateNaturalLossItem;
        //    ADD rateNaturalLossItem;
            ADD genTimeTables;
            ADD addWarePrice;
            ADD dialogWarePrice;
            ADD addRangeWare;
            ADD dialogRangeWare;
            ADD addSupplierRangeItem;
            ADD dialogSupplierRangeItem;
            ADD addRetailRangeItem;
            ADD dialogRetailRangeItem;
            ADD addImporterPriceItem;
            ADD dialogImporterPriceItem;
            ADD addMaxTradeAllowanceItem;
            ADD dialogMaxTradeAllowanceItem;
            ADD addMinTradeAllowanceItem;
            ADD dialogMinTradeAllowanceItem;
            ADD addMaxReserveItemDepartment;
            ADD dialogMaxReserveItemDepartment;
            ADD addMinReserveItemDepartment;
            ADD dialogMinReserveItemDepartment;
            ADD addBanPriceChangeItemDepartment;
            ADD dialogBanPriceChangeItemDepartment;
            ADD addInActionItemDepartment;
            ADD dialogInActionItemDepartment;
            ADD addMarginProductionItemDepartment;
            ADD dialogMarginProductionItemDepartment;
            ADD addRetailPriceItemDepartment;
            ADD dialogRetailPriceItemDepartment;
            ADD addAccountPriceItemDepartment;
            ADD dialogAccountPriceItemDepartment;
            ADD addDiscountItemDepartment;
            ADD dialogDiscountItemDepartment;
            ADD addLabelItemDepartment;
            ADD dialogLabelItemDepartment;
            ADD addMultiplierItemDepartment;
            ADD dialogMultiplierItemDepartment;
            ADD addOldPriceItemDepartment;
            ADD dialogOldPriceItemDepartment;
            ADD addIsSupplierItemDepartment;
            ADD dialogIsSupplierItemDepartment;
            ADD addPriceSupplierItemDepartment;
            ADD dialogPriceSupplierItemDepartment;
            ADD addMarkupItemDepartment;
            ADD dialogMarkupItemDepartment;
            ADD addBanSupplierItemDepartment;
            ADD dialogBanSupplierItemDepartment;
            ADD terminalDocumentsDialog;
            ADD preliminaryOrder;
            ADD cashRegister;
            ADD scales;
            ADD check;
            ADD terminal;
            ADD tax;
            ADD cutting;
            ADD recipe;
            ADD groupCashRegister;
            ADD groupScales;
            ADD groupCheck;
            ADD groupTerminal;
            ADD groupTerminalDocumentType;
            ADD component;
            ADD addAddressLegalEntity;
            ADD dialogAddressLegalEntity;
            ADD addPostAddressLegalEntity;
            ADD dialogPostAddressLegalEntity;
            ADD addManagerLegalEntity;
            ADD dialogManagerLegalEntity;
            ADD addAccountantLegalEntity;
            ADD dialogAccountantLegalEntity;
            ADD addPhoneLegalEntity;
            ADD dialogPhoneLegalEntity;
            ADD addControlSupplierStock;
            ADD dialogControlSupplierStock;
            ADD addSureSupplierStock;
            ADD dialogSureSupplierStock;
            ADD addAddressBank;
            ADD dialogAddressBank;
            ADD addFormContract;
            ADD dialogFormContract;
            ADD addDelayContract;
            ADD dialogDelayContract;
            ADD genTimeTable;
            ADD addTimeTable;
            ADD dialogTimeTable;
            ADD orderSupplier;
            ADD cashReport;
            ADD rateWaste;
            ADD ordersShipment;
            ADD shipment;
            ADD inventory;
            ADD reasonOff;
            ADD writeOff;
            ADD listInventory;
            ADD nameDepartmentInventory;
            ADD collationSheetItem;
            ADD innerFlow;
            ADD innerArrival;
            ADD specification;
            ADD specificationsStatement;
            ADD specificationForm;
            ADD statement;
            ADD numerator;
            ADD userPriceChange;
            ADD disparity;
            ADD addPercDiscountUserPriceChange;
            ADD addPercMarkupUserPriceChange;
            ADD returnSupplier;
            ADD barcodeForm;
            ADD bill;
            ADD commonInfoBatchReturnSupplierDetail;
            ADD discountCard;
            ADD actOfStudy;
            ADD seriesNumberCuttingStudyInputDetail;
            ADD itemDepartmentStoreInput;
            ADD itemDepartmentStoreBalanceInput;
            ADD machineryPriceTransaction;
            ADD groupMachineryInput;
            ADD filterItemsGroupMachinery;
            ADD itemDepartmentStoreSupplierInput;
            ADD labelType;
            ADD printLabelTransaction;
            ADD customLabelTransaction;
            ADD paper;
            ADD dialogDate;
            ADD naturalLoss;
            ADD consignment;
        }
        ADD parameters;
        ADD importData;
    }

    catalogElement {
        ADD numerators;
    }
}

