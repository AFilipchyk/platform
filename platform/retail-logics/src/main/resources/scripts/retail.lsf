MODULE retail;

// Кол-ва - NUMERIC[14,3]
// Цены - NUMERIC[14,2]
// Суммы - NUMERIC[16,2]
// Ставка налога - NUMERIC[10,5]
// Надбавка - NUMERIC[8,3]
// Норма списания отходов - NUMERIC[10,3]

REQUIRE System,
        EvalScript,
        Utils,
        Hierarchy,
        Historizable,
        Numerator,
        Stock,
        Barcode,
        Document,
        Tax,
        Ware,
        Country,
        LegalEntityBy,
        OrderBy,
        SaleOrderBy,
        Agreement,
        Order,
        BlanketOrder,
        Invoice,
        Shipment,
        CreditNote,
        SaleOrder,
        SaleBlanketOrder,
        SaleInvoice,
        SaleShipment,
        SaleCreditNote,
        SaleReturnOrder,
        SaleReturnInvoice,
        SaleReturnShipment,
        SaleReturnCreditNote,
        SalePricing,
        Sale,
        Purchase,
        PurchaseOrder,
        PurchaseInvoice,
        PurchaseShipment,
        PurchaseCreditNote,
        PurchaseReturnOrder,
        PurchaseReturnInvoice,
        PurchaseReturnShipment,
        PurchaseReturnCreditNote,
        PurchaseReturnPricing,
        PurchaseWriteOff,
        PurchaseSaleShipment,
        PurchaseSaleInvoice,
        PurchaseSaleOrder,
        SalePurchase,
        Repricing,
        Employee,
        StockAdjustment,
        ShipmentStore,
        PurchaseWriteOffStore,
        Store,
        PurchasePricingWriteOff,
        Statistics,
        StatisticsItem,
        NaturalLossItem,
        StatisticsStore,
        PricingStore,
        ConsignmentBy,
        AccountDocument,
        Sales,
        Supply,
        Machinery,
        CashRegister,
        Scales,
        StockReserve,
        PriceChecker,
        WriteOff,
        Terminal,
        Label,
        RetailCRM,
        CashOperation,
        POS,
        ContractStock,
        ContractLedger,
        Inventory,
        DefaultData,
        Item,
        WareItem,
        ItemSize,
        ItemArticle,
        WriteOffItem,
        PurchaseItem,
        SaleItem,
        PriceList,
        Transport,
        Route,
        Trip,
        Warehouse,
        ShipmentWarehouse,
        StockTax,
        ItemTax,
        Disparity,
        DisparityRepricing,
        NaturalLossBy,
        WarePriceList,
        ScheduleOrder,
        SaleScheduleOrder,
        PurchaseScheduleOrder;

// ----------------------------------- Товарный классификатор ------------------------------------------ //

EXTEND CLASS itemGroup : roundGroup;
roundGroupSku(sku) += itemGroupItem(sku);

EXTEND CLASS itemGroup : discountSkuGroup;
inDiscountSkuGroupSku(discountSkuGroup, sku) += itemGroupItem(sku) == discountSkuGroup;

pieceNumeratorItemGroup = DATA numerator (itemGroup);
namePieceNumeratorItemGroup 'Нумератор штрих-кодов (для штучного товара)' (itemGroup) = name(pieceNumeratorItemGroup(itemGroup));

weightNumeratorItemGroup = DATA numerator (itemGroup);
nameWeightNumeratorItemGroup 'Нумератор штрих-кодов (для весового товара)' (itemGroup) = name(weightNumeratorItemGroup(itemGroup));

EXTEND FORM itemGroup
    PROPERTIES(g) namePieceNumeratorItemGroup, nameWeightNumeratorItemGroup
;

EXTEND FORM itemGroups
    PROPERTIES(g) BEFORE delete namePieceNumeratorItemGroup, nameWeightNumeratorItemGroup
;
// формы за формами товара

//-----------------------------------------------------------------------------------------------//

isContainerItem 'Тара' = DATA BOOLEAN (item) IN itemBaseGroup;
isContainerSku (sku) += isContainerItem(sku);
//@defineItemAttribute(Container, 'Показывать явл-ся ли тарой', displayGroup);

//equipmentGroup
GROUP equipmentGroup 'Внешние устройства' : public;

isWeightItem 'Весовой товар' = DATA BOOLEAN (item) IN itemBaseGroup;
isWeightSku(sku) += isWeightItem(sku);

compositionScalesItem 'Состав товара (ингредиенты) для весов' = DATA TEXT (item) IN equipmentGroup;

passScalesItem 'Передавать на весы' = DATA BOOLEAN (item) IN equipmentGroup;

labelFormatPackItem = DATA labelFormat(item);
idLabelFormatPackItem 'Код формата этикетки' (item) = idLabelFormat(labelFormatPackItem(item)) IN equipmentGroup;

//substanceGroup
GROUP substanceGroup 'Энергетическая ценность' : public;

nutritionalValueItem 'Энергетическая и пищевая ценность' = DATA STRING[400] (item) IN substanceGroup MINCHARWIDTH 50;
energyItem 'Энергетическая ценность на 100г, ккал' = DATA DOUBLE (item) IN substanceGroup;
fatsItem 'Жиры на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
carbohydratesItem 'Углеводы на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
proteinsItem 'Белки на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
containsGMOItem 'Содержит ГМО' = DATA BOOLEAN (item) IN substanceGroup;

//sizeGroup
lengthPackItem 'Длина упаковки' = DATA NUMERIC[8,2] (item) IN itemSizeGroup;
widthPackItem 'Ширина упаковки' = DATA NUMERIC[8,2] (item) IN itemSizeGroup;
heightPackItem 'Высота упаковки' = DATA NUMERIC[8,2] (item) IN itemSizeGroup;
grossWeightPackItem 'Вес брутто упаковки' = DATA NUMERIC[9,3] (item) IN itemSizeGroup;

//expiryGroup
GROUP expiryGroup 'Контроль сроков годности' : public;
daysExpiryPackItem 'Срок годности в днях с момента фасовки' = DATA NUMERIC[8,2] (item) IN expiryGroup;
hoursExpiryPackItem 'Срок годности в часах с момента фасовки' = DATA INTEGER (item) IN expiryGroup;

// ----------------------------------- Штрих код ------------------------------------------ //

daysExpiryBarcode 'Срок годности в днях' = daysExpiryPackItem(skuBarcode(barcode));
hoursExpiryBarcode 'Срок годности в часах' = hoursExpiryPackItem(skuBarcode(barcode));
labelFormatBarcode 'Формат этикетки' = idLabelFormatPackItem(skuBarcode(barcode));
compositionBarcode 'Состав товара' = compositionScalesItem(skuBarcode(barcode));
isWeightBarcode 'Весовой' = isWeightItem(skuBarcode(barcode));
expiryDateBarcodeStock 'Крайний срок годности' (barcode, stock) = expiryDateSkuStock(skuBarcode(barcode), stock);

pieceNumeratorItem (item) = pieceNumeratorItemGroup(itemGroupItem(item));
weightNumeratorItem (item) = weightNumeratorItemGroup(itemGroupItem(item));

barcodeNumeratorSku(item) += IF isWeightItem(item) THEN weightNumeratorItem(item) ELSE pieceNumeratorItem(item);

//------------------------------------ Товар с историей -------------------------------------------------------------//

GROUP activeGroup 'Активность товара' : public;
@defineHistorizableCustom(inactiveItem, 'Неактивный товар', yesNo, name, item, nameAttributeItem, activeGroup);
isActiveItem (item) = item IS item AND NOT inactiveItem(item) == yesNo.yes PERSISTENT;
EXTEND FORM items
    FILTERGROUP filters
        FILTER 'Отображать только активные товары' 'F10' isActiveItem(i) DEFAULT
;

//------------------------------------ Товар для подразделения с историей -------------------------------------------//

TABLE itemDepartmentStore (item, departmentStore);
TABLE itemDepartmentStoreDate (item, departmentStore, DATE);

GROUP labelGroup 'Ценник' : public;

defaultLabelTypeItemDepartmentStore(item, departmentStore) = defaultLabelTypeDepartmentStore(departmentStore) AND item IS item;
@defineHistorizableCustomDefault(labelItemDepartmentStore, defaultLabelTypeItemDepartmentStore, 'Ценник', labelType, name, item, nameAttributeItem, departmentStore, name, 10, labelGroup);
labelBarcodeDepartmentStoreDate (barcode, departmentStore, date) = labelItemDepartmentStoreDate(skuBarcode(barcode), departmentStore, date);

CONSTRAINT dataLabelItemDepartmentStoreDate(item, departmentStore, date) AND NOT inLabelTypeDepartmentStore(dataLabelItemDepartmentStoreDate(item, departmentStore, date), departmentStore)
    CHECKED BY dataLabelItemDepartmentStoreDate MESSAGE 'Тип ценника запрещен для выбранного отдела магазина';

@defineHistorizable(multiplierItemDepartmentStore, 'Множитель', INTEGER, item, nameAttributeItem, departmentStore, name, labelGroup);
valOverMultiplierItemDepartmentStoreDate (item, departmentStore, date) = UNION OVERRIDE 1 IF item IS item AND departmentStore IS departmentStore AND date IS DATE,
                                                                               multiplierItemDepartmentStoreDate(item, departmentStore, date);
valOverMultiplierBarcodeDepartmentDate (barcode, departmentStore, date) = valOverMultiplierItemDepartmentStoreDate(skuBarcode(barcode), departmentStore, date);

EXTEND FORM item

    PROPERTIES(i) isContainerItem,
                  isWeightItem,

// убрал до след коммита
//                  nameGroupNaturalLossItem, rateGroupNaturalLossItem, //nameStatisticGroupSku,

                  lengthPackItem, widthPackItem, heightPackItem, grossWeightPackItem,

                  nameInactiveItem, dialogInactiveItem,

                  // Дополнительные
                  passScalesItem,
                  compositionScalesItem, idLabelFormatPackItem,

                  nutritionalValueItem, energyItem,
                  fatsItem, carbohydratesItem, proteinsItem, containsGMOItem,

                  daysExpiryPackItem, hoursExpiryPackItem

    PROPERTIES(b) BEFORE delete titleScalesBarcode, titleCashRegisterBarcode

    // Управленческие параметры
    TREE treeStore a=STRING[3], t=chainStores, st=storeType, s=store
    PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS stringEqualsAll(a), inChainStoresStoreType (t, st), inStoreTypeStore (st, s)

    OBJECTS dt=DATE FIXED PANEL, d=departmentStore
    PROPERTIES (d) name
    FILTERS inChainStoresStoreTypeStoreDepartmentStore(t, st, s, d)

    PROPERTIES (dt) OBJVALUE BACKGROUND dateDiffersCurrent(dt)
    PROPERTIES      overNameLabelItemDepartmentStoreDate(i, d, dt) BACKGROUND dataLabelItemDepartmentStoreDate(i, d, dt), overDialogLabelItemDepartmentStoreDate(i, d),
                    overMultiplierItemDepartmentStoreDate(i, d, dt) BACKGROUND dataMultiplierItemDepartmentStoreDate(i, d, dt), overDialogMultiplierItemDepartmentStoreDate(i, d)

    EDIT item OBJECT i
;

EXTEND DESIGN item {
    main {
        itemDetail {
            itemPrimary {
                itemPrimaryColumn1 {
                }

                itemPrimaryColumn2 {
//                    ADD i.rateGroup {
//                        childConstraints = TO THE BOTTOM;
//                    }
                    ADD i.activeGroup;
                }
            }

            NEW itemAdditional AFTER itemPrimary {
                title = 'Дополнительные';
                fillVertical = 1.0;
                fillHorizontal = 1.0;

                NEW containerALeft {
                    childConstraints = TO THE BOTTOM;
                    ADD i.equipmentGroup {
                        childConstraints = TO THE BOTTOM;
                    }
                }

                NEW containerARight {
                    childConstraints = TO THE BOTTOM;
                    ADD i.substanceGroup{
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.expiryGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                };

                POSITION containerALeft TO THE LEFT containerARight;
            }

            ADD d.box AFTER itemAdditional {
                title = 'Управленческие параметры';

                fillVertical = 1.0;
                fillHorizontal = 1.0;
                ADD dt.box BEFORE d.grid.box;
                ADD treeStore.tree.box BEFORE d.grid.box;
                POSITION treeStore.tree.box TO THE LEFT d.grid.box;
                POSITION d.grid.box TO THE LEFT d.panel;
                d.grid.box {
                    fillHorizontal = 3;
                };
            }
       }
    }
}

// -------------------------------------------- Подключение модуля POS -------------------------------------- //
@implementSkuLedgerReceiptDetail();
@implementAccountDocumentLedgerZReport();

// ------------------------------------------- Загрузка в ВУ --------------------------------------------- //

@defineMachineryPriceTransactionAttribute(labelFormat, 'Формат этикетки', INTEGER);

@defineMachineryPriceTransactionAttribute(daysExpiry, 'Срок годности в днях с момента фасовки', NUMERIC[8,2]);
@defineMachineryPriceTransactionAttribute(hoursExpiry, 'Срок годности в часах с момента фасовки', INTEGER);
@defineMachineryPriceTransactionAttributeStock(expiryDate, 'Срок годности (дата)', DATE);

@defineMachineryPriceTransactionAttribute(isWeight, 'Весовой товар', BOOLEAN);
@defineMachineryPriceTransactionAttribute(composition, 'Состав товара', TEXT);

// Кассы
createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += ACTION (transaction, groupMachinery) {
    IF groupMachinery IS groupCashRegister THEN
        SET nameMachineryPriceTransactionBarcode(transaction, barcode) <- titleCashRegisterBarcode(barcode) WHERE inMachineryPriceTransactionBarcode(transaction, barcode);
}

// Весы
createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += ACTION (transaction, groupMachinery) {
    IF groupMachinery IS groupScales THEN
        SET nameMachineryPriceTransactionBarcode(transaction, barcode) <- titleScalesBarcode(barcode) WHERE inMachineryPriceTransactionBarcode(transaction, barcode);
}
overInGroupMachinerySku(groupMachinery, sku) += groupMachinery IS groupScales AND sku IS item AND NOT passScalesItem(sku);

synchronizeCompositionMachineryPriceTransactionGroupScales = ACTION (transaction, groupMachinery) {
    FOR compositionMachineryPriceTransactionBarcode(transaction, barcode) AND groupMachinery IS groupScales
        AND NOT cellScalesGroupScalesComposition(groupMachinery, compositionMachineryPriceTransactionBarcode(transaction, barcode))
        ADDOBJ c = cellScales DO {
            SET groupScalesCellScales(c) <- groupMachinery;
            SET compositionCellScales(c) <- compositionMachineryPriceTransactionBarcode (transaction, barcode);
        }
}

snapshotAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += synchronizeCompositionMachineryPriceTransactionGroupScales(transaction, groupMachinery);
createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += synchronizeCompositionMachineryPriceTransactionGroupScales(transaction, groupMachinery);

// Прайс-чекеры
createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += ACTION (transaction, groupMachinery) {
    IF groupMachinery IS groupPriceChecker THEN
        SET nameMachineryPriceTransactionBarcode(transaction, barcode) <- titleCashRegisterBarcode(barcode) WHERE inMachineryPriceTransactionBarcode(transaction, barcode);
}

// Терминалы сбора даных
createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += ACTION (transaction, groupMachinery) {
    IF groupMachinery IS groupTerminal THEN
        SET nameMachineryPriceTransactionBarcode(transaction, barcode) <- titleCashRegisterBarcode(barcode) WHERE inMachineryPriceTransactionBarcode(transaction, barcode);
}

//----------------------------------------------- Списание товара ---------------------------------------------------//

// Проводим по регистру

limitOutFIFOSkuLedgerBatch(ledger, batch) += IF batchWriteOffDetail(ledger) THEN
                                                quantityWriteOffDetail(ledger) AND batch == batchWriteOffDetail(ledger)
                                             ELSE
                                                currentBalanceBatchStock(batch, stockWriteOffDetail(ledger));

changedDataSkuLedger(ledger) += CHANGED(batchWriteOffDetail(ledger));

// Товарный отчет
sumItemOutAccountDocumentLedger (ledger) += sumItemWriteOffDetailWriteOff(ledger);
sumContainerOutAccountDocumentLedger (ledger) += sumContainerWriteOffDetailWriteOff(ledger);

//------------------------------------------------- Z-отчет ---------------------------------------------------------------------//

// документ скидок для товарного отчета
CLASS saleDiscountDocument 'Скидка по продаже через кассы';
TABLE saleDiscountDocument (saleDiscountDocument);

@defineAggregation(zReport, saleDiscountDocument, discountSumReceiptDetailZReport);
@defineDocumentAggregationHeaderTime(zReport, saleDiscountDocument);
@defineDocumentAggregationHeaderStock(zReport, saleDiscountDocument, departmentStore, 'Отдел магазина');
@defineDocumentAggregationHeaderPosted(zReport, saleDiscountDocument);

numberCashRegisterSaleDiscountDocument (saleDiscountDocument) = numberCashRegisterZReport(zReportSaleDiscountDocument(saleDiscountDocument));

discountSaleDiscountDocument (saleDiscountDocument) = discountSumReceiptDetailZReport(zReportSaleDiscountDocument(saleDiscountDocument));

descriptionSaleDiscountDocument (saleDiscountDocument) =
    [FORMULA STRING[200] '\'Скидка по кассе \' || CAST($1 AS TEXT) || \' отдела \' || CAST($2 AS TEXT) ||  \' от \' || CAST($3 AS TEXT)'](
    numberCashRegisterSaleDiscountDocument(saleDiscountDocument), nameDepartmentStoreSaleDiscountDocument(saleDiscountDocument), dateSaleDiscountDocument(saleDiscountDocument));

@implementAccountDocumentLedgerOut(saleDiscountDocument, departmentStore);
sumOutAccountDocumentLedger (ledger) += discountSaleDiscountDocument(ledger);
sumItemOutAccountDocumentLedger (ledger) += discountSaleDiscountDocument(ledger);
sumContainerOutAccountDocumentLedger (ledger) += 0.0 IF ledger IS saleDiscountDocument;

// --------------------------------------- Печать ценников ---------------------------------------- //

labelTypeBarcodeDepartmentStoreDate (barcode, departmentStore, date) += labelBarcodeDepartmentStoreDate(barcode, departmentStore, date);
countLabelBarcodeDepartmentStoreDate (barcode, departmentStore, date) += valOverMultiplierBarcodeDepartmentDate(barcode, departmentStore, date);

nameCountryItemBarcode = nameCountryItem(skuBarcode(barcode));
@defineLabelTransactionAttribute(country, 'Страна', STRING[255], nameCountryItem);

nameManufacturerItemBarcode = nameManufacturerItem(skuBarcode(barcode));
@defineLabelTransactionAttribute(manufacturer, 'Производитель', STRING[255], nameManufacturerItem);


//---------------------------Товарный отчет-------------------------------------//

@extendStockFormAccountDocumentLedger(departmentStore, d);
EXTEND DESIGN departmentStore {
    row1 {
        ADD d. responsibilityGroup {childConstraints = TO THE BOTTOM;}
    }
}

//------------------------------------Отчет по таре-------------------------------------------//

isContainerBatch 'Тара' (batch) = isContainerItem(skuBatch(batch));

costSumContainerStockDateFrom 'Остаток на начало по складу' (stock, dateFrom) = GROUP SUM costSumBatchStockDateFrom(batch, stock, dateFrom)
    IF isContainerItem(skuBatch(batch)) BY stock, dateFrom;

costSumContainerStockDateTo 'Остаток на конец по складу' (stock, dateTo) = GROUP SUM costSumBatchStockDateTo(batch, stock, dateTo)
    IF isContainerItem(skuBatch(batch)) BY stock, dateTo;

overMotionContainerBatchStockDateFromTo (batch, stock, dateFrom, dateTo) = UNION OVERRIDE
    balanceBBatchStockDate(batch, stock, dateFrom) AND dateTo AS DATE,
    balanceABatchStockDate(batch, stock, dateTo) AND dateFrom AS DATE,
    costInBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo),
    costOutBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo);

FORM sumMotionContainerDepartmentPrint 'Отчет по таре' PRINT

    OBJECTS params = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES objFrom = OBJVALUE(dFrom), objTo = OBJVALUE(dTo)

    OBJECTS dep = departmentStore  FIXED PANEL
    PROPERTIES(dep) SELECTOR name, nameStoreDepartmentStore, nameLegalEntityDepartmentStore

    OBJECTS bt=batch

    PROPERTIES READONLY costSumContainerStockDateFrom(dep, dFrom), costSumContainerStockDateTo(dep, dTo)
    PROPERTIES(bt) READONLY idBarcodeSkuBatch, nameSkuBatch, costBatch
    PROPERTIES(bt, dep, dFrom) READONLY balanceBBatchStockDate, costSumBatchStockDateFrom
    PROPERTIES(bt, dep, dTo) READONLY balanceABatchStockDate, costSumBatchStockDateTo
    PROPERTIES(bt, dep, dFrom, dTo) READONLY costInBalanceBatchStockDateFromTo, costSumInBalanceBatchStockDateFromTo,
               costOutBalanceBatchStockDateFromTo, costSumOutBalanceBatchStockDateFromTo

    FILTERS isPostedBatch(bt),
            isContainerBatch(bt),
            overMotionContainerBatchStockDateFromTo(bt, dep, dFrom, dTo)!=0
;

//---------------------------------------------- Генерация Z-отчета -------------------------------------------------//

generateZReport 'Сгенерировать Z-отчёт' = ACTION CUSTOM 'equ.srv.actions.GenerateZReport';
averageZReportCountGenerateZReport 'Среднее число Z-отчётов' = DATA INTEGER ();
averageReceiptCountGenerateZReport 'Среднее число чеков' = DATA INTEGER ();
averageReceiptDetailCountGenerateZReport 'Среднее число строк в чеке' = DATA INTEGER ();
dateFromGenerateZReport 'Дата (с)' = DATA DATETIME ();
dateToGenerateZReport 'Дата (по)' = DATA DATETIME ();

EXTEND FORM defaultData
    PROPERTIES()    generateZReport, averageZReportCountGenerateZReport, averageReceiptCountGenerateZReport, averageReceiptDetailCountGenerateZReport,
                    dateFromGenerateZReport, dateToGenerateZReport

;

EXTEND DESIGN defaultData {
    pane {
        NEW ZReport {
            title = 'Z-отчёт';
            childConstraints = TO THE BOTTOM;
            ADD PROPERTY(averageZReportCountGenerateZReport());
            ADD PROPERTY(averageReceiptCountGenerateZReport());
            ADD PROPERTY(averageReceiptDetailCountGenerateZReport());
            ADD PROPERTY(dateFromGenerateZReport());
            ADD PROPERTY(dateToGenerateZReport());
            ADD PROPERTY(generateZReport());
        }
    }
}
//---------------------------------------------- Импорт данных -----------------------------------------------------//

GROUP lstradeIntegrationGroup 'LS Trade' : public;

importLSTDataAction 'Импортировать данные (LS Trade)' = ACTION CUSTOM 'retail.ImportLSTDataActionProperty' IN lstradeIntegrationGroup;
importLSTDirectory 'Папка' = DATA STRING[200] () IN lstradeIntegrationGroup;
importInactive 'Импортировать в том числе неактивные' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importGroupItems 'Импортировать группы товаров' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importWares 'Импортировать посуду' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importItems 'Импортировать товары' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importNumberItems 'Кол-во' = DATA INTEGER () IN lstradeIntegrationGroup;
importNumberItemsAtATime 'Разбивать на пакеты по' = DATA INTEGER () IN lstradeIntegrationGroup;
importPrices 'Импортировать цены товаров' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importAssortment 'Импортировать ассортимент' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importUserInvoices 'Импортировать документы прихода' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importLegalEntities 'Импортировать организации' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importWarehouses 'Импортировать склады' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importStores 'Импортировать магазины' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importDepartmentStores 'Импортировать отделы магазина' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importBanks 'Импортировать банки' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importRateWastes 'Импортировать нормы отходов' = DATA BOOLEAN() IN lstradeIntegrationGroup;

EXTEND FORM integrationData
    PROPERTIES() importLSTDataAction, importLSTDirectory, importInactive, importGroupItems, importWares, importItems,
    importNumberItems, importNumberItemsAtATime, importPrices, importAssortment, importUserInvoices,
    importLegalEntities, importWarehouses, importStores, importDepartmentStores, importBanks, importRateWastes
;
EXTEND DESIGN integrationData {
    pane {
        NEW lstrade {
            title = 'LS Trade';
            ADD NOGROUP.lstradeIntegrationGroup;
        }
    }
}

GROUP formularGroup 'Formular' : public;

importDataAction 'Импортировать данные (Formular)' = ACTION CUSTOM 'retail.ImportDataActionProperty'IN formularGroup;
importUrl 'URL' = DATA STRING[200]() IN formularGroup;
importLogin 'Логин' = DATA STRING[200]() IN formularGroup;
importPassword 'Пароль' = DATA STRING[200]() IN formularGroup;

EXTEND FORM integrationData
    PROPERTIES() importDataAction, importUrl, importLogin, importPassword
;
EXTEND DESIGN integrationData {
    pane {
        NEW formular {
            title = 'Formular';
            ADD NOGROUP.formularGroup;
        }
    }
}

//---------------------------- Настройка навигатора ----------------------------------------//

NAVIGATOR {

    NEW catalogs 'Справочники' TO toolbar {
        NEW itemCatalog 'Товары' {
            ADD items;
            ADD itemGroups;
            ADD UOMs;
            ADD wares;
        }
        NEW contragents 'Контрагенты' {
            ADD legalEntities;
            ADD contractSkus;
        }
    }

    NEW purchase 'Управление закупками' TO toolbar {
        ADD purchasePurchaseNavigator;
        ADD purchaseReturnNavigator;
        ADD supplyNavigator;
        ADD stockReserveNavigator;
    }

    NEW warehouse 'Управление складом' TO toolbar {
        ADD inventoryNavigator {
            ADD naturalLosses;
            ADD naturalLossGroups;
        }
        ADD writeOffNavigator;
        ADD adjustmentNavigator;
        ADD disparityNavigator;

        ADD stockCost;
        ADD stockBalance;
        NEW accountDocuments 'Бухгалтерские документы' {
            ADD sumAccountDocumentLedger;
            ADD sumMotionContainerDepartmentPrint;
        }
        NEW warehouseCatalog 'Справочники' {
            ADD warehouses;
        }
    }

    NEW sale 'Управление продажами' TO toolbar {
        ADD saleSaleNavigator;
        ADD saleReturnNavigator;
        ADD salesNavigator;
        ADD statisticsNavigator;
    }

    NEW retail 'Розничная торговля' TO toolbar {
        ADD POSNavigator;
        NEW priceAccount 'Учет в розничных ценах' {
            ADD pricings;
            ADD repricings;
            ADD pricingCommitteeDialog;
            ADD repricingCommitteeDialog;
        }
        ADD retailCRMNavigator;
        NEW retailCatalog 'Справочники' {
            ADD stores;
        }
    }

    ADD priceListNavigator TO toolbar;
    ADD transportNavigator TO toolbar;
    ADD machineryNavigator TO toolbar;

    NEW finance 'Финансы' TO toolbar {
        ADD contractNavigator;
        NEW financeCatalog 'Справочники' {
            ADD banks;
            ADD taxes;
        }
    }

    NEW hr 'Кадры' TO toolbar {
        ADD employees;
    }

    ADD account TO toolbar;
    ADD administration TO toolbar;
}

