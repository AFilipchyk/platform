MODULE retail;

IMPORT BaseLogicsModule;

floor = FORMULA DOUBLE 'floor($1)';

castToString255 = FORMULA STRING[255] 'CAST($1 AS character(255))';
castToString3 = FORMULA STRING[3] 'CAST($1 AS character(3))';
isWordInCSV = FORMULA INTEGER 'CASE WHEN CAST($1 AS text)=ANY(string_to_array($2,\',\')) THEN 1 ELSE 0 END';

CLASS doubleNamed 'Объект с кратким наименованием' : named;

shortName 'Краткое наименование' = DATA STRING[5] (doubleNamed) IN baseGroup;

CLASS STATIC yesNo 'Логическое' {
    yes 'ДА',
    no 'НЕТ'
};

classSIDToYesNo 'Да/нет по ИД'(string) = GROUP UNIQUE yesNo BY classSID (yesNo) WHERE yesNo IS yesNo;

CLASS language 'Язык' : doubleNamed;

stringEqualsAll(string) = string == 'Все';
dateDiffersCurrent(date) = date IS DATE AND date != currentDate();

CLASS ABSTRACT postedObject 'Объект с возможностью закрытия';
TABLE postedObject (postedObject);

GROUP postedGroup 'Информация о закрытии' : baseGroup;

timeClosed 'Время закрытия' = DATA DATETIME (postedObject) IN postedGroup;
userClosed 'Закрыт пользователем' = DATA customUser (postedObject) IN idGroup;
computerClosed 'Закрыт на компьютере' = DATA computer (postedObject) IN idGroup;

nameUserClosed 'Закрыт пользователем' (postedObject) = commonName(userClosed(postedObject)) IN postedGroup;
hostnameComputerClosed 'Компьютер, с которого осуществляется закрытие' (postedObject) = hostname(computerClosed(postedObject)) IN postedGroup;

timeClosed(postedObject) <- currentDateTime() ON ASSIGN postedObject IS postedObject;
userClosed(postedObject) <- currentUser() ON ASSIGN postedObject IS postedObject;
computerClosed(postedObject) <- currentComputer() ON ASSIGN postedObject IS postedObject;

GROUP documentHeaderGroup 'Шапка документа' : baseGroup;
GROUP documentSumGroup 'Суммы документа': publicGroup;
GROUP documentPrmGroup 'Параметры документа': publicGroup;

GROUP carConsignmentGroup 'Автомобиль' : baseGroup;
GROUP issuanceConsignmentGroup 'Отпуск' : baseGroup;
GROUP loadingConsignmentGroup 'ПРР' : baseGroup;
GROUP sumConsignmentGroup 'Суммы' : baseGroup;
GROUP printGroup 'Печать' : baseGroup;

// ----------------------------------- Нумераторы ------------------------------------------ //

CLASS numerator 'Нумератор' : named;

seriesNumerator 'Серия' = DATA STRING[2] (numerator) IN recognizeGroup FIXEDCHARWIDTH 3;

minValueNumerator 'Мин. значение' = DATA LONG (numerator) IN recognizeGroup;
maxValueNumerator 'Макс. значение' = DATA LONG (numerator) IN recognizeGroup;

stringLengthNumerator 'Длина' = DATA INTEGER (numerator) IN baseGroup;

curValueNumerator 'Тек. значение' = DATA LONG (numerator) IN recognizeGroup;
curValueNumerator(numerator) <- minValueNumerator(numerator) ON ASSIGN numerator IS numerator;

lpadStringWithZero = FORMULA STRING[18] 'lpad(CAST($1 AS text),$2,\'0\')';

curStringValueNumerator 'Тек. значение (строка)' (numerator) = lpadStringWithZero(curValueNumerator(numerator), stringLengthNumerator(numerator)) IN baseGroup;

incrementValueNumerator 'Увеличить значение' = ACTION (numerator) NEWSESSION {
    IF curValueNumerator(numerator) >= maxValueNumerator(numerator) THEN
        MESSAGE 'Счетчик нумератора достиг максимального значения. Обратитесь к администратору.'
    ELSE {
        SET curValueNumerator(numerator) <- curValueNumerator(numerator) + 1;
        EXEC apply();
    };
};

FORM numerator 'Нумератор'
    OBJECTS n = numerator FIXED PANEL
    PROPERTIES(n) name, seriesNumerator, minValueNumerator, maxValueNumerator, stringLengthNumerator, curValueNumerator, curStringValueNumerator

    EDIT numerator OBJECT n
;

FORM numerators 'Нумераторы'
    OBJECTS n = numerator
    PROPERTIES(n) READONLY name, seriesNumerator, minValueNumerator, maxValueNumerator, stringLengthNumerator, curValueNumerator, curStringValueNumerator
    PROPERTIES(n)          ADDFORM, EDITFORM, delete

    DIALOG numerator OBJECT n
;

GROUP numberedGroup 'Нумератор' : baseGroup;

CLASS ABSTRACT numberedObject 'Нумерованный объект';
TABLE numberedObject (numberedObject);

numberObject 'Номер' = DATA STRING[18] (numberedObject) IN numberedGroup MINCHARWIDTH 7;
seriesObject 'Серия' = DATA STRING[2] (numberedObject) IN numberedGroup FIXEDCHARWIDTH 3;

seriesNumberObject 'Серия/Номер' (numberedObject) = [FORMULA STRING[21] '$1 || $2']
                                                    (seriesObject(numberedObject), numberObject(numberedObject));

CLASS ABSTRACT numeratedObject 'Нумерируемый объект' : numberedObject;

numeratorObject 'Нумератор (ИД)' = DATA numerator (numeratedObject);
nameNumeratorObject 'Нумератор' (numeratedObject) = name(numeratorObject(numeratedObject)) IN numberedGroup MINCHARWIDTH 7 PREFCHARWIDTH 15;

setValueNumeratedObject 'Сгенерировать номер' = ACTION (numeratedObject) {
    SET numberObject(numeratedObject) <- curStringValueNumerator(numeratorObject(numeratedObject));
    SET seriesObject(numeratedObject) <- seriesNumerator(numeratorObject(numeratedObject));
    EXEC incrementValueNumerator(numeratorObject(numeratedObject));
} IN numberedGroup SHORTCUT numberObject;

// todo : не работает
//setValueNumeratedObject(numeratedObject) <- TRUE ON CHANGE numeratorObject(numeratedObject);

// ----------------------------------- Шаблоны ------------------------------------------ //

// ----------------------------------- Свойство объект-дата------------------------------------------ //
META metaCodeObjectDateProperty(prop, object, caption, type, group)

    prop##Date caption = DATA type (object, DATE) IN group;
    date##prop (object, date) = GROUP MAX dateIn AND prop##Date(object, dateIn) AND dateIn <= (date AS DATE) BY object, date;
    prop##Val caption (object, date) = prop##Date(object, date##prop(object, date)) IN group;
    prop caption (object) = prop##Date(object, date##prop(object, currentDate())) IN group;

    FORM add##prop caption
    OBJECTS a=object FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, OBJVALUE(d), prop##Date(a, d);
    DESIGN add##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
    }

    showFormAdd##prop 'Добавить' (object) = ACTION FORM add##prop OBJECTS a MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

    FORM prop caption
    OBJECTS a=object FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, showFormAdd##prop(a) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY, prop##Date(a, d)
    FILTERS prop##Date(a, d);
    DESIGN prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
    }

    showForm##prop caption (object) = ACTION FORM prop OBJECTS a MODAL SHORTCUT prop DEFAULT;

END

// ---------------------------------- Свойство объект-дата для (пример, стат.класса)------------------------------------------ //

META metaCodeNameObjectDateProperty(prop, object, caption, type, group)

    prop##Date caption = DATA type (object, DATE) IN group;
    name##prop##Date caption (object, date) = name(prop##Date(object, date));
    date##prop (object, date) = GROUP MAX dateIn AND prop##Date(object, dateIn) AND dateIn <= (date AS DATE) BY object, date;
    prop caption (object) = prop##Date(object, date##prop(object, currentDate()));
    name##prop caption (object) = name(prop(object)) IN group;

    FORM addName##prop caption
    OBJECTS a=object FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, OBJVALUE(d), name##prop##Date(a, d);
    DESIGN addName##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
    }

    showFormAddName##prop 'Добавить' (object) = ACTION FORM addName##prop OBJECTS a MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

    FORM name##prop caption
    OBJECTS a=object FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, showFormAddName##prop(a) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY, name##prop##Date(a, d)
    FILTERS prop##Date(a, d);
    DESIGN name##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
    }

    showFormName##prop caption (object) = ACTION FORM name##prop OBJECTS a MODAL SHORTCUT name##prop DEFAULT;

END

// ----------------------------------- Свойство объект1-объект2-дата------------------------------------------ //
META metaCodeDoubleObjectDateProperty(prop, object1, object2, caption, type, group)

    prop##Date caption = DATA type (object1, object2, DATE) IN group;
    date##prop (object1, object2, date) = GROUP MAX dateIn AND prop##Date(object1, object2, dateIn) AND dateIn <= (date AS DATE) BY object1, object2, date;
    prop##Val caption (object1, object2, date) = prop##Date(object1, object2, date##prop(object1, object2, date));
    prop caption (object1, object2) = prop##Val(object1, object2, currentDate()) IN group;
    prop##Over caption = UNION OVERRIDE prop##Val(object1, object2, date), prop##Date(object1, object2, date);

    FORM add##prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, name(b) READONLY, OBJVALUE(d), prop##Date(a, b, d);
    DESIGN add##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
    }

    showFormAdd##prop 'Добавить' (object1, object2) = ACTION FORM add##prop OBJECTS a, b MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

    FORM prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, name(b) READONLY, showFormAdd##prop(a, b) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY, prop##Date(a, b, d)
    FILTERS prop##Date(a, b, d);
    DESIGN prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
    }

    showForm##prop caption (object1, object2) = ACTION FORM prop OBJECTS a, b MODAL SHORTCUT prop DEFAULT;
    showForm##prop##Over caption (object1, object2) = ACTION FORM prop OBJECTS a, b MODAL SHORTCUT prop##Over;

END
// ----------------------------------- Свойство объект1-объект2-дата для yesNo со значением по-умолчанию НЕТ------------------------------------------ //

META metaCodeNameYesNoDoubleObjectDateProperty(prop, object1, object2, caption, type, group)
    default###prop###object1###object2 = yesNo.no AND object1 IS object1 AND object2 IS object2;
    @metaCodeNameDoubleObjectDateProperty(prop, object1, object2, caption, type, group, default###prop###object1###object2);
END

META metaCodeNameDoubleObjectDateProperty(prop, object1, object2, caption, type, group, defaultProperty)

    prop##Date caption = DATA type (object1, object2, DATE) IN group;
    name##prop##Date caption (object1, object2, date) = name(prop##Date(object1, object2, date));
    date##prop (object1, object2, date) = GROUP MAX dateIn AND prop##Date(object1, object2, dateIn) AND dateIn <= (date AS DATE) BY object1, object2, date;
    prop##Val caption (object1, object2, date) = UNION OVERRIDE defaultProperty(object1, object2) AND date IS DATE, prop##Date(object1, object2, date##prop(object1, object2, date));
    prop caption (object1, object2) = prop##Val(object1, object2, date##prop(object1, object2, currentDate()));
    name##prop caption (object1, object2) = name(prop(object1, object2)) IN group;

    prop##Over caption = UNION OVERRIDE prop##Val(object1, object2, date), prop##Date(object1, object2, date);
    name##prop##Over caption (object1, object2, date) = name(prop##Over(object1, object2, date)) FIXEDCHARWIDTH 7;

    FORM addName##prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, name(b) READONLY, OBJVALUE(d), name##prop##Date(a, b, d);
    DESIGN addName##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
    }

    showFormAddName##prop 'Добавить' (object1, object2) = ACTION FORM addName##prop OBJECTS a, b MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

    FORM name##prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, name(b) READONLY,  showFormAddName##prop(a, b) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY, name##prop##Date(a, b, d)
    FILTERS prop##Date(a, b, d);
    DESIGN name##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
    }

    showFormName##prop caption (object1, object2) = ACTION FORM name##prop OBJECTS a, b MODAL SHORTCUT name##prop DEFAULT;
    showFormName##prop##Over caption (object1, object2) = ACTION FORM name##prop OBJECTS a, b MODAL SHORTCUT name##prop##Over;

END

// ----------------------------------- Свойство объект1-объект2-объект3-дата------------------------------------------ //
META metaCodeTripleObjectDateProperty(prop, object1, object2, object3, caption, type, group)

    prop##Date caption = DATA type (object1, object2, object3, DATE) IN group;
    date##prop (object1, object2, object3, date) = GROUP MAX dateIn AND prop##Date(object1, object2, object3, dateIn) AND dateIn <= (date AS DATE) BY object1, object2, object3, date;
    prop##Val caption (object1, object2, object3, date) = prop##Date(object1, object2, object3, date##prop(object1, object2, object3, date));
    prop caption (object1, object2, object3) = prop##Val(object1, object2, object3, currentDate()) IN group;
    prop##Over caption = UNION OVERRIDE prop##Val(object1, object2, object3, date), prop##Date(object1, object2, object3, date);

    FORM add##prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, c=object3  FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, name(b) READONLY, name(c) READONLY, OBJVALUE(d), prop##Date(a, b, c, d);
    DESIGN add##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
        PROPERTY(name(c)) { focusable = FALSE; }
    }

    showFormAdd##prop 'Добавить' (object1, object2, object3) = ACTION FORM add##prop OBJECTS a, b, c MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

    FORM prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, c=object3 FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, name(b) READONLY, name(c) READONLY, showFormAdd##prop(a, b, c) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY, prop##Date(a, b, c, d)
    FILTERS prop##Date(a, b, c, d);
    DESIGN prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
        PROPERTY(name(c)) { focusable = FALSE; }
    }

    showForm##prop caption (object1, object2, object3) = ACTION FORM prop OBJECTS a, b, c MODAL SHORTCUT prop DEFAULT;
    showForm##prop##Over caption (object1, object2, object3) = ACTION FORM prop OBJECTS a, b, c MODAL SHORTCUT prop##Over;

END
// -------------------- Свойство объект1-объект2-объект3-дата для yesNo со значением по-умолчанию НЕТ---------------------------- //

META metaCodeNameTripleObjectDateProperty(prop, object1, object2, object3, caption, type, group)

    prop##Date caption = DATA type (object1, object2, object3, DATE) IN group;
    name##prop##Date caption (object1, object2, object3, date) = name(prop##Date(object1, object2, object3, date));
    date##prop (object1, object2, object3, date) = GROUP MAX dateIn AND prop##Date(object1, object2, object3, dateIn) AND dateIn <= (date AS DATE) BY object1, object2, object3, date;
    prop##Val caption (object1, object2, object3, date) = UNION OVERRIDE yesNo.no AND object1 IS object1 AND object2 IS object2 AND object3 IS object3 AND date IS DATE,
                                                                         prop##Date(object1, object2, object3, date##prop(object1, object2, object3, date));
    prop caption (object1, object2, object3) = prop##Val(object1, object2, object3, currentDate());
    name##prop caption (object1, object2, object3) = name(prop(object1, object2, object3)) IN group;

    prop##Over caption = UNION OVERRIDE prop##Val(object1, object2, object3, date), prop##Date(object1, object2, object3, date);
    name##prop##Over caption (object1, object2, object3, date) = name(prop##Over(object1, object2, object3, date)) FIXEDCHARWIDTH 7;

    FORM addName##prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL,  c=object3 FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, name(b) READONLY, name(c) READONLY, OBJVALUE(d), name##prop##Date(a, b, c, d);
    DESIGN addName##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
        PROPERTY(name(c)) { focusable = FALSE; }
    }

    showFormAddName##prop 'Добавить' (object1, object2, object3) = ACTION FORM addName##prop OBJECTS a, b, c MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

    FORM name##prop caption
    OBJECTS a=object1 FIXED PANEL, b=object2 FIXED PANEL, c=object3 FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, name(b) READONLY, name(c) READONLY, showFormAddName##prop(a, b, c) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY, name##prop##Date(a, b, c, d)
    FILTERS prop##Date(a, b, c, d);
    DESIGN name##prop FROM DEFAULT {
        PROPERTY(name(a)) { focusable = FALSE; }
        PROPERTY(name(b)) { focusable = FALSE; }
        PROPERTY(name(c)) { focusable = FALSE; }
    }

    showFormName##prop caption (object1, object2, object3) = ACTION FORM name##prop OBJECTS a, b, c MODAL SHORTCUT name##prop DEFAULT;
    showFormName##prop##Over caption (object1, object2, object3) = ACTION FORM name##prop OBJECTS a, b, c MODAL SHORTCUT name##prop##Over;

END

// ----------------------------------- Отображение атрибутов товаров по свойству товарной группы ------------------------------------------ //
META metaCodeShowItemAttribute (attribute, caption, group)

    show##attribute##ItemGroup caption (itemGroup) = DATA BOOLEAN (itemGroup) IN group;
    toShow##attribute caption (item) = show##attribute##ItemGroup(itemGroupSku(item));
    show##attribute##ItemGroup(itemGroup) <- TRUE ON ASSIGN itemGroup IS itemGroup;

END

// ----------------------------------- Свойства изменения объектов в Posted ------------------------------------------ //

META metaCodePostedObject (object)

    isDraft###object 'Открыт' (object) = object IS object AND NOT object IS object##Posted;
    isPosted###object 'Закрыт' (object) = object IS object##Posted;

    post###object 'Закрыть' (object) = [ACTION (object) NEWSESSION AUTOAPPLY { CHANGECLASS object TO object##Posted; } ] (object)
                                    IF object IS object AND NOT object IS object##Posted TOOLBAR CONFIRM;

    unpost###object 'Открыть' (object) = [ACTION (object) NEWSESSION AUTOAPPLY { CHANGECLASS object TO object; } ] (object)
                                      IF object IS object##Posted TOOLBAR CONFIRM;

END

// ----------------------------------- Свойства для объектов Posted ------------------------------------------ //
META metaCodeObjectWithPost (object, caption, captionPosted, documentClass, detailClass)

    CLASS object caption : documentClass;
    CLASS object##Detail 'Строка документа' : detailClass;

    @metaCodeObjectWithPostEx(object, captionPosted);
END

META metaCodeObjectWithPostEx (object, captionPosted)

    TABLE object (object);

    CLASS object##Posted captionPosted : object, postedObject;

    TABLE object##Detail (object##Detail);

    date###object 'Дата документа' (object) = DATA DATE (object) IN documentHeaderGroup;
    date###object (object) <- currentDate() ON ASSIGN object AS object;

    time###object 'Время документа' (object) = DATA TIME (object) IN documentHeaderGroup;
    time###object (object) <- currentTime() ON ASSIGN object AS object;

    dateTime###object 'Дата/время документа' (object) = toDateTime(date###object(object), time###object(object));

    departmentStore###object 'Отдел документа (ИД)' (object) = DATA departmentStore(object) IN idGroup;

    nameDepartmentStore###object 'Отдел документа' (object) = name(departmentStore###object(object)) IN documentHeaderGroup
            MINCHARWIDTH 20 PREFCHARWIDTH 40;;

    note###object 'Примечание' = DATA STRING[100] (object) IN additionalInfo MINCHARWIDTH 30 PREFCHARWIDTH 80 IN documentPrmGroup;

    object###object##Detail 'Строка документа' = DATA object (object##Detail) IN idGroup;

    in###object###object##Detail(object, object##Detail) = object###object##Detail(object##Detail) == object;

    number###object##Detail 'Номер строки' (object##Detail) =
        PARTITION SUM 1 IF object##Detail IS object##Detail BY object###object##Detail(object##Detail)
        ORDER object##Detail IN recognizeGroup MINCHARWIDTH 3 PREFCHARWIDTH 3;

    departmentStore###object##Detail 'Отдел магазина (ИД)' (object##Detail) = departmentStore###object(object###object##Detail(object##Detail));

    item###object##Detail 'Товар (ИД)' (object##Detail) = DATA item (object##Detail) IN idGroup;

    nameAttributeItem###object##Detail 'Товар' (object##Detail) =
        nameAttributeItem(item###object##Detail(object##Detail)) IN recognizeGroup;

    shortNameUnitOfMeasureItem###object##Detail 'Ед. изм.' (object##Detail) =
        shortNameUnitOfMeasureItem(item###object##Detail(object##Detail)) IN baseGroup;

    barcodeExSku###object##Detail 'Штрих-код товара' (object) =
        barcodeEx(barcodeSku(item###object##Detail (object))) IN baseGroup;

    quantity###object##Details###object 'Количество строк в документе' (object) =
        GROUP SUM 1 IF in###object###object##Detail(object, object##Detail) BY object PERSISTENT;

    add###object##DetailBarcode 'Добавить строку по штрих-коду' = ACTION (object) {
        FORM barcodeInput MODAL;

        IF formResult() == formResult.ok THEN {
            SET tmpSku() <- skuBarcodeStringDate(chosenString('barcode'), date###object(object));
            IF tmpSku() IS item THEN {
                ADDOBJ object##Detail;
                FOR o == addedObject() DO {
                    SET object###object##Detail(o) <- object AS object;
                    SET item###object##Detail(o) <- tmpSku();
            //        SET quantity###object##Detail(o) <- amountBarcode(valueBarcodeToDate(chosenString('barcode'), date###object(object)));
                };
            } ELSE
                MESSAGE 'Не найден штрих-код';
        };

    }TOOLBAR EDITKEY 'F4';

    cleanAll###object##Details###object 'Очистить документ' = ACTION (object) {
        FOR object###object##Detail (detail) == object DO {
          EXEC delete(detail AS object##Detail);
        };
    } IN documentPrmGroup CONFIRM;

    @metaCodePostedObject (object);

    date###object##Detail 'Дата документа' (object##Detail) = date###object(object###object##Detail(object##Detail));
    dateTime###object##Detail 'Дата/время документа' (object##Detail) = dateTime###object(object###object##Detail(object##Detail));
    isPosted###object##Detail 'Закрыт' (object##Detail) = isPosted###object(object###object##Detail(object##Detail));
    isNotPosted###object##Detail 'Открыт' (object##Detail) = object##Detail IS object##Detail AND NOT isPosted###object##Detail(object##Detail);

END

META metaCodeSingleAggregation (primObject, aggrObject, aggrProperty)

    primObject###aggrObject = DATA primObject (aggrObject);

    @metaCodeSinglePropsAggregation (primObject###aggrObject, aggrObject, aggrProperty);

END

META metaCodeSinglePropsAggregation (primProperty, aggrObject, aggrProperty)

    unique###aggrObject 'Одиночная агрегация' (primObject) =
        GROUP UNIQUE aggrObject BY primProperty(aggrObject)
        WHERE aggrObject IS aggrObject;

    aggrProperty(primObject) => unique###aggrObject(primObject) RESOLVE TRUE;

    is###aggrObject(aggrObject) = aggrObject IS aggrObject;
    is###aggrObject(aggrObject) => aggrProperty(primProperty(aggrObject)) RESOLVE FALSE;

END

META metaCodeDoubleAggregation (prim1Object, prim2Object, aggrObject, aggrProperty)

    prim1Object###aggrObject = DATA prim1Object (aggrObject);
    prim2Object###aggrObject = DATA prim2Object (aggrObject);

    @metaCodeDoublePropsAggregation(prim1Object###aggrObject, prim2Object###aggrObject, aggrObject, aggrProperty);

END

META metaCodeDoublePropsAggregation (prim1Property, prim2Property, aggrObject, aggrProperty)

    unique###aggrObject 'Двойная агрегация' (prim1Object, prim2Object) =
        GROUP UNIQUE aggrObject BY prim1Property(aggrObject), prim2Property(aggrObject)
        WHERE aggrObject IS aggrObject;

    aggrProperty(prim1Object, prim2Object) => unique###aggrObject(prim1Object, prim2Object) RESOLVE TRUE;

    is###aggrObject(aggrObject) = aggrObject IS aggrObject;
    is###aggrObject(aggrObject) => aggrProperty(prim1Property(aggrObject), prim2Property(aggrObject)) RESOLVE FALSE;

END


META metaCodeDetailAggregation (primObject, aggrObject, aggrProperty)

    @metaCodeSingleAggregation(primObject, aggrObject, aggrProperty);
    @metaCodeSingleAggregation(primObject##Detail, aggrObject##Detail, aggrProperty##Detail);

    aggrObject###aggrObject##Detail (detail) = unique###aggrObject(primObject###primObject##Detail(primObject##Detail###aggrObject##Detail(detail)));

END

META metaCodeTotals (object)

    sumVatWare###object##Detail 'Сумма НДС по посуде, за ед.' (object##Detail) = [round0(X*Y/(100+Y))](
        priceWare###object##Detail (object##Detail), dataWareRange###object##Detail(object##Detail));

    sumDetailVatWare###object##Detail 'Сумма НДС по посуде' (object##Detail) =
        sumVatWare###object##Detail(object##Detail) * quantity###object##Detail(object##Detail);

    withoutWarePrice###object##Detail 'Цена без посуды' (object##Detail) = retailPrice###object##Detail(object##Detail) (-)
        priceWare###object##Detail(object##Detail);

    sumRetailVAT###object##Detail 'Сумма НДС за ед. (без посуды)' (object##Detail) = [X*Y/(100+Y)](
        withoutWarePrice###object##Detail(object##Detail), dataRetailRange###object##Detail(object##Detail));

    sumDetailVat###object##Detail 'Сумма НДС (без посуды)' (object##Detail) =
        sumRetailVAT###object##Detail(object##Detail) * quantity###object##Detail(object##Detail);

    sumMarkup###object##Detail 'Сумма надбавки, за ед.' (object##Detail) = withoutWarePrice###object##Detail(object##Detail) (-)
        sumRetailVAT###object##Detail(object##Detail) (-) supplierPrice###object##Detail(object##Detail);

    sumDetailMarkup###object##Detail 'Сумма надбавки' (object##Detail) =
        sumMarkup###object##Detail(object##Detail) * quantity###object##Detail(object##Detail);

    totalSumSupplierPrice###object##Detail 'Сумма без НДС' (object##Detail) = supplierPrice###object##Detail(object##Detail)*quantity###object##Detail(object##Detail) PERSISTENT;
    totalSumWare###object##Detail 'Сумма посуды' (object##Detail) = priceWare###object##Detail (object##Detail)*quantity###object##Detail(object##Detail);


    totalSumSupplierPrice###object 'Сумма без НДС' (object) = GROUP SUM totalSumSupplierPrice###object##Detail(object##Detail)
        BY object###object##Detail(object##Detail);

    totalSumWare###object 'Сумма посуды' (object) = GROUP SUM totalSumWare###object##Detail(object##Detail)
        BY object###object##Detail(object##Detail);

    totalSumVatWare###object 'Сумма НДС по посуде' (object) =  GROUP SUM sumDetailVatWare###object##Detail(object##Detail)
        BY object###object##Detail(object##Detail);

    totalSumRetailVAT###object 'Сумма розничного НДС(без посуды)' (object) = GROUP SUM sumDetailVat###object##Detail(object##Detail)
        BY object###object##Detail(object##Detail);

    totalSumMarkup###object 'Сумма надбавки' (object) = GROUP SUM sumDetailMarkup###object##Detail(object##Detail)
        BY object###object##Detail(object##Detail);

    //для цен и НДС поставщика

    sumSupplierPrice###object##Detail 'Сумма без НДС' (object##Detail) =
        supplierPrice###object##Detail(object##Detail) * quantity###object##Detail(object##Detail);

    sumSupplierVAT###object##Detail 'Сумма НДС, за ед.' (object##Detail) = [round0(X*Y/100)](
        supplierPrice###object##Detail(object##Detail), dataSuppliersRange###object##Detail(object##Detail));

    sumDetailSupplierVAT###object##Detail 'Сумма НДС' (object##Detail) = DATA DOUBLE (object##Detail) IN baseGroup;
    sumDetailSupplierVAT###object##Detail(object##Detail) <-
        sumSupplierVAT###object##Detail(object##Detail) * quantity###object##Detail(object##Detail)
        ON CHANGE quantity###object##Detail(object##Detail);

    sumSupplier###object##Detail 'Сумма с НДС' (object##Detail) = DATA DOUBLE (object##Detail) IN baseGroup;
    sumSupplier###object##Detail(object##Detail) <-
    (sumSupplierPrice###object##Detail(object##Detail) (+) sumDetailSupplierVAT###object##Detail(object##Detail))
        ON CHANGE quantity###object##Detail(object##Detail);

    totalSumSupplierVAT###object 'Общая сумма НДС поставщика (без посуды)' (object) =
        GROUP SUM sumDetailSupplierVAT###object##Detail(object##Detail) BY object###object##Detail(object##Detail);

    totalSumCleanSupplier###object 'Общая сумма поставщика с НДС (без посуды)' (object) =
        GROUP SUM sumSupplier###object##Detail(object##Detail) BY object###object##Detail(object##Detail);

    totalSumIncVAT###object 'Общая сумма НДС' (object) =
        totalSumSupplierVAT###object(object) (+) totalSumVatWare###object(object) IN documentSumGroup PERSISTENT;

    totalSumSupplier###object 'Общая сумма с НДС' (object) =
        totalSumCleanSupplier###object(object) (+) totalSumWare###object(object) IN documentSumGroup PERSISTENT;

END


// ----------------------------------- Товарный классификатор ------------------------------------------ //
CLASS itemGroup 'Товарная группа' : named, externalObject;
TABLE itemGroup(itemGroup);
TABLE itemGroupItemGroup (itemGroup, itemGroup);

parentItemGroup = DATA itemGroup (itemGroup); //AUTOSET;  --  пока не имеет смысла проставляет не ту группу
inParentItemGroupItemGroup (child, parent) = parentItemGroup(child) == parent;

nameParentItemGroup 'Родительская группа' = name(parentItemGroup(itemGroup));
maxTurnoverItemGroup 'Максимально допустимая товарооборачиваемость' (itemGroup) = DATA INTEGER (itemGroup);
minTurnoverItemGroup 'Минимально допустимая товарооборачиваемость' (itemGroup) = DATA INTEGER (itemGroup);

pieceNumeratorItemGroup = DATA numerator (itemGroup);
namePieceNumeratorItemGroup 'Нумератор штрих-кодов (для штучного товара)' (itemGroup) = name(pieceNumeratorItemGroup(itemGroup));

weightNumeratorItemGroup = DATA numerator (itemGroup);
nameWeightNumeratorItemGroup 'Нумератор штрих-кодов (для весового товара)' (itemGroup) = name(weightNumeratorItemGroup(itemGroup));

childNumberItemGroup 'Кол-во непосредственных потомков' (itemGroup) = GROUP SUM 1 BY parentItemGroup(group) PERSISTENT;

isLeafItemGroup 'Лист' (itemGroup) = itemGroup IS itemGroup AND NOT childNumberItemGroup(itemGroup) PERSISTENT;

hasParentItemGroupLevel 'Уровень' (child, parent) = RECURSION 1l AND child IS itemGroup AND parent == child
                                                                  STEP 2l AND parent == parentItemGroup($parent) PERSISTENT;
TABLE itemGroupStructure(itemGroup, itemGroup, LONG);

hasParentItemGroup 'Уровень' (child, parent) = TRUE AND hasParentItemGroupLevel(child, parent);

hasParentAndLeafItemGroup (child, parent) = hasParentItemGroup(child, parent) AND isLeafItemGroup(child);

canonicalNameItemGroup 'Каноническое имя' (itemGroup) = castToString255(
                           [GROUP CONCAT name(parent), ' / ' BY child ORDER DESC hasParentItemGroupLevel(child, parent)](itemGroup))

                           MINCHARWIDTH 50 MAXCHARWIDTH 100 PREFCHARWIDTH 100 PERSISTENT;
//levelItemGroup 'Уровень' (itemGroup) = GROUP SUM 1 IF hasParentItemGroup(child, parent) BY child PERSISTENT;

// формы за формами товара

// ----------------------------------- Единицы измерения ------------------------------------------ //
CLASS unitOfMeasure 'Единица измерения' : doubleNamed, externalObject;

unitOfMeasureUnitOfMeasure 'Базовая ед.изм. ИД' = DATA unitOfMeasure(unitOfMeasure) IN idGroup;
shortNameUnitOfMeasureUnitOfMeasure 'Базовая ед.изм.' (unitOfMeasure) = shortName(unitOfMeasureUnitOfMeasure(unitOfMeasure)) IN baseGroup;
rightUnitOfMeasure 'Разместить от значения: справа' = DATA BOOLEAN (unitOfMeasure) IN baseGroup;
useUnitOfMeasure 'Используется' = DATA BOOLEAN (unitOfMeasure) IN baseGroup;
factorUnitOfMeasure 'Коэффициент пересчета в баз.ед.' = DATA DOUBLE (unitOfMeasure) IN baseGroup;
weightUnitOfMeasure 'Для весовых товаров/услуг' = DATA BOOLEAN (unitOfMeasure) IN baseGroup;
pieceUnitOfMeasure 'Для штучных товаров/услуг' = DATA BOOLEAN (unitOfMeasure) IN baseGroup;


FORM unitOfMeasure 'Единица измерения'
OBJECTS u=unitOfMeasure FIXED PANEL
PROPERTIES(u) name, shortName, shortNameUnitOfMeasureUnitOfMeasure, factorUnitOfMeasure, rightUnitOfMeasure,
              useUnitOfMeasure, weightUnitOfMeasure, pieceUnitOfMeasure
EDIT unitOfMeasure OBJECT u;

FORM unitsOfMeasure 'Единицы измерений'
OBJECTS u=unitOfMeasure
PROPERTIES(u) READONLY name, shortName, shortNameUnitOfMeasureUnitOfMeasure, factorUnitOfMeasure, rightUnitOfMeasure,
              useUnitOfMeasure, weightUnitOfMeasure, pieceUnitOfMeasure
PROPERTIES(u) ADDFORM, EDITFORM, delete;

// ------------------------------------ Цвета ------------------------------------------------ //
CLASS color 'Цвет' : named;

FORM color 'Цвет'
OBJECTS c=color FIXED PANEL
PROPERTIES(c) name;

// ------------------------------------ Вкусы ------------------------------------------------------ //
CLASS taste 'Вкус' : named;

FORM taste 'Вкус'
OBJECTS t=taste FIXED PANEL
PROPERTIES(t) name;

// ----------------------------------- Производители ---------------------------------- //
//CLASS manufacturer 'Производитель' : named;

//------------------------------------ Сорта-категории --------------------------------- //
CLASS sort 'Сорт/Категория' : named;

FORM sort 'Сорт/Категория'
OBJECTS s=sort FIXED PANEL
PROPERTIES(s) name;

//------------------------------------ Упаковки ----------------------------------------//
CLASS pack 'Упаковка' : doubleNamed;

FORM pack 'Упаковка'
OBJECTS p=pack FIXED PANEL
PROPERTIES(p) name, shortName;

//------------------------------------ Особенности изготовления ------------------------//
CLASS specialty 'Особенность' : doubleNamed;

FORM specialty 'Особенность'
OBJECTS s=specialty FIXED PANEL
PROPERTIES(s) name, shortName;

//------------------------------------ Размеры/Калибры/Габариты ------------------------//
CLASS size 'Размер/калибр' : doubleNamed;

FORM size 'Размер/калибр'
OBJECTS s=size FIXED PANEL
PROPERTIES(s) name, shortName;

//------------------------------------ Степень охлаждения ------------------------//
CLASS coolingDegree 'Степень охлаждения' : doubleNamed;

FORM coolingDegree 'Степень охлаждения'
OBJECTS c=coolingDegree FIXED PANEL
PROPERTIES(c) name, shortName;

//------------------------------- Строки 1-торг ------------------------------------//
CLASS rowTorg1 'Строка формы 1-торг' : named;

FORM rowTorg1 'Строка формы 1-торг'
OBJECTS r=rowTorg1 FIXED PANEL
PROPERTIES(r) name;

//------------------------------- Виды ------------------------------------//
CLASS typeItem 'Вид' : named;

FORM typeItem 'Вид'
OBJECTS t=typeItem FIXED PANEL
PROPERTIES(t) name;

//--------------------------------- Форма товара (особенности нарезки/разделки)  --------------------------//
CLASS formItem 'Форма товара' : named;

FORM formItem 'Форма товара'
OBJECTS f=formItem FIXED PANEL
PROPERTIES(f) name;

//--------------------------------- Кол-во в упаковке --------------------------//
//CLASS numberInPack 'Кол-во в упаковке' : named;
//
//FORM numberInPack 'Кол-во в упаковке'
//OBJECTS n=numberInPack FIXED PANEL
//PROPERTIES(n) name;

//---------------------------------- Норма отходов ------------------------------------//
CLASS rateWaste 'Норма отходов' : named, externalObject;

percentRateWaste 'Норма,%' = DATA DOUBLE (rateWaste) IN baseGroup;

FORM rateWaste 'Норма отходов'
OBJECTS r=rateWaste FIXED PANEL
PROPERTIES(r) name, percentRateWaste;

// ----------------------------------- Склад ------------------------------------------ //

CLASS ABSTRACT stock 'Склад' : named;

// ----------------------------------- Магазин ----------------------------------------- //

CLASS store 'Магазин' : named, externalObject;
CLASS tradingNetwork 'Торговая сеть' : named, externalObject; // "Рублевский", "Базар"
CLASS storeType 'Формат магазина' : named; //Мини, Супер, ...

companyStore 'Юридическое лицо магазина (ИД)' = DATA company (store);
nameCompanyStore 'Компания' (store) = name(companyStore(store)) IN baseGroup;
addressStore 'Адрес магазина' = DATA STRING[100] (store);

storeTypeStore 'Формат магазина (ИД)' = DATA storeType (store) AUTOSET;
nameStoreTypeStore 'Формат магазина' (store) = name(storeTypeStore(store)) IN baseGroup;
inStoreTypeStore (storeType, store) = storeTypeStore (store) == storeType;

tradingNetworkStoreType 'Торговая сеть формата магазина (ИД)' = DATA tradingNetwork (storeType);
nameTradingNetworkStoreType 'Торговая сеть формата магазина' (storeType) = name(tradingNetworkStoreType(storeType)) IN baseGroup;
nameToStoreType 'Формат магазина по имени и торговой сети' (name, tradingNetwork) = GROUP UNIQUE storeType BY name (storeType), tradingNetworkStoreType(storeType);

tradingNetworkStore 'Торговая сеть магазина (ИД)' (store) = tradingNetworkStoreType(storeTypeStore(store));
nameTradingNetworkStore 'Торговая сеть магазина' (store) = name(tradingNetworkStore(store)) IN baseGroup;
inTradingNetworkStore (tradingNetwork, store) = tradingNetworkStore(store) == tradingNetwork;

inTradingNetworkStoreTypeStore (tradingNetwork, storeType, store) = UNION OVERRIDE
    storeTypeStore(store) == storeType AND tradingNetwork,
    tradingNetworkStore(store) == tradingNetwork AND NOT storeType,
    store IS store AND NOT storeType AND NOT tradingNetwork;

inStoreTypeTradingNetwork(storeType, tradingNetwork) = tradingNetworkStoreType(storeType) == tradingNetwork;

// ----------------------------------- Торговая площадь -------------------------------------------------- //

CLASS tradingSquare 'Торговая площадь' : named;
squareTradingSquare 'Размер торговой площади' = DATA DOUBLE (tradingSquare) IN baseGroup;
departmentStoreTradingSquare 'Отдел торговой площади (ИД)' = DATA departmentStore (tradingSquare);
nameDepartmentStoreTradingSquare 'Отдел торговой площади' (tradingSquare) = name(departmentStoreTradingSquare(tradingSquare)) IN baseGroup;

dateTradingSquare 'Дата' = DATA DATE (tradingSquare) IN baseGroup;
dateTradingSquare (square) <- currentDate() ON ASSIGN square IS tradingSquare;

FORM tradingSquare 'Торговая площадь'
    OBJECTS s=tradingSquare FIXED PANEL
    PROPERTIES(s) name, squareTradingSquare, nameDepartmentStoreTradingSquare, dateTradingSquare
    EDIT tradingSquare OBJECT s
;

// ----------------------------------- Отдел магазина (Подразделение) ----------------------------------- //

GROUP orderDepartmentStoreGroup 'Заказ' : publicGroup;
GROUP controlDepartmentStoreGroup 'Контроль остатков' : publicGroup;
GROUP printDepartmentStoreGroup 'Печать' : publicGroup;

CLASS departmentStore 'Отдел магазина' : stock, externalObject;
TABLE departmentStore (departmentStore);

CLASS kafeteria 'Кафетерий' : departmentStore;
CLASS tradingFloar 'Торговый зал' : departmentStore;
CLASS wholesaleStock 'Оптовый склад' : departmentStore;
CLASS placeOfAcceptance 'Приемный пункт' : departmentStore;
CLASS restaurant 'Ресторан' : departmentStore;
//CLASS stock 'Склад' : departmentStore; в дальнейшем будет распределительный центр
CLASS manufactory 'Цех' : departmentStore;

CLASS STATIC itemStatus 'Статус товара'
{
    notTransfer '0',
    transfer '1',
    delete '2',
    requireTransfer '3',
    requireDelete '4'
};

storeDepartmentStore 'Магазин отдела (ИД)' = DATA store (departmentStore) AUTOSET;
nameStoreDepartmentStore 'Магазин' (departmentStore) = name(storeDepartmentStore(departmentStore)) IN baseGroup;
revaluationCommitteeDepartmentStore 'Комиссия переоценки (ИД)' = DATA revaluationCommittee (departmentStore);
nameRevaluationCommitteeDepartmentStore 'Комиссия переоценки' (departmentStore) = name(revaluationCommitteeDepartmentStore(departmentStore)) IN printDepartmentStoreGroup;

registerCommitteeDepartmentStore 'Комиссия для реестра (ИД)' = DATA registerCommittee (departmentStore);
nameRegisterCommitteeDepartmentStore 'Комиссия для реестра' (departmentStore) = name(registerCommitteeDepartmentStore(departmentStore)) IN printDepartmentStoreGroup;

controlMinusRestsDepartmentStore 'Контроль за минусовыми остатками' = DATA BOOLEAN (departmentStore) IN controlDepartmentStoreGroup;
deleteItemMinusRestsDepartmentStore 'Удалять товары с отрицательным остатком с весов и касс?' = DATA BOOLEAN (departmentStore) IN controlDepartmentStoreGroup;
controlMinusRestsContainerDepartmentStore 'Контроль за минусовыми остатками тары' = DATA BOOLEAN (departmentStore) IN controlDepartmentStoreGroup;
// controlAssortmentProviderDepartmentStore 'Контролировать ассортимент поставщиков в подразделении?' = DATA BOOLEAN (departmentStore);
verifyOrderArrivalDepartmentStore 'Сверять заказ и приход в подразделении?' = DATA BOOLEAN (departmentStore) IN controlDepartmentStoreGroup;
maxQuantityDeliveryHourDepartmentStore 'Максимальное допустимое число поставок в час' = DATA INTEGER (departmentStore) IN orderDepartmentStoreGroup;
resolveMaxQuantityDeliveryHourAssortmentLessDepartmentStore 'Разрешить превысить количество поставок/час при ассортименте <' = DATA DOUBLE (departmentStore) IN orderDepartmentStoreGroup;
resolveOrderItemDepartmentStore 'Разрешить заказ товара в подразделение?' = DATA BOOLEAN (departmentStore) IN orderDepartmentStoreGroup;
quantityCashChangeOneOperationAccountDepartmentStore 'Количество кассовых смен в одном оперативном отчете' = DATA INTEGER (departmentStore) IN orderDepartmentStoreGroup;
materiallyResponsiblePersonItemReportDepartmentStore 'Материально ответственное лицо, подписывающее товарный отчет (ИД)' = DATA employee (departmentStore);
commonNameMateriallyResponsiblePersonItemReportDepartmentStore 'Материально ответственное лицо, подписывающее товарный отчет' (departmentStore) =
    commonName (materiallyResponsiblePersonItemReportDepartmentStore(departmentStore)) IN printDepartmentStoreGroup;
bookkeeperItemReportDepartmentStore 'Бухгалтер, принимающий товарный отчет (ИД)' = DATA employee (departmentStore);
commonNameBookkeeperItemReportDepartmentStore 'Бухгалтер, принимающий товарный отчет' (departmentStore) = commonName(bookkeeperItemReportDepartmentStore(departmentStore)) IN printDepartmentStoreGroup;
personCheckReportDepartmentStore 'Кто проверяет товарный отчет (ИД)' = DATA employee (departmentStore);
commonNamePersonCheckReportDepartmentStore 'Кто проверяет товарный отчет' (departmentStore) = commonName(personCheckReportDepartmentStore(departmentStore)) IN printDepartmentStoreGroup;
idTradingSquareDepartmentStore 'Торговая площадь отдела магазина' (departmentStore) = GROUP MAX tradingSquare BY departmentStoreTradingSquare(tradingSquare);   //максимизирует только по ID, переделать после расширения функционала
defaultTradingSquareDepartmentStore 'Торговая площадь отдела магазина, кв.м.' (departmentStore) = squareTradingSquare(idTradingSquareDepartmentStore(departmentStore));
tradingSquareStore 'Торговая площадь магазина' = GROUP SUM defaultTradingSquareDepartmentStore(departmentStore) BY storeDepartmentStore(departmentStore);

inStoreDepartment(store, departmentStore) = storeDepartmentStore(departmentStore) == store;
inTradingSquareDepartmentStore(departmentStore, tradingSquare) = departmentStoreTradingSquare(tradingSquare) == departmentStore;

storeTypeDepartmentStore(departmentStore) = storeTypeStore(storeDepartmentStore(departmentStore)) PERSISTENT;
tradingNetworkDepartmentStore(departmentStore) = tradingNetworkStoreType(storeTypeDepartmentStore(departmentStore)) PERSISTENT;

inTradingNetworkStoreTypeStoreDepartment (tradingNetwork, storeType, store, department) = UNION OVERRIDE
    storeDepartmentStore(department) == store AND storeType AND tradingNetwork,
    storeTypeDepartmentStore(department) == storeType AND tradingNetwork AND NOT store,
    tradingNetworkDepartmentStore(department) == tradingNetwork AND NOT store AND NOT storeType,
    department IS departmentStore AND NOT store AND NOT storeType AND NOT tradingNetwork;

//---------------------------- Ценники ----------------------------------------//

CLASS STATIC printOrientation 'Ориентация' {
    portrait 'Книжная',
    landscape 'Альбомная'
}

CLASS labelType 'Тип ценника' : named;

widthLabelType 'Ширина' = DATA INTEGER (labelType);
heightLabelType 'Высота' = DATA INTEGER (labelType);

orientationLabelType = DATA printOrientation (labelType);
nameOrientationLabelType 'Ориентация' (labelType) = name(orientationLabelType(labelType));

fileTemplateLabelType 'Файл шаблона' = DATA STRING[200] (labelType);

inLabelTypeDepartmentStore 'Включен' (labelType, departmentStore) = DATA BOOLEAN (labelType, departmentStore);

defaultLabelTypeDepartmentStore = DATA labelType (departmentStore);
isDefaultLabelTypeDepartmentStore 'По умолчанию' (labelType, departmentStore) = defaultLabelTypeDepartmentStore(departmentStore) == labelType;

FORM labelType 'Тип ценника'
    OBJECTS l = labelType FIXED PANEL
    PROPERTIES(l) name, widthLabelType, heightLabelType, nameOrientationLabelType, fileTemplateLabelType

    TREE treeStore a=STRING[3], t=tradingNetwork, st=storeType, s=store
    PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS stringEqualsAll(a), inStoreTypeTradingNetwork (st, t), inStoreTypeStore(st, s)

    OBJECTS d=departmentStore
    PROPERTIES(d) READONLY depName = name
    FILTERS inTradingNetworkStoreTypeStoreDepartment(t, st, s, d)
    ORDER BY depName

    PROPERTIES inLabelTypeDepartmentStore(l, d), isDefaultLabelTypeDepartmentStore(l, d)

    EDIT labelType OBJECT l
;

DESIGN labelType FROM DEFAULT {
    POSITION treeStore.box TO THE LEFT d.box;
    treeStore.tree {
        fillHorizontal = 0.3;
    }
}

FORM labelTypes 'Типы ценников'
    OBJECTS l = labelType
    PROPERTIES(l) READONLY name, widthLabelType, heightLabelType, nameOrientationLabelType, fileTemplateLabelType
    PROPERTIES(l)          ADDFORM, EDITFORM, delete
;

// ----------------------------------- Товар ------------------------------------------ //
GROUP descriptionGroup 'Наименование' : publicGroup;
GROUP rateGroup 'Нормы' : publicGroup;
GROUP headGroup 'Базовые свойства' : baseGroup;
GROUP sizeGroup 'Ячеистое хранение' : publicGroup;
GROUP retailGroup 'Ценообразование' : publicGroup;
GROUP discountGroup 'Скидки' : retailGroup;
GROUP expiryGroup 'Контроль сроков годности' : publicGroup;
GROUP equipmentGroup 'Внешние устройства' : publicGroup;
GROUP substanceGroup 'Пищевые характеристики' : publicGroup;
GROUP labelGroup 'Ценник' : publicGroup;

GROUP manufactoryGroup 'Производство' : publicGroup;
GROUP orderGroup 'Заказ' : publicGroup;
GROUP barGroup 'Бар' : publicGroup;
GROUP documentGroup 'Для документов' : publicGroup;
GROUP displayGroup 'Свойства для отображения' : baseGroup;

CLASS ABSTRACT sku 'SKU';
TABLE sku(sku);

CLASS item 'Товар' : sku, externalObject;
TABLE item(item);

CLASS ware 'Посуда' : sku, named, externalObject;

CLASS brand 'Бренд' : named, externalObject;

CLASS STATIC groupProduct 'Группа изделий для печати заборного листа'
{
   hot 'Горячее',
   cold  'Холодное'
};

tmpSku() = SESSION DATA sku ();

//baseGroup
itemGroupSku = DATA itemGroup(sku) IN idGroup AUTOSET;
nameItemGroupSku 'Группа товара' (sku) = name(itemGroupSku(sku));
canonicalNameItemGroupSku 'Группа товара' (sku) = canonicalNameItemGroup(itemGroupSku(sku)) IN baseGroup;

TABLE itemGroupSku (itemGroup, sku);

hasParentItemGroupSku (itemGroup, sku) = hasParentItemGroup(itemGroupSku(sku), itemGroup) PERSISTENT;

//descriptionGroup
captionItem 'Название' = DATA STRING[100](item) IN descriptionGroup;
@metaCodeShowItemAttribute(Caption, 'Показывать наименование', displayGroup);

brandItem = DATA brand(item);
nameBrandItem 'Бренд' (item) = name(brandItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Brand, 'Показывать бренд', displayGroup);

typeItemItem = DATA typeItem(item) IN idGroup;
nameTypeItemItem 'Вид' = name(typeItemItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Type, 'Показывать тип', displayGroup);

unitOfMeasureItem = DATA unitOfMeasure (item) IN idGroup;
shortNameUnitOfMeasureItem 'Единица измерения' (item) = shortName(unitOfMeasureItem(item)) IN headGroup;
@metaCodeShowItemAttribute(UnitOfMeasure, 'Показывать ед.измерения', displayGroup);

sortItem = DATA sort(item) IN idGroup;
nameSortItem 'Сорт/категория товара' = name(sortItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Sort, 'Показывать сорт', displayGroup);

packItem = DATA pack(item) IN idGroup;
shortNamePackItem 'Упаковка' = shortName(packItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Pack, 'Показывать упаковку', displayGroup);

specialtyItem = DATA specialty(item) IN idGroup;
shortNameSpecialtyItem 'Особенности' = shortName(specialtyItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Specialty, 'Показывать особенности', displayGroup);

sizeItem = DATA size(item) IN idGroup;
shortNameSizeItem 'Размер/калибр' = shortName(sizeItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Size, 'Показывать размер', displayGroup);

colorItem = DATA color (item) IN idGroup;
nameColorItem 'Цвет' = name(colorItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Color, 'Показывать цвет', displayGroup);

tasteItem = DATA taste (item) IN idGroup;
nameTasteItem 'Вкус' = name(tasteItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(Taste, 'Показывать вкус', displayGroup);

hallmarkItem 'Отличительный признак (особенности)' = DATA STRING[100] (item) IN descriptionGroup;
@metaCodeShowItemAttribute(Hallmark, 'Показывать отличительный признак', displayGroup);

articleItem 'Артикул поставщика/производителя' = DATA STRING[100] (item) IN descriptionGroup;
@metaCodeShowItemAttribute(Article, 'Показывать артикул', displayGroup);

coolingDegreeItem 'Степень охлаждения (ИД)' = DATA coolingDegree (item) IN idGroup;
nameCoolingDegreeItem 'Степень охлаждения' = name(coolingDegreeItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(CoolingDegree, 'Показывать степень охлаждения', displayGroup);

countryItem = DATA country (item) IN idGroup;
nameCountryItem 'Страна' = name(countryItem(item)) IN headGroup;
@metaCodeShowItemAttribute(Country, 'Показывать страну', displayGroup);

extSIDCountry 'Внешний код страны' = DATA STRING[60] (country);
extSIDToCountry 'Страна по коду' (string) = GROUP UNIQUE country BY extSIDCountry (country) WHERE country IS country;

isManufacturedItem 'Товар производится' = DATA BOOLEAN (item) IN manufactoryGroup;
hintItem 'Подсказка по товару' = DATA STRING[200] (item) IN documentGroup;

formItemItem = DATA formItem (item) IN idGroup;
nameFormItemItem 'Форма товара (особенности нарезки/разделки)' = name(formItemItem(item)) IN descriptionGroup;
@metaCodeShowItemAttribute(FormItem, 'Показывать форму', displayGroup);

//numberInPackItem = DATA numberInPack (item) IN idGroup;
numberInPackItem 'Кол-во в упаковке' = DATA DOUBLE (item) IN orderGroup;
//@metaCodeShowItemAttribute(NumberInPack, 'Показывать кол-во в упаковке', displayGroup);

rateWasteItem = DATA rateWaste(item) IN idGroup;
nameRateWasteItem 'Норма отходов' = name(rateWasteItem(item)) IN rateGroup;
percentRateWasteItem 'Норма отходов,%' = percentRateWaste(rateWasteItem(item)) IN rateGroup;
@metaCodeShowItemAttribute(RateWaste, 'Показывать норму отходов', displayGroup);

wareItem = DATA ware (item) IN idGroup;
nameWareItem 'Посуда' = name(wareItem(item)) IN retailGroup;

inWareItem 'Товар в посуде' (item) = item IS item AND wareItem(item);

@metaCodeShowItemAttribute(Ware, 'Показывать посуду', displayGroup);

//equipmentGroup
isWeightItem 'Весовой товар' = DATA BOOLEAN (item) IN headGroup;
compositionScalesItem 'Состав товара (ингредиенты) для весов' = DATA TEXT (item) IN equipmentGroup;
isMarkItem 'Маркировать товар' = DATA BOOLEAN (item) IN equipmentGroup;
isLoafCutItem 'Буханка разрезается' = DATA BOOLEAN (item) IN equipmentGroup;
passScalesItem 'Передавать на весы' = DATA BOOLEAN (item) IN equipmentGroup;

//substanceGroup
percentFatItem '% жирности' =  DATA DOUBLE (item) IN substanceGroup;
percentAlcoholItem '% алкоголя' =  DATA DOUBLE (item) IN substanceGroup;
nutritionalValueItem 'Энергетическая и пищевая ценность' = DATA STRING[400] (item) IN substanceGroup MINCHARWIDTH 50;
energyItem 'Энергетическая ценность на 100г, ккал' = DATA DOUBLE (item) IN substanceGroup;
fatsItem 'Жиры на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
carbohydratesItem 'Углеводы на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
proteinsItem 'Белки на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
isContainGMOItem 'Содержит ГМО' = DATA BOOLEAN (item) IN substanceGroup;

//sizeGroup
lengthItem 'Длина товара' = DATA INTEGER (item) IN sizeGroup;
widthItem 'Ширина товара' = DATA INTEGER (item) IN sizeGroup;
heightItem 'Высота товара' = DATA INTEGER (item) IN sizeGroup;
grossWeightItem 'Вес брутто товара' = DATA DOUBLE (item) IN manufactoryGroup;
lengthPackItem 'Длина упаковки' = DATA INTEGER (item) IN sizeGroup;
widthPackItem 'Ширина упаковки' = DATA INTEGER (item) IN sizeGroup;
heightPackItem 'Высота упаковки' = DATA DOUBLE (item) IN sizeGroup;
grossWeightPackItem 'Вес брутто упаковки' = DATA DOUBLE (item) IN manufactoryGroup;
volumeItem 'Объём' = DATA DOUBLE (item) IN sizeGroup;
netWeightItem 'Вес нетто' = DATA DOUBLE (item) IN orderGroup;
quantityPackItem 'Количество в грузовом месте' = DATA DOUBLE (item) IN orderGroup;

//retailGroup
minQuantityOrderItem 'Минимальный заказ' = DATA INTEGER (item) IN orderGroup;
minReserveItem 'Минимальный резерв' = DATA INTEGER (item) IN orderGroup;
bonusReturnItem 'Уценка (бонус) по товару при возврате поставщику' = DATA DOUBLE (item) IN documentGroup;
nameReturnItem 'Наименование для уценки, бонуса по товару в возврат' = DATA STRING[200] (item) IN documentGroup;
quantityDiscountItem 'Количество товара, при котором предост-ся скидка' = DATA INTEGER (item) IN discountGroup;
fixPriceItem 'Фиксированная цена при соотв.типе скидки' = DATA INTEGER (item) IN discountGroup;
isFixPriceItem 'Товар с фиксированной ценой' = DATA BOOLEAN (item) IN retailGroup;
banMarkdownItem 'Запретить уценку товара' = DATA BOOLEAN (item) IN retailGroup;
minTradeAllowanceItem 'MIN допустимая торговая надбавка, %' = DATA DOUBLE (item) IN retailGroup;
maxTradeAllowanceItem 'MAX допустимая торговая надбавка, %' = DATA DOUBLE (item) IN retailGroup;
minAllowedRetailPriceItem 'MIN допустимая розн.цена' = DATA INTEGER (item) IN retailGroup;
bonusItem 'Бонус получаемый по товару' = DATA DOUBLE (item) IN documentGroup;
percentWholesaleMarkItem '% оптовой надбавки' = DATA DOUBLE (item) IN retailGroup;
banSailItem 'Запрет продаж товара в указанное время' = DATA STRING[200] (item) IN equipmentGroup;


//manufactoryGroup
isCrudeItem 'Товар-сырьё для калькуляции?' = DATA BOOLEAN (item) IN manufactoryGroup;

groupProductItem = DATA groupProduct (item) IN idGroup;
nameGroupProductItem 'Группа изделий для печати заборного листа' = name(groupProductItem(item)) IN manufactoryGroup;

compositionMenuItem 'Состав изделия для печати в меню' = DATA STRING[400] (item)IN manufactoryGroup MINCHARWIDTH 50;
standartItem 'Стандарт изготовления изделия (СТБ и пр.)' = DATA STRING[100] (item) IN manufactoryGroup MINCHARWIDTH 50;
normOutItem 'Норма выхода для печати в меню и калькуляцию' = DATA STRING[100] (item) IN manufactoryGroup MINCHARWIDTH 50;
groupMenuItem 'Группа для печати в меню' = DATA STRING[100] (item) IN manufactoryGroup MINCHARWIDTH 50;
isCutedItem 'Товар разрубается/прорабатывается' = DATA BOOLEAN (item) IN manufactoryGroup;
storageTemperatureItem 'Температура хранения' =  DATA STRING[100] (item) IN equipmentGroup MINCHARWIDTH 50;

//expiryGroup
controlExpiryItem 'Контролировать сроки годности товара?' = DATA BOOLEAN (item) IN expiryGroup;
daysExpiryItem 'Срок годности в днях' = DATA DOUBLE (item) IN expiryGroup;
daysExpiryPackItem 'Срок годности в днях с момента фасовки' = DATA DOUBLE (item) IN expiryGroup;
hoursExpiryPackItem 'Срок годности в часах с момента фасовки' = DATA INTEGER (item) IN expiryGroup;

rowTorg1Item 'Строка формы 1-торг (ИД)' = DATA rowTorg1(item) IN idGroup;

imageItem 'Изображение' = DATA IMAGEFILE (item);
loadImageItem 'Загрузить изображение' (item) = ACTION LOADFILE imageItem(item);

// ----------------------------------- Атрибуты ------------------------------------------ //

CLASS ABSTRACT itemAttribute 'Атрибут товара' : named;

TABLE itemItemAttribute(item, itemAttribute);

CLASS STATIC stringItemAttribute 'Строковый атрибут' {
    captionItem 'Название',
    article 'Артикул',
    hallmark 'Отличительный признак'
} : itemAttribute;

valueCaptionItemAttribute(item, attribute) = castToString255(captionItem(item)) AND attribute == stringItemAttribute.captionItem;
valueArticleItemAttribute(item, attribute) = castToString255(articleItem(item)) AND attribute == stringItemAttribute.article;
valueHallmarkItemAttribute(item, attribute) = castToString255(hallmarkItem(item)) AND attribute == stringItemAttribute.hallmark;

valueStringItemAttribute(item, attribute) = UNION EXCLUSIVE  valueCaptionItemAttribute(item, attribute),
                                                             valueArticleItemAttribute(item, attribute),
                                                             valueHallmarkItemAttribute(item, attribute);

CLASS STATIC integerItemAttribute 'Целочисленный атрибут' {
    length 'Длина',
    width 'Ширина',
    height 'Высота',
    numberInPack 'Количество в грузовом месте'
} : itemAttribute;

valueLengthItemAttribute(item, attribute) = lengthItem(item) AND attribute == integerItemAttribute.length;
valueWidthItemAttribute(item, attribute) = widthItem(item) AND attribute == integerItemAttribute.width;
valueHeightItemAttribute(item, attribute) = heightItem(item) AND attribute == integerItemAttribute.height;
valueNumberInPackItemAttribute(item, attribute) = numberInPackItem(item) AND attribute == integerItemAttribute.numberInPack;

valueIntegerItemAttribute(item, attribute) = UNION EXCLUSIVE valueLengthItemAttribute(item, attribute),
                                                             valueWidthItemAttribute(item, attribute),
                                                             valueHeightItemAttribute(item, attribute),
                                                             valueNumberInPackItemAttribute(item, attribute);
stringIntegerItemAttribute(item, attribute) = castToString255(valueIntegerItemAttribute(item, attribute));

CLASS STATIC doubleItemAttribute 'Дробный атрибут' {
    netWeight 'Вес нетто',
    grossWeight 'Вес брутто',
    volume 'Объём',
    percentFat '% жирности',
    percentAlcohol '% алкоголя'
} : itemAttribute;

valueNetWeightItemAttribute(item, attribute) = netWeightItem(item) AND attribute == doubleItemAttribute.netWeight;
valueGrossWeightItemAttribute(item, attribute) = grossWeightItem(item) AND attribute == doubleItemAttribute.grossWeight;
valueVolumeItemAttribute(item, attribute) = volumeItem(item) AND attribute == doubleItemAttribute.volume;
valuePercentFatItemAttribute(item, attribute) = percentFatItem(item) AND attribute == doubleItemAttribute.percentFat;
valuePercentAlcoholItemAttribute(item, attribute) = percentAlcoholItem(item) AND attribute == doubleItemAttribute.percentAlcohol;

valueDoubleItemAttribute(item, attribute) = UNION EXCLUSIVE valueNetWeightItemAttribute(item, attribute),
                                                            valueGrossWeightItemAttribute(item, attribute),
                                                            valueVolumeItemAttribute(item, attribute),
                                                            valuePercentFatItemAttribute(item, attribute),
                                                            valuePercentAlcoholItemAttribute(item, attribute);

stringDoubleItemAttribute(item, attribute) = castToString255(valueDoubleItemAttribute(item, attribute));

CLASS STATIC booleanItemAttribute 'Логический атрибут' {
    fixPrice 'Товар с фиксированной ценой',
    manufactured 'Товар производится'
} : itemAttribute;

valueFixPriceWeightItemAttribute(item, attribute) = isFixPriceItem(item) AND attribute == booleanItemAttribute.fixPrice;
valueManufacturedItemAttribute(item, attribute) = isManufacturedItem(item) AND attribute == booleanItemAttribute.manufactured;

valueBooleanItemAttribute(item, attribute) = UNION EXCLUSIVE valueFixPriceWeightItemAttribute(item, attribute),
                                                             valueManufacturedItemAttribute(item, attribute);
stringBooleanItemAttribute(item, attribute) = castToString255(valueBooleanItemAttribute(item, attribute));

CLASS STATIC objectItemAttribute 'Объектный атрибут' {
    itemGroup 'Группа',
    unitOfMeasure 'Единица измерения',
    brand 'Брэнд',
    typeItem 'Вид',
    formItem 'Форма',
    sort 'Сорт/категория',
    pack 'Упаковка',
    specialty 'Особенность',
    size 'Размер/калибр',
    coolingDegree 'Степень охлаждения',
    color 'Цвет',
    taste 'Вкус',
    countryOrigin 'Страна происхождения/производства'

} : itemAttribute;

valueItemGroupItemAttribute(item, attribute) = itemGroupSku(item) AND item IS item AND attribute == objectItemAttribute.itemGroup;
valueUOMItemAttribute(item, attribute) = unitOfMeasureItem(item) AND attribute == objectItemAttribute.unitOfMeasure;
valueBrandItemAttribute(item, attribute) = brandItem(item) AND attribute == objectItemAttribute.brand;
valueTypeItemAttribute(item, attribute) = typeItemItem(item) AND attribute == objectItemAttribute.typeItem;
valueFormItemAttribute(item, attribute) = formItemItem(item) AND attribute == objectItemAttribute.formItem;
valueSortItemAttribute(item, attribute) = sortItem(item) AND attribute == objectItemAttribute.sort;
valuePackItemAttribute(item, attribute) = packItem(item) AND attribute == objectItemAttribute.pack;
//valueNumberInPackItemAttribute(item, attribute) = numberInPackItem(item) AND attribute == objectItemAttribute.numberInPack;
valueSpecialtyItemAttribute(item, attribute) = specialtyItem(item) AND attribute == objectItemAttribute.specialty;
valueSizeItemAttribute(item, attribute) = sizeItem(item) AND attribute == objectItemAttribute.size;
valueCoolingDegreeItemAttribute(item, attribute) = coolingDegreeItem(item) AND attribute == objectItemAttribute.coolingDegree;
valueColorItemAttribute(item, attribute) = colorItem(item) AND attribute == objectItemAttribute.color;
valueTasteItemAttribute(item, attribute) = tasteItem(item) AND attribute == objectItemAttribute.taste;
valueCountryItemAttribute(item, attribute) = countryItem(item) AND attribute == objectItemAttribute.countryOrigin;

valueObjectItemAttribute(item, attribute) = UNION EXCLUSIVE valueItemGroupItemAttribute(item, attribute),
                                                            valueUOMItemAttribute(item, attribute),
                                                            valueBrandItemAttribute(item, attribute),
                                                            valueTypeItemAttribute(item, attribute),
                                                            valueFormItemAttribute(item, attribute),
                                                            valueSortItemAttribute(item, attribute),
                                                            valuePackItemAttribute(item, attribute),
                                                           // valueNumberInPackItemAttribute(item, attribute),
                                                            valueSpecialtyItemAttribute(item, attribute),
                                                            valueSizeItemAttribute(item, attribute),
                                                            valueCoolingDegreeItemAttribute(item, attribute),
                                                            valueColorItemAttribute(item, attribute),
                                                            valueTasteItemAttribute(item, attribute),
                                                            valueCountryItemAttribute(item, attribute) PERSISTENT;
nameObjectItemAttribute(item, attribute) = name(valueObjectItemAttribute(item, attribute));

CLASS STATIC objectItemShortAttribute 'Объектный краткий атрибут' {
    shortUnitOfMeasure 'Единица измерения (сокр.)',
    shortPack 'Упаковка (сокр.)',
    shortSpecialty 'Особенность (сокр.)',
    shortSize 'Размер/калибр (сокр.)',
    shortCoolingDegree 'Степень охлаждения (сокр.)'

} : itemAttribute;

valueUOMItemShortAttribute(item, attribute) = unitOfMeasureItem(item) AND attribute == objectItemShortAttribute.shortUnitOfMeasure;
valuePackItemShortAttribute(item, attribute) = packItem(item) AND attribute == objectItemShortAttribute.shortPack;
valueSpecialtyItemShortAttribute(item, attribute) = specialtyItem(item) AND attribute == objectItemShortAttribute.shortSpecialty;
valueSizeItemShortAttribute(item, attribute) = sizeItem(item) AND attribute == objectItemShortAttribute.shortSize;
valueCoolingDegreeItemShortAttribute(item, attribute) = coolingDegreeItem(item) AND attribute == objectItemShortAttribute.shortCoolingDegree;

valueObjectItemShortAttribute(item, attribute) = UNION EXCLUSIVE valueUOMItemShortAttribute(item, attribute),
                                                            valuePackItemShortAttribute(item, attribute),
                                                            valueSpecialtyItemShortAttribute(item, attribute),
                                                            valueSizeItemShortAttribute(item, attribute),
                                                            valueCoolingDegreeItemShortAttribute(item, attribute) PERSISTENT;

shortNameObjectItemAttribute(item, attribute) = shortName(valueObjectItemShortAttribute(item, attribute));

valueItemAttribute(item, attribute) = UNION EXCLUSIVE valueStringItemAttribute(item, attribute),
                                                      stringIntegerItemAttribute(item, attribute),
                                                      stringDoubleItemAttribute(item, attribute),
                                                      stringBooleanItemAttribute(item, attribute),
                                                      nameObjectItemAttribute(item, attribute),
                                                      shortNameObjectItemAttribute(item, attribute) PERSISTENT;

numberInNameItemAttribute 'Порядковый номер в наименовании' = DATA INTEGER (itemAttribute) IN baseGroup;
numberInNameCashItemAttribute 'Порядковый номер в наименовании для касс' = DATA INTEGER (itemAttribute) IN baseGroup;
numberInNameScalesItemAttribute 'Порядковый номер в наименовании для весов' = DATA INTEGER (itemAttribute) IN baseGroup;

nameAttributeItem 'Наименование' (item) = castToString255(
                [GROUP CONCAT valueItemAttribute(item, attribute), ' ' BY item ORDER numberInNameItemAttribute(attribute)](item))
                IN recognizeGroup PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 80 INDEXED AGGPROP;
nameCashAttributeItem 'Наименование для касс' (item) = castToString255(
                [GROUP CONCAT valueItemAttribute(item, attribute), ' ' BY item ORDER numberInNameCashItemAttribute(attribute)](item))
                PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 80;
nameScalesAttributeItem 'Наименование для весов' (item) = castToString255(
                [GROUP CONCAT valueItemAttribute(item, attribute), ' ' BY item ORDER numberInNameScalesItemAttribute(attribute)](item))
                PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 80;

nameAttributeItemGroupItem 'Наименование' (itemGroup, item) = nameAttributeItem(item) AND hasParentItemGroupSku(itemGroup, item) PERSISTENT INDEXED;

// ---------------------------------------------------------------------------------------- //

TABLE departmentStoreDate (object, DATE);

TABLE stringDate (STRING[14], DATE);

// ----------------------------------- Штрих код ------------------------------------------ //

GROUP barcodeGroup : baseGroup;

CLASS barcode 'Штрих код';
TABLE barcode (barcode);

barcodeEx 'Штрих код' = DATA STRING[14] (barcode) IN recognizeGroup FIXEDCHARWIDTH 14 INDEXED;

dateUserBarcode 'Дата действия' = DATA DATE (barcode) IN baseGroup;
dateBarcode 'Дата действия' = UNION OVERRIDE 2001_01_01 IF barcode IS barcode, dateUserBarcode(barcode) IN baseGroup PERSISTENT;

skuBarcode = DATA sku(barcode) IN baseGroup;
nameSkuBarcode 'Товар штрих-кода' (barcode) = nameAttributeItem(skuBarcode(barcode)) IN recognizeGroup;

hasParentItemGroupBarcode (itemGroup, barcode) = hasParentItemGroupSku(itemGroup, skuBarcode(barcode));

barcodeToDate 'Штрих-код на дату' (string, date) = GROUP UNIQUE barcode BY barcodeEx(barcode), dateBarcode(barcode) PERSISTENT;

barcodeStringDate 'Дата действия' (string, date) = GROUP MAX LIST(dateSet, barcodeToDate(string, dateSet)) IF dateSet <= date AND date AS DATE BY string, date IN baseGroup;
valueBarcodeToDate 'Штрих-код на дату' (string, date) = barcodeStringDate(string, date)[2];

valueBarcodeToCurrentDate 'Штрих-код на тек. дату' (string) = valueBarcodeToDate(string, currentDate());

skuBarcodeStringDate 'Товар (ИД)' (string, date) = skuBarcode(valueBarcodeToDate(string, date));
nameSkuStringDate 'Товар' (string, date) = nameAttributeItem(skuBarcodeStringDate(string, date));

activeBarcodeDate 'Активный' (barcode, date) = valueBarcodeToDate(barcodeEx(barcode), date) == barcode;
activeBarcode 'Активный' (barcode) = valueBarcodeToCurrentDate(barcodeEx(barcode)) == barcode;

titleOriginScalesBarcode 'Наименование для весов' = DATA STRING[100] (barcode);
titleOriginCashBarcode 'Наименование для касс' = DATA STRING[100] (barcode);

titleScalesSkuBarcode 'Наименование для весов' = nameScalesAttributeItem(skuBarcode(barcode));
titleCashSkuBarcode 'Наименование для касс' = nameCashAttributeItem(skuBarcode(barcode));

titleScalesBarcode 'Наименование для весов' = UNION OVERRIDE titleScalesSkuBarcode(barcode), titleOriginScalesBarcode(barcode) IN barcodeGroup MINCHARWIDTH 30 PREFCHARWIDTH 30;
titleCashBarcode 'Наименование для касс' = UNION OVERRIDE titleCashSkuBarcode(barcode), titleOriginCashBarcode(barcode) IN barcodeGroup MINCHARWIDTH 30 PREFCHARWIDTH 30;

unitOfMeasureSkuBarcode (barcode) = unitOfMeasureItem(skuBarcode(barcode)) IN idGroup;
unitOfMeasureOriginBarcode = DATA unitOfMeasure (barcode) IN idGroup;
unitOfMeasureBarcode = UNION OVERRIDE unitOfMeasureSkuBarcode (barcode), unitOfMeasureOriginBarcode(barcode) IN idGroup;
shortNameUnitOfMeasureBarcode 'Единица измерения' (barcode) = shortName(unitOfMeasureBarcode(barcode)) IN barcodeGroup;

amountUserBarcode 'Количество (сколько списать при продаже)' = DATA DOUBLE (barcode) IN barcodeGroup;
amountBarcode 'Количество (сколько списать при продаже)' = UNION OVERRIDE 1.0 IF barcode IS barcode, amountUserBarcode (barcode) IN barcodeGroup;
removeBarcode 'Заблокирован (удален с оборудования)' = DATA BOOLEAN (barcode) IN barcodeGroup;
commentRemoveBarcode 'Причина блокировки' = DATA STRING[100] (barcode) IN barcodeGroup;

userBarcodeSku = DATA barcode(sku) IN idGroup;
barcodeUserBarcodeSku 'Основной штрих-код' = barcodeEx(userBarcodeSku(sku)) IN baseGroup;

defaultBarcodeSku(sku) = GROUP MIN barcode BY skuBarcode(barcode) IN idGroup;
barcodeSku(sku) = UNION OVERRIDE defaultBarcodeSku(sku), userBarcodeSku(sku) IN baseGroup PERSISTENT;

primarySkuBarcode 'Основной штрих-код' (sku, barcode) = barcodeSku(sku) == barcode;

CONSTRAINT skuBarcode(barcodeSku(item)) != item CHECKED BY userBarcodeSku MESSAGE 'Товар основного штрих-кода должен совпадать с товаром';

barcodeBarcodeSku 'Основной штрих-код' = barcodeEx(barcodeSku(sku)) IN baseGroup PERSISTENT;
//barcodeToBarcode (barcode) = GROUP UNIQUE barcode BY barcodeEx(barcode);

inSkuBarcode(sku, barcode) = skuBarcode(barcode) == sku;

concatBarcodeBySkuDate 'Штрих-кода товара' (sku, date) = GROUP CONCAT barcodeEx(barcode) IF dateBarcode(barcode) <= date AND date AS DATE, ', ' BY skuBarcode(barcode), date IN baseGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;

pieceNumeratorSku (sku) = pieceNumeratorItemGroup(itemGroupSku(sku));
weightNumeratorSku (sku) = weightNumeratorItemGroup(itemGroupSku(sku));

tmpNum = SESSION DATA numerator();

generateBarcodeSku 'Сгенерировать штрих-код' = ACTION (sku) {
    ADDOBJ barcode;
    FOR b == addedObject() DO {
        SET skuBarcode(b) <- sku AS sku;
        IF isWeightItem(sku) THEN
            SET tmpNum() <- weightNumeratorSku(sku)
        ELSE
            SET tmpNum() <- pieceNumeratorSku(sku);
        SET barcodeEx(b) <- curStringValueNumerator(tmpNum());
        EXEC incrementValueNumerator(tmpNum());
    };
} TOOLBAR CONFIRM;


FORM barcode 'Штрих-код'
    OBJECTS       b=barcode
    PROPERTIES(b) barcodeEx, dateBarcode
;

FORM barcodeInput 'Ввод штрих-кода'
    OBJECTS             barcode=STRING[14] FIXED PANEL
    PROPERTIES(barcode) objValue = OBJVALUE
;

DESIGN barcodeInput FROM DEFAULT {
    PROPERTY (objValue) {
        caption = 'Штрих-код';
        font = 'Tahoma bold 64';
        panelLabelAbove = TRUE;
    }
}

// ----------------------------------- Компоненты ------------------------------------------ //
CLASS component 'Компонент' : sku, named;

nettoBruttoCoeffComponent 'Сезонный коэффициент пересчета сырья из нетто в брутто' (component) = DATA DOUBLE (component) IN manufactoryGroup;
percentHumidityFlourDepartmentStoreComponent '% влажности муки' = DATA DOUBLE (departmentStore, component) IN manufactoryGroup;

FORM component 'Компонент'
OBJECTS c=component FIXED PANEL
PROPERTIES(c) name, nettoBruttoCoeffComponent
EDIT component OBJECT c;

FORM components 'Компоненты'
OBJECTS c=component
PROPERTIES(c) READONLY name, nettoBruttoCoeffComponent
PROPERTIES(c) ADDFORM, EDITFORM, delete;


// ----------------------------------- Генерация графика --------------------------------------- //

CLASS STATIC genType 'Тип генерации' {
    genWeek 'Генерация каждые N недель',
    genDays 'Генерация через N дней',
    genNumber 'Генерация по числам',
    genDayMonth 'Генерация по дням недели и месяца'
};

CLASS genTimeTable 'Генерация графика' : historyObject;

//общие свойства
genTimeTableType 'Тип генерации графика (ИД)' = DATA genType (genTimeTable);
nameGenTimeTableType 'Тип генерации графика' (genTimeTable) = name(genTimeTableType(genTimeTable)) IN baseGroup;

supplierGenTimeTable 'Поставщик (ИД)' = DATA supplier (genTimeTable) AUTOSET;
nameSupplierGenTimeTable 'Поставщик' (genTimeTable) = name(supplierGenTimeTable(genTimeTable)) IN baseGroup;

departmentStoreGenTimeTable 'Подразделение (ИД)' = DATA departmentStore (genTimeTable) AUTOSET;
nameDepartmentStoreGenTimeTable 'Подразделение' (genTimeTable) = name(departmentStoreGenTimeTable(genTimeTable)) IN baseGroup;

startDateGenTimeTable 'Дата начала' = DATA DATE (genTimeTable) IN baseGroup;
endDateGenTimeTable 'Дата окончания' = DATA DATE (genTimeTable) IN baseGroup;

dayBeforeGenTimeTable 'За сколько дней формировать заказ' = DATA INTEGER (genTimeTable);

//свойства "Каждые N недель"
periodGenTimeTable 'По прошествии скольки недель будет осуществится следующая поставка' = DATA INTEGER (genTimeTable);

//свойства "Каждые N дней"
dayAfterGenTimeTable 'Через сколько дней после последней поставки делать заказ' = DATA INTEGER (genTimeTable);
dayLastOrderGenTimeTable 'Дата последнего заказа' = DATA DATE (genTimeTable);

//свойства "По числам"
stringNumberGenTimeTable 'Числа месяца поставок (указывать через запятую)' = DATA STRING[100] (genTimeTable);
transferDayGenTimeTable 'День на который переносить поставки с Субботы и Воскресенья (ИД)' = DATA DOW (genTimeTable);
nameTransferDayGenTimeTable 'День на который переносить поставки с Субботы и Воскресенья' (genTimeTable) = name(transferDayGenTimeTable(genTimeTable));
CONSTRAINT transferDayGenTimeTable(genTimeTable) != DOW.friday AND transferDayGenTimeTable(genTimeTable) != DOW.monday CHECKED MESSAGE 'Выберите день с ПН по ПТ';

//свойства "По дням недели и месяца"
inMonthGenTimeTable 'Включать' = DATA BOOLEAN (genTimeTable, month);
inDayGenTimeTable 'Включать' = DATA BOOLEAN (genTimeTable, DOW);
inAllMonthGenTable 'Включить все месяцы' = DATA BOOLEAN (genTimeTable);
inMonthGenTimeTable(genTimeTable, month) <- inAllMonthGenTable(genTimeTable) ON ASSIGN inAllMonthGenTable(genTimeTable) AND month IS month;

toShowGenWeek (genTimeTable) = genTimeTableType(genTimeTable) == genType.genWeek;
toShowGenDay (genTimeTable) = genTimeTableType(genTimeTable) == genType.genDays;
toShowGenNumber (genTimeTable) = genTimeTableType(genTimeTable) == genType.genNumber;
toShowGenDayMonth (genTimeTable) = genTimeTableType(genTimeTable) == genType.genDayMonth;
toShowGenWeekOrDayMonth (genTimeTable) = UNION OVERRIDE toShowGenWeek(genTimeTable), toShowGenDayMonth(genTimeTable);

FORM genTimeTable 'Генерация графика'
OBJECTS g=genTimeTable FIXED PANEL, m=month, d=DOW
PROPERTIES(g) READONLY nameUserCreated, timeCreated
PROPERTIES(g) nameGenTimeTableType, nameDepartmentStoreGenTimeTable, nameSupplierGenTimeTable, startDateGenTimeTable,
              endDateGenTimeTable, dayBeforeGenTimeTable,inAllMonthGenTable SHOWIF toShowGenDayMonth(g),
              dayAfterGenTimeTable SHOWIF toShowGenDay(g), periodGenTimeTable SHOWIF toShowGenWeek(g),
              stringNumberGenTimeTable SHOWIF toShowGenNumber(g), nameTransferDayGenTimeTable SHOWIF toShowGenNumber(g),
              dayLastOrderGenTimeTable SHOWIF toShowGenDay(g)
PROPERTIES(m) READONLY name SHOWIF toShowGenDayMonth(g)
PROPERTIES(d) READONLY name SHOWIF toShowGenWeekOrDayMonth(g)
PROPERTIES(g, m) inMonthGenTimeTable SHOWIF toShowGenDayMonth(g)
PROPERTIES(g, d) inDayGenTimeTable SHOWIF toShowGenWeekOrDayMonth(g)
EDIT genTimeTable OBJECT g;

DESIGN genTimeTable FROM DEFAULT {
    g.panel {
        fillVertical = 0.5;
        preferredSize = (1280, 1024);
    }
    ADD g.historyGroup BEFORE functions.box;
}

showFormGenTimeTable 'Показать генерацию графика' (genTimeTable) = ACTION FORM genTimeTable OBJECTS g MODAL;

FORM genTimeTables 'Графики' //служит для добавления сущности "генерации графиков" и в дальнейшем будет удалена
OBJECTS g=genTimeTable
PROPERTIES(g) READONLY name
PROPERTIES(g) ADDFORM, EDITFORM, delete;

// ----------------------------------- Физические лица -------------------------------------------------- //

GROUP employeeGroup 'Пользовательская информация' : baseGroup;

CLASS ABSTRACT person 'Физическое лицо';
CLASS employee 'Сотрудник' : person, customUser;
CLASS employeeSystem 'Операционная система';
CLASS officer 'Должность' ;


nameEmployeeSystem 'Операционная система' = DATA STRING[100] (employeeSystem) IN employeeGroup;
employeeSystemEmployee(employee) = DATA employeeSystem (employee) IN idGroup;
nameEmployeeSystemEmployee 'Операционная система на рабочем месте пользователя' (employee) = nameEmployeeSystem(employeeSystemEmployee(employee)) IN employeeGroup;

nameOfficer 'Должность' = DATA STRING[100] (officer) IN baseGroup;
officerEmployee(employee) = DATA officer (employee) IN idGroup;
nameOfficerEmployee 'Должность сотрудника' (employee) = nameOfficer(officerEmployee(employee)) IN baseGroup MINCHARWIDTH 15 PREFCHARWIDTH 15;

languageEmployee(employee) = DATA language (employee) IN idGroup;
nameLanguageEmployee 'Язык интерфейса' = name(languageEmployee(employee)) IN employeeGroup MINCHARWIDTH 10 PREFCHARWIDTH 10;
shortNameLanguageEmployee 'Язык интерфейса сокр.' = shortName(languageEmployee(employee)) IN employeeGroup MINCHARWIDTH 10 PREFCHARWIDTH 10;
numberEmployee 'Номер кассира для касс' = DATA STRING[10] (employee) IN employeeGroup MINCHARWIDTH 10 PREFCHARWIDTH 10;
passwordEmployee 'Пароль для касс' = DATA STRING[20] (employee) IN employeeGroup MINCHARWIDTH 10 PREFCHARWIDTH 10;
dataEmployee 'Данные для регистрации на кассе (штрих-код)' = DATA STRING[20] (employee) IN employeeGroup MINCHARWIDTH 15 PREFCHARWIDTH 15;


includeDepartmentStoreEmployee 'Сотрудник отдела' = DATA BOOLEAN (departmentStore, employee);
phoneEmployee 'Телефон' = DATA STRING[50] (employee) IN employeeGroup MINCHARWIDTH 15 PREFCHARWIDTH 15;

nameDepartmentByEmployee 'Отделы' (employee) =
     GROUP CONCAT name(departmentStore) IF includeDepartmentStoreEmployee(departmentStore, employee), ', '
     BY employee MINCHARWIDTH 50 PREFCHARWIDTH 50;

// ------------------------------------- Скидки ---------------------------------------------------------- //

@metaCodeNameObjectDateProperty(discount, departmentStore, 'Разрешать скидки', yesNo, baseGroup);

FORM officer 'Должность'
    OBJECTS of=officer FIXED PANEL
    PROPERTIES(of) nameOfficer
    EDIT officer OBJECT of
;

FORM employee 'Сотрудник'
    OBJECTS e=employee FIXED PANEL
    PROPERTIES(e)      userFirstName, userLastName, nameOfficerEmployee, phoneEmployee, nameEmployeeSystemEmployee,
                       shortNameLanguageEmployee, numberEmployee, passwordEmployee, dataEmployee

    TREE treeStore t=tradingNetwork, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY name(t), name(st), name(s), name(ds)

    PROPERTIES(ds, e)  includeDepartmentStoreEmployee

    FILTERS   inStoreTypeTradingNetwork (st, t),
              inStoreTypeStore (st, s),
              inStoreDepartment (s, ds)

    EDIT employee OBJECT e
;

FORM employees 'Сотрудники'
    OBJECTS e=employee
    PROPERTIES(e) READONLY userFirstName, userLastName, nameOfficerEmployee
    PROPERTIES(e) ADDFORM, EDITFORM, delete

    OBJECTS ds=departmentStore
    PROPERTIES(ds) READONLY name, nameStoreDepartmentStore
    FILTERS includeDepartmentStoreEmployee(ds, e)
;

FORM employeeDialog 'Сотрудники'
    OBJECTS e=employee
    PROPERTIES(e)      userFirstName, userLastName, nameOfficerEmployee, phoneEmployee, shortNameLanguageEmployee,
                       numberEmployee, dataEmployee, nameDepartmentByEmployee

    DIALOG employee OBJECT e
;

// ----------------------------------- Цех ----------------------------------- //

outDepartmentManufactory 'Подразделение, куда передаются изделия (ИД)' (manufactory) = DATA departmentStore(manufactory) IN idGroup;
nameOutDepartmentManufactory 'Подразделение, куда передаются изделия' (manufactory) = name(outDepartmentManufactory(manufactory)) IN manufactoryGroup;
inPriceDepartmentManufactory 'Подразделение, откуда брать цены (ИД)' (manufactory) = DATA departmentStore(manufactory) IN idGroup;
nameInPriceDepartmentManufactory 'Подразделение, откуда брать цены ' (manufactory) = name(inPriceDepartmentManufactory(manufactory)) IN manufactoryGroup;
marginPublicCateringManufactory 'Наценка общепита по умолчанию для формирования цены в подразделении' (manufactory) = DATA DOUBLE (manufactory) IN manufactoryGroup;
rawDepartmentStore 'Подразделения, из которых можно получить сырье' = DATA BOOLEAN (manufactory, departmentStore);

inRawDepartmentStore(manufactory, departmentStore) = storeDepartmentStore(manufactory) == storeDepartmentStore(departmentStore);

//----------------------------------- Для товара и подразделения ------------------------------------------//
percentDiscountDepartmentItem 'Скидка на количество, % от розн.цены' = DATA DOUBLE (departmentStore, item) IN discountGroup;

additionPriceDepartmentStoreItem 'Торговая надбавка в рублях' = DATA DOUBLE (departmentStore, item) IN baseGroup;
boundCertificateDepartmentStoreItem 'Сертификат / удостоверение обязательны для товара?' = DATA BOOLEAN (departmentStore, item) IN baseGroup;
maxAllowedRetailPriceDepartmentStoreItem 'MAX допустимая розн.цена' = DATA INTEGER (departmentStore, item) IN retailGroup;
netWeightManufacturerDepartmentStoreItem 'Вес нетто продукта для производства' = DATA DOUBLE (departmentStore, item) IN manufactoryGroup;
statusCashDepartmentStoreItem 'Статус товара на кассах (ИД)' = DATA itemStatus (departmentStore, item) IN idGroup;
nameStatusCashDepartmentStoreItem 'Статус товара на кассах' = name(statusCashDepartmentStoreItem (departmentStore, item)) IN equipmentGroup;

dateManufactureDepartmentStoreItem 'Дата изготовления' = DATA DATE (departmentStore, item) IN baseGroup;
dateFitToDepartmentStoreItem 'Годен до' = DATA DATE (departmentStore, item) IN baseGroup;
fromDateDeliveryDepartmentStoreItem 'Дату [Годен до] рассчитывать от даты поставки?' = DATA BOOLEAN (departmentStore, item) IN baseGroup;
banSaleDepartmentStoreItem 'Запрет продаж товара в подразделении' = DATA BOOLEAN (departmentStore, item) IN equipmentGroup;
banMovementDepartmentStoreItem 'Запрет на внутреннее перемещение товара' = DATA BOOLEAN (departmentStore, item) IN baseGroup;
reserveDepartmentStoreItem 'Резерв по товару' = DATA DOUBLE (departmentStore, item) IN baseGroup;

topDepartmentStoreItem 'Топ' = DATA DOUBLE (departmentStore, item) IN orderGroup;
quantityRealizationDepartmentStoreItem 'Продаж в день' = DATA DOUBLE (departmentStore, item) IN orderGroup;
balanceDepartmentStoreItem 'Текущий остаток' = DATA DOUBLE (departmentStore, item) IN orderGroup;

//------------------------------------ Товар с историей -------------------------------------------------------------//
GROUP historyGroup 'Изменяемые характеристики' : baseGroup;

@metaCodeNameObjectDateProperty(isPortionBarItem, item, 'Порционный товар для бара', yesNo, barGroup);

@metaCodeNameObjectDateProperty(banDiscountItem, item, 'Запретить скидки по товару', yesNo, discountGroup);

@metaCodeObjectDateProperty(coefficientNetGrossItem, item, 'Сезонный коэффициент пересчета сырья из нетто в брутто', DOUBLE, manufactoryGroup);

@metaCodeObjectDateProperty(rateNaturalLossItem, item, 'Норма естественной убыли,%', DOUBLE, rateGroup);

//@metaCodeObjectDateProperty(NDSSupplierItem, item, 'НДС поставщика,%', DOUBLE, historyGroup);

@metaCodeObjectDateProperty(importerPriceItem, item, 'Цена импортёра', DOUBLE, retailGroup);


//---------------------------- Налоги ----------------------------------------//

GROUP suppliersNDSGroup 'НДС поставщика' : retailGroup;
GROUP retailNDSGroup 'НДС розничный' : retailGroup;

CLASS STATIC tax 'Налоги'
{
    taxNDS 'НДС',
    taxNP 'Налог с продаж'      // пусть будет для теста
};

nameTax 'Наименование налога' = DATA STRING[200] (tax) IN baseGroup;

CLASS range 'Шкала';
dataRange 'Шкала' = DATA INTEGER (range);

CLASS rate 'История изменений шкалы' : historyObject;
rangeRate 'Шкала ИД' = DATA range (rate) IN idGroup;
taxRange 'Налог ИД' = DATA tax (range) IN idGroup;
nameTaxRange 'Налог' (range) = name(taxRange(range)) IN baseGroup;

maxDataRangeTax(tax) = UNION OVERRIDE 0 IF tax IS tax, [GROUP MAX dataRange(range) BY taxRange(range)](tax);
nextDataRangeTax(tax) = maxDataRangeTax(tax) + 1;

addNewRange 'Добавить шкалу' = ACTION (tax) {
    ADDOBJ range;
    SET dataRange(r) IF r == addedObject() <- nextDataRangeTax(tax);
} TOOLBAR IMAGE 'add.png';

CLASS STATIC rangeType 'Для каких подразделений действует шкала'
{
    common 'Общий',
    units 'Для подразделений'
};
rangeTypeRange 'Тип ИД' = DATA rangeType (range) IN idGroup;
nameRangeTypeRange 'Тип действия' = name(rangeTypeRange(range)) IN baseGroup;
inRangeStoreDefault 'Вкл.' (range, store) = DATA BOOLEAN (range, store) IN baseGroup;
inRangeStore 'Вкл.' (range, store) = inRangeStoreDefault(range, store)  IF rangeTypeRange(range) == rangeType.units IN baseGroup;
isUnitsTypeRange(range) = rangeTypeRange(range) == rangeType.units;

rangeTypeRange(range) <- rangeType.common ON ASSIGN range IS range;     /// потом согласовать, какое значение должно быть по-умолчанию ///

dataRate 'Значение ставки' = DATA DOUBLE (rate) IN recognizeGroup;
dateFromRate 'Действует с' = DATA DATE (rate) IN baseGroup;
dateToRate 'Действует по' = DATA DATE (rate) IN baseGroup;

quantityRateRange 'Количество историй' (range) = GROUP SUM 1 IF rate BY rangeRate(rate);
CONSTRAINT range IS range AND NOT rangeTypeRange(range)  MESSAGE 'ошибка: Не выбран тип действия для шкалы';
CONSTRAINT rate IS rate AND NOT dataRate(rate)  MESSAGE 'ошибка: Не указано значение ставки';

inTaxNDSRangeStore(range, store) = inRangeStore(range, store) AND tax.taxNDS == taxRange(range);
rangeToTaxStore 'Шкала по налогу и складу' (tax, store) = GROUP UNIQUE range BY taxRange(range), store WHERE inTaxNDSRangeStore(range, store);

inRangeRate(range, rate) = rangeRate(rate) == range;
inTaxRange(tax, range) = taxRange(range) == tax;

actingRateDate(rate, date) = rate IF dateFromRate(rate) <= date AND NOT dateToRate(rate) < date AND date AS DATE;
actingRateRangeDate(range, date) = GROUP MAX actingRateDate(rate, date) BY rangeRate(rate), date;
dataActingRateRangeDate 'На дату' (range, date) = dataRate(actingRateRangeDate(range, date));
actingRateRange 'Действующая ИД' (range) = actingRateRangeDate(range, currentDate()) IN idGroup;
dataActingRateRange 'Действующая ставка' (range) = dataRate(actingRateRange(range)) IN baseGroup;
dateFromActingRateRange 'Действует с' (range) = dateFromRate(actingRateRange(range)) IN baseGroup;
dateToActingRateRange 'Действует по' (range) = dateToRate(actingRateRange(range)) IN baseGroup;
nameUserCreatedActingRateRange 'Создан пользователем' (range) = nameUserCreated(actingRateRange(range)) IN baseGroup;

quantityActingRateRangeDate(range, date) = GROUP SUM 1 IF actingRateDate(rate, date) BY rangeRate(rate), date;

quantityActingRateRange 'Количество действующих историй' (range) = quantityActingRateRangeDate(range, currentDate());
//CONSTRAINT quantityActingRateRange(range) > 1 MESSAGE 'ошибка: Одновременно не может быть несколько действующих ставок';

rateToRate (rt1, rt2) = UNION OVERRIDE dateFromRate(rt2) <= dateFromRate(rt1),
                                       dateToRate(rt1) < dateFromRate(rt2);


CONSTRAINT rangeRate(rt1) == rangeRate(rt2) AND NOT rateToRate (rt1, rt2)  MESSAGE 'ошибка: Одновременно не может быть несколько действующих ставок / или не задано: действует с';

suppliersTaxNDSItem(item) = tax.taxNDS IF item IS item IN idGroup;
nameSuppliersTaxNDSItem(item) = name(suppliersTaxNDSItem(item));

suppliersRangeItemDate 'Шкала' (item, date) = DATA range (item, DATE) IN idGroup;
dataSuppliersRangeItemDate 'Шкала' (item, date) = dataRange(suppliersRangeItemDate(item, date)) IN suppliersNDSGroup;

dateSuppliersRangeItemDate (item, date) = GROUP MAX dateIn AND suppliersRangeItemDate(item, dateIn) AND dateIn <= (date AS DATE) BY item, date;
dataActingSuppliersRangeItemDate 'НДС поставщика,%' (item, date) = dataActingRateRangeDate(suppliersRangeItemDate(item, date), date) IN suppliersNDSGroup;

suppliersRangeItemVal 'На дату' (item, date) = suppliersRangeItemDate(item, dateSuppliersRangeItemDate(item, date)) IN idGroup;
suppliersRangeItem 'Шкала' (item) = suppliersRangeItemDate(item, dateSuppliersRangeItemDate(item, currentDate())) IN idGroup;

taxSuppliersItem(item) = taxRange(suppliersRangeItem(item)) IN idGroup;
nameTaxSuppliersItem 'Налог' (item) = nameTaxRange(suppliersRangeItem(item)) IN baseGroup;

dataSuppliersRangeItem 'Шкала НДС' (item) = dataRange(suppliersRangeItem(item)) IN suppliersNDSGroup;
dataActingRateSuppliersRangeItem 'НДС поставщика,%' (item) = dataActingRateRange(suppliersRangeItem(item)) IN suppliersNDSGroup;

CONSTRAINT taxRange(suppliersRangeItemDate(item, date)) != tax.taxNDS CHECKED BY suppliersRangeItemDate MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

FORM addSuppliersRangeItem 'Добавить Шкалу'
    OBJECTS i=item FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES nameAttributeItem(i) READONLY, OBJVALUE(d), dataSuppliersRangeItemDate(i, d), dataActingSuppliersRangeItemDate(i, d)
;

DESIGN addSuppliersRangeItem FROM DEFAULT {
    PROPERTY(nameAttributeItem(i)) { focusable = FALSE; }
};

showFormAddSuppliersRangeItem 'Добавить' (item) = ACTION FORM addSuppliersRangeItem OBJECTS i MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

FORM suppliersRangeItem 'Добавить Шкалу'
    OBJECTS i=item FIXED PANEL, d=DATE
    PROPERTIES       nameAttributeItem(i) READONLY, showFormAddSuppliersRangeItem(i) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY
    PROPERTIES(i, d) dataSuppliersRangeItemDate, dataActingSuppliersRangeItemDate
    FILTERS suppliersRangeItemDate(i, d)
;

DESIGN suppliersRangeItem FROM DEFAULT {
    PROPERTY(nameAttributeItem(i)) { focusable = FALSE; }
};

showFormSuppliersRangeItem 'Шкала' (item) = ACTION FORM suppliersRangeItem OBJECTS i MODAL SHORTCUT dataSuppliersRangeItem DEFAULT;

retailRangeItemDate 'Шкала' (item, date) = DATA range (item, DATE) IN idGroup;
dataRetailRangeItemDate 'Шкала' (item, date) = dataRange(retailRangeItemDate(item, date)) IN retailNDSGroup;

dateRetailRangeItemDate (item, date) = GROUP MAX dateIn AND retailRangeItemDate(item, dateIn) AND dateIn <= (date AS DATE) BY item, date;
dataActingRetailRangeItemDate 'Розничный НДС' (item, date) = dataActingRateRangeDate(retailRangeItemDate(item, date), date) IN retailNDSGroup;

retailRangeItemVal 'На дату' (item, date) = retailRangeItemDate(item, dateRetailRangeItemDate(item, date)) IN idGroup;
retailRangeItem 'Шкала' (item) = retailRangeItemDate(item, dateRetailRangeItemDate(item, currentDate())) IN idGroup;

taxRetailItem(item) = taxRange(retailRangeItem(item)) IN idGroup;
nameTaxRetailItem 'Налог' (item) = nameTaxRange(retailRangeItem(item)) IN baseGroup;

dataRetailRangeItem 'Шкала НДС' (item) = dataRange(retailRangeItem(item)) IN retailNDSGroup;
dataActingRateRetailRangeItem 'Розничный НДС' (item) = dataActingRateRange(retailRangeItem(item)) IN retailNDSGroup;

CONSTRAINT taxRange(retailRangeItem(item)) != tax.taxNDS CHECKED BY retailRangeItem MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

FORM addRetailRangeItem 'Добавить Шкалу'
    OBJECTS i=item FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES nameAttributeItem(i) READONLY, OBJVALUE(d), dataRetailRangeItemDate(i, d), dataActingRetailRangeItemDate(i, d)
;

DESIGN addRetailRangeItem FROM DEFAULT {
    PROPERTY(nameAttributeItem(i)) { focusable = FALSE; }
};

showFormAddRetailRangeItem 'Добавить' (item) = ACTION FORM addRetailRangeItem OBJECTS i MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

FORM retailRangeItem 'Добавить Шкалу'
    OBJECTS i=item FIXED PANEL, d=DATE
    PROPERTIES       nameAttributeItem(i) READONLY, showFormAddRetailRangeItem(i) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY
    PROPERTIES(i, d) dataRetailRangeItemDate, dataActingRetailRangeItemDate
    FILTERS retailRangeItemDate(i, d)
;
DESIGN retailRangeItem FROM DEFAULT {
    PROPERTY(nameAttributeItem(i)) { focusable = FALSE; }
};

showFormRetailRangeItem 'Шкала' (item) = ACTION FORM retailRangeItem OBJECTS i MODAL SHORTCUT dataRetailRangeItem DEFAULT;

overrideRateRangeItemVal 'НДС (ИД)' (item, date) = UNION OVERRIDE retailRangeItemVal(item, date), suppliersRangeItemVal(item, date) IN idGroup;

overrideRateRangeItem 'НДС (ИД)' (item) = UNION OVERRIDE retailRangeItem(item), suppliersRangeItem(item) IN idGroup; // на текущую дату

dataOverrideRateRangeItem 'Значение НДС' (item) = dataActingRateRange(overrideRateRangeItem(item)) IN retailGroup;
toShowDataRangeItem(item) = TRUE IF item IS item AND dataActingRateSuppliersRangeItem(item); // dataSuppliersRateRangeItem(item);

inCompanyStore (company, store) = companyStore(store) == company;
isInCompanyStore (company, store)  = UNION OVERRIDE  companyStore(store) == company, store IS store AND NOT company;


dataActingRateRangeToRange 'Шкала по значению' (doubleValue) = GROUP UNIQUE range BY dataActingRateRange (range);

toShowAddNDSValue(tax) = tax == tax.taxNDS;
addNDSValue 'Добавить значение НДС' = ACTION (tax, number, value) {
    ADDOBJ range;
    FOR rn == addedObject() DO {
       SET rangeTypeRange(rn) <- rangeType.common;
       SET taxRange(rn) <- tax AS tax;
       SET dataRange(rn) <- number AS INTEGER;
       ADDOBJ rate;
       FOR ra == addedObject() DO {
          SET rangeRate(ra) <- rn AS range;
          SET dataRate(ra) <- value AS DOUBLE;
          SET dateFromRate(ra) <- 2001_01_01;
       };
    };
};

fillNDSDefaultValues 'Заполнить значения НДС по умолчанию' = [ACTION (tax) {
    EXEC addNDSValue(tax AS tax, 1, 0);
    EXEC addNDSValue(tax AS tax, 2, 9.09);
    EXEC addNDSValue(tax AS tax, 3, 16.67);
    EXEC addNDSValue(tax AS tax, 4, 10);
    EXEC addNDSValue(tax AS tax, 5, 20);
    EXEC addNDSValue(tax AS tax, 6, 24);
}](tax) AND tax==tax.taxNDS;

FORM tax 'Налог'
    OBJECTS           t=tax FIXED PANEL, ra=range
    PROPERTIES(t)     name, nameTax, addNewRange TODRAW ra

    PROPERTIES(ra)    dataRange, nameRangeTypeRange, delete
    PROPERTIES(ra)    READONLY dataActingRateRange, dateFromActingRateRange, dateToActingRateRange

    OBJECTS           rt=rate
    PROPERTIES(rt)    dataRate, dateFromRate, dateToRate, timeCreated, nameUserCreated, ADDOBJ, delete

    TREE treeCompanyStore a=STRING[3], co=company

    PROPERTIES READONLY OBJVALUE(a), name(co)

    OBJECTS           s=store
    PROPERTIES(s)     name, addressStore

    PROPERTIES(ra, s) inRangeStore SHOWIF isUnitsTypeRange(ra)

    PROPERTIES(t)     fillNDSDefaultValues SHOWIF toShowAddNDSValue(t) TODRAW t FORCE PANEL

    FILTERS           stringEqualsAll(a),
                      inRangeRate(ra, rt),
                      inTaxRange(t, ra),
                      isInCompanyStore(co, s)

    FILTERGROUP filters6
        FILTER 'Показывать магазины только для данного налога' 'F10' inRangeStore(ra, s)

    EDIT tax OBJECT t
;

DESIGN tax FROM DEFAULT {
    main {
       NEW secondCase BEFORE functions.box {
            ADD s.box {
                fillHorizontal = 3.8;
            };
            ADD treeCompanyStore.box {
                title = 'компании';
                fillHorizontal = 1.2;
            };
            POSITION treeCompanyStore.box TO THE LEFT s.box;
       }
       NEW firstCase BEFORE secondCase {
            ADD ra.box {
                fillHorizontal = 2.5;
            };
            ADD rt.box {
                fillHorizontal = 2.5;
            };
            POSITION ra.box TO THE LEFT rt.box;
       }
    }
}

FORM taxes 'Налоги'
    OBJECTS           t=tax
    PROPERTIES(t)     READONLY name, nameTax
    PROPERTIES(t)     EDITFORM, delete

    OBJECTS           ra=range
    PROPERTIES(ra)    READONLY dataRange, dataActingRateRange, dateFromActingRateRange, dateToActingRateRange, nameUserCreatedActingRateRange, nameRangeTypeRange, quantityRateRange

    OBJECTS           s=store
    PROPERTIES(s)     READONLY name, addressStore

    PROPERTIES(ra, s) READONLY inRangeStore

    FILTERS  inTaxRange(t, ra),
             inRangeStore(ra, s)
;


//------------------------------------ Товар для подразделения с историей -------------------------------------------//
//maxReserveItemDepartmentDate 'Максимально допустимый товарный запас в днях' = DATA DOUBLE (item, departmentStore, DATE) IN baseGroup;
//minReserveItemDepartmentDate 'Минимально допустимый товарный запас в днях' = DATA DOUBLE (item, departmentStore, DATE) IN baseGroup;
//banRevaluationItemDepartmentDate 'Запрет на переоценку' = DATA BOOLEAN (item, departmentStore, DATE) IN baseGroup;
//inActionItemDepartmentDate 'Товар акции' = DATA BOOLEAN (item, departmentStore, DATE) IN baseGroup;
//marginProductionItemDepartmentDate 'Наценка производства' = DATA DOUBLE (item, departmentStore, DATE) IN baseGroup;
//discountItemDepartmentDate 'Скидка для товара' = DATA STRING[100] (item, departmentStore, DATE) IN baseGroup;

TABLE itemDepartmentStoreDate (item, departmentStore, DATE);

@metaCodeDoubleObjectDateProperty(maxReserveItemDepartment, item, departmentStore, 'Максимально допустимый товарный запас в днях', DOUBLE, orderGroup);
@metaCodeDoubleObjectDateProperty(minReserveItemDepartment, item, departmentStore, 'Минимально допустимый товарный запас в днях', DOUBLE, orderGroup);

@metaCodeNameYesNoDoubleObjectDateProperty(banRevaluationItemDepartment, item, departmentStore, 'Запрет на переоценку', yesNo, retailGroup);

@metaCodeNameYesNoDoubleObjectDateProperty(inActionItemDepartment, item, departmentStore, 'Товар акции', yesNo, discountGroup);

@metaCodeDoubleObjectDateProperty(marginProductionItemDepartment, item, departmentStore, 'Наценка производства', DOUBLE, retailGroup);

@metaCodeDoubleObjectDateProperty(retailPriceItemDepartment, item, departmentStore, 'Розничная цена', DOUBLE, retailGroup);

@metaCodeDoubleObjectDateProperty(accountPriceItemDepartment, item, departmentStore, 'Учётная цена', DOUBLE, retailGroup);

@metaCodeDoubleObjectDateProperty(discountItemDepartment, item, departmentStore, 'Скидка для товара', STRING[100], discountGroup);

defaultLabelTypeItemDepartmentStore(item, departmentStore) = defaultLabelTypeDepartmentStore(departmentStore) AND item IS item;
@metaCodeNameDoubleObjectDateProperty(labelItemDepartment, item, departmentStore, 'Ценник', labelType, labelGroup, defaultLabelTypeItemDepartmentStore);
labelBarcodeDepartmentVal (barcode, departmentStore, date) = labelItemDepartmentVal(skuBarcode(barcode), departmentStore, date);

CONSTRAINT labelItemDepartmentDate(item, departmentStore, date) AND NOT inLabelTypeDepartmentStore(labelItemDepartmentDate(item, departmentStore, date), departmentStore)
    CHECKED BY labelItemDepartmentDate MESSAGE 'Тип ценника запрещен для выбранного отдела магазина';

@metaCodeDoubleObjectDateProperty(multiplierItemDepartment, item, departmentStore, 'Множитель', INTEGER, labelGroup);
multiplierItemDepartmentValOver (item, departmentStore, date) = UNION OVERRIDE 1 IF item IS item AND departmentStore IS departmentStore AND date IS DATE,
                                                                               multiplierItemDepartmentVal(item, departmentStore, date);
multiplierBarcodeDepartmentValOver (barcode, departmentStore, date) = multiplierItemDepartmentValOver(skuBarcode(barcode), departmentStore, date);

@metaCodeDoubleObjectDateProperty(oldPriceItemDepartment, item, departmentStore, 'Старая цена', DOUBLE, labelGroup);

TABLE supplierItemDepartmentStoreDate (supplier, item, departmentStore, DATE);

@metaCodeNameTripleObjectDateProperty(isSupplierItemDepartment, supplier, item, departmentStore, 'Поставляется', yesNo, orderGroup);

@metaCodeTripleObjectDateProperty(priceSupplierItemDepartment, supplier, item, departmentStore, 'Цена поставщика', DOUBLE, retailGroup);

@metaCodeDoubleObjectDateProperty(markupItemDepartment, item, departmentStore, 'Торговая надбавка', DOUBLE, retailGroup);

@metaCodeNameTripleObjectDateProperty(banSupplierItemDepartment, supplier, item, departmentStore, 'Запретить закупку', yesNo, orderGroup);

// Посуда
@metaCodeObjectDateProperty(priceWare, ware, 'Цена', DOUBLE, baseGroup);

taxNDSWare(ware) = tax.taxNDS IF ware IS ware IN idGroup;
nameTaxNDSWare(ware) = name(taxNDSWare(ware));

rangeWareDate 'Шкала' (ware, date) = DATA range (ware, DATE) IN idGroup;
dataRangeWareDate 'Шкала' (ware, date) = dataRange(rangeWareDate(ware, date));

dateRangeWareDate (ware, date) = GROUP MAX dateIn AND rangeWareDate(ware, dateIn) AND dateIn <= (date AS DATE) BY ware, date;
dataActingRateRangeWareDate 'НДС,%' (ware, date) = dataActingRateRangeDate(rangeWareDate(ware, date), dateRangeWareDate (ware, date));

rangeWareVal 'На дату' (ware, date) = rangeWareDate(ware, dateRangeWareDate(ware, date)) IN baseGroup;
rangeWare 'Шкала' (ware) = rangeWareDate(ware, dateRangeWareDate(ware, currentDate())) IN baseGroup;

taxRangeWare(ware) = taxRange(rangeWare(ware)) IN idGroup;
nameTaxWare 'Налог' (ware) = nameTaxRange(rangeWare(ware)) IN baseGroup;

dataRangeWare 'Шкала НДС' (ware) = dataRange(rangeWare(ware)) IN baseGroup;
dataActingRateRangeWare 'НДС,%' (ware) = dataActingRateRange(rangeWare(ware)) IN baseGroup;

CONSTRAINT taxRange(rangeWareDate(ware, date)) != tax.taxNDS CHECKED BY retailRangeItem MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';


FORM addRangeWare 'Добавить Шкалу'
    OBJECTS w=ware FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(w) READONLY, OBJVALUE(d), dataRangeWareDate(w, d), dataActingRateRangeWareDate(w, d)
;

DESIGN addRangeWare FROM DEFAULT {
    PROPERTY(name(w)) { focusable = FALSE; }
};

showFormAddRangeWare 'Добавить' (ware) = ACTION FORM addRangeWare OBJECTS w MODAL TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

FORM rangeWare 'Добавить Шкалу'
OBJECTS w=ware FIXED PANEL, d=DATE
PROPERTIES name(w) READONLY, showFormAddRangeWare(w) TODRAW d, OBJVALUE(d) READONLY,
           dataRangeWareDate(w, d), dataActingRateRangeWareDate(w, d)
FILTERS rangeWareDate(w, d);

DESIGN rangeWare FROM DEFAULT {
PROPERTY(name(w)) { focusable = FALSE; }
};

showFormRangeWare 'Шкала' (ware) = ACTION FORM rangeWare OBJECTS w MODAL SHORTCUT dataRangeWare DEFAULT;

FORM ware 'Посуда'
OBJECTS w=ware FIXED PANEL
PROPERTIES(w) name, priceWare, showFormpriceWare
PROPERTIES(w) dataRangeWare, dataActingRateRangeWare, showFormRangeWare
EDIT ware OBJECT w;

FORM wares 'Посуда'
OBJECTS w=ware
PROPERTIES(w) READONLY barcodeBarcodeSku, name, priceWare, showFormpriceWare, dataRangeWare, dataActingRateRangeWare
PROPERTIES(w)          ADDFORM, EDITFORM, delete
DIALOG ware OBJECT w;

FORM item 'Товар'

    OBJECTS i=item FIXED PANEL

    PROPERTIES(i) nameAttributeItem, nameCashAttributeItem, nameScalesAttributeItem, canonicalNameItemGroupSku, barcodeBarcodeSku READONLY,

                  // Основные данные
                  captionItem SHOWIF toShowCaption(i), nameBrandItem SHOWIF toShowBrand(i), nameTypeItemItem SHOWIF toShowType(i),
                  nameSortItem SHOWIF toShowSort(i), shortNamePackItem SHOWIF toShowPack(i), shortNameSizeItem SHOWIF toShowSize(i),
                  shortNameSpecialtyItem SHOWIF toShowSpecialty(i), nameColorItem SHOWIF toShowColor(i),
                  nameTasteItem SHOWIF toShowTaste(i), hallmarkItem SHOWIF toShowHallmark(i), articleItem SHOWIF toShowArticle(i),
                  nameCoolingDegreeItem SHOWIF toShowCoolingDegree(i), nameFormItemItem SHOWIF toShowFormItem(i),

                  shortNameUnitOfMeasureItem SHOWIF toShowUnitOfMeasure(i), nameCountryItem SHOWIF toShowCountry(i), isWeightItem,

                  isManufacturedItem,
                  compositionMenuItem SHOWIF isManufacturedItem(i), grossWeightItem SHOWIF isManufacturedItem(i),
                  grossWeightPackItem SHOWIF isManufacturedItem(i), isCrudeItem SHOWIF isManufacturedItem(i),
                  nameGroupProductItem SHOWIF isManufacturedItem(i), standartItem SHOWIF isManufacturedItem(i),
                  normOutItem SHOWIF isManufacturedItem(i), groupMenuItem SHOWIF isManufacturedItem(i),
                  isCutedItem SHOWIF isManufacturedItem(i), coefficientNetGrossItem SHOWIF isManufacturedItem(i), showFormcoefficientNetGrossItem,

                  nameRateWasteItem, percentRateWasteItem, rateNaturalLossItem, showFormrateNaturalLossItem,

                  volumeItem, lengthItem, widthItem, heightItem, lengthPackItem, widthPackItem, heightPackItem,

                  nameisPortionBarItem, showFormNameisPortionBarItem,

                  // Дополнительные
                  passScalesItem, isMarkItem, isLoafCutItem,
                  compositionScalesItem, storageTemperatureItem, banSailItem,

                  importerPriceItem, showFormimporterPriceItem,
                  dataSuppliersRangeItem, dataActingRateSuppliersRangeItem, showFormSuppliersRangeItem,
                  dataRetailRangeItem, dataActingRateRetailRangeItem, showFormRetailRangeItem,
                  percentWholesaleMarkItem, minTradeAllowanceItem, maxTradeAllowanceItem, minAllowedRetailPriceItem,
                  isFixPriceItem, banMarkdownItem, nameWareItem SHOWIF toShowWare(i),

                  quantityDiscountItem, fixPriceItem, namebanDiscountItem, showFormNamebanDiscountItem,

                  percentFatItem, percentAlcoholItem, nutritionalValueItem, energyItem,
                  fatsItem, carbohydratesItem, proteinsItem, isContainGMOItem,

                  controlExpiryItem, daysExpiryItem, daysExpiryPackItem, hoursExpiryPackItem,

                  netWeightItem, quantityPackItem, minQuantityOrderItem, minReserveItem, numberInPackItem,

                  bonusReturnItem, nameReturnItem, hintItem, bonusItem,

                  imageItem, loadImageItem

    OBJECTS b=barcode
    PROPERTIES(b)       barcodeEx, dateBarcode, titleScalesBarcode, titleCashBarcode, shortNameUnitOfMeasureBarcode,
                        amountBarcode, removeBarcode, commentRemoveBarcode, activeBarcode
    PROPERTIES(i)       generateBarcodeSku TODRAW b FORCE PANEL
    PROPERTIES(b)       ADDOBJ, delete
    PROPERTIES(i, b)    primarySkuBarcode
    FILTERS inSkuBarcode(i, b)

    // Управленческие параметры
    TREE treeStore a=STRING[3], t=tradingNetwork, st=storeType, s=store
    PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS stringEqualsAll(a), inStoreTypeTradingNetwork (st, t), inStoreTypeStore (st, s)

    OBJECTS dt=DATE FIXED PANEL, sp=supplier FIXED PANEL, d=departmentStore
    PROPERTIES (d) name
    FILTERS inTradingNetworkStoreTypeStoreDepartment(t, st, s, d)

    PROPERTIES (dt) OBJVALUE BACKGROUND dateDiffersCurrent(dt)
    PROPERTIES (sp) SELECTOR name
    PROPERTIES      nameisSupplierItemDepartmentOver(sp, i, d, dt) BACKGROUND nameisSupplierItemDepartmentDate(sp, i, d, dt), showFormNameisSupplierItemDepartmentOver(sp, i, d),
                    namebanSupplierItemDepartmentOver(sp, i, d, dt) BACKGROUND namebanSupplierItemDepartmentDate(sp, i, d, dt), showFormNamebanSupplierItemDepartmentOver(sp, i, d),
                    priceSupplierItemDepartmentOver(sp, i, d, dt) BACKGROUND priceSupplierItemDepartmentDate(sp, i, d, dt), showFormpriceSupplierItemDepartmentOver(sp, i, d),
                    markupItemDepartmentOver(i, d, dt) BACKGROUND markupItemDepartmentDate(i, d, dt), showFormmarkupItemDepartmentOver(i, d)
    PROPERTIES      retailPriceItemDepartmentOver(i, d, dt) BACKGROUND retailPriceItemDepartmentDate(i, d, dt), showFormretailPriceItemDepartmentOver(i, d),
                    maxReserveItemDepartmentOver(i, d, dt) BACKGROUND maxReserveItemDepartmentDate(i, d, dt), showFormmaxReserveItemDepartmentOver(i, d),
                    minReserveItemDepartmentOver(i, d, dt) BACKGROUND minReserveItemDepartmentDate(i, d, dt), showFormminReserveItemDepartmentOver(i, d),
                    namebanRevaluationItemDepartmentOver(i, d, dt) BACKGROUND namebanRevaluationItemDepartmentDate(i, d, dt), showFormNamebanRevaluationItemDepartmentOver(i, d),
                    nameinActionItemDepartmentOver(i, d, dt) BACKGROUND nameinActionItemDepartmentDate(i, d, dt), showFormNameinActionItemDepartmentOver(i, d),
                    marginProductionItemDepartmentOver(i, d, dt) BACKGROUND marginProductionItemDepartmentDate(i, d, dt), showFormmarginProductionItemDepartmentOver(i, d),
                    discountItemDepartmentOver(i, d, dt) BACKGROUND discountItemDepartmentDate(i, d, dt), showFormdiscountItemDepartmentOver(i, d),
                    namelabelItemDepartmentOver(i, d, dt) BACKGROUND labelItemDepartmentDate(i, d, dt), showFormNamelabelItemDepartmentOver(i, d),
                    multiplierItemDepartmentOver(i, d, dt) BACKGROUND multiplierItemDepartmentDate(i, d, dt), showFormmultiplierItemDepartmentOver(i, d),
                    oldPriceItemDepartmentOver(i, d, dt) BACKGROUND oldPriceItemDepartmentDate(i, d, dt), showFormoldPriceItemDepartmentOver(i, d)

    EDIT item OBJECT i
;

DESIGN item FROM DEFAULT {
    main {
        i.panel {
            NEW itemPanelColumn1 {
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(nameAttributeItem);
                ADD PROPERTY(nameCashAttributeItem);
                ADD PROPERTY(nameScalesAttributeItem);
            }
            NEW itemPanelColumn2 {
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(canonicalNameItemGroupSku);
                ADD PROPERTY(barcodeBarcodeSku);
            }
        }
        NEW item.box BEFORE b.box {
            tabbedPane = TRUE;
            NEW primary.box {
                title = 'Основные данные';
                fillVertical = 1.0;
                fillHorizontal = 1.0;
                NEW containerLeft {
                    childConstraints = TO THE BOTTOM;
                    ADD i.descriptionGroup {
                        fillVertical = 0.4;
                        NEW small.box {
                            ADD PROPERTY(shortNamePackItem(i));
                            ADD PROPERTY(shortNameSizeItem(i));
                            ADD PROPERTY(shortNameSpecialtyItem(i));
                            POSITION PROPERTY(shortNamePackItem(i)) TO THE LEFT PROPERTY(shortNameSizeItem(i));
                            POSITION PROPERTY(shortNameSizeItem(i)) TO THE LEFT PROPERTY(shortNameSpecialtyItem(i));
                        };
                    }
                    ADD i.manufactoryGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                }

                NEW containerRight {
                    childConstraints = TO THE BOTTOM;
                    ADD i.headGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.rateGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.sizeGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.barGroup;
                }
                POSITION containerLeft TO THE LEFT containerRight;
                ADD b.box;
            }

            NEW additional.box {

                title = 'Дополнительные';
                fillVertical = 1.0;
                fillHorizontal = 1.0;

                NEW containerALeft {
                    childConstraints = TO THE BOTTOM;
                    ADD i.equipmentGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.retailGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                };

                NEW containerARight {
                    childConstraints = TO THE BOTTOM;
                    ADD i.substanceGroup{
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.expiryGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.orderGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.documentGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                };

                POSITION containerALeft TO THE LEFT containerARight;
            }

            ADD d.box {

                title = 'Управленческие параметры';

                fillVertical = 1.0;
                fillHorizontal = 1.0;
                ADD dt.box BEFORE d.grid.box;
                ADD sp.box BEFORE d.grid.box;
                POSITION dt.box TO THE LEFT sp.box;
                ADD treeStore.box BEFORE d.grid.box;
                POSITION treeStore.box TO THE LEFT d.grid.box;
                POSITION d.grid.box TO THE LEFT d.panel;
                d.grid.box {
                    fillHorizontal = 3;
                };
            }

            NEW itemImage {
                title = 'Изображение';
                ADD PROPERTY(imageItem);
                PROPERTY(imageItem) {
                    caption = '';
                    fillVertical = 1.0;
                    fillHorizontal = 1.0;
                }

                ADD PROPERTY(loadImageItem);
            }
       }
    }
}

inItemGroupSku(itemGroup, sku) = itemGroupSku(sku) == itemGroup;

FORM items 'Товары'
    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS i=item
    PROPERTIES barcodeBarcodeSku(i) READONLY, nameAttributeItemGroupItem(g, i) READONLY, shortNameUnitOfMeasureItem(i) READONLY
    PROPERTIES(i) ADDFORM, EDITFORM, delete
    FILTERS nameAttributeItemGroupItem(g, i)
    ORDER BY nameAttributeItemGroupItem

    DIALOG item OBJECT i
;

DESIGN items FROM DEFAULT {
    POSITION treeGroup.box TO THE LEFT i.box;

    treeGroup.tree {
        fillHorizontal = 0.4;
    }

    i.grid {
        defaultComponent = TRUE;
    }
}



FORM barcodeForm 'Товары по Ш-К'
    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS b=barcode
    PROPERTIES(b) READONLY barcodeEx, nameSkuBarcode, shortNameUnitOfMeasureBarcode
    PROPERTIES(b) ADDFORM, EDITFORM, delete
    FILTERS hasParentItemGroupBarcode(g, b)
    ORDER BY nameSkuBarcode

    DIALOG barcode OBJECT b
;

DESIGN barcodeForm FROM DEFAULT {
    POSITION treeGroup.box TO THE LEFT b.box;

    treeGroup.tree {
        fillHorizontal = 0.4;
    }

    b.grid {
        defaultComponent = TRUE;
    }
}


FORM itemGroup 'Товарная группа'
    OBJECTS g=itemGroup FIXED PANEL
    PROPERTIES(g)  name, nameParentItemGroup, maxTurnoverItemGroup, minTurnoverItemGroup, namePieceNumeratorItemGroup, nameWeightNumeratorItemGroup,
                   showCaptionItemGroup, showBrandItemGroup, showTypeItemGroup, showUnitOfMeasureItemGroup, showSortItemGroup, showPackItemGroup,
                   showSpecialtyItemGroup, showSizeItemGroup, showColorItemGroup, showTasteItemGroup, showHallmarkItemGroup,
                   showArticleItemGroup, showCoolingDegreeItemGroup, showCountryItemGroup, showFormItemItemGroup,
                   showRateWasteItemGroup, showWareItemGroup
    EDIT itemGroup OBJECT g
;

addItemGroup 'Добавить' = ACTION (itemGroup) NEWSESSION {
    ADDOBJ itemGroup;
    FOR g == addedObject() DO {
        SET parentItemGroup(g) <- itemGroup AS itemGroup;
        FORM itemGroup OBJECTS g=addedObject() MODAL;
        IF formResult() == formResult.ok THEN
            EXEC apply();
    };
} TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

FORM itemGroups 'Товарные группы'
    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g), extSID(g)
    PROPERTIES(g)       addItemGroup, EDITFORM
    ORDER BY name

    OBJECTS cg=itemGroup
    PROPERTIES(cg)   canonicalNameItemGroup, maxTurnoverItemGroup, minTurnoverItemGroup, namePieceNumeratorItemGroup, nameWeightNumeratorItemGroup,
                     showCaptionItemGroup, showBrandItemGroup, showTypeItemGroup, showUnitOfMeasureItemGroup, showSortItemGroup, showPackItemGroup,
                     showSpecialtyItemGroup, showSizeItemGroup, showColorItemGroup, showTasteItemGroup, showHallmarkItemGroup,
                     showCoolingDegreeItemGroup, showCountryItemGroup, showFormItemItemGroup,
                     showRateWasteItemGroup, showWareItemGroup, delete

    ORDER BY canonicalNameItemGroup

    FILTERGROUP filters
        FILTER 'Все листья' 'F10' hasParentAndLeafItemGroup(cg, g) DEFAULT
        FILTER 'Всех потомков' 'F9' hasParentItemGroup(cg, g)
        FILTER 'Только непосредственных потомков' 'F8' inParentItemGroupItemGroup(cg, g)
;

DESIGN itemGroups FROM DEFAULT {

    POSITION treeGroups.box TO THE LEFT cg.box;

    treeGroups.tree {
        fillHorizontal = 0.5;
    }

    PROPERTY(extSID) {
        maximumCharWidth = 7;
    }
}

FORM itemGroupDialog 'Товарные группы'
    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES(g) READONLY name, extSID
    PROPERTIES(g) addItemGroup, EDITFORM
    ORDER BY name

    DIALOG itemGroup OBJECT g
;


// ----------------------------------- Ассортимент -------------------------------------------------------- //

CLASS assortment 'Ассортимент' : named;
itemAssortment 'Товар включен в ассортимент' = DATA BOOLEAN (assortment, item);
infoAssortment 'Описание' = DATA STRING[100] (assortment) IN baseGroup;

FORM assortment 'Ассортимент'
OBJECTS a=assortment FIXED PANEL, i=item
PROPERTIES(a) name, infoAssortment
PROPERTIES(a, i) itemAssortment
PROPERTIES(i) nameAttributeItem
PROPERTIES(i) ADDSESSIONFORM, EDITSESSIONFORM, delete
FILTERGROUP assortment
    FILTER 'Только товары ассортимента' 'F10' itemAssortment(a, i) DEFAULT
EDIT assortment OBJECT a;

FORM assortments 'Ассортименты'
OBJECTS a=assortment, i=item
PROPERTIES(a) READONLY name, infoAssortment
PROPERTIES(a) ADDFORM, EDITFORM, delete
PROPERTIES(i) READONLY nameAttributeItem
FILTERS itemAssortment(a, i);

// ----------------------------------- Комиссии ---------------------------------------------------------- //

CLASS ABSTRACT committee 'Комиссия' : named;
CLASS revaluationCommittee 'Комиссия переоценки' : committee;
CLASS inventoryCommittee 'Комиссия для инвентаризации' : committee;
CLASS registerCommittee 'Комиссия для реестра цен' : committee;

chairmanCommittee 'Председатель комиссии (ИД)' = DATA employee (committee);
commonNameChairmanCommittee 'Председатель комиссии' (committee) = commonName(chairmanCommittee(committee)) IN recognizeGroup;
nameOfficerChairmanCommittee 'Должность председаетеля' (committee) = nameOfficerEmployee(chairmanCommittee(committee));

inCommitteeEmployee 'Является членом комиссии' (committee, employee) = DATA BOOLEAN (committee, employee);
inCommitteeDepartmentStore 'Вкл.' (committee, departmentStore)= DATA BOOLEAN (committee, departmentStore) IN baseGroup;

includeDepartmentStoreEmployeeCommittee(departmentStore, employee, committee) = inCommitteeDepartmentStore(committee, departmentStore) AND includeDepartmentStoreEmployee(departmentStore, employee);
isIncludeEmployeeCommittee (employee, committee) = GROUP SUM 1 IF includeDepartmentStoreEmployeeCommittee(departmentStore, employee, committee) BY employee, committee;

CONSTRAINT registerCommitteeDepartmentStore(departmentStore) AND NOT inCommitteeDepartmentStore(registerCommitteeDepartmentStore(departmentStore), departmentStore)
    CHECKED BY registerCommitteeDepartmentStore MESSAGE 'Для отдела выбрана комиссия, которая для него не действует';

CONSTRAINT revaluationCommitteeDepartmentStore(departmentStore) AND NOT inCommitteeDepartmentStore(revaluationCommitteeDepartmentStore(departmentStore), departmentStore)
    CHECKED BY revaluationCommitteeDepartmentStore MESSAGE 'Для отдела выбрана комиссия, которая для него не действует';

formedManCommittee = DATA employee (registerCommittee);
checkedManCommittee = DATA employee (registerCommittee);
labeledManCommittee = DATA employee (registerCommittee);
accountantManCommittee = DATA employee (registerCommittee);
headManCommittee = DATA employee (registerCommittee);

nameFormedManCommittee 'Цены сформировал' (committee) = commonName(formedManCommittee(committee)) IN recognizeGroup;
nameCheckedManCommittee 'Реестр проверил' (committee) = commonName(checkedManCommittee(committee)) IN recognizeGroup;
nameLabeledManCommittee 'Товар промаркировал' (committee) = commonName(labeledManCommittee(committee)) IN recognizeGroup;
nameAccountantManCommittee 'Бухгалтер' (committee) = commonName(accountantManCommittee(committee)) IN recognizeGroup;
nameHeadManCommittee 'Зав. магазином' (committee) = commonName(headManCommittee(committee)) IN recognizeGroup;

CONSTRAINT chairmanCommittee(committee) AND NOT isIncludeEmployeeCommittee(chairmanCommittee(committee), committee)
    CHECKED BY chairmanCommittee MESSAGE 'Председатель комиссии не является сотрудником отдела';
CONSTRAINT formedManCommittee(committee) AND NOT isIncludeEmployeeCommittee(formedManCommittee(committee), committee)
    CHECKED BY formedManCommittee MESSAGE 'Сформировал цены не является сотрудником отдела';
CONSTRAINT checkedManCommittee(committee) AND NOT isIncludeEmployeeCommittee(checkedManCommittee(committee), committee)
    CHECKED BY checkedManCommittee MESSAGE 'Реестр проверил не является сотрудником отдела';
CONSTRAINT labeledManCommittee(committee) AND NOT isIncludeEmployeeCommittee(labeledManCommittee(committee), committee)
    CHECKED BY labeledManCommittee MESSAGE 'Товар промаркировал не является сотрудником отдела';
CONSTRAINT accountantManCommittee(committee) AND NOT isIncludeEmployeeCommittee(accountantManCommittee(committee), committee)
    CHECKED BY accountantManCommittee MESSAGE 'Бухгалтер не является сотрудником отдела';
CONSTRAINT headManCommittee(committee) AND NOT isIncludeEmployeeCommittee(headManCommittee(committee), committee)
    CHECKED BY headManCommittee MESSAGE 'Зав. магазином не является сотрудником отдела';

CONSTRAINT inCommitteeEmployee(committee, employee) AND NOT isIncludeEmployeeCommittee(employee, committee)
    CHECKED MESSAGE 'Член комиссии не является сотрудником отделов';

castOfficerEmployeeToString40 =
     FORMULA STRING[40] ' CAST($1 AS TEXT) || \' \' || CAST($2 AS TEXT)';
nameOfficerAndNameEmployee 'Должность ФИО' (employee) = castOfficerEmployeeToString40(nameOfficerEmployee(employee), commonName(employee));

commonNameEmployeeCommittee 'Члены комиссии' (committee) =
     GROUP CONCAT nameOfficerAndNameEmployee(employee) IF inCommitteeEmployee(committee, employee), ', '
     BY committee MINCHARWIDTH 50 PREFCHARWIDTH 50;

nameEmployeeByCommittee 'Члены комиссии' (committee) =
     GROUP CONCAT commonName(employee) IF inCommitteeEmployee(committee, employee), ', '
     BY committee MINCHARWIDTH 50 PREFCHARWIDTH 50;

nameDepartmentByCommittee 'Отделы' (committee) =
     GROUP CONCAT name(departmentStore) IF inCommitteeDepartmentStore(committee, departmentStore), ', '
     BY committee MINCHARWIDTH 50 PREFCHARWIDTH 50;


FORM registerCommittee 'Комиссия для реестра цен'
    OBJECTS c=registerCommittee FIXED PANEL
    PROPERTIES(c)      name, nameFormedManCommittee, nameCheckedManCommittee,
                       nameLabeledManCommittee, nameAccountantManCommittee, nameHeadManCommittee

    TREE treeStore a=STRING[3], t=tradingNetwork, st=storeType, s=store
    PROPERTIES         READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS            stringEqualsAll(a), inStoreTypeTradingNetwork (st, t), inStoreTypeStore(st, s)

    OBJECTS dep=departmentStore
    PROPERTIES(dep)    READONLY depName = name
    PROPERTIES(c, dep) inCommitteeDepartmentStore
    FILTERS            inTradingNetworkStoreTypeStoreDepartment(t, st, s, dep)
    ORDER BY depName

    FILTERGROUP filters5
        FILTER 'Показывать отделы только для данной комиссии' 'F9' inCommitteeDepartmentStore(c, dep)

    EDIT registerCommittee OBJECT c
;

DESIGN registerCommittee FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        childConstraints = TO THE BOTTOM;

        NEW caseOne AFTER c.box {
            childConstraints = TO THE RIGHT;
            title = 'Отделы, для которых действуют комиссии';

            ADD treeStore.tree {
                fillHorizontal = 1;
            }

            ADD dep.box{
                fillHorizontal = 2;
            }
        }

        NEW oneCase AFTER caseOne{
            title = 'Состав комиссии';
            fillHorizontal = 3;
            childConstraints = TO THE BOTTOM;
            ADD PROPERTY (nameFormedManCommittee);
            ADD PROPERTY (nameCheckedManCommittee);
            ADD PROPERTY (nameLabeledManCommittee);
            ADD PROPERTY (nameAccountantManCommittee);
            ADD PROPERTY (nameHeadManCommittee);
        }

    }
}


FORM revaluationCommittee 'Комиссия переоценки'
    OBJECTS c=revaluationCommittee FIXED PANEL
    PROPERTIES(c)      name, commonNameChairmanCommittee

    TREE treeStore a=STRING[3], t=tradingNetwork, st=storeType, s=store
    PROPERTIES         READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS            stringEqualsAll(a), inStoreTypeTradingNetwork (st, t), inStoreTypeStore(st, s)

    OBJECTS dep=departmentStore
    PROPERTIES(dep)    READONLY depName = name
    PROPERTIES(c, dep) inCommitteeDepartmentStore
    FILTERS            inTradingNetworkStoreTypeStoreDepartment(t, st, s, dep)
    ORDER BY depName


    OBJECTS e=employee
    PROPERTIES(e)      READONLY name, userFirstName, userLastName, nameOfficerEmployee
    PROPERTIES(e)      ADDSESSIONFORM, EDITSESSIONFORM, delete

    PROPERTIES(c, e)   inCommitteeEmployee
    FILTERS            isIncludeEmployeeCommittee (e, c)
    FILTERGROUP filters6
        FILTER 'Показывать только членов комиссии' 'F10' inCommitteeEmployee(c, e)

    FILTERGROUP filters5
        FILTER 'Показывать отделы только для данной комиссии' 'F9' inCommitteeDepartmentStore(c, dep)

    EDIT revaluationCommittee OBJECT c
;

DESIGN revaluationCommittee FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW OneCase BEFORE e.box {
            ADD PROPERTY (commonNameChairmanCommittee);
        }

        NEW caseOne BEFORE OneCase {
            childConstraints = TO THE RIGHT;
            title = 'Отделы, для которых действуют комиссии';

            ADD treeStore.tree {
                fillHorizontal = 1;
            }

            ADD dep.box {
                fillHorizontal = 2;
            }
        };
    }
}



FORM inventoryCommittee 'Комиссия для инвентаризации'
    OBJECTS c=inventoryCommittee FIXED PANEL
    PROPERTIES(c)      name, commonNameChairmanCommittee

    TREE treeStore a=STRING[3], t=tradingNetwork, st=storeType, s=store
    PROPERTIES         READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS            stringEqualsAll(a), inStoreTypeTradingNetwork (st, t), inStoreTypeStore(st, s)

    OBJECTS dep=departmentStore
    PROPERTIES(dep)    READONLY depName = name
    PROPERTIES(c, dep) inCommitteeDepartmentStore
    FILTERS            inTradingNetworkStoreTypeStoreDepartment(t, st, s, dep)
    ORDER BY depName

    OBJECTS e=employee
    PROPERTIES(e)      READONLY name, userFirstName, userLastName, nameOfficerEmployee
    PROPERTIES(e)      ADDSESSIONFORM, EDITSESSIONFORM, delete

    PROPERTIES(c, e)   inCommitteeEmployee
    FILTERS            isIncludeEmployeeCommittee (e, c)
    FILTERGROUP filters6
        FILTER 'Показывать только членов комиссии' 'F10' inCommitteeEmployee(c, e)

    FILTERGROUP filters5
        FILTER 'Показывать отделы только для данной комиссии' 'F9' inCommitteeDepartmentStore(c, dep)

    EDIT inventoryCommittee OBJECT c

;

DESIGN inventoryCommittee FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW OneCase BEFORE e.box {
            ADD PROPERTY (commonNameChairmanCommittee);
        }

        NEW caseOne BEFORE OneCase {
            childConstraints = TO THE RIGHT;
            title = 'Отделы, для которых действуют комиссии';

            ADD treeStore.tree {
                fillHorizontal = 1;
            }

            ADD dep.box {
                fillHorizontal = 2;
            }
        };
    }
}


FORM registerCommitteeDialog 'Комиссии для реестра цен'
    OBJECTS r=registerCommittee
    PROPERTIES(r)      READONLY name, nameDepartmentByCommittee, nameFormedManCommittee, nameCheckedManCommittee, nameLabeledManCommittee,
                       nameAccountantManCommittee, nameHeadManCommittee
    PROPERTIES(r)      ADDFORM, EDITFORM

    DIALOG registerCommittee OBJECT r
;

FORM inventoryCommitteeDialog 'Комиссии для инвентаризации'
    OBJECTS ic=inventoryCommittee
    PROPERTIES(ic)      READONLY name, nameDepartmentByCommittee, nameEmployeeByCommittee, commonNameChairmanCommittee
    PROPERTIES(ic)      ADDFORM, EDITFORM

    DIALOG inventoryCommittee OBJECT ic
;

FORM revaluationCommitteeDialog 'Комиссии переоценки'
    OBJECTS rc=revaluationCommittee
    PROPERTIES(rc)      READONLY name, nameDepartmentByCommittee, nameEmployeeByCommittee, commonNameChairmanCommittee
    PROPERTIES(rc)      ADDFORM, EDITFORM

    DIALOG revaluationCommittee OBJECT rc
;
// ----------------------------------- Банк ------------------------------------------- //

GROUP banksGroup 'Информация о банке' : baseGroup;

CLASS bank 'Банк' : named, externalObject;
TABLE bank (bank);

MFOBank 'Код МФО' = DATA STRING[9] (bank) IN banksGroup;
departmentBank 'Отдел банка' = DATA STRING[100] (bank) IN banksGroup;
CBUBank 'ЦБУ' = DATA STRING[3] (bank) IN banksGroup;
infoBank 'Дополнительные сведения' = DATA STRING[100] (bank) IN banksGroup;

@metaCodeObjectDateProperty(addressBank, bank, 'Адрес банка', STRING[150], banksGroup);

FORM bank 'Банк'
OBJECTS b=bank FIXED PANEL
PROPERTIES(b)  name, addressBank, showFormaddressBank, MFOBank, departmentBank, CBUBank, infoBank
EDIT bank OBJECT b;

FORM banks 'Банки'
OBJECTS b=bank
PROPERTIES(b) READONLY name, addressBank, MFOBank, departmentBank, CBUBank, infoBank
PROPERTIES(b) ADDFORM, EDITFORM, delete;

// ----------------------------------- Расчетный счет ------------------------------------------ //

GROUP accountGroup 'Банковская информация' : baseGroup;

CLASS account 'Расчетный счет';
TABLE account (account);

bankAccount 'Банк (ИД)' = DATA bank (account) IN idGroup;

dataAccount 'Номер расчетного счета'  = DATA STRING[13] (account) IN accountGroup FIXEDCHARWIDTH 13;
dataAccountToAccount 'Расчетный счет по номеру' (string) = GROUP UNIQUE account BY dataAccount (account) WHERE account IS account;
nameBankAccount 'Наименование банка' (account) = name(bankAccount(account)) IN accountGroup;
addressBankAccount 'Адрес банка' (account) = addressBank(bankAccount(account)) IN accountGroup;
MFOBankAccount 'Код МФО банка' (account) = MFOBank(bankAccount(account)) IN accountGroup;
departmentBankAccount 'Отдел банка' (account) = departmentBank(bankAccount(account)) IN accountGroup;
CBUBankAccount 'ЦБУ банка' (account) = CBUBank(bankAccount(account)) IN accountGroup;
noteAccount 'Примечание'  = DATA STRING[50] (account) IN accountGroup;

// ----------------------------------- Форма собственности ------------------------------------------ //
CLASS ownership 'Форма собственности' : named;
shortNameOwnership 'Cокращенное название' = DATA STRING[10] (ownership) IN baseGroup FIXEDCHARWIDTH 6;
shortNameToOwnership (string) = GROUP UNIQUE ownership BY shortNameOwnership (ownership) WHERE ownership IS ownership;

FORM ownership 'Форма собственности'
OBJECTS o=ownership FIXED PANEL
PROPERTIES(o) name, shortNameOwnership;

// ----------------------------------- Лицензия ------------------------------------------ //
GROUP licensGroup 'Лицензиионная информация' : baseGroup;
CLASS license 'Лицензия' ;

dataLicense 'Номер лицензии' = DATA STRING[100] (license) IN licensGroup;
dateFromLicense 'Действует с ' = DATA DATE (license) IN licensGroup;
dateToLicense 'Действует по ' = DATA DATE (license) IN licensGroup;

//tabaccoLicense 'Табачная' = DATA BOOLEAN  (license) IN licensGroup;

// ----------------------------------- Юридическое лицо ------------------------------------------ //

GROUP lawGroup 'Юридическая информация' : publicGroup;
GROUP contactGroup 'Контактная информация' : publicGroup;
GROUP docGroup 'Для договора' : publicGroup;

CLASS ABSTRACT legalEntity 'Юридическое лицо' : named, externalObject;
TABLE legalEntity (legalEntity);

ownershipLegalEntity 'Форма собственности (ИД)' = DATA ownership (legalEntity) IN idGroup;

nameOwnershipLegalEntity 'Форма собственности' = name(ownershipLegalEntity(legalEntity)) IN lawGroup;
shortNameOwnershipLegalEntity 'Форма собственности (сокр.)' = shortNameOwnership(ownershipLegalEntity(legalEntity)) IN baseGroup;
fullNameLegalEntity 'Наименование для накладных' = DATA STRING[200] (legalEntity) IN baseGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
UNPLegalEntity 'УНП' = DATA STRING[9] (legalEntity) IN baseGroup FIXEDCHARWIDTH 9;
//UNPLegalEntityToLegalEntity (UNPLegalEntity) = GROUP UNIQUE legalEntity BY UNPLegalEntity(legalEntity);
OKPOLegalEntity 'Код по ОКПО' = DATA STRING[20] (legalEntity) IN docGroup MINCHARWIDTH 15 PREFCHARWIDTH 15;     // подставить нужное потом значение
OKYLPLegalEntity 'Код ОКЮЛП' = DATA STRING[20] (legalEntity) IN docGroup MINCHARWIDTH 15 PREFCHARWIDTH 15;
emailLegalEntity 'e-mail' = DATA STRING[100] (legalEntity) IN contactGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
siteLegalEntity 'Сайт' = DATA STRING[100] (legalEntity) IN contactGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
contactsLegalEntity 'Дополнительная информация' = DATA STRING[300] (legalEntity) IN contactGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
residentLegalEntity 'Резидент РБ' = DATA BOOLEAN (legalEntity) IN lawGroup;
manufacturerLegalEntity 'Производитель' = DATA BOOLEAN (legalEntity) IN lawGroup;

legalEntityAccount 'Ю.Л. (ИД)' = DATA legalEntity (account) IN idGroup;
userAccountLegalEntity 'Р/сч. (ИД)' = DATA account (legalEntity) IN idGroup;
defaultAccountLegalEntity(legalEntity) = GROUP MAX account AS account BY legalEntityAccount(account);
overrideAccountLegalEntity 'Основной р/сч.' (legalEntity) = UNION OVERRIDE defaultAccountLegalEntity(legalEntity), userAccountLegalEntity(legalEntity);
dataOverrideAccountLegalEntity 'Основной р/сч.' (legalEntity) = dataAccount(overrideAccountLegalEntity(legalEntity)) IN lawGroup;

CONSTRAINT legalEntity != legalEntityAccount(userAccountLegalEntity(legalEntity)) CHECKED MESSAGE 'ошибка: Р/сч. по умолчанию должен соответствовать р/сч. Ю.Л.';
equalsLegalEntityAccount 'Основной р/сч.' (legalEntity, account) = userAccountLegalEntity(legalEntity) == account;

legalEntityLicense 'ЮЛ (ИД)' = DATA legalEntity (license) IN idGroup;

//userLicenseLegalEntity 'ЮЛ (ИД)' = DATA license (legalEntity) IN idGroup;
//actingLicense 'Действующая, м/у датами' (license) = license AS license IF dateFromLicense(license) <= currentDate() AND NOT dateToLicense(license) < currentDate();
actingLicenseDate 'Действующая между датами' (license, date) = license AS license IF dateFromLicense(license) <= date AND NOT dateToLicense(license) < date AND date AS DATE;
actingLicenseLegalEntityDate 'Действующая на дату' (legalEntity, date) = GROUP MAX actingLicenseDate(license, date) BY legalEntityLicense(license), date;
actingLicenseLegalEntity 'Действующая' (legalEntity) = actingLicenseLegalEntityDate(legalEntity, currentDate());
dataActingLicenseLegalEntity 'Действующая лицензия' (legalEntity) = dataLicense(actingLicenseLegalEntity(legalEntity)) IN lawGroup;

//actingLicenseLegalEntity (legalEntity) = GROUP MAX actingLicense(license) BY legalEntityLicense(license);        // сгруппировали по ID
//overrideLicenseLegalEntity 'Действующая' (legalEntity) = UNION OVERRIDE defaultLicenseLegalEntity(legalEntity) IF dateFromLicense(defaultLicenseLegalEntity(legalEntity)) < currentDate() AND dateToLicense(defaultLicenseLegalEntity(legalEntity)) > currentDate(),
//                                                                        userLicenseLegalEntity(legalEntity) IF dateFromLicense(userLicenseLegalEntity(legalEntity)) < currentDate() AND dateToLicense(userLicenseLegalEntity(legalEntity)) > currentDate();
                        // работает как то не так, надо проверить //
//CONSTRAINT legalEntity != legalEntityLicense(userLicenseLegalEntity(legalEntity)) CHECKED MESSAGE 'ошибка: Лицензия по умолчанию должен соответствовать лицензии Ю.Л.';
//CONSTRAINT  dateFromLicense(overrideLicenseLegalEntity(legalEntity)) > currentDate() MESSAGE 'ошибка: действие лицензии еще не началось';
//CONSTRAINT  dateToLicense(overrideLicenseLegalEntity(legalEntity)) < currentDate() MESSAGE 'ошибка: действие выбранной лицензии уже окончилось';
//equalsLegalEntityLicense 'Действующая' (legalEntity, license) = userLicenseLegalEntity(legalEntity) == license IN lawGroup;

// ----------------------------------- Юридическое лицо-дата ------------------------------------------ //

TABLE legalEntityDate (legalEntity, DATE);

@metaCodeObjectDateProperty(addressLegalEntity, legalEntity, 'Юридический адрес', STRING[150], baseGroup);
@metaCodeObjectDateProperty(managerLegalEntity, legalEntity, 'Руководитель', STRING[100], lawGroup);
@metaCodeObjectDateProperty(accountantLegalEntity, legalEntity, 'Главный бухгалтер', STRING[100], lawGroup);
@metaCodeObjectDateProperty(postAddressLegalEntity, legalEntity, 'Почтовый адрес', STRING[150], lawGroup);
@metaCodeObjectDateProperty(phoneLegalEntity, legalEntity, 'Телефон/факс', STRING[100], baseGroup);


// ----------------------------------- Договор ------------------------------------------ //

GROUP contractGroup 'Общая информация' : baseGroup;

CLASS ABSTRACT contract 'Договор';
CLASS contractProvider 'Договор с поставщиком' : contract;

CLASS STATIC contractType 'Тип договора'
{
    sale 'договор купли-продажи',
    commission 'договор комиссии'
};

CLASS STATIC contractForm 'Порядок оплаты'
{
    prepayment 'с отсрочкой платежа',
    implement 'По факту реализации',
    instruction 'Платежное поручение',
    requirement 'Платежное требование'
};

numberContract 'Номер договора' = DATA STRING[30] (contract) IN contractGroup;
//formContract(contract) = DATA contractForm (contract) IN contractGroup;
//nameFormContract 'Порядок оплаты по договору' (contract) = name(formContract(contract)) IN contractGroup;
typeContract(contract) = DATA contractType (contract) IN contractGroup;
nameTypeContract 'Тип договора' (contract) = name(UNION OVERRIDE contractType.sale IF contract IS contract,
                                                                 typeContract(contract)) IN contractGroup;
dateFromContract 'Дата начала договора' = DATA DATE (contract) IN contractGroup;
dateToContract 'Дата окончания договора' = DATA DATE (contract) IN contractGroup;
currencyContract 'Валюта взаиморасчетов' = DATA STRING[20] (contract) IN contractGroup; // может и не надо   или справочником
warnContract 'За сколько дней предупредить об окончании' = DATA INTEGER (contract) IN contractGroup;
banContract 'За сколько дней запретить закупку товара' = DATA INTEGER (contract) IN contractGroup;
//delayContract 'Отсрочка платежа, дней' = DATA INTEGER (contract) IN contractGroup;
requestContract 'Форма оплаты: Платежное требование' = DATA BOOLEAN (contract) IN contractGroup;
noteContract 'Примечание' = DATA STRING[500] (contract) IN contractGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;

@metaCodeNameObjectDateProperty(formContract, contract, 'Порядок оплаты по договору', contractForm, contractGroup);
CONSTRAINT contract IS contract AND NOT formContract(contract)  MESSAGE 'ошибка: Не выбран порядок оплаты по договору';
@metaCodeObjectDateProperty(delayContract, contract, 'Отсрочка платежа(кален. дней),при "-" предоплата', DOUBLE, contractGroup);


// ----------------------------------- Поставщик ------------------------------------------ //

GROUP supplierGroup 'Информация о поставщике' : publicGroup;

CLASS supplier 'Поставщик' : legalEntity;
TABLE supplier (supplier);

CLASS company 'Компания' : legalEntity;
TABLE company (company);

CLASS customer 'Покупатель' : legalEntity;
TABLE customer (customer);

companyContract 'Организация (ИД)' = DATA company (contract) IN idGroup AUTOSET;
supplierContract 'Поставщик (ИД)' = DATA supplier (contract) IN idGroup AUTOSET;
userContractSupplier 'Контракт (ИД)' = DATA contract (supplier) IN idGroup;
//companySupplier 'Организация (ИД)' = DATA company (supplier) IN idGroup;

countContracts 'Кол-во контрактов для отдел-поставщик' (supplier, departmentStore) =
    GROUP SUM 1 IF (companyContract(contract) == companyStore(storeDepartmentStore(departmentStore))
                    AND supplierContract(contract) == supplier)
    BY supplier, departmentStore;

payerSupplier 'Плательщик НДС' = DATA BOOLEAN (supplier) IN supplierGroup;
scheduleSupplier 'Разрешить доп.заказ товаров вне графика' = DATA BOOLEAN (supplier) IN supplierGroup;
surePercentSupplier 'Обязательный % заказанных товаров в прих. накладной' = DATA INTEGER (supplier) IN supplierGroup;
allowablePercentSupplier 'Допустимый % изменения цен 1го поставщика' = DATA INTEGER (supplier) IN supplierGroup;
afterDaysSupplier 'Максимальное число дней до поставки после заказа' = DATA INTEGER (supplier) IN supplierGroup;
forHoursSupplier 'За сколько часов до поставки закрыть заказ' = DATA INTEGER (supplier) IN supplierGroup;
limitSupplier 'Кредитный лимит' = DATA INTEGER (supplier) IN docGroup;
prioritySupplier 'Приоритет оплаты (1 - в первую очередь)' = DATA INTEGER (supplier) IN docGroup;
signsSupplier 'Число знаков после запятой для строки накладной' = DATA INTEGER (supplier) IN supplierGroup;
marksSupplier 'Число знаков после зап.в сумме к оплате по накладной' = DATA INTEGER (supplier) IN supplierGroup;
periodicitySupply 'Переодичность поставок, дней' = DATA INTEGER (supplier) IN supplierGroup;

returnLossSupplier '% потерь при возврате' (supplier) = DATA DOUBLE (supplier) IN supplierGroup;

emailOrderSupplierDepartmentStore 'e-mail для передачи заказа' = DATA STRING[100] (supplier, departmentStore)IN supplierGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
contactSupplierDepartmentStore 'Контактная информация' = DATA STRING[500] (supplier, departmentStore)IN supplierGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
controlSupplierDepartmentStore(supplier, departmentStore) = DATA yesNo (supplier, departmentStore)IN idGroup;

nameControlSupplierDepartmentStore 'Контролировать ассортимент поставщика, ДА/НЕТ' (supplier, departmentStore) = name(UNION OVERRIDE
    yesNo.no IF supplier IS supplier AND departmentStore IS departmentStore,
    controlSupplierDepartmentStore(supplier, departmentStore)) IN supplierGroup;

@metaCodeNameYesNoDoubleObjectDateProperty(sureSupplierDepartmentStore, supplier, departmentStore, 'Обязателен заказ поставщику, ДА/НЕТ', yesNo, orderGroup);

overrideSupplierDepartmentStoreDate(supplier, departmentStore, date) = UNION OVERRIDE
    (TRUE IF UNION OVERRIDE emailOrderSupplierDepartmentStore(supplier, departmentStore) AND date IS DATE, contactSupplierDepartmentStore(supplier, departmentStore) AND date IS DATE),
    controlSupplierDepartmentStore(supplier, departmentStore) == yesNo.yes AND date IS DATE,
    sureSupplierDepartmentStoreVal(supplier, departmentStore, date) == yesNo.yes;

isYesControlSupplierDepartmentStore(supplier, departmentStore) = controlSupplierDepartmentStore(supplier, departmentStore) == yesNo.yes;
isYesSureSupplierDepartmentStoreVal(supplier, departmentStore, date) = sureSupplierDepartmentStoreVal(supplier, departmentStore, date) == yesNo.yes;

//numberContractSupplier 'Договор по умолчанию' (supplier) = numberContract(userContractSupplier(supplier));
defaultContractSupplier(supplier) = GROUP MAX contract AS contract BY supplierContract(contract);
//dataDefaultContractSupplier(supplier) = numberContract(defaultContractSupplier(supplier));

overrideContractSupplier 'Основной договор' (supplier) = UNION OVERRIDE defaultContractSupplier(supplier), userContractSupplier(supplier);
numberOverrideContractSupplier 'Основной договор' (supplier) = numberContract(overrideContractSupplier(supplier)) IN lawGroup;
CONSTRAINT supplier != supplierContract(userContractSupplier(supplier)) CHECKED MESSAGE 'ошибка: Договор по умолчанию для поставщика должен соответствовать договорам поставщика';
equalsSupplierContract 'Основной договор' (supplier, contract) = userContractSupplier(supplier) == contract;

inSupplierContract(supplier, contract) = supplierContract(contract) == supplier;
inSupplierAccount(supplier, account) = legalEntityAccount(account) == supplier;
inSupplierLicense(supplier, license) = legalEntityLicense(license) == supplier;

inCompanyContract(company, contract) = companyContract(contract) == company;
inCompanyAccount(company, account) = legalEntityAccount(account) == company;
inCustomerAccount(customer, account) = legalEntityAccount(account) == customer;

isInSupplierContractCompany(supplier, contract, company)  = inSupplierContract(supplier, contract) AND inCompanyContract(company, contract);
isInCompanySupplier (company, supplier) = GROUP SUM 1 IF isInSupplierContractCompany(supplier, contract, company) BY company, supplier;

nameSupplierContract 'Поставщик' (contract) = name(supplierContract(contract)) MAXCHARWIDTH 30 PREFCHARWIDTH 30;
nameCompanyContract 'Компания' (contract) = name(companyContract(contract)) MAXCHARWIDTH 30 PREFCHARWIDTH 30;

userContractCompanySupplier 'Контракт (ИД)' = DATA contract (company, supplier) IN idGroup;
//numberContractCompanySupplier 'Договор по умолчанию' (company, supplier) = numberContract(userContractCompany(company));
actingContract(contract) = contract IF dateFromContract(contract) <= currentDate() AND NOT dateToContract(contract) < currentDate();
actingContractCompanySupplier(company, supplier) = GROUP MAX actingContract(contract) BY companyContract(contract), supplierContract(contract);

overrideContractCompanySupplier 'Основной договор' (company, supplier) = UNION OVERRIDE actingContractCompanySupplier(company, supplier), userContractCompanySupplier(company, supplier);
numberOverrideContractCompanySupplier 'Основной договор' (company, supplier) = numberContract(overrideContractCompanySupplier(company, supplier)) IN lawGroup;
CONSTRAINT supplier != supplierContract(userContractCompanySupplier(company, supplier)) CHECKED MESSAGE 'ошибка: Договор по умолчанию для поставщика должен соответствовать договорам поставщика';
CONSTRAINT company != companyContract(userContractCompanySupplier(company, supplier)) CHECKED MESSAGE 'ошибка: Договор по умолчанию для компании должен соответствовать договорам компании';
equalsCompanySupplierContract 'Основной договор' (company, supplier, contract) = userContractCompanySupplier(company, supplier) == contract;


FORM contract 'Договор'
    OBJECTS c=contract FIXED PANEL
    PROPERTIES(c) numberContract, nameCompanyContract, nameSupplierContract, nameTypeContract, nameformContract, showFormNameformContract,
                   delayContract, showFormdelayContract, dateFromContract, dateToContract, currencyContract, warnContract, banContract,
                   requestContract, noteContract

    EDIT contract OBJECT c
    EDIT contractProvider OBJECT c
;

DESIGN contract FROM DEFAULT {
    main{
        c.box {
            childConstraints = TO THE BOTTOM;

            NEW oneCase {
                childConstraints = TO THE RIGHT;
                title = 'Контрагенты';
                ADD PROPERTY(numberContract);
                ADD PROPERTY(nameCompanyContract);
                ADD PROPERTY(nameSupplierContract);
            }

            NEW twoCase{
                title = 'Даты';
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(dateFromContract);
                ADD PROPERTY(dateToContract);
                ADD PROPERTY(currencyContract);
            }
            ADD c.contractGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    }
}

FORM contracts 'Договоры'
    OBJECTS c=contract
    PROPERTIES(c) READONLY numberContract, nameCompanyContract, nameSupplierContract, nameformContract,
                   nameTypeContract, dateFromContract, dateToContract, warnContract, banContract,
                   delayContract

    PROPERTIES(c) ADDFORM, EDITFORM, delete
    ORDER BY nameCompanyContract, nameSupplierContract
;

FORM supplier 'Поставщик'
    TREE treeStore y=STRING[3], t=tradingNetwork, st=storeType, so=store
    PROPERTIES READONLY OBJVALUE(y), name(t), name(st), name(so)

    OBJECTS s=supplier FIXED PANEL, dt=DATE FIXED PANEL
    PROPERTIES(s) name, fullNameLegalEntity, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity, addressLegalEntity, showFormaddressLegalEntity,
                  postAddressLegalEntity, showFormpostAddressLegalEntity, managerLegalEntity, showFormmanagerLegalEntity,
                  accountantLegalEntity, showFormaccountantLegalEntity, phoneLegalEntity, showFormphoneLegalEntity,
                  UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity, emailLegalEntity, siteLegalEntity, payerSupplier,
                  residentLegalEntity, manufacturerLegalEntity, surePercentSupplier, allowablePercentSupplier,
                  afterDaysSupplier, periodicitySupply, forHoursSupplier, limitSupplier, prioritySupplier, signsSupplier,
                  returnLossSupplier, marksSupplier //dataActingLicenseLegalEntity, numberOverrideContractSupplier, dataOverrideAccountLegalEntity

    OBJECTS a=account
    PROPERTIES(a) dataAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount, MFOBankAccount, noteAccount, ADDOBJ, delete

    OBJECTS co=company
    PROPERTIES(co) name

    OBJECTS c=contractProvider
    PROPERTIES(c)  READONLY numberContract, nameCompanyContract, nameformContract, nameTypeContract, dateFromContract,
                   dateToContract, currencyContract, noteContract, delayContract
    PROPERTIES(c)  ADDFORM, EDITFORM, delete

    OBJECTS l=license
    PROPERTIES(l) dataLicense, dateFromLicense, dateToLicense, ADDOBJ, delete   //        tabaccoLicense

    OBJECTS d=departmentStore
    PROPERTIES(d) nameStoreDepartmentStore, name

    PROPERTIES (dt) OBJVALUE BACKGROUND dateDiffersCurrent(dt)

    PROPERTIES(s, d) emailOrderSupplierDepartmentStore, contactSupplierDepartmentStore, nameControlSupplierDepartmentStore  //namesureSupplierDepartmentStore, showFormNamesureSupplierDepartmentStore
    PROPERTIES       namesureSupplierDepartmentStoreOver(s, d, dt) BACKGROUND namesureSupplierDepartmentStoreDate(s, d, dt), showFormNamesureSupplierDepartmentStoreOver(s, d)

//    PROPERTIES(s,c) equalsSupplierContract
    PROPERTIES(s,a) equalsLegalEntityAccount
    //PROPERTIES(s,l) equalsLegalEntityLicense

    PROPERTIES(co, s)    numberOverrideContractCompanySupplier
    PROPERTIES(co, s, c) equalsCompanySupplierContract

    FILTERS stringEqualsAll(y),
        inStoreTypeTradingNetwork (st, t),
        inStoreTypeStore (st, so),
        inTradingNetworkStoreTypeStoreDepartment(t, st, so, d),
        inSupplierContract(s, c),
        inSupplierAccount(s, a),
        inCompanyContract(co, c),
        inSupplierLicense(s, l)
    FILTERGROUP filters1
        FILTER 'Показывать только поставщиков, с которыми есть договор' 'F5' isInCompanySupplier(co, s) DEFAULT

    FILTERGROUP filters9
        FILTER 'Показывать только с заполненными полями' 'F10' overrideSupplierDepartmentStoreDate(s, d, dt)
        FILTER 'Показывать только с заполненным полем: e-mail' 'F9' emailOrderSupplierDepartmentStore(s, d)
        FILTER 'Показывать только с заполненным полем: контактная инф-ия' 'F8' contactSupplierDepartmentStore(s, d)
        FILTER 'Показывать только с заполненным полем: контролировать пост-ка' 'F7' isYesControlSupplierDepartmentStore(s, d)
        FILTER 'Показывать только с заполненным полем: обязателен заказ поставщику' 'F6' isYesSureSupplierDepartmentStoreVal(s, d, dt)

    EDIT supplier OBJECT s
;

DESIGN supplier FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        s.box {
            childConstraints = TO THE RIGHT;

            NEW oneCase {
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(name(s));
                ADD PROPERTY(fullNameLegalEntity(s));
                ADD PROPERTY(addressLegalEntity(s));
                ADD PROPERTY(phoneLegalEntity(s));
                ADD PROPERTY(UNPLegalEntity(s));
                ADD s.contactGroup;
                ADD s.lawGroup {
                    ADD PROPERTY(shortNameOwnershipLegalEntity(s));
                };
            };

            NEW twoCase{
                childConstraints = TO THE BOTTOM;
                ADD s.docGroup;
                ADD s.supplierGroup;
            }
        }

        NEW prop.box BEFORE functions.box{
            tabbedPane = TRUE;
            ADD a.box;
            NEW firstCase {
                title = 'Компания-договор';
                childConstraints = TO THE RIGHT;
                ADD co.box;
                ADD c.box;
            }

            ADD l.box;

            ADD d.box {

                ADD dt.box BEFORE d.grid.box;
                ADD treeStore.box BEFORE d.grid.box;
                POSITION treeStore.box TO THE LEFT d.grid.box;
                d.grid.box {
                fillHorizontal = 3;
                };
            }

        }
    }
}

FORM suppliers 'Поставщики'
    OBJECTS s=supplier
    PROPERTIES(s) READONLY name, fullNameLegalEntity, shortNameOwnershipLegalEntity, UNPLegalEntity, dataOverrideAccountLegalEntity, addressLegalEntity, phoneLegalEntity
    PROPERTIES(s) ADDFORM, EDITFORM, delete
;

FORM company 'Компания'
    OBJECTS co=company FIXED PANEL
    PROPERTIES(co) name, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity, fullNameLegalEntity, addressLegalEntity,
                   showFormaddressLegalEntity, postAddressLegalEntity, showFormpostAddressLegalEntity, managerLegalEntity,
                   showFormmanagerLegalEntity, accountantLegalEntity, showFormaccountantLegalEntity, phoneLegalEntity, showFormphoneLegalEntity,
                   UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity, emailLegalEntity, siteLegalEntity

    OBJECTS a=account
    PROPERTIES(a)  dataAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount, MFOBankAccount, noteAccount, ADDOBJ, delete

    OBJECTS s=supplier
    PROPERTIES(s) name

    OBJECTS c=contractProvider
    PROPERTIES(c)  READONLY numberContract, nameSupplierContract, nameformContract, nameTypeContract, dateFromContract,
                   dateToContract, currencyContract, noteContract, delayContract
    PROPERTIES(c)  ADDFORM, EDITFORM, delete

    PROPERTIES(co, s)    numberOverrideContractCompanySupplier
    PROPERTIES(co, s, c) equalsCompanySupplierContract
    FILTERS inCompanyContract(co, c),
            inCompanyAccount(co, a),
            inSupplierContract(s, c)

    FILTERGROUP filters1
        FILTER 'Показывать только поставщиков, с которыми есть договор' 'F10' isInCompanySupplier(co, s) DEFAULT

    EDIT company OBJECT co
;

DESIGN company FROM DEFAULT {
    main{
       preferredSize = (1024, 768);
       co.box {
            childConstraints = TO THE RIGHT;

            NEW oneCase {
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(name(co));
                ADD PROPERTY(fullNameLegalEntity(co));
                ADD PROPERTY(addressLegalEntity(co));
                ADD PROPERTY(phoneLegalEntity(co));
                ADD PROPERTY(UNPLegalEntity(co));
                ADD co.contactGroup;
            };

            NEW twoCase{
                childConstraints = TO THE BOTTOM;
                ADD co.docGroup;
                ADD co.lawGroup {
                    ADD PROPERTY(shortNameOwnershipLegalEntity(co));
                };
            }
       }

       NEW firstCase BEFORE functions.box {
            tabbedPane = TRUE;
            ADD a.box;
            NEW v.box { title = 'Поставщик-договор'; }
            ADD s.box IN v.box;
            ADD c.box IN v.box;
            POSITION s.box TO THE LEFT c.box;
       }
   }
}
FORM companies 'Компании'
    OBJECTS co=company
    PROPERTIES(co) READONLY name, fullNameLegalEntity, shortNameOwnershipLegalEntity, UNPLegalEntity, dataOverrideAccountLegalEntity, addressLegalEntity, phoneLegalEntity
    PROPERTIES(co) ADDFORM, EDITFORM, delete
;

FORM customer 'Покупатель'
    OBJECTS cu=customer FIXED PANEL
    PROPERTIES(cu)     name, fullNameLegalEntity, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity, addressLegalEntity, showFormaddressLegalEntity,
                       postAddressLegalEntity, showFormpostAddressLegalEntity, managerLegalEntity, showFormmanagerLegalEntity,
                       accountantLegalEntity, showFormaccountantLegalEntity, phoneLegalEntity, showFormphoneLegalEntity,
                       UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity, emailLegalEntity, siteLegalEntity, payerSupplier,
                       residentLegalEntity
    OBJECTS a=account
    PROPERTIES(a)      dataAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount,
                       MFOBankAccount, noteAccount, ADDOBJ, delete
    FILTERS inCustomerAccount(cu, a)

    EDIT customer OBJECT cu

;

FORM customers 'Покупатели'
    OBJECTS cu=customer
    PROPERTIES(cu)   READONLY name, fullNameLegalEntity, UNPLegalEntity, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity,
                              addressLegalEntity
    PROPERTIES(cu)   ADDFORM, EDITFORM, delete
;

//--------------------------------------Дисконтные карточки------------------------------------------------------------------//
CLASS discountCard 'Дисконтная карта';

numberDiscountCard 'Номер дисконтной карты' (discountCard) = //DATA INTEGER (discountCard);
        PARTITION SUM 1 IF discountCard IS discountCard
        ORDER discountCard IN recognizeGroup MINCHARWIDTH 3 PREFCHARWIDTH 3;

customerDiscountCard (discountCard) = DATA customer(discountCard);
nameCustomerDiscountCard 'Держатель дисконтной карты' (discountCard) = name(customerDiscountCard(discountCard));

FORM discountCard 'Дисконтная карта'
    OBJECTS d=discountCard FIXED PANEL
    PROPERTIES(d) numberDiscountCard, nameCustomerDiscountCard

    EDIT discountCard OBJECT d
;

FORM discountCards 'Дисконтные карты'
    OBJECTS d=discountCard
    PROPERTIES(d) READONLY numberDiscountCard, nameCustomerDiscountCard
    PROPERTIES(d) ADDFORM, EDITFORM, delete
;

//---------------------------- по поставщикам и товарам ----------------------------------------

//--------------------------------------Заказ------------------------------------------------------------------//

GROUP orderSupplierGroup 'Информация о заказе' : publicGroup;
GROUP dateOrderSupplierGroup 'Даты' : publicGroup;

CLASS preliminaryOrder 'Предварительный заказ' : historyObject;

dateOrderPreliminaryOrder 'Дата заказа' = DATA DATE (preliminaryOrder) IN baseGroup;
dateSupplyPreliminaryOrder 'Дата поставки' = DATA DATE (preliminaryOrder) IN baseGroup;
departmentStorePreliminaryOrder 'Отдел заказа (ИД)' = DATA departmentStore (preliminaryOrder) AUTOSET;
nameDepartmentStorePreliminaryOrder 'Отдел заказа' (preliminaryOrder) = name(departmentStorePreliminaryOrder(preliminaryOrder)) IN orderSupplierGroup AUTOSET;
supplierPreliminaryOrder 'Поставщик заказа (ИД)' = DATA supplier (preliminaryOrder);
nameSupplierPreliminaryOrder 'Поставщик заказа' (preliminaryOrder) = name(supplierPreliminaryOrder(preliminaryOrder)) IN supplierGroup;
genTimeTablePreliminaryOrder 'График поставок'  = DATA genTimeTable (preliminaryOrder);

TABLE supplierDepartmentStoreDate (supplier, departmentStore, DATE);

@metaCodeDoubleObjectDateProperty(timeTable, supplier, departmentStore, 'Поставка', BOOLEAN, baseGroup);

CLASS ABSTRACT order 'Заказ' : historyObject, numberedObject;
CLASS orderSupplier 'Заказ поставщику' : order;
CLASS orderSupplierPosted 'Закрытый заказ поставщику' :orderSupplier, postedObject;
//CLASS orderStock 'Заказ складу' :order;

dataOrderSupplier 'Номер заказа' (orderSupplier) = DATA INTEGER (orderSupplier) IN orderSupplierGroup;
maxDataOrderSupplier = UNION OVERRIDE 0, [GROUP MAX dataOrderSupplier(orderSupplier)]();
nextDataOrderSupplier = maxDataOrderSupplier() + 1;
dataOrderSupplier (orderSupplier) <- OLD nextDataOrderSupplier() ON ASSIGN orderSupplier IS orderSupplier;

departmentStoreOrderSupplier 'Отдел заказа (ИД)' = DATA departmentStore (orderSupplier);
nameDepartmentStoreOrderSupplier 'Отдел заказа' (orderSupplier) = name(departmentStoreOrderSupplier(orderSupplier));

supplierOrderSupplier 'Поставщик заказа (ИД)' = DATA supplier (orderSupplier);
nameSupplierOrderSupplier 'Поставщик заказа' (orderSupplier) = name(supplierOrderSupplier(orderSupplier));

curDateOrderSupplier 'Дата заказа' = DATA DATE (orderSupplier) IN dateOrderSupplierGroup;
curDateOrderSupplier (orderSupplier) <- currentDate() ON ASSIGN departmentStoreOrderSupplier(orderSupplier);
dateOrderSupplier 'Дата поставки' = DATA DATE (orderSupplier) IN dateOrderSupplierGroup;
dateOrderSupplier (orderSupplier) <- addDate2(currentDate(),1) ON ASSIGN departmentStoreOrderSupplier(orderSupplier);

preliminaryOrderOrderSupplier 'Предварительный заказ заказа' = DATA preliminaryOrder (orderSupplier);

preliminaryOrderToOrderSupplier 'Заказ по предварительному заказу' (preliminaryOrder) = GROUP UNIQUE orderSupplier BY preliminaryOrderOrderSupplier(orderSupplier);
dataOrderPreliminaryOrder 'Номер заказа для предварительного заказа' (preliminaryOrder) = dataOrderSupplier(preliminaryOrderToOrderSupplier(preliminaryOrder));

completePercentageOrderSupplier 'Процент выполнения' (orderSupplier) = DATA DOUBLE (orderSupplier) IN orderSupplierGroup;
allowablePercentOrderSupplier 'Допустимый % изменения цен 1го поставщика' = DATA INTEGER (orderSupplier) IN supplierGroup;

//quantityPackItemOver 'Количество в грузовом месте' (item) = UNION OVERRIDE 1 IF item IS item, quantityPackItem(item);
quantityRealizationDepartmentStoreItemOver 'Прожад в день' (departmentStore, item) =
    UNION OVERRIDE 0 IF (departmentStore IS departmentStore AND item IS item), quantityRealizationDepartmentStoreItem(departmentStore, item);
balanceDepartmentStoreItemOver 'Текущий остаток' (departmentStore, item) =
    UNION OVERRIDE 0 IF (departmentStore IS departmentStore AND item IS item), balanceDepartmentStoreItem(departmentStore, item);
minReserveItemOver 'Минимальный резерв' (item) = UNION OVERRIDE 0 IF item IS item, minReserveItem(item);
//minQuantityOrderItemOver 'Минимальный заказ' (item) = UNION OVERRIDE 0 IF item IS item, minQuantityOrderItem(item);

packQuantityItemOrderSupplier 'Заказ(мест)' = DATA DOUBLE (orderSupplier, item);
sumQuantityItemOrderSupplier 'Заказ(единиц)' (orderSupplier, item) = DATA DOUBLE (orderSupplier, item);
sumQuantityItemOrderSupplier (orderSupplier, item) <- (UNION OVERRIDE 1 IF item IS item, quantityPackItem(item)) * packQuantityItemOrderSupplier(orderSupplier, item)
                                                      ON CHANGE packQuantityItemOrderSupplier(orderSupplier, item);
priceSupplierItemOrderSupplier 'Цена поставщика' (orderSupplier, item) = DATA DOUBLE (orderSupplier, item);
priceSupplierItemOrderSupplier (orderSupplier, item) <- priceSupplierItemDepartmentOver(supplierOrderSupplier(orderSupplier), item, departmentStoreOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier))
    ON ASSIGN packQuantityItemOrderSupplier(orderSupplier, item);

suppliersRangeItemDateOrderSupplier 'Шкала' (orderSupplier, item) = DATA range (orderSupplier, item) IN idGroup;
suppliersRangeItemDateOrderSupplier (orderSupplier, item) <- suppliersRangeItemVal(item, dateOrderSupplier(orderSupplier))
                                                             ON ASSIGN packQuantityItemOrderSupplier(orderSupplier, item);
numberSuppliersRangeOrderSupplier 'НДС поставщика, номер' (orderSupplier, item) =
    dataRange(suppliersRangeItemDateOrderSupplier(orderSupplier, item));
dataSuppliersRangeOrderSupplier 'НДС поставщика, %' (orderSupplier, item) =
    UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item,
                   dataActingRateRangeDate(suppliersRangeItemDateOrderSupplier(orderSupplier, item), dateOrderSupplier(orderSupplier));
CONSTRAINT taxRange(suppliersRangeItemDateOrderSupplier(orderSupplier, item)) != tax.taxNDS CHECKED BY suppliersRangeItemDateOrderSupplier MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

retailPriceItemOrderSupplierVal 'Розничная цена' (orderSupplier, item) =
    retailPriceItemDepartmentVal(item, departmentStoreOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier));
retailPriceItemOrderSupplier 'Розничная цена' (orderSupplier, item) =
    UNION OVERRIDE 0 IF (orderSupplier IS orderSupplier AND item IS item), retailPriceItemOrderSupplierVal(orderSupplier, item);

wareOrderSupplier 'Посуда (ИД)' (orderSupplier, item) = DATA ware (orderSupplier, item);
wareOrderSupplier (orderSupplier, item) <- wareItem(item) ON ASSIGN packQuantityItemOrderSupplier(orderSupplier, item);
nameWareOrderSupplier 'Посуда' (orderSupplier, item) = name(wareOrderSupplier(orderSupplier, item));
priceWareOrderSupplier 'Цена посуды' (orderSupplier, item) = priceWareVal(wareOrderSupplier(orderSupplier, item), dateOrderSupplier(orderSupplier));
dataRangeWareOrderSupplier 'Шкала(ИД)' (orderSupplier, item) = DATA range (orderSupplier, item) IN idGroup;
dataRangeWareOrderSupplier (orderSupplier, item) <- rangeWareVal(wareOrderSupplier(orderSupplier, item), dateOrderSupplier(orderSupplier))
                                                    ON CHANGE wareOrderSupplier(orderSupplier, item);
numberDataRangeWareOrderSupplier 'Шкала НДС посуды' (orderSupplier, item) =
    dataRange(dataRangeWareOrderSupplier(orderSupplier, item));
dataWareRangeOrderSupplier 'НДС посуды, %' (orderSupplier, item) =
    dataActingRateRangeDate(dataRangeWareOrderSupplier(orderSupplier, item), dateOrderSupplier(orderSupplier));

sumWareOrderSupplier 'Сумма по посуде' (orderSupplier, item) =
    UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item,
                   sumQuantityItemOrderSupplier(orderSupplier, item) * priceWareOrderSupplier(orderSupplier, item);
totalSumWareOrderSupplier 'Общая сумма по посуде' (orderSupplier) =
    GROUP SUM sumWareOrderSupplier(orderSupplier, item) BY orderSupplier;

sumItemOrderSupplier 'Сумма заказа' (orderSupplier, item) =
    sumQuantityItemOrderSupplier(orderSupplier, item) * priceSupplierItemOrderSupplier(orderSupplier, item) IN baseGroup;
totalSumOrderSupplier 'Общая сумма заказа' (orderSupplier) = GROUP SUM sumItemOrderSupplier(orderSupplier, item) BY orderSupplier IN orderSupplierGroup;

sumVatOrderSupplier 'Сумма НДС, за ед.' (orderSupplier, item) =
    round0(
    (UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item, priceSupplierItemOrderSupplier(orderSupplier, item) *
     UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item, dataSuppliersRangeOrderSupplier(orderSupplier, item))/100);
sumDetailVatOrderSupplier 'Сумма НДС по товару' (orderSupplier, item) =
    round0(
    (UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item,
                    sumQuantityItemOrderSupplier(orderSupplier, item) * sumVatOrderSupplier(orderSupplier, item)));

sumVatWareOrderSupplier 'Сумма НДС по посуде, за ед.' (orderSupplier, item) =
    round0(
    (UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item, priceWareOrderSupplier(orderSupplier, item) *
     UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item, dataWareRangeOrderSupplier(orderSupplier, item))/100);
sumDetailVatWareOrderSupplier 'Сума НДС по посуде' (orderSupplier, item) =
    round0(
    (UNION OVERRIDE 0 IF orderSupplier IS orderSupplier AND item IS item,
                    sumQuantityItemOrderSupplier(orderSupplier, item) * sumVatWareOrderSupplier(orderSupplier, item)));
sumDetailVatItemOrderSupplier 'Сумма НДС' (orderSupplier, item) =
    sumDetailVatOrderSupplier(orderSupplier, item) (+) sumDetailVatWareOrderSupplier(orderSupplier, item);

totalSumVatOrderSupplier 'Общая сумма НДС' (orderSupplier) =
    GROUP SUM sumDetailVatItemOrderSupplier(orderSupplier, item) BY orderSupplier IN orderSupplierGroup;

fullSumItemOrderSupplier 'Сумма заказа с НДС' (orderSupplier, item) =
    sumItemOrderSupplier(orderSupplier, item) (+) sumDetailVatOrderSupplier(orderSupplier, item) (+) sumWareOrderSupplier(orderSupplier, item);
totalFullSumOrderSupplier 'Общая сумма заказа с НДС' (orderSupplier) =
    GROUP SUM fullSumItemOrderSupplier(orderSupplier, item) BY orderSupplier IN orderSupplierGroup;

nameinActionItemOrderSupplier 'Товар акции' (orderSupplier, item) =
    nameinActionItemDepartmentOver(item, departmentStoreOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier));
banMovementDepartmentStoreOrderSupplier 'Запрет на внутреннее перемещение товара' (orderSupplier, item) =
    banMovementDepartmentStoreItem(departmentStoreOrderSupplier(orderSupplier), item);
topItem 'Топ' (orderSupplier, item) = topDepartmentStoreItem(departmentStoreOrderSupplier(orderSupplier), item);
CONSTRAINT packQuantityItemOrderSupplier(orderSupplier, item) <= 0 MESSAGE 'Количество должно быть положительным';
CONSTRAINT priceSupplierItemOrderSupplier(orderSupplier, item) <= 0 MESSAGE 'Цена должна быть положительной';

castFiveObjectsToString100 =
     FORMULA STRING[200] '\'№\' || CAST($1 AS TEXT) || \'  от \' || CAST($2 AS TEXT) || \'  Количество: \' || CAST($3 AS TEXT) || \'  Розн. цена: \' || CAST($4 AS TEXT) || \'(\' || CAST($5 AS TEXT) || \')\' ';
//если разбивать формулу на 2 строки выдает ошибку

isItemInOrderSupplier 'Товар в заказе' (orderSupplier, item) = packQuantityItemOrderSupplier(orderSupplier, item) > 0;
lastOrderSupplierVal 'Последний заказ(ИД)' (orderSupplier, item) =
     PARTITION PREV orderSupplier AND isItemInOrderSupplier(orderSupplier, item)
     BY supplierOrderSupplier(orderSupplier), departmentStoreOrderSupplier(orderSupplier), item
     ORDER dateOrderSupplier(orderSupplier);
lastOrderSupplier 'Последний заказ' (orderSupplier, item) =
     castFiveObjectsToString100(dataOrderSupplier(lastOrderSupplierVal(orderSupplier, item)),
                                dateOrderSupplier(lastOrderSupplierVal(orderSupplier, item)),
                                packQuantityItemOrderSupplier(lastOrderSupplierVal(orderSupplier, item), item),
                                retailPriceItemOrderSupplier(lastOrderSupplierVal(orderSupplier, item), item),
                                nameSupplierOrderSupplier(lastOrderSupplierVal(orderSupplier, item))
     );

quantityDaysNextOrder 'Дней до поставки' (orderSupplier) =
    UNION MAX 0 IF orderSupplier IS orderSupplier,
              daysInclBetweenDates(curDateOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier)) IN dateOrderSupplierGroup;

quantityOrderOrderSupplier 'Заказов на дату заказа' (supplier, departmentStore, date) =
    GROUP SUM 1 IF orderSupplier
    BY supplierOrderSupplier(orderSupplier), departmentStoreOrderSupplier(orderSupplier), curDateOrderSupplier(orderSupplier);

quantitySupplyOrderSupplier 'Заказов на дату поставки' (supplier, departmentStore, date) =
    GROUP SUM 1 IF orderSupplier BY supplierOrderSupplier(orderSupplier), departmentStoreOrderSupplier(orderSupplier),
                                    dateOrderSupplier(orderSupplier);
quantityOrderPreliminaryOrder 'Предварительных заказов на дату заказа' (supplier, departmentStore, date) =
    GROUP SUM 1 IF preliminaryOrder BY supplierPreliminaryOrder(preliminaryOrder), departmentStorePreliminaryOrder(preliminaryOrder),
                                       dateOrderPreliminaryOrder(preliminaryOrder);
quantitySupplyPreliminaryOrder 'Предварительных заказов на дату поставки' (supplier, departmentStore, date) =
    GROUP SUM 1 IF preliminaryOrder BY supplierPreliminaryOrder(preliminaryOrder), departmentStorePreliminaryOrder(preliminaryOrder),
                                       dateSupplyPreliminaryOrder(preliminaryOrder);
nextDateOrder 'Дата следующей поставки' (preliminaryOrder) =
    PARTITION PREV dateSupplyPreliminaryOrder(preliminaryOrder)
    BY supplierPreliminaryOrder(preliminaryOrder), departmentStorePreliminaryOrder(preliminaryOrder)
    ORDER DESC dateSupplyPreliminaryOrder(preliminaryOrder);

minDateSupplyOrderSupplier (supplier, departmentStore, date) = GROUP MIN dateSupplyPreliminaryOrder(preliminaryOrder)
                                                                         IF dateSupplyPreliminaryOrder(preliminaryOrder) > (date AS DATE)
                                                                         BY supplierPreliminaryOrder(preliminaryOrder), departmentStorePreliminaryOrder(preliminaryOrder), date;

nextDateOrderSupplier 'Дата следующей поставки' (orderSupplier) = DATA DATE (orderSupplier) IN dateOrderSupplierGroup;
nextDateOrderSupplier (orderSupplier) <- [UNION OVERRIDE periodicitySupply(supplierOrderSupplier(orderSupplier)),
                                                        minDateSupplyOrderSupplier(supplierOrderSupplier(orderSupplier),
                                                        departmentStoreOrderSupplier(orderSupplier),
                                                        dateOrderSupplier(orderSupplier))] (orderSupplier)
                                         ON ASSIGN supplierOrderSupplier(orderSupplier);

quantityDaysAfterNextOrder 'Дней до следующей поставки' (orderSupplier) =
    daysInclBetweenDates(curDateOrderSupplier(orderSupplier), nextDateOrderSupplier(orderSupplier)) IN dateOrderSupplierGroup;
CONSTRAINT nextDateOrderSupplier(orderSupplier) < dateOrderSupplier(orderSupplier) MESSAGE 'Дата поставки не должна превышать дату поставки следующей поставки';
quantityRealizationItemNextOrder 'Предполагаемое количество реализации товара до следующей поставки' (orderSupplier, item) =
    quantityDaysAfterNextOrder(orderSupplier)*quantityRealizationDepartmentStoreItemOver(departmentStoreOrderSupplier(orderSupplier), item);
balance2DepartmentStoreItem 'Величина остатков товара за вычетом минимального резерва' (orderSupplier, item) =
    balanceDepartmentStoreItemOver(departmentStoreOrderSupplier(orderSupplier), item) (-) minReserveItemOver(item);
isEnoughItem 'Достаточно ли остатков товара' (orderSupplier, item) =
    balanceDepartmentStoreItemOver(departmentStoreOrderSupplier(orderSupplier), item) (-) quantityRealizationItemNextOrder(orderSupplier, item) < minReserveItemOver(item);
recommendCountOrderSupplier 'Рекомендуемый заказ' (orderSupplier, item) =
    IF isEnoughItem(orderSupplier, item) THEN
    (UNION MAX floor((quantityRealizationItemNextOrder(orderSupplier, item)-balance2DepartmentStoreItem(orderSupplier, item))/
    (UNION OVERRIDE 1 IF item IS item, quantityPackItem(item))), ((UNION OVERRIDE 0 IF item IS item, minQuantityOrderItem(item)) IF orderSupplier IS orderSupplier))
    ELSE 0 IF (orderSupplier IS orderSupplier AND item IS item);

isBanSupplierItemDepartmentOrderSupplier (orderSupplier, item) = banSupplierItemDepartmentVal (
    supplierOrderSupplier(orderSupplier), item, departmentStoreOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier)) != yesNo.yes;

isSupplierItemDepartmentOrderSupplier (orderSupplier, item) = isSupplierItemDepartmentVal(
    supplierOrderSupplier(orderSupplier), item, departmentStoreOrderSupplier(orderSupplier), dateOrderSupplier(orderSupplier)) == yesNo.yes;

isSupplyDatePreliminaryOrder (preliminaryOrder, date) = dateSupplyPreliminaryOrder(preliminaryOrder) >= (date AS DATE) ;
isOrderDatePreliminaryOrder (preliminaryOrder, date) = dateOrderPreliminaryOrder(preliminaryOrder) >= (date AS DATE) ;

@metaCodePostedObject (orderSupplier);

FORM preliminaryOrder 'Предварительный заказ'
OBJECTS p=preliminaryOrder FIXED PANEL
PROPERTIES(p) nameDepartmentStorePreliminaryOrder, nameSupplierPreliminaryOrder, dateOrderPreliminaryOrder,
              dateSupplyPreliminaryOrder
EDIT preliminaryOrder OBJECT p;

DESIGN preliminaryOrder FROM DEFAULT {
    p.box{
        title = 'Предварительный заказ';
        childConstraints = TO THE BOTTOM;
        ADD PROPERTY (nameDepartmentStorePreliminaryOrder);
        ADD PROPERTY (nameSupplierPreliminaryOrder);
        ADD PROPERTY (dateOrderPreliminaryOrder);
        ADD PROPERTY (dateSupplyPreliminaryOrder);
    }
}

tmpGTT = SESSION DATA genTimeTable();
tmpDate = SESSION DATA DATE();
tmpDateS = SESSION DATA DATE();

createGenTimeTable 'Создать график поставок' = ACTION () NEWSESSION {
    FORM genTimeTable INIT [ACTION ADDOBJ genTimeTable]() MODAL;

    IF formResult() == formResult.ok THEN {

        SET tmpGTT() <- chosenObject('g');
        // генерация через N недель
        IF genTimeTableType(tmpGTT()) == genType.genWeek THEN {
            // бежим по всем дням недели
            FOR inDayGenTimeTable(tmpGTT(), dow) DO {
                SET tmpDate() <- startDateGenTimeTable(tmpGTT());
                // ищем первую дату начиная со стартовой с нужным днем недели
                WHILE DOWInDate(tmpDate()) != dow AS DOW DO {
                    SET tmpDate() <- addDate2(tmpDate(), 1);
                };

                // итерируемся по всем датам через период * 7 дней
                WHILE tmpDate() <= endDateGenTimeTable(tmpGTT()) DO {
                    ADDOBJ preliminaryOrder;
                    FOR o == addedObject() DO {
                        SET departmentStorePreliminaryOrder(o) <- departmentStoreGenTimeTable(tmpGTT());
                        SET supplierPreliminaryOrder(o) <- supplierGenTimeTable(tmpGTT());
                        SET dateOrderPreliminaryOrder(o) <- subtractDate2(tmpDate(), dayBeforeGenTimeTable(tmpGTT()));
                        SET dateSupplyPreliminaryOrder(o) <- tmpDate();
                        SET genTimeTablePreliminaryOrder(o) <- tmpGTT();
                    };
                    SET tmpDate() <- addDate2(tmpDate(), periodGenTimeTable(tmpGTT()) * 7);
                };
            };
        };

        // генерация через N дней
        IF genTimeTableType(tmpGTT()) == genType.genDays THEN {
            SET tmpDate() <- dayLastOrderGenTimeTable(tmpGTT());
            // итерируемся по всем датам через n дней
            WHILE tmpDate() <= endDateGenTimeTable(tmpGTT()) DO {
                IF tmpDate() >= startDateGenTimeTable(tmpGTT()) THEN {
                    ADDOBJ preliminaryOrder;
                    FOR o == addedObject() DO {
                        SET departmentStorePreliminaryOrder(o) <- departmentStoreGenTimeTable(tmpGTT());
                        SET supplierPreliminaryOrder(o) <- supplierGenTimeTable(tmpGTT());
                        SET dateOrderPreliminaryOrder(o) <- subtractDate2(tmpDate(), dayBeforeGenTimeTable(tmpGTT()));
                        SET dateSupplyPreliminaryOrder(o) <- tmpDate();
                        SET genTimeTablePreliminaryOrder(o) <- tmpGTT();
                    };
                };
                SET tmpDate() <- addDate2(tmpDate(), dayAfterGenTimeTable(tmpGTT()));
            };
        };

        // генерация по числам
        IF genTimeTableType(tmpGTT()) == genType.genNumber THEN {
            SET tmpDate() <- startDateGenTimeTable(tmpGTT());
            // итерируемся по всем датам через 1 день
            WHILE tmpDate() <= endDateGenTimeTable(tmpGTT()) DO {
                IF isWordInCSV(dayInDate(tmpDate()), stringNumberGenTimeTable(tmpGTT())) == 1 THEN {
                    ADDOBJ preliminaryOrder;
                    FOR o == addedObject() DO {
                        SET departmentStorePreliminaryOrder(o) <- departmentStoreGenTimeTable(tmpGTT());
                        SET supplierPreliminaryOrder(o) <- supplierGenTimeTable(tmpGTT());
                        SET tmpDateS() <- tmpDate();
                        SET genTimeTablePreliminaryOrder(o) <- tmpGTT();
                        // если попали на субботу или воскресенье
                        IF UNION OVERRIDE numberDOWInDate(tmpDateS()) == 0, numberDOWInDate(tmpDateS()) == 6 THEN {
                            IF numberDOW(transferDayGenTimeTable(tmpGTT())) == 1 THEN {
                                // если нужно переносить на понедельник, то добавляем
                                WHILE numberDOWInDate(tmpDateS()) != 1 DO SET tmpDateS() <- addDate2(tmpDateS(), 1);
                            } ELSE {
                                // если нужно переносить на пятницу, то отнимаем
                                WHILE numberDOWInDate(tmpDateS()) != 5 DO SET tmpDateS() <- subtractDate2(tmpDateS(), 1);
                            };
                        };
                        SET dateSupplyPreliminaryOrder(o) <- tmpDateS();
                        SET dateOrderPreliminaryOrder(o) <- subtractDate2(tmpDateS(), dayBeforeGenTimeTable(tmpGTT()));
                    };
                };
                SET tmpDate() <- addDate2(tmpDate(), 1);
            };
        };

        // генерация по дням и месяцам
        IF genTimeTableType(tmpGTT()) == genType.genDayMonth THEN {
            SET tmpDate() <- startDateGenTimeTable(tmpGTT());
            // итерируемся по всем датам через 1 день
            WHILE tmpDate() <= endDateGenTimeTable(tmpGTT()) DO {
                IF inMonthGenTimeTable(tmpGTT(), monthInDate(tmpDate())) AND inDayGenTimeTable(tmpGTT(), DOWInDate(tmpDate())) THEN {
                    ADDOBJ preliminaryOrder;
                    FOR o == addedObject() DO {
                        SET departmentStorePreliminaryOrder(o) <- departmentStoreGenTimeTable(tmpGTT());
                        SET supplierPreliminaryOrder(o) <- supplierGenTimeTable(tmpGTT());
                        SET dateOrderPreliminaryOrder(o) <- subtractDate2(tmpDate(), dayBeforeGenTimeTable(tmpGTT()));
                        SET dateSupplyPreliminaryOrder(o) <- tmpDate();
                        SET genTimeTablePreliminaryOrder(o) <- tmpGTT();
                    };
                };
                SET tmpDate() <- addDate2(tmpDate(), 1);
            };
        };

        EXEC apply();
    };
};
//nextDateOrderSupplier (orderSupplier) <- nextDateOrder(preliminaryOrderOrderSupplier(orderSupplier)) ON ASSIGN orderSupplier;

fillInOrderSupplier 'Заполнить заказ рекомендованным количеством' = ACTION (orderSupplier) {
    FOR recommendCountOrderSupplier(orderSupplier, item AS item) > 0 DO {
        SET packQuantityItemOrderSupplier(orderSupplier, item) <- recommendCountOrderSupplier(orderSupplier, item AS item) ;
    };
};

//addOrderSupplier 'Создать заказ' = ACTION () NEWSESSION {
//    ADDOBJ orderSupplier;
//    FOR os == addedObject() DO {
//        SET curDateOrderSupplier(os) <- currentDate();
//        FORM orderSupplier OBJECTS o = os AS orderSupplier MODAL;
//        IF formResult() == formResult.ok THEN {
//            EXEC apply();
//        }
//    }
//} TOOLBAR;

createOrderSupplier 'Создать заказ' = [ACTION (preliminaryOrder) {
    ADDOBJ orderSupplier;
    FOR o == addedObject() DO {
        SET dateOrderSupplier(o) <- dateSupplyPreliminaryOrder(preliminaryOrder);
        SET curDateOrderSupplier(o) <- dateOrderPreliminaryOrder(preliminaryOrder);
        SET departmentStoreOrderSupplier(o) <- departmentStorePreliminaryOrder(preliminaryOrder);
        SET supplierOrderSupplier(o) <- supplierPreliminaryOrder(preliminaryOrder);
        SET allowablePercentOrderSupplier(o) <- allowablePercentSupplier(supplierPreliminaryOrder(preliminaryOrder));
        SET preliminaryOrderOrderSupplier(o) <- preliminaryOrder AS preliminaryOrder;
        SET nextDateOrderSupplier(o) <- nextDateOrder(preliminaryOrder);
        EXEC fillInOrderSupplier(o AS orderSupplier);
    }
    EXEC apply();
}] (preliminaryOrder) AND NOT preliminaryOrderToOrderSupplier(preliminaryOrder) CONFIRM;

FORM orderSupplier 'Заказ поставщику'

    TREE treeGroup g=itemGroup PARENT parentItemGroup

    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS o=orderSupplier FIXED PANEL

    PROPERTIES(o)          numberObject, seriesObject, curDateOrderSupplier, quantityDaysNextOrder, dateOrderSupplier,
                           quantityDaysAfterNextOrder, nextDateOrderSupplier, nameDepartmentStoreOrderSupplier,
                           nameSupplierOrderSupplier, totalSumOrderSupplier, totalSumVatOrderSupplier,
                           totalFullSumOrderSupplier, allowablePercentOrderSupplier
    PROPERTIES(o) READONLY completePercentageOrderSupplier

    OBJECTS i=item

    PROPERTIES             nameAttributeItemGroupItem(g, i) READONLY, barcodeBarcodeSku(i) READONLY
    FILTERS                nameAttributeItemGroupItem(g, i)
    ORDER BY               nameAttributeItemGroupItem

    PROPERTIES(o, i)       topItem, packQuantityItemOrderSupplier, sumQuantityItemOrderSupplier

    PROPERTIES(i) quantityPackItem, minQuantityOrderItem
    PROPERTIES FORCE PANEL nameWareOrderSupplier(o, i), numberSuppliersRangeOrderSupplier(o, i)
    PROPERTIES FORCE PANEL READONLY articleItem(i), nameCountryItem(i), retailPriceItemOrderSupplier(o, i),
                                    nameinActionItemOrderSupplier(o, i), banMovementDepartmentStoreOrderSupplier(o, i),
                                    lastOrderSupplier(o, i), priceWareOrderSupplier(o, i), numberDataRangeWareOrderSupplier(o, i),
                                    dataWareRangeOrderSupplier(o, i)

    PROPERTIES(o, i)       recommendCountOrderSupplier, priceSupplierItemOrderSupplier, numberSuppliersRangeOrderSupplier,
                           dataSuppliersRangeOrderSupplier, sumWareOrderSupplier, sumDetailVatItemOrderSupplier,
                           fullSumItemOrderSupplier

    PROPERTIES(o)          fillInOrderSupplier TODRAW i FORCE PANEL

    FILTERS isSupplierItemDepartmentOrderSupplier(o, i),
            isBanSupplierItemDepartmentOrderSupplier(o, i)

    FILTERGROUP filters1
        FILTER 'Показывать только заказанные позиции' 'F10' sumQuantityItemOrderSupplier(o, i) DEFAULT

    EDIT orderSupplier OBJECT o
;

DESIGN orderSupplier FROM DEFAULT {

    o.box {
        childConstraints = TO THE RIGHT;
        NEW headerLeft {
            childConstraints = TO THE BOTTOM;
            ADD o.panel;
            ADD PROPERTY(allowablePercentOrderSupplier);
            ADD o.orderSupplierGroup {
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(numberObject);
                ADD PROPERTY(seriesObject);
            };
        }
        ADD o.dateOrderSupplierGroup{
            childConstraints = TO THE BOTTOM;
            };
    }

    POSITION treeGroup.box TO THE LEFT i.box;
    POSITION treeGroup.box TO THE BOTTOM o.box;

    i.grid {
        fillHorizontal = 4;
    }

    i.panel{
        childConstraints = TO THE RIGHT;
            NEW itemBox {
                childConstraints = TO THE BOTTOM;
                title = 'Информация по товару';
                ADD PROPERTY(articleItem);
                ADD PROPERTY(nameCountryItem);
                ADD PROPERTY(retailPriceItemOrderSupplier);
                ADD PROPERTY(numberSuppliersRangeOrderSupplier);
                ADD PROPERTY(nameinActionItemOrderSupplier);
                ADD PROPERTY(banMovementDepartmentStoreOrderSupplier);
                ADD PROPERTY(lastOrderSupplier);
            };
            NEW wareBox {
                childConstraints = TO THE BOTTOM;
                title = 'Посуда';
                ADD PROPERTY(nameWareOrderSupplier);
                ADD PROPERTY(priceWareOrderSupplier);
                ADD PROPERTY(numberDataRangeWareOrderSupplier);
                ADD PROPERTY(dataWareRangeOrderSupplier);
            };
    }

    PROPERTY (fillInOrderSupplier) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
}

FORM orderSuppliers 'Заказы поставщику'

    OBJECTS o=orderSupplier
    PROPERTIES(o) READONLY objectClassName, numberObject, seriesObject, curDateOrderSupplier, quantityDaysNextOrder, dateOrderSupplier,
                           quantityDaysAfterNextOrder, nextDateOrderSupplier, nameDepartmentStoreOrderSupplier,
                           nameSupplierOrderSupplier, completePercentageOrderSupplier, totalSumOrderSupplier, timeCreated,
                           nameUserCreated, allowablePercentOrderSupplier

    PROPERTIES(o)          ADDFORM, EDITFORM SHOWIF isDraftOrderSupplier(o), delete FORCE PANEL SHOWIF isDraftOrderSupplier(o),
                           postOrderSupplier SHOWIF isDraftOrderSupplier(o), unpostOrderSupplier SHOWIF isPostedOrderSupplier(o)
    PROPERTIES(o) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    OBJECTS i=item

    PROPERTIES(i) READONLY nameAttributeItem, barcodeBarcodeSku
    ORDER BY               nameAttributeItem

    PROPERTIES(o, i) READONLY  topItem, packQuantityItemOrderSupplier, sumQuantityItemOrderSupplier

    PROPERTIES(i) READONLY quantityPackItem, minQuantityOrderItem

    PROPERTIES(o, i) READONLY  recommendCountOrderSupplier, priceSupplierItemOrderSupplier, numberSuppliersRangeOrderSupplier,
                               dataSuppliersRangeOrderSupplier, sumWareOrderSupplier, sumDetailVatItemOrderSupplier,
                               fullSumItemOrderSupplier

    FILTERS sumQuantityItemOrderSupplier(o, i)
;

DESIGN orderSuppliers FROM DEFAULT{

    PROPERTY (delete(o)){
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
    ADD o.historyGroup BEFORE functions.box {
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    };
    ADD o.postedGroup BEFORE functions.box {
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    };
    POSITION o.historyGroup TO THE LEFT o.postedGroup;
}


// ----------------------------------- Разрешать поставки ------------------------------------------- //

isOrderDate (date, preliminaryOrder) = dateOrderPreliminaryOrder(preliminaryOrder) == date AS DATE;
isSupplyDate (date, preliminaryOrder) = dateSupplyPreliminaryOrder(preliminaryOrder) == date AS DATE;
isSupplierDepartmentStore (departmentStore, supplier, preliminaryOrder) =
    departmentStorePreliminaryOrder(preliminaryOrder) == departmentStore AND supplierPreliminaryOrder(preliminaryOrder) ==supplier;

showFormGenTimeTablePreliminaryOrder 'Показать генерацию графика' (preliminaryOrder) = showFormGenTimeTable(genTimeTablePreliminaryOrder(preliminaryOrder));

FORM timeTableDate 'График поставок'

    OBJECTS t=DATE FIXED PANEL
    PROPERTIES(t) OBJVALUE

    OBJECTS d=departmentStore FIXED PANEL
    PROPERTIES name(d) SELECTOR, createGenTimeTable()

    OBJECTS s=supplier
    PROPERTIES(s) READONLY name

    OBJECTS p=preliminaryOrder
    PROPERTIES(p) showFormGenTimeTablePreliminaryOrder
    PROPERTIES(p) READONLY dateOrderPreliminaryOrder, dateSupplyPreliminaryOrder, dataOrderPreliminaryOrder
    PROPERTIES(p) nextDateOrder, createOrderSupplier
    PROPERTIES(p) ADDFORM, EDITFORM, delete FORCE PANEL
    PROPERTIES(s, d, t) READONLY quantityOrderOrderSupplier, quantitySupplyOrderSupplier, quantityOrderPreliminaryOrder, quantitySupplyPreliminaryOrder

    FILTERS isSupplierDepartmentStore(d, s, p)
    FILTERGROUP filters
        FILTER 'С предварительным заказом на дату заказа' 'F10' quantityOrderPreliminaryOrder(s, d, t)
        FILTER 'С предварительным заказом на дату поставки' 'F10' quantitySupplyPreliminaryOrder(s, d, t)
        FILTER 'С заказом на дату заказа' 'F10' quantityOrderOrderSupplier(s, d, t)
        FILTER 'С заказом на дату поставки' 'F10' quantitySupplyOrderSupplier(s, d, t)
    FILTERGROUP filters2
        FILTER 'Заказы после даты заказа' 'F10' isOrderDatePreliminaryOrder(p, t) DEFAULT
        FILTER 'Заказы после даты поставки' 'F10' isSupplyDatePreliminaryOrder(p, t)
        FILTER 'Заказы на дату заказа' 'F10' isOrderDate(t, p)
        FILTER 'Заказы на дату поставки' 'F10' isSupplyDate(t, p)

    ORDER BY dateOrderPreliminaryOrder
;

DESIGN timeTableDate FROM DEFAULT {
        POSITION s.box TO THE LEFT p.box;
        p.box {fillHorizontal = 4;}

        ADD PROPERTY(createGenTimeTable) IN d.panel;
        PROPERTY (delete(p)) {
            panelLocation = TOOLBAR;
            askConfirm = TRUE;
            }
}

//--------------------------------------Формы--------------------------------------------------------------------------//

isManufactory (departmentStore) = departmentStore IS manufactory;

FORM departmentStore 'Отдел магазина'
    OBJECTS d=departmentStore FIXED PANEL
    PROPERTIES(d)           name, nameStoreDepartmentStore, controlMinusRestsDepartmentStore, deleteItemMinusRestsDepartmentStore, controlMinusRestsContainerDepartmentStore,
                            verifyOrderArrivalDepartmentStore, maxQuantityDeliveryHourDepartmentStore, resolveMaxQuantityDeliveryHourAssortmentLessDepartmentStore, resolveOrderItemDepartmentStore,
                            quantityCashChangeOneOperationAccountDepartmentStore, commonNameMateriallyResponsiblePersonItemReportDepartmentStore,
                            commonNameBookkeeperItemReportDepartmentStore, commonNamePersonCheckReportDepartmentStore, nameRevaluationCommitteeDepartmentStore,
                            nameRegisterCommitteeDepartmentStore, namediscount, showFormNamediscount

    OBJECTS e=employee
    PROPERTIES(e) READONLY userFirstName, userLastName
    PROPERTIES(e) ADDSESSIONFORM, EDITSESSIONFORM, delete
    FILTERS includeDepartmentStoreEmployee(d, e)

    OBJECTS t=tradingSquare
    PROPERTIES(t) squareTradingSquare, dateTradingSquare
    PROPERTIES(t) ADDOBJ, delete
    FILTERS inTradingSquareDepartmentStore(d, t)

    OBJECTS d2=departmentStore
    PROPERTIES(d2) READONLY name SHOWIF isManufactory(d)
    PROPERTIES(d, d2) rawDepartmentStore SHOWIF isManufactory(d)
    FILTERS inRawDepartmentStore(d, d2)
    FILTERGROUP rawFilter
        FILTER 'Подразделения из которых полуется сырье' 'F10' rawDepartmentStore(d, d2)

    EDIT departmentStore OBJECT d
;

DESIGN departmentStore FROM DEFAULT {
    main{

        d.box{
            childConstraints = TO THE RIGHT;
            NEW order {
                    childConstraints = TO THE BOTTOM;
                    title = 'Заказ';
                    ADD PROPERTY (name);
                    ADD PROPERTY (nameStoreDepartmentStore);
                    ADD PROPERTY (maxQuantityDeliveryHourDepartmentStore);
                    ADD PROPERTY (resolveMaxQuantityDeliveryHourAssortmentLessDepartmentStore);
                    ADD PROPERTY (resolveOrderItemDepartmentStore);
                    ADD PROPERTY (quantityCashChangeOneOperationAccountDepartmentStore);
                };
            ADD d.controlDepartmentStoreGroup{
                    ADD PROPERTY (namediscount);
                };
            ADD d.printDepartmentStoreGroup;
        };

        NEW prop.box BEFORE functions.box{
            tabbedPane = TRUE;
            ADD e.box{
                    title = 'Сотрудники';
                };
            ADD t.box;
            ADD d2.box{
                    title = 'Отделы сырья';
                };
      }
   }
}

FORM departmentStores 'Отделы магазинов'
    TREE treeStore a=STRING[3], t=tradingNetwork, st=storeType, s=store
    PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS stringEqualsAll(a), inStoreTypeTradingNetwork (st, t), inStoreTypeStore(st, s)

    OBJECTS d=departmentStore
    PROPERTIES(d) READONLY depName = name
    FILTERS inTradingNetworkStoreTypeStoreDepartment(t, st, s, d)
    ORDER BY depName

    DIALOG departmentStore OBJECT d
;

DESIGN departmentStores FROM DEFAULT {
    POSITION treeStore.box TO THE LEFT d.box;
    treeStore.tree {
        fillHorizontal = 0.3;
    }
    d.grid {
        defaultComponent = TRUE;
    }
}

FORM store 'Магазин'
    OBJECTS s=store FIXED PANEL
    PROPERTIES(s) name, addressStore, nameStoreTypeStore, tradingSquareStore, nameCompanyStore

    OBJECTS d=departmentStore
    PROPERTIES(d) READONLY objectClassName, name, defaultTradingSquareDepartmentStore
    PROPERTIES(d)          ADDSESSIONFORM, EDITSESSIONFORM, delete
    FILTERS inStoreDepartment(s, d)

    EDIT store OBJECT s
;

FORM tradingNetwork 'Торговая сеть'
    OBJECTS n=tradingNetwork FIXED PANEL
    PROPERTIES(n) name

    OBJECTS s=storeType
    PROPERTIES(s) name
    PROPERTIES(s) ADDOBJ, delete
    FILTERS inStoreTypeTradingNetwork(s, n)

    EDIT tradingNetwork OBJECT n
;

FORM stores 'Магазины'
    TREE treeStore a=STRING[3], t=tradingNetwork, st=storeType
    PROPERTIES READONLY OBJVALUE(a), name(t), name(st)//, dumb1(st)

    FILTERS stringEqualsAll(a)
    FILTERS inStoreTypeTradingNetwork (st, t)

    PROPERTIES(t)          addT=ADDFORM FORCE PANEL, editT=EDITFORM FORCE PANEL, delete FORCE PANEL//FORCE PANEL

    OBJECTS s=store
    PROPERTIES(s) READONLY name, addressStore, nameStoreTypeStore, nameCompanyStore
    PROPERTIES(s)          ADDFORM, EDITFORM, delete
    FILTERS inTradingNetworkStoreTypeStore(t, st, s)

    OBJECTS d=departmentStore
    PROPERTIES(d) READONLY objectClassName, name
    FILTERS inStoreDepartment(s, d)
;

DESIGN stores FROM DEFAULT {
    POSITION treeStore.box TO THE LEFT s.box;
    POSITION treeStore.box TO THE LEFT d.box;

        PROPERTY (delete(t)) {
            caption = 'Удалить';
            panelLocation = TOOLBAR;
            askConfirm = TRUE;
        }

        PROPERTY (addT) {
            caption = 'Добавить';
        }

        PROPERTY (editT) {
            caption = 'Ред-ть';
            maximumCharWidth = 5;
        }
        s.box {
            fillHorizontal = 2.3;
        }

        d.box {
            fillHorizontal = 2.3;
        }
}


//---------------------------- Модели оборудования ----------------------------------------//
CLASS ABSTRACT model 'Модель' : named;
CLASS cashRegisterModel 'Модель касс' : model;
CLASS scalesModel 'Модель весов' : model;
CLASS checkModel 'Модель прайс чекеров' : model;

CLASS frontOffice 'Фронт офис';
nameFrontOffice 'Версия фронт офиса на кассе' = DATA STRING[100] (frontOffice) IN baseGroup;

noteModel 'Примечание' = DATA STRING[200] (model) IN baseGroup;
useModel 'Модель используется' = DATA BOOLEAN (model) IN baseGroup;
lettersModel 'Преобразовать наименование товара В ЗАГЛАВНЫЕ БУКВЫ' = DATA BOOLEAN (model) IN baseGroup;
handlerModel 'Обработчик' = DATA STRING[200] (model) IN baseGroup;


frontOfficeCashRegisterModel 'Модель касс (ИД)' = DATA frontOffice (cashRegisterModel) IN idGroup;
nameFrontOfficeCashRegisterModel 'Версия фронт офиса на кассе' (cashRegisterModel) = nameFrontOffice(frontOfficeCashRegisterModel(cashRegisterModel)) IN baseGroup;
dateToCashRegisterModel 'Дата, до которой модель внесена в реестр' = DATA DATE (cashRegisterModel) IN baseGroup;
maxProductModel 'MAX допустимое колич.товаров' = DATA INTEGER (model) IN baseGroup;

CLASS flash 'Прошивка';
nameFlash 'Модель весов/версия прошивки' = DATA STRING[100] (flash) IN baseGroup;

flashScalesModel 'Прошивка (ИД)' = DATA flash (scalesModel) IN idGroup;
nameFlashScalesModel 'Модель весов/версия прошивки' = nameFlash(flashScalesModel(scalesModel)) IN baseGroup;
maxTextScalesModel 'MAX допустимое колич.дополнительных текстов' = DATA INTEGER (scalesModel) IN baseGroup;
folderScalesModel 'Папка на сервере весов с драйвером весов' = DATA STRING[200] (scalesModel) IN baseGroup;
compositionScalesModel 'Число знаков в доп.тексте(составе товара)' = DATA INTEGER (scalesModel) IN baseGroup;

CLASS modelCheck 'Модель чекера';
nameModelCheck 'Модель прайс чекера' = DATA STRING[100] (modelCheck) IN baseGroup;

modelCheckModel 'Модель (ИД)' = DATA modelCheck (checkModel) IN idGroup;
nameModelCheckModel 'Модель прайс чекера' = nameModelCheck(modelCheckModel(checkModel)) IN baseGroup;

FORM models 'Модели оборудования'
OBJECTS m=model
PROPERTIES(m) READONLY objectClassName, name, useModel, maxProductModel, noteModel, handlerModel
PROPERTIES(m) ADDFORM, EDITFORM, delete;                // либо так как ниже//
//OBJECTS s=scalesModel, ch=checkModel, c=cashModel
//PROPERTIES(ch) READONLY name, nameModelCheckModel, noteModel, useModel, maxProductModel
//PROPERTIES(s)  READONLY name, nameFlashScalesModel, noteModel, useModel, maxProductModel, maxTextScalesModel,
//               folderScalesModel, lettersModel, compositionScalesModel
//PROPERTIES(c)  READONLY name, nameFrontOfficeCashModel, noteModel, useModel, dateToCashModel, lettersModel
//PROPERTIES(s) ADDFORM, EDITFORM, delete
//PROPERTIES(c) ADDFORM, EDITFORM, delete
//PROPERTIES(ch) ADDFORM, EDITFORM, delete;

//DESIGN models FROM DEFAULT {
//    main{
//       ADD prop1.box BEFORE functions.box{
//            tabbedPane = TRUE;
//            ADD c.box;
//            ADD s.box;
//            ADD ch.box;
//    }
//   }
//}

FORM checkModel 'Модель прайс чекера'
OBJECTS ch=checkModel FIXED PANEL
PROPERTIES(ch) name, nameModelCheckModel, noteModel, handlerModel, useModel, maxProductModel
EDIT checkModel OBJECT ch;

FORM cashRegisterModel 'Модель касс'
OBJECTS c=cashRegisterModel FIXED PANEL
PROPERTIES(c) name, nameFrontOfficeCashRegisterModel, noteModel, handlerModel, useModel, dateToCashRegisterModel, lettersModel
EDIT cashRegisterModel OBJECT c;

FORM scalesModel 'Модель весов'
OBJECTS s=scalesModel FIXED PANEL
PROPERTIES(s) name, nameFlashScalesModel, noteModel, handlerModel, useModel, maxProductModel, maxTextScalesModel,
              folderScalesModel, lettersModel, compositionScalesModel
EDIT scalesModel OBJECT s;

//---------------------------- Сервера управления оборудования -----------------------------//
CLASS equipmentServer 'Сервер оборудования' : named;
sidEquipmentServer 'Идентификатор' = DATA STRING[20] (equipmentServer) IN baseGroup;

//---------------------------- группы оборудования ----------------------------------------//

CLASS ABSTRACT groupMachinery 'Группы оборудования';
TABLE groupMachinery (groupMachinery);

CLASS groupScales 'Группы весов' : groupMachinery;
CLASS groupCashRegister 'Группы касс' : groupMachinery;
CLASS groupCheck 'Группы прайс чекеров' : groupMachinery;

nameGroupMachinery 'Наименование группы' = DATA STRING[200] (groupMachinery) IN baseGroup MINCHARWIDTH 10 PREFCHARWIDTH 20;
transferGroupMachinery 'Передать товар на группу оборудования' = DATA BOOLEAN (groupMachinery) IN baseGroup;

cellGroupScales 'Помещать на ценники номера ячеек с этой группы' = DATA BOOLEAN (groupScales) IN baseGroup;
sidSectionGroupScales 'Код отдела в Set Retail' = DATA INTEGER (groupScales) IN baseGroup;
directoryGroupScales 'Директория сервера Set Retail' = DATA STRING[200] (groupScales) IN baseGroup;

departmentStoreGroupMachinery 'Подразделение (ИД)' = DATA departmentStore (groupMachinery);
nameDepartmentStoreGroupMachinery 'Подразделение' (groupMachinery) = name(departmentStoreGroupMachinery(groupMachinery)) IN baseGroup;

equipmentServerGroupMachinery 'Сервер оборудования (ИД)' = DATA equipmentServer (groupMachinery);
nameEquipmentServerGroupMachinery 'Сервер оборудования' (groupMachinery) = name(equipmentServerGroupMachinery(groupMachinery));

//---------------------------- типы оборудования  ----------------------------------------//
CLASS ABSTRACT machinery 'Оборудование';
TABLE machinery(machinery);

CLASS cashRegister 'Касса' : machinery, computer;
CLASS scales 'Весы' : machinery;
CLASS check 'Прайс чекер' : machinery;

isGroupCashRegister (machinery) = machinery IS groupCashRegister;
groupCashRegisterCashRegister 'Группа (ИД)' = DATA groupCashRegister (cashRegister) IN idGroup;
isGroupCashRegisterCashRegister (groupCashRegister, cashRegister) = groupCashRegisterCashRegister(cashRegister) == groupCashRegister;

isGroupScales (machinery) = machinery IS groupScales;
groupScalesScales 'Группа (ИД)' = DATA groupScales (scales) IN idGroup;
isGroupScalesScales (groupScales, scales) = groupScalesScales(scales) == groupScales;

isGroupCheck (machinery) = machinery IS groupCheck;
groupCheckCheck 'Группа (ИД)' = DATA groupCheck (check) IN idGroup;
isGroupCheckCheck (groupCheck, check) = groupCheckCheck(check) == groupCheck;

// todo : persistent почему-то не работает
groupMachineryMachinery 'Группа (ИД)' (machinery) = UNION EXCLUSIVE groupCashRegisterCashRegister(machinery),
                                                                   groupScalesScales(machinery),
                                                                   groupCheckCheck(machinery);
nameGroupMachineryMachinery 'Группа' (machinery) = nameGroupMachinery(groupMachineryMachinery(machinery));


nameGroupMachineryCashRegister 'Наименование группы' (cashRegister) = nameGroupMachinery(groupCashRegisterCashRegister(cashRegister)) IN baseGroup;
nameGroupMachineryScales 'Наименование группы' (scales) = nameGroupMachinery(groupScalesScales(scales)) IN baseGroup;
nameGroupMachineryCheck 'Наименование группы' (check) = nameGroupMachinery(groupCheckCheck(check)) IN baseGroup;

nppMachinery 'Порядковый номер' = DATA INTEGER (machinery) IN baseGroup;
descriptionMachinery 'Описание' = DATA STRING[200] (machinery) IN baseGroup;
portMachinery 'Адрес/порт' = DATA STRING[100] (machinery) IN baseGroup;
useMachinery 'Оборудование используется' = DATA BOOLEAN (machinery) IN baseGroup;

cashRegisterModelCashRegister 'Модель ИД' = DATA cashRegisterModel (cashRegister) IN idGroup;
numberCashRegister 'Регистрационный номер кассы' = DATA STRING[100] (cashRegister) IN baseGroup;
directoryCashRegister 'Директория обмена с кассой' = DATA STRING[100] (cashRegister) IN baseGroup;
nameCashRegisterModelCashRegister 'Модель кассы' (cashRegister) = name(cashRegisterModelCashRegister(cashRegister)) IN baseGroup;
handlerCashRegisterModelCashRegister 'Обработчик кассы' (cashRegister) = handlerModel(cashRegisterModelCashRegister(cashRegister)) IN baseGroup;
statusCashRegister 'Статус кассы (на момент посл.передачи)' = DATA STRING[200] (cashRegister) IN baseGroup;
resultCashRegister 'Результат передачи на кассу товаров' = DATA STRING[200] (cashRegister) IN baseGroup;
dateCashRegister 'Дата фискализации кассового аппарата' = DATA DATE (cashRegister) IN baseGroup;

CLASS STATIC feature 'Свойство для оборудования'
{
    never 'HET,(пример: для годен это значит - печатаем в поле этикетки "Годен до")',
    always 'ДА для ВСЕХ товаров поместить в состав',
    sometimes 'ДА (для товаров с признаком [Контролировать срок годности по товару?]'
};

scalesModelScales 'Модель ИД' = DATA scalesModel (scales) IN idGroup;
numberScales 'Заводской(серийный) номер ' = DATA STRING[100] (scales) IN baseGroup;
nameScalesModelScales 'Модель весов' (scales) = name(scalesModelScales(scales)) IN baseGroup;
handlerScalesModelScales 'Обработчик весов' (scales) = handlerModel(scalesModelScales(scales)) IN baseGroup;
dateScales 'Дата следующей обязательной поверки' = DATA DATE (scales) IN baseGroup;
passScales 'свойство ИД' = DATA feature (scales) IN idGroup;
namePassScales 'Свойство товара [Годен до] помещать в ингредиенты' (scales) = name(UNION OVERRIDE feature.always IF scales IS scales,
                                                                                                  passScales(scales)) IN baseGroup;
manufactureScales 'свойство ИД' = DATA feature (scales) IN idGroup;
nameManufactureScales 'Свойство товара [Дата изг.] помещать в ингредиенты' (scales) = name(UNION OVERRIDE feature.always IF scales IS scales,
                                                                                                  manufactureScales(scales)) IN baseGroup;
productionScales 'свойство ИД' = DATA feature (scales) IN idGroup;
nameProductionScales 'Св-во товара[Срок годн.в часах] поместить в ингр-ты' (scales) = name(UNION OVERRIDE feature.always IF scales IS scales,
                                                                                                  productionScales(scales)) IN baseGroup;
sidScales 'ID весов для Set Retail' = DATA INTEGER (scales) IN baseGroup;

// фильтрация по группам товаров

filterItemsGroupMachinery 'Фильтровать по группам товаров' = DATA BOOLEAN (groupMachinery);

inGroupMachineryItemGroup 'Вкл' = DATA BOOLEAN (groupMachinery, itemGroup);

FORM filterItemsGroupMachinery 'Фильтрация по группам товаров'
    OBJECTS gm = groupMachinery FIXED PANEL
    PROPERTIES(gm) READONLY nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery

    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS cg=itemGroup
    PROPERTIES(cg) READONLY canonicalNameItemGroup
    PROPERTIES(gm, cg)      inGroupMachineryItemGroup
    ORDER BY canonicalNameItemGroup
    FILTERS hasParentAndLeafItemGroup(cg, g)

    FILTERGROUP filters
        FILTER 'Только выбранные группы' 'F10' inGroupMachineryItemGroup(gm, cg)
;

DESIGN filterItemsGroupMachinery FROM DEFAULT {
    POSITION treeGroups.box TO THE LEFT cg.box;

    treeGroups.tree {
        fillHorizontal = 0.5;
    }
}

showFilterItemsGroupMachinery 'Выбрать группы' (groupMachinery) = ACTION FORM filterItemsGroupMachinery OBJECTS gm MODAL;

FORM cashRegister 'Касса'
    OBJECTS c=cashRegister FIXED PANEL
    PROPERTIES(c) nameGroupMachineryMachinery, nppMachinery, descriptionMachinery, portMachinery, useMachinery, numberCashRegister, directoryCashRegister, nameCashRegisterModelCashRegister,
                  dateCashRegister, statusCashRegister, resultCashRegister
    EDIT cashRegister OBJECT c
;

FORM scales 'Весы'
    OBJECTS s=scales FIXED PANEL
    PROPERTIES(s) nameGroupMachineryMachinery, nppMachinery, descriptionMachinery, portMachinery, useMachinery, numberScales, nameScalesModelScales,
                  dateScales, namePassScales, nameManufactureScales, nameProductionScales, sidScales
    EDIT scales OBJECT s
;

FORM check 'Прайс чекер'
    OBJECTS ch=check FIXED PANEL
    PROPERTIES(ch) nameGroupMachineryMachinery, nppMachinery, descriptionMachinery, portMachinery, useMachinery
    EDIT check OBJECT ch
;

FORM groupScales 'Группа весов'
    OBJECTS grs=groupScales FIXED PANEL
    PROPERTIES(grs) nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery,
                    transferGroupMachinery, cellGroupScales, sidSectionGroupScales, directoryGroupScales,
                    filterItemsGroupMachinery, showFilterItemsGroupMachinery SHOWIF filterItemsGroupMachinery(grs)

    OBJECTS s=scales
    PROPERTIES(s)   nameGroupMachineryMachinery, nppMachinery, descriptionMachinery, portMachinery, useMachinery, numberScales, nameScalesModelScales,
                    dateScales, namePassScales, nameManufactureScales, nameProductionScales, sidScales, ADDOBJ, delete
    FILTERGROUP filters1
        FILTER 'Показывать только для данной группы' 'F10' isGroupScalesScales(grs, s) DEFAULT
    EDIT groupScales OBJECT grs
;

FORM groupsScales 'Группы весов'
    OBJECTS grs=groupScales
    PROPERTIES(grs) READONLY nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery,
                         transferGroupMachinery, filterItemsGroupMachinery, cellGroupScales, sidSectionGroupScales, directoryGroupScales
    PROPERTIES(grs) ADDFORM, EDITFORM, delete

    OBJECTS s=scales
    PROPERTIES(s)   READONLY nppMachinery, descriptionMachinery, portMachinery, useMachinery, numberScales, nameScalesModelScales,
                             dateScales, namePassScales, nameManufactureScales, nameProductionScales, sidScales
    FILTERS isGroupScalesScales(grs, s)
;

FORM groupCashRegister 'Группа касс'

    OBJECTS grc=groupCashRegister FIXED PANEL
    PROPERTIES(grc) nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery, transferGroupMachinery,
                    filterItemsGroupMachinery, showFilterItemsGroupMachinery SHOWIF filterItemsGroupMachinery(grc)

    OBJECTS c=cashRegister
    PROPERTIES(c)   nameGroupMachineryMachinery, nppMachinery, descriptionMachinery, nameGroupMachineryCashRegister, portMachinery, useMachinery, numberCashRegister, directoryCashRegister, nameCashRegisterModelCashRegister,
                    dateCashRegister, statusCashRegister, resultCashRegister, ADDOBJ, delete

    FILTERGROUP filters2
        FILTER 'Показывать только для данной группы' 'F10' isGroupCashRegisterCashRegister(grc, c) DEFAULT

    EDIT groupCashRegister OBJECT grc
;


FORM groupsCashRegister 'Группы касс'
    OBJECTS grc=groupCashRegister, c=cashRegister
    PROPERTIES(grc)  READONLY nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery, transferGroupMachinery, filterItemsGroupMachinery
    PROPERTIES(grc)  ADDFORM, EDITFORM, delete

    PROPERTIES(c) READONLY nppMachinery, descriptionMachinery, portMachinery,
                           useMachinery, numberCashRegister, directoryCashRegister, nameCashRegisterModelCashRegister,
                           dateCashRegister, statusCashRegister, resultCashRegister
    FILTERS isGroupCashRegisterCashRegister(grc, c)
;

FORM groupCheck 'Группа прайс чекеров'
    OBJECTS grch=groupCheck FIXED PANEL
    PROPERTIES(grch) nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery, transferGroupMachinery,
                     filterItemsGroupMachinery, showFilterItemsGroupMachinery SHOWIF filterItemsGroupMachinery(grch)

    OBJECTS ch=check
    PROPERTIES(ch)  nameGroupMachineryMachinery, nppMachinery, descriptionMachinery, portMachinery, useMachinery, ADDOBJ, delete
    FILTERGROUP filters3
        FILTER 'Показывать только для данной группы' 'F10' isGroupCheckCheck(grch, ch) DEFAULT
    EDIT groupCheck OBJECT grch
;

FORM groupsCheck 'Группы прайс чекеров'
    OBJECTS grch=groupCheck
    PROPERTIES(grch) READONLY nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery, transferGroupMachinery, filterItemsGroupMachinery
    PROPERTIES(grch)          ADDFORM, EDITFORM, delete

    OBJECTS ch=check
    PROPERTIES(ch)   READONLY nppMachinery, descriptionMachinery, nameModelCheckModel, portMachinery, useMachinery
    FILTERS isGroupCheckCheck(grch, ch)
;

// ----------------------------------- Группы пользователей -------------------------------------------------- //

CLASS groupUser 'Группы пользователей';

nameGroupUser 'Наименование группы' = DATA STRING[100] (groupUser) IN baseGroup;
sidGroupUser 'Идентификатор' = DATA STRING[20] (groupUser) IN baseGroup;

groupUserEmployee(employee) = DATA groupUser (employee)  IN idGroup;
nameGroupUserEmployee 'Наименование группы' (employee) = nameGroupUser(groupUserEmployee(employee)) IN baseGroup;

includedEmployeeCashRegister 'Подключить'  = DATA BOOLEAN (employee, cashRegister) IN baseGroup;
dateFromEmployeeCashRegister 'Дата с'  = DATA DATE (employee, cashRegister) IN baseGroup;
dateToEmployeeCashRegister 'Дата по'  = DATA DATE (employee, cashRegister) IN baseGroup;

CLASS STATIC typeAction 'Тип действия'
{
    all 'Все подразделения',
    notAll 'Отдельные подразделения'
};
actionEmployee(employee) = DATA typeAction (employee)  IN idGroup;
nameActionEmployee 'доступ к подразделениям' (employee) = name(UNION OVERRIDE typeAction.all IF employee IS employee,       // по-умолчанию все подразделения
                                                                              actionEmployee(employee)) IN baseGroup;

inEmployeeDepartmentStoreDefault(employee, departmentStore) = DATA BOOLEAN (employee, departmentStore);
inEmployeeDepartmentStore 'Подключить' (employee, departmentStore) = inEmployeeDepartmentStoreDefault(employee, departmentStore) IF actionEmployee(employee) == typeAction.notAll IN baseGroup;
dateFromEmployeeDepartmentStore 'Начало доступа'  = DATA DATE (employee, departmentStore) IN baseGroup;
dateToEmployeeDepartmentStore 'Окончание доступа'  = DATA DATE (employee, departmentStore) IN baseGroup;

isGroupUserEmployee(groupUser, employee) =  groupUserEmployee(employee) == groupUser;

departmentStoreCashRegister(cashRegister) = departmentStoreGroupMachinery(groupCashRegisterCashRegister(cashRegister)) IN idGroup;
nameDepartmentStoreCashRegister 'Наименование отдела' (cashRegister) = name(departmentStoreCashRegister(cashRegister)) IN baseGroup;
nameStoreDepartmentStoreCashRegister 'Наименование магазина' (cashRegister) = name(storeDepartmentStore(departmentStoreCashRegister(cashRegister)))  IN baseGroup;

CONSTRAINT  groupUserEmployee(employee) AND NOT nameActionEmployee(employee) MESSAGE 'Для сотрудника не выбран доступ к подразделениям';
// todo: надо сделать проверку для сотрудника на доступ к подразделению//


FORM groupUser 'Группa пользователей'
    OBJECTS gru=groupUser FIXED PANEL
    OBJECTS e=employee, c=cashRegister, d=departmentStore
    PROPERTIES(gru)  nameGroupUser, sidGroupUser
    PROPERTIES(e)    nameGroupUserEmployee, userFirstName, userLastName, phoneEmployee, nameActionEmployee, nameEmployeeSystemEmployee,
                     shortNameLanguageEmployee, numberEmployee, passwordEmployee, dataEmployee
    PROPERTIES(c)    READONLY nameStoreDepartmentStoreCashRegister, nameDepartmentStoreCashRegister, nameGroupMachineryCashRegister, numberCashRegister, nppMachinery
    PROPERTIES(e, c) includedEmployeeCashRegister, dateFromEmployeeCashRegister, dateToEmployeeCashRegister
    PROPERTIES(d)    READONLY nameStoreDepartmentStore, name
    PROPERTIES(e, d) dateFromEmployeeDepartmentStore, dateToEmployeeDepartmentStore, inEmployeeDepartmentStore
    FILTERGROUP filters1
        FILTER 'Показывать кассы только для данного пользователя' 'F10' includedEmployeeCashRegister(e, c) DEFAULT
    FILTERGROUP filters2
        FILTER 'Показывать сотрудников только для данной группы пользователей' 'F9' isGroupUserEmployee(gru, e) DEFAULT
    FILTERGROUP filters3
        FILTER 'Показывать подразделения только для данного пользователя' 'F8' inEmployeeDepartmentStore(e, d) DEFAULT
    EDIT groupUser OBJECT gru
    ;

DESIGN groupUser FROM DEFAULT {
    main{
       NEW prop.box BEFORE functions.box {
            ADD c.box;
            ADD d.box;
            POSITION c.box TO THE LEFT d.box;
       }
       NEW xrop.box BEFORE prop.box {
            ADD e.box;
       }

    }
}

FORM groupsUser 'Группы пользователей'
OBJECTS gru=groupUser, e=employee, c=cashRegister, d=departmentStore
PROPERTIES(gru)  READONLY nameGroupUser, sidGroupUser
PROPERTIES(gru)  ADDFORM, EDITFORM, delete
PROPERTIES(e)    READONLY userFirstName, userLastName, phoneEmployee, nameActionEmployee
PROPERTIES(c)    READONLY nameStoreDepartmentStoreCashRegister, nameDepartmentStoreCashRegister, numberCashRegister, nameGroupMachineryCashRegister, nppMachinery
PROPERTIES(e, c) includedEmployeeCashRegister, dateFromEmployeeCashRegister, dateToEmployeeCashRegister
PROPERTIES(d)    READONLY nameStoreDepartmentStore, name
PROPERTIES(e, d) READONLY dateFromEmployeeDepartmentStore, dateToEmployeeDepartmentStore, inEmployeeDepartmentStore
FILTERS includedEmployeeCashRegister(e, c),
        isGroupUserEmployee(gru, e),
        inEmployeeDepartmentStore(e, d);

DESIGN groupsUser FROM DEFAULT {
    main{
       NEW prop.box BEFORE functions.box {
            tabbedPane = TRUE;
            ADD c.box;
            ADD d.box;
       }
       NEW case.box BEFORE prop.box {
            ADD gru.box;
            ADD e.box;
            POSITION gru.box TO THE LEFT e.box;
       }
   }
}


//---------------------------- Рецепты блюд ----------------------------------------//
CLASS recipe 'Рецепт' : named;
CLASS recipeDetail 'Сырье рецепта';

dishRecipe  'Блюдо (ИД)' = DATA item (recipe) IN idGroup;
CONSTRAINT dishRecipe (recipe) AND NOT isManufacturedItem(dishRecipe(recipe)) CHECKED MESSAGE 'Блюдо должно производиться';
captionDishRecipe 'Блюдо' = captionItem (dishRecipe(recipe)) IN baseGroup;

beginDateRecipe 'Используется с' = DATA DATE (recipe) IN baseGroup;
isUsedRecipe 'Используется' = DATA BOOLEAN (recipe) IN baseGroup;
numberRecipe 'Номер рецептуры (из сборника и пр.)' = DATA STRING[40] (recipe) IN baseGroup;
notesRecipe 'Технология приготовления' = DATA STRING[100] (recipe) IN baseGroup;
outWeightRecipe 'Количество выхода изделия' = DATA DOUBLE (recipe) IN baseGroup;

recipeRecipeDetail 'Рецепт (ИД)' = DATA recipe(recipeDetail) IN baseGroup;
componentRecipeDetail 'Компонент (ИД)' = DATA component(recipeDetail) IN idGroup;
nameComponentRecipeDetail 'Компонент' = name(componentRecipeDetail(recipeDetail)) IN baseGroup;
normQuantityRecipeDetail 'Норма закладки (брутто)' = DATA DOUBLE (recipeDetail) IN baseGroup;

inRecipeRecipeDetail(recipe, recipeDetail) = recipeRecipeDetail(recipeDetail) == recipe;

FORM recipe 'Рецепт блюда'
    OBJECTS r=recipe FIXED PANEL
    PROPERTIES(r) captionDishRecipe, numberRecipe, beginDateRecipe, isUsedRecipe, notesRecipe, outWeightRecipe

    OBJECTS rd=recipeDetail
    PROPERTIES(rd) nameComponentRecipeDetail, normQuantityRecipeDetail, ADDOBJ, delete

    FILTERS inRecipeRecipeDetail(r, rd)

    EDIT recipe OBJECT r
;

FORM recipes 'Рецепты блюд'
    OBJECTS r=recipe
    PROPERTIES(r)  READONLY captionDishRecipe, numberRecipe, isUsedRecipe
    PROPERTIES(r)  ADDFORM, EDITFORM, delete

    OBJECTS rd=recipeDetail
    PROPERTIES(rd) READONLY nameComponentRecipeDetail, normQuantityRecipeDetail

    FILTERS   inRecipeRecipeDetail(r, rd)
;


//---------------------------- Товар на оборудовании ----------------------------------------//

CLASS stage 'Ячейка';
valueStage 'Ячейка' = DATA INTEGER (stage) IN baseGroup;
barcodeStageGroupMachinery 'Штрих-код ИД' = DATA barcode (stage, groupMachinery) IN idGroup;
priceStageGroupMachinery 'Розничная цена для штрих-кода' (stage, groupMachinery) = DATA DOUBLE (stage, groupMachinery) IN baseGroup;
dateStageGroupMachinery 'Дата истечения срока годности' (stage, groupMachinery) = DATA DATE (stage, groupMachinery) IN baseGroup;
timeStageGroupMachinery 'Время истечения срока годности' (stage, groupMachinery) = DATA INTEGER (stage, groupMachinery) IN baseGroup;
stockStageGroupMachinery 'Остаток на момент передачи' (stage, groupMachinery) = DATA DOUBLE (stage, groupMachinery) IN baseGroup;

barcodeBarcodeStageGroupMachinery 'Штрих-код' (stage, groupMachinery) = barcodeEx(barcodeStageGroupMachinery(stage, groupMachinery)) IN baseGroup;
//nameSkuBarcodeStageGroupMachinery 'Товар' (stage, groupMachinery) = nameSkuBarcode(barcodeStageGroupMachinery(stage, groupMachinery)) IN baseGroup;
//titleScalesBarcodeStageGroupMachinery 'Наименование для весов' (stage, groupMachinery) = titleScalesBarcode(barcodeStageGroupMachinery(stage, groupMachinery));
//titleCashBarcodeStageGroupMachinery 'Наименование для касс' (stage, groupMachinery) = titleCashBarcode(barcodeStageGroupMachinery(stage, groupMachinery));
//amountBarcodeStageGroupMachinery 'Количество (сколько списать при продаже)' (stage, groupMachinery) = amountBarcode(barcodeStageGroupMachinery(stage, groupMachinery));
//removeBarcodeStageGroupMachinery 'Заблокирован (удален с оборудования)' (stage, groupMachinery) = removeBarcode(barcodeStageGroupMachinery(stage, groupMachinery));
//commentRemoveBarcodeStageGroupMachinery 'Причина блокировки' (stage, groupMachinery) = commentRemoveBarcode(barcodeStageGroupMachinery(stage, groupMachinery));

FORM stages 'Товары на оборудовании'
OBJECTS gr=groupMachinery
OBJECTS st=stage
PROPERTIES(gr) READONLY nameDepartmentStoreGroupMachinery, nameGroupMachinery, transferGroupMachinery
PROPERTIES(st) valueStage
PROPERTIES(st, gr)  barcodeBarcodeStageGroupMachinery, priceStageGroupMachinery, dateStageGroupMachinery,
                    timeStageGroupMachinery, stockStageGroupMachinery
FILTERS  barcodeStageGroupMachinery(st, gr);

//---------------------------- Ценовые регистры ----------------------------------------//

CLASS ABSTRACT importerPriceLedger 'Изменение цены изготовителя/импортера';
TABLE importerPriceLedger (importerPriceLedger);

CLASS ABSTRACT supplierPriceLedger 'Изменение цены поставщика';
TABLE supplierPriceLedger (supplierPriceLedger);

CLASS ABSTRACT retailVATLedger 'Изменение НДС';
TABLE retailVATLedger (retailVATLedger);

CLASS ABSTRACT accountPriceLedger 'Изменение учетной цены';
TABLE accountPriceLedger (accountPriceLedger);

CLASS ABSTRACT retailPriceLedger 'Изменение розничной цены';
TABLE retailPriceLedger (retailPriceLedger);

CLASS ABSTRACT warePriceLedger 'Изменение цены посуды' : importerPriceLedger; // todo : смотри выше
TABLE warePriceLedger (warePriceLedger);

//---------------------------- Количественные регистры ----------------------------------------//

CLASS ABSTRACT balanceItemLedger 'Изменение остатка по товару';
TABLE balanceItemLedger (balanceItemLedger);

CLASS ABSTRACT batch 'Партия' : balanceItemLedger, importerPriceLedger; // todo : смотри выше

CLASS ABSTRACT outBalanceItemLedger 'Внешний расход' : balanceItemLedger;
CLASS ABSTRACT outUserBalanceItemLedger 'Внешний расход с указанной партией' : outBalanceItemLedger;
CLASS ABSTRACT outAutoBalanceItemLedger 'Внешний расход с автоматической себестоимостью' : outBalanceItemLedger;

//CLASS ABSTRACT inBalanceItemLedger 'Внутренний приход' : balanceItemLedger;

//---------------------------- Суммовые регистры ----------------------------------------//

CLASS ABSTRACT accountSumDocumentLedger 'Учетный документ';
TABLE accountSumDocumentLedger (accountSumDocumentLedger);

CLASS ABSTRACT incAccountSumDocumentLedger 'Учетный документ (приход)' : accountSumDocumentLedger;
CLASS ABSTRACT outAccountSumDocumentLedger 'Учетный документ (расход)' : accountSumDocumentLedger;

CLASS ABSTRACT incAccountSumHistoryDocumentLedger 'Учетный документ (приход, с историей)' : incAccountSumDocumentLedger, historyObject;
CLASS ABSTRACT outAccountSumHistoryDocumentLedger 'Учетный документ (расход, с историей)' : outAccountSumDocumentLedger, historyObject;

//---------------------------- Накладные ----------------------------------------//

CLASS ABSTRACT consignment 'Накладная' : outAccountSumDocumentLedger; // todo : чит, чтобы правильно считался getClassWhere и не падал в локальный минимум
CLASS ABSTRACT consignmentDetail 'Строка накладной' : outBalanceItemLedger; // todo : тоже самое

//---------------------------- Переоценка (абстрактные классы) ----------------------------------------//

CLASS ABSTRACT priceChangeDocument 'Акт переоценки' : incAccountSumDocumentLedger;
TABLE priceChangeDocument (priceChangeDocument);

CLASS ABSTRACT priceChangeDocumentDetail 'Строка переоценки';
TABLE priceChangeDocumentDetail (priceChangeDocumentDetail);

//---------------------------- Загрузка в ВУ  ----------------------------------------//
CLASS ABSTRACT priceTransactionDocument 'Документ, требующий загрузки в оборудование';

//---------------------------- Карты проработки (разруба) ----------------------------------------//
GROUP cutGroup 'Разделка' : baseGroup;
GROUP actGroup 'Акт' : publicGroup;
GROUP itemStudyOutputDetailInfo 'Ценовый характеристики п/ф' : publicGroup;

CLASS cutting 'Карта проработки (разделки)' : named, numeratedObject;
CLASS detailCutting 'Компонента';

CLASS actOfStudy 'Акт проработки (разделки)' : historyObject, numeratedObject, priceTransactionDocument;
CLASS actOfStudyPosted 'Акт проработки закрытый' : actOfStudy, postedObject;
TABLE actOfStudy (actOfStudy);

CLASS studyInputDetail 'Строка проработки (вход)' : outAutoBalanceItemLedger;
CLASS studyOutputDetail 'Строка проработки (выход)' : batch, importerPriceLedger, supplierPriceLedger, retailVATLedger, accountPriceLedger, retailPriceLedger;

@metaCodePostedObject (actOfStudy);
      //      ??????????????????? не понятно что делать с процентом надбавок ??????????????????????   //

//sidCutting 'Номер карты (из сборника и прочее)' = DATA INTEGER (cutting) IN cutGroup;

dateCutting 'Дата создания' = DATA DATE (cutting) IN cutGroup;
dateCutting(cutting) <- currentDate() ON ASSIGN cutting IS cutting;

useCutting 'Используется' = DATA BOOLEAN (cutting) IN cutGroup;
//             номер из сборника.....
descriptionCutting 'Описание' = DATA STRING[200] (cutting) IN cutGroup;

percAllowancesCutting 'Процент надбавок, %' = DATA DOUBLE (cutting) IN baseGroup;
overPercAllowancesCutting 'Процент надбавок, %' (cutting) = UNION OVERRIDE 0 IF cutting IS cutting, percAllowancesCutting(cutting) IN cutGroup;

percLossesCutting 'Процент потерь, %' = DATA DOUBLE (cutting) IN baseGroup;
overPercLossesCutting 'Процент потерь, %' (cutting) = UNION OVERRIDE 0 IF cutting IS cutting, percLossesCutting(cutting) IN cutGroup;

percSweepsCutting 'Процент зачисток, %' = DATA DOUBLE (cutting) IN baseGroup;
overPercSweepsCutting 'Процент зачисток, %' (cutting) = UNION OVERRIDE 0 IF cutting IS cutting, percSweepsCutting(cutting) IN cutGroup;

inDepartmentStoreCutting 'В каких подразделениях разрешено использовать карту' = DATA BOOLEAN (departmentStore, cutting) IN baseGroup;

cuttingDetailCutting 'Строка (ИД)' = DATA cutting (detailCutting) IN idGroup;
itemDetailCutting 'Товар (ИД)' = DATA item (detailCutting) IN idGroup;
shortNameUnitOfMeasureItemDetailCutting 'Ед.изм.' (detailCutting) = shortNameUnitOfMeasureItem(itemDetailCutting(detailCutting)) IN cutGroup;
captionItemDetailCutting 'Наименование компонента' (detailCutting) = captionItem (itemDetailCutting(detailCutting)) IN cutGroup;
factorDetailCutting 'Рассчетный коэффициент цены' = DATA DOUBLE (detailCutting) IN cutGroup;
percGoodsDetailCutting '% выхода компонента (п/ф)' = DATA DOUBLE (detailCutting) IN cutGroup;

notTotalPercGoodsDetailCutting (cutting) = GROUP SUM percGoodsDetailCutting(detailCutting) BY cuttingDetailCutting(detailCutting);
totalPercGoodsDetailCutting 'Итого % выхода по карте проработки (разделки)' (cutting) = notTotalPercGoodsDetailCutting(cutting) (+)
    overPercLossesCutting(cutting) (+) overPercSweepsCutting(cutting);
highlightCutting(cutting) = totalPercGoodsDetailCutting(cutting) > 100;

uniqueDetailCuttingCutting 'Компонента по карте переработки и товару' (cutting, item) = GROUP UNIQUE detailCutting BY cuttingDetailCutting(detailCutting), itemDetailCutting(detailCutting);
isCuttingDetailCutting(cutting, detailCutting) = cuttingDetailCutting(detailCutting) == cutting;

inItemCutting 'Вкл.' = DATA BOOLEAN (item, cutting) IN cutGroup;

// Акты проработки

departmentStoreActOfStudy (actOfStudy)= DATA departmentStore (actOfStudy) IN idGroup;
nameDepartmentStoreActOfStudy 'Отдел документа' (actOfStudy) = name(departmentStoreActOfStudy(actOfStudy));
//numberActOfStudy 'Номер акта' = DATA STRING[10] (actOfStudy) IN baseGroup;

dateActOfStudy 'Дата документа' (actOfStudy) = DATA DATE (actOfStudy) IN documentHeaderGroup;
dateActOfStudy (actOfStudy) <- currentDate() ON ASSIGN actOfStudy AS actOfStudy;

timeActOfStudy 'Время документа' (actOfStudy) = DATA TIME (actOfStudy) IN documentHeaderGroup;
timeActOfStudy (actOfStudy) <- currentTime() ON ASSIGN actOfStudy AS actOfStudy;

dateTimeActOfStudy 'Дата/время документа' (actOfStudy) = toDateTime(dateActOfStudy(actOfStudy), timeActOfStudy(actOfStudy));


contractorDepartmentStoreActOfStudy (actOfStudy)= DATA departmentStore (actOfStudy) IN idGroup;
nameContractorDepartmentStoreActOfStudy 'Отдел-контрагент' (actOfStudy) = name(contractorDepartmentStoreActOfStudy(actOfStudy)) IN documentPrmGroup;

waybillOutputActOfStudy 'Номер расходной накладной' (actOfStudy) = DATA STRING[7] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 7;
waybillInputActOfStudy 'Номер приходной накладной' (actOfStudy) = DATA STRING[7] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 7;

seriesOutputActOfStudy 'Серия расходной накладной' (actOfStudy) = DATA STRING[2] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 3;
seriesInputActOfStudy 'Серия приходной накладной' (actOfStudy) = DATA STRING[2] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 3;

castActOfStudyObjectsToString100=
    FORMULA STRING[200] '\'Акт разруба \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)';

descriptionActOfStudy 'Название документа' (actOfStudy) = castActOfStudyObjectsToString100(
    seriesNumberObject(actOfStudy), dateActOfStudy(actOfStudy), nameContractorDepartmentStoreActOfStudy(actOfStudy));

actOfStudyStudyInputDetail = DATA actOfStudy (studyInputDetail) IN idGroup;

departmentStoreStudyInputDetail (studyInputDetail) = departmentStoreActOfStudy(actOfStudyStudyInputDetail(studyInputDetail));

itemStudyInputDetail = DATA item (studyInputDetail) IN idGroup;
nameAttributeItemStudyInputDetail 'Товар' (studyInputDetail) = nameAttributeItem(itemStudyInputDetail(studyInputDetail)) MINCHARWIDTH 20 PREFCHARWIDTH 20;

counterStudyInputDetail 'Порядковый номер' (studyInputDetail) = PARTITION SUM 1 IF studyInputDetail IS studyInputDetail
    BY actOfStudyStudyInputDetail(studyInputDetail) ORDER studyInputDetail IN baseGroup;

cuttingStudyInputDetail = DATA cutting (studyInputDetail) IN idGroup;
seriesNumberCuttingStudyInputDetail 'Номер карты' (studyInputDetail) = seriesNumberObject(cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
dateCuttingStudyInputDetail 'Дата создания карты' (studyInputDetail) = dateCutting(cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
descriptionCuttingStudyInputDetail 'Описание' (studyInputDetail) = descriptionCutting(cuttingStudyInputDetail(studyInputDetail)) IN actGroup MINCHARWIDTH 20 PREFCHARWIDTH 20;

percAllowancesCuttingStudyInputDetail 'Процент надбавок, %' (studyInputDetail) = overPercAllowancesCutting(cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
percLossesCuttingStudyInputDetail 'Процент потерь, %' (studyInputDetail) = overPercLossesCutting (cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
percSweepsCuttingStudyInputDetail 'Процент зачисток, %' (studyInputDetail) = overPercSweepsCutting (cuttingStudyInputDetail(studyInputDetail)) IN actGroup;

quantityStudyInputDetail 'Количество для разруба' (studyInputDetail) = DATA DOUBLE (studyInputDetail);

retailPriceStudyInputDetail 'Цена за ед.' (studyInputDetail) = DATA DOUBLE (studyInputDetail);
totalStudyInputDetail 'Сумма' (studyInputDetail) = retailPriceStudyInputDetail(studyInputDetail)*quantityStudyInputDetail(studyInputDetail);
subtotalInputActOfStudy 'Расход сумма' (actOfStudy) = GROUP SUM totalStudyInputDetail(studyInputDetail) BY actOfStudyStudyInputDetail(studyInputDetail) IN documentSumGroup;
quantityInputActOfStudy 'Расход к-во' (actOfStudy) = GROUP SUM quantityStudyInputDetail(studyInputDetail) BY actOfStudyStudyInputDetail(studyInputDetail) IN documentSumGroup;

dateStudyInputDetail 'Дата' (studyInputDetail) = dateActOfStudy(actOfStudyStudyInputDetail(studyInputDetail)) PERSISTENT;

importerPriceStudyInputDetail 'Цена изгтовителя/импортера' (studyInputDetail) = DATA DOUBLE (studyInputDetail);
supplierPriceStudyInputDetail 'Цена поставщика' (studyInputDetail) = DATA DOUBLE (studyInputDetail);

retailRangeStudyInputDetail(studyInputDetail) = DATA range (studyInputDetail) IN idGroup;
numberRetailRangeStudyInputDetail 'Номер НДС розничный' (studyInputDetail) = dataRange(retailRangeStudyInputDetail(studyInputDetail));

dataRetailRangeStudyInputDetail 'НДС розничный,%' (studyInputDetail) =
   dataActingRateRangeDate(retailRangeStudyInputDetail(studyInputDetail),  dateStudyInputDetail(studyInputDetail)) IN baseGroup;
CONSTRAINT taxRange(retailRangeStudyInputDetail(studyInputDetail)) != tax.taxNDS CHECKED BY retailRangeStudyInputDetail MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

//inDepartmentStoreCuttingByStudyInputDetail(studyInputDetail) = inDepartmentStoreCutting(departmentStoreStudyInputDetail(studyInputDetail), cuttingStudyInputDetail(studyInputDetail));
//inItemCuttingByStudyInputDetail (studyInputDetail) = inItemCutting(itemStudyInputDetail(studyInputDetail), cuttingStudyInputDetail(studyInputDetail));
//useCuttingStudyInputDetail 'Используется' (studyInputDetail) = useCutting(cuttingStudyInputDetail(studyInputDetail));
//
//useCuttingByStudyInputDetail 'Пригодная карта для товара, подразделения и исп-ся' (studyInputDetail) =
//    inItemCutting(itemStudyInputDetail(studyInputDetail), cuttingStudyInputDetail(studyInputDetail)) AND
//    inDepartmentStoreCutting(departmentStoreStudyInputDetail(studyInputDetail), cuttingStudyInputDetail(studyInputDetail)) AND
//    useCuttingStudyInputDetail(studyInputDetail);


studyInputDetailStudyOutputDetail = DATA studyInputDetail (studyOutputDetail) IN idGroup;
actOfStudyStudyOutputDetail(studyOutputDetail) = actOfStudyStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail));

itemStudyOutputDetail 'Товар' = DATA item (studyOutputDetail) IN idGroup;
shortNameUnitOfMeasureItemStudyOutputDetail 'Ед.изм.' (studyOutputDetail) = shortNameUnitOfMeasureItem(itemStudyOutputDetail(studyOutputDetail)) IN actGroup;
captionItemStudyOutputDetail 'Наименование компонента' (studyOutputDetail) = captionItem (itemStudyOutputDetail(studyOutputDetail)) IN actGroup;
factorStudyOutputDetail 'Рассчетный коэффициент цены' = DATA DOUBLE (studyOutputDetail) IN actGroup;
percGoodsStudyOutputDetail '% выхода компонента (п/ф)' = DATA DOUBLE (studyOutputDetail) IN actGroup;
percAllowancesStudyOutputDetail 'Процент надбавок, %' = DATA DOUBLE (studyOutputDetail) IN actGroup;
overPercAllowancesStudyOutputDetail (studyOutputDetail) = UNION OVERRIDE 0 IF studyOutputDetail IS studyOutputDetail,
                                                                         percAllowancesStudyOutputDetail(studyOutputDetail);

quantityStudyInputDetailStudyOutputDetail (studyOutputDetail) = quantityStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail));
retailPriceStudyInputDetailStudyOutputDetail (studyOutputDetail) = retailPriceStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail));

quantityStudyOutputDetail 'Количество выхода п/ф' (studyOutputDetail) =  [X*Y/100]
    (percGoodsStudyOutputDetail(studyOutputDetail), quantityStudyInputDetailStudyOutputDetail(studyOutputDetail));

actualQuantityStudyOutputDetail 'Фактический выхода п/ф'(studyOutputDetail) = DATA DOUBLE (studyOutputDetail);
overQuantityStudyOutputDetail(studyOutputDetail) = UNION OVERRIDE quantityStudyOutputDetail(studyOutputDetail),
                                                                  actualQuantityStudyOutputDetail(studyOutputDetail);

// свойство для засылки в кассы
quantityItemActOfStudy (item, actOfStudy) = GROUP SUM actualQuantityStudyOutputDetail(studyOutputDetail)
                                                      BY itemStudyOutputDetail(studyOutputDetail),
                                                         actOfStudyStudyOutputDetail(studyOutputDetail);

notRoundRetailPriceStudyOutputDetail 'Цена' (studyOutputDetail) = [X*Y*(100+Z)/100]
    (factorStudyOutputDetail(studyOutputDetail), retailPriceStudyInputDetailStudyOutputDetail(studyOutputDetail), overPercAllowancesStudyOutputDetail(studyOutputDetail));
roundRetailPriceStudyOutputDetail 'Округленная цена' (studyOutputDetail) = roundMinus1(notRoundRetailPriceStudyOutputDetail(studyOutputDetail));

retailPriceStudyOutputDetail 'Розничная цена' (studyOutputDetail) = DATA DOUBLE (studyOutputDetail);

totalStudyOutputDetail 'Сумма' (studyOutputDetail)= retailPriceStudyOutputDetail(studyOutputDetail) * overQuantityStudyOutputDetail(studyOutputDetail);

subtotalStudyInputDetail 'Итого сумма  прихода п/ф по товару' (studyInputDetail) = GROUP SUM totalStudyOutputDetail(studyOutputDetail) BY studyInputDetailStudyOutputDetail(studyOutputDetail);

subtotalOutputActOfStudy 'Приход сумма' (actOfStudy) = GROUP SUM totalStudyOutputDetail(studyOutputDetail) BY actOfStudyStudyOutputDetail(studyOutputDetail) IN documentSumGroup;
quantityOutputActOfStudy 'Приход к-во' (actOfStudy) = GROUP SUM overQuantityStudyOutputDetail(studyOutputDetail) BY actOfStudyStudyOutputDetail(studyOutputDetail) IN documentSumGroup;

notTotalPercGoodsStudyInputDetail (studyInputDetail)= GROUP SUM percGoodsStudyOutputDetail(studyOutputDetail) BY studyInputDetailStudyOutputDetail(studyOutputDetail);
totalPercGoodsStudyInputDetail 'Итого % выхода по товару' (studyInputDetail) = notTotalPercGoodsStudyInputDetail(studyInputDetail) (+)
    percLossesCuttingStudyInputDetail(studyInputDetail)(+) percSweepsCuttingStudyInputDetail(studyInputDetail);
highlightStudyInputDetail(studyInputDetail) = totalPercGoodsStudyInputDetail(studyInputDetail) > 100;


departmentStoreStudyOutputDetail(studyOutputDetail) = departmentStoreStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail));

dateStudyOutputDetail 'Дата' (studyOutputDetail) = dateStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail)) PERSISTENT;

importerPriceForStudyOutputDetail(studyOutputDetail)  = importerPriceStudyInputDetail (studyInputDetailStudyOutputDetail(studyOutputDetail));
countImporterPriceStudyOutputDetail (studyOutputDetail) = factorStudyOutputDetail(studyOutputDetail) * importerPriceForStudyOutputDetail(studyOutputDetail);
roundImporterPriceStudyOutputDetail 'Округленная цена импортера' (studyOutputDetail) = roundMinus1(countImporterPriceStudyOutputDetail(studyOutputDetail));

curImporterPriceStudyOutputDetail 'Текущая цена изгтовителя/импортера' (studyOutputDetail) = DATA DOUBLE (studyOutputDetail) IN itemStudyOutputDetailInfo;
importerPriceStudyOutputDetail 'Цена изгтовителя/импортера' (studyOutputDetail) = DATA DOUBLE (studyOutputDetail) IN baseGroup;

supplierPriceForStudyOutputDetail(studyOutputDetail)  = supplierPriceStudyInputDetail (studyInputDetailStudyOutputDetail(studyOutputDetail));
countSupplierPriceStudyOutputDetail (studyOutputDetail) = factorStudyOutputDetail(studyOutputDetail) * supplierPriceForStudyOutputDetail(studyOutputDetail);
roundSupplierPriceStudyOutputDetail 'Округленная цена поставщика' (studyOutputDetail) = roundMinus1(countImporterPriceStudyOutputDetail(studyOutputDetail));

curSupplierPriceStudyOutputDetail 'Текущая цена поставщика' (studyOutputDetail) = DATA DOUBLE (studyOutputDetail) IN itemStudyOutputDetailInfo;
supplierPriceStudyOutputDetail 'Цена поставщика' (studyOutputDetail) = DATA DOUBLE (studyOutputDetail) IN baseGroup;

curRetailPriceStudyOutputDetail 'Текущая розничная цена' (studyOutputDetail) = DATA DOUBLE (studyOutputDetail) IN itemStudyOutputDetailInfo;

curRetailRangeStudyOutputDetail(studyOutputDetail) = DATA range (studyOutputDetail) IN idGroup;
curNumberRetailRangeStudyOutputDetail 'Текущий НДС номер' (studyOutputDetail) = dataRange(curRetailRangeStudyOutputDetail(studyOutputDetail)) IN itemStudyOutputDetailInfo;
curDataRetailRangeStudyOutputDetail 'Текущий НДС розничный,%' (studyOutputDetail) =
   dataActingRateRangeDate(curRetailRangeStudyOutputDetail(studyOutputDetail),  dateStudyOutputDetail(studyOutputDetail)) IN itemStudyOutputDetailInfo;

CONSTRAINT taxRange(curRetailRangeStudyOutputDetail(studyOutputDetail)) != tax.taxNDS CHECKED BY curRetailRangeStudyOutputDetail MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';


retailRangeStudyOutputDetail(studyOutputDetail) = DATA range (studyOutputDetail);
numberRetailRangeStudyOutputDetail 'НДС номер' (studyOutputDetail) = dataRange(retailRangeStudyOutputDetail(studyOutputDetail));
dataRetailRangeStudyOutputDetail 'НДС розничный,%' (studyOutputDetail) =
   dataActingRateRangeDate(retailRangeStudyOutputDetail(studyOutputDetail),  dateStudyOutputDetail(studyOutputDetail));


quantityInputItemActOfStudy 'Расход количество' (item, actOfStudy) = GROUP SUM quantityStudyInputDetail(studyInputDetail) BY itemStudyInputDetail(studyInputDetail), actOfStudyStudyInputDetail(studyInputDetail);
quantityOutputItemActOfStudy 'Приход количество (фактическое)' (item, actOfStudy) = GROUP SUM overQuantityStudyOutputDetail(studyOutputDetail) BY itemStudyOutputDetail(studyOutputDetail), actOfStudyStudyOutputDetail(studyOutputDetail);

totalInputItemActOfStudy 'Расход сумма' (item, actOfStudy) = GROUP SUM totalStudyInputDetail(studyInputDetail) BY itemStudyInputDetail(studyInputDetail), actOfStudyStudyInputDetail(studyInputDetail);
totalOutputItemActOfStudy 'Приход сумма' (item, actOfStudy) = GROUP SUM totalStudyOutputDetail(studyOutputDetail) BY itemStudyOutputDetail(studyOutputDetail), actOfStudyStudyOutputDetail(studyOutputDetail);

//---------------------------- Документы изменяющие суммы при разрубе --------------------------------//

CLASS consumption 'Расходный документ (разруб)' : outAccountSumDocumentLedger;
CLASS parish 'Приходный документ (разруб)' : incAccountSumDocumentLedger;

isActOfStudy(actOfStudy) = actOfStudy IS actOfStudy AND contractorDepartmentStoreActOfStudy(actOfStudy);

         //  приходный документ //
@metaCodeSingleAggregation(actOfStudy, parish, isActOfStudy);

waybillInputParish 'Номер приходной накладной' (parish) = waybillInputActOfStudy(actOfStudyParish(parish));
seriesInputParish 'Серия приходной накладной' (parish) = seriesInputActOfStudy(actOfStudyParish(parish));

dateTimeParish 'Дата/время' (parish) = dateTimeActOfStudy(actOfStudyParish(parish));
subtotalParish 'Сумма прихода' (parish) = subtotalOutputActOfStudy(actOfStudyParish(parish));
departmentStoreParish (parish) = departmentStoreActOfStudy(actOfStudyParish(parish));
isPostedParish (parish) = isPostedActOfStudy(actOfStudyParish(parish));
dateParish (parish) = dateActOfStudy(actOfStudyParish(parish));
//numberParish 'Номер акта' (parish) = numberActOfStudy(actOfStudyParish(parish));
//numberParish 'Номер акта' (parish) = numberObject(actOfStudyParish(parish));
//seriesParish 'Серия акта' (parish) = seriesObject(actOfStudyParish(parish));
seriesNumberParish 'Серия/Номер' (parish) = seriesNumberObject(actOfStudyParish(parish));

contractorDepartmentStoreParish (parish) = contractorDepartmentStoreActOfStudy(actOfStudyParish(parish));
nameContractorDepartmentStoreParish 'Отдел поставки' (parish) = name(contractorDepartmentStoreParish(parish));

castParishObjectsToString100=
    FORMULA STRING[200] '\'Акт разруба приход \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)';

descriptionParish 'Название документа' (parish) = castParishObjectsToString100(
    seriesNumberParish(parish), dateParish(parish), nameContractorDepartmentStoreParish(parish));

descriptionStudyOutputDetail 'Название документа' (studyOutputDetail) = castParishObjectsToString100(
    seriesNumberObject(actOfStudyStudyOutputDetail(studyOutputDetail)), dateActOfStudy(actOfStudyStudyOutputDetail(studyOutputDetail)),
    nameContractorDepartmentStoreActOfStudy(actOfStudyStudyOutputDetail(studyOutputDetail)));

        //  расходный документ //
@metaCodeSingleAggregation(actOfStudy, consumption, isActOfStudy);

dateTimeConsumption 'Дата/время' (consumption) = dateTimeActOfStudy(actOfStudyConsumption(consumption));
subtotalConsumption 'Сумма расхода' (consumption) = subtotalInputActOfStudy(actOfStudyConsumption(consumption));
departmentStoreConsumption (consumption) = departmentStoreActOfStudy(actOfStudyConsumption(consumption));
isPostedConsumption (consumption) = isPostedActOfStudy(actOfStudyConsumption(consumption));
dateConsumption (consumption) = dateActOfStudy(actOfStudyConsumption(consumption));
//numberConsumption 'Номер акта' (consumption) = numberActOfStudy(actOfStudyConsumption(consumption));
//numberConsumption 'Номер акта' (consumption) = numberObject(actOfStudyConsumption(consumption));
//seriesConsumption 'Серия акта' (consumption) = seriesObject(actOfStudyConsumption(consumption));
seriesNumberConsumption 'Серия/Номер' (consumption) = seriesNumberObject(actOfStudyConsumption(consumption));


contractorDepartmentStoreConsumption (consumption) = contractorDepartmentStoreActOfStudy(actOfStudyConsumption(consumption));
nameContractorDepartmentStoreConsumption 'Отдел назначения' (consumption) = name(contractorDepartmentStoreConsumption(consumption));

castConsumptionObjectsToString100=
    FORMULA STRING[200] '\'Акт разруба расход \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)';

descriptionConsumption 'Название документа' (consumption) = castConsumptionObjectsToString100(
    seriesNumberConsumption(consumption), dateConsumption(consumption), nameContractorDepartmentStoreConsumption(consumption));

descriptionStudyInputDetail 'Название документа' (studyInputDetail) = castConsumptionObjectsToString100(
    seriesNumberObject(actOfStudyStudyInputDetail(studyInputDetail)), dateActOfStudy(actOfStudyStudyInputDetail(studyInputDetail)),
    nameContractorDepartmentStoreActOfStudy(actOfStudyStudyInputDetail(studyInputDetail)));

//---------------------------- Изменение остатка и цены при разрубе --------------------------------//

dateTimeStudyOutputDetail 'Дата/время' (studyOutputDetail) = dateTimeActOfStudy(actOfStudyStudyOutputDetail(studyOutputDetail));
isPostedStudyOutputDetail 'Закрыт' (studyOutputDetail)= isPostedActOfStudy(actOfStudyStudyOutputDetail(studyOutputDetail));

dateTimeStudyInputDetail 'Дата/время' (studyInputDetail) = dateTimeActOfStudy(actOfStudyStudyInputDetail(studyInputDetail));
isPostedStudyInputDetail 'Закрыт' (studyInputDetail)  = isPostedActOfStudy(actOfStudyStudyInputDetail(studyInputDetail));

toFillStudyOutputDetailsStudyInputDetail 'Заполнить данные для п/ф' (studyInputDetail) =  ACTION (studyInputDetail) {
    FOR cuttingDetailCutting(detailCutting) == cuttingStudyInputDetail(studyInputDetail) DO {
        ADDOBJ studyOutputDetail;
        FOR sod == addedObject() DO {
            SET itemStudyOutputDetail(sod) <- itemDetailCutting(detailCutting);
            SET factorStudyOutputDetail(sod) <- factorDetailCutting(detailCutting);
            SET percGoodsStudyOutputDetail(sod) <- percGoodsDetailCutting(detailCutting);
            SET percAllowancesStudyOutputDetail(sod) <- overPercAllowancesCutting(cuttingDetailCutting(detailCutting));
            SET retailPriceStudyOutputDetail(sod) <- roundRetailPriceStudyOutputDetail(sod);
            SET importerPriceStudyOutputDetail(sod) <- roundImporterPriceStudyOutputDetail(sod);
            SET supplierPriceStudyOutputDetail(sod) <- roundSupplierPriceStudyOutputDetail(sod);
            SET retailRangeStudyOutputDetail(sod) <- retailRangeStudyInputDetail(studyInputDetailStudyOutputDetail(sod));
        };
    }
} CONFIRM;

showNotStudyInputDetailStudyOutputDetail(studyInputDetail, studyOutputDetail) = studyInputDetail IS studyInputDetail AND NOT studyInputDetailStudyOutputDetail(studyOutputDetail);


cleanAllStudyInputDetail 'Очистить документ' = ACTION (studyInputDetail) {
    FOR studyInputDetailStudyOutputDetail(studyOutputDetail) == studyInputDetail DO {
        EXEC delete(studyOutputDetail AS studyOutputDetail);
    }
} CONFIRM;


FORM cutting 'Карта проработки'
    OBJECTS c=cutting FIXED PANEL
    OBJECTS d=detailCutting
    PROPERTIES(c)      nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, descriptionCutting, dateCutting,
                       useCutting, overPercAllowancesCutting, overPercLossesCutting, overPercSweepsCutting
    PROPERTIES(c)      totalPercGoodsDetailCutting TODRAW d FORCE PANEL  BACKGROUND highlightCutting(c)


    PROPERTIES(d)      captionItemDetailCutting, shortNameUnitOfMeasureItemDetailCutting, factorDetailCutting, percGoodsDetailCutting, ADDOBJ, delete

    TREE treeStore a=STRING[3], t=tradingNetwork, st=storeType, s=store
        PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
        FILTERS stringEqualsAll(a), inStoreTypeTradingNetwork (st, t), inStoreTypeStore(st, s)

        OBJECTS dep=departmentStore
        PROPERTIES(dep) READONLY depName = name
        FILTERS inTradingNetworkStoreTypeStoreDepartment(t, st, s, dep)
        ORDER BY depName

    TREE treeGroup g=itemGroup PARENT parentItemGroup
        PROPERTIES READONLY gname = name(g)
        ORDER BY gname

        OBJECTS i=item
        PROPERTIES READONLY barcodeBarcodeSku(i), nameAttributeItemGroupItem(g, i), shortNameUnitOfMeasureItem(i), nameBrandItem(i)
        FILTERS nameAttributeItemGroupItem(g, i)
        ORDER BY nameAttributeItemGroupItem

    PROPERTIES(dep, c) inDepartmentStoreCutting
    PROPERTIES(i, c)   inItemCutting

    FILTERS isCuttingDetailCutting(c, d)
    FILTERGROUP filters7
        FILTER 'Показывать подразделения только для данной карты' 'F10' inDepartmentStoreCutting(dep, c)
    FILTERGROUP filters8
        FILTER 'Показывать товар только для данной карты' 'F9' inItemCutting(i, c)

    EDIT cutting OBJECT c
;

DESIGN cutting FROM DEFAULT {
    main{
       preferredSize = (1024, 768);

       NEW cut.box BEFORE functions.box{
            tabbedPane = TRUE;
            ADD d.box;
            NEW caseOneBox {
                title = 'Подразделение';

                ADD treeStore.box {
                    fillHorizontal = 1;
                };
                ADD dep.box {
                    fillHorizontal = 2;
                };
                POSITION treeStore.box TO THE LEFT dep.box;
            }
            NEW caseTwoBox { title = 'Товар, для которого действует карта';
                ADD treeGroup.box {
                    fillHorizontal = 1;
                };
                ADD i.box {
                    fillHorizontal = 2;
                };
                POSITION treeGroup.box TO THE LEFT i.box;
            }
       }
   }
}

FORM cuttings 'Карты проработки'
    OBJECTS c=cutting
    PROPERTIES(c)      READONLY numberObject, seriesObject, descriptionCutting, dateCutting, useCutting, overPercAllowancesCutting,
                       overPercLossesCutting, overPercSweepsCutting
    PROPERTIES(c)      ADDFORM, EDITFORM, delete

    OBJECTS d=detailCutting
    PROPERTIES(d)      READONLY captionItemDetailCutting, shortNameUnitOfMeasureItemDetailCutting, factorDetailCutting, percGoodsDetailCutting

    OBJECTS dep=departmentStore
    PROPERTIES(dep)    READONLY nameStoreDepartmentStore, name

    OBJECTS i=item
    PROPERTIES(i)      READONLY barcodeBarcodeSku, nameAttributeItem, shortNameUnitOfMeasureItem, nameBrandItem

    PROPERTIES(dep, c) READONLY inDepartmentStoreCutting

    PROPERTIES(i, c) READONLY inItemCutting

    FILTERS   isCuttingDetailCutting(c, d),
              inDepartmentStoreCutting(dep, c),
              inItemCutting(i, c)
    ORDER BY           nameStoreDepartmentStore, seriesObject, numberObject, captionItemDetailCutting, name
    FILTERGROUP filters1
        FILTER 'Только используемые' 'F10' useCutting(c) DEFAULT

;


DESIGN cuttings FROM DEFAULT {
    main{

       NEW cut2.box BEFORE functions.box{
            ADD dep.box { title = 'Подразделение'; }

            ADD i.box { title = 'Товар, для которого действует карта'; }
            POSITION dep.box TO THE LEFT i.box;
       }
       NEW cut1.box BEFORE cut2.box{
            ADD d.box;

       }
   }
}

FORM seriesNumberCuttingStudyInputDetail 'Возможные карты проработки'
    OBJECTS dep=departmentStore FIXED PANEL, i=item FIXED PANEL

    PROPERTIES         READONLY depName = name(dep)
    PROPERTIES         READONLY nameAttributeItem(i)

    OBJECTS c=cutting
    PROPERTIES(c)      READONLY seriesNumberObject, descriptionCutting, dateCutting, useCutting, overPercAllowancesCutting, overPercLossesCutting,
                       overPercSweepsCutting, totalPercGoodsDetailCutting

    FILTERS            inDepartmentStoreCutting(dep, c),
                       inItemCutting(i, c),
                       useCutting(c)
;

DESIGN seriesNumberCuttingStudyInputDetail FROM DEFAULT {
    PROPERTY(depName) {
        focusable = FALSE;
    }
    PROPERTY(nameAttributeItem) {
        focusable = FALSE;
    }
}

showSeriesNumberCuttingStudyInputDetail 'Карта проработки' = ACTION (detail) {
    FORM seriesNumberCuttingStudyInputDetail OBJECTS dep=departmentStoreStudyInputDetail(detail), i=itemStudyInputDetail(detail) MODAL;
    IF formResult() == formResult.ok THEN {
        SET cuttingStudyInputDetail(detail) <- chosenObject('c');
    }
} SHORTCUT seriesNumberCuttingStudyInputDetail DEFAULT;


//---------------------------- Проведение инвентаризации ----------------------------------------//

CLASS inventory 'Инвентаризация (открытая)' : historyObject, numeratedObject;
TABLE inventory (inventory);
CLASS inventoryPosted 'Инвентаризация (закрытая)' : inventory, postedObject;

CLASS listInventory 'Опись (открытая)';
TABLE listInventory (listInventory);
CLASS listInventoryPosted 'Опись (закрытая)' : listInventory, postedObject;

CLASS ABSTRACT collationSheet 'Сличительная ведомость' : outAccountSumDocumentLedger;
TABLE collationSheet (collationSheet);

CLASS registerCollationSheet 'Сличительная ведомость по описи' : collationSheet;
CLASS remainsCollationSheet 'Сличительная ведомость по остаткам' : collationSheet;
CLASS manyCollationSheet 'Сличительная ведомость по множеству товаров' : collationSheet;
CLASS pageList 'Страница описи';
CLASS detailPage 'Строка';
CLASS STATIC typeOfAddition 'Тип сличительной ведомости' {
    register 'Товары из описей',
    remains 'Товары по остаткам',
    many    'Множество товаров'
};

GROUP inventoryGroup 'Информация об инвентаризации' : publicGroup;
GROUP collationSheetGroup 'Информация о сличительных ведомостях' : baseGroup;
GROUP listInventoryGroup 'Информация об описях' : baseGroup;
GROUP inventoryCommitteeGroup 'Комиссия' : baseGroup;
GROUP adverbGroup 'Итого' : baseGroup;

castToString30 = FORMULA STRING[30] '$1 || CAST ($2 AS character(20))';

@metaCodePostedObject (inventory) ;

nameInventory 'Название инвентаризации' = DATA STRING[100] (inventory) IN documentPrmGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;

dateInventory 'Дата документа' = DATA DATE (inventory) IN documentHeaderGroup;
dateInventory(inventory) <- currentDate() ON ASSIGN inventory IS inventory;
timeInventory 'Время документа' = DATA TIME (inventory) IN documentHeaderGroup;
timeInventory(inventory) <- currentTime() ON ASSIGN inventory IS inventory;

noteInventory 'Примечание (основание)' = DATA STRING[500] (inventory) IN documentPrmGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
infoInventory 'Дополнительная информация по инвентаризации' = DATA STRING[500] (inventory) IN documentPrmGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
typeOfAdditionInventory(inventory) = DATA typeOfAddition (inventory) IN idGroup;
nameTypeOfAdditionInventory 'Тип сличительной ведомости' (inventory) = name(typeOfAdditionInventory(inventory)) IN documentPrmGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;

dateTimeInventory 'Выставить остатки на дату/время' (inventory) = toDateTime(dateInventory(inventory), timeInventory(inventory));

departmentStoreCollationSheet(collationSheet) = DATA departmentStore (collationSheet) IN idGroup;
inventoryCollationSheet(collationSheet) = DATA inventory (collationSheet) IN idGroup;
nameDepartmentStoreCollationSheet 'Подразделение' (collationSheet) = name(departmentStoreCollationSheet(collationSheet)) IN collationSheetGroup;
nameInventoryCollationSheet 'Название инвентаризации' (collationSheet) = nameInventory(inventoryCollationSheet(collationSheet)) IN collationSheetGroup;
inInventoryCollationSheet(inventory, collationSheet) = inventoryCollationSheet(collationSheet) == inventory;
inDepartmentStoreCollationSheet(departmentStore, collationSheet) = departmentStoreCollationSheet(collationSheet) == departmentStore;

counterCollationSheet (collationSheet) = PARTITION SUM 1 IF collationSheet IS collationSheet
    BY inventoryCollationSheet(collationSheet) ORDER collationSheet;

nameCollationSheet 'Внутренний номер' (collationSheet) = [FORMULA STRING[30] '$1 || \'-\' || CAST ($2 AS character(20))'](
        seriesNumberObject(inventoryCollationSheet(collationSheet)),
        counterCollationSheet(collationSheet)) IN collationSheetGroup;

includeDepartmentStoreInventory 'Включить в инвентаризацию' = DATA BOOLEAN (departmentStore, inventory) IN inventoryGroup;
uniqueCollationSheetDepartmentStoreInventory 'Сличительная ведомость по скалду и инвентаризации' (departmentStore, inventory) =
    GROUP UNIQUE collationSheet BY departmentStoreCollationSheet(collationSheet), inventoryCollationSheet(collationSheet);

typeOfAdditionDepartmentStoreInventory(departmentStore, inventory) = DATA typeOfAddition (departmentStore, inventory);
includeTypeOfAdditionDepartmentStoreInventory(departmentStore, inventory) =
    typeOfAdditionDepartmentStoreInventory(departmentStore, inventory) IF includeDepartmentStoreInventory(departmentStore, inventory) IN inventoryGroup;
nameTypeOfAdditionDepartmentStoreInventory 'Тип сличительной ведомости' (departmentStore, inventory) =
    name(includeTypeOfAdditionDepartmentStoreInventory(departmentStore, inventory)) IN documentPrmGroup;

typeOfAdditionDepartmentStoreInventoryOver(departmentStore, inventory) =
    (UNION OVERRIDE typeOfAdditionInventory(inventory) AND departmentStore IS departmentStore,
                    typeOfAdditionDepartmentStoreInventory(departmentStore, inventory))
    AND includeDepartmentStoreInventory(departmentStore, inventory);

nameTypeOfAdditionDepartmentStoreInventoryOver 'Тип сличительной ведомости' (departmentStore, inventory) = name(typeOfAdditionDepartmentStoreInventoryOver(departmentStore, inventory)) IN inventoryGroup;

nameDepartmentByInventory 'Отделы документа' (inventory) =
    GROUP CONCAT name(departmentStore) IF includeDepartmentStoreInventory(departmentStore, inventory), ', ' BY inventory IN inventoryGroup MINCHARWIDTH 50 PREFCHARWIDTH 150;

quantityStoreInventory(store, inventory) = GROUP SUM 1 IF includeDepartmentStoreInventory(departmentStore, inventory)  BY storeDepartmentStore(departmentStore), inventory;
quantityStoreByInventory(inventory) = GROUP SUM 1 IF quantityStoreInventory(store, inventory) BY inventory;

//CONSTRAINT quantityStoreByInventory(inventory) > 1  MESSAGE 'Ошибка: для инвентаризации могут задаваться отделы только в рамках одного магазина';
CONSTRAINT includeDepartmentStoreInventory(departmentStore, inventory) AND NOT nameTypeOfAdditionDepartmentStoreInventoryOver(departmentStore, inventory)  MESSAGE 'Ошибка: обязательно задавать тип сличительной ведомости для выбранного отдела';

inventoryListInventory(listInventory) = DATA inventory (listInventory) IN idGroup AUTOSET;
nameInventoryListInventory 'Название инвентаризации' (listInventory) = nameInventory(inventoryListInventory(listInventory)) IN listInventoryGroup;
inInventoryListInventory(inventory, listInventory) = inventoryListInventory(listInventory) == inventory;

departmentStoreListInventory(listInventory) = DATA departmentStore (listInventory) IN idGroup AUTOSET;
nameDepartmentStoreListInventory 'Подразделение' (listInventory) = name(departmentStoreListInventory(listInventory)) IN listInventoryGroup;
inDepartmentStoreListInventory(departmentStore, listInventory) = departmentStoreListInventory(listInventory) == departmentStore;

counterListInventory(listInventory) = PARTITION SUM 1 IF listInventory IS listInventory
    BY inventoryListInventory(listInventory), departmentStoreListInventory(listInventory)  ORDER listInventory IN baseGroup;

nameListInventory 'Номер описи' (listInventory) = castToString30('Опись ', counterListInventory(listInventory)) IN listInventoryGroup;

noteListInventory 'Примечание (наименование описи)' = DATA STRING[100] (listInventory) IN listInventoryGroup;
committeeListInventory(listInventory) = DATA inventoryCommittee (listInventory) IN idGroup;
inCommitteeListInventoryEmployee 'Сотрудник комиссии' (listInventory, employee) = inCommitteeEmployee(committeeListInventory(listInventory), employee);

commonNameCommitteeListInventory 'Название комиссии' (listInventory) = commonName(committeeListInventory(listInventory)) IN inventoryCommitteeGroup;
commonNameChairmanCommitteeListInventory 'Председатель комиссии' (listInventory) = commonNameChairmanCommittee(committeeListInventory(listInventory)) IN inventoryCommitteeGroup;

commonNameEmployeeListInventory 'Члены комиссии' (listInventory) =
     GROUP CONCAT commonName(employee) IF inCommitteeListInventoryEmployee(listInventory, employee), ', '
     BY listInventory IN inventoryCommitteeGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;

listInventoryPageList(pageList) = DATA listInventory (pageList) IN idGroup;
nameListInventoryPageList 'Номер описи' (pageList) = nameListInventory(listInventoryPageList(pageList));
inListInventoryPageList(listInventory, pageList) = listInventoryPageList(pageList) == listInventory;
sumPageListInventory 'К-во страниц' (listInventory) = GROUP SUM 1 IF pageList IS pageList BY listInventoryPageList(pageList) IN adverbGroup;
counterPageList(pageList) = PARTITION SUM 1 IF pageList IS pageList BY listInventoryPageList(pageList) ORDER pageList IN baseGroup;
namePageList 'Номер страницы' (pageList) = castToString30('Страница ', counterPageList(pageList)) IN baseGroup;
notePageList 'Примечание к странице' = DATA STRING[100] (pageList) IN baseGroup;

pageListDetailPage(detailPage) = DATA pageList (detailPage) IN idGroup;
inPageListDetailPage(pageList, detailPage) = pageListDetailPage(detailPage) == pageList;
barcodeDetailPage(detailPage) = DATA barcode (detailPage) IN idGroup;
nameBarcodeDetailPage 'Штрих-код' (detailPage) = barcodeEx(barcodeDetailPage(detailPage)) IN baseGroup;

departmentStoreDetailPage(detailPage) = departmentStoreListInventory(listInventoryPageList(pageListDetailPage(detailPage))) PERSISTENT;
listInventoryDetailPage(detailPage) = listInventoryPageList(pageListDetailPage(detailPage)) PERSISTENT;
inventoryDetailPage(detailPage) = inventoryListInventory(listInventoryPageList(pageListDetailPage(detailPage))) PERSISTENT;
inListInventoryDetailPage(listInventory, detailPage) = listInventoryDetailPage(detailPage) == listInventory;

nameDetailPage 'Номер строки' (detailPage) = PARTITION SUM 1 IF detailPage IS detailPage
    BY listInventoryPageList(pageListDetailPage(detailPage)), pageListDetailPage(detailPage)  ORDER detailPage IN baseGroup;

skuBarcodeDetailPage 'Товар (ИД)' (detailPage) =  skuBarcode(barcodeDetailPage(detailPage)) IN idGroup;
nameAttributeItemDetailPage 'Товар' (detailPage) = nameAttributeItem(skuBarcodeDetailPage(detailPage)) IN recognizeGroup;

quantityCountedDetailPage 'Количество посчитано' = DATA DOUBLE (detailPage) IN baseGroup;
CONSTRAINT quantityCountedDetailPage(detailPage) < 0 MESSAGE 'Количество должно быть положительным';


priceAccountDetailPage 'Учетная цена' (detailPage) = DATA DOUBLE (detailPage) IN baseGroup;

totalDetailPage 'Сумма' (detailPage) = priceAccountDetailPage(detailPage) * quantityCountedDetailPage(detailPage) IN baseGroup;

quantityDetailPageList 'Количество строк' (pageList) = GROUP SUM 1 IF detailPage IS detailPage BY pageListDetailPage(detailPage) IN baseGroup;
quantityCountedPageList 'Количество посчитано' (pageList) = GROUP SUM quantityCountedDetailPage(detailPage) BY pageListDetailPage(detailPage) IN baseGroup;
totalPageList 'Сумма посчитанного' (pageList) = GROUP SUM totalDetailPage(detailPage) BY pageListDetailPage(detailPage) IN baseGroup;

quantityDetailListInventory 'Количество строк' (listInventory) = GROUP SUM quantityDetailPageList(pageList) BY listInventoryPageList(pageList) IN adverbGroup;
quantityCountedListInventory 'Количество посчитано' (listInventory) = GROUP SUM quantityCountedPageList(pageList) BY listInventoryPageList(pageList) IN adverbGroup;
totalDetailListInventory 'Сумма посчитанного' (listInventory) = GROUP SUM totalPageList(pageList) BY listInventoryPageList(pageList) IN adverbGroup;

quantityDetailDepartmentStoreInventory 'Количество строк' (departmentStore, inventory) =
    GROUP SUM quantityDetailListInventory(listInventory) BY departmentStoreListInventory(listInventory), inventoryListInventory(listInventory) IN adverbGroup;

quantityCountedDepartmentStoreInventory 'Количество посчитано' (departmentStore, inventory) =
    GROUP SUM quantityCountedListInventory(listInventory) BY departmentStoreListInventory(listInventory), inventoryListInventory(listInventory) IN adverbGroup;

totalDetailDepartmentStoreInventory 'Сумма посчитанного' (departmentStore, inventory) =
    GROUP SUM totalDetailListInventory(listInventory) BY departmentStoreListInventory(listInventory), inventoryListInventory(listInventory) IN adverbGroup;

collationSheetListInventory(listInventory) = uniqueCollationSheetDepartmentStoreInventory(departmentStoreListInventory(listInventory), inventoryListInventory(listInventory)) IN baseGroup;
nameCollationSheetListInventory 'Название сл. ведомости' (listInventory) = nameCollationSheet(collationSheetListInventory(listInventory)) IN listInventoryGroup;
inCollationSheetListInventory(collationSheet, listInventory) = collationSheetListInventory(listInventory) ==  collationSheet;

quantityDetailCollationSheet 'Количество строк' (collationSheet) = GROUP SUM quantityDetailListInventory(listInventory)
    BY collationSheetListInventory(listInventory) IN baseGroup;

quantityCountedCollationSheet 'Количество посчитано' (collationSheet) = GROUP SUM quantityCountedListInventory(listInventory)
    BY collationSheetListInventory(listInventory) IN baseGroup;

totalDetailCollationSheet 'Сумма посчитанного' (collationSheet) = GROUP SUM totalDetailListInventory(listInventory)
    BY collationSheetListInventory(listInventory) IN baseGroup;

typeOfAdditionCollationSheet(collationSheet)= typeOfAdditionDepartmentStoreInventoryOver(departmentStoreCollationSheet(collationSheet), inventoryCollationSheet(collationSheet));
nameTypeOfAdditionCollationSheet 'Тип сличительной ведомости' (collationSheet) = name(typeOfAdditionCollationSheet(collationSheet)) IN baseGroup;

typeOfAdditionListInventory(listInventory) = typeOfAdditionDepartmentStoreInventoryOver(departmentStoreListInventory(listInventory), inventoryListInventory(listInventory)) IN idGroup;


balanceCollationSheetItem 'Количество остаток' (collationSheet, item) = DATA DOUBLE (collationSheet, item) IN baseGroup;

priceAccountCollationSheetItem 'Учетная цена, за ед.' (collationSheet, item) = DATA DOUBLE (collationSheet, item) IN baseGroup;

totalBalansCollationSheetItem 'Сумма по остаткам' (collationSheet, item) =
    priceAccountCollationSheetItem(collationSheet, item) * balanceCollationSheetItem(collationSheet, item) IN baseGroup;

quantityCountedCollationSheetItem 'Количество посчитано' (collationSheet, item) = GROUP SUM quantityCountedDetailPage(detailPage)
    BY collationSheetListInventory(listInventoryPageList(pageListDetailPage(detailPage))), skuBarcodeDetailPage(detailPage);

totalCollationSheetItem 'Сумма посчитанно' (collationSheet, item) = GROUP SUM totalDetailPage(detailPage)
    BY collationSheetListInventory(listInventoryPageList(pageListDetailPage(detailPage))), skuBarcodeDetailPage(detailPage);

inManyCollationSheetItem 'Вкл в ведомость' = DATA BOOLEAN (manyCollationSheet, item) IN baseGroup;

includeCollationSheetItem(collationSheet, item) = UNION EXCLUSIVE
    collationSheet IS registerCollationSheet IF quantityCountedCollationSheetItem(collationSheet, item),
    (UNION OVERRIDE inManyCollationSheetItem(collationSheet, item), collationSheet IS manyCollationSheet IF quantityCountedCollationSheetItem(collationSheet, item)),
    (collationSheet IS remainsCollationSheet IF UNION OVERRIDE balanceCollationSheetItem(collationSheet, item) != 0, TRUE IF quantityCountedCollationSheetItem(collationSheet, item));

//priceAccountCollationSheetItem(collationSheet, item) <- accountPriceCollationSheetItem(collationSheet, item) ON ASSIGN includeCollationSheetItem(collationSheet, item); //CHANGE item IS item AND collationSheet IS collationSheet;

shortageQuantityCountedCollationSheetItem 'Количество, недостача' (collationSheet, item) =
    (UNION OVERRIDE 0 IF collationSheet IS collationSheet AND item IS item, balanceCollationSheetItem(collationSheet, item)) -
    (UNION OVERRIDE 0 IF collationSheet IS collationSheet AND item IS item, quantityCountedCollationSheetItem(collationSheet, item));

shortageTotalCollationSheetItem 'Сумма, недостача' (collationSheet, item) =
    (UNION OVERRIDE 0 IF collationSheet IS collationSheet AND item IS item, totalBalansCollationSheetItem(collationSheet, item)) -
    (UNION OVERRIDE 0 IF collationSheet IS collationSheet AND item IS item, totalCollationSheetItem(collationSheet, item));

quantityCountedItemByCollationSheet 'Количество посчитано по ведомости' (collationSheet) =
    GROUP SUM quantityCountedCollationSheetItem(collationSheet, item) IF includeCollationSheetItem(collationSheet, item) BY collationSheet IN baseGroup;

totalItemByCollationSheet 'Сумма посчитанного по ведомости' (collationSheet) =
    GROUP SUM totalCollationSheetItem(collationSheet, item) IF includeCollationSheetItem(collationSheet, item) BY collationSheet IN baseGroup;

balanceItemByCollationSheet 'Остаток' (collationSheet) =
    GROUP SUM balanceCollationSheetItem(collationSheet, item) IF includeCollationSheetItem(collationSheet, item) BY collationSheet IN baseGroup;

totalBalansItemByCollationSheet 'Сумма по учетным данным ' (collationSheet) =
    GROUP SUM totalBalansCollationSheetItem(collationSheet, item) IF includeCollationSheetItem(collationSheet, item) BY collationSheet IN baseGroup;

shortageQuantityCountedItemByCollationSheet 'Недостача (к-во) по ведомости' (collationSheet) =
    GROUP SUM shortageQuantityCountedCollationSheetItem(collationSheet, item) IF includeCollationSheetItem(collationSheet, item) BY collationSheet IN baseGroup;

shortageTotalItemByCollationSheet 'Недостача (сумма) по ведомости' (collationSheet) =
    GROUP SUM shortageTotalCollationSheetItem(collationSheet, item) IF includeCollationSheetItem(collationSheet, item) BY collationSheet IN baseGroup;

priceByCollationSheetItem 'Цена из описи, за ед.' (collationSheet, item) = GROUP EQUAL priceAccountDetailPage(detailPage) BY collationSheetListInventory(listInventoryDetailPage(detailPage)), skuBarcodeDetailPage(detailPage);

notEqualsPriceByCollationSheetItem(collationSheet, item) =  priceByCollationSheetItem(collationSheet, item) != priceAccountCollationSheetItem(collationSheet, item);

// автоматическое создание сличительной ведомости (товары из описей) //
includeRegisterDepartmentStoreInventory(departmentStore, inventory) = // includeDepartmentStoreInventory(departmentStore, inventory) AND
    typeOfAdditionDepartmentStoreInventoryOver(departmentStore, inventory) == typeOfAddition.register;

@metaCodeDoublePropsAggregation(departmentStoreCollationSheet, inventoryCollationSheet, registerCollationSheet, includeRegisterDepartmentStoreInventory);

// автоматическое создание сличительной ведомости (по остаткам) //
includeRemainsDepartmentStoreInventory(departmentStore, inventory) =//        includeDepartmentStoreInventory(departmentStore, inventory) AND
    typeOfAdditionDepartmentStoreInventoryOver(departmentStore, inventory) == typeOfAddition.remains;

@metaCodeDoublePropsAggregation(departmentStoreCollationSheet, inventoryCollationSheet, remainsCollationSheet, includeRemainsDepartmentStoreInventory);

// автоматическое создание сличительной ведомости (по множеству товаров) //
includeManyDepartmentStoreInventory(departmentStore, inventory) =// includeDepartmentStoreInventory(departmentStore, inventory) AND
    typeOfAdditionDepartmentStoreInventoryOver(departmentStore, inventory) == typeOfAddition.many;

@metaCodeDoublePropsAggregation(departmentStoreCollationSheet, inventoryCollationSheet, manyCollationSheet, includeManyDepartmentStoreInventory);

inInventoryDepartmentStoreListInventory(inventory, departmentStore, listInventory) = departmentStoreListInventory(listInventory) == departmentStore AND inventoryListInventory(listInventory) == inventory;

sumListInventoryByCollationSheet 'К-во описей' (collationSheet) =
    GROUP SUM 1 IF listInventory IS listInventory BY collationSheetListInventory(listInventory);

sumPageListByCollationSheet 'К-во страниц' (collationSheet) =
    GROUP SUM 1 IF pageList IS pageList BY collationSheetListInventory(listInventoryPageList(pageList));

inInventoryDepartmentStoreListInventoryPageListDetailPage (inventory, departmentStore, listInventory, pageList, detailPage) = UNION OVERRIDE
    pageListDetailPage(detailPage) == pageList AND listInventory AND departmentStore AND inventory,
    listInventoryDetailPage(detailPage) == listInventory AND departmentStore AND NOT pageList AND inventory,
    departmentStoreDetailPage(detailPage) == departmentStore AND inventory == inventoryDetailPage(detailPage) AND NOT pageList AND NOT listInventory;

isDraftListInventory 'Открыт' (listInventory) = listInventory IS listInventory AND NOT listInventory IS listInventoryPosted;
isPostedListInventory 'Закрыт' (listInventory) = listInventory IS listInventoryPosted;

postListInventory 'Закрыть' (listInventory) = [ACTION (listInventory) CHANGECLASS listInventory TO listInventoryPosted] (listInventory)
                                    IF listInventory IS listInventory AND NOT listInventory IS listInventoryPosted TOOLBAR CONFIRM;
unpostListInventory 'Открыть' (listInventory) = [ACTION (listInventory) CHANGECLASS listInventory TO listInventory] (listInventory)
                                      IF listInventory IS listInventoryPosted TOOLBAR CONFIRM;

storeByInventory(inventory) = GROUP EQUAL storeDepartmentStore(departmentStore) IF includeDepartmentStoreInventory (departmentStore, inventory) BY inventory AS inventory;

//maxDepartmentByInventory(inventory) = GROUP MAX departmentStore AS departmentStore IF includeDepartmentStoreInventory (departmentStore, inventory) BY inventory AS inventory;
//nameStoreByInventory 'Магазин' (inventory) = name(storeDepartmentStore(departmentByInventory(inventory))) IN inventoryGroup;
nameStoreByInventory 'Магазин' (inventory) = name(storeByInventory(inventory)) IN inventoryGroup;

dateCollationSheet 'Дата сличительной ведомости' (collationSheet) = dateInventory(inventoryCollationSheet(collationSheet));

descriptionCollationSheet 'Название документа' (collationSheet) =
    [FORMULA STRING[200] '\'Сличительная ведомость \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'] (
    nameCollationSheet(collationSheet), dateCollationSheet(collationSheet));

//---------------------------- Изменение остатка инвентаризации ----------------------------//

CLASS inventoryLedger 'Изменение остатка инвентаризации' : outAutoBalanceItemLedger;
TABLE inventoryLedgerTable (inventoryLedger);

needToLedgerCollationSheetItem (collationSheet, item) = shortageQuantityCountedCollationSheetItem(collationSheet, item) != 0
    AND isPostedInventory(inventoryCollationSheet(collationSheet)) AND includeCollationSheetItem(collationSheet, item);

@metaCodeDoubleAggregation(collationSheet, item, inventoryLedger, needToLedgerCollationSheetItem);

inventoryInventoryLedger(inventoryLedger) = inventoryCollationSheet(collationSheetInventoryLedger(inventoryLedger));

dateTimeInventoryLedger(inventoryLedger) = dateTimeInventory(inventoryInventoryLedger (inventoryLedger));
isPostedInventoryLedger(inventoryLedger) = isPostedInventory(inventoryInventoryLedger(inventoryLedger));
departmentStoreInventoryLedger(inventoryLedger) = departmentStoreCollationSheet(collationSheetInventoryLedger(inventoryLedger));
nameDepartmentStoreInventoryLedger 'Подразделение' (inventoryLedger) = name(departmentStoreInventoryLedger(inventoryLedger)) MINCHARWIDTH 20 PREFCHARWIDTH 20;
quantityInventoryLedger 'Недостача, количество' (inventoryLedger) = shortageQuantityCountedCollationSheetItem(collationSheetInventoryLedger(inventoryLedger), itemInventoryLedger(inventoryLedger)) MINCHARWIDTH 12 PREFCHARWIDTH 12;
shortageTotalInventoryLedger 'Недостача, сумма' (inventoryLedger) = shortageTotalCollationSheetItem(collationSheetInventoryLedger(inventoryLedger), itemInventoryLedger(inventoryLedger)) MINCHARWIDTH 12 PREFCHARWIDTH 12;

nameAttributeItemInventoryLedger 'Товар' (inventoryLedger) = nameAttributeItem(itemInventoryLedger(inventoryLedger)) MINCHARWIDTH 15 PREFCHARWIDTH 15;

barcodeExInventoryLedger 'Щтрих-код' (inventoryLedger) =  barcodeEx(barcodeSku(itemInventoryLedger(inventoryLedger)));

descriptionInventoryLedger 'Название документа' (inventoryLedger) = descriptionCollationSheet(collationSheetInventoryLedger(inventoryLedger));

//--------------------------------Формы по инвентаризации см. в конце-------------------//


//---------------------------- Отгрузка по безналу(розница) ----------------------------//

GROUP customerGroup 'Покупатель' : documentPrmGroup;
GROUP itemSpecificationDetailInfo 'Информация по товару' : baseGroup;

CLASS specification 'Счет-фактура': historyObject, numeratedObject;
CLASS objectiveAcquiring 'Цель приобретения' : named;

CLASS specificationDetail 'Строка документа';
TABLE specificationDetail (specificationDetail);

customerSpecification(specification) = DATA customer (specification) IN idGroup;
nameCustomerSpecification 'Покупатель' (specification) = name(customerSpecification(specification)) IN customerGroup;
fullNameCustomerSpecification 'Полное наименование' (specification) = fullNameLegalEntity(customerSpecification(specification)) IN customerGroup;
UNPCustomerSpecification 'УНП' (specification) = UNPLegalEntity(customerSpecification(specification)) IN customerGroup;
addressCustomerSpecification 'Юридический адрес' (specification) = addressLegalEntity(customerSpecification(specification)) IN customerGroup;
nameOwnershipCustomerSpecification 'Форма собственности' (specification) = nameOwnershipLegalEntity(customerSpecification(specification)) IN customerGroup;
postAddressCustomerSpecification 'Почтовый адрес' (specification) = postAddressLegalEntity(customerSpecification(specification)) IN customerGroup;
managerCustomerSpecification 'Руководитель' (specification) = managerLegalEntity(customerSpecification(specification)) IN customerGroup;
phoneCustomerSpecification 'Телефон' (specification) = phoneLegalEntity(customerSpecification(specification)) IN customerGroup;

objectiveAcquiringSpecification(specification) = DATA objectiveAcquiring (specification) IN idGroup;
nameObjectiveAcquiringSpecification 'Цель приобретения' (specification) = name(objectiveAcquiringSpecification(specification)) IN documentPrmGroup;

// расчетный счет, банк, и т.д.

dateSpecification 'Дата документа' (specification) = DATA DATE (specification) IN documentHeaderGroup;
dateSpecification (specification) <- currentDate() ON ASSIGN specification AS specification;

timeSpecification 'Время документа' (specification) = DATA TIME (specification) IN documentHeaderGroup;
    timeSpecification (specification) <- currentTime() ON ASSIGN specification AS specification;

dateTimeSpecification 'Дата/время документа' (specification) = toDateTime(dateSpecification(specification), timeSpecification(specification));


dateToSpecification 'Срок действия с/ф' (specification) = DATA DATE (specification) IN documentPrmGroup;
overdueSpecification 'Просроченные с/ф' (specification) = dateToSpecification(specification) < currentDate();
noOverdueSpecification 'Непросроченные с/ф' (specification) = dateToSpecification(specification) >= currentDate();

overdueSpecificationDate 'Просроченные с/ф' (specification, date) = dateToSpecification(specification) < date AND date AS DATE;
noOverdueSpecificationDate 'Непросроченные с/ф' (specification, date) = dateToSpecification(specification) >= date AND date AS DATE;

departmentStoreSpecification 'Отдел документа (ИД)' (specification) = DATA departmentStore(specification) IN idGroup;
nameDepartmentStoreSpecification 'Отдел документа' (specification) = name(departmentStoreSpecification(specification))
    IN documentHeaderGroup MINCHARWIDTH 20 PREFCHARWIDTH 40;

noteSpecification 'Примечание' = DATA STRING[100] (specification) IN additionalInfo;

specificationSpecificationDetail 'Строка документа (ИД)' = DATA specification (specificationDetail) IN idGroup;
inSpecificationSpecificationDetail (specification, specificationDetail) = specificationSpecificationDetail(specificationDetail) == specification;

dateTimeSpecificationDetail 'Дата/время отгрузки' (specificationDetail) = dateTimeSpecification(specificationSpecificationDetail(specificationDetail));

numberSpecificationDetail 'Номер строки' (specificationDetail) =
    PARTITION SUM 1 IF specificationDetail IS specificationDetail BY specificationSpecificationDetail(specificationDetail)
    ORDER specificationDetail IN recognizeGroup MINCHARWIDTH 3 PREFCHARWIDTH 3;

itemSpecificationDetail 'Товар (ИД)' (specificationDetail) = DATA item (specificationDetail) IN idGroup;

nameAttributeItemSpecificationDetail 'Товар' (specificationDetail) =
    nameAttributeItem(itemSpecificationDetail(specificationDetail)) IN recognizeGroup;

barcodeExSkuSpecificationDetail 'Штрих-код товара' (specificationDetail) =
    barcodeEx(barcodeSku(itemSpecificationDetail(specificationDetail))) IN baseGroup;

quantityDetailInSpecification 'Количество строк в документе' (specification) =
        GROUP SUM 1 IF inSpecificationSpecificationDetail (specification, specificationDetail) BY specification;

    addSpecificationDetailBarcode 'Добавить строку по штрих-коду' = ACTION (specification) {
        FORM barcodeInput MODAL;

        IF formResult() == formResult.ok THEN {
            SET tmpSku() <- skuBarcodeStringDate(chosenString('barcode'), dateSpecification(specification));
            IF tmpSku() IS item THEN {
                ADDOBJ specificationDetail;
                FOR o == addedObject() DO {
                    SET specificationSpecificationDetail(o) <- specification AS specification;
                    SET itemSpecificationDetail(o) <- tmpSku();

                };
            } ELSE
                MESSAGE 'Не найден штрих-код';
        };

    }TOOLBAR EDITKEY 'F4';

quantitySpecificationDetail 'Кол-во товара' = DATA DOUBLE (specificationDetail) IN baseGroup;

quantitySpecification 'Общее кол-во' (specification) = GROUP SUM quantitySpecificationDetail(specificationDetail)
                                                    BY specificationSpecificationDetail(specificationDetail) IN documentSumGroup;
departmentStoreSpecificationDetail(specificationDetail) = departmentStoreSpecification(specificationSpecificationDetail(specificationDetail));

retailPriceSpecificationDetail 'Цена товара (розн.)' = DATA DOUBLE (specificationDetail) IN baseGroup;

sumSpecificationDetail 'Сумма с НДС' (specificationDetail) = round0(retailPriceSpecificationDetail(specificationDetail)*quantitySpecificationDetail(specificationDetail));
sumSpecification 'Общая сумма с НДС' (specification) = GROUP SUM sumSpecificationDetail(specificationDetail) BY specificationSpecificationDetail(specificationDetail) IN documentSumGroup;

priceBySpecificationItem (specification, item) = GROUP EQUAL retailPriceSpecificationDetail(specificationDetail)
    BY specificationSpecificationDetail(specificationDetail), itemSpecificationDetail(specificationDetail);

specificationsTaxNDSSpecificationDetail(specificationDetail) = tax.taxNDS IF specificationDetail IS specificationDetail IN idGroup;

rangeSpecificationDetail (specificationDetail) = DATA range (specificationDetail) IN baseGroup;
dataActingRateRangeSpecificationDetail 'Ставка НДС расчетная,%' (specificationDetail) = dataActingRateRangeDate(rangeSpecificationDetail(specificationDetail), dateSpecification(specificationSpecificationDetail(specificationDetail))) IN baseGroup;
rangeSpecificationDetail (specificationDetail) <- rangeToTaxStore(specificationsTaxNDSSpecificationDetail(specificationDetail),
                                storeDepartmentStore(departmentStoreSpecificationDetail(specificationDetail))) ON ASSIGN specificationDetail IS specificationDetail;


sumNDSSpecificationDetail 'НДС за ед.' (specificationDetail) = round0(dataActingRateRangeSpecificationDetail(specificationDetail)*retailPriceSpecificationDetail(specificationDetail)/100) IN baseGroup;
totalSumNDSSpecificationDetail 'Сумма НДС' (specificationDetail) = round0(dataActingRateRangeSpecificationDetail(specificationDetail)*sumSpecificationDetail(specificationDetail)/100) IN baseGroup;
sumNDSSpecification 'Общая сумма НДС' (specification) = GROUP SUM totalSumNDSSpecificationDetail(specificationDetail)
    BY specificationSpecificationDetail(specificationDetail) IN documentSumGroup;

sumWithoutNDSSpecificationDetail 'Сумма без НДС' (specificationDetail) = sumSpecificationDetail(specificationDetail) (-) totalSumNDSSpecificationDetail(specificationDetail);
sumWithoutNDSSpecification 'Общая сумма без НДС' (specification) = sumSpecification(specification) (-) sumNDSSpecification(specification) IN documentSumGroup;

articleItemSpecificationDetail 'Артикул производителя/поставщика' (specificationDetail) = articleItem(itemSpecificationDetail(specificationDetail));
nameCountryItemSpecificationDetail 'Страна производства/происхождения' (specificationDetail) = nameCountryItem(itemSpecificationDetail(specificationDetail));

minReserveItemDepartmentSpecificationDetail 'Минимальнодопустимый товарный запас в днях' (specificationDetail) =
    minReserveItemDepartmentOver(itemSpecificationDetail(specificationDetail),
    departmentStoreSpecificationDetail(specificationDetail),
    dateSpecification(specificationSpecificationDetail(specificationDetail)));

maxReserveItemDepartmentSpecificationDetail 'Максимальнодопустимый товарный запас в днях' (specificationDetail) =
    maxReserveItemDepartmentOver(itemSpecificationDetail(specificationDetail),
    departmentStoreSpecificationDetail(specificationDetail),
    dateSpecification(specificationSpecificationDetail(specificationDetail)));

quantityItemSpecification 'Количество товара в спецификации' (item, specification) = GROUP SUM quantitySpecificationDetail(specificationDetail)
    BY itemSpecificationDetail(specificationDetail), specificationSpecificationDetail(specificationDetail);

CONSTRAINT quantitySpecificationDetail(specificationDetail) <= 0 MESSAGE 'Количество должно быть положительным';
CONSTRAINT retailPriceSpecificationDetail(specificationDetail) <= 0 MESSAGE 'Цена должна быть положительной';

CONSTRAINT specification IS specification AND NOT dateToSpecification(specification) MESSAGE 'Не задан срок действия с/ф';
CONSTRAINT dateToSpecification(specification) < dateSpecification(specification) MESSAGE 'Дата действия с/ф не может быть меньше даты документа';


FORM objectiveAcquiring 'Цель приобретения'
    OBJECTS oa=objectiveAcquiring  FIXED PANEL
    PROPERTIES(oa) name
;

//---------------------------- Документ на отгрузку из розницы ----------------------------------------//

GROUP specificationGroup 'Счет-фактуры' : publicGroup;
GROUP itemStatementDetailInfo 'Информация по товару' : publicGroup;
GROUP pricingStatementDetailInfo 'Дополнительные ценовые параметры': publicGroup;

CLASS statement 'Выписка из розницы' : outAccountSumDocumentLedger, historyObject, numberedObject, consignment;
CLASS statementDetail 'Строка выписки из розницы' : outAutoBalanceItemLedger, consignmentDetail;
@metaCodeObjectWithPostEx(statement, 'Закрытая выписка из розницы');

//    шапка документа поставки
customerStatement 'Покупатель (ИД)' (statement) = DATA customer (statement) IN idGroup;
nameCustomerStatement 'Покупатель' (statement) = name(customerStatement(statement)) IN documentPrmGroup
    MINCHARWIDTH 30 PREFCHARWIDTH 40;

numberDisposalStatement '№ распоряжения на переоценку' (statement) = DATA STRING[30] (statement) IN documentPrmGroup;

inStatementSpecification 'Включить в накладную' (statement, specification) = DATA BOOLEAN (statement, specification)
    IN idGroup MINCHARWIDTH 20 PREFCHARWIDTH 20;

specificationsStatement 'Ввести на основании с/ф' (statement) = GROUP CONCAT castToString255(seriesNumberObject(specification))
    IF inStatementSpecification(statement, specification), ', ' BY statement IN specificationGroup MINCHARWIDTH 20 PREFCHARWIDTH 20;

isCustomerStatementSpecification 'Заявка покупателя' (statement, specification) = customerStatement(statement)== customerSpecification(specification);

isDepartmentStoreStatementSpecification 'Заявка отдела' (statement, specification) = departmentStoreStatement(statement)== departmentStoreSpecification(specification);

quantityStatementsInSpecification(specification) = GROUP SUM 1 IF inStatementSpecification(statement, specification) AND isPostedStatement(statement) BY specification;
noQuantityStatementsInSpecification(specification) = specification IS specification AND NOT quantityStatementsInSpecification(specification);

statusSpecification 'Расход' (specification) = CASE
    WHEN quantityStatementsInSpecification(specification) > 0 THEN ('Отгрузки были' IF specification IS specification)
    DEFAULT 'Отгрузок не было' IF specification IS specification
    END  MINCHARWIDTH 15 PREFCHARWIDTH 15;


//количество-цены по строкам

quantityStatementDetail 'Количество' (statementDetail) = DATA DOUBLE (statementDetail) IN baseGroup;

retailPriceStatementDetail 'Цена товара (розн.)'(statementDetail) = DATA DOUBLE (statementDetail) IN baseGroup;
sumStatementDetail 'Сумма с НДС' (statementDetail) = round0(retailPriceStatementDetail(statementDetail)*quantityStatementDetail(statementDetail))IN baseGroup;

//departmentStoreStatementDetail(statementDetail) = departmentStoreStatement(statementStatementDetail(statementDetail));
//retailPriceStatementDetail(statementDetail) <- retailPriceItemDepartmentVal (itemStatementDetail(statementDetail),
//                                                                   departmentStoreStatementDetail(statementDetail),
//                                                                   dateStatement(statementStatementDetail(statementDetail))) ON CHANGE itemStatementDetail(statementDetail);

curRetailPriceStatementDetail 'Текущая розничная цена' (statementDetail) = DATA DOUBLE (statementDetail) IN pricingStatementDetailInfo;



rangeStatementDetail (statementDetail) = DATA range (statementDetail) IN idGroup;
dataActingRateRangeStatementDetail 'Ставка НДС расчетная' (statementDetail) = dataActingRateRangeDate(rangeStatementDetail(statementDetail),  dateStatement(statementStatementDetail(statementDetail))) IN documentSumGroup;
rangeStatementDetail (statementDetail) <- rangeToTaxStore(tax.taxNDS,
                                          storeDepartmentStore(departmentStoreStatementDetail(statementDetail))) ON ASSIGN statementDetail IS statementDetail;
numberRangeStatementDetail 'НДС номер' (statementDetail) = dataRange(rangeStatementDetail(statementDetail));

CONSTRAINT taxRange(rangeStatementDetail(statementDetail)) != tax.taxNDS CHECKED BY rangeStatementDetail MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

sumNDSStatementDetail 'НДС за ед.' (statementDetail) = round0(dataActingRateRangeStatementDetail(statementDetail)*retailPriceStatementDetail(statementDetail)/100) IN baseGroup;
totalSumNDSStatementDetail 'Сумма НДС' (statementDetail) = round0(dataActingRateRangeStatementDetail(statementDetail)*sumStatementDetail(statementDetail)/100) IN baseGroup;
sumNDSStatement 'Общая сумма НДС' (statement) = GROUP SUM totalSumNDSStatementDetail(statementDetail) BY statementStatementDetail(statementDetail) IN documentSumGroup;


quantityItemStatement 'Количество товара в отгрузке' (item, statement) = GROUP SUM quantityStatementDetail(statementDetail)
    BY itemStatementDetail(statementDetail), statementStatementDetail(statementDetail);

priceByItemStatement(item, statement) = GROUP EQUAL retailPriceStatementDetail(statementDetail)
    BY itemStatementDetail(statementDetail), statementStatementDetail(statementDetail);

totalQuantityStatement 'Общее количество' (statement) = GROUP SUM quantityStatementDetail(statementDetail) BY statementStatementDetail(statementDetail) IN documentSumGroup;
sumStatement 'Общая сумма с НДС' (statement) = GROUP SUM sumStatementDetail(statementDetail) BY statementStatementDetail(statementDetail) IN documentSumGroup;

sumWithoutNDSStatementDetail 'Сумма без НДС' (statementDetail) = sumStatementDetail(statementDetail) (-) totalSumNDSStatementDetail(statementDetail);
sumWithoutNDSStatement 'Общая сумма без НДС' (statement) = sumStatement(statement) (-) sumNDSStatement(statement) IN documentSumGroup;

articleItemStatementDetail 'Артикул производителя/поставщика' (statementDetail) = articleItem(itemStatementDetail(statementDetail)) IN itemStatementDetailInfo;
nameCountryItemStatementDetail 'Страна производства/происхождения' (statementDetail) = nameCountryItem(itemStatementDetail(statementDetail)) IN itemStatementDetailInfo;


CONSTRAINT quantityStatementDetail(statementDetail) <= 0 MESSAGE 'Количество должно быть положительным';
CONSTRAINT retailPriceStatementDetail(statementDetail) <= 0 MESSAGE 'Цена должна быть положительной';

statusStatementSpecification 'Статус' (statement, specification) = CASE
    WHEN dateStatement(statement) > dateToSpecification(specification) THEN ('Просрочена' IF statement IS statement IF specification IS specification)
    DEFAULT 'Непросрочена' IF statement IS statement IF specification IS specification
    END  MINCHARWIDTH 15 PREFCHARWIDTH 15;

castToStringFour = FORMULA STRING[40] '$1 || CAST ($2 AS character(20)) || $3 || $4 || CAST ($5 AS character(20))';
infoSpecificationDetail(specificationDetail) = castToStringFour('Счет-фактура № ', seriesNumberObject(specificationSpecificationDetail(specificationDetail)), ' от ', ' ', dateSpecification(specificationSpecificationDetail(specificationDetail)));

noteStatementDetail 'Примечание' = DATA STRING[40] (statementDetail) IN baseGroup;

toFillStatementDetailsStatement 'Заполнить отгрузку на основании с/ф' =  ACTION (statement) {
    FOR inStatementSpecification (statement, specification) AND inSpecificationSpecificationDetail(specification, specificationDetail) DO {
        ADDOBJ statementDetail;
        FOR d == addedObject() DO {
            SET itemStatementDetail(d) <- itemSpecificationDetail(specificationDetail);
            SET retailPriceStatementDetail(d) <- retailPriceSpecificationDetail(specificationDetail);
            SET quantityStatementDetail(d) <- quantitySpecificationDetail(specificationDetail);
//            SET barcodeExSkuStatementDetail(d) <- barcodeExSkuSpecificationDetail(specificationDetail);   // может для ш-к по другому
            SET sumStatementDetail(d) <- sumSpecificationDetail(specificationDetail);
            SET noteStatementDetail(d) <- infoSpecificationDetail(specificationDetail);
        };
    };
} IN specificationGroup CONFIRM;

wareStatementDetail 'Текущая посуда' (statementDetail) = DATA ware(statementDetail) IN idGroup;
nameWareStatementDetail 'Текущая посуда' (statementDetail) = name(wareStatementDetail(statementDetail)) IN pricingStatementDetailInfo;
//wareStatementDetail(statementDetail) <- wareItem(itemStatementDetail(statementDetail)) ON CHANGE itemStatementDetail(statementDetail);

priceWareStatementDetail 'Текущая цена посуды' (statementDetail) = DATA DOUBLE (statementDetail) IN pricingStatementDetailInfo;

castStatementObjectsToString100=
    FORMULA STRING[200] '\'Выписка из розницы \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)';

descriptionStatement 'Название документа' (statement) = castStatementObjectsToString100(
    seriesNumberObject(statement), dateStatement(statement), nameCustomerStatement(statement));

descriptionStatementDetail 'Название документа' (statementDetail) = descriptionStatement(statementStatementDetail(statementDetail));

// ---------------------------------- Переоценка при реализации из розницы ------------------------------------------

CLASS priceChangeStatement 'Переоценка при отгрузке из розницы' : priceChangeDocument;
CLASS priceChangeStatementDetail 'Строка переоценки при отгрузке из розницы' : priceChangeDocumentDetail;

needToPriceChangeStatementDetail (statementDetail) = curRetailPriceStatementDetail(statementDetail) != retailPriceStatementDetail(statementDetail) AND
                                                   quantityStatementDetail(statementDetail) >0; // <= balanceDepartmentStoreItemStatementDetail(statementDetail);

needToPriceChangeStatement (statement) = GROUP SUM 1 IF needToPriceChangeStatementDetail(statementDetail) BY statementStatementDetail(statementDetail);

@metaCodeDetailAggregation(statement, priceChangeStatement, needToPriceChangeStatement);

//// атрибуты документа переоценки

dateTimePriceChangeStatement 'Дата/время' (priceChangeStatement) = dateTimeStatement(statementPriceChangeStatement(priceChangeStatement));
datePriceChangeStatement 'Дата' (priceChangeStatement) = dateStatement(statementPriceChangeStatement(priceChangeStatement));
isPostedPriceChangeStatement 'Закрыт' (priceChangeStatement) = isPostedStatement(statementPriceChangeStatement(priceChangeStatement));
numberPriceChangeStatement 'Номер накладной' (priceChangeStatement) = numberObject(statementPriceChangeStatement(priceChangeStatement));
seriesPriceChangeStatement 'Серия накладной' (priceChangeStatement) = seriesObject(statementPriceChangeStatement(priceChangeStatement));
descriptionPriceChangeStatement 'Название документа' (priceChangeStatement) = descriptionStatement(statementPriceChangeStatement(priceChangeStatement));
numberDisposalPriceChangeStatement '№ распоряжения на переоценку' (priceChangeStatement) = numberDisposalStatement(statementPriceChangeStatement(priceChangeStatement));

customerPriceChangeStatement (priceChangeStatement) = customerStatement(statementPriceChangeStatement(priceChangeStatement));
nameCustomerPriceChangeStatement 'Покупатель' (priceChangeStatement) = name(customerPriceChangeStatement(priceChangeStatement));

departmentStorePriceChangeStatement (priceChangeStatement) = departmentStoreStatement(statementPriceChangeStatement(priceChangeStatement));
nameDepartmentStorePriceChangeStatement 'Отдел документа' (priceChangeStatement) = name(departmentStorePriceChangeStatement(priceChangeStatement));


////старые ценовые параметры для переоценок

notEqualsPriceStatementDetail(statementDetail)  = retailPriceStatementDetail(statementDetail) != curRetailPriceStatementDetail(statementDetail);

retailRangeStatementDetail(statementDetail) = DATA range (statementDetail) IN idGroup;
dataRetailRangeStatementDetail 'Текущий НДС розничный,%' (statementDetail) =
   dataActingRateRangeDate(retailRangeStatementDetail(statementDetail),  dateStatement(statementStatementDetail(statementDetail))) IN pricingStatementDetailInfo;
//retailRangeStatementDetail(statementDetail) <- overrideRateRangeItem(itemStatementDetail(statementDetail)) ON CHANGE itemStatementDetail(statementDetail);

importerPriceStatementDetail 'Текущая цена изготовителя/импортера' (statementDetail) = DATA DOUBLE (statementDetail) IN pricingStatementDetailInfo;
supplierPriceStatementDetail 'Текущая цена поставщика' (statementDetail) = DATA DOUBLE (statementDetail) IN pricingStatementDetailInfo;

//// атрибуты детализации документа переоценки

itemPriceChangeStatementDetail (priceChangeStatementDetail) = itemStatementDetail(statementDetailPriceChangeStatementDetail(priceChangeStatementDetail));
nameItemPriceChangeStatementDetail 'Товар' (priceChangeStatementDetail) = nameAttributeItem(itemPriceChangeStatementDetail(priceChangeStatementDetail));

quantityPriceChangeStatementDetail 'Количество' (priceChangeStatementDetail) = quantityStatementDetail(statementDetailPriceChangeStatementDetail(priceChangeStatementDetail));

importerPriceChangeStatementDetail 'Текущая цена изготовителя' (priceChangeStatementDetail) = importerPriceStatementDetail(statementDetailPriceChangeStatementDetail(priceChangeStatementDetail));
supplierPriceChangeStatementDetail 'Текущая цена поставщика' (priceChangeStatementDetail) = supplierPriceStatementDetail(statementDetailPriceChangeStatementDetail(priceChangeStatementDetail));

//importerPriceChangeStatementDetail 'Новая цена изготовителя' (priceChangeStatementDetail) = importerPriceStatementDetail(statementDetailPriceChangeStatementDetail(priceChangeStatementDetail));
                                     //  пока что цена изготовителя старая и новая равны   //
dataRetailRangePriceChangeStatementDetail 'Текущий НДС, %' (priceChangeStatementDetail) = dataRetailRangeStatementDetail(statementDetailPriceChangeStatementDetail(priceChangeStatementDetail));
                                    //  пока что НДС старый и новый равны   //
curRetailPriceChangeStatementDetail 'Текущая розничная цена' (priceChangeStatementDetail) = curRetailPriceStatementDetail(statementDetailPriceChangeStatementDetail(priceChangeStatementDetail));
retailPriceChangeStatementDetail 'Новая розничная цена' (priceChangeStatementDetail) = retailPriceStatementDetail(statementDetailPriceChangeStatementDetail(priceChangeStatementDetail));

warePriceChangeStatementDetail 'Текущая посуда' (priceChangeStatementDetail) = wareStatementDetail(statementDetailPriceChangeStatementDetail(priceChangeStatementDetail)) IN baseGroup;
priceWarePriceChangeStatementDetail 'Текущая цена посуды' (priceChangeStatementDetail) =  priceWareStatementDetail(statementDetailPriceChangeStatementDetail(priceChangeStatementDetail)) IN baseGroup;

// для накладной (шапка и хвост)
carStatement 'Автомобиль' (statement) = DATA STRING[30] (statement);
ownerCarStatement 'Владелец автомобиля' (statement) = DATA STRING[100] (statement);
trailerStatement 'Прицеп' (statement) = DATA STRING[10] (statement);
driverCarStatement 'Водитель' (statement) = DATA STRING[40] (statement);
waybillStatement 'Путевой лист' (statement) = DATA STRING[20] (statement);

transportPayerStatement 'Заказчик перевозки (ИД)' (statement) = DATA legalEntity (statement);

shipmentBaseStatement 'Основание отпуска' (statement) = DATA STRING[30] (statement);

dataLoadingPlaceStatement 'Пункт погрузки' (statement) = DATA STRING[50] (statement);
loadingPlaceStatement 'Пункт погрузки' (statement) = UNION OVERRIDE addressStore(storeDepartmentStore(departmentStoreStatement(statement))),
                                                       dataLoadingPlaceStatement (statement);

dataUnloadingPlaceStatement 'Пункт разгрузки' (statement) = DATA STRING[50] (statement);
unloadingPlaceStatement 'Пункт разгрузки' (statement) = UNION OVERRIDE addressLegalEntity(customerStatement(statement)),
                                                       dataUnloadingPlaceStatement (statement);

readdressingStatement 'Переадресовка' (statement) = DATA STRING[50] (statement);

issuanceAllowedStatement 'Отпуск разрешил' (statement) = DATA employee(statement);
issuanceExecutedStatement 'Отпуск произвел' (statement) = DATA employee(statement);

forwarderStatement 'Товар к перевозке принял (экспедитор)' (statement) = DATA STRING[40] (statement);

warrantStatement 'По доверенности' (statement) = DATA STRING[30](statement);
warrantHolderStatement 'Доверенность выдана на' (statement) = DATA STRING[100](statement);

goodsAcceptedStatement 'Принял грузополучатель' (statement) = DATA STRING[40] (statement);

loadingExecuterStatement 'Исполнитель ПРР' (statement) = DATA employee(statement);

CLASS wayOfLoading 'Способ ПРР' : named;
nameWayOfLoading 'Способ ПРР' (wayOfLoading) = name(wayOfLoading) IF wayOfLoading IS wayOfLoading IN baseGroup;
//усложнение из-за бага

wayOfLoadingStatement 'Способ ПРР' (statement) = DATA wayOfLoading(statement);
codeLoadingStatement 'Код ПРР' (statement) = DATA STRING[3] (statement);

arrivalTimeStatement 'Время прибытия' (statement) = DATA DATETIME(statement);
departureTimeStatement 'Время убытия' (statement) = DATA DATETIME(statement);
downtimeStatement 'Время простоя' (statement) = DATA STRING[10] (statement);

raceQuantityStatement 'Количество ездок' (statement) = DATA INTEGER (statement);

packQuantityStatementDetail 'Количество грузовых мест' (statementDetail) = quantityStatementDetail(statementDetail)/
    UNION OVERRIDE 1 IF statementDetail IS statementDetail, quantityPackItem(itemStatementDetail(statementDetail));

sumPackQuantityStatement 'Общее количество грузовых мест' (statement) = GROUP SUM packQuantityStatementDetail(statementDetail)
    BY statementStatementDetail(statementDetail) IN sumConsignmentGroup;

grossWeightStatementDetail 'Масса груза, т.' (statementDetail) =
    grossWeightItem(itemStatementDetail(statementDetail))*quantityStatementDetail(statementDetail)/1000;

sumGrossWeightStatement 'Общая масса груза, т.' (statement) = GROUP SUM grossWeightStatementDetail(statementDetail)
    BY statementStatementDetail(statementDetail) IN sumConsignmentGroup;

//---------------------------- Кассовые отчеты ----------------------------------------//
CLASS cashReport 'Кассовый отчет' : transaction;
CLASS cashDocument 'Кассовый документ';
CLASS incomeCashOrder 'ПКО': cashDocument;
CLASS outcomeCashOrder 'РКО': cashDocument;
CLASS bankCardsReport 'Отчет по банковским карточкам': cashDocument;

numberCashReport 'Номер кассового отчета' (cashReport) = DATA INTEGER (cashReport) IN baseGroup;
startDateCashReport 'Дата начала' (cashReport) = DATA DATE (cashReport) IN baseGroup;
endDateCashReport 'Дата окончания' (cashReport) = DATA DATE (cashReport) IN baseGroup;

reportCashDocument 'Отчет документа (ИД)' (cashDocument) = DATA cashReport (cashDocument) IN idGroup;
numberCashDocument 'Номер документа' (cashDocument) = DATA INTEGER (cashDocument) IN baseGroup;
sumCashDocument 'Сумма документа' (cashDocument) = DATA DOUBLE (cashDocument) IN baseGroup;
cashRegisterIncomeCashOrder 'Выручка кассы (ИД)' (incomeCashOrder) = DATA cashRegister(incomeCashOrder) IN idGroup;
numberCashRegisterIncomeCashOrder 'Выручка кассы' (incomeCashOrder) = numberCashRegister(cashRegisterIncomeCashOrder(incomeCashOrder)) IN baseGroup;
dopInfoCashDocument 'Описание' (cashDocument) = DATA STRING[10] (cashDocument) IN baseGroup;
infoCashDocument 'Основание документа' (cashDocument) = UNION EXCLUSIVE numberCashRegisterIncomeCashOrder(cashDocument) IF cashDocument IS incomeCashOrder, dopInfoCashDocument (cashDocument);

inCashReportDocument 'Документ в текущем кассовом отчете' (cashReport, cashDocument) = reportCashDocument(cashDocument)==cashReport;

FORM cashReport 'Кассовый отчет'
OBJECTS r=cashReport FIXED PANEL
OBJECTS d=cashDocument
PROPERTIES (r) numberCashReport, startDateCashReport, endDateCashReport
PROPERTIES (d) objectClassName, numberCashDocument, infoCashDocument, sumCashDocument, ADDOBJ, delete
FILTERS inCashReportDocument(r,d)
EDIT cashReport OBJECT r;

FORM cashReports 'Кассовые отчеты'
OBJECTS r=cashReport, d=cashDocument
PROPERTIES (r) startDateCashReport, endDateCashReport
PROPERTIES (r) ADDFORM, EDITFORM, delete
PROPERTIES (d) READONLY numberCashDocument, sumCashDocument
FILTERS inCashReportDocument(r,d);

//---------------------------- Приход товара от поставщика ----------------------------------------//
CLASS shipment 'Поставка' : incAccountSumDocumentLedger, historyObject, numberedObject, priceTransactionDocument;
CLASS shipmentDetail 'Строка поставки' : batch, importerPriceLedger, supplierPriceLedger, retailVATLedger, accountPriceLedger, retailPriceLedger, warePriceLedger;
@metaCodeObjectWithPostEx(shipment, 'Закрытая поставка');

GROUP shipmentOrderGroup 'Заказ' : documentPrmGroup;
GROUP additionalInfo 'Дополнительно' : baseGroup;

//шапка документа поставки
numberObjectDetail 'Номер накладной' (shipmentDetail) = numberObject(shipmentShipmentDetail(shipmentDetail));
seriesObjectDetail 'Серия накладной' (shipmentDetail) = seriesObject(shipmentShipmentDetail(shipmentDetail));

sidShipmentDetail 'Уникальный номер накладной' (shipmentDetail) = DATA STRING[50] (shipmentDetail) IN documentHeaderGroup;

sidNumberSeriesToShipmentDetail (sid, number, series) = GROUP UNIQUE shipmentDetail
            BY sidShipmentDetail (shipmentDetail), numberObjectDetail (shipmentDetail), seriesObjectDetail (shipmentDetail)
            WHERE shipmentDetail IS shipmentDetail;

numberSeriesToShipment (number, series) = GROUP UNIQUE shipment BY numberObject(shipment), seriesObject(shipment) WHERE shipment IS shipment;

supplierShipment 'Поставщик (ИД)' (shipment) = DATA supplier (shipment) IN idGroup;

nameSupplierShipment 'Поставщик' (shipment) = name(supplierShipment(shipment)) IN documentHeaderGroup
    MINCHARWIDTH 30 PREFCHARWIDTH 40 IN documentPrmGroup;

contractShipment 'Договор' (shipment) = DATA contract (shipment) IN idGroup;

contractShipment (shipment) <- overrideContractCompanySupplier(companyStore(storeDepartmentStore(departmentStoreShipment(shipment))), supplierShipment(shipment))
                               IF (countContracts(supplierShipment(shipment), departmentStoreShipment(shipment)) == 1)
                               ON CHANGE supplierShipment(shipment);

numberContractShipment 'Договор' (shipment) = numberContract(contractShipment(shipment)) IN documentPrmGroup;

carryingChargesShipment 'Транспортные расходы' (shipment) = DATA DOUBLE (shipment) IN documentSumGroup;

inShipmentOrder 'Поставка по заказу' (shipment, orderSupplier) = DATA BOOLEAN (shipment, orderSupplier)
    IN idGroup MINCHARWIDTH 10 PREFCHARWIDTH 10;

ordersShipment 'Заявка' (shipment) = GROUP CONCAT castToString255(dataOrderSupplier(orderSupplier))
    IF inShipmentOrder(shipment, orderSupplier), ', ' BY shipment IN shipmentOrderGroup MINCHARWIDTH 10 PREFCHARWIDTH 10;

isSupplierShipmentOrder 'Заявка поставщика поставки' (shipment, orderSupplier) = supplierShipment(shipment)== supplierOrderSupplier(orderSupplier);

isDepartmentStoreShipmentOrder 'Заявка отдела поставки' (shipment, orderSupplier) = departmentStoreShipment(shipment)== departmentStoreOrderSupplier(orderSupplier);

//атрибуты для подсказки по товару строки
GROUP itemShipmentDetailInfo 'Информация по товару' : baseGroup;

controlExpiryShipmentDetail 'Контролировать сроки годности товара?' (shipmentDetail) =
    controlExpiryItem (itemShipmentDetail(shipmentDetail)) IN itemShipmentDetailInfo;

isManufacturedShipmentDetail 'Товар производится?' (shipmentDetail) = isManufacturedItem(itemShipmentDetail(shipmentDetail)) IN itemShipmentDetailInfo;
isWeightShipmentDetail 'Весовой товар?' (shipmentDetail) = isWeightItem(itemShipmentDetail(shipmentDetail)) IN itemShipmentDetailInfo;

nameinActionItemDepartmentShipmentDetail 'Товар акции?' (shipmentDetail) = name(inActionItemDepartmentVal(itemShipmentDetail(shipmentDetail),
    departmentStoreShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))) IN itemShipmentDetailInfo FIXEDCHARWIDTH 2;

hintShipmentDetail 'Подсказка по товару' (shipmentDetail) = hintItem(itemShipmentDetail(shipmentDetail)) IN itemShipmentDetailInfo MINCHARWIDTH 20 PREFCHARWIDTH 20;

nameCountryShipmentDetail 'Страна производства/происхождения' (shipmentDetail) =
    name(countryItem(itemShipmentDetail(shipmentDetail))) IN itemShipmentDetailInfo MINCHARWIDTH 15 PREFCHARWIDTH 15;

namebanRevaluationItemDepartmentShipmentDetail 'Запрет на переоценку' (shipmentDetail) = name(banRevaluationItemDepartmentVal(itemShipmentDetail(shipmentDetail),
    departmentStoreShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))) IN itemShipmentDetailInfo FIXEDCHARWIDTH 2;

supplierShipmentDetail 'Поставщик (ИД)' (shipmentDetail) = supplierShipment(shipmentShipmentDetail(shipmentDetail));


numberDisposalShipment '№ распоряжения на переоценку' (shipment) = DATA STRING[30] (shipment) IN documentPrmGroup;

//количество-цены по строкам
GROUP pricingShipmentDetailInfo 'Дополнительные ценовые параметры': baseGroup;

quantityShipmentDetail 'Количество' (shipmentDetail) = DATA DOUBLE (shipmentDetail) IN baseGroup;
totalQuantityShipment 'Общее количество' (shipment) = GROUP SUM quantityShipmentDetail(shipmentDetail) BY shipmentShipmentDetail(shipmentDetail) IN documentSumGroup;
quantityItemShipment 'Количество по товару в поставке' (item, shipment) = GROUP SUM quantityShipmentDetail (shipmentDetail) BY itemShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail);
isShippedItemShipment 'Товар есть в поставке' (item, shipment) = quantityItemShipment(item, shipment) > 0;

balanceBeforeShipmentShipmentDetail 'Остаток до поставки' (shipmentDetail) = DATA DOUBLE (shipmentDetail) IN baseGroup;

supplierPriceShipmentDetail 'Цена поставщика'(shipmentDetail) = DATA DOUBLE (shipmentDetail) IN baseGroup;

supplierMarkupShipmentDetail 'Оптовая надбавка/торговая скидка, %' (shipmentDetail) = DATA DOUBLE (shipmentDetail) IN baseGroup;
overSupplierMarkupShipmentDetail 'Оптовая надбавка/торговая скидка, %' (shipmentDetail) =
        UNION OVERRIDE 0 IF shipmentDetail IS shipmentDetail, supplierMarkupShipmentDetail(shipmentDetail);
dateFitToShipmentDetail 'Годен до' (shipmentDetail) = DATA DATE(shipmentDetail) IN baseGroup;


suppliersRangeShipmentDetail(shipmentDetail) = DATA range (shipmentDetail) IN idGroup;
numberSuppliersRangeShipmentDetail 'НДС поставщика, номер' (shipmentDetail) = dataRange(suppliersRangeShipmentDetail(shipmentDetail));
dataSuppliersRangeShipmentDetail 'НДС поставщика,%' (shipmentDetail) = dataActingRateRangeDate
    (suppliersRangeShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail)) IN baseGroup;

CONSTRAINT taxRange(suppliersRangeShipmentDetail(shipmentDetail)) != tax.taxNDS CHECKED BY suppliersRangeShipmentDetail MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

suppliersRangeShipmentDetail(shipmentDetail) <- suppliersRangeItemVal(itemShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail)) ON CHANGE itemShipmentDetail(shipmentDetail);

retailRangeShipmentDetail(shipmentDetail) = DATA range (shipmentDetail) IN idGroup;
numberRetailRangeShipmentDetail 'НДС розничный, номер' (shipmentDetail) = dataRange(retailRangeShipmentDetail(shipmentDetail));
dataRetailRangeShipmentDetail 'НДС розничный,%' (shipmentDetail) = dataActingRateRangeDate
    (retailRangeShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail));

CONSTRAINT taxRange(retailRangeShipmentDetail(shipmentDetail)) != tax.taxNDS CHECKED BY retailRangeShipmentDetail MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

retailRangeShipmentDetail(shipmentDetail) <- overrideRateRangeItemVal(itemShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail)) ON CHANGE itemShipmentDetail(shipmentDetail);

wareShipmentDetail 'Посуда (ИД)' (shipmentDetail) = DATA ware(shipmentDetail) IN idGroup;
nameWareShipmentDetail 'Посуда' (shipmentDetail) = name(wareShipmentDetail(shipmentDetail)) IN baseGroup MINCHARWIDTH 10 PREFCHARWIDTH 15;

wareShipmentDetail(shipmentDetail) <- wareItem(itemShipmentDetail(shipmentDetail)) ON CHANGE itemShipmentDetail(shipmentDetail);

dataWareRangeShipmentDetail 'НДС по посуде' (shipmentDetail) =
    dataActingRateRangeDate(rangeWareVal(wareShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail)),
    dateShipmentDetail(shipmentDetail));

inWareShipmentDetail 'Товар в посуде' (shipmentDetail) = inWareItem(itemShipmentDetail(shipmentDetail));

priceWareShipmentDetail 'Цена посуды' (shipmentDetail) = DATA DOUBLE (shipmentDetail) IN baseGroup;

priceWareShipmentDetail (shipmentDetail) <- priceWareVal (wareShipmentDetail (shipmentDetail), dateShipmentDetail(shipmentDetail))
                                            ON CHANGE itemShipmentDetail(shipmentDetail);

overPriceWareShipmentDetail 'Цена посуды' (shipmentDetail) = UNION OVERRIDE 0 IF shipmentDetail IS shipmentDetail,
                                                             priceWareShipmentDetail (shipmentDetail);
overSumPriceWareShipmentDetail 'Сумма посуды' (shipmentDetail) = UNION OVERRIDE 0 IF shipmentDetail IS shipmentDetail,
                                                                 overPriceWareShipmentDetail(shipmentDetail)*quantityShipmentDetail(shipmentDetail);

retailMarkupShipmentDetail 'Торговая надбавка, %'(shipmentDetail) = DATA DOUBLE (shipmentDetail) IN baseGroup;

retailMarkupShipmentDetail(shipmentDetail) <-
    markupItemDepartmentVal (itemShipmentDetail(shipmentDetail),
    departmentStoreShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))
    ON CHANGE itemShipmentDetail(shipmentDetail);

isFixPriceShipmentDetail 'Товар с фиксированной ценой' (shipmentDetail) = DATA BOOLEAN (shipmentDetail) IN pricingShipmentDetailInfo;
isFixPriceShipmentDetail(shipmentDetail) <- isFixPriceItem (itemShipmentDetail (shipmentDetail)) ON CHANGE itemShipmentDetail(shipmentDetail);

notRoundImporterPriceShipmentDetail 'Цена изготовителя/импортера (неокругленная)' (shipmentDetail) = UNION OVERRIDE
     [X*100/(100+Y)](supplierPriceShipmentDetail(shipmentDetail), overSupplierMarkupShipmentDetail(shipmentDetail)),
     [X*(100+Y)/100](supplierPriceShipmentDetail(shipmentDetail), overSupplierMarkupShipmentDetail(shipmentDetail))
     IF isFixPriceShipmentDetail(shipmentDetail);

importerPriceShipmentDetail 'Цена изготовителя/импортера' (shipmentDetail) =
    round0(notRoundImporterPriceShipmentDetail(shipmentDetail)) IN pricingShipmentDetailInfo;

commonMarkupShipmentDetail 'Общий процент надбавки от цены изготовителя' (shipmentDetail) = [(X*(Y+100)/Z/100-1)*100](
    supplierPriceShipmentDetail(shipmentDetail), retailMarkupShipmentDetail(shipmentDetail), importerPriceShipmentDetail(shipmentDetail));

amountMarkupShipmentDetail 'Сумма торговой надбавки (за ед.)' (shipmentDetail) =
    supplierPriceShipmentDetail(shipmentDetail) *
    (UNION OVERRIDE 0 IF shipmentDetail IS shipmentDetail, retailMarkupShipmentDetail(shipmentDetail))/100;

amountRetailVATShipmentDetail 'Сумма розничного НДС (за ед.)' (shipmentDetail) =
    (supplierPriceShipmentDetail(shipmentDetail) (+) amountMarkupShipmentDetail(shipmentDetail))*
    (UNION OVERRIDE 0 IF shipmentDetail IS shipmentDetail, dataRetailRangeShipmentDetail(shipmentDetail))/100;

nonRoundRetailPriceShipmentDetail 'Цена розничная (неокруглен.)'(shipmentDetail) = supplierPriceShipmentDetail(shipmentDetail) (+) amountMarkupShipmentDetail(shipmentDetail) (+) amountRetailVATShipmentDetail(shipmentDetail);

calculatedRetailPriceShipmentDetail 'Новая розничная цена (расч.)' (shipmentDetail) = IF isFixPriceShipmentDetail(shipmentDetail)
    THEN roundMinus1(importerPriceShipmentDetail(shipmentDetail) (+) overPriceWareShipmentDetail(shipmentDetail))
    ELSE roundMinus1(nonRoundRetailPriceShipmentDetail(shipmentDetail) (+) overPriceWareShipmentDetail(shipmentDetail)) PERSISTENT;

retailPriceShipmentDetail 'Новая розничная цена' (shipmentDetail) = DATA DOUBLE (shipmentDetail);

retailPriceShipmentDetail (shipmentDetail) <- calculatedRetailPriceShipmentDetail (shipmentDetail)
    ON CHANGE calculatedRetailPriceShipmentDetail (shipmentDetail);

@metaCodeTotals (shipment);

exSumSupplierShipmentDetail 'Сумма с ндс и посудой' (shipmentDetail) = overSumPriceWareShipmentDetail(shipmentDetail) (+) sumSupplierShipmentDetail(shipmentDetail);
exSumSupplierShipment 'Сумма с ндс и посудой' (shipment) = GROUP SUM exSumSupplierShipmentDetail(shipmentDetail)
    BY shipmentShipmentDetail(shipmentDetail);

//totalSumSupplierShipmentDetail 'Сумма с ндс и посудой' (shipmentDetail) = overSumPriceWareShipmentDetail(shipmentDetail) (+) sumSupplierShipmentDetail(shipmentDetail);

amountSumRetailVATShipmentDetail 'Сумма розничного НДС' (shipmentDetail) = amountRetailVATShipmentDetail(shipmentDetail)*quantityShipmentDetail(shipmentDetail);

diffRoundShipmentDetail 'Сумма округления (за ед.)'(shipmentDetail) = retailPriceShipmentDetail(shipmentDetail) (-) nonRoundRetailPriceShipmentDetail(shipmentDetail);

retailSumShipmentDetail 'Розничная сумма' (shipmentDetail) = quantityShipmentDetail(shipmentDetail) * retailPriceShipmentDetail(shipmentDetail);
retailSumShipment 'Розничная сумма' (shipment) = GROUP SUM retailSumShipmentDetail(shipmentDetail) BY shipmentShipmentDetail(shipmentDetail) IN documentSumGroup PERSISTENT;

registerCommitteeShipment(shipment) = DATA registerCommittee(shipment);
nameRegisterCommitteeShipment 'Комиссия для реестра цен' (shipment) = commonName(registerCommitteeShipment(shipment)) IN documentPrmGroup MINCHARWIDTH 20 PREFCHARWIDTH 40;

registerCommitteeShipment(shipment) <- registerCommitteeDepartmentStore(departmentStoreShipment(shipment))
    ON ASSIGN shipment IS shipment;
//--------------------показатели для реестра цен----------------------------//

supportSumPriceShipmentDetail 'Сумма пост-ка с посудой без НДС' (shipmentDetail) = sumSupplierPriceShipmentDetail(shipmentDetail) (+) overSumPriceWareShipmentDetail(shipmentDetail) (-) sumDetailVatWareShipmentDetail(shipmentDetail);
supportSumPriceShipment 'Сумма пост-ка с посудой без НДС' (shipment) = GROUP SUM supportSumPriceShipmentDetail(shipmentDetail)
    BY shipmentShipmentDetail(shipmentDetail);

//fullSumPriceShipmentDetail 'Сумма пост-ка с посудой и НДС' (shipmentDetail) = sumPriceShipmentDetail(shipmentDetail) (+) sumSupplierVATShipmentDetail(shipmentDetail) (+) overSumPriceWareShipmentDetail(shipmentDetail);

percMarkupShipmentDetail '% надбавки с уч. оптовой' (shipmentDetail) = [x*100/y](
    sumMarkupShipmentDetail(shipmentDetail), importerPriceShipmentDetail(shipmentDetail));

fullDetailVatShipmentDetail 'НДС розн. с пос.' (shipmentDetail) = sumDetailVatShipmentDetail(shipmentDetail) (+) sumDetailVatWareShipmentDetail(shipmentDetail);
fullDetailVatShipment 'НДС розн. с пос.' (shipment) = GROUP SUM fullDetailVatShipmentDetail(shipmentDetail)
    BY shipmentShipmentDetail(shipmentDetail);


quantityShipmentOrderItem 'Поставленное количество' (orderSupplier, item) = GROUP SUM quantityShipmentDetail (shipmentDetail) IF inShipmentOrder (shipmentShipmentDetail (shipmentDetail), orderSupplier) BY orderSupplier, itemShipmentDetail(shipmentDetail);

//контроль цен поставки по заказам с учетом допустимых отклонений по поставщику
priceOrderItemShipment 'Цена товара в заказах поставки (максим.)' (item, shipment) = GROUP MAX
        priceSupplierItemOrderSupplier(orderSupplier, item) IF inShipmentOrder (shipment, orderSupplier) BY item, shipment;

maxAllowPriceItemShipment 'Максимально допустимая цена в поставке' (item, shipment) = [X*(100+Y)/100](
    priceOrderItemShipment (item, shipment),
    UNION OVERRIDE 0 IF shipment IS shipment, allowablePercentSupplier(supplierShipment(shipment)));

minAllowPriceItemShipment 'Минимально допустимая цена в поставке' (item, shipment) = [X*(100-Y)/100](
    priceOrderItemShipment (item, shipment),
    UNION OVERRIDE 0 IF shipment IS shipment, allowablePercentSupplier(supplierShipment(shipment)));

//    priceOrderItemShipment (item, shipment) * (100 - [UNION OVERRIDE 0 IF shipment IS shipment, allowablePercentSupplier (supplierShipment(shipment))](shipment))/100;
CONSTRAINT supplierPriceShipmentDetail (shipmentDetail) > maxAllowPriceItemShipment (itemShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail))
    AND isPostedShipmentDetail (shipmentDetail) MESSAGE 'Цена поставки больше цены заказа';

CONSTRAINT supplierPriceShipmentDetail (shipmentDetail) < minAllowPriceItemShipment (itemShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail))
    AND isPostedShipmentDetail (shipmentDetail) MESSAGE 'Цена поставки меньше цены заказа';

isAllowPriceItemShipment 'Доспустимая цена поставки' (shipmentDetail) =
    supplierPriceShipmentDetail (shipmentDetail) > maxAllowPriceItemShipment (itemShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail)) OR
    supplierPriceShipmentDetail (shipmentDetail) < minAllowPriceItemShipment (itemShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail));

//старые ценовые параметры для переоценок
curRetailPriceShipmentDetail 'Текущая розничная цена' (shipmentDetail) = DATA DOUBLE (shipmentDetail) IN pricingShipmentDetailInfo;

curRetailRangeShipmentDetail(shipmentDetail) = DATA range (shipmentDetail) IN idGroup;
curDataRetailRangeShipmentDetail 'Текущий НДС розничный,%' (shipmentDetail) = dataActingRateRangeDate(curRetailRangeShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail)) IN pricingShipmentDetailInfo;

//oldPriceShipmentDetail 'Старая цена поставщика'(shipmentDetail) = DATA DOUBLE (shipmentDetail) IN baseGroup;
//oldPriceShipmentDetail(shipmentDetail) <- priceSupplierItemDepartmentVal (supplierShipmentDetail(shipmentDetail),
//    itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail),
//    subtractDate2(dateShipmentDetail(shipmentDetail),1)) ON CHANGE itemShipmentDetail(shipmentDetail);

curImporterPriceShipmentDetail 'Текущая цена изготовителя/импортера' (shipmentDetail) = DATA DOUBLE (shipmentDetail) IN pricingShipmentDetailInfo;
curSupplierPriceShipmentDetail 'Текущая цена поставщика' (shipmentDetail) = DATA DOUBLE (shipmentDetail) IN pricingShipmentDetailInfo;

curPriceWareShipmentDetail 'Текущая цена посуды' (shipmentDetail) = DATA DOUBLE (shipmentDetail) IN pricingShipmentDetailInfo;
curWareShipmentDetail = DATA ware (shipmentDetail) IN idGroup;
curNameWareShipmentDetail 'Текущая посуда' (shipmentDetail) = name(curWareShipmentDetail(shipmentDetail)) IN pricingShipmentDetailInfo MINCHARWIDTH 20 PREFCHARWIDTH 20;


//контроль ассортимента поставки по заказам с учетом ограничений по поставщику
sumQuantityOrderedItemShipment 'Количество по товару в заказах поставки' (item, shipment) = GROUP SUM
    sumQuantityItemOrderSupplier (orderSupplier, item)
    IF inShipmentOrder (shipment, orderSupplier) BY item, shipment;

isOrderedItemShipment 'Товар есть в заказах поставки' (item, shipment) =  sumQuantityOrderedItemShipment(item, shipment) > 0;

isShippedOrOrderedItemShipment 'Товар или заказан или поставлен' (item, shipment) =
    sumQuantityOrderedItemShipment(item, shipment) OR quantityItemShipment(item, shipment);

isNotShipedOrderedItemShipment 'Товар есть в заказе и отсутствует в поставке' (item, shipment) =
    isOrderedItemShipment (item, shipment) AND NOT isShippedItemShipment (item, shipment);

isOrderedShipmentDetail 'Товар поставки есть в заказах поставки' (shipmentDetail) = isOrderedItemShipment(itemShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail));

quantityOrderedShipmentDetailsShipment 'Количество позиций, для которых есть заказ' (shipment) = GROUP SUM 1 IF isOrderedShipmentDetail(shipmentDetail) AND shipmentShipmentDetail(shipmentDetail)==shipment BY shipment;
percentOrderedShipmentDetailsShipment 'Процент позиций поставки, для которых есть заказ' (shipment) =
    [X*100/Y](
    quantityOrderedShipmentDetailsShipment(shipment),
    UNION OVERRIDE 1 IF shipment IS shipment, quantityShipmentDetailsShipment(shipment)) IN shipmentOrderGroup;

surePercentSupplierShipment 'Обязательный % заказанных товаров в прих. накладной' (shipment) = DATA INTEGER (shipment);
surePercentSupplierShipment (shipment) <- surePercentSupplier(supplierShipment (shipment)) ON CHANGE supplierShipment(shipment);
controlSupplierDepartmentStoreShipment 'Контролировать ассортимент поставщика' (shipment) = DATA yesNo(shipment);
controlSupplierDepartmentStoreShipment(shipment) <- controlSupplierDepartmentStore (supplierShipment(shipment), departmentStoreShipment(shipment)) ON CHANGE supplierShipment(shipment); //неполный случай, нужно доделывать

CONSTRAINT controlSupplierDepartmentStoreShipment (shipment) AND percentOrderedShipmentDetailsShipment(shipment)<surePercentSupplierShipment (shipment)
            MESSAGE 'Процент заказанных позиций для поставки меньше допустимого для данного поставщика';

isAvailableOrderShipment 'Заявка допустимая для заказа' (shipment, orderSupplier) = dateShipment (shipment) <= addDate2(dateOrderSupplier (orderSupplier), UNION OVERRIDE 0 IF shipment IS shipment, afterDaysSupplier (supplierShipment(shipment)));

toFillShipmentDetailsShipment 'Заполнить поставку из заказов' =  ACTION (shipment) {
    FOR isNotShipedOrderedItemShipment (item, shipment) DO {
        ADDOBJ shipmentDetail;
        FOR s == addedObject() DO {
            SET itemShipmentDetail(s) <- item AS item;
            SET quantityShipmentDetail(s) <- sumQuantityOrderedItemShipment(item, shipment);
            SET supplierPriceShipmentDetail(s) <- priceOrderItemShipment(item, shipment);
        };
    };
} IN shipmentOrderGroup CONFIRM;

percentRateWasteShipmentDetail 'Процент для списания отходов' (shipmentDetail) = DATA DOUBLE (shipmentDetail);

percentRateWasteShipmentDetail (shipmentDetail) <- percentRateWasteItem(itemShipmentDetail(shipmentDetail))
    ON CHANGE itemShipmentDetail(shipmentDetail);

castShipmentObjectsToString100=
    FORMULA STRING[200] '\'Приход \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)';

descriptionShipment 'Название документа' (shipment) = castShipmentObjectsToString100(
    seriesNumberObject(shipment), dateShipment(shipment), nameSupplierShipment(shipment));

descriptionShipmentDetail 'Название документа' (shipmentDetail) = descriptionShipment(shipmentShipmentDetail(shipmentDetail));


// ---------------------------------- Дооценка на приходе ------------------------------------------

CLASS priceChangeShipment 'Переоценка на приходе' : priceChangeDocument;
CLASS priceChangeShipmentDetail 'Строка переоценки на приходе' : priceChangeDocumentDetail;

needToPriceChangeShipmentDetail (shipmentDetail) = curRetailPriceShipmentDetail(shipmentDetail) != retailPriceShipmentDetail(shipmentDetail) AND
                                                   balanceBeforeShipmentShipmentDetail(shipmentDetail) != 0;

needToPriceChangeShipment (shipment) = GROUP SUM 1 IF needToPriceChangeShipmentDetail(shipmentDetail) BY shipmentShipmentDetail(shipmentDetail);

@metaCodeDetailAggregation(shipment, priceChangeShipment, needToPriceChangeShipment);

// атрибуты документа переоценки

dateTimePriceChangeShipment 'Дата/время' (priceChangeShipment) = dateTimeShipment(shipmentPriceChangeShipment(priceChangeShipment));
datePriceChangeShipment 'Дата' (priceChangeShipment) = dateShipment(shipmentPriceChangeShipment(priceChangeShipment));
isPostedPriceChangeShipment 'Закрыт' (priceChangeShipment) = isPostedShipment(shipmentPriceChangeShipment(priceChangeShipment));
numberPriceChangeShipment 'Номер накладной' (priceChangeShipment) = numberObject(shipmentPriceChangeShipment(priceChangeShipment));
seriesPriceChangeShipment 'Серия накладной' (priceChangeShipment) = seriesObject(shipmentPriceChangeShipment(priceChangeShipment));
descriptionPriceChangeShipment 'Название документа' (priceChangeShipment) = descriptionShipment(shipmentPriceChangeShipment(priceChangeShipment));

supplierPriceChangeShipment (priceChangeShipment) = supplierShipment(shipmentPriceChangeShipment(priceChangeShipment));
nameSupplierPriceChangeShipment 'Поставщик' (priceChangeShipment) = name(supplierPriceChangeShipment(priceChangeShipment));

departmentStorePriceChangeShipment (priceChangeShipment) = departmentStoreShipment(shipmentPriceChangeShipment(priceChangeShipment));
nameDepartmentStorePriceChangeShipment 'Отдел магазина' (priceChangeShipment) = name(departmentStorePriceChangeShipment(priceChangeShipment));

numberDisposalPriceChangeShipment '№ распоряжения на переоценку' (priceChangeShipment) = numberDisposalShipment(shipmentPriceChangeShipment(priceChangeShipment));

// атрибуты детализации документа переоценки

itemPriceChangeShipmentDetail (priceChangeShipmentDetail) = itemShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));
nameItemPriceChangeShipmentDetail 'Товар' (priceChangeShipmentDetail) = nameAttributeItem(itemPriceChangeShipmentDetail(priceChangeShipmentDetail));

quantityPriceChangeShipmentDetail 'Остаток' (priceChangeShipmentDetail) = balanceBeforeShipmentShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));

curImporterPriceChangeShipmentDetail 'Текущая цена изготовителя' (priceChangeShipmentDetail) = curImporterPriceShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));
importerPriceChangeShipmentDetail 'Новая цена изготовителя' (priceChangeShipmentDetail) = importerPriceShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));

curSupplierPriceChangeShipmentDetail 'Текущая цена поставщика' (priceChangeShipmentDetail) = curSupplierPriceShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));
supplierPriceChangeShipmentDetail 'Новая цена поставщика' (priceChangeShipmentDetail) = supplierPriceShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));

curDataRetailRangePriceChangeShipmentDetail 'Текущий НДС, %' (priceChangeShipmentDetail) = curDataRetailRangeShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));
dataRetailRangePriceChangeShipmentDetail 'Новый НДС, %' (priceChangeShipmentDetail) = dataRetailRangeShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));

curRetailPriceChangeShipmentDetail 'Текущая розничная цена' (priceChangeShipmentDetail) = curRetailPriceShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));
retailPriceChangeShipmentDetail 'Новая розничная цена' (priceChangeShipmentDetail) = retailPriceShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));

warePriceChangeShipmentDetail 'Новая посуда' (priceChangeShipmentDetail) = wareShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail)) IN baseGroup MINCHARWIDTH 10 PREFCHARWIDTH 15;
priceWarePriceChangeShipmentDetail 'Новая цена посуды' (priceChangeShipmentDetail) = priceWareShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));

curWarePriceChangeShipmentDetail 'Текущая посуда' (priceChangeShipmentDetail) = curWareShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail)) IN baseGroup MINCHARWIDTH 10 PREFCHARWIDTH 15;
curPriceWarePriceChangeShipmentDetail 'Текущая цена посуды' (priceChangeShipmentDetail) = curPriceWareShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));


FORM ordersShipment 'Заказы'
    OBJECTS s=shipment FIXED PANEL
    PROPERTIES (s) READONLY seriesNumberObject, dateShipment

    OBJECTS o=orderSupplier

    PROPERTIES (s, o) inShipmentOrder
    PROPERTIES (o) READONLY dataOrderSupplier, curDateOrderSupplier, dateOrderSupplier, nameDepartmentStoreOrderSupplier,
          nameSupplierOrderSupplier, completePercentageOrderSupplier, totalSumOrderSupplier, timeCreated, nameUserCreated

    FILTERS isSupplierShipmentOrder (s, o),
            isDepartmentStoreShipmentOrder (s, o),
            isAvailableOrderShipment (s, o),
            isPostedOrderSupplier(o)
;

showFormOrdersShipment 'Заказы' (shipment) = ACTION FORM ordersShipment OBJECTS s MODAL SHORTCUT ordersShipment DEFAULT;

//----------------------------------------------- Списание товара ---------------------------------------------------//
CLASS writeOff 'Списание' : outAccountSumDocumentLedger, historyObject, numeratedObject;
CLASS writeOffDetail 'Строка списания' : outAutoBalanceItemLedger;
@metaCodeObjectWithPostEx (writeOff, 'Закрытое списание');

CLASS reasonOff 'Причина списания' : named;

reasonOffWriteOff 'Причина списания (ИД)' = DATA reasonOff (writeOff) IN idGroup;
nameReasonOffWriteOff 'Причина списания' (writeOff) = name(reasonOffWriteOff (writeOff)) IN documentPrmGroup;

quantityWriteOffDetail 'Кол-во для строки списания' = DATA INTEGER (writeOffDetail) IN baseGroup;

quantityWriteOff 'Общее кол-во' (writeOff) = GROUP SUM quantityWriteOffDetail(writeOffDetail)
                                                    BY writeOffWriteOffDetail(writeOffDetail) IN documentSumGroup;

supplierPriceWriteOffDetail 'Цена поставщика' (writeOffDetail) = DATA DOUBLE (writeOffDetail) IN baseGroup;
wareWriteOffDetail = DATA ware (writeOffDetail) IN idGroup;
nameWareWriteOffDetail 'Посуда' (writeOffDetail) = name(wareWriteOffDetail(writeOffDetail)) IN baseGroup;
priceWareWriteOffDetail 'Цена посуды' (writeOffDetail) = DATA DOUBLE (writeOffDetail) IN baseGroup;

wareWriteOffDetail(writeOffDetail) <- wareItem(itemWriteOffDetail(writeOffDetail)) ON CHANGE itemWriteOffDetail(writeOffDetail);

dataWareRangeWriteOffDetail 'НДС по посуде' (writeOffDetail) =
    dataActingRateRangeDate(rangeWareVal(wareWriteOffDetail(writeOffDetail), dateWriteOffDetail(writeOffDetail)),
    dateWriteOffDetail(writeOffDetail));

retailRangeWriteOffDetail(writeOffDetail) = DATA range (writeOffDetail) IN idGroup;
numberRetailRangeWriteOffDetail 'НДС номер' (writeOffDetail) = dataRange(retailRangeWriteOffDetail(writeOffDetail));
dataRetailRangeWriteOffDetail 'НДС розничный,%' (writeOffDetail) = dataActingRateRangeDate(retailRangeWriteOffDetail(writeOffDetail), dateWriteOffDetail(writeOffDetail)) IN baseGroup;

CONSTRAINT taxRange(retailRangeWriteOffDetail(writeOffDetail))!=tax.taxNDS CHECKED BY retailRangeWriteOffDetail
    MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';


accountPriceWriteOffDetail 'Цена учётная' = DATA DOUBLE (writeOffDetail) IN baseGroup;
retailPriceWriteOffDetail 'Розничная цена' (writeOffDetail) = DATA DOUBLE (writeOffDetail) IN baseGroup;

suppliersRangeWriteOffDetail(writeOffDetail) = DATA range (writeOffDetail) IN idGroup;
suppliersRangeWriteOffDetail(writeOffDetail) <- suppliersRangeItemVal(itemWriteOffDetail(writeOffDetail), dateWriteOffDetail(writeOffDetail)) ON CHANGE itemWriteOffDetail(writeOffDetail);
dataSuppliersRangeWriteOffDetail 'НДС поставщика,%' (writeOffDetail) = dataActingRateRangeDate
    (suppliersRangeWriteOffDetail(writeOffDetail), dateWriteOffDetail(writeOffDetail));
// сами по себе не нужны, только чтобы сработал метакод....

@metaCodeTotals (writeOff);

accountSumWriteOffDetail 'Сумма' (writeOffDetail) = accountPriceWriteOffDetail(writeOffDetail)*quantityWriteOffDetail(writeOffDetail);
accountSumWriteOff 'Общая сумма' (writeOff) = GROUP SUM accountSumWriteOffDetail(writeOffDetail) BY writeOffWriteOffDetail(writeOffDetail) IN documentSumGroup;

articleItemWriteOff 'Артикул производителя/поставщика' (writeOffDetail) = articleItem(itemWriteOffDetail(writeOffDetail));
nameCountryItemWriteOff 'Страна' (writeOffDetail) = nameCountryItem(itemWriteOffDetail(writeOffDetail));

minReserveItemDepartmentWriteOff 'Минимальнодопустимый товарный запас в днях' (writeOffDetail) =
    minReserveItemDepartmentOver(itemWriteOffDetail(writeOffDetail), departmentStoreWriteOffDetail(writeOffDetail),
                                 dateWriteOffDetail(writeOffDetail));
maxReserveItemDepartmentWriteOff 'Максимальнодопустимы товарный запас в днях' (writeOffDetail) =
    maxReserveItemDepartmentOver(itemWriteOffDetail(writeOffDetail), departmentStoreWriteOffDetail(writeOffDetail),
                                 dateWriteOffDetail(writeOffDetail));
CONSTRAINT quantityWriteOffDetail(writeOffDetail) <= 0 MESSAGE 'Количество должно быть положительным';
CONSTRAINT accountPriceWriteOffDetail(writeOffDetail) <= 0 MESSAGE 'Цена должна быть положительной';

dateLastShipment 'Дата последней поставки' (writeOffDetail) = GROUP MAX dateShipmentDetail(shipmentDetail)
    IF (dateShipmentDetail(shipmentDetail) < dateWriteOffDetail(writeOffDetail)
    AND itemWriteOffDetail(writeOffDetail) == itemShipmentDetail(shipmentDetail))
    BY writeOffDetail;

FORM reasonOff 'Причина списания'
    OBJECTS r=reasonOff  FIXED PANEL
    PROPERTIES(r) name
;

castWriteOffObjectsToString100=
    FORMULA STRING[200] '\'Списание \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)';

descriptionWriteOff 'Название документа' (writeOff) = castWriteOffObjectsToString100(
    seriesNumberObject(writeOff), dateWriteOff(writeOff));

descriptionWriteOffDetail 'Название документа' (writeOffDetail) = descriptionWriteOff(writeOffWriteOffDetail(writeOffDetail));

//----------------------------------- Внутреннее перемещение (расход) -------------------------------------------------//
CLASS innerFlow 'Расход в отдел' : outAccountSumDocumentLedger, historyObject, numberedObject, consignment;
CLASS innerFlowDetail 'Строка расхода в отдел' : outAutoBalanceItemLedger, consignmentDetail;
@metaCodeObjectWithPostEx (innerFlow, 'Закрытый расход в отдел');

recipientDepartmentInnerFlow 'Отдел-получатель (ИД)' (innerFlow) = DATA departmentStore(innerFlow);
nameRecipientDepartmentInnerFlow 'Отдел-получатель' (innerFlow) = name(recipientDepartmentInnerFlow(innerFlow)) IN documentPrmGroup;

quantityInnerFlowDetail 'Количество' (innerFlowDetail) = DATA DOUBLE (innerFlowDetail) IN baseGroup;

retailPriceInnerFlowDetail 'Розничная цена' (innerFlowDetail) = DATA DOUBLE (innerFlowDetail) IN baseGroup;

priceItemInnerFlow 'Цена (максим.)' (item, innerFlow) = GROUP MAX retailPriceInnerFlowDetail (innerFlowDetail)
    IF innerFlowInnerFlowDetail(innerFlowDetail) == innerFlow
    BY itemInnerFlowDetail(innerFlowDetail), innerFlowInnerFlowDetail(innerFlowDetail);

accountSumInnerFlowDetail 'Сумма' (innerFlowDetail) = quantityInnerFlowDetail(innerFlowDetail) * retailPriceInnerFlowDetail (innerFlowDetail) IN baseGroup;

importerPriceInnerFlowDetail 'Цена изготовителя' (innerFlowDetail) = DATA DOUBLE (innerFlowDetail) IN baseGroup;
supplierPriceInnerFlowDetail 'Цена поставщика' (innerFlowDetail) = DATA DOUBLE (innerFlowDetail) IN baseGroup;

importerPriceItemInnerFlow 'Цена изготовителя (максим.)' (item, innerFlow) = GROUP MAX importerPriceInnerFlowDetail (innerFlowDetail)
    IF innerFlowInnerFlowDetail(innerFlowDetail) == innerFlow BY itemInnerFlowDetail(innerFlowDetail), innerFlowInnerFlowDetail(innerFlowDetail);

retailRangeInnerFlowDetail(innerFlowDetail) = DATA range (innerFlowDetail) IN idGroup;
numberRetailRangeInnerFlowDetail 'НДС номер' (innerFlowDetail) = dataRange(retailRangeInnerFlowDetail(innerFlowDetail));
dataRetailRangeInnerFlowDetail 'НДС розничный,%' (innerFlowDetail) = dataActingRateRangeDate(retailRangeInnerFlowDetail(innerFlowDetail), dateInnerFlowDetail(innerFlowDetail)) IN baseGroup;

CONSTRAINT taxRange(retailRangeInnerFlowDetail(innerFlowDetail))!=tax.taxNDS CHECKED BY retailRangeInnerFlowDetail
    MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

quantityItemInnerFlow 'Количество в расходе' (item, innerFlow) = GROUP SUM quantityInnerFlowDetail(innerFlowDetail)
    IF inInnerFlowInnerFlowDetail (innerFlow, innerFlowDetail) BY itemInnerFlowDetail (innerFlowDetail), innerFlowInnerFlowDetail (innerFlowDetail);

totalQuantityInnerFlow 'Общее количество' (innerFlow) = GROUP SUM quantityInnerFlowDetail(innerFlowDetail)
    BY innerFlowInnerFlowDetail(innerFlowDetail) IN documentSumGroup;

accountSumInnerFlow 'Общая сумма' (innerFlow) = GROUP SUM accountSumInnerFlowDetail (innerFlowDetail)
    IF innerFlowInnerFlowDetail (innerFlowDetail) == innerFlow BY innerFlowInnerFlowDetail(innerFlowDetail) IN documentSumGroup;

castInnerFlowObjectsToString100=
    FORMULA STRING[200] '\'Расход в отдел \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)';

descriptionInnerFlow 'Название документа' (innerFlow) = castInnerFlowObjectsToString100(
    seriesNumberObject(innerFlow), dateInnerFlow(innerFlow), nameRecipientDepartmentInnerFlow(innerFlow));

descriptionInnerFlowDetail 'Название документа' (innerFlowDetail) = descriptionInnerFlow(innerFlowInnerFlowDetail(innerFlowDetail));

wareInnerFlowDetail 'Посуда (ИД)' (innerFlowDetail) = DATA ware(innerFlowDetail) IN baseGroup;
nameWareInnerFlowDetail 'Посуда' (innerFlowDetail) = name(wareInnerFlowDetail(innerFlowDetail));
//wareInnerFlowDetail(innerFlowDetail) <- wareItem(itemInnerFlowDetail(innerFlowDetail)) ON CHANGE itemInnerFlowDetail(innerFlowDetail);
priceWareInnerFlowDetail 'Цена посуды' (innerFlowDetail) = DATA DOUBLE (innerFlowDetail) IN baseGroup;


withoutWarePriceInnerFlowDetail 'Цена без посуды' (innerFlowDetail) = retailPriceInnerFlowDetail(innerFlowDetail) (-)
    priceWareInnerFlowDetail(innerFlowDetail);

sumRetailVATUnitInnerFlowDetail 'Сумма НДС за ед.' (innerFlowDetail) = [X*Y/(100+Y)](
    withoutWarePriceInnerFlowDetail(innerFlowDetail), dataRetailRangeInnerFlowDetail(innerFlowDetail));

sumRetailVATInnerFlowDetail 'Сумма розничного НДС' (innerFlowDetail) = sumRetailVATUnitInnerFlowDetail(innerFlowDetail)*quantityInnerFlowDetail(innerFlowDetail);

totalSumRetailVATInnerFlow 'Сумма розничного НДС' (innerFlow) = GROUP SUM sumRetailVATInnerFlowDetail(innerFlowDetail)
    BY innerFlowInnerFlowDetail(innerFlowDetail);

supplierMarkupInnerFlowDetail 'Оптовая надбавка' (innerFlowDetail) =
    (supplierPriceInnerFlowDetail(innerFlowDetail)/importerPriceInnerFlowDetail(innerFlowDetail) - 1)*100;

retailMarkupInnerFlowDetail 'Торговая надбавка' (innerFlowDetail) =
    ((withoutWarePriceInnerFlowDetail(innerFlowDetail) (-) sumRetailVATUnitInnerFlowDetail(innerFlowDetail))/
    importerPriceInnerFlowDetail(innerFlowDetail) - 1)*100;

// для накладной (шапка и хвост)
carInnerFlow 'Автомобиль' (innerFlow) = DATA STRING[30] (innerFlow);
ownerCarInnerFlow 'Владелец автомобиля' (innerFlow) = DATA STRING[100] (innerFlow);
trailerInnerFlow 'Прицеп' (innerFlow) = DATA STRING[10] (innerFlow);
driverCarInnerFlow 'Водитель' (innerFlow) = DATA STRING[40] (innerFlow);
waybillInnerFlow 'Путевой лист' (innerFlow) = DATA STRING[20] (innerFlow);

transportPayerInnerFlow 'Заказчик перевозки (ИД)' (innerFlow) = DATA legalEntity (innerFlow);

shipmentBaseInnerFlow 'Основание отпуска' (innerFlow) = DATA STRING[30] (innerFlow);

dataLoadingPlaceInnerFlow 'Пункт погрузки' (innerFlow) = DATA STRING[50] (innerFlow);
loadingPlaceInnerFlow 'Пункт погрузки' (innerFlow) = UNION OVERRIDE addressStore(storeDepartmentStore(departmentStoreInnerFlow(innerFlow))),
                                                       dataLoadingPlaceInnerFlow (innerFlow);

dataUnloadingPlaceInnerFlow 'Пункт разгрузки' (innerFlow) = DATA STRING[50] (innerFlow);
unloadingPlaceInnerFlow 'Пункт разгрузки' (innerFlow) = UNION OVERRIDE addressLegalEntity(recipientDepartmentInnerFlow(innerFlow)),
                                                       dataUnloadingPlaceInnerFlow (innerFlow);

readdressingInnerFlow 'Переадресовка' (innerFlow) = DATA STRING[50] (innerFlow);

issuanceAllowedInnerFlow 'Отпуск разрешил' (innerFlow) = DATA employee(innerFlow);
issuanceExecutedInnerFlow 'Отпуск произвел' (innerFlow) = DATA employee(innerFlow);

forwarderInnerFlow 'Товар к перевозке принял (экспедитор)' (innerFlow) = DATA STRING[40] (innerFlow);

warrantInnerFlow 'По доверенности' (innerFlow) = DATA STRING[30](innerFlow);
warrantHolderInnerFlow 'Доверенность выдана на' (innerFlow) = DATA STRING[100](innerFlow);

goodsAcceptedInnerFlow 'Принял грузополучатель' (innerFlow) = DATA STRING[40] (innerFlow);

loadingExecuterInnerFlow 'Исполнитель ПРР' (innerFlow) = DATA employee(innerFlow);

wayOfLoadingInnerFlow 'Способ ПРР' (innerFlow) = DATA wayOfLoading(innerFlow);
codeLoadingInnerFlow 'Код ПРР' (innerFlow) = DATA STRING[3] (innerFlow);

arrivalTimeInnerFlow 'Время прибытия' (innerFlow) = DATA DATETIME(innerFlow);
departureTimeInnerFlow 'Время убытия' (innerFlow) = DATA DATETIME(innerFlow);
downtimeInnerFlow 'Время простоя' (innerFlow) = DATA STRING[10] (innerFlow);

raceQuantityInnerFlow 'Количество ездок' (innerFlow) = DATA INTEGER (innerFlow);

packQuantityInnerFlowDetail 'Количество грузовых мест' (innerFlowDetail) = quantityInnerFlowDetail(innerFlowDetail)/
    UNION OVERRIDE 1 IF innerFlowDetail IS innerFlowDetail, quantityPackItem(itemInnerFlowDetail(innerFlowDetail));

sumPackQuantityInnerFlow 'Общее количество грузовых мест' (innerFlow) = GROUP SUM packQuantityInnerFlowDetail(innerFlowDetail)
    BY innerFlowInnerFlowDetail(innerFlowDetail);

grossWeightInnerFlowDetail 'Масса груза, т.' (innerFlowDetail) =
    grossWeightItem(itemInnerFlowDetail(innerFlowDetail))*quantityInnerFlowDetail(innerFlowDetail)/1000;

sumGrossWeightInnerFlow 'Общая масса груза, т.' (innerFlow) = GROUP SUM grossWeightInnerFlowDetail(innerFlowDetail)
    BY innerFlowInnerFlowDetail(innerFlowDetail);

castNoteInnerFlowDetailToString100=
    FORMULA STRING[200] '\'РОЦ: \' || CAST($1 AS TEXT) ||  \'; Оптовая надбавка: \' || CAST($2 AS TEXT)||  \'; Торговая наценка: \' || CAST($3 AS TEXT)';

noteInnerFlowDetail 'Примечание' (innerFlowDetail) = castNoteInnerFlowDetailToString100(
    importerPriceInnerFlowDetail(innerFlowDetail), supplierMarkupInnerFlowDetail(innerFlowDetail), retailMarkupInnerFlowDetail(innerFlowDetail));

//----------------------------------- Внутреннее перемещение (приход) -------------------------------------------------//
GROUP pricingInnerArrivalDetailInfo 'Дополнительные ценовый параметры' : publicGroup;
GROUP consumptionGroup 'Расход': baseGroup;


CLASS innerArrival 'Приход в отдел' : incAccountSumDocumentLedger, historyObject, priceTransactionDocument;
CLASS innerArrivalDetail 'Строка прихода в отдел' : balanceItemLedger, importerPriceLedger, supplierPriceLedger, accountPriceLedger, retailPriceLedger, retailVATLedger, warePriceLedger;
@metaCodeObjectWithPostEx (innerArrival, 'Закрытый приход в отдел');

innerFlowInnerArrival 'Накладная отгрузки с отдела-отправителя (ИД)' (innerArrival) = DATA innerFlowPosted (innerArrival);

innerArrivalInnerFlow 'Приход отдел по расходу' (innerFlow) = GROUP UNIQUE innerArrival BY innerFlowInnerArrival (innerArrival);

isArrivedInnerFlow (innerFlow) = innerFlow IS innerFlow AND innerArrivalInnerFlow (innerFlow);

innerFlowInnerArrivalDetail (innerArrivalDetail) = innerFlowInnerArrival(innerArrivalInnerArrivalDetail(innerArrivalDetail));

numberArrival 'Номер накладной' (innerArrival) = numberObject(innerFlowInnerArrival(innerArrival)) IN documentHeaderGroup;
seriesArrival 'Серия накладной' (innerArrival) = seriesObject(innerFlowInnerArrival(innerArrival)) IN documentHeaderGroup;
seriesNumberArrival 'Серия/Номер' (innerArrival) = seriesNumberObject(innerFlowInnerArrival(innerArrival));

senderDepartmentInnerArrival 'Отдел-отправитель (ИД)' (innerArrival) = DATA departmentStore(innerArrival);
nameSenderDepartmentInnerArrival 'Отдел-отправитель' (innerArrival) = name(senderDepartmentInnerArrival(innerArrival)) IN documentPrmGroup;

dateInnerArrival (innerArrival) <- dateInnerFlow(innerFlowInnerArrival(innerArrival)) ON CHANGE innerFlowInnerArrival(innerArrival);

CONSTRAINT recipientDepartmentInnerFlow(innerFlowInnerArrival(innerArrival)) != departmentStoreInnerArrival(innerArrival) CHECKED BY innerFlowInnerArrival
    MESSAGE 'Накладная с другого отдела';

CONSTRAINT innerFlowInnerArrival(p1) == innerFlowInnerArrival(p2) AND p1 != p2 CHECKED BY innerFlowInnerArrival MESSAGE 'Накладная задействована в другом приходе';

senderDepartmentInnerArrival (innerArrival) <- departmentStoreInnerFlow(innerFlowInnerArrival(innerArrival))
    ON CHANGE innerFlowInnerArrival(innerArrival);

quantityInnerArrivalDetail 'Количество' (innerArrivalDetail) = DATA DOUBLE (innerArrivalDetail) IN baseGroup;
retailPriceInnerArrivalDetail 'Цена розничная' (innerArrivalDetail) = DATA DOUBLE (innerArrivalDetail) IN baseGroup;

priceItemInnerArrival 'Цена (максим.)' (item, innerArrival) = priceItemInnerFlow (
    item, innerFlowInnerArrival(innerArrival));
               // todo: derived зацикливает, придумать что-то другое
//retailPriceInnerArrivalDetail (innerArrivalDetail) <- priceItemInnerArrival(
//    itemInnerArrivalDetail(innerArrivalDetail), innerArrivalInnerArrivalDetail(innerArrivalDetail))
//    ON CHANGE itemInnerArrivalDetail (innerArrivalDetail);

numberDisposalInnerArrival '№ распоряжения на переоценку' (innerArrival) = DATA STRING[30] (innerArrival) IN documentPrmGroup;

curRetailPriceInnerArrivalDetail 'Текущая розничная цена' (innerArrivalDetail) = DATA DOUBLE (innerArrivalDetail) IN pricingInnerArrivalDetailInfo;

accountSumInnerArrivalDetail 'Сумма' (innerArrivalDetail) =
    quantityInnerArrivalDetail(innerArrivalDetail) * retailPriceInnerArrivalDetail (innerArrivalDetail) IN baseGroup;

importerPriceInnerArrivalDetail 'Цена изготовителя' (innerArrivalDetail) = DATA DOUBLE (innerArrivalDetail);
supplierPriceInnerArrivalDetail 'Цена поставщика' (innerArrivalDetail) = DATA DOUBLE (innerArrivalDetail);

curImporterPriceInnerArrivalDetail 'Текущая цена изготовителя' (innerArrivalDetail) = DATA DOUBLE (innerArrivalDetail) IN pricingInnerArrivalDetailInfo;
curSupplierPriceInnerArrivalDetail 'Текущая цена поставщика' (innerArrivalDetail) = DATA DOUBLE (innerArrivalDetail) IN pricingInnerArrivalDetailInfo;

importerPriceItemInnerArrival 'Цена изготовителя (максим.)' (item, innerArrival) = importerPriceItemInnerFlow(
    item, innerFlowInnerArrival(innerArrival));

//importerPriceInnerArrivalDetail (innerArrivalDetail) <- importerPriceItemInnerArrival(
//    itemInnerArrivalDetail(innerArrivalDetail), innerArrivalInnerArrivalDetail(innerArrivalDetail))
//    ON CHANGE itemInnerArrivalDetail (innerArrivalDetail);

retailRangeInnerArrivalDetail(innerArrivalDetail) = DATA range (innerArrivalDetail) IN idGroup;
numberRetailRangeInnerArrivalDetail 'НДС номер' (innerArrivalDetail) = dataRange(retailRangeInnerArrivalDetail(innerArrivalDetail));
dataRetailRangeInnerArrivalDetail 'НДС розничный,%' (innerArrivalDetail) = dataActingRateRangeDate(retailRangeInnerArrivalDetail(innerArrivalDetail), dateInnerArrivalDetail(innerArrivalDetail)) IN baseGroup;

curRetailRangeInnerArrivalDetail (innerArrivalDetail) = DATA range (innerArrivalDetail) IN idGroup;

curDataRetailRangeInnerArrivalDetail 'Текущий НДС, %' (innerArrivalDetail) =
    dataActingRateRangeDate (curRetailRangeInnerArrivalDetail (innerArrivalDetail),
                            dateInnerArrival(innerArrivalInnerArrivalDetail(innerArrivalDetail))) IN pricingInnerArrivalDetailInfo;

wareInnerArrivalDetail 'Посуда (ИД)' (innerArrivalDetail) = DATA ware(innerArrivalDetail) IN baseGroup;
nameWareInnerArrivalDetail 'Посуда' (innerArrivalDetail) = name(wareInnerArrivalDetail(innerArrivalDetail));
priceWareInnerArrivalDetail 'Цена посуды' (innerArrivalDetail) = DATA DOUBLE (innerArrivalDetail) IN baseGroup;
//wareInnerArrivalDetail(innerArrivalDetail) <- wareItem(itemInnerArrivalDetail(innerArrivalDetail)) ON CHANGE itemInnerArrivalDetail(innerArrivalDetail);

curWareInnerArrivalDetail(innerArrivalDetail) = DATA ware (innerArrivalDetail) IN idGroup;
curNameWareInnerArrivalDetail 'Текущая посуда' (innerArrivalDetail) = name(curWareInnerArrivalDetail(innerArrivalDetail)) IN pricingInnerArrivalDetailInfo MINCHARWIDTH 20 PREFCHARWIDTH 20;
curPriceWareInnerArrivalDetail 'Текущая цена посуды' (innerArrivalDetail) = DATA DOUBLE (innerArrivalDetail) IN pricingInnerArrivalDetailInfo;

//wareRangeInnerArrivalDetail 'Шкала НДС по посуде' (innerArrivalDetail) = DATA range (innerArrivalDetail);


toFillInnerArrivalDetailsInnerArrival 'Заполнить документ из расхода' =  ACTION (innerArrival) {
    FOR innerArrivalInnerFlow(innerFlowInnerFlowDetail(innerFlowDetail)) == innerArrival DO {
        ADDOBJ innerArrivalDetail;
        FOR d == addedObject() DO {
            SET innerArrivalInnerArrivalDetail(d) <- innerArrival AS innerArrival;
            SET quantityInnerArrivalDetail (d) <- quantityInnerFlowDetail(innerFlowDetail);
            SET itemInnerArrivalDetail (d) <- itemInnerFlowDetail(innerFlowDetail);
 //           SET quantityInnerArrivalDetail (d) <- quantityInnerFlowDetail(innerFlowDetail);
            SET retailPriceInnerArrivalDetail (d) <- retailPriceInnerFlowDetail(innerFlowDetail);
            SET importerPriceInnerArrivalDetail (d) <- importerPriceInnerFlowDetail(innerFlowDetail);
            SET supplierPriceInnerArrivalDetail (d) <- supplierPriceInnerFlowDetail(innerFlowDetail);
            SET wareInnerArrivalDetail(d) <- wareInnerFlowDetail(innerFlowDetail);
            SET priceWareInnerArrivalDetail (d) <- priceWareInnerFlowDetail(innerFlowDetail);
//            SET wareRangeInnerArrivalDetail (d) <- wareRangeInnerFlowDetail(innerFlowDetail);
            SET retailRangeInnerArrivalDetail (d) <- retailRangeInnerFlowDetail(innerFlowDetail);
        };
    };
} IN consumptionGroup CONFIRM;

quantityItemInnerArrival 'Количество в приходе' (item, innerArrival) = GROUP SUM quantityInnerArrivalDetail(innerArrivalDetail)
    IF inInnerArrivalInnerArrivalDetail (innerArrival, innerArrivalDetail) BY itemInnerArrivalDetail (innerArrivalDetail),
    innerArrivalInnerArrivalDetail (innerArrivalDetail);

quantityItemInnerFlowInnerArrival 'Количество в расходе' (item, innerArrival) = quantityItemInnerFlow(item, innerFlowInnerArrival(innerArrival));
diffQuantityItemInnerArrival 'Расхождение' (item, innerArrival) =
    quantityItemInnerFlowInnerArrival(item, innerArrival) (-) quantityItemInnerArrival(item, innerArrival);

balanceBeforeInnerArrivalInnerArrivalDetail 'Остаток до' (innerArrivalDetail) = DATA DOUBLE (innerArrivalDetail);

inInnerArrivalItem (item, innerArrival) = quantityItemInnerArrival(item, innerArrival) > 0;

totalQuantityInnerArrival 'Общее количество' (innerArrival) = GROUP SUM quantityInnerArrivalDetail(innerArrivalDetail)
    BY innerArrivalInnerArrivalDetail(innerArrivalDetail) IN documentSumGroup;

accountSumInnerArrival 'Общая сумма' (innerArrival) = GROUP SUM accountSumInnerArrivalDetail (innerArrivalDetail)
    BY innerArrivalInnerArrivalDetail(innerArrivalDetail) IN documentSumGroup;


// ---------------------------------- Дооценка на внутреннем перемещении (приход) ------------------------------------------

CLASS priceChangeInnerArrival 'Переоценка на внутреннем перемещении' : priceChangeDocument;
CLASS priceChangeInnerArrivalDetail 'Строка переоценки на внутреннем перемещении' : priceChangeDocumentDetail;

needToPriceChangeInnerArrivalDetail (innerArrivalDetail) = curRetailPriceInnerArrivalDetail(innerArrivalDetail) != retailPriceInnerArrivalDetail(innerArrivalDetail) AND
                                                   balanceBeforeInnerArrivalInnerArrivalDetail(innerArrivalDetail) != 0;

needToPriceChangeInnerArrival (innerArrival) = GROUP SUM 1 IF needToPriceChangeInnerArrivalDetail(innerArrivalDetail)
    BY innerArrivalInnerArrivalDetail(innerArrivalDetail);

@metaCodeDetailAggregation(innerArrival, priceChangeInnerArrival, needToPriceChangeInnerArrival);

// атрибуты документа переоценки

dateTimePriceChangeInnerArrival 'Дата/время' (priceChangeInnerArrival) = dateTimeInnerArrival(innerArrivalPriceChangeInnerArrival(priceChangeInnerArrival));
datePriceChangeInnerArrival 'Дата' (priceChangeInnerArrival) = dateInnerArrival(innerArrivalPriceChangeInnerArrival(priceChangeInnerArrival));
isPostedPriceChangeInnerArrival 'Закрыт' (priceChangeInnerArrival) = isPostedInnerArrival(innerArrivalPriceChangeInnerArrival(priceChangeInnerArrival));
numberPriceChangeInnerArrival 'Номер накладной' (priceChangeInnerArrival) = numberArrival(innerArrivalPriceChangeInnerArrival(priceChangeInnerArrival));
seriesPriceChangeInnerArrival 'Серия накладной' (priceChangeInnerArrival) = seriesArrival(innerArrivalPriceChangeInnerArrival(priceChangeInnerArrival));

senderDepartmentPriceChangeInnerArrival (priceChangeInnerArrival) = senderDepartmentInnerArrival(innerArrivalPriceChangeInnerArrival(priceChangeInnerArrival));
nameSenderDepartmentPriceChangeInnerArrival 'Отдел-отправитель' (priceChangeInnerArrival) = name(senderDepartmentPriceChangeInnerArrival(priceChangeInnerArrival));

departmentStorePriceChangeInnerArrival (priceChangeInnerArrival) = departmentStoreInnerArrival(innerArrivalPriceChangeInnerArrival(priceChangeInnerArrival));
nameDepartmentStorePriceChangeInnerArrival 'Отдел-получатель' (priceChangeInnerArrival) = name(departmentStorePriceChangeInnerArrival(priceChangeInnerArrival));

numberDisposalPriceChangeInnerArrival '№ распоряжения на переоценку' (priceChangeInnerArrival) = numberDisposalInnerArrival(innerArrivalPriceChangeInnerArrival(priceChangeInnerArrival));

// атрибуты детализации документа переоценки

itemPriceChangeInnerArrivalDetail (priceChangeInnerArrivalDetail) =
    itemInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

nameItemPriceChangeInnerArrivalDetail 'Товар' (priceChangeInnerArrivalDetail) =
    nameAttributeItem(itemPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

quantityPriceChangeInnerArrivalDetail 'Остаток' (priceChangeInnerArrivalDetail) =
    balanceBeforeInnerArrivalInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

curImporterPriceChangeInnerArrivalDetail 'Текущая цена изготовителя' (priceChangeInnerArrivalDetail) =
    curImporterPriceInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

importerPriceChangeInnerArrivalDetail 'Новая цена изготовителя' (priceChangeInnerArrivalDetail) =
    importerPriceInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

curSupplierPriceChangeInnerArrivalDetail 'Текущая цена поставщика' (priceChangeInnerArrivalDetail) =
    curSupplierPriceInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

supplierPriceChangeInnerArrivalDetail 'Новая цена поставщика' (priceChangeInnerArrivalDetail) =
    supplierPriceInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

curDataRetailRangePriceChangeInnerArrivalDetail 'Текущий НДС, %' (priceChangeInnerArrivalDetail) =
    curDataRetailRangeInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

dataRetailRangePriceChangeInnerArrivalDetail 'Новый НДС, %' (priceChangeInnerArrivalDetail) =
    dataRetailRangeInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

curRetailPriceChangeInnerArrivalDetail 'Текущая розничная цена' (priceChangeInnerArrivalDetail) =
    curRetailPriceInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

retailPriceChangeInnerArrivalDetail 'Новая розничная цена' (priceChangeInnerArrivalDetail) =
    retailPriceInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

castInnerArrivalObjectsToString100=
    FORMULA STRING[200] '\'Приход в отдел \'|| CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)';

descriptionInnerArrival 'Название документа' (innerArrival) = castInnerArrivalObjectsToString100(
    seriesNumberArrival(innerArrival), dateInnerArrival(innerArrival), nameSenderDepartmentInnerArrival(innerArrival));

descriptionInnerArrivalDetail 'Название документа' (innerArrivalDetail) = descriptionInnerArrival(innerArrivalInnerArrivalDetail(innerArrivalDetail));

warePriceChangeInnerArrivalDetail 'Новая посуда' (priceChangeInnerArrivalDetail) = wareInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail)) IN baseGroup;
priceWarePriceChangeInnerArrivalDetail 'Новая цена посуды' (priceChangeInnerArrivalDetail) = priceWareInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail)) IN baseGroup;

curWarePriceChangeInnerArrivalDetail 'Текущая посуда' (priceChangeInnerArrivalDetail) = curWareInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));
curPriceWarePriceChangeInnerArrivalDetail 'Текущая цена посуды' (priceChangeInnerArrivalDetail) = curPriceWareInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail)) IN baseGroup;

//----------------------------------- Списание отходов по нормам -------------------------------------------------//
needToWasteShipmentDetail (shipmentDetail) = TRUE IF percentRateWasteShipmentDetail(shipmentDetail);
needToWasteShipment (shipment) = GROUP SUM 1 IF needToWasteShipmentDetail(shipmentDetail) BY shipmentShipmentDetail(shipmentDetail) IN baseGroup;

CLASS wastage 'Списание отходов' : outAccountSumDocumentLedger, historyObject;
CLASS wastagePosted 'Закрытое списание отходов' : wastage, postedObject;
CLASS wastageDetail 'Строка документа': outAutoBalanceItemLedger;

@metaCodeDetailAggregation (shipment, wastage, needToWasteShipment);

dateWastage 'Дата документа' (wastage) = dateShipment(shipmentWastage(wastage));
timeWastage 'Время документа' (wastage) = timeShipment(shipmentWastage(wastage));
numberWastage 'Номер документа' (wastage) = numberObject(shipmentWastage(wastage));
seriesWastage 'Серия документа' (wastage) = seriesObject(shipmentWastage(wastage));
seriesNumberWastage 'Серия/номер документа' (wastage) = seriesNumberObject(shipmentWastage(wastage));

departmentStoreWastage 'Отдел документа (ИД)' (wastage) = departmentStoreShipment (shipmentWastage(wastage));
nameDepartmentStoreWastage 'Отдел документа' (wastage) = name(departmentStoreWastage (wastage));

supplierWastage 'Поставщик (ИД)' (wastage) = supplierShipment(shipmentWastage(wastage));
nameSupplierWastage 'Поставщик' (wastage) = name(supplierWastage(wastage));

dateTimeWastageDetail (wastageDetail) = dateTimeShipmentDetail(shipmentDetailWastageDetail(wastageDetail));
dateTimeWastage 'Дата/время документа' (wastage) = dateTimeShipment(shipmentWastage(wastage));

departmentStoreWastageDetail (wastageDetail) = departmentStoreShipmentDetail(shipmentDetailWastageDetail(wastageDetail));

isPostedWastage 'Закрыт' (wastage) = isPostedShipment(shipmentWastage(wastage));
isPostedWastageDetail 'Закрыт' (wastageDetail) = isPostedWastage(wastageWastageDetail(wastageDetail));

itemWastageDetail 'Товар (ИД)' (wastageDetail) = itemShipmentDetail(shipmentDetailWastageDetail(wastageDetail));
nameAttributeItemWastageDetail 'Товар' (wastageDetail) = nameAttributeItem (itemWastageDetail(wastageDetail));
barcodeExSkuWastageDetail 'Штрих-код' (wastageDetail) = barcodeExSkuShipmentDetail(shipmentDetailWastageDetail(wastageDetail));

percentRateWasteWastageDetail 'Процент списания' (wastageDetail) = percentRateWasteShipmentDetail(shipmentDetailWastageDetail(wastageDetail));

numberWastageDetail 'Номер строки' (wastageDetail) =
    PARTITION SUM 1 IF wastageDetail IS wastageDetail BY wastageWastageDetail(wastageDetail)
    ORDER wastageDetail IN recognizeGroup MINCHARWIDTH 3 PREFCHARWIDTH 3;

quantityWastageDetail 'Количество списания '(wastageDetail) = [X*Y/100](
    percentRateWasteWastageDetail (wastageDetail), quantityShipmentDetail(shipmentDetailWastageDetail(wastageDetail)));

quantityWastage 'Общее количество' (wastage) = GROUP SUM quantityWastageDetail(wastageDetail) BY wastageWastageDetail(wastageDetail);

quantityWastageDetailsWastage 'Количество строк' (wastage) = GROUP SUM 1 IF wastageDetail IS wastageDetail BY wastageWastageDetail(wastageDetail);

retailPriceWastageDetail 'Цена розничная' (wastageDetail) = retailPriceShipmentDetail(shipmentDetailWastageDetail(wastageDetail));
supplierPriceWastageDetail 'Цена поставщика' (wastageDetail) = supplierPriceShipmentDetail(shipmentDetailWastageDetail(wastageDetail));
dataRetailRangeWastageDetail 'НДС розничный, %' (wastageDetail) = dataRetailRangeShipmentDetail(shipmentDetailWastageDetail(wastageDetail));
priceWareWastageDetail 'Цена посуды' (wastageDetail) = priceWareShipmentDetail(shipmentDetailWastageDetail(wastageDetail));
dataWareRangeWastageDetail 'НДС по посуде' (wastageDetail) = dataWareRangeShipmentDetail(shipmentDetailWastageDetail(wastageDetail));
dataSuppliersRangeWastageDetail 'НДС поставщика,%' (wastageDetail) = dataSuppliersRangeShipmentDetail(shipmentDetailWastageDetail(wastageDetail));

@metaCodeTotals(wastage);

sumWastageDetail 'Сумма' (wastageDetail) = quantityWastageDetail(wastageDetail) * retailPriceWastageDetail(wastageDetail);

totalSumWastage 'Общая сумма' (wastage) = GROUP SUM sumWastageDetail (wastageDetail)
    IF  wastageWastageDetail(wastageDetail) == wastage BY wastageWastageDetail(wastageDetail) IN documentSumGroup;

castWastageObjectsToString100=
    FORMULA STRING[200] '\'Списание отходов \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)';

descriptionWastage 'Название документа' (wastage) = castWastageObjectsToString100(
    seriesNumberWastage(wastage), dateWastage(wastage), nameSupplierWastage(wastage));

descriptionWastageDetail 'Название документа' (wastageDetail) = descriptionWastage(wastageWastageDetail(wastageDetail));

FORM wastages 'Списания отходов'

    OBJECTS w=wastage
    PROPERTIES (w) READONLY numberWastage, seriesWastage, dateWastage, timeWastage, nameDepartmentStoreWastage, nameSupplierWastage,
                   quantityWastageDetailsWastage, quantityWastage, totalSumWastage

    OBJECTS d=wastageDetail
    PROPERTIES (d) READONLY numberWastageDetail, barcodeExSkuWastageDetail, nameAttributeItemWastageDetail, quantityWastageDetail, retailPriceWastageDetail, sumWastageDetail

    FILTERS wastageWastageDetail(d)== w;
;


//----------------------------- Возврат поставщику ---------------------------------------------------------------//

CLASS returnSupplier 'Возврат поставщику' : outAccountSumDocumentLedger, historyObject, numberedObject, consignment;
CLASS returnSupplierDetail 'Строка возврата поставщику' : outUserBalanceItemLedger, consignmentDetail;
@metaCodeObjectWithPostEx(returnSupplier, 'Закрытый возврат поставщику');

// шапка документа "Возврат поставщику"
supplierReturnSupplier 'Поставщик (ИД)' (returnSupplier) = DATA supplier (returnSupplier) IN idGroup;

supplierReturnSupplierDetail 'Поставщик (ИД)' (returnSupplierDetail) = supplierReturnSupplier(returnSupplierReturnSupplierDetail(returnSupplierDetail));

nameSupplierReturnSupplier 'Поставщик' (returnSupplier) = name(supplierReturnSupplier(returnSupplier)) IN documentPrmGroup
    MINCHARWIDTH 30 PREFCHARWIDTH 40;

contractReturnSupplier 'Договор' (returnSupplier) = DATA contract (returnSupplier) IN idGroup;

contractReturnSupplier (returnSupplier) <- overrideContractCompanySupplier(companyStore(storeDepartmentStore(departmentStoreReturnSupplier(returnSupplier))), supplierReturnSupplier(returnSupplier))
                               IF (countContracts(supplierReturnSupplier(returnSupplier), departmentStoreReturnSupplier(returnSupplier)) == 1)
                               ON CHANGE supplierReturnSupplier(returnSupplier);

numberContractReturnSupplier 'Договор' (returnSupplier) = numberContract(contractReturnSupplier(returnSupplier)) IN documentPrmGroup;

numberDisposalReturnSupplier '№ распоряжения на переоценку' (returnSupplier) = DATA STRING[30] (returnSupplier) IN documentPrmGroup;

returnLossSupplierReturnSupplier '% потерь при возврате' (returnSupplier) = DATA DOUBLE (returnSupplier) IN documentPrmGroup;

returnLossSupplierReturnSupplier (returnSupplier) <- returnLossSupplier(supplierReturnSupplier(returnSupplier))
    ON CHANGE supplierReturnSupplier(returnSupplier);

// информация по товару

GROUP itemReturnSupplierDetailInfo 'Информация по товару' : baseGroup;

controlExpiryReturnSupplierDetail 'Контролировать сроки годности товара?' (returnSupplierDetail) =
    controlExpiryItem (itemReturnSupplierDetail(returnSupplierDetail)) IN itemReturnSupplierDetailInfo;

isManufacturedReturnSupplierDetail 'Товар производится?' (returnSupplierDetail) =
    isManufacturedItem(itemReturnSupplierDetail(returnSupplierDetail)) IN itemReturnSupplierDetailInfo;
isWeightReturnSupplierDetail 'Весовой товар?' (returnSupplierDetail) =
    isWeightItem(itemReturnSupplierDetail(returnSupplierDetail)) IN itemReturnSupplierDetailInfo;

nameinActionItemDepartmentReturnSupplierDetail 'Товар акции?' (returnSupplierDetail) =
    name(inActionItemDepartmentVal(itemReturnSupplierDetail(returnSupplierDetail),
    departmentStoreReturnSupplier(returnSupplierReturnSupplierDetail(returnSupplierDetail)),
    dateReturnSupplierDetail(returnSupplierDetail))) IN itemReturnSupplierDetailInfo FIXEDCHARWIDTH 2;

hintReturnSupplierDetail 'Подсказка по товару' (returnSupplierDetail) =
    hintItem(itemReturnSupplierDetail(returnSupplierDetail)) IN itemReturnSupplierDetailInfo;

nameCountryReturnSupplierDetail 'Страна производства/происхождения' (returnSupplierDetail) =
    name(countryItem(itemReturnSupplierDetail(returnSupplierDetail))) IN itemReturnSupplierDetailInfo MINCHARWIDTH 15 PREFCHARWIDTH 15;

namebanRevaluationItemDepartmentReturnSupplierDetail 'Запрет на переоценку' (returnSupplierDetail) =
    name(banRevaluationItemDepartmentVal(itemReturnSupplierDetail(returnSupplierDetail),
    departmentStoreReturnSupplier(returnSupplierReturnSupplierDetail(returnSupplierDetail)),
    dateReturnSupplierDetail(returnSupplierDetail))) IN itemReturnSupplierDetailInfo FIXEDCHARWIDTH 2;

// количество/цены по строкам

batchReturnSupplierDetail 'Партия (ИД)' = DATA shipmentDetail (returnSupplierDetail) IN idGroup;

commonInfoBatchReturnSupplierDetail 'Партия' (returnSupplierDetail) = descriptionShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail));

quantityReturnSupplierDetail 'Количество' (returnSupplierDetail) = DATA DOUBLE (returnSupplierDetail) IN baseGroup;

importerPriceReturnSupplierDetail 'Цена изготовителя' (returnSupplierDetail) = DATA DOUBLE (returnSupplierDetail) IN baseGroup;
importerPriceReturnSupplierDetail (returnSupplierDetail) <- importerPriceShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                    ON CHANGE batchReturnSupplierDetail(returnSupplierDetail);

supplierPriceReturnSupplierDetail 'Цена поставщика' (returnSupplierDetail) = DATA DOUBLE (returnSupplierDetail) IN baseGroup;
supplierPriceReturnSupplierDetail (returnSupplierDetail) <- supplierPriceShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                    ON CHANGE batchReturnSupplierDetail(returnSupplierDetail);


supplierMarkupReturnSupplierDetail 'Оптовая надбавка/торговая скидка, %' (returnSupplierDetail) = DATA DOUBLE (returnSupplierDetail) IN baseGroup;
supplierMarkupReturnSupplierDetail (returnSupplierDetail) <- overSupplierMarkupShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                             ON CHANGE batchReturnSupplierDetail(returnSupplierDetail);

suppliersRangeReturnSupplierDetail (returnSupplierDetail) = DATA range (returnSupplierDetail) IN idGroup;
suppliersRangeReturnSupplierDetail (returnSupplierDetail) <- suppliersRangeShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                             ON CHANGE batchReturnSupplierDetail(returnSupplierDetail);

numberSupplierRangeReturnSupplierDetail 'НДС поставщика, номер' (returnSupplierDetail) =
    dataRange(suppliersRangeReturnSupplierDetail(returnSupplierDetail));
dataSuppliersRangeReturnSupplierDetail 'НДС поставщика, %' (returnSupplierDetail) =
    dataActingRateRangeDate(suppliersRangeReturnSupplierDetail(returnSupplierDetail), dateReturnSupplierDetail(returnSupplierDetail));

wareReturnSupplierDetail 'Посуда (ИД)' (returnSupplierDetail) = DATA ware (returnSupplierDetail);
wareReturnSupplierDetail (returnSupplierDetail) <- wareShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                   ON CHANGE batchReturnSupplierDetail(returnSupplierDetail);
nameWareReturnSupplierDetail 'Посуда ' (returnSupplierDetail) = name(wareReturnSupplierDetail(returnSupplierDetail));

priceWareReturnSupplierDetail 'Цена посуды' (returnSupplierDetail) = DATA DOUBLE (returnSupplierDetail);
priceWareReturnSupplierDetail (returnSupplierDetail) <- priceWareShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                        ON CHANGE batchReturnSupplierDetail(returnSupplierDetail);

dataWareRangeReturnSupplierDetail 'НДС по посуде, %' (returnSupplierDetail) = DATA DOUBLE (returnSupplierDetail);
dataWareRangeReturnSupplierDetail (returnSupplierDetail) <- dataWareRangeShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                            ON CHANGE batchReturnSupplierDetail(returnSupplierDetail);

retailRangeReturnSupplierDetail(returnSupplierDetail) = DATA range (returnSupplierDetail) IN idGroup;
retailRangeReturnSupplierDetail(returnSupplierDetail) <- retailRangeShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                         ON CHANGE batchReturnSupplierDetail(returnSupplierDetail);

numberRetailRangeReturnSupplierDetail 'НДС розничный, номер' =
    dataRange(retailRangeReturnSupplierDetail(returnSupplierDetail));
dataRetailRangeReturnSupplierDetail 'НДС розничный, %' =
    dataActingRateRangeDate(retailRangeReturnSupplierDetail(returnSupplierDetail), dateReturnSupplierDetail(returnSupplierDetail));

retailMarkupReturnSupplierDetail 'Торговая надбавка, %' = DATA DOUBLE (returnSupplierDetail) IN baseGroup;
retailMarkupReturnSupplierDetail (returnSupplierDetail) <- retailMarkupShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                           ON CHANGE batchReturnSupplierDetail(returnSupplierDetail);

retailPriceReturnSupplierDetail 'Розничная цена' = DATA DOUBLE (returnSupplierDetail) IN baseGroup;
retailPriceReturnSupplierDetail (returnSupplierDetail) <- retailPriceShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
                                                          ON CHANGE batchReturnSupplierDetail(returnSupplierDetail);

@metaCodeTotals(returnSupplier);

lossSumCleanSupplierReturnSupplier 'Сумма потерь при возврате (без НДС)' (returnSupplier) =
    totalSumCleanSupplierReturnSupplier (returnSupplier) * returnLossSupplierReturnSupplier(returnSupplier);

lossSumIncVATReturnSupplier 'Сумма НДС по потерям при возврате' (returnSupplier) =
    totalSumIncVATReturnSupplier (returnSupplier) * returnLossSupplierReturnSupplier(returnSupplier);

//текущие параметры

curRetailPriceReturnSupplierDetail 'Текущая розничная цена' (returnSupplierDetail) = DATA DOUBLE (returnSupplierDetail);

curSupplierRangeReturnSupplierDetail(returnSupplierDetail) = DATA range (returnSupplierDetail) IN idGroup;
curDataSupplierRangeReturnSupplierDetail 'Текущий НДС розничный,%' (returnSupplierDetail) =
    dataActingRateRangeDate(curSupplierRangeReturnSupplierDetail(returnSupplierDetail), dateReturnSupplierDetail(returnSupplierDetail));

curRetailRangeReturnSupplierDetail(returnSupplierDetail) = DATA range (returnSupplierDetail) IN idGroup;
curDataRetailRangeReturnSupplierDetail 'Текущий НДС розничный,%' (returnSupplierDetail) =
    dataActingRateRangeDate(curRetailRangeReturnSupplierDetail(returnSupplierDetail), dateReturnSupplierDetail(returnSupplierDetail));

curImporterPriceReturnSupplierDetail 'Текущая цена изготовителя/импортера' (returnSupplierDetail) = DATA DOUBLE (returnSupplierDetail);
curSupplierPriceReturnSupplierDetail 'Текущая цена поставщика' (returnSupplierDetail) = DATA DOUBLE (returnSupplierDetail);

curPriceWareReturnSupplierDetail 'Текущая цена посуды' (returnSupplierDetail) = DATA DOUBLE (returnSupplierDetail);
curWareReturnSupplierDetail = DATA ware (returnSupplierDetail) IN idGroup;
curNameWareReturnSupplierDetail 'Текущая посуда' (returnSupplierDetail) = name(curWareReturnSupplierDetail(returnSupplierDetail));


// Суммовые параметры для шапки документа

carryingChargesReturnSupplier 'Транспортные расходы' (returnSupplier) = DATA DOUBLE (returnSupplier) IN documentSumGroup;

totalQuantityReturnSupplier 'Общее количество' (returnSupplier) = GROUP SUM quantityReturnSupplierDetail(returnSupplierDetail)
                                                                  BY returnSupplierReturnSupplierDetail(returnSupplierDetail) IN documentSumGroup;

isReturnSupplier (returnSupplier, returnSupplierDetail) = returnSupplierReturnSupplierDetail(returnSupplierDetail) == returnSupplier;

CONSTRAINT itemShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail)) != itemReturnSupplierDetail(returnSupplierDetail)
    OR departmentStoreShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail)) != departmentStoreReturnSupplierDetail(returnSupplierDetail)
    OR supplierShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail)) != supplierReturnSupplierDetail(returnSupplierDetail)
    OR isNotPostedShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
    CHECKED BY batchReturnSupplierDetail MESSAGE 'Выберите партию этого товара';

CONSTRAINT quantityReturnSupplierDetail(returnSupplierDetail) > quantityShipmentDetail(batchReturnSupplierDetail(returnSupplierDetail))
    MESSAGE 'Выбрано количество товара больше чем в приходе';

castReturnSupplierObjectsToString100=
    FORMULA STRING[200] '\'Возврат поставщику \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)';

descriptionReturnSupplier 'Название документа' (returnSupplier) = castReturnSupplierObjectsToString100(
    seriesNumberObject(returnSupplier), dateReturnSupplier(returnSupplier), nameSupplierReturnSupplier(returnSupplier));

descriptionReturnSupplierDetail 'Название документа' (returnSupplierDetail) = descriptionReturnSupplier(returnSupplierReturnSupplierDetail(returnSupplierDetail));

// для формы подбора товара

sumQuantityItemShipment (departmentStore, supplier, item) =
    GROUP SUM quantityShipmentDetail(shipmentDetail)
    IF shipmentShipmentDetail(shipmentDetail) IS shipmentPosted
    BY departmentStoreShipmentDetail(shipmentDetail), supplierShipmentDetail(shipmentDetail),
       itemShipmentDetail(shipmentDetail);

isSumQuantityItemShipment (departmentStore, supplier, item) = sumQuantityItemShipment(departmentStore, supplier, item) > 0;

// для возвратной накладной (шапка и хвост)
carReturnSupplier 'Автомобиль' (returnSupplier) = DATA STRING[30] (returnSupplier);
ownerCarReturnSupplier 'Владелец автомобиля' (returnSupplier) = DATA STRING[100] (returnSupplier);
trailerReturnSupplier 'Прицеп' (returnSupplier) = DATA STRING[10] (returnSupplier);
driverCarReturnSupplier 'Водитель' (returnSupplier) = DATA STRING[40] (returnSupplier);
waybillReturnSupplier 'Путевой лист' (returnSupplier) = DATA STRING[20] (returnSupplier);

transportPayerReturnSupplier 'Заказчик перевозки (ИД)' (returnSupplier) = DATA legalEntity (returnSupplier);

shipmentBaseReturnSupplier 'Основание отпуска' (returnSupplier) = DATA STRING[30] (returnSupplier);

dataLoadingPlaceReturnSupplier 'Пункт погрузки' (returnSupplier) = DATA STRING[50] (returnSupplier);
loadingPlaceReturnSupplier 'Пункт погрузки' (returnSupplier) = UNION OVERRIDE addressStore(storeDepartmentStore(departmentStoreReturnSupplier(returnSupplier))),
                                                                              dataLoadingPlaceReturnSupplier (returnSupplier);

dataUnloadingPlaceReturnSupplier 'Пункт разгрузки' (returnSupplier) = DATA STRING[50] (returnSupplier);
unloadingPlaceReturnSupplier 'Пункт разгрузки' (returnSupplier) = UNION OVERRIDE addressLegalEntity(supplierReturnSupplier(returnSupplier)),
                                                                                 dataUnloadingPlaceReturnSupplier (returnSupplier);

readdressingReturnSupplier 'Переадресовка' (returnSupplier) = DATA STRING[50] (returnSupplier);

issuanceAllowedReturnSupplier 'Отпуск разрешил' (returnSupplier) = DATA employee(returnSupplier);
issuanceExecutedReturnSupplier 'Отпуск произвел' (returnSupplier) = DATA employee(returnSupplier);

forwarderReturnSupplier 'Товар к перевозке принял (экспедитор)' (returnSupplier) = DATA STRING[40] (returnSupplier);

warrantReturnSupplier 'По доверенности' (returnSupplier) = DATA STRING[30](returnSupplier);
warrantHolderReturnSupplier 'Доверенность выдана на' (returnSupplier) = DATA STRING[100](returnSupplier);

goodsAcceptedReturnSupplier 'Принял грузополучатель' (returnSupplier) = DATA STRING[40] (returnSupplier);

loadingExecuterReturnSupplier 'Исполнитель ПРР' (returnSupplier) = DATA employee(returnSupplier);

wayOfLoadingReturnSupplier 'Способ ПРР' (returnSupplier) = DATA wayOfLoading(returnSupplier);
codeLoadingReturnSupplier 'Код ПРР' (returnSupplier) = DATA STRING[3] (returnSupplier);

arrivalTimeReturnSupplier 'Время прибытия' (returnSupplier) = DATA DATETIME(returnSupplier);
departureTimeReturnSupplier 'Время убытия' (returnSupplier) = DATA DATETIME(returnSupplier);
downtimeReturnSupplier 'Время простоя' (returnSupplier) = DATA STRING[10] (returnSupplier);

raceQuantityReturnSupplier 'Количество ездок' (returnSupplier) = DATA INTEGER (returnSupplier);

packQuantityReturnSupplierDetail 'Количество грузовых мест' (returnSupplierDetail) = quantityReturnSupplierDetail(returnSupplierDetail)/
    UNION OVERRIDE 1 IF returnSupplierDetail IS returnSupplierDetail, quantityPackItem(itemReturnSupplierDetail(returnSupplierDetail));

sumPackQuantityReturnSupplier 'Общее количество грузовых мест' (returnSupplier) = GROUP SUM packQuantityReturnSupplierDetail(returnSupplierDetail)
    BY returnSupplierReturnSupplierDetail(returnSupplierDetail) IN sumConsignmentGroup;

grossWeightReturnSupplierDetail 'Масса груза, т.' (returnSupplierDetail) =
    grossWeightItem(itemReturnSupplierDetail(returnSupplierDetail))*quantityReturnSupplierDetail(returnSupplierDetail)/1000;

sumGrossWeightReturnSupplier 'Общее количество грузовых мест' (returnSupplier) = GROUP SUM packQuantityReturnSupplierDetail(returnSupplierDetail)
    BY returnSupplierReturnSupplierDetail(returnSupplierDetail) IN sumConsignmentGroup;

//----------------------------------------------- Чеки ---------------------------------------------------//

CLASS bill 'Чек' : historyObject;
TABLE bill (bill);

CLASS billDetail 'Строка чека' : outAutoBalanceItemLedger;
TABLE billDetail (billDetail);

dateBill 'Дата документа' (bill) = DATA DATE (bill) IN documentHeaderGroup;
dateBill (bill) <- currentDate() ON ASSIGN bill AS bill;

timeBill 'Время документа' (bill) = DATA TIME (bill) IN documentHeaderGroup;
timeBill (bill) <- currentTime() ON ASSIGN bill AS bill;

dateTimeBill 'Дата/время документа' (bill) = toDateTime(dateBill(bill), timeBill(bill));

departmentStoreBill 'Отдел документа (ИД)' (bill) = DATA departmentStore(bill) IN idGroup;
nameDepartmentStoreBill 'Отдел документа' (bill) = name(departmentStoreBill(bill)) IN documentHeaderGroup
    MINCHARWIDTH 20 PREFCHARWIDTH 40;

billBillDetail 'Строка документа' = DATA bill (billDetail) IN idGroup;

dateTimeBillDetail (billDetail) = dateTimeBill(billBillDetail(billDetail));

departmentStoreBillDetail (billDetail) = departmentStoreBill(billBillDetail(billDetail));

numberBillDetail 'Номер строки' (billDetail) =
    PARTITION SUM 1 IF billDetail IS billDetail BY billBillDetail(billDetail)
    ORDER billDetail IN recognizeGroup MINCHARWIDTH 3 PREFCHARWIDTH 3;

itemBillDetail 'Товар (ИД)' (billDetail) = DATA item (billDetail) IN idGroup;

nameAttributeItemBillDetail 'Товар' (billDetail) =
    nameAttributeItem(itemBillDetail(billDetail)) IN recognizeGroup;

numberBill 'Номер чека' (bill) = DATA INTEGER (bill) IN documentHeaderGroup;

barcodeExBillDetail 'Штрих-код' (billDetail) = DATA STRING[14] (billDetail);

quantityBillDetail 'Количество продажи' (billDetail) = DATA DOUBLE (billDetail);
priceBillDetail 'Цена продажи' (billDetail) = DATA DOUBLE (billDetail);
sumBillDetail 'Сумма продажи' (billDetail) = priceBillDetail(billDetail)*quantityBillDetail(billDetail);
discountSumBillDetail 'Сумма скидки' (billDetail) = DATA DOUBLE (billDetail);

sumBill 'Сумма чека' (bill) = GROUP SUM sumBillDetail(billDetail) IF billBillDetail (billDetail) == bill
    BY billBillDetail (billDetail) IN documentSumGroup PERSISTENT;

discountSumBill 'Сумма скидки в чеке' (bill) = GROUP SUM discountSumBillDetail(billDetail) IF billBillDetail (billDetail) == bill
    BY billBillDetail (billDetail) IN documentSumGroup;

quantityBillDetailsBill 'Количество строк в чеке' (bill) = GROUP SUM 1 IF billBillDetail (billDetail) == bill
    BY billBillDetail (billDetail) IN documentSumGroup;

quantityItemBill 'Количество по товару в чеке' (item, bill) = GROUP SUM quantityBillDetail(billDetail)
    BY itemBillDetail(billDetail), billBillDetail(billDetail);

quantityPositionsBill 'Количество позиций в чеке' (bill) = GROUP SUM 1 IF quantityItemBill (item, bill)
    BY bill IN documentSumGroup;

CLASS payment 'Оплата по чеку';
CLASS STATIC paymentMeans 'Форма оплаты'{
    cash 'Наличные',
    card 'Карточка'
};
CLASS paymentType 'Тип платежа' : named;

paymentMeansPaymentType (paymentType) = DATA paymentMeans(paymentType);
namePaymentMeansPaymentType 'Форма оплаты' (paymentType) = name(paymentMeansPaymentType(paymentType)) IN baseGroup;

billPayment 'Чек (ИД)' (payment) = DATA bill (payment);
numberBillPayment 'Чек' (payment) = numberBill(billPayment(payment));

discountCardBill (bill) = DATA discountCard(bill);
numberDiscountCardBill 'Номер дисконтной карты' (bill) = numberDiscountCard(discountCardBill(bill));
nameCustomerDiscountCardBill 'Держатель дисконтной карты' (bill) = nameCustomerDiscountCard(discountCardBill(bill));

sumPayment 'Сумма платежа' (payment) = DATA DOUBLE(payment);

totalSumPaymentBill (bill) = GROUP SUM sumPayment(payment)
    BY billPayment(payment);

CONSTRAINT sumBill (bill) != UNION OVERRIDE 0 IF bill IS bill, totalSumPaymentBill(bill) MESSAGE 'Сумма платежей по чеку не соответствует сумме чека';

// todo: проверить работает ли CONSTRAINT

paymentTypePayment 'Тип платежа (ИД' (payment) = DATA paymentType(payment);
namePaymentTypePayment 'Тип платежа' (payment) = name(paymentTypePayment(payment));

paymentMeansPayment (payment) = paymentMeansPaymentType(paymentTypePayment(payment));
namePaymentMeansPayment 'Форма оплаты' (payment) = name(paymentMeansPayment(payment));

castBillObjectsToString100=
    FORMULA STRING[200] '\'Чек № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) ';

descriptionBill 'Название документа' (bill) = castBillObjectsToString100(
    numberBill(bill), dateTimeBill(bill));

descriptionBillDetail (billDetail) = descriptionBill(billBillDetail(billDetail));

CLASS zReport 'Z-отчет (открытый)' : outAccountSumDocumentLedger, historyObject;
CLASS zReportPosted 'Z-отчет (закрытый)' : zReport, postedObject;

@metaCodePostedObject(zReport);

dateOpenZReport 'Дата открытия Z-отчета' (zReport) = DATA DATE(zReport);
numberZReport 'Номер Z-отчета' (zReport) = DATA INTEGER(zReport);

zReportBill(bill) = DATA zReport(bill);
numberZReportBill(bill) = numberZReport(zReportBill(bill));
dateTimeZReport (zReport) = GROUP MAX dateTimeBill(bill) BY zReportBill(bill);

zReportBillDetail (billDetail) = zReportBill(billBillDetail(billDetail));

isPostedBill(bill) = isPostedZReport(zReportBill(bill));
isPostedBillDetail (billDetail) = isPostedBill(billBillDetail(billDetail));

cashRegisterZReport (zReport) = DATA cashRegister(zReport);
numberCashRegisterZReport 'Касса Z-отчета' (zReport) = numberCashRegister(cashRegisterZReport(zReport));

cashRegisterBill 'Касса (ИД)' (bill) = cashRegisterZReport(zReportBill(bill));
numberCashRegisterBill 'Касса ' (bill) = numberCashRegister(cashRegisterBill(bill)) IN documentHeaderGroup;

departmentStoreZReport (zReport) = DATA departmentStore(zReport);
nameDepartmentStoreZReport 'Отдел Z-отчета' (zReport) = name(departmentStoreZReport(zReport));

departmentStoreZReport(zReport) <- departmentStoreCashRegister(cashRegisterZReport(zReport))
    ON CHANGE cashRegisterZReport(zReport);

departmentStoreBill (bill) <- departmentStoreZReport(zReportBill(bill)) ON CHANGE zReportBill(bill);

castZReportObjectsToString100=
    FORMULA STRING[200] '\'Продажа по кассе \' || CAST($1 AS TEXT) || \' отдела \' || CAST($2 AS TEXT) ||  \' от \' || CAST($3 AS TEXT)';

descriptionZReport (zReport) = castZReportObjectsToString100 (numberCashRegisterZReport(zReport),
    nameDepartmentStoreZReport(zReport), dateOpenZReport(zReport));

sumZReport 'Сумма Z-отчета' (zReport) = GROUP SUM sumBill(bill) BY zReportBill(bill) PERSISTENT;
discountSumZReport 'Сумма скидок Z-отчета' (zReport) = GROUP SUM discountSumBill(bill) BY zReportBill(bill) PERSISTENT;

quantityBillsZReport 'Количество чеков' (zReport) = GROUP SUM 1 IF zReportBill(bill)==zReport BY zReportBill(bill);

quantityZReportBill 'Количество по товару в Z-отчете' (item, zReport) = GROUP SUM quantityBillDetail(billDetail)
    BY itemBillDetail(billDetail), zReportBillDetail(billDetail);

quantityPositionsZReport 'Количество товаров в Z-отчете' (zReport) = GROUP SUM 1 IF quantityZReportBill (item, zReport)
    BY zReport IN documentSumGroup;

addBillDetailBarcodeFill 'Добавить строку по штрих-коду' = ACTION (bill) {
    FORM barcodeInput MODAL;

    IF formResult() == formResult.ok THEN {
         SET tmpSku() <- skuBarcodeStringDate(chosenString('barcode'), dateBill(bill));
         IF tmpSku() IS item THEN {
             ADDOBJ billDetail;
             FOR o == addedObject() DO {
                 SET billBillDetail(o) <- bill AS bill;
                 SET itemBillDetail(o) <- tmpSku();
                 SET barcodeExBillDetail(o) <- chosenString('barcode');
            //   SET quantity###object##Detail(o) <- amountBarcode(valueBarcodeToDate(chosenString('barcode'), date###object(object)));
            };
        } ELSE
        MESSAGE 'Не найден штрих-код';
    };

}TOOLBAR EDITKEY 'F4';

@metaCodeSingleAggregation(zReport, incomeCashOrder, isPostedZReport);

sumCashDocument (incomeCashOrder) <- sumZReport(zReportIncomeCashOrder(incomeCashOrder)) ON ASSIGN incomeCashOrder IS incomeCashOrder;
cashRegisterIncomeCashOrder (incomeCashOrder) <- cashRegisterZReport(zReportIncomeCashOrder(incomeCashOrder)) ON ASSIGN incomeCashOrder IS incomeCashOrder;

// документ скидок для товарного отчета
CLASS saleDiscountDocument 'Скидка по продаже через кассы' : outAccountSumDocumentLedger;

needToSaleDiscountDocument (zReport) = TRUE IF discountSumZReport(zReport);

@metaCodeSingleAggregation(zReport, saleDiscountDocument, needToSaleDiscountDocument);

dateSaleDiscountDocument 'Дата' (saleDiscountDocument) = dateOpenZReport(zReportSaleDiscountDocument(saleDiscountDocument));
dateTimeSaleDiscountDocument 'Дата/время' (saleDiscountDocument) = dateTimeZReport(zReportSaleDiscountDocument(saleDiscountDocument));

departmentStoreSaleDiscountDocument (saleDiscountDocument) = departmentStoreZReport(zReportSaleDiscountDocument(saleDiscountDocument));
nameDepartmentStoreSaleDiscountDocument 'Отдел' (saleDiscountDocument) = name(departmentStoreSaleDiscountDocument(saleDiscountDocument));

numberCashRegisterSaleDiscountDocument (saleDiscountDocument) = numberCashRegisterZReport(zReportSaleDiscountDocument(saleDiscountDocument));

sumSaleDiscountDocument (saleDiscountDocument) = discountSumZReport(zReportSaleDiscountDocument(saleDiscountDocument));

castSaleDiscountDocumentObjectsToString100=
    FORMULA STRING[200] '\'Скидка по кассе \' || CAST($1 AS TEXT) || \' отдела \' || CAST($2 AS TEXT) ||  \' от \' || CAST($3 AS TEXT)';

descriptionSaleDiscountDocument (saleDiscountDocument) = castZReportObjectsToString100 (numberCashRegisterSaleDiscountDocument(saleDiscountDocument),
    nameDepartmentStoreSaleDiscountDocument(saleDiscountDocument), dateSaleDiscountDocument(saleDiscountDocument));

isPostedSaleDiscountDocument (saleDiscountDocument) = isPostedZReport(zReportSaleDiscountDocument(saleDiscountDocument));
//----------------------------------------------- Переоценка товара ---------------------------------------------------//

CLASS userPriceChange 'Переоценка товаров' : priceChangeDocument, numeratedObject, priceTransactionDocument;
CLASS userPriceChangeDetail 'Строка переоценки товаров' : priceChangeDocumentDetail, importerPriceLedger, supplierPriceLedger, accountPriceLedger, retailPriceLedger, retailVATLedger, warePriceLedger;
@metaCodeObjectWithPostEx (userPriceChange, 'Закрытая переоценка товаров');

quantityUserPriceChangeDetail 'Кол-во переоценки' = DATA DOUBLE (userPriceChangeDetail);
quantityItemUserPriceChange 'Кол-во по товару' (item, userPriceChange) = GROUP SUM quantityUserPriceChangeDetail(detail)
                                                                               BY itemUserPriceChangeDetail(detail), userPriceChangeUserPriceChangeDetail(detail);

numberDisposalUserPriceChange '№ распоряжения на переоценку' (userPriceChange) = DATA STRING[30] (userPriceChange) IN documentPrmGroup;

importerPriceUserPriceChangeDetail 'Цена изготовителя' = DATA DOUBLE (userPriceChangeDetail);
supplierPriceUserPriceChangeDetail 'Цена поставщика' = DATA DOUBLE (userPriceChangeDetail);
retailRangeUserPriceChangeDetail 'НДС' = DATA range (userPriceChangeDetail);
numberRetailRangeUserPriceChangeDetail 'НДС, номер' (userPriceChangeDetail) = dataRange(retailRangeUserPriceChangeDetail(userPriceChangeDetail));
dataRetailRangeUserPriceChangeDetail 'НДС, %' (userPriceChangeDetail) = dataActingRateRangeDate(retailRangeUserPriceChangeDetail(userPriceChangeDetail), dateUserPriceChangeDetail(userPriceChangeDetail));
retailPriceUserPriceChangeDetail 'Новая розничная цена' = DATA DOUBLE (userPriceChangeDetail);

CONSTRAINT taxRange(retailRangeUserPriceChangeDetail(userPriceChangeDetail)) != tax.taxNDS CHECKED BY retailRangeUserPriceChangeDetail MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

curImporterPriceUserPriceChangeDetail 'Текущая цена изготовителя' = DATA DOUBLE (userPriceChangeDetail);
curSupplierPriceUserPriceChangeDetail 'Текущая цена поставщика' = DATA DOUBLE (userPriceChangeDetail);
curRetailRangeUserPriceChangeDetail 'Текущий НДС' = DATA range (userPriceChangeDetail);
curNumberRetailRangeUserPriceChangeDetail 'Текущий НДС, номер' (userPriceChangeDetail) = dataRange(curRetailRangeUserPriceChangeDetail(userPriceChangeDetail));
curDataRetailRangeUserPriceChangeDetail 'Текущий НДС, %' (userPriceChangeDetail) = dataActingRateRangeDate(curRetailRangeUserPriceChangeDetail(userPriceChangeDetail), dateUserPriceChangeDetail(userPriceChangeDetail));
curRetailPriceUserPriceChangeDetail 'Текущая розничная цена' = DATA DOUBLE (userPriceChangeDetail);

castUserPriceChangeToString100=
    FORMULA STRING[200] '\'Акт переоценки \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT)';

descriptionUserPriceChange 'Название документа' (userPriceChange) = castUserPriceChangeToString100(
    seriesNumberObject(userPriceChange), dateUserPriceChange(userPriceChange));

descriptionUserPriceChangeUserPriceChangeDetail 'Название документа' (userPriceChangeDetail) = descriptionUserPriceChange(userPriceChangeUserPriceChangeDetail(userPriceChangeDetail));

descriptionPriceChangeInnerArrival 'Название документа' (priceChangeInnerArrival) = descriptionInnerArrival(innerArrivalPriceChangeInnerArrival(priceChangeInnerArrival));

wareUserPriceChangeDetail 'Посуда (ИД)' (userPriceChangeDetail) = DATA ware(userPriceChangeDetail) IN baseGroup;
wareUserPriceChangeDetail(userPriceChangeDetail) <- wareItem(itemUserPriceChangeDetail(userPriceChangeDetail)) ON CHANGE itemUserPriceChangeDetail(userPriceChangeDetail);

priceWareUserPriceChangeDetail 'Цена посуды' (userPriceChangeDetail) = DATA DOUBLE (userPriceChangeDetail) IN baseGroup;

wareRangeUserPriceChangeDetail  (userPriceChangeDetail) = DATA range (userPriceChangeDetail);
wareRangeUserPriceChangeDetail (userPriceChangeDetail) <- rangeWareVal(wareUserPriceChangeDetail(userPriceChangeDetail),
    dateUserPriceChangeDetail(userPriceChangeDetail)) ON CHANGE itemUserPriceChangeDetail(userPriceChangeDetail);

numberWareRangeUserPriceChangeDetail 'НДС,номер по посуде' (userPriceChangeDetail) = dataRange(
    wareRangeUserPriceChangeDetail(userPriceChangeDetail));

dataWareRangeUserPriceChangeDetail 'НДС,% по посуде' (userPriceChangeDetail) = dataActingRateRangeDate(
    wareRangeUserPriceChangeDetail(userPriceChangeDetail), dateUserPriceChangeDetail(userPriceChangeDetail));

curWareUserPriceChangeDetail 'Текущая посуда (ИД)' (userPriceChangeDetail) = DATA ware(userPriceChangeDetail) IN idGroup;

curPriceWareUserPriceChangeDetail 'Текущая цена посуды' (userPriceChangeDetail) = DATA DOUBLE (userPriceChangeDetail) IN baseGroup;

curWareRangeUserPriceChangeDetail  (userPriceChangeDetail) = DATA range (userPriceChangeDetail);
curWareRangeUserPriceChangeDetail (userPriceChangeDetail) <- rangeWareVal(curWareUserPriceChangeDetail(userPriceChangeDetail),
    dateUserPriceChangeDetail(userPriceChangeDetail)) ON CHANGE itemUserPriceChangeDetail(userPriceChangeDetail);

curNumberWareRangeUserPriceChangeDetail 'Тек. НДС,номер по посуде' (userPriceChangeDetail) = dataRange(
    curWareRangeUserPriceChangeDetail(userPriceChangeDetail));

curDataWareRangeUserPriceChangeDetail 'Тек. НДС,% по посуде' (userPriceChangeDetail) = dataActingRateRangeDate(
    curWareRangeUserPriceChangeDetail(userPriceChangeDetail), dateUserPriceChangeDetail(userPriceChangeDetail));


isUserPriceChangeDetail(userPriceChangeDetail) = userPriceChangeDetail IS userPriceChangeDetail;

TABLE itemDepartmentStore (item, departmentStore);


//---------------------------- Количественные регистры (конкретная реализация) ----------------------------------------//

dateTimeBalanceItemLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeShipmentDetail(ledger),
                                                                  dateTimeReturnSupplierDetail(ledger),
                                                                  dateTimeInnerArrivalDetail(ledger),
                                                                  dateTimeWriteOffDetail(ledger),
                                                                  dateTimeStatementDetail(ledger),
                                                                  dateTimeInnerFlowDetail(ledger),
                                                                  dateTimeWastageDetail(ledger),
                                                                  dateTimeInventoryLedger(ledger),
                                                                  dateTimeBillDetail(ledger),
                                                                  dateTimeStudyInputDetail(ledger),
                                                                  dateTimeStudyOutputDetail(ledger) PERSISTENT INDEXED;

isPostedBalanceItemLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedShipmentDetail(ledger),
                                                              isPostedReturnSupplierDetail(ledger),
                                                              isPostedInnerArrivalDetail(ledger),
                                                              isPostedWriteOffDetail(ledger),
                                                              isPostedStatementDetail(ledger),
                                                              isPostedInnerFlowDetail(ledger),
                                                              isPostedWastageDetail(ledger),
                                                              isPostedInventoryLedger(ledger),
                                                              isPostedBillDetail(ledger),
                                                              isPostedStudyInputDetail(ledger),
                                                              isPostedStudyOutputDetail(ledger) PERSISTENT;

itemBalanceItemLedger (ledger) = UNION EXCLUSIVE itemShipmentDetail(ledger),
                                                 itemReturnSupplierDetail(ledger),
                                                 itemInnerArrivalDetail(ledger),
                                                 itemWriteOffDetail(ledger),
                                                 itemStatementDetail(ledger),
                                                 itemInnerFlowDetail(ledger),
                                                 itemWastageDetail(ledger),
                                                 itemInventoryLedger(ledger),
                                                 itemBillDetail(ledger),
                                                 itemStudyInputDetail(ledger),
                                                 itemStudyOutputDetail(ledger) PERSISTENT;

departmentStoreBalanceItemLedger (ledger) = UNION EXCLUSIVE departmentStoreShipmentDetail(ledger),
                                                            departmentStoreReturnSupplierDetail(ledger),
                                                            departmentStoreInnerArrivalDetail(ledger),
                                                            departmentStoreWriteOffDetail(ledger),
                                                            departmentStoreStatementDetail(ledger),
                                                            departmentStoreInnerFlowDetail(ledger),
                                                            departmentStoreWastageDetail(ledger),
                                                            departmentStoreInventoryLedger(ledger),
                                                            departmentStoreBillDetail(ledger),
                                                            departmentStoreStudyInputDetail(ledger),
                                                            departmentStoreStudyOutputDetail(ledger) PERSISTENT;

descriptionLedger 'Название документа' (ledger) = UNION EXCLUSIVE descriptionShipmentDetail(ledger),
                                                            descriptionInnerArrivalDetail(ledger),
                                                            descriptionWriteOffDetail(ledger),
                                                            descriptionStatementDetail(ledger),
                                                            descriptionInnerFlowDetail(ledger),
                                                            descriptionWastageDetail(ledger),
                                                            descriptionReturnSupplierDetail(ledger),
                                                            descriptionInventoryLedger(ledger),
                                                            descriptionUserPriceChangeUserPriceChangeDetail(ledger),
                                                            descriptionBillDetail(ledger),
                                                            descriptionStudyOutputDetail(ledger),
                                                            descriptionStudyInputDetail(ledger) PERSISTENT;


// ---------------------------- Расчет себестоимости -------------------------------- //

quantityBatch 'Кол-во' (ledger) = UNION EXCLUSIVE quantityShipmentDetail(ledger),
                                                 overQuantityStudyOutputDetail(ledger);

quantityOutAutoBalanceItemLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityWriteOffDetail(ledger),
                                                                     quantityStatementDetail(ledger),
                                                                     quantityInnerFlowDetail(ledger),
                                                                     quantityWastageDetail(ledger),
                                                                     quantityInventoryLedger(ledger),
                                                                     quantityBillDetail(ledger),
                                                                     quantityStudyInputDetail(ledger);

quantityOutUserBalanceItemLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityReturnSupplierDetail(ledger);

quantityOutBalanceItemLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityOutAutoBalanceItemLedger(ledger),
                                                                 quantityOutUserBalanceItemLedger(ledger);

quantityBalanceItemLedger 'Количество' (ledger) = UNION EXCLUSIVE quantityBatch(ledger),
                                                                  -quantityOutBalanceItemLedger(ledger),
                                                                  quantityInnerArrivalDetail(ledger) PERSISTENT;

// ---------------------------- Остаток по товару -------------------------------- //

currentBalanceItemLedger 'Текущий остаток' (item, departmentStore) = GROUP SUM quantityBalanceItemLedger (ledger) AND isPostedBalanceItemLedger(ledger)
                                                          BY itemBalanceItemLedger(ledger), departmentStoreBalanceItemLedger(ledger) PERSISTENT;

// без учета текущей даты/времени
balanceBItemLedgerDateTime (item, departmentStore, dateTime) = UNION SUM currentBalanceItemLedger(item, departmentStore) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM quantityBalanceItemLedger (ledger) AND dateTimeBalanceItemLedger(ledger) >= (dateTime AS DATETIME) AND isPostedBalanceItemLedger(ledger)
                                                                         BY itemBalanceItemLedger(ledger), departmentStoreBalanceItemLedger(ledger), dateTime](item, departmentStore, dateTime);

// с учетом текущей даты/времени
balanceAItemLedgerDateTime 'Остаток на дату' (item, departmentStore, dateTime) = UNION SUM currentBalanceItemLedger(item, departmentStore) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM quantityBalanceItemLedger (ledger) AND dateTimeBalanceItemLedger(ledger) > (dateTime AS DATETIME) AND isPostedBalanceItemLedger(ledger)
                                                                         BY itemBalanceItemLedger(ledger), departmentStoreBalanceItemLedger(ledger), dateTime](item, departmentStore, dateTime);

// --------------------------- Использование регистров количества (автоматическое заполнение) ---------------------------------

balanceDepartmentStoreItemWriteOff 'Текущий остаток' (writeOffDetail) =
    balanceDepartmentStoreItem(departmentStoreWriteOffDetail(writeOffDetail), itemWriteOffDetail(writeOffDetail)) PERSISTENT;

//---------------------------- Ценовые регистры (конкретная реализация) ----------------------------------------//

META metaCodeItemDepartmentStoreLedger(prefix)

    nameItem###prefix##Ledger 'Товар' (ledger) = nameAttributeItem(item###prefix##Ledger(ledger));
    nameDepartmentStore###prefix##Ledger 'Отдел магазина' (ledger) = name(departmentStore###prefix##Ledger(ledger));

    // todo : переделать на concat и deconcat

    order###prefix##Ledger = LIST(dateTime###prefix##Ledger(ledger), ledger) PERSISTENT;

    concatLedgerB###prefix##DateTime (item, departmentStore, dateTime) = GROUP MAX order###prefix##Ledger(ledger) AND
        isPosted###prefix##Ledger(ledger) AND dateTime###prefix##Ledger(ledger) < (dateTime AS DATETIME)
        BY item###prefix##Ledger(ledger), departmentStore###prefix##Ledger(ledger), dateTime;

    ledgerB###prefix##DateTime (item, departmentStore, dateTime) = concatLedgerB###prefix##DateTime(item, departmentStore, dateTime)[2];

    concatLedgerA###prefix##DateTime (item, departmentStore, dateTime) = GROUP MAX order###prefix##Ledger(ledger) AND
        isPosted###prefix##Ledger(ledger) AND dateTime###prefix##Ledger(ledger) <= (dateTime AS DATETIME)
        BY item###prefix##Ledger(ledger), departmentStore###prefix##Ledger(ledger), dateTime;

    ledgerA###prefix##DateTime (item, departmentStore, dateTime) = concatLedgerA###prefix##DateTime(item, departmentStore, dateTime)[2];

    concatLedgerCurrent###prefix (item, departmentStore) = GROUP MAX order###prefix##Ledger(ledger) AND
        isPosted###prefix##Ledger(ledger)
        BY item###prefix##Ledger(ledger), departmentStore###prefix##Ledger(ledger);

    currentLedger###prefix (item, departmentStore) = concatLedgerCurrent###prefix(item, departmentStore)[2];
END


// Цена изготовителя / импортера
dateTimeImporterPriceLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeShipmentDetail(ledger),
                                                                    dateTimeInnerArrivalDetail(ledger),
                                                                    dateTimeUserPriceChangeDetail(ledger),
                                                                    dateTimeStudyOutputDetail(ledger) PERSISTENT INDEXED;

isPostedImporterPriceLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedShipmentDetail(ledger),
                                                                isPostedInnerArrivalDetail(ledger),
                                                                isPostedUserPriceChangeDetail(ledger),
                                                                isPostedStudyOutputDetail(ledger) PERSISTENT;

itemImporterPriceLedger (ledger) = UNION EXCLUSIVE itemShipmentDetail(ledger),
                                                   itemInnerArrivalDetail(ledger),
                                                   itemUserPriceChangeDetail(ledger),
                                                   itemStudyOutputDetail(ledger) PERSISTENT;

departmentStoreImporterPriceLedger (ledger) = UNION EXCLUSIVE departmentStoreShipmentDetail(ledger),
                                                              departmentStoreInnerArrivalDetail(ledger),
                                                              departmentStoreUserPriceChangeDetail(ledger),
                                                              departmentStoreStudyOutputDetail(ledger) PERSISTENT;

priceImporterLedger 'Цена' (ledger) = UNION EXCLUSIVE importerPriceShipmentDetail(ledger),
                                                      importerPriceInnerArrivalDetail(ledger),
                                                      importerPriceUserPriceChangeDetail(ledger),
                                                      importerPriceStudyOutputDetail(ledger) PERSISTENT;
@metaCodeItemDepartmentStoreLedger(importerPrice);

priceImporterBLedgerDateTime 'Цена изготовителя (до)' (item, departmentStore, dateTime) = priceImporterLedger(ledgerBImporterPriceDateTime(item, departmentStore, dateTime));
priceImporterALedgerDateTime 'Цена изготовителя (после)' (item, departmentStore, dateTime) = priceImporterLedger(ledgerAImporterPriceDateTime(item, departmentStore, dateTime));

currentPriceImporterLedger 'Цена изготовителя' (item, departmentStore) = priceImporterLedger(currentLedgerImporterPrice(item, departmentStore));

// Цена поставщика
dateTimeSupplierPriceLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeShipmentDetail(ledger),
                                                                    dateTimeInnerArrivalDetail(ledger),
                                                                    dateTimeUserPriceChangeDetail(ledger),
                                                                    dateTimeStudyOutputDetail(ledger) PERSISTENT INDEXED;

isPostedSupplierPriceLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedShipmentDetail(ledger),
                                                                isPostedInnerArrivalDetail(ledger),
                                                                isPostedUserPriceChangeDetail(ledger),
                                                                isPostedStudyOutputDetail(ledger) PERSISTENT;

itemSupplierPriceLedger (ledger) = UNION EXCLUSIVE itemShipmentDetail(ledger),
                                                   itemInnerArrivalDetail(ledger),
                                                   itemUserPriceChangeDetail(ledger),
                                                   itemStudyOutputDetail(ledger) PERSISTENT;

departmentStoreSupplierPriceLedger (ledger) = UNION EXCLUSIVE departmentStoreShipmentDetail(ledger),
                                                              departmentStoreInnerArrivalDetail(ledger),
                                                              departmentStoreUserPriceChangeDetail(ledger),
                                                              departmentStoreStudyOutputDetail(ledger) PERSISTENT;

priceSupplierLedger 'Цена' (ledger) = UNION EXCLUSIVE supplierPriceShipmentDetail(ledger),
                                                      supplierPriceInnerArrivalDetail(ledger),
                                                      supplierPriceUserPriceChangeDetail(ledger),
                                                      supplierPriceStudyOutputDetail(ledger) PERSISTENT;
@metaCodeItemDepartmentStoreLedger(supplierPrice);

priceSupplierBLedgerDateTime 'Цена поставщика (до)' (item, departmentStore, dateTime) = priceSupplierLedger(ledgerBSupplierPriceDateTime(item, departmentStore, dateTime));
priceSupplierALedgerDateTime 'Цена поставщика (после)' (item, departmentStore, dateTime) = priceSupplierLedger(ledgerASupplierPriceDateTime(item, departmentStore, dateTime));

currentPriceSupplierLedger 'Цена поставщика' (item, departmentStore) = priceSupplierLedger(currentLedgerSupplierPrice(item, departmentStore));

// Цена посуды
dateTimeWarePriceLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeShipmentDetail(ledger),
                                                                dateTimeInnerArrivalDetail(ledger),
                                                                dateTimeUserPriceChangeDetail(ledger) PERSISTENT INDEXED;

isPostedWarePriceLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedShipmentDetail(ledger),
                                                            isPostedInnerArrivalDetail(ledger),
                                                            isPostedUserPriceChangeDetail(ledger) PERSISTENT;

itemWarePriceLedger (ledger) = UNION EXCLUSIVE itemShipmentDetail(ledger),
                                               itemInnerArrivalDetail(ledger),
                                               itemUserPriceChangeDetail(ledger) PERSISTENT;

departmentStoreWarePriceLedger (ledger) = UNION EXCLUSIVE departmentStoreShipmentDetail(ledger),
                                                          departmentStoreInnerArrivalDetail(ledger),
                                                          departmentStoreUserPriceChangeDetail(ledger) PERSISTENT;

wareWarePriceLedger(ledger) = UNION EXCLUSIVE wareShipmentDetail(ledger),
                                              wareInnerArrivalDetail(ledger),
                                              wareUserPriceChangeDetail(ledger) PERSISTENT;

priceWareWarePriceLedger 'Цена' (ledger) = UNION EXCLUSIVE priceWareShipmentDetail(ledger),
                                                           priceWareInnerArrivalDetail(ledger),
                                                           priceWareUserPriceChangeDetail(ledger) PERSISTENT;

nameWareWarePriceLedger 'Посуда' (ledger) = name(wareWarePriceLedger(ledger));
@metaCodeItemDepartmentStoreLedger(warePrice);

priceWareBLedgerDateTime 'Цена посуды (до)' (item, departmentStore, dateTime) = priceWareWarePriceLedger(ledgerBWarePriceDateTime(item, departmentStore, dateTime));
priceWareALedgerDateTime 'Цена посуды (после)' (item, departmentStore, dateTime) = priceWareWarePriceLedger(ledgerAWarePriceDateTime(item, departmentStore, dateTime));

currentPriceWareLedger 'Цена посуды' (item, departmentStore) = priceWareWarePriceLedger(currentLedgerWarePrice(item, departmentStore));

wareBLedgerDateTime (item, departmentStore, dateTime) = wareWarePriceLedger(ledgerBWarePriceDateTime(item, departmentStore, dateTime));

// Розничный НДС
dateTimeRetailVATLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeShipmentDetail(ledger),
                                                                dateTimeInnerArrivalDetail(ledger),
                                                                dateTimeUserPriceChangeDetail(ledger),
                                                                dateTimeStudyOutputDetail(ledger) PERSISTENT INDEXED;

isPostedRetailVATLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedShipmentDetail(ledger),
                                                            isPostedInnerArrivalDetail(ledger),
                                                            isPostedUserPriceChangeDetail(ledger),
                                                            isPostedStudyOutputDetail(ledger) PERSISTENT;

itemRetailVATLedger (ledger) = UNION EXCLUSIVE itemShipmentDetail(ledger),
                                               itemInnerArrivalDetail(ledger),
                                               itemUserPriceChangeDetail(ledger),
                                               itemStudyOutputDetail(ledger) PERSISTENT;

departmentStoreRetailVATLedger (ledger) = UNION EXCLUSIVE departmentStoreShipmentDetail(ledger),
                                                          departmentStoreInnerArrivalDetail(ledger),
                                                          departmentStoreUserPriceChangeDetail(ledger),
                                                          departmentStoreStudyOutputDetail(ledger) PERSISTENT;

rangeRetailLedger (ledger) = UNION EXCLUSIVE retailRangeShipmentDetail(ledger),
                                             retailRangeInnerArrivalDetail(ledger),
                                             retailRangeUserPriceChangeDetail(ledger),
                                             retailRangeStudyOutputDetail(ledger) PERSISTENT;

dataRetailLedger 'НДС, %' (ledger) = dataActingRateRangeDate(rangeRetailLedger(ledger), dateInTime(dateTimeRetailVATLedger(ledger))) PERSISTENT;

@metaCodeItemDepartmentStoreLedger(retailVAT);

rangeRetailBLedgerDateTime 'НДС (до)' (item, departmentStore, dateTime) = rangeRetailLedger(ledgerBRetailVATDateTime(item, departmentStore, dateTime));
dataRetailBLedgerDateTime 'НДС, % (до)' (item, departmentStore, dateTime) =
            dataActingRateRangeDate(rangeRetailBLedgerDateTime(item, departmentStore, dateTime), dateInTime(dateTime));
rangeRetailALedgerDateTime 'НДС (после)' (item, departmentStore, dateTime) = rangeRetailLedger(ledgerARetailVATDateTime(item, departmentStore, dateTime));
dataRetailALedgerDateTime 'НДС, % (после)' (item, departmentStore, dateTime) =
            dataActingRateRangeDate(rangeRetailALedgerDateTime(item, departmentStore, dateTime), dateInTime(dateTime));

currentRangeRetailLedger 'НДС' (item, departmentStore) = rangeRetailLedger(currentLedgerRetailVAT(item, departmentStore));
dataCurrentRetailLedger 'НДС, %' (item, departmentStore) =
            dataActingRateRange(currentRangeRetailLedger(item, departmentStore));


// Цена учетная
dateTimeAccountPriceLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeShipmentDetail(ledger),
                                                                   dateTimeInnerArrivalDetail(ledger),
                                                                   dateTimeUserPriceChangeDetail(ledger),
                                                                   dateTimeStudyOutputDetail(ledger) PERSISTENT INDEXED;

isPostedAccountPriceLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedShipmentDetail(ledger),
                                                               isPostedInnerArrivalDetail(ledger),
                                                               isPostedUserPriceChangeDetail(ledger),
                                                               isPostedStudyOutputDetail(ledger) PERSISTENT;

itemAccountPriceLedger (ledger) = UNION EXCLUSIVE itemShipmentDetail(ledger),
                                                  itemInnerArrivalDetail(ledger),
                                                  itemUserPriceChangeDetail(ledger),
                                                  itemStudyOutputDetail(ledger) PERSISTENT;


departmentStoreAccountPriceLedger (ledger) = UNION EXCLUSIVE departmentStoreShipmentDetail(ledger),
                                                             departmentStoreInnerArrivalDetail(ledger),
                                                             departmentStoreUserPriceChangeDetail(ledger),
                                                             departmentStoreStudyOutputDetail(ledger) PERSISTENT;


priceAccountLedger 'Цена' (ledger) = UNION EXCLUSIVE retailPriceShipmentDetail(ledger),
                                                     retailPriceInnerArrivalDetail(ledger),
                                                     retailPriceUserPriceChangeDetail(ledger),
                                                     retailPriceStudyOutputDetail(ledger) PERSISTENT;

@metaCodeItemDepartmentStoreLedger(accountPrice);

priceAccountBLedgerDateTime 'Учетная цена (до)' (item, departmentStore, dateTime) = priceAccountLedger(ledgerBAccountPriceDateTime(item, departmentStore, dateTime));
priceAccountALedgerDateTime 'Учетная цена (после)' (item, departmentStore, dateTime) = priceAccountLedger(ledgerAAccountPriceDateTime(item, departmentStore, dateTime));

currentPriceAccountLedger 'Учетная цена' (item, departmentStore) = priceAccountLedger(currentLedgerAccountPrice(item, departmentStore));

// Цена розничная
dateTimeRetailPriceLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeShipmentDetail(ledger),
                                                                  dateTimeInnerArrivalDetail(ledger),
                                                                  dateTimeUserPriceChangeDetail(ledger),
                                                                  dateTimeStudyOutputDetail(ledger) PERSISTENT INDEXED;

isPostedRetailPriceLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedShipmentDetail(ledger),
                                                              isPostedInnerArrivalDetail(ledger),
                                                              isPostedUserPriceChangeDetail(ledger),
                                                              isPostedStudyOutputDetail(ledger) PERSISTENT;

itemRetailPriceLedger (ledger) = UNION EXCLUSIVE itemShipmentDetail(ledger),
                                                 itemInnerArrivalDetail(ledger),
                                                 itemUserPriceChangeDetail(ledger),
                                                 itemStudyOutputDetail(ledger) PERSISTENT;

departmentStoreRetailPriceLedger (ledger) = UNION EXCLUSIVE departmentStoreShipmentDetail(ledger),
                                                            departmentStoreInnerArrivalDetail(ledger),
                                                            departmentStoreUserPriceChangeDetail(ledger),
                                                            departmentStoreStudyOutputDetail(ledger) PERSISTENT;

priceRetailLedger 'Цена' (ledger) = UNION EXCLUSIVE retailPriceShipmentDetail(ledger),
                                                    retailPriceInnerArrivalDetail(ledger),
                                                    retailPriceUserPriceChangeDetail(ledger),
                                                    retailPriceStudyOutputDetail(ledger) PERSISTENT;

@metaCodeItemDepartmentStoreLedger(retailPrice);

priceRetailBLedgerDateTime 'Розничная цена (до)' (item, departmentStore, dateTime) = priceRetailLedger(ledgerBRetailPriceDateTime(item, departmentStore, dateTime));
priceRetailALedgerDateTime 'Розничная цена (после)' (item, departmentStore, dateTime) = priceRetailLedger(ledgerARetailPriceDateTime(item, departmentStore, dateTime));

currentPriceRetailLedger 'Розничная цена' (item, departmentStore) = priceRetailLedger(currentLedgerRetailPrice(item, departmentStore)) PERSISTENT;
ledgerPriceBarcodeDepartmentStore 'Текущая цена по учету' (barcode, departmentStore) = currentPriceRetailLedger(skuBarcode(barcode), departmentStore);

// --------------------------- Использование регистров (автоматическое заполнение) ---------------------------------

balanceBeforeShipmentShipmentDetail (shipmentDetail) <- balanceBItemLedgerDateTime (
                itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateTimeShipmentDetail(shipmentDetail))
                ON CHANGE itemShipmentDetail(shipmentDetail);

balanceBeforeInnerArrivalInnerArrivalDetail(innerArrivalDetail) <- balanceBItemLedgerDateTime (
                itemInnerArrivalDetail(innerArrivalDetail), departmentStoreInnerArrivalDetail(innerArrivalDetail), dateTimeInnerArrivalDetail(innerArrivalDetail))
                ON CHANGE itemInnerArrivalDetail(innerArrivalDetail);


curImporterPriceShipmentDetail (shipmentDetail) <- priceImporterBLedgerDateTime (
                itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateTimeShipmentDetail(shipmentDetail))
                ON CHANGE itemShipmentDetail(shipmentDetail);

curSupplierPriceShipmentDetail (shipmentDetail) <- priceSupplierBLedgerDateTime (
                itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateTimeShipmentDetail(shipmentDetail))
                ON CHANGE itemShipmentDetail(shipmentDetail);

curRetailRangeShipmentDetail (shipmentDetail) <- rangeRetailBLedgerDateTime(
                itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateTimeShipmentDetail(shipmentDetail))
                ON CHANGE itemShipmentDetail(shipmentDetail);

curRetailPriceShipmentDetail (shipmentDetail) <- priceAccountBLedgerDateTime(
                itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateTimeShipmentDetail(shipmentDetail))
                ON CHANGE itemShipmentDetail(shipmentDetail);

curPriceWareShipmentDetail (shipmentDetail) <- priceWareBLedgerDateTime(
                itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateTimeShipmentDetail(shipmentDetail))
                ON CHANGE wareShipmentDetail(shipmentDetail);

curWareShipmentDetail (shipmentDetail)  <- wareBLedgerDateTime(
                itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateTimeShipmentDetail(shipmentDetail))
                ON CHANGE itemShipmentDetail(shipmentDetail);


accountPriceWriteOffDetail (writeOffDetail) <- priceAccountBLedgerDateTime(
                itemWriteOffDetail(writeOffDetail), departmentStoreWriteOffDetail(writeOffDetail), dateTimeWriteOffDetail(writeOffDetail))
                ON CHANGE itemWriteOffDetail(writeOffDetail);

//retailPriceWriteOffDetail 'Розничная цена' (writeOffDetail) = priceRetailBLedgerDateTime (
//                itemWriteOffDetail(writeOffDetail), departmentStoreWriteOffDetail(writeOffDetail), dateTimeWriteOffDetail(writeOffDetail));
retailPriceWriteOffDetail (writeOffDetail) <- priceRetailBLedgerDateTime(
                itemWriteOffDetail(writeOffDetail), departmentStoreWriteOffDetail(writeOffDetail), dateTimeWriteOffDetail(writeOffDetail))
                ON CHANGE itemWriteOffDetail(writeOffDetail);

supplierPriceWriteOffDetail (writeOffDetail) <- priceSupplierBLedgerDateTime(
                itemWriteOffDetail(writeOffDetail), departmentStoreWriteOffDetail(writeOffDetail), dateTimeWriteOffDetail(writeOffDetail))
                ON CHANGE itemWriteOffDetail(writeOffDetail);

wareWriteOffDetail (writeOffDetail)  <- wareBLedgerDateTime(
                itemWriteOffDetail(writeOffDetail), departmentStoreWriteOffDetail(writeOffDetail), dateTimeWriteOffDetail(writeOffDetail))
                ON CHANGE itemWriteOffDetail(writeOffDetail);

priceWareWriteOffDetail (writeOffDetail) <- priceWareBLedgerDateTime(
                itemWriteOffDetail(writeOffDetail), departmentStoreWriteOffDetail(writeOffDetail), dateTimeWriteOffDetail(writeOffDetail))
                ON CHANGE itemWriteOffDetail(writeOffDetail);

retailRangeWriteOffDetail (writeOffDetail) <- rangeRetailBLedgerDateTime(
                itemWriteOffDetail(writeOffDetail), departmentStoreWriteOffDetail(writeOffDetail), dateTimeWriteOffDetail(writeOffDetail))
                ON CHANGE itemWriteOffDetail(writeOffDetail);


retailPriceInnerFlowDetail (innerFlowDetail) <- priceRetailBLedgerDateTime(
                itemInnerFlowDetail(innerFlowDetail), departmentStoreInnerFlowDetail(innerFlowDetail), dateTimeInnerFlowDetail(innerFlowDetail))
                ON CHANGE itemInnerFlowDetail(innerFlowDetail);

importerPriceInnerFlowDetail (innerFlowDetail) <- priceImporterBLedgerDateTime(
                itemInnerFlowDetail(innerFlowDetail), departmentStoreInnerFlowDetail(innerFlowDetail), dateTimeInnerFlowDetail(innerFlowDetail))
                ON CHANGE itemInnerFlowDetail(innerFlowDetail);

supplierPriceInnerFlowDetail (innerFlowDetail) <- priceSupplierBLedgerDateTime(
                itemInnerFlowDetail(innerFlowDetail), departmentStoreInnerFlowDetail(innerFlowDetail), dateTimeInnerFlowDetail(innerFlowDetail))
                ON CHANGE itemInnerFlowDetail(innerFlowDetail);

retailRangeInnerFlowDetail (innerFlowDetail) <- rangeRetailBLedgerDateTime(
                itemInnerFlowDetail(innerFlowDetail), departmentStoreInnerFlowDetail(innerFlowDetail), dateTimeInnerFlowDetail(innerFlowDetail))
                ON CHANGE itemInnerFlowDetail(innerFlowDetail);

priceWareInnerFlowDetail (innerFlowDetail) <- priceWareBLedgerDateTime(
                itemInnerFlowDetail(innerFlowDetail), departmentStoreInnerFlowDetail(innerFlowDetail), dateTimeInnerFlowDetail(innerFlowDetail))
                ON CHANGE itemInnerFlowDetail(innerFlowDetail);

wareInnerFlowDetail (innerFlowDetail) <- wareBLedgerDateTime(
                itemInnerFlowDetail(innerFlowDetail), departmentStoreInnerFlowDetail(innerFlowDetail), dateTimeInnerFlowDetail(innerFlowDetail))
                ON CHANGE itemInnerFlowDetail(innerFlowDetail);


curRetailPriceInnerArrivalDetail (innerArrivalDetail) <- priceRetailBLedgerDateTime(
                itemInnerArrivalDetail(innerArrivalDetail), departmentStoreInnerArrivalDetail(innerArrivalDetail), dateTimeInnerArrivalDetail(innerArrivalDetail))
                ON CHANGE itemInnerArrivalDetail(innerArrivalDetail);

curImporterPriceInnerArrivalDetail (innerArrivalDetail) <- priceImporterBLedgerDateTime(
                itemInnerArrivalDetail(innerArrivalDetail), departmentStoreInnerArrivalDetail(innerArrivalDetail), dateTimeInnerArrivalDetail(innerArrivalDetail))
                ON CHANGE itemInnerArrivalDetail(innerArrivalDetail);

curSupplierPriceInnerArrivalDetail (innerArrivalDetail) <- priceSupplierBLedgerDateTime(
                itemInnerArrivalDetail(innerArrivalDetail), departmentStoreInnerArrivalDetail(innerArrivalDetail), dateTimeInnerArrivalDetail(innerArrivalDetail))
                ON CHANGE itemInnerArrivalDetail(innerArrivalDetail);

curRetailRangeInnerArrivalDetail (innerArrivalDetail) <- rangeRetailBLedgerDateTime(
                itemInnerArrivalDetail(innerArrivalDetail), departmentStoreInnerArrivalDetail(innerArrivalDetail), dateTimeInnerArrivalDetail(innerArrivalDetail))
                ON CHANGE itemInnerArrivalDetail(innerArrivalDetail);

curPriceWareInnerArrivalDetail (innerArrivalDetail) <- priceWareBLedgerDateTime(
                itemInnerArrivalDetail(innerArrivalDetail), departmentStoreInnerArrivalDetail(innerArrivalDetail), dateTimeInnerArrivalDetail(innerArrivalDetail))
                ON CHANGE itemInnerArrivalDetail(innerArrivalDetail);

curWareInnerArrivalDetail (innerArrivalDetail) <- wareBLedgerDateTime(
                itemInnerArrivalDetail(innerArrivalDetail), departmentStoreInnerArrivalDetail(innerArrivalDetail), dateTimeInnerArrivalDetail(innerArrivalDetail))
                ON CHANGE itemInnerArrivalDetail(innerArrivalDetail);

curRetailPriceReturnSupplierDetail (returnSupplierDetail) <- priceAccountBLedgerDateTime(
                itemReturnSupplierDetail(returnSupplierDetail), departmentStoreReturnSupplierDetail(returnSupplierDetail),
                dateTimeReturnSupplierDetail(returnSupplierDetail)) ON CHANGE itemReturnSupplierDetail(returnSupplierDetail);

curSupplierRangeReturnSupplierDetail (returnSupplierDetail) <- suppliersRangeItemVal(
                itemReturnSupplierDetail(returnSupplierDetail), dateReturnSupplierDetail(returnSupplierDetail))
                ON CHANGE itemReturnSupplierDetail(returnSupplierDetail);

curRetailRangeReturnSupplierDetail (returnSupplierDetail) <- rangeRetailBLedgerDateTime(
                itemReturnSupplierDetail(returnSupplierDetail), departmentStoreReturnSupplierDetail(returnSupplierDetail),
                dateTimeReturnSupplierDetail(returnSupplierDetail)) ON CHANGE itemReturnSupplierDetail(returnSupplierDetail);

curImporterPriceReturnSupplierDetail (returnSupplierDetail) <- priceImporterBLedgerDateTime (
                itemReturnSupplierDetail(returnSupplierDetail), departmentStoreReturnSupplierDetail(returnSupplierDetail),
                dateTimeReturnSupplierDetail(returnSupplierDetail)) ON CHANGE itemReturnSupplierDetail(returnSupplierDetail);

curSupplierPriceReturnSupplierDetail (returnSupplierDetail) <- priceSupplierBLedgerDateTime (
                itemReturnSupplierDetail(returnSupplierDetail), departmentStoreReturnSupplierDetail(returnSupplierDetail),
                dateTimeReturnSupplierDetail(returnSupplierDetail)) ON CHANGE itemReturnSupplierDetail(returnSupplierDetail);

curWareReturnSupplierDetail (returnSupplierDetail)  <- wareBLedgerDateTime(
                itemReturnSupplierDetail(returnSupplierDetail), departmentStoreReturnSupplierDetail(returnSupplierDetail),
                dateTimeReturnSupplierDetail(returnSupplierDetail)) ON CHANGE itemReturnSupplierDetail(returnSupplierDetail);

curPriceWareReturnSupplierDetail (returnSupplierDetail) <- priceWareBLedgerDateTime(
                itemReturnSupplierDetail(returnSupplierDetail), departmentStoreReturnSupplierDetail(returnSupplierDetail),
                dateTimeReturnSupplierDetail(returnSupplierDetail)) ON CHANGE itemReturnSupplierDetail(returnSupplierDetail);

retailSumReturnSupplierDetail 'Розничная сумма' (returnSupplierDetail) =
    quantityReturnSupplierDetail(returnSupplierDetail) * retailPriceReturnSupplierDetail(returnSupplierDetail);
retailSumReturnSupplier 'Розничная сумма' (returnSupplier) = GROUP SUM retailSumReturnSupplierDetail(shipmentDetail)
                                                             BY returnSupplierReturnSupplierDetail(returnSupplierDetail) IN documentSumGroup;

// ---------------------------------- Переоценка на возврате ------------------------------------------

CLASS priceChangeReturnSupplier 'Переоценка на возврате' : priceChangeDocument;
CLASS priceChangeReturnSupplierDetail 'Строка переоценки на возврате' : priceChangeDocumentDetail;

needToPriceChangeReturnSupplierDetail (returnSupplierDetail) = retailPriceReturnSupplierDetail(returnSupplierDetail) != curRetailPriceReturnSupplierDetail(returnSupplierDetail);

needToPriceChangeReturnSupplier (returnSupplier) = GROUP SUM 1 IF needToPriceChangeReturnSupplierDetail(returnSupplierDetail)
                                                   BY returnSupplierReturnSupplierDetail(returnSupplierDetail);

@metaCodeDetailAggregation(returnSupplier, priceChangeReturnSupplier, needToPriceChangeReturnSupplier);

// атрибуты документа переоценки

dateTimePriceChangeReturnSupplier 'Дата/время' (priceChangeReturnSupplier) = dateTimeReturnSupplier(returnSupplierPriceChangeReturnSupplier(priceChangeReturnSupplier));
datePriceChangeReturnSupplier 'Дата' (priceChangeReturnSupplier) = dateReturnSupplier(returnSupplierPriceChangeReturnSupplier(priceChangeReturnSupplier));
isPostedPriceChangeReturnSupplier 'Закрыт' (priceChangeReturnSupplier) = isPostedReturnSupplier(returnSupplierPriceChangeReturnSupplier(priceChangeReturnSupplier));
numberPriceChangeReturnSupplier 'Номер накладной' (priceChangeReturnSupplier) = numberObject(returnSupplierPriceChangeReturnSupplier(priceChangeReturnSupplier));
seriesPriceChangeReturnSupplier 'Серия накладной' (priceChangeReturnSupplier) = seriesObject(returnSupplierPriceChangeReturnSupplier(priceChangeReturnSupplier));
descriptionPriceChangeReturnSupplier 'Название документа' (priceChangeReturnSupplier) = descriptionReturnSupplier(returnSupplierPriceChangeReturnSupplier(priceChangeReturnSupplier));

numberDisposalPriceChangeReturnSupplier '№ распоряжения на переоценку' (priceChangeReturnSupplier) =numberDisposalReturnSupplier(returnSupplierPriceChangeReturnSupplier(priceChangeReturnSupplier));

supplierPriceChangeReturnSupplier (priceChangeReturnSupplier) = supplierReturnSupplier(returnSupplierPriceChangeReturnSupplier(priceChangeReturnSupplier));
nameSupplierPriceChangeReturnSupplier 'Поставщик' (priceChangeReturnSupplier) = name(supplierPriceChangeReturnSupplier(priceChangeReturnSupplier));

departmentStorePriceChangeReturnSupplier (priceChangeReturnSupplier) = departmentStoreReturnSupplier(returnSupplierPriceChangeReturnSupplier(priceChangeReturnSupplier));
nameDepartmentStorePriceChangeReturnSupplier 'Отдел магазина' (priceChangeReturnSupplier) = name(departmentStorePriceChangeReturnSupplier(priceChangeReturnSupplier));

// атрибуты детализации документа переоценки

itemPriceChangeReturnSupplierDetail (priceChangeReturnSupplierDetail) =
    itemReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));
nameItemPriceChangReturnSupplierDetail 'Товар' (priceChangeReturnSupplierDetail) =
    nameAttributeItem(itemPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));

quantityPriceChangeReturnSupplierDetail 'Остаток' (priceChangeReturnSupplierDetail) =
    quantityReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));

curImporterPriceChangeReturnSupplierDetail 'Текущая цена изготовителя' (priceChangeReturnSupplierDetail) = DATA DOUBLE (priceChangeReturnSupplierDetail);
curImporterPriceChangeReturnSupplierDetail (priceChangeReturnSupplierDetail) <-
    priceImporterBLedgerDateTime(itemReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)),
                                 departmentStoreReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)),
                                 dateTimeReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)))
                                 ON CHANGE itemReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));

curSupplierPriceChangeReturnSupplierDetail 'Текущая цена поставщика' (priceChangeReturnSupplierDetail) = DATA DOUBLE (priceChangeReturnSupplierDetail);
curSupplierPriceChangeReturnSupplierDetail (priceChangeReturnSupplierDetail) <-
    priceSupplierBLedgerDateTime(itemReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)),
                                 departmentStoreReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)),
                                 dateTimeReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)))
                                 ON CHANGE itemReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));


importerPriceChangeReturnSupplierDetail 'Новая цена изготовителя' (priceChangeReturnSupplierDetail) =
    importerPriceReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));

supplierPriceChangeReturnSupplierDetail 'Новая цена поставщика' (priceChangeReturnSupplierDetail) =
    supplierPriceReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));

curDataRetailRangePriceChangeReturnSupplierDetail 'Текущий НДС, %' (priceChangeReturnSupplierDetail) =
    curDataRetailRangeReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));
dataRetailRangePriceChangeReturnSupplierDetail 'Новый НДС, %' (priceChangeReturnSupplierDetail) =
    dataRetailRangeShipmentDetail(batchReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)));

curRetailPriceChangeReturnSupplierDetail 'Текущая розничная цена' (priceChangeReturnSupplierDetail) =
    curRetailPriceReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));
retailPriceChangeReturnSupplierDetail 'Новая розничная цена' (priceChangeReturnSupplierDetail) =
    retailPriceShipmentDetail(batchReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)));

warePriceChangeReturnSupplierDetail 'Новая посуда' (priceChangeReturnSupplierDetail) =
    wareReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));
priceWarePriceChangeReturnSupplierDetail 'Новая цена посуды' (priceChangeReturnSupplierDetail) =
    priceWareReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));

curWarePriceChangeReturnSupplierDetail 'Текущая посуда' (priceChangeReturnSupplierDetail) = DATA ware (priceChangeReturnSupplierDetail);
curWarePriceChangeReturnSupplierDetail (priceChangeReturnSupplierDetail) <-
    wareBLedgerDateTime(itemReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)),
                        departmentStoreReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)),
                        dateTimeReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)))
                        ON CHANGE itemReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));

curPriceWarePriceChangeReturnSupplierDetail 'Текущая цена посуды' (priceChangeReturnSupplierDetail) = DATA DOUBLE (priceChangeReturnSupplierDetail);
curPriceWarePriceChangeReturnSupplierDetail (priceChangeReturnSupplierDetail) <-
    priceWareBLedgerDateTime(itemReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)),
                             departmentStoreReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)),
                             dateTimeReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail)))
                             ON CHANGE itemReturnSupplierDetail(returnSupplierDetailPriceChangeReturnSupplierDetail(priceChangeReturnSupplierDetail));

//----------------------------------- Подбор товаров -------------------------------------------------------

quantityInputItem 'Кол-во' = SESSION DATA DOUBLE (item);

FORM itemDepartmentStoreInput 'Подбор товаров'
    OBJECTS d=departmentStore FIXED PANEL
    PROPERTIES(d) READONLY name

    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY gname = name(g)
    ORDER BY gname

    OBJECTS i=item
    PROPERTIES barcodeBarcodeSku(i) READONLY, nameAttributeItemGroupItem(g, i) READONLY, shortNameUnitOfMeasureItem(i) READONLY
    FILTERS nameAttributeItemGroupItem(g, i)
    ORDER BY nameAttributeItemGroupItem

    PROPERTIES currentBalanceItemLedger(i, d), quantityInputItem(i)

    FILTERGROUP filterBalance
        FILTER 'На остатках' 'F10' currentBalanceItemLedger(i, d)
    FILTERGROUP filterSelected
        FILTER 'Выбранные' 'F9' quantityInputItem(i)
;

DESIGN itemDepartmentStoreInput FROM DEFAULT {
    POSITION treeGroup.box TO THE LEFT i.box;

    treeGroup.tree {
        fillHorizontal = 0.4;
    }

    i.grid {
        defaultComponent = TRUE;
    }
}

META metaCodeInputMultipleItems (object)

    inputMultipleItems###object 'Подбор товаров' = ACTION (object) {
        FORM itemDepartmentStoreInput OBJECTS d = departmentStore###object(object) MODAL;
        IF formResult() == formResult.ok THEN {
            FOR quantityInputItem(item) DO {
                ADDOBJ object##Detail;
                FOR w == addedObject() DO {
                    SET object###object##Detail(w) <- object AS object;
                    SET item###object##Detail(w) <- item AS item;
                    SET quantity###object##Detail(w) <- quantityInputItem(item);
                }
            }
        }
        SET quantityInputItem(item) <- NULL;
    } TOOLBAR;

END

//------------------------------------------------Подбор товара для возврата поставщику-----------------------------------------

FORM itemDepartmentStoreSupplierInput 'Подбор товаров'
    OBJECTS d=departmentStore FIXED PANEL
    PROPERTIES(d) READONLY name

    OBJECTS s=supplier FIXED PANEL
    PROPERTIES(s) READONLY name

    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY gname = name(g)
    ORDER BY gname

    OBJECTS i=item
    PROPERTIES barcodeBarcodeSku(i) READONLY, nameAttributeItemGroupItem(g, i) READONLY, shortNameUnitOfMeasureItem(i) READONLY
    FILTERS nameAttributeItemGroupItem(g, i)
    ORDER BY nameAttributeItemGroupItem

    PROPERTIES currentBalanceItemLedger(i, d), quantityInputItem(i)

    FILTERGROUP filterSupply
        FILTER 'Поставлявшиеся' 'F11' isSumQuantityItemShipment(d, s, i) DEFAULT
    FILTERGROUP filterBalance
        FILTER 'На остатках' 'F10' currentBalanceItemLedger(i, d) DEFAULT
    FILTERGROUP filterSelected
        FILTER 'Выбранные' 'F9' quantityInputItem(i)
;

DESIGN itemDepartmentStoreSupplierInput FROM DEFAULT {
    POSITION treeGroup.box TO THE LEFT i.box;
    POSITION d.box TO THE LEFT s.box;

    treeGroup.tree {
        fillHorizontal = 0.4;
    }

    i.grid {
        defaultComponent = TRUE;
    }
}

META metaCodeInputMultipleItemsSupplier (object)

    inputMultipleItemsSupplier###object 'Подбор товаров' = ACTION (object) {
        FORM itemDepartmentStoreSupplierInput OBJECTS d = departmentStore###object(object), s = supplier###object(object) MODAL;
        IF formResult() == formResult.ok THEN {
            FOR quantityInputItem(item) DO {
                ADDOBJ object##Detail;
                FOR w == addedObject() DO {
                    SET object###object##Detail(w) <- object AS object;
                    SET item###object##Detail(w) <- item AS item;
                    SET quantity###object##Detail(w) <- quantityInputItem(item);
                }
            }
        }
        // todo : не работает, но надо включить
    //    SET quantityInputItem(item) <- NULL;
    } TOOLBAR;

END

//----------------------------------- Загрузка в ВУ -------------------------------------------------------

inGroupMachineryItem 'Вкл' (groupMachinery, item) = groupMachinery IS groupMachinery
                                                    AND item IS item
                                                         AND NOT (filterItemsGroupMachinery(groupMachinery) AND NOT inGroupMachineryItemGroup(groupMachinery, itemGroupSku(item)))
                                                         AND NOT (groupMachinery IS groupScales AND NOT passScalesItem(item));

CLASS ABSTRACT machineryPriceTransaction 'Загрузка прайса в оборудование' : historyObject;
TABLE machineryPriceTransaction (machineryPriceTransaction);
TABLE machineryPriceTransactionBarcode (machineryPriceTransaction, barcode);

CLASS cashRegisterPriceTransaction 'Загрузка прайса в кассы' : machineryPriceTransaction;
CLASS scalesPriceTransaction 'Загрузка прайса в весы' : machineryPriceTransaction;
CLASS checkPriceTransaction 'Загрузка прайса в прайс чекеры' : machineryPriceTransaction;

groupCashRegisterCashRegisterPriceTransaction 'Группа касс' = DATA groupCashRegister (cashRegisterPriceTransaction);
groupScalesScalesRegisterPriceTransaction 'Группа весов' = DATA groupScales (scalesPriceTransaction);
groupCheckCheckRegisterPriceTransaction 'Группа прайс чекеров' = DATA groupCheck (checkPriceTransaction);

groupMachineryMachineryPriceTransaction 'Группа оборудования (ИД)' (transaction) = UNION EXCLUSIVE groupCashRegisterCashRegisterPriceTransaction(transaction),
                                                                                                   groupScalesScalesRegisterPriceTransaction(transaction),
                                                                                                   groupCheckCheckRegisterPriceTransaction(transaction) PERSISTENT;

nameGroupMachineryMachineryPriceTransaction 'Группа оборудования' (transaction) = nameGroupMachinery(groupMachineryMachineryPriceTransaction(transaction));

departmentStoreMachineryPriceTransaction (transaction) = departmentStoreGroupMachinery(groupMachineryMachineryPriceTransaction(transaction));

equipmentServerMachineryPriceTransaction (transaction) = equipmentServerGroupMachinery(groupMachineryMachineryPriceTransaction(transaction));

sidEquipmentServerMachineryPriceTransaction (transaction) = sidEquipmentServer(equipmentServerMachineryPriceTransaction (transaction));

dateMachineryPriceTransaction 'Дата' = DATA DATE (machineryPriceTransaction);
dateMachineryPriceTransaction (transaction) <- currentDate() ON ASSIGN transaction IS machineryPriceTransaction;

timeMachineryPriceTransaction 'Время' = DATA TIME (machineryPriceTransaction);
timeMachineryPriceTransaction (transaction) <- currentTime() ON ASSIGN transaction IS machineryPriceTransaction;

dateTimeMachineryPriceTransaction 'Дата/время' (transaction) = toDateTime(dateMachineryPriceTransaction(transaction), timeMachineryPriceTransaction(transaction));

snapshotMachineryPriceTransaction 'Целиком' = DATA BOOLEAN (machineryPriceTransaction);

succeededMachineryPriceTransaction 'Загружена' = DATA BOOLEAN (machineryPriceTransaction);
canceledMachineryPriceTransaction 'Отменена' = DATA BOOLEAN (machineryPriceTransaction);
processMachineryPriceTransaction 'Требуется загрузка' = machineryPriceTransaction IS machineryPriceTransaction AND NOT
                                                        succeededMachineryPriceTransaction(machineryPriceTransaction) AND NOT
                                                        canceledMachineryPriceTransaction(machineryPriceTransaction);

inMachineryPriceTransactionMachinery 'Вкл' = DATA BOOLEAN (machineryPriceTransaction, machinery);
nppsMachineryPriceTransaction 'Номера устройств' = GROUP CONCAT castToString3(nppMachinery(machinery)) IF inMachineryPriceTransactionMachinery(transaction, machinery), ',' BY transaction PERSISTENT;

orderMachineryPriceTransaction (transaction) = LIST(dateTimeMachineryPriceTransaction(transaction), transaction) PERSISTENT;

inMachineryPriceTransactionBarcode 'Вкл' = DATA BOOLEAN (machineryPriceTransaction, barcode);
nameMachineryPriceTransactionBarcode 'Наименование' = DATA STRING[255] (machineryPriceTransaction, barcode);
priceMachineryPriceTransactionBarcode 'Цена' = DATA DOUBLE (machineryPriceTransaction, barcode);

TABLE barcodeGroupMachinery (barcode, groupMachinery);

lastOrderTransactionBarcodeGroupMachinery (barcode, groupMachinery) = GROUP MAX orderMachineryPriceTransaction(transaction)
                                                                          AND inMachineryPriceTransactionBarcode(transaction, barcode)
                                                                          AND NOT snapshotMachineryPriceTransaction(transaction)
                                                                          AND NOT canceledMachineryPriceTransaction(transaction)
                                                                      BY barcode, groupMachineryMachineryPriceTransaction(transaction);
lastTransactionBarcodeGroupMachinery (barcode, groupMachinery) = lastOrderTransactionBarcodeGroupMachinery(barcode, groupMachinery) [2] PERSISTENT;

transactionNameBarcodeGroupMachinery 'Текущее наименование в оборудовании' (barcode, groupMachinery)  =
    nameMachineryPriceTransactionBarcode(lastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode);

transactionPriceBarcodeGroupMachinery 'Текущая цена в оборудовании' (barcode, groupMachinery)  =
    priceMachineryPriceTransactionBarcode(lastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode);
ledgerPriceBarcodeGroupMachinery 'Текущая цена по учету' (barcode, groupMachinery) = ledgerPriceBarcodeDepartmentStore(barcode, departmentStoreGroupMachinery(groupMachinery));

commentMachineryPriceTransaction 'Примечание' = DATA STRING[30] (machineryPriceTransaction);

isDraftPriceTransactionDocument 'Открыт' (document) = UNION EXCLUSIVE isDraftShipment(document),
                                                                      isDraftInnerArrival(document),
                                                                      isDraftUserPriceChange(document),
                                                                      isDraftActOfStudy(document);

descriptionPriceTransactionDocument 'Название документа загрузки' (document) = UNION EXCLUSIVE descriptionShipment(document),
                                                                                               descriptionInnerArrival(document),
                                                                                               descriptionUserPriceChange(document),
                                                                                               descriptionActOfStudy(document);

priceTransactionDocumentMachineryPriceTransaction = DATA priceTransactionDocument (machineryPriceTransaction);
descriptionPriceTransactionDocumentMachineryPriceTransaction 'Основание загрузки' (transaction) =
    descriptionPriceTransactionDocument(priceTransactionDocumentMachineryPriceTransaction(transaction));

// todo : persistent почему-то не работает
descriptionMachineryPriceTransaction 'Основание' (document) = UNION OVERRIDE descriptionPriceTransactionDocumentMachineryPriceTransaction(document),
                                                                             commentMachineryPriceTransaction(document);

sentPriceTransactionDocument 'Принят к загрузке в оборудование' = DATA BOOLEAN (priceTransactionDocument);
sentPriceTransactionDocument(document) <- NULL ON ASSIGN isDraftPriceTransactionDocument(document);

// todo : это свойство тоже не становится PERSISTENT
countProcessPriceTransactionDocument 'Кол-во ожидающих транзакций' (document) = GROUP SUM 1 IF processMachineryPriceTransaction(transaction)
                                                                                 BY priceTransactionDocumentMachineryPriceTransaction(transaction) PERSISTENT;

succeededPriceTransactionDocument 'Загружен в оборудование' (document) = sentPriceTransactionDocument (document) AND NOT countProcessPriceTransactionDocument(document);

statusEquipmentPriceTransactionDocument 'Статус загрузки в оборудование' (document) =
                                                        CASE
                                                            WHEN succeededPriceTransactionDocument(document) THEN 'Успешно загружен' IF document IS priceTransactionDocument
                                                            WHEN sentPriceTransactionDocument(document) THEN 'Принят к загрузке' IF document IS priceTransactionDocument
                                                            DEFAULT 'Не загружен' IF document IS priceTransactionDocument
                                                        END;

// перезагрузка прайса целиком
selectedMachinery 'Вкл' = SESSION DATA BOOLEAN (machinery);

GROUP snapshotMachineryPriceGroup 'Перезагрузка прайса' : publicGroup;

//--------------------Сообщения об ошибках транзакций--------------------//
CLASS machineryPriceTransactionError 'Ошибка';
dataMachineryPriceTransactionError 'Сообщение об ошибке' = DATA STRING[200] (machineryPriceTransactionError) IN baseGroup;
dateMachineryPriceTransactionError 'Время возникновения' = DATA DATETIME (machineryPriceTransactionError) IN baseGroup;
errorTraceMachineryPriceTransactionError 'След исключения' = DATA TEXT (machineryPriceTransactionError) IN baseGroup;
machineryPriceTransactionMachineryPriceTransactionError 'Транзакция (ID)' = DATA machineryPriceTransaction(machineryPriceTransactionError) IN baseGroup;
quantityMachineryPriceTransactionErrorMachineryPriceTransaction 'Количество ошибок' (MachineryPriceTransaction) = GROUP SUM 1 IF machineryPriceTransactionMachineryPriceTransactionError (machineryPriceTransactionError) == MachineryPriceTransaction
    BY machineryPriceTransactionMachineryPriceTransactionError (machineryPriceTransactionError) IN baseGroup;


FORM groupMachineryInput 'Выбор оборудования для перезагрузки прайса'

    OBJECTS d = departmentStore FIXED PANEL
    PROPERTIES(d) READONLY dname = name

    OBJECTS g = groupMachinery
    PROPERTIES(g) READONLY nameGroupMachinery, nameDepartmentStoreGroupMachinery, nameEquipmentServerGroupMachinery
    FILTERS departmentStoreGroupMachinery(g) == d

    OBJECTS m = machinery
    PROPERTIES(m)          selectedMachinery
    PROPERTIES(m) READONLY nppMachinery, descriptionMachinery, portMachinery, useMachinery

    PROPERTIES(m) READONLY FORCE GRID SHOWIF isGroupCashRegister(g) numberCashRegister, directoryCashRegister,
                                                                    nameCashRegisterModelCashRegister, dateCashRegister

    PROPERTIES(m) READONLY FORCE GRID SHOWIF isGroupScales(g)       numberScales, nameScalesModelScales

    FILTERS groupMachineryMachinery(m) == g
;

DESIGN groupMachineryInput FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
    }
    PROPERTY(dname) {
        focusable = FALSE;
    }
}

snapshotGroupMachineryDepartmentStore 'Перезагрузить прайс' = ACTION (departmentStore) NEWSESSION {
    FORM groupMachineryInput OBJECTS d = (departmentStore AS departmentStore) MODAL;
    IF formResult() == formResult.ok THEN {
        LOCAL groupMachinery = groupMachinery ();
        SET groupMachinery() <- chosenObject('g');
        IF groupMachinery() IS groupScales THEN
            ADDOBJ scalesPriceTransaction
        ELSE IF groupMachinery() IS groupCheck THEN
            ADDOBJ checkPriceTransaction
        ELSE
            ADDOBJ cashRegisterPriceTransaction;
        FOR t == addedObject() DO {
            SET groupMachineryMachineryPriceTransaction(t) <- groupMachinery();
            SET commentMachineryPriceTransaction(t) <- 'Перезагрузка прайса целиком';
            SET snapshotMachineryPriceTransaction(t) <- TRUE;
            SET inMachineryPriceTransactionMachinery(t, machinery) <- selectedMachinery(machinery);
            SET inMachineryPriceTransactionBarcode(t, barcode) <- TRUE AND lastTransactionBarcodeGroupMachinery(barcode, groupMachinery())
                                                                       AND inGroupMachineryItem(groupMachinery(), skuBarcode(barcode)) // важно, что товар должен быть активным на текущий момент
                                                                       AND activeBarcode(barcode);
            SET nameMachineryPriceTransactionBarcode(t, barcode) <- transactionNameBarcodeGroupMachinery(barcode, groupMachinery());
            SET priceMachineryPriceTransactionBarcode(t, barcode) <- transactionPriceBarcodeGroupMachinery(barcode, groupMachinery());
        }
        EXEC apply();
    }
} CONFIRM IN snapshotMachineryPriceGroup;

// Инкрементная загрузка
GROUP incrementMachineryPriceGroup 'Инкрементная загрузка' : publicGroup;

createMachineryPriceTransactionSnapshot = SESSION DATA BOOLEAN ();

createMachineryPriceTransactionItem = SESSION DATA BOOLEAN (item);
createMachineryPriceTransactionBarcodeGroupMachinery (barcode, groupMachinery) = createMachineryPriceTransactionItem(skuBarcode(barcode)) // если передали параметром
                                                                                 AND inGroupMachineryItem(groupMachinery, skuBarcode(barcode)) // если на эту группу оборудования должна закачиваться
                                                                                 AND activeBarcode(barcode) // если активный штрих-код
                                                                                 AND ledgerPriceBarcodeGroupMachinery(barcode, groupMachinery); // если есть цена розничная

createMachineryPriceTransactionDocument = SESSION DATA priceTransactionDocument();
createMachineryPriceTransactionComment = SESSION DATA STRING[20] ();

createMachineryPriceTransaction 'Создать транзакцию' = ACTION (departmentStore) {
    LOCAL message = STRING[3000] ();
    LOCAL sentSomething = BOOLEAN();
    SET message() <- 'Принято к загрузке в оборудование : \n';

    FOR departmentStoreGroupMachinery(groupMachinery) == departmentStore DO {
        LOCAL inBarcode = BOOLEAN (barcode);
        // todo : не работает
//        SET tempBarcode(barcode) <- NULL;
        IF createMachineryPriceTransactionSnapshot() THEN
            SET inBarcode(barcode) <- createMachineryPriceTransactionBarcodeGroupMachinery(barcode, groupMachinery)
        ELSE
            SET inBarcode(barcode) <- createMachineryPriceTransactionBarcodeGroupMachinery(barcode, groupMachinery)
                                        AND NOT (ledgerPriceBarcodeGroupMachinery(barcode, groupMachinery) == transactionPriceBarcodeGroupMachinery(barcode, groupMachinery)); // если цена изменилась

        LOCAL countBarcode = INTEGER();
        SET countBarcode() <- [GROUP SUM 1 IF inBarcode(barcode)]();
        IF countBarcode() THEN {

            IF groupMachinery IS groupScales THEN
                ADDOBJ scalesPriceTransaction
            ELSE IF groupMachinery IS groupCheck THEN
                ADDOBJ checkPriceTransaction
            ELSE
                ADDOBJ cashRegisterPriceTransaction;

            FOR t == addedObject() DO {
                SET groupMachineryMachineryPriceTransaction(t) <- groupMachinery AS groupMachinery;
                SET priceTransactionDocumentMachineryPriceTransaction(t) <- createMachineryPriceTransactionDocument();
                SET commentMachineryPriceTransaction(t) <- createMachineryPriceTransactionComment();
                SET inMachineryPriceTransactionBarcode(t, barcode) <- inBarcode(barcode);
                IF groupMachinery IS groupScales THEN
                    SET nameMachineryPriceTransactionBarcode(t, barcode) AND inMachineryPriceTransactionBarcode(t, barcode) <- titleScalesBarcode(barcode)
                ELSE
                    SET nameMachineryPriceTransactionBarcode(t, barcode) AND inMachineryPriceTransactionBarcode(t, barcode) <- titleCashBarcode(barcode);
                SET priceMachineryPriceTransactionBarcode(t, barcode) AND inMachineryPriceTransactionBarcode(t, barcode) <- ledgerPriceBarcodeGroupMachinery(barcode, groupMachinery);
            }
            SET message() <- [FORMULA STRING[3000] '$1 || $2 || \' - \' || CAST($3 as text) || \' товаров.\'\n']
                             (message(), nameGroupMachinery(groupMachinery), countBarcode());
            SET sentSomething() <- TRUE;
        }
    }

    IF sentSomething() THEN
        MESSAGE message()
    ELSE
        MESSAGE 'Загрузка прайса в оборудование не требуется.';
};

createBalanceMachineryPriceTransaction 'Остатки' = ACTION (departmentStore) NEWSESSION AUTOAPPLY {
    SET createMachineryPriceTransactionItem(item) <- TRUE IF currentBalanceItemLedger(item, departmentStore);
    SET createMachineryPriceTransactionComment() <- 'Инкрементная загрузка остатков';
    EXEC createMachineryPriceTransaction(departmentStore AS departmentStore);
} CONFIRM IN incrementMachineryPriceGroup;

createPriceMachineryPriceTransaction 'Все товары' = ACTION (departmentStore) NEWSESSION AUTOAPPLY {
    SET createMachineryPriceTransactionItem(item) <- TRUE IF currentPriceRetailLedger(item, departmentStore);
    SET createMachineryPriceTransactionComment() <- 'Инкрементная загрузка товаров';
    EXEC createMachineryPriceTransaction(departmentStore AS departmentStore);
} CONFIRM IN incrementMachineryPriceGroup;

META metaCodeDocumentMachineryPriceTransaction (document)

    create###document##MachineryPriceTransaction 'Загрузить в оборудование' = ACTION (document) NEWSESSION AUTOAPPLY {
        SET createMachineryPriceTransactionItem(item) <- TRUE IF quantityItem###document(item, document);
        SET createMachineryPriceTransactionDocument() <- document AS priceTransactionDocument;
        EXEC createMachineryPriceTransaction(departmentStore###document(document));
        SET sentPriceTransactionDocument(document) <- TRUE;
    } TOOLBAR CONFIRM;

    createSnapshot###document##MachineryPriceTransaction 'Перегрузить все позиции' = ACTION (document) NEWSESSION AUTOAPPLY {
        SET createMachineryPriceTransactionSnapshot() <- TRUE;
        SET createMachineryPriceTransactionItem(item) <- TRUE IF quantityItem###document(item, document);
        SET createMachineryPriceTransactionDocument() <- document AS priceTransactionDocument;
        EXEC createMachineryPriceTransaction(departmentStore###document(document));
        SET sentPriceTransactionDocument(document) <- TRUE;
    } SHORTCUT statusEquipmentPriceTransactionDocument CONFIRM;

    showCreateMachineryPriceTransaction###document 'Показывать' (document) = isPosted###document(document) AND NOT sentPriceTransactionDocument(document);
END

FORM machineryPriceTransaction 'Загрузка прайса в оборудование'
    OBJECTS t = machineryPriceTransaction FIXED PANEL
    PROPERTIES(t) nameGroupMachineryMachineryPriceTransaction, dateMachineryPriceTransaction, timeMachineryPriceTransaction,
                  snapshotMachineryPriceTransaction, succeededMachineryPriceTransaction, canceledMachineryPriceTransaction

    OBJECTS b = barcode
    PROPERTIES(b) READONLY barcodeEx
    PROPERTIES(t, b)       inMachineryPriceTransactionBarcode, nameMachineryPriceTransactionBarcode, priceMachineryPriceTransactionBarcode
    FILTERS inMachineryPriceTransactionBarcode(t, b)

    EDIT machineryPriceTransaction OBJECT t;
;

FORM machineryPriceTransactions 'Загрузки прайса в оборудование'
    OBJECTS d = departmentStore FIXED PANEL
    PROPERTIES name(d) SELECTOR, createBalanceMachineryPriceTransaction(d), createPriceMachineryPriceTransaction(d), snapshotGroupMachineryDepartmentStore(d)

    OBJECTS t = machineryPriceTransaction
    PROPERTIES(t) READONLY snapshotMachineryPriceTransaction, nameGroupMachineryMachineryPriceTransaction, dateMachineryPriceTransaction, timeMachineryPriceTransaction,
                           descriptionMachineryPriceTransaction, succeededMachineryPriceTransaction, canceledMachineryPriceTransaction,
                           quantityMachineryPriceTransactionErrorMachineryPriceTransaction BACKGROUND quantityMachineryPriceTransactionErrorMachineryPriceTransaction(t),
                           nppsMachineryPriceTransaction FORCE PANEL SHOWIF snapshotMachineryPriceTransaction(t)
    PROPERTIES(t) READONLY nameUserCreated, hostnameComputerCreated
    PROPERTIES(t)          ADDFORM, EDITFORM, delete
    FILTERS departmentStoreMachineryPriceTransaction(t) == d

    OBJECTS b = barcode
    PROPERTIES(b)    barcodeEx
    PROPERTIES(t, b) nameMachineryPriceTransactionBarcode, priceMachineryPriceTransactionBarcode

    FILTERS inMachineryPriceTransactionBarcode(t, b)

    OBJECTS e = machineryPriceTransactionError
    PROPERTIES(e)    dataMachineryPriceTransactionError, dateMachineryPriceTransactionError
    PROPERTIES(e)  FORCE PANEL  errorTraceMachineryPriceTransactionError
    FILTERS machineryPriceTransactionMachineryPriceTransactionError(e) == t

;

DESIGN machineryPriceTransactions FROM DEFAULT {

    main {

        t.box {
            preferredSize = ( -1, 300);
            minimumSize = ( -1, 300);
            maximumSize = ( -1, 300);
        }

        NEW specContainer {
            tabbedPane = TRUE;
            ADD b.box;
            NEW errorContainer {
               title = 'Сообщения об ошибках';
               ADD e.box;
               PROPERTY(errorTraceMachineryPriceTransactionError(e)) {
                  fillHorizontal = 1;
                  panelLabelAbove = TRUE;
               }
            }
        }
    }
}

//----------------------------------- Печать ценников -------------------------------------------------------

CLASS labelTransaction 'Печать ценников' : historyObject;
TABLE labelTransaction(labelTransaction);

dateLabelTransaction 'Дата' = DATA DATE (labelTransaction);
dateLabelTransaction (transaction) <- currentDate() ON ASSIGN transaction IS labelTransaction;

timeLabelTransaction 'Время' = DATA TIME (labelTransaction);
timeLabelTransaction (transaction) <- currentTime() ON ASSIGN transaction IS labelTransaction;

departmentStoreLabelTransaction = DATA departmentStore (labelTransaction);
nameDepartmentStoreLabelTransaction 'Отдел магазина' (transaction) = name(departmentStoreLabelTransaction(transaction));

labelTypeLabelTransaction = DATA labelType (labelTransaction);
nameLabelTypeLabelTransaction 'Тип ценника' (transaction) = name(labelTypeLabelTransaction(transaction));

CONSTRAINT labelTypeLabelTransaction(transaction) AND NOT inLabelTypeDepartmentStore(labelTypeLabelTransaction(transaction), departmentStoreLabelTransaction(transaction))
           CHECKED BY labelTypeLabelTransaction MESSAGE 'Тип ценника запрещен для выбранного подразделения';

fileTemplateLabelTransaction 'Файл шаблона' (transaction) = fileTemplateLabelType(labelTypeLabelTransaction(transaction));

printedPriceTransactionDocument 'Распечатан' = DATA BOOLEAN (priceTransactionDocument);
printedPriceTransactionDocument(document) <- NULL ON ASSIGN isDraftPriceTransactionDocument(document);

priceTransactionDocumentLabelTransaction = DATA priceTransactionDocument (labelTransaction);
descriptionLabelTransaction 'Основание загрузки' (transaction) =
    descriptionPriceTransactionDocument(priceTransactionDocumentLabelTransaction(transaction));

statusPrintPriceTransactionDocument 'Статус печати ценника' (document) =
    IF printedPriceTransactionDocument(document) THEN 'Распечатан' AND document IS priceTransactionDocument
                                                 ELSE 'Не распечатан' AND document IS priceTransactionDocument;

TABLE labelTransactionBarcode(labelTransaction, barcode);

inLabelTransactionBarcode 'Вкл' (labelTransaction, barcode) = DATA BOOLEAN (labelTransaction, barcode);

quantityLabelTransactionBarcode 'Кол-во' (labelTransaction, barcode) = DATA INTEGER (labelTransaction, barcode);
nameLabelTransactionBarcode 'Наименование' = DATA STRING[255] (labelTransaction, barcode);
priceLabelTransactionBarcode 'Цена' = DATA DOUBLE (labelTransaction, barcode);

FORM printLabelTransaction 'Печать ценников' PRINT
    OBJECTS l = labelTransaction REPORTFILE fileTemplateLabelTransaction(l) FIXED PANEL
    PROPERTIES(l) READONLY nameLabelTypeLabelTransaction, nameDepartmentStoreLabelTransaction, descriptionLabelTransaction, dateLabelTransaction, timeLabelTransaction

    OBJECTS b = barcode
    PROPERTIES(l, b) READONLY inLabelTransactionBarcode
    PROPERTIES(b)    READONLY barcodeEx
    PROPERTIES(l, b) READONLY quantityLabelTransactionBarcode, nameLabelTransactionBarcode, priceLabelTransactionBarcode
    FILTERS inLabelTransactionBarcode(l, b)
;

FORM customLabelTransaction 'Печать ценников'
    OBJECTS l = labelTransaction FIXED PANEL
    PROPERTIES(l) nameLabelTypeLabelTransaction, nameDepartmentStoreLabelTransaction, descriptionLabelTransaction, dateLabelTransaction, timeLabelTransaction

    OBJECTS b = barcode
    PROPERTIES(l, b)          inLabelTransactionBarcode
    PROPERTIES(b)    READONLY barcodeEx
    PROPERTIES(l, b)          quantityLabelTransactionBarcode, nameLabelTransactionBarcode, priceLabelTransactionBarcode
    FILTERS inLabelTransactionBarcode(l, b)
;

FORM labelTransactions 'Печать ценников'
    OBJECTS d = departmentStore FIXED PANEL
    PROPERTIES name(d) SELECTOR

    OBJECTS l = labelTransaction
    PROPERTIES(l) READONLY nameLabelTypeLabelTransaction, descriptionLabelTransaction, dateLabelTransaction, timeLabelTransaction
    PROPERTIES(l) READONLY nameUserCreated, hostnameComputerCreated
    FILTERS departmentStoreLabelTransaction(l) == d

    OBJECTS b = barcode
    PROPERTIES(l, b) READONLY inLabelTransactionBarcode
    PROPERTIES(b)    READONLY barcodeEx
    PROPERTIES(l, b) READONLY quantityLabelTransactionBarcode, nameLabelTransactionBarcode, priceLabelTransactionBarcode
    FILTERS inLabelTransactionBarcode(l, b)
;

createLabelTransactionItem = SESSION DATA BOOLEAN (item);
createLabelTransactionDocument = SESSION DATA priceTransactionDocument();
createLabelTransactionSnapshot = SESSION DATA BOOLEAN();

createLabelTransactionFillParams 'Заполнить параметры' = ACTION (labelTransaction, departmentStore) {

    SET departmentStoreLabelTransaction(labelTransaction) <- departmentStore AS departmentStore;
    SET priceTransactionDocumentLabelTransaction(labelTransaction) <- createLabelTransactionDocument();

    SET nameLabelTransactionBarcode(labelTransaction, barcode) AND inLabelTransactionBarcode(labelTransaction, barcode) <- nameSkuBarcode(barcode);
    SET priceLabelTransactionBarcode(labelTransaction, barcode) AND inLabelTransactionBarcode(labelTransaction, barcode) <- ledgerPriceBarcodeDepartmentStore(barcode, departmentStore);
}

createLabelTransaction 'Распечатать ценники' = ACTION (departmentStore, date) {

    LOCAL inBarcode = BOOLEAN (barcode);
    SET inBarcode(barcode) <- createLabelTransactionItem(skuBarcode(barcode)) // если передали параметром
                                                         AND activeBarcode(barcode) // если активный штрих-код
                                                         AND ledgerPriceBarcodeDepartmentStore(barcode, departmentStore);

    IF createLabelTransactionSnapshot() THEN {
        ADDOBJ labelTransaction;
        FOR t == addedObject() DO {
            SET inLabelTransactionBarcode(t, barcode) <- inBarcode(barcode);
            SET quantityLabelTransactionBarcode(t, barcode) AND inLabelTransactionBarcode(t, barcode) <- 1;
            EXEC createLabelTransactionFillParams(t AS labelTransaction, departmentStore AS departmentStore);
            FORM customLabelTransaction OBJECTS l = t AS labelTransaction MODAL;
            IF formResult() == formResult.ok THEN {
                FORM printLabelTransaction OBJECTS l = t AS labelTransaction;
            }
        }
    } ELSE {
        // бежим по всем типам ценников из управленческих параметров
        FOR ([GROUP SUM 1 AND inBarcode(barcode) BY labelBarcodeDepartmentVal(barcode, departmentStore, date), departmentStore, date](l, departmentStore, date)) DO {
            // для каждого создаем по операции печати ценников
            ADDOBJ labelTransaction;
            FOR t == addedObject() DO {
                SET inLabelTransactionBarcode(t, barcode) <- inBarcode(barcode) AND labelBarcodeDepartmentVal(barcode, departmentStore, date) == l;
                SET quantityLabelTransactionBarcode(t, barcode) AND inLabelTransactionBarcode(t, barcode) <- multiplierBarcodeDepartmentValOver(barcode, departmentStore, date);
                SET labelTypeLabelTransaction(t) <- l AS labelType;
                EXEC createLabelTransactionFillParams(t AS labelTransaction, departmentStore AS departmentStore);
                // вызываем печатную форму для каждого из них
                FORM printLabelTransaction OBJECTS l = t AS labelTransaction;
            }
        }
    }
};

META metaCodeDocumentLabelTransaction (document)

    create###document##LabelTransaction 'Печать ценников' = ACTION (document) NEWSESSION AUTOAPPLY {
        SET createLabelTransactionItem(item) <- TRUE IF quantityItem###document(item, document);
        SET createLabelTransactionDocument() <- document AS priceTransactionDocument;
        EXEC createLabelTransaction(departmentStore###document(document), date###document(document));
        SET printedPriceTransactionDocument(document) <- TRUE;
    } TOOLBAR CONFIRM;

    createSnapshot###document##LabelTransaction 'Перепечатать ценники' = ACTION (document) NEWSESSION AUTOAPPLY {
        SET createLabelTransactionItem(item) <- TRUE IF quantityItem###document(item, document);
        SET createLabelTransactionDocument() <- document AS priceTransactionDocument;
        SET createLabelTransactionSnapshot() <- TRUE;
        EXEC createLabelTransaction(departmentStore###document(document), date###document(document));
    } SHORTCUT statusPrintPriceTransactionDocument CONFIRM;

    showPrintLabelTransaction###document 'Показывать' (document) = isPosted###document(document) AND NOT printedPriceTransactionDocument(document);

END

// ---------------------------- Атрибуты для накладной --------------------------------- //
// для накладной (шапка и хвост)
carConsignment 'Автомобиль' (consignment) = UNION EXCLUSIVE carStatement (consignment),
                                                            carReturnSupplier (consignment),
                                                            carInnerFlow (consignment) IN carConsignmentGroup;

trailerConsignment 'Прицеп' (consignment) = UNION EXCLUSIVE trailerStatement (consignment),
                                                            trailerReturnSupplier (consignment),
                                                            trailerInnerFlow (consignment) IN carConsignmentGroup;

ownerCarConsignment 'Владелец автомобиля' (consignment) = UNION EXCLUSIVE ownerCarStatement (consignment),
                                                                          ownerCarReturnSupplier (consignment),
                                                                          ownerCarInnerFlow (consignment) IN carConsignmentGroup;

driverCarConsignment 'Водитель' (consignment) = UNION EXCLUSIVE driverCarStatement (consignment),
                                                                driverCarReturnSupplier (consignment),
                                                                driverCarInnerFlow (consignment) IN carConsignmentGroup;

waybillConsignment 'Путевой лист' (consignment) = UNION EXCLUSIVE waybillStatement (consignment),
                                                                  waybillReturnSupplier (consignment),
                                                                  waybillInnerFlow (consignment) IN carConsignmentGroup;

transportPayerConsignment 'Заказчик перевозки (ИД)' (consignment) = UNION EXCLUSIVE transportPayerStatement (consignment),
                                                                                    transportPayerReturnSupplier (consignment),
                                                                                    transportPayerInnerFlow (consignment);

nameTransportPayerConsignment 'Заказчик перевозки ' (consignment) =
    [FORMULA STRING[100] 'CAST($1 AS TEXT) ||  \' , \' || CAST($2 AS TEXT)']
    (name(transportPayerConsignment(consignment)), UNPLegalEntity(transportPayerConsignment(consignment))) IN carConsignmentGroup;

dataLoadingPlaceConsignment 'Пункт погрузки' (consignment) = UNION EXCLUSIVE dataLoadingPlaceStatement (consignment),
                                                                             dataLoadingPlaceReturnSupplier (consignment),
                                                                             dataLoadingPlaceInnerFlow (consignment);

loadingPlaceConsignment 'Пункт погрузки' (consignment) = UNION EXCLUSIVE loadingPlaceStatement (consignment),
                                                                         loadingPlaceReturnSupplier (consignment),
                                                                         loadingPlaceInnerFlow (consignment) IN carConsignmentGroup;

dataUnloadingPlaceConsignment 'Пункт разгрузки' (consignment) = UNION EXCLUSIVE dataUnloadingPlaceStatement (consignment),
                                                                                dataUnloadingPlaceReturnSupplier (consignment),
                                                                                dataUnloadingPlaceInnerFlow (consignment);

unloadingPlaceConsignment 'Пункт разгрузки' (consignment) = UNION EXCLUSIVE unloadingPlaceStatement (consignment),
                                                                            unloadingPlaceReturnSupplier (consignment),
                                                                            unloadingPlaceInnerFlow (consignment) IN carConsignmentGroup;

readdressingConsignment 'Переадресовка' (consignment) = UNION EXCLUSIVE readdressingStatement (consignment),
                                                                        readdressingReturnSupplier (consignment),
                                                                        readdressingInnerFlow (consignment) IN carConsignmentGroup;

issuanceAllowedConsignment 'Отпуск разрешил (ИД)' (consignment) = UNION EXCLUSIVE issuanceAllowedStatement(consignment),
                                                                             issuanceAllowedReturnSupplier(consignment),
                                                                             issuanceAllowedInnerFlow(consignment);

commonNameIssuanceAllowedConsignment 'Отпуск разрешил' (consignment) = commonName(issuanceAllowedConsignment(consignment)) IN issuanceConsignmentGroup;

issuanceExecutedConsignment 'Отпуск произвел (ИД)' (consignment) = UNION EXCLUSIVE issuanceExecutedStatement(consignment),
                                                                              issuanceExecutedReturnSupplier(consignment),
                                                                              issuanceExecutedInnerFlow(consignment);

commonNameIssuanceExecutedConsignment 'Отпуск произвел' (consignment) = commonName(issuanceExecutedConsignment(consignment)) IN issuanceConsignmentGroup;

shipmentBaseConsignment 'Основание отпуска' (consignment) = UNION EXCLUSIVE shipmentBaseStatement (consignment),
                                                                            shipmentBaseReturnSupplier (consignment),
                                                                            shipmentBaseInnerFlow (consignment) IN issuanceConsignmentGroup;

forwarderConsignment 'Товар к перевозке принял (экспедитор)' (consignment) = UNION EXCLUSIVE forwarderStatement(consignment),
                                                                                             forwarderReturnSupplier(consignment),
                                                                                             forwarderInnerFlow(consignment) IN issuanceConsignmentGroup;

warrantConsignment 'По доверенности' (consignment) = UNION EXCLUSIVE warrantStatement (consignment),
                                                                     warrantReturnSupplier (consignment),
                                                                     warrantInnerFlow (consignment) IN issuanceConsignmentGroup;

warrantHolderConsignment 'Доверенность выдана на' (consignment) = UNION EXCLUSIVE warrantHolderStatement (consignment),
                                                                                  warrantHolderReturnSupplier (consignment),
                                                                                  warrantHolderInnerFlow (consignment) IN issuanceConsignmentGroup;

goodsAcceptedConsignment 'Принял грузополучатель' (consignment) = UNION EXCLUSIVE goodsAcceptedStatement (consignment),
                                                                                  goodsAcceptedReturnSupplier (consignment),
                                                                                  goodsAcceptedInnerFlow (consignment) IN issuanceConsignmentGroup;

loadingExecuterConsignment 'Исполнитель ПРР (ИД)' (consignment) = UNION EXCLUSIVE loadingExecuterStatement(consignment),
                                                                             loadingExecuterReturnSupplier(consignment),
                                                                             loadingExecuterInnerFlow(consignment);

commonNameLoadingExecuterConsignment 'Исполнитель ПРР' (consignment) = commonName(loadingExecuterConsignment(consignment)) IN loadingConsignmentGroup;

wayOfLoadingConsignment 'Способ ПРР (ИД)' (consignment) = UNION EXCLUSIVE wayOfLoadingStatement(consignment),
                                                                          wayOfLoadingReturnSupplier(consignment),
                                                                          wayOfLoadingInnerFlow(consignment);

nameWayOfLoadingConsignment 'Способ ПРР' (consignment) = name(wayOfLoadingConsignment(consignment)) IN loadingConsignmentGroup;

codeLoadingConsignment 'Код ПРР' (consignment) = UNION EXCLUSIVE codeLoadingStatement (consignment),
                                                                 codeLoadingReturnSupplier (consignment),
                                                                 codeLoadingInnerFlow (consignment) IN loadingConsignmentGroup;

arrivalTimeConsignment 'Время прибытия' (consignment) = UNION EXCLUSIVE arrivalTimeStatement (consignment),
                                                                        arrivalTimeReturnSupplier (consignment),
                                                                        arrivalTimeInnerFlow (consignment) IN carConsignmentGroup;

departureTimeConsignment 'Время убытия' (consignment) = UNION EXCLUSIVE departureTimeStatement (consignment),
                                                                        departureTimeReturnSupplier (consignment),
                                                                        departureTimeInnerFlow (consignment) IN carConsignmentGroup;

downtimeConsignment 'Время простоя' (consignment) = UNION EXCLUSIVE downtimeStatement (consignment),
                                                                    downtimeReturnSupplier (consignment),
                                                                    downtimeInnerFlow (consignment) IN carConsignmentGroup;

raceQuantityConsignment 'Количество ездок' (consignment) = UNION EXCLUSIVE raceQuantityStatement(consignment),
                                                                           raceQuantityReturnSupplier(consignment),
                                                                           raceQuantityInnerFlow(consignment) IN carConsignmentGroup;

// для накладной (спецификация)
nameItemConsignmentDetail 'Наименование товара' (consignmentDetail) = UNION EXCLUSIVE nameAttributeItem(itemStatementDetail(consignmentDetail)),
                                                                                      nameAttributeItem(itemReturnSupplierDetail(consignmentDetail)),
                                                                                      nameAttributeItem(itemInnerFlowDetail(consignmentDetail));

unitOfMeasureConsignmentDetail 'Единица измерения (ИД)' (consignmentDetail) = UNION EXCLUSIVE unitOfMeasureItem(itemStatementDetail(consignmentDetail)),
                                                                                         unitOfMeasureItem(itemReturnSupplierDetail(consignmentDetail)),
                                                                                         unitOfMeasureItem(itemInnerFlowDetail(consignmentDetail));

shortNameConsignmentDetail 'Единица измерения' (consignmentDetail) = shortName(unitOfMeasureConsignmentDetail(consignmentDetail));

quantityConsignmentDetail 'Количество' (consignmentDetail) = UNION EXCLUSIVE quantityStatementDetail(consignmentDetail),
                                                                             quantityReturnSupplierDetail(consignmentDetail),
                                                                             quantityInnerFlowDetail(consignmentDetail);

sumQuantityConsignment 'Общее количество' (consignment) = UNION EXCLUSIVE totalQuantityStatement(consignment),
                                                                          totalQuantityReturnSupplier(consignment),
                                                                          totalQuantityInnerFlow(consignment) IN sumConsignmentGroup;

priceConsignmentDetail 'Цена' (consignmentDetail) = UNION EXCLUSIVE retailPriceStatementDetail (consignmentDetail),
                                                                    supplierPriceReturnSupplierDetail (consignmentDetail),
                                                                    retailPriceInnerFlowDetail(consignmentDetail);

costConsignmentDetail 'Стоимость' (consignmentDetail) = UNION EXCLUSIVE sumStatementDetail (consignmentDetail),
                                                                        sumSupplierReturnSupplierDetail (consignmentDetail),
                                                                        accountSumInnerFlowDetail (consignmentDetail);

sumCostConsignmentDetail 'Общая стоимость' (consignment) = UNION EXCLUSIVE sumStatement(consignment),
                                                                           totalSumSupplierReturnSupplier(consignment),
                                                                           accountSumInnerFlow(consignment) IN sumConsignmentGroup;

vatConsignmentDetail 'Ставка НДС' (consignmentDetail) = UNION EXCLUSIVE dataActingRateRangeStatementDetail (consignmentDetail),
                                                                        dataSuppliersRangeReturnSupplierDetail (consignmentDetail),
                                                                        dataRetailRangeInnerFlowDetail (consignmentDetail);

sumVATConsignmentDetail 'Сумма НДС' (consignmentDetail) = UNION EXCLUSIVE totalSumNDSStatementDetail (consignmentDetail),
                                                                          sumDetailSupplierVATReturnSupplierDetail (consignmentDetail),
                                                                          sumRetailVATInnerFlowDetail (consignmentDetail);

totalSumVATConsignmentDetail 'Общая сумма НДС' (consignment) = UNION EXCLUSIVE sumNDSStatement (consignment),
                                                                               totalSumIncVATReturnSupplier (consignment),
                                                                               totalSumRetailVATInnerFlow (consignment) IN sumConsignmentGroup;

costWithVATConsignmentDetail 'Сумма с НДС' (consignmentDetail) = UNION EXCLUSIVE sumStatementDetail (consignmentDetail),
                                                                                 sumSupplierReturnSupplierDetail (consignmentDetail),
                                                                                 sumRetailVATInnerFlowDetail (consignmentDetail);

packQuantityConsignmentDetail 'Количество грузовых мест' (consignmentDetail) = UNION EXCLUSIVE packQuantityStatementDetail(consignmentDetail),
                                                                                               packQuantityReturnSupplierDetail(consignmentDetail),
                                                                                               packQuantityInnerFlowDetail(consignmentDetail);

sumPackQuantityConsignment 'Общее количество грузовых мест' (consignment) = UNION EXCLUSIVE sumPackQuantityStatement(consignment),
                                                                                            sumPackQuantityReturnSupplier(consignment),
                                                                                            sumPackQuantityInnerFlow(consignment) IN sumConsignmentGroup;

grossWeightConsignmentDetail 'Масса груза, т.' (consignmentDetail) = UNION EXCLUSIVE grossWeightStatementDetail(consignmentDetail),
                                                                                     grossWeightReturnSupplierDetail(consignmentDetail),
                                                                                     grossWeightInnerFlowDetail(consignmentDetail);

sumGrossWeightConsignmentDetail 'Общая масса груза, т.' (consignment) = UNION EXCLUSIVE sumGrossWeightStatement(consignment),
                                                                                        sumGrossWeightReturnSupplier(consignment),
                                                                                        sumGrossWeightInnerFlow(consignment) IN sumConsignmentGroup;

consignmentConsignmentDetail (consignmentDetail) = UNION EXCLUSIVE statementStatementDetail(consignmentDetail),
                                                                   returnSupplierReturnSupplierDetail(consignmentDetail),
                                                                   innerFlowInnerFlowDetail(consignmentDetail);

// ---------------------------- Формы для накладных --------------------------------- //
FORM consignmentOne 'ТТН-1' PRINT
    OBJECTS c=consignment FIXED PANEL

    PROPERTIES (c) carConsignment, ownerCarConsignment, trailerConsignment, driverCarConsignment, waybillConsignment,
                   nameTransportPayerConsignment, shipmentBaseConsignment, loadingPlaceConsignment, unloadingPlaceConsignment,
                   readdressingConsignment, commonNameIssuanceAllowedConsignment, commonNameIssuanceExecutedConsignment,
                   forwarderConsignment, warrantConsignment, warrantHolderConsignment, goodsAcceptedConsignment,
                   commonNameLoadingExecuterConsignment, nameWayOfLoadingConsignment, codeLoadingConsignment,
                   arrivalTimeConsignment, departureTimeConsignment, downtimeConsignment, raceQuantityConsignment,
                   sumQuantityConsignment, sumPackQuantityConsignment, sumGrossWeightConsignmentDetail,
                   sumCostConsignmentDetail, totalSumVATConsignmentDetail

    OBJECTS d=consignmentDetail

    PROPERTIES(d) nameItemConsignmentDetail, shortNameConsignmentDetail, quantityConsignmentDetail, priceConsignmentDetail,
                  costConsignmentDetail, vatConsignmentDetail, sumVATConsignmentDetail, costWithVATConsignmentDetail,
                  packQuantityConsignmentDetail, grossWeightConsignmentDetail, noteInnerFlowDetail

    FILTERS consignmentConsignmentDetail(d) == c
;

FORM consignmentTwo 'ТН-2' PRINT
    OBJECTS c=consignment FIXED PANEL

    PROPERTIES (c) shipmentBaseConsignment, commonNameIssuanceAllowedConsignment, commonNameIssuanceExecutedConsignment,
                   forwarderConsignment, warrantConsignment, warrantHolderConsignment, goodsAcceptedConsignment,
                   sumQuantityConsignment, sumCostConsignmentDetail, totalSumVATConsignmentDetail

    OBJECTS d=consignmentDetail

    PROPERTIES(d) nameItemConsignmentDetail, shortNameConsignmentDetail, quantityConsignmentDetail, priceConsignmentDetail,
                  costConsignmentDetail, vatConsignmentDetail, sumVATConsignmentDetail, costWithVATConsignmentDetail,
                  noteInnerFlowDetail

    FILTERS consignmentConsignmentDetail(d) == c
;

toPrintConsignmentOne 'ТТН-1' (consignment) = ACTION FORM consignmentOne OBJECTS c IMAGE 'print.png' IN printGroup CONFIRM;
toPrintConsignmentTwo 'ТН-2' (consignment) = ACTION FORM consignmentTwo OBJECTS c IMAGE 'print.png' IN printGroup CONFIRM;

//----------------------------------- Формы поступления товара -------------------------------------------------------
@metaCodeInputMultipleItems(shipment);
@metaCodeDocumentMachineryPriceTransaction(shipment);
@metaCodeDocumentLabelTransaction(shipment);

toShowPriceImporterShipment 'Есть оптовая надбавка' (shipment) = DATA BOOLEAN (shipment) IN documentPrmGroup;
toShowWareShipment 'Есть стеклопосуда' (shipment) = DATA BOOLEAN (shipment) IN documentPrmGroup;

nameFormedManShipment 'Цены сформировал' (shipment) = nameFormedManCommittee(registerCommitteeShipment(shipment));
nameCheckedManShipment 'Реестр проверил' (shipment) = nameCheckedManCommittee(registerCommitteeShipment(shipment));
nameLabeledManShipment 'Товар промаркировал' (shipment) = nameLabeledManCommittee(registerCommitteeShipment(shipment));
nameAccountantManShipment 'Бухгалтер' (shipment) = nameAccountantManCommittee(registerCommitteeShipment(shipment));
nameHeadManShipment 'Зав. магазином' (shipment) = nameHeadManCommittee(registerCommitteeShipment(shipment));

FORM pricesRegister 'Реестр цен' PRINT
    OBJECTS s=shipment FIXED PANEL
    PROPERTIES (s)  SELECTOR numberObject, dateShipment, nameDepartmentStoreShipment, nameSupplierShipment,
                    totalQuantityShipment, supportSumPriceShipment, totalSumSupplierVATShipment,
                    totalSumWareShipment, totalSumVatWareShipment, exSumSupplierShipment, totalSumMarkupShipment,
                    fullDetailVatShipment, retailSumShipment, nameRegisterCommitteeShipment,
                    nameFormedManShipment, nameCheckedManShipment, nameLabeledManShipment, nameAccountantManShipment,
                    nameHeadManShipment

    OBJECTS d=shipmentDetail
    PROPERTIES (d)  numberShipmentDetail, barcodeExSkuShipmentDetail, nameAttributeItemShipmentDetail, shortNameUnitOfMeasureItemShipmentDetail, quantityShipmentDetail,
                    importerPriceShipmentDetail, supportSumPriceShipmentDetail, overSupplierMarkupShipmentDetail, sumDetailSupplierVATShipmentDetail, dataSuppliersRangeShipmentDetail,
                    overSumPriceWareShipmentDetail, overPriceWareShipmentDetail, sumDetailVatWareShipmentDetail, dataWareRangeShipmentDetail,
                    exSumSupplierShipmentDetail, percMarkupShipmentDetail, sumDetailMarkupShipmentDetail, dataRetailRangeShipmentDetail,
                    fullDetailVatShipmentDetail, retailPriceShipmentDetail, retailSumShipmentDetail

    FILTERS inShipmentShipmentDetail(s, d)
;

// --------------------------- Формы списания ---------------------------------
@metaCodeInputMultipleItems(writeOff);

FORM writeOff 'Списание'
    OBJECTS w=writeOff FIXED PANEL
    PROPERTIES (w) nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, nameDepartmentStoreWriteOff,
                   dateWriteOff, timeWriteOff, nameReasonOffWriteOff, noteWriteOff, quantityWriteOff, accountSumWriteOff

    OBJECTS d=writeOffDetail
    PROPERTIES (d) numberWriteOffDetail, barcodeExSkuWriteOffDetail, nameAttributeItemWriteOffDetail, quantityWriteOffDetail,
                   accountPriceWriteOffDetail, accountSumWriteOffDetail, ADDOBJ, delete

    PROPERTIES FORCE PANEL READONLY articleItemWriteOff(d), nameCountryItemWriteOff(d), retailPriceWriteOffDetail(d),
                                    balanceDepartmentStoreItemWriteOff(d), minReserveItemDepartmentWriteOff(d),
                                    maxReserveItemDepartmentWriteOff(d), dateLastShipment(d)

    PROPERTIES inputMultipleItemsWriteOff(w) TODRAW d, addWriteOffDetailBarcode(w) TODRAW d
    FILTERS inWriteOffWriteOffDetail(w, d)

    EDIT writeOff OBJECT w
;

DESIGN writeOff FROM DEFAULT{

    main {
        preferredSize = (1024, 768);

        NEW header.box BEFORE d.box {
            childConstraints = TO THE RIGHT;

            NEW headerRow1 {
                childConstraints = TO THE BOTTOM;

                ADD w.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreWriteOff);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateWriteOff);
                    ADD PROPERTY(timeWriteOff);
                }

                ADD w.documentPrmGroup {
                    childConstraints = TO THE RIGHT;
                }
            }

            ADD w.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }

        d.panel{
            childConstraints = TO THE BOTTOM;
        }
    }
}

FORM writeOffs 'Списания'
    OBJECTS w=writeOff
    PROPERTIES (w) READONLY objectClassName, numberObject, seriesObject, dateWriteOff, timeWriteOff, nameDepartmentStoreWriteOff,
                            nameReasonOffWriteOff, noteWriteOff, quantityWriteOff, quantityWriteOffDetailsWriteOff, accountSumWriteOff

    PROPERTIES (w) ADDFORM, EDITFORM SHOWIF isDraftWriteOff(w), delete FORCE PANEL SHOWIF isDraftWriteOff(w),
                   postWriteOff SHOWIF isDraftWriteOff(w), unpostWriteOff SHOWIF isPostedWriteOff(w)


    OBJECTS d=writeOffDetail
    PROPERTIES (d) READONLY numberWriteOffDetail, barcodeExSkuWriteOffDetail, nameAttributeItemWriteOffDetail, quantityWriteOffDetail,
                   accountPriceWriteOffDetail, accountSumWriteOffDetail

    FILTERS inWriteOffWriteOffDetail(w, d)
;

DESIGN writeOffs FROM DEFAULT {
    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }
    PROPERTY (delete(w)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
}

// --------------------------- Использование регистров (автоматическое заполнение): выписка из розницы-------------//

retailPriceSpecificationDetail (specificationDetail) <- priceRetailBLedgerDateTime(
                itemSpecificationDetail(specificationDetail), departmentStoreSpecificationDetail(specificationDetail), dateTimeSpecificationDetail(specificationDetail))
                ON CHANGE itemSpecificationDetail(specificationDetail);

retailPriceStudyInputDetail (studyInputDetail) <- priceRetailBLedgerDateTime(
                itemStudyInputDetail(studyInputDetail), departmentStoreStudyInputDetail(studyInputDetail), dateTimeStudyInputDetail(studyInputDetail))
                ON CHANGE itemStudyInputDetail(studyInputDetail);

importerPriceStudyInputDetail (studyInputDetail) <- priceImporterBLedgerDateTime (
                itemStudyInputDetail(studyInputDetail), departmentStoreStudyInputDetail(studyInputDetail), dateTimeStudyInputDetail(studyInputDetail))
                ON CHANGE itemStudyInputDetail(studyInputDetail);

supplierPriceStudyInputDetail (studyInputDetail) <- priceSupplierBLedgerDateTime (
                itemStudyInputDetail(studyInputDetail), departmentStoreStudyInputDetail(studyInputDetail), dateTimeStudyInputDetail(studyInputDetail))
                ON CHANGE itemStudyInputDetail(studyInputDetail);

retailRangeStudyInputDetail (studyInputDetail) <- rangeRetailBLedgerDateTime(
                itemStudyInputDetail(studyInputDetail), departmentStoreStudyInputDetail(studyInputDetail), dateTimeStudyInputDetail(studyInputDetail))
                ON CHANGE itemStudyInputDetail(studyInputDetail);

curImporterPriceStudyOutputDetail (studyOutputDetail) <- priceImporterBLedgerDateTime(
                itemStudyOutputDetail(studyOutputDetail), departmentStoreStudyOutputDetail(studyOutputDetail), dateTimeStudyOutputDetail(studyOutputDetail))
                ON CHANGE itemStudyOutputDetail(studyOutputDetail);

curSupplierPriceStudyOutputDetail (studyOutputDetail) <- priceSupplierBLedgerDateTime(
                itemStudyOutputDetail(studyOutputDetail), departmentStoreStudyOutputDetail(studyOutputDetail), dateTimeStudyOutputDetail(studyOutputDetail))
                ON CHANGE itemStudyOutputDetail(studyOutputDetail);

curRetailRangeStudyOutputDetail (studyOutputDetail) <- rangeRetailBLedgerDateTime(
                itemStudyOutputDetail(studyOutputDetail), departmentStoreStudyOutputDetail(studyOutputDetail), dateTimeStudyOutputDetail(studyOutputDetail))
                ON CHANGE itemStudyOutputDetail(studyOutputDetail);

curRetailPriceStudyOutputDetail (studyOutputDetail) <- priceRetailBLedgerDateTime(
                itemStudyOutputDetail(studyOutputDetail), departmentStoreStudyOutputDetail(studyOutputDetail), dateTimeStudyOutputDetail(studyOutputDetail))
                ON CHANGE itemStudyOutputDetail(studyOutputDetail);


importerPriceStatementDetail (statementDetail) <- priceImporterBLedgerDateTime (
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail))
                ON CHANGE itemStatementDetail(statementDetail);

supplierPriceStatementDetail (statementDetail) <- priceSupplierBLedgerDateTime (
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail))
                ON CHANGE itemStatementDetail(statementDetail);

retailRangeStatementDetail (statementDetail) <- rangeRetailBLedgerDateTime(
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail))
                ON CHANGE itemStatementDetail(statementDetail);

curRetailPriceStatementDetail (statementDetail) <- priceRetailBLedgerDateTime (
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail))
                ON CHANGE itemStatementDetail(statementDetail);

retailPriceStatementDetail (statementDetail) <- priceRetailBLedgerDateTime (
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail))
                ON CHANGE itemStatementDetail(statementDetail);

priceWareStatementDetail (statementDetail) <- priceWareBLedgerDateTime(
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail))
                ON CHANGE itemStatementDetail(statementDetail);

wareStatementDetail (statementDetail) <- wareBLedgerDateTime(
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail))
                ON CHANGE itemStatementDetail(statementDetail);

curRetailPriceUserPriceChangeDetail(userPriceChangeDetail) <- priceRetailBLedgerDateTime(
                itemUserPriceChangeDetail(userPriceChangeDetail), departmentStoreUserPriceChangeDetail(userPriceChangeDetail), dateTimeUserPriceChangeDetail(userPriceChangeDetail))
                ON CHANGE itemUserPriceChangeDetail(userPriceChangeDetail);

curImporterPriceUserPriceChangeDetail (userPriceChangeDetail) <- priceImporterBLedgerDateTime(
                itemUserPriceChangeDetail(userPriceChangeDetail), departmentStoreUserPriceChangeDetail(userPriceChangeDetail), dateTimeUserPriceChangeDetail(userPriceChangeDetail))
                ON CHANGE itemUserPriceChangeDetail(userPriceChangeDetail);

curSupplierPriceUserPriceChangeDetail (userPriceChangeDetail) <- priceSupplierBLedgerDateTime(
                itemUserPriceChangeDetail(userPriceChangeDetail), departmentStoreUserPriceChangeDetail(userPriceChangeDetail), dateTimeUserPriceChangeDetail(userPriceChangeDetail))
                ON CHANGE itemUserPriceChangeDetail(userPriceChangeDetail);

curRetailRangeUserPriceChangeDetail (userPriceChangeDetail) <- rangeRetailBLedgerDateTime(
                itemUserPriceChangeDetail(userPriceChangeDetail), departmentStoreUserPriceChangeDetail(userPriceChangeDetail), dateTimeUserPriceChangeDetail(userPriceChangeDetail))
                ON CHANGE itemUserPriceChangeDetail(userPriceChangeDetail);

curPriceWareUserPriceChangeDetail (userPriceChangeDetail) <- priceWareBLedgerDateTime(
                itemUserPriceChangeDetail(userPriceChangeDetail), departmentStoreUserPriceChangeDetail(userPriceChangeDetail), dateTimeUserPriceChangeDetail(userPriceChangeDetail))
                ON CHANGE itemUserPriceChangeDetail(userPriceChangeDetail);

curWareUserPriceChangeDetail (userPriceChangeDetail) <- wareBLedgerDateTime(
                itemUserPriceChangeDetail(userPriceChangeDetail), departmentStoreUserPriceChangeDetail(userPriceChangeDetail), dateTimeUserPriceChangeDetail(userPriceChangeDetail))
                ON CHANGE itemUserPriceChangeDetail(userPriceChangeDetail);


balanceDepartmentStoreItemStatementDetail 'Текущий остаток' (statementDetail) = balanceBItemLedgerDateTime(
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail)) IN itemStatementDetailInfo;

quantityItemByStatementDetail(statementDetail) = quantityItemStatement(itemStatementDetail(statementDetail), statementStatementDetail(statementDetail));
highlightStatementDetail(statementDetail) =  quantityItemByStatementDetail(statementDetail) > balanceDepartmentStoreItemStatementDetail(statementDetail);

balanceDepartmentStoreItemSpecificationDetail 'Текущий остаток' (specificationDetail) = balanceBItemLedgerDateTime(
                itemSpecificationDetail(specificationDetail), departmentStoreSpecificationDetail(specificationDetail), dateTimeSpecificationDetail(specificationDetail));

quantityItemBySpecificationDetail(specificationDetail) = quantityItemSpecification( itemSpecificationDetail(specificationDetail), specificationSpecificationDetail(specificationDetail));
highlightSpecificationDetail(specificationDetail) =  quantityItemBySpecificationDetail(specificationDetail) > balanceDepartmentStoreItemSpecificationDetail(specificationDetail);

quantityItemDepartmentStoreDate 'Количество выставленного товара' (departmentStore, item, date) = GROUP SUM
    quantitySpecificationDetail(specificationDetail)
    IF dateToSpecification(specificationSpecificationDetail(specificationDetail)) >= date AND date AS DATE
    BY departmentStoreSpecificationDetail(specificationDetail), itemSpecificationDetail(specificationDetail), date;


quantityExhibitedItemBySpecificationDetail(specificationDetail) = quantityItemDepartmentStoreDate(departmentStoreSpecificationDetail(specificationDetail),
    itemSpecificationDetail(specificationDetail), dateSpecification(specificationSpecificationDetail(specificationDetail)));

availableQuantityItemBySpecificationDetail 'Доступное к-во, с учетом непросроченных с/ф' (specificationDetail) =
    balanceDepartmentStoreItemSpecificationDetail(specificationDetail)-quantityExhibitedItemBySpecificationDetail(specificationDetail);

NotNullAvailableQuantityItemBySpecificationDetail(specificationDetail) = availableQuantityItemBySpecificationDetail(specificationDetail) < 0;

overdueSpecificationStatement 'Просроченные с/ф' (specification, statement) = overdueSpecificationDate(specification, dateStatement(statement));
noOverdueSpecificationStatement 'Непросроченные с/ф' (specification, statement) = noOverdueSpecificationDate(specification, dateStatement(statement));

// --------------------------- Использование регистров (автоматическое заполнение): инвентаризация---------------//

priceAccountDetailPage(detailPage) <- priceAccountBLedgerDateTime(
                skuBarcodeDetailPage(detailPage), departmentStoreDetailPage(detailPage), dateTimeInventory(inventoryDetailPage(detailPage)))
                ON CHANGE skuBarcodeDetailPage(detailPage);

priceAccountCollationSheetItem(collationSheet, item) <- priceAccountBLedgerDateTime(
                item, departmentStoreCollationSheet(collationSheet), dateTimeInventory(inventoryCollationSheet(collationSheet)))
                ON ASSIGN includeCollationSheetItem(collationSheet, item);

fillBalanceInventory 'Заполнить остатки' (inventory) = ACTION(inventory) {
    SET balanceCollationSheetItem(collationSheet, item) AND inventoryCollationSheet(collationSheet)==inventory  AND item IS item
        <- balanceBItemLedgerDateTime(item, departmentStoreCollationSheet(collationSheet), dateTimeInventory(inventoryCollationSheet(collationSheet)));

} CONFIRM;
//  todo: зацикливается на includeCollationSheetItem, пока на action поставили - переделать потом

convertPriceInventory 'Пересчитать цены по всей инвентаризации' (inventory) = ACTION(inventory) {
    SET priceAccountDetailPage(detailPage) AND inventoryDetailPage(detailPage) == inventory <- priceAccountBLedgerDateTime(
            skuBarcodeDetailPage(detailPage), departmentStoreDetailPage(detailPage), dateTimeInventory(inventoryDetailPage(detailPage)))
            AND inventoryDetailPage(detailPage) == inventory;
    SET priceAccountCollationSheetItem(collationSheet, item) AND inventoryCollationSheet(collationSheet) == inventory <- priceAccountBLedgerDateTime(
            item, departmentStoreCollationSheet(collationSheet), dateTimeInventory(inventoryCollationSheet(collationSheet)))
            AND inventoryCollationSheet(collationSheet) == inventory;
} CONFIRM;

// todo: какой-то баг, не всегда срабатывает action

convertPriceCollationSheet 'Пересчитать цены в сличительной ведомости' (collationSheet) = ACTION(collationSheet) {
    SET priceAccountDetailPage(detailPage) AND collationSheetListInventory(listInventoryDetailPage(detailPage)) == collationSheet <- priceAccountBLedgerDateTime(
            skuBarcodeDetailPage(detailPage), departmentStoreDetailPage(detailPage), dateTimeInventory(inventoryDetailPage(detailPage)))
            AND collationSheetListInventory(listInventoryDetailPage(detailPage)) == collationSheet;
    SET priceAccountCollationSheetItem(collationSheet, item) <- priceAccountBLedgerDateTime(
            item, departmentStoreCollationSheet(collationSheet), dateTimeInventory(inventoryCollationSheet(collationSheet)));
} CONFIRM;



//---------------------------- Переоценка (конкретная реализация) ----------------------------------------//

dateTimePriceChangeDocument 'Дата/время' (priceChangeDocument) = UNION EXCLUSIVE dateTimePriceChangeShipment(priceChangeDocument),
                                                                                 dateTimePriceChangeReturnSupplier(priceChangeDocument),
                                                                                 dateTimePriceChangeStatement(priceChangeDocument),
                                                                                 dateTimePriceChangeInnerArrival(priceChangeDocument),
                                                                                 dateTimeUserPriceChange(priceChangeDocument) PERSISTENT;

descriptionPriceChangeDocument 'Название документа' (priceChangeDocument) = UNION EXCLUSIVE descriptionPriceChangeShipment(priceChangeDocument),
                                                                                            descriptionPriceChangeReturnSupplier(priceChangeDocument),
                                                                                            descriptionPriceChangeStatement(priceChangeDocument),
                                                                                            descriptionPriceChangeInnerArrival(priceChangeDocument),
                                                                                            descriptionUserPriceChange(priceChangeDocument) PERSISTENT;

datePriceChangeDocument 'Дата' (priceChangeDocument) = dateInTime(dateTimePriceChangeDocument(priceChangeDocument)) PERSISTENT;

isPostedPriceChangeDocument 'Закрыт' (priceChangeDocument) = UNION EXCLUSIVE isPostedPriceChangeShipment(priceChangeDocument),
                                                                             isPostedPriceChangeReturnSupplier(priceChangeDocument),
                                                                             isPostedPriceChangeStatement(priceChangeDocument),
                                                                             isPostedPriceChangeInnerArrival(priceChangeDocument),
                                                                             isPostedUserPriceChange(priceChangeDocument) PERSISTENT;

numberPriceChangeDocument 'Номер накладной' (priceChangeDocument) = UNION EXCLUSIVE numberPriceChangeShipment(priceChangeDocument),
                                                                                    numberPriceChangeReturnSupplier(priceChangeDocument),
                                                                                    numberPriceChangeInnerArrival(priceChangeDocument),
                                                                                    numberPriceChangeStatement(priceChangeDocument),
                                                                                    numberObject(priceChangeDocument) PERSISTENT;

seriesPriceChangeDocument 'Серия накладной' (priceChangeDocument) = UNION EXCLUSIVE seriesPriceChangeShipment(priceChangeDocument),
                                                                                    seriesPriceChangeReturnSupplier(priceChangeDocument),
                                                                                    seriesPriceChangeInnerArrival(priceChangeDocument),
                                                                                    seriesPriceChangeStatement (priceChangeDocument),
                                                                                    seriesObject(priceChangeDocument) PERSISTENT;

numberDisposalPriceChangeDocument '№ распоряжения на переоценку' (priceChangeDocument) = UNION EXCLUSIVE
                                                                                    numberDisposalPriceChangeShipment(priceChangeDocument),
                                                                                    numberDisposalPriceChangeReturnSupplier(priceChangeDocument),
                                                                                    numberDisposalPriceChangeInnerArrival(priceChangeDocument),
                                                                                    numberDisposalPriceChangeStatement(priceChangeDocument),
                                                                                    numberDisposalUserPriceChange(priceChangeDocument)PERSISTENT;

departmentStorePriceChangeDocument (priceChangeDocument) = UNION EXCLUSIVE departmentStorePriceChangeShipment(priceChangeDocument),
                                                                           departmentStorePriceChangeReturnSupplier(priceChangeDocument),
                                                                           departmentStorePriceChangeStatement(priceChangeDocument),
                                                                           departmentStorePriceChangeInnerArrival(priceChangeDocument),
                                                                           departmentStoreUserPriceChange(priceChangeDocument) PERSISTENT;
nameDepartmentStorePriceChangeDocument 'Отдел магазина' (priceChangeDocument) = name(departmentStorePriceChangeDocument(priceChangeDocument));

documentPriceChangeDocumentDetail (priceChangeDocumentDetail) = UNION EXCLUSIVE priceChangeShipmentPriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                priceChangeReturnSupplierPriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                priceChangeStatementPriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                priceChangeInnerArrivalPriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                userPriceChangeUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;

itemPriceChangeDocumentDetail (priceChangeDocumentDetail) = UNION EXCLUSIVE itemPriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                            itemPriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                            itemPriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                            itemPriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                            itemUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;
nameItemPriceChangeDocumentDetail 'Товар' (priceChangeDocumentDetail) = nameAttributeItem(itemPriceChangeDocumentDetail(priceChangeDocumentDetail));

shortNameUnitOfMeasureItemPriceChangeDocumentDetail 'Ед. изм.' (priceChangeDocumentDetail) = shortNameUnitOfMeasureItem(itemPriceChangeDocumentDetail(priceChangeDocumentDetail));

quantityPriceChangeDocumentDetail 'Остаток' (priceChangeDocumentDetail) = UNION EXCLUSIVE quantityPriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                          quantityPriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                          quantityPriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                          quantityPriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                          quantityUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;

oldImporterPriceChangeDocumentDetail 'Старая цена изготовителя' (priceChangeDocumentDetail) = UNION EXCLUSIVE curImporterPriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                                              curImporterPriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                                              importerPriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                                              curImporterPriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                                              curImporterPriceUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;
importerPriceChangeDocumentDetail 'Новая цена изготовителя' (priceChangeDocumentDetail) = UNION EXCLUSIVE importerPriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                                          importerPriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                                          importerPriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                                          importerPriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                                          importerPriceUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;

oldSupplierPriceChangeDocumentDetail 'Старая цена поставщика' (priceChangeDocumentDetail) = UNION EXCLUSIVE curSupplierPriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                                            curSupplierPriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                                            supplierPriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                                            curSupplierPriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                                            curSupplierPriceUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;
supplierPriceChangeDocumentDetail 'Новая цена поставщика' (priceChangeDocumentDetail) = UNION EXCLUSIVE supplierPriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                                        supplierPriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                                        supplierPriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                                        supplierPriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                                        supplierPriceUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;


oldDataRetailRangePriceChangeDocumentDetail 'Старый НДС, %' (priceChangeDocumentDetail) = UNION EXCLUSIVE curDataRetailRangePriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                                          curDataRetailRangePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                                          dataRetailRangePriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                                          curDataRetailRangePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                                          curDataRetailRangeUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;
dataRetailRangePriceChangeDocumentDetail 'Новый НДС, %' (priceChangeDocumentDetail) = UNION EXCLUSIVE dataRetailRangePriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                                      dataRetailRangePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                                      dataRetailRangePriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                                      dataRetailRangePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                                      dataRetailRangeUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;

oldRetailPriceChangeDocumentDetail 'Старая розничная цена' (priceChangeDocumentDetail) = UNION EXCLUSIVE curRetailPriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                                         curRetailPriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                                         curRetailPriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                                         curRetailPriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                                         curRetailPriceUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;
retailPriceChangeDocumentDetail 'Новая розничная цена' (priceChangeDocumentDetail) = UNION EXCLUSIVE retailPriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                                     retailPriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                                     retailPriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                                     retailPriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                                     retailPriceUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;

oldRetailSumChangeDocumentDetail 'Старая розничная сумма' (priceChangeDocumentDetail) =
                quantityPriceChangeDocumentDetail(priceChangeDocumentDetail) * oldRetailPriceChangeDocumentDetail(priceChangeDocumentDetail);

oldRetailSumChangeDocument 'Старая розничная сумма' (priceChangeDocument) = GROUP SUM oldRetailSumChangeDocumentDetail(priceChangeDocumentDetail)
    BY documentPriceChangeDocumentDetail(priceChangeDocumentDetail);

retailSumChangeDocumentDetail 'Новая розничная сумма' (priceChangeDocumentDetail) =
                quantityPriceChangeDocumentDetail(priceChangeDocumentDetail) * retailPriceChangeDocumentDetail(priceChangeDocumentDetail);

retailSumChangeDocument 'Новая розничная сумма' (priceChangeDocument) = GROUP SUM retailSumChangeDocumentDetail(priceChangeDocumentDetail)
    BY documentPriceChangeDocumentDetail(priceChangeDocumentDetail);

accountSumChangeDocumentDetail 'Сумма переоценки' (priceChangeDocumentDetail) =
                retailSumChangeDocumentDetail(priceChangeDocumentDetail) (-) oldRetailSumChangeDocumentDetail(priceChangeDocumentDetail);

accountSumChangeDocument 'Сумма переоценки' (priceChangeDocument) = GROUP SUM accountSumChangeDocumentDetail(priceChangeDocumentDetail)
                                                                          BY  documentPriceChangeDocumentDetail(priceChangeDocumentDetail);

warePriceChangeDocumentDetail 'Новая посуда' (priceChangeDocumentDetail) = UNION EXCLUSIVE
                                                                            warePriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                            warePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                            warePriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                            warePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                            wareUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;

oldWarePriceChangeDocumentDetail 'Старая посуда' (priceChangeDocumentDetail) = UNION EXCLUSIVE
                                                                            curWarePriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                            curWarePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                            warePriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                            curWarePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                            curWareUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;


priceWarePriceChangeDocumentDetail 'Новая цена посуды' (priceChangeDocumentDetail) = UNION EXCLUSIVE
                                                                                            priceWarePriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                            priceWarePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                            priceWarePriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                            priceWarePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                            priceWareUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;

oldPriceWarePriceChangeDocumentDetail 'Старая цена посуды' (priceChangeDocumentDetail) = UNION EXCLUSIVE
                                                                                            curPriceWarePriceChangeShipmentDetail(priceChangeDocumentDetail),
                                                                                            curPriceWarePriceChangeReturnSupplierDetail(priceChangeDocumentDetail),
                                                                                            priceWarePriceChangeStatementDetail(priceChangeDocumentDetail),
                                                                                            curPriceWarePriceChangeInnerArrivalDetail(priceChangeDocumentDetail),
                                                                                            curPriceWareUserPriceChangeDetail(priceChangeDocumentDetail) PERSISTENT;

datePriceChangeDocumentDetail 'Дата' (priceChangeDocumentDetail) = datePriceChangeDocument(documentPriceChangeDocumentDetail(priceChangeDocumentDetail));

withoutWarePricePriceChangeDocumentDetail 'Цена без посуды' (priceChangeDocumentDetail) = retailPriceChangeDocumentDetail(priceChangeDocumentDetail) (-)
    priceWarePriceChangeDocumentDetail(priceChangeDocumentDetail);

sumRetailVATPriceChangeDocumentDetail 'Сумма НДС за ед.' (priceChangeDocumentDetail) = [X*Y/(100+Y)](
    withoutWarePricePriceChangeDocumentDetail(priceChangeDocumentDetail), dataRetailRangePriceChangeDocumentDetail(priceChangeDocumentDetail));

sumMarkupPriceChangeDocumentDetail 'Сумма надбавки' (priceChangeDocumentDetail) = withoutWarePricePriceChangeDocumentDetail(priceChangeDocumentDetail) (-)
    sumRetailVATPriceChangeDocumentDetail(priceChangeDocumentDetail) (-) supplierPriceChangeDocumentDetail(priceChangeDocumentDetail);

retailMarkupPriceChangeDocumentDetail 'Наценка,%' (priceChangeDocumentDetail) = [X*100/Y](
    sumMarkupPriceChangeDocumentDetail(priceChangeDocumentDetail), supplierPriceChangeDocumentDetail(priceChangeDocumentDetail));

dataWareRangePriceChangeDocumentDetail 'НДС по посуде' (priceChangeDocumentDetail) =
    dataActingRateRangeDate(rangeWareVal(warePriceChangeDocumentDetail(priceChangeDocumentDetail), datePriceChangeDocumentDetail(priceChangeDocumentDetail)),
                            datePriceChangeDocumentDetail(priceChangeDocumentDetail));

sumVatWarePriceChangeDocumentDetail 'Сумма НДС по посуде, за ед.' (priceChangeDocumentDetail) = [round0(X*Y/(100+Y))](
     (UNION OVERRIDE 0 IF priceChangeDocumentDetail IS priceChangeDocumentDetail, priceWarePriceChangeDocumentDetail (priceChangeDocumentDetail)),
     (UNION OVERRIDE 0 IF priceChangeDocumentDetail IS priceChangeDocumentDetail, dataWareRangePriceChangeDocumentDetail(priceChangeDocumentDetail)));

sumDetailVatWarePriceChangeDocumentDetail 'Сумма НДС по посуде' (priceChangeDocumentDetail) =
    UNION OVERRIDE 0 IF priceChangeDocumentDetail IS priceChangeDocumentDetail, sumVatWarePriceChangeDocumentDetail(priceChangeDocumentDetail) * quantityPriceChangeDocumentDetail(priceChangeDocumentDetail);

totalSumImporterPricePriceChangeDocument 'Сумма изготовителя' (priceChangeDocument) = GROUP SUM
    importerPriceChangeDocumentDetail(priceChangeDocumentDetail)*quantityPriceChangeDocumentDetail(priceChangeDocumentDetail)
        BY documentPriceChangeDocumentDetail(priceChangeDocumentDetail);


totalSumSupplierPricePriceChangeDocumentDetail 'Новая сумма поставщика' (priceChangeDocumentDetail)=
    supplierPriceChangeDocumentDetail(priceChangeDocumentDetail)* quantityPriceChangeDocumentDetail(priceChangeDocumentDetail);
totalSumSupplierPricePriceChangeDocument 'Новая сумма поставщика' (priceChangeDocument) = GROUP SUM
    totalSumSupplierPricePriceChangeDocumentDetail(priceChangeDocumentDetail)
        BY documentPriceChangeDocumentDetail(priceChangeDocumentDetail);

totalSumMarkupPriceChangeDocumentDetail 'Новая сумма надбавки' (priceChangeDocumentDetail)=
    sumMarkupPriceChangeDocumentDetail(priceChangeDocumentDetail)* quantityPriceChangeDocumentDetail(priceChangeDocumentDetail);
totalSumMarkupPriceChangeDocument 'Новая сумма надбавки' (priceChangeDocument) = GROUP SUM
    totalSumMarkupPriceChangeDocumentDetail(priceChangeDocumentDetail)
        BY documentPriceChangeDocumentDetail(priceChangeDocumentDetail);

totalSumRetailVATPriceChangeDocumentDetail 'Новая сумма розничного НДС' (priceChangeDocumentDetail)=
    sumRetailVATPriceChangeDocumentDetail(priceChangeDocumentDetail)* quantityPriceChangeDocumentDetail(priceChangeDocumentDetail);
totalSumRetailVATPriceChangeDocument 'Новая сумма розничного НДС' (priceChangeDocument) = GROUP SUM
    totalSumRetailVATPriceChangeDocumentDetail(priceChangeDocumentDetail)
        BY documentPriceChangeDocumentDetail(priceChangeDocumentDetail);

totalSumWarePriceChangeDocumentDetail 'Новая сумма посуды' (priceChangeDocumentDetail)=
    priceWarePriceChangeDocumentDetail(priceChangeDocumentDetail)* quantityPriceChangeDocumentDetail(priceChangeDocumentDetail);
totalSumWarePriceChangeDocument 'Новая сумма посуды' (priceChangeDocument) = GROUP SUM
    totalSumWarePriceChangeDocumentDetail(priceChangeDocumentDetail)
        BY documentPriceChangeDocumentDetail(priceChangeDocumentDetail);

totalSumVatWarePriceChangeDocument 'Новая сумма НДС по посуде' (priceChangeDocument) =  GROUP SUM
    sumDetailVatWarePriceChangeDocumentDetail(priceChangeDocumentDetail) BY documentPriceChangeDocumentDetail(priceChangeDocumentDetail);

quantityPriceChangeDocument 'Количество' (priceChangeDocument) = GROUP SUM quantityPriceChangeDocumentDetail(priceChangeDocumentDetail)
    BY documentPriceChangeDocumentDetail(priceChangeDocumentDetail);


numberPriceChangeDocumentDetail 'Номер строки' (priceChangeDocumentDetail) =
        PARTITION SUM 1 IF priceChangeDocumentDetail IS priceChangeDocumentDetail BY documentPriceChangeDocumentDetail(priceChangeDocumentDetail)
        ORDER priceChangeDocumentDetail IN recognizeGroup MINCHARWIDTH 3 PREFCHARWIDTH 3;

           //------------------------------текущие показатели--------------------------------------//

oldWithoutWarePricePriceChangeDocumentDetail 'Цена без посуды' (priceChangeDocumentDetail) = oldRetailPriceChangeDocumentDetail(priceChangeDocumentDetail) (-)
    oldPriceWarePriceChangeDocumentDetail(priceChangeDocumentDetail);

oldSumRetailVATPriceChangeDocumentDetail 'Сумма НДС за ед.' (priceChangeDocumentDetail) = [X*Y/(100+Y)](
    oldWithoutWarePricePriceChangeDocumentDetail(priceChangeDocumentDetail), oldDataRetailRangePriceChangeDocumentDetail(priceChangeDocumentDetail));

oldSumMarkupPriceChangeDocumentDetail 'Сумма надбавки' (priceChangeDocumentDetail) = oldWithoutWarePricePriceChangeDocumentDetail(priceChangeDocumentDetail) (-)
    oldSumRetailVATPriceChangeDocumentDetail(priceChangeDocumentDetail) (-) oldSupplierPriceChangeDocumentDetail(priceChangeDocumentDetail);

oldRetailMarkupPriceChangeDocumentDetail 'Текущая наценка,%' (priceChangeDocumentDetail) = [X*100/Y](
    oldSumMarkupPriceChangeDocumentDetail(priceChangeDocumentDetail), oldImporterPriceChangeDocumentDetail(priceChangeDocumentDetail));

oldDataWareRangePriceChangeDocumentDetail 'НДС по посуде' (priceChangeDocumentDetail) =
    dataActingRateRangeDate(rangeWareVal(oldWarePriceChangeDocumentDetail(priceChangeDocumentDetail), datePriceChangeDocumentDetail(priceChangeDocumentDetail)),
                            datePriceChangeDocumentDetail(priceChangeDocumentDetail));
//oldNumberWareRangePriceChangeDocumentDetail 'Тек. НДС, номер по посуде' (priceChangeDocumentDetail) =
//    dataRange(rangeWareVal(oldWarePriceChangeDocumentDetail(priceChangeDocumentDetail), datePriceChangeDocumentDetail(priceChangeDocumentDetail)));

oldSumVatWarePriceChangeDocumentDetail 'Сумма НДС по посуде, за ед.' (priceChangeDocumentDetail) = [round0(X*Y/(100+Y))](
     oldPriceWarePriceChangeDocumentDetail (priceChangeDocumentDetail), oldDataWareRangePriceChangeDocumentDetail(priceChangeDocumentDetail));

oldSumDetailVatWarePriceChangeDocumentDetail 'Сумма НДС по посуде' (priceChangeDocumentDetail) =
    oldSumVatWarePriceChangeDocumentDetail(priceChangeDocumentDetail) * quantityPriceChangeDocumentDetail(priceChangeDocumentDetail);

commonMarkupPriceChangeDocumentDetail 'Общий процент надбавки от цены изготовителя' (priceChangeDocumentDetail) = [(X/Y-1)*100](
    supplierPriceChangeDocumentDetail(priceChangeDocumentDetail), importerPriceChangeDocumentDetail(priceChangeDocumentDetail));

oldTotalSumImporterPricePriceChangeDocument 'Старая сумма изготовителя' (priceChangeDocument) = GROUP SUM
    oldImporterPriceChangeDocumentDetail(priceChangeDocumentDetail)*quantityPriceChangeDocumentDetail(priceChangeDocumentDetail)
        BY documentPriceChangeDocumentDetail(priceChangeDocumentDetail);



oldTotalSumSupplierPricePriceChangeDocumentDetail 'Старая сумма поставщика' (priceChangeDocumentDetail) =
    oldSupplierPriceChangeDocumentDetail(priceChangeDocumentDetail)* quantityPriceChangeDocumentDetail(priceChangeDocumentDetail);
oldTotalSumSupplierPricePriceChangeDocument 'Старая сумма поставщика' (priceChangeDocument) = GROUP SUM
    oldTotalSumSupplierPricePriceChangeDocumentDetail(priceChangeDocumentDetail)
        BY documentPriceChangeDocumentDetail(priceChangeDocumentDetail);


oldTotalSumMarkupPriceChangeDocumentDetail 'Старая сумма надбавки' (priceChangeDocumentDetail) =
    oldSumMarkupPriceChangeDocumentDetail(priceChangeDocumentDetail)*quantityPriceChangeDocumentDetail(priceChangeDocumentDetail);
oldTotalSumMarkupPriceChangeDocument 'Старая сумма надбавки' (priceChangeDocument) = GROUP SUM
    oldTotalSumMarkupPriceChangeDocumentDetail(priceChangeDocumentDetail)
        BY documentPriceChangeDocumentDetail(priceChangeDocumentDetail);


oldTotalSumRetailVATPriceChangeDocumentDetail 'Старая сумма розничного НДС' (priceChangeDocumentDetail) =
    oldSumRetailVATPriceChangeDocumentDetail(priceChangeDocumentDetail)*quantityPriceChangeDocumentDetail(priceChangeDocumentDetail);
oldTotalSumRetailVATPriceChangeDocument 'Старая сумма розничного НДС' (priceChangeDocument) = GROUP SUM
    oldTotalSumRetailVATPriceChangeDocumentDetail(priceChangeDocumentDetail)
        BY documentPriceChangeDocumentDetail(priceChangeDocumentDetail);


oldTotalSumWarePriceChangeDocumentDetail 'Старая сумма посуды' (priceChangeDocumentDetail) =
    oldPriceWarePriceChangeDocumentDetail(priceChangeDocumentDetail)* quantityPriceChangeDocumentDetail(priceChangeDocumentDetail);
oldTotalSumWarePriceChangeDocument 'Старая сумма посуды' (priceChangeDocument) = GROUP SUM
    oldTotalSumWarePriceChangeDocumentDetail(priceChangeDocumentDetail)
        BY documentPriceChangeDocumentDetail(priceChangeDocumentDetail);

oldTotalSumVatWarePriceChangeDocument 'Старая сумма НДС по посуде' (priceChangeDocument) =  GROUP SUM
    oldSumDetailVatWarePriceChangeDocumentDetail(priceChangeDocumentDetail)
        BY documentPriceChangeDocumentDetail(priceChangeDocumentDetail);

                         // ---------Дельта  показателей переоценки--------------- //

diffTotalSumSupplierPricePriceChangeDocumentDetail 'Изменение суммы поставщика' (priceChangeDocumentDetail) = totalSumSupplierPricePriceChangeDocumentDetail(priceChangeDocumentDetail) (-)
    oldTotalSumSupplierPricePriceChangeDocumentDetail(priceChangeDocumentDetail);

diffTotalSumMarkupPriceChangeDocumentDetail 'Изменение суммы надбавки' (priceChangeDocumentDetail) = totalSumMarkupPriceChangeDocumentDetail(priceChangeDocumentDetail) (-)
    oldTotalSumMarkupPriceChangeDocumentDetail(priceChangeDocumentDetail);

diffTotalSumRetailVATPriceChangeDocumentDetail 'Изменение суммы розничного НДС' (priceChangeDocumentDetail) = totalSumRetailVATPriceChangeDocumentDetail(priceChangeDocumentDetail) (-)
    oldTotalSumRetailVATPriceChangeDocumentDetail(priceChangeDocumentDetail);

diffTotalSumWarePriceChangeDocumentDetail 'Изменение суммы посуды' (priceChangeDocumentDetail) = totalSumWarePriceChangeDocumentDetail(priceChangeDocumentDetail) (-)
    oldTotalSumWarePriceChangeDocumentDetail(priceChangeDocumentDetail);

diffTotalSumVatWarePriceChangeDocumentDetail 'Изменение суммы НДС посуды' (priceChangeDocumentDetail) = sumDetailVatWarePriceChangeDocumentDetail(priceChangeDocumentDetail) (-)
    oldSumDetailVatWarePriceChangeDocumentDetail(priceChangeDocumentDetail);


diffTotalSumImporterPricePriceChangeDocument 'Изменение суммы изготовителя' (priceChangeDocument) = totalSumImporterPricePriceChangeDocument(priceChangeDocument) (-)
    oldTotalSumImporterPricePriceChangeDocument(priceChangeDocument) IN documentSumGroup;

diffTotalSumSupplierPricePriceChangeDocument 'Изменение суммы поставщика' (priceChangeDocument) = totalSumSupplierPricePriceChangeDocument(priceChangeDocument) (-)
    oldTotalSumSupplierPricePriceChangeDocument(priceChangeDocument) IN documentSumGroup;

diffTotalSumMarkupPriceChangeDocument 'Изменение суммы надбавки' (priceChangeDocument) = totalSumMarkupPriceChangeDocument(priceChangeDocument) (-)
    oldTotalSumMarkupPriceChangeDocument(priceChangeDocument) IN documentSumGroup;

diffTotalSumRetailVATPriceChangeDocument 'Изменение суммы розничного НДС' (priceChangeDocument) = totalSumRetailVATPriceChangeDocument(priceChangeDocument) (-)
    oldTotalSumRetailVATPriceChangeDocument(priceChangeDocument) IN documentSumGroup;

diffTotalSumWarePriceChangeDocument 'Изменение суммы посуды' (priceChangeDocument) = totalSumWarePriceChangeDocument(priceChangeDocument) (-)
    oldTotalSumWarePriceChangeDocument(priceChangeDocument) IN documentSumGroup;

diffTotalSumVatWarePriceChangeDocument 'Изменение суммы НДС посуды' (priceChangeDocument) = totalSumVatWarePriceChangeDocument(priceChangeDocument) (-)
    oldTotalSumVatWarePriceChangeDocument(priceChangeDocument) IN documentSumGroup;

revaluationCommitteePriceChangeDocument 'Комиссия переоценки ИД' (priceChangeDocument) = DATA revaluationCommittee(priceChangeDocument);
revaluationCommitteePriceChangeDocument(priceChangeDocument) <- revaluationCommitteeDepartmentStore(departmentStorePriceChangeDocument(priceChangeDocument))
    ON ASSIGN priceChangeDocument IS priceChangeDocument;

nameRevaluationCommitteePriceChangeDocument 'Комиссия переоценки' (priceChangeDocument) = name(revaluationCommitteePriceChangeDocument(priceChangeDocument));
commonNameEmployeeCommitteePriceChangeDocument 'Сотрудники комиссии' (priceChangeDocument) = commonNameEmployeeCommittee(revaluationCommitteePriceChangeDocument(priceChangeDocument));
inPriceChangeDocumentEmployee (priceChangeDocument, employee) = inCommitteeEmployee(revaluationCommitteePriceChangeDocument(priceChangeDocument), employee);
commonNameChairmanPriceChangeDocument 'Председатель комиссии' (priceChangeDocument) = commonNameChairmanCommittee(revaluationCommitteePriceChangeDocument(priceChangeDocument));
nameOfficerChairmanPriceChangeDocument 'Должность' (priceChangeDocument) = nameOfficerChairmanCommittee(revaluationCommitteePriceChangeDocument(priceChangeDocument));

                            //----------печатная форма--------//
FORM actOfRevaluation 'Акт переоценки' PRINT
    OBJECTS pc=priceChangeDocument  FIXED PANEL
    PROPERTIES(pc) SELECTOR  numberPriceChangeDocument, seriesPriceChangeDocument, objectClassName, isPostedPriceChangeDocument,
                             nameDepartmentStorePriceChangeDocument, datePriceChangeDocument, nameRevaluationCommitteePriceChangeDocument,
                             commonNameChairmanPriceChangeDocument, nameOfficerChairmanPriceChangeDocument, commonNameEmployeeCommitteePriceChangeDocument,
                             quantityPriceChangeDocument, numberDisposalPriceChangeDocument,
                             oldTotalSumSupplierPricePriceChangeDocument, oldTotalSumMarkupPriceChangeDocument, oldTotalSumRetailVATPriceChangeDocument,
                             oldTotalSumWarePriceChangeDocument, oldTotalSumVatWarePriceChangeDocument, oldRetailSumChangeDocument,
                             totalSumSupplierPricePriceChangeDocument, totalSumMarkupPriceChangeDocument, totalSumMarkupPriceChangeDocument,
                             totalSumWarePriceChangeDocument, totalSumVatWarePriceChangeDocument, retailSumChangeDocumentDetail,
                             diffTotalSumSupplierPricePriceChangeDocument, diffTotalSumMarkupPriceChangeDocument, diffTotalSumRetailVATPriceChangeDocument,
                             diffTotalSumWarePriceChangeDocument, diffTotalSumVatWarePriceChangeDocument, accountSumChangeDocument

    OBJECTS pcd=priceChangeDocumentDetail
    PROPERTIES(pcd) READONLY numberPriceChangeDocumentDetail, nameItemPriceChangeDocumentDetail, shortNameUnitOfMeasureItemPriceChangeDocumentDetail,
                             quantityPriceChangeDocumentDetail,
                             oldTotalSumSupplierPricePriceChangeDocumentDetail, oldTotalSumMarkupPriceChangeDocumentDetail,
                             oldTotalSumRetailVATPriceChangeDocumentDetail, oldTotalSumWarePriceChangeDocumentDetail,
                             oldSumDetailVatWarePriceChangeDocumentDetail, oldRetailPriceChangeDocumentDetail, oldRetailSumChangeDocumentDetail,
                             totalSumSupplierPricePriceChangeDocumentDetail, totalSumMarkupPriceChangeDocumentDetail,
                             totalSumRetailVATPriceChangeDocumentDetail, totalSumWarePriceChangeDocumentDetail,
                             sumDetailVatWarePriceChangeDocumentDetail, retailPriceChangeDocumentDetail, retailSumChangeDocumentDetail,
                             diffTotalSumSupplierPricePriceChangeDocumentDetail, diffTotalSumMarkupPriceChangeDocumentDetail,
                             diffTotalSumRetailVATPriceChangeDocumentDetail, diffTotalSumWarePriceChangeDocumentDetail,
                             diffTotalSumVatWarePriceChangeDocumentDetail, accountSumChangeDocumentDetail

    OBJECTS e=employee
    PROPERTIES(e) READONLY   commonName, nameOfficerEmployee

    FILTERS                  documentPriceChangeDocumentDetail(pcd) == pc,
                             inPriceChangeDocumentEmployee(pc, e)
;

toPrintActOfRevaluation 'Акт переоценки' (priceChangeDocument) = ACTION FORM actOfRevaluation OBJECTS pc TOOLBAR IMAGE 'print.png' CONFIRM;


FORM priceChangeDocuments 'Акты переоценки'
    OBJECTS pc=priceChangeDocument
    PROPERTIES(pc) READONLY objectClassName, isPostedPriceChangeDocument FORCE GRID, dateTimePriceChangeDocument, nameDepartmentStorePriceChangeDocument,
                            numberPriceChangeDocument, seriesPriceChangeDocument, nameSupplierPriceChangeShipment, nameSupplierPriceChangeReturnSupplier,
                            nameSenderDepartmentPriceChangeInnerArrival,
                            diffTotalSumSupplierPricePriceChangeDocument, diffTotalSumMarkupPriceChangeDocument, diffTotalSumRetailVATPriceChangeDocument,
                            diffTotalSumWarePriceChangeDocument, diffTotalSumVatWarePriceChangeDocument, accountSumChangeDocument, nameRevaluationCommitteePriceChangeDocument
    PROPERTIES(pc) FORCE PANEL toPrintActOfRevaluation

    OBJECTS pcd=priceChangeDocumentDetail
    PROPERTIES(pcd) READONLY nameItemPriceChangeDocumentDetail, quantityPriceChangeDocumentDetail,
                             oldImporterPriceChangeDocumentDetail, importerPriceChangeDocumentDetail,
                             oldSupplierPriceChangeDocumentDetail, supplierPriceChangeDocumentDetail,
                             oldDataRetailRangePriceChangeDocumentDetail, dataRetailRangePriceChangeDocumentDetail,
                             oldRetailPriceChangeDocumentDetail, retailPriceChangeDocumentDetail,
                             oldPriceWarePriceChangeDocumentDetail, priceWarePriceChangeDocumentDetail

    FILTERS documentPriceChangeDocumentDetail(pcd) == pc
;

//------------------------------------------- Приход товара----------------------------------------------------//

toPrintPricesRegister 'Реестр цен' (shipment) = ACTION FORM pricesRegister OBJECTS s TOOLBAR IMAGE 'print.png';
toPrintActOfRevaluationShipment 'Акт переоценки' (shipment) = toPrintActOfRevaluation(uniquePriceChangeShipment(shipment));

FORM shipment 'Поставка'
    OBJECTS s=shipment FIXED PANEL
    PROPERTIES (s) nameDepartmentStoreShipment, numberObject, seriesObject, dateShipment, timeShipment,
                   nameSupplierShipment, numberContractShipment, ordersShipment, toFillShipmentDetailsShipment,
                   percentOrderedShipmentDetailsShipment, showFormOrdersShipment,
                   carryingChargesShipment, totalQuantityShipment, totalSumIncVATShipment, totalSumSupplierShipment, retailSumShipment,
                   noteShipment, toShowPriceImporterShipment, toShowWareShipment, nameRegisterCommitteeShipment, numberDisposalShipment SHOWIF needToPriceChangeShipment(s)

    OBJECTS d=shipmentDetail
    PROPERTIES (d)  numberShipmentDetail, barcodeExSkuShipmentDetail, nameAttributeItemShipmentDetail, quantityShipmentDetail,
                    supplierPriceShipmentDetail BACKGROUND isAllowPriceItemShipment(d), supplierMarkupShipmentDetail SHOWIF toShowPriceImporterShipment(s),
                    importerPriceShipmentDetail READONLY SHOWIF toShowPriceImporterShipment(s), dateFitToShipmentDetail,
                    balanceBeforeShipmentShipmentDetail, numberSuppliersRangeShipmentDetail, dataSuppliersRangeShipmentDetail,
                    sumDetailSupplierVATShipmentDetail, sumSupplierShipmentDetail, nameWareShipmentDetail SHOWIF toShowWareShipment(s),
                    priceWareShipmentDetail SHOWIF toShowWareShipment(s), numberRetailRangeShipmentDetail, dataRetailRangeShipmentDetail,
                    retailMarkupShipmentDetail, curRetailPriceShipmentDetail, retailPriceShipmentDetail, ADDOBJ, delete
    PROPERTIES (d) FORCE PANEL isFixPriceShipmentDetail,
                               controlExpiryShipmentDetail, isManufacturedShipmentDetail, isWeightShipmentDetail, nameinActionItemDepartmentShipmentDetail,
                               hintShipmentDetail, nameCountryShipmentDetail, namebanRevaluationItemDepartmentShipmentDetail,
                               curImporterPriceShipmentDetail, curSupplierPriceShipmentDetail, curDataRetailRangeShipmentDetail, curNameWareShipmentDetail SHOWIF inWareShipmentDetail(d),
                               dataWareRangeShipmentDetail SHOWIF inWareShipmentDetail(d), curPriceWareShipmentDetail SHOWIF inWareShipmentDetail(d)


    PROPERTIES inputMultipleItemsShipment(s) TODRAW d, addShipmentDetailBarcode(s) TODRAW d

    FILTERS inShipmentShipmentDetail(s, d)

    OBJECTS i=item

    PROPERTIES (i) nameAttributeItem
    PROPERTIES (i, s) minAllowPriceItemShipment, maxAllowPriceItemShipment, quantityItemShipment, sumQuantityOrderedItemShipment

    FILTERS isShippedOrOrderedItemShipment(i, s)

    HINTNOUPDATE LIST isPostedShipment,
                  balanceBItemLedgerDateTime, priceImporterBLedgerDateTime, wareBLedgerDateTime, priceWareBLedgerDateTime,
                  rangeRetailBLedgerDateTime, priceRetailBLedgerDateTime, priceSupplierBLedgerDateTime, priceAccountBLedgerDateTime

    EDIT shipment OBJECT s
;


DESIGN shipment FROM DEFAULT{
    main{
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            tabbedPane = TRUE;
            ADD d.box {
                childConstraints = TO THE BOTTOM;
                title = 'Спецификация';
                ADD d.pricingShipmentDetailInfo {
                    childConstraints = TO THE BOTTOM;
                };
                ADD d.itemShipmentDetailInfo;
                NEW commonCase { title = 'Общая информация';
                    ADD PROPERTY (isFixPriceShipmentDetail(d));
                    ADD PROPERTY (importerPriceShipmentDetail(d));
                    ADD PROPERTY (dataWareRangeShipmentDetail(d));
                }
                NEW booleanCase { title = 'Вспомогательная информация';
                    ADD PROPERTY (controlExpiryShipmentDetail(d));
                    ADD PROPERTY (isManufacturedShipmentDetail(d));
                    ADD PROPERTY (isWeightShipmentDetail(d));
                    ADD PROPERTY (nameinActionItemDepartmentShipmentDetail(d));
                }
                POSITION d.pricingShipmentDetailInfo TO THE LEFT booleanCase;
                POSITION booleanCase TO THE LEFT commonCase;
                POSITION commonCase TO THE LEFT d.itemShipmentDetailInfo;
            };
            ADD i.box;
        };
        NEW header.box BEFORE specification.box {
            childConstraints = TO THE RIGHT;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;

                ADD s.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreShipment);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateShipment);
                    ADD PROPERTY(timeShipment);
                };

                NEW headerCol1Row2 {
                    childConstraints = TO THE RIGHT;
                    ADD s.documentPrmGroup {
                        childConstraints = TO THE BOTTOM;
                    }
                    ADD s.shipmentOrderGroup {
                        childConstraints = TO THE BOTTOM;
                    }
                }
            }

            ADD s.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        };
    };
};

FORM shipments 'Поставки'
    OBJECTS s=shipment
    PROPERTIES (s) READONLY objectClassName, numberObject, seriesObject, dateShipment, timeShipment, nameDepartmentStoreShipment,
                            nameSupplierShipment, quantityShipmentDetailsShipment, totalSumSupplierPriceShipment, totalSumIncVATShipment,
                            totalSumSupplierShipment, retailSumShipment,
                            statusPrintPriceTransactionDocument BACKGROUND showPrintLabelTransactionShipment(s),
                            statusEquipmentPriceTransactionDocument BACKGROUND showCreateMachineryPriceTransactionShipment(s)

    PROPERTIES (s) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES (s)          createShipmentLabelTransaction FORCE PANEL SHOWIF showPrintLabelTransactionShipment(s),
                            createSnapshotShipmentLabelTransaction FORCE PANEL SHOWIF isPostedShipment(s),
                            createShipmentMachineryPriceTransaction FORCE PANEL SHOWIF showCreateMachineryPriceTransactionShipment(s),
                            createSnapshotShipmentMachineryPriceTransaction FORCE PANEL SHOWIF isPostedShipment(s),
                            toPrintActOfRevaluationShipment FORCE PANEL SHOWIF needToPriceChangeShipment(s), toPrintPricesRegister FORCE PANEL,
                            ADDFORM, EDITFORM SHOWIF isDraftShipment(s), delete FORCE PANEL SHOWIF isDraftShipment(s),
                            postShipment SHOWIF isDraftShipment(s), unpostShipment SHOWIF isPostedShipment(s)

    OBJECTS d=shipmentDetail
    PROPERTIES (d) READONLY  numberShipmentDetail, barcodeExSkuShipmentDetail, nameAttributeItemShipmentDetail, quantityShipmentDetail,
                             supplierPriceShipmentDetail, supplierMarkupShipmentDetail, importerPriceShipmentDetail, dateFitToShipmentDetail,
                             balanceBeforeShipmentShipmentDetail, numberSuppliersRangeShipmentDetail, dataSuppliersRangeShipmentDetail,
                             sumDetailSupplierVATShipmentDetail, sumSupplierShipmentDetail, nameWareShipmentDetail, priceWareShipmentDetail,
                             numberRetailRangeShipmentDetail, dataRetailRangeShipmentDetail, retailMarkupShipmentDetail,
                             curRetailPriceShipmentDetail, retailPriceShipmentDetail

    FILTERS inShipmentShipmentDetail(s, d)
;

DESIGN shipments FROM DEFAULT {
    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }
    PROPERTY (toPrintActOfRevaluationShipment(s)) {
        panelLocation = TOOLBAR;
    }
    PROPERTY (delete(s)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }

    s.historyGroup {
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    }
    s.postedGroup {
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    }
    POSITION s.historyGroup TO THE LEFT s.postedGroup;
    ADD d.grid.box BEFORE s.historyGroup;
}

//-----------------------------------Формы возврата поставщику-------------------------------------------------------

@metaCodeInputMultipleItemsSupplier(returnSupplier);

toPrintActOfRevaluationReturnSupplier 'Акт переоценки' (returnSupplier) = toPrintActOfRevaluation(uniquePriceChangeReturnSupplier(returnSupplier));

FORM commonInfoBatchReturnSupplierDetail 'Партии'
    OBJECTS b=shipmentDetail    //
    PROPERTIES(b) READONLY seriesObjectDetail, numberObjectDetail, dateShipmentDetail,
                           quantityShipmentDetail, supplierPriceShipmentDetail, dataSuppliersRangeShipmentDetail,
                           retailPriceShipmentDetail
    DIALOG shipmentDetail OBJECT b;     // batchShipment
;


FORM returnSupplier 'Возврат поставщику'
    OBJECTS r=returnSupplier FIXED PANEL
    PROPERTIES(r) numberObject, seriesObject, dateReturnSupplier, timeReturnSupplier,
                  nameDepartmentStoreReturnSupplier, nameSupplierReturnSupplier, numberContractReturnSupplier, noteReturnSupplier, carryingChargesReturnSupplier,
                  totalQuantityReturnSupplier, totalSumIncVATReturnSupplier, totalSumSupplierReturnSupplier,
                  retailSumReturnSupplier, returnLossSupplierReturnSupplier, numberDisposalReturnSupplier SHOWIF needToPriceChangeReturnSupplier(r)

    PROPERTIES(r) carConsignment, ownerCarConsignment, trailerConsignment, driverCarConsignment, waybillConsignment,
                  nameTransportPayerConsignment, shipmentBaseConsignment, loadingPlaceConsignment, unloadingPlaceConsignment,
                  readdressingConsignment, commonNameIssuanceAllowedConsignment, commonNameIssuanceExecutedConsignment,
                  forwarderConsignment, warrantConsignment, warrantHolderConsignment, goodsAcceptedConsignment,
                  commonNameLoadingExecuterConsignment, nameWayOfLoadingConsignment, codeLoadingConsignment,
                  arrivalTimeConsignment, departureTimeConsignment, downtimeConsignment, raceQuantityConsignment,
                  sumQuantityConsignment, sumPackQuantityConsignment, sumGrossWeightConsignmentDetail,
                  sumCostConsignmentDetail, totalSumVATConsignmentDetail

    OBJECTS d=returnSupplierDetail
    PROPERTIES(d) numberReturnSupplierDetail, barcodeExSkuReturnSupplierDetail, nameAttributeItemReturnSupplierDetail,
                  commonInfoBatchReturnSupplierDetail, quantityReturnSupplierDetail, supplierPriceReturnSupplierDetail,
                  supplierMarkupReturnSupplierDetail, importerPriceReturnSupplierDetail READONLY, numberSupplierRangeReturnSupplierDetail,
                  dataSuppliersRangeReturnSupplierDetail, sumDetailSupplierVATReturnSupplierDetail, sumSupplierReturnSupplierDetail,
                  nameWareReturnSupplierDetail, priceWareReturnSupplierDetail, numberRetailRangeReturnSupplierDetail, dataRetailRangeReturnSupplierDetail,
                  retailMarkupReturnSupplierDetail, retailPriceReturnSupplierDetail
    PROPERTIES(d) ADDOBJ, delete
    PROPERTIES inputMultipleItemsSupplierReturnSupplier(r) TODRAW d, addReturnSupplierDetailBarcode(r) TODRAW d
    PROPERTIES FORCE PANEL READONLY curImporterPriceReturnSupplierDetail(d), curSupplierPriceReturnSupplierDetail(d),
                                    curDataSupplierRangeReturnSupplierDetail(d), curRetailPriceReturnSupplierDetail(d),
                                    curDataRetailRangeReturnSupplierDetail(d),
                                    controlExpiryReturnSupplierDetail(d), isManufacturedReturnSupplierDetail(d),
                                    isWeightReturnSupplierDetail(d), nameinActionItemDepartmentReturnSupplierDetail(d),
                                    hintReturnSupplierDetail(d), nameCountryReturnSupplierDetail(d),
                                    namebanRevaluationItemDepartmentReturnSupplierDetail(d), dataWareRangeReturnSupplierDetail(d),
                                    curNameWareReturnSupplierDetail(d), curPriceWareReturnSupplierDetail(d)

    FILTERS isReturnSupplier(r, d)

    EDIT returnSupplier OBJECT r
;

FORM returnSuppliers 'Возвраты поставщику'

    OBJECTS r=returnSupplier
    PROPERTIES(r) READONLY objectClassName, numberObject, seriesObject, dateReturnSupplier, timeReturnSupplier,
                           nameDepartmentStoreReturnSupplier, nameSupplierReturnSupplier, noteReturnSupplier, carryingChargesReturnSupplier,
                           totalQuantityReturnSupplier, totalSumIncVATReturnSupplier, totalSumSupplierReturnSupplier, retailSumReturnSupplier
    PROPERTIES (r) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES(r) FORCE PANEL toPrintConsignmentOne, toPrintConsignmentTwo, toPrintActOfRevaluationReturnSupplier SHOWIF needToPriceChangeReturnSupplier(r)

    PROPERTIES(r) postReturnSupplier SHOWIF isDraftReturnSupplier(r), unpostReturnSupplier SHOWIF isPostedReturnSupplier(r),
                  ADDFORM, EDITFORM SHOWIF isDraftReturnSupplier(r), delete FORCE PANEL SHOWIF isDraftReturnSupplier(r)

    OBJECTS d=returnSupplierDetail
    PROPERTIES(d) READONLY numberReturnSupplierDetail, barcodeExSkuReturnSupplierDetail, nameAttributeItemReturnSupplierDetail,
                           commonInfoBatchReturnSupplierDetail, quantityReturnSupplierDetail, supplierPriceReturnSupplierDetail,
                           supplierMarkupReturnSupplierDetail, importerPriceReturnSupplierDetail, numberSupplierRangeReturnSupplierDetail,
                           dataSuppliersRangeReturnSupplierDetail, sumDetailSupplierVATReturnSupplierDetail, sumSupplierReturnSupplierDetail,
                           nameWareReturnSupplierDetail, priceWareReturnSupplierDetail, numberRetailRangeReturnSupplierDetail, dataRetailRangeReturnSupplierDetail,
                           retailMarkupReturnSupplierDetail, retailPriceReturnSupplierDetail
    FILTERS isReturnSupplier(r, d)
;

DESIGN returnSupplier FROM DEFAULT {

    NEW specification.box BEFORE functions.box{
        tabbedPane = TRUE;

        ADD d.box{
            title = 'Спецификация';
            ADD d.grid{
                fillVertical = 12;
            };
            ADD d.panel{
            childConstraints = TO THE RIGHT;
                NEW curVal {
                    childConstraints = TO THE BOTTOM;
                    title = 'Текущие ценовые параметры';
                    ADD PROPERTY(curImporterPriceReturnSupplierDetail);
                    ADD PROPERTY(curSupplierPriceReturnSupplierDetail);
                    ADD PROPERTY(curDataSupplierRangeReturnSupplierDetail);
                    ADD PROPERTY(curRetailPriceReturnSupplierDetail);
                    ADD PROPERTY(curDataRetailRangeReturnSupplierDetail);
                };
                ADD d.itemReturnSupplierDetailInfo;
                NEW ware {
                    childConstraints = TO THE BOTTOM;
                    title = 'Посуда';
                    ADD PROPERTY(curNameWareReturnSupplierDetail);
                    ADD PROPERTY(curPriceWareReturnSupplierDetail);
                    ADD PROPERTY(dataWareRangeReturnSupplierDetail);
                };
            };
        };
        NEW consignment{
            title = 'Накладная';
            childConstraints = TO THE BOTTOM;
            ADD r.carConsignmentGroup;
            ADD r.issuanceConsignmentGroup;
            ADD r.loadingConsignmentGroup;
            ADD r.sumConsignmentGroup{
                childConstraints = TO THE RIGHT;
            };
            POSITION r.issuanceConsignmentGroup TO THE RIGHT r.carConsignmentGroup;
            POSITION r.loadingConsignmentGroup TO THE RIGHT r.carConsignmentGroup;
            POSITION r.sumConsignmentGroup TO THE RIGHT r.carConsignmentGroup;
        };
    };

    NEW header.box BEFORE specification.box {

        childConstraints = TO THE RIGHT;

        NEW headerCol1 {
            childConstraints = TO THE BOTTOM;

            ADD r.documentHeaderGroup {
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(nameDepartmentStoreReturnSupplier);
                ADD PROPERTY(numberObject);
                ADD PROPERTY(seriesObject);
                ADD PROPERTY(dateReturnSupplier);
                ADD PROPERTY(timeReturnSupplier);
            };

            ADD r.documentPrmGroup {
                childConstraints = TO THE BOTTOM;
            };
        }

        ADD r.documentSumGroup{
            childConstraints = TO THE BOTTOM;
        };
    };

    ADD PROPERTY(delete(d)){
        askConfirm=TRUE;
    }
}

DESIGN returnSuppliers FROM DEFAULT{
    ADD PROPERTY(toPrintConsignmentOne(r)){
        panelLocation=TOOLBAR;
    }
    ADD PROPERTY(toPrintConsignmentTwo(r)){
        panelLocation=TOOLBAR;
    }
    ADD PROPERTY(toPrintActOfRevaluationReturnSupplier(r)){
        panelLocation=TOOLBAR;
    }

    ADD PROPERTY(delete(r)){
        panelLocation=TOOLBAR;
        askConfirm=TRUE;
    }

    ADD r.historyGroup BEFORE functions.box {
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    };
    ADD r.postedGroup BEFORE functions.box {
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    };
    POSITION r.historyGroup TO THE LEFT r.postedGroup;
}

DESIGN commonInfoBatchReturnSupplierDetail FROM DEFAULT {
    main {
        preferredSize = (800, 500);
    };
}

// ---------------------------------- Контроль предельных надбавок ------------------------------------------
CONSTRAINT commonMarkupShipmentDetail (shipmentDetail) >
    maxTradeAllowanceItem (itemShipmentDetail(shipmentDetail)) MESSAGE 'Превышена предельно допустимая наценка';

CONSTRAINT commonMarkupPriceChangeDocumentDetail (priceChangeDocumentDetail) >
    maxTradeAllowanceItem (itemPriceChangeDocumentDetail(priceChangeDocumentDetail)) MESSAGE 'Превышена предельно допустимая наценка';

//------------------------------------ Изменение учетных сумм ------------------------------------------//

dateTimeAccountSumDocumentLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeShipment(ledger),
                                                                         dateTimeReturnSupplier(ledger),
                                                                         dateTimeInnerArrival(ledger),
                                                                         dateTimePriceChangeDocument(ledger),
                                                                         dateTimeWriteOff(ledger),
                                                                         dateTimeStatement(ledger),
                                                                         dateTimeInnerFlow(ledger),
                                                                         dateTimeWastage(ledger),
                                                                         dateTimeReturnSupplier(ledger),
                                                                         dateTimeInventory(inventoryCollationSheet(ledger)),
                                                                         dateTimeZReport(ledger),
                                                                         dateTimeSaleDiscountDocument(ledger),
                                                                         dateTimeParish(ledger),
                                                                         dateTimeConsumption(ledger) PERSISTENT INDEXED;

descriptionDocumentLedger 'Название документа' (ledger) = UNION EXCLUSIVE descriptionShipment(ledger),
                                                                          descriptionReturnSupplier(ledger),
                                                                          descriptionInnerArrival(ledger),
                                                                          descriptionPriceChangeDocument(ledger),
                                                                          descriptionWriteOff(ledger),
                                                                          descriptionStatement(ledger),
                                                                          descriptionInnerFlow(ledger),
                                                                          descriptionWastage(ledger),
                                                                          descriptionReturnSupplier(ledger),
                                                                          descriptionCollationSheet(ledger),
                                                                          descriptionZReport(ledger),
                                                                          descriptionSaleDiscountDocument(ledger),
                                                                          descriptionParish(ledger),
                                                                          descriptionConsumption(ledger) PERSISTENT;
                                                                          //descriptionUserPriceChange(ledger) PERSISTENT;


dateAccountSumDocumentLedger 'Дата' (ledger) = dateInTime(dateTimeAccountSumDocumentLedger(ledger)) PERSISTENT;

isPostedAccountSumDocumentLedger 'Закрыт' (ledger) = UNION EXCLUSIVE isPostedShipment(ledger),
                                                                     isPostedReturnSupplier(ledger),
                                                                     isPostedInnerArrival(ledger),
                                                                     isPostedPriceChangeDocument(ledger),
                                                                     isPostedWriteOff(ledger),
                                                                     isPostedStatement(ledger),
                                                                     isPostedInnerFlow(ledger),
                                                                     isPostedWastage(ledger),
                                                                     isPostedReturnSupplier(ledger),
                                                                     isPostedInventory(inventoryCollationSheet(ledger)),
                                                                     isPostedZReport(ledger),
                                                                     isPostedSaleDiscountDocument(ledger),
                                                                     isPostedParish(ledger),
                                                                     isPostedConsumption(ledger) PERSISTENT;

departmentStoreAccountSumDocumentLedger (ledger) = UNION EXCLUSIVE departmentStoreShipment(ledger),
                                                                   departmentStoreReturnSupplier(ledger),
                                                                   departmentStoreInnerArrival(ledger),
                                                                   departmentStorePriceChangeDocument(ledger),
                                                                   departmentStoreWriteOff(ledger),
                                                                   departmentStoreStatement(ledger),
                                                                   departmentStoreInnerFlow(ledger),
                                                                   departmentStoreWastage(ledger),
                                                                   departmentStoreReturnSupplier(ledger),
                                                                   departmentStoreCollationSheet(ledger),
                                                                   departmentStoreZReport(ledger),
                                                                   departmentStoreSaleDiscountDocument(ledger),
                                                                   departmentStoreParish(ledger),
                                                                   departmentStoreConsumption(ledger) PERSISTENT;



nameDepartmentStoreAccountSumDocumentLedger 'Отдел магазина' (ledger) = name(departmentStoreAccountSumDocumentLedger(ledger));

sumIncAccountDocumentLedger 'Сумма прихода' (ledger) = UNION EXCLUSIVE retailSumShipment(ledger),
                                                                       accountSumInnerArrival(ledger),
                                                                       accountSumChangeDocument(ledger),
                                                                       subtotalParish(ledger) PERSISTENT;
sumOutAccountDocumentLedger 'Сумма расхода' (ledger) = UNION EXCLUSIVE accountSumWriteOff(ledger),
                                                                       retailSumReturnSupplier(ledger),
                                                                       accountSumInnerFlow(ledger),
                                                                       sumStatement(ledger),
                                                                       totalSumWastage(ledger),
                                                                       totalSumSupplierReturnSupplier(ledger),
                                                                       shortageTotalItemByCollationSheet(ledger),
                                                                       sumZReport(ledger),
                                                                       sumSaleDiscountDocument(ledger),
                                                                       subtotalConsumption(ledger) PERSISTENT;

sumAccountDocumentLedger 'Сумма' (ledger) = UNION EXCLUSIVE sumIncAccountDocumentLedger(ledger), -sumOutAccountDocumentLedger(ledger) PERSISTENT;

currentSumAccountDocumentLedger 'Текущий остаток по документам' (departmentStore) = GROUP SUM sumAccountDocumentLedger (ledger) AND isPostedAccountSumDocumentLedger(ledger)
                                                                                           BY departmentStoreAccountSumDocumentLedger(ledger) PERSISTENT;

//без учета текущей даты/времени
sumAccountBDocumentLedgerDateTime (departmentStore, dateTime) = UNION SUM currentSumAccountDocumentLedger(departmentStore) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM sumAccountDocumentLedger (ledger) AND dateTimeAccountSumDocumentLedger(ledger) >= (dateTime AS DATETIME) AND isPostedAccountSumDocumentLedger(ledger)
                                                                         BY departmentStoreAccountSumDocumentLedger(ledger), dateTime](departmentStore, dateTime);

sumAccountBDocumentLedgerDate 'Остаток на начало' (departmentStore, date) = UNION SUM currentSumAccountDocumentLedger(departmentStore) AND date IS DATE,
                                                                            -[GROUP SUM sumAccountDocumentLedger (ledger) AND dateAccountSumDocumentLedger(ledger) >= (date AS DATE) AND isPostedAccountSumDocumentLedger(ledger)
                                                                            BY departmentStoreAccountSumDocumentLedger(ledger), date](departmentStore, date);

//с учетом текущей даты/времени
sumAccountADocumentLedgerDateTime (departmentStore, dateTime) = UNION SUM currentSumAccountDocumentLedger(departmentStore) AND dateTime IS DATETIME,
                                                                         -[GROUP SUM sumAccountDocumentLedger (ledger) AND dateTimeAccountSumDocumentLedger(ledger) > (dateTime AS DATETIME) AND isPostedAccountSumDocumentLedger(ledger)
                                                                         BY departmentStoreAccountSumDocumentLedger(ledger), dateTime](departmentStore, dateTime);

sumAccountADocumentLedgerDate 'Остаток на конец' (departmentStore, date) = UNION SUM currentSumAccountDocumentLedger(departmentStore) AND date IS DATE,
                                                                           -[GROUP SUM sumAccountDocumentLedger (ledger) AND dateAccountSumDocumentLedger(ledger) > (date AS DATE) AND isPostedAccountSumDocumentLedger(ledger)
                                                                           BY departmentStoreAccountSumDocumentLedger(ledger), date](departmentStore, date);

FORM sumAccountDocumentLedger 'Товарный отчет'
    OBJECTS params = (dtFrom = DATE, dtTo = DATE) FIXED PANEL,
            ds = departmentStore FIXED PANEL
    PROPERTIES objFrom = OBJVALUE(dtFrom), objTo = OBJVALUE(dtTo), name(ds) SELECTOR

    PROPERTIES sumAccountBDocumentLedgerDate(ds, dtFrom), sumAccountADocumentLedgerDate(ds, dtTo)

    OBJECTS il = incAccountSumDocumentLedger
    PROPERTIES(il) READONLY iDateTime = dateTimeAccountSumDocumentLedger, objectClassName, descriptionDocumentLedger, sumIncAccountDocumentLedger
    FILTERS isPostedAccountSumDocumentLedger(il),
            departmentStoreAccountSumDocumentLedger(il) == ds,
            dateAccountSumDocumentLedger(il) >= dtFrom,
            dateAccountSumDocumentLedger(il) <= dtTo
    ORDER BY iDateTime

    OBJECTS ol = outAccountSumDocumentLedger
    PROPERTIES(ol) READONLY oDateTime = dateTimeAccountSumDocumentLedger, objectClassName, descriptionDocumentLedger, sumOutAccountDocumentLedger
    FILTERS isPostedAccountSumDocumentLedger(ol),
            departmentStoreAccountSumDocumentLedger(ol) == ds,
            dateAccountSumDocumentLedger(ol) >= dtFrom,
            dateAccountSumDocumentLedger(ol) <= dtTo
    ORDER BY oDateTime
;

DESIGN sumAccountDocumentLedger FROM DEFAULT {
    PROPERTY(objFrom) {
        caption = 'Дата (с)';
    }
    PROPERTY(objTo) {
        caption = 'Дата (по)';
    }
}

//------------------------------------Формы для инвентаризации------------------------------------------//

FORM nameDepartmentByInventory 'Подразделения для инвентаризации'
    OBJECTS in=inventory FIXED PANEL
    PROPERTIES (in) READONLY seriesNumberObject, nameInventory, dateInventory

    TREE treeStore t=tradingNetwork, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY name(t), name(st), name(s), name(ds)

    FILTERS inStoreTypeTradingNetwork (st, t),
            inStoreTypeStore (st, s),
            inStoreDepartment (s, ds)

    PROPERTIES (ds, in) includeDepartmentStoreInventory, nameTypeOfAdditionDepartmentStoreInventoryOver

;

showFormNameDepartmentByInventory 'Подразделения для инвентаризации' (inventory) =
    ACTION FORM nameDepartmentByInventory OBJECTS in MODAL SHORTCUT nameDepartmentByInventory DEFAULT;

FORM collationSheetItem 'Товары для добавления в сличительную ведомость'
    OBJECTS cs=manyCollationSheet FIXED PANEL
    PROPERTIES (cs) READONLY nameCollationSheet, nameTypeOfAdditionCollationSheet, nameDepartmentStoreCollationSheet

    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS i=item
    PROPERTIES(i) READONLY barcodeBarcodeSku, nameAttributeItem, shortNameUnitOfMeasureItem

    PROPERTIES(cs, i) inManyCollationSheetItem

    FILTERS hasParentItemGroupSku(g, i)
    ORDER BY nameAttributeItem
;

DESIGN collationSheetItem FROM DEFAULT {
    POSITION treeGroup.box TO THE LEFT i.box;
        treeGroup.box{ fillHorizontal = 1.5;}
        i.box{ fillHorizontal = 3.5;}

}

showFormItemByCollationSheet 'Добавить товар' (collationSheet) = [ACTION FORM collationSheetItem OBJECTS cs MODAL](collationSheet) AND collationSheet IS manyCollationSheet;

FORM listInventory 'Опись'
    OBJECTS         li=listInventory FIXED PANEL
    PROPERTIES (li) nameListInventory, nameDepartmentStoreListInventory, nameInventoryListInventory, noteListInventory,
                    commonNameCommitteeListInventory, commonNameChairmanCommitteeListInventory, commonNameEmployeeListInventory,
                    quantityDetailListInventory, quantityCountedListInventory, totalDetailListInventory, sumPageListInventory

    OBJECTS         pl=pageList
    PROPERTIES(pl)  namePageList, notePageList FORCE PANEL, quantityDetailPageList, quantityCountedPageList, totalPageList, ADDOBJ, delete

    OBJECTS         dp=detailPage
    PROPERTIES (dp) nameDetailPage, nameBarcodeDetailPage, nameAttributeItemDetailPage, quantityCountedDetailPage, priceAccountDetailPage,
                    totalDetailPage, ADDOBJ, delete

    FILTERS inListInventoryPageList(li, pl),
            inPageListDetailPage(pl, dp)

EDIT listInventory OBJECT li
;

DESIGN listInventory FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        li.box{ childConstraints = TO THE BOTTOM;
        POSITION li.inventoryCommitteeGroup TO THE LEFT li.adverbGroup;
        }
        POSITION pl.box TO THE LEFT dp.box;
        pl.box {fillHorizontal = 1;
            childConstraints = TO THE BOTTOM;
        };
        dp.box {fillHorizontal = 2;}

    }
}

FORM inventory 'Инвентаризация'
    OBJECTS          in=inventory FIXED PANEL
    PROPERTIES (in)  nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject,
                     nameInventory, nameTypeOfAdditionInventory, dateInventory, timeInventory,
                     noteInventory, infoInventory, nameDepartmentByInventory, showFormNameDepartmentByInventory, convertPriceInventory,
                     fillBalanceInventory

    TREE treeDepartmentStore ds=departmentStore, li=listInventory, pl=pageList
    PROPERTIES       READONLY name(ds),  nameListInventory(li), namePageList(pl)

    PROPERTIES(ds, in) READONLY quantityDetailDepartmentStoreInventory, quantityCountedDepartmentStoreInventory, totalDetailDepartmentStoreInventory

    PROPERTIES(li)   READONLY quantityDetailListInventory, quantityCountedListInventory, totalDetailListInventory, objectClassName

    PROPERTIES(li)   ADDFORM, editLI = EDITFORM FORCE PANEL SHOWIF isDraftListInventory(li), delete FORCE PANEL SHOWIF isDraftListInventory(li), //delete SHOWIF isDraftListInventory(li),      //FORCE PANEL
                     postListInventory FORCE PANEL SHOWIF isDraftListInventory(li), unpostListInventory FORCE PANEL SHOWIF isPostedListInventory(li)

    PROPERTIES(pl)   READONLY quantityDetailPageList, quantityCountedPageList, totalPageList, dumb1

    OBJECTS          dp=detailPage
    PROPERTIES (dp)  READONLY nameDetailPage, nameBarcodeDetailPage, nameAttributeItemDetailPage, quantityCountedDetailPage,
                     priceAccountDetailPage, totalDetailPage

    OBJECTS          cs=collationSheet

    PROPERTIES (cs)  READONLY nameCollationSheet
    PROPERTIES (cs)  READONLY nameTypeOfAdditionCollationSheet, nameDepartmentStoreCollationSheet,
                     quantityCountedItemByCollationSheet, balanceItemByCollationSheet, shortageQuantityCountedItemByCollationSheet,
                     totalItemByCollationSheet, totalBalansItemByCollationSheet, shortageTotalItemByCollationSheet,
                     sumListInventoryByCollationSheet, sumPageListByCollationSheet
    PROPERTIES (cs)  showFormItemByCollationSheet, convertPriceCollationSheet, delete


    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS          i=item
    PROPERTIES (i)   READONLY nameAttributeItem, barcodeBarcodeSku

    PROPERTIES(cs, i) quantityCountedCollationSheetItem, balanceCollationSheetItem, shortageQuantityCountedCollationSheetItem
    PROPERTIES       priceByCollationSheetItem (cs,i) BACKGROUND notEqualsPriceByCollationSheetItem(cs, i),
                     priceAccountCollationSheetItem(cs, i) BACKGROUND notEqualsPriceByCollationSheetItem(cs, i)

    PROPERTIES(cs, i) totalCollationSheetItem, totalBalansCollationSheetItem, shortageTotalCollationSheetItem

    FILTERS inInventoryDepartmentStoreListInventoryPageListDetailPage(in, ds, li, pl, dp),
            inInventoryListInventory(in, li),
            inDepartmentStoreListInventory(ds, li),
            inListInventoryPageList(li, pl),
            includeDepartmentStoreInventory(ds, in),
            inInventoryCollationSheet(in,cs),
            includeCollationSheetItem(cs, i),
            hasParentItemGroupSku(g, i)

    ORDER BY nameAttributeItem

    FILTERGROUP notEqualsPriceFilters
            FILTER 'Показать товар с разными ценами' 'F10' notEqualsPriceByCollationSheetItem(cs, i)

    EDIT inventory OBJECT in
;

DESIGN inventory FROM DEFAULT {
    main{
        NEW header.box BEFORE in.box {
            childConstraints = TO THE BOTTOM;

            ADD in.documentHeaderGroup {
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(nameDepartmentByInventory);
                ADD PROPERTY(nameNumeratorObject);
                ADD PROPERTY(numberObject);
                ADD PROPERTY(seriesObject);
                ADD PROPERTY(dateInventory);
                ADD PROPERTY(timeInventory);
            }

            NEW headerRow2 {
                childConstraints = TO THE RIGHT;
                ADD in.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                    NEW headerRow2Col1Row1 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(nameTypeOfAdditionInventory);
                        ADD PROPERTY(nameInventory);
                    }
                    NEW headerRow2Col1Row2 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(noteInventory);
                        ADD PROPERTY(infoInventory);
                    }
                }
                NEW actionContainer {
                    title = 'Действия';
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY(fillBalanceInventory);
                    ADD PROPERTY(convertPriceInventory);
                }
            }
        }

        NEW secondCase BEFORE functions.box {
                tabbedPane = TRUE;
                NEW z.box { title = 'Описи';
                    fillVertical = 5;
                    ADD treeDepartmentStore.box { fillHorizontal = 2;};
                    ADD dp.box  {fillHorizontal = 3;};
                    POSITION treeDepartmentStore.box TO THE LEFT dp.box;
                    PROPERTY(objectClassName) {
                            preferredCharWidth = 15;
                    }
                    PROPERTY (dumb1) {
                        caption = 'Статус';
                        minimumCharWidth = 15;
                    }
                    PROPERTY (postListInventory) {
                        caption = 'Закрыть';
                    }
                    PROPERTY (unpostListInventory) {
                        caption = 'Открыть';
                    }
                    PROPERTY (editLI) {
                        caption = 'Редактировать';
                    }
                    PROPERTY (delete(li)) {
                        caption = 'Удалить';
                        panelLocation = TOOLBAR;
                        askConfirm = TRUE;
                    }
                }

                NEW x.box { title = 'Сличительные ведомости';
                    fillVertical = 5;

                    ADD cs.box  { fillVertical = 1;};

                    NEW firstCase { title = 'Пересчитанный товар';
                        fillVertical = 4;
                        ADD treeGroup.box { title = 'Товарные группы';};
                        ADD i.box;
                        POSITION treeGroup.box TO THE LEFT i.box;
                            treeGroup.box{ fillHorizontal = 1.5;}
                            i.box{ fillHorizontal = 3.5;}

                    ADD PROPERTY(showFormItemByCollationSheet(cs)) IN i.panel;
                    }
                }

        }
    }
}

FORM inventories 'Инвентаризации'
    OBJECTS in=inventory
    PROPERTIES(in) READONLY objectClassName, numberObject, seriesObject, dateInventory, timeInventory,
                            nameDepartmentByInventory, nameInventory, noteInventory

    PROPERTIES(in) FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES(in)  ADDFORM, EDITFORM SHOWIF isDraftInventory(in), delete FORCE PANEL SHOWIF isDraftInventory(in),
                    postInventory SHOWIF isDraftInventory(in), unpostInventory SHOWIF isPostedInventory(in)//(in) ADDFORM, EDITFORM, delete

    OBJECTS il=inventoryLedger
    PROPERTIES(il)  barcodeExInventoryLedger, nameAttributeItemInventoryLedger, quantityInventoryLedger, shortageTotalInventoryLedger, nameDepartmentStoreInventoryLedger
    FILTERS         inventoryInventoryLedger(il)==in
                  //  inInventoryCollationSheet(in,cs)
                    //quantityInventoryLedger(il)!=0

    ORDER BY        nameDepartmentStoreInventoryLedger
;

DESIGN inventories FROM DEFAULT {
    PROPERTY(objectClassName) {
        preferredCharWidth = 25;
    }
    PROPERTY (delete(in)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
    in.historyGroup {
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    }
    in.postedGroup {
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    }
    POSITION in.historyGroup TO THE LEFT in.postedGroup;
    ADD il.grid.box BEFORE in.historyGroup;
    il.grid.box {title = 'Товары с недостачей (излишком)';};
}


//---------------------------Акты переоценок-------------------------------------//

@metaCodeInputMultipleItems (userPriceChange);
@metaCodeDocumentMachineryPriceTransaction(userPriceChange);
@metaCodeDocumentLabelTransaction(userPriceChange);

percMarkupUserPriceChange 'Процент торговой надбавки'  = DATA DOUBLE (userPriceChange);
percDiscountUserPriceChange 'Процент скидки от розн. цены'  = DATA DOUBLE (userPriceChange);
toShowDiscountUserPriceChange (userPriceChange) =  userPriceChange IS userPriceChange AND NOT percMarkupUserPriceChange(userPriceChange);
toShowMarkupUserPriceChange (userPriceChange) =  userPriceChange IS userPriceChange AND NOT percDiscountUserPriceChange(userPriceChange);

newDiscountRetailPriceUserPriceChangeDetail (userPriceChange, userPriceChangeDetail) =  [roundMinus1(X-(X*Y)/100)](
    curRetailPriceUserPriceChangeDetail(userPriceChangeDetail), percDiscountUserPriceChange(userPriceChange));

newMarkupRetailPriceUserPriceChangeDetail (userPriceChange, userPriceChangeDetail) = [roundMinus1(X+(X*Y)/100+(X+(X*Y)/100)*Z/100+F)](
    curSupplierPriceUserPriceChangeDetail(userPriceChangeDetail),
    percMarkupUserPriceChange(userPriceChange),
    curDataRetailRangeUserPriceChangeDetail(userPriceChangeDetail),
    (UNION OVERRIDE 0.0 IF userPriceChangeDetail IS userPriceChangeDetail, curPriceWareUserPriceChangeDetail(userPriceChangeDetail)));



FORM addPercMarkupUserPriceChange 'Изменить наценку товара'
    OBJECTS u=userPriceChange FIXED PANEL
    PROPERTIES (u) percMarkupUserPriceChange
;


showFormAddPercMarkupUserPriceChange 'Изменить наценку товара' (userPriceChange) = ACTION (userPriceChange) {
        FORM addPercMarkupUserPriceChange OBJECTS u = userPriceChange AS userPriceChange MODAL;
        IF formResult() == formResult.ok THEN {
            FOR userPriceChangeUserPriceChangeDetail(userPriceChangeDetail) == userPriceChange DO {
                SET importerPriceUserPriceChangeDetail(userPriceChangeDetail) <- curImporterPriceUserPriceChangeDetail(userPriceChangeDetail);
                SET supplierPriceUserPriceChangeDetail(userPriceChangeDetail) <- curSupplierPriceUserPriceChangeDetail(userPriceChangeDetail);
                SET retailRangeUserPriceChangeDetail(userPriceChangeDetail) <- curRetailRangeUserPriceChangeDetail(userPriceChangeDetail);
                SET priceWareUserPriceChangeDetail(userPriceChangeDetail) <- curPriceWareUserPriceChangeDetail(userPriceChangeDetail);
                SET wareRangeUserPriceChangeDetail(userPriceChangeDetail) <- curWareRangeUserPriceChangeDetail(userPriceChangeDetail);
                SET retailPriceUserPriceChangeDetail(userPriceChangeDetail) <- newMarkupRetailPriceUserPriceChangeDetail(userPriceChange, userPriceChangeDetail);
            }
        }
} TOOLBAR CONFIRM;


FORM addPercDiscountUserPriceChange 'Сделать скидку'
    OBJECTS u=userPriceChange FIXED PANEL
    PROPERTIES (u) percDiscountUserPriceChange
;

showFormAddPercDiscountUserPriceChange 'Сделать скидку' (userPriceChange) = ACTION (userPriceChange) {
        FORM addPercDiscountUserPriceChange OBJECTS u = userPriceChange AS userPriceChange MODAL;
        IF formResult() == formResult.ok THEN {
            FOR userPriceChangeUserPriceChangeDetail(userPriceChangeDetail) == userPriceChange DO {
                SET importerPriceUserPriceChangeDetail(userPriceChangeDetail) <- curImporterPriceUserPriceChangeDetail(userPriceChangeDetail);
                SET supplierPriceUserPriceChangeDetail(userPriceChangeDetail) <- curSupplierPriceUserPriceChangeDetail(userPriceChangeDetail);
                SET retailRangeUserPriceChangeDetail(userPriceChangeDetail) <- curRetailRangeUserPriceChangeDetail(userPriceChangeDetail);
                SET priceWareUserPriceChangeDetail(userPriceChangeDetail) <- curPriceWareUserPriceChangeDetail(userPriceChangeDetail);
                SET wareRangeUserPriceChangeDetail(userPriceChangeDetail) <- curWareRangeUserPriceChangeDetail(userPriceChangeDetail);
                SET retailPriceUserPriceChangeDetail(userPriceChangeDetail) <- newDiscountRetailPriceUserPriceChangeDetail(userPriceChange, userPriceChangeDetail);
            }
        }
} TOOLBAR CONFIRM;

// todo: пока что сделал так, что можно выбрать только один экшн на изменение цены.
//       Для расчета новых показателей цены, необходимо чтобы все поля были не пустые.....

FORM userPriceChange 'Переоценка товаров'
    OBJECTS u=userPriceChange FIXED PANEL
    PROPERTIES (u) nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject,
                   dateUserPriceChange, timeUserPriceChange, nameDepartmentStoreUserPriceChange,
                   diffTotalSumSupplierPricePriceChangeDocument, diffTotalSumMarkupPriceChangeDocument, diffTotalSumRetailVATPriceChangeDocument,
                   diffTotalSumWarePriceChangeDocument, diffTotalSumVatWarePriceChangeDocument,
                   noteUserPriceChange, numberDisposalUserPriceChange

    OBJECTS d=userPriceChangeDetail
    PROPERTIES (d) numberUserPriceChangeDetail, barcodeExSkuUserPriceChangeDetail, nameAttributeItemUserPriceChangeDetail, quantityUserPriceChangeDetail,
                   curImporterPriceUserPriceChangeDetail, importerPriceUserPriceChangeDetail,
                   curSupplierPriceUserPriceChangeDetail, supplierPriceUserPriceChangeDetail,
                   oldRetailMarkupPriceChangeDocumentDetail, retailMarkupPriceChangeDocumentDetail,
                   curNumberRetailRangeUserPriceChangeDetail, curDataRetailRangeUserPriceChangeDetail,
                   numberRetailRangeUserPriceChangeDetail, dataRetailRangeUserPriceChangeDetail,
                   curPriceWareUserPriceChangeDetail, priceWareUserPriceChangeDetail,
                   curNumberWareRangeUserPriceChangeDetail, curDataWareRangeUserPriceChangeDetail,
                   numberWareRangeUserPriceChangeDetail, dataWareRangeUserPriceChangeDetail,
                   curRetailPriceUserPriceChangeDetail, retailPriceUserPriceChangeDetail, ADDOBJ, delete
//    PROPERTIES (u, d)  newMarkupRetailPriceUserPriceChangeDetail, newDiscountRetailPriceUserPriceChangeDetail

    PROPERTIES showFormAddPercMarkupUserPriceChange(u) TODRAW d SHOWIF toShowMarkupUserPriceChange(u),
               showFormAddPercDiscountUserPriceChange(u) TODRAW d SHOWIF toShowDiscountUserPriceChange(u),
               inputMultipleItemsUserPriceChange(u) TODRAW d, addUserPriceChangeDetailBarcode(u) TODRAW d

    FILTERS inUserPriceChangeUserPriceChangeDetail(u, d)

    EDIT userPriceChange OBJECT u
;

DESIGN userPriceChange FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW header.box BEFORE d.box {
            childConstraints = TO THE RIGHT;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;
                ADD u.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreUserPriceChange);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateUserPriceChange);
                    ADD PROPERTY(timeUserPriceChange);
                }
                ADD u.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }

            ADD u.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }

        PROPERTY(importerPriceUserPriceChangeDetail) { background = #FFFFCC; }
        PROPERTY(supplierPriceUserPriceChangeDetail) { background = #FFFFCC; }
        PROPERTY(retailMarkupPriceChangeDocumentDetail) { background = #FFFFCC; }
        PROPERTY(numberRetailRangeUserPriceChangeDetail) { background = #FFFFCC; }
        PROPERTY(dataRetailRangeUserPriceChangeDetail) { background = #FFFFCC; }
        PROPERTY(priceWareUserPriceChangeDetail) { background = #FFFFCC; }
        PROPERTY(numberWareRangeUserPriceChangeDetail) { background = #FFFFCC; }
        PROPERTY(dataWareRangeUserPriceChangeDetail) { background = #FFFFCC; }
        PROPERTY(retailPriceUserPriceChangeDetail) { background = #FFFFCC; }
    }
}

FORM userPriceChanges 'Переоценки товаров'

    OBJECTS u=userPriceChange
    PROPERTIES (u) READONLY objectClassName, numberObject, seriesObject, dateUserPriceChange, timeUserPriceChange, nameDepartmentStoreUserPriceChange,
                   diffTotalSumSupplierPricePriceChangeDocument, diffTotalSumMarkupPriceChangeDocument, diffTotalSumRetailVATPriceChangeDocument,
                   diffTotalSumWarePriceChangeDocument, diffTotalSumVatWarePriceChangeDocument, accountSumChangeDocument,
                   statusPrintPriceTransactionDocument BACKGROUND showPrintLabelTransactionUserPriceChange(u),
                   statusEquipmentPriceTransactionDocument BACKGROUND showCreateMachineryPriceTransactionUserPriceChange(u)

    PROPERTIES (u)          createUserPriceChangeLabelTransaction FORCE PANEL SHOWIF showPrintLabelTransactionUserPriceChange(u),
                            createSnapshotUserPriceChangeLabelTransaction FORCE PANEL SHOWIF isPostedUserPriceChange(u),
                            createUserPriceChangeMachineryPriceTransaction FORCE PANEL SHOWIF showCreateMachineryPriceTransactionUserPriceChange(u),
                            createSnapshotUserPriceChangeMachineryPriceTransaction FORCE PANEL SHOWIF isPostedUserPriceChange(u),
                            toPrintActOfRevaluation FORCE PANEL,
                            ADDFORM, EDITFORM SHOWIF isDraftUserPriceChange(u), delete FORCE PANEL SHOWIF isDraftUserPriceChange(u),
                            postUserPriceChange SHOWIF isDraftUserPriceChange(u), unpostUserPriceChange SHOWIF isPostedUserPriceChange(u)

    OBJECTS d=userPriceChangeDetail
    PROPERTIES (d) READONLY numberUserPriceChangeDetail, barcodeExSkuUserPriceChangeDetail, nameAttributeItemUserPriceChangeDetail, quantityUserPriceChangeDetail,
                            curImporterPriceUserPriceChangeDetail, importerPriceUserPriceChangeDetail,
                            curSupplierPriceUserPriceChangeDetail, supplierPriceUserPriceChangeDetail,
                            oldRetailMarkupPriceChangeDocumentDetail, retailMarkupPriceChangeDocumentDetail,
                            curNumberRetailRangeUserPriceChangeDetail, curDataRetailRangeUserPriceChangeDetail,
                            numberRetailRangeUserPriceChangeDetail, dataRetailRangeUserPriceChangeDetail,
                            curPriceWareUserPriceChangeDetail, priceWareUserPriceChangeDetail,
                            curNumberWareRangeUserPriceChangeDetail, curDataWareRangeUserPriceChangeDetail,
                            numberWareRangeUserPriceChangeDetail, dataWareRangeUserPriceChangeDetail,
                            curRetailPriceUserPriceChangeDetail, retailPriceUserPriceChangeDetail


    FILTERS inUserPriceChangeUserPriceChangeDetail(u, d)
;

DESIGN userPriceChanges FROM DEFAULT {
    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }
    PROPERTY (delete(u)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
}


//---------------- Формы внутреннего перемещения (приход и расход)-------------------------------------//

@metaCodeInputMultipleItems (innerFlow);
@metaCodeInputMultipleItems (innerArrival);
@metaCodeDocumentMachineryPriceTransaction(innerArrival);
@metaCodeDocumentLabelTransaction(innerArrival);

FORM innerFlow 'Расход в другой отдел'
    OBJECTS f=innerFlow FIXED PANEL
    PROPERTIES (f) numberObject, seriesObject, dateInnerFlow, timeInnerFlow, nameDepartmentStoreInnerFlow,
                   nameRecipientDepartmentInnerFlow, noteInnerFlow, totalQuantityInnerFlow, accountSumInnerFlow

    PROPERTIES (f) carConsignment, ownerCarConsignment, trailerConsignment, driverCarConsignment, waybillConsignment,
                   nameTransportPayerConsignment, shipmentBaseConsignment, loadingPlaceConsignment, unloadingPlaceConsignment,
                   readdressingConsignment, commonNameIssuanceAllowedConsignment, commonNameIssuanceExecutedConsignment,
                   forwarderConsignment, warrantConsignment, warrantHolderConsignment, goodsAcceptedConsignment,
                   commonNameLoadingExecuterConsignment, nameWayOfLoadingConsignment, codeLoadingConsignment,
                   arrivalTimeConsignment, departureTimeConsignment, downtimeConsignment, raceQuantityConsignment,
                   sumQuantityConsignment, sumPackQuantityConsignment, sumGrossWeightConsignmentDetail,
                   sumCostConsignmentDetail, totalSumVATConsignmentDetail

    OBJECTS d=innerFlowDetail
    PROPERTIES (d) numberInnerFlowDetail, barcodeExSkuInnerFlowDetail, nameAttributeItemInnerFlowDetail,
                   quantityInnerFlowDetail, importerPriceInnerFlowDetail, supplierPriceInnerFlowDetail, numberRetailRangeInnerFlowDetail,
                   dataRetailRangeInnerFlowDetail, nameWareInnerFlowDetail, priceWareInnerFlowDetail,
                   retailPriceInnerFlowDetail, accountSumInnerFlowDetail, ADDOBJ, delete

    PROPERTIES inputMultipleItemsInnerFlow(f) TODRAW d, addInnerFlowDetailBarcode(f) TODRAW d
    FILTERS inInnerFlowInnerFlowDetail(f, d)

    EDIT innerFlow OBJECT f
;

DESIGN innerFlow FROM DEFAULT{
    main{
        preferredSize = (1024, 768);

        NEW specification.box BEFORE functions.box{
            tabbedPane = TRUE;
            ADD d.box{
                title = 'Спецификация';
                ADD d.grid{
                    fillVertical = 12;
                };
            };
            NEW consignment{
                title = 'Накладная';
                childConstraints = TO THE BOTTOM;
                ADD f.carConsignmentGroup;
                ADD f.issuanceConsignmentGroup;
                ADD f.loadingConsignmentGroup;
                ADD f.sumConsignmentGroup{
                    childConstraints = TO THE RIGHT;
                };
                POSITION f.issuanceConsignmentGroup TO THE RIGHT f.carConsignmentGroup;
                POSITION f.loadingConsignmentGroup TO THE RIGHT f.carConsignmentGroup;
                POSITION f.sumConsignmentGroup TO THE RIGHT f.carConsignmentGroup;
            };
        };

        NEW header.box BEFORE specification.box {

            childConstraints = TO THE RIGHT;

            NEW headerRow1 {
                childConstraints = TO THE BOTTOM;

                ADD f.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreInnerFlow);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateInnerFlow);
                    ADD PROPERTY(timeInnerFlow);
                }

                ADD f.documentPrmGroup {
                    childConstraints = TO THE RIGHT;
                }
            }

            ADD f.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    };
};

FORM innerFlows 'Расходы в другие отделы'
    OBJECTS f=innerFlow
    PROPERTIES (f) READONLY objectClassName, numberObject, seriesObject, dateInnerFlow, timeInnerFlow, nameDepartmentStoreInnerFlow,
                            nameRecipientDepartmentInnerFlow, quantityInnerFlowDetailsInnerFlow,
                            totalQuantityInnerFlow, accountSumInnerFlow
    PROPERTIES (f) FORCE PANEL toPrintConsignmentOne, toPrintConsignmentTwo

    PROPERTIES (f) ADDFORM, EDITFORM SHOWIF isDraftInnerFlow(f), delete FORCE PANEL SHOWIF isDraftInnerFlow(f),
                   postInnerFlow SHOWIF isDraftInnerFlow(f), unpostInnerFlow SHOWIF isPostedInnerFlow(f)

    OBJECTS d=innerFlowDetail
    PROPERTIES (d) READONLY numberInnerFlowDetail, barcodeExSkuInnerFlowDetail, nameAttributeItemInnerFlowDetail,
                            quantityInnerFlowDetail, importerPriceInnerFlowDetail, supplierPriceInnerFlowDetail, numberRetailRangeInnerFlowDetail,
                            dataRetailRangeInnerFlowDetail, nameWareInnerFlowDetail, priceWareInnerFlowDetail,
                            retailPriceInnerFlowDetail, accountSumInnerFlowDetail
    FILTERS inInnerFlowInnerFlowDetail(f, d)
;

DESIGN innerFlows FROM DEFAULT {
    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }
    PROPERTY (toPrintConsignmentOne(f)) {
        panelLocation = TOOLBAR;
    }
    PROPERTY (toPrintConsignmentTwo(f)) {
        panelLocation = TOOLBAR;
    }
    PROPERTY (delete(f)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
}

toPrintActOfRevaluationInnerArrival 'Акт переоценки' (innerArrival) = toPrintActOfRevaluation(uniquePriceChangeInnerArrival(innerArrival));


FORM innerArrival 'Приход из другого отдела'
    OBJECTS a=innerArrival FIXED PANEL
    PROPERTIES (a) nameDepartmentStoreInnerArrival, numberArrival SHOWIF departmentStoreInnerArrival(a), seriesArrival SHOWIF departmentStoreInnerArrival(a),
                   dateInnerArrival SHOWIF innerFlowInnerArrival(a), timeInnerArrival SHOWIF innerFlowInnerArrival(a), nameSenderDepartmentInnerArrival READONLY SHOWIF innerFlowInnerArrival(a),
                   cleanAllInnerArrivalDetailsInnerArrival SHOWIF innerFlowInnerArrival(a), toFillInnerArrivalDetailsInnerArrival SHOWIF innerFlowInnerArrival(a),
                   noteInnerArrival READONLY SHOWIF innerFlowInnerArrival(a), totalQuantityInnerArrival SHOWIF innerFlowInnerArrival(a),
                   accountSumInnerArrival SHOWIF innerFlowInnerArrival(a), numberDisposalInnerArrival SHOWIF needToPriceChangeInnerArrival(a)

    OBJECTS d=innerArrivalDetail
    PROPERTIES (d) SHOWIF innerFlowInnerArrival(a) numberInnerArrivalDetail, barcodeExSkuInnerArrivalDetail, nameAttributeItemInnerArrivalDetail,
                   quantityInnerArrivalDetail, balanceBeforeInnerArrivalInnerArrivalDetail, importerPriceInnerArrivalDetail, supplierPriceInnerArrivalDetail, numberRetailRangeInnerArrivalDetail,
                   dataRetailRangeInnerArrivalDetail, nameWareInnerArrivalDetail, priceWareInnerArrivalDetail, retailPriceInnerArrivalDetail,
                   accountSumInnerArrivalDetail, ADDOBJ, delete
    PROPERTIES (d) FORCE PANEL curImporterPriceInnerArrivalDetail, curSupplierPriceInnerArrivalDetail, curNameWareInnerArrivalDetail,
                   curPriceWareInnerArrivalDetail, curDataRetailRangeInnerArrivalDetail, curRetailPriceInnerArrivalDetail

    PROPERTIES inputMultipleItemsInnerArrival(a) TODRAW d, addInnerArrivalDetailBarcode(a) TODRAW d
    FILTERS inInnerArrivalInnerArrivalDetail(a, d)

    OBJECTS i=item
    PROPERTIES (i) SHOWIF innerFlowInnerArrival(a) nameAttributeItem
    PROPERTIES (i, a) SHOWIF innerFlowInnerArrival(a) quantityItemInnerFlowInnerArrival, quantityItemInnerArrival,
                             diffQuantityItemInnerArrival, importerPriceItemInnerArrival, priceItemInnerArrival
    FILTERS inInnerArrivalItem (i, a)

    EDIT innerArrival OBJECT a
;

DESIGN innerArrival FROM DEFAULT{
    main{
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            tabbedPane = TRUE;
            ADD d.box {
                childConstraints = TO THE BOTTOM;
                title = 'Спецификация';
                d.pricingInnerArrivalDetailInfo {
                    childConstraints = TO THE RIGHTBOTTOM;
                }
            };
            ADD i.box;
        };
        NEW header.box BEFORE specification.box {
            childConstraints = TO THE RIGHT;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;

                ADD a.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreInnerArrival);
                    ADD PROPERTY(numberArrival);
                    ADD PROPERTY(seriesArrival);
                    ADD PROPERTY(dateInnerArrival);
                    ADD PROPERTY(timeInnerArrival);
                }

                NEW headerCol1Row2 {
                    childConstraints = TO THE RIGHT;

                    ADD a.documentPrmGroup {
                        childConstraints = TO THE BOTTOM;
                    }

                    ADD a.consumptionGroup {
                        childConstraints = TO THE BOTTOM;
                        ADD PROPERTY (cleanAllInnerArrivalDetailsInnerArrival);
                    }
                }
            }

            ADD a.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    }
}

FORM innerArrivals 'Приходы из других отделов'
    OBJECTS a=innerArrival
    PROPERTIES (a) READONLY objectClassName, numberArrival, seriesArrival, dateInnerArrival, timeInnerArrival, nameDepartmentStoreInnerArrival,
                            nameSenderDepartmentInnerArrival, quantityInnerArrivalDetailsInnerArrival, totalQuantityInnerArrival, accountSumInnerArrival,
                            statusPrintPriceTransactionDocument BACKGROUND showPrintLabelTransactionInnerArrival(a),
                            statusEquipmentPriceTransactionDocument BACKGROUND showCreateMachineryPriceTransactionInnerArrival(a)

    PROPERTIES (a)          createInnerArrivalLabelTransaction FORCE PANEL SHOWIF showPrintLabelTransactionInnerArrival(a),
                            createSnapshotInnerArrivalLabelTransaction FORCE PANEL SHOWIF isPostedInnerArrival(a),
                            createInnerArrivalMachineryPriceTransaction FORCE PANEL SHOWIF showCreateMachineryPriceTransactionInnerArrival(a),
                            createSnapshotInnerArrivalMachineryPriceTransaction FORCE PANEL SHOWIF isPostedInnerArrival(a),
                            toPrintActOfRevaluationInnerArrival FORCE PANEL SHOWIF needToPriceChangeInnerArrival(a),
                            ADDFORM, EDITFORM SHOWIF isDraftInnerArrival(a), delete FORCE PANEL SHOWIF isDraftInnerArrival(a),
                            postInnerArrival SHOWIF isDraftInnerArrival(a), unpostInnerArrival SHOWIF isPostedInnerArrival(a)


    OBJECTS d=innerArrivalDetail
    PROPERTIES (d) READONLY numberInnerArrivalDetail, barcodeExSkuInnerArrivalDetail, nameAttributeItemInnerArrivalDetail,
                   quantityInnerArrivalDetail, balanceBeforeInnerArrivalInnerArrivalDetail, importerPriceInnerArrivalDetail,
                   numberRetailRangeInnerArrivalDetail, dataRetailRangeInnerArrivalDetail, nameWareInnerArrivalDetail,
                   priceWareInnerArrivalDetail, retailPriceInnerArrivalDetail, accountSumInnerArrivalDetail

    FILTERS inInnerArrivalInnerArrivalDetail(a, d)
;

DESIGN innerArrivals FROM DEFAULT {
    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }
    PROPERTY (toPrintActOfRevaluationInnerArrival(a)) {
        panelLocation = TOOLBAR;
    }
    PROPERTY (delete(a)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
}


//------------------------------------формы: Отпуск из розницы-------------------------//


FORM specificationForm 'Отгрузки по данной с/ф'
    OBJECTS sp=specification FIXED PANEL
    PROPERTIES (sp) READONLY seriesObject, numberObject, nameDepartmentStoreSpecification, dateSpecification, timeSpecification,
    dateToSpecification, nameCustomerSpecification, nameObjectiveAcquiringSpecification, noteSpecification,
    quantitySpecification, sumWithoutNDSSpecification, sumNDSSpecification, sumSpecification

    OBJECTS st=statement
    PROPERTIES (st) READONLY seriesNumberObject, dateStatement, nameCustomerStatement, nameDepartmentStoreStatement,
                             noteStatement, totalQuantityStatement, sumNDSStatement, sumStatement

     OBJECTS d=statementDetail
    PROPERTIES (d)  READONLY numberStatementDetail, barcodeExSkuStatementDetail, nameAttributeItemStatementDetail, quantityStatementDetail,
                             retailPriceStatementDetail, sumWithoutNDSStatementDetail, numberRangeStatementDetail,
                             dataActingRateRangeStatementDetail, sumNDSStatementDetail, totalSumNDSStatementDetail,
                             sumStatementDetail, noteStatementDetail

    FILTERS inStatementSpecification(st, sp),
            isPostedStatement(st),
            inStatementStatementDetail(st, d)
;

DESIGN specificationForm FROM DEFAULT{
    main {
        preferredSize = (1024, 768);

        NEW case BEFORE functions.box{
            title = 'Накладные на отгрузку по данной с/ф';
            ADD st.grid;
            ADD d.grid;
        }
        NEW header.box BEFORE case {
            title = 'Счет-фактура';
            childConstraints = TO THE RIGHT;

            NEW headerRow1 {
                childConstraints = TO THE BOTTOM;

                ADD sp.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreSpecification);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateSpecification);
                    ADD PROPERTY(timeSpecification);
                }

                ADD sp.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                    NEW headerRow21 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(nameCustomerSpecification);
                        ADD PROPERTY(nameObjectiveAcquiringSpecification);
                    }
                    NEW headerRow22 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(dateToSpecification);
                        ADD PROPERTY(noteSpecification);
                    }
                }
            }

            ADD sp.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    }
}


showFormSpecificationForm 'Показать отгрузки по данной с/ф' (specification) = ACTION FORM specificationForm OBJECTS sp MODAL TOOLBAR;

@metaCodeInputMultipleItems (specification);

FORM specification 'Счет-фактура'
    OBJECTS sp=specification FIXED PANEL
    PROPERTIES (sp) nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, nameDepartmentStoreSpecification,
                    dateSpecification, timeSpecification, dateToSpecification, nameCustomerSpecification,
                    nameObjectiveAcquiringSpecification, noteSpecification,
                    quantitySpecification, sumWithoutNDSSpecification, sumNDSSpecification, sumSpecification

    OBJECTS d=specificationDetail
    PROPERTIES (d) numberSpecificationDetail, barcodeExSkuSpecificationDetail, nameAttributeItemSpecificationDetail, quantitySpecificationDetail,
                   retailPriceSpecificationDetail, sumWithoutNDSSpecificationDetail, dataActingRateRangeSpecificationDetail,
                   sumNDSSpecificationDetail, totalSumNDSSpecificationDetail, sumSpecificationDetail,
                   ADDOBJ, delete

    PROPERTIES FORCE PANEL READONLY articleItemSpecificationDetail(d), nameCountryItemSpecificationDetail(d), balanceDepartmentStoreItemSpecificationDetail(d)
                   BACKGROUND highlightSpecificationDetail(d), availableQuantityItemBySpecificationDetail(d) BACKGROUND NotNullAvailableQuantityItemBySpecificationDetail(d)

    PROPERTIES inputMultipleItemsSpecification(sp) TODRAW d, addSpecificationDetailBarcode(sp) TODRAW d
    FILTERS inSpecificationSpecificationDetail(sp, d)

    EDIT specification OBJECT sp
;

DESIGN specification FROM DEFAULT{
    main {
        preferredSize = (1024, 768);

        NEW header.box BEFORE d.box {
            childConstraints = TO THE RIGHT;

            NEW headerRow1 {
                childConstraints = TO THE BOTTOM;

                ADD sp.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreSpecification);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateSpecification);
                    ADD PROPERTY(timeSpecification);
                }

                ADD sp.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                    NEW headerRow21 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(nameCustomerSpecification);
                        ADD PROPERTY(nameObjectiveAcquiringSpecification);
                    }
                    NEW headerRow22 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(dateToSpecification);
                        ADD PROPERTY(noteSpecification);
                    }
                }
            }

            ADD sp.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    }
}

FORM specifications 'Счет-фактуры'
    OBJECTS sp=specification
    PROPERTIES (sp) READONLY numberObject, seriesObject, dateSpecification, timeSpecification, nameDepartmentStoreSpecification,
                             nameCustomerSpecification, dateToSpecification, quantityDetailInSpecification, quantitySpecification,
                             sumWithoutNDSSpecification, sumNDSSpecification, sumSpecification
    PROPERTIES (sp)          showFormSpecificationForm FORCE PANEL SHOWIF  quantityStatementsInSpecification(sp)

    PROPERTIES (sp)          ADDFORM, EDITFORM, delete

    OBJECTS d=specificationDetail
    PROPERTIES (d) READONLY  numberSpecificationDetail, barcodeExSkuSpecificationDetail, nameAttributeItemSpecificationDetail,
                             quantitySpecificationDetail, retailPriceSpecificationDetail,
                             sumWithoutNDSSpecificationDetail, dataActingRateRangeSpecificationDetail,
                             sumNDSSpecificationDetail, totalSumNDSSpecificationDetail, sumSpecificationDetail

    FILTERS         inSpecificationSpecificationDetail(sp, d)

    FILTERGROUP filters6
            FILTER 'Просроченные с/ф' 'F10' overdueSpecification(sp)
            FILTER 'Непросроченные с/ф' 'F9' noOverdueSpecification(sp)
;



FORM specificationsStatement 'Счета'
    OBJECTS st=statement FIXED PANEL
    PROPERTIES (st) READONLY seriesNumberObject, dateStatement

    OBJECTS sp=specification

    PROPERTIES (st, sp) inStatementSpecification
    PROPERTIES (sp)     READONLY seriesNumberObject, dateSpecification, nameCustomerSpecification, nameDepartmentStoreSpecification,
                                 dateToSpecification, quantitySpecification, sumSpecification, statusSpecification
    PROPERTIES (st, sp) statusStatementSpecification

    FILTERS isCustomerStatementSpecification (st, sp),
            isDepartmentStoreStatementSpecification (st, sp),
            dateSpecification(sp) <= dateStatement(st)

    FILTERGROUP filters6
            FILTER 'Просроченные с/ф' 'F10' overdueSpecificationStatement(sp, st)
            FILTER 'Непросроченные с/ф' 'F9' noOverdueSpecificationStatement(sp, st) DEFAULT
            FILTER 'Без отгрузок с/ф ' 'F8' noQuantityStatementsInSpecification(sp)
;

showFormSpecificationsStatement 'Заказы' (statement) = ACTION FORM specificationsStatement OBJECTS st MODAL SHORTCUT specificationsStatement DEFAULT;

@metaCodeInputMultipleItems (statement);

toPrintActOfRevaluationStatement 'Акт переоценки' (statement) = toPrintActOfRevaluation(uniquePriceChangeStatement(statement));

FORM statement 'Отгрузка из розницы'
    OBJECTS st=statement FIXED PANEL
    PROPERTIES (st) numberObject, seriesObject, dateStatement, timeStatement, nameCustomerStatement,
                    nameDepartmentStoreStatement, specificationsStatement, toFillStatementDetailsStatement, showFormSpecificationsStatement,
                    noteStatement, totalQuantityStatement, sumWithoutNDSStatement, sumNDSStatement, sumStatement,
                    numberDisposalStatement SHOWIF needToPriceChangeStatement(st)

    PROPERTIES(st) carConsignment, ownerCarConsignment, trailerConsignment, driverCarConsignment, waybillConsignment,
                   nameTransportPayerConsignment, shipmentBaseConsignment, loadingPlaceConsignment, unloadingPlaceConsignment,
                   readdressingConsignment, commonNameIssuanceAllowedConsignment, commonNameIssuanceExecutedConsignment,
                   forwarderConsignment, warrantConsignment, warrantHolderConsignment, goodsAcceptedConsignment,
                   commonNameLoadingExecuterConsignment, nameWayOfLoadingConsignment, codeLoadingConsignment,
                   arrivalTimeConsignment, departureTimeConsignment, downtimeConsignment, raceQuantityConsignment,
                   sumQuantityConsignment, sumPackQuantityConsignment, sumGrossWeightConsignmentDetail,
                   sumCostConsignmentDetail, totalSumVATConsignmentDetail

    OBJECTS d=statementDetail
    PROPERTIES (d)  numberStatementDetail, barcodeExSkuStatementDetail, nameAttributeItemStatementDetail, quantityStatementDetail,
                    retailPriceStatementDetail, sumWithoutNDSStatementDetail, numberRangeStatementDetail, dataActingRateRangeStatementDetail,
                    sumNDSStatementDetail, totalSumNDSStatementDetail, sumStatementDetail,
                    noteStatementDetail, ADDOBJ, delete

    PROPERTIES (d)  FORCE PANEL importerPriceStatementDetail, supplierPriceStatementDetail, nameWareStatementDetail, priceWareStatementDetail, dataRetailRangeStatementDetail,
                                curRetailPriceStatementDetail BACKGROUND notEqualsPriceStatementDetail(d),
                                articleItemStatementDetail, nameCountryItemStatementDetail,
                                balanceDepartmentStoreItemStatementDetail BACKGROUND highlightStatementDetail(d)


    PROPERTIES      inputMultipleItemsStatement(st) TODRAW d, addStatementDetailBarcode(st) TODRAW d

    FILTERS         inStatementStatementDetail(st, d)

    EDIT statement OBJECT st
;

DESIGN statement FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW specification.box BEFORE functions.box{
            tabbedPane = TRUE;
            ADD d.box{
                title = 'Спецификация';
                ADD d.panel{
                    POSITION d.pricingStatementDetailInfo TO THE LEFT d.itemStatementDetailInfo;
                }
            }
            NEW consignment{
                title = 'Накладная';
                childConstraints = TO THE BOTTOM;
                ADD st.carConsignmentGroup;
                ADD st.issuanceConsignmentGroup;
                ADD st.loadingConsignmentGroup;
                ADD st.sumConsignmentGroup {
                    childConstraints = TO THE RIGHT;
                }
                POSITION st.issuanceConsignmentGroup TO THE RIGHT st.carConsignmentGroup;
                POSITION st.loadingConsignmentGroup TO THE RIGHT st.carConsignmentGroup;
                POSITION st.sumConsignmentGroup TO THE RIGHT st.carConsignmentGroup;
            }
        }

        NEW header.box BEFORE specification.box {
            childConstraints = TO THE RIGHT;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;
                ADD st.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreStatement);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateStatement);
                    ADD PROPERTY(timeStatement);
                }
                ADD st.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                }
                ADD st.specificationGroup {
                    childConstraints = TO THE BOTTOM;
                }
                POSITION st.documentPrmGroup TO THE LEFT st.specificationGroup;
            }

            ADD st.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    }
}


FORM statements 'Отгрузки из розницы'
    OBJECTS st=statement
    PROPERTIES (st)  READONLY objectClassName, numberObject, seriesObject, dateStatement, timeStatement, nameDepartmentStoreStatement,
                     nameCustomerStatement, quantityStatementDetailsStatement, totalQuantityStatement,
                     sumWithoutNDSStatement, sumNDSStatement, sumStatement
    PROPERTIES (st)  FORCE PANEL toPrintConsignmentOne, toPrintConsignmentTwo, toPrintActOfRevaluationStatement SHOWIF needToPriceChangeStatement(st)


    PROPERTIES (st)  ADDFORM, EDITFORM SHOWIF isDraftStatement(st), delete FORCE PANEL SHOWIF isDraftStatement(st),
                     postStatement SHOWIF isDraftStatement(st), unpostStatement SHOWIF isPostedStatement(st)

    PROPERTIES (st)  FORCE PANEL  nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed



    OBJECTS d=statementDetail
    PROPERTIES (d)   READONLY numberStatementDetail, barcodeExSkuStatementDetail, nameAttributeItemStatementDetail, quantityStatementDetail,
                     retailPriceStatementDetail, sumWithoutNDSStatementDetail, numberRangeStatementDetail, dataActingRateRangeStatementDetail,
                     sumNDSStatementDetail, totalSumNDSStatementDetail, sumStatementDetail, noteStatementDetail

    FILTERS          inStatementStatementDetail(st, d)
;

DESIGN statements FROM DEFAULT {
    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }
    PROPERTY (toPrintConsignmentOne(st)) {
        panelLocation = TOOLBAR;
    }
    PROPERTY (toPrintConsignmentTwo(st)) {
        panelLocation = TOOLBAR;
    }
    PROPERTY (toPrintActOfRevaluationStatement(st)) {
        panelLocation = TOOLBAR;
    }
    PROPERTY (delete(st)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
    st.historyGroup {
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    }
    st.postedGroup {
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    }
    POSITION st.historyGroup TO THE LEFT st.postedGroup;
    ADD d.grid.box BEFORE st.historyGroup;
}

//----------------------------------- Формы чеков -------------------------------------------------//

FORM bill 'Z-отчет'
    OBJECTS z=zReport FIXED PANEL
    PROPERTIES (z) numberCashRegisterZReport, nameDepartmentStoreZReport READONLY, dateOpenZReport, numberZReport,
                    quantityBillsZReport, quantityPositionsZReport, sumZReport, discountSumZReport

    OBJECTS b=bill
    PROPERTIES(b) numberBill, dateBill, timeBill, numberCashRegisterBill, nameDepartmentStoreBill READONLY,
                  numberDiscountCardBill, nameCustomerDiscountCardBill, sumBill, discountSumBill, quantityBillDetailsBill, quantityPositionsBill, ADDOBJ, delete
    FILTERS zReportBill(b)==z

    OBJECTS d=billDetail
    PROPERTIES(d) barcodeExBillDetail, nameAttributeItemBillDetail, quantityBillDetail, priceBillDetail, sumBillDetail, discountSumBillDetail, ADDOBJ, delete

    FILTERS billBillDetail(d)==b

    OBJECTS p=payment
    PROPERTIES(p) namePaymentTypePayment, namePaymentMeansPayment, sumPayment, ADDOBJ, delete
    PROPERTIES addBillDetailBarcodeFill (b) TODRAW d

    FILTERS billPayment(p)==b

    EDIT zReport OBJECT z
;

DESIGN bill FROM DEFAULT{
    NEW row.box BEFORE functions.box{
        ADD d.box{
            title = 'Строка чека';
            fillHorizontal = 3;
        };
        ADD p.box{
            fillHorizontal = 1;
        };
        POSITION d.box TO THE LEFT p.box;
    }
};

FORM bills 'Чеки'
    OBJECTS z=zReport
    PROPERTIES (z) READONLY objectClassName, numberCashRegisterZReport, nameDepartmentStoreZReport, dateOpenZReport,
                            numberZReport, quantityBillsZReport, quantityPositionsZReport, sumZReport, discountSumZReport
    PROPERTIES (z) ADDFORM, EDITFORM SHOWIF isDraftZReport(z), delete FORCE PANEL SHOWIF isDraftZReport(z),
                            postZReport SHOWIF isDraftZReport(z), unpostZReport SHOWIF isPostedZReport(z)

    OBJECTS b=bill
    PROPERTIES(b) READONLY  numberBill, dateBill, timeBill, numberCashRegisterBill, nameDepartmentStoreBill,
                            numberDiscountCardBill, nameCustomerDiscountCardBill, sumBill, discountSumBill,
                            quantityBillDetailsBill, quantityPositionsBill

    FILTERS zReportBill(b)==z

    OBJECTS d=billDetail
    PROPERTIES(d) READONLY  barcodeExBillDetail, nameAttributeItemBillDetail, quantityBillDetail, priceBillDetail,
                            sumBillDetail, discountSumBillDetail

    FILTERS billBillDetail(d)==b

    OBJECTS p=payment
    PROPERTIES(p) READONLY  namePaymentTypePayment, namePaymentMeansPayment, sumPayment

    FILTERS billPayment(p)==b
;

DESIGN bills FROM DEFAULT{
        PROPERTY(objectClassName) {
            preferredCharWidth = 15;
        }
        PROPERTY (delete(z)) {
            panelLocation = TOOLBAR;
            askConfirm = TRUE;
        }
    NEW row.box BEFORE functions.box{
        ADD d.box{
            title = 'Строка чека';
            fillHorizontal = 3;
        };
        ADD p.box{
            fillHorizontal = 1;
        };
        POSITION d.box TO THE LEFT p.box;
    }
};

//----------------------------------- Акты проработки -------------------------------------------------//
@metaCodeDocumentMachineryPriceTransaction(actOfStudy);
@metaCodeDocumentLabelTransaction(actOfStudy);

FORM actOfStudy 'Акт проработки'

    OBJECTS a=actOfStudy FIXED PANEL

    PROPERTIES(a)   nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, nameDepartmentStoreActOfStudy,
                    dateActOfStudy, timeActOfStudy, nameContractorDepartmentStoreActOfStudy,
                    quantityOutputActOfStudy, subtotalOutputActOfStudy, quantityInputActOfStudy, subtotalInputActOfStudy,
                    waybillOutputActOfStudy, seriesOutputActOfStudy, waybillInputActOfStudy, seriesInputActOfStudy

    OBJECTS sid=studyInputDetail
    OBJECTS sod=studyOutputDetail

    PROPERTIES(sid) nameAttributeItemStudyInputDetail
    PROPERTIES(sid) seriesNumberCuttingStudyInputDetail READONLY, showSeriesNumberCuttingStudyInputDetail
    PROPERTIES(sid) READONLY dateCuttingStudyInputDetail, descriptionCuttingStudyInputDetail,
                    percAllowancesCuttingStudyInputDetail, percLossesCuttingStudyInputDetail, percSweepsCuttingStudyInputDetail
    PROPERTIES(sid) importerPriceStudyInputDetail, supplierPriceStudyInputDetail, numberRetailRangeStudyInputDetail, dataRetailRangeStudyInputDetail,
                    retailPriceStudyInputDetail, quantityStudyInputDetail, totalStudyInputDetail,
                    totalPercGoodsStudyInputDetail BACKGROUND highlightStudyInputDetail(sid) READONLY, ADDOBJ, delete

    PROPERTIES(sid) toFillStudyOutputDetailsStudyInputDetail FORCE PANEL SHOWIF showNotStudyInputDetailStudyOutputDetail(sid,sod),
                    cleanAllStudyInputDetail FORCE PANEL

    PROPERTIES(sod) captionItemStudyOutputDetail, shortNameUnitOfMeasureItemStudyOutputDetail, importerPriceStudyOutputDetail, supplierPriceStudyOutputDetail,
                    numberRetailRangeStudyOutputDetail, dataRetailRangeStudyOutputDetail, factorStudyOutputDetail, percGoodsStudyOutputDetail,
                    retailPriceStudyOutputDetail, quantityStudyOutputDetail, actualQuantityStudyOutputDetail, totalStudyOutputDetail

    PROPERTIES(sod) FORCE PANEL curImporterPriceStudyOutputDetail, curSupplierPriceStudyOutputDetail, curNumberRetailRangeStudyOutputDetail,
                    curDataRetailRangeStudyOutputDetail, curRetailPriceStudyOutputDetail

    FILTERS         actOfStudyStudyInputDetail(sid)==a,
                    studyInputDetailStudyOutputDetail(sod) == sid

    EDIT actOfStudy OBJECT a
;

DESIGN actOfStudy FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW header.box BEFORE sid.box {
            childConstraints = TO THE RIGHT;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;

                ADD a.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreActOfStudy);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateActOfStudy);
                    ADD PROPERTY(timeActOfStudy);
                }

                ADD a.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                }

                NEW headerOut {
                    title = 'Расходная накладная';
                    ADD PROPERTY(waybillOutputActOfStudy);
                    ADD PROPERTY(seriesOutputActOfStudy);
                }
                POSITION a.documentPrmGroup TO THE LEFT headerOut;

                NEW headerIn {
                    title = 'Приходная накладная';
                    ADD PROPERTY(waybillInputActOfStudy);
                    ADD PROPERTY(seriesInputActOfStudy);
                }
                POSITION a.documentPrmGroup TO THE LEFT headerIn;
                POSITION headerOut TO THE LEFT headerIn;
            }

            ADD a.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    }
}


FORM actOfStudies 'Акты проработки'

    OBJECTS a=actOfStudy
    PROPERTIES(a)  READONLY objectClassName, numberObject, seriesObject, dateActOfStudy, timeActOfStudy, nameDepartmentStoreActOfStudy,
                            nameContractorDepartmentStoreActOfStudy, quantityOutputActOfStudy, subtotalOutputActOfStudy, quantityInputActOfStudy, subtotalInputActOfStudy,
                            statusPrintPriceTransactionDocument BACKGROUND showPrintLabelTransactionActOfStudy(a),
                            statusEquipmentPriceTransactionDocument BACKGROUND showCreateMachineryPriceTransactionActOfStudy(a)

    PROPERTIES(a) READONLY FORCE PANEL timeCreated, nameUserCreated, hostnameComputerCreated, timeClosed, nameUserClosed, hostnameComputerClosed

    PROPERTIES (a)          createActOfStudyLabelTransaction FORCE PANEL SHOWIF showPrintLabelTransactionActOfStudy(a),
                            createSnapshotActOfStudyLabelTransaction FORCE PANEL SHOWIF isPostedActOfStudy(a),
                            createActOfStudyMachineryPriceTransaction FORCE PANEL SHOWIF showCreateMachineryPriceTransactionActOfStudy(a),
                            createSnapshotActOfStudyMachineryPriceTransaction FORCE PANEL SHOWIF isPostedActOfStudy(a),
                            ADDFORM, EDITFORM SHOWIF isDraftActOfStudy(a), delete FORCE PANEL SHOWIF isDraftActOfStudy(a),
                            postActOfStudy SHOWIF isDraftActOfStudy(a), unpostActOfStudy SHOWIF isPostedActOfStudy(a)

    OBJECTS i = item
    PROPERTIES(i)      READONLY nameAttributeItem, shortNameUnitOfMeasureItem
    PROPERTIES(i, a)   READONLY quantityInputItemActOfStudy, totalInputItemActOfStudy, quantityOutputItemActOfStudy, totalOutputItemActOfStudy

    ORDER BY           totalInputItemActOfStudy, totalOutputItemActOfStudy
    FILTERS            quantityInputItemActOfStudy(i,a) OR quantityOutputItemActOfStudy(i,a)

    FILTERGROUP filters1
        FILTER 'Показать приход' 'F10' totalOutputItemActOfStudy(i, a)
        FILTER 'Показать расход' 'F9' totalInputItemActOfStudy(i, a)
;

DESIGN actOfStudies FROM DEFAULT {
    PROPERTY(objectClassName) {
        preferredCharWidth = 25;
    }
    PROPERTY (delete(a)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }
    a.historyGroup {
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    }
    a.postedGroup {
        childConstraints = TO THE BOTTOM;
        fillHorizontal = 1;
    }
    POSITION a.historyGroup TO THE LEFT a.postedGroup;
    ADD i.box BEFORE a.historyGroup;
}

//----------------------------------- Форма для остатков -------------------------------------------------//

inTradingNetworkStoreTypeStoreDepartmentDepartment (tradingNetwork, storeType, store, department, depStore) = UNION OVERRIDE
    department == depStore AND store  AND tradingNetwork AND storeType,
    storeDepartmentStore(department) == store AND NOT depStore AND tradingNetwork AND storeType,
    storeTypeDepartmentStore(department) == storeType AND NOT depStore AND tradingNetwork AND NOT store,
    tradingNetworkDepartmentStore(department) == tradingNetwork AND NOT store AND NOT storeType AND NOT depStore,
    department IS departmentStore AND NOT store AND NOT storeType AND NOT tradingNetwork AND NOT depStore;

countDayMovedItem 'Кол-во дней (30)' = SESSION DATA INTEGER (departmentStore) TOOLBAR;
countDayMovedItemOver 'кол-во дней' (departmentStore) =
    UNION OVERRIDE 30 AND departmentStore AS departmentStore, countDayMovedItem(departmentStore);

//для оптимизации быстродействия не добавлял дату в GROUP MAX
dateLastMovedItem 'Дата последнего движения товара' (item, departmentStore) =
    GROUP MAX dateTimeBalanceItemLedger(ledger)
    BY itemBalanceItemLedger(ledger), departmentStoreBalanceItemLedger(ledger) PERSISTENT;

dateLastMovedItemOver(item, departmentStore, date) =
    (dateLastMovedItem(item, departmentStore) AND (date AS DATETIME)) >= addDate2(dateInTime(date), -countDayMovedItemOver(departmentStore));

dateLastMovedUnionBalanceItem(item, departmentStore, date) =
    TRUE IF balanceAItemLedgerDateTime(item, departmentStore, date) OR TRUE IF dateLastMovedItemOver(item, departmentStore, date);

curDateLastMovedItemOver(item, departmentStore) =
    dateLastMovedItem(item, departmentStore) >= addDate2(currentDate(), -countDayMovedItemOver(departmentStore));

curDateLastMovedUnionBalanceItem(item, departmentStore) =
    TRUE IF currentBalanceItemLedger(item, departmentStore) OR TRUE IF curDateLastMovedItemOver(item, departmentStore);

FORM balanceItemDepartment 'Остатки по отделам на дату'

    OBJECTS t=DATETIME FIXED PANEL
    PROPERTIES(t) OBJVALUE

    TREE treeStore a=STRING[3], tn=tradingNetwork, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY OBJVALUE(a), name(tn), name(st), name(s), name(ds)
    FILTERS stringEqualsAll(a), inStoreTypeTradingNetwork (st, tn), inStoreTypeStore (st, s), inStoreDepartment(s, ds)

    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)

    OBJECTS           dsi=(dep=departmentStore, i=item)
    PROPERTIES        READONLY nameIt=nameAttributeItem(i), nameDep=name(dep)  //  barcodeBarcodeSku
    FILTERS           hasParentItemGroupSku(g, i),
                      inTradingNetworkStoreTypeStoreDepartmentDepartment(tn, st, s, dep, ds)


    PROPERTIES(i, dep, t) READONLY balanceAItemLedgerDateTime, priceImporterALedgerDateTime, priceSupplierALedgerDateTime,
                                   priceAccountALedgerDateTime, dataRetailALedgerDateTime, priceRetailALedgerDateTime,
                                   priceWareALedgerDateTime

    PROPERTIES(i, dep) READONLY dateLastMovedItem

    PROPERTIES countDayMovedItem(dep) TODRAW dsi FORCE PANEL

    FILTERGROUP filters
        FILTER 'Товары с остатком' 'F10' balanceAItemLedgerDateTime(i, dep, t) DEFAULT
        FILTER 'Товары с движением не позднее' 'F9' dateLastMovedUnionBalanceItem(i, dep, t)

    OBJECTS apl=accountPriceLedger
    PROPERTIES (apl) descriptionLedger, dateTimeAccountPriceLedger, priceAccountLedger
    FILTERS isPostedAccountPriceLedger(apl) AND itemAccountPriceLedger(apl)==i AND departmentStoreAccountPriceLedger(apl)==dep
    ORDER BY dateTimeAccountPriceLedger DESC

    OBJECTS rpl=retailPriceLedger
    PROPERTIES (rpl) descriptionLedger, dateTimeRetailPriceLedger, priceRetailLedger
    FILTERS isPostedRetailPriceLedger(rpl) AND itemRetailPriceLedger(rpl)==i AND departmentStoreRetailPriceLedger(rpl)==dep
    ORDER BY dateTimeRetailPriceLedger DESC

    OBJECTS bil=balanceItemLedger
    PROPERTIES(bil) descriptionLedger, dateTimeBalanceItemLedger, quantityBalanceItemLedger READONLY
    FILTERS isPostedBalanceItemLedger(bil) AND itemBalanceItemLedger(bil)==i AND departmentStoreBalanceItemLedger(bil)==dep
    ORDER BY dateTimeBalanceItemLedger DESC

    OBJECTS ipl=importerPriceLedger
    PROPERTIES(ipl) descriptionLedger, dateTimeImporterPriceLedger, priceImporterLedger
    FILTERS isPostedImporterPriceLedger(ipl) AND itemImporterPriceLedger(ipl)==i AND departmentStoreImporterPriceLedger(ipl)==dep
    ORDER BY dateTimeImporterPriceLedger DESC

    OBJECTS spl=supplierPriceLedger
    PROPERTIES(spl) descriptionLedger, dateTimeSupplierPriceLedger, priceSupplierLedger
    FILTERS isPostedSupplierPriceLedger(spl) AND itemSupplierPriceLedger(spl)==i AND departmentStoreSupplierPriceLedger(spl)==dep
    ORDER BY dateTimeSupplierPriceLedger DESC

    OBJECTS rvl=retailVATLedger
    PROPERTIES(rvl) descriptionLedger, dateTimeRetailVATLedger, dataRetailLedger
    FILTERS isPostedRetailVATLedger(rvl) AND itemRetailVATLedger(rvl)==i AND departmentStoreRetailVATLedger(rvl)==dep
    ORDER BY dateTimeRetailVATLedger DESC

    OBJECTS wpl= warePriceLedger
    PROPERTIES(wpl) descriptionLedger, dateTimeWarePriceLedger, nameWareWarePriceLedger, priceWareWarePriceLedger
    FILTERS isPostedWarePriceLedger(wpl) AND itemWarePriceLedger(wpl)==i AND departmentStoreWarePriceLedger(wpl)==dep
    ORDER BY dateTimeWarePriceLedger DESC
;

DESIGN balanceItemDepartment FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW firstCase {
                fillHorizontal = 1;
                childConstraints = TO THE BOTTOM;
                ADD t.box;
                ADD treeStore.box {title = 'Магазины';};
                ADD treeGroups.box {title = 'Товарные группы';};
        }

        NEW secondCase {
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD dsi.box {fillVertical = 2;}

                NEW ledger.box {
                    fillVertical = 1;
                    title = 'Изменение цен';
                    tabbedPane = TRUE;
                    ADD bil.box;
                    ADD apl.box;
                    ADD rpl.box;
                    ADD ipl.box;
                    ADD spl.box;
                    ADD rvl.box;
                    ADD wpl.box;
                }

        }
        POSITION firstCase TO THE LEFT secondCase;

        ADD functions.box;
    }
}

FORM curBalanceItemDepartment 'Текущие остатки по отделам'

    TREE treeStore a=STRING[3], tn=tradingNetwork, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY OBJVALUE(a), name(tn), name(st), name(s), name(ds)
    FILTERS stringEqualsAll(a), inStoreTypeTradingNetwork (st, tn), inStoreTypeStore (st, s), inStoreDepartment(s, ds)

    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)

    OBJECTS           dsi=(dep=departmentStore, i=item)
    PROPERTIES        READONLY nameIt=nameAttributeItem(i), nameDep=name(dep)  //  barcodeBarcodeSku
    FILTERS           hasParentItemGroupSku(g, i),
                      inTradingNetworkStoreTypeStoreDepartmentDepartment(tn, st, s, dep, ds)


    PROPERTIES(i, dep) READONLY currentBalanceItemLedger, currentPriceImporterLedger, currentPriceSupplierLedger,
                                currentPriceAccountLedger, dataCurrentRetailLedger, currentPriceRetailLedger,
                                currentPriceWareLedger, dateLastMovedItem

    PROPERTIES countDayMovedItem(dep) TODRAW dsi FORCE PANEL

    FILTERGROUP filters
        FILTER 'Товары с остатком' 'F10' currentBalanceItemLedger(i, dep) DEFAULT
        FILTER 'Товары с движением не позднее' 'F9' curDateLastMovedUnionBalanceItem(i, dep)

    OBJECTS apl=accountPriceLedger
    PROPERTIES (apl) descriptionLedger, dateTimeAccountPriceLedger, priceAccountLedger
    FILTERS isPostedAccountPriceLedger(apl) AND itemAccountPriceLedger(apl)==i AND departmentStoreAccountPriceLedger(apl)==dep
    ORDER BY dateTimeAccountPriceLedger DESC

    OBJECTS rpl=retailPriceLedger
    PROPERTIES (rpl) descriptionLedger, dateTimeRetailPriceLedger, priceRetailLedger
    FILTERS isPostedRetailPriceLedger(rpl) AND itemRetailPriceLedger(rpl)==i AND departmentStoreRetailPriceLedger(rpl)==dep
    ORDER BY dateTimeRetailPriceLedger DESC

    OBJECTS bil=balanceItemLedger
    PROPERTIES(bil) descriptionLedger, dateTimeBalanceItemLedger, quantityBalanceItemLedger READONLY
    FILTERS isPostedBalanceItemLedger(bil) AND itemBalanceItemLedger(bil)==i AND departmentStoreBalanceItemLedger(bil)==dep
    ORDER BY dateTimeBalanceItemLedger DESC

    OBJECTS ipl=importerPriceLedger
    PROPERTIES(ipl) descriptionLedger, dateTimeImporterPriceLedger, priceImporterLedger
    FILTERS isPostedImporterPriceLedger(ipl) AND itemImporterPriceLedger(ipl)==i AND departmentStoreImporterPriceLedger(ipl)==dep
    ORDER BY dateTimeImporterPriceLedger DESC

    OBJECTS spl=supplierPriceLedger
    PROPERTIES(spl) descriptionLedger, dateTimeSupplierPriceLedger, priceSupplierLedger
    FILTERS isPostedSupplierPriceLedger(spl) AND itemSupplierPriceLedger(spl)==i AND departmentStoreSupplierPriceLedger(spl)==dep
    ORDER BY dateTimeSupplierPriceLedger DESC

    OBJECTS rvl=retailVATLedger
    PROPERTIES(rvl) descriptionLedger, dateTimeRetailVATLedger, dataRetailLedger
    FILTERS isPostedRetailVATLedger(rvl) AND itemRetailVATLedger(rvl)==i AND departmentStoreRetailVATLedger(rvl)==dep
    ORDER BY dateTimeRetailVATLedger DESC

    OBJECTS wpl= warePriceLedger
    PROPERTIES(wpl) descriptionLedger, dateTimeWarePriceLedger, nameWareWarePriceLedger, priceWareWarePriceLedger
    FILTERS isPostedWarePriceLedger(wpl) AND itemWarePriceLedger(wpl)==i AND departmentStoreWarePriceLedger(wpl)==dep
    ORDER BY dateTimeWarePriceLedger DESC
;

DESIGN curBalanceItemDepartment FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW firstCase {
                fillHorizontal = 1;
                childConstraints = TO THE BOTTOM;
                ADD treeStore.box {title = 'Магазины';};
                ADD treeGroups.box {title = 'Товарные группы';};
        }

        NEW secondCase {
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD dsi.box {fillVertical = 2;}

                NEW ledger.box {
                    fillVertical = 1;
                    title = 'Изменение цен';
                    tabbedPane = TRUE;
                    ADD bil.box;
                    ADD apl.box;
                    ADD rpl.box;
                    ADD ipl.box;
                    ADD spl.box;
                    ADD rvl.box;
                    ADD wpl.box;
                }

        }
        POSITION firstCase TO THE LEFT secondCase;

        ADD functions.box;
    }
}

//---------------------------------------------- Форма поставки товаров в отдел -------------------------------------//

inSupplierItemDepartmentOver(sp, i, dep, t) = isSupplierItemDepartmentOver(sp, i, dep, t) == yesNo.yes;

FORM isSupplierItemDepartmentStore 'Ассортимент товаров в подразделении'

    OBJECTS t=DATE FIXED PANEL
    PROPERTIES(t) OBJVALUE

    TREE treeStore a=STRING[3], tn=tradingNetwork, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY OBJVALUE(a), name(tn), name(st), name(s), name(ds)
    FILTERS stringEqualsAll(a), inStoreTypeTradingNetwork (st, tn), inStoreTypeStore (st, s), inStoreDepartment(s, ds)

    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)

    OBJECTS           sp=supplier
    PROPERTIES(sp)    READONLY name

    OBJECTS           dsi=(dep=departmentStore, i=item)
    PROPERTIES        READONLY nameDep=name(dep), nameIt=nameAttributeItem(i), barcodeBarcodeSku(i)
    ORDER BY          nameDep
    PROPERTIES(sp, i, dep, t) nameisSupplierItemDepartmentOver BACKGROUND nameisSupplierItemDepartmentDate(sp, i, dep, t),
                              priceSupplierItemDepartmentOver BACKGROUND priceSupplierItemDepartmentDate(sp, i, dep, t)
    FILTERS           inTradingNetworkStoreTypeStoreDepartmentDepartment(tn, st, s, dep, ds)
    FILTERS           hasParentItemGroupSku(g, i)
    FILTERGROUP filters10
        FILTER 'Показывать поставляемые товары' 'F10' inSupplierItemDepartmentOver(sp, i, dep, t) DEFAULT;

DESIGN isSupplierItemDepartmentStore FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW firstCase {
                fillHorizontal = 1;
                childConstraints = TO THE BOTTOM;
                ADD t.box;
                ADD treeStore.box {title = 'Магазины';};
                ADD treeGroups.box {title = 'Товарные группы';};
        }

        NEW secondCase {
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD sp.box;
                ADD dsi.box {fillVertical = 2;}

        }
        POSITION firstCase TO THE LEFT secondCase;

        ADD functions.box;
    }
}

// ---------------------------- Нумераторы по умолчанию --------------------------------- //

defaultNumeratorDocuments = DATA numerator ();
nameDefaultNumeratorDocuments 'Нумератор для документов' = name(defaultNumeratorDocuments());

numeratorObject(object) <- defaultNumeratorDocuments() ON ASSIGN object IS numeratedObject;

//---------------------------------------------- Параметры -----------------------------------------------------//

FORM parameters 'Параметры'
    PROPERTIES() nameDefaultNumeratorDocuments;
;

//---------------------------------------------- Импорт данных -----------------------------------------------------//

//GROUP formularGroup 'Formular' : baseGroup;

importDataAction 'Импортировать данные (Formular)' = ACTION CUSTOM 'retail.actions.ImportDataActionProperty';// IN formularGroup;
importUrl 'URL' = DATA STRING[200] (); //IN formularGroup;
importLogin 'Логин' = DATA STRING[200] ();// IN formularGroup;
importPassword 'Пароль' = DATA STRING[200] ();// IN formularGroup;

//GROUP lstradeGroup 'LS Trade' : baseGroup;

importLSTDataAction 'Импортировать данные (LS Trade)' = ACTION CUSTOM 'retail.actions.ImportLSTDataActionProperty';// IN lstradeGroup;
importLSTDirectory 'Папка' = DATA STRING[200] ();// IN lstradeGroup;
importInactive 'Импортировать в том числе неактивные' = DATA BOOLEAN ();
importGroupItems 'Импортировать группы товаров' = DATA BOOLEAN ();
importWares 'Импортировать посуду' = DATA BOOLEAN ();
importItems 'Импортировать товары' = DATA BOOLEAN ();
importNumberItems 'Кол-во' = DATA INTEGER ();
importNumberItemsAtATime 'Разбивать на пакеты по' = DATA INTEGER ();
importPrices 'Импортировать цены товаров' = DATA BOOLEAN ();
importAssortment 'Импортировать ассортимент' = DATA BOOLEAN();
importShipment 'Импортировать документы прихода' = DATA BOOLEAN ();
importCompanies 'Импортировать компании' = DATA BOOLEAN ();
importSuppliers 'Импортировать поставщиков' = DATA BOOLEAN ();
importCustomers 'Импортировать покупателей' = DATA BOOLEAN ();
importStores 'Импортировать магазины' = DATA BOOLEAN ();
importDepartmentStores 'Импортировать отделы магазина' = DATA BOOLEAN();
importBanks 'Импортировать банки' = DATA BOOLEAN();
importRateWastes 'Импортировать нормы отходов' = DATA BOOLEAN();
FORM importData 'Импорт данных'
    PROPERTIES() importDataAction, importUrl, importLogin, importPassword
    PROPERTIES() importLSTDataAction, importLSTDirectory, importInactive, importGroupItems, importWares, importItems,
    importNumberItems, importNumberItemsAtATime, importPrices, importAssortment, importShipment,
    importCompanies, importSuppliers, importCustomers, importStores, importDepartmentStores, importBanks, importRateWastes
;

//---------------------------- Настройка навигатора ----------------------------------------//

WINDOW TOOLBAR topToolbar 'Папки' VERTICAL HIDETITLE HIDESCROLLBARS POSITION(0, 0, 20, 5);
WINDOW TOOLBAR formsToolbar 'Формы' VERTICAL HIDETITLE POSITION (0, 5, 20, 65);
WINDOW TREE formsTree 'Формы' HIDETITLE POSITION (0, 5, 20, 65);

HIDE WINDOW BaseLogicsModule.relevantForms;
HIDE WINDOW BaseLogicsModule.relevantClassForms;

NAVIGATOR {

    baseElement TO topToolbar;

    NEW lists 'Справочники' TO formsToolbar {
        NEW goods 'Товары' {
            ADD items;
            ADD wares;
            ADD components;
            ADD itemGroups;
            ADD unitsOfMeasure;
            ADD assortments;
        }
        NEW shopStructure 'Магазины' {
            ADD companies;
//            ADD qualifier;
            ADD stores;
        }
        NEW employeeRelations 'Сотрудники' {
            ADD employees;
            NEW committeeRelations 'Комиссии' {
                ADD registerCommitteeDialog;
                ADD revaluationCommitteeDialog;
                ADD inventoryCommitteeDialog;
            }
            ADD groupsUser;
        }
        NEW contragents 'Контрагенты'{
            ADD suppliers;
            ADD customers;
            ADD contracts;
            ADD discountCards;
            ADD banks;
        }
        NEW equipment 'Оборудование' {
            ADD groupsCashRegister;
            ADD groupsScales;
            ADD groupsCheck;
            ADD models;
            ADD stages;
            ADD cashReports;
            ADD labelTypes;
        }
        NEW producing 'Производство'{
            ADD cuttings;
            ADD recipes;
        }
        NEW pricing 'Ценообразование'{
            ADD taxes;
        }
    }

    NEW processes 'Бизнес-процессы' TO formsToolbar {
        NEW orders 'Заказы' {
            ADD timeTableDate;
            ADD orderSuppliers;
        }
        NEW incomeShipments 'Поставки' {
            ADD shipments;
            ADD wastages;
            ADD returnSuppliers;
            ADD isSupplierItemDepartmentStore;
        }
        NEW carryingInventories 'Инвентаризация' {
            ADD inventories;
        }
        NEW itemWriteOffs 'Списания' {
            ADD writeOffs;
        }
        NEW itemInnerFlows 'Внутренние перемещения' {
            ADD innerFlows;
            ADD innerArrivals;
        }
        NEW itemSpecifications 'Отпуск из розницы' {
            ADD specifications;
            ADD statements;
        }
        NEW retailSale 'Розничные продажи'{
            ADD bills;
        }
        NEW priceManagement 'Управление ценами' {
            ADD userPriceChanges;
        }
        NEW production 'Производство'{
            ADD actOfStudies;
        }
        NEW frontOffice 'Фронт-офис' {
            ADD machineryPriceTransactions;
            ADD labelTransactions;
        }
    }
    NEW accountInfo 'Сводная информация' TO formsToolbar{
        ADD curBalanceItemDepartment;
        ADD balanceItemDepartment;
        ADD sumAccountDocumentLedger;
        ADD priceChangeDocuments;
    }
    NEW printedForms 'Печатные формы' TO formsToolbar{
        ADD pricesRegister;
        ADD actOfRevaluation;
        ADD consignmentOne;
        ADD consignmentTwo;
    }

    ADD adminElement TO formsTree {
        NEW objects 'Карточки' {
            ADD itemGroup;
            ADD itemGroupDialog;
            ADD unitOfMeasure;
            ADD item;
            ADD ware;
            ADD barcode;
            ADD barcodeInput;
            ADD employee;
            ADD employeeDialog;
            ADD officer;
            ADD groupUser;
            ADD tradingSquare;
            ADD departmentStore;
            ADD departmentStores;
            ADD store;
            ADD tradingNetwork;
            ADD registerCommittee;
            ADD revaluationCommittee;
            ADD inventoryCommittee;
            ADD bank;
            ADD ownership;
            ADD supplier;
            ADD customer;
            ADD company;
            ADD contract;
            ADD cashRegisterModel;
            ADD scalesModel;
            ADD checkModel;
            ADD assortment;
            ADD typeItem;
            ADD rowTorg1;
            ADD color;
            ADD taste;
            ADD pack;
            ADD sort;
            ADD size;
            ADD specialty;
            ADD coolingDegree;
            ADD formItem;
        //    ADD numberInPack;
            ADD rateWaste;
            ADD addNameisPortionBarItem;
            ADD nameisPortionBarItem;
            ADD addNamebanDiscountItem;
            ADD namebanDiscountItem;
            ADD addcoefficientNetGrossItem;
            ADD coefficientNetGrossItem;
            ADD addrateNaturalLossItem;
            ADD rateNaturalLossItem;
            ADD genTimeTables;
            ADD addpriceWare;
            ADD priceWare;
            ADD rangeWare;
            ADD addRangeWare;
            ADD suppliersRangeItem;
            ADD addSuppliersRangeItem;
            ADD retailRangeItem;
            ADD addRetailRangeItem;
            ADD addimporterPriceItem;
            ADD importerPriceItem;
            ADD addmaxReserveItemDepartment;
            ADD maxReserveItemDepartment;
            ADD addminReserveItemDepartment;
            ADD minReserveItemDepartment;
            ADD addNamebanRevaluationItemDepartment;
            ADD namebanRevaluationItemDepartment;
            ADD addNameinActionItemDepartment;
            ADD nameinActionItemDepartment;
            ADD addmarginProductionItemDepartment;
            ADD marginProductionItemDepartment;
            ADD addretailPriceItemDepartment;
            ADD retailPriceItemDepartment;
            ADD addaccountPriceItemDepartment;
            ADD accountPriceItemDepartment;
            ADD adddiscountItemDepartment;
            ADD discountItemDepartment;
            ADD addNamelabelItemDepartment;
            ADD namelabelItemDepartment;
            ADD addmultiplierItemDepartment;
            ADD multiplierItemDepartment;
            ADD addoldPriceItemDepartment;
            ADD oldPriceItemDepartment;
            ADD addNameisSupplierItemDepartment;
            ADD nameisSupplierItemDepartment;
            ADD addpriceSupplierItemDepartment;
            ADD priceSupplierItemDepartment;
            ADD addmarkupItemDepartment;
            ADD markupItemDepartment;
            ADD addNamebanSupplierItemDepartment;
            ADD namebanSupplierItemDepartment;
            ADD preliminaryOrder;
            ADD cashRegister;
            ADD scales;
            ADD check;
            ADD tax;
            ADD cutting;
            ADD recipe;
            ADD groupCashRegister;
            ADD groupScales;
            ADD groupCheck;
            ADD component;
            ADD addaddressLegalEntity;
            ADD addressLegalEntity;
            ADD addpostAddressLegalEntity;
            ADD postAddressLegalEntity;
            ADD addmanagerLegalEntity;
            ADD managerLegalEntity;
            ADD addaccountantLegalEntity;
            ADD accountantLegalEntity;
            ADD addphoneLegalEntity;
            ADD phoneLegalEntity;
            ADD addNamesureSupplierDepartmentStore;
            ADD namesureSupplierDepartmentStore;
            ADD addressBank;
            ADD addaddressBank;
            ADD nameformContract;
            ADD addNameformContract;
            ADD delayContract;
            ADD adddelayContract;
            ADD genTimeTable;
            ADD addNamediscount;
            ADD addtimeTable;
            ADD orderSupplier;
            ADD timeTable;
            ADD cashReport;
            ADD namediscount;
            ADD rateWaste;
            ADD ordersShipment;
            ADD shipment;
            ADD inventory;
            ADD reasonOff;
            ADD writeOff;
            ADD listInventory;
            ADD nameDepartmentByInventory;
            ADD collationSheetItem;
            ADD innerFlow;
            ADD innerArrival;
            ADD objectiveAcquiring;
            ADD specification;
            ADD specificationsStatement;
            ADD specificationForm;
            ADD statement;
            ADD numerator;
            ADD userPriceChange;
            ADD addPercDiscountUserPriceChange;
            ADD addPercMarkupUserPriceChange;
            ADD returnSupplier;
            ADD barcodeForm;
            ADD bill;
            ADD commonInfoBatchReturnSupplierDetail;
            ADD discountCard;
            ADD actOfStudy;
            ADD seriesNumberCuttingStudyInputDetail;
            ADD itemDepartmentStoreInput;
            ADD machineryPriceTransaction;
            ADD groupMachineryInput;
            ADD filterItemsGroupMachinery;
            ADD itemDepartmentStoreSupplierInput;
            ADD labelType;
            ADD printLabelTransaction;
            ADD customLabelTransaction;
        }
        ADD parameters;
        ADD importData;
    }

    catalogElement {
        ADD numerators;
    }
}

