MODULE retail;

// Кол-ва - NUMERIC[14,3]
// Цены - NUMERIC[14,2]
// Суммы - NUMERIC[16,2]
// Ставка налога - NUMERIC[10,5]
// Надбавка - NUMERIC[8,3]
// Норма списания отходов - NUMERIC[10,3]

REQUIRE System,
        EvalScript,
        Utils,
        Hierarchy,
        Historizable,
        Numerator,
        Stock,
        Barcode,
        Document,
        Tax,
        Ware,
        Country,
        LegalEntityBy,
        Agreement,
        Order,
        BlanketOrder,
        Invoice,
        Shipment,
        CreditNote,
        SaleOrder,
        SaleBlanketOrder,
        SaleInvoice,
        SaleShipment,
        SaleCreditNote,
        SaleReturnOrder,
        SaleReturnInvoice,
        SaleReturnShipment,
        SaleReturnCreditNote,
        SalePricing,
        Sale,
        Purchase,
        PurchaseOrder,
        PurchaseInvoice,
        PurchaseShipment,
        PurchaseCreditNote,
        PurchaseReturnOrder,
        PurchaseReturnInvoice,
        PurchaseReturnShipment,
        PurchaseReturnCreditNote,
        PurchaseReturnPricing,
        PurchaseWriteOff,
        PurchaseSaleShipment,
        PurchaseSaleInvoice,
        PurchaseSaleOrder,
        SalePurchase,
        Repricing,
        Employee,
        StoreShipment,
        StoreWriteOff,
        Store,
        PurchasePricingWriteOff,
        Statistics,
        ItemStatistics,
        StoreStatistics,
        ConsignmentBy,
        AccountDocument,
        StorePrice,
        Sales,
        Machinery,
        CashRegister,
        Scales,
        PriceChecker,
        WriteOff,
        Terminal,
        Label,
        RetailCRM,
        CashOperation,
        POS,
        ContractStock,
        ContractLedger,
        Inventory,
        DefaultData,
        Item,
        ItemWare,
        ItemSize,
        ItemArticle,
        ItemWriteOff,
        PriceList,
        Transport,
        Route,
        Trip,
        Warehouse,
        WarehouseShipment,
        StockTax,
        ItemTax;

// ----------------------------------- Свойства изменения объектов в Posted ------------------------------------------ //

GROUP itemDetailGroup 'Товар' : publicGroup;

META defineDocumentDetailSkuItemPrefix (object, prefix, caption)
    @defineDocumentDetailSkuPrefix(object, item, prefix, caption);

    prefix###nameAttributeItem###object##Detail 'Товар'###caption (detail) =
        nameAttributeItem(prefix###item###object##Detail(detail)) IN itemDetailGroup;

    prefix###shortNameUOMItem###object##Detail 'Ед. изм.'###caption (detail) =
        shortNameUOMItem(prefix###item###object##Detail(detail)) IN itemDetailGroup;

    prefix###articleItem###object##Detail 'Артикул'###caption (detail) = articleItem(prefix###item###object##Detail(detail)) IN itemDetailGroup;

    prefix###nameCountryItem###object##Detail 'Страна'###caption (detail) = nameCountryItem(prefix###item###object##Detail(detail)) IN itemDetailGroup;

    prefix###inWare###object##Detail 'Товар в посуде'###caption (detail) = inWareItem(prefix###item###object##Detail(detail)) IN itemDetailGroup;

    prefix###controlExpiryItem###object##Detail 'Контролировать сроки годности товара?'###caption (detail) =
        controlExpiryItem (prefix###item###object##Detail(detail)) IN itemDetailGroup;

    prefix###isWeightItem###object##Detail 'Весовой товар?'###caption (detail) = isWeightItem(prefix###item###object##Detail(detail)) IN itemDetailGroup;
END

META defineDocumentDetailSkuItem (object)
    @defineDocumentDetailSkuItemPrefix(object, , );
END

META defineDocumentHeaderItemRetailSumCustomPrefix (object, detail, prefix, caption)
    prefix###retailSum###detail##Item###object 'Розничная сумма (окр.) товара в документе' (item, object) =
            GROUP SUM retailSum###detail(idetail)
                  BY  item###detail(idetail),
                      object###detail(idetail);

    prefix###retailSumItem###detail###object 'Розничная сумма (окр.), товар'###caption (idetail) =
        GROUP SUM prefix###retailSum###detail(idetail) AND NOT isContainerItem(item###detail(idetail))
            BY object###detail(idetail) IN documentSumGroup;
    prefix###retailSumContainer###detail###object 'Розничная сумма (окр.), тара'###caption (idetail) =
        GROUP SUM prefix###retailSum###detail(idetail) IF isContainerItem(item###detail(idetail))
            BY object###detail(idetail) IN documentSumGroup;
END
META defineDocumentHeaderItemRetailSumCustom (object, detail)
    @defineDocumentHeaderItemRetailSumCustomPrefix(object, detail, , );
END
META defineDocumentHeaderItemRetailSumPrefix (object, prefix, caption)
    @defineDocumentHeaderItemRetailSumCustomPrefix(object, object##Detail, prefix, caption);
END
META defineDocumentHeaderItemRetailSum (object)
    @defineDocumentHeaderItemRetailSumCustomPrefix(object, object##Detail, , );
END

// ----------------------------------- Товарный классификатор ------------------------------------------ //

EXTEND CLASS itemGroup : roundGroup;
roundGroupSku(sku) += itemGroupItem(sku);

EXTEND CLASS itemGroup : discountSkuGroup;
inDiscountSkuGroupSku(discountSkuGroup, sku) += itemGroupItem(sku) == discountSkuGroup;

pieceNumeratorItemGroup = DATA numerator (itemGroup);
namePieceNumeratorItemGroup 'Нумератор штрих-кодов (для штучного товара)' (itemGroup) = name(pieceNumeratorItemGroup(itemGroup));

weightNumeratorItemGroup = DATA numerator (itemGroup);
nameWeightNumeratorItemGroup 'Нумератор штрих-кодов (для весового товара)' (itemGroup) = name(weightNumeratorItemGroup(itemGroup));

EXTEND FORM itemGroup
    PROPERTIES(g) namePieceNumeratorItemGroup, nameWeightNumeratorItemGroup
;

EXTEND FORM itemGroups
    PROPERTIES(g) BEFORE delete namePieceNumeratorItemGroup, nameWeightNumeratorItemGroup
;
// формы за формами товара


// ----------------------------------- Товар ------------------------------------------ //
GROUP rateGroup 'Нормы' : publicGroup;
GROUP expiryGroup 'Контроль сроков годности' : publicGroup;
GROUP equipmentGroup 'Внешние устройства' : publicGroup;
GROUP labelGroup 'Ценник' : publicGroup;

GROUP activeGroup 'Активность товара' : publicGroup;

tmpSku() = SESSION DATA sku ();

//-----------------------------------------------------------------------------------------------//

isContainerItem 'Тара' = DATA BOOLEAN (item) IN itemBaseGroup;
isContainerSku (sku) += isContainerItem(sku);
//@defineItemAttribute(Container, 'Показывать явл-ся ли тарой', displayGroup);

//equipmentGroup
isWeightItem 'Весовой товар' = DATA BOOLEAN (item) IN itemBaseGroup;
isWeightSku(sku) += isWeightItem(sku);

compositionScalesItem 'Состав товара (ингредиенты) для весов' = DATA TEXT (item) IN equipmentGroup;
isMarkItem 'Маркировать товар' = DATA BOOLEAN (item) IN equipmentGroup;
isLoafCutItem 'Буханка разрезается' = DATA BOOLEAN (item) IN equipmentGroup;

passScalesItem 'Передавать на весы' = DATA BOOLEAN (item) IN equipmentGroup;
labelFormatPackItem = DATA labelFormat(item);
idLabelFormatPackItem 'Код формата этикетки' (item) = idLabelFormat(labelFormatPackItem(item)) IN equipmentGroup;

//substanceGroup
GROUP substanceGroup 'Энергетическая ценность' : publicGroup;
nutritionalValueItem 'Энергетическая и пищевая ценность' = DATA STRING[400] (item) IN substanceGroup MINCHARWIDTH 50;
energyItem 'Энергетическая ценность на 100г, ккал' = DATA DOUBLE (item) IN substanceGroup;
fatsItem 'Жиры на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
carbohydratesItem 'Углеводы на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
proteinsItem 'Белки на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
isContainGMOItem 'Содержит ГМО' = DATA BOOLEAN (item) IN substanceGroup;

//sizeGroup
lengthPackItem 'Длина упаковки' = DATA NUMERIC[8,2] (item) IN itemSizeGroup;
widthPackItem 'Ширина упаковки' = DATA NUMERIC[8,2] (item) IN itemSizeGroup;
heightPackItem 'Высота упаковки' = DATA NUMERIC[8,2] (item) IN itemSizeGroup;
grossWeightPackItem 'Вес брутто упаковки' = DATA NUMERIC[9,3] (item) IN itemSizeGroup;

//expiryGroup
controlExpiryItem 'Контролировать сроки годности товара?' = DATA BOOLEAN (item) IN expiryGroup;
daysExpiryItem 'Срок годности в днях' = DATA NUMERIC[8,2] (item) IN expiryGroup;
daysExpiryPackItem 'Срок годности в днях с момента фасовки' = DATA NUMERIC[8,2] (item) IN expiryGroup;
hoursExpiryPackItem 'Срок годности в часах с момента фасовки' = DATA INTEGER (item) IN expiryGroup;

// ----------------------------------- Штрих код ------------------------------------------ //

daysExpiryBarcode 'Срок годности в днях' = daysExpiryPackItem(skuBarcode(barcode));
hoursExpiryBarcode 'Срок годности в часах' = hoursExpiryPackItem(skuBarcode(barcode));
labelFormatBarcode 'Формат этикетки' = idLabelFormatPackItem(skuBarcode(barcode));
compositionBarcode 'Состав товара' = compositionScalesItem(skuBarcode(barcode));
isWeightBarcode 'Весовой' = isWeightItem(skuBarcode(barcode));
expiryDateBarcodeStock 'Крайний срок годности' (barcode, stock) = expiryDateSkuStock(skuBarcode(barcode), stock);

pieceNumeratorItem (item) = pieceNumeratorItemGroup(itemGroupItem(item));
weightNumeratorItem (item) = weightNumeratorItemGroup(itemGroupItem(item));

barcodeNumeratorSku(item) += IF isWeightItem(item) THEN weightNumeratorItem(item) ELSE pieceNumeratorItem(item);

//------------------------------------ Товар с историей -------------------------------------------------------------//

@defineHistorizableCustom(inactiveItem, 'Неактивный товар', yesNo, name, item, nameAttributeItem, activeGroup);
isActiveItem (item) = item IS item AND NOT inactiveItem(item) == yesNo.yes PERSISTENT;
EXTEND FORM items
    FILTERGROUP filters
        FILTER 'Отображать только активные товары' 'F10' isActiveItem(i) DEFAULT
;

// ----------------------------------- Справочник норм естественной убыли -------------------------------------------- //

CLASS naturalLossItemGroup 'Группа естественной убыли': named, externalObject;

CLASS subNaturalLossItemGroup 'Группа естественной убыли': named, externalObject;
CLASS subNaturalLossItemGroupDetail 'Строка группы естественной убыли' : externalObject;

parentNaturalLossItemGroup 'Родительская группа' = DATA naturalLossItemGroup(subNaturalLossItemGroup);
codeSubNaturalLossItemGroup 'Код нормы естественной убыли' = DATA STRING[3] (subNaturalLossItemGroup);

nameToNaturalLossItemGroup (name) = GROUP UNIQUE naturalLossItemGroup BY name(naturalLossItemGroup) WHERE naturalLossItemGroup IS naturalLossItemGroup;
subNaturalLossItemGroupSubNaturalLossItemGroupDetail = DATA subNaturalLossItemGroup (subNaturalLossItemGroupDetail);
dayFromNaturalLossItemGroupDetail 'День' = DATA INTEGER (subNaturalLossItemGroupDetail);
monthFromNaturalLossItemGroupDetail = DATA month (subNaturalLossItemGroupDetail);
nameMonthFromNaturalLossItemGroupDetail 'Месяц' = name(monthFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail));
dayToNaturalLossItemGroupDetail 'День' = DATA INTEGER (subNaturalLossItemGroupDetail);
monthToNaturalLossItemGroupDetail = DATA month (subNaturalLossItemGroupDetail);
nameMonthToNaturalLossItemGroupDetail 'Месяц' = name(monthToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail));
percentNaturalLossItemGroupDetail '% естественной убыли' = DATA NUMERIC[10,5] (subNaturalLossItemGroupDetail);

dateToNumber(prm1, prm2) = prm2*32 + prm1;
inInterval(prm1, prm2, prm3, prm4, prm5, prm6) = (dateToNumber(prm1, prm2) >= dateToNumber(prm3, prm4))
                                                  AND (dateToNumber(prm1, prm2) <= dateToNumber(prm5, prm6));

inIntervalNaturalLoss (date, subNaturalLossItemGroupDetail) =
    inInterval(dayInDate(date), numberMonthInDate(date),
               dayFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail),
               numberMonth(monthFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail)),
               dayToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail),
               numberMonth(monthToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail))) AND date IS DATE;

castInterval =
    FORMULA STRING[100] ' CAST($1 AS TEXT) || \' \' || CAST($2 AS TEXT) || \' - \' || CAST($3 AS TEXT) || \' \' || CAST($4 AS TEXT)';
castIntervalNaturalLoss (subNaturalLossItemGroupDetail) =
    castInterval(dayFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail),
                 nameMonthFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail),
                 dayToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail),
                 nameMonthToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail));

castConcat = FORMULA STRING[15] 'CAST($1 AS TEXT)';
concatSubNaturalLossItemGroupDetail (subNaturalLossItemGroup) =
    GROUP CONCAT castConcat(percentNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail)), ','
          BY subNaturalLossItemGroupSubNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail)
          ORDER subNaturalLossItemGroupDetail
          MINCHARWIDTH 10 PREFCHARWIDTH 30;

inSubNaturalLossItemGroup (subNaturalLossItemGroup, subNaturalLossItemGroupDetail) =
    subNaturalLossItemGroupSubNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail) ==  subNaturalLossItemGroup;

groupNaturalLossItem 'Группа естественной убыли товара(ИД)' = DATA subNaturalLossItemGroup (item);
nameGroupNaturalLossItem 'Группа естественной убыли товара' (item) = name(groupNaturalLossItem(item)) IN rateGroup;
rateGroupNaturalLossItem 'Норма естественной убыли, %' (item) =
    concatSubNaturalLossItemGroupDetail(groupNaturalLossItem(item)) IN rateGroup;

inParentNaturalLossItemGroup(naturalLossItemGroup, subNaturalLossItemGroup) =
    parentNaturalLossItemGroup(subNaturalLossItemGroup ) == naturalLossItemGroup;

inParentSubNaturalLossItemGroup (naturalLossItemGroup, subNaturalLossItemGroup) = UNION OVERRIDE
    parentNaturalLossItemGroup(subNaturalLossItemGroup) == naturalLossItemGroup,
    subNaturalLossItemGroup IS subNaturalLossItemGroup AND NOT naturalLossItemGroup;

numberFromSubNaturalLossItemGroupDetail (subNaturalLossItemGroupDetail) =
    dateToNumber(dayFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail),
                 numberMonth(monthFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail)));

numberToSubNaturalLossItemGroupDetail (subNaturalLossItemGroupDetail) =
    dateToNumber(dayToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail),
                 numberMonth(monthToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail)));

intersect(prm1, prm2, prm3, prm4) = (prm4-prm1)*(prm2-prm3) >= 0;

intersectNaturalLoss(interval1, interval2) = intersect(numberFromSubNaturalLossItemGroupDetail(interval1),
                                                       numberToSubNaturalLossItemGroupDetail(interval1),
                                                       numberFromSubNaturalLossItemGroupDetail(interval2),
                                                       numberToSubNaturalLossItemGroupDetail(interval2));

CONSTRAINT intersectNaturalLoss(interval1, interval2) AND interval1 != interval2
           AND subNaturalLossItemGroupSubNaturalLossItemGroupDetail(interval1) == subNaturalLossItemGroupSubNaturalLossItemGroupDetail(interval2)
           CHECKED BY intersectNaturalLoss MESSAGE 'Интервалы не могут пересекаться';

    CONSTRAINT dayFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail) < 1
           OR dayFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail) > 31
           CHECKED BY dayFromNaturalLossItemGroupDetail MESSAGE 'Задайте корректный день месяца';

    CONSTRAINT dayToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail) < 1
           OR dayToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail) > 31
           CHECKED BY dayToNaturalLossItemGroupDetail MESSAGE 'Задайте корректный день месяца';

FORM naturalLossItemGroups 'Справочник норм естественной убыли'

    TREE treeNaturalLossItem a=STRING[3], n=naturalLossItemGroup
    PROPERTIES READONLY OBJVALUE(a)
    PROPERTIES name(n), ADDOBJ(n), delete(n) FORCE PANEL DRAWTOTOOLBAR
    ORDER BY name

    OBJECTS sg=subNaturalLossItemGroup, d=subNaturalLossItemGroupDetail
    PROPERTIES(sg) name, codeSubNaturalLossItemGroup, ADDOBJ TODRAW sg, delete FORCE PANEL DRAWTOTOOLBAR
    PROPERTIES(d) dayFromNaturalLossItemGroupDetail, nameMonthFromNaturalLossItemGroupDetail,
                   dayToNaturalLossItemGroupDetail, nameMonthToNaturalLossItemGroupDetail,
                   percentNaturalLossItemGroupDetail, ADDOBJ, delete
    FILTERS stringEqualsAll(a), inParentSubNaturalLossItemGroup(n, sg),  inSubNaturalLossItemGroup(sg, d)
    ORDER BY name
;

DESIGN naturalLossItemGroups FROM DEFAULT {

    NEW topContainer {

        type = SPLITH;
        childConstraints = TO THE RIGHT;

        ADD treeNaturalLossItem.tree.box;

        NEW firstCase {

            type = SPLITV;
            childConstraints = TO THE BOTTOM;
            fillHorizontal = 4;

            ADD sg.box;
            ADD d.box;
        }
    }

    ADD functions.box;

    PROPERTY (delete(n)) {
        caption = 'Удалить';
        askConfirm = TRUE;
    }

    PROPERTY (delete(sg)) {
        caption = 'Удалить';
        askConfirm = TRUE;
    }
}

//------------------------------------ Товар для подразделения с историей -------------------------------------------//

TABLE itemDepartmentStore (item, departmentStore);
TABLE itemDepartmentStoreDate (item, departmentStore, DATE);

defaultLabelTypeItemDepartmentStore(item, departmentStore) = defaultLabelTypeDepartmentStore(departmentStore) AND item IS item;
@defineHistorizableCustomDefault(labelItemDepartmentStore, defaultLabelTypeItemDepartmentStore, 'Ценник', labelType, name, item, nameAttributeItem, departmentStore, name, 10, labelGroup);
labelBarcodeDepartmentStoreDate (barcode, departmentStore, date) = labelItemDepartmentStoreDate(skuBarcode(barcode), departmentStore, date);

CONSTRAINT dataLabelItemDepartmentStoreDate(item, departmentStore, date) AND NOT inLabelTypeDepartmentStore(dataLabelItemDepartmentStoreDate(item, departmentStore, date), departmentStore)
    CHECKED BY dataLabelItemDepartmentStoreDate MESSAGE 'Тип ценника запрещен для выбранного отдела магазина';

@defineHistorizable(multiplierItemDepartmentStore, 'Множитель', INTEGER, item, nameAttributeItem, departmentStore, name, labelGroup);
valOverMultiplierItemDepartmentStoreDate (item, departmentStore, date) = UNION OVERRIDE 1 IF item IS item AND departmentStore IS departmentStore AND date IS DATE,
                                                                               multiplierItemDepartmentStoreDate(item, departmentStore, date);
valOverMultiplierBarcodeDepartmentDate (barcode, departmentStore, date) = valOverMultiplierItemDepartmentStoreDate(skuBarcode(barcode), departmentStore, date);

EXTEND FORM item

    PROPERTIES(i) isContainerItem,
                  isWeightItem,

                  nameGroupNaturalLossItem, rateGroupNaturalLossItem, //nameStatisticGroupSku,

                  lengthPackItem, widthPackItem, heightPackItem, grossWeightPackItem,

                  nameInactiveItem, dialogInactiveItem,

                  // Дополнительные
                  passScalesItem, isMarkItem, isLoafCutItem,
                  compositionScalesItem, idLabelFormatPackItem,

                  nutritionalValueItem, energyItem,
                  fatsItem, carbohydratesItem, proteinsItem, isContainGMOItem,

                  controlExpiryItem, daysExpiryItem, daysExpiryPackItem, hoursExpiryPackItem,

                  quantityPackItem

    PROPERTIES(b) BEFORE delete titleScalesBarcode, titleCashRegisterBarcode

    // Управленческие параметры
    TREE treeStore a=STRING[3], t=chainStores, st=storeType, s=store
    PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS stringEqualsAll(a), inChainStoresStoreType (t, st), inStoreTypeStore (st, s)

    OBJECTS dt=DATE FIXED PANEL, d=departmentStore
    PROPERTIES (d) name
    FILTERS inChainStoresStoreTypeStoreDepartment(t, st, s, d)

    PROPERTIES (dt) OBJVALUE BACKGROUND dateDiffersCurrent(dt)
    PROPERTIES      overNameLabelItemDepartmentStoreDate(i, d, dt) BACKGROUND dataLabelItemDepartmentStoreDate(i, d, dt), overDialogLabelItemDepartmentStoreDate(i, d),
                    overMultiplierItemDepartmentStoreDate(i, d, dt) BACKGROUND dataMultiplierItemDepartmentStoreDate(i, d, dt), overDialogMultiplierItemDepartmentStoreDate(i, d)

    EDIT item OBJECT i
;

EXTEND DESIGN item {
    main {
        itemDetail {
            itemPrimary {
                itemPrimaryColumn1 {
                }

                itemPrimaryColumn2 {
                    ADD i.rateGroup {
                        childConstraints = TO THE BOTTOM;
                    }
                    ADD i.activeGroup;
                }
            }

            NEW itemAdditional AFTER itemPrimary {
                title = 'Дополнительные';
                fillVertical = 1.0;
                fillHorizontal = 1.0;

                NEW containerALeft {
                    childConstraints = TO THE BOTTOM;
                    ADD i.equipmentGroup {
                        childConstraints = TO THE BOTTOM;
                    }
                }

                NEW containerARight {
                    childConstraints = TO THE BOTTOM;
                    ADD i.substanceGroup{
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.expiryGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                };

                POSITION containerALeft TO THE LEFT containerARight;
            }

            ADD d.box AFTER itemAdditional {
                title = 'Управленческие параметры';

                fillVertical = 1.0;
                fillHorizontal = 1.0;
                ADD dt.box BEFORE d.grid.box;
                ADD treeStore.tree.box BEFORE d.grid.box;
                POSITION treeStore.tree.box TO THE LEFT d.grid.box;
                POSITION d.grid.box TO THE LEFT d.panel;
                d.grid.box {
                    fillHorizontal = 3;
                };
            }
       }
    }
}

//---------------------------- Документы качества ----------------------------------------//

CLASS ABSTRACT paper 'Документы качества' : named;
TABLE paper(paper);


CLASS customsCertificate 'Таможенный сертификат' : paper;
CLASS certificateGGR 'Удостоверение о ГГР' : paper;
CLASS certificateConformity 'Сертификат соответствия' : paper;
CLASS stateExamination 'Акт гос. сан.-гиг. экспертизы' : paper;

numberPaper 'Номер документа' (paper) = DATA STRING[30] (paper) IN baseGroup;
datePaper 'Дата документа' (paper) = DATA DATE (paper) IN baseGroup;
dateToPaper 'Срок действия' (paper) = DATA DATE (paper) IN baseGroup;
holderPaper 'Держатель ИД' (paper) = DATA legalEntity (paper) IN idGroup;
nameHolderPaper 'Наименование держателя' (paper) = name(holderPaper(paper)) IN baseGroup;
issuedPaper 'Документ выдал ИД' (paper) = DATA legalEntity (paper) IN idGroup;
nameIssuedPaper 'Наименование органа, выдавшего документ' (paper) = name(issuedPaper(paper)) IN baseGroup;

FORM paper 'Документ качества'
    OBJECTS p=paper FIXED PANEL
    PROPERTIES(p) numberPaper, datePaper, dateToPaper, nameHolderPaper, nameIssuedPaper

    EDIT paper OBJECT p
    EDIT customsCertificate OBJECT p
    EDIT certificateGGR OBJECT p
    EDIT certificateConformity OBJECT p
    EDIT stateExamination OBJECT p
;

DESIGN paper FROM DEFAULT {

    NEW row BEFORE functions.box{
        childConstraints = TO THE BOTTOM;

        NEW row1 {
            title = 'Шапка документа';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY(numberPaper(p));
            ADD PROPERTY(datePaper(p));
            ADD PROPERTY(dateToPaper(p));
        }
        NEW row2 {
            title = 'Организации';
            childConstraints = TO THE BOTTOM;
            ADD PROPERTY(nameHolderPaper(p));
            ADD PROPERTY(nameIssuedPaper(p));
        }
    }
}

FORM papers 'Документы качества'
    OBJECTS p=paper
    PROPERTIES(p)  objectClassName, numberPaper, datePaper, dateToPaper, nameHolderPaper, nameIssuedPaper
    PROPERTIES(p)  ADDFORM, EDITFORM, delete
    ORDER BY objectClassName
;

// -------------------------------------------- Подключение модуля POS -------------------------------------- //
@implementSkuLedgerReceiptDetail();
@implementAccountDocumentLedgerZReport();

// ------------------------------------------- Загрузка в ВУ --------------------------------------------- //

@defineMachineryPriceTransactionAttribute(labelFormat, 'Формат этикетки', INTEGER);

@defineMachineryPriceTransactionAttribute(daysExpiry, 'Срок годности в днях с момента фасовки', NUMERIC[8,2]);
@defineMachineryPriceTransactionAttribute(hoursExpiry, 'Срок годности в часах с момента фасовки', INTEGER);
@defineMachineryPriceTransactionAttributeStock(expiryDate, 'Срок годности (дата)', DATE);

@defineMachineryPriceTransactionAttribute(isWeight, 'Весовой товар', BOOLEAN);
@defineMachineryPriceTransactionAttribute(composition, 'Состав товара', TEXT);

// Кассы
createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += ACTION (transaction, groupMachinery) {
    IF groupMachinery IS groupCashRegister THEN
        SET nameMachineryPriceTransactionBarcode(transaction, barcode) <- titleCashRegisterBarcode(barcode) WHERE inMachineryPriceTransactionBarcode(transaction, barcode);
}

// Весы
createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += ACTION (transaction, groupMachinery) {
    IF groupMachinery IS groupScales THEN
        SET nameMachineryPriceTransactionBarcode(transaction, barcode) <- titleScalesBarcode(barcode) WHERE inMachineryPriceTransactionBarcode(transaction, barcode);
}
overInGroupMachinerySku(groupMachinery, sku) += groupMachinery IS groupScales AND sku IS item AND NOT passScalesItem(sku);

synchronizeCompositionMachineryPriceTransactionGroupScales = ACTION (transaction, groupMachinery) {
    FOR compositionMachineryPriceTransactionBarcode(transaction, barcode) AND groupMachinery IS groupScales
        AND NOT cellScalesGroupScalesComposition(groupMachinery, compositionMachineryPriceTransactionBarcode(transaction, barcode))
        ADDOBJ c = cellScales DO {
            SET groupScalesCellScales(c) <- groupMachinery;
            SET compositionCellScales(c) <- compositionMachineryPriceTransactionBarcode (transaction, barcode);
        }
}

snapshotAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += synchronizeCompositionMachineryPriceTransactionGroupScales(transaction, groupMachinery);
createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += synchronizeCompositionMachineryPriceTransactionGroupScales(transaction, groupMachinery);

// Прайс-чекеры
createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += ACTION (transaction, groupMachinery) {
    IF groupMachinery IS groupPriceChecker THEN
        SET nameMachineryPriceTransactionBarcode(transaction, barcode) <- titleCashRegisterBarcode(barcode) WHERE inMachineryPriceTransactionBarcode(transaction, barcode);
}

// Терминалы сбора даных
createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += ACTION (transaction, groupMachinery) {
    IF groupMachinery IS groupTerminal THEN
        SET nameMachineryPriceTransactionBarcode(transaction, barcode) <- titleCashRegisterBarcode(barcode) WHERE inMachineryPriceTransactionBarcode(transaction, barcode);
}

//---------------------------- Карты проработки (разруба) ----------------------------------------//
GROUP cutGroup 'Разделка' : baseGroup;
GROUP actGroup 'Акт' : publicGroup;
GROUP itemStudyOutputDetailInfo 'Ценовый характеристики п/ф' : publicGroup;

CLASS cutting 'Карта проработки (разделки)' : named, numeratedObject;
TABLE cutting (cutting);

CLASS cuttingDetail 'Компонента';
TABLE cuttingDetail (cuttingDetail);

dateCutting 'Дата создания' = DATA DATE (cutting) IN cutGroup;
dateCutting(cutting) <- currentDate() WHEN ASSIGNED(cutting IS cutting);

useCutting 'Используется' = DATA BOOLEAN (cutting) IN cutGroup;
descriptionCutting 'Описание' = DATA STRING[200] (cutting) IN cutGroup;

percAllowancesCutting 'Процент надбавок, %' = DATA NUMERIC[8,3] (cutting) IN cutGroup;
percLossesCutting 'Процент потерь, %' = DATA NUMERIC[8,3] (cutting) IN cutGroup;
percSweepsCutting 'Процент зачисток, %' = DATA NUMERIC[8,3] (cutting) IN cutGroup;

inDepartmentStoreCutting 'В каких подразделениях разрешено использовать карту' = DATA BOOLEAN (departmentStore, cutting) IN baseGroup;

@defineDocumentRelation(cutting);
@defineDocumentDetailSkuItem(cutting);

factorCuttingDetail 'Рассчетный коэффициент цены' = DATA NUMERIC[8,3] (cuttingDetail) IN cutGroup;
percGoodsCuttingDetail '% выхода компонента (п/ф)' = DATA NUMERIC[8,3] (cuttingDetail) IN cutGroup;

notTotalPercGoodsCuttingDetail (cutting) = GROUP SUM percGoodsCuttingDetail(cuttingDetail) BY cuttingCuttingDetail(cuttingDetail);
totalPercGoodsCutting 'Итого % выхода по карте проработки (разделки)' (cutting) = notTotalPercGoodsCuttingDetail(cutting) (+)
    percLossesCutting(cutting) (+) percSweepsCutting(cutting);
highlightCutting(cutting) = totalPercGoodsCutting(cutting) > 100;

inItemCutting 'Вкл.' = DATA BOOLEAN (item, cutting) IN cutGroup;

FORM cutting 'Карта проработки'
    OBJECTS c=cutting FIXED PANEL
    OBJECTS d=cuttingDetail
    PROPERTIES(c)      nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, descriptionCutting, dateCutting,
                       useCutting, percAllowancesCutting, percLossesCutting, percSweepsCutting
    PROPERTIES(c)      totalPercGoodsCutting TODRAW d FORCE PANEL  BACKGROUND highlightCutting(c)


    PROPERTIES(d)      nameAttributeItemCuttingDetail, shortNameUOMItemCuttingDetail, factorCuttingDetail, percGoodsCuttingDetail, ADDOBJ, delete

    TREE treeStore a=STRING[3], t=chainStores, st=storeType, s=store
        PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
        FILTERS stringEqualsAll(a), inChainStoresStoreType (t, st), inStoreTypeStore(st, s)

        OBJECTS dep=departmentStore
        PROPERTIES(dep) READONLY depName = name
        FILTERS inChainStoresStoreTypeStoreDepartment(t, st, s, dep)
        ORDER BY depName

    TREE treeGroup g=itemGroup PARENT parentItemGroup
        PROPERTIES READONLY gname = name(g)
        ORDER BY gname

        OBJECTS i=item
        PROPERTIES READONLY idBarcodeSku(i), nameAttributeItemGroupItem(g, i), shortNameUOMItem(i), nameBrandItem(i)
        FILTERS nameAttributeItemGroupItem(g, i)
        ORDER BY nameAttributeItemGroupItem

    PROPERTIES(dep, c) inDepartmentStoreCutting
    PROPERTIES(i, c)   inItemCutting

    FILTERS inCuttingCuttingDetail(c, d)
    FILTERGROUP filters7
        FILTER 'Показывать подразделения только для данной карты' 'F10' inDepartmentStoreCutting(dep, c)
    FILTERGROUP filters8
        FILTER 'Показывать товар только для данной карты' 'F9' inItemCutting(i, c)

    EDIT cutting OBJECT c
;

DESIGN cutting FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW cut.box BEFORE functions.box{
            type = TABBED;
            ADD d.box;
            NEW caseOneBox {
                title = 'Подразделение';

                ADD treeStore.tree.box;
                ADD dep.box {
                    fillHorizontal = 2;
                };
                POSITION treeStore.tree.box TO THE LEFT dep.box;
            }
            NEW caseTwoBox { title = 'Товар, для которого действует карта';
                ADD treeGroup.tree.box;
                ADD i.box {
                    fillHorizontal = 2;
                };
                POSITION treeGroup.tree.box TO THE LEFT i.box;
            }
        }
    }
}

FORM cuttings 'Карты проработки'
    OBJECTS c=cutting
    PROPERTIES(c)      READONLY numberObject, seriesObject, descriptionCutting, dateCutting, useCutting, percAllowancesCutting,
                       percLossesCutting, percSweepsCutting
    PROPERTIES(c)      ADDFORM, EDITFORM, delete

    OBJECTS d=cuttingDetail
    PROPERTIES(d)      READONLY nameAttributeItemCuttingDetail, shortNameUOMItemCuttingDetail, factorCuttingDetail, percGoodsCuttingDetail

    OBJECTS dep=departmentStore
    PROPERTIES(dep)    READONLY nameStoreDepartmentStore, name

    OBJECTS i=item
    PROPERTIES(i)      READONLY idBarcodeSku, nameAttributeItem, shortNameUOMItem, nameBrandItem

    PROPERTIES(dep, c) READONLY inDepartmentStoreCutting

    PROPERTIES(i, c) READONLY inItemCutting

    FILTERS   inCuttingCuttingDetail(c, d),
              inDepartmentStoreCutting(dep, c),
              inItemCutting(i, c)
    ORDER BY           nameStoreDepartmentStore, seriesObject, numberObject, nameAttributeItemCuttingDetail, name
    FILTERGROUP filters1
        FILTER 'Только используемые' 'F10' useCutting(c) DEFAULT

;


DESIGN cuttings FROM DEFAULT {
    main{

        NEW topContainer {

            type = SPLITV;
            childConstraints = TO THE RIGHT;

            NEW firstCase{

                type = SPLITV;

                ADD c.box;
                ADD d.box;
            }

            NEW secondCase {

                type = SPLITH;
                childConstraints = TO THE RIGHT;

                ADD dep.box { title = 'Подразделение'; }
                ADD i.box { title = 'Товар, для которого действует карта'; }
            }
        }

        ADD functions.box;
    }
}

FORM seriesNumberCuttingStudyInputDetail 'Возможные карты проработки'
    OBJECTS dep=departmentStore FIXED PANEL, i=item FIXED PANEL

    PROPERTIES         READONLY depName = name(dep)
    PROPERTIES         READONLY nameAttributeItem(i)

    OBJECTS c=cutting
    PROPERTIES(c)      READONLY seriesNumberObject, descriptionCutting, dateCutting, useCutting, percAllowancesCutting, percLossesCutting,
                       percSweepsCutting, totalPercGoodsCutting

    FILTERS            inDepartmentStoreCutting(dep, c),
                       inItemCutting(i, c),
                       useCutting(c)
;

DESIGN seriesNumberCuttingStudyInputDetail FROM DEFAULT {
    PROPERTY(depName) {
        focusable = FALSE;
    }
    PROPERTY(nameAttributeItem) {
        focusable = FALSE;
    }
}

// Акты проработки

CLASS actOfStudy 'Акт проработки (разделки)' : historyObject, numeratedDocument;
TABLE actOfStudy (actOfStudy);

CLASS actOfStudyPosted 'Проведенный акт проработки' : actOfStudy, postedObject;

// шапка дакта
@defineDocumentHeaderTime(actOfStudy);
@defineDocumentHeaderDepartmentStore(actOfStudy);
@defineDocumentHeaderPosted (actOfStudy);

CLASS studyInputDetail 'Строка проработки (вход)';
TABLE studyInputDetail(studyInputDetail);

CLASS studyOutputDetail 'Строка проработки (выход)';
TABLE studyOutputDetail(studyOutputDetail);

// строки расхода
@defineDocumentRelation(actOfStudy, studyInputDetail);

@defineDocumentDetailDepartmentStoreCustom(actOfStudy, studyInputDetail);
@defineDocumentDetailTime(actOfStudy, studyInputDetail);

@defineDocumentDetailSkuItem(studyInput);

@defineDocumentDetailQuantity(studyInput);

@defineDocumentDetailBasePrice(studyInput, departmentStore);
@deriveBasePriceLedgerOnSkuChange(studyInput, item);

@defineDocumentDetailBaseSum(studyInput);

@defineDocumentDetailPosted(actOfStudy, studyInputDetail);

@defineDocumentHeaderQuantityCustom(actOfStudy, studyInputDetail);
@defineDocumentHeaderSkuQuantityCustom(actOfStudy, studyInputDetail, item);

@defineDocumentHeaderBaseSumCustom(actOfStudy, studyInputDetail);

@defineDocumentHeaderItemRetailSumCustom(actOfStudy, studyInputDetail);

// custom информация по акту
contractorDepartmentStoreActOfStudy (actOfStudy)= DATA departmentStore (actOfStudy) IN idGroup;
nameContractorDepartmentStoreActOfStudy 'Отдел-контрагент' (actOfStudy) = name(contractorDepartmentStoreActOfStudy(actOfStudy)) IN documentPrmGroup;

numberOutputActOfStudy 'Номер расходной накладной' (actOfStudy) = DATA STRING[7] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 7;
seriesOutputActOfStudy 'Серия расходной накладной' (actOfStudy) = DATA STRING[2] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 3;

numberInputActOfStudy 'Номер приходной накладной' (actOfStudy) = DATA STRING[7] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 7;
seriesInputActOfStudy 'Серия приходной накладной' (actOfStudy) = DATA STRING[2] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 3;

descriptionActOfStudy 'Название документа' (actOfStudy) =
    [FORMULA STRING[200] '\'Акт разруба \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'] (
    seriesNumberObject(actOfStudy), dateActOfStudy(actOfStudy), nameContractorDepartmentStoreActOfStudy(actOfStudy));

cuttingStudyInputDetail = DATA cutting (studyInputDetail) IN idGroup;
seriesNumberCuttingStudyInputDetail 'Номер карты' (studyInputDetail) = seriesNumberObject(cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
dateCuttingStudyInputDetail 'Дата создания карты' (studyInputDetail) = dateCutting(cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
descriptionCuttingStudyInputDetail 'Описание' (studyInputDetail) = descriptionCutting(cuttingStudyInputDetail(studyInputDetail)) IN actGroup MINCHARWIDTH 20 PREFCHARWIDTH 20;

percAllowancesCuttingStudyInputDetail 'Процент надбавок, %' (studyInputDetail) = percAllowancesCutting(cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
percLossesCuttingStudyInputDetail 'Процент потерь, %' (studyInputDetail) = percLossesCutting (cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
percSweepsCuttingStudyInputDetail 'Процент зачисток, %' (studyInputDetail) = percSweepsCutting (cuttingStudyInputDetail(studyInputDetail)) IN actGroup;

// строки расхода

studyInputDetailStudyOutputDetail = DATA studyInputDetail (studyOutputDetail) IN idGroup;
actOfStudyStudyOutputDetail(studyOutputDetail) = actOfStudyStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail)) PERSISTENT;

@defineDocumentDetailDepartmentStoreCustom(actOfStudy, studyOutputDetail);
@defineDocumentDetailTime(actOfStudy, studyOutputDetail);

@defineDocumentDetailSkuItem(studyOutput);

factorStudyOutputDetail 'Рассчетный коэффициент цены' = DATA NUMERIC[8,3] (studyOutputDetail) IN actGroup;
percGoodsStudyOutputDetail '% выхода компонента (п/ф)' = DATA NUMERIC[10,5] (studyOutputDetail) IN actGroup;

percAllowancesStudyOutputDetail 'Процент надбавок, %' = DATA NUMERIC[8,3] (studyOutputDetail) IN actGroup;
overPercAllowancesStudyOutputDetail (studyOutputDetail) = UNION OVERRIDE 0 IF studyOutputDetail IS studyOutputDetail,
                                                                         percAllowancesStudyOutputDetail(studyOutputDetail);

calculatedStudyOutputDetail 'Количество выхода п/ф' (studyOutputDetail) =  [X*Y/100]
    (quantityStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail)), percGoodsStudyOutputDetail(studyOutputDetail));

actualQuantityStudyOutputDetail 'Фактический выход п/ф'(studyOutputDetail) = DATA NUMERIC[14,3] (studyOutputDetail);
quantityStudyOutputDetail(studyOutputDetail) = UNION OVERRIDE calculatedStudyOutputDetail(studyOutputDetail),
                                                              actualQuantityStudyOutputDetail(studyOutputDetail);

@defineDocumentDetailBasePrice(studyOutput, departmentStore);
@defineDocumentDetailBaseSum(studyOutput);

@defineDocumentDetailBasePricePrefix(studyOutput, departmentStore, cur, ' (тек.)');
@deriveBasePriceLedgerOnSkuChangePrefix(studyOutput, cur, item);

@defineDocumentDetailPosted(actOfStudy, studyOutputDetail);

@defineDocumentHeaderQuantityCustom(actOfStudy, studyOutputDetail);
@defineDocumentHeaderSkuQuantityCustom(actOfStudy, studyOutputDetail, item);

@defineDocumentHeaderBaseSumCustom(actOfStudy, studyOutputDetail);

@defineDocumentHeaderItemRetailSumCustom(actOfStudy, studyOutputDetail);

expiryDateStudyOutputDetail 'Годен до' (studyOutputDetail) = DATA DATE(studyOutputDetail) IN baseGroup;

// используется для закачки в мета-коде
quantityActOfStudyDetailItemActOfStudy 'Кол-во для закачки в оборудование' (item, actOfStudy) = GROUP SUM quantityStudyOutputDetail(studyOutputDetail) BY itemStudyOutputDetail(studyOutputDetail), actOfStudyStudyOutputDetail(studyOutputDetail);

notTotalPercGoodsStudyInputDetail (studyInputDetail)= GROUP SUM percGoodsStudyOutputDetail(studyOutputDetail) BY studyInputDetailStudyOutputDetail(studyOutputDetail);
totalPercGoodsStudyInputDetail 'Итого % выхода по товару' (studyInputDetail) = notTotalPercGoodsStudyInputDetail(studyInputDetail) (+)
    percLossesCuttingStudyInputDetail(studyInputDetail)(+) percSweepsCuttingStudyInputDetail(studyInputDetail);
highlightStudyInputDetail(studyInputDetail) = totalPercGoodsStudyInputDetail(studyInputDetail) > 100;

roundImporterPriceStudyOutputDetail 'Расчетная цена импортера' (studyOutputDetail) = round2(
    importerPriceStudyInputDetail (studyInputDetailStudyOutputDetail(studyOutputDetail)) * factorStudyOutputDetail(studyOutputDetail));

roundSupplierPriceStudyOutputDetail 'Расчетная цена поставщика' (studyOutputDetail) = round2(
    supplierPriceStudyInputDetail (studyInputDetailStudyOutputDetail(studyOutputDetail)) * factorStudyOutputDetail(studyOutputDetail));

roundRetailPriceStudyOutputDetail 'Расчетная розничная цена' (studyOutputDetail) = roundM1([X*Y*(100+Z)/100]
    (retailPriceStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail)), factorStudyOutputDetail(studyOutputDetail), overPercAllowancesStudyOutputDetail(studyOutputDetail)));

toFillStudyOutputDetailsStudyInputDetail 'Заполнить данные для п/ф' (studyInputDetail) =  ACTION (studyInputDetail) {
    FOR cuttingCuttingDetail(cuttingDetail) == cuttingStudyInputDetail(studyInputDetail) DO {
        ADDOBJ studyOutputDetail;
        FOR sod == addedObject() DO {
            SET itemStudyOutputDetail(sod) <- itemCuttingDetail(cuttingDetail);
            SET factorStudyOutputDetail(sod) <- factorCuttingDetail(cuttingDetail);
            SET percGoodsStudyOutputDetail(sod) <- percGoodsCuttingDetail(cuttingDetail);
            SET percAllowancesStudyOutputDetail(sod) <- percAllowancesCutting(cuttingCuttingDetail(cuttingDetail));
            SET retailPriceStudyOutputDetail(sod) <- roundRetailPriceStudyOutputDetail(sod);
            SET importerPriceStudyOutputDetail(sod) <- roundImporterPriceStudyOutputDetail(sod);
            SET supplierPriceStudyOutputDetail(sod) <- roundSupplierPriceStudyOutputDetail(sod);
            SET retailVATStudyOutputDetail(sod) <- retailVATStudyInputDetail(studyInputDetailStudyOutputDetail(sod));
        };
    }
} CONFIRM;

showNotStudyInputDetailStudyOutputDetail(studyInputDetail, studyOutputDetail) = studyInputDetail IS studyInputDetail AND NOT studyInputDetailStudyOutputDetail(studyOutputDetail);

deleteStudyOutputDetailStudyInputDetail 'Очистить позиции' = ACTION (studyInputDetail) {
    FOR studyInputDetailStudyOutputDetail(studyOutputDetail) == studyInputDetail DO {
        EXEC delete(studyOutputDetail AS studyOutputDetail);
    }
} CONFIRM;

//---------------------------- Документы изменяющие суммы при разрубе --------------------------------//

//  приходный документ //

CLASS parish 'Приходный документ (разруб)';
TABLE parish (parish);

isActOfStudy(actOfStudy) = actOfStudy IS actOfStudy;

         //  приходный документ //
@defineAggregation(actOfStudy, parish, isActOfStudy);

dateParish (parish) = dateActOfStudy(actOfStudyParish(parish));
dateTimeParish 'Дата/время' (parish) = dateTimeActOfStudy(actOfStudyParish(parish));
seriesNumberParish 'Серия/Номер' (parish) = seriesNumberObject(actOfStudyParish(parish));
isPostedParish (parish) = isPostedActOfStudy(actOfStudyParish(parish));
departmentStoreParish (parish) = departmentStoreActOfStudy(actOfStudyParish(parish));

contractorDepartmentStoreParish (parish) = contractorDepartmentStoreActOfStudy(actOfStudyParish(parish));
nameContractorDepartmentStoreParish 'Отдел поставки' (parish) = name(contractorDepartmentStoreParish(parish));

retailSumParish 'Сумма прихода' (parish) = retailSumStudyOutputDetailActOfStudy(actOfStudyParish(parish));

descriptionParish 'Название документа' (parish) =
    [FORMULA STRING[200] '\'Акт разруба приход \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberParish(parish), dateParish(parish), nameContractorDepartmentStoreParish(parish)) PERSISTENT;

descriptionStudyOutputDetail 'Название документа' (studyOutputDetail) = descriptionParish(parishActOfStudy(actOfStudyStudyOutputDetail(studyOutputDetail))) PERSISTENT;

@implementBatch(studyOutput, item, departmentStore, supplierPrice);
quantityBatch (ledger) += quantityStudyOutputDetail(ledger);
expiryDateBatch (ledger) += expiryDateStudyOutputDetail(ledger);
sumInSkuLedger (ledger) += retailSumStudyOutputDetail(ledger);

@implementBaseISkuDepartmentStoreLedger(studyOutput, item);

@implementAccountDocumentLedgerInc(parish, departmentStore);
sumIncAccountDocumentLedger (ledger) += retailSumParish(ledger);
sumItemIncAccountDocumentLedger (ledger) += retailSumParish(ledger);
sumContainerIncAccountDocumentLedger (ledger) += 0.0 IF ledger IS parish;

//  расходный документ //

CLASS consumption 'Расходный документ (разруб)';
TABLE consumption (consumption);

@defineAggregation(actOfStudy, consumption, isActOfStudy);

dateConsumption (consumption) = dateActOfStudy(actOfStudyConsumption(consumption));
dateTimeConsumption 'Дата/время' (consumption) = dateTimeActOfStudy(actOfStudyConsumption(consumption));
seriesNumberConsumption 'Серия/Номер' (consumption) = seriesNumberObject(actOfStudyConsumption(consumption));
isPostedConsumption (consumption) = isPostedActOfStudy(actOfStudyConsumption(consumption));
departmentStoreConsumption (consumption) = departmentStoreActOfStudy(actOfStudyConsumption(consumption));

contractorDepartmentStoreConsumption (consumption) = contractorDepartmentStoreActOfStudy(actOfStudyConsumption(consumption));
nameContractorDepartmentStoreConsumption 'Отдел назначения' (consumption) = name(contractorDepartmentStoreConsumption(consumption));

retailSumConsumption 'Сумма расхода' (consumption) = retailSumStudyInputDetailActOfStudy(actOfStudyConsumption(consumption));

descriptionConsumption 'Название документа' (consumption) =
    [FORMULA STRING[200] '\'Акт разруба расход \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberConsumption(consumption), dateConsumption(consumption), nameContractorDepartmentStoreConsumption(consumption));

descriptionStudyInputDetail 'Название документа' (studyInputDetail) = descriptionConsumption(consumptionActOfStudy(actOfStudyStudyInputDetail(studyInputDetail))) PERSISTENT;

@implementSkuLedgerOutFIFO(studyInput, item, departmentStore);
quantityOutFIFOSkuLedger (ledger) += quantityStudyInputDetail(ledger);
@implementSkuLedgerOutFIFOBalance(studyInput, item, departmentStore);
sumOutSkuLedger (ledger) += retailSumStudyInputDetail(ledger);

@implementAccountDocumentLedgerOut(consumption, departmentStore);
sumOutAccountDocumentLedger (ledger) += retailSumConsumption(ledger);
sumItemOutAccountDocumentLedger (ledger) += retailSumConsumption(ledger);
sumContainerOutAccountDocumentLedger (ledger) += 0.0 IF ledger IS consumption;

showSeriesNumberCuttingStudyInputDetail 'Карта проработки' = ACTION (detail) {
    FORM seriesNumberCuttingStudyInputDetail OBJECTS dep=departmentStoreStudyInputDetail(detail), i=itemStudyInputDetail(detail) MODAL;
    IF formResult() == formResult.ok THEN {
        SET cuttingStudyInputDetail(detail) <- chosenObject('c');
    }
} SHORTCUT seriesNumberCuttingStudyInputDetail DEFAULT;

//----------------------------------------------- Списание товара ---------------------------------------------------//

// Проводим по регистру

limitOutFIFOSkuLedgerBatch(ledger, batch) += IF batchWriteOffDetail(ledger) THEN
                                                quantityWriteOffDetail(ledger) AND batch == batchWriteOffDetail(ledger)
                                             ELSE
                                                currentBalanceBatchStock(batch, stockWriteOffDetail(ledger));

changedDataSkuLedger(ledger) += CHANGED(batchWriteOffDetail(ledger));

// Товарный отчет
sumItemOutAccountDocumentLedger (ledger) += sumItemWriteOffDetailWriteOff(ledger);
sumContainerOutAccountDocumentLedger (ledger) += sumContainerWriteOffDetailWriteOff(ledger);

//------------------------------------------------- Z-отчет ---------------------------------------------------------------------//
@derivePriceLedgerOnSkuChangePrefix(retailVAT, receipt, VAT, sku);

// документ скидок для товарного отчета
CLASS saleDiscountDocument 'Скидка по продаже через кассы';
TABLE saleDiscountDocument (saleDiscountDocument);

@defineAggregation(zReport, saleDiscountDocument, discountSumReceiptDetailZReport);
@defineDocumentAggregationHeaderTime(zReport, saleDiscountDocument);
@defineDocumentAggregationHeaderStock(zReport, saleDiscountDocument, departmentStore, 'Отдел магазина');
@defineDocumentAggregationHeaderPosted(zReport, saleDiscountDocument);

numberCashRegisterSaleDiscountDocument (saleDiscountDocument) = numberCashRegisterZReport(zReportSaleDiscountDocument(saleDiscountDocument));

discountSaleDiscountDocument (saleDiscountDocument) = discountSumReceiptDetailZReport(zReportSaleDiscountDocument(saleDiscountDocument));

descriptionSaleDiscountDocument (saleDiscountDocument) =
    [FORMULA STRING[200] '\'Скидка по кассе \' || CAST($1 AS TEXT) || \' отдела \' || CAST($2 AS TEXT) ||  \' от \' || CAST($3 AS TEXT)'](
    numberCashRegisterSaleDiscountDocument(saleDiscountDocument), nameDepartmentStoreSaleDiscountDocument(saleDiscountDocument), dateSaleDiscountDocument(saleDiscountDocument));

@implementAccountDocumentLedgerOut(saleDiscountDocument, departmentStore);
sumOutAccountDocumentLedger (ledger) += discountSaleDiscountDocument(ledger);
sumItemOutAccountDocumentLedger (ledger) += discountSaleDiscountDocument(ledger);
sumContainerOutAccountDocumentLedger (ledger) += 0.0 IF ledger IS saleDiscountDocument;

//----------------------------------- Пересорт товара -------------------------------------------------------

CLASS disparity 'Пересортица' : historyObject, numeratedDocument;
CLASS disparityPosted 'Проведенная пересортица' : disparity, postedObject;
CLASS disparityDetail 'Строка пересортицы';

@defineDocument(disparity);
@defineDocumentDepartmentStore(disparity);
@defineDocumentPosted(disparity);

@defineDocumentDetailSkuItem(disparity);

@defineDocumentDetailQuantity(disparity);

@defineDocumentDetailBasePrice(disparity, departmentStore);
@derivePrevBasePriceLedgerOnSkuChange(disparity, item);

@defineDocumentDetailBaseSum(disparity);

@defineAddDetailDialogSkuStock(disparity, item, departmentStore, dialogSku);
@defineAddDetailDialogBarcode(disparity, item);
@defineAddDetailDialogTerminal(disparity, item);

@defineDocumentHeaderQuantity(disparity);
@defineDocumentHeaderBaseSum(disparity);

descriptionDisparityDetail 'Название документа' (disparityDetail) =
    [FORMULA STRING[200] '\'Пересортица (расход)\' ||  \' \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'](
    seriesNumberObject(disparityDisparityDetail(disparityDetail)), dateDisparity(disparityDisparityDetail(disparityDetail)));

@implementSkuLedgerOutFIFO(disparity, item, departmentStore);
quantityOutFIFOSkuLedger (ledger) += quantityDisparityDetail(ledger);
@implementSkuLedgerOutFIFOBalance(disparity, item, departmentStore);
sumOutSkuLedger (ledger) += retailSumDisparityDetail(ledger);

                                  // Приход

@defineDocumentDetailSkuItemPrefix(disparity, input, ' (приход)');

@defineDocumentDetailQuantityPrefix(disparity, input, ' (приход)');

@defineDocumentDetailBasePricePrefix(disparity, departmentStore, input, ' (приход)');
@derivePrevBasePriceLedgerOnSkuChangePrefix(disparity, input, inputItem);

//@defineDocumentDetailRetailSumPrefix(disparity, input, ' (приход)');
inputRetailSumDisparityDetail 'Розничная сумма (приход)'(disparityDetail) = round0(inputQuantityDisparityDetail(disparityDetail) * inputRetailPriceDisparityDetail(disparityDetail));
//inputQuantityDisparityDetailDisparity 'Кол-во (всего) (приход)' (disparityDetail) = GROUP SUM inputQuantityDisparityDetail(disparityDetail) BY disparityDisparityDetail(disparityDetail) IN documentSumGroup PERSISTENT;
@defineDocumentHeaderQuantityPrefix(disparity, input, ' (приход)');
@defineDocumentHeaderRetailSumPrefix(disparity, input, ' (приход)');

                                  // Текущее значение расхода //

@defineDocumentDetailBasePricePrefix(disparity, departmentStore, inputCur, ' (тек.)');
@derivePrevBasePriceLedgerOnSkuChangePrefix(disparity, inputCur, inputItem);

balanceBeforeDisparityDetail 'Остаток до пересорта (расход)' (disparityDetail) = DATA NUMERIC[14,3] (disparityDetail) IN baseGroup;
balanceBeforeDisparityDetail (disparityDetail) <- balanceBSkuStockDateTime (
                itemDisparityDetail(disparityDetail), departmentStoreDisparityDetail(disparityDetail), dateTimeDisparityDetail(disparityDetail))
                WHEN CHANGED(itemDisparityDetail(disparityDetail));

//----------------------------  Изменение остатка пересорт --------------------------------------------//

CLASS inputDisparityDetail 'Приход пересортицы';
TABLE inputDisparityDetail (inputDisparityDetail);

needToInputDisparityDetailDetail (disparityDetail) = inputQuantityDisparityDetail(disparityDetail) > 0
    AND isPostedDisparityDetail(disparityDetail);

@defineAggregation(disparityDetail, inputDisparityDetail, needToInputDisparityDetailDetail);

@defineDocumentAggregationDetailTime(disparity, inputDisparity);
@defineDocumentAggregationDetailPosted(disparity, inputDisparity);
@defineDocumentAggregationDetailStock(disparity, inputDisparity, departmentStore, 'Отдел магазина');
@defineDocumentAggregationDetailSkuPrefix(disparity, inputDisparity, item, input);
quantityInputDisparityDetail(inputDisparityDetail) = inputQuantityDisparityDetail(disparityDetailInputDisparityDetail(inputDisparityDetail));

@defineDocumentAggregationDetailPricePrefix(disparity, inputDisparity, input, , );
@defineDocumentDetailBaseSum(inputDisparity);

expiryDateInputDisparityDetail 'Годен до' (inputDisparityDetail) = DATA DATE(inputDisparityDetail) IN baseGroup;

descriptionInputDisparityDetail 'Название документа' (inputDisparityDetail) =
    [FORMULA STRING[200] '\'Пересортица (приход)\' ||  \' \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'](
    seriesNumberObject(disparityDisparityDetail(disparityDetailInputDisparityDetail(inputDisparityDetail))), dateDisparity(disparityDisparityDetail(disparityDetailInputDisparityDetail(inputDisparityDetail))));

@implementBatch(inputDisparity, item, departmentStore, supplierPrice);
quantityBatch (ledger) += quantityInputDisparityDetail(ledger);
expiryDateBatch (ledger) += expiryDateInputDisparityDetail(ledger);
sumInSkuLedger (ledger) += retailSumInputDisparityDetail(ledger);

@implementBaseISkuDepartmentStoreLedger(inputDisparity, item);

descriptionDisparity 'Название документа' (disparity) =
    [FORMULA STRING[200] '\'Пересортица \' ||  \' \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'](
    seriesNumberObject(disparity), dateDisparity(disparity));

//------------------------------------- Ведомость расчета естественной убыли ----------------------------------//

CLASS naturalLoss 'Ведомость естественной убыли' : historyObject, externalObject, numberedObject;
CLASS naturalLossDetail 'Строка ведомости естественной убыли': externalObject;
CLASS naturalLossPosted 'Проведенная ведомость естественной убыли' : naturalLoss, postedObject;

@defineDocument(naturalLoss);
@defineDocumentDepartmentStore(naturalLoss);
@defineDocumentPosted(naturalLoss);

@defineDocumentDetailSkuItem(naturalLoss);

@defineDocumentDetailQuantity(naturalLoss);
@defineDocumentDetailBasePrice(naturalLoss, departmentStore);

@defineDocumentHeaderQuantity(naturalLoss);

dateFromNaturalLoss 'с' = DATA DATE (naturalLoss) IN documentPrmGroup;
dateToNaturalLoss 'по' = DATA DATE (naturalLoss) IN documentPrmGroup;

dateFromNaturalLossDetail 'с' (naturalLossDetail) = dateFromNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail));
dateToNaturalLossDetail 'по' (naturalLossDetail) = dateToNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail));

subNaturalLossItemGroupNaturalLossDetail = DATA subNaturalLossItemGroup(naturalLossDetail);
nameSubNaturalLossItemGroupNaturalLossDetail 'Группа естественной убыли' =
    name(subNaturalLossItemGroupNaturalLossDetail(naturalLossDetail));
codeNaturalLossDetail 'Код нормы естественной убыли' =
    codeSubNaturalLossItemGroup(groupNaturalLossItem(itemNaturalLossDetail(naturalLossDetail)));
percentNaturalLossDetail 'Норма естественной убыли, %' = DATA NUMERIC[10,3] (naturalLossDetail);

subNaturalDetailNaturalLossDetail = DATA subNaturalLossItemGroupDetail(naturalLossDetail);
nameSubNaturalDetailNaturalLossDetail 'Период' (naturalLossDetail) =
    castIntervalNaturalLoss(subNaturalDetailNaturalLossDetail(naturalLossDetail));

castTwoObjectsToString150 = FORMULA STRING[150] 'CAST($1 AS TEXT) || \'  \' || CAST($2 AS TEXT)';
castNameSubNaturalLossItemGroup 'Группа естественной убыли' (naturalLossDetail) =
    castTwoObjectsToString150(nameSubNaturalLossItemGroupNaturalLossDetail(naturalLossDetail),
                              nameSubNaturalDetailNaturalLossDetail(naturalLossDetail));

quantityLossNaturalLossDetail 'Кол-во' = DATA NUMERIC[14,3] (naturalLossDetail);
//supplierSumLossNaturalLossDetail 'Сумма поставщика, руб.' = DATA NUMERIC[16,2] (naturalLossDetail);
//retailSumLossNaturalLossDetail 'Розничная сумма, руб' = DATA NUMERIC[16,2] (naturalLossDetail);
//supplierSumNaturalLossDetail 'Сумма поставщика, руб.' = DATA NUMERIC[16,2] (naturalLossDetail);
//retailSumNaturalLossDetail 'Розничная сумма, руб.' = DATA NUMERIC[16,2] (naturalLossDetail);

supplierPriceNaturalLossDetail(naturalLossDetail) <- supplierPriceBSkuDepartmentStoreDateTime(
                                                        itemNaturalLossDetail(naturalLossDetail),
                                                        departmentStoreNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail)),
                                                        dateTimeNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail)))
    WHEN CHANGED(itemNaturalLossDetail(naturalLossDetail));

retailPriceNaturalLossDetail(naturalLossDetail) <- retailPriceBSkuDepartmentStoreDateTime(
                                                        itemNaturalLossDetail(naturalLossDetail),
                                                        departmentStoreNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail)),
                                                        dateTimeNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail)))
    WHEN CHANGED(itemNaturalLossDetail(naturalLossDetail));

retailSumLossNaturalLossDetail 'Розничная сумма, руб' (naturalLossDetail) = round0(retailPriceNaturalLossDetail(naturalLossDetail) * quantityLossNaturalLossDetail(naturalLossDetail));
supplierSumLossNaturalLossDetail 'Сумма поставщика, руб.' (naturalLossDetail) = round0(supplierPriceNaturalLossDetail(naturalLossDetail) * quantityLossNaturalLossDetail(naturalLossDetail));
supplierSumNaturalLossDetail 'Сумма поставщика, руб.' (naturalLossDetail)  = round0(supplierPriceNaturalLossDetail(naturalLossDetail) * quantityNaturalLossDetail(naturalLossDetail));
retailSumNaturalLossDetail 'Розничная сумма, руб.' (naturalLossDetail) = round0(retailPriceNaturalLossDetail(naturalLossDetail) * quantityNaturalLossDetail(naturalLossDetail));

@defineDocumentHeaderRetailSum(naturalLoss);

invoiceSumNaturalLossDetailNaturalLoss 'Сумма поставщика' (naturalLoss) =
    GROUP SUM supplierSumNaturalLossDetail(naturalLossDetail) BY naturalLossNaturalLossDetail(naturalLossDetail) IN documentSumGroup PERSISTENT;

quantitySoldItemDepartmentNaturalLoss 'Продано' (item, departmentStore, dateFrom, dateTo, subNaturalLossItemGroupDetail) =
    GROUP SUM quantitySalesLedger(ledger) AND dateSalesLedger(ledger) >= (dateFrom AS DATE) AND dateSalesLedger(ledger) <= (dateTo AS DATE)
              AND inIntervalNaturalLoss(dateSalesLedger(ledger), subNaturalLossItemGroupDetail)
              AND groupNaturalLossItem(skuSalesLedger(ledger)) == subNaturalLossItemGroupSubNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail)
              BY skuSalesLedger(ledger), stockSalesLedger(ledger), dateFrom, dateTo, subNaturalLossItemGroupDetail;

toFillNaturalLossDetail 'Заполнить ведомость естественной убыли' = ACTION (naturalLoss) {
    FOR quantitySoldItemDepartmentNaturalLoss(item,
                                              departmentStoreNaturalLoss(naturalLoss),
                                              dateFromNaturalLoss(naturalLoss),
                                              dateToNaturalLoss(naturalLoss),
                                              subNaturalLossItemGroupDetail) ORDER nameAttributeItem(item), subNaturalLossItemGroupDetail
        DO {
        ADDOBJ naturalLossDetail;
        FOR d == addedObject() DO {
            SET itemNaturalLossDetail(d) <- item AS item;
            SET subNaturalLossItemGroupNaturalLossDetail(d) <- groupNaturalLossItem(item AS item);
            SET quantityLossNaturalLossDetail(d) <- quantitySoldItemDepartmentNaturalLoss(
                                                                    item AS item,
                                                                    departmentStoreNaturalLoss(naturalLoss),
                                                                    dateFromNaturalLoss(naturalLoss),
                                                                    dateToNaturalLoss(naturalLoss),
                                                                    subNaturalLossItemGroupDetail AS subNaturalLossItemGroupDetail);
            SET subNaturalDetailNaturalLossDetail(d) <- subNaturalLossItemGroupDetail AS subNaturalLossItemGroupDetail;
            SET percentNaturalLossDetail(d) <- percentNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail AS subNaturalLossItemGroupDetail);
            SET quantityNaturalLossDetail (d) <- percentNaturalLossDetail(d) * quantityLossNaturalLossDetail(d) /100;
        };
    };
} IN documentPrmGroup CONFIRM;

FORM naturalLossPrint 'Ведомость естественной убыли' PRINT
    OBJECTS s=naturalLoss FIXED PANEL
    PROPERTIES(s) READONLY SELECTOR numberObject, nameDepartmentStoreNaturalLoss, timeNaturalLoss, seriesObject,
                           dateNaturalLoss, dateFromNaturalLoss, dateToNaturalLoss,
                           quantityNaturalLossDetailNaturalLoss, invoiceSumNaturalLossDetailNaturalLoss,
                           retailSumNaturalLossDetailNaturalLoss, noteNaturalLoss
    OBJECTS d=naturalLossDetail
    PROPERTIES(d) READONLY indexNaturalLossDetail, nameAttributeItemNaturalLossDetail, codeNaturalLossDetail,
                           shortNameUOMItemNaturalLossDetail, quantityLossNaturalLossDetail,
                           supplierPriceNaturalLossDetail, retailPriceNaturalLossDetail, supplierSumLossNaturalLossDetail,
                           retailSumLossNaturalLossDetail, nameSubNaturalLossItemGroupNaturalLossDetail,
                           nameSubNaturalDetailNaturalLossDetail, castNameSubNaturalLossItemGroup, percentNaturalLossDetail,
                           quantityNaturalLossDetail, supplierSumNaturalLossDetail, retailSumNaturalLossDetail

    FILTERS inNaturalLossNaturalLossDetail(s, d)
;

toPrintNaturalLoss 'Ведомость естественной убыли' (naturalLoss) = ACTION FORM naturalLossPrint OBJECTS s IMAGE 'print.png' IN printGroup;

FORM naturalLoss 'Ведомость естественной убыли'
    OBJECTS s=naturalLoss FIXED PANEL
    PROPERTIES(s) objectClassName, numberObject, nameDepartmentStoreNaturalLoss, timeNaturalLoss, seriesObject,
                  dateNaturalLoss, dateFromNaturalLoss, dateToNaturalLoss, toFillNaturalLossDetail,
                  quantityNaturalLossDetailNaturalLoss, invoiceSumNaturalLossDetailNaturalLoss,
                  retailSumNaturalLossDetailNaturalLoss, noteNaturalLoss
    OBJECTS d=naturalLossDetail
    PROPERTIES(d) indexNaturalLossDetail, nameAttributeItemNaturalLossDetail, codeNaturalLossDetail,
                  quantityLossNaturalLossDetail, supplierPriceNaturalLossDetail, retailPriceNaturalLossDetail,
                  supplierSumLossNaturalLossDetail, retailSumLossNaturalLossDetail,
                  nameSubNaturalLossItemGroupNaturalLossDetail, shortNameUOMItemNaturalLossDetail,
                  nameSubNaturalDetailNaturalLossDetail, percentNaturalLossDetail,
                  quantityNaturalLossDetail, supplierSumNaturalLossDetail, retailSumNaturalLossDetail, ADDOBJ, delete

    FILTERS inNaturalLossNaturalLossDetail(s, d)

    EVENTS
        ON OK EXEC prePostNaturalLoss(s)

    EDIT naturalLoss OBJECT s
;

DESIGN naturalLoss FROM DEFAULT{

    NEW header.box  BEFORE d.box{
        childConstraints = TO THE RIGHT;

        NEW headerCol1 {
            childConstraints = TO THE BOTTOM;

            ADD s.documentHeaderGroup {
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(objectClassName);
                ADD PROPERTY(nameDepartmentStoreNaturalLoss);
                ADD PROPERTY(numberObject);
                ADD PROPERTY(seriesObject);
                ADD PROPERTY(dateNaturalLoss);
                ADD PROPERTY(timeNaturalLoss);
            };

            NEW headerCol1Row2 {
                childConstraints = TO THE RIGHT;
                ADD s.documentPrmGroup {
                }
            }

            ADD PROPERTY(noteNaturalLoss);
        }

        ADD s.documentSumGroup {
            childConstraints = TO THE BOTTOM;
        }
        PROPERTY(formOkAction) {
            caption = 'Провести';
        }
    }
}

FORM naturalLosses 'Ведомости естественной убыли'
    OBJECTS s=naturalLoss
    PROPERTIES(s) READONLY numberObject, seriesObject, dateNaturalLoss, timeNaturalLoss,
                           nameDepartmentStoreNaturalLoss, dateFromNaturalLoss, dateToNaturalLoss,
                           quantityNaturalLossDetailNaturalLoss, invoiceSumNaturalLossDetailNaturalLoss,
                           retailSumNaturalLossDetailNaturalLoss, noteNaturalLoss
    PROPERTIES(s) toPrintNaturalLoss FORCE PANEL
    PROPERTIES(s) ADDFORM, EDITFORM, delete FORCE PANEL DRAWTOTOOLBAR
    PROPERTIES(s) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed
    OBJECTS d=naturalLossDetail
    PROPERTIES(d) READONLY indexNaturalLossDetail, nameAttributeItemNaturalLossDetail, codeNaturalLossDetail,
                           shortNameUOMItemNaturalLossDetail, quantityLossNaturalLossDetail,
                           supplierPriceNaturalLossDetail, retailPriceNaturalLossDetail, supplierSumLossNaturalLossDetail,
                           retailSumLossNaturalLossDetail, nameSubNaturalLossItemGroupNaturalLossDetail,
                           percentNaturalLossDetail, quantityNaturalLossDetail,
                           supplierSumNaturalLossDetail, retailSumNaturalLossDetail

    FILTERS inNaturalLossNaturalLossDetail(s, d)
;

DESIGN naturalLosses FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD s.box;
        ADD d.box;
    }

    PROPERTY (delete(s)) {
        askConfirm = TRUE;
    }

    ADD s.printGroup{
        childConstraints = TO THE BOTTOM;
    }

    ADD s.historyGroup{
        childConstraints = TO THE BOTTOM;
    }

    ADD s.postedGroup{
        childConstraints = TO THE BOTTOM;
    }

    POSITION s.postedGroup TO THE RIGHT s.historyGroup;
    POSITION s.printGroup TO THE BOTTOM s.postedGroup;
    POSITION s.printGroup TO THE BOTTOM s.historyGroup;

    ADD functions.box;
}

// --------------------------------------- Печать ценников ---------------------------------------- //

labelTypeBarcodeDepartmentStoreDate (barcode, departmentStore, date) += labelBarcodeDepartmentStoreDate(barcode, departmentStore, date);
countLabelBarcodeDepartmentStoreDate (barcode, departmentStore, date) += valOverMultiplierBarcodeDepartmentDate(barcode, departmentStore, date);

nameCountryItemBarcode = nameCountryItem(skuBarcode(barcode));
@defineLabelTransactionAttribute(country, 'Страна', STRING[255], nameCountryItem);

nameManufacturerItemBarcode = nameManufacturerItem(skuBarcode(barcode));
@defineLabelTransactionAttribute(manufacturer, 'Производитель', STRING[255], nameManufacturerItem);

//------------------------------------------- Пересорт товара----------------------------------------------------//

quantityDisparityDetailItemDisparity 'Кол-во для закачки в оборудование (приход)' (item, disparity) = GROUP SUM inputQuantityDisparityDetail(disparityDetail) BY inputItemDisparityDetail(disparityDetail), disparityDisparityDetail(disparityDetail);

FORM disparity 'Пересортица'

    OBJECTS dis=disparity FIXED PANEL

    PROPERTIES(dis) objectClassName, nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, nameDepartmentStoreDisparity,
                    dateDisparity, timeDisparity,
                    quantityDisparityDetailDisparity, retailSumDisparityDetailDisparity,
                    inputQuantityDisparityDetailDisparity, inputRetailSumDisparityDetailDisparity

    OBJECTS d = disparityDetail
    PROPERTIES(d)   indexDisparityDetail,
                    idBarcodeSkuDisparityDetail, nameAttributeItemDisparityDetail, shortNameUOMItemDisparityDetail,
                    quantityDisparityDetail, retailPriceDisparityDetail, retailSumDisparityDetail,
                    inputIdBarcodeSkuDisparityDetail, inputNameAttributeItemDisparityDetail, inputShortNameUOMItemDisparityDetail,
                    inputQuantityDisparityDetail, inputRetailPriceDisparityDetail, inputRetailSumDisparityDetail
    PROPERTIES(d)   ADDOBJ, delete

    PROPERTIES(dis) TODRAW d addDetailDialogSkuStockDisparityDetailDisparity, addDetailDialogTerminalDisparityDetailDisparity,
                             addDetailInputBarcodeDisparityDetailDisparity, deleteDisparityDetailDisparity

    PROPERTIES (d)  FORCE PANEL importerPriceDisparityDetail, supplierPriceDisparityDetail, nameWareDisparityDetail,
                                warePriceDisparityDetail, valueRetailVATDisparityDetail, balanceBeforeDisparityDetail,
                                inputCurImporterPriceDisparityDetail, inputCurSupplierPriceDisparityDetail, inputCurNameWareDisparityDetail,
                                inputCurWarePriceDisparityDetail, inputCurValueRetailVATDisparityDetail, inputCurRetailPriceDisparityDetail,
                                inputImporterPriceDisparityDetail, inputSupplierPriceDisparityDetail, inputNameWareDisparityDetail,
                                inputWarePriceDisparityDetail, inputValueRetailVATDisparityDetail

    FILTERS         disparityDisparityDetail(d) == dis

    EVENTS
        ON OK EXEC prePostDisparity(dis)

    EDIT disparity OBJECT dis
;

DESIGN disparity FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW header.box{
            childConstraints = TO THE RIGHT;
            NEW caseTwo {
                childConstraints = TO THE BOTTOM;
                ADD dis.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(objectClassName);
                    ADD PROPERTY(nameDepartmentStoreDisparity);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateDisparity);
                    ADD PROPERTY(timeDisparity);
                }
            }
                ADD dis.documentSumGroup {
                    childConstraints = TO THE BOTTOM;
                }

        }

        ADD d.box {
            childConstraints = TO THE BOTTOM;
            title = 'Ценовый и количественные показатели';

            NEW row {
                childConstraints = TO THE RIGHT;
                title = 'Расход';
                ADD PROPERTY (importerPriceDisparityDetail);
                ADD PROPERTY (supplierPriceDisparityDetail);
                ADD PROPERTY (nameWareDisparityDetail);
                ADD PROPERTY (warePriceDisparityDetail);
                ADD PROPERTY (valueRetailVATDisparityDetail);
                ADD PROPERTY (balanceBeforeDisparityDetail);
            }

            NEW row1 {
                title = 'Приход';
                childConstraints = TO THE RIGHT;

                NEW row11{
                    fillHorizontal = 1;
                    childConstraints = TO THE BOTTOM;
                    title = 'Цены (приход) текущие';
                    ADD PROPERTY (inputCurImporterPriceDisparityDetail);
                    ADD PROPERTY (inputCurSupplierPriceDisparityDetail);
                    ADD PROPERTY (inputCurNameWareDisparityDetail);
                    ADD PROPERTY (inputCurWarePriceDisparityDetail);
                    ADD PROPERTY (inputCurValueRetailVATDisparityDetail);
                    ADD PROPERTY (inputCurRetailPriceDisparityDetail);
                }
                NEW row12{
                    fillHorizontal = 1;
                    childConstraints = TO THE BOTTOM;
                    title = 'Цены (приход) новые';
                    ADD PROPERTY (inputImporterPriceDisparityDetail);
                    ADD PROPERTY (inputSupplierPriceDisparityDetail);
                    ADD PROPERTY (inputNameWareDisparityDetail);
                    ADD PROPERTY (inputWarePriceDisparityDetail);
                    ADD PROPERTY (inputValueRetailVATDisparityDetail);
                }
            }
        }
        ADD functions.box;
        PROPERTY(formOkAction) {
            caption = 'Провести';
        }
    }
}

FORM disparities 'Пересортицы'

    OBJECTS dis=disparity
    PROPERTIES(dis)  READONLY objectClassName, numberObject, seriesObject, nameDepartmentStoreDisparity, dateDisparity, timeDisparity,
                              countDisparityDetailDisparity, quantityDisparityDetailDisparity, retailSumDisparityDetailDisparity,
                              inputQuantityDisparityDetailDisparity, inputRetailSumDisparityDetailDisparity

    PROPERTIES(dis)  READONLY FORCE PANEL timeCreated, nameUserCreated, hostnameComputerCreated, timeClosed, nameUserClosed, hostnameComputerClosed

    PROPERTIES (dis) ADDFORM, EDITFORM, delete FORCE PANEL DRAWTOTOOLBAR

    OBJECTS d=disparityDetail
    PROPERTIES(d)   READONLY indexDisparityDetail,
                    idBarcodeSkuDisparityDetail, nameAttributeItemDisparityDetail, shortNameUOMItemDisparityDetail,
                    quantityDisparityDetail, retailPriceDisparityDetail, retailSumDisparityDetail,
                    inputIdBarcodeSkuDisparityDetail, inputNameAttributeItemDisparityDetail, inputShortNameUOMItemDisparityDetail,
                    inputQuantityDisparityDetail, inputRetailPriceDisparityDetail, inputRetailSumDisparityDetail

    FILTERS         disparityDisparityDetail(d) == dis
;
DESIGN disparities FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD dis.box {
            PROPERTY(objectClassName) {
                preferredCharWidth = 25;
            }
            PROPERTY (delete(dis)) {
                askConfirm = TRUE;
            }
        }
        ADD d.box;
    }

    NEW caseOne {
        childConstraints = TO THE RIGHT;
        ADD dis.historyGroup {
            childConstraints = TO THE BOTTOM;
        }
        ADD dis.postedGroup {
            childConstraints = TO THE BOTTOM;
        }
    }

    ADD functions.box;
}

@Label.implementPriceTransactionDocument(disparity);
@defineDocumentLabelTransaction(disparity, item, departmentStore);
@extendFormDocumentLabelTransaction(disparities, dis, disparity);

@Machinery.implementPriceTransactionDocument(disparity);
@defineDocumentMachineryPriceTransaction(disparity, item, departmentStore);
@extendFormDocumentMachineryPriceTransaction(disparities, dis, disparity);

//---------------------------Товарный отчет-------------------------------------//

@extendStockFormAccountDocumentLedger(departmentStore, d);

//----------------------------------- Акты проработки -------------------------------------------------//
FORM actOfStudy 'Акт проработки'

    OBJECTS a=actOfStudy FIXED PANEL

    PROPERTIES(a)   objectClassName, nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, nameDepartmentStoreActOfStudy,
                    dateActOfStudy, timeActOfStudy, nameContractorDepartmentStoreActOfStudy,
                    quantityStudyOutputDetailActOfStudy, retailSumStudyOutputDetailActOfStudy, quantityStudyInputDetailActOfStudy, retailSumStudyInputDetailActOfStudy,
                    numberOutputActOfStudy, seriesOutputActOfStudy, numberInputActOfStudy, seriesInputActOfStudy

    OBJECTS sid=studyInputDetail
    OBJECTS sod=studyOutputDetail

    PROPERTIES(sid) nameAttributeItemStudyInputDetail
    PROPERTIES(sid) seriesNumberCuttingStudyInputDetail READONLY, showSeriesNumberCuttingStudyInputDetail
    PROPERTIES(sid) READONLY dateCuttingStudyInputDetail, descriptionCuttingStudyInputDetail,
                    percAllowancesCuttingStudyInputDetail, percLossesCuttingStudyInputDetail, percSweepsCuttingStudyInputDetail
    PROPERTIES(sid) importerPriceStudyInputDetail, supplierPriceStudyInputDetail, numberRetailVATStudyInputDetail, valueRetailVATStudyInputDetail,
                    retailPriceStudyInputDetail, quantityStudyInputDetail, retailSumStudyInputDetail,
                    totalPercGoodsStudyInputDetail BACKGROUND highlightStudyInputDetail(sid) READONLY, ADDOBJ, delete

    PROPERTIES(sid) FORCE PANEL toFillStudyOutputDetailsStudyInputDetail SHOWIF showNotStudyInputDetailStudyOutputDetail(sid, sod),
                                deleteStudyOutputDetailStudyInputDetail

    PROPERTIES(sod) nameAttributeItemStudyOutputDetail, shortNameUOMItemStudyOutputDetail, importerPriceStudyOutputDetail, supplierPriceStudyOutputDetail,
                    numberRetailVATStudyOutputDetail, valueRetailVATStudyOutputDetail, factorStudyOutputDetail, percGoodsStudyOutputDetail,
                    retailPriceStudyOutputDetail, calculatedStudyOutputDetail, actualQuantityStudyOutputDetail, retailSumStudyOutputDetail

    PROPERTIES(sod) FORCE PANEL curImporterPriceStudyOutputDetail, curSupplierPriceStudyOutputDetail, curNumberRetailVATStudyOutputDetail,
                    curValueRetailVATStudyOutputDetail, curRetailPriceStudyOutputDetail

    FILTERS         actOfStudyStudyInputDetail(sid) == a,
                    studyInputDetailStudyOutputDetail(sod) == sid

    EVENTS
        ON OK EXEC prePostActOfStudy(a)

    EDIT actOfStudy OBJECT a
;

DESIGN actOfStudy FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW header.box BEFORE sid.box {
            childConstraints = TO THE RIGHT;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;

                ADD a.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(objectClassName);
                    ADD PROPERTY(nameDepartmentStoreActOfStudy);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateActOfStudy);
                    ADD PROPERTY(timeActOfStudy);
                }

                ADD a.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                }

                NEW headerOut {
                    title = 'Расходная накладная';
                    ADD PROPERTY(numberOutputActOfStudy);
                    ADD PROPERTY(seriesOutputActOfStudy);
                }
                POSITION a.documentPrmGroup TO THE LEFT headerOut;

                NEW headerIn {
                    title = 'Приходная накладная';
                    ADD PROPERTY(numberInputActOfStudy);
                    ADD PROPERTY(seriesInputActOfStudy);
                }
                POSITION a.documentPrmGroup TO THE LEFT headerIn;
                POSITION headerOut TO THE LEFT headerIn;
            }

            NEW sumsContainer {
                childConstraints = TO THE BOTTOM;
                NEW inSumsContainer {
                    title = 'Итоги (вход)';
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY(quantityStudyInputDetailActOfStudy);
                    ADD PROPERTY(retailSumStudyInputDetailActOfStudy);
                }
                NEW outSumsContainer {
                    title = 'Итоги (выход)';
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY(quantityStudyOutputDetailActOfStudy);
                    ADD PROPERTY(retailSumStudyOutputDetailActOfStudy);
                }
            }
        }
        PROPERTY(formOkAction) {
            caption = 'Провести';
        }
    }
}


FORM actOfStudies 'Акты проработки'

    OBJECTS a=actOfStudy
    PROPERTIES(a)  READONLY objectClassName, numberObject, seriesObject, dateActOfStudy, timeActOfStudy, nameDepartmentStoreActOfStudy,
                            nameContractorDepartmentStoreActOfStudy, quantityStudyOutputDetailActOfStudy, retailSumStudyOutputDetailActOfStudy, quantityStudyInputDetailActOfStudy, retailSumStudyInputDetailActOfStudy

    PROPERTIES(a) READONLY FORCE PANEL timeCreated, nameUserCreated, hostnameComputerCreated, timeClosed, nameUserClosed, hostnameComputerClosed

    PROPERTIES (a)          ADDFORM, EDITFORM, delete FORCE PANEL DRAWTOTOOLBAR

    OBJECTS i = item
    PROPERTIES(i)      READONLY nameAttributeItem, shortNameUOMItem
    PROPERTIES(i, a)   READONLY quantityStudyInputDetailItemActOfStudy, retailSumStudyInputDetailItemActOfStudy, quantityStudyOutputDetailItemActOfStudy, retailSumStudyOutputDetailItemActOfStudy

    ORDER BY           retailSumStudyInputDetailItemActOfStudy, retailSumStudyOutputDetailItemActOfStudy
    FILTERS            quantityStudyInputDetailItemActOfStudy(i, a) OR quantityStudyOutputDetailItemActOfStudy(i, a)

    FILTERGROUP filters1
        FILTER 'Показать приход' 'F10' retailSumStudyOutputDetailItemActOfStudy(i, a)
        FILTER 'Показать расход' 'F9' retailSumStudyInputDetailItemActOfStudy(i, a)
;

DESIGN actOfStudies FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD a.box;
        ADD i.box;
    }

    PROPERTY(objectClassName) {
        preferredCharWidth = 25;
    }

    PROPERTY (delete(a)) {
        askConfirm = TRUE;
    }

    ADD a.historyGroup {
        childConstraints = TO THE BOTTOM;
    }

    ADD a.postedGroup {
        childConstraints = TO THE BOTTOM;
    }

    POSITION a.historyGroup TO THE LEFT a.postedGroup;

    ADD functions.box;
}

@Label.implementPriceTransactionDocument(actOfStudy);
@defineDocumentLabelTransaction(actOfStudy, item, departmentStore);
@extendFormDocumentLabelTransaction(actOfStudy, a, actOfStudy);

@Machinery.implementPriceTransactionDocument(actOfStudy);
@defineDocumentMachineryPriceTransaction(actOfStudy, item, departmentStore);
@extendFormDocumentMachineryPriceTransaction(actOfStudies, a, actOfStudy);

//----------------------------------- Форма для остатков -------------------------------------------------//

inChainStoresStoreTypeStoreDepartmentDepartment (chainStores, storeType, store, department, depStore) = UNION OVERRIDE
    department == depStore AND store  AND chainStores AND storeType,
    storeDepartmentStore(department) == store AND NOT depStore AND chainStores AND storeType,
    storeTypeDepartmentStore(department) == storeType AND NOT depStore AND chainStores AND NOT store,
    chainStoresDepartmentStore(department) == chainStores AND NOT store AND NOT storeType AND NOT depStore,
    department IS departmentStore AND NOT store AND NOT storeType AND NOT chainStores AND NOT depStore;

//------------------------------------Отчет по таре-------------------------------------------//

isContainerBatch 'Тара' (batch) = isContainerItem(skuBatch(batch));

costSumContainerStockDateFrom 'Остаток на начало по складу' (stock, dateFrom) = GROUP SUM costSumBatchStockDateFrom(batch, stock, dateFrom)
    IF isContainerItem(skuBatch(batch)) BY stock, dateFrom;

costSumContainerStockDateTo 'Остаток на конец по складу' (stock, dateTo) = GROUP SUM costSumBatchStockDateTo(batch, stock, dateTo)
    IF isContainerItem(skuBatch(batch)) BY stock, dateTo;

overMotionContainerBatchStockDateFromTo (batch, stock, dateFrom, dateTo) = UNION OVERRIDE
    balanceBBatchStockDate(batch, stock, dateFrom) AND dateTo AS DATE,
    balanceABatchStockDate(batch, stock, dateTo) AND dateFrom AS DATE,
    costInBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo),
    costOutBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo);

FORM sumMotionContainerDepartmentPrint 'Отчет по таре' PRINT

    OBJECTS params = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES objFrom = OBJVALUE(dFrom), objTo = OBJVALUE(dTo)

    OBJECTS dep = departmentStore  FIXED PANEL
    PROPERTIES(dep) SELECTOR name, nameStoreDepartmentStore, nameLegalEntityDepartmentStore

    OBJECTS bt=batch

    PROPERTIES READONLY costSumContainerStockDateFrom(dep, dFrom), costSumContainerStockDateTo(dep, dTo)
    PROPERTIES(bt) READONLY idBarcodeSkuBatch, nameSkuBatch, costBatch
    PROPERTIES(bt, dep, dFrom) READONLY balanceBBatchStockDate, costSumBatchStockDateFrom
    PROPERTIES(bt, dep, dTo) READONLY balanceABatchStockDate, costSumBatchStockDateTo
    PROPERTIES(bt, dep, dFrom, dTo) READONLY costInBalanceBatchStockDateFromTo, costSumInBalanceBatchStockDateFromTo,
               costOutBalanceBatchStockDateFromTo, costSumOutBalanceBatchStockDateFromTo

    FILTERS isPostedBatch(bt),
            isContainerBatch(bt),
            overMotionContainerBatchStockDateFromTo(bt, dep, dFrom, dTo)!=0
;



//------------------- Справочник норм естественной убыли----------------------------//

loadDefaultNaturalLossItemGroup 'Добавить нормы естественной убыли' = ACTION (string)  {
    ADDOBJ naturalLossItemGroup;
    FOR cg == addedObject() DO {
         SET name(cg) <- string AS STRING[110];
    }
}

loadDefaultSubNaturalLossItemGroup 'Добавить нормы естественной убыли' = ACTION (string, stringOne, stringTwo, numeric)  {
    ADDOBJ subNaturalLossItemGroup;
    FOR g == addedObject() DO {
        SET parentNaturalLossItemGroup(g) <- nameToNaturalLossItemGroup(string AS STRING[110]);
        SET name(g) <-  stringOne AS STRING[110];
        SET codeSubNaturalLossItemGroup(g) <- stringTwo AS STRING[3];

        ADDOBJ subNaturalLossItemGroupDetail;
        FOR d == addedObject() DO {
            SET subNaturalLossItemGroupSubNaturalLossItemGroupDetail(d) <- g AS subNaturalLossItemGroup;
            SET percentNaturalLossItemGroupDetail(d) <- numeric AS NUMERIC[10,5];
            SET dayFromNaturalLossItemGroupDetail(d) <- 1;
            SET monthFromNaturalLossItemGroupDetail(d) <- month.january AS month;
            SET dayToNaturalLossItemGroupDetail(d) <- 31;
            SET monthToNaturalLossItemGroupDetail(d) <- month.december AS month;
        }
    }
}

loadDefaultNaturalLossItemGroups 'Загрузить стандартные группы естественной убыли' = ACTION () {
    EXEC loadDefaultNaturalLossItemGroup('молоко разливное');
    EXEC loadDefaultNaturalLossItemGroup('молоко,сливки сух.,яич.порошок');
    EXEC loadDefaultNaturalLossItemGroup('мороженое вес. и проч.вес.мол.');
    EXEC loadDefaultNaturalLossItemGroup('КАРТОФЕЛЬ РАННИЙ');
    EXEC loadDefaultNaturalLossItemGroup('КАПУСТА БЕЛОКОЧАННАЯ СРЕДНЯЯ И ПОЗДНЯЯ, КРАСНОКОЧАННАЯ, САВОЙСКАЯ, КОЛЬРАБИ');
    EXEC loadDefaultNaturalLossItemGroup('КАПУСТА БЕЛОКОЧАННАЯ РАННЯЯ, ЦВЕТНАЯ, БРЮССЕЛЬСКАЯ');
    EXEC loadDefaultNaturalLossItemGroup('КОРНЕПЛОДЫ ОБРЕЗНЫЕ (СВЕКЛА, МОРКОВЬ, РЕДЬКА, ПЕТРУШКА, СЕЛЬДЕРЕЙ, ПАСТЕРНАК, ХРЕН И ДР.)');
    EXEC loadDefaultNaturalLossItemGroup('КОРНЕПЛОДЫ С ЗЕЛЕНЬЮ МОЛОДЫЕ');
    EXEC loadDefaultNaturalLossItemGroup('РЕДИС');
    EXEC loadDefaultNaturalLossItemGroup('ЗЕЛЕНЬ СВЕЖАЯ (САЛАТ, УКРОП, ШПИНАТ, И ДР.) БОБОВЫЕ (ГОРОХ-ЛАПАТОЧКИ, ФАСОЛЬ-СТРУЧКИ) И ПР ОВОЩИ');
    EXEC loadDefaultNaturalLossItemGroup('ЛУК ЗЕЛЕНЫЙ, ЛУК-ПОРЕЙ, ЧЕСНОК ЗЕЛЕНЫЙ');
    EXEC loadDefaultNaturalLossItemGroup('ЛУК РЕПЧАТЫЙ');
    EXEC loadDefaultNaturalLossItemGroup('ЧЕСНОК');
    EXEC loadDefaultNaturalLossItemGroup('КУКУРУЗА В ПОЧАТКАХ МОЛОЧНО-ВОСКОВОЙ СПЕЛОСТИ');
    EXEC loadDefaultNaturalLossItemGroup('ТОМАТЫ (КРАСНЫЕ, РОЗОВЫЕ, БУРЫЕ, МОЛОЧНЫЕ)');
    EXEC loadDefaultNaturalLossItemGroup('БАКЛАЖАНЫ, КАБАЧКИ, ПЕРЕЦ СЛАДКИЙ И ГОРЬКИЙ СТРУЧКОВЫЙ, ПАТИССОНЫ');
    EXEC loadDefaultNaturalLossItemGroup('БАХЧЕВЫЕ (АРБУЗЫ, ДЫНИ, ТЫКВА)');
    EXEC loadDefaultNaturalLossItemGroup('СЕМЕЧКОВЫЕ ПЛОДЫ (ЯБЛОКИ, ГРУШИ, АЙВА И ДР)');
    EXEC loadDefaultNaturalLossItemGroup('КОСТОЧКОВЫЕ ПЛОДЫ (ЧЕРЕШНИ, ВИШНИ, СЛИВЫ, АБРИКОСЫ, ПЕРСИКИ И ДР)');
    EXEC loadDefaultNaturalLossItemGroup('ГРАНАТЫ');
    EXEC loadDefaultNaturalLossItemGroup('МАЛИНА, ЗЕМЛЯНИКА И КЛУБНИКА');
    EXEC loadDefaultNaturalLossItemGroup('ВИНОГРАД, СМОРОДИНА, КРЫЖОВНИК');
    EXEC loadDefaultNaturalLossItemGroup('ДИКОРАСТУЩИЕ (КЛЮКВА, БРУСНИКА, ОБЛЕПИХА И ДР.) ЯГОДЫ');
    EXEC loadDefaultNaturalLossItemGroup('ГРИБЫ СВЕЖИЕ ВСЕХ ВИДОВ');
    EXEC loadDefaultNaturalLossItemGroup('МАНДАРИНЫ');
    EXEC loadDefaultNaturalLossItemGroup('АПЕЛЬСИНЫ');
    EXEC loadDefaultNaturalLossItemGroup('АНАНАСЫ');
    EXEC loadDefaultNaturalLossItemGroup('БАНАНЫ');
    EXEC loadDefaultNaturalLossItemGroup('ЛИМОНЫ');
    EXEC loadDefaultNaturalLossItemGroup('ГРЕЙПФРУТЫ');
    EXEC loadDefaultNaturalLossItemGroup('ПЛОДЫ, ОВОЩИ И ГРИБЫ ПЕРЕАБОТАННЫЕ. ФРУКТЫ СУШЕННЫЕ');
    EXEC loadDefaultNaturalLossItemGroup('ФРУКТЫ И ОВОЩИ ЗАМОРОЖЕННЫЕ');
    EXEC loadDefaultNaturalLossItemGroup('ОРЕХИ ВСЯКИЕ');
    EXEC loadDefaultNaturalLossItemGroup('ОВОЩИ ЗЕЛЕНЬ СУШЕНЫЕ');
    EXEC loadDefaultNaturalLossItemGroup('ОВОЩИ СОЛЕНЫЕ И КВАШЕНЫЕ');
    EXEC loadDefaultNaturalLossItemGroup('ГРИБЫ СУШЕННЫЕ');
    EXEC loadDefaultNaturalLossItemGroup('ГРИБЫ СОЛЕНЫЕ И МАРИНОВАННЫЕ');
    EXEC loadDefaultNaturalLossItemGroup('ТОМАТ-ПАСТА И ТОМАТ-ПЮРЕ');
    EXEC loadDefaultNaturalLossItemGroup('КАРТОФЕЛЬ ПОЗДНИЙ');
    EXEC loadDefaultNaturalLossItemGroup('ОГУРЦЫ ОТКРЫТОГО И ЗАКРЫТОГО ГРУНТА');
    EXEC loadDefaultNaturalLossItemGroup('ОВЕС И ЯЧМЕНЬ');
    EXEC loadDefaultNaturalLossItemGroup('ЖМЫХ И КОМБИКОРМ');
    EXEC loadDefaultNaturalLossItemGroup('ОТРУБИ И ДР.');
    EXEC loadDefaultNaturalLossItemGroup('КЕРОСИН ПРИ ПРОДАЖЕ ВЕСОВ');
    EXEC loadDefaultNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ');
    EXEC loadDefaultNaturalLossItemGroup('КОНДИТЕРСКИЕ ТОВАРЫ');
    EXEC loadDefaultNaturalLossItemGroup('МОЛОЧНЫЕ И ЖИРОВЫЕ ТОВАРЫ');
    EXEC loadDefaultNaturalLossItemGroup('МЯСО МОРОЖЕНОЕ');
    EXEC loadDefaultNaturalLossItemGroup('МЯСО ОХЛАЖДЕННОЕ');
    EXEC loadDefaultNaturalLossItemGroup('МЯСО ОХОЛЖДЕННОЕ');
    EXEC loadDefaultNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ');
    EXEC loadDefaultNaturalLossItemGroup('СУБПРОДУКТЫ');
    EXEC loadDefaultNaturalLossItemGroup('СЫРЫ');
    EXEC loadDefaultNaturalLossItemGroup('ХЛЕБОБУЛОЧНЫЕ ТОВАРЫ');
    EXEC loadDefaultSubNaturalLossItemGroup('молоко разливное','молоко разливное','05А',0.05);
    EXEC loadDefaultSubNaturalLossItemGroup('молоко,сливки сух.,яич.порошок','молоко,сливки сух.,яич.порошок','05Б',0.25);
    EXEC loadDefaultSubNaturalLossItemGroup('мороженое вес. и проч.вес.мол.','мороженое вес. и проч.вес.мол.','05В',0.3);
    EXEC loadDefaultSubNaturalLossItemGroup('КАРТОФЕЛЬ РАННИЙ','КАРТОФЕЛЬ РАННИЙ','101',0.68);
    EXEC loadDefaultSubNaturalLossItemGroup('КАПУСТА БЕЛОКОЧАННАЯ СРЕДНЯЯ И ПОЗДНЯЯ, КРАСНОКОЧАННАЯ, САВОЙСКАЯ, КОЛЬРАБИ','КАПУСТА БЕЛОКОЧАННАЯ СРЕДНЯЯ И ПОЗДНЯЯ, КРАСНОКОЧАННАЯ, САВОЙСКАЯ, КОЛЬРАБИ','102',0.63);
    EXEC loadDefaultSubNaturalLossItemGroup('КАПУСТА БЕЛОКОЧАННАЯ РАННЯЯ, ЦВЕТНАЯ, БРЮССЕЛЬСКАЯ','КАПУСТА БЕЛОКОЧАННАЯ РАННЯЯ, ЦВЕТНАЯ, БРЮССЕЛЬСКАЯ','103',0.82);
    EXEC loadDefaultSubNaturalLossItemGroup('КОРНЕПЛОДЫ ОБРЕЗНЫЕ (СВЕКЛА, МОРКОВЬ, РЕДЬКА, ПЕТРУШКА, СЕЛЬДЕРЕЙ, ПАСТЕРНАК, ХРЕН И ДР.)','КОРНЕПЛОДЫ ОБРЕЗНЫЕ (СВЕКЛА, МОРКОВЬ, РЕДЬКА, ПЕТРУШКА, СЕЛЬДЕРЕЙ, ПАСТЕРНАК, ХРЕН И ДР.)','104',0.69);
    EXEC loadDefaultSubNaturalLossItemGroup('КОРНЕПЛОДЫ С ЗЕЛЕНЬЮ МОЛОДЫЕ','КОРНЕПЛОДЫ С ЗЕЛЕНЬЮ МОЛОДЫЕ','105',1.03);
    EXEC loadDefaultSubNaturalLossItemGroup('РЕДИС','РЕДИС','106',0.81);
    EXEC loadDefaultSubNaturalLossItemGroup('ЗЕЛЕНЬ СВЕЖАЯ (САЛАТ, УКРОП, ШПИНАТ, И ДР.) БОБОВЫЕ (ГОРОХ-ЛАПАТОЧКИ, ФАСОЛЬ-СТРУЧКИ) И ПР ОВОЩИ','ЗЕЛЕНЬ СВЕЖАЯ (САЛАТ, УКРОП, ШПИНАТ, И ДР.) БОБОВЫЕ (ГОРОХ-ЛАПАТОЧКИ, ФАСОЛЬ-СТРУЧКИ) И ПР ОВОЩИ','107',1.41);
    EXEC loadDefaultSubNaturalLossItemGroup('ЛУК ЗЕЛЕНЫЙ, ЛУК-ПОРЕЙ, ЧЕСНОК ЗЕЛЕНЫЙ','ЛУК ЗЕЛЕНЫЙ, ЛУК-ПОРЕЙ, ЧЕСНОК ЗЕЛЕНЫЙ','108',0.99);
    EXEC loadDefaultSubNaturalLossItemGroup('ЛУК РЕПЧАТЫЙ','ЛУК РЕПЧАТЫЙ','109',0.46);
    EXEC loadDefaultSubNaturalLossItemGroup('ЧЕСНОК','ЧЕСНОК','110',0.49);
    EXEC loadDefaultSubNaturalLossItemGroup('КУКУРУЗА В ПОЧАТКАХ МОЛОЧНО-ВОСКОВОЙ СПЕЛОСТИ','КУКУРУЗА В ПОЧАТКАХ МОЛОЧНО-ВОСКОВОЙ СПЕЛОСТИ','111',0.67);
    EXEC loadDefaultSubNaturalLossItemGroup('ТОМАТЫ (КРАСНЫЕ, РОЗОВЫЕ, БУРЫЕ, МОЛОЧНЫЕ)','ТОМАТЫ (КРАСНЫЕ, РОЗОВЫЕ, БУРЫЕ, МОЛОЧНЫЕ)','113',0.64);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКЛАЖАНЫ, КАБАЧКИ, ПЕРЕЦ СЛАДКИЙ И ГОРЬКИЙ СТРУЧКОВЫЙ, ПАТИССОНЫ','БАКЛАЖАНЫ, КАБАЧКИ, ПЕРЕЦ СЛАДКИЙ И ГОРЬКИЙ СТРУЧКОВЫЙ, ПАТИССОНЫ','114',0.75);
    EXEC loadDefaultSubNaturalLossItemGroup('БАХЧЕВЫЕ (АРБУЗЫ, ДЫНИ, ТЫКВА)','БАХЧЕВЫЕ (АРБУЗЫ, ДЫНИ, ТЫКВА)','115',0.42);
    EXEC loadDefaultSubNaturalLossItemGroup('СЕМЕЧКОВЫЕ ПЛОДЫ (ЯБЛОКИ, ГРУШИ, АЙВА И ДР)','СЕМЕЧКОВЫЕ ПЛОДЫ (ЯБЛОКИ, ГРУШИ, АЙВА И ДР)','116',0.43);
    EXEC loadDefaultSubNaturalLossItemGroup('КОСТОЧКОВЫЕ ПЛОДЫ (ЧЕРЕШНИ, ВИШНИ, СЛИВЫ, АБРИКОСЫ, ПЕРСИКИ И ДР)','КОСТОЧКОВЫЕ ПЛОДЫ (ЧЕРЕШНИ, ВИШНИ, СЛИВЫ, АБРИКОСЫ, ПЕРСИКИ И ДР)','117',0.67);
    EXEC loadDefaultSubNaturalLossItemGroup('ГРАНАТЫ','ГРАНАТЫ','118',0.6);
    EXEC loadDefaultSubNaturalLossItemGroup('МАЛИНА, ЗЕМЛЯНИКА И КЛУБНИКА','МАЛИНА, ЗЕМЛЯНИКА И КЛУБНИКА','119',1.05);
    EXEC loadDefaultSubNaturalLossItemGroup('ВИНОГРАД, СМОРОДИНА, КРЫЖОВНИК','ВИНОГРАД, СМОРОДИНА, КРЫЖОВНИК','120',0.66);
    EXEC loadDefaultSubNaturalLossItemGroup('ДИКОРАСТУЩИЕ (КЛЮКВА, БРУСНИКА, ОБЛЕПИХА И ДР.) ЯГОДЫ','ДИКОРАСТУЩИЕ (КЛЮКВА, БРУСНИКА, ОБЛЕПИХА И ДР.) ЯГОДЫ','121',0.48);
    EXEC loadDefaultSubNaturalLossItemGroup('ГРИБЫ СВЕЖИЕ ВСЕХ ВИДОВ','ГРИБЫ СВЕЖИЕ ВСЕХ ВИДОВ','122',1.26);
    EXEC loadDefaultSubNaturalLossItemGroup('МАНДАРИНЫ','МАНДАРИНЫ','123',0.13);
    EXEC loadDefaultSubNaturalLossItemGroup('АПЕЛЬСИНЫ','АПЕЛЬСИНЫ','124',0.21);
    EXEC loadDefaultSubNaturalLossItemGroup('АНАНАСЫ','АНАНАСЫ','125',0.38);
    EXEC loadDefaultSubNaturalLossItemGroup('БАНАНЫ','БАНАНЫ','126',0.48);
    EXEC loadDefaultSubNaturalLossItemGroup('ЛИМОНЫ','ЛИМОНЫ','127',0.21);
    EXEC loadDefaultSubNaturalLossItemGroup('ГРЕЙПФРУТЫ','ГРЕЙПФРУТЫ','128',0.25);
    EXEC loadDefaultSubNaturalLossItemGroup('ПЛОДЫ, ОВОЩИ И ГРИБЫ ПЕРЕАБОТАННЫЕ. ФРУКТЫ СУШЕННЫЕ','ПЛОДЫ, ОВОЩИ И ГРИБЫ ПЕРЕАБОТАННЫЕ. ФРУКТЫ СУШЕННЫЕ','129',0.02);
    EXEC loadDefaultSubNaturalLossItemGroup('ФРУКТЫ И ОВОЩИ ЗАМОРОЖЕННЫЕ','ФРУКТЫ И ОВОЩИ ЗАМОРОЖЕННЫЕ','130',0.15);
    EXEC loadDefaultSubNaturalLossItemGroup('ОРЕХИ ВСЯКИЕ','ОРЕХИ ВСЯКИЕ','131',0.08);
    EXEC loadDefaultSubNaturalLossItemGroup('ОВОЩИ ЗЕЛЕНЬ СУШЕНЫЕ','ОВОЩИ ЗЕЛЕНЬ СУШЕНЫЕ','132',0.01);
    EXEC loadDefaultSubNaturalLossItemGroup('ОВОЩИ СОЛЕНЫЕ И КВАШЕНЫЕ','ОВОЩИ СОЛЕНЫЕ И КВАШЕНЫЕ','133',0.04);
    EXEC loadDefaultSubNaturalLossItemGroup('ГРИБЫ СУШЕННЫЕ','ГРИБЫ СУШЕННЫЕ','134',0.07);
    EXEC loadDefaultSubNaturalLossItemGroup('ГРИБЫ СОЛЕНЫЕ И МАРИНОВАННЫЕ','ГРИБЫ СОЛЕНЫЕ И МАРИНОВАННЫЕ','135',0.1);
    EXEC loadDefaultSubNaturalLossItemGroup('ТОМАТ-ПАСТА И ТОМАТ-ПЮРЕ','ТОМАТ-ПАСТА И ТОМАТ-ПЮРЕ','136',0.05);
    EXEC loadDefaultSubNaturalLossItemGroup('КАРТОФЕЛЬ ПОЗДНИЙ','КАРТОФЕЛЬ ПОЗДНИЙ','100',0.33);
    EXEC loadDefaultSubNaturalLossItemGroup('ОГУРЦЫ ОТКРЫТОГО И ЗАКРЫТОГО ГРУНТА','ОГУРЦЫ ОТКРЫТОГО И ЗАКРЫТОГО ГРУНТА','112',0.9);
    EXEC loadDefaultSubNaturalLossItemGroup('ОВЕС И ЯЧМЕНЬ','ОВЕС И ЯЧМЕНЬ','137',0.1);
    EXEC loadDefaultSubNaturalLossItemGroup('ЖМЫХ И КОМБИКОРМ','ЖМЫХ И КОМБИКОРМ','138',0.08);
    EXEC loadDefaultSubNaturalLossItemGroup('ОТРУБИ И ДР.','ОТРУБИ И ДР.','139',0.12);
    EXEC loadDefaultSubNaturalLossItemGroup('КЕРОСИН ПРИ ПРОДАЖЕ ВЕСОВ','КЕРОСИН ПРИ ПРОДАЖЕ ВЕСОВ','140',0.08);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ','крупа,включая зернобоб.и саго','080',0.14);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ','макаронные изделия','081',0.21);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ','мука и крахмал','082',0.14);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ','сахар-песок','083',0.08);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ','сахар рафинад','084',0.13);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ','сахарная пудра','085',0.21);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ','кофе в зернах','086',0.1);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ','соль поваренная','087',0.32);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ','дрожжи пресованные','088',0.39);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ','прочие весовые бакалейные т-ры','089',0.11);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ','соки и безалк.напитки в розлив','08А',0.04);
    EXEC loadDefaultSubNaturalLossItemGroup('КОНДИТЕРСКИЕ ТОВАРЫ','Карамель,ирис и драже','070',0.1);
    EXEC loadDefaultSubNaturalLossItemGroup('КОНДИТЕРСКИЕ ТОВАРЫ','конфеты глазированные','071',0.15);
    EXEC loadDefaultSubNaturalLossItemGroup('КОНДИТЕРСКИЕ ТОВАРЫ','конфеты неглазированные','072',0.26);
    EXEC loadDefaultSubNaturalLossItemGroup('КОНДИТЕРСКИЕ ТОВАРЫ','мармелад и пат','073',0.33);
    EXEC loadDefaultSubNaturalLossItemGroup('КОНДИТЕРСКИЕ ТОВАРЫ','пастила и зефир','074',0.46);
    EXEC loadDefaultSubNaturalLossItemGroup('КОНДИТЕРСКИЕ ТОВАРЫ','халва','075',0.55);
    EXEC loadDefaultSubNaturalLossItemGroup('КОНДИТЕРСКИЕ ТОВАРЫ','мед и повидло','076',0.45);
    EXEC loadDefaultSubNaturalLossItemGroup('КОНДИТЕРСКИЕ ТОВАРЫ','печенье,галеты и вафли','077',0.22);
    EXEC loadDefaultSubNaturalLossItemGroup('КОНДИТЕРСКИЕ ТОВАРЫ','пряники и коврижки','078',0.34);
    EXEC loadDefaultSubNaturalLossItemGroup('КОНДИТЕРСКИЕ ТОВАРЫ','прочие весовые кондитер. т-ры','079',0.15);
    EXEC loadDefaultSubNaturalLossItemGroup('МОЛОЧНЫЕ И ЖИРОВЫЕ ТОВАРЫ','масло коровье(слив.,топленое)','050',0.15);
    EXEC loadDefaultSubNaturalLossItemGroup('МОЛОЧНЫЕ И ЖИРОВЫЕ ТОВАРЫ','маргарин,жиры топл.и кулинар.','051',0.15);
    EXEC loadDefaultSubNaturalLossItemGroup('МОЛОЧНЫЕ И ЖИРОВЫЕ ТОВАРЫ','масло растител.(ручная продажа','052',0.25);
    EXEC loadDefaultSubNaturalLossItemGroup('МОЛОЧНЫЕ И ЖИРОВЫЕ ТОВАРЫ','сметана,творог,творож.масса','053',0.46);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО МОРОЖЕНОЕ','говядина,телятина,баранина','010',0.33);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО МОРОЖЕНОЕ','свинина','012',0.3);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО МОРОЖЕНОЕ','куры,кролики(кр/полим.пленки)','013',0.19);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО МОРОЖЕНОЕ','гуси,утки,индейки и др.','014',0.3);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО МОРОЖЕНОЕ','мясо птицы в полимер.пленке','015',0.05);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО МОРОЖЕНОЕ','мясо диких животных (кабана, медведя, лося, сайгака и др.)','016',0.47);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО ОХЛАЖДЕННОЕ','говядина,телятина,баранина','020',0.58);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО ОХЛАЖДЕННОЕ','свинина','021',0.51);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО ОХЛАЖДЕННОЕ','куры,цыплята-бройлеры,кролики','022',0.37);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО ОХЛАЖДЕННОЕ','гуси,утки,индейки','023',0.47);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО ОХЛАЖДЕННОЕ','мясо птицы в полимерной пленке','024',0.2);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО ОХОЛЖДЕННОЕ','мясо диких животных (кабана, медведя, лося, сайгака и др.)','025',0.64);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','рыба живая','040',0.1);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','рыба любая и мидии охлажд.','041',0.6);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','рыба,рыбн.товары морож.неглазир','042',0.27);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','рыба соленая в сухотарн.бочках','044',0.4);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','рыба лососев.,прод-мая нарезной','045',0.3);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','рыба(кроме осетр.) горяч.копчен','046',0.37);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','рыба и рыб.т-ры осетр.гор.копч.','047',0.3);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','рыба и рыбн.т-ры холод.копч.','048',0.35);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','балыч.изд.холод.копч.(б/нарезки','049',0.33);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','балыч.изд.холод.копч.(внарезку)','04А',0.28);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','рыбные т-ры сол.-суш.и вяленые','04Б',0.2);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','икра осетровых,лососевых,прочих','04В',0.18);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','кулинария(рыбная)','04Г',0.36);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','проч.вес.т-ры из морепродуктов','04Д',0.28);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','ноги','030',0.35);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','головы мороженые','031',0.35);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','головы охлажденные','032',0.54);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','прочие субпродукты мороженые','033',0.4);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','прочие субпродукты охлажденные','034',1.62);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','полуфабрикаты весовые','035',0.4);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','жир-сырец мороженый','036',0.16);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','кул-рия вес.(студни,пашт.мясо)','037',0.3);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','жир-сырец охлажденный','038',0.32);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','колбасы вареные','039',0.53);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','сосиски и сардельки','03А',0.75);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','колбасы полукопченые','03Б',0.32);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','колбасы варено-копченые','03В',0.36);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','колбасы сырокопченые','03Г',0.06);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','мясокопчености сырокопченые','03Д',0.25);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','мясокопчен.копч.-варен.копч.-за','03Е',0.48);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','мясокопч.вареные,запеченые,жарен','03Ж',0.59);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','шпик свиной и товары из шпика','03З',0.26);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','прочие весовые мясные товары','03И',0.3);
    EXEC loadDefaultSubNaturalLossItemGroup('СЫРЫ','в парафиновом покрытии','054',0.3);
    EXEC loadDefaultSubNaturalLossItemGroup('СЫРЫ','колбасный копченый плавленый','055',0.4);
    EXEC loadDefaultSubNaturalLossItemGroup('СЫРЫ','в полимерной пленке','056',0.4);
    EXEC loadDefaultSubNaturalLossItemGroup('СЫРЫ','в фольге или пергаменте','057',0.55);
    EXEC loadDefaultSubNaturalLossItemGroup('СЫРЫ','без покрытия(без рассола)','058',0.3);
    EXEC loadDefaultSubNaturalLossItemGroup('СЫРЫ','в рассоле(брынза и др.)','059',0.25);
    EXEC loadDefaultSubNaturalLossItemGroup('ХЛЕБОБУЛОЧНЫЕ ТОВАРЫ','хлеб печеный','060',0.5);
    EXEC loadDefaultSubNaturalLossItemGroup('ХЛЕБОБУЛОЧНЫЕ ТОВАРЫ','бараночные изделия','061',0.35);
    EXEC loadDefaultSubNaturalLossItemGroup('ХЛЕБОБУЛОЧНЫЕ ТОВАРЫ','сухари','062',0.3);
    EXEC loadDefaultSubNaturalLossItemGroup('ХЛЕБОБУЛОЧНЫЕ ТОВАРЫ','пироги и кулебяки','064',0.45);
    EXEC loadDefaultSubNaturalLossItemGroup('ХЛЕБОБУЛОЧНЫЕ ТОВАРЫ','лаваш и чурек','065',0.35);
    EXEC loadDefaultSubNaturalLossItemGroup('ХЛЕБОБУЛОЧНЫЕ ТОВАРЫ','прочие весовые хлебобул.товары','066',0.3);
} IN loadDefaultGroup;

@implementLoadDefaultData(loadDefaultNaturalLossItemGroups);

//---------------------------------------------- Генерация Z-отчета -------------------------------------------------//

generateZReport 'Сгенерировать Z-отчёт' = ACTION CUSTOM 'equ.srv.actions.GenerateZReport';
averageZReportCountGenerateZReport 'Среднее число Z-отчётов' = DATA INTEGER ();
averageReceiptCountGenerateZReport 'Среднее число чеков' = DATA INTEGER ();
averageReceiptDetailCountGenerateZReport 'Среднее число строк в чеке' = DATA INTEGER ();
dateFromGenerateZReport 'Дата (с)' = DATA DATETIME ();
dateToGenerateZReport 'Дата (по)' = DATA DATETIME ();

EXTEND FORM defaultData
    PROPERTIES()    generateZReport, averageZReportCountGenerateZReport, averageReceiptCountGenerateZReport, averageReceiptDetailCountGenerateZReport,
                    dateFromGenerateZReport, dateToGenerateZReport

;

EXTEND DESIGN defaultData {
    pane {
        NEW ZReport {
            title = 'Z-отчёт';
            childConstraints = TO THE BOTTOM;
            ADD PROPERTY(averageZReportCountGenerateZReport());
            ADD PROPERTY(averageReceiptCountGenerateZReport());
            ADD PROPERTY(averageReceiptDetailCountGenerateZReport());
            ADD PROPERTY(dateFromGenerateZReport());
            ADD PROPERTY(dateToGenerateZReport());
            ADD PROPERTY(generateZReport());
        }
    }
}
//---------------------------------------------- Импорт данных -----------------------------------------------------//

GROUP lstradeIntegrationGroup 'LS Trade' : baseGroup;

importLSTDataAction 'Импортировать данные (LS Trade)' = ACTION CUSTOM 'retail.ImportLSTDataActionProperty' IN lstradeIntegrationGroup;
importLSTDirectory 'Папка' = DATA STRING[200] () IN lstradeIntegrationGroup;
importInactive 'Импортировать в том числе неактивные' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importGroupItems 'Импортировать группы товаров' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importWares 'Импортировать посуду' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importItems 'Импортировать товары' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importNumberItems 'Кол-во' = DATA INTEGER () IN lstradeIntegrationGroup;
importNumberItemsAtATime 'Разбивать на пакеты по' = DATA INTEGER () IN lstradeIntegrationGroup;
importPrices 'Импортировать цены товаров' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importAssortment 'Импортировать ассортимент' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importUserInvoices 'Импортировать документы прихода' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importLegalEntities 'Импортировать организации' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importWarehouses 'Импортировать склады' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importStores 'Импортировать магазины' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importDepartmentStores 'Импортировать отделы магазина' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importBanks 'Импортировать банки' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importRateWastes 'Импортировать нормы отходов' = DATA BOOLEAN() IN lstradeIntegrationGroup;

EXTEND FORM integrationData
    PROPERTIES() importLSTDataAction, importLSTDirectory, importInactive, importGroupItems, importWares, importItems,
    importNumberItems, importNumberItemsAtATime, importPrices, importAssortment, importUserInvoices,
    importLegalEntities, importWarehouses, importStores, importDepartmentStores, importBanks, importRateWastes
;
EXTEND DESIGN integrationData {
    pane {
        NEW lstrade {
            title = 'LS Trade';
            ADD NOGROUP.lstradeIntegrationGroup;
        }
    }
}

GROUP formularGroup 'Formular' : baseGroup;

importDataAction 'Импортировать данные (Formular)' = ACTION CUSTOM 'retail.ImportDataActionProperty'IN formularGroup;
importUrl 'URL' = DATA STRING[200]() IN formularGroup;
importLogin 'Логин' = DATA STRING[200]() IN formularGroup;
importPassword 'Пароль' = DATA STRING[200]() IN formularGroup;

EXTEND FORM integrationData
    PROPERTIES() importDataAction, importUrl, importLogin, importPassword
;
EXTEND DESIGN integrationData {
    pane {
        NEW formular {
            title = 'Formular';
            ADD NOGROUP.formularGroup;
        }
    }
}

//---------------------------- Настройка навигатора ----------------------------------------//

WINDOW TOOLBAR mainToolbar 'Навигатор' HORIZONTAL HIDETITLE HIDESCROLLBARS POSITION(0, 0, 100, 6);
WINDOW TOOLBAR formsToolbar 'Формы' VERTICAL HIDETITLE POSITION (0, 6, 20, 64);
WINDOW TREE formsTree 'Формы' HIDETITLE POSITION (0, 6, 20, 64);

HIDE WINDOW System.relevantForms;
HIDE WINDOW System.relevantClassForms;

NAVIGATOR {

    baseElement TO mainToolbar;

    NEW catalogs 'Справочники' TO formsToolbar {
        NEW itemCatalog 'Товары' {
            ADD items;
            ADD itemGroups;
            ADD UOMs;
            ADD wares;
            ADD papers;
        }
        NEW contragents 'Контрагенты' {
            ADD legalEntities;
            ADD contractSkus;
        }
    }

    NEW purchase 'Управление закупками' TO formsToolbar {
        ADD purchasePurchaseNavigator;
        ADD purchaseReturnNavigator;
    }

    NEW warehouse 'Управление складом' TO formsToolbar {
        ADD inventoryNavigator {
            ADD naturalLosses;
            ADD naturalLossItemGroups;
        }
        ADD writeOffNavigator;

        NEW disparityDocuments 'Пересортица' {
            ADD disparities;
        }
        ADD stockCost;
        ADD stockBalance;
        NEW accountDocuments 'Бухгалтерские документы' {
            ADD sumAccountDocumentLedger;
            ADD sumMotionContainerDepartmentPrint;
        }
        NEW warehouseCatalog 'Справочники' {
            ADD warehouses;
        }
    }

    NEW sale 'Управление продажами' TO formsToolbar {
        ADD saleSaleNavigator;
        ADD saleReturnNavigator;
        ADD salesNavigator;
        ADD statisticsNavigator;
    }

    NEW retail 'Розничная торговля' TO formsToolbar {
        ADD POSNavigator;
        NEW priceAccount 'Учет в розничных ценах' {
            ADD pricings;
            ADD repricings;
            ADD pricingCommitteeDialog;
            ADD repricingCommitteeDialog;
        }
        ADD retailCRMNavigator;
        NEW retailCatalog 'Справочники' {
            ADD stores;
        }
    }

    ADD priceListNavigator TO formsToolbar {
        ADD priceIntervals;
    }

    NEW transport 'Управление транспортом' TO formsToolbar {
        ADD marks;
        ADD trucks;
        ADD drivers;
        ADD routes;
        ADD trips;
    }

    ADD machineryNavigator TO formsToolbar;

    NEW finance 'Финансы' TO formsToolbar {
        ADD contractNavigator;
        NEW financeCatalog 'Справочники' {
            ADD banks;
            ADD taxes;
        }
    }

    NEW manufactory 'Производство' TO formsToolbar {
        ADD actOfStudies;
        ADD cuttings;
    }
    NEW hr 'Кадры' TO formsToolbar {
        ADD employees;
    }

    ADD accountElement TO formsToolbar;
    ADD adminElement TO formsTree;
}

