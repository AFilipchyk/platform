MODULE retail;

// Кол-ва - NUMERIC[14,3]
// Цены - NUMERIC[14,2]
// Суммы - NUMERIC[16,2]
// Ставка налога - NUMERIC[10,5]
// Надбавка - NUMERIC[8,3]
// Норма списания отходов - NUMERIC[10,3]

REQUIRE System,
        EvalScript,
        Utils,
        Hierarchy,
        Historizable,
        Numerator,
        Stock,
        Barcode,
        Document,
        Tax,
        Ware,
        Country,
        LegalEntityBy,
        OrderBy,
        SaleOrderBy,
        Agreement,
        Order,
        BlanketOrder,
        Invoice,
        Shipment,
        CreditNote,
        SaleOrder,
        SaleBlanketOrder,
        SaleInvoice,
        SaleShipment,
        SaleCreditNote,
        SaleReturnOrder,
        SaleReturnInvoice,
        SaleReturnShipment,
        SaleReturnCreditNote,
        Sale,
        Purchase,
        PurchaseOrder,
        PurchaseInvoice,
        PurchaseShipment,
        PurchaseCreditNote,
        PurchaseReturnOrder,
        PurchaseReturnInvoice,
        PurchaseReturnShipment,
        PurchaseReturnCreditNote,
        PurchaseWriteOffBy,
        SalePurchase,
        Repricing,
        Employee,
        StockAdjustment,
        ShipmentStore,
        PurchaseWriteOffStore,
        Store,
        Statistics,
        StatisticsItem,
        NaturalLossItem,
        StatisticsStore,
        ConsignmentBy,
        StockDocumentBy,
        StockDocumentWarehouse,
        StockDocumentStore,
        ContainerMovementBy,
        Sales,
        Supply,
        Machinery,
        CashRegister,
        Scales,
        StockReserve,
        PriceChecker,
        WriteOffBy,
        Terminal,
        Label,
        RetailCRM,
        CashOperationBy,
        POS,
        BOM,
        StockContract,
        ContractLedger,
        InventoryBy,
        DefaultData,
        Item,
        WareItem,
        ItemSize,
        ItemArticle,
        WriteOffItem,
        PurchaseItem,
        SaleItem,
        PriceList,
        Transport,
        Route,
        TripInvoiceBy,
        Warehouse,
        ShipmentWarehouse,
        StockTax,
        Disparity,
        NaturalLossBy,
        WarePriceList,
        ScheduleOrder,
        SaleScheduleOrder,
        PurchaseScheduleOrder;

// ----------------------------------- Товарный классификатор ------------------------------------------ //

EXTEND CLASS itemGroup : roundGroup;
roundGroupSku(sku) += itemGroupItem(sku);

EXTEND CLASS itemGroup : discountSkuGroup;
inDiscountSkuGroupSku(discountSkuGroup, sku) += itemGroupItem(sku) == discountSkuGroup;

//------------------------------------ Товар для подразделения с историей -------------------------------------------//

TABLE itemDepartmentStore (item, departmentStore);
TABLE itemDepartmentStoreDate (item, departmentStore, DATE);

GROUP labelGroup 'Ценник' : public;

defaultLabelTypeItemDepartmentStore(item, departmentStore) = defaultLabelTypeDepartmentStore(departmentStore) AND item IS item;
@defineHistorizableCustomDefault(labelItemDepartmentStore, defaultLabelTypeItemDepartmentStore, 'Ценник', labelType, name, item, nameAttributeItem, departmentStore, name, 10, labelGroup);
labelBarcodeDepartmentStoreDate (barcode, departmentStore, date) = labelItemDepartmentStoreDate(skuBarcode(barcode), departmentStore, date);

CONSTRAINT dataLabelItemDepartmentStoreDate(item, departmentStore, date) AND NOT inLabelTypeDepartmentStore(dataLabelItemDepartmentStoreDate(item, departmentStore, date), departmentStore)
    CHECKED BY dataLabelItemDepartmentStoreDate MESSAGE 'Тип ценника запрещен для выбранного отдела магазина';

@defineHistorizable(multiplierItemDepartmentStore, 'Множитель', INTEGER, item, nameAttributeItem, departmentStore, name, labelGroup);
valOverMultiplierItemDepartmentStoreDate (item, departmentStore, date) = UNION OVERRIDE 1 IF item IS item AND departmentStore IS departmentStore AND date IS DATE,
                                                                               multiplierItemDepartmentStoreDate(item, departmentStore, date);
valOverMultiplierBarcodeDepartmentDate (barcode, departmentStore, date) = valOverMultiplierItemDepartmentStoreDate(skuBarcode(barcode), departmentStore, date);

labelTypeBarcodeDepartmentStoreDate (barcode, departmentStore, date) += labelBarcodeDepartmentStoreDate(barcode, departmentStore, date);
countLabelBarcodeDepartmentStoreDate (barcode, departmentStore, date) += valOverMultiplierBarcodeDepartmentDate(barcode, departmentStore, date);

EXTEND FORM item

    // Управленческие параметры
    TREE treeStore a=STRING[3], t=chainStores, st=storeType, s=store
    PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS stringEqualsAll(a), inChainStoresStoreType (t, st), inStoreTypeStore (st, s)

    OBJECTS dt=DATE FIXED PANEL, d=departmentStore
    PROPERTIES (d) name
    FILTERS inChainStoresStoreTypeStoreDepartmentStore(t, st, s, d)

    PROPERTIES (dt) OBJVALUE BACKGROUND dateDiffersCurrent(dt)
    PROPERTIES      overNameLabelItemDepartmentStoreDate(i, d, dt) BACKGROUND dataLabelItemDepartmentStoreDate(i, d, dt), overDialogLabelItemDepartmentStoreDate(i, d),
                    overMultiplierItemDepartmentStoreDate(i, d, dt) BACKGROUND dataMultiplierItemDepartmentStoreDate(i, d, dt), overDialogMultiplierItemDepartmentStoreDate(i, d)
;
@extendFormFilterStockAccess(departmentStore, d, item);
@extendFormFilterStockGroupAccess(chainStores, t, item, accessEmployeeEmployeeDivisionGroup);
@extendFormFilterStockGroupAccess(storeType, st, item, accessEmployeeEmployeeDivisionGroup);
@extendFormFilterStockGroupAccess(store, s, item, accessEmployeeEmployeeDivisionGroup);

EXTEND DESIGN item {
    itemDetail {
        ADD d.box AFTER itemPrimary {
            title = 'Управленческие параметры';

            fillVertical = 1.0;
            fillHorizontal = 1.0;
            ADD dt.box BEFORE d.grid.box;
            ADD treeStore.tree.box BEFORE d.grid.box;
            POSITION treeStore.tree.box TO THE LEFT d.grid.box;
            POSITION d.grid.box TO THE LEFT d.panel;
            d.grid.box {
                fillHorizontal = 3;
            }
        }
    }
}

overCopyItem(s, d) += ACTION (s, d) {
    FOR dataLabelItemDepartmentStoreDate(s, ds, dt) DO {
        SET dateLabelItemDepartmentStoreDate(d, ds, dt) <- dataLabelItemDepartmentStoreDate(s, ds, dt) IF ds IS departmentStore AND dt IS DATE;
    }

    FOR dataMultiplierItemDepartmentStoreDate(s, ds, dt) DO {
        SET dataMultiplierItemDepartmentStoreDate(d, ds, dt) <- dataMultiplierItemDepartmentStoreDate(s, ds, dt) IF ds IS departmentStore AND dt IS DATE;
    }
}

nameManufacturerItemBarcode = nameManufacturerItem(skuBarcode(barcode));
@defineLabelTransactionAttribute(manufacturer, 'Производитель', STRING[255], nameManufacturerItem);

//---------------------------------------------- Генерация Z-отчета -------------------------------------------------//

generateZReport 'Сгенерировать Z-отчёт' = ACTION CUSTOM 'equ.srv.actions.GenerateZReport';
averageZReportCountGenerateZReport 'Среднее число Z-отчётов' = DATA INTEGER ();
averageReceiptCountGenerateZReport 'Среднее число чеков' = DATA INTEGER ();
averageReceiptDetailCountGenerateZReport 'Среднее число строк в чеке' = DATA INTEGER ();
dateFromGenerateZReport 'Дата (с)' = DATA DATETIME ();
dateToGenerateZReport 'Дата (по)' = DATA DATETIME ();

EXTEND FORM defaultData
    PROPERTIES()    generateZReport, averageZReportCountGenerateZReport, averageReceiptCountGenerateZReport, averageReceiptDetailCountGenerateZReport,
                    dateFromGenerateZReport, dateToGenerateZReport

;

EXTEND DESIGN defaultData {
    pane {
        NEW ZReport {
            title = 'Z-отчёт';
            childConstraints = TO THE BOTTOM;
            ADD PROPERTY(averageZReportCountGenerateZReport());
            ADD PROPERTY(averageReceiptCountGenerateZReport());
            ADD PROPERTY(averageReceiptDetailCountGenerateZReport());
            ADD PROPERTY(dateFromGenerateZReport());
            ADD PROPERTY(dateToGenerateZReport());
            ADD PROPERTY(generateZReport());
        }
    }
}
//---------------------------------------------- Импорт данных -----------------------------------------------------//

GROUP lstradeIntegrationGroup 'LS Trade' : public;

importLSTDataAction 'Импортировать данные (LS Trade)' = ACTION CUSTOM 'retail.ImportLSTDataActionProperty' IN lstradeIntegrationGroup;
importLSTDirectory 'Папка' = DATA STRING[200] () IN lstradeIntegrationGroup;
importInactive 'Импортировать в том числе неактивные' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importGroupItems 'Импортировать группы товаров' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importWares 'Импортировать посуду' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importItems 'Импортировать товары' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importNumberItems 'Кол-во' = DATA INTEGER () IN lstradeIntegrationGroup;
importNumberItemsAtATime 'Разбивать на пакеты по' = DATA INTEGER () IN lstradeIntegrationGroup;
importPrices 'Импортировать цены товаров' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importAssortment 'Импортировать ассортимент' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importUserInvoices 'Импортировать документы прихода' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importLegalEntities 'Импортировать организации' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importWarehouses 'Импортировать склады' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importStores 'Импортировать магазины' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importDepartmentStores 'Импортировать отделы магазина' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importBanks 'Импортировать банки' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importRateWastes 'Импортировать нормы отходов' = DATA BOOLEAN() IN lstradeIntegrationGroup;

EXTEND FORM integrationData
    PROPERTIES() importLSTDataAction, importLSTDirectory, importInactive, importGroupItems, importWares, importItems,
    importNumberItems, importNumberItemsAtATime, importPrices, importAssortment, importUserInvoices,
    importLegalEntities, importWarehouses, importStores, importDepartmentStores, importBanks, importRateWastes
;
EXTEND DESIGN integrationData {
    pane {
        NEW lstrade {
            title = 'LS Trade';
            ADD NOGROUP.lstradeIntegrationGroup;
        }
    }
}

GROUP formularGroup 'Formular' : public;

importDataAction 'Импортировать данные (Formular)' = ACTION CUSTOM 'retail.ImportDataActionProperty'IN formularGroup;
importUrl 'URL' = DATA STRING[200]() IN formularGroup;
importLogin 'Логин' = DATA STRING[200]() IN formularGroup;
importPassword 'Пароль' = DATA STRING[200]() IN formularGroup;

EXTEND FORM integrationData
    PROPERTIES() importDataAction, importUrl, importLogin, importPassword
;
EXTEND DESIGN integrationData {
    pane {
        NEW formular {
            title = 'Formular';
            ADD NOGROUP.formularGroup;
        }
    }
}

//---------------------------- Настройка навигатора ----------------------------------------//

NAVIGATOR {

    NEW purchase 'Закупки' TO toolbar {
        ADD purchasePurchaseNavigator;
        ADD purchaseReturnNavigator;
        ADD supplyNavigator;
        ADD stockReserveNavigator;
    }

    NEW warehouse 'Склад' TO toolbar {
        ADD inventoryNavigator;
        ADD naturalLossNavigator;
        ADD writeOffNavigator;
        ADD adjustmentNavigator;
        ADD disparityNavigator;

        ADD balanceSku;
        ADD balanceBatch;
        ADD stockCost;
        NEW stockDocuments 'Бухгалтерские документы' {
            ADD sumStockDocumentLedger;
            ADD containerMovement;
        }
        NEW warehouseCatalog 'Справочники' {
            ADD warehouses;
        }
    }

    NEW sale 'Продажи' TO toolbar {
        ADD saleSaleNavigator;
        ADD saleReturnNavigator;
        ADD salesNavigator;
        ADD statisticsNavigator;
    }

    NEW retail 'Розничная торговля' TO toolbar {
        ADD POSNavigator;
        NEW priceAccount 'Учет в розничных ценах' {
            ADD pricings;
            ADD repricings;
            ADD pricingCommitteeDialog;
            ADD repricingCommitteeDialog;
        }
        ADD retailCRMNavigator;
        NEW retailCatalog 'Справочники' {
            ADD stores;
        }
    }

    ADD manufacturingNavigator TO toolbar;
    ADD priceListNavigator TO toolbar;
    ADD transportNavigator TO toolbar;
    ADD machineryNavigator TO toolbar;

    NEW finance 'Финансы' TO toolbar {
        ADD contractNavigator;
        NEW financeCatalog 'Справочники' {
            ADD banks;
            ADD taxes;
        }
    }

    NEW hr 'Кадры' TO toolbar {
        ADD employees;
    }

    ADD masterData {
         NEW itemMasterData 'Товары' BEFORE regionalData {
             ADD items;
             ADD itemGroups;
             ADD UOMs;
             ADD wares;
         }
         NEW contragents 'Контрагенты' AFTER itemMasterData {
             ADD legalEntities;
             ADD contractSkus;
         }
    }
    ADD administration;
    ADD account;
}

