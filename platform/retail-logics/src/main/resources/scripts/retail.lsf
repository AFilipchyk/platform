MODULE retail;

// Кол-ва - NUMERIC[14,3]
// Цены - NUMERIC[14,2]
// Суммы - NUMERIC[16,2]
// Ставка налога - NUMERIC[10,5]
// Надбавка - NUMERIC[8,3]
// Норма списания отходов - NUMERIC[10,3]

REQUIRE System,
        EvalScript,
        Utils,
        Hierarchy,
        Historizable,
        Numerator,
        Stock,
        Barcode,
        Document,
        Tax,
        Ware,
        Country,
        LegalEntityBy,
        Agreement,
        Order,
        BlanketOrder,
        Invoice,
        Shipment,
        CreditNote,
        SaleOrder,
        SaleBlanketOrder,
        SaleInvoice,
        SaleShipment,
        SaleCreditNote,
        SaleReturnOrder,
        SaleReturnInvoice,
        SaleReturnShipment,
        SaleReturnCreditNote,
        SalePricing,
        Sale,
        Purchase,
        PurchaseOrder,
        PurchaseInvoice,
        PurchaseShipment,
        PurchaseCreditNote,
        PurchaseReturnOrder,
        PurchaseReturnInvoice,
        PurchaseReturnShipment,
        PurchaseReturnCreditNote,
        PurchaseReturnPricing,
        PurchaseWriteOff,
        PurchaseSaleShipment,
        PurchaseSaleInvoice,
        PurchaseSaleOrder,
        SalePurchase,
        Repricing,
        Employee,
        StoreShipment,
        StoreWriteOff,
        Store,
        PurchasePricingWriteOff,
        ListRegister,
        SupplierBy,
        ConsignmentBy,
        AccountDocument,
        StorePrice,
        Sales,
        PriceChange,
        Machinery,
        CashRegister,
        Scales,
        PriceChecker,
        WriteOff,
        Terminal,
        Label,
        Default,
        RetailCRM,
        CashOperation,
        POS,
        ContractStock,
        ContractLedger,
        Inventory,
        DefaultData,
        Item,
        ItemWare,
        ItemSize,
        ItemArticle,
        ItemWriteOff,
        PriceList,
        Transport,
        Route,
        Trip,
        Warehouse,
        StockTax,
        ItemTax;

GROUP emailGroup 'E-mail' : baseGroup;

// ----------------------------------- Свойства изменения объектов в Posted ------------------------------------------ //

GROUP itemDetailGroup 'Товар' : publicGroup;

META defineDocumentDetailSkuItemPrefix (object, prefix, caption)
    @defineDocumentDetailSkuPrefix(object, item, prefix, caption);

    prefix###nameAttributeItem###object##Detail 'Товар'###caption (detail) =
        nameAttributeItem(prefix###item###object##Detail(detail)) IN itemDetailGroup;

    prefix###shortNameUOMItem###object##Detail 'Ед. изм.'###caption (detail) =
        shortNameUOMItem(prefix###item###object##Detail(detail)) IN itemDetailGroup;

    prefix###articleItem###object##Detail 'Артикул'###caption (detail) = articleItem(prefix###item###object##Detail(detail)) IN itemDetailGroup;

    prefix###nameCountryItem###object##Detail 'Страна'###caption (detail) = nameCountryItem(prefix###item###object##Detail(detail)) IN itemDetailGroup;

    prefix###inWare###object##Detail 'Товар в посуде'###caption (detail) = inWareItem(prefix###item###object##Detail(detail)) IN itemDetailGroup;

    prefix###controlExpiryItem###object##Detail 'Контролировать сроки годности товара?'###caption (detail) =
        controlExpiryItem (prefix###item###object##Detail(detail)) IN itemDetailGroup;

    prefix###isWeightItem###object##Detail 'Весовой товар?'###caption (detail) = isWeightItem(prefix###item###object##Detail(detail)) IN itemDetailGroup;
END

META defineDocumentDetailSkuItem (object)
    @defineDocumentDetailSkuItemPrefix(object, , );
END

META defineDocumentHeaderItemRetailSumCustomPrefix (object, detail, prefix, caption)
    prefix###retailSum###detail##Item###object 'Розничная сумма (окр.) товара в документе' (item, object) =
            GROUP SUM retailSum###detail(idetail)
                  BY  item###detail(idetail),
                      object###detail(idetail);

    prefix###retailSumItem###detail###object 'Розничная сумма (окр.), товар'###caption (idetail) =
        GROUP SUM prefix###retailSum###detail(idetail) AND NOT isContainerItem(item###detail(idetail))
            BY object###detail(idetail) IN documentSumGroup;
    prefix###retailSumContainer###detail###object 'Розничная сумма (окр.), тара'###caption (idetail) =
        GROUP SUM prefix###retailSum###detail(idetail) IF isContainerItem(item###detail(idetail))
            BY object###detail(idetail) IN documentSumGroup;
END
META defineDocumentHeaderItemRetailSumCustom (object, detail)
    @defineDocumentHeaderItemRetailSumCustomPrefix(object, detail, , );
END
META defineDocumentHeaderItemRetailSumPrefix (object, prefix, caption)
    @defineDocumentHeaderItemRetailSumCustomPrefix(object, object##Detail, prefix, caption);
END
META defineDocumentHeaderItemRetailSum (object)
    @defineDocumentHeaderItemRetailSumCustomPrefix(object, object##Detail, , );
END

// ----------------------------------- Поставщик ------------------------------------------ //

META defineDocumentHeaderSupplierContractDepartmentStore(object)
    @defineDocumentHeaderSupplierContract(object);
    @defineDocumentUNPSupplier(object);

    contract###object (object) <- singleContractSkuSupplierCustomer(supplier###object(object), legalEntityDepartmentStore(departmentStore###object(object)))
                                  WHEN CHANGED(supplier###object(object));
    CONSTRAINT contract###object(object) AND NOT legalEntityDepartmentStore(departmentStore###object(object)) == customerContractSku(contract###object(object))
        CHECKED BY contract###object MESSAGE 'Выберите договор данного юр. лица';
END

// ----------------------------------- Товарный классификатор ------------------------------------------ //

EXTEND CLASS itemGroup : roundGroup;
roundGroupSku(sku) += itemGroupItem(sku);

EXTEND CLASS itemGroup : discountSkuGroup;
inDiscountSkuGroupSku(discountSkuGroup, sku) += itemGroupItem(sku) == discountSkuGroup;

pieceNumeratorItemGroup = DATA numerator (itemGroup);
namePieceNumeratorItemGroup 'Нумератор штрих-кодов (для штучного товара)' (itemGroup) = name(pieceNumeratorItemGroup(itemGroup));

weightNumeratorItemGroup = DATA numerator (itemGroup);
nameWeightNumeratorItemGroup 'Нумератор штрих-кодов (для весового товара)' (itemGroup) = name(weightNumeratorItemGroup(itemGroup));

EXTEND FORM itemGroup
    PROPERTIES(g) namePieceNumeratorItemGroup, nameWeightNumeratorItemGroup
;

EXTEND FORM itemGroups
    PROPERTIES(g) BEFORE delete namePieceNumeratorItemGroup, nameWeightNumeratorItemGroup
;
// формы за формами товара

// ----------------------------------- Статистический классификатор ------------------------------------------ //

CLASS statisticGroup 'Статистическая группа' : named, externalObject;
TABLE statisticGroup(statisticGroup);
TABLE statisticGroupStatisticGroup (statisticGroup, statisticGroup);

CLASS STATIC groupStatic 'Ед. изм.' {
    liter 'Литр',
    thing 'Штука',
    pounds 'Килограмм',
    ruble 'Рубль'
};

parentStatisticGroup = DATA statisticGroup (statisticGroup);
nameParentStatisticGroup 'Родительская группа' (statisticGroup) = name(parentStatisticGroup(statisticGroup));

inParentStatisticGroupStatisticGroup (child, parent) = parentStatisticGroup(child) == parent;


childNumberStatisticGroup 'Кол-во непосредственных потомков' (statisticGroup) = GROUP SUM 1 BY parentStatisticGroup(group) PERSISTENT;

isLeafStatisticGroup 'Лист' (statisticGroup) = statisticGroup IS statisticGroup AND NOT childNumberStatisticGroup(statisticGroup) PERSISTENT;

hasParentStatisticGroupLevel 'Уровень' (child, parent) = RECURSION 1l AND child IS statisticGroup AND parent == child
                                                                  STEP 2l AND parent == parentStatisticGroup($parent) PERSISTENT;
TABLE statisticGroupStructure(statisticGroup, statisticGroup, LONG);

hasParentStatisticGroup 'Уровень' (child, parent) = TRUE AND hasParentStatisticGroupLevel(child, parent);

hasParentAndLeafStatisticGroup (child, parent) = hasParentStatisticGroup(child, parent) AND isLeafStatisticGroup(child);

unitMeasureStatisticGroup 'Ед. изм. ИД' (statisticGroup) = DATA groupStatic (statisticGroup) IN idGroup;
nameUOMStatisticGroup 'Ед. изм.' (statisticGroup) = name(unitMeasureStatisticGroup(statisticGroup)) MINCHARWIDTH 12 MAXCHARWIDTH 12 PREFCHARWIDTH 12;

sidStatisticGroup 'Код группы по ОКРБ 007-2007' (statisticGroup) = DATA STRING[12] (statisticGroup)  MINCHARWIDTH 12 MAXCHARWIDTH 12 PREFCHARWIDTH 12;
conversionFactorStatisticGroup 'Коэффициент перевода' (statisticGroup) = DATA NUMERIC[14,5] (statisticGroup);
canonicalNameStatisticGroup 'Каноническое имя' (statisticGroup) = castToString255(
                           [GROUP CONCAT name(parent), ' / ' BY child ORDER DESC hasParentStatisticGroupLevel(child, parent)](statisticGroup))
                           MINCHARWIDTH 50 MAXCHARWIDTH 100 PREFCHARWIDTH 100 PERSISTENT;

canonicalNumberStatisticGroup 'Каноническое код' (statisticGroup) = castToString255(
                           [GROUP CONCAT sidStatisticGroup(parent), ' / ' BY child ORDER DESC hasParentStatisticGroupLevel(child, parent)](statisticGroup))
                           MINCHARWIDTH 50 MAXCHARWIDTH 100 PREFCHARWIDTH 100 PERSISTENT;

canonicalNumberNameStatisticGroup 'Канонический код-название' (statisticGroup) = [FORMULA STRING[100] '$1 || \' / \' || $2'](
    canonicalNumberStatisticGroup(statisticGroup), name(statisticGroup));

sidToStatisticGroup(sid) = GROUP UNIQUE statisticGroup BY sidStatisticGroup(statisticGroup);

FORM statisticGroup 'Статистическая группа'
    OBJECTS g=statisticGroup FIXED PANEL
    PROPERTIES(g)   name, nameParentStatisticGroup, sidStatisticGroup, nameUOMStatisticGroup,
                    conversionFactorStatisticGroup

    EDIT statisticGroup OBJECT g
;

addStatisticGroup 'Добавить' = ACTION (statisticGroup) NEWSESSION {
    ADDOBJ statisticGroup;
    FOR g == addedObject() DO {
        SET parentStatisticGroup(g) <- statisticGroup AS statisticGroup;
        FORM statisticGroup OBJECTS g=addedObject() MODAL;
        IF formResult() == formResult.ok THEN
            EXEC apply();
    };
} TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

FORM statisticGroups 'Статистические группы'
    TREE treeGroups g=statisticGroup PARENT parentStatisticGroup
    PROPERTIES READONLY name(g), sidStatisticGroup(g)
    PROPERTIES(g)       addStatisticGroup, EDITFORM
    ORDER BY sidStatisticGroup

    OBJECTS cg=statisticGroup
    PROPERTIES(cg)     READONLY canonicalNumberNameStatisticGroup, sidStatisticGroup, nameUOMStatisticGroup,
                       conversionFactorStatisticGroup
PROPERTIES(cg)  delete

    ORDER BY canonicalNumberNameStatisticGroup

    FILTERGROUP filters
        FILTER 'Все листья' 'F10' hasParentAndLeafStatisticGroup(cg, g) DEFAULT
        FILTER 'Всех потомков' 'F9' hasParentStatisticGroup(cg, g)
        FILTER 'Только непосредственных потомков' 'F8' inParentStatisticGroupStatisticGroup(cg, g)
;

DESIGN statisticGroups FROM DEFAULT {

    NEW topContainer{
        childConstraints = TO THE RIGHT;
        type = SPLITH;

        ADD treeGroups.tree.box;

        ADD cg.box{
            fillHorizontal = 4;
        }
    }

    ADD functions.box;
}

FORM statisticGroupDialog 'Статистические группы'
    TREE treeGroups g=statisticGroup PARENT parentStatisticGroup
    PROPERTIES(g) READONLY name, sidStatisticGroup
    PROPERTIES(g) addStatisticGroup, EDITFORM
    ORDER BY sidStatisticGroup

    DIALOG statisticGroup OBJECT g
;

// ----------------------------------- Товар ------------------------------------------ //
GROUP rateGroup 'Нормы' : publicGroup;
GROUP expiryGroup 'Контроль сроков годности' : publicGroup;
GROUP equipmentGroup 'Внешние устройства' : publicGroup;
GROUP labelGroup 'Ценник' : publicGroup;

GROUP activeGroup 'Активность товара' : publicGroup;

tmpSku() = SESSION DATA sku ();

//-----------------------------------------------------------------------------------------------//

statisticGroupSku = DATA statisticGroup(sku) IN idGroup AUTOSET;
nameStatisticGroupSku 'Статистическая группа' (sku) = name(statisticGroupSku(sku)) IN rateGroup;

TABLE statisticGroupSku (statisticGroup, sku);

hasParentStatisticGroupSku (statisticGroup, sku) = hasParentStatisticGroup(statisticGroupSku(sku), statisticGroup) PERSISTENT;

isContainerItem 'Тара' = DATA BOOLEAN (item) IN itemBaseGroup;
isContainerSku (sku) += isContainerItem(sku);
//@defineItemAttribute(Container, 'Показывать явл-ся ли тарой', displayGroup);

//equipmentGroup
isWeightItem 'Весовой товар' = DATA BOOLEAN (item) IN itemBaseGroup;
compositionScalesItem 'Состав товара (ингредиенты) для весов' = DATA TEXT (item) IN equipmentGroup;
isMarkItem 'Маркировать товар' = DATA BOOLEAN (item) IN equipmentGroup;
isLoafCutItem 'Буханка разрезается' = DATA BOOLEAN (item) IN equipmentGroup;

passScalesItem 'Передавать на весы' = DATA BOOLEAN (item) IN equipmentGroup;
labelFormatPackItem = DATA labelFormat(item);
idLabelFormatPackItem 'Код формата этикетки' (item) = idLabelFormat(labelFormatPackItem(item)) IN equipmentGroup;

//substanceGroup
GROUP substanceGroup 'Энергетическая ценность' : publicGroup;
nutritionalValueItem 'Энергетическая и пищевая ценность' = DATA STRING[400] (item) IN substanceGroup MINCHARWIDTH 50;
energyItem 'Энергетическая ценность на 100г, ккал' = DATA DOUBLE (item) IN substanceGroup;
fatsItem 'Жиры на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
carbohydratesItem 'Углеводы на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
proteinsItem 'Белки на 100г, г' = DATA DOUBLE (item) IN substanceGroup;
isContainGMOItem 'Содержит ГМО' = DATA BOOLEAN (item) IN substanceGroup;

//sizeGroup
lengthPackItem 'Длина упаковки' = DATA NUMERIC[8,2] (item) IN itemSizeGroup;
widthPackItem 'Ширина упаковки' = DATA NUMERIC[8,2] (item) IN itemSizeGroup;
heightPackItem 'Высота упаковки' = DATA NUMERIC[8,2] (item) IN itemSizeGroup;
grossWeightPackItem 'Вес брутто упаковки' = DATA NUMERIC[9,3] (item) IN itemSizeGroup;

//expiryGroup
controlExpiryItem 'Контролировать сроки годности товара?' = DATA BOOLEAN (item) IN expiryGroup;
daysExpiryItem 'Срок годности в днях' = DATA NUMERIC[8,2] (item) IN expiryGroup;
daysExpiryPackItem 'Срок годности в днях с момента фасовки' = DATA NUMERIC[8,2] (item) IN expiryGroup;
hoursExpiryPackItem 'Срок годности в часах с момента фасовки' = DATA INTEGER (item) IN expiryGroup;

// ----------------------------------- Штрих код ------------------------------------------ //

daysExpiryBarcode 'Срок годности в днях' = daysExpiryPackItem(skuBarcode(barcode));
hoursExpiryBarcode 'Срок годности в часах' = hoursExpiryPackItem(skuBarcode(barcode));
labelFormatBarcode 'Формат этикетки' = idLabelFormatPackItem(skuBarcode(barcode));
compositionBarcode 'Состав товара' = compositionScalesItem(skuBarcode(barcode));
isWeightBarcode 'Весовой' = isWeightItem(skuBarcode(barcode));
expiryDateBarcodeStock 'Крайний срок годности' (barcode, stock) = expiryDateSkuStock(skuBarcode(barcode), stock);

pieceNumeratorItem (item) = pieceNumeratorItemGroup(itemGroupItem(item));
weightNumeratorItem (item) = weightNumeratorItemGroup(itemGroupItem(item));

barcodeNumeratorSku(item) += IF isWeightItem(item) THEN weightNumeratorItem(item) ELSE pieceNumeratorItem(item);

//------------------------------------ Товар с историей -------------------------------------------------------------//

@defineHistorizableCustom(inactiveItem, 'Неактивный товар', yesNo, name, item, nameAttributeItem, activeGroup);
isActiveItem (item) = item IS item AND NOT inactiveItem(item) == yesNo.yes PERSISTENT;
EXTEND FORM items
    FILTERGROUP filters
        FILTER 'Отображать только активные товары' 'F10' isActiveItem(i) DEFAULT
;

// ----------------------------------- Справочник норм естественной убыли -------------------------------------------- //

CLASS naturalLossItemGroup 'Группа естественной убыли': named, externalObject;

CLASS subNaturalLossItemGroup 'Группа естественной убыли': named, externalObject;
CLASS subNaturalLossItemGroupDetail 'Строка группы естественной убыли' : externalObject;

parentNaturalLossItemGroup 'Родительская группа' = DATA naturalLossItemGroup(subNaturalLossItemGroup);
codeSubNaturalLossItemGroup 'Код нормы естественной убыли' = DATA STRING[3] (subNaturalLossItemGroup);

nameToNaturalLossItemGroup (name) = GROUP UNIQUE naturalLossItemGroup BY name(naturalLossItemGroup) WHERE naturalLossItemGroup IS naturalLossItemGroup;
subNaturalLossItemGroupSubNaturalLossItemGroupDetail = DATA subNaturalLossItemGroup (subNaturalLossItemGroupDetail);
dayFromNaturalLossItemGroupDetail 'День' = DATA INTEGER (subNaturalLossItemGroupDetail);
monthFromNaturalLossItemGroupDetail = DATA month (subNaturalLossItemGroupDetail);
nameMonthFromNaturalLossItemGroupDetail 'Месяц' = name(monthFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail));
dayToNaturalLossItemGroupDetail 'День' = DATA INTEGER (subNaturalLossItemGroupDetail);
monthToNaturalLossItemGroupDetail = DATA month (subNaturalLossItemGroupDetail);
nameMonthToNaturalLossItemGroupDetail 'Месяц' = name(monthToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail));
percentNaturalLossItemGroupDetail '% естественной убыли' = DATA NUMERIC[10,5] (subNaturalLossItemGroupDetail);

dateToNumber(prm1, prm2) = prm2*32 + prm1;
inInterval(prm1, prm2, prm3, prm4, prm5, prm6) = (dateToNumber(prm1, prm2) >= dateToNumber(prm3, prm4))
                                                  AND (dateToNumber(prm1, prm2) <= dateToNumber(prm5, prm6));

inIntervalNaturalLoss (date, subNaturalLossItemGroupDetail) =
    inInterval(dayInDate(date), numberMonthInDate(date),
               dayFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail),
               numberMonth(monthFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail)),
               dayToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail),
               numberMonth(monthToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail))) AND date IS DATE;

castInterval =
    FORMULA STRING[100] ' CAST($1 AS TEXT) || \' \' || CAST($2 AS TEXT) || \' - \' || CAST($3 AS TEXT) || \' \' || CAST($4 AS TEXT)';
castIntervalNaturalLoss (subNaturalLossItemGroupDetail) =
    castInterval(dayFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail),
                 nameMonthFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail),
                 dayToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail),
                 nameMonthToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail));

castConcat = FORMULA STRING[15] 'CAST($1 AS TEXT)';
concatSubNaturalLossItemGroupDetail (subNaturalLossItemGroup) =
    GROUP CONCAT castConcat(percentNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail)), ','
          BY subNaturalLossItemGroupSubNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail)
          ORDER subNaturalLossItemGroupDetail
          MINCHARWIDTH 10 PREFCHARWIDTH 30;

inSubNaturalLossItemGroup (subNaturalLossItemGroup, subNaturalLossItemGroupDetail) =
    subNaturalLossItemGroupSubNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail) ==  subNaturalLossItemGroup;

groupNaturalLossItem 'Группа естественной убыли товара(ИД)' = DATA subNaturalLossItemGroup (item);
nameGroupNaturalLossItem 'Группа естественной убыли товара' (item) = name(groupNaturalLossItem(item)) IN rateGroup;
rateGroupNaturalLossItem 'Норма естественной убыли, %' (item) =
    concatSubNaturalLossItemGroupDetail(groupNaturalLossItem(item)) IN rateGroup;

inParentNaturalLossItemGroup(naturalLossItemGroup, subNaturalLossItemGroup) =
    parentNaturalLossItemGroup(subNaturalLossItemGroup ) == naturalLossItemGroup;

inParentSubNaturalLossItemGroup (naturalLossItemGroup, subNaturalLossItemGroup) = UNION OVERRIDE
    parentNaturalLossItemGroup(subNaturalLossItemGroup) == naturalLossItemGroup,
    subNaturalLossItemGroup IS subNaturalLossItemGroup AND NOT naturalLossItemGroup;

numberFromSubNaturalLossItemGroupDetail (subNaturalLossItemGroupDetail) =
    dateToNumber(dayFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail),
                 numberMonth(monthFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail)));

numberToSubNaturalLossItemGroupDetail (subNaturalLossItemGroupDetail) =
    dateToNumber(dayToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail),
                 numberMonth(monthToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail)));

intersect(prm1, prm2, prm3, prm4) = (prm4-prm1)*(prm2-prm3) >= 0;

intersectNaturalLoss(interval1, interval2) = intersect(numberFromSubNaturalLossItemGroupDetail(interval1),
                                                       numberToSubNaturalLossItemGroupDetail(interval1),
                                                       numberFromSubNaturalLossItemGroupDetail(interval2),
                                                       numberToSubNaturalLossItemGroupDetail(interval2));

CONSTRAINT intersectNaturalLoss(interval1, interval2) AND interval1 != interval2
           AND subNaturalLossItemGroupSubNaturalLossItemGroupDetail(interval1) == subNaturalLossItemGroupSubNaturalLossItemGroupDetail(interval2)
           CHECKED BY intersectNaturalLoss MESSAGE 'Интервалы не могут пересекаться';

    CONSTRAINT dayFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail) < 1
           OR dayFromNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail) > 31
           CHECKED BY dayFromNaturalLossItemGroupDetail MESSAGE 'Задайте корректный день месяца';

    CONSTRAINT dayToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail) < 1
           OR dayToNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail) > 31
           CHECKED BY dayToNaturalLossItemGroupDetail MESSAGE 'Задайте корректный день месяца';

FORM naturalLossItemGroups 'Справочник норм естественной убыли'

    TREE treeNaturalLossItem a=STRING[3], n=naturalLossItemGroup
    PROPERTIES READONLY OBJVALUE(a)
    PROPERTIES name(n), ADDOBJ(n), delete(n) FORCE PANEL DRAWTOTOOLBAR
    ORDER BY name

    OBJECTS sg=subNaturalLossItemGroup, d=subNaturalLossItemGroupDetail
    PROPERTIES(sg) name, codeSubNaturalLossItemGroup, ADDOBJ TODRAW sg, delete FORCE PANEL DRAWTOTOOLBAR
    PROPERTIES(d) dayFromNaturalLossItemGroupDetail, nameMonthFromNaturalLossItemGroupDetail,
                   dayToNaturalLossItemGroupDetail, nameMonthToNaturalLossItemGroupDetail,
                   percentNaturalLossItemGroupDetail, ADDOBJ, delete
    FILTERS stringEqualsAll(a), inParentSubNaturalLossItemGroup(n, sg),  inSubNaturalLossItemGroup(sg, d)
    ORDER BY name
;

DESIGN naturalLossItemGroups FROM DEFAULT {

    NEW topContainer {

        type = SPLITH;
        childConstraints = TO THE RIGHT;

        ADD treeNaturalLossItem.tree.box;

        NEW firstCase {

            type = SPLITV;
            childConstraints = TO THE BOTTOM;
            fillHorizontal = 4;

            ADD sg.box;
            ADD d.box;
        }
    }

    ADD functions.box;

    PROPERTY (delete(n)) {
        caption = 'Удалить';
        askConfirm = TRUE;
    }

    PROPERTY (delete(sg)) {
        caption = 'Удалить';
        askConfirm = TRUE;
    }
}

//------------------------------------ Товар для подразделения с историей -------------------------------------------//

TABLE itemDepartmentStore (item, departmentStore);
TABLE itemDepartmentStoreDate (item, departmentStore, DATE);

defaultLabelTypeItemDepartmentStore(item, departmentStore) = defaultLabelTypeDepartmentStore(departmentStore) AND item IS item;
@defineHistorizableCustomDefault(labelItemDepartmentStore, defaultLabelTypeItemDepartmentStore, 'Ценник', labelType, name, item, nameAttributeItem, departmentStore, name, 10, labelGroup);
labelBarcodeDepartmentStoreDate (barcode, departmentStore, date) = labelItemDepartmentStoreDate(skuBarcode(barcode), departmentStore, date);

CONSTRAINT dataLabelItemDepartmentStoreDate(item, departmentStore, date) AND NOT inLabelTypeDepartmentStore(dataLabelItemDepartmentStoreDate(item, departmentStore, date), departmentStore)
    CHECKED BY dataLabelItemDepartmentStoreDate MESSAGE 'Тип ценника запрещен для выбранного отдела магазина';

@defineHistorizable(multiplierItemDepartmentStore, 'Множитель', INTEGER, item, nameAttributeItem, departmentStore, name, labelGroup);
valOverMultiplierItemDepartmentStoreDate (item, departmentStore, date) = UNION OVERRIDE 1 IF item IS item AND departmentStore IS departmentStore AND date IS DATE,
                                                                               multiplierItemDepartmentStoreDate(item, departmentStore, date);
valOverMultiplierBarcodeDepartmentDate (barcode, departmentStore, date) = valOverMultiplierItemDepartmentStoreDate(skuBarcode(barcode), departmentStore, date);

EXTEND FORM item

    PROPERTIES(i) isContainerItem,
                  isWeightItem,

                  nameGroupNaturalLossItem, rateGroupNaturalLossItem, nameStatisticGroupSku,

                  lengthPackItem, widthPackItem, heightPackItem, grossWeightPackItem,

                  nameInactiveItem, dialogInactiveItem,

                  // Дополнительные
                  passScalesItem, isMarkItem, isLoafCutItem,
                  compositionScalesItem, idLabelFormatPackItem,

                  nutritionalValueItem, energyItem,
                  fatsItem, carbohydratesItem, proteinsItem, isContainGMOItem,

                  controlExpiryItem, daysExpiryItem, daysExpiryPackItem, hoursExpiryPackItem,

                  quantityPackItem

    PROPERTIES(b) BEFORE delete titleScalesBarcode, titleCashRegisterBarcode

    // Управленческие параметры
    TREE treeStore a=STRING[3], t=chainStores, st=storeType, s=store
    PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS stringEqualsAll(a), inChainStoresStoreType (t, st), inStoreTypeStore (st, s)

    OBJECTS dt=DATE FIXED PANEL, sp=supplier FIXED PANEL, d=departmentStore
    PROPERTIES (d) name
    FILTERS inChainStoresStoreTypeStoreDepartment(t, st, s, d)

    PROPERTIES (dt) OBJVALUE BACKGROUND dateDiffersCurrent(dt)
    PROPERTIES (sp) SELECTOR name
    PROPERTIES      overNameLabelItemDepartmentStoreDate(i, d, dt) BACKGROUND dataLabelItemDepartmentStoreDate(i, d, dt), overDialogLabelItemDepartmentStoreDate(i, d),
                    overMultiplierItemDepartmentStoreDate(i, d, dt) BACKGROUND dataMultiplierItemDepartmentStoreDate(i, d, dt), overDialogMultiplierItemDepartmentStoreDate(i, d)

    EDIT item OBJECT i
;

EXTEND DESIGN item {
    main {
        itemDetail {
            itemPrimary {
                itemPrimaryColumn1 {
                }

                itemPrimaryColumn2 {
                    ADD i.rateGroup {
                        childConstraints = TO THE BOTTOM;
                    }
                    ADD i.activeGroup;
                }
            }

            NEW itemAdditional AFTER itemPrimary {
                title = 'Дополнительные';
                fillVertical = 1.0;
                fillHorizontal = 1.0;

                NEW containerALeft {
                    childConstraints = TO THE BOTTOM;
                    ADD i.equipmentGroup {
                        childConstraints = TO THE BOTTOM;
                    }
                }

                NEW containerARight {
                    childConstraints = TO THE BOTTOM;
                    ADD i.substanceGroup{
                        childConstraints = TO THE BOTTOM;
                    };
                    ADD i.expiryGroup {
                        childConstraints = TO THE BOTTOM;
                    };
                };

                POSITION containerALeft TO THE LEFT containerARight;
            }

            ADD d.box AFTER itemAdditional {
                title = 'Управленческие параметры';

                fillVertical = 1.0;
                fillHorizontal = 1.0;
                ADD dt.box BEFORE d.grid.box;
                ADD sp.box BEFORE d.grid.box;
                POSITION dt.box TO THE LEFT sp.box;
                ADD treeStore.tree.box BEFORE d.grid.box;
                POSITION treeStore.tree.box TO THE LEFT d.grid.box;
                POSITION d.grid.box TO THE LEFT d.panel;
                d.grid.box {
                    fillHorizontal = 3;
                };
            }
       }
    }
}

//---------------------------- Документы качества ----------------------------------------//

CLASS ABSTRACT paper 'Документы качества' : named;
TABLE paper(paper);


CLASS customsCertificate 'Таможенный сертификат' : paper;
CLASS certificateGGR 'Удостоверение о ГГР' : paper;
CLASS certificateConformity 'Сертификат соответствия' : paper;
CLASS stateExamination 'Акт гос. сан.-гиг. экспертизы' : paper;

numberPaper 'Номер документа' (paper) = DATA STRING[30] (paper) IN baseGroup;
datePaper 'Дата документа' (paper) = DATA DATE (paper) IN baseGroup;
dateToPaper 'Срок действия' (paper) = DATA DATE (paper) IN baseGroup;
holderPaper 'Держатель ИД' (paper) = DATA legalEntity (paper) IN idGroup;
nameHolderPaper 'Наименование держателя' (paper) = name(holderPaper(paper)) IN baseGroup;
issuedPaper 'Документ выдал ИД' (paper) = DATA legalEntity (paper) IN idGroup;
nameIssuedPaper 'Наименование органа, выдавшего документ' (paper) = name(issuedPaper(paper)) IN baseGroup;

FORM paper 'Документ качества'
    OBJECTS p=paper FIXED PANEL
    PROPERTIES(p) numberPaper, datePaper, dateToPaper, nameHolderPaper, nameIssuedPaper

    EDIT paper OBJECT p
    EDIT customsCertificate OBJECT p
    EDIT certificateGGR OBJECT p
    EDIT certificateConformity OBJECT p
    EDIT stateExamination OBJECT p
;

DESIGN paper FROM DEFAULT {

    NEW row BEFORE functions.box{
        childConstraints = TO THE BOTTOM;

        NEW row1 {
            title = 'Шапка документа';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY(numberPaper(p));
            ADD PROPERTY(datePaper(p));
            ADD PROPERTY(dateToPaper(p));
        }
        NEW row2 {
            title = 'Организации';
            childConstraints = TO THE BOTTOM;
            ADD PROPERTY(nameHolderPaper(p));
            ADD PROPERTY(nameIssuedPaper(p));
        }
    }
}

FORM papers 'Документы качества'
    OBJECTS p=paper
    PROPERTIES(p)  objectClassName, numberPaper, datePaper, dateToPaper, nameHolderPaper, nameIssuedPaper
    PROPERTIES(p)  ADDFORM, EDITFORM, delete
    ORDER BY objectClassName
;

// -------------------------------------------- Подключение модуля POS -------------------------------------- //
@implementSkuLedgerReceiptDetail();
@implementAccountDocumentLedgerZReport();

// ------------------------------------------- Загрузка в ВУ --------------------------------------------- //

@defineMachineryPriceTransactionAttribute(labelFormat, 'Формат этикетки', INTEGER);

@defineMachineryPriceTransactionAttribute(daysExpiry, 'Срок годности в днях с момента фасовки', NUMERIC[8,2]);
@defineMachineryPriceTransactionAttribute(hoursExpiry, 'Срок годности в часах с момента фасовки', INTEGER);
@defineMachineryPriceTransactionAttributeStock(expiryDate, 'Срок годности (дата)', DATE);

@defineMachineryPriceTransactionAttribute(isWeight, 'Весовой товар', BOOLEAN);
@defineMachineryPriceTransactionAttribute(composition, 'Состав товара', TEXT);

// Кассы
createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += ACTION (transaction, groupMachinery) {
    IF groupMachinery IS groupCashRegister THEN
        SET nameMachineryPriceTransactionBarcode(transaction, barcode) <- titleCashRegisterBarcode(barcode) WHERE inMachineryPriceTransactionBarcode(transaction, barcode);
}

// Весы
createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += ACTION (transaction, groupMachinery) {
    IF groupMachinery IS groupScales THEN
        SET nameMachineryPriceTransactionBarcode(transaction, barcode) <- titleScalesBarcode(barcode) WHERE inMachineryPriceTransactionBarcode(transaction, barcode);
}
overInGroupMachinerySku(groupMachinery, sku) += groupMachinery IS groupScales AND sku IS item AND NOT passScalesItem(sku);

synchronizeCompositionMachineryPriceTransactionGroupScales = ACTION (transaction, groupMachinery) {
    FOR compositionMachineryPriceTransactionBarcode(transaction, barcode) AND groupMachinery IS groupScales
        AND NOT cellScalesGroupScalesComposition(groupMachinery, compositionMachineryPriceTransactionBarcode(transaction, barcode))
        ADDOBJ c = cellScales DO {
            SET groupScalesCellScales(c) <- groupMachinery;
            SET compositionCellScales(c) <- compositionMachineryPriceTransactionBarcode (transaction, barcode);
        }
}

snapshotAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += synchronizeCompositionMachineryPriceTransactionGroupScales(transaction, groupMachinery);
createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += synchronizeCompositionMachineryPriceTransactionGroupScales(transaction, groupMachinery);

// Прайс-чекеры
createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += ACTION (transaction, groupMachinery) {
    IF groupMachinery IS groupPriceChecker THEN
        SET nameMachineryPriceTransactionBarcode(transaction, barcode) <- titleCashRegisterBarcode(barcode) WHERE inMachineryPriceTransactionBarcode(transaction, barcode);
}

// Терминалы сбора даных
createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += ACTION (transaction, groupMachinery) {
    IF groupMachinery IS groupTerminal THEN
        SET nameMachineryPriceTransactionBarcode(transaction, barcode) <- titleCashRegisterBarcode(barcode) WHERE inMachineryPriceTransactionBarcode(transaction, barcode);
}

//---------------------------- Карты проработки (разруба) ----------------------------------------//
GROUP cutGroup 'Разделка' : baseGroup;
GROUP actGroup 'Акт' : publicGroup;
GROUP itemStudyOutputDetailInfo 'Ценовый характеристики п/ф' : publicGroup;

CLASS cutting 'Карта проработки (разделки)' : named, numeratedObject;
TABLE cutting (cutting);

CLASS cuttingDetail 'Компонента';
TABLE cuttingDetail (cuttingDetail);

dateCutting 'Дата создания' = DATA DATE (cutting) IN cutGroup;
dateCutting(cutting) <- currentDate() WHEN ASSIGNED(cutting IS cutting);

useCutting 'Используется' = DATA BOOLEAN (cutting) IN cutGroup;
descriptionCutting 'Описание' = DATA STRING[200] (cutting) IN cutGroup;

percAllowancesCutting 'Процент надбавок, %' = DATA NUMERIC[8,3] (cutting) IN cutGroup;
percLossesCutting 'Процент потерь, %' = DATA NUMERIC[8,3] (cutting) IN cutGroup;
percSweepsCutting 'Процент зачисток, %' = DATA NUMERIC[8,3] (cutting) IN cutGroup;

inDepartmentStoreCutting 'В каких подразделениях разрешено использовать карту' = DATA BOOLEAN (departmentStore, cutting) IN baseGroup;

@defineDocumentRelation(cutting);
@defineDocumentDetailSkuItem(cutting);

factorCuttingDetail 'Рассчетный коэффициент цены' = DATA NUMERIC[8,3] (cuttingDetail) IN cutGroup;
percGoodsCuttingDetail '% выхода компонента (п/ф)' = DATA NUMERIC[8,3] (cuttingDetail) IN cutGroup;

notTotalPercGoodsCuttingDetail (cutting) = GROUP SUM percGoodsCuttingDetail(cuttingDetail) BY cuttingCuttingDetail(cuttingDetail);
totalPercGoodsCutting 'Итого % выхода по карте проработки (разделки)' (cutting) = notTotalPercGoodsCuttingDetail(cutting) (+)
    percLossesCutting(cutting) (+) percSweepsCutting(cutting);
highlightCutting(cutting) = totalPercGoodsCutting(cutting) > 100;

inItemCutting 'Вкл.' = DATA BOOLEAN (item, cutting) IN cutGroup;

FORM cutting 'Карта проработки'
    OBJECTS c=cutting FIXED PANEL
    OBJECTS d=cuttingDetail
    PROPERTIES(c)      nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, descriptionCutting, dateCutting,
                       useCutting, percAllowancesCutting, percLossesCutting, percSweepsCutting
    PROPERTIES(c)      totalPercGoodsCutting TODRAW d FORCE PANEL  BACKGROUND highlightCutting(c)


    PROPERTIES(d)      nameAttributeItemCuttingDetail, shortNameUOMItemCuttingDetail, factorCuttingDetail, percGoodsCuttingDetail, ADDOBJ, delete

    TREE treeStore a=STRING[3], t=chainStores, st=storeType, s=store
        PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
        FILTERS stringEqualsAll(a), inChainStoresStoreType (t, st), inStoreTypeStore(st, s)

        OBJECTS dep=departmentStore
        PROPERTIES(dep) READONLY depName = name
        FILTERS inChainStoresStoreTypeStoreDepartment(t, st, s, dep)
        ORDER BY depName

    TREE treeGroup g=itemGroup PARENT parentItemGroup
        PROPERTIES READONLY gname = name(g)
        ORDER BY gname

        OBJECTS i=item
        PROPERTIES READONLY idBarcodeSku(i), nameAttributeItemGroupItem(g, i), shortNameUOMItem(i), nameBrandItem(i)
        FILTERS nameAttributeItemGroupItem(g, i)
        ORDER BY nameAttributeItemGroupItem

    PROPERTIES(dep, c) inDepartmentStoreCutting
    PROPERTIES(i, c)   inItemCutting

    FILTERS inCuttingCuttingDetail(c, d)
    FILTERGROUP filters7
        FILTER 'Показывать подразделения только для данной карты' 'F10' inDepartmentStoreCutting(dep, c)
    FILTERGROUP filters8
        FILTER 'Показывать товар только для данной карты' 'F9' inItemCutting(i, c)

    EDIT cutting OBJECT c
;

DESIGN cutting FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW cut.box BEFORE functions.box{
            type = TABBED;
            ADD d.box;
            NEW caseOneBox {
                title = 'Подразделение';

                ADD treeStore.tree.box;
                ADD dep.box {
                    fillHorizontal = 2;
                };
                POSITION treeStore.tree.box TO THE LEFT dep.box;
            }
            NEW caseTwoBox { title = 'Товар, для которого действует карта';
                ADD treeGroup.tree.box;
                ADD i.box {
                    fillHorizontal = 2;
                };
                POSITION treeGroup.tree.box TO THE LEFT i.box;
            }
        }
    }
}

FORM cuttings 'Карты проработки'
    OBJECTS c=cutting
    PROPERTIES(c)      READONLY numberObject, seriesObject, descriptionCutting, dateCutting, useCutting, percAllowancesCutting,
                       percLossesCutting, percSweepsCutting
    PROPERTIES(c)      ADDFORM, EDITFORM, delete

    OBJECTS d=cuttingDetail
    PROPERTIES(d)      READONLY nameAttributeItemCuttingDetail, shortNameUOMItemCuttingDetail, factorCuttingDetail, percGoodsCuttingDetail

    OBJECTS dep=departmentStore
    PROPERTIES(dep)    READONLY nameStoreDepartmentStore, name

    OBJECTS i=item
    PROPERTIES(i)      READONLY idBarcodeSku, nameAttributeItem, shortNameUOMItem, nameBrandItem

    PROPERTIES(dep, c) READONLY inDepartmentStoreCutting

    PROPERTIES(i, c) READONLY inItemCutting

    FILTERS   inCuttingCuttingDetail(c, d),
              inDepartmentStoreCutting(dep, c),
              inItemCutting(i, c)
    ORDER BY           nameStoreDepartmentStore, seriesObject, numberObject, nameAttributeItemCuttingDetail, name
    FILTERGROUP filters1
        FILTER 'Только используемые' 'F10' useCutting(c) DEFAULT

;


DESIGN cuttings FROM DEFAULT {
    main{

        NEW topContainer {

            type = SPLITV;
            childConstraints = TO THE RIGHT;

            NEW firstCase{

                type = SPLITV;

                ADD c.box;
                ADD d.box;
            }

            NEW secondCase {

                type = SPLITH;
                childConstraints = TO THE RIGHT;

                ADD dep.box { title = 'Подразделение'; }
                ADD i.box { title = 'Товар, для которого действует карта'; }
            }
        }

        ADD functions.box;
    }
}

FORM seriesNumberCuttingStudyInputDetail 'Возможные карты проработки'
    OBJECTS dep=departmentStore FIXED PANEL, i=item FIXED PANEL

    PROPERTIES         READONLY depName = name(dep)
    PROPERTIES         READONLY nameAttributeItem(i)

    OBJECTS c=cutting
    PROPERTIES(c)      READONLY seriesNumberObject, descriptionCutting, dateCutting, useCutting, percAllowancesCutting, percLossesCutting,
                       percSweepsCutting, totalPercGoodsCutting

    FILTERS            inDepartmentStoreCutting(dep, c),
                       inItemCutting(i, c),
                       useCutting(c)
;

DESIGN seriesNumberCuttingStudyInputDetail FROM DEFAULT {
    PROPERTY(depName) {
        focusable = FALSE;
    }
    PROPERTY(nameAttributeItem) {
        focusable = FALSE;
    }
}

// Акты проработки

CLASS actOfStudy 'Акт проработки (разделки)' : historyObject, numeratedDocument;
TABLE actOfStudy (actOfStudy);

CLASS actOfStudyPosted 'Проведенный акт проработки' : actOfStudy, postedObject;

// шапка дакта
@defineDocumentHeaderTime(actOfStudy);
@defineDocumentHeaderDepartmentStore(actOfStudy);
@defineDocumentHeaderPosted (actOfStudy);

CLASS studyInputDetail 'Строка проработки (вход)';
TABLE studyInputDetail(studyInputDetail);

CLASS studyOutputDetail 'Строка проработки (выход)';
TABLE studyOutputDetail(studyOutputDetail);

// строки расхода
@defineDocumentRelation(actOfStudy, studyInputDetail);

@defineDocumentDetailDepartmentStoreCustom(actOfStudy, studyInputDetail);
@defineDocumentDetailTime(actOfStudy, studyInputDetail);

@defineDocumentDetailSkuItem(studyInput);

@defineDocumentDetailQuantity(studyInput);

@defineDocumentDetailBasePrice(studyInput, departmentStore);
@deriveBasePriceLedgerOnSkuChange(studyInput, item);

@defineDocumentDetailBaseSum(studyInput);

@defineDocumentDetailPosted(actOfStudy, studyInputDetail);

@defineDocumentHeaderQuantityCustom(actOfStudy, studyInputDetail);
@defineDocumentHeaderSkuQuantityCustom(actOfStudy, studyInputDetail, item);

@defineDocumentHeaderBaseSumCustom(actOfStudy, studyInputDetail);

@defineDocumentHeaderItemRetailSumCustom(actOfStudy, studyInputDetail);

// custom информация по акту
contractorDepartmentStoreActOfStudy (actOfStudy)= DATA departmentStore (actOfStudy) IN idGroup;
nameContractorDepartmentStoreActOfStudy 'Отдел-контрагент' (actOfStudy) = name(contractorDepartmentStoreActOfStudy(actOfStudy)) IN documentPrmGroup;

numberOutputActOfStudy 'Номер расходной накладной' (actOfStudy) = DATA STRING[7] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 7;
seriesOutputActOfStudy 'Серия расходной накладной' (actOfStudy) = DATA STRING[2] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 3;

numberInputActOfStudy 'Номер приходной накладной' (actOfStudy) = DATA STRING[7] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 7;
seriesInputActOfStudy 'Серия приходной накладной' (actOfStudy) = DATA STRING[2] (actOfStudy) IN documentPrmGroup FIXEDCHARWIDTH 3;

descriptionActOfStudy 'Название документа' (actOfStudy) =
    [FORMULA STRING[200] '\'Акт разруба \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'] (
    seriesNumberObject(actOfStudy), dateActOfStudy(actOfStudy), nameContractorDepartmentStoreActOfStudy(actOfStudy));

cuttingStudyInputDetail = DATA cutting (studyInputDetail) IN idGroup;
seriesNumberCuttingStudyInputDetail 'Номер карты' (studyInputDetail) = seriesNumberObject(cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
dateCuttingStudyInputDetail 'Дата создания карты' (studyInputDetail) = dateCutting(cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
descriptionCuttingStudyInputDetail 'Описание' (studyInputDetail) = descriptionCutting(cuttingStudyInputDetail(studyInputDetail)) IN actGroup MINCHARWIDTH 20 PREFCHARWIDTH 20;

percAllowancesCuttingStudyInputDetail 'Процент надбавок, %' (studyInputDetail) = percAllowancesCutting(cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
percLossesCuttingStudyInputDetail 'Процент потерь, %' (studyInputDetail) = percLossesCutting (cuttingStudyInputDetail(studyInputDetail)) IN actGroup;
percSweepsCuttingStudyInputDetail 'Процент зачисток, %' (studyInputDetail) = percSweepsCutting (cuttingStudyInputDetail(studyInputDetail)) IN actGroup;

// строки расхода

studyInputDetailStudyOutputDetail = DATA studyInputDetail (studyOutputDetail) IN idGroup;
actOfStudyStudyOutputDetail(studyOutputDetail) = actOfStudyStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail)) PERSISTENT;

@defineDocumentDetailDepartmentStoreCustom(actOfStudy, studyOutputDetail);
@defineDocumentDetailTime(actOfStudy, studyOutputDetail);

@defineDocumentDetailSkuItem(studyOutput);

factorStudyOutputDetail 'Рассчетный коэффициент цены' = DATA NUMERIC[8,3] (studyOutputDetail) IN actGroup;
percGoodsStudyOutputDetail '% выхода компонента (п/ф)' = DATA NUMERIC[10,5] (studyOutputDetail) IN actGroup;

percAllowancesStudyOutputDetail 'Процент надбавок, %' = DATA NUMERIC[8,3] (studyOutputDetail) IN actGroup;
overPercAllowancesStudyOutputDetail (studyOutputDetail) = UNION OVERRIDE 0 IF studyOutputDetail IS studyOutputDetail,
                                                                         percAllowancesStudyOutputDetail(studyOutputDetail);

calculatedStudyOutputDetail 'Количество выхода п/ф' (studyOutputDetail) =  [X*Y/100]
    (quantityStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail)), percGoodsStudyOutputDetail(studyOutputDetail));

actualQuantityStudyOutputDetail 'Фактический выход п/ф'(studyOutputDetail) = DATA NUMERIC[14,3] (studyOutputDetail);
quantityStudyOutputDetail(studyOutputDetail) = UNION OVERRIDE calculatedStudyOutputDetail(studyOutputDetail),
                                                              actualQuantityStudyOutputDetail(studyOutputDetail);

@defineDocumentDetailBasePrice(studyOutput, departmentStore);
@defineDocumentDetailBaseSum(studyOutput);

@defineDocumentDetailBasePricePrefix(studyOutput, departmentStore, cur, ' (тек.)');
@deriveBasePriceLedgerOnSkuChangePrefix(studyOutput, cur, item);

@defineDocumentDetailPosted(actOfStudy, studyOutputDetail);

@defineDocumentHeaderQuantityCustom(actOfStudy, studyOutputDetail);
@defineDocumentHeaderSkuQuantityCustom(actOfStudy, studyOutputDetail, item);

@defineDocumentHeaderBaseSumCustom(actOfStudy, studyOutputDetail);

@defineDocumentHeaderItemRetailSumCustom(actOfStudy, studyOutputDetail);

expiryDateStudyOutputDetail 'Годен до' (studyOutputDetail) = DATA DATE(studyOutputDetail) IN baseGroup;

// используется для закачки в мета-коде
quantityActOfStudyDetailItemActOfStudy 'Кол-во для закачки в оборудование' (item, actOfStudy) = GROUP SUM quantityStudyOutputDetail(studyOutputDetail) BY itemStudyOutputDetail(studyOutputDetail), actOfStudyStudyOutputDetail(studyOutputDetail);

notTotalPercGoodsStudyInputDetail (studyInputDetail)= GROUP SUM percGoodsStudyOutputDetail(studyOutputDetail) BY studyInputDetailStudyOutputDetail(studyOutputDetail);
totalPercGoodsStudyInputDetail 'Итого % выхода по товару' (studyInputDetail) = notTotalPercGoodsStudyInputDetail(studyInputDetail) (+)
    percLossesCuttingStudyInputDetail(studyInputDetail)(+) percSweepsCuttingStudyInputDetail(studyInputDetail);
highlightStudyInputDetail(studyInputDetail) = totalPercGoodsStudyInputDetail(studyInputDetail) > 100;

roundImporterPriceStudyOutputDetail 'Расчетная цена импортера' (studyOutputDetail) = round2(
    importerPriceStudyInputDetail (studyInputDetailStudyOutputDetail(studyOutputDetail)) * factorStudyOutputDetail(studyOutputDetail));

roundSupplierPriceStudyOutputDetail 'Расчетная цена поставщика' (studyOutputDetail) = round2(
    supplierPriceStudyInputDetail (studyInputDetailStudyOutputDetail(studyOutputDetail)) * factorStudyOutputDetail(studyOutputDetail));

roundRetailPriceStudyOutputDetail 'Расчетная розничная цена' (studyOutputDetail) = roundM1([X*Y*(100+Z)/100]
    (retailPriceStudyInputDetail(studyInputDetailStudyOutputDetail(studyOutputDetail)), factorStudyOutputDetail(studyOutputDetail), overPercAllowancesStudyOutputDetail(studyOutputDetail)));

toFillStudyOutputDetailsStudyInputDetail 'Заполнить данные для п/ф' (studyInputDetail) =  ACTION (studyInputDetail) {
    FOR cuttingCuttingDetail(cuttingDetail) == cuttingStudyInputDetail(studyInputDetail) DO {
        ADDOBJ studyOutputDetail;
        FOR sod == addedObject() DO {
            SET itemStudyOutputDetail(sod) <- itemCuttingDetail(cuttingDetail);
            SET factorStudyOutputDetail(sod) <- factorCuttingDetail(cuttingDetail);
            SET percGoodsStudyOutputDetail(sod) <- percGoodsCuttingDetail(cuttingDetail);
            SET percAllowancesStudyOutputDetail(sod) <- percAllowancesCutting(cuttingCuttingDetail(cuttingDetail));
            SET retailPriceStudyOutputDetail(sod) <- roundRetailPriceStudyOutputDetail(sod);
            SET importerPriceStudyOutputDetail(sod) <- roundImporterPriceStudyOutputDetail(sod);
            SET supplierPriceStudyOutputDetail(sod) <- roundSupplierPriceStudyOutputDetail(sod);
            SET retailVATStudyOutputDetail(sod) <- retailVATStudyInputDetail(studyInputDetailStudyOutputDetail(sod));
        };
    }
} CONFIRM;

showNotStudyInputDetailStudyOutputDetail(studyInputDetail, studyOutputDetail) = studyInputDetail IS studyInputDetail AND NOT studyInputDetailStudyOutputDetail(studyOutputDetail);

deleteStudyOutputDetailStudyInputDetail 'Очистить позиции' = ACTION (studyInputDetail) {
    FOR studyInputDetailStudyOutputDetail(studyOutputDetail) == studyInputDetail DO {
        EXEC delete(studyOutputDetail AS studyOutputDetail);
    }
} CONFIRM;

//---------------------------- Документы изменяющие суммы при разрубе --------------------------------//

//  приходный документ //

CLASS parish 'Приходный документ (разруб)';
TABLE parish (parish);

isActOfStudy(actOfStudy) = actOfStudy IS actOfStudy;

         //  приходный документ //
@defineAggregation(actOfStudy, parish, isActOfStudy);

dateParish (parish) = dateActOfStudy(actOfStudyParish(parish));
dateTimeParish 'Дата/время' (parish) = dateTimeActOfStudy(actOfStudyParish(parish));
seriesNumberParish 'Серия/Номер' (parish) = seriesNumberObject(actOfStudyParish(parish));
isPostedParish (parish) = isPostedActOfStudy(actOfStudyParish(parish));
departmentStoreParish (parish) = departmentStoreActOfStudy(actOfStudyParish(parish));

contractorDepartmentStoreParish (parish) = contractorDepartmentStoreActOfStudy(actOfStudyParish(parish));
nameContractorDepartmentStoreParish 'Отдел поставки' (parish) = name(contractorDepartmentStoreParish(parish));

retailSumParish 'Сумма прихода' (parish) = retailSumStudyOutputDetailActOfStudy(actOfStudyParish(parish));

descriptionParish 'Название документа' (parish) =
    [FORMULA STRING[200] '\'Акт разруба приход \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberParish(parish), dateParish(parish), nameContractorDepartmentStoreParish(parish)) PERSISTENT;

descriptionStudyOutputDetail 'Название документа' (studyOutputDetail) = descriptionParish(parishActOfStudy(actOfStudyStudyOutputDetail(studyOutputDetail))) PERSISTENT;

@implementBatch(studyOutput, item, departmentStore, supplierPrice);
quantityBatch (ledger) += quantityStudyOutputDetail(ledger);
expiryDateBatch (ledger) += expiryDateStudyOutputDetail(ledger);
sumInSkuLedger (ledger) += retailSumStudyOutputDetail(ledger);

@implementBaseISkuDepartmentStoreLedger(studyOutput, item);

@implementAccountDocumentLedgerInc(parish, departmentStore);
sumIncAccountDocumentLedger (ledger) += retailSumParish(ledger);
sumItemIncAccountDocumentLedger (ledger) += retailSumParish(ledger);
sumContainerIncAccountDocumentLedger (ledger) += 0.0 IF ledger IS parish;

//  расходный документ //

CLASS consumption 'Расходный документ (разруб)';
TABLE consumption (consumption);

@defineAggregation(actOfStudy, consumption, isActOfStudy);

dateConsumption (consumption) = dateActOfStudy(actOfStudyConsumption(consumption));
dateTimeConsumption 'Дата/время' (consumption) = dateTimeActOfStudy(actOfStudyConsumption(consumption));
seriesNumberConsumption 'Серия/Номер' (consumption) = seriesNumberObject(actOfStudyConsumption(consumption));
isPostedConsumption (consumption) = isPostedActOfStudy(actOfStudyConsumption(consumption));
departmentStoreConsumption (consumption) = departmentStoreActOfStudy(actOfStudyConsumption(consumption));

contractorDepartmentStoreConsumption (consumption) = contractorDepartmentStoreActOfStudy(actOfStudyConsumption(consumption));
nameContractorDepartmentStoreConsumption 'Отдел назначения' (consumption) = name(contractorDepartmentStoreConsumption(consumption));

retailSumConsumption 'Сумма расхода' (consumption) = retailSumStudyInputDetailActOfStudy(actOfStudyConsumption(consumption));

descriptionConsumption 'Название документа' (consumption) =
    [FORMULA STRING[200] '\'Акт разруба расход \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberConsumption(consumption), dateConsumption(consumption), nameContractorDepartmentStoreConsumption(consumption));

descriptionStudyInputDetail 'Название документа' (studyInputDetail) = descriptionConsumption(consumptionActOfStudy(actOfStudyStudyInputDetail(studyInputDetail))) PERSISTENT;

@implementSkuLedgerOutFIFO(studyInput, item, departmentStore);
quantityOutFIFOSkuLedger (ledger) += quantityStudyInputDetail(ledger);
@implementSkuLedgerOutFIFOBalance(studyInput, item, departmentStore);
sumOutSkuLedger (ledger) += retailSumStudyInputDetail(ledger);

@implementAccountDocumentLedgerOut(consumption, departmentStore);
sumOutAccountDocumentLedger (ledger) += retailSumConsumption(ledger);
sumItemOutAccountDocumentLedger (ledger) += retailSumConsumption(ledger);
sumContainerOutAccountDocumentLedger (ledger) += 0.0 IF ledger IS consumption;

showSeriesNumberCuttingStudyInputDetail 'Карта проработки' = ACTION (detail) {
    FORM seriesNumberCuttingStudyInputDetail OBJECTS dep=departmentStoreStudyInputDetail(detail), i=itemStudyInputDetail(detail) MODAL;
    IF formResult() == formResult.ok THEN {
        SET cuttingStudyInputDetail(detail) <- chosenObject('c');
    }
} SHORTCUT seriesNumberCuttingStudyInputDetail DEFAULT;

//---------------------------- Отгрузка по безналу(розница) ----------------------------//

GROUP customerGroup 'Покупатель' : documentPrmGroup;
GROUP itemSpecificationDetailInfo 'Информация по товару' : baseGroup;

CLASS objectiveAcquiring 'Цель приобретения' : named;
TABLE objectiveAcquiring (objectiveAcquiring);

CLASS specification 'Счет-фактура': historyObject, numeratedDocument;
CLASS specificationDetail 'Строка счет-фактуры';

@defineDocument(specification);
@defineDocumentDepartmentStore(specification);

@defineDocumentDetailNumber(specification);
@defineDocumentDetailSkuItem(specification);
@defineDocumentDetailQuantity(specification);

@defineDocumentDetailRetailPrice(specification);
@derivePriceLedgerOnSkuChange(retailPrice, specification, item);

@defineDocumentDetailRetailSum(specification);

@defineDocumentDetailCalcRange(specification, departmentStore);
@defineDocumentDetailCalcVATSum(specification);

@defineAddDetailDialogSkuStock(specification, item, departmentStore, dialogSku);
@defineAddDetailDialogBarcode(specification, item);
@defineAddDetailDialogTerminal(specification, item);

@defineDocumentHeaderQuantity(specification);
@defineDocumentHeaderSkuQuantity(specification, item);

@defineDocumentHeaderRetailSum(specification);
@defineDocumentHeaderCalcVATSum(specification);

//descriptionSpecificationDetail(specificationDetail) = [FORMULA STRING[40] '$1 || CAST ($2 AS character(20)) || $3 || $4 || CAST ($5 AS character(20))']
//            ('С/ф № ', seriesNumberSpecificationDetail(specificationDetail), ' от ', ' ', dateSpecificationDetail(specificationDetail));

descriptionSpecificationDetail(specificationDetail) = [FORMULA STRING[40] '\'С-ф № \' || \' \' || CAST($1 AS TEXT) || \' от \' || \' \' || CAST($2 AS TEXT)']
            (seriesNumberSpecificationDetail(specificationDetail), dateSpecificationDetail(specificationDetail));

customerSpecification(specification) = DATA customer (specification) IN idGroup;
nameCustomerSpecification 'Покупатель' (specification) = name(customerSpecification(specification)) IN customerGroup;
fullNameCustomerSpecification 'Полное наименование' (specification) = fullNameLegalEntity(customerSpecification(specification)) IN customerGroup;
UNPCustomerSpecification 'УНП покупателя' (specification) = UNPLegalEntity(customerSpecification(specification)) IN customerGroup;
addressCustomerSpecification 'Юридический адрес' (specification) = addressLegalEntityDate(customerSpecification(specification), dateSpecification(specification)) IN customerGroup;
nameOwnershipCustomerSpecification 'Форма собственности' (specification) = nameOwnershipLegalEntity(customerSpecification(specification)) IN customerGroup;
postAddressCustomerSpecification 'Почтовый адрес' (specification) = postAddressLegalEntity(customerSpecification(specification)) IN customerGroup;
managerCustomerSpecification 'Руководитель' (specification) = managerLegalEntity(customerSpecification(specification)) IN customerGroup;
phoneCustomerSpecification 'Телефон покупателя' (specification) = phoneLegalEntityDate(customerSpecification(specification), dateSpecification(specification)) IN customerGroup;

objectiveAcquiringSpecification(specification) = DATA objectiveAcquiring (specification) IN idGroup;
nameObjectiveAcquiringSpecification 'Цель приобретения' (specification) = name(objectiveAcquiringSpecification(specification)) IN documentPrmGroup;

accountCustomerSpecification 'Р/сч. покупателя ИД' (specification) = accountLegalEntity(customerSpecification(specification));
numberAccountCustomerSpecification 'Р/сч. покупателя' (specification) = numberAccount(accountCustomerSpecification(specification));
nameBankAccountCustomerSpecification 'Банк покупателя' (specification) = nameBankAccount(accountCustomerSpecification(specification));
addressBankAccountCustomerSpecification 'Адрес банка покупателя' (specification) = addressBankDate(bankAccount(accountCustomerSpecification(specification)), dateSpecification(specification));
MFOBankAccountCustomerSpecification 'Код МФО банка покупателя' (specification) = MFOBankAccount(accountCustomerSpecification(specification));
departmentBankAccountCustomerSpecification 'Отдел банка покупателя' (specification) = departmentBankAccount(accountCustomerSpecification(specification));
CBUBankAccountCustomerSpecification 'ЦБУ банка покупателя' (specification) = CBUBankAccount(accountCustomerSpecification(specification));

dateToSpecification 'Срок действия с/ф' (specification) = DATA DATE (specification) IN documentPrmGroup;
overdueSpecification 'Просрочена' (specification) = dateToSpecification(specification) < currentDate();
noOverdueSpecification 'Непросрочена' (specification) = dateToSpecification(specification) >= currentDate();

overdueSpecificationDate 'Просрочена' (specification, date) = dateToSpecification(specification) < date AND date AS DATE;
noOverdueSpecificationDate 'Непросрочена' (specification, date) = dateToSpecification(specification) >= date AND date AS DATE;

UNPLegalEntitySpecification 'УНП компании' (specification) = UNPLegalEntity(legalEntityStockSpecification(specification));
fullNameLegalEntitySpecification 'Полное наименование компании' (specification) = fullNameLegalEntity(legalEntityStockSpecification(specification));
addressLegalEntitySpecification 'Юридический адрес компании' (specification) = addressLegalEntityDate(legalEntityStockSpecification(specification), dateSpecification(specification));

accountLegalEntitySpecification 'Р/сч. компании ИД' (specification) = accountLegalEntity(legalEntityStockSpecification(specification));
numberAccountLegalEntitySpecification 'Р/сч. компании' (specification) = numberAccount(accountLegalEntitySpecification(specification));

nameBankAccountLegalEntitySpecification 'Банк компании' (specification) = nameBankAccount(accountLegalEntitySpecification(specification));
addressBankAccountLegalEntitySpecification 'Адрес банка компании' (specification) = addressBankDate(bankAccount(accountLegalEntitySpecification(specification)), dateSpecification(specification));
MFOBankAccountLegalEntitySpecification 'Код МФО банка компании' (specification) = MFOBankAccount(accountLegalEntitySpecification(specification));
departmentBankAccountLegalEntitySpecification 'Отдел банка компании' (specification) = departmentBankAccount(accountLegalEntitySpecification(specification));
CBUBankAccountLegalEntitySpecification 'ЦБУ банка компании' (specification) = CBUBankAccount(accountLegalEntitySpecification(specification));
phoneLegalEntitySpecification 'Телефон компании' (specification) = phoneLegalEntityDate(legalEntityStockSpecification(specification), dateSpecification(specification)) IN customerGroup;

CONSTRAINT specification IS specification AND NOT dateToSpecification(specification) MESSAGE 'Не задан срок действия с/ф';
CONSTRAINT dateToSpecification(specification) < dateSpecification(specification) MESSAGE 'Дата действия с/ф не может быть меньше даты документа';

balanceDepartmentStoreItemSpecificationDetail 'Текущий остаток' (specificationDetail) = balanceBSkuStockDateTime(
                itemSpecificationDetail(specificationDetail), departmentStoreSpecificationDetail(specificationDetail), dateTimeSpecificationDetail(specificationDetail)) IN itemDetailGroup;

highlightSpecificationDetail(specificationDetail) =  quantitySpecificationDetailItemSpecification(itemSpecificationDetail(specificationDetail), specificationSpecificationDetail(specificationDetail)) > balanceDepartmentStoreItemSpecificationDetail(specificationDetail);

reservedItemDepartmentStoreDate 'Количество выставленного товара' (departmentStore, item, date) = GROUP SUM
    quantitySpecificationDetail(specificationDetail)
    IF dateToSpecification(specificationSpecificationDetail(specificationDetail)) >= date AND date AS DATE
    BY departmentStoreSpecificationDetail(specificationDetail), itemSpecificationDetail(specificationDetail), date;

quantityExhibitedItemBySpecificationDetail(specificationDetail) = reservedItemDepartmentStoreDate(departmentStoreSpecificationDetail(specificationDetail),
    itemSpecificationDetail(specificationDetail), dateSpecification(specificationSpecificationDetail(specificationDetail)));

availableQuantityItemBySpecificationDetail 'Доступное к-во, с учетом непросроченных с/ф' (specificationDetail) =
    balanceDepartmentStoreItemSpecificationDetail(specificationDetail)-quantityExhibitedItemBySpecificationDetail(specificationDetail) IN itemDetailGroup;

notNullAvailableQuantityItemBySpecificationDetail(specificationDetail) = availableQuantityItemBySpecificationDetail(specificationDetail) < 0;

//---------------------------- Документ на отгрузку из розницы ----------------------------------------//

CLASS statement 'Выписка из розницы' : historyObject, numberedObject;
CLASS statementDetail 'Строка выписки из розницы';
CLASS statementPosted 'Проведенная выписка из розницы' : statement, postedObject;

@defineDocument(statement);
@defineDocumentDepartmentStore(statement);
@defineDocumentPosted(statement);

@defineDocumentDetailSkuItem(statement);
@defineDocumentDetailQuantity(statement);

@defineDocumentDetailBasePrice(statement, departmentStore);
@deriveBasePriceLedgerOnSkuChange(statement, item);

@defineDocumentDetailRetailSum(statement);

@defineDocumentDetailCalcRange(statement, departmentStore);
@defineDocumentDetailCalcVATSum(statement);

@defineDocumentDetailRetailPricePrefix(statement, cur, ' (тек.)');
@derivePriceLedgerOnSkuChangePrefix(retailPrice, statement, curRetailPrice, item);

@defineDocumentDetailNote(statement);

@defineAddDetailDialogSkuStock(statement, item, departmentStore, dialogSku);
@defineAddDetailDialogBarcode(statement, item);
@defineAddDetailDialogTerminal(statement, item);

@defineDocumentHeaderPriceChange(statement);

@defineDocumentHeaderQuantity(statement);
@defineDocumentHeaderSkuQuantity(statement, item);

@defineDocumentHeaderRetailSum(statement);
@defineDocumentHeaderItemRetailSum(statement);

@defineDocumentHeaderCalcVATSum(statement);

//    шапка документа поставки
customerStatement 'Покупатель (ИД)' (statement) = DATA customer (statement) IN idGroup;
nameCustomerStatement 'Покупатель' (statement) = name(customerStatement(statement)) IN documentPrmGroup
    MINCHARWIDTH 30 PREFCHARWIDTH 40;
UNPCustomerStatement 'УНП покупателя' (statement) = UNPLegalEntity(customerStatement(statement)) IN documentPrmGroup;

inStatementSpecification 'Включить в накладную' (statement, specification) = DATA BOOLEAN (statement, specification)
    IN idGroup MINCHARWIDTH 20 PREFCHARWIDTH 20;

GROUP specificationGroup 'Счет-фактуры' : publicGroup;

specificationsStatement 'Ввести на основании с/ф' (statement) =
    GROUP CONCAT castToString255(seriesNumberObject(specification)) IF inStatementSpecification(statement, specification), ', '
          BY statement
          ORDER specification IN specificationGroup MINCHARWIDTH 20 PREFCHARWIDTH 20;

countStatementSpecification(specification) = GROUP SUM 1 IF inStatementSpecification(statement, specification) AND isPostedStatement(statement) BY specification;
noStatementSpecification(specification) = specification IS specification AND NOT countStatementSpecification(specification);

differsPriceStatementDetail(statementDetail) = retailPriceStatementDetail(statementDetail) != curRetailPriceStatementDetail(statementDetail);

statusSpecification 'Расход' (specification) = IF countStatementSpecification(specification)
                                                  THEN 'Отгрузки были' IF specification IS specification
                                                  ELSE 'Отгрузок не было' IF specification IS specification
                                                MINCHARWIDTH 15 PREFCHARWIDTH 15;

statusStatementSpecification 'Статус' (statement, specification) = IF dateStatement(statement) > dateToSpecification(specification)
                                                                      THEN 'Просрочена' IF statement IS statement IF specification IS specification
                                                                      ELSE 'Непросрочена' IF statement IS statement IF specification IS specification
                                                                   MINCHARWIDTH 15 PREFCHARWIDTH 15;

descriptionStatement 'Название документа' (statement) =
    [FORMULA STRING[200] '\'Выписка из розницы \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)']
    (seriesNumberObject(statement), dateStatement(statement), nameCustomerStatement(statement));

descriptionStatementDetail 'Название документа' (statementDetail) = descriptionStatement(statementStatementDetail(statementDetail));

@implementSkuLedgerOutFIFO(statement, item, departmentStore);
quantityOutFIFOSkuLedger (ledger) += quantityStatementDetail(ledger);
@implementSkuLedgerOutFIFOBalance(statement, item, departmentStore);
sumOutSkuLedger (ledger) += retailSumStatementDetail(ledger);

@implementAccountDocumentLedgerOut(statement, departmentStore);
sumOutAccountDocumentLedger (ledger) += retailSumStatementDetailStatement(ledger);
sumItemOutAccountDocumentLedger (ledger) += retailSumItemStatementDetailStatement(ledger);
sumContainerOutAccountDocumentLedger (ledger) += retailSumContainerStatementDetailStatement(ledger);

@implementSalesLedger(statement, item, departmentStore);
quantitySalesLedger (ledger) += quantityStatementDetail(ledger);
VATSalesLedger (ledger) += retailVATStatementDetail(ledger);
sumSalesLedger (ledger) += retailSumStatementDetail(ledger);

balanceDepartmentStoreItemStatementDetail 'Текущий остаток' (statementDetail) = balanceBSkuStockDateTime(
                itemStatementDetail(statementDetail), departmentStoreStatementDetail(statementDetail), dateTimeStatementDetail(statementDetail)) IN itemDetailGroup;

highlightStatementDetail(statementDetail) = quantityStatementDetailItemStatement(itemStatementDetail(statementDetail), statementStatementDetail(statementDetail)) > balanceDepartmentStoreItemStatementDetail(statementDetail);

overdueSpecificationStatement 'Просроченные с/ф' (specification, statement) = overdueSpecificationDate(specification, dateStatement(statement));
noOverdueSpecificationStatement 'Непросроченные с/ф' (specification, statement) = noOverdueSpecificationDate(specification, dateStatement(statement));

toFillStatementDetailsStatement 'Заполнить отгрузку на основании с/ф' =  ACTION (statement) {
    FOR inStatementSpecification (statement, specification) AND inSpecificationSpecificationDetail(specification, specificationDetail) DO {
        ADDOBJ statementDetail;
        FOR d == addedObject() DO {
            SET itemStatementDetail(d) <- itemSpecificationDetail(specificationDetail);
            SET quantityStatementDetail(d) <- quantitySpecificationDetail(specificationDetail);
            SET retailPriceStatementDetail(d) <- retailPriceSpecificationDetail(specificationDetail);
            SET noteStatementDetail(d) <- descriptionSpecificationDetail(specificationDetail);
        };
    };
} IN specificationGroup CONFIRM;

// ---------------------------------- Переоценка при реализации из розницы ------------------------------------------

CLASS priceChangeStatement 'Переоценка при отгрузке из розницы' : priceChangeDocument;
CLASS priceChangeStatementDetail 'Строка переоценки при отгрузке из розницы' : priceChangeDocumentDetail;

needToPriceChangeStatementDetail (statementDetail) = curRetailPriceStatementDetail(statementDetail) != retailPriceStatementDetail(statementDetail) AND
                                                   quantityStatementDetail(statementDetail) >0; // <= balanceDepartmentStoreItemStatementDetail(statementDetail);

@defineDocumentPriceChange(statement);
@defineDocumentPriceChangeNumber(statement);
@defineDocumentPriceChangeSku(statement, item);
@defineDocumentPriceChangeQuantity(statement);
@defineDocumentPriceChangePrice(statement);
@defineDocumentPriceChangeRetailPricePrefix(statement, cur, ' (тек.)');

@implementPriceChangeDocument(priceChangeStatement, item);
@implementPriceChangeDocumentDetailRetailPrice(priceChangeStatement);

// для накладной (шапка и хвост)

@defineDocumentDetailGrossWeight(statement, item);
@defineDocumentDetailQuantityPack(statement, item);

@defineConsignmentHeader(statement);
@implementConsignment(statement, item);

supplierConsignment (consignment) += legalEntityDepartmentStore(departmentStoreStatement(consignment));
supplierStockConsignment (consignment) += departmentStoreStatement(consignment);
customerConsignment (consignment) += customerStatement(consignment);

priceConsignmentDetail (consignmentDetail) += retailPriceStatementDetail (consignmentDetail);
sumConsignmentDetail (consignmentDetail) += retailSumStatementDetail (consignmentDetail);
vatConsignmentDetail (consignmentDetail) += dataCalcRangeStatementDetail (consignmentDetail);
sumVATConsignmentDetail (consignmentDetail) += calcVATSumStatementDetail (consignmentDetail);
sumInvoiceConsignmentDetail (consignmentDetail) += retailSumStatementDetail (consignmentDetail);
noteConsignmentDetail (consignmentDetail) += noteStatementDetail (consignmentDetail);

//---------------------------- Приход товара от поставщика ----------------------------------------//
CLASS shipment 'Поставка' : historyObject, numberedObject, listRegister, contractLedger, contractALedger, inContractLedger;
CLASS shipmentDetail 'Строка поставки' : listRegisterDetail;
CLASS shipmentPosted 'Проведенная поставка' : shipment, postedObject;

@defineDocument(shipment);
@defineDocumentDepartmentStore(shipment);
@defineDocumentPosted(shipment);

@defineDocumentHeaderSupplierContractDepartmentStore(shipment);

@defineDocumentDetailNumber(shipment);

@defineDocumentDetailSkuItem(shipment);

@defineDocumentDetailQuantity(shipment);

@defineDocumentDetailBasePrice(shipment, departmentStore);
@defineDocumentDetailBaseSum(shipment);

@defineDocumentDetailInvoicePrice(shipment, departmentStore);
@defineDocumentDetailInvoiceSum(shipment);

@defineDocumentDetailBasePricePrefix(shipment, departmentStore, cur, ' (тек.)');
@deriveBasePriceLedgerOnSkuChangePrefix(shipment, cur, item);

@defineAddDetailDialogSku(shipment, item, dialogSku);
@defineAddDetailDialogBarcode(shipment, item);
@defineAddDetailDialogTerminal(shipment, item);

@defineDocumentHeaderQuantity(shipment);
@defineDocumentHeaderSkuQuantity(shipment, item);

@defineDocumentHeaderBaseSum(shipment);
@defineDocumentHeaderItemRetailSum(shipment);

@defineDocumentHeaderInvoiceSum(shipment);

@defineDocumentHeaderListRegister(shipment);
@defineDocumentHeaderPriceChange(shipment);

@defineDocumentCurrency(shipment);
@deriveDocumentCurrency(shipment, departmentStore);

sidShipmentDetail 'Уникальный номер накладной' (shipmentDetail) = DATA STRING[50] (shipmentDetail) IN documentHeaderGroup;

sidNumberSeriesToShipmentDetail (sid, number, series) = GROUP UNIQUE shipmentDetail
            BY sidShipmentDetail (shipmentDetail), numberShipmentDetail (shipmentDetail), seriesShipmentDetail (shipmentDetail)
            WHERE shipmentDetail IS shipmentDetail;

numberSeriesToShipment (number, series) = GROUP UNIQUE shipment BY numberObject(shipment), seriesObject(shipment) WHERE shipment IS shipment;

carryingChargesShipment 'Транспортные расходы' (shipment) = DATA NUMERIC[16,2] (shipment) IN documentSumGroup;

//количество-цены по строкам
GROUP pricingShipmentDetailInfo 'Дополнительные ценовые параметры': baseGroup;

expiryDateShipmentDetail 'Годен до' (shipmentDetail) = DATA DATE(shipmentDetail) IN baseGroup;

CONSTRAINT controlExpiryItemShipmentDetail(shipmentDetail) AND NOT expiryDateShipmentDetail(shipmentDetail) MESSAGE 'Для товара не задан срок годности';
//    CHECKED BY controlExpiryItemShipmentDetail MESSAGE 'Не задан для товара срок годности';

isFixPriceShipmentDetail 'Товар с фиксированной ценой' (shipmentDetail) = DATA BOOLEAN (shipmentDetail) IN itemDetailGroup;

retailMarkupShipmentDetail 'Торговая надбавка, %'(shipmentDetail) = DATA NUMERIC[8,3] (shipmentDetail) IN baseGroup;
importerMarkupShipmentDetail '% надбавки с уч. оптовой' (shipmentDetail) = [X*(100+Y)/100](
    retailMarkupShipmentDetail(shipmentDetail), supplierMarkupShipmentDetail(shipmentDetail));

descriptionShipment 'Название документа' (shipment) =
    [FORMULA STRING[200] '\'Приход \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberObject(shipment), dateShipment(shipment), nameSupplierShipment(shipment));

descriptionShipmentDetail 'Название документа' (shipmentDetail) = descriptionShipment(shipmentShipmentDetail(shipmentDetail));

@implementBatch(shipment, item, departmentStore, supplierPrice);
quantityBatch (ledger) += quantityShipmentDetail(ledger);
expiryDateBatch (ledger) += expiryDateShipmentDetail(ledger);
supplierBatch (ledger) += supplierShipmentDetail(ledger);
sumInSkuLedger (ledger) += retailSumShipmentDetail(ledger);

@implementBaseSkuDepartmentStoreLedger(shipment, item);

@implementAccountDocumentLedgerInc(shipment, departmentStore);
sumIncAccountDocumentLedger (ledger) += retailSumShipmentDetailShipment(ledger);
sumItemIncAccountDocumentLedger (ledger) += retailSumItemShipmentDetailShipment(ledger);
sumContainerIncAccountDocumentLedger (ledger) += retailSumContainerShipmentDetailShipment(ledger);

//--------------------------------------- Расчет с поставщиками -------------------------------------------------------//

@implementContractLedger(a, shipment);
sumContractALedger(contractALedger) += invoiceSumShipmentDetailShipment(contractALedger) IF isPostedShipment(contractALedger);

@implementContractPrepaymentLedger(shipment, invoiceSumShipmentDetailShipment);
//sumContractLedger(shipmentContractLedger) += invoiceSumShipmentDetailShipment(shipmentShipmentContractLedger(shipmentContractLedger));

@implementOutContractLedgerInContractLedgerPrefix(in, shipment);
sumInContractLedger(inContractLedger) += invoiceSumShipmentDetailShipment(inContractLedger) IF isPostedShipment(inContractLedger);

//----------------------------------Для реестра цен----------------------------//

@implementListRegister(shipment, item);
@implementHeaderInputListRegisterNumber(shipment);

senderListRegister (inputListRegister) += supplierShipment(inputListRegister);
shipperListRegister (inputListRegister) += nameSupplierShipment(inputListRegister);

supplierSumListRegisterDetail (inputListRegisterDetail) += supplierSumShipmentDetail(inputListRegisterDetail);
supplierSumListRegisterDetailListRegister (inputListRegister) += supplierSumShipmentDetailShipment(inputListRegister);

dataFromContractListRegister (listRegister) += dateFromContractShipment(listRegister);
numberContractListRegister (listRegister) += numberContractShipment(listRegister);

// ------ Запись значений по умолчанию ----- //

nonRoundImporterPriceShipmentDetail 'Цена изготовителя/импортера (неокругленная)' (shipmentDetail) =
     IF isFixPriceShipmentDetail(shipmentDetail) THEN
     [X*(100+Y)/100](supplierPriceShipmentDetail(shipmentDetail), overSupplierMarkupShipmentDetail(shipmentDetail)) ELSE
     [X*100/(100+Y)](supplierPriceShipmentDetail(shipmentDetail), overSupplierMarkupShipmentDetail(shipmentDetail));

importerPriceShipmentDetail (shipmentDetail) <-
    round0(nonRoundImporterPriceShipmentDetail(shipmentDetail))
    WHEN CHANGED(nonRoundImporterPriceShipmentDetail(shipmentDetail));

wareShipmentDetail(shipmentDetail) <-
    wareItem(itemShipmentDetail(shipmentDetail))
    WHEN CHANGED(itemShipmentDetail(shipmentDetail));

warePriceShipmentDetail (shipmentDetail) <-
    warePriceDate(wareShipmentDetail (shipmentDetail), dateShipmentDetail(shipmentDetail))
    WHEN CHANGED(wareShipmentDetail(shipmentDetail));

nonRoundRetailPriceShipmentDetail 'Цена розничная (неокруглен.)'(shipmentDetail) = [X*(Y+100)*(Z+100)/10000] (
    supplierPriceShipmentDetail(shipmentDetail),
    (UNION OVERRIDE 0.0 IF shipmentDetail IS shipmentDetail, retailMarkupShipmentDetail(shipmentDetail)),
    (UNION OVERRIDE 0.0 IF shipmentDetail IS shipmentDetail, valueRetailVATShipmentDetail(shipmentDetail)));

// todo : такой подход создает охрененную сложность на сохранении
//markupPriceShipmentDetail 'Сумма торговой надбавки (за ед.)' (shipmentDetail) =
//    supplierPriceShipmentDetail(shipmentDetail) *
//    (UNION OVERRIDE 0 IF shipmentDetail IS shipmentDetail, retailMarkupShipmentDetail(shipmentDetail))/100;
//
//saleVATPriceShipmentDetail 'Сумма розничного НДС (за ед.)' (shipmentDetail) =
//    (supplierPriceShipmentDetail(shipmentDetail) (+) markupPriceShipmentDetail(shipmentDetail))*
//    (UNION OVERRIDE 0 IF shipmentDetail IS shipmentDetail, valueRetailVATShipmentDetail(shipmentDetail))/100;

//nonRoundRetailPriceShipmentDetail 'Цена розничная (неокруглен.)'(shipmentDetail) = supplierPriceShipmentDetail(shipmentDetail) (+) markupPriceShipmentDetail(shipmentDetail) (+) saleVATPriceShipmentDetail(shipmentDetail);

calculatedRetailPriceShipmentDetail 'Новая розничная цена (расч.)' (shipmentDetail) = IF isFixPriceShipmentDetail(shipmentDetail)
    THEN importerPriceShipmentDetail(shipmentDetail) (+) warePriceShipmentDetail(shipmentDetail)
    ELSE nonRoundRetailPriceShipmentDetail(shipmentDetail) (+) warePriceShipmentDetail(shipmentDetail);

retailPriceShipmentDetail (shipmentDetail) <-
    roundPriceCurrency(calculatedRetailPriceShipmentDetail (shipmentDetail), currencyShipmentDetail(shipmentDetail))
    WHEN CHANGED(calculatedRetailPriceShipmentDetail (shipmentDetail));

// Запись текущих параметров
balanceBeforeShipmentShipmentDetail 'Остаток до поставки' (shipmentDetail) = DATA NUMERIC[14,3] (shipmentDetail);
balanceBeforeShipmentShipmentDetail (shipmentDetail) <- balanceBSkuStockDateTime (
                itemShipmentDetail(shipmentDetail), departmentStoreShipmentDetail(shipmentDetail), dateTimeShipmentDetail(shipmentDetail))
                WHEN CHANGED(itemShipmentDetail(shipmentDetail));

//-------------------- Документы качества ----------------------------//

customsCertificateShipmentDetail 'Таможенный сертификат ИД' (shipmentDetail)= DATA customsCertificate (shipmentDetail) IN idGroup;
certificateGGRShipmentDetail 'Удостоверение о ГГР ИД' (shipmentDetail)= DATA certificateGGR (shipmentDetail) IN idGroup;
certificateConformityShipmentDetail 'Сертификат соответствия ИД' (shipmentDetail)= DATA certificateConformity (shipmentDetail) IN idGroup;
stateExaminationShipmentDetail 'Акт гос. сан.-гиг. экспертизы ИД' (shipmentDetail)= DATA stateExamination (shipmentDetail) IN idGroup;

numberCustomsCertificateShipmentDetail 'Номер таможенного сертификата' (shipmentDetail) = numberPaper(customsCertificateShipmentDetail(shipmentDetail)) IN recognizeGroup;
numberCertificateGGRShipmentDetail 'Номер удостоверения о ГГР' (shipmentDetail) = numberPaper(certificateGGRShipmentDetail(shipmentDetail)) IN recognizeGroup;
numberCertificateConformityShipmentDetail 'Номер сертификата соответствия' (shipmentDetail) = numberPaper(certificateConformityShipmentDetail(shipmentDetail)) IN recognizeGroup;
numberStateExaminationShipmentDetail 'Номер акта гос. сан.-гиг. экспертизы' (shipmentDetail) = numberPaper(stateExaminationShipmentDetail(shipmentDetail)) IN recognizeGroup;

actingPaperDate(paper, date) =  datePaper(paper) <= date AND NOT  dateToPaper(paper) < date AND date AS DATE;

CONSTRAINT customsCertificateShipmentDetail(shipmentDetail) AND NOT actingPaperDate(customsCertificateShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))
    CHECKED BY customsCertificateShipmentDetail MESSAGE 'Таможенный сертификат не действующий';
CONSTRAINT certificateGGRShipmentDetail(shipmentDetail) AND NOT actingPaperDate(certificateGGRShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))
    CHECKED BY certificateGGRShipmentDetail MESSAGE 'Удостоверение о ГГР не действующее';
CONSTRAINT certificateConformityShipmentDetail(shipmentDetail) AND NOT actingPaperDate(certificateConformityShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))
    CHECKED BY certificateConformityShipmentDetail MESSAGE 'Сертификат соответствия не действующий';
CONSTRAINT stateExaminationShipmentDetail(shipmentDetail) AND NOT actingPaperDate(stateExaminationShipmentDetail(shipmentDetail), dateShipmentDetail(shipmentDetail))
    CHECKED BY stateExaminationShipmentDetail MESSAGE 'Акт гос. сан.-гиг. не действующий';

// ---------------------------------- Дооценка на приходе ------------------------------------------

CLASS priceChangeShipment 'Переоценка на приходе' : priceChangeDocument;
CLASS priceChangeShipmentDetail 'Строка переоценки на приходе' : priceChangeDocumentDetail;

needToPriceChangeShipmentDetail (shipmentDetail) = curRetailPriceShipmentDetail(shipmentDetail) != retailPriceShipmentDetail(shipmentDetail) AND
                                                   balanceBeforeShipmentShipmentDetail(shipmentDetail) != 0;

@defineDocumentPriceChange(shipment);
@defineDocumentPriceChangeNumber(shipment);
@defineDocumentPriceChangeSku(shipment, item);
quantityPriceChangeShipmentDetail (priceChangeShipmentDetail) = balanceBeforeShipmentShipmentDetail(shipmentDetailPriceChangeShipmentDetail(priceChangeShipmentDetail));
@defineDocumentPriceChangePrice(shipment);
@defineDocumentPriceChangePricePrefix(shipment, cur, cur, ' (тек.)');

supplierPriceChangeShipment (priceChangeShipment) = supplierShipment(shipmentPriceChangeShipment(priceChangeShipment));
nameSupplierPriceChangeShipment 'Поставщик' (priceChangeShipment) = name(supplierPriceChangeShipment(priceChangeShipment));

@implementPriceChangeDocument(priceChangeShipment, item);
@implementPriceChangeDocumentDetailAllPrice(priceChangeShipment);

//----------------------------------------------- Списание товара ---------------------------------------------------//

// Проводим по регистру

limitOutFIFOSkuLedgerBatch(ledger, batch) += IF batchWriteOffDetail(ledger) THEN
                                                quantityWriteOffDetail(ledger) AND batch == batchWriteOffDetail(ledger)
                                             ELSE
                                                currentBalanceBatchStock(batch, stockWriteOffDetail(ledger));

changedDataSkuLedger(ledger) += CHANGED(batchWriteOffDetail(ledger));

// Товарный отчет
sumItemOutAccountDocumentLedger (ledger) += sumItemWriteOffDetailWriteOff(ledger);
sumContainerOutAccountDocumentLedger (ledger) += sumContainerWriteOffDetailWriteOff(ledger);

//----------------------------------- Внутреннее перемещение (расход) -------------------------------------------------//

CLASS innerFlow 'Расход в отдел' : historyObject, numberedObject;
CLASS innerFlowDetail 'Строка расхода в отдел';
CLASS innerFlowPosted 'Проведенный расход в отдел' : innerFlow, postedObject;

@defineDocument(innerFlow);
@defineDocumentDepartmentStore(innerFlow);
@defineDocumentPosted(innerFlow);

@defineDocumentDetailSkuItem(innerFlow);

@defineDocumentDetailQuantity(innerFlow);

@defineDocumentDetailBasePrice(innerFlow, departmentStore);
@deriveBasePriceLedgerOnSkuChange(innerFlow, item);

@defineDocumentDetailBaseSum(innerFlow);

@defineAddDetailDialogSkuStock(innerFlow, item, departmentStore, dialogSku);
@defineAddDetailDialogBarcode(innerFlow, item);
@defineAddDetailDialogTerminal(innerFlow, item);

@defineDocumentHeaderQuantity(innerFlow);
@defineDocumentHeaderSkuQuantity(innerFlow, item);

@defineDocumentHeaderBaseSum(innerFlow);
@defineDocumentHeaderItemRetailSum(innerFlow);

recipientDepartmentInnerFlow (innerFlow) = DATA departmentStore(innerFlow);
nameRecipientDepartmentInnerFlow 'Отдел-получатель' (innerFlow) = name(recipientDepartmentInnerFlow(innerFlow)) IN documentPrmGroup;

descriptionInnerFlow 'Название документа' (innerFlow) =
    [FORMULA STRING[200] '\'Расход в отдел \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberObject(innerFlow), dateInnerFlow(innerFlow), nameRecipientDepartmentInnerFlow(innerFlow));

descriptionInnerFlowDetail 'Название документа' (innerFlowDetail) = descriptionInnerFlow(innerFlowInnerFlowDetail(innerFlowDetail));

@implementSkuLedgerOutFIFO(innerFlow, item, departmentStore);
quantityOutFIFOSkuLedger (ledger) += quantityInnerFlowDetail(ledger);
@implementSkuLedgerOutFIFOBalance(innerFlow, item, departmentStore);
sumOutSkuLedger (ledger) += retailSumInnerFlowDetail(ledger);

@implementAccountDocumentLedgerOut(innerFlow, departmentStore);
sumOutAccountDocumentLedger (ledger) += retailSumInnerFlowDetailInnerFlow(ledger);
sumItemOutAccountDocumentLedger (ledger) += retailSumItemInnerFlowDetailInnerFlow(ledger);
sumContainerOutAccountDocumentLedger (ledger) += retailSumContainerInnerFlowDetailInnerFlow(ledger);

@defineDocumentDetailGrossWeight(innerFlow, item);
@defineDocumentDetailQuantityPack(innerFlow, item);

@defineConsignmentHeader(innerFlow);
@implementConsignment(innerFlow, item);

supplierConsignment (consignment) += legalEntityDepartmentStore(departmentStoreInnerFlow(consignment));
supplierStockConsignment (consignment) += departmentStoreInnerFlow(consignment);
customerConsignment (consignment) += legalEntityDepartmentStore(recipientDepartmentInnerFlow(consignment));

priceConsignmentDetail (consignmentDetail) += retailPriceInnerFlowDetail(consignmentDetail);
sumConsignmentDetail (consignmentDetail) += retailSumInnerFlowDetail (consignmentDetail);
vatConsignmentDetail (consignmentDetail) += valueRetailVATInnerFlowDetail (consignmentDetail);
sumVATConsignmentDetail (consignmentDetail) += retailVATISumInnerFlowDetail (consignmentDetail);
sumInvoiceConsignmentDetail (consignmentDetail) += retailSumInnerFlowDetail (consignmentDetail);

// расчет цен для внутреннего прихода

importerPriceItemInnerFlow 'Цена изготовителя (максим.)' (item, innerFlow) = GROUP MAX importerPriceInnerFlowDetail (innerFlowDetail)
    IF innerFlowInnerFlowDetail(innerFlowDetail) == innerFlow BY itemInnerFlowDetail(innerFlowDetail), innerFlowInnerFlowDetail(innerFlowDetail);

retailPriceItemInnerFlow 'Цена (максим.)' (item, innerFlow) = GROUP MAX retailPriceInnerFlowDetail (innerFlowDetail)
    IF innerFlowInnerFlowDetail(innerFlowDetail) == innerFlow
    BY itemInnerFlowDetail(innerFlowDetail), innerFlowInnerFlowDetail(innerFlowDetail);

supplierMarkupInnerFlowDetail 'Оптовая надбавка' (innerFlowDetail) =
    (supplierPriceInnerFlowDetail(innerFlowDetail)/importerPriceInnerFlowDetail(innerFlowDetail) - 1)*100;

// todo : все таки наверное нужно с собой тянуть надбавку (по крайней мере для реестра цен)
retailMarkupInnerFlowDetail 'Торговая надбавка' (innerFlowDetail) =
    round3([(X*100/(100+Y)/Z-1)*100](
    retailPriceInnerFlowDetail(innerFlowDetail), valueRetailVATInnerFlowDetail(innerFlowDetail), importerPriceInnerFlowDetail(innerFlowDetail)));

noteInnerFlowDetail 'Примечание' (innerFlowDetail) =
    IF supplierMarkupInnerFlowDetail(innerFlowDetail)!=0
    THEN [FORMULA STRING[200] '\'РОЦ: \' || CAST($1 AS TEXT) ||  \'; Оптовая надбавка: \' || CAST($2 AS TEXT)||  \'; Торговая наценка: \' || CAST($3 AS TEXT)']
         (importerPriceInnerFlowDetail(innerFlowDetail), supplierMarkupInnerFlowDetail(innerFlowDetail), retailMarkupInnerFlowDetail(innerFlowDetail))
    ELSE [FORMULA STRING[200] '\'РОЦ: \' || CAST($1 AS TEXT) ||  \'; Торговая наценка: \' || CAST($2 AS TEXT)']
         (importerPriceInnerFlowDetail(innerFlowDetail), retailMarkupInnerFlowDetail(innerFlowDetail));

noteConsignmentDetail (consignmentDetail) += noteInnerFlowDetail (consignmentDetail);

showWareInnerFlow 'Есть посуда' (innerFlow) = DATA BOOLEAN (innerFlow) IN documentPrmGroup;

//----------------------------------- Внутреннее перемещение (приход) -------------------------------------------------//


CLASS innerArrival 'Приход в отдел' : historyObject, inputListRegister;
CLASS innerArrivalDetail 'Строка прихода в отдел' : inputListRegisterDetail;
CLASS innerArrivalPosted 'Проведенный приход в отдел' : innerArrival, postedObject;

@defineDocument(innerArrival);
@defineDocumentDepartmentStore(innerArrival);
@defineDocumentPosted(innerArrival);

@defineDocumentDetailSkuItem(innerArrival);

@defineDocumentDetailQuantity(innerArrival);
@defineDocumentDetailBasePrice(innerArrival, departmentStore);
@defineDocumentDetailBaseSum(innerArrival);

@defineDocumentDetailBasePricePrefix(innerArrival, departmentStore, cur, ' (тек.)');
@deriveBasePriceLedgerOnSkuChangePrefix(innerArrival, cur, item);

@defineAddDetailDialogSku(innerArrival, item, dialogSku);
@defineAddDetailDialogBarcode(innerArrival, item);
@defineAddDetailDialogTerminal(innerArrival, item);

@defineDocumentHeaderQuantity(innerArrival);
@defineDocumentHeaderSkuQuantity(innerArrival, item);

@defineDocumentHeaderBaseSum(innerArrival);
@defineDocumentHeaderItemRetailSum(innerArrival);

@defineDocumentHeaderPriceChange(innerArrival);
@defineDocumentHeaderListRegister(innerArrival);

innerFlowInnerArrival (innerArrival) = DATA innerFlowPosted (innerArrival);
innerArrivalInnerFlow (innerFlow) = GROUP UNIQUE innerArrival BY innerFlowInnerArrival (innerArrival);
// избыточность
CONSTRAINT innerFlowInnerArrival(p1) == innerFlowInnerArrival(p2) AND p1 != p2 CHECKED BY innerFlowInnerArrival MESSAGE 'Накладная задействована в другом приходе';

numberInnerArrival 'Номер накладной' (innerArrival) = numberObject(innerFlowInnerArrival(innerArrival)) IN documentHeaderGroup PERSISTENT;
seriesInnerArrival 'Серия накладной' (innerArrival) = seriesObject(innerFlowInnerArrival(innerArrival)) IN documentHeaderGroup PERSISTENT;
seriesNumberInnerArrival 'Серия/Номер' (innerArrival) = seriesNumberObject(innerFlowInnerArrival(innerArrival)) PERSISTENT;

dateInnerArrival (innerArrival) <- dateInnerFlow(innerFlowInnerArrival(innerArrival)) WHEN CHANGED(innerFlowInnerArrival(innerArrival));

senderDepartmentInnerArrival (innerArrival) = DATA departmentStore(innerArrival);
nameSenderDepartmentInnerArrival 'Отдел-отправитель' (innerArrival) = name(senderDepartmentInnerArrival(innerArrival)) IN documentPrmGroup;
senderDepartmentInnerArrival (innerArrival) <- departmentStoreInnerFlow(innerFlowInnerArrival(innerArrival))
    WHEN CHANGED(innerFlowInnerArrival(innerArrival));

showWareInnerArrival 'Есть посуда' (innerArrival) = DATA BOOLEAN (innerArrival) IN documentPrmGroup;

CONSTRAINT recipientDepartmentInnerFlow(innerFlowInnerArrival(innerArrival)) != departmentStoreInnerArrival(innerArrival) CHECKED BY innerFlowInnerArrival
    MESSAGE 'Накладная с другого отдела';

balanceBeforeInnerArrivalInnerArrivalDetail 'Остаток до' (innerArrivalDetail) = DATA NUMERIC[14,3] (innerArrivalDetail);
balanceBeforeInnerArrivalInnerArrivalDetail(innerArrivalDetail) <- balanceBSkuStockDateTime (
                itemInnerArrivalDetail(innerArrivalDetail), departmentStoreInnerArrivalDetail(innerArrivalDetail), dateTimeInnerArrivalDetail(innerArrivalDetail))
                WHEN CHANGED(itemInnerArrivalDetail(innerArrivalDetail));

importerPriceItemInnerArrival 'Цена изготовителя (максим.)' (item, innerArrival) = importerPriceItemInnerFlow(
    item, innerFlowInnerArrival(innerArrival));

retailPriceItemInnerArrival 'Розничная цена (максим.)' (item, innerArrival) = retailPriceItemInnerFlow (
    item, innerFlowInnerArrival(innerArrival));

quantityItemInnerFlowInnerArrival 'Количество в расходе' (item, innerArrival) = quantityInnerFlowDetailItemInnerFlow(item, innerFlowInnerArrival(innerArrival));
diffQuantityItemInnerArrival 'Расхождение' (item, innerArrival) =
    quantityItemInnerFlowInnerArrival(item, innerArrival) (-) quantityInnerArrivalDetailItemInnerArrival(item, innerArrival);

retailMarkupInnerArrivalDetail 'Торговая надбавка (расч.)' (innerArrivalDetail) =
    round3([(X*100/(100+Y)/Z-1)*100](
    retailPriceInnerArrivalDetail(innerArrivalDetail), valueRetailVATInnerArrivalDetail(innerArrivalDetail), importerPriceInnerArrivalDetail(innerArrivalDetail)));

supplierMarkupInnerArrivalDetail 'Оптовая надбавка (расч.)' (innerArrivalDetail) =
    (supplierPriceInnerArrivalDetail(innerArrivalDetail)/importerPriceInnerArrivalDetail(innerArrivalDetail) - 1)*100;
//retailMarkupInnerArrivalDetail 'Торговая надбавка, %'(innerArrivalDetail) = DATA NUMERIC[8,3] (innerArrivalDetail) IN baseGroup;
//retailMarkupInnerArrivalDetail (innerArrivalDetail) <- calcRetailMarkupInnerArrivalDetail(innerArrivalDetail)
//                                                    WHEN CHANGED(itemInnerArrivalDetail(innerArrivalDetail));
//supplierMarkupInnerArrivalDetail 'Оптовая надбавка/торговая скидка, %' (innerArrivalDetail) = DATA NUMERIC[8,3] (innerArrivalDetail) IN priceDetailGroup;
//supplierMarkupInnerArrivalDetail (innerArrivalDetail) <- calcSupplierMarkupInnerArrivalDetail(innerArrivalDetail)
//                                                    WHEN CHANGED(itemInnerArrivalDetail(innerArrivalDetail));

importerMarkupInnerArrivalDetail '% надбавки с уч. оптовой' (innerArrivalDetail) = [X*(100+Y)/100](
    retailMarkupInnerArrivalDetail(innerArrivalDetail), supplierMarkupInnerArrivalDetail(innerArrivalDetail));

toFillInnerArrivalDetailsInnerArrival 'Заполнить документ из расхода' =  ACTION (innerArrival) {
    FOR innerArrivalInnerFlow(innerFlowInnerFlowDetail(innerFlowDetail)) == innerArrival DO {
        ADDOBJ innerArrivalDetail;
        FOR d == addedObject() DO {
            SET innerArrivalInnerArrivalDetail(d) <- innerArrival AS innerArrival;
            SET quantityInnerArrivalDetail (d) <- quantityInnerFlowDetail(innerFlowDetail);
            SET itemInnerArrivalDetail (d) <- itemInnerFlowDetail(innerFlowDetail);
            SET retailPriceInnerArrivalDetail (d) <- retailPriceInnerFlowDetail(innerFlowDetail);
            SET importerPriceInnerArrivalDetail (d) <- importerPriceInnerFlowDetail(innerFlowDetail);
            SET supplierPriceInnerArrivalDetail (d) <- supplierPriceInnerFlowDetail(innerFlowDetail);
            SET wareInnerArrivalDetail(d) <- wareInnerFlowDetail(innerFlowDetail);
            SET warePriceInnerArrivalDetail (d) <- warePriceInnerFlowDetail(innerFlowDetail);
            SET retailVATInnerArrivalDetail (d) <- retailVATInnerFlowDetail(innerFlowDetail);
//            SET supplierMarkupInnerArrivalDetail (d) <- supplierMarkupInnerFlowDetail(innerFlowDetail);
//            SET retailMarkupInnerArrivalDetail (d) <- retailMarkupInnerFlowDetail(innerFlowDetail);
        };
    };
} CONFIRM;

descriptionInnerArrival 'Название документа' (innerArrival) =
    [FORMULA STRING[200] '\'Приход в отдел \'|| CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberInnerArrival(innerArrival), dateInnerArrival(innerArrival), nameSenderDepartmentInnerArrival(innerArrival));

descriptionInnerArrivalDetail 'Название документа' (innerArrivalDetail) = descriptionInnerArrival(innerArrivalInnerArrivalDetail(innerArrivalDetail));

// для расчета себестоимости

quantityInnerFlowBatch (innerFlow, batch) = GROUP SUM costSkuLedgerBatch (innerFlowDetail, batch)
                                                  BY innerFlowInnerFlowDetail(innerFlowDetail), batch;

quantityInnerArrivalBatch (innerArrival, batch) = quantityInnerFlowBatch (innerFlowInnerArrival(innerArrival), batch);

quantityInnerArrivalDetailBatch (innerArrivalDetail, batch) = quantityInnerArrivalBatch(innerArrivalInnerArrivalDetail(innerArrivalDetail), batch);

@implementSkuLedgerInLIFO(innerArrival, item, departmentStore);
quantityInLIFOSkuLedger(innerArrivalDetail) += quantityInnerArrivalDetail (innerArrivalDetail);
limitInLIFOSkuLedgerBatch (innerArrivalDetail, batch) += quantityInnerArrivalDetailBatch (innerArrivalDetail, batch);
sumInSkuLedger (ledger) += retailSumInnerArrivalDetail(ledger);

@implementBaseSkuDepartmentStoreLedger(innerArrival, item);

@implementAccountDocumentLedgerInc(innerArrival, departmentStore);
sumIncAccountDocumentLedger (ledger) += retailSumInnerArrivalDetailInnerArrival(ledger);
sumItemIncAccountDocumentLedger (ledger) += retailSumItemInnerArrivalDetailInnerArrival(ledger);
sumContainerIncAccountDocumentLedger (ledger) += retailSumContainerInnerArrivalDetailInnerArrival(ledger);

//----------------------------------Для реестра цен----------------------------//

@implementInputListRegister(innerArrival, item);
@implementHeaderInputListRegisterNumberCustom(innerArrival, innerArrival);

senderListRegister (inputListRegister) += legalEntityDepartmentStore(senderDepartmentInnerArrival(inputListRegister));
shipperListRegister (inputListRegister) += [FORMULA STRING[200] 'CAST($1 AS TEXT) || \', \' || CAST($2 AS TEXT) || \', отдел  \' || CAST($3 AS TEXT)'](
                                        nameLegalEntityDepartmentStore(senderDepartmentInnerArrival(inputListRegister)),
                                        nameStoreDepartmentStore(senderDepartmentInnerArrival(inputListRegister)),
                                        name(senderDepartmentInnerArrival(inputListRegister)));
supplierSumListRegisterDetailListRegister (inputListRegister) += supplierISumInnerArrivalDetailInnerArrival(inputListRegister) (+) wareSumInnerArrivalDetailInnerArrival(inputListRegister);

supplierSumListRegisterDetail (inputListRegisterDetail) += supplierISumInnerArrivalDetail(inputListRegisterDetail) (+) wareSumInnerArrivalDetail(inputListRegisterDetail);


// ---------------------------------- Дооценка на внутреннем перемещении (приход) ------------------------------------------

CLASS priceChangeInnerArrival 'Переоценка на внутреннем перемещении' : priceChangeDocument;
CLASS priceChangeInnerArrivalDetail 'Строка переоценки на внутреннем перемещении' : priceChangeDocumentDetail;

needToPriceChangeInnerArrivalDetail (innerArrivalDetail) = curRetailPriceInnerArrivalDetail(innerArrivalDetail) != retailPriceInnerArrivalDetail(innerArrivalDetail) AND
                                                   balanceBeforeInnerArrivalInnerArrivalDetail(innerArrivalDetail) != 0;

@defineDocumentPriceChange(innerArrival);
@defineDocumentPriceChangeNumberCustom(innerArrival, innerArrival);
@defineDocumentPriceChangeSku(innerArrival, item);

quantityPriceChangeInnerArrivalDetail 'Остаток' (priceChangeInnerArrivalDetail) =
    balanceBeforeInnerArrivalInnerArrivalDetail(innerArrivalDetailPriceChangeInnerArrivalDetail(priceChangeInnerArrivalDetail));

@defineDocumentPriceChangePrice(innerArrival);
@defineDocumentPriceChangePricePrefix(innerArrival, cur, cur, ' (тек.)');

senderDepartmentPriceChangeInnerArrival (priceChangeInnerArrival) = senderDepartmentInnerArrival(innerArrivalPriceChangeInnerArrival(priceChangeInnerArrival));
nameSenderDepartmentPriceChangeInnerArrival 'Отдел-отправитель' (priceChangeInnerArrival) = name(senderDepartmentPriceChangeInnerArrival(priceChangeInnerArrival));

@implementPriceChangeDocument(priceChangeInnerArrival, item);
@implementPriceChangeDocumentDetailAllPrice(priceChangeInnerArrival);

//------------------------------------------------- Z-отчет ---------------------------------------------------------------------//
@derivePriceLedgerOnSkuChangePrefix(retailVAT, receipt, VAT, sku);

// документ скидок для товарного отчета
CLASS saleDiscountDocument 'Скидка по продаже через кассы';
TABLE saleDiscountDocument (saleDiscountDocument);

@defineAggregation(zReport, saleDiscountDocument, discountSumReceiptDetailZReport);
@defineDocumentAggregationHeaderTime(zReport, saleDiscountDocument);
@defineDocumentAggregationHeaderStock(zReport, saleDiscountDocument, departmentStore, 'Отдел магазина');
@defineDocumentAggregationHeaderPosted(zReport, saleDiscountDocument);

numberCashRegisterSaleDiscountDocument (saleDiscountDocument) = numberCashRegisterZReport(zReportSaleDiscountDocument(saleDiscountDocument));

discountSaleDiscountDocument (saleDiscountDocument) = discountSumReceiptDetailZReport(zReportSaleDiscountDocument(saleDiscountDocument));

descriptionSaleDiscountDocument (saleDiscountDocument) =
    [FORMULA STRING[200] '\'Скидка по кассе \' || CAST($1 AS TEXT) || \' отдела \' || CAST($2 AS TEXT) ||  \' от \' || CAST($3 AS TEXT)'](
    numberCashRegisterSaleDiscountDocument(saleDiscountDocument), nameDepartmentStoreSaleDiscountDocument(saleDiscountDocument), dateSaleDiscountDocument(saleDiscountDocument));

@implementAccountDocumentLedgerOut(saleDiscountDocument, departmentStore);
sumOutAccountDocumentLedger (ledger) += discountSaleDiscountDocument(ledger);
sumItemOutAccountDocumentLedger (ledger) += discountSaleDiscountDocument(ledger);
sumContainerOutAccountDocumentLedger (ledger) += 0.0 IF ledger IS saleDiscountDocument;

//----------------------------------- Пересорт товара -------------------------------------------------------

CLASS disparity 'Пересортица' : historyObject, numeratedDocument;
CLASS disparityPosted 'Проведенная пересортица' : disparity, postedObject;
CLASS disparityDetail 'Строка пересортицы';

@defineDocument(disparity);
@defineDocumentDepartmentStore(disparity);
@defineDocumentPosted(disparity);

@defineDocumentDetailSkuItem(disparity);

@defineDocumentDetailQuantity(disparity);

@defineDocumentDetailBasePrice(disparity, departmentStore);
@derivePrevBasePriceLedgerOnSkuChange(disparity, item);

@defineDocumentDetailBaseSum(disparity);

@defineAddDetailDialogSkuStock(disparity, item, departmentStore, dialogSku);
@defineAddDetailDialogBarcode(disparity, item);
@defineAddDetailDialogTerminal(disparity, item);

@defineDocumentHeaderQuantity(disparity);
@defineDocumentHeaderBaseSum(disparity);

@defineDocumentHeaderPriceChange(disparity);

descriptionDisparityDetail 'Название документа' (disparityDetail) =
    [FORMULA STRING[200] '\'Пересортица (расход)\' ||  \' \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'](
    seriesNumberObject(disparityDisparityDetail(disparityDetail)), dateDisparity(disparityDisparityDetail(disparityDetail)));

@implementSkuLedgerOutFIFO(disparity, item, departmentStore);
quantityOutFIFOSkuLedger (ledger) += quantityDisparityDetail(ledger);
@implementSkuLedgerOutFIFOBalance(disparity, item, departmentStore);
sumOutSkuLedger (ledger) += retailSumDisparityDetail(ledger);

                                  // Приход

@defineDocumentDetailSkuItemPrefix(disparity, input, ' (приход)');

@defineDocumentDetailQuantityPrefix(disparity, input, ' (приход)');

@defineDocumentDetailBasePricePrefix(disparity, departmentStore, input, ' (приход)');
@derivePrevBasePriceLedgerOnSkuChangePrefix(disparity, input, inputItem);

//@defineDocumentDetailRetailSumPrefix(disparity, input, ' (приход)');
inputRetailSumDisparityDetail 'Розничная сумма (приход)'(disparityDetail) = round0(inputQuantityDisparityDetail(disparityDetail) * inputRetailPriceDisparityDetail(disparityDetail));
//inputQuantityDisparityDetailDisparity 'Кол-во (всего) (приход)' (disparityDetail) = GROUP SUM inputQuantityDisparityDetail(disparityDetail) BY disparityDisparityDetail(disparityDetail) IN documentSumGroup PERSISTENT;
@defineDocumentHeaderQuantityPrefix(disparity, input, ' (приход)');
@defineDocumentHeaderRetailSumPrefix(disparity, input, ' (приход)');

                                  // Текущее значение расхода //

@defineDocumentDetailBasePricePrefix(disparity, departmentStore, inputCur, ' (тек.)');
@derivePrevBasePriceLedgerOnSkuChangePrefix(disparity, inputCur, inputItem);

balanceBeforeDisparityDetail 'Остаток до пересорта (расход)' (disparityDetail) = DATA NUMERIC[14,3] (disparityDetail) IN baseGroup;
balanceBeforeDisparityDetail (disparityDetail) <- balanceBSkuStockDateTime (
                itemDisparityDetail(disparityDetail), departmentStoreDisparityDetail(disparityDetail), dateTimeDisparityDetail(disparityDetail))
                WHEN CHANGED(itemDisparityDetail(disparityDetail));

//----------------------------  Изменение остатка пересорт --------------------------------------------//

CLASS inputDisparityDetail 'Приход пересортицы';
TABLE inputDisparityDetail (inputDisparityDetail);

needToInputDisparityDetailDetail (disparityDetail) = inputQuantityDisparityDetail(disparityDetail) > 0
    AND isPostedDisparityDetail(disparityDetail);

@defineAggregation(disparityDetail, inputDisparityDetail, needToInputDisparityDetailDetail);

@defineDocumentAggregationDetailTime(disparity, inputDisparity);
@defineDocumentAggregationDetailPosted(disparity, inputDisparity);
@defineDocumentAggregationDetailStock(disparity, inputDisparity, departmentStore, 'Отдел магазина');
@defineDocumentAggregationDetailSkuPrefix(disparity, inputDisparity, item, input);
quantityInputDisparityDetail(inputDisparityDetail) = inputQuantityDisparityDetail(disparityDetailInputDisparityDetail(inputDisparityDetail));

@defineDocumentAggregationDetailPricePrefix(disparity, inputDisparity, input, , );
@defineDocumentDetailBaseSum(inputDisparity);

expiryDateInputDisparityDetail 'Годен до' (inputDisparityDetail) = DATA DATE(inputDisparityDetail) IN baseGroup;

descriptionInputDisparityDetail 'Название документа' (inputDisparityDetail) =
    [FORMULA STRING[200] '\'Пересортица (приход)\' ||  \' \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'](
    seriesNumberObject(disparityDisparityDetail(disparityDetailInputDisparityDetail(inputDisparityDetail))), dateDisparity(disparityDisparityDetail(disparityDetailInputDisparityDetail(inputDisparityDetail))));

@implementBatch(inputDisparity, item, departmentStore, supplierPrice);
quantityBatch (ledger) += quantityInputDisparityDetail(ledger);
expiryDateBatch (ledger) += expiryDateInputDisparityDetail(ledger);
sumInSkuLedger (ledger) += retailSumInputDisparityDetail(ledger);

@implementBaseISkuDepartmentStoreLedger(inputDisparity, item);

descriptionDisparity 'Название документа' (disparity) =
    [FORMULA STRING[200] '\'Пересортица \' ||  \' \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'](
    seriesNumberObject(disparity), dateDisparity(disparity));

// ---------------------------------- Дооценка остатка при пересорте ------------------------------------------

inputBalanceBeforeDisparityDetail 'Остаток до пересорта (приход)' (disparityDetail) = DATA NUMERIC[14,3] (disparityDetail) IN priceDetailGroup;
inputBalanceBeforeDisparityDetail (disparityDetail) <- balanceBSkuStockDateTime (
                inputItemDisparityDetail(disparityDetail), departmentStoreDisparityDetail(disparityDetail), dateTimeDisparityDetail(disparityDetail))
                WHEN CHANGED(inputItemDisparityDetail(disparityDetail));

CLASS inputPriceChangeDisparity 'Переоценка остатка при пересортице' : priceChangeDocument;
CLASS inputPriceChangeDisparityDetail 'Строка переоценки остатка при пересортице' : priceChangeDocumentDetail;

needToInputPriceChangeDisparityDetail (disparityDetail) = inputCurRetailPriceDisparityDetail(disparityDetail) != inputRetailPriceDisparityDetail(disparityDetail) AND
                                                   inputBalanceBeforeDisparityDetail(disparityDetail) !=0;

needToInputPriceChangeDisparity (disparity) = GROUP SUM 1 IF needToInputPriceChangeDisparityDetail(disparityDetail) BY disparityDisparityDetail(disparityDetail);

@defineDocumentAggregation(disparity, inputPriceChangeDisparity, needToInputPriceChangeDisparity);
@defineDocumentAggregationStock(disparity, inputPriceChangeDisparity, departmentStore, 'Отдел магазина');
@defineDocumentAggregationPosted(disparity, inputPriceChangeDisparity);

@defineDocumentAggregationHeaderDescription(disparity, inputPriceChangeDisparity);

@defineDocumentAggregationDetailSkuPrefix(disparity, inputPriceChangeDisparity, item, input);
quantityInputPriceChangeDisparityDetail 'Количество' (inputPriceChangeDisparityDetail) = inputBalanceBeforeDisparityDetail(disparityDetailInputPriceChangeDisparityDetail(inputPriceChangeDisparityDetail));

@defineDocumentAggregationDetailPricePrefix(disparity, inputPriceChangeDisparity, input, , );
@defineDocumentAggregationDetailPricePrefix(disparity, inputPriceChangeDisparity, inputCur, cur, ' (тек.)');
//curRetailPriceInputPriceChangeDisparityDetail 'Розничная цена (тек.)' (inputPriceChangeDisparityDetail) = inputCurRetailPriceDisparityDetail(disparityDetailInputPriceChangeDisparityDetail(inputPriceChangeDisparityDetail));

numberDisposalInputPriceChangeDisparity '№ распоряжения на переоценку' (inputPriceChangeDisparity) = numberDisposalDisparity(disparityInputPriceChangeDisparity(inputPriceChangeDisparity));
priceChangeCommitteeInputPriceChangeDisparity 'Комиссия переоценки ИД' (inputPriceChangeDisparity) = priceChangeCommitteeDisparity(disparityInputPriceChangeDisparity(inputPriceChangeDisparity));

numberInputPriceChangeDisparity 'Номер документа' (inputPriceChangeDisparity) = numberObject(disparityInputPriceChangeDisparity(inputPriceChangeDisparity));
seriesInputPriceChangeDisparity 'Серия документа' (inputPriceChangeDisparity) = seriesObject(disparityInputPriceChangeDisparity(inputPriceChangeDisparity));
seriesNumberInputPriceChangeDisparity 'Серия/номер документ' (inputPriceChangeDisparity) = seriesNumberObject(disparityInputPriceChangeDisparity(inputPriceChangeDisparity));

@implementPriceChangeDocument(inputPriceChangeDisparity, item);
@implementPriceChangeDocumentDetailAllPrice(inputPriceChangeDisparity);

// ---------------------------------- Переоценка при пересорте ------------------------------------------

CLASS priceChangeDisparity 'Переоценка при пересортице' : priceChangeDocument;
CLASS priceChangeDisparityDetail 'Строка переоценки при пересортице' : priceChangeDocumentDetail;

needToPriceChangeDisparityDetail (disparityDetail) = retailPriceDisparityDetail(disparityDetail) != inputRetailPriceDisparityDetail(disparityDetail) AND
                                                     inputQuantityDisparityDetail(disparityDetail) > 0;

@defineDocumentPriceChange(disparity);
@defineDocumentPriceChangeNumber(disparity);
@defineDocumentPriceChangeSkuPrefix(disparity, item, input);
quantityPriceChangeDisparityDetail 'Количество' (priceChangeDisparityDetail) = inputQuantityDisparityDetail(disparityDetailPriceChangeDisparityDetail(priceChangeDisparityDetail));

@defineDocumentPriceChangePricePrefix(disparity, , input, );
@defineDocumentPriceChangePricePrefix(disparity, cur , , ' (тек.)');

@implementPriceChangeDocument(priceChangeDisparity, item);
@implementPriceChangeDocumentDetailAllPrice(priceChangeDisparity);

needPriceChangeDisparityDetail (disparityDetail) = UNION OVERRIDE needToInputPriceChangeDisparityDetail (disparityDetail), needToPriceChangeDisparityDetail (disparityDetail);

showPriceChangeDisparity 'Отображать комиссию при пересорте' (disparity) = GROUP SUM 1 IF needPriceChangeDisparityDetail(disparityDetail) BY disparityDisparityDetail(disparityDetail);

//------------------------------------- Ведомость расчета естественной убыли ----------------------------------//

CLASS naturalLoss 'Ведомость естественной убыли' : historyObject, externalObject, numberedObject;
CLASS naturalLossDetail 'Строка ведомости естественной убыли': externalObject;
CLASS naturalLossPosted 'Проведенная ведомость естественной убыли' : naturalLoss, postedObject;

@defineDocument(naturalLoss);
@defineDocumentDepartmentStore(naturalLoss);
@defineDocumentPosted(naturalLoss);

@defineDocumentDetailSkuItem(naturalLoss);

@defineDocumentDetailQuantity(naturalLoss);
@defineDocumentDetailBasePrice(naturalLoss, departmentStore);

@defineDocumentHeaderQuantity(naturalLoss);

dateFromNaturalLoss 'с' = DATA DATE (naturalLoss) IN documentPrmGroup;
dateToNaturalLoss 'по' = DATA DATE (naturalLoss) IN documentPrmGroup;

dateFromNaturalLossDetail 'с' (naturalLossDetail) = dateFromNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail));
dateToNaturalLossDetail 'по' (naturalLossDetail) = dateToNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail));

subNaturalLossItemGroupNaturalLossDetail = DATA subNaturalLossItemGroup(naturalLossDetail);
nameSubNaturalLossItemGroupNaturalLossDetail 'Группа естественной убыли' =
    name(subNaturalLossItemGroupNaturalLossDetail(naturalLossDetail));
codeNaturalLossDetail 'Код нормы естественной убыли' =
    codeSubNaturalLossItemGroup(groupNaturalLossItem(itemNaturalLossDetail(naturalLossDetail)));
percentNaturalLossDetail 'Норма естественной убыли, %' = DATA NUMERIC[10,3] (naturalLossDetail);

subNaturalDetailNaturalLossDetail = DATA subNaturalLossItemGroupDetail(naturalLossDetail);
nameSubNaturalDetailNaturalLossDetail 'Период' (naturalLossDetail) =
    castIntervalNaturalLoss(subNaturalDetailNaturalLossDetail(naturalLossDetail));

castTwoObjectsToString150 = FORMULA STRING[150] 'CAST($1 AS TEXT) || \'  \' || CAST($2 AS TEXT)';
castNameSubNaturalLossItemGroup 'Группа естественной убыли' (naturalLossDetail) =
    castTwoObjectsToString150(nameSubNaturalLossItemGroupNaturalLossDetail(naturalLossDetail),
                              nameSubNaturalDetailNaturalLossDetail(naturalLossDetail));

quantityLossNaturalLossDetail 'Кол-во' = DATA NUMERIC[14,3] (naturalLossDetail);
//supplierSumLossNaturalLossDetail 'Сумма поставщика, руб.' = DATA NUMERIC[16,2] (naturalLossDetail);
//retailSumLossNaturalLossDetail 'Розничная сумма, руб' = DATA NUMERIC[16,2] (naturalLossDetail);
//supplierSumNaturalLossDetail 'Сумма поставщика, руб.' = DATA NUMERIC[16,2] (naturalLossDetail);
//retailSumNaturalLossDetail 'Розничная сумма, руб.' = DATA NUMERIC[16,2] (naturalLossDetail);

supplierPriceNaturalLossDetail(naturalLossDetail) <- supplierPriceBSkuDepartmentStoreDateTime(
                                                        itemNaturalLossDetail(naturalLossDetail),
                                                        departmentStoreNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail)),
                                                        dateTimeNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail)))
    WHEN CHANGED(itemNaturalLossDetail(naturalLossDetail));

retailPriceNaturalLossDetail(naturalLossDetail) <- retailPriceBSkuDepartmentStoreDateTime(
                                                        itemNaturalLossDetail(naturalLossDetail),
                                                        departmentStoreNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail)),
                                                        dateTimeNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail)))
    WHEN CHANGED(itemNaturalLossDetail(naturalLossDetail));

retailSumLossNaturalLossDetail 'Розничная сумма, руб' (naturalLossDetail) = round0(retailPriceNaturalLossDetail(naturalLossDetail) * quantityLossNaturalLossDetail(naturalLossDetail));
supplierSumLossNaturalLossDetail 'Сумма поставщика, руб.' (naturalLossDetail) = round0(supplierPriceNaturalLossDetail(naturalLossDetail) * quantityLossNaturalLossDetail(naturalLossDetail));
supplierSumNaturalLossDetail 'Сумма поставщика, руб.' (naturalLossDetail)  = round0(supplierPriceNaturalLossDetail(naturalLossDetail) * quantityNaturalLossDetail(naturalLossDetail));
retailSumNaturalLossDetail 'Розничная сумма, руб.' (naturalLossDetail) = round0(retailPriceNaturalLossDetail(naturalLossDetail) * quantityNaturalLossDetail(naturalLossDetail));

@defineDocumentHeaderRetailSum(naturalLoss);

invoiceSumNaturalLossDetailNaturalLoss 'Сумма поставщика' (naturalLoss) =
    GROUP SUM supplierSumNaturalLossDetail(naturalLossDetail) BY naturalLossNaturalLossDetail(naturalLossDetail) IN documentSumGroup PERSISTENT;

quantitySoldItemDepartmentNaturalLoss 'Продано' (item, departmentStore, dateFrom, dateTo, subNaturalLossItemGroupDetail) =
    GROUP SUM quantitySalesLedger(ledger) AND dateSalesLedger(ledger) >= (dateFrom AS DATE) AND dateSalesLedger(ledger) <= (dateTo AS DATE)
              AND inIntervalNaturalLoss(dateSalesLedger(ledger), subNaturalLossItemGroupDetail)
              AND groupNaturalLossItem(skuSalesLedger(ledger)) == subNaturalLossItemGroupSubNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail)
              BY skuSalesLedger(ledger), stockSalesLedger(ledger), dateFrom, dateTo, subNaturalLossItemGroupDetail;

toFillNaturalLossDetail 'Заполнить ведомость естественной убыли' = ACTION (naturalLoss) {
    FOR quantitySoldItemDepartmentNaturalLoss(item,
                                              departmentStoreNaturalLoss(naturalLoss),
                                              dateFromNaturalLoss(naturalLoss),
                                              dateToNaturalLoss(naturalLoss),
                                              subNaturalLossItemGroupDetail) ORDER nameAttributeItem(item), subNaturalLossItemGroupDetail
        DO {
        ADDOBJ naturalLossDetail;
        FOR d == addedObject() DO {
            SET itemNaturalLossDetail(d) <- item AS item;
            SET subNaturalLossItemGroupNaturalLossDetail(d) <- groupNaturalLossItem(item AS item);
            SET quantityLossNaturalLossDetail(d) <- quantitySoldItemDepartmentNaturalLoss(
                                                                    item AS item,
                                                                    departmentStoreNaturalLoss(naturalLoss),
                                                                    dateFromNaturalLoss(naturalLoss),
                                                                    dateToNaturalLoss(naturalLoss),
                                                                    subNaturalLossItemGroupDetail AS subNaturalLossItemGroupDetail);
            SET subNaturalDetailNaturalLossDetail(d) <- subNaturalLossItemGroupDetail AS subNaturalLossItemGroupDetail;
            SET percentNaturalLossDetail(d) <- percentNaturalLossItemGroupDetail(subNaturalLossItemGroupDetail AS subNaturalLossItemGroupDetail);
            SET quantityNaturalLossDetail (d) <- percentNaturalLossDetail(d) * quantityLossNaturalLossDetail(d) /100;
        };
    };
} IN documentPrmGroup CONFIRM;

FORM naturalLossPrint 'Ведомость естественной убыли' PRINT
    OBJECTS s=naturalLoss FIXED PANEL
    PROPERTIES(s) READONLY SELECTOR numberObject, nameDepartmentStoreNaturalLoss, timeNaturalLoss, seriesObject,
                           dateNaturalLoss, dateFromNaturalLoss, dateToNaturalLoss,
                           quantityNaturalLossDetailNaturalLoss, invoiceSumNaturalLossDetailNaturalLoss,
                           retailSumNaturalLossDetailNaturalLoss, noteNaturalLoss
    OBJECTS d=naturalLossDetail
    PROPERTIES(d) READONLY indexNaturalLossDetail, nameAttributeItemNaturalLossDetail, codeNaturalLossDetail,
                           shortNameUOMItemNaturalLossDetail, quantityLossNaturalLossDetail,
                           supplierPriceNaturalLossDetail, retailPriceNaturalLossDetail, supplierSumLossNaturalLossDetail,
                           retailSumLossNaturalLossDetail, nameSubNaturalLossItemGroupNaturalLossDetail,
                           nameSubNaturalDetailNaturalLossDetail, castNameSubNaturalLossItemGroup, percentNaturalLossDetail,
                           quantityNaturalLossDetail, supplierSumNaturalLossDetail, retailSumNaturalLossDetail

    FILTERS inNaturalLossNaturalLossDetail(s, d)
;

toPrintNaturalLoss 'Ведомость естественной убыли' (naturalLoss) = ACTION FORM naturalLossPrint OBJECTS s IMAGE 'print.png' IN printGroup;

FORM naturalLoss 'Ведомость естественной убыли'
    OBJECTS s=naturalLoss FIXED PANEL
    PROPERTIES(s) objectClassName, numberObject, nameDepartmentStoreNaturalLoss, timeNaturalLoss, seriesObject,
                  dateNaturalLoss, dateFromNaturalLoss, dateToNaturalLoss, toFillNaturalLossDetail,
                  quantityNaturalLossDetailNaturalLoss, invoiceSumNaturalLossDetailNaturalLoss,
                  retailSumNaturalLossDetailNaturalLoss, noteNaturalLoss
    OBJECTS d=naturalLossDetail
    PROPERTIES(d) indexNaturalLossDetail, nameAttributeItemNaturalLossDetail, codeNaturalLossDetail,
                  quantityLossNaturalLossDetail, supplierPriceNaturalLossDetail, retailPriceNaturalLossDetail,
                  supplierSumLossNaturalLossDetail, retailSumLossNaturalLossDetail,
                  nameSubNaturalLossItemGroupNaturalLossDetail, shortNameUOMItemNaturalLossDetail,
                  nameSubNaturalDetailNaturalLossDetail, percentNaturalLossDetail,
                  quantityNaturalLossDetail, supplierSumNaturalLossDetail, retailSumNaturalLossDetail, ADDOBJ, delete

    FILTERS inNaturalLossNaturalLossDetail(s, d)

    EVENTS
        ON OK EXEC prePostNaturalLoss(s)

    EDIT naturalLoss OBJECT s
;

DESIGN naturalLoss FROM DEFAULT{

    NEW header.box  BEFORE d.box{
        childConstraints = TO THE RIGHT;

        NEW headerCol1 {
            childConstraints = TO THE BOTTOM;

            ADD s.documentHeaderGroup {
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(objectClassName);
                ADD PROPERTY(nameDepartmentStoreNaturalLoss);
                ADD PROPERTY(numberObject);
                ADD PROPERTY(seriesObject);
                ADD PROPERTY(dateNaturalLoss);
                ADD PROPERTY(timeNaturalLoss);
            };

            NEW headerCol1Row2 {
                childConstraints = TO THE RIGHT;
                ADD s.documentPrmGroup {
                }
            }

            ADD PROPERTY(noteNaturalLoss);
        }

        ADD s.documentSumGroup {
            childConstraints = TO THE BOTTOM;
        }
        PROPERTY(formOkAction) {
            caption = 'Провести';
        }
    }
}

FORM naturalLosses 'Ведомости естественной убыли'
    OBJECTS s=naturalLoss
    PROPERTIES(s) READONLY numberObject, seriesObject, dateNaturalLoss, timeNaturalLoss,
                           nameDepartmentStoreNaturalLoss, dateFromNaturalLoss, dateToNaturalLoss,
                           quantityNaturalLossDetailNaturalLoss, invoiceSumNaturalLossDetailNaturalLoss,
                           retailSumNaturalLossDetailNaturalLoss, noteNaturalLoss
    PROPERTIES(s) toPrintNaturalLoss FORCE PANEL
    PROPERTIES(s) ADDFORM, EDITFORM, delete FORCE PANEL DRAWTOTOOLBAR
    PROPERTIES(s) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed
    OBJECTS d=naturalLossDetail
    PROPERTIES(d) READONLY indexNaturalLossDetail, nameAttributeItemNaturalLossDetail, codeNaturalLossDetail,
                           shortNameUOMItemNaturalLossDetail, quantityLossNaturalLossDetail,
                           supplierPriceNaturalLossDetail, retailPriceNaturalLossDetail, supplierSumLossNaturalLossDetail,
                           retailSumLossNaturalLossDetail, nameSubNaturalLossItemGroupNaturalLossDetail,
                           percentNaturalLossDetail, quantityNaturalLossDetail,
                           supplierSumNaturalLossDetail, retailSumNaturalLossDetail

    FILTERS inNaturalLossNaturalLossDetail(s, d)
;

DESIGN naturalLosses FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD s.box;
        ADD d.box;
    }

    PROPERTY (delete(s)) {
        askConfirm = TRUE;
    }

    ADD s.printGroup{
        childConstraints = TO THE BOTTOM;
    }

    ADD s.historyGroup{
        childConstraints = TO THE BOTTOM;
    }

    ADD s.postedGroup{
        childConstraints = TO THE BOTTOM;
    }

    POSITION s.postedGroup TO THE RIGHT s.historyGroup;
    POSITION s.printGroup TO THE BOTTOM s.postedGroup;
    POSITION s.printGroup TO THE BOTTOM s.historyGroup;

    ADD functions.box;
}

// --------------------------------------- Печать ценников ---------------------------------------- //

labelTypeBarcodeDepartmentStoreDate (barcode, departmentStore, date) += labelBarcodeDepartmentStoreDate(barcode, departmentStore, date);
countLabelBarcodeDepartmentStoreDate (barcode, departmentStore, date) += valOverMultiplierBarcodeDepartmentDate(barcode, departmentStore, date);

nameCountryItemBarcode = nameCountryItem(skuBarcode(barcode));
@defineLabelTransactionAttribute(country, 'Страна', STRING[255], nameCountryItem);

nameManufacturerItemBarcode = nameManufacturerItem(skuBarcode(barcode));
@defineLabelTransactionAttribute(manufacturer, 'Производитель', STRING[255], nameManufacturerItem);

//----------------------------------- Формы поступления товара -------------------------------------------------------
toShowPriceImporterShipment 'Есть оптовая надбавка' (shipment) = DATA BOOLEAN (shipment) IN documentPrmGroup;

quantityMarkupDetailsShipment 'Количество строк с оптовой надбавкой' (shipment) = GROUP SUM 1
    IF supplierMarkupShipmentDetail(shipmentDetail) BY shipmentShipmentDetail(shipmentDetail);

quantityMarkupDetailsShipment(shipment) => toShowPriceImporterShipment(shipment) RESOLVE FALSE;

toShowWareShipment 'Есть стеклопосуда' (shipment) = DATA BOOLEAN (shipment) IN documentPrmGroup;
toShowPapersShipment 'Документы качества' (shipment) = DATA BOOLEAN (shipment) IN documentPrmGroup;

quantityWareDetailsShipment 'Количество строк с посудой' (shipment) = GROUP SUM 1
    IF wareShipmentDetail(shipmentDetail) BY shipmentShipmentDetail(shipmentDetail);

quantityWareDetailsShipment(shipment) => toShowWareShipment(shipment) RESOLVE FALSE;

// --------------------------- Печатная форма с/ф ---------------------------------

FORM specificationPrint 'Счет-фактура' PRINT
    OBJECTS sp=specification FIXED PANEL
    PROPERTIES (sp) SELECTOR seriesNumberObject, nameDepartmentStoreSpecification, dateSpecification, dateToSpecification,
                    fullNameCustomerSpecification, UNPCustomerSpecification, addressCustomerSpecification,
                    numberAccountCustomerSpecification, nameBankAccountCustomerSpecification, addressBankAccountCustomerSpecification,
                    MFOBankAccountCustomerSpecification, departmentBankAccountCustomerSpecification, CBUBankAccountCustomerSpecification,
                    fullNameLegalEntitySpecification, addressLegalEntitySpecification, UNPLegalEntitySpecification,
                    numberAccountLegalEntitySpecification, nameBankAccountLegalEntitySpecification, addressBankAccountLegalEntitySpecification,
                    MFOBankAccountLegalEntitySpecification, departmentBankAccountLegalEntitySpecification, CBUBankAccountLegalEntitySpecification,
                    nameObjectiveAcquiringSpecification, noteSpecification, phoneCustomerSpecification, phoneLegalEntitySpecification,
                    quantitySpecificationDetailSpecification, calcSaleSumSpecificationDetailSpecification, calcVATSumSpecificationDetailSpecification, retailSumSpecificationDetailSpecification

    OBJECTS d=specificationDetail
    PROPERTIES (d) READONLY indexSpecificationDetail, idBarcodeSkuSpecificationDetail, nameAttributeItemSpecificationDetail,
                            shortNameUOMItemSpecificationDetail, quantitySpecificationDetail,
                            retailPriceSpecificationDetail, calcSaleSumSpecificationDetail, numberCalcRangeSpecificationDetail, dataCalcRangeSpecificationDetail,
                            calcVATSumSpecificationDetail, retailSumSpecificationDetail

    FILTERS inSpecificationSpecificationDetail(sp, d)
;

toPrintSpecification 'Счет-фактура'(specification) = ACTION FORM specificationPrint OBJECTS sp IMAGE 'print.png' IN printGroup;

//------------------------------------------- Пересорт товара----------------------------------------------------//

quantityDisparityDetailItemDisparity 'Кол-во для закачки в оборудование (приход)' (item, disparity) = GROUP SUM inputQuantityDisparityDetail(disparityDetail) BY inputItemDisparityDetail(disparityDetail), disparityDisparityDetail(disparityDetail);

printPriceChangeDisparity 'Акт переоценки (приход)' (disparity) = printPriceChange(priceChangeDisparityDisparity(disparity)) IN printGroup;
printInputPriceChangeDisparity 'Акт переоценки (остатки)' (disparity) = printPriceChange(inputPriceChangeDisparityDisparity(disparity)) IN printGroup;

FORM disparity 'Пересортица'

    OBJECTS dis=disparity FIXED PANEL

    PROPERTIES(dis) objectClassName, nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, nameDepartmentStoreDisparity,
                    dateDisparity, timeDisparity,
                    quantityDisparityDetailDisparity, retailSumDisparityDetailDisparity,
                    inputQuantityDisparityDetailDisparity, inputRetailSumDisparityDetailDisparity,
                    numberDisposalDisparity SHOWIF showPriceChangeDisparity(dis),
                    namePriceChangeCommitteeDisparity SHOWIF showPriceChangeDisparity(dis)

    OBJECTS d = disparityDetail
    PROPERTIES(d)   indexDisparityDetail,
                    idBarcodeSkuDisparityDetail, nameAttributeItemDisparityDetail, shortNameUOMItemDisparityDetail,
                    quantityDisparityDetail, retailPriceDisparityDetail, retailSumDisparityDetail,
                    inputIdBarcodeSkuDisparityDetail, inputNameAttributeItemDisparityDetail, inputShortNameUOMItemDisparityDetail,
                    inputQuantityDisparityDetail, inputRetailPriceDisparityDetail, inputRetailSumDisparityDetail
    PROPERTIES(d)   ADDOBJ, delete

    PROPERTIES(dis) TODRAW d addDetailDialogSkuStockDisparityDetailDisparity, addDetailDialogTerminalDisparityDetailDisparity,
                             addDetailInputBarcodeDisparityDetailDisparity, deleteDisparityDetailDisparity

    PROPERTIES (d)  FORCE PANEL importerPriceDisparityDetail, supplierPriceDisparityDetail, nameWareDisparityDetail,
                                warePriceDisparityDetail, valueRetailVATDisparityDetail, balanceBeforeDisparityDetail,
                                inputCurImporterPriceDisparityDetail, inputCurSupplierPriceDisparityDetail, inputCurNameWareDisparityDetail,
                                inputCurWarePriceDisparityDetail, inputCurValueRetailVATDisparityDetail, inputCurRetailPriceDisparityDetail,
                                inputImporterPriceDisparityDetail, inputSupplierPriceDisparityDetail, inputNameWareDisparityDetail,
                                inputWarePriceDisparityDetail, inputValueRetailVATDisparityDetail, inputBalanceBeforeDisparityDetail

    FILTERS         disparityDisparityDetail(d) == dis

    EVENTS
        ON OK EXEC prePostDisparity(dis)

    EDIT disparity OBJECT dis
;

DESIGN disparity FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW header.box{
            childConstraints = TO THE RIGHT;
            NEW caseTwo {
                childConstraints = TO THE BOTTOM;
                ADD dis.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(objectClassName);
                    ADD PROPERTY(nameDepartmentStoreDisparity);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateDisparity);
                    ADD PROPERTY(timeDisparity);
                }
                ADD dis.documentPrmGroup{
                }
            }
                ADD dis.documentSumGroup {
                    childConstraints = TO THE BOTTOM;
                }

        }

        ADD d.box {
            childConstraints = TO THE BOTTOM;
            title = 'Ценовый и количественные показатели';

            NEW row {
                childConstraints = TO THE RIGHT;
                title = 'Расход';
                ADD PROPERTY (importerPriceDisparityDetail);
                ADD PROPERTY (supplierPriceDisparityDetail);
                ADD PROPERTY (nameWareDisparityDetail);
                ADD PROPERTY (warePriceDisparityDetail);
                ADD PROPERTY (valueRetailVATDisparityDetail);
                ADD PROPERTY (balanceBeforeDisparityDetail);
            }

            NEW row1 {
                title = 'Приход';
                childConstraints = TO THE RIGHT;

                NEW row11{
                    fillHorizontal = 1;
                    childConstraints = TO THE BOTTOM;
                    title = 'Цены (приход) текущие';
                    ADD PROPERTY (inputCurImporterPriceDisparityDetail);
                    ADD PROPERTY (inputCurSupplierPriceDisparityDetail);
                    ADD PROPERTY (inputCurNameWareDisparityDetail);
                    ADD PROPERTY (inputCurWarePriceDisparityDetail);
                    ADD PROPERTY (inputCurValueRetailVATDisparityDetail);
                    ADD PROPERTY (inputCurRetailPriceDisparityDetail);
                }
                NEW row12{
                    fillHorizontal = 1;
                    childConstraints = TO THE BOTTOM;
                    title = 'Цены (приход) новые';
                    ADD PROPERTY (inputImporterPriceDisparityDetail);
                    ADD PROPERTY (inputSupplierPriceDisparityDetail);
                    ADD PROPERTY (inputNameWareDisparityDetail);
                    ADD PROPERTY (inputWarePriceDisparityDetail);
                    ADD PROPERTY (inputValueRetailVATDisparityDetail);
                    ADD PROPERTY (inputBalanceBeforeDisparityDetail);
                }
            }
        }
        ADD functions.box;
        PROPERTY(formOkAction) {
            caption = 'Провести';
        }
    }
}

FORM disparities 'Пересортицы'

    OBJECTS dis=disparity
    PROPERTIES(dis)  READONLY objectClassName, numberObject, seriesObject, nameDepartmentStoreDisparity, dateDisparity, timeDisparity,
                              countDisparityDetailDisparity, quantityDisparityDetailDisparity, retailSumDisparityDetailDisparity,
                              inputQuantityDisparityDetailDisparity, inputRetailSumDisparityDetailDisparity

    PROPERTIES(dis)  READONLY FORCE PANEL timeCreated, nameUserCreated, hostnameComputerCreated, timeClosed, nameUserClosed, hostnameComputerClosed

    PROPERTIES (dis) printPriceChangeDisparity FORCE PANEL SHOWIF needToPriceChangeDisparity(dis),
                     printInputPriceChangeDisparity FORCE PANEL SHOWIF needToInputPriceChangeDisparity(dis),
                     ADDFORM, EDITFORM, delete FORCE PANEL DRAWTOTOOLBAR

    OBJECTS d=disparityDetail
    PROPERTIES(d)   READONLY indexDisparityDetail,
                    idBarcodeSkuDisparityDetail, nameAttributeItemDisparityDetail, shortNameUOMItemDisparityDetail,
                    quantityDisparityDetail, retailPriceDisparityDetail, retailSumDisparityDetail,
                    inputIdBarcodeSkuDisparityDetail, inputNameAttributeItemDisparityDetail, inputShortNameUOMItemDisparityDetail,
                    inputQuantityDisparityDetail, inputRetailPriceDisparityDetail, inputRetailSumDisparityDetail

    FILTERS         disparityDisparityDetail(d) == dis
;
DESIGN disparities FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD dis.box {
            PROPERTY(objectClassName) {
                preferredCharWidth = 25;
            }
            PROPERTY (delete(dis)) {
                askConfirm = TRUE;
            }
        }
        ADD d.box;
    }

    NEW caseOne {
        childConstraints = TO THE RIGHT;
        ADD dis.historyGroup {
            childConstraints = TO THE BOTTOM;
        }
        ADD dis.postedGroup {
            childConstraints = TO THE BOTTOM;
        }
        ADD dis.printGroup {
            childConstraints = TO THE BOTTOM;
        }
    }

    ADD functions.box;
}

@Label.implementPriceTransactionDocument(disparity);
@defineDocumentLabelTransaction(disparity, item, departmentStore);
@extendFormDocumentLabelTransaction(disparities, dis, disparity);

@Machinery.implementPriceTransactionDocument(disparity);
@defineDocumentMachineryPriceTransaction(disparity, item, departmentStore);
@extendFormDocumentMachineryPriceTransaction(disparities, dis, disparity);

//------------------------------------------- Приход товара----------------------------------------------------//

printPriceChangeShipment 'Акт переоценки' (shipment) = printPriceChange(priceChangeShipmentShipment(shipment)) IN printGroup;

FORM shipment 'Поставка'
    OBJECTS s=shipment FIXED PANEL
    PROPERTIES (s) objectClassName, nameDepartmentStoreShipment, numberObject, seriesObject, dateShipment, timeShipment,
                   nameCurrencyShipment, nameSupplierShipment, UNPSupplierShipment, numberContractShipment,
                   carryingChargesShipment, quantityShipmentDetailShipment, invoiceVATSumShipmentDetailShipment, invoiceSumShipmentDetailShipment, retailSumShipmentDetailShipment,
                   noteShipment, toShowPriceImporterShipment, toShowWareShipment, toShowPapersShipment, nameRegisterCommitteeShipment, numberDisposalShipment SHOWIF needToPriceChangeShipment(s),
                   namePriceChangeCommitteeShipment SHOWIF needToPriceChangeShipment(s)

    OBJECTS d=shipmentDetail
    PROPERTIES (d)  indexShipmentDetail, idBarcodeSkuShipmentDetail, nameAttributeItemShipmentDetail, quantityShipmentDetail,
                    supplierPriceShipmentDetail, supplierMarkupShipmentDetail SHOWIF toShowPriceImporterShipment(s),
                    importerPriceShipmentDetail READONLY SHOWIF toShowPriceImporterShipment(s), expiryDateShipmentDetail,
                    balanceBeforeShipmentShipmentDetail, numberSupplierVATShipmentDetail, valueSupplierVATShipmentDetail,
                    supplierVATISumShipmentDetail, invoiceISumShipmentDetail, nameWareShipmentDetail SHOWIF toShowWareShipment(s),
                    warePriceShipmentDetail SHOWIF toShowWareShipment(s), numberRetailVATShipmentDetail, valueRetailVATShipmentDetail,
                    retailMarkupShipmentDetail, curRetailPriceShipmentDetail, retailPriceShipmentDetail,
                    numberCustomsCertificateShipmentDetail SHOWIF toShowPapersShipment(s),  numberCertificateGGRShipmentDetail SHOWIF toShowPapersShipment(s),
                    numberCertificateConformityShipmentDetail SHOWIF toShowPapersShipment(s), numberStateExaminationShipmentDetail SHOWIF toShowPapersShipment(s),
                    ADDOBJ, delete
    PROPERTIES (d) FORCE PANEL isFixPriceShipmentDetail,
                               controlExpiryItemShipmentDetail, isWeightItemShipmentDetail,
                               nameCountryItemShipmentDetail,
                               curImporterPriceShipmentDetail, curSupplierPriceShipmentDetail, curValueRetailVATShipmentDetail, curNameWareShipmentDetail SHOWIF inWareShipmentDetail(d),
                               valueWareRangeShipmentDetail SHOWIF inWareShipmentDetail(d), curWarePriceShipmentDetail SHOWIF inWareShipmentDetail(d)

    PROPERTIES(s) TODRAW d addDetailDialogSkuShipmentDetailShipment, addDetailDialogTerminalShipmentDetailShipment,
                           addDetailInputBarcodeShipmentDetailShipment, deleteShipmentDetailShipment

    FILTERS inShipmentShipmentDetail(s, d)

    HINTNOUPDATE LIST isPostedShipment,
                  balanceBSkuStockDateTime, importerPriceBSkuDepartmentStoreDateTime, wareBSkuDepartmentStoreDateTime, warePriceBSkuDepartmentStoreDateTime,
                  retailVATBSkuDepartmentStoreDateTime, retailPriceBSkuDepartmentStoreDateTime, supplierPriceBSkuDepartmentStoreDateTime

    EVENTS
        ON OK EXEC prePostShipment(s)

    EDIT shipment OBJECT s
;


DESIGN shipment FROM DEFAULT{
    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }
    main{
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            type = TABBED;
            ADD d.box {
                childConstraints = TO THE BOTTOM;
                title = 'Спецификация';
                ADD d.itemDetailGroup;
                ADD d.priceDetailGroup;
            }
        };

        NEW case1 BEFORE specification.box{
            childConstraints = TO THE RIGHT;
            NEW row1 {
            childConstraints = TO THE RIGHTBOTTOM;
                title = 'Колонки';
                ADD PROPERTY (toShowPriceImporterShipment(s));
                ADD PROPERTY (toShowWareShipment(s));
                ADD PROPERTY (toShowPapersShipment(s));
            }
            NEW row2 {
            childConstraints = TO THE RIGHTBOTTOM;
                title = 'Параметры';
                ADD PROPERTY (nameRegisterCommitteeShipment(s));
                ADD PROPERTY (noteShipment(s));
            }
            NEW row3 {
            childConstraints = TO THE RIGHTBOTTOM;
                title = 'Переоценка';
                ADD PROPERTY (namePriceChangeCommitteeShipment(s));
                ADD PROPERTY (numberDisposalShipment(s));
            }
        }

        NEW header.box BEFORE case1 {
            childConstraints = TO THE RIGHT;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;

                ADD s.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(objectClassName);
                    ADD PROPERTY(nameDepartmentStoreShipment);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateShipment);
                    ADD PROPERTY(timeShipment);
                }

                NEW headerCol1Row2 {
                    childConstraints = TO THE RIGHT;
                    ADD s.documentPrmGroup {
                        title = 'Поставщик';
                        childConstraints = TO THE BOTTOM;
                    }
                }
            }

            ADD s.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
        PROPERTY(formOkAction) {
            caption = 'Провести';
        }
    }
}

FORM shipments 'Поставки'
    OBJECTS s=shipment
    PROPERTIES (s) READONLY objectClassName, numberObject, seriesObject, dateShipment, timeShipment, nameDepartmentStoreShipment,
                            nameSupplierShipment, countShipmentDetailShipment, supplierSumShipmentDetailShipment, invoiceVATSumShipmentDetailShipment,
                            invoiceSumShipmentDetailShipment, retailSumShipmentDetailShipment

    PROPERTIES (s) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES (s)          printPriceChangeShipment FORCE PANEL SHOWIF needToPriceChangeShipment(s), printListRegister FORCE PANEL,
                            ADDFORM, EDITFORM, delete FORCE PANEL DRAWTOTOOLBAR

    OBJECTS d=shipmentDetail
    PROPERTIES (d) READONLY  indexShipmentDetail, idBarcodeSkuShipmentDetail, nameAttributeItemShipmentDetail, quantityShipmentDetail,
                             supplierPriceShipmentDetail, supplierMarkupShipmentDetail, importerPriceShipmentDetail, expiryDateShipmentDetail,
                             balanceBeforeShipmentShipmentDetail, numberSupplierVATShipmentDetail, valueSupplierVATShipmentDetail,
                             supplierVATISumShipmentDetail, invoiceISumShipmentDetail, nameWareShipmentDetail, warePriceShipmentDetail,
                             numberRetailVATShipmentDetail, valueRetailVATShipmentDetail, retailMarkupShipmentDetail,
                             curRetailPriceShipmentDetail, retailPriceShipmentDetail

    FILTERS inShipmentShipmentDetail(s, d)
;

DESIGN shipments FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD s.box;
        ADD d.box;
    }

    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }

    PROPERTY (delete(s)) {
        askConfirm = TRUE;
    }

    ADD s.printGroup{
        childConstraints = TO THE BOTTOM;
    }

    ADD s.historyGroup{
        childConstraints = TO THE BOTTOM;
    }
    ADD s.postedGroup{
        childConstraints = TO THE BOTTOM;
    }

    POSITION s.historyGroup TO THE LEFT s.postedGroup;
    POSITION s.postedGroup TO THE LEFT s.printGroup;
    POSITION s.historyGroup TO THE LEFT s.printGroup;

    ADD functions.box;
}

@Label.implementPriceTransactionDocument(shipment);
@defineDocumentLabelTransaction(shipment, item, departmentStore);
@extendFormDocumentLabelTransaction(shipments, s, shipment);

@Machinery.implementPriceTransactionDocument(shipment);
@defineDocumentMachineryPriceTransaction(shipment, item, departmentStore);
@extendFormDocumentMachineryPriceTransaction(shipments, s, shipment);

//-----------------------------------Формы возврата поставщику-------------------------------------------------------

//---------------------------Товарный отчет-------------------------------------//

@extendStockFormAccountDocumentLedger(departmentStore, d);

//---------------- Формы внутреннего перемещения (приход и расход)-------------------------------------//

FORM innerFlow 'Расход в другой отдел'
    OBJECTS f=innerFlow FIXED PANEL
    PROPERTIES (f) objectClassName, numberObject, seriesObject, dateInnerFlow, timeInnerFlow, nameDepartmentStoreInnerFlow,
                   nameRecipientDepartmentInnerFlow, showWareInnerFlow, noteInnerFlow, quantityInnerFlowDetailInnerFlow,
                   retailSumInnerFlowDetailInnerFlow

    PROPERTIES (f) nameTruckConsignment, ownerTruckConsignment, trailerConsignment, nameDriverConsignment, waybillConsignment,
                   namePayerConsignment, shipmentBaseConsignment, addressSupplierStockConsignment, addressCustomerStockConsignment,
                   readdressingConsignment, commonNameIssuanceAllowedConsignment, commonNameIssuanceExecutedConsignment,
                   forwarderConsignment, warrantConsignment, warrantHolderConsignment, goodsAcceptedConsignment,
                   commonNameLoadingExecuterConsignment, nameWayOfLoadingConsignment, codeLoadingConsignment,
                   arrivalTimeConsignment, departureTimeConsignment, downtimeConsignment, raceQuantityConsignment,
                   quantityConsignmentDetailConsignment, quantityPackConsignmentDetailConsignment, grossWeightTonConsignmentDetailConsignment,
                   sumConsignmentDetailConsignment, sumVATConsignmentDetailConsignment, sumInvoiceConsignmentDetailConsignment

    OBJECTS d=innerFlowDetail
    PROPERTIES (d) indexInnerFlowDetail, idBarcodeSkuInnerFlowDetail, nameAttributeItemInnerFlowDetail,
                   quantityInnerFlowDetail, importerPriceInnerFlowDetail, supplierPriceInnerFlowDetail, numberRetailVATInnerFlowDetail,
                   valueRetailVATInnerFlowDetail, nameWareInnerFlowDetail SHOWIF showWareInnerFlow(f),
                   warePriceInnerFlowDetail SHOWIF showWareInnerFlow(f),
                   retailPriceInnerFlowDetail, retailSumInnerFlowDetail, ADDOBJ, delete

    PROPERTIES(f) TODRAW d addDetailDialogSkuStockInnerFlowDetailInnerFlow, addDetailDialogTerminalInnerFlowDetailInnerFlow,
                           addDetailInputBarcodeInnerFlowDetailInnerFlow, deleteInnerFlowDetailInnerFlow
    FILTERS inInnerFlowInnerFlowDetail(f, d)

    EVENTS
        ON OK EXEC prePostInnerFlow(f)

    EDIT innerFlow OBJECT f
;

DESIGN innerFlow FROM DEFAULT{
    main{
        preferredSize = (1024, 768);

        NEW specification.box BEFORE functions.box{
            type = TABBED;
            ADD d.box {
                title = 'Спецификация';
                d.grid {
                    fillVertical = 12;
                }
            }
            NEW consignment{
                title = 'Накладная';
                childConstraints = TO THE BOTTOM;

                    childConstraints = TO THE RIGHT;

                ADD f.carConsignmentGroup{
                }
                NEW caseTwo {
                    childConstraints = TO THE BOTTOM;
                    ADD f.issuanceConsignmentGroup {
                    }
                    ADD f.loadingConsignmentGroup{
                    }

                    ADD f.sumConsignmentGroup{
                        childConstraints = TO THE BOTTOM;
                        NEW oneCase {
                            childConstraints = TO THE RIGHT;
                            ADD PROPERTY (quantityConsignmentDetailConsignment);
                            ADD PROPERTY (quantityPackConsignmentDetailConsignment);
                            ADD PROPERTY (grossWeightTonConsignmentDetailConsignment);
                        }
                        NEW twoCase {
                            childConstraints = TO THE RIGHT;
                            ADD PROPERTY (sumConsignmentDetailConsignment);
                            ADD PROPERTY (sumVATConsignmentDetailConsignment);
                            ADD PROPERTY (sumInvoiceConsignmentDetailConsignment);
                        }
                    }
                }
            }
        }

        NEW header.box BEFORE specification.box {
            childConstraints = TO THE RIGHT;

            NEW headerRow1 {
                childConstraints = TO THE BOTTOM;

                ADD f.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(objectClassName);
                    ADD PROPERTY(nameDepartmentStoreInnerFlow);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateInnerFlow);
                    ADD PROPERTY(timeInnerFlow);
                }

                ADD f.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                    POSITION PROPERTY(noteInnerFlow) TO THE RIGHT PROPERTY(showWareInnerFlow);
                }
            }

            ADD f.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
        PROPERTY(formOkAction) {
            caption = 'Провести';
        }
    }
}

FORM innerFlows 'Расходы в другие отделы'
    OBJECTS f=innerFlow
    PROPERTIES (f) READONLY objectClassName, numberObject, seriesObject, dateInnerFlow, timeInnerFlow, nameDepartmentStoreInnerFlow,
                            nameRecipientDepartmentInnerFlow, countInnerFlowDetailInnerFlow,
                            quantityInnerFlowDetailInnerFlow, retailSumInnerFlowDetailInnerFlow

    PROPERTIES(f) FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed
    PROPERTIES (f) FORCE PANEL printConsignmentVerticalA, printConsignmentHorizontalA,
                               printConsignmentVerticalB, printConsignmentHorizontalB,
                               printConsignmentAttach, printConsignmentSimpleHorizontal, printConsignmentSimpleVertical,
                               printConsignmentSimpleAttach, editConsignment

    PROPERTIES (f) ADDFORM, EDITFORM, delete FORCE PANEL DRAWTOTOOLBAR

    OBJECTS d=innerFlowDetail
    PROPERTIES (d) READONLY indexInnerFlowDetail, idBarcodeSkuInnerFlowDetail, nameAttributeItemInnerFlowDetail,
                            quantityInnerFlowDetail, importerPriceInnerFlowDetail, supplierPriceInnerFlowDetail, numberRetailVATInnerFlowDetail,
                            valueRetailVATInnerFlowDetail, nameWareInnerFlowDetail, warePriceInnerFlowDetail,
                            retailPriceInnerFlowDetail, retailSumInnerFlowDetail
    FILTERS inInnerFlowInnerFlowDetail(f, d)
;


DESIGN innerFlows FROM DEFAULT {
    main {
        childConstraints = TO THE BOTTOM;

        NEW topContainer{

            type = SPLITV;

            ADD f.box {
                PROPERTY(objectClassName) {
                    preferredCharWidth = 15;
                }
                PROPERTY (delete(f)) {
                    askConfirm = TRUE;
                }
            }
            ADD d.box;
        }

        NEW footer.container {
            childConstraints = TO THE BOTTOM;

            NEW cont3 {
                childConstraints = TO THE RIGHT;
                ADD f.historyGroup {
                    childConstraints = TO THE BOTTOM;
                }

                ADD f.postedGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }

            ADD f.printGroup {
                childConstraints = TO THE BOTTOM;
                NEW case55{
                    childConstraints = TO THE RIGHT;

                    NEW contOne {
                        title = 'Накладная';
                        ADD PROPERTY(editConsignment);
                    }
                    NEW tn{
                        childConstraints = TO THE RIGHT;
                        title = 'ТН-2';
                        ADD PROPERTY(printConsignmentSimpleVertical);
                        ADD PROPERTY(printConsignmentSimpleHorizontal);
                        ADD PROPERTY(printConsignmentSimpleAttach);
                    }
                }
                NEW ttn1{
                    childConstraints = TO THE RIGHT;
                    title = 'ТТН-1';
                    ADD PROPERTY(printConsignmentVerticalA);
                    ADD PROPERTY(printConsignmentHorizontalA);
                    ADD PROPERTY(printConsignmentVerticalB);
                    ADD PROPERTY(printConsignmentHorizontalB);
                    ADD PROPERTY(printConsignmentAttach);
                }

            }

        }
        ADD functions.box;
    }
}

FORM innerFlowPosted 'Расходы в другие отделы'
    OBJECTS f=innerFlowPosted
    PROPERTIES (f) READONLY objectClassName, numberObject, seriesObject, dateInnerFlow, timeInnerFlow, nameDepartmentStoreInnerFlow,
                            nameRecipientDepartmentInnerFlow, countInnerFlowDetailInnerFlow,
                            quantityInnerFlowDetailInnerFlow, retailSumInnerFlowDetailInnerFlow

    OBJECTS d=innerFlowDetail
    PROPERTIES (d) READONLY indexInnerFlowDetail, idBarcodeSkuInnerFlowDetail, nameAttributeItemInnerFlowDetail,
                            quantityInnerFlowDetail, importerPriceInnerFlowDetail, supplierPriceInnerFlowDetail, numberRetailVATInnerFlowDetail,
                            valueRetailVATInnerFlowDetail, nameWareInnerFlowDetail, warePriceInnerFlowDetail,
                            retailPriceInnerFlowDetail, retailSumInnerFlowDetail
    FILTERS inInnerFlowInnerFlowDetail(f, d)

    DIALOG innerFlowPosted OBJECT f
;

DESIGN innerFlowPosted FROM DEFAULT {

    main {
        preferredSize = (1024, 768);

        NEW topContainer{

            type = SPLITV;
            childConstraints = TO THE BOTTOM;

            ADD f.box;
            ADD d.box;
        }

        PROPERTY(objectClassName) {
            preferredCharWidth = 15;
        }
    }

    ADD functions.box;
}

printPriceChangeInnerArrival 'Акт переоценки' (innerArrival) = printPriceChange(priceChangeInnerArrivalInnerArrival(innerArrival)) IN printGroup;


FORM innerArrival 'Приход из другого отдела'
    OBJECTS a=innerArrival FIXED PANEL
    PROPERTIES (a) objectClassName, nameDepartmentStoreInnerArrival
    PROPERTIES (a) numberInnerArrival SHOWIF departmentStoreInnerArrival(a), seriesInnerArrival SHOWIF departmentStoreInnerArrival(a),
                   dateInnerArrival SHOWIF departmentStoreInnerArrival(a), timeInnerArrival SHOWIF departmentStoreInnerArrival(a),
                   nameSenderDepartmentInnerArrival READONLY SHOWIF departmentStoreInnerArrival(a), toFillInnerArrivalDetailsInnerArrival SHOWIF departmentStoreInnerArrival(a),
                   showWareInnerArrival SHOWIF departmentStoreInnerArrival(a), noteInnerArrival READONLY SHOWIF departmentStoreInnerArrival(a),
                   quantityInnerArrivalDetailInnerArrival SHOWIF departmentStoreInnerArrival(a), retailSumInnerArrivalDetailInnerArrival SHOWIF departmentStoreInnerArrival(a)

    PROPERTIES (a) SHOWIF needToPriceChangeInnerArrival(a) numberDisposalInnerArrival, namePriceChangeCommitteeInnerArrival

    OBJECTS d=innerArrivalDetail
    PROPERTIES (d) SHOWIF innerFlowInnerArrival(a)
                   indexInnerArrivalDetail, idBarcodeSkuInnerArrivalDetail, nameAttributeItemInnerArrivalDetail,
                   quantityInnerArrivalDetail, balanceBeforeInnerArrivalInnerArrivalDetail, importerPriceInnerArrivalDetail,
                   supplierPriceInnerArrivalDetail, numberRetailVATInnerArrivalDetail,
                   valueRetailVATInnerArrivalDetail, nameWareInnerArrivalDetail SHOWIF showWareInnerArrival(a),
                   warePriceInnerArrivalDetail SHOWIF showWareInnerArrival(a), retailPriceInnerArrivalDetail,
                   retailSumInnerArrivalDetail, ADDOBJ, delete
    PROPERTIES (d) FORCE PANEL curImporterPriceInnerArrivalDetail, curSupplierPriceInnerArrivalDetail, curNameWareInnerArrivalDetail,
                   curWarePriceInnerArrivalDetail, curValueRetailVATInnerArrivalDetail, curRetailPriceInnerArrivalDetail

    PROPERTIES(a) TODRAW d addDetailDialogSkuInnerArrivalDetailInnerArrival, addDetailDialogTerminalInnerArrivalDetailInnerArrival,
                           addDetailInputBarcodeInnerArrivalDetailInnerArrival, deleteInnerArrivalDetailInnerArrival

    FILTERS inInnerArrivalInnerArrivalDetail(a, d)

    OBJECTS i=item
    PROPERTIES (i) SHOWIF innerFlowInnerArrival(a) nameAttributeItem
    PROPERTIES (i, a) SHOWIF innerFlowInnerArrival(a) quantityItemInnerFlowInnerArrival, quantityInnerArrivalDetailItemInnerArrival,
                             diffQuantityItemInnerArrival, importerPriceItemInnerArrival, retailPriceItemInnerArrival
    FILTERS quantityInnerArrivalDetailItemInnerArrival(i, a)

    EVENTS
        ON OK EXEC prePostInnerArrival(a)

    EDIT innerArrival OBJECT a
;

DESIGN innerArrival FROM DEFAULT{
    main{
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            type = TABBED;
            ADD d.box {
                childConstraints = TO THE BOTTOM;
                title = 'Спецификация';
                d.priceDetailGroup {
                    childConstraints = TO THE RIGHTBOTTOM;
                }
            };
            ADD i.box;
        };
        NEW header.box BEFORE specification.box {
            childConstraints = TO THE RIGHT;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;

                ADD a.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(objectClassName);
                    ADD PROPERTY(nameDepartmentStoreInnerArrival);
                    ADD PROPERTY(numberInnerArrival);
                    ADD PROPERTY(seriesInnerArrival);
                    ADD PROPERTY(dateInnerArrival);
                    ADD PROPERTY(timeInnerArrival);
                }

                NEW headerCol1Row2 {
                    childConstraints = TO THE RIGHT;

                    ADD a.documentPrmGroup {
                        childConstraints = TO THE BOTTOM;
                        POSITION PROPERTY(noteInnerArrival) TO THE RIGHT PROPERTY(showWareInnerArrival);
                    }

                    NEW headerCol1Actions {
                        title = 'Действия';
                        childConstraints = TO THE BOTTOM;
                        ADD PROPERTY (toFillInnerArrivalDetailsInnerArrival);
                        ADD PROPERTY (deleteInnerArrivalDetailInnerArrival);
                    }
                }
            }

            ADD a.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
        PROPERTY(formOkAction) {
            caption = 'Провести';
        }
    }
}

FORM innerArrivals 'Приходы из других отделов'
    OBJECTS a=innerArrival
    PROPERTIES (a) READONLY objectClassName, numberInnerArrival, seriesInnerArrival, dateInnerArrival, timeInnerArrival, nameDepartmentStoreInnerArrival,
                            nameSenderDepartmentInnerArrival, countInnerArrivalDetailInnerArrival, quantityInnerArrivalDetailInnerArrival, retailSumInnerArrivalDetailInnerArrival

    PROPERTIES (a)          printPriceChangeInnerArrival FORCE PANEL SHOWIF needToPriceChangeInnerArrival(a),
                            printInputListRegister FORCE PANEL,
                            ADDFORM, EDITFORM, delete FORCE PANEL DRAWTOTOOLBAR

    PROPERTIES(a) FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    OBJECTS d=innerArrivalDetail
    PROPERTIES (d) READONLY indexInnerArrivalDetail, idBarcodeSkuInnerArrivalDetail, nameAttributeItemInnerArrivalDetail,
                            quantityInnerArrivalDetail, balanceBeforeInnerArrivalInnerArrivalDetail, importerPriceInnerArrivalDetail,
                            numberRetailVATInnerArrivalDetail, valueRetailVATInnerArrivalDetail, nameWareInnerArrivalDetail,
                            warePriceInnerArrivalDetail, retailPriceInnerArrivalDetail, retailSumInnerArrivalDetail

    FILTERS inInnerArrivalInnerArrivalDetail(a, d)
;

DESIGN innerArrivals FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD a.box{
            PROPERTY(objectClassName) {
                preferredCharWidth = 15;
            }

            PROPERTY (delete(a)) {
                askConfirm = TRUE;
            }
        }
        ADD d.box;
    }

    NEW row {
        childConstraints = TO THE RIGHT;

        ADD a.historyGroup {
            childConstraints = TO THE BOTTOM;
            fillHorizontal = 1;
        }

        ADD a.postedGroup {
            childConstraints = TO THE BOTTOM;
            fillHorizontal = 1;
        }

        ADD a.printGroup {
            childConstraints = TO THE BOTTOM;
            fillHorizontal = 1;
        }
    }

    ADD functions.box;
}

@Label.implementPriceTransactionDocument(innerArrival);
@defineDocumentLabelTransaction(innerArrival, item, departmentStore);
@extendFormDocumentLabelTransaction(innerArrivals, a, innerArrival);

@Machinery.implementPriceTransactionDocument(innerArrival);
@defineDocumentMachineryPriceTransaction(innerArrival, item, departmentStore);
@extendFormDocumentMachineryPriceTransaction(innerArrivals, a, innerArrival);

//------------------------------------формы: Отпуск из розницы-------------------------//

FORM specificationForm 'Отгрузки по данной с/ф'
    OBJECTS sp=specification FIXED PANEL
    PROPERTIES (sp) READONLY seriesObject, numberObject, nameDepartmentStoreSpecification, dateSpecification, timeSpecification,
    dateToSpecification, nameCustomerSpecification, nameObjectiveAcquiringSpecification, noteSpecification,
    quantitySpecificationDetailSpecification, calcSaleSumSpecificationDetailSpecification, calcVATSumSpecificationDetailSpecification, retailSumSpecificationDetailSpecification

    OBJECTS st=statement
    PROPERTIES (st) READONLY seriesNumberObject, dateStatement, nameCustomerStatement, nameDepartmentStoreStatement,
                             noteStatement, quantityStatementDetailStatement, calcVATSumStatementDetailStatement, retailSumStatementDetailStatement

    OBJECTS d=statementDetail
    PROPERTIES (d)  READONLY indexStatementDetail, idBarcodeSkuStatementDetail, nameAttributeItemStatementDetail, quantityStatementDetail,
                             retailPriceStatementDetail, calcSaleSumStatementDetail, numberCalcRangeStatementDetail,
                             dataCalcRangeStatementDetail, calcVATSumStatementDetail,
                             retailSumStatementDetail, noteStatementDetail

    FILTERS inStatementSpecification(st, sp),
            isPostedStatement(st),
            inStatementStatementDetail(st, d)
;

DESIGN specificationForm FROM DEFAULT{
    main {
        preferredSize = (1024, 768);

        NEW case BEFORE functions.box {
            title = 'Накладные на отгрузку по данной с/ф';
            ADD st.box;
            ADD d.box;
        }
        NEW header.box BEFORE case {
            title = 'Счет-фактура';
            childConstraints = TO THE RIGHT;

            NEW headerRow1 {
                childConstraints = TO THE BOTTOM;

                ADD sp.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreSpecification);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateSpecification);
                    ADD PROPERTY(timeSpecification);
                }

                ADD sp.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                    NEW headerRow21 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(nameCustomerSpecification);
                        ADD PROPERTY(nameObjectiveAcquiringSpecification);
                    }
                    NEW headerRow22 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(dateToSpecification);
                        ADD PROPERTY(noteSpecification);
                    }
                }
            }

            ADD sp.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    }
}


dialogSpecificationForm 'Показать отгрузки по данной с/ф' (specification) = ACTION FORM specificationForm OBJECTS sp MODAL TOOLBAR;

FORM specification 'Счет-фактура'
    OBJECTS sp=specification FIXED PANEL
    PROPERTIES (sp) nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, nameDepartmentStoreSpecification,
                    dateSpecification, timeSpecification, dateToSpecification, nameCustomerSpecification, UNPCustomerSpecification,
                    nameObjectiveAcquiringSpecification, noteSpecification,
                    quantitySpecificationDetailSpecification, calcSaleSumSpecificationDetailSpecification, calcVATSumSpecificationDetailSpecification, retailSumSpecificationDetailSpecification

    OBJECTS d=specificationDetail
    PROPERTIES (d) indexSpecificationDetail, idBarcodeSkuSpecificationDetail, nameAttributeItemSpecificationDetail, quantitySpecificationDetail,
                   retailPriceSpecificationDetail, calcSaleSumSpecificationDetail, numberCalcRangeSpecificationDetail, dataCalcRangeSpecificationDetail,
                   calcVATSumSpecificationDetail, retailSumSpecificationDetail,
                   ADDOBJ, delete

    PROPERTIES FORCE PANEL READONLY articleItemSpecificationDetail(d), nameCountryItemSpecificationDetail(d), balanceDepartmentStoreItemSpecificationDetail(d)
                   BACKGROUND highlightSpecificationDetail(d), availableQuantityItemBySpecificationDetail(d) BACKGROUND notNullAvailableQuantityItemBySpecificationDetail(d)

    PROPERTIES(sp) TODRAW d addDetailDialogSkuStockSpecificationDetailSpecification, addDetailDialogTerminalSpecificationDetailSpecification,
                            addDetailInputBarcodeSpecificationDetailSpecification, deleteSpecificationDetailSpecification

    FILTERS inSpecificationSpecificationDetail(sp, d)

    EDIT specification OBJECT sp
;

DESIGN specification FROM DEFAULT{
    main {
        preferredSize = (1024, 768);

        NEW header.box BEFORE d.box {
            childConstraints = TO THE RIGHT;

            NEW headerRow1 {
                childConstraints = TO THE BOTTOM;

                ADD sp.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameDepartmentStoreSpecification);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateSpecification);
                    ADD PROPERTY(timeSpecification);
                }

                ADD sp.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                    NEW headerRow21 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(nameCustomerSpecification);
                        ADD PROPERTY(UNPCustomerSpecification);
                        ADD PROPERTY(nameObjectiveAcquiringSpecification);
                    }
                    NEW headerRow22 {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(dateToSpecification);
                        ADD PROPERTY(noteSpecification);
                    }
                }
            }

            ADD sp.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
    }
}

FORM specifications 'Счет-фактуры'
    OBJECTS sp=specification
    PROPERTIES (sp) READONLY numberObject, seriesObject, dateSpecification, timeSpecification, nameDepartmentStoreSpecification,
                             nameCustomerSpecification, dateToSpecification, countSpecificationDetailSpecification, quantitySpecificationDetailSpecification,
                             calcSaleSumSpecificationDetailSpecification, calcVATSumSpecificationDetailSpecification, retailSumSpecificationDetailSpecification
    PROPERTIES (sp)          dialogSpecificationForm FORCE PANEL SHOWIF  countStatementSpecification(sp)

    PROPERTIES (sp)          ADDFORM, EDITFORM, delete

    OBJECTS d=specificationDetail
    PROPERTIES (d) READONLY  indexSpecificationDetail, idBarcodeSkuSpecificationDetail, nameAttributeItemSpecificationDetail,
                             quantitySpecificationDetail, retailPriceSpecificationDetail,
                             calcSaleSumSpecificationDetail, numberCalcRangeSpecificationDetail, dataCalcRangeSpecificationDetail,
                             calcVATSumSpecificationDetail, retailSumSpecificationDetail

    PROPERTIES      FORCE PANEL toPrintSpecification(sp) TODRAW d
    FILTERS         inSpecificationSpecificationDetail(sp, d)

    FILTERGROUP filters6
            FILTER 'Просроченные с/ф' 'F10' overdueSpecification(sp)
            FILTER 'Непросроченные с/ф' 'F9' noOverdueSpecification(sp)
;

DESIGN specifications FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD sp.box;
        ADD d.box {
            d.panel {
                childConstraints = TO THE RIGHT;
                NEW caseOne{
                    title = 'Печатные формы';
                    ADD PROPERTY (toPrintSpecification(sp));
                }
            }
        }
    }

    ADD functions.box;
}

FORM specificationsStatement 'Счета'
    OBJECTS st=statement FIXED PANEL
    PROPERTIES (st) READONLY seriesNumberObject, dateStatement

    OBJECTS sp=specification

    PROPERTIES (st, sp) inStatementSpecification
    PROPERTIES (sp)     READONLY seriesNumberObject, dateSpecification, nameCustomerSpecification, nameDepartmentStoreSpecification,
                                 dateToSpecification, quantitySpecificationDetailSpecification, retailSumSpecificationDetailSpecification, statusSpecification
    PROPERTIES (st, sp) statusStatementSpecification

    FILTERS customerStatement(st) == customerSpecification(sp),
            departmentStoreStatement(st)== departmentStoreSpecification(sp),
            dateSpecification(sp) <= dateStatement(st)

    FILTERGROUP filters6
            FILTER 'Просроченные с/ф' 'F10' overdueSpecificationStatement(sp, st)
            FILTER 'Непросроченные с/ф' 'F9' noOverdueSpecificationStatement(sp, st) DEFAULT
            FILTER 'Без отгрузок с/ф ' 'F8' noStatementSpecification(sp)
;

dialogSpecificationsStatement 'Заказы' (statement) = ACTION FORM specificationsStatement OBJECTS st MODAL SHORTCUT specificationsStatement DEFAULT;

printPriceChangeStatement 'Акт переоценки' (statement) = printPriceChange(priceChangeStatementStatement(statement)) IN printGroup;

FORM statement 'Отгрузка из розницы'
    OBJECTS st=statement FIXED PANEL
    PROPERTIES (st) objectClassName, numberObject, seriesObject, dateStatement, timeStatement, nameCustomerStatement, UNPCustomerStatement,
                    nameDepartmentStoreStatement, specificationsStatement, toFillStatementDetailsStatement, dialogSpecificationsStatement,
                    noteStatement, quantityStatementDetailStatement, calcSaleSumStatementDetailStatement, calcVATSumStatementDetailStatement, retailSumStatementDetailStatement,
                    numberDisposalStatement SHOWIF needToPriceChangeStatement(st), namePriceChangeCommitteeStatement SHOWIF needToPriceChangeStatement(st)

    PROPERTIES(st) nameTruckConsignment, ownerTruckConsignment, trailerConsignment, nameDriverConsignment, waybillConsignment,
                   namePayerConsignment, shipmentBaseConsignment, addressSupplierStockConsignment, addressCustomerStockConsignment,
                   readdressingConsignment, commonNameIssuanceAllowedConsignment, commonNameIssuanceExecutedConsignment,
                   forwarderConsignment, warrantConsignment, warrantHolderConsignment, goodsAcceptedConsignment,
                   commonNameLoadingExecuterConsignment, nameWayOfLoadingConsignment, codeLoadingConsignment,
                   arrivalTimeConsignment, departureTimeConsignment, downtimeConsignment, raceQuantityConsignment,
                   quantityConsignmentDetailConsignment, quantityPackConsignmentDetailConsignment, grossWeightTonConsignmentDetailConsignment,
                   sumConsignmentDetailConsignment, sumVATConsignmentDetailConsignment, sumInvoiceConsignmentDetailConsignment

    OBJECTS d=statementDetail
    PROPERTIES (d)  indexStatementDetail, idBarcodeSkuStatementDetail, nameAttributeItemStatementDetail, quantityStatementDetail,
                    retailPriceStatementDetail, calcSaleSumStatementDetail, numberCalcRangeStatementDetail, dataCalcRangeStatementDetail,
                    calcVATSumStatementDetail, retailSumStatementDetail,
                    noteStatementDetail, ADDOBJ, delete

    PROPERTIES (d)  FORCE PANEL importerPriceStatementDetail, supplierPriceStatementDetail, nameWareStatementDetail, warePriceStatementDetail, valueRetailVATStatementDetail,
                                curRetailPriceStatementDetail BACKGROUND differsPriceStatementDetail(d),
                                articleItemStatementDetail, nameCountryItemStatementDetail,
                                balanceDepartmentStoreItemStatementDetail BACKGROUND highlightStatementDetail(d)

    PROPERTIES(st) TODRAW d addDetailDialogSkuStatementDetailStatement, addDetailDialogTerminalStatementDetailStatement,
                            addDetailInputBarcodeStatementDetailStatement, deleteStatementDetailStatement

    FILTERS         inStatementStatementDetail(st, d)

    EVENTS
        ON OK EXEC prePostStatement(st)

    EDIT statement OBJECT st
;

DESIGN statement FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW specification.box BEFORE functions.box{
            type = TABBED;
            ADD d.box{
                title = 'Спецификация';
                ADD d.panel {
                    POSITION d.priceDetailGroup TO THE LEFT d.itemDetailGroup;
                }
            }
            NEW consignment{
                title = 'Накладная';
                childConstraints = TO THE RIGHT;

                ADD st.carConsignmentGroup;

                NEW wor1 {
                    childConstraints = TO THE BOTTOM;
                    ADD st.issuanceConsignmentGroup;
                    ADD st.loadingConsignmentGroup;
                    ADD st.sumConsignmentGroup {
                        childConstraints = TO THE BOTTOM;
                        NEW wor21 {
                            childConstraints = TO THE RIGHT;
                            ADD PROPERTY(quantityConsignmentDetailConsignment);
                            ADD PROPERTY(quantityPackConsignmentDetailConsignment);
                            ADD PROPERTY(grossWeightTonConsignmentDetailConsignment);
                        }
                        NEW wor22 {
                            childConstraints = TO THE RIGHT;
                            ADD PROPERTY(sumConsignmentDetailConsignment);
                            ADD PROPERTY(sumVATConsignmentDetailConsignment);
                            ADD PROPERTY(sumInvoiceConsignmentDetailConsignment);
                        }
                    }
                }
            }
        }

        NEW header.box BEFORE specification.box {
            childConstraints = TO THE RIGHT;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;
                ADD st.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(objectClassName);
                    ADD PROPERTY(nameDepartmentStoreStatement);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateStatement);
                    ADD PROPERTY(timeStatement);
                }
                ADD st.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                }
                ADD st.specificationGroup {
                    childConstraints = TO THE BOTTOM;
                }
                POSITION st.documentPrmGroup TO THE LEFT st.specificationGroup;
            }

            ADD st.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
        PROPERTY(formOkAction) {
            caption = 'Провести';
        }
    }
}


FORM statements 'Отгрузки из розницы'
    OBJECTS st=statement
    PROPERTIES (st)  READONLY objectClassName, numberObject, seriesObject, dateStatement, timeStatement, nameDepartmentStoreStatement,
                     nameCustomerStatement, countStatementDetailStatement, quantityStatementDetailStatement,
                     calcSaleSumStatementDetailStatement, calcVATSumStatementDetailStatement, retailSumStatementDetailStatement
    PROPERTIES (st)  FORCE PANEL printConsignmentVerticalA, printConsignmentHorizontalA,
                     printConsignmentVerticalB, printConsignmentHorizontalB,
                     printConsignmentAttach, printConsignmentSimpleHorizontal, editConsignment,
                     printConsignmentSimpleVertical, printConsignmentSimpleAttach, printPriceChangeStatement SHOWIF needToPriceChangeStatement(st),
                     nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES (st)  ADDFORM, EDITFORM, delete FORCE PANEL DRAWTOTOOLBAR

    OBJECTS d=statementDetail
    PROPERTIES (d)   READONLY indexStatementDetail, idBarcodeSkuStatementDetail, nameAttributeItemStatementDetail, quantityStatementDetail,
                              retailPriceStatementDetail, calcSaleSumStatementDetail, numberCalcRangeStatementDetail, dataCalcRangeStatementDetail,
                              calcVATSumStatementDetail, retailSumStatementDetail, noteStatementDetail

    FILTERS          inStatementStatementDetail(st, d)
;

DESIGN statements FROM DEFAULT {
    main {
        childConstraints = TO THE BOTTOM;

        NEW topContainer{

            type = SPLITV;

            ADD st.box {
                PROPERTY(objectClassName) {
                    preferredCharWidth = 15;
                }
                PROPERTY (delete(st)) {
                    askConfirm = TRUE;
                }
            }
            ADD d.box;
        }

        NEW footer.container {
            childConstraints = TO THE BOTTOM;

            NEW cont3 {
                childConstraints = TO THE RIGHT;
                ADD st.historyGroup {
                    childConstraints = TO THE BOTTOM;
                }

                ADD st.postedGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }

            ADD st.printGroup {
                childConstraints = TO THE BOTTOM;
                NEW case55{
                    childConstraints = TO THE RIGHT;

                    NEW contOne {
                        title = 'Накладная';
                        ADD PROPERTY(editConsignment);
                    }
                    NEW tn{
                        childConstraints = TO THE RIGHT;
                        title = 'ТН-2';
                        ADD PROPERTY(printConsignmentSimpleVertical);
                        ADD PROPERTY(printConsignmentSimpleHorizontal);
                        ADD PROPERTY(printConsignmentSimpleAttach);
                    }
                }
                NEW ttn1{
                    childConstraints = TO THE RIGHT;
                    title = 'ТТН-1';
                    ADD PROPERTY(printConsignmentVerticalA);
                    ADD PROPERTY(printConsignmentHorizontalA);
                    ADD PROPERTY(printConsignmentVerticalB);
                    ADD PROPERTY(printConsignmentHorizontalB);
                    ADD PROPERTY(printConsignmentAttach);
                }

            }

        }
        ADD functions.box;
    }
}

//----------------------------------- Акты проработки -------------------------------------------------//
FORM actOfStudy 'Акт проработки'

    OBJECTS a=actOfStudy FIXED PANEL

    PROPERTIES(a)   objectClassName, nameNumeratorObject, numberObject, seriesObject, setValueNumeratedObject, nameDepartmentStoreActOfStudy,
                    dateActOfStudy, timeActOfStudy, nameContractorDepartmentStoreActOfStudy,
                    quantityStudyOutputDetailActOfStudy, retailSumStudyOutputDetailActOfStudy, quantityStudyInputDetailActOfStudy, retailSumStudyInputDetailActOfStudy,
                    numberOutputActOfStudy, seriesOutputActOfStudy, numberInputActOfStudy, seriesInputActOfStudy

    OBJECTS sid=studyInputDetail
    OBJECTS sod=studyOutputDetail

    PROPERTIES(sid) nameAttributeItemStudyInputDetail
    PROPERTIES(sid) seriesNumberCuttingStudyInputDetail READONLY, showSeriesNumberCuttingStudyInputDetail
    PROPERTIES(sid) READONLY dateCuttingStudyInputDetail, descriptionCuttingStudyInputDetail,
                    percAllowancesCuttingStudyInputDetail, percLossesCuttingStudyInputDetail, percSweepsCuttingStudyInputDetail
    PROPERTIES(sid) importerPriceStudyInputDetail, supplierPriceStudyInputDetail, numberRetailVATStudyInputDetail, valueRetailVATStudyInputDetail,
                    retailPriceStudyInputDetail, quantityStudyInputDetail, retailSumStudyInputDetail,
                    totalPercGoodsStudyInputDetail BACKGROUND highlightStudyInputDetail(sid) READONLY, ADDOBJ, delete

    PROPERTIES(sid) FORCE PANEL toFillStudyOutputDetailsStudyInputDetail SHOWIF showNotStudyInputDetailStudyOutputDetail(sid, sod),
                                deleteStudyOutputDetailStudyInputDetail

    PROPERTIES(sod) nameAttributeItemStudyOutputDetail, shortNameUOMItemStudyOutputDetail, importerPriceStudyOutputDetail, supplierPriceStudyOutputDetail,
                    numberRetailVATStudyOutputDetail, valueRetailVATStudyOutputDetail, factorStudyOutputDetail, percGoodsStudyOutputDetail,
                    retailPriceStudyOutputDetail, calculatedStudyOutputDetail, actualQuantityStudyOutputDetail, retailSumStudyOutputDetail

    PROPERTIES(sod) FORCE PANEL curImporterPriceStudyOutputDetail, curSupplierPriceStudyOutputDetail, curNumberRetailVATStudyOutputDetail,
                    curValueRetailVATStudyOutputDetail, curRetailPriceStudyOutputDetail

    FILTERS         actOfStudyStudyInputDetail(sid) == a,
                    studyInputDetailStudyOutputDetail(sod) == sid

    EVENTS
        ON OK EXEC prePostActOfStudy(a)

    EDIT actOfStudy OBJECT a
;

DESIGN actOfStudy FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW header.box BEFORE sid.box {
            childConstraints = TO THE RIGHT;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;

                ADD a.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(objectClassName);
                    ADD PROPERTY(nameDepartmentStoreActOfStudy);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateActOfStudy);
                    ADD PROPERTY(timeActOfStudy);
                }

                ADD a.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                }

                NEW headerOut {
                    title = 'Расходная накладная';
                    ADD PROPERTY(numberOutputActOfStudy);
                    ADD PROPERTY(seriesOutputActOfStudy);
                }
                POSITION a.documentPrmGroup TO THE LEFT headerOut;

                NEW headerIn {
                    title = 'Приходная накладная';
                    ADD PROPERTY(numberInputActOfStudy);
                    ADD PROPERTY(seriesInputActOfStudy);
                }
                POSITION a.documentPrmGroup TO THE LEFT headerIn;
                POSITION headerOut TO THE LEFT headerIn;
            }

            NEW sumsContainer {
                childConstraints = TO THE BOTTOM;
                NEW inSumsContainer {
                    title = 'Итоги (вход)';
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY(quantityStudyInputDetailActOfStudy);
                    ADD PROPERTY(retailSumStudyInputDetailActOfStudy);
                }
                NEW outSumsContainer {
                    title = 'Итоги (выход)';
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY(quantityStudyOutputDetailActOfStudy);
                    ADD PROPERTY(retailSumStudyOutputDetailActOfStudy);
                }
            }
        }
        PROPERTY(formOkAction) {
            caption = 'Провести';
        }
    }
}


FORM actOfStudies 'Акты проработки'

    OBJECTS a=actOfStudy
    PROPERTIES(a)  READONLY objectClassName, numberObject, seriesObject, dateActOfStudy, timeActOfStudy, nameDepartmentStoreActOfStudy,
                            nameContractorDepartmentStoreActOfStudy, quantityStudyOutputDetailActOfStudy, retailSumStudyOutputDetailActOfStudy, quantityStudyInputDetailActOfStudy, retailSumStudyInputDetailActOfStudy

    PROPERTIES(a) READONLY FORCE PANEL timeCreated, nameUserCreated, hostnameComputerCreated, timeClosed, nameUserClosed, hostnameComputerClosed

    PROPERTIES (a)          ADDFORM, EDITFORM, delete FORCE PANEL DRAWTOTOOLBAR

    OBJECTS i = item
    PROPERTIES(i)      READONLY nameAttributeItem, shortNameUOMItem
    PROPERTIES(i, a)   READONLY quantityStudyInputDetailItemActOfStudy, retailSumStudyInputDetailItemActOfStudy, quantityStudyOutputDetailItemActOfStudy, retailSumStudyOutputDetailItemActOfStudy

    ORDER BY           retailSumStudyInputDetailItemActOfStudy, retailSumStudyOutputDetailItemActOfStudy
    FILTERS            quantityStudyInputDetailItemActOfStudy(i, a) OR quantityStudyOutputDetailItemActOfStudy(i, a)

    FILTERGROUP filters1
        FILTER 'Показать приход' 'F10' retailSumStudyOutputDetailItemActOfStudy(i, a)
        FILTER 'Показать расход' 'F9' retailSumStudyInputDetailItemActOfStudy(i, a)
;

DESIGN actOfStudies FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD a.box;
        ADD i.box;
    }

    PROPERTY(objectClassName) {
        preferredCharWidth = 25;
    }

    PROPERTY (delete(a)) {
        askConfirm = TRUE;
    }

    ADD a.historyGroup {
        childConstraints = TO THE BOTTOM;
    }

    ADD a.postedGroup {
        childConstraints = TO THE BOTTOM;
    }

    POSITION a.historyGroup TO THE LEFT a.postedGroup;

    ADD functions.box;
}

@Label.implementPriceTransactionDocument(actOfStudy);
@defineDocumentLabelTransaction(actOfStudy, item, departmentStore);
@extendFormDocumentLabelTransaction(actOfStudy, a, actOfStudy);

@Machinery.implementPriceTransactionDocument(actOfStudy);
@defineDocumentMachineryPriceTransaction(actOfStudy, item, departmentStore);
@extendFormDocumentMachineryPriceTransaction(actOfStudies, a, actOfStudy);

//----------------------------------- Форма для остатков -------------------------------------------------//

inChainStoresStoreTypeStoreDepartmentDepartment (chainStores, storeType, store, department, depStore) = UNION OVERRIDE
    department == depStore AND store  AND chainStores AND storeType,
    storeDepartmentStore(department) == store AND NOT depStore AND chainStores AND storeType,
    storeTypeDepartmentStore(department) == storeType AND NOT depStore AND chainStores AND NOT store,
    chainStoresDepartmentStore(department) == chainStores AND NOT store AND NOT storeType AND NOT depStore,
    department IS departmentStore AND NOT store AND NOT storeType AND NOT chainStores AND NOT depStore;

//------------------------------------Отчет по таре-------------------------------------------//

isContainerBatch 'Тара' (batch) = isContainerItem(skuBatch(batch));

costSumContainerStockDateFrom 'Остаток на начало по складу' (stock, dateFrom) = GROUP SUM costSumBatchStockDateFrom(batch, stock, dateFrom)
    IF isContainerItem(skuBatch(batch)) BY stock, dateFrom;

costSumContainerStockDateTo 'Остаток на конец по складу' (stock, dateTo) = GROUP SUM costSumBatchStockDateTo(batch, stock, dateTo)
    IF isContainerItem(skuBatch(batch)) BY stock, dateTo;

overMotionContainerBatchStockDateFromTo (batch, stock, dateFrom, dateTo) = UNION OVERRIDE
    balanceBBatchStockDate(batch, stock, dateFrom) AND dateTo AS DATE,
    balanceABatchStockDate(batch, stock, dateTo) AND dateFrom AS DATE,
    costInBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo),
    costOutBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo);

FORM sumMotionContainerDepartmentPrint 'Отчет по таре' PRINT

    OBJECTS params = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES objFrom = OBJVALUE(dFrom), objTo = OBJVALUE(dTo)

    OBJECTS dep = departmentStore  FIXED PANEL
    PROPERTIES(dep) SELECTOR name, nameStoreDepartmentStore, nameLegalEntityDepartmentStore

    OBJECTS bt=batch

    PROPERTIES READONLY costSumContainerStockDateFrom(dep, dFrom), costSumContainerStockDateTo(dep, dTo)
    PROPERTIES(bt) READONLY idBarcodeSkuBatch, nameSkuBatch, costBatch
    PROPERTIES(bt, dep, dFrom) READONLY balanceBBatchStockDate, costSumBatchStockDateFrom
    PROPERTIES(bt, dep, dTo) READONLY balanceABatchStockDate, costSumBatchStockDateTo
    PROPERTIES(bt, dep, dFrom, dTo) READONLY costInBalanceBatchStockDateFromTo, costSumInBalanceBatchStockDateFromTo,
               costOutBalanceBatchStockDateFromTo, costSumOutBalanceBatchStockDateFromTo

    FILTERS isPostedBatch(bt),
            isContainerBatch(bt),
            overMotionContainerBatchStockDateFromTo(bt, dep, dFrom, dTo)!=0
;

//---------------------------------------------- Формы стат. отчетов -------------------------------------//

//  12 ТОРГ ПРОДАЖИ

netWeightSoldItemDepartmentStoreDateFromTo 'Вес проданного товара, кг' (item, departmentStore, dateFrom, dateTo) =
    quantitySoldSkuStockDateFromTo(item, departmentStore, dateFrom, dateTo) *
    (UNION OVERRIDE 1 IF item IS item, netWeightItem(item) AND NOT isWeightItem(item));
volumeSoldItemDepartmentStoreDateFromTo 'Объем проданного товара, л' (item, departmentStore, dateFrom, dateTo) =
    quantitySoldSkuStockDateFromTo(item, departmentStore, dateFrom, dateTo) * volumeItem(item);
// sumSoldSkuStockDateFromTo 'Продано, сумма' (item, departmentStore, dateFrom, dateTo)   - рубли
//quantitySoldSkuStockDateFromTo (item, departmentStore, dateFrom, dateTo)                      - шт.

                            //с коэффициентом пересчета за период//
//всего
quantitySoldByStatisticGroupDateFromTo 'Продано, шт' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM quantitySoldSkuStockDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
netWeightSoldByStatisticGroupDateFromTo 'Продано, кг' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM netWeightSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
volumeSoldByStatisticGroupDateFromTo 'Продано, л' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM volumeSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
retailSumSoldByStatisticGroupDateFromTo 'Продано, руб.' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM sumSoldSkuStockDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

//бел. пр-ва
quantitySoldResidentByStatisticGroupDateFromTo 'Продано, шт' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM quantitySoldSkuStockDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
netWeightSoldResidentByStatisticGroupDateFromTo 'Продано, кг' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM netWeightSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
volumeSoldResidentByStatisticGroupDateFromTo 'Продано, л' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM volumeSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
retailSumSoldResidentByStatisticGroupDateFromTo 'Продано, руб.' (statisticGroup, departmentStore, dateFrom, dateTo)=
    [GROUP SUM sumSoldSkuStockDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateFrom, dateTo](statisticGroup, departmentStore, dateFrom, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

netWeightBalanceAItemLedgerDate 'Вес товара на конец , кг' (item, departmentStore, dateTo) =
    balanceASkuStockDate (item, departmentStore, dateTo) * (UNION OVERRIDE 1 IF item IS item, netWeightItem(item) AND NOT isWeightItem(item));
volumeBalanceAItemLedgerDate 'Объем товара на конец , л' (item, departmentStore, dateTo) =
    balanceASkuStockDate (item, departmentStore, dateTo) * volumeItem(item);
retailSumBalanceAItemLedgerDate 'Сумма товара на конец , руб' (item, departmentStore, dateTo) =
    retailPriceASkuDepartmentStoreDate (item, departmentStore, dateTo) * balanceASkuStockDate(item, departmentStore, dateTo);
//balanceASkuStockDate (item, departmentStore, dateTo)    - шт.

                                   //с коэффициентом пересчета на коцен//
// всего
balanceByStatisticGroupDateTo 'Остаток на конец' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM balanceASkuStockDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
netWeightByStatisticGroupDateTo 'Вес на конец, кг' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM netWeightBalanceAItemLedgerDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
volumeByStatisticGroupDateTo 'Объем на конец, л' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM volumeBalanceAItemLedgerDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
retailSumByStatisticGroupDateTo 'Сумма на конец, руб' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM retailSumBalanceAItemLedgerDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

// бел. пр-ва
balanceResidentByStatisticGroupDateTo 'Остаток на конец' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM balanceASkuStockDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
netWeightResidentByStatisticGroupDateTo 'Вес на конец, кг' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM netWeightBalanceAItemLedgerDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
volumeResidentByStatisticGroupDateTo 'Объем на конец, л' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM volumeBalanceAItemLedgerDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
retailSumResidentByStatisticGroupDateTo 'Сумма на конец, руб' (statisticGroup, departmentStore, dateTo)=
    [GROUP SUM retailSumBalanceAItemLedgerDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, departmentStore, dateTo](statisticGroup, departmentStore, dateTo)/
        (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

valueByStatisticGroupDateFromTo 'Продано' (statisticGroup, departmentStore, dateFrom, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN quantitySoldByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightSoldByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeSoldByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumSoldByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        DEFAULT 0 AND statisticGroup IS statisticGroup AND departmentStore IS departmentStore AND dateFrom IS DATE AND dateTo IS DATE
    END;
valueResidentByStatisticGroupDateFromTo 'Продано, бел. пр-ва' (statisticGroup, departmentStore, dateFrom, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN quantitySoldResidentByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightSoldResidentByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeSoldResidentByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumSoldResidentByStatisticGroupDateFromTo(statisticGroup, departmentStore, dateFrom, dateTo)
        DEFAULT 0 AND statisticGroup IS statisticGroup AND departmentStore IS departmentStore AND dateFrom IS DATE AND dateTo IS DATE
    END;

valueByStatisticGroupDateTo 'Остаток на конец' (statisticGroup, departmentStore, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN balanceByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        DEFAULT 0 IF statisticGroup IS statisticGroup AND departmentStore IS departmentStore AND dateTo IS DATE
    END;
valueResidentByStatisticGroupDateTo 'Остаток на конец, бел. пр-ва' (statisticGroup, departmentStore, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN balanceResidentByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightResidentByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeResidentByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumResidentByStatisticGroupDateTo(statisticGroup, departmentStore, dateTo)
        DEFAULT 0 IF statisticGroup IS statisticGroup AND departmentStore IS departmentStore AND dateTo IS DATE
    END;

FORM statisticalReport '12-Торг (продажи) справочно'

    OBJECTS dates = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES OBJVALUE(dFrom), OBJVALUE(dTo)

    TREE treeStore a=STRING[3], tn=chainStores, st=storeType, s=store, ds=departmentStore
    PROPERTIES READONLY OBJVALUE(a), name(tn), name(st), name(s), name(ds)
    FILTERS stringEqualsAll(a), inChainStoresStoreType (tn, st), inStoreTypeStore (st, s), inStoreDepartment(s, ds)

    TREE treeGroups g=statisticGroup PARENT parentStatisticGroup
    PROPERTIES READONLY gname = name(g), sidStatisticGroup(g), nameUOMStatisticGroup(g)
    ORDER BY gname

    OBJECTS           dsi=(dep=departmentStore, i=item)
    PROPERTIES        READONLY nameIt=nameAttributeItem(i), nameDep=name(dep)
    FILTERS           nameAttributeItem (i),
                      inChainStoresStoreTypeStoreDepartmentDepartment(tn, st, s, dep, ds)
    ORDER BY          nameIt

    PROPERTIES        balanceBSkuStockDate(i, dep, dFrom),
                      quantitySoldSkuStockDateFromTo(i, dep, dFrom, dTo),
                      balanceASkuStockDate(i, dep, dTo)
    PROPERTIES  FORCE PANEL valueByStatisticGroupDateFromTo(g, ds, dFrom, dTo), valueResidentByStatisticGroupDateFromTo(g, ds, dFrom, dTo)
    PROPERTIES  FORCE PANEL valueByStatisticGroupDateTo(g, ds, dTo), valueResidentByStatisticGroupDateTo(g, ds, dTo)
    PROPERTIES  FORCE PANEL sumCardDepartmentStoreDateFromTo(ds, dFrom, dTo), sumSaleDepartmentStoreDateFromTo(ds, dFrom, dTo)
;

DESIGN statisticalReport FROM DEFAULT {

    main{

        NEW topContainer{

            type = SPLITH;
            childConstraints = TO THE RIGHT;

            NEW firstCase {

                type = SPLITV;
                childConstraints = TO THE BOTTOM;

                ADD treeStore.tree.box { title = 'Магазины'; }
                ADD treeGroups.tree.box { title = 'Статистические группы'; }
            }

            NEW secondCase {

                type = SPLITV;
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;

                ADD dates.box;
                ADD dsi.box {fillVertical = 2;
                    title = 'Показатели по продажам в номинальных единицах';
                }
            }
        }

        NEW row {
            title = 'Суммы';
            childConstraints = TO THE BOTTOM;
            NEW row1 {
            title = 'По отдел-группа, с учетом ед. изм. и коэфф. перевода';
            ADD PROPERTY(valueByStatisticGroupDateFromTo(g, ds, dFrom, dTo));
            ADD PROPERTY(valueResidentByStatisticGroupDateFromTo(g, ds, dFrom, dTo));
            ADD PROPERTY(valueByStatisticGroupDateTo(g, ds, dTo));
            ADD PROPERTY(valueResidentByStatisticGroupDateTo(g, ds, dTo));
            }
            NEW row2 {
            title = 'По отделу, руб.';
            ADD PROPERTY(sumCardDepartmentStoreDateFromTo(ds, dFrom, dTo));
            ADD PROPERTY(sumSaleDepartmentStoreDateFromTo(ds, dFrom, dTo));
            }
        }
    }

    ADD functions.box;
}

                ///////////////--------по регионам и компании----------/////////////////
regionDepartmentStore(departmentStore) = regionStore(storeDepartmentStore(departmentStore));

                           //c коэффициентом пересчета за период//
// всего
quantitySoldByStatisticGroupRegionDateFromTo 'Продано, шт' (statisticGroup, legalEntity, region, dateFrom, dateTo)=
    [GROUP SUM quantitySoldSkuStockDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, legalEntityDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, legalEntity, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

netWeightSoldByStatisticGroupRegionDateFromTo 'Продано, кг' (statisticGroup, legalEntity, region, dateFrom, dateTo)=
    [GROUP SUM netWeightSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, legalEntityDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, legalEntity, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

volumeSoldByStatisticGroupRegionDateFromTo 'Продано, л' (statisticGroup, legalEntity, region, dateFrom, dateTo)=
    [GROUP SUM volumeSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, legalEntityDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, legalEntity, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

retailSumSoldByStatisticGroupRegionDateFromTo 'Продано, руб.' (statisticGroup, legalEntity, region, dateFrom, dateTo)=
    [GROUP SUM sumSoldSkuStockDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, legalEntityDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, legalEntity, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

// белорусского производствава
quantitySoldResidentByStatisticGroupRegionDateFromTo 'Продано, шт' (statisticGroup, legalEntity, region, dateFrom, dateTo)=
    [GROUP SUM quantitySoldSkuStockDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, legalEntityDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, legalEntity, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

netWeightSoldResidentByStatisticGroupRegionDateFromTo 'Продано, кг' (statisticGroup, legalEntity, region, dateFrom, dateTo)=
    [GROUP SUM netWeightSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, legalEntityDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, legalEntity, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

volumeSoldResidentByStatisticGroupRegionDateFromTo 'Продано, л' (statisticGroup, legalEntity, region, dateFrom, dateTo)=
    [GROUP SUM volumeSoldItemDepartmentStoreDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, legalEntityDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, legalEntity, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

retailSumSoldResidentByStatisticGroupRegionDateFromTo 'Продано, руб.' (statisticGroup, legalEntity, region, dateFrom, dateTo)=
    [GROUP SUM sumSoldSkuStockDateFromTo (item, departmentStore, dateFrom, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, legalEntityDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo]
        (statisticGroup, legalEntity, region, dateFrom, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

                             //с коэффициентом пересчета на коцен//
// всего
balanceByStatisticGroupRegionDateTo 'Остаток на конец' (statisticGroup, legalEntity, region, dateTo)=
    [GROUP SUM balanceASkuStockDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup,legalEntityDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, legalEntity, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

netWeightByStatisticGroupRegionDateTo 'Вес на конец, кг' (statisticGroup, legalEntity, region, dateTo)=
    [GROUP SUM netWeightBalanceAItemLedgerDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, legalEntityDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, legalEntity, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

volumeByStatisticGroupRegionDateTo 'Объем на конец, л' (statisticGroup, legalEntity, region, dateTo)=
    [GROUP SUM volumeBalanceAItemLedgerDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, legalEntityDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, legalEntity, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

retailSumByStatisticGroupRegionDateTo 'Сумма на конец, руб' (statisticGroup, legalEntity, region, dateTo)=
    [GROUP SUM retailSumBalanceAItemLedgerDate (item, departmentStore, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, legalEntityDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, legalEntity, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));
// белорусского производства
balanceResidentByStatisticGroupRegionDateTo 'Остаток на конец' (statisticGroup, legalEntity, region, dateTo)=
    [GROUP SUM balanceASkuStockDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, legalEntityDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, legalEntity, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

netWeightResidentByStatisticGroupRegionDateTo 'Вес на конец, кг' (statisticGroup, legalEntity, region, dateTo)=
    [GROUP SUM netWeightBalanceAItemLedgerDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, legalEntityDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, legalEntity, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

volumeResidentByStatisticGroupRegionDateTo 'Объем на конец, л' (statisticGroup, legalEntity, region, dateTo)=
    [GROUP SUM volumeBalanceAItemLedgerDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, legalEntityDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, legalEntity, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

retailSumResidentByStatisticGroupRegionDateTo 'Сумма на конец, руб' (statisticGroup, legalEntity, region, dateTo)=
    [GROUP SUM retailSumBalanceAItemLedgerDate (item, departmentStore, dateTo) IF residentItem(item) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, legalEntityDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateTo]
        (statisticGroup, legalEntity, region, dateTo) / (UNION OVERRIDE 1 AND statisticGroup IS statisticGroup, conversionFactorStatisticGroup(statisticGroup));

valueByStatisticGroupLegalEntityRegionDateFromTo 'Продано всего' (statisticGroup, legalEntity, region, dateFrom, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN quantitySoldByStatisticGroupRegionDateFromTo(statisticGroup, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightSoldByStatisticGroupRegionDateFromTo(statisticGroup, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeSoldByStatisticGroupRegionDateFromTo(statisticGroup, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumSoldByStatisticGroupRegionDateFromTo(statisticGroup, legalEntity, region, dateFrom, dateTo)
        DEFAULT 0 AND statisticGroup IS statisticGroup AND legalEntity IS legalEntity AND region IS region AND dateFrom IS DATE AND dateTo IS DATE
    END;

valueByStatisticGroupLegalEntityRegionDateTo 'Остаток на конец всего' (statisticGroup, legalEntity, region, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN balanceByStatisticGroupRegionDateTo(statisticGroup, legalEntity, region, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightByStatisticGroupRegionDateTo(statisticGroup, legalEntity, region, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeByStatisticGroupRegionDateTo(statisticGroup, legalEntity, region, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumByStatisticGroupRegionDateTo(statisticGroup, legalEntity, region, dateTo)
        DEFAULT 0 IF statisticGroup IS statisticGroup AND legalEntity IS legalEntity AND region IS region AND dateTo IS DATE
    END;

valueResidentByStatisticGroupLegalEntityRegionDateFromTo 'Продано отеч. пр-ва' (statisticGroup, legalEntity, region, dateFrom, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN quantitySoldResidentByStatisticGroupRegionDateFromTo(statisticGroup, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightSoldResidentByStatisticGroupRegionDateFromTo(statisticGroup, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeSoldResidentByStatisticGroupRegionDateFromTo(statisticGroup, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumSoldResidentByStatisticGroupRegionDateFromTo(statisticGroup, legalEntity, region, dateFrom, dateTo)
        DEFAULT 0 AND statisticGroup IS statisticGroup AND legalEntity IS legalEntity AND region IS region AND dateFrom IS DATE AND dateTo IS DATE
    END;

valueResidentByStatisticGroupLegalEntityRegionDateTo 'Остаток на конец отеч. пр-ва' (statisticGroup, legalEntity, region, dateTo) =
    CASE
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.thing
            THEN balanceResidentByStatisticGroupRegionDateTo(statisticGroup, legalEntity, region, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.pounds
            THEN netWeightResidentByStatisticGroupRegionDateTo(statisticGroup, legalEntity, region, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.liter
            THEN volumeResidentByStatisticGroupRegionDateTo(statisticGroup, legalEntity, region, dateTo)
        WHEN unitMeasureStatisticGroup(statisticGroup)==groupStatic.ruble
            THEN retailSumResidentByStatisticGroupRegionDateTo(statisticGroup, legalEntity, region, dateTo)
        DEFAULT 0 IF statisticGroup IS statisticGroup AND legalEntity IS legalEntity AND region IS region AND dateTo IS DATE
    END;

totalRetailSumSoldByStatisticGroupRegionDateFromTo 'Итого продано, руб.' (statisticGroup, legalEntity, region, dateFrom, dateTo)=
    GROUP SUM sumSoldSkuStockDateFromTo (item, departmentStore, dateFrom, dateTo) AND hasParentStatisticGroupSku(statisticGroup, item)
    BY statisticGroup, legalEntityDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo;

retailSumCardLegalEntityRegionDateFromTo 'Продано с использованием банк. карточек' (legalEntity, region, dateFrom, dateTo) =
    GROUP SUM  sumCardDepartmentStoreDateFromTo(departmentStore, dateFrom, dateTo)
        BY legalEntityDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo;

retailSumSaleLegalEntityRegionDateFromTo 'Продано по кассе' (legalEntity, region, dateFrom, dateTo) =
    GROUP SUM  sumSaleDepartmentStoreDateFromTo(departmentStore, dateFrom, dateTo)
        BY legalEntityDepartmentStore(departmentStore), regionDepartmentStore(departmentStore), dateFrom, dateTo;


FORM torgSales '12-Торг (продажи)'

    OBJECTS params = (dFrom = DATE, dTo = DATE) FIXED PANEL

    PROPERTIES objFrom = OBJVALUE(dFrom), objTo = OBJVALUE(dTo)

    OBJECTS c=legalEntity  FIXED PANEL
    PROPERTIES(c) SELECTOR name

    OBJECTS r=region  FIXED PANEL
    PROPERTIES(r) SELECTOR name

    TREE treeGroups g=statisticGroup PARENT parentStatisticGroup
    PROPERTIES READONLY gname = name(g), sidStatisticGroup(g), nameUOMStatisticGroup(g)
    ORDER BY sidStatisticGroup

    PROPERTIES(g, c, r, dFrom, dTo) valueByStatisticGroupLegalEntityRegionDateFromTo, valueResidentByStatisticGroupLegalEntityRegionDateFromTo
    PROPERTIES(g, c, r, dTo) valueByStatisticGroupLegalEntityRegionDateTo, valueResidentByStatisticGroupLegalEntityRegionDateTo
    PROPERTIES(g, c, r, dFrom, dTo) totalRetailSumSoldByStatisticGroupRegionDateFromTo
    PROPERTIES(c, r, dFrom, dTo) retailSumSaleLegalEntityRegionDateFromTo, retailSumCardLegalEntityRegionDateFromTo
;

DESIGN torgSales FROM DEFAULT {

    main{
        ADD treeGroups.tree.box  BEFORE functions.box {
            title = 'Показатели по стат. группам с учетом ед. изм. и коэфф. перевода';
        }
        NEW firstCase BEFORE treeGroups.tree.box {
            childConstraints = TO THE RIGHT;
            title = 'Параметры отчета';

            NEW dateCase {
                title = 'Даты';
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(objFrom) {
                    caption = 'Дата (с)';
                }
                ADD PROPERTY(objTo) {
                    caption = 'Дата (по)';
                }
            }
            ADD c.box;
            ADD r.box;
        }
        NEW secondCase {
            childConstraints = TO THE RIGHT;
            title = 'Суммы, руб.';
            ADD PROPERTY(retailSumSaleLegalEntityRegionDateFromTo(c, r, dFrom, dTo));
            ADD PROPERTY(retailSumCardLegalEntityRegionDateFromTo(c, r, dFrom, dTo));
        }

        ADD functions.box;
    }
}

//---------------------------------------------- Автоматическое заполнение -----------------------------------------------------//

//------------------- Статистические группы----------------------------//

loadDefaultStatisticGroup 'Добавить стат. группы' = ACTION (parentStat, nameStat, sidStat, groupStatic, value)  {
    ADDOBJ statisticGroup;
    FOR g == addedObject() DO {
        SET parentStatisticGroup(g) <- sidToStatisticGroup(parentStat AS STRING[12]);
        SET name(g) <- nameStat AS STRING[110];
        SET sidStatisticGroup(g) <- sidStat AS STRING[12];
        SET unitMeasureStatisticGroup(g) <- groupStatic AS groupStatic;
        SET conversionFactorStatisticGroup(g) <- value AS NUMERIC[14,5];
    }
}

loadDefaultStatisticGroups 'Загрузить стандартные статистические группы' = ACTION () {
    EXEC loadDefaultStatisticGroup(' ', 'ВСЕ', 'ВСЕ', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('ВСЕ', 'Пищевые продукты, напитки и табачные изделия', '52.2', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('52.2', 'Фрукты', '52.21.10.100', groupStatic.pounds, 1000);
    EXEC loadDefaultStatisticGroup('52.2', 'Овощи', '52.21.10.200', groupStatic.pounds, 1000);
    EXEC loadDefaultStatisticGroup('52.21.10.200', 'Картофель', '52.21.10.210', groupStatic.pounds, 1000);
    EXEC loadDefaultStatisticGroup('52.2', 'Мясо, в том числе мясо домашней птицы и мясные продукты', '52.22.10', groupStatic.pounds, 1000);
    EXEC loadDefaultStatisticGroup('52.22.10', 'Продукты из мяса', '52.22.10.410', groupStatic.pounds, 1000);
    EXEC loadDefaultStatisticGroup('52.22.10', 'Консервы из мяса', '52.22.10.420', groupStatic.pounds, 1000);
    EXEC loadDefaultStatisticGroup('52.2', 'Рыба, ракообразные и моллюски', '52.23.10', groupStatic.pounds, 1000);
    EXEC loadDefaultStatisticGroup('52.23.10', 'Консервы и пресервы из рыбы и  морепродуктов', '52.23.10.420', groupStatic.pounds, 1000);
    EXEC loadDefaultStatisticGroup('52.2', 'Хлеб, пирожные и хлебобулочные изделия', '52.24.11', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('52.2', 'Кондитерские изделия из сахара', '52.24.12', groupStatic.pounds, 1000);
    EXEC loadDefaultStatisticGroup('52.2', 'Напитки, включая алкогольные', '52.25.10', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('52.25.10', 'Вино', '52.25.10.100', groupStatic.liter, 10);
    EXEC loadDefaultStatisticGroup('52.25.10.100', 'Вина виноградные', '52.25.10.110', groupStatic.liter, 10);
    EXEC loadDefaultStatisticGroup('52.25.10.100', 'Вина плодовые', '52.25.10.120', groupStatic.liter, 10);
    EXEC loadDefaultStatisticGroup('52.25.10.100', 'Вина игристые, включая шампанское', '52.25.10.130', groupStatic.liter, 10);
    EXEC loadDefaultStatisticGroup('52.2', 'Водка', '52.25.10.200', groupStatic.liter, 10);
    EXEC loadDefaultStatisticGroup('52.2', 'Коньяк, коньячные напитки и бренди', '52.25.10.300', groupStatic.liter, 10);
    EXEC loadDefaultStatisticGroup('52.2', 'Пиво', '52.25.10.400', groupStatic.liter, 10);
    EXEC loadDefaultStatisticGroup('52.2', 'Прочие алкогольные напитки', '52.25.10.500', groupStatic.liter, 10);
    EXEC loadDefaultStatisticGroup('52.25.10.500', 'Напитки слабоалкогольные', '52.25.10.510', groupStatic.liter, 10);
    EXEC loadDefaultStatisticGroup('52.25.10.500', 'Прочие алкогольные напитки, не включенные в другие группировки', '52.25.10.590', groupStatic.liter, 10);
    EXEC loadDefaultStatisticGroup('52.2', 'Безалкогольные напитки', '52.25.21', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('52.25.21', 'Фруктовые и овощные соки', '52.25.21.100', groupStatic.pounds, 1000);
    EXEC loadDefaultStatisticGroup('52.25.21', 'Минеральная вода', '52.25.21.200', groupStatic.liter, 10);
    EXEC loadDefaultStatisticGroup('52.25.21', 'Безалкогольные напитки прочие', '52.25.21.300', groupStatic.liter, 10);
    EXEC loadDefaultStatisticGroup('52.2', 'Табачные изделия', '52.26.10', groupStatic.thing, 1000);
    EXEC loadDefaultStatisticGroup('52.2', 'Молочные продукты', '52.27.11.100', groupStatic.thing, 0);
    EXEC loadDefaultStatisticGroup('52.27.11.100', 'Сыр', '52.27.11.110', groupStatic.pounds, 1000);
    EXEC loadDefaultStatisticGroup('52.27.11.100', 'Масло сливочное', '52.27.11.120', groupStatic.pounds, 1000);
    EXEC loadDefaultStatisticGroup('52.2', 'Яйца', '52.27.11.200', groupStatic.thing, 1000);
    EXEC loadDefaultStatisticGroup('52.2', 'Сушеные и консервированные орехи, офощи и фрукты', '52.27.12.100', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('52.2', 'Чай, кофе, какао, специи', '52.27.12.200', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('52.2', 'Пищевые масла и жиры', '52.27.12.300', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('52.27.12.300', 'Масла растительные', '52.27.12.310', groupStatic.pounds, 1000);
    EXEC loadDefaultStatisticGroup('52.2', 'Мука', '52.27.12.400', groupStatic.pounds, 100);
    EXEC loadDefaultStatisticGroup('52.2', 'Соль', '52.27.12.500', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('52.2', 'Сахар', '52.27.12.600', groupStatic.pounds, 1000);
    EXEC loadDefaultStatisticGroup('52.2', 'Рис и прочие крупы', '52.27.12.700', groupStatic.pounds, 100);
    EXEC loadDefaultStatisticGroup('52.2', 'Рис', '52.27.12.710', groupStatic.pounds, 100);
    EXEC loadDefaultStatisticGroup('52.2', 'Овсяная крупа', '52.27.12.720', groupStatic.pounds, 100);
    EXEC loadDefaultStatisticGroup('52.2', 'Гречневая крупа', '52.27.12.730', groupStatic.pounds, 100);
    EXEC loadDefaultStatisticGroup('52.2', 'Лапша и прочие макаронные изделия', '52.27.12.800', groupStatic.pounds, 100);
    EXEC loadDefaultStatisticGroup('52.2', 'Прочие пищевые продукты', '52.27.12.900', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('52.27.12.900', 'Детское питание', '52.27.12.910', groupStatic.pounds, 1000);
    EXEC loadDefaultStatisticGroup('ВСЕ', 'Непродовольственные товары', '5', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Автомобили', '50.10.2', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Детали и принадлежности для автомобилей', '50.30.2', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Мотоциклы и относящиеся к ним детали и принадлежности', '50.40.20', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Моторное топливо', '50.50.10', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('50.50.10', 'Моторное топливо', '50.50.10.100', groupStatic.ruble, 1000000);
    EXEC loadDefaultStatisticGroup('5', 'Фармацевтические товары', '52.31.10', groupStatic.ruble, 1000000);
    EXEC loadDefaultStatisticGroup('5', 'Медицинские и ортопедические товары', '52.32.10', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Парфюмерные и косметические товары и туалетные принадлежности', '52.33.10', groupStatic.ruble, 1000000);
    EXEC loadDefaultStatisticGroup('5', 'Текстильные товары', '52.41.11', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Галантерейные товары', '52.41.12', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Меховая и кожаная одежда', '52.42.10.100', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Верхняя одежда', '52.42.10.200', groupStatic.ruble, 1000000);
    EXEC loadDefaultStatisticGroup('5', 'Нижнее белье', '52.42.10.300', groupStatic.ruble, 1000000);
    EXEC loadDefaultStatisticGroup('5', 'Спортивная одежда', '52.42.10.400', groupStatic.ruble, 1000000);
    EXEC loadDefaultStatisticGroup('5', 'Трикотажные изделия', '52.42.10.510', groupStatic.ruble, 1000000);
    EXEC loadDefaultStatisticGroup('5', 'Чулочно-носочные изделия', '52.42.10.520', groupStatic.ruble, 1000000);
    EXEC loadDefaultStatisticGroup('5', 'Головные уборы', '52.42.10.600', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Аксессуары для одежды', '52.42.10.700', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Обувь', '52.43.11', groupStatic.ruble, 1000000);
    EXEC loadDefaultStatisticGroup('5', 'Изделия из кожи и дорожные принадлежности', '52.43.12', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Бытовая мебель', '52.44.11', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Домашняя утварь, ножевые изделия, фаянсовая посуда, изделия из стекла, фарфора и керамики', '52.44.12', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Осветительные приборы', '52.44.13', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Портьеры, сетчатые занавеси и различные предметы домашнего обихода из текстильных материалов', '52.44.14', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Изделия из дерева, пробки и плетеные изделия', '52.44.15', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Бытовые неэлектрические приборы, изделия и оборудование, не включенные в другие группировки', '52.44.16', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Бытовые электрические приборы', '52.45.10', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('52.45.10', 'Холодильники и морозильники', '52.45.10.001', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('52.45.10', 'Стиральные машины', '52.45.10.002', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Аудио- и видеоаппаратура', '52.45.21', groupStatic.thing, 0);
    EXEC loadDefaultStatisticGroup('52.45.21', 'Телевизоры', '52.45.21.210', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Аудио- и видеопленка с записями или без, кассеты и компакт-диски, цифровые видеодиски, грампластинки', '52.45.22', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Музыкальные инструменты и партитуры', '52.45.23', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Строительные материалы', '52.46', groupStatic.ruble, 1000000);
    EXEC loadDefaultStatisticGroup('52.46', 'Скобяные товары', '52.46.11', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('52.46', 'Краски, лаки и эмали, лакокрасочные материалы', '52.46.12', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('52.46', 'Стекло', '52.46.13', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('52.46', 'Материалы и оборудование для изготовления поделок в домашних условиях (для "умелых рук")', '52.46.14', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('52.46', 'Санитарно-техническое оборудование', '52.46.15', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('52.46', 'Строительные материалы, не включенные в другие группировки', '52.46.16', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Книги', '52.47.11', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Газеты и журналы', '52.47.12', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Канцелярские товары', '52.47.13', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Офисная мебель', '52.48.11', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Офисные машины и оборудование', '52.48.12', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Компьютеры и программное обеспечение, не приспособленное к индивидуальным требованиям заказчика', '52.48.13', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Фотоаппаратура, оптические и точные приборы и оборудование', '52.48.14', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Оборудование электросвязи', '52.48.15', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Часы и ювелирные изделия', '52.48.21', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Спортивные товары, включая велосипеды', '52.48.22', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Игры и игрушки', '52.48.23', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Чистящие средства, обои и напольные покрытия', '52.48.31', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('52.48.31', 'Синтетические моющие средства', '52.48.31.110', groupStatic.pounds, 1000);
    EXEC loadDefaultStatisticGroup('5', 'Цветы, растения, семена и удобрения', '52.48.32', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Домашние животные и корма для них', '52.48.33', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Сувениры, изделия кустарного промысла и предметы культового и религиозного назначения', '52.48.34', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Жидкое бытовое топливо, газ в баллонах, уголь, древесное топливо', '52.48.35', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Почтовые марки и монеты', '52.48.36', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Произведения искусства', '52.48.37', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Непродовольственные товары, не включенные в другие группировки', '52.48.38', groupStatic.thing, 1);
    EXEC loadDefaultStatisticGroup('5', 'Подержанные товары', '52.50.1', groupStatic.thing, 1);
} IN loadDefaultGroup;

@implementLoadDefaultData(loadDefaultStatisticGroups);

//------------------- Справочник норм естественной убыли----------------------------//

loadDefaultNaturalLossItemGroup 'Добавить нормы естественной убыли' = ACTION (string)  {
    ADDOBJ naturalLossItemGroup;
    FOR cg == addedObject() DO {
         SET name(cg) <- string AS STRING[110];
    }
}

loadDefaultSubNaturalLossItemGroup 'Добавить нормы естественной убыли' = ACTION (string, stringOne, stringTwo, numeric)  {
    ADDOBJ subNaturalLossItemGroup;
    FOR g == addedObject() DO {
        SET parentNaturalLossItemGroup(g) <- nameToNaturalLossItemGroup(string AS STRING[110]);
        SET name(g) <-  stringOne AS STRING[110];
        SET codeSubNaturalLossItemGroup(g) <- stringTwo AS STRING[3];

        ADDOBJ subNaturalLossItemGroupDetail;
        FOR d == addedObject() DO {
            SET subNaturalLossItemGroupSubNaturalLossItemGroupDetail(d) <- g AS subNaturalLossItemGroup;
            SET percentNaturalLossItemGroupDetail(d) <- numeric AS NUMERIC[10,5];
            SET dayFromNaturalLossItemGroupDetail(d) <- 1;
            SET monthFromNaturalLossItemGroupDetail(d) <- month.january AS month;
            SET dayToNaturalLossItemGroupDetail(d) <- 31;
            SET monthToNaturalLossItemGroupDetail(d) <- month.december AS month;
        }
    }
}

loadDefaultNaturalLossItemGroups 'Загрузить стандартные группы естественной убыли' = ACTION () {
    EXEC loadDefaultNaturalLossItemGroup('молоко разливное');
    EXEC loadDefaultNaturalLossItemGroup('молоко,сливки сух.,яич.порошок');
    EXEC loadDefaultNaturalLossItemGroup('мороженое вес. и проч.вес.мол.');
    EXEC loadDefaultNaturalLossItemGroup('КАРТОФЕЛЬ РАННИЙ');
    EXEC loadDefaultNaturalLossItemGroup('КАПУСТА БЕЛОКОЧАННАЯ СРЕДНЯЯ И ПОЗДНЯЯ, КРАСНОКОЧАННАЯ, САВОЙСКАЯ, КОЛЬРАБИ');
    EXEC loadDefaultNaturalLossItemGroup('КАПУСТА БЕЛОКОЧАННАЯ РАННЯЯ, ЦВЕТНАЯ, БРЮССЕЛЬСКАЯ');
    EXEC loadDefaultNaturalLossItemGroup('КОРНЕПЛОДЫ ОБРЕЗНЫЕ (СВЕКЛА, МОРКОВЬ, РЕДЬКА, ПЕТРУШКА, СЕЛЬДЕРЕЙ, ПАСТЕРНАК, ХРЕН И ДР.)');
    EXEC loadDefaultNaturalLossItemGroup('КОРНЕПЛОДЫ С ЗЕЛЕНЬЮ МОЛОДЫЕ');
    EXEC loadDefaultNaturalLossItemGroup('РЕДИС');
    EXEC loadDefaultNaturalLossItemGroup('ЗЕЛЕНЬ СВЕЖАЯ (САЛАТ, УКРОП, ШПИНАТ, И ДР.) БОБОВЫЕ (ГОРОХ-ЛАПАТОЧКИ, ФАСОЛЬ-СТРУЧКИ) И ПР ОВОЩИ');
    EXEC loadDefaultNaturalLossItemGroup('ЛУК ЗЕЛЕНЫЙ, ЛУК-ПОРЕЙ, ЧЕСНОК ЗЕЛЕНЫЙ');
    EXEC loadDefaultNaturalLossItemGroup('ЛУК РЕПЧАТЫЙ');
    EXEC loadDefaultNaturalLossItemGroup('ЧЕСНОК');
    EXEC loadDefaultNaturalLossItemGroup('КУКУРУЗА В ПОЧАТКАХ МОЛОЧНО-ВОСКОВОЙ СПЕЛОСТИ');
    EXEC loadDefaultNaturalLossItemGroup('ТОМАТЫ (КРАСНЫЕ, РОЗОВЫЕ, БУРЫЕ, МОЛОЧНЫЕ)');
    EXEC loadDefaultNaturalLossItemGroup('БАКЛАЖАНЫ, КАБАЧКИ, ПЕРЕЦ СЛАДКИЙ И ГОРЬКИЙ СТРУЧКОВЫЙ, ПАТИССОНЫ');
    EXEC loadDefaultNaturalLossItemGroup('БАХЧЕВЫЕ (АРБУЗЫ, ДЫНИ, ТЫКВА)');
    EXEC loadDefaultNaturalLossItemGroup('СЕМЕЧКОВЫЕ ПЛОДЫ (ЯБЛОКИ, ГРУШИ, АЙВА И ДР)');
    EXEC loadDefaultNaturalLossItemGroup('КОСТОЧКОВЫЕ ПЛОДЫ (ЧЕРЕШНИ, ВИШНИ, СЛИВЫ, АБРИКОСЫ, ПЕРСИКИ И ДР)');
    EXEC loadDefaultNaturalLossItemGroup('ГРАНАТЫ');
    EXEC loadDefaultNaturalLossItemGroup('МАЛИНА, ЗЕМЛЯНИКА И КЛУБНИКА');
    EXEC loadDefaultNaturalLossItemGroup('ВИНОГРАД, СМОРОДИНА, КРЫЖОВНИК');
    EXEC loadDefaultNaturalLossItemGroup('ДИКОРАСТУЩИЕ (КЛЮКВА, БРУСНИКА, ОБЛЕПИХА И ДР.) ЯГОДЫ');
    EXEC loadDefaultNaturalLossItemGroup('ГРИБЫ СВЕЖИЕ ВСЕХ ВИДОВ');
    EXEC loadDefaultNaturalLossItemGroup('МАНДАРИНЫ');
    EXEC loadDefaultNaturalLossItemGroup('АПЕЛЬСИНЫ');
    EXEC loadDefaultNaturalLossItemGroup('АНАНАСЫ');
    EXEC loadDefaultNaturalLossItemGroup('БАНАНЫ');
    EXEC loadDefaultNaturalLossItemGroup('ЛИМОНЫ');
    EXEC loadDefaultNaturalLossItemGroup('ГРЕЙПФРУТЫ');
    EXEC loadDefaultNaturalLossItemGroup('ПЛОДЫ, ОВОЩИ И ГРИБЫ ПЕРЕАБОТАННЫЕ. ФРУКТЫ СУШЕННЫЕ');
    EXEC loadDefaultNaturalLossItemGroup('ФРУКТЫ И ОВОЩИ ЗАМОРОЖЕННЫЕ');
    EXEC loadDefaultNaturalLossItemGroup('ОРЕХИ ВСЯКИЕ');
    EXEC loadDefaultNaturalLossItemGroup('ОВОЩИ ЗЕЛЕНЬ СУШЕНЫЕ');
    EXEC loadDefaultNaturalLossItemGroup('ОВОЩИ СОЛЕНЫЕ И КВАШЕНЫЕ');
    EXEC loadDefaultNaturalLossItemGroup('ГРИБЫ СУШЕННЫЕ');
    EXEC loadDefaultNaturalLossItemGroup('ГРИБЫ СОЛЕНЫЕ И МАРИНОВАННЫЕ');
    EXEC loadDefaultNaturalLossItemGroup('ТОМАТ-ПАСТА И ТОМАТ-ПЮРЕ');
    EXEC loadDefaultNaturalLossItemGroup('КАРТОФЕЛЬ ПОЗДНИЙ');
    EXEC loadDefaultNaturalLossItemGroup('ОГУРЦЫ ОТКРЫТОГО И ЗАКРЫТОГО ГРУНТА');
    EXEC loadDefaultNaturalLossItemGroup('ОВЕС И ЯЧМЕНЬ');
    EXEC loadDefaultNaturalLossItemGroup('ЖМЫХ И КОМБИКОРМ');
    EXEC loadDefaultNaturalLossItemGroup('ОТРУБИ И ДР.');
    EXEC loadDefaultNaturalLossItemGroup('КЕРОСИН ПРИ ПРОДАЖЕ ВЕСОВ');
    EXEC loadDefaultNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ');
    EXEC loadDefaultNaturalLossItemGroup('КОНДИТЕРСКИЕ ТОВАРЫ');
    EXEC loadDefaultNaturalLossItemGroup('МОЛОЧНЫЕ И ЖИРОВЫЕ ТОВАРЫ');
    EXEC loadDefaultNaturalLossItemGroup('МЯСО МОРОЖЕНОЕ');
    EXEC loadDefaultNaturalLossItemGroup('МЯСО ОХЛАЖДЕННОЕ');
    EXEC loadDefaultNaturalLossItemGroup('МЯСО ОХОЛЖДЕННОЕ');
    EXEC loadDefaultNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ');
    EXEC loadDefaultNaturalLossItemGroup('СУБПРОДУКТЫ');
    EXEC loadDefaultNaturalLossItemGroup('СЫРЫ');
    EXEC loadDefaultNaturalLossItemGroup('ХЛЕБОБУЛОЧНЫЕ ТОВАРЫ');
    EXEC loadDefaultSubNaturalLossItemGroup('молоко разливное','молоко разливное','05А',0.05);
    EXEC loadDefaultSubNaturalLossItemGroup('молоко,сливки сух.,яич.порошок','молоко,сливки сух.,яич.порошок','05Б',0.25);
    EXEC loadDefaultSubNaturalLossItemGroup('мороженое вес. и проч.вес.мол.','мороженое вес. и проч.вес.мол.','05В',0.3);
    EXEC loadDefaultSubNaturalLossItemGroup('КАРТОФЕЛЬ РАННИЙ','КАРТОФЕЛЬ РАННИЙ','101',0.68);
    EXEC loadDefaultSubNaturalLossItemGroup('КАПУСТА БЕЛОКОЧАННАЯ СРЕДНЯЯ И ПОЗДНЯЯ, КРАСНОКОЧАННАЯ, САВОЙСКАЯ, КОЛЬРАБИ','КАПУСТА БЕЛОКОЧАННАЯ СРЕДНЯЯ И ПОЗДНЯЯ, КРАСНОКОЧАННАЯ, САВОЙСКАЯ, КОЛЬРАБИ','102',0.63);
    EXEC loadDefaultSubNaturalLossItemGroup('КАПУСТА БЕЛОКОЧАННАЯ РАННЯЯ, ЦВЕТНАЯ, БРЮССЕЛЬСКАЯ','КАПУСТА БЕЛОКОЧАННАЯ РАННЯЯ, ЦВЕТНАЯ, БРЮССЕЛЬСКАЯ','103',0.82);
    EXEC loadDefaultSubNaturalLossItemGroup('КОРНЕПЛОДЫ ОБРЕЗНЫЕ (СВЕКЛА, МОРКОВЬ, РЕДЬКА, ПЕТРУШКА, СЕЛЬДЕРЕЙ, ПАСТЕРНАК, ХРЕН И ДР.)','КОРНЕПЛОДЫ ОБРЕЗНЫЕ (СВЕКЛА, МОРКОВЬ, РЕДЬКА, ПЕТРУШКА, СЕЛЬДЕРЕЙ, ПАСТЕРНАК, ХРЕН И ДР.)','104',0.69);
    EXEC loadDefaultSubNaturalLossItemGroup('КОРНЕПЛОДЫ С ЗЕЛЕНЬЮ МОЛОДЫЕ','КОРНЕПЛОДЫ С ЗЕЛЕНЬЮ МОЛОДЫЕ','105',1.03);
    EXEC loadDefaultSubNaturalLossItemGroup('РЕДИС','РЕДИС','106',0.81);
    EXEC loadDefaultSubNaturalLossItemGroup('ЗЕЛЕНЬ СВЕЖАЯ (САЛАТ, УКРОП, ШПИНАТ, И ДР.) БОБОВЫЕ (ГОРОХ-ЛАПАТОЧКИ, ФАСОЛЬ-СТРУЧКИ) И ПР ОВОЩИ','ЗЕЛЕНЬ СВЕЖАЯ (САЛАТ, УКРОП, ШПИНАТ, И ДР.) БОБОВЫЕ (ГОРОХ-ЛАПАТОЧКИ, ФАСОЛЬ-СТРУЧКИ) И ПР ОВОЩИ','107',1.41);
    EXEC loadDefaultSubNaturalLossItemGroup('ЛУК ЗЕЛЕНЫЙ, ЛУК-ПОРЕЙ, ЧЕСНОК ЗЕЛЕНЫЙ','ЛУК ЗЕЛЕНЫЙ, ЛУК-ПОРЕЙ, ЧЕСНОК ЗЕЛЕНЫЙ','108',0.99);
    EXEC loadDefaultSubNaturalLossItemGroup('ЛУК РЕПЧАТЫЙ','ЛУК РЕПЧАТЫЙ','109',0.46);
    EXEC loadDefaultSubNaturalLossItemGroup('ЧЕСНОК','ЧЕСНОК','110',0.49);
    EXEC loadDefaultSubNaturalLossItemGroup('КУКУРУЗА В ПОЧАТКАХ МОЛОЧНО-ВОСКОВОЙ СПЕЛОСТИ','КУКУРУЗА В ПОЧАТКАХ МОЛОЧНО-ВОСКОВОЙ СПЕЛОСТИ','111',0.67);
    EXEC loadDefaultSubNaturalLossItemGroup('ТОМАТЫ (КРАСНЫЕ, РОЗОВЫЕ, БУРЫЕ, МОЛОЧНЫЕ)','ТОМАТЫ (КРАСНЫЕ, РОЗОВЫЕ, БУРЫЕ, МОЛОЧНЫЕ)','113',0.64);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКЛАЖАНЫ, КАБАЧКИ, ПЕРЕЦ СЛАДКИЙ И ГОРЬКИЙ СТРУЧКОВЫЙ, ПАТИССОНЫ','БАКЛАЖАНЫ, КАБАЧКИ, ПЕРЕЦ СЛАДКИЙ И ГОРЬКИЙ СТРУЧКОВЫЙ, ПАТИССОНЫ','114',0.75);
    EXEC loadDefaultSubNaturalLossItemGroup('БАХЧЕВЫЕ (АРБУЗЫ, ДЫНИ, ТЫКВА)','БАХЧЕВЫЕ (АРБУЗЫ, ДЫНИ, ТЫКВА)','115',0.42);
    EXEC loadDefaultSubNaturalLossItemGroup('СЕМЕЧКОВЫЕ ПЛОДЫ (ЯБЛОКИ, ГРУШИ, АЙВА И ДР)','СЕМЕЧКОВЫЕ ПЛОДЫ (ЯБЛОКИ, ГРУШИ, АЙВА И ДР)','116',0.43);
    EXEC loadDefaultSubNaturalLossItemGroup('КОСТОЧКОВЫЕ ПЛОДЫ (ЧЕРЕШНИ, ВИШНИ, СЛИВЫ, АБРИКОСЫ, ПЕРСИКИ И ДР)','КОСТОЧКОВЫЕ ПЛОДЫ (ЧЕРЕШНИ, ВИШНИ, СЛИВЫ, АБРИКОСЫ, ПЕРСИКИ И ДР)','117',0.67);
    EXEC loadDefaultSubNaturalLossItemGroup('ГРАНАТЫ','ГРАНАТЫ','118',0.6);
    EXEC loadDefaultSubNaturalLossItemGroup('МАЛИНА, ЗЕМЛЯНИКА И КЛУБНИКА','МАЛИНА, ЗЕМЛЯНИКА И КЛУБНИКА','119',1.05);
    EXEC loadDefaultSubNaturalLossItemGroup('ВИНОГРАД, СМОРОДИНА, КРЫЖОВНИК','ВИНОГРАД, СМОРОДИНА, КРЫЖОВНИК','120',0.66);
    EXEC loadDefaultSubNaturalLossItemGroup('ДИКОРАСТУЩИЕ (КЛЮКВА, БРУСНИКА, ОБЛЕПИХА И ДР.) ЯГОДЫ','ДИКОРАСТУЩИЕ (КЛЮКВА, БРУСНИКА, ОБЛЕПИХА И ДР.) ЯГОДЫ','121',0.48);
    EXEC loadDefaultSubNaturalLossItemGroup('ГРИБЫ СВЕЖИЕ ВСЕХ ВИДОВ','ГРИБЫ СВЕЖИЕ ВСЕХ ВИДОВ','122',1.26);
    EXEC loadDefaultSubNaturalLossItemGroup('МАНДАРИНЫ','МАНДАРИНЫ','123',0.13);
    EXEC loadDefaultSubNaturalLossItemGroup('АПЕЛЬСИНЫ','АПЕЛЬСИНЫ','124',0.21);
    EXEC loadDefaultSubNaturalLossItemGroup('АНАНАСЫ','АНАНАСЫ','125',0.38);
    EXEC loadDefaultSubNaturalLossItemGroup('БАНАНЫ','БАНАНЫ','126',0.48);
    EXEC loadDefaultSubNaturalLossItemGroup('ЛИМОНЫ','ЛИМОНЫ','127',0.21);
    EXEC loadDefaultSubNaturalLossItemGroup('ГРЕЙПФРУТЫ','ГРЕЙПФРУТЫ','128',0.25);
    EXEC loadDefaultSubNaturalLossItemGroup('ПЛОДЫ, ОВОЩИ И ГРИБЫ ПЕРЕАБОТАННЫЕ. ФРУКТЫ СУШЕННЫЕ','ПЛОДЫ, ОВОЩИ И ГРИБЫ ПЕРЕАБОТАННЫЕ. ФРУКТЫ СУШЕННЫЕ','129',0.02);
    EXEC loadDefaultSubNaturalLossItemGroup('ФРУКТЫ И ОВОЩИ ЗАМОРОЖЕННЫЕ','ФРУКТЫ И ОВОЩИ ЗАМОРОЖЕННЫЕ','130',0.15);
    EXEC loadDefaultSubNaturalLossItemGroup('ОРЕХИ ВСЯКИЕ','ОРЕХИ ВСЯКИЕ','131',0.08);
    EXEC loadDefaultSubNaturalLossItemGroup('ОВОЩИ ЗЕЛЕНЬ СУШЕНЫЕ','ОВОЩИ ЗЕЛЕНЬ СУШЕНЫЕ','132',0.01);
    EXEC loadDefaultSubNaturalLossItemGroup('ОВОЩИ СОЛЕНЫЕ И КВАШЕНЫЕ','ОВОЩИ СОЛЕНЫЕ И КВАШЕНЫЕ','133',0.04);
    EXEC loadDefaultSubNaturalLossItemGroup('ГРИБЫ СУШЕННЫЕ','ГРИБЫ СУШЕННЫЕ','134',0.07);
    EXEC loadDefaultSubNaturalLossItemGroup('ГРИБЫ СОЛЕНЫЕ И МАРИНОВАННЫЕ','ГРИБЫ СОЛЕНЫЕ И МАРИНОВАННЫЕ','135',0.1);
    EXEC loadDefaultSubNaturalLossItemGroup('ТОМАТ-ПАСТА И ТОМАТ-ПЮРЕ','ТОМАТ-ПАСТА И ТОМАТ-ПЮРЕ','136',0.05);
    EXEC loadDefaultSubNaturalLossItemGroup('КАРТОФЕЛЬ ПОЗДНИЙ','КАРТОФЕЛЬ ПОЗДНИЙ','100',0.33);
    EXEC loadDefaultSubNaturalLossItemGroup('ОГУРЦЫ ОТКРЫТОГО И ЗАКРЫТОГО ГРУНТА','ОГУРЦЫ ОТКРЫТОГО И ЗАКРЫТОГО ГРУНТА','112',0.9);
    EXEC loadDefaultSubNaturalLossItemGroup('ОВЕС И ЯЧМЕНЬ','ОВЕС И ЯЧМЕНЬ','137',0.1);
    EXEC loadDefaultSubNaturalLossItemGroup('ЖМЫХ И КОМБИКОРМ','ЖМЫХ И КОМБИКОРМ','138',0.08);
    EXEC loadDefaultSubNaturalLossItemGroup('ОТРУБИ И ДР.','ОТРУБИ И ДР.','139',0.12);
    EXEC loadDefaultSubNaturalLossItemGroup('КЕРОСИН ПРИ ПРОДАЖЕ ВЕСОВ','КЕРОСИН ПРИ ПРОДАЖЕ ВЕСОВ','140',0.08);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ','крупа,включая зернобоб.и саго','080',0.14);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ','макаронные изделия','081',0.21);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ','мука и крахмал','082',0.14);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ','сахар-песок','083',0.08);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ','сахар рафинад','084',0.13);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ','сахарная пудра','085',0.21);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ','кофе в зернах','086',0.1);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ','соль поваренная','087',0.32);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ','дрожжи пресованные','088',0.39);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ','прочие весовые бакалейные т-ры','089',0.11);
    EXEC loadDefaultSubNaturalLossItemGroup('БАКАЛЕЙНЫЕ ТОВАРЫ','соки и безалк.напитки в розлив','08А',0.04);
    EXEC loadDefaultSubNaturalLossItemGroup('КОНДИТЕРСКИЕ ТОВАРЫ','Карамель,ирис и драже','070',0.1);
    EXEC loadDefaultSubNaturalLossItemGroup('КОНДИТЕРСКИЕ ТОВАРЫ','конфеты глазированные','071',0.15);
    EXEC loadDefaultSubNaturalLossItemGroup('КОНДИТЕРСКИЕ ТОВАРЫ','конфеты неглазированные','072',0.26);
    EXEC loadDefaultSubNaturalLossItemGroup('КОНДИТЕРСКИЕ ТОВАРЫ','мармелад и пат','073',0.33);
    EXEC loadDefaultSubNaturalLossItemGroup('КОНДИТЕРСКИЕ ТОВАРЫ','пастила и зефир','074',0.46);
    EXEC loadDefaultSubNaturalLossItemGroup('КОНДИТЕРСКИЕ ТОВАРЫ','халва','075',0.55);
    EXEC loadDefaultSubNaturalLossItemGroup('КОНДИТЕРСКИЕ ТОВАРЫ','мед и повидло','076',0.45);
    EXEC loadDefaultSubNaturalLossItemGroup('КОНДИТЕРСКИЕ ТОВАРЫ','печенье,галеты и вафли','077',0.22);
    EXEC loadDefaultSubNaturalLossItemGroup('КОНДИТЕРСКИЕ ТОВАРЫ','пряники и коврижки','078',0.34);
    EXEC loadDefaultSubNaturalLossItemGroup('КОНДИТЕРСКИЕ ТОВАРЫ','прочие весовые кондитер. т-ры','079',0.15);
    EXEC loadDefaultSubNaturalLossItemGroup('МОЛОЧНЫЕ И ЖИРОВЫЕ ТОВАРЫ','масло коровье(слив.,топленое)','050',0.15);
    EXEC loadDefaultSubNaturalLossItemGroup('МОЛОЧНЫЕ И ЖИРОВЫЕ ТОВАРЫ','маргарин,жиры топл.и кулинар.','051',0.15);
    EXEC loadDefaultSubNaturalLossItemGroup('МОЛОЧНЫЕ И ЖИРОВЫЕ ТОВАРЫ','масло растител.(ручная продажа','052',0.25);
    EXEC loadDefaultSubNaturalLossItemGroup('МОЛОЧНЫЕ И ЖИРОВЫЕ ТОВАРЫ','сметана,творог,творож.масса','053',0.46);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО МОРОЖЕНОЕ','говядина,телятина,баранина','010',0.33);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО МОРОЖЕНОЕ','свинина','012',0.3);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО МОРОЖЕНОЕ','куры,кролики(кр/полим.пленки)','013',0.19);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО МОРОЖЕНОЕ','гуси,утки,индейки и др.','014',0.3);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО МОРОЖЕНОЕ','мясо птицы в полимер.пленке','015',0.05);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО МОРОЖЕНОЕ','мясо диких животных (кабана, медведя, лося, сайгака и др.)','016',0.47);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО ОХЛАЖДЕННОЕ','говядина,телятина,баранина','020',0.58);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО ОХЛАЖДЕННОЕ','свинина','021',0.51);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО ОХЛАЖДЕННОЕ','куры,цыплята-бройлеры,кролики','022',0.37);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО ОХЛАЖДЕННОЕ','гуси,утки,индейки','023',0.47);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО ОХЛАЖДЕННОЕ','мясо птицы в полимерной пленке','024',0.2);
    EXEC loadDefaultSubNaturalLossItemGroup('МЯСО ОХОЛЖДЕННОЕ','мясо диких животных (кабана, медведя, лося, сайгака и др.)','025',0.64);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','рыба живая','040',0.1);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','рыба любая и мидии охлажд.','041',0.6);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','рыба,рыбн.товары морож.неглазир','042',0.27);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','рыба соленая в сухотарн.бочках','044',0.4);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','рыба лососев.,прод-мая нарезной','045',0.3);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','рыба(кроме осетр.) горяч.копчен','046',0.37);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','рыба и рыб.т-ры осетр.гор.копч.','047',0.3);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','рыба и рыбн.т-ры холод.копч.','048',0.35);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','балыч.изд.холод.копч.(б/нарезки','049',0.33);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','балыч.изд.холод.копч.(внарезку)','04А',0.28);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','рыбные т-ры сол.-суш.и вяленые','04Б',0.2);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','икра осетровых,лососевых,прочих','04В',0.18);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','кулинария(рыбная)','04Г',0.36);
    EXEC loadDefaultSubNaturalLossItemGroup('РЫБА И РЫБНЫЕ ТОВАРЫ','проч.вес.т-ры из морепродуктов','04Д',0.28);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','ноги','030',0.35);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','головы мороженые','031',0.35);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','головы охлажденные','032',0.54);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','прочие субпродукты мороженые','033',0.4);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','прочие субпродукты охлажденные','034',1.62);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','полуфабрикаты весовые','035',0.4);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','жир-сырец мороженый','036',0.16);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','кул-рия вес.(студни,пашт.мясо)','037',0.3);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','жир-сырец охлажденный','038',0.32);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','колбасы вареные','039',0.53);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','сосиски и сардельки','03А',0.75);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','колбасы полукопченые','03Б',0.32);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','колбасы варено-копченые','03В',0.36);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','колбасы сырокопченые','03Г',0.06);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','мясокопчености сырокопченые','03Д',0.25);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','мясокопчен.копч.-варен.копч.-за','03Е',0.48);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','мясокопч.вареные,запеченые,жарен','03Ж',0.59);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','шпик свиной и товары из шпика','03З',0.26);
    EXEC loadDefaultSubNaturalLossItemGroup('СУБПРОДУКТЫ','прочие весовые мясные товары','03И',0.3);
    EXEC loadDefaultSubNaturalLossItemGroup('СЫРЫ','в парафиновом покрытии','054',0.3);
    EXEC loadDefaultSubNaturalLossItemGroup('СЫРЫ','колбасный копченый плавленый','055',0.4);
    EXEC loadDefaultSubNaturalLossItemGroup('СЫРЫ','в полимерной пленке','056',0.4);
    EXEC loadDefaultSubNaturalLossItemGroup('СЫРЫ','в фольге или пергаменте','057',0.55);
    EXEC loadDefaultSubNaturalLossItemGroup('СЫРЫ','без покрытия(без рассола)','058',0.3);
    EXEC loadDefaultSubNaturalLossItemGroup('СЫРЫ','в рассоле(брынза и др.)','059',0.25);
    EXEC loadDefaultSubNaturalLossItemGroup('ХЛЕБОБУЛОЧНЫЕ ТОВАРЫ','хлеб печеный','060',0.5);
    EXEC loadDefaultSubNaturalLossItemGroup('ХЛЕБОБУЛОЧНЫЕ ТОВАРЫ','бараночные изделия','061',0.35);
    EXEC loadDefaultSubNaturalLossItemGroup('ХЛЕБОБУЛОЧНЫЕ ТОВАРЫ','сухари','062',0.3);
    EXEC loadDefaultSubNaturalLossItemGroup('ХЛЕБОБУЛОЧНЫЕ ТОВАРЫ','пироги и кулебяки','064',0.45);
    EXEC loadDefaultSubNaturalLossItemGroup('ХЛЕБОБУЛОЧНЫЕ ТОВАРЫ','лаваш и чурек','065',0.35);
    EXEC loadDefaultSubNaturalLossItemGroup('ХЛЕБОБУЛОЧНЫЕ ТОВАРЫ','прочие весовые хлебобул.товары','066',0.3);
} IN loadDefaultGroup;

@implementLoadDefaultData(loadDefaultNaturalLossItemGroups);

//---------------------------------------------- Генерация Z-отчета -------------------------------------------------//

generateZReport 'Сгенерировать Z-отчёт' = ACTION CUSTOM 'equ.srv.actions.GenerateZReport';
averageZReportCountGenerateZReport 'Среднее число Z-отчётов' = DATA INTEGER ();
averageReceiptCountGenerateZReport 'Среднее число чеков' = DATA INTEGER ();
averageReceiptDetailCountGenerateZReport 'Среднее число строк в чеке' = DATA INTEGER ();
dateFromGenerateZReport 'Дата (с)' = DATA DATETIME ();
dateToGenerateZReport 'Дата (по)' = DATA DATETIME ();

EXTEND FORM defaultData
    PROPERTIES()    generateZReport, averageZReportCountGenerateZReport, averageReceiptCountGenerateZReport, averageReceiptDetailCountGenerateZReport,
                    dateFromGenerateZReport, dateToGenerateZReport

;

EXTEND DESIGN defaultData {
    pane {
        NEW ZReport {
            title = 'Z-отчёт';
            childConstraints = TO THE BOTTOM;
            ADD PROPERTY(averageZReportCountGenerateZReport());
            ADD PROPERTY(averageReceiptCountGenerateZReport());
            ADD PROPERTY(averageReceiptDetailCountGenerateZReport());
            ADD PROPERTY(dateFromGenerateZReport());
            ADD PROPERTY(dateToGenerateZReport());
            ADD PROPERTY(generateZReport());
        }
    }
}
//---------------------------------------------- Импорт данных -----------------------------------------------------//

GROUP lstradeIntegrationGroup 'LS Trade' : baseGroup;

importLSTDataAction 'Импортировать данные (LS Trade)' = ACTION CUSTOM 'retail.ImportLSTDataActionProperty' IN lstradeIntegrationGroup;
importLSTDirectory 'Папка' = DATA STRING[200] () IN lstradeIntegrationGroup;
importInactive 'Импортировать в том числе неактивные' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importGroupItems 'Импортировать группы товаров' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importWares 'Импортировать посуду' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importItems 'Импортировать товары' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importNumberItems 'Кол-во' = DATA INTEGER () IN lstradeIntegrationGroup;
importNumberItemsAtATime 'Разбивать на пакеты по' = DATA INTEGER () IN lstradeIntegrationGroup;
importPrices 'Импортировать цены товаров' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importAssortment 'Импортировать ассортимент' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importUserInvoices 'Импортировать документы прихода' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importLegalEntities 'Импортировать организации' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importWarehouses 'Импортировать склады' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importStores 'Импортировать магазины' = DATA BOOLEAN () IN lstradeIntegrationGroup;
importDepartmentStores 'Импортировать отделы магазина' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importBanks 'Импортировать банки' = DATA BOOLEAN() IN lstradeIntegrationGroup;
importRateWastes 'Импортировать нормы отходов' = DATA BOOLEAN() IN lstradeIntegrationGroup;

EXTEND FORM integrationData
    PROPERTIES() importLSTDataAction, importLSTDirectory, importInactive, importGroupItems, importWares, importItems,
    importNumberItems, importNumberItemsAtATime, importPrices, importAssortment, importUserInvoices,
    importLegalEntities, importWarehouses, importStores, importDepartmentStores, importBanks, importRateWastes
;
EXTEND DESIGN integrationData {
    pane {
        NEW lstrade {
            title = 'LS Trade';
            ADD NOGROUP.lstradeIntegrationGroup;
        }
    }
}

GROUP formularGroup 'Formular' : baseGroup;

importDataAction 'Импортировать данные (Formular)' = ACTION CUSTOM 'retail.ImportDataActionProperty'IN formularGroup;
importUrl 'URL' = DATA STRING[200]() IN formularGroup;
importLogin 'Логин' = DATA STRING[200]() IN formularGroup;
importPassword 'Пароль' = DATA STRING[200]() IN formularGroup;

EXTEND FORM integrationData
    PROPERTIES() importDataAction, importUrl, importLogin, importPassword
;
EXTEND DESIGN integrationData {
    pane {
        NEW formular {
            title = 'Formular';
            ADD NOGROUP.formularGroup;
        }
    }
}

//---------------------------- Настройка навигатора ----------------------------------------//

WINDOW TOOLBAR mainToolbar 'Навигатор' HORIZONTAL HIDETITLE HIDESCROLLBARS POSITION(0, 0, 100, 6);
WINDOW TOOLBAR formsToolbar 'Формы' VERTICAL HIDETITLE POSITION (0, 6, 20, 64);
WINDOW TREE formsTree 'Формы' HIDETITLE POSITION (0, 6, 20, 64);

HIDE WINDOW System.relevantForms;
HIDE WINDOW System.relevantClassForms;

NAVIGATOR {

    baseElement TO mainToolbar;

    NEW catalogs 'Справочники' TO formsToolbar {
        NEW itemCatalog 'Товары' {
            ADD items;
            ADD itemGroups;
            ADD UOMs;
            ADD wares;
            ADD papers;
        }
        NEW contragents 'Контрагенты' {
            ADD legalEntities;
            ADD contractSkus;
        }
    }

    NEW purchase 'Управление закупками' TO formsToolbar {
        ADD purchasePurchaseNavigator;
        ADD purchaseReturnNavigator;
    }

    NEW warehouse 'Управление складом' TO formsToolbar {
        ADD inventoryNavigator {
            ADD naturalLosses;
            ADD naturalLossItemGroups;
        }
        ADD writeOffNavigator;

        NEW disparityDocuments 'Пересортица' {
            ADD disparities;
        }
        ADD stockCost;
        ADD stockBalance;
        NEW accountDocuments 'Бухгалтерские документы' {
            ADD sumAccountDocumentLedger;
            ADD sumMotionContainerDepartmentPrint;
        }
        NEW warehouseCatalog 'Справочники' {
            ADD warehouses;
        }
    }

    NEW sale 'Управление продажами' TO formsToolbar {
        ADD saleSaleNavigator;
        ADD saleReturnNavigator;
        ADD salesNavigator;
        NEW statistics 'Статистика' {
            ADD torgSales;
            ADD statisticalReport;
            ADD statisticGroups;
        }
    }

    NEW retail 'Розничная торговля' TO formsToolbar {
        NEW incomeShipments 'Поставки' {
            ADD shipments;
        }
        NEW itemInnerFlows 'Внутренние перемещения' {
            ADD innerFlows;
            ADD innerArrivals;
        }
        ADD POSNavigator;
        NEW retailStatement 'Безналичный расчет' {
            ADD specifications;
            ADD statements;
        }
        NEW priceAccount 'Учет в розничных ценах' {
            ADD pricings;
            ADD repricings;
            ADD pricingCommitteeDialog;
            ADD repricingCommitteeDialog;
            NEW priceAccountArchive 'Архив' {
                ADD registerCommitteeDialog;
                ADD priceChangeCommitteeDialog;
            }
        }
        ADD retailCRMNavigator;
        NEW retailAccountDocuments 'Бухгалтерские документы' {
            ADD priceChangeDocuments;
        }
        NEW retailCatalog 'Справочники' {
            ADD stores;
        }
    }

    ADD priceListNavigator TO formsToolbar {
        ADD priceIntervals;
    }

    NEW transport 'Управление транспортом' TO formsToolbar {
        ADD marks;
        ADD trucks;
        ADD drivers;
        ADD routes;
        ADD trips;
    }

    ADD machineryNavigator TO formsToolbar;

    NEW finance 'Финансы' TO formsToolbar {
        ADD contractNavigator;
        NEW financeCatalog 'Справочники' {
            ADD banks;
            ADD taxes;
        }
    }

    NEW manufactory 'Производство' TO formsToolbar {
        ADD actOfStudies;
        ADD cuttings;
    }
    NEW hr 'Кадры' TO formsToolbar {
        ADD employees;
    }

    ADD accountElement TO formsToolbar;
    ADD adminElement TO formsTree;
}

