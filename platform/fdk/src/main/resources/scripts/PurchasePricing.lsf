MODULE PurchasePricing;

REQUIRE Pricing, PurchaseInvoice, Repricing, PurchaseShipment;

NAMESPACE Purchase;

//----------------------------------------------- Акт расценки ---------------------------------------------------//

@definePricingAggregation(invoice, ' (закупка)', 'Акт расценки на основе инвойса', 'Проведенный акт расценки на основе инвойса', customerStock, );
@definePricingRelation(' (закупка)', customerStock);

@defineRepricing(' (закупка)', customerStock);

overShipmentPriceUserInvoiceDetail(detail) += retailPriceUserInvoiceDetail(detail)
    IF customerStockUserInvoiceDetail(detail) IS departmentStore AND NOT costLedgerDepartmentStore(customerStockUserInvoiceDetail(detail));

@defineDocumentInterfacePriceListType (invoice, priceListType, retail, ' (розничный)');

EXTEND FORM userInvoice
    PROPERTIES(i) SHOWIF createPricingUserInvoice(i) BACKGROUND backgroundRetailInvoice(i) nameRetailPriceListTypeUserInvoice
    PROPERTIES(d) nameRetailPriceListTypeUserInvoiceDetail BEFORE retailMarkupUserInvoiceDetail
;
EXTEND DESIGN userInvoice {
    headerRow14 {
        headerRow141 {
            ADD PROPERTY(nameRetailPriceListTypeUserInvoice);
        }
    }
}
EXTEND FORM invoices PROPERTIES(d) nameRetailPriceListTypeUserInvoiceDetail BEFORE retailMarkupInvoiceDetail;

retailPriceListTypeUserInvoice(userInvoice) <- priceListTypeDepartmentStore(customerStockUserInvoice(userInvoice))
    WHEN CHANGED(customerStockUserInvoice(userInvoice));

retailPriceListTypeUserInvoiceDetail(detail) <- retailPriceListTypeUserInvoice(userInvoiceUserInvoiceDetail(detail))
                                                WHEN CHANGED(retailPriceListTypeUserInvoice(userInvoiceUserInvoiceDetail(detail)));

retailVATUserInvoiceDetail (detail) <- VATUserInvoiceDetail(detail) WHEN CHANGED(VATUserInvoiceDetail(detail));

// расчет надбавок и цены при изменении priceListType
ON SESSION PREVSTART pricePriceListTypeSkuStockDateTime { // цены берем на начало сессии, а не этого event'а
    LOCAL changedPriceListType = BOOLEAN (userInvoiceDetail);
    SET changedPriceListType(detail) <- TRUE IF retailPriceListTypeUserInvoiceDetail(detail) AND
                                        (CHANGED(retailPriceListTypeUserInvoiceDetail(detail)) OR
                                         CHANGED(skuUserInvoiceDetail(detail)) OR
                                         CHANGED(customerStockUserInvoiceDetail(detail)) OR
                                         CHANGED(dateTimeUserInvoiceDetail(detail)) OR
                                         CHANGED(valueRetailVATUserInvoiceDetail(detail)));

    FOR [GROUP MAX(changedPriceListType(detail)) BY retailPriceListTypeUserInvoiceDetail(detail)](priceListType) DO {
        IF 1 == 2 THEN BREAK; // чтобы не компилировала в один запрос, а выполняло императивно
        IF priceListType IS calcPriceListType THEN {
            SET retailMarkupUserInvoiceDetail(detail) <- markupCalcPriceListTypePriceGroupOver(priceListType, priceGroupSku(skuUserInvoiceDetail(detail)))
                                                         WHERE changedPriceListType(detail) AND retailPriceListTypeUserInvoiceDetail(detail) == priceListType;
            SET retailPriceUserInvoiceDetail(detail) <- roundPriceRoundCondition([X*(Y+100)*(Z+100)/10000](
                                                                    priceUserInvoiceDetail(detail),
                                                                    retailMarkupUserInvoiceDetail(detail),
                                                                    valueRetailVATUserInvoiceDetail(detail)), roundConditionCalcPriceListType(priceListType))
                                                         WHERE changedPriceListType(detail) AND retailPriceListTypeUserInvoiceDetail(detail) == priceListType;
        } ELSE {
            SET retailPriceUserInvoiceDetail(detail) <- prevPricePriceListTypeSkuStockDateTime(priceListType,
                                                                                               skuUserInvoiceDetail(detail),
                                                                                               customerStockUserInvoiceDetail(detail),
                                                                                               dateTimeUserInvoiceDetail(detail))
                                                         WHERE changedPriceListType(detail) AND retailPriceListTypeUserInvoiceDetail(detail) == priceListType;
            SET retailMarkupUserInvoiceDetail(detail) <- [round2(((X/Z*100/(100+Y))-1)*100)](
                                                                     retailPriceUserInvoiceDetail(detail),
                                                                     priceUserInvoiceDetail(detail),
                                                                     valueRetailVATUserInvoiceDetail(detail))
                                                         WHERE changedPriceListType(detail) AND retailPriceListTypeUserInvoiceDetail(detail) == priceListType;
        }
    }
}

CONSTRAINT supplierUserPricing(userPricing) AND NOT isSupplierLegalEntity(supplierUserPricing(userPricing))
    CHECKED BY supplierUserPricing MESSAGE 'Для акта расценки выбрано в качестве поставщика организация, не являющаяся поставщиком';


