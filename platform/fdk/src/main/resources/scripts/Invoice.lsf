MODULE Invoice;

REQUIRE Order, ContractLedger, StockTax;

CLASS ABSTRACT invoice 'Накладная' : contractLedger, contractALedger, inContractLedger, outContractLedger;
CLASS ABSTRACT invoiceDetail 'Строка накладной';

@defineDocumentAbstract(invoice);
@defineDocumentAbstractNumber(invoice);

@defineDocumentAbstractLegalEntity(invoice, supplier, 'Поставщик');
@defineDocumentAbstractLegalEntity(invoice, customer, 'Покупатель');

@defineDocumentAbstractLegalEntity(invoice, fromLegalEntity, 'Отправитель');
@defineDocumentAbstractLegalEntity(invoice, toLegalEntity, 'Получатель');

@defineDocumentAbstractDataStock(invoice, stock, 'Склад поставщика', supplier);
@defineDocumentAbstractDataStock(invoice, stock, 'Склад покупателя', customer);

@defineDocumentAbstractDataStock(invoice, stock, 'Склад (отправитель)', from);
@defineDocumentAbstractDataStock(invoice, stock, 'Склад (получатель)', to);

@defineDocumentAbstractPosted(invoice);

@defineDocumentAbstractDetailSku(invoice, sku);

@defineDocumentAbstractDetailQuantity(invoice);
@defineDocumentDetailGrossWeight(invoice, sku);
//@defineDocumentDetailQuantityPack (invoice, sku);
@defineDocumentDetailAbstractDataQuantityPackCustomPrefix (invoiceDetail, , ' упаковок');
@defineDocumentHeaderSkuQuantity(invoice, sku);

@defineDocumentHeaderGrossWeight(invoice);

@defineDocumentAbstractHeaderCurrency (invoice);

@defineDocumentAbstractDetailPrice(invoice);
@defineDocumentAbstractDetailDataSumCustomPrefix (invoiceDetail, , );
@defineDocumentAbstractDetailVATPrefix(invoice, , );
@defineDocumentAbstractDetailVATDataSumCustom (invoiceDetail, invoice);

editInvoice 'Редактировать' = ABSTRACT ACTION (invoice) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

createUserInvoiceOrder 'Создать накладную' = ABSTRACT ACTION (order);
createUserInvoicePostedOrder 'Создать проведенную накладную' = ABSTRACT ACTION (order);

orderInvoiceDetail = ABSTRACT order(invoiceDetail);

quantityOrderInvoice (order, invoice) = GROUP SUM quantityInvoiceDetail(invoiceDetail)
                                               BY orderInvoiceDetail(invoiceDetail),
                                                  invoiceInvoiceDetail(invoiceDetail);

//----------------------------------------------- Накладная ---------------------------------------------------//

META defineInvoice(sign, stockProp, toShowProp, captionProp, prop)

    CLASS ABSTRACT invoice 'Накладная'###sign : Invoice.invoice;
    CLASS ABSTRACT invoiceDetail 'Строка накладной'###sign : Invoice.invoiceDetail;

    CLASS userInvoice 'Накладная (польз.)'###sign : invoice, historizable, numeratedDocument;
    CLASS userInvoiceDetail 'Строка накладной (польз.)'###sign : invoiceDetail;
    CLASS userInvoicePosted 'Проведенная накладная (польз.)'###sign : userInvoice, postedObject;

    GROUP invoiceGroup 'Информация о накладной' : baseGroup;

    @defineDocumentInterface(invoice);
    Invoice.invoiceInvoiceDetail (detail) += invoiceInvoiceDetail(detail);
    Invoice.dateInvoice (invoice) += dateInvoice(invoice);
    Invoice.timeInvoice (invoice) += timeInvoice(invoice);

    @defineDocumentInterfaceTimeBefore(invoice);

    @defineDocumentInterfaceNumber(invoice);
    Invoice.numberInvoice (invoice) += numberInvoice(invoice);
    Invoice.seriesInvoice (invoice) += seriesInvoice(invoice);

    @defineDocumentInterfaceLegalEntity (invoice, supplier, 'Поставщик');
    @defineDocumentInterfaceLegalEntity (invoice, customer, 'Покупатель');
    Invoice.supplierInvoice(invoice) += supplierInvoice(invoice);
    Invoice.customerInvoice(invoice) += customerInvoice(invoice);

    @defineDocumentInterfaceDataStock(invoice, stock, 'Склад поставщика', supplier);
    @defineDocumentInterfaceDataStock(invoice, stock, 'Склад покупателя', customer);
    Invoice.supplierStockInvoice(invoice) += supplierStockInvoice(invoice);
    Invoice.customerStockInvoice(invoice) += customerStockInvoice(invoice);
    Invoice.dataSupplierStockInvoiceDetail(detail) += dataSupplierStockInvoiceDetail(detail);
    Invoice.dataCustomerStockInvoiceDetail(detail) += dataCustomerStockInvoiceDetail(detail);

    CONSTRAINT supplierUserInvoice(userInvoice) AND supplierStockUserInvoice(userInvoice) AND NOT
    inLegalEntityStock(supplierUserInvoice(userInvoice), supplierStockUserInvoice(userInvoice))
        CHECKED BY supplierUserInvoice, supplierStockUserInvoice
            MESSAGE 'Поставщик и склад поставщика не имеют связи';
    CONSTRAINT customerUserInvoice(userInvoice) AND customerStockUserInvoice(userInvoice) AND NOT
    inLegalEntityStock(customerUserInvoice(userInvoice), customerStockUserInvoice(userInvoice))
        CHECKED BY customerUserInvoice, customerStockUserInvoice
            MESSAGE 'Покупатель и склад покупателя не имеют связи';

    @defineDocumentInterfacePosted(invoice);
    Invoice.isPostedInvoice (invoice) += isPostedInvoice(invoice);

    @defineDocumentInterfaceDescription(invoice, 'Накладная'###sign);

    @defineDocumentInterfaceCurrency(invoice);
    @deriveDocumentCurrency(userInvoice, supplier, currencyLegalEntity);
    Invoice.currencyInvoice(invoice) += currencyInvoice(invoice);

    @defineDocumentInterfaceContract(invoice, contractSku, supplier, customer,
                                     'Сторона A договора накладной не соответствует стороне А накладной',
                                     'Сторона B договора накладной не соответствует стороне В накладной');

    @defineDocumentInterfaceDataPriceListType(invoice);

    @defineDocumentInterfaceDetailSku(invoice, sku);
    Invoice.skuInvoiceDetail(detail) += skuInvoiceDetail(detail);

    @defineDocumentInterfaceDetailQuantity(invoice);
    Invoice.quantityInvoiceDetail(detail) += quantityInvoiceDetail(detail);

    @defineDocumentDetailGrossWeight(invoice, sku);

    @defineDocumentInterfaceDetailPrice(invoice);
   // @deriveDocumentDetailPricePriceListTypeCustom(userInvoiceDetail, stockProp);
    Invoice.priceInvoiceDetail(detail) += priceInvoiceDetail(detail);

    @defineDocumentInterfaceDetailDataSum(invoice);
    @deriveDocumentDetailSum(userInvoice, quantity);
    Invoice.sumInvoiceDetail(detail) += sumInvoiceDetail(detail);

    @defineDocumentInterfaceDetailVATPrefix(invoice, , country###stockProp, );
    @defineDocumentInterfaceDetailVATDataSum (invoice);
    @deriveDocumentDetailSumUserObject (invoice);
    @deriveDocumentDetailDirectVATSum(userInvoice);
    Invoice.VATInvoiceDetail(detail) += VATInvoiceDetail(detail);
    Invoice.valueVATInvoiceDetail(detail) += valueVATInvoiceDetail(detail);
    Invoice.VATSumInvoiceDetail(detail) += VATSumInvoiceDetail(detail);

    @defineDocumentInterfaceDetailPricePrefix (invoice, invoice, ' с НДС');
    @deriveDocumentDetailVAT (userInvoice, , date,  sku, stockProp);
    @deriveDocumentDetailValueVATPrefix(userInvoice, );
    @deriveDocumentDetailPricePriceListTypeVAT (userInvoice, stockProp);
    @deriveDocumentPriceDetailOnChangeInvoicePrice(userInvoice);
    @deriveDocumentInvoicePriceDetailOnChangePrice(userInvoice);
    @deriveDocumentInvoicePriceDetailOnChangeVAT(userInvoice, stockProp);
    @deriveDocumentInvoicePriceDetailOnChangeValueVAT(userInvoice);
    Invoice.invoiceSumInvoiceDetail(detail) += invoiceSumInvoiceDetail(detail);

    @defineDocumentInterfaceHeaderQuantity(invoice);
    @defineDocumentHeaderSkuQuantity(invoice, sku);
    @defineDocumentHeaderSkuQuantity(userInvoice, sku);
    @defineDocumentInterfaceHeaderSum(invoice);
    @defineDocumentInterfaceHeaderVATSum(invoice);

    @defineAddDetailDialogSkuStock(userInvoice, sku, stockProp, dialogSku);
    @defineAddDetailDialogBarcode(userInvoice, sku);

    @defineDocumentInterfaceHeaderAgreement(invoice);
    @deriveDocumentHeaderAgreement (userInvoice, supplierUserInvoice, customerUserInvoice);
    @deriveDocumentDetailPriceListTypeAgreement(invoice);

    noAgreementUserInvoice (invoice) = invoice IS userInvoice AND NOT agreementUserInvoice(invoice);

    countInvoiceDetailStockInvoice (stock, invoice) = GROUP SUM 1 BY stockProp###invoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);

//-- Упаковка
    @defineDocumentInterfaceCreate (invoice, toShowProp, captionProp);

    @defineDocumentInterfaceBarcodeSkuPrefix (invoice, sku, , );
    @defineDocumentDetailInterfaceDataQuantityPackCustomPrefix (invoiceDetail, , ' упаковок');
    @deriveDocumentDetailQuantityBarcodeCustom (userInvoiceDetail, sku, prop, toShowProp);
//    @deriveDocumentQuantityPackageDetailOnChangeQuantity(userInvoiceDetail, prop);
    Invoice.quantityPackInvoiceDetail(detail) += quantityPackInvoiceDetail(detail);


//--  Связь с заказом
    orderInvoiceDetail = ABSTRACT order (invoiceDetail) PERSISTENT;
    Invoice.orderInvoiceDetail (invoiceDetail) += orderInvoiceDetail(invoiceDetail);

    orderUserInvoiceDetail = DATA order(userInvoiceDetail);
    orderInvoiceDetail(invoiceDetail) += orderUserInvoiceDetail(invoiceDetail);

    CONSTRAINT supplierInvoiceDetail(invoiceDetail) != supplierOrder(orderUserInvoiceDetail(invoiceDetail)) OR
               customerUserInvoiceDetail(invoiceDetail) != customerOrder(orderUserInvoiceDetail(invoiceDetail))
        CHECKED BY orderUserInvoiceDetail
            MESSAGE 'Поставщик и покупатель в заказе и накладной должны соответствовать друг другу';

    GROUP orderGroup 'Информация о заказе' : publicGroup;

    descriptionOrderInvoiceDetail 'Заказ' (invoiceDetail) = descriptionOrder(orderInvoiceDetail(invoiceDetail)) IN orderGroup;
    descriptionOrderUserInvoiceDetail 'Заказ' (userInvoiceDetail) = descriptionOrder(orderUserInvoiceDetail(userInvoiceDetail)) IN orderGroup;

    quantityInvoiceDetailOrderInvoice (order, invoice) = GROUP SUM quantityInvoiceDetail(invoiceDetail) BY orderInvoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);
    ordersInvoice 'Заказы' (invoice) = GROUP CONCAT toString255(descriptionOrder(order)) IF quantityInvoiceDetailOrderInvoice(order, invoice) , ', '
                                             BY invoice
                                             ORDER order
                                             IN orderGroup MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

    invoicedInvoiceDetailOrderSku 'Выписано накладных' (order, sku) = GROUP SUM quantityInvoiceDetail(invoiceDetail) IF isPostedInvoiceDetail(invoiceDetail)
                                                               BY orderInvoiceDetail(invoiceDetail), skuInvoiceDetail(invoiceDetail);
    invoicedOrderDetail 'Выписано накладных' (orderDetail) = PARTITION UNGROUP invoicedInvoiceDetailOrderSku
                                                              LIMIT STRICT quantityOrderDetail (orderDetail)
                                                              BY orderOrderDetail(orderDetail), skuOrderDetail(orderDetail)
                                                              ORDER orderDetail;

    EXTEND FORM userOrder PROPERTIES(d) READONLY invoicedOrderDetail AFTER quantityUserOrderDetail;
    EXTEND FORM orders PROPERTIES(d) READONLY invoicedOrderDetail AFTER quantityOrderDetail;

    toInvoiceOrderDetail 'Не выписано накладных' (orderDetail) = quantityOrderDetail (orderDetail) (-) invoicedOrderDetail(orderDetail);

    toInvoiceOrderDetailStockOrder 'Не выписано накладных по складу' (stock, order) =
        GROUP SUM toInvoiceOrderDetail(orderDetail) IF toInvoiceOrderDetail(orderDetail) > 0
        BY stockProp###OrderDetail(orderDetail), orderOrderDetail(orderDetail);

    // Создание заказа на основе инвойса //
    inOrderSupplierStock (order, supplierStock) = GROUP SUM 1 IF supplierStockOrderDetail(orderDetail) == supplierStock BY orderOrderDetail(orderDetail), supplierStock;
    inOrderSupplier (order, supplier) = GROUP SUM 1 IF legalEntityStock(supplierStockOrderDetail(orderDetail)) == supplier BY orderOrderDetail(orderDetail), supplier;

    FORM invoiceOrders 'Заказы'###sign
        OBJECTS s = legalEntity FIXED PANEL
        PROPERTIES (s) READONLY name
        OBJECTS ss = stock FIXED PANEL
        PROPERTIES (ss) READONLY name

        OBJECTS c = legalEntity FIXED PANEL
        PROPERTIES (c) READONLY name
        OBJECTS cs = stock FIXED PANEL
        PROPERTIES (cs) READONLY name

        OBJECTS o = order
        PROPERTIES (o) READONLY isPostedOrder FORCE GRID, objectClassName, numberOrder, seriesOrder, dateOrder, timeOrder,
                                nameSupplierOrder, nameSupplierStockOrder, nameCustomerOrder, nameCustomerStockOrder, nameCurrencyOrder, noteOrder,
                                countOrderDetailOrder, quantityOrderDetailOrder, sumOrderDetailOrder, VATSumOrderDetailOrder, invoiceSumOrderDetailOrder, toShowProp###order
        FILTERS isPostedOrder(o),
                inOrderSupplier(o, s),
                customerOrder(o) == c,
                customerStockOrder(o) == cs
//        FILTERGROUP order
//            FILTER 'Заказы с невыписанными товарами со склада' 'F10' toInvoiceOrderDetailStockOrder(s, o) DEFAULT
//            FILTER 'Заказы со склада' 'F9' countOrderDetailStockOrder(s, o)

        OBJECTS d = orderDetail
        PROPERTIES (d) READONLY indexOrderDetail, idBarcodeSkuOrderDetail, nameSkuOrderDetail, shortNameUOMSkuOrderDetail
        PROPERTIES (d) READONLY SHOWIF toShowProp###order(o) idBarcodePackOrderDetail, shortNameUOMPackOrderDetail,
                       amountPackOrderDetail, quantityPackOrderDetail
        PROPERTIES (d) READONLY quantityOrderDetail, invoicedOrderDetail, priceOrderDetail, sumOrderDetail,
                        numberVATOrderDetail, valueVATOrderDetail, VATSumOrderDetail, invoiceSumOrderDetail,
                        name###stockProp###orderDetail, toInvoiceOrderDetail
        FILTERS orderOrderDetail(d) == o
//        FILTERGROUP orderDetail
//            FILTER 'Строки с невыписанными товарами со склада' 'F10' stockProp###orderDetail(d) == s AND toInvoiceOrderDetail(d) > 0 DEFAULT
//            FILTER 'Строки со склада' 'F9' stockProp###orderDetail(d) == s
    ;

    DESIGN invoiceOrders FROM DEFAULT {
        main {
            preferredSize = (1024, 768);
            NEW documentContainer BEFORE functions.box {

                childConstraints = TO THE BOTTOM;

//                NEW headerBox {
//                    childConstraints = TO THE RIGHT;
//                    ADD s.box {title = 'Поставщик';};
//                    ADD c.box {title = 'Покупатель';};
//                }
                NEW headerSupplierBox {
                    childConstraints = TO THE RIGHTBOTTOM;
                    title = 'Поставщик';
                    ADD s.box;
                    ADD ss.box;
                }
                NEW headerCustomerBox {
                    childConstraints = TO THE RIGHTBOTTOM;
                    title = 'Покупатель';
                    ADD c.box;
                    ADD cs.box;
                }
                ADD o.box;
                NEW documentDetail {
                    type = TABBED;

                    ADD d.box {
                        title = 'Спецификация';
                    }
                    NEW printTab {
                        title = 'Печатные формы';
                        NEW printContainer {
                            title = 'Печать';
                            childConstraints = TO THE BOTTOM;
                            fillVertical = 1.0;
                        }
                    }
                }
            }
            PROPERTY(toInvoiceOrderDetail) { background = #FFFFCC; }
        }
    }

    createExplicitBatchDetailUserInvoiceOrder = ABSTRACT ACTION (userInvoice, order);
    useExplicitBatchDetailUserInvoiceOrder = ABSTRACT BOOLEAN (userInvoice, order);

    differentStocksInDetailsStock (stock) = differentStocksInDetailsLegalEntity(legalEntityStock(stock)) PERSISTENT;

    inOrderDetailUserInvoice (orderDetail, userInvoice) = IF differentStocksInDetailsStock(customerStockOrderDetail(orderDetail))
        THEN TRUE AND orderDetail IS orderDetail AND userInvoice IS userInvoice
        ELSE TRUE AND supplierStockOrderDetail(orderDetail)==supplierStockUserInvoice(userInvoice);

    createDetailUserInvoiceOrder = ACTION (userInvoice, order) {
        IF useExplicitBatchDetailUserInvoiceOrder(userInvoice, order) AND explicitBatchLedgerStock(stockProp##Order(order)) THEN {
            EXEC createExplicitBatchDetailUserInvoiceOrder(userInvoice, order);
        } ELSE
            FOR orderOrderDetail(orderDetail) == order AND
                toInvoiceOrderDetail(orderDetail) > 0 // возможно еще нужно фильтровать по складам
                AND inOrderDetailUserInvoice(orderDetail, userInvoice)
                ADDOBJ d = userInvoiceDetail DO {
                    SET userInvoiceUserInvoiceDetail(d) <- userInvoice;
                    SET orderUserInvoiceDetail(d) <- order;
                    SET skuUserInvoiceDetail(d) <- skuOrderDetail(orderDetail);
                    SET barcodePackUserInvoiceDetail(d) <- barcodePackOrderDetail(orderDetail);
                    SET amountPackUserInvoiceDetail(d) <- amountPackOrderDetail(orderDetail);
                    SET quantityPackUserInvoiceDetail (d) <- toInvoiceOrderDetail(orderDetail)/amountPackOrderDetail(orderDetail);
                    SET quantityUserInvoiceDetail (d) <- toInvoiceOrderDetail(orderDetail);
                    SET VATUserInvoiceDetail (d) <- VATOrderDetail(orderDetail);
                    SET valueVATUserInvoiceDetail (d) <- valueVATOrderDetail(orderDetail);
                    SET priceUserInvoiceDetail (d) <- priceOrderDetail(orderDetail);
                    SET invoicePriceUserInvoiceDetail (d) <- invoicePriceOrderDetail(orderDetail);
                    SET sumUserInvoiceDetail (d) <- sumOrderDetail(orderDetail);
            }
    }

    fillUserInvoiceOrder = ACTION (userInvoice, order) {
        SET supplierUserInvoice(userInvoice) <- supplierOrder(order);
        SET supplierStockUserInvoice(userInvoice) <- supplierStockOrder(order);

        SET customerUserInvoice(userInvoice) <- customerOrder(order);
        SET customerStockUserInvoice(userInvoice) <- customerStockOrder(order);

        SET currencyUserInvoice(userInvoice) <- currencyOrder(order);
        SET agreementUserInvoice(userInvoice) <- agreementOrder(order);
        SET priceListTypeUserInvoice(userInvoice) <- priceListTypeOrder(order);

        SET noteUserInvoice(userInvoice) <- noteOrder(order);

        EXEC createDetailUserInvoiceOrder(userInvoice, order);
    }

    fillSupplierStockUserInvoiceOrder = ACTION (supplierStock, userInvoice, order) {
        SET supplierUserInvoice(userInvoice) <- legalEntityStock(supplierStock);
        SET supplierStockUserInvoice(userInvoice) <- supplierStock AS stock;

        SET customerUserInvoice(userInvoice) <- customerOrder(order);
        SET customerStockUserInvoice(userInvoice) <- customerStockOrder(order);

        SET currencyUserInvoice(userInvoice) <- currencyOrder(order);
        SET agreementUserInvoice(userInvoice) <- agreementOrder(order);
        SET priceListTypeUserInvoice(userInvoice) <- priceListTypeOrder(order);

        SET noteUserInvoice(userInvoice) <- noteOrder(order);

        EXEC createDetailUserInvoiceOrder(userInvoice, order);
    }

    createUserInvoiceOrder 'Создать накладную' = ACTION (order) {
        IF order IS order THEN {
            FOR ADDOBJ i = userInvoice DO {
                EXEC fillUserInvoiceOrder(i, order);
            }
        }
    }
    Invoice.createUserInvoiceOrder (order) += createUserInvoiceOrder(order);

    createUserInvoicePostedOrder 'Создать проведенную накладную' = ACTION (order) {
        IF order IS order THEN {
            IF differentStocksInDetailsStock(customerStockOrder(order)) THEN {
                FOR ADDOBJ i = userInvoicePosted DO {
                    EXEC fillUserInvoiceOrder(i, order);
                }
            }
                ELSE {
                FOR inOrderSupplierStock(order, supplierStock) DO {
                        FOR ADDOBJ i = userInvoicePosted DO {
                            EXEC fillSupplierStockUserInvoiceOrder(supplierStock, i, order);
                        }
                    }

                }
            }
    }
    Invoice.createUserInvoicePostedOrder (order) += createUserInvoicePostedOrder(order);

    fillOrderUserInvoice 'Заполнить на основе заказа' =  ACTION (userInvoice) {
        FORM invoiceOrders OBJECTS s = supplierUserInvoice(userInvoice), ss = supplierStockUserInvoice(userInvoice),
                                   c = customerUserInvoice(userInvoice), cs = customerStockUserInvoice(userInvoice) MODAL;
        IF formResult() == formResult.ok THEN {
            EXEC createDetailUserInvoiceOrder(userInvoice, chosenObject('o'));
        }
    } IN orderGroup;

// --------------------------- Формы ---------------------------------- //

    editInvoice 'Редактировать' = ABSTRACT ACTION (invoice) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    Invoice.editInvoice (invoice) += editInvoice(invoice);

    FORM userInvoice 'Накладная'###sign
        OBJECTS i = userInvoice FIXED PANEL
        PROPERTIES (i) objectClassName, nameSupplierUserInvoice, nameSupplierStockUserInvoice, nameCustomerUserInvoice, nameCustomerStockUserInvoice,
                       nameNumeratorObject, numberObject, seriesObject, dateUserInvoice, timeUserInvoice,
                       nameCurrencyUserInvoice, nameAgreementUserInvoice, namePriceListTypeUserInvoice SHOWIF noAgreementUserInvoice(i), noteUserInvoice,
                       numberContractSkuUserInvoice, isCommissionUserInvoice,
                       fillOrderUserInvoice, ordersInvoice READONLY,
                       countUserInvoiceDetailUserInvoice, quantityUserInvoiceDetailUserInvoice, sumUserInvoiceDetailUserInvoice,
                       VATSumUserInvoiceDetailUserInvoice, invoiceSumUserInvoiceDetailUserInvoice, toShowProp###userInvoice
        OBJECTS d = userInvoiceDetail
        PROPERTIES (d) indexUserInvoiceDetail, idBarcodeSkuUserInvoiceDetail, nameSkuUserInvoiceDetail, shortNameUOMSkuUserInvoiceDetail
        PROPERTIES (d) SHOWIF toShowProp###userInvoice(i) idBarcodePackUserInvoiceDetail, shortNameUOMPackUserInvoiceDetail,
                       amountPackUserInvoiceDetail, quantityPackUserInvoiceDetail
        PROPERTIES (d) quantityUserInvoiceDetail, namePriceListTypeUserInvoiceDetail,
                       priceUserInvoiceDetail ON CHANGE EXEC changeInvoicePriceUserInvoiceDetail(d), sumUserInvoiceDetail,
                       numberVATUserInvoiceDetail ON CHANGE EXEC changeInvoicePriceVATUserInvoiceDetail(d),
                       valueVATUserInvoiceDetail ON CHANGE EXEC changeInvoicePriceValueVATUserInvoiceDetail(d),
                       invoicePriceUserInvoiceDetail ON CHANGE EXEC changePriceUserInvoiceDetail(d),
                       VATSumUserInvoiceDetail, invoiceSumUserInvoiceDetail,
                       descriptionOrderUserInvoiceDetail, ADDOBJ, delete

        PROPERTIES(i) TODRAW d addDetailDialogSkuStockUserInvoiceDetailUserInvoice,
                               addDetailInputBarcodeUserInvoiceDetailUserInvoice, deleteUserInvoiceDetailUserInvoice
        FILTERS userInvoiceUserInvoiceDetail(d) == i

        EVENTS
            ON OK EXEC prePostUserInvoice(i)

        HINTTABLE LIST dateTimeUserInvoiceDetail, skuUserInvoiceDetail, supplierStockUserInvoiceDetail, customerStockUserInvoiceDetail,
                       priceListTypeUserInvoiceDetail, currencyUserInvoiceDetail,
                       priceUserInvoiceDetail, VATUserInvoiceDetail, valueVATUserInvoiceDetail, invoicePriceUserInvoiceDetail,
                       prevListSkuPriceUserInvoiceDetail, prevListSkuPriceMVATUserInvoiceDetail, prevListSkuPricePVATUserInvoiceDetail


        EDIT userInvoice OBJECT i
    ;

    DESIGN userInvoice FROM DEFAULT{
        main {
            preferredSize = (1024, 768);
            NEW specification.box BEFORE functions.box{

                ADD d.box {
                    title = 'Спецификация';
                    d.panel {
                        childConstraints = TO THE RIGHTBOTTOM;
                    }
                }
            }
            NEW header.box BEFORE specification.box {
                childConstraints = TO THE RIGHT;

                NEW headerRow1 {
                    childConstraints = TO THE BOTTOM;

                    ADD i.documentHeaderGroup {
                        childConstraints = TO THE RIGHTBOTTOM;
                        ADD PROPERTY(objectClassName) { preferredCharWidth = 10; }
                        ADD PROPERTY(nameNumeratorObject);
                        ADD PROPERTY(numberObject);
                        ADD PROPERTY(seriesObject);
                        ADD PROPERTY(dateUserInvoice);
                        ADD PROPERTY(timeUserInvoice);
                    }
                    NEW headerRow12 {
                        childConstraints = TO THE RIGHTBOTTOM;
                        NEW headerRow121 {
                            title = 'Поставщик';
                            childConstraints = TO THE RIGHTBOTTOM;
                            ADD PROPERTY(nameSupplierUserInvoice);
                            ADD PROPERTY(nameSupplierStockUserInvoice);
                        }
                        NEW headerRow122 {
                            title = 'Покупатель';
                            childConstraints = TO THE RIGHTBOTTOM;
                            ADD PROPERTY(nameCustomerUserInvoice);
                            ADD PROPERTY(nameCustomerStockUserInvoice);
                        }
                        NEW headerRow123 {
                            title = 'Договор';
                            childConstraints = TO THE RIGHTBOTTOM;
                            ADD PROPERTY(numberContractSkuUserInvoice);
                            ADD PROPERTY(isCommissionUserInvoice);
                        }
                    }
                    ADD i.documentPrmGroup {
                        childConstraints = TO THE RIGHTBOTTOM;
                        ADD PROPERTY(toShowProp###userInvoice);
                    }
                    NEW headerRow13 {  // title = 'Сооздать на основании';
                        childConstraints = TO THE RIGHTBOTTOM;
                        ADD i.orderGroup {childConstraints = TO THE RIGHTBOTTOM;};
                    }
                    NEW headerRow11 {
                        NEW headerRow111 {
                            title = 'Поставка';
                            childConstraints = TO THE RIGHTBOTTOM;
                        }
                        NEW headerRow112 {
                            title = 'Списание';
                            childConstraints = TO THE RIGHTBOTTOM;
                        }
                        NEW headerRow113 {
                            title = 'Акт расхождения';
                            childConstraints = TO THE RIGHTBOTTOM;
                        }
                    }
                    NEW headerRow14 { //title = 'Расценка / Дооценка';
                        childConstraints = TO THE RIGHTBOTTOM;
                    }
                }

                ADD i.documentSumGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }
            PROPERTY(formOkAction) {
                caption = 'Провести';
            }
        }
    }

//-- SKU
    @defineDocumentSkuPriceListType(userInvoice, stockProp);
    @extendFormDocumentSku(userInvoice, userInvoice, i);
    @defineDocumentSupplierSkuStock (userInvoice, userInvoice, i, s);

    addUserInvoice 'Добавить' = ACTION ADDFORM userInvoice;
    editUserInvoice 'Редактировать' (userInvoice) = ACTION EDITFORM userInvoice;
    editInvoice (invoice) += editUserInvoice(invoice);

    FORM invoices 'Накладные' TITLE 'Накладные'###sign
        OBJECTS i = invoice
        PROPERTIES (i) READONLY isPostedInvoice FORCE GRID, objectClassName, numberInvoice, seriesInvoice, dateInvoice, timeInvoice,
                                nameSupplierInvoice, nameSupplierStockInvoice, nameCustomerInvoice, nameCustomerStockInvoice,
                                nameCurrencyInvoice, nameAgreementInvoice, noteInvoice,
                                numberContractSkuInvoice, isCommissionInvoice,
                                countInvoiceDetailInvoice, quantityInvoiceDetailInvoice, sumInvoiceDetailInvoice,
                                VATSumInvoiceDetailInvoice, invoiceSumInvoiceDetailInvoice, ordersInvoice, toShowProp###invoice
        PROPERTIES (i) READONLY FORCE PANEL nameUserCreatedHistorizable, timeCreatedHistorizable, hostnameComputerCreatedHistorizable, nameUserClosed, timeClosed, hostnameComputerClosed

        PROPERTIES ()  addUserInvoice TODRAW i
        PROPERTIES (i) editInvoice
        PROPERTIES (i) delete FORCE PANEL DRAWTOTOOLBAR  SHOWIF isUserInvoice(i)

        OBJECTS d = invoiceDetail
        PROPERTIES (d) READONLY indexInvoiceDetail, idBarcodeSkuInvoiceDetail, nameSkuInvoiceDetail, shortNameUOMSkuInvoiceDetail
        PROPERTIES (d) READONLY SHOWIF toShowProp##Invoice(i) idBarcodePackInvoiceDetail, shortNameUOMPackInvoiceDetail,
                       amountPackInvoiceDetail, quantityPackInvoiceDetail
        PROPERTIES (d) READONLY quantityInvoiceDetail, namePriceListTypeInvoiceDetail, priceInvoiceDetail, sumInvoiceDetail,
                       numberVATInvoiceDetail, valueVATInvoiceDetail, VATSumInvoiceDetail, invoiceSumInvoiceDetail,
                       descriptionOrderInvoiceDetail

        FILTERS invoiceInvoiceDetail(d) == i

        DIALOG invoice OBJECT i
    ;

    DESIGN invoices FROM DEFAULT {
        main {
            preferredSize = (1024, 768);
            PROPERTY (delete(i)) {
                askConfirm = TRUE;
            }

            NEW documentContainer BEFORE functions.box {
                type = SPLITV;
                childConstraints = TO THE BOTTOM;

                ADD i.box;

                NEW documentDetail {
                    type = TABBED;

                    ADD d.box {
                        title = 'Спецификация';
                    }
                    NEW documentHistory {
                        title = 'История';

                        ADD i.historyGroup;
                        ADD i.postedGroup;
                    }
                    NEW printTab {
                        title = 'Печатные формы';
                        NEW printContainer {
                            title = 'Печать';
                            childConstraints = TO THE BOTTOM;
                            fillVertical = 2.0; // todo : иначе кнопка не всегда показывается, нужно будет пофиксить как-нибудь
                        }
                    }
                }
            }
        }
    }

    FORM invoiceDetails 'Продажа'
        OBJECTS d = invoiceDetail
        PROPERTIES(d) READONLY indexInvoiceDetail, idBarcodeSkuInvoiceDetail, nameSkuInvoiceDetail, shortNameUOMSkuInvoiceDetail,
                               descriptionInvoiceDetail,
                               quantityInvoiceDetail, priceInvoiceDetail, sumInvoiceDetail,
                               numberVATInvoiceDetail, valueVATInvoiceDetail, VATSumInvoiceDetail, invoiceSumInvoiceDetail,
                               name###stockProp###invoiceDetail

        DIALOG invoiceDetail OBJECT d
    ;

END

// Партии
META defineInvoiceBatch(stockProp)
    @defineDocumentInterfaceDetailBatch(invoice, batch);
    //@deriveDocumentDetailPriceBatchPriceListType(userInvoice, stockProp);
    @deriveDocumentDetailPricePriceListTypeBatchVAT(userInvoice, stockProp);

    batchDialogUserInvoiceDetail = ACTION (userInvoiceDetail) {
        FORM dialogBatch OBJECTS st = stockProp###userInvoiceDetail(userInvoiceDetail), t = dateTimeUserInvoiceDetail(userInvoiceDetail),
        sk = skuUserInvoiceDetail(userInvoiceDetail) MODAL;

        IF formResult() == formResult.ok THEN {
            SET batchUserInvoiceDetail(userInvoiceDetail) <- chosenObject('bt');
        }
    };

    EXTEND FORM userInvoice
        PROPERTIES (d) descriptionBatchUserInvoiceDetail ON CHANGE EXEC batchDialogUserInvoiceDetail(d) AFTER shortNameUOMSkuUserInvoiceDetail
        HINTTABLE LIST batchUserInvoiceDetail, prevListBatchPriceUserInvoiceDetail, prevListPriceMVATUserInvoiceDetail, prevListPricePVATUserInvoiceDetail
    ;
    EXTEND FORM invoices PROPERTIES (d) READONLY descriptionBatchInvoiceDetail AFTER shortNameUOMSkuInvoiceDetail;
END

META defineInvoiceReturn(NS, NSR, stockProp)
    invoiceDetailInvoiceDetail (invoiceDetail) = ABSTRACT NS.invoiceDetail (NSR.invoiceDetail) PERSISTENT;
    invoiceDetailUserInvoiceDetail (userInvoiceDetail) = DATA NS.invoiceDetail (NSR.userInvoiceDetail);
    invoiceDetailInvoiceDetail(detail) += invoiceDetailUserInvoiceDetail(detail);

    returnQuantityInvoiceDetail 'Кол-во (возвращено)' (invoiceDetail)= GROUP SUM NSR.quantityInvoiceDetail(invoiceDetail) BY invoiceDetailInvoiceDetail(invoiceDetail);
    returnQuantityInvoiceDetailInvoice 'Кол-во (возвращено)' (invoice) =  GROUP SUM returnQuantityInvoiceDetail(invoiceDetail) BY NS.invoiceInvoiceDetail(invoiceDetail);

    CONSTRAINT returnQuantityInvoiceDetail(detail) > NS.quantityInvoiceDetail(detail)
        MESSAGE 'Количество строки возврата больше чем количество строки основания';

    CONSTRAINT NS.skuInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) != NSR.skuUserInvoiceDetail(detail) CHECKED BY invoiceDetailUserInvoiceDetail
        MESSAGE 'SKU строки основания должен соответствовать SKU строки возврата';

    CONSTRAINT NS.supplierInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) != NSR.supplierUserInvoiceDetail(detail) CHECKED BY invoiceDetailUserInvoiceDetail
        MESSAGE 'Поставщик строки основания должен соответствовать Поставщик строки возврата';

    CONSTRAINT NS.customerInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) != NSR.customerUserInvoiceDetail(detail) CHECKED BY invoiceDetailUserInvoiceDetail
        MESSAGE 'Покупатель строки основания должен соответствовать Покупатель строки возврата';
        
    descriptionInvoiceDetailInvoiceDetail 'Основание' (invoiceDetail) = NS.descriptionInvoiceDetail(invoiceDetailInvoiceDetail(invoiceDetail));
    descriptionInvoiceDetailUserInvoiceDetail 'Основание' (userInvoiceDetail) = NS.descriptionInvoiceDetail(invoiceDetailUserInvoiceDetail(userInvoiceDetail));

    NSR.priceUserInvoiceDetail(detail) <- IF invoiceDetailUserInvoiceDetail(detail) THEN
                                                    NS.priceInvoiceDetail(invoiceDetailUserInvoiceDetail(detail))
                                                 ELSE IF batchUserInvoiceDetail(detail) THEN
                                                    prevPricePriceListTypeBatchStockDateTime(NSR.priceListTypeInvoiceDetail(detail),
                                                                                             NSR.batchInvoiceDetail(detail),
                                                                                             NSR.stockProp###invoiceDetail(detail),
                                                                                             NSR.dateTimeInvoiceDetail(detail))
                                                 ELSE
                                                    prevPricePriceListTypeSkuStockDateTime(NSR.priceListTypeInvoiceDetail(detail),
                                                                                           NSR.skuInvoiceDetail(detail),
                                                                                           NSR.stockProp###invoiceDetail(detail),
                                                                                           NSR.dateTimeInvoiceDetail(detail))
                                        WHEN CHANGED(invoiceDetailUserInvoiceDetail(detail)) OR
                                             CHANGED(NSR.batchInvoiceDetail(detail)) OR
                                             CHANGED(NSR.priceListTypeInvoiceDetail(detail)) OR
                                             CHANGED(NSR.skuInvoiceDetail(detail)) OR
                                             CHANGED(NSR.stockProp###invoiceDetail(detail)) OR
                                             CHANGED(NSR.dateTimeInvoiceDetail(detail));

    NSR.VATUserInvoiceDetail(detail) <- NS.VATInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) WHEN CHANGED(invoiceDetailUserInvoiceDetail(detail));

    EXTEND FORM userInvoice PROPERTIES (d) descriptionInvoiceDetailUserInvoiceDetail AFTER shortNameUOMSkuUserInvoiceDetail;
    EXTEND FORM NS.userInvoice PROPERTIES (d) READONLY returnQuantityInvoiceDetail BEFORE namePriceListTypeUserInvoiceDetail;

    EXTEND FORM invoices PROPERTIES (d) READONLY descriptionInvoiceDetailInvoiceDetail AFTER shortNameUOMSkuInvoiceDetail;
    EXTEND FORM NS.invoices PROPERTIES (d) READONLY returnQuantityInvoiceDetail BEFORE namePriceListTypeInvoiceDetail;

    NSR.batchUserInvoiceDetail(detail) <- NS.maxBatchInvoiceDetail(invoiceDetailUserInvoiceDetail(detail))
        WHEN CHANGED(invoiceDetailUserInvoiceDetail(detail)) AND NS.countBatchInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) == 1;

    CONSTRAINT batchUserInvoiceDetail(detail) AND invoiceDetailUserInvoiceDetail(detail) AND
               NOT costInvoiceDetailBatch(invoiceDetailUserInvoiceDetail(detail), batchUserInvoiceDetail(detail))
               CHECKED BY batchUserInvoiceDetail, invoiceDetailUserInvoiceDetail
               MESSAGE 'Выбрана партия, которая не была списана в соответствующей строке продажи';
END

META defineInvoiceDestination(fromLegalEntity, toLegalEntity)
    Invoice.fromLegalEntityInvoice(invoice) += fromLegalEntity##Invoice(invoice);
    Invoice.toLegalEntityInvoice(invoice) += toLegalEntity##Invoice(invoice);
    //Invoice.dataFromLegalEntityInvoiceDetail(detail) += data###fromLegalEntity##InvoiceDetail(detail);
    //Invoice.dataToLegalEntityInvoiceDetail(detail) += data###toLegalEntity##InvoiceDetail(detail);
END


META defineInvoiceStockDestination(fromStock, toStock)
    Invoice.fromStockInvoice(invoice) += fromStock##Invoice(invoice);
    Invoice.toStockInvoice(invoice) += toStock##Invoice(invoice);
    Invoice.dataFromStockInvoiceDetail(detail) += data###fromStock##InvoiceDetail(detail);
    Invoice.dataToStockInvoiceDetail(detail) += data###toStock##InvoiceDetail(detail);
END
