MODULE Invoice;

REQUIRE Order, Supplier, StockTax;

CLASS ABSTRACT invoice 'Накладная';
CLASS ABSTRACT invoiceDetail 'Строка накладной';

@defineDocumentAbstract(invoice);
@defineDocumentAbstractNumber(invoice);

@defineDocumentAbstractLegalEntity(invoice, supplier, 'Поставщик');
@defineDocumentAbstractLegalEntity(invoice, customer, 'Покупатель');

@defineDocumentAbstractLegalEntity(invoice, fromLegalEntity, 'Отправитель');
@defineDocumentAbstractLegalEntity(invoice, toLegalEntity, 'Получатель');

@defineDocumentAbstractDataStock(invoice, stock, 'Склад поставщика', supplier);
@defineDocumentAbstractDataStock(invoice, stock, 'Склад покупателя', customer);

@defineDocumentAbstractDataStock(invoice, stock, 'Склад (отправитель)', from);
@defineDocumentAbstractDataStock(invoice, stock, 'Склад (получатель)', to);

@defineDocumentAbstractPosted(invoice);

@defineDocumentAbstractDetailSku(invoice, sku);

@defineDocumentAbstractDetailQuantity(invoice);
@defineDocumentDetailGrossWeight(invoice, sku);

@defineDocumentHeaderGrossWeight(invoice);

editInvoice 'Редактировать' = ABSTRACT ACTION (invoice) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' TOOLBAR;

//----------------------------------------------- Накладная ---------------------------------------------------//

META defineInvoice(sign, stockProp)

    CLASS ABSTRACT invoice 'Накладная'###sign : Invoice.invoice;
    CLASS ABSTRACT invoiceDetail 'Строка накладной'###sign : Invoice.invoiceDetail;

    CLASS userInvoice 'Накладная (польз.)'###sign : invoice, historyObject, numeratedDocument;
    CLASS userInvoiceDetail 'Строка накладной (польз.)'###sign : invoiceDetail;
    CLASS userInvoicePosted 'Закрытая накладная (польз.)'###sign : userInvoice, postedObject;

    GROUP invoiceGroup 'Информация о накладной' : baseGroup;

    @defineDocumentInterface(invoice);
    Invoice.invoiceInvoiceDetail (detail) += invoiceInvoiceDetail(detail);
    Invoice.dateInvoice (invoice) += dateInvoice(invoice);
    Invoice.timeInvoice (invoice) += timeInvoice(invoice);

    @defineDocumentInterfaceTimeBefore(invoice);

    @defineDocumentInterfaceNumber(invoice);
    Invoice.numberInvoice (invoice) += numberInvoice(invoice);
    Invoice.seriesInvoice (invoice) += seriesInvoice(invoice);

    @defineDocumentInterfaceLegalEntity (invoice, supplier, 'Поставщик');
    @defineDocumentInterfaceLegalEntity (invoice, customer, 'Покупатель');
    Invoice.supplierInvoice(invoice) += supplierInvoice(invoice);
    Invoice.customerInvoice(invoice) += customerInvoice(invoice);

    @defineDocumentInterfaceDataStock(invoice, stock, 'Склад поставщика', supplier);
    @defineDocumentInterfaceDataStock(invoice, stock, 'Склад покупателя', customer);
    Invoice.supplierStockInvoice(invoice) += supplierStockInvoice(invoice);
    Invoice.customerStockInvoice(invoice) += customerStockInvoice(invoice);
    Invoice.dataSupplierStockInvoiceDetail(detail) += dataSupplierStockInvoiceDetail(detail);
    Invoice.dataCustomerStockInvoiceDetail(detail) += dataCustomerStockInvoiceDetail(detail);

    @defineDocumentInterfacePosted(invoice);
    Invoice.isPostedInvoice (invoice) += isPostedInvoice(invoice);

    @defineDocumentInterfaceDescription(invoice, 'Накладная'###sign);

    @defineDocumentInterfaceCurrency(invoice);
    @deriveDocumentCurrency(userInvoice, supplier, currencyLegalEntity);

    @defineDocumentInterfaceContract(invoice, contractSku, supplier, customer,
                                     'Сторона A договора накладной не соответствует стороне А накладной',
                                     'Сторона B договора накладной не соответствует стороне В накладной');

    @defineDocumentInterfaceDataPriceListType(invoice);

    @defineDocumentInterfaceDetailSku(invoice, sku);
    Invoice.skuInvoiceDetail(detail) += skuInvoiceDetail(detail);

    @defineDocumentInterfaceDetailQuantity(invoice);
    Invoice.quantityInvoiceDetail(detail) += quantityInvoiceDetail(detail);

    @defineDocumentDetailGrossWeight(invoice, sku);
    @defineDocumentDetailQuantityPack(invoice, sku);

    @defineDocumentInterfaceDetailPrice(invoice);
   // @deriveDocumentDetailPricePriceListTypeCustom(userInvoiceDetail, stockProp);

    @defineDocumentInterfaceDetailDataSum(invoice);
    @deriveDocumentDetailSum(userInvoice, quantity);

    @defineDocumentInterfaceDetailVAT(invoice, country###stockProp);
    @defineDocumentInterfaceDetailVATDataSum (invoice);
    @deriveDocumentDetailDirectVATSum(userInvoice);

    @defineDocumentInterfaceDetailPricePrefix (invoice, invoice, ' с НДС');
    @deriveDocumentDetailVAT (userInvoice, , date,  sku, stockProp);
    @deriveDocumentDetailPricePriceListTypeVAT (userInvoice, stockProp);

    @defineDocumentInterfaceHeaderQuantity(invoice);
    @defineDocumentHeaderSkuQuantity(invoice, sku);
    @defineDocumentHeaderSkuQuantity(userInvoice, sku);
    @defineDocumentInterfaceHeaderSum(invoice);
    @defineDocumentInterfaceHeaderVATSum(invoice);

    @defineAddDetailDialogSkuStock(userInvoice, sku, stockProp, dialogSku);
    @defineAddDetailDialogBarcode(userInvoice, sku);

    @defineDocumentInterfaceHeaderAgreement(invoice);
    @deriveDocumentHeaderAgreement (userInvoice, supplierUserInvoice, customerUserInvoice);
    @deriveDocumentDetailPriceListTypeAgreement(invoice);

    noAgreementUserInvoice (invoice) = invoice IS userInvoice AND NOT agreementUserInvoice(invoice);

    countInvoiceDetailStockInvoice (stock, invoice) = GROUP SUM 1 BY stockProp###invoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);


//--  Связь с заказом
    orderInvoiceDetail = ABSTRACT order (invoiceDetail) PERSISTENT;
    orderUserInvoiceDetail = DATA order(userInvoiceDetail);
    orderInvoiceDetail(invoiceDetail) += orderUserInvoiceDetail(invoiceDetail);

    CONSTRAINT supplierInvoiceDetail(invoiceDetail) != supplierOrder(orderUserInvoiceDetail(invoiceDetail)) OR
               customerUserInvoiceDetail(invoiceDetail) != customerOrder(orderUserInvoiceDetail(invoiceDetail))
        CHECKED BY orderUserInvoiceDetail
            MESSAGE 'Поставщик и покупатель в заказе и накладной должны соответствовать друг другу';

    GROUP orderGroup 'Информация о заказе' : publicGroup;

    descriptionOrderInvoiceDetail 'Заказ' (invoiceDetail) = descriptionOrder(orderInvoiceDetail(invoiceDetail)) IN orderGroup;
    descriptionOrderUserInvoiceDetail 'Заказ' (userInvoiceDetail) = descriptionOrder(orderUserInvoiceDetail(userInvoiceDetail)) IN orderGroup;

    quantityInvoiceDetailOrderInvoice (order, invoice) = GROUP SUM quantityInvoiceDetail(invoiceDetail) BY orderInvoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);
    ordersInvoice 'Заказы' (invoice) = GROUP CONCAT castToString255(descriptionOrder(order)) IF quantityInvoiceDetailOrderInvoice(order, invoice) , ', '
                                             BY invoice
                                             ORDER order
                                             IN orderGroup MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

    invoicedInvoiceDetailOrderSku 'Выписано накладных' (order, sku) = GROUP SUM quantityInvoiceDetail(invoiceDetail) IF isPostedInvoiceDetail(invoiceDetail)
                                                               BY orderInvoiceDetail(invoiceDetail), skuInvoiceDetail(invoiceDetail);
    invoicedOrderDetail 'Выписано накладных' (orderDetail) = PARTITION UNGROUP invoicedInvoiceDetailOrderSku
                                                              LIMIT STRICT quantityOrderDetail (orderDetail)
                                                              BY orderOrderDetail(orderDetail), skuOrderDetail(orderDetail)
                                                              ORDER orderDetail;

    EXTEND FORM userOrder PROPERTIES(d) READONLY invoicedOrderDetail AFTER quantityUserOrderDetail;
    EXTEND FORM orders PROPERTIES(d) READONLY invoicedOrderDetail AFTER quantityOrderDetail;

    toInvoiceOrderDetail 'Не выписано накладных' (orderDetail) = quantityOrderDetail (orderDetail) (-) invoicedOrderDetail(orderDetail);

    toInvoiceOrderDetailStockOrder 'Не выписано накладных по складу' (stock, order) =
        GROUP SUM toInvoiceOrderDetail(orderDetail) IF toInvoiceOrderDetail(orderDetail) > 0
        BY stockProp###OrderDetail(orderDetail), orderOrderDetail(orderDetail);

    // Создание заказа на основе инвойса //

    FORM invoiceOrders 'Заказы'###sign
        OBJECTS s = legalEntity FIXED PANEL
        PROPERTIES (s) READONLY name
        OBJECTS c = legalEntity FIXED PANEL
        PROPERTIES (c) READONLY name

        OBJECTS o = order
        PROPERTIES (o) READONLY isPostedOrder FORCE GRID, objectClassName, numberOrder, seriesOrder, dateOrder, timeOrder,
                                nameSupplierOrder, nameSupplierStockOrder, nameCustomerOrder, nameCustomerStockOrder, nameCurrencyOrder, noteOrder,
                                countOrderDetailOrder, quantityOrderDetailOrder, sumOrderDetailOrder
        FILTERS isPostedOrder(o),
                supplierOrder(o) == s,
                customerOrder(o) == c
//        FILTERGROUP order
//            FILTER 'Заказы с невыписанными товарами со склада' 'F10' toInvoiceOrderDetailStockOrder(s, o) DEFAULT
//            FILTER 'Заказы со склада' 'F9' countOrderDetailStockOrder(s, o)

        OBJECTS d = orderDetail
        PROPERTIES (d) READONLY indexOrderDetail, idBarcodeSkuOrderDetail, nameSkuOrderDetail, shortNameUOMSkuOrderDetail,
                                quantityOrderDetail, invoicedOrderDetail, priceOrderDetail, sumOrderDetail, name###stockProp###orderDetail,
                                toInvoiceOrderDetail
        FILTERS orderOrderDetail(d) == o
//        FILTERGROUP orderDetail
//            FILTER 'Строки с невыписанными товарами со склада' 'F10' stockProp###orderDetail(d) == s AND toInvoiceOrderDetail(d) > 0 DEFAULT
//            FILTER 'Строки со склада' 'F9' stockProp###orderDetail(d) == s
    ;

    DESIGN invoiceOrders FROM DEFAULT {
        main {
            preferredSize = (1024, 768);
            NEW documentContainer BEFORE functions.box {

                childConstraints = TO THE BOTTOM;

                NEW headerBox {
                    childConstraints = TO THE RIGHT;
                    ADD s.box {title = 'Поставщик';};
                    ADD c.box {title = 'Покупатель';};
                }
                ADD o.box;
                NEW documentDetail {
                    type = TABBED;

                    ADD d.box {
                        title = 'Спецификация';
                    }
                    NEW printTab {
                        title = 'Печатные формы';
                        NEW printContainer {
                            title = 'Печать';
                            childConstraints = TO THE BOTTOM;
                            fillVertical = 1.0;
                        }
                    }
                }
            }
            PROPERTY(toInvoiceOrderDetail) { background = #FFFFCC; }
        }
    }

    fillOrderUserInvoice 'Заполнить на основе заказа' =  ACTION (userInvoice) {
        FORM invoiceOrders OBJECTS s = supplierUserInvoice(userInvoice), c = customerUserInvoice(userInvoice) MODAL;
        IF formResult() == formResult.ok THEN {
            LOCAL saleOrder = order();
            SET saleOrder() <- chosenObject('o');

            FOR orderOrderDetail(orderDetail) == saleOrder() AND
//                stockProp###orderDetail(orderDetail) == stockProp###userInvoice(userInvoice) AND
                toInvoiceOrderDetail(orderDetail) > 0
                ADDOBJ d = userInvoiceDetail DO {
                    SET userInvoiceUserInvoiceDetail(d) <- userInvoice;
                    SET orderUserInvoiceDetail(d) <- saleOrder();
                    SET skuUserInvoiceDetail(d) <- skuOrderDetail(orderDetail);
                    SET quantityUserInvoiceDetail (d) <- toInvoiceOrderDetail(orderDetail);
                    SET priceUserInvoiceDetail (d) <- priceOrderDetail(orderDetail);
                    SET sumUserInvoiceDetail (d) <- sumOrderDetail(orderDetail);
            }
        }
    } IN orderGroup;

// --------------------------- Формы ---------------------------------- //

    editInvoice 'Редактировать' = ABSTRACT ACTION (invoice) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' TOOLBAR;
    Invoice.editInvoice (invoice) += editInvoice(invoice);

    FORM userInvoice 'Накладная'###sign
        OBJECTS i = userInvoice FIXED PANEL
        PROPERTIES (i) objectClassName, nameSupplierUserInvoice, nameSupplierStockUserInvoice, nameCustomerUserInvoice, nameCustomerStockUserInvoice,
                       nameNumeratorObject, numberObject, seriesObject, dateUserInvoice, timeUserInvoice,
                       nameCurrencyUserInvoice, nameAgreementUserInvoice, namePriceListTypeUserInvoice SHOWIF noAgreementUserInvoice(i), noteUserInvoice,
                       numberContractSkuUserInvoice, isCommissionUserInvoice,
                       fillOrderUserInvoice, ordersInvoice READONLY,
                       countUserInvoiceDetailUserInvoice, quantityUserInvoiceDetailUserInvoice, sumUserInvoiceDetailUserInvoice,
                       VATSumUserInvoiceDetailUserInvoice, invoiceSumUserInvoiceDetailUserInvoice
        OBJECTS d = userInvoiceDetail
        PROPERTIES (d) indexUserInvoiceDetail, idBarcodeSkuUserInvoiceDetail, nameSkuUserInvoiceDetail, shortNameUOMSkuUserInvoiceDetail,
                       quantityUserInvoiceDetail, namePriceListTypeUserInvoiceDetail, priceUserInvoiceDetail, sumUserInvoiceDetail, invoicePriceUserInvoiceDetail,
                       numberVATUserInvoiceDetail, valueVATUserInvoiceDetail, VATSumUserInvoiceDetail, invoiceSumUserInvoiceDetail,
                       descriptionOrderUserInvoiceDetail, ADDOBJ, delete

        PROPERTIES(i) TODRAW d addDetailDialogSkuStockUserInvoiceDetailUserInvoice,
                               addDetailInputBarcodeUserInvoiceDetailUserInvoice, deleteUserInvoiceDetailUserInvoice
        FILTERS userInvoiceUserInvoiceDetail(d) == i

        EVENTS
            ON OK EXEC prePostUserInvoice(i)

        EDIT userInvoice OBJECT i
    ;

    DESIGN userInvoice FROM DEFAULT{
        main {
            preferredSize = (1024, 768);
            NEW specification.box BEFORE functions.box{

                ADD d.box {
                    title = 'Спецификация';
                    d.panel {
                        childConstraints = TO THE RIGHTBOTTOM;
                    }
                }
            }
            NEW header.box BEFORE specification.box {
                childConstraints = TO THE RIGHTBOTTOM;

                NEW headerRow1 {
                    childConstraints = TO THE BOTTOM;

                    ADD i.documentHeaderGroup {
                        childConstraints = TO THE RIGHTBOTTOM;
                        ADD PROPERTY(objectClassName) { preferredCharWidth = 10; }
                        ADD PROPERTY(nameNumeratorObject);
                        ADD PROPERTY(numberObject);
                        ADD PROPERTY(seriesObject);
                        ADD PROPERTY(dateUserInvoice);
                        ADD PROPERTY(timeUserInvoice);
                    }
                    NEW headerRow12 {
                        childConstraints = TO THE RIGHTBOTTOM;
                        NEW headerRow121 {
                            title = 'Поставщик';
                            childConstraints = TO THE RIGHTBOTTOM;
                            ADD PROPERTY(nameSupplierUserInvoice);
                            ADD PROPERTY(nameSupplierStockUserInvoice);
                        }
                        NEW headerRow122 {
                            title = 'Покупатель';
                            childConstraints = TO THE RIGHTBOTTOM;
                            ADD PROPERTY(nameCustomerUserInvoice);
                            ADD PROPERTY(nameCustomerStockUserInvoice);
                        }
                        NEW headerRow123 {
                            title = 'Договор';
                            childConstraints = TO THE RIGHTBOTTOM;
                            ADD PROPERTY(numberContractSkuUserInvoice);
                            ADD PROPERTY(isCommissionUserInvoice);
                        }
                    }
                    ADD i.documentPrmGroup {
                        childConstraints = TO THE RIGHTBOTTOM;
                    }
                    NEW headerRow13 {  // title = 'Сооздать на основании';
                        childConstraints = TO THE RIGHTBOTTOM;
                        ADD i.orderGroup {childConstraints = TO THE RIGHTBOTTOM;};
                    }
                    NEW headerRow11 {
                        NEW headerRow111 {
                            title = 'Поставка';
                            childConstraints = TO THE RIGHTBOTTOM;
                        }
                        NEW headerRow112 {
                            title = 'Списание';
                            childConstraints = TO THE RIGHTBOTTOM;
                        }
                        NEW headerRow113 {
                            title = 'Акт расхождения';
                            childConstraints = TO THE RIGHTBOTTOM;
                        }
                    }
                    NEW headerRow14 { //title = 'Расценка / Дооценка';
                        childConstraints = TO THE RIGHTBOTTOM;
                    }
                }

                ADD i.documentSumGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }
            PROPERTY(formOkAction) {
                caption = 'Провести';
            }
        }
    }

//-- SKU
    @defineDocumentSku(userInvoice, sku, stockProp);
    @extendFormDocumentSku(userInvoice, userInvoice, i);

    addUserInvoice 'Добавить' = ACTION ADDFORM userInvoice;
    editUserInvoice 'Редактировать' (userInvoice) = ACTION EDITFORM userInvoice;
    editInvoice (invoice) += editUserInvoice(invoice);

    FORM invoices 'Накладные' TITLE 'Накладные'###sign
        OBJECTS i = invoice
        PROPERTIES (i) READONLY isPostedInvoice FORCE GRID, objectClassName, numberInvoice, seriesInvoice, dateInvoice, timeInvoice,
                                nameSupplierInvoice, nameSupplierStockInvoice, nameCustomerInvoice, nameCustomerStockInvoice,
                                nameCurrencyInvoice, nameAgreementInvoice, noteInvoice,
                                numberContractSkuInvoice, isCommissionInvoice,
                                countInvoiceDetailInvoice, quantityInvoiceDetailInvoice, sumInvoiceDetailInvoice,
                                VATSumInvoiceDetailInvoice, invoiceSumInvoiceDetailInvoice, ordersInvoice
        PROPERTIES (i) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

        PROPERTIES ()  addUserInvoice TODRAW i
        PROPERTIES (i) editInvoice
        PROPERTIES (i) delete FORCE PANEL DRAWTOTOOLBAR  SHOWIF isUserInvoice(i)

        OBJECTS d = invoiceDetail
        PROPERTIES (d) READONLY indexInvoiceDetail, idBarcodeSkuInvoiceDetail, nameSkuInvoiceDetail, shortNameUOMSkuInvoiceDetail,
                       quantityInvoiceDetail, namePriceListTypeInvoiceDetail, priceInvoiceDetail, sumInvoiceDetail,
                       numberVATInvoiceDetail, valueVATInvoiceDetail, VATSumInvoiceDetail, invoiceSumInvoiceDetail,
                       descriptionOrderInvoiceDetail

        FILTERS invoiceInvoiceDetail(d) == i

        DIALOG invoice OBJECT i
    ;

    DESIGN invoices FROM DEFAULT {
        main {
            preferredSize = (1024, 768);
            PROPERTY (delete(i)) {
                askConfirm = TRUE;
            }

            NEW documentContainer BEFORE functions.box {
                type = SPLITV;
                childConstraints = TO THE BOTTOM;

                ADD i.box;

                NEW documentDetail {
                    type = TABBED;

                    ADD d.box {
                        title = 'Спецификация';
                    }
                    NEW documentHistory {
                        title = 'История';

                        ADD i.historyGroup;
                        ADD i.postedGroup;
                    }
                    NEW printTab {
                        title = 'Печатные формы';
                        NEW printContainer {
                            title = 'Печать';
                            childConstraints = TO THE BOTTOM;
                            fillVertical = 2.0; // todo : иначе кнопка не всегда показывается, нужно будет пофиксить как-нибудь
                        }
                    }
                }
            }
        }
    }

    FORM invoiceDetails 'Продажа'
        OBJECTS d = invoiceDetail
        PROPERTIES(d) READONLY indexInvoiceDetail, idBarcodeSkuInvoiceDetail, nameSkuInvoiceDetail, shortNameUOMSkuInvoiceDetail,
                               descriptionInvoiceDetail,
                               quantityInvoiceDetail, priceInvoiceDetail, sumInvoiceDetail,
                               numberVATInvoiceDetail, valueVATInvoiceDetail, VATSumInvoiceDetail, invoiceSumInvoiceDetail,
                               name###stockProp###invoiceDetail

        DIALOG invoiceDetail OBJECT d
    ;

END

// Партии
META defineInvoiceBatch(stockProp)
    @defineDocumentInterfaceDetailBatch(invoice, batch);
    @deriveDocumentDetailPriceBatchPriceListType(userInvoice, stockProp);

    EXTEND FORM userInvoice PROPERTIES (d) descriptionBatchUserInvoiceDetail AFTER shortNameUOMSkuUserInvoiceDetail;
    EXTEND FORM invoices PROPERTIES (d) READONLY descriptionBatchInvoiceDetail AFTER shortNameUOMSkuInvoiceDetail;
END

META defineInvoiceReturn(NS, NSR, stockProp)
    invoiceDetailInvoiceDetail (invoiceDetail) = ABSTRACT NS.invoiceDetail (NSR.invoiceDetail) PERSISTENT;
    invoiceDetailUserInvoiceDetail (userInvoiceDetail) = DATA NS.invoiceDetail (NSR.userInvoiceDetail);
    invoiceDetailInvoiceDetail(detail) += invoiceDetailUserInvoiceDetail(detail);

    returnQuantityInvoiceDetail 'Кол-во (возвращено)' (invoiceDetail)= GROUP SUM NSR.quantityInvoiceDetail(invoiceDetail) BY invoiceDetailInvoiceDetail(invoiceDetail);
    returnQuantityInvoiceDetailInvoice 'Кол-во (возвращено)' (invoice) =  GROUP SUM returnQuantityInvoiceDetail(invoiceDetail) BY NS.invoiceInvoiceDetail(invoiceDetail);

    CONSTRAINT returnQuantityInvoiceDetail(detail) > NS.quantityInvoiceDetail(detail)
        MESSAGE 'Количество строки возврата больше чем количество строки основания';

    CONSTRAINT NS.skuInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) != NSR.skuUserInvoiceDetail(detail) CHECKED BY invoiceDetailUserInvoiceDetail
        MESSAGE 'SKU строки основания должен соответствовать SKU строки возврата';

    CONSTRAINT NS.supplierInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) != NSR.supplierUserInvoiceDetail(detail) CHECKED BY invoiceDetailUserInvoiceDetail
        MESSAGE 'Поставщик строки основания должен соответствовать Поставщик строки возврата';

    CONSTRAINT NS.customerInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) != NSR.customerUserInvoiceDetail(detail) CHECKED BY invoiceDetailUserInvoiceDetail
        MESSAGE 'Покупатель строки основания должен соответствовать Покупатель строки возврата';
        
    descriptionInvoiceDetailInvoiceDetail 'Основание' (invoiceDetail) = NS.descriptionInvoiceDetail(invoiceDetailInvoiceDetail(invoiceDetail));
    descriptionInvoiceDetailUserInvoiceDetail 'Основание' (userInvoiceDetail) = NS.descriptionInvoiceDetail(invoiceDetailUserInvoiceDetail(userInvoiceDetail));

    NSR.priceUserInvoiceDetail(detail) <- IF invoiceDetailUserInvoiceDetail(detail) THEN
                                                    NS.priceInvoiceDetail(invoiceDetailUserInvoiceDetail(detail))
                                                 ELSE IF batchUserInvoiceDetail(detail) THEN
                                                    prevPricePriceListTypeBatchStockDateTime(NSR.priceListTypeInvoiceDetail(detail),
                                                                                             NSR.batchInvoiceDetail(detail),
                                                                                             NSR.stockProp###invoiceDetail(detail),
                                                                                             NSR.dateTimeInvoiceDetail(detail))
                                                 ELSE
                                                    prevPricePriceListTypeSkuStockDateTime(NSR.priceListTypeInvoiceDetail(detail),
                                                                                           NSR.skuInvoiceDetail(detail),
                                                                                           NSR.stockProp###invoiceDetail(detail),
                                                                                           NSR.dateTimeInvoiceDetail(detail))
                                        WHEN CHANGED(invoiceDetailUserInvoiceDetail(detail)) OR
                                             CHANGED(NSR.batchInvoiceDetail(detail)) OR
                                             CHANGED(NSR.priceListTypeInvoiceDetail(detail)) OR
                                             CHANGED(NSR.skuInvoiceDetail(detail)) OR
                                             CHANGED(NSR.stockProp###invoiceDetail(detail)) OR
                                             CHANGED(NSR.dateTimeInvoiceDetail(detail));

    NSR.VATUserInvoiceDetail(detail) <- NS.VATInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) WHEN CHANGED(invoiceDetailUserInvoiceDetail(detail));

    EXTEND FORM userInvoice PROPERTIES (d) descriptionInvoiceDetailUserInvoiceDetail AFTER shortNameUOMSkuUserInvoiceDetail;
    EXTEND FORM NS.userInvoice PROPERTIES (d) READONLY returnQuantityInvoiceDetail BEFORE namePriceListTypeUserInvoiceDetail;

    EXTEND FORM invoices PROPERTIES (d) READONLY descriptionInvoiceDetailInvoiceDetail AFTER shortNameUOMSkuInvoiceDetail;
    EXTEND FORM NS.invoices PROPERTIES (d) READONLY returnQuantityInvoiceDetail BEFORE namePriceListTypeInvoiceDetail;

    NSR.batchUserInvoiceDetail(detail) <- NS.maxBatchInvoiceDetail(invoiceDetailUserInvoiceDetail(detail))
        WHEN CHANGED(invoiceDetailUserInvoiceDetail(detail)) AND NS.countBatchInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) == 1;

    CONSTRAINT batchUserInvoiceDetail(detail) AND invoiceDetailUserInvoiceDetail(detail) AND
               NOT costInvoiceDetailBatch(invoiceDetailUserInvoiceDetail(detail), batchUserInvoiceDetail(detail))
               CHECKED BY batchUserInvoiceDetail, invoiceDetailUserInvoiceDetail
               MESSAGE 'Выбрана партия, которая не была списана в соответствующей строке продажи';
END