MODULE Invoice;

REQUIRE Order, Consignment;


//----------------------------------------------- Накладная ---------------------------------------------------//

META defineInvoice(sign, contact, partyA, partyB)

    CLASS ABSTRACT invoice 'Накладная'###sign:  consignment;
    CLASS ABSTRACT invoiceDetail 'Строка накладной'###sign: consignmentDetail;

    CLASS userInvoice 'Накладная (польз.)'###sign : invoice, historyObject, numeratedDocument;
    CLASS userInvoiceDetail 'Строка накладной (польз.)'###sign : invoiceDetail;
    CLASS userInvoicePosted 'Закрытая накладная (польз.)'###sign : userInvoice, postedObject;

    GROUP invoiceGroup 'Информация о накладной' : baseGroup;

    @defineDocumentInterface(invoice);

    @defineDocumentInterfaceNumber(invoice);

    @defineDocumentInterfaceDataStock(invoice, stock, 'Склад');
    @defineDocumentInterfacePosted(invoice);

    @defineDocumentInterfaceDescription(invoice, 'Накладная'###sign);

    @defineDocumentInterfaceCurrency(invoice);
    @deriveDocumentCurrency(userInvoice, stock);

    @defineDocumentInterface###contact(invoice);
    @defineDocumentInterfaceContract(invoice, contractSku###contact, singleContractSku###contact###partyA###partyB, partyA###Invoice, partyB###Invoice,
                                     'Сторона A договора накладной не соответствует компании склада-отправителя',
                                     'Сторона B договора накладной не соответствует покупателю');
    @defineDocumentInterfaceDataPriceListType(invoice);

    @defineDocumentInterfaceDetailSku(invoice, sku);

    @defineDocumentInterfaceDetailQuantity(invoice);

    @defineDocumentInterfaceDetailPrice(invoice);
    @deriveDocumentDetailPricePriceListTypeCustom(userInvoiceDetail);

    @defineDocumentInterfaceDetailDataSum(invoice);
    @deriveDocumentDetailSum(userInvoice);

    @defineDocumentInterfaceDetailVAT(invoice, countryStock);
    @defineDocumentInterfaceDetailVATDataSum (invoice);
    @deriveDocumentDetailVATSum(userInvoice);

    @defineDocumentInterfaceHeaderQuantity(invoice);
    @defineDocumentHeaderSkuQuantity(invoice, sku);
    @defineDocumentHeaderSkuQuantity(userInvoice, sku);
    @defineDocumentInterfaceHeaderSum(invoice);
    @defineDocumentInterfaceHeaderVATSum(invoice);

    @defineAddDetailDialogSkuStock(userInvoice, sku, stock, dialogSku);
    @defineAddDetailDialogBarcode(userInvoice, sku);

    @defineDocumentInterfaceHeaderAgreement(invoice, companyUserInvoice, contact###userInvoice);
    @deriveDocumentDetailPriceListTypeAgreement(invoice);

    countInvoiceDetailStockInvoice (stock, invoice) = GROUP SUM 1 BY stockInvoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);

//--  Связь с заказом
    orderInvoiceDetail = ABSTRACT order (invoiceDetail);
    orderUserInvoiceDetail = DATA order(userInvoiceDetail);
    orderInvoiceDetail(invoiceDetail) += orderUserInvoiceDetail(invoiceDetail);

    CONSTRAINT contact###InvoiceDetail(invoiceDetail) != contact###Order(orderUserInvoiceDetail(invoiceDetail)) OR
               companyStockUserInvoiceDetail(invoiceDetail) != companyOrder(orderUserInvoiceDetail(invoiceDetail))
        CHECKED BY orderUserInvoiceDetail
            MESSAGE 'Покупатель и компания в заказе и накладной должны соответствовать друг другу';

    GROUP orderGroup 'Информация о заказе' : publicGroup;

    descriptionOrderInvoiceDetail 'Заказ' (invoiceDetail) = descriptionOrder(orderInvoiceDetail(invoiceDetail)) IN orderGroup;
    descriptionOrderUserInvoiceDetail 'Заказ' (userInvoiceDetail) = descriptionOrder(orderUserInvoiceDetail(userInvoiceDetail)) IN orderGroup;

    quantityInvoiceDetailOrderInvoice (order, invoice) = GROUP SUM quantityInvoiceDetail(invoiceDetail) BY orderInvoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);
    ordersInvoice 'Заказы' (invoice) = GROUP CONCAT castToString255(descriptionOrder(order)) IF quantityInvoiceDetailOrderInvoice(order, invoice) , ', '
                                             BY invoice
                                             ORDER order
                                             IN orderGroup MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

    invoicedInvoiceDetailOrderSku 'Выписано накладных' (order, sku) = GROUP SUM quantityInvoiceDetail(invoiceDetail) IF isPostedInvoiceDetail(invoiceDetail)
                                                               BY orderInvoiceDetail(invoiceDetail), skuInvoiceDetail(invoiceDetail);
    invoicedOrderDetail 'Выписано накладных' (orderDetail) = PARTITION UNGROUP invoicedInvoiceDetailOrderSku
                                                              LIMIT STRICT quantityOrderDetail (orderDetail)
                                                              BY orderOrderDetail(orderDetail), skuOrderDetail(orderDetail)
                                                              ORDER orderDetail;

    EXTEND FORM userOrder PROPERTIES(d) READONLY invoicedOrderDetail AFTER quantityUserOrderDetail;
    EXTEND FORM orders PROPERTIES(d) READONLY invoicedOrderDetail AFTER quantityOrderDetail;

    toInvoiceOrderDetail 'Не выписано накладных' (orderDetail) = quantityOrderDetail (orderDetail) (-) invoicedOrderDetail(orderDetail);

    toInvoiceOrderDetailStockOrder 'Не выписано накладных по складу' (stock, order) =
        GROUP SUM toInvoiceOrderDetail(orderDetail) IF toInvoiceOrderDetail(orderDetail) > 0
        BY stockOrderDetail(orderDetail), orderOrderDetail(orderDetail);

    // Создание заказа на основе инвойса //

    FORM invoiceOrders 'Заказы'###sign
        OBJECTS s = stock FIXED PANEL
        PROPERTIES (s) READONLY name
        OBJECTS c = contact FIXED PANEL
        PROPERTIES (c) READONLY name

        OBJECTS o = order
        PROPERTIES (o) READONLY isPostedOrder FORCE GRID, objectClassName, numberOrder, seriesOrder, dateOrder, timeOrder,
                                nameStockOrder, name###contact###Order, nameCurrencyOrder, noteOrder,
                                countOrderDetailOrder, quantityOrderDetailOrder, sumOrderDetailOrder
        FILTERS isPostedOrder(o),
                contact###Order(o) == c
        FILTERGROUP order
            FILTER 'Заказы с невыписанными товарами со склада' 'F10' toInvoiceOrderDetailStockOrder(s, o) DEFAULT
            FILTER 'Заказы со склада' 'F9' countOrderDetailStockOrder(s, o)

        OBJECTS d = orderDetail
        PROPERTIES (d) READONLY indexOrderDetail, idBarcodeSkuOrderDetail, nameSkuOrderDetail, shortNameUOMSkuOrderDetail,
                                quantityOrderDetail, invoicedOrderDetail, priceOrderDetail, sumOrderDetail, nameStockOrderDetail,
                                toInvoiceOrderDetail
        FILTERS orderOrderDetail(d) == o
        FILTERGROUP orderDetail
            FILTER 'Строки с невыписанными товарами со склада' 'F10' stockOrderDetail(d) == s AND toInvoiceOrderDetail(d) > 0 DEFAULT
            FILTER 'Строки со склада' 'F9' stockOrderDetail(d) == s

        DIALOG order OBJECT o
    ;

    DESIGN invoiceOrders FROM DEFAULT {
        main {
            preferredSize = (1024, 768);
            NEW documentContainer BEFORE functions.box {

                childConstraints = TO THE BOTTOM;

                NEW headerBox {
                    childConstraints = TO THE RIGHT;
                    ADD s.box;
                    ADD c.box;
                }
                ADD o.box;
                NEW documentDetail {
                    type = TABBED;

                    ADD d.box {
                        title = 'Спецификация';
                    }
                    NEW printTab {
                        title = 'Печатные формы';
                        NEW printContainer {
                            title = 'Печать';
                            childConstraints = TO THE BOTTOM;
                            fillVertical = 1.0;
                        }
                    }
                }
            }
            PROPERTY(toInvoiceOrderDetail) { background = #FFFFCC; }
        }
    }

    fillOrderUserInvoice 'Заполнить на основе заказа' =  ACTION (userInvoice) {
        FORM invoiceOrders OBJECTS s = stockUserInvoice(userInvoice), c = contact###UserInvoice(userInvoice) MODAL;
        IF formResult() == formResult.ok THEN {
            LOCAL saleOrder = order();
            SET saleOrder() <- chosenObject('o');

            FOR orderOrderDetail(orderDetail) == saleOrder() AND
                stockOrderDetail(orderDetail) == stockUserInvoice(userInvoice) AND
                toInvoiceOrderDetail(orderDetail) > 0
                ADDOBJ d = userInvoiceDetail DO {
                    SET userInvoiceUserInvoiceDetail(d) <- userInvoice;
                    SET orderUserInvoiceDetail(d) <- saleOrder();
                    SET skuUserInvoiceDetail(d) <- skuOrderDetail(orderDetail);
                    SET quantityUserInvoiceDetail (d) <- toInvoiceOrderDetail(orderDetail);
                    SET priceUserInvoiceDetail (d) <- priceOrderDetail(orderDetail);
                    SET sumUserInvoiceDetail (d) <- sumOrderDetail(orderDetail);
            }
        }
    } IN orderGroup;

// --------------------------- Формы ---------------------------------- //

    FORM userInvoice 'Накладная'###sign
        OBJECTS i = userInvoice FIXED PANEL
        PROPERTIES (i) objectClassName, nameStockUserInvoice, nameNumeratorObject, numberObject, seriesObject, dateUserInvoice, timeUserInvoice,
                       name###contact###UserInvoice, nameCurrencyUserInvoice, nameAgreementUserInvoice, namePriceListTypeUserInvoice, noteUserInvoice,
                       numberContractSku###contact###UserInvoice, isCommissionUserInvoice,
                       fillOrderUserInvoice, ordersInvoice READONLY,
                       countUserInvoiceDetailUserInvoice, quantityUserInvoiceDetailUserInvoice, sumUserInvoiceDetailUserInvoice,
                       VATSumUserInvoiceDetailUserInvoice, invoiceSumUserInvoiceDetailUserInvoice
        OBJECTS d = userInvoiceDetail
        PROPERTIES (d) indexUserInvoiceDetail, idBarcodeSkuUserInvoiceDetail, nameSkuUserInvoiceDetail, shortNameUOMSkuUserInvoiceDetail,
                       quantityUserInvoiceDetail, namePriceListTypeUserInvoiceDetail, priceUserInvoiceDetail, sumUserInvoiceDetail,
                       numberVATUserInvoiceDetail, valueVATUserInvoiceDetail, VATSumUserInvoiceDetail, invoiceSumUserInvoiceDetail,
                       nameStockUserInvoiceDetail, descriptionOrderUserInvoiceDetail, ADDOBJ, delete

        PROPERTIES(i) TODRAW d addDetailDialogSkuStockUserInvoiceDetailUserInvoice,
                               addDetailInputBarcodeUserInvoiceDetailUserInvoice, deleteUserInvoiceDetailUserInvoice
        FILTERS userInvoiceUserInvoiceDetail(d) == i

        EVENTS
            ON OK EXEC prePostUserInvoice(i)

        EDIT userInvoice OBJECT i
    ;

    DESIGN userInvoice FROM DEFAULT{
        main {
            preferredSize = (1024, 768);
            NEW specification.box BEFORE functions.box{

                ADD d.box {
                    title = 'Спецификация';
                    d.panel {
                        childConstraints = TO THE BOTTOM;
                    }
                }
            }
            NEW header.box BEFORE specification.box {
                childConstraints = TO THE RIGHT;

                NEW headerRow1 {
                    childConstraints = TO THE BOTTOM;

                    ADD i.documentHeaderGroup {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(objectClassName) { preferredCharWidth = 10; }
                        ADD PROPERTY(nameStockUserInvoice);
                        ADD PROPERTY(nameNumeratorObject);
                        ADD PROPERTY(numberObject);
                        ADD PROPERTY(seriesObject);
                        ADD PROPERTY(dateUserInvoice);
                        ADD PROPERTY(timeUserInvoice);
                    }

                    NEW headerRow2 {
                        childConstraints = TO THE RIGHT;
                        ADD i.documentPrmGroup;
                        ADD i.orderGroup;
                    }
                }

                ADD i.documentSumGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }
            PROPERTY(formOkAction) {
                caption = 'Провести';
            }
        }
    }

//-- SKU
    @defineDocumentSku(userInvoice);
    @extendFormDocumentSku(userInvoice, userInvoice, i);

    addUserInvoice 'Добавить' = ACTION ADDFORM userInvoice;
    editUserInvoice 'Редактировать' (userInvoice) = ACTION EDITFORM userInvoice;

    FORM invoices 'Накладные' TITLE 'Накладные'###sign
        OBJECTS i = invoice
        PROPERTIES (i) READONLY isPostedInvoice FORCE GRID, objectClassName, numberInvoice, seriesInvoice, dateInvoice, timeInvoice,
                                nameStockInvoice, name###contact###Invoice, nameCurrencyInvoice, nameAgreementInvoice, noteInvoice,
                                numberContractSku###contact###Invoice, isCommissionInvoice,
                                countInvoiceDetailInvoice, quantityInvoiceDetailInvoice, sumInvoiceDetailInvoice,
                                VATSumInvoiceDetailInvoice, invoiceSumInvoiceDetailInvoice, ordersInvoice
        PROPERTIES (i) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

        PROPERTIES ()  addUserInvoice TODRAW i
        PROPERTIES (i) editUserInvoice
        PROPERTIES (i) delete FORCE PANEL DRAWTOTOOLBAR  SHOWIF isUserInvoice(i)

        OBJECTS d = invoiceDetail
        PROPERTIES (d) READONLY indexInvoiceDetail, idBarcodeSkuInvoiceDetail, nameSkuInvoiceDetail, shortNameUOMSkuInvoiceDetail,
                       quantityInvoiceDetail, namePriceListTypeInvoiceDetail, priceInvoiceDetail, sumInvoiceDetail,
                       numberVATInvoiceDetail, valueVATInvoiceDetail, VATSumInvoiceDetail, invoiceSumInvoiceDetail,
                       nameStockInvoiceDetail, descriptionOrderInvoiceDetail

        FILTERS invoiceInvoiceDetail(d) == i

        DIALOG invoice OBJECT i
    ;

    DESIGN invoices FROM DEFAULT {
        main {
            preferredSize = (1024, 768);
            PROPERTY (delete(i)) {
                askConfirm = TRUE;
            }

            NEW documentContainer BEFORE functions.box {
                type = SPLITV;
                childConstraints = TO THE BOTTOM;

                ADD i.box;

                NEW documentDetail {
                    type = TABBED;

                    ADD d.box {
                        title = 'Спецификация';
                    }
                    NEW documentHistory {
                        title = 'История';

                        ADD i.historyGroup;
                        ADD i.postedGroup;
                    }
                    NEW printTab {
                        title = 'Печатные формы';
                        NEW printContainer {
                            title = 'Печать';
                            childConstraints = TO THE BOTTOM;
                            fillVertical = 2.0; // todo : иначе кнопка не всегда показывается, нужно будет пофиксить как-нибудь
                        }
                    }
                }
            }
        }
    }

    FORM invoiceDetails 'Продажа'
        OBJECTS d = invoiceDetail
        PROPERTIES(d) READONLY indexInvoiceDetail, idBarcodeSkuInvoiceDetail, nameSkuInvoiceDetail, shortNameUOMSkuInvoiceDetail,
                               descriptionInvoiceDetail,
                               quantityInvoiceDetail, priceInvoiceDetail, sumInvoiceDetail,
                               numberVATInvoiceDetail, valueVATInvoiceDetail, VATSumInvoiceDetail, invoiceSumInvoiceDetail,
                               nameStockInvoiceDetail

        DIALOG invoiceDetail OBJECT d
    ;

END

// Партии
META defineInvoiceBatch(dumb)
    @defineDocumentInterfaceDetailBatch(invoice, batch);
    @deriveDocumentDetailPriceBatchPriceListType(userInvoice);

    EXTEND FORM userInvoice PROPERTIES (d) descriptionBatchUserInvoiceDetail AFTER shortNameUOMSkuUserInvoiceDetail;
    EXTEND FORM invoices PROPERTIES (d) READONLY descriptionBatchInvoiceDetail AFTER shortNameUOMSkuInvoiceDetail;
END

META defineInvoiceReturn(NS, NSR, contact)
    invoiceDetailInvoiceDetail (invoiceDetail) = ABSTRACT NS.invoiceDetail (NSR.invoiceDetail);
    invoiceDetailUserInvoiceDetail (userInvoiceDetail) = DATA NS.invoiceDetail (NSR.userInvoiceDetail);
    invoiceDetailInvoiceDetail(detail) += invoiceDetailUserInvoiceDetail(detail);

    returnQuantityInvoiceDetail 'Кол-во (возвращено)' (invoiceDetail)= GROUP SUM NSR.quantityInvoiceDetail(invoiceDetail) BY invoiceDetailInvoiceDetail(invoiceDetail);
    returnQuantityInvoiceDetailInvoice 'Кол-во (возвращено)' (invoice) =  GROUP SUM returnQuantityInvoiceDetail(invoiceDetail) BY NS.invoiceInvoiceDetail(invoiceDetail);

    CONSTRAINT returnQuantityInvoiceDetail(detail) > NS.quantityInvoiceDetail(detail)
        MESSAGE 'Количество строки возврата больше чем количество строки основания';

    CONSTRAINT NS.skuInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) != NSR.skuUserInvoiceDetail(detail) CHECKED BY invoiceDetailUserInvoiceDetail
        MESSAGE 'SKU строки основания должен соответствовать SKU строки возврата';

    CONSTRAINT NS.##contact##InvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) != NSR.##contact##UserInvoiceDetail(detail) CHECKED BY invoiceDetailUserInvoiceDetail
        MESSAGE 'Контрагент строки основания должен соответствовать Контрагент строки возврата';

    CONSTRAINT NS.companyStockInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) != NSR.companyStockUserInvoiceDetail(detail) CHECKED BY invoiceDetailUserInvoiceDetail
        MESSAGE 'Компания строки основания должна соответствовать Покупателю строки возврата';

    descriptionInvoiceDetailInvoiceDetail 'Основание' (invoiceDetail) = NS.descriptionInvoiceDetail(invoiceDetailInvoiceDetail(invoiceDetail));
    descriptionInvoiceDetailUserInvoiceDetail 'Основание' (userInvoiceDetail) = NS.descriptionInvoiceDetail(invoiceDetailUserInvoiceDetail(userInvoiceDetail));

    NSR.priceUserInvoiceDetail(detail) <- IF invoiceDetailUserInvoiceDetail(detail) THEN
                                                    NS.priceInvoiceDetail(invoiceDetailUserInvoiceDetail(detail))
                                                 ELSE IF batchUserInvoiceDetail(detail) THEN
                                                    pricePriceListTypeBatchStockDateTime(NSR.priceListTypeInvoiceDetail(detail),
                                                                                         NSR.batchInvoiceDetail(detail),
                                                                                         NSR.stockInvoiceDetail(detail),
                                                                                         NSR.dateTimeInvoiceDetail(detail))
                                                 ELSE
                                                    pricePriceListTypeSkuStockDateTime(NSR.priceListTypeInvoiceDetail(detail),
                                                                                       NSR.skuInvoiceDetail(detail),
                                                                                       NSR.stockInvoiceDetail(detail),
                                                                                       NSR.dateTimeInvoiceDetail(detail))
                                        WHEN CHANGED(invoiceDetailUserInvoiceDetail(detail)) OR
                                             CHANGED(NSR.batchInvoiceDetail(detail)) OR
                                             CHANGED(NSR.priceListTypeInvoiceDetail(detail)) OR
                                             CHANGED(NSR.skuInvoiceDetail(detail)) OR
                                             CHANGED(NSR.stockInvoiceDetail(detail)) OR
                                             CHANGED(NSR.dateTimeInvoiceDetail(detail));

    NSR.VATUserInvoiceDetail(detail) <- NS.VATInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) WHEN CHANGED(invoiceDetailUserInvoiceDetail(detail));

    EXTEND FORM userInvoice PROPERTIES (d) descriptionInvoiceDetailUserInvoiceDetail AFTER shortNameUOMSkuUserInvoiceDetail;
    EXTEND FORM NS.userInvoice PROPERTIES (d) READONLY returnQuantityInvoiceDetail BEFORE priceUserInvoiceDetail;

    EXTEND FORM invoices PROPERTIES (d) READONLY descriptionInvoiceDetailInvoiceDetail AFTER shortNameUOMSkuInvoiceDetail;
    EXTEND FORM NS.invoices PROPERTIES (d) READONLY returnQuantityInvoiceDetail BEFORE priceInvoiceDetail;

    NSR.batchUserInvoiceDetail(detail) <- NS.maxBatchInvoiceDetail(invoiceDetailUserInvoiceDetail(detail))
        WHEN CHANGED(invoiceDetailUserInvoiceDetail(detail)) AND NS.countBatchInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) == 1;

    CONSTRAINT batchUserInvoiceDetail(detail) AND invoiceDetailUserInvoiceDetail(detail) AND
               NOT costInvoiceDetailBatch(invoiceDetailUserInvoiceDetail(detail), batchUserInvoiceDetail(detail))
               CHECKED BY batchUserInvoiceDetail, invoiceDetailUserInvoiceDetail
               MESSAGE 'Выбрана партия, которая не была списана в соответствующей строке продажи';
END

// Товарные накладные
META defineInvoiceConsignment(partyA, partyB)
    @defineDocumentDetailPackWeightSku(invoice);
    @defineConsignmentInterface(invoice);
    @implementConsignmentDetailSku(invoice);

    senderConsignment (consignment) += partyA###Invoice(consignment);
    recipientConsignment (consignment) += partyB###Invoice(consignment);
    currencyConsignment (consignment) += currencyInvoice(consignment);

    priceConsignmentDetail (consignmentDetail) += priceInvoiceDetail(consignmentDetail);

    sumConsignmentDetail (consignmentDetail) += sumInvoiceDetail (consignmentDetail);

    vatConsignmentDetail (consignmentDetail) += valueVATInvoiceDetail(consignmentDetail);

    sumVATConsignmentDetail (consignmentDetail) +=  VATSumInvoiceDetail(consignmentDetail);

    sumInvoiceConsignmentDetail (consignmentDetail) += invoiceSumInvoiceDetail(consignmentDetail);

    shortNameUOMConsignmentDetail (consignmentDetail) += shortNameUOMSku(skuInvoiceDetail (consignmentDetail));

    //noteInvoiceWHOutDetail (invoiceWHOutDetail) = [FORMULA STRING[30] '\'Цена импортера:\' ||  \' \' || CAST($1 AS TEXT)'](
    //    importerPriceBatchA(batchAInvoiceWHOutDetail(invoiceWHOutDetail)));

    //noteConsignmentDetail (consignmentDetail) += noteInvoiceWHOutDetail(consignmentDetail) IF
    //    importerPriceBatchA(batchAInvoiceWHOutDetail(consignmentDetail)) != supplierPriceInvoiceWHOutDetail(consignmentDetail);

    EXTEND FORM  invoices
        PROPERTIES (i)  FORCE PANEL printConsignmentVerticalA, printConsignmentHorizontalA,
                         printConsignmentVerticalB, printConsignmentHorizontalB,
                         printConsignmentAttach, printConsignmentSimpleHorizontal, editConsignment,
                         printConsignmentSimpleVertical, printConsignmentSimpleAttach
    ;

    EXTEND DESIGN invoices {
        printContainer {
            NEW consignmentRow1 {
                childConstraints = TO THE RIGHT;

                NEW contOne {
                    title = 'Накладная';
                    ADD PROPERTY(editConsignment);
                }
                NEW tn{
                    childConstraints = TO THE RIGHT;
                    title = 'ТН-2';
                    ADD PROPERTY(printConsignmentSimpleVertical);
                    ADD PROPERTY(printConsignmentSimpleHorizontal);
                    ADD PROPERTY(printConsignmentSimpleAttach);
                }
            }
            NEW consignmentRow2 {
                childConstraints = TO THE RIGHT;
                title = 'ТТН-1';
                ADD PROPERTY(printConsignmentVerticalA);
                ADD PROPERTY(printConsignmentHorizontalA);
                ADD PROPERTY(printConsignmentVerticalB);
                ADD PROPERTY(printConsignmentHorizontalB);
                ADD PROPERTY(printConsignmentAttach);
            }
        }
    }
END