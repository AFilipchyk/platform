MODULE Agreement;

REQUIRE Currency,
        Document,
        LegalEntity,
        Numerator,
        PriceList;

CLASS agreement 'Соглашение' : named, numeratedObject;

TABLE agreement (agreement);

@defineNumeratedObjectDefault(agreement, 'Нумератор для договоров', 'ТД');

@defineDocumentHeaderTime(agreement);
@defineDocumentHeaderTimePrefix(agreement, from, ' с');

@defineDocumentHeaderTimePrefix(agreement, to, ' по');
toDateAgreement(agreement) <- NULL WHEN ASSIGNED(agreement IS agreement);
toTimeAgreement(agreement) <- NULL WHEN ASSIGNED(agreement IS agreement);

@defineDocumentHeaderNote(agreement);
@defineDocumentHeaderCurrency(agreement);
@defineDocumentHeaderDescription(agreement, seriesNumberObject, 'Соглашение');

inSupplierAgreement 'Отм' = DATA BOOLEAN (agreement);

TABLE agreementLegalEntityGroup (agreement, legalEntityGroup);
inAgreementSupplierGroup 'Отм' = DATA BOOLEAN (agreement, legalEntityGroup);

TABLE agreementLegalEntity(agreement, legalEntity);
inAgreementSupplier 'Отм.' (agreement, legalEntity) = DATA BOOLEAN (agreement, legalEntity);

levelParentAgreementSupplierGroup (agreement, legalEntityGroup) =
    GROUP MIN levelLegalEntityGroupLegalEntityGroup(legalEntityGroup, parent) IF inAgreementSupplierGroup(agreement, parent)
          BY agreement, legalEntityGroup PERSISTENT;
nearestParentLegalEntityGroup (agreement, legalEntityGroup) =
    legalEntityGroupLegalEntityGroupLevel(legalEntityGroup, levelParentAgreementSupplierGroup(agreement, legalEntityGroup));
nearestInAgreementSupplierGroup (agreement, legalEntityGroup) =
    inAgreementSupplierGroup(agreement, nearestParentLegalEntityGroup(agreement, legalEntityGroup));

inAgreementSupplierGroupOver 'Отм' (agreement, legalEntityGroup) =
    UNION OVERRIDE inSupplierAgreement(agreement) AND legalEntityGroup IS legalEntityGroup,
                   nearestInAgreementSupplierGroup(agreement, legalEntityGroup),
                   inAgreementSupplierGroup(agreement, legalEntityGroup);

inAgreementSupplierOver 'Отм' (agreement, legalEntity) =
    UNION OVERRIDE inSupplierAgreement(agreement) AND legalEntity IS legalEntity,
                   nearestInAgreementSupplierGroup(agreement, legalEntityGroupLegalEntity(legalEntity)),
                   inAgreementSupplier(agreement, legalEntity);

supplierAgreement 'Контрагенты' (agreement) = GROUP CONCAT name(legalEntity) IF inAgreementSupplierOver(agreement, legalEntity) , ', '
                                                 BY agreement
                                                 ORDER legalEntity MINCHARWIDTH 100 PERSISTENT;

customerAgreement (agreement) = DATA legalEntity (agreement);
nameCustomerAgreement 'Компания' (agreement) = name(customerAgreement(agreement));

priceListTypeAgreement (agreement) = DATA priceListType (agreement) NOT NULL;
namePriceListTypeAgreement 'Вид цены' (agreement) = name(priceListTypeAgreement(agreement));

TABLE agreementPriceGroup(agreement, priceGroup);
priceListTypeAgreementPriceGroup (agreement, priceGroup) = DATA priceListType (agreement, priceGroup);
namePriceListTypeAgreementPriceGroup 'Вид цены' (agreement, priceGroup) = name(priceListTypeAgreementPriceGroup(agreement, priceGroup));

TABLE agreementSku(agreement, sku);
priceListTypeAgreementSku (agreement, sku) = DATA priceListType (agreement, sku);
namePriceListTypeAgreementSku 'Вид цены' (agreement, sku) = name(priceListTypeAgreementSku(agreement, sku));

CONSTRAINT currencyAgreement(agreement) != currencyPriceListType(priceListTypeAgreement(agreement))
           CHECKED BY priceListTypeAgreement
           MESSAGE 'Валюта соглашения должна совпадать с валютой вида цены';

CONSTRAINT currencyAgreement(agreement) != currencyPriceListType(priceListTypeAgreementPriceGroup(agreement, priceGroup))
           CHECKED BY priceListTypeAgreementPriceGroup
           MESSAGE 'Валюта соглашения должна совпадать с валютой вида цены';

CONSTRAINT currencyAgreement(agreement) != currencyPriceListType(priceListTypeAgreementSku(agreement, sku))
           CHECKED BY priceListTypeAgreementSku
           MESSAGE 'Валюта соглашения должна совпадать с валютой вида цены';

priceListTypeAgreementSkuOver (agreement, sku) =
    UNION OVERRIDE priceListTypeAgreement(agreement) AND sku IS sku,
                   priceListTypeAgreementPriceGroup(agreement, priceGroupSku(sku)),
                   priceListTypeAgreementSku(agreement, sku);

namePriceListTypeAgreementSkuOver 'Вид цены' = name(priceListTypeAgreementSkuOver(agreement, sku));

userDefaultAgreementCustomerSupplier = DATA agreement (legalEntity, legalEntity);
userDefaultAgreementCustomerSupplier(company, legalEntity) => inAgreementSupplierOver(userDefaultAgreementCustomerSupplier(company, legalEntity), legalEntity) RESOLVE FALSE;

calcDefaultAgreementCustomerSupplier(company, legalEntity) =
    GROUP MAX agreement IF inAgreementSupplierOver(agreement, legalEntity)
    BY customerAgreement(agreement), legalEntity;

defaultAgreementCustomerSupplier(company, legalEntity) = UNION OVERRIDE calcDefaultAgreementCustomerSupplier(company, legalEntity), userDefaultAgreementCustomerSupplier(company, legalEntity) PERSISTENT;
nameDefaultAgreementCustomerSupplier 'Соглашение по умолчанию' (company, legalEntity) = name(defaultAgreementCustomerSupplier(company, legalEntity));

isDefaultAgreementCustomerSupplier 'Соглашение по умолчанию' (agreement, company, legalEntity) = defaultAgreementCustomerSupplier(company, legalEntity) == agreement;

META defineDocumentAbstractHeaderAgreement (object)
    agreement###object (object) = ABSTRACT agreement (object) PERSISTENT;
    nameAgreement###object 'Соглашение' (object)= name(agreement###object(object)) IN documentPrmGroup MINCHARWIDTH 5 PREFCHARWIDTH 10;
END
META defineDocumentHeaderAgreement (object)
    agreement###object (object) = DATA agreement (object);
    nameAgreement###object 'Соглашение' (object)= name(agreement###object(object)) IN documentPrmGroup MINCHARWIDTH 5 PREFCHARWIDTH 10;
END
META defineDocumentInterfaceHeaderAgreement (object, company, legalEntity)
    @defineDocumentAbstractHeaderAgreement(object);
    @defineDocumentHeaderAgreement(user###object);
    agreement###user###object (object) <- defaultAgreementCustomerSupplier(company(object), legalEntity(object))
        IF currency###user###object(object) == currencyAgreement(defaultAgreementCustomerSupplier(company(object), legalEntity(object)))
    WHEN CHANGED(currency###user###object(object)) OR
         CHANGED(legalEntity(object));
    agreement###object (object) += agreement###user###object(object);

    CONSTRAINT currency###user###object(object) != currencyAgreement(agreement###user###object(object))
               CHECKED BY agreement###user###object
               MESSAGE 'Валюта документа должны совпадать с валютой соглашения';

    CONSTRAINT customerAgreement(agreement###user###object(object)) != company(object)
               CHECKED BY agreement###user###object
               MESSAGE 'Соглашение должно быть между заданными юр. лицами';

    CONSTRAINT agreement###user###object(object)
               AND NOT inAgreementSupplierOver(agreement###user###object(object), legalEntity(object))
               CHECKED BY agreement###user###object
               MESSAGE 'Соглашение должно быть между заданными юр. лицами';
END


META deriveDocumentDetailPriceListTypeAgreementCustom (object, detail)
    priceListType###user###detail(detail) <- IF agreement###user###object(object###detail(detail))
                                             THEN priceListTypeAgreementSkuOver(agreement###user###object(object###detail(detail)), sku###user###detail(detail))
                                             ELSE priceListType###user###object(object###detail(detail))
    WHEN CHANGED(agreement###user###object(object###detail(detail))) OR
         CHANGED(priceListType###user###object(object###detail(detail)));
END
META deriveDocumentDetailPriceListTypeAgreement (object)
    @deriveDocumentDetailPriceListTypeAgreementCustom(object, object###detail);
END

//--------------------------------------- Для двух объектов ----------------------------------------------------------//
META defineDocumentDoubleHeaderAgreement (object, legalEntity)
    agreement###object###legalEntity (object, legalEntity) = DATA agreement (object, legalEntity);
    nameAgreement###object###legalEntity 'Соглашение' (object, legalEntity)= name(agreement###object###legalEntity(object, legalEntity)) IN documentPrmGroup MINCHARWIDTH 5 PREFCHARWIDTH 10;
    dataPriceListType###object###legalEntity (object, legalEntity) = priceListTypeAgreement(agreement###object###legalEntity (object, legalEntity));
    priceListType###object###legalEntity (object, legalEntity) =
        UNION OVERRIDE dataPriceListType###object###legalEntity(object, legalEntity),
                       userPriceListType###object###legalEntity(object, legalEntity);
    namePriceListType###object###legalEntity 'Вид цен' (object, legalEntity)= name(priceListType###object###legalEntity(object, legalEntity)) IN documentPrmGroup MINCHARWIDTH 5 PREFCHARWIDTH 10;
END
META defineDocumentDoubleInterfaceHeaderAgreement (object, company, legalEntity)
    @defineDocumentDoubleHeaderAgreement(object, legalEntity);
    agreement###object###legalEntity (object, legalEntity) <- defaultAgreementCustomerSupplier(company(object), legalEntity)
        IF currency###object(object) == currencyAgreement(defaultAgreementCustomerSupplier(company(object), legalEntity))
    WHEN CHANGED(currency###object(object)) AND legalEntity IS legalEntity OR
         CHANGED(in###object###legalEntity(object, legalEntity));

    CONSTRAINT currency###object(object) != currencyAgreement(agreement###object###legalEntity(object, legalEntity))
               CHECKED BY agreement###object###legalEntity
               MESSAGE 'Валюта документа должны совпадать с валютой соглашения';

    CONSTRAINT customerAgreement(agreement###object###legalEntity(object, legalEntity)) != company(object)
               CHECKED BY agreement###object###legalEntity
               MESSAGE 'Соглашение должно быть между заданными юр. лицами';

    CONSTRAINT agreement###object###legalEntity(object, legalEntity)
               AND NOT inAgreementSupplierOver(agreement###object###legalEntity(object, legalEntity), legalEntity)
               CHECKED BY agreement###object###legalEntity
               MESSAGE 'Соглашение должно быть между заданными юр. лицами';
END

META deriveDocumentDoubleDetailPriceListTypeAgreementCustom (object, detail, legalEntity)
    priceListType###detail (idetail) = UNION OVERRIDE priceListType###object###legalEntity(object###detail(idetail), legalEntity###detail(idetail)), dataPriceListType###detail(idetail) PERSISTENT;
    namePriceListType###detail 'Вид цен' (idetail) = name(priceListType###detail(idetail)) MINCHARWIDTH 10 PREFCHARWIDTH 20;

    priceListType###detail(detail) <- IF agreement###object###legalEntity(object###detail(detail), legalEntity###detail(detail))
                                             THEN priceListTypeAgreementSkuOver(agreement###object###legalEntity(object###detail(detail), legalEntity###detail(detail)), sku###detail(detail))
                                             ELSE priceListType###object###legalEntity(object###detail(detail), legalEntity###detail(detail))
    WHEN CHANGED(agreement###object###legalEntity(object###detail(detail), legalEntity###detail(detail))) OR
         CHANGED(priceListType###object###legalEntity(object###detail(detail), legalEntity###detail(detail))) OR
         CHANGED(sku###detail(detail)) OR
         CHANGED(stock###detail(detail)) OR
         CHANGED(legalEntity###detail(detail));
END
META deriveDocumentDoubleDetailPriceListTypeAgreement (object, legalEntity)
    @deriveDocumentDoubleDetailPriceListTypeAgreementCustom(object, object###detail, legalEntity);
END

META deriveDocumentDetailPricePriceListTypeCustom (detail, stockProp)
    price###detail(detail) <- prevPricePriceListTypeSkuStockDateTime(priceListType###detail(detail),
                                                                     sku###detail(detail),
                                                                     stockProp###detail(detail),
                                                                     dateTime###detail(detail))
                                    WHEN CHANGED(priceListType###detail(detail)) OR
                                         CHANGED(sku###detail(detail)) OR
                                         CHANGED(stockProp###detail(detail)) OR
                                         CHANGED(dateTime###detail(detail));
END

META deriveDocumentDetailPricePriceListType (object, stockProp)
    @deriveDocumentDetailPricePriceListTypeCustom(object##Detail, stockProp);
END

META deriveDocumentDetailPriceBatchPriceListTypeCustom (detail, stockProp)
    price###detail(detail) <- IF batch###detail(detail) THEN
                                    prevPricePriceListTypeBatchStockDateTime(priceListType###detail(detail),
                                                                             batch###detail(detail),
                                                                             stockProp###detail(detail),
                                                                             dateTime###detail(detail))
                              ELSE
                                    prevPricePriceListTypeSkuStockDateTime(priceListType###detail(detail),
                                                                           sku###detail(detail),
                                                                           stockProp###detail(detail),
                                                                           dateTime###detail(detail))
                                    WHEN CHANGED(batch###detail(detail)) OR
                                         CHANGED(priceListType###detail(detail)) OR
                                         CHANGED(sku###detail(detail)) OR
                                         CHANGED(stockProp###detail(detail)) OR
                                         CHANGED(dateTime###detail(detail));
END

META deriveDocumentDetailPriceBatchPriceListType (object, stockProp)
    @deriveDocumentDetailPriceBatchPriceListTypeCustom(object##Detail, stockProp);
END

FORM agreementsLegalEntity 'Соглашения'

    OBJECTS l=legalEntity FIXED PANEL
    PROPERTIES(l) name

    OBJECTS c=legalEntity FIXED PANEL
    PROPERTIES(c) name

    OBJECTS ag=agreement
    PROPERTIES(ag) READONLY name, numberObject, seriesObject, dateAgreement, timeAgreement,
                            fromDateAgreement, fromTimeAgreement, toDateAgreement, toTimeAgreement,
                            nameCurrencyAgreement, namePriceListTypeAgreement, noteAgreement
    PROPERTIES inAgreementSupplierOver(ag, l)
;

DESIGN agreementsLegalEntity FROM DEFAULT{
    NEW mainContainer{
        REMOVE l.box;
        REMOVE c.box;
        ADD ag.box;
    }
    ADD functions.box;
}

addAgreementsCustomerSupplier 'Добавление соглашений' = ACTION (company, legalEntity) {

    FORM agreementsLegalEntity OBJECTS c=company, l=legalEntity MODAL;
    IF formResult() == formResult.ok THEN {
        EXEC apply();
    }
} TOOLBAR;

FORM agreement 'Соглашение'

    OBJECTS a = agreement FIXED PANEL
    PROPERTIES(a) name, nameNumeratorObject, numberObject, seriesObject, dateAgreement, timeAgreement,
                  fromDateAgreement, fromTimeAgreement, toDateAgreement, toTimeAgreement, nameCustomerAgreement,
                  nameCurrencyAgreement, namePriceListTypeAgreement, noteAgreement

    TREE legalEntityGroupTree b=STRING[3], lg = legalEntityGroup PARENT parentLegalEntityGroup
    PROPERTIES READONLY OBJVALUE(b), lgTreeName = name(lg)
    FILTERS stringEqualsAll(b)
    PROPERTIES(a) inSupplierAgreement TODRAW b FORCE GRID
    PROPERTIES(a, lg) inAgreementSupplierGroupOver

    OBJECTS l = legalEntity
    PROPERTIES(l) READONLY name
    PROPERTIES(a, l) inAgreementSupplierOver
    FILTERS inLegalEntityGroupLegalEntity(lg, l)

    FILTERGROUP filters
        FILTER 'Только отмеченные' 'F10' inAgreementSupplierOver (a, l)

    TREE priceGroupTree g=priceGroup PARENT parentPriceGroup
    PROPERTIES READONLY name(g)
    ORDER BY name(g)

    OBJECTS pg = priceGroup
    PROPERTIES(pg) READONLY canonicalNamePriceGroup
    PROPERTIES(a, pg) namePriceListTypeAgreementPriceGroup
    FILTERS isParentPriceGroupPriceGroup(pg, g)

    TREE skuGroupTree sg=skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY name(sg)
    ORDER BY name(sg)

    OBJECTS s = sku
    PROPERTIES(s) READONLY nameSku
    PROPERTIES(a, s) namePriceListTypeAgreementSku
    FILTERS isParentSkuGroupSku(sg, s)

    EDIT agreement OBJECT a
;

DESIGN agreement FROM DEFAULT {

    NEW topContainer{
        childConstraints = TO THE BOTTOM;
        NEW headContainer {
            caption = 'Шапка документа';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY (name);
            ADD PROPERTY (nameNumeratorObject);
            ADD PROPERTY (numberObject);
            ADD PROPERTY (seriesObject);
            ADD PROPERTY (dateAgreement);
            ADD PROPERTY (timeAgreement);

        }
        NEW firstContainer{
            childConstraints = TO THE BOTTOM;
            NEW timeContainer{
                caption = 'Период действия';
                childConstraints = TO THE RIGHT;
                ADD PROPERTY (fromDateAgreement);
                ADD PROPERTY (fromTimeAgreement);
                ADD PROPERTY (toDateAgreement);
                ADD PROPERTY (toTimeAgreement);
            }
            NEW propContainer{
                caption = 'Параметры документа';
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(nameCustomerAgreement);
                ADD PROPERTY(nameCurrencyAgreement);
                ADD PROPERTY(namePriceListTypeAgreement);
                ADD PROPERTY(noteAgreement);
            }
        }
            NEW tabContainer{
                type = TABBED;
                NEW legalEntityBox{
                    caption = 'Контрагенты';
                    childConstraints = TO THE RIGHT;
                    type = SPLITH;
                    ADD legalEntityGroupTree.tree.box;
                    ADD l.box{
                        fillHorizontal = 2.0;
                    }
                }
                NEW priceGroupContainer{
                    childConstraints = TO THE RIGHT;
                    caption = 'Уточнение цен по ценовым группам';
                    type = SPLITH;
                    ADD priceGroupTree.tree.box;
                    ADD pg.box{fillHorizontal = 3.0;}
                }
                NEW skuContainer{
                    childConstraints = TO THE RIGHT;
                    caption = 'Уточнение цен по товарам';
                    type = SPLITH;
                    ADD skuGroupTree.tree.box;
                    ADD s.box{fillHorizontal = 3.0;}
                }
            }
    }
    ADD functions.box;
}

createAgreementCustomerSupplier 'Создать соглашение' = ACTION (company, legalEntity) {

    FOR ADDOBJ ag = agreement DO {
        SET inAgreementSupplier(ag, legalEntity) <- TRUE;
        SET customerAgreement(ag) <- (company AS legalEntity);
        FORM agreement OBJECTS a = ag MODAL;
        IF TRUE AND NOT formResult() == formResult.ok THEN {
            EXEC delete(ag);
        }
    }
} TOOLBAR;

FORM agreements 'Соглашения'

    OBJECTS a = agreement
    PROPERTIES(a) READONLY name, seriesNumberObject, dateTimeAgreement,
                           fromDateTimeAgreement, toDateTimeAgreement, nameCustomerAgreement,
                           nameCurrencyAgreement, namePriceListTypeAgreement, supplierAgreement, noteAgreement

    PROPERTIES(a) ADDFORM, EDITFORM, delete
;

EXTEND FORM legalEntity

    OBJECTS s=legalEntity
    PROPERTIES(s) READONLY name

    OBJECTS ag=agreement
    PROPERTIES(ag, l, s) isDefaultAgreementCustomerSupplier
    PROPERTIES(ag, s) inAgreementSupplierOver
    PROPERTIES(ag) READONLY name, numberObject, seriesObject, dateAgreement, timeAgreement,
                            fromDateAgreement, fromTimeAgreement, toDateAgreement, toTimeAgreement,
                            nameCurrencyAgreement, namePriceListTypeAgreement, noteAgreement
    PROPERTIES(ag) EDITFORM
    PROPERTIES createAgreementCustomerSupplier(l, s) TODRAW ag FORCE PANEL DRAWTOTOOLBAR, addAgreementsCustomerSupplier(l, s) TODRAW ag FORCE PANEL DRAWTOTOOLBAR
    FILTERS inAgreementSupplierOver(ag, s)

    OBJECTS c=legalEntity
    PROPERTIES(c) READONLY name

    OBJECTS ag2=agreement
    PROPERTIES(ag2, c, l) isDefaultAgreementCustomerSupplier
    PROPERTIES(ag2, l) inAgreementSupplierOver
    PROPERTIES(ag2) READONLY name, numberObject, seriesObject, dateAgreement, timeAgreement,
                            fromDateAgreement, fromTimeAgreement, toDateAgreement, toTimeAgreement,
                            nameCurrencyAgreement, namePriceListTypeAgreement, noteAgreement
    PROPERTIES(ag2) EDITFORM
    PROPERTIES createAgreementCustomerSupplier(c, l) TODRAW ag2 FORCE PANEL DRAWTOTOOLBAR, addAgreementsCustomerSupplier(c, l) TODRAW ag2 FORCE PANEL DRAWTOTOOLBAR
    FILTERS inAgreementSupplierOver(ag2, l)
;

EXTEND DESIGN legalEntity {
    extendContainer {
        NEW agreementBuyContainer{
            caption = 'Соглашения на поставку';
            type = SPLITH;
            ADD s.box;
            ADD ag.box{fillHorizontal = 3;}
        }
        NEW agreementSaleContainer{
            caption = 'Соглашения на продажу';
            type = SPLITH;
            ADD c.box;
            ADD ag2.box{fillHorizontal = 3;}
        }
    }
}