MODULE Agreement;

REQUIRE Currency,
        Document,
        LegalEntity,
        Numerator,
        PriceList;

CLASS agreement 'Соглашение' : named, numeratedObject;

TABLE agreement (agreement);

@defineNumeratedObjectDefault(agreement, 'Нумератор для договоров', 'ТД');

@defineDocumentHeaderTime(agreement);
@defineDocumentHeaderTimePrefix(agreement, from, ' с');

@defineDocumentHeaderTimePrefix(agreement, to, ' по');
toDateAgreement(agreement) <- NULL WHEN ASSIGNED(agreement IS agreement);
toTimeAgreement(agreement) <- NULL WHEN ASSIGNED(agreement IS agreement);

@defineDocumentHeaderNote(agreement);
@defineDocumentHeaderCurrency(agreement);
@defineDocumentHeaderDescription(agreement, seriesNumberObject, 'Соглашение');

inCustomerAgreement 'Отм' = DATA BOOLEAN (agreement);

TABLE agreementLegalEntityGroup (agreement, legalEntityGroup);
inAgreementCustomerGroup 'Отм' = DATA BOOLEAN (agreement, legalEntityGroup);

TABLE agreementLegalEntity(agreement, legalEntity);
inAgreementCustomer 'Отм.' (agreement, legalEntity) = DATA BOOLEAN (agreement, legalEntity);

levelParentAgreementCustomerGroup (agreement, legalEntityGroup) =
    GROUP MIN levelLegalEntityGroupLegalEntityGroup(legalEntityGroup, parent) IF inAgreementCustomerGroup(agreement, parent)
          BY agreement, legalEntityGroup PERSISTENT;
nearestParentLegalEntityGroup (agreement, legalEntityGroup) =
    legalEntityGroupLegalEntityGroupLevel(legalEntityGroup, levelParentAgreementCustomerGroup(agreement, legalEntityGroup));
nearestInAgreementCustomerGroup (agreement, legalEntityGroup) =
    inAgreementCustomerGroup(agreement, nearestParentLegalEntityGroup(agreement, legalEntityGroup));

inAgreementCustomerGroupOver 'Отм' (agreement, legalEntityGroup) =
    UNION OVERRIDE inCustomerAgreement(agreement) AND legalEntityGroup IS legalEntityGroup,
                   nearestInAgreementCustomerGroup(agreement, legalEntityGroup),
                   inAgreementCustomerGroup(agreement, legalEntityGroup);

inAgreementCustomerOver 'Отм' (agreement, customer) =
    UNION OVERRIDE inCustomerAgreement(agreement) AND customer IS legalEntity,
                   nearestInAgreementCustomerGroup(agreement, legalEntityGroupLegalEntity(customer)),
                   inAgreementCustomer(agreement, customer);

customerAgreement 'Покупатели' (agreement) = GROUP CONCAT name(customer) IF inAgreementCustomerOver(agreement, customer) , ', '
                                                 BY agreement
                                                 ORDER customer MINCHARWIDTH 100 PERSISTENT;

supplierAgreement (agreement) = DATA legalEntity (agreement);
nameSupplierAgreement 'Поставщик' (agreement) = name(supplierAgreement(agreement));

CONSTRAINT supplierAgreement(agreement) AND NOT isSellerLegalEntity(supplierAgreement(agreement))
    CHECKED BY supplierAgreement MESSAGE 'Для соглашения выбрано в качестве поставщика юр.лицо, не являющееся поставщиком или компанией';

priceListTypeAgreement (agreement) = DATA priceListType (agreement) NOT NULL;
namePriceListTypeAgreement 'Вид цены' (agreement) = name(priceListTypeAgreement(agreement));

TABLE agreementPriceGroup(agreement, priceGroup);
priceListTypeAgreementPriceGroup (agreement, priceGroup) = DATA priceListType (agreement, priceGroup);
namePriceListTypeAgreementPriceGroup 'Вид цены' (agreement, priceGroup) = name(priceListTypeAgreementPriceGroup(agreement, priceGroup));

TABLE agreementSku(agreement, sku);
priceListTypeAgreementSku (agreement, sku) = DATA priceListType (agreement, sku);
namePriceListTypeAgreementSku 'Вид цены' (agreement, sku) = name(priceListTypeAgreementSku(agreement, sku));

CONSTRAINT currencyAgreement(agreement) != currencyPriceListType(priceListTypeAgreement(agreement))
           CHECKED BY priceListTypeAgreement
           MESSAGE 'Валюта соглашения должна совпадать с валютой вида цены';

CONSTRAINT currencyAgreement(agreement) != currencyPriceListType(priceListTypeAgreementPriceGroup(agreement, priceGroup))
           CHECKED BY priceListTypeAgreementPriceGroup
           MESSAGE 'Валюта соглашения должна совпадать с валютой вида цены';

CONSTRAINT currencyAgreement(agreement) != currencyPriceListType(priceListTypeAgreementSku(agreement, sku))
           CHECKED BY priceListTypeAgreementSku
           MESSAGE 'Валюта соглашения должна совпадать с валютой вида цены';

priceListTypeAgreementSkuOver (agreement, sku) =
    UNION OVERRIDE priceListTypeAgreement(agreement) AND sku IS sku,
                   priceListTypeAgreementPriceGroup(agreement, priceGroupSku(sku)),
                   priceListTypeAgreementSku(agreement, sku);

namePriceListTypeAgreementSkuOver 'Вид цены' = name(priceListTypeAgreementSkuOver(agreement, sku));

userDefaultAgreementSupplierCustomer = DATA agreement (legalEntity, legalEntity);
userDefaultAgreementSupplierCustomer(supplier, customer) => inAgreementCustomerOver(userDefaultAgreementSupplierCustomer(supplier, customer), customer) RESOLVE FALSE;

calcDefaultAgreementSupplierCustomer(supplier, customer) =
    GROUP MAX agreement IF inAgreementCustomerOver(agreement, customer)
    BY supplierAgreement(agreement), customer;

defaultAgreementSupplierCustomer(supplier, customer) = UNION OVERRIDE calcDefaultAgreementSupplierCustomer(supplier, customer), userDefaultAgreementSupplierCustomer(supplier, customer) PERSISTENT;
nameDefaultAgreementSupplierCustomer 'Соглашение по умолчанию' (supplier, customer) = name(defaultAgreementSupplierCustomer(supplier, customer));

isDefaultAgreementSupplierCustomer 'Соглашение по умолчанию' (agreement, supplier, customer) = defaultAgreementSupplierCustomer(supplier, customer) == agreement;

META defineDocumentAbstractHeaderAgreement (object)
    agreement###object (object) = ABSTRACT agreement (object) PERSISTENT;
    nameAgreement###object 'Соглашение' (object)= name(agreement###object(object)) IN documentPrmGroup MINCHARWIDTH 5 PREFCHARWIDTH 10;
END
META defineDocumentHeaderAgreement (object)
    agreement###object (object) = DATA agreement (object);
    nameAgreement###object 'Соглашение' (object)= name(agreement###object(object)) IN documentPrmGroup MINCHARWIDTH 5 PREFCHARWIDTH 10;
END
META defineDocumentInterfaceHeaderAgreement (object)
    @defineDocumentAbstractHeaderAgreement(object);
    @defineDocumentHeaderAgreement(user###object);
    agreement###object(object) += agreement###user###object(object);

END

META deriveDocumentHeaderAgreement (object, supplier, customer)

    agreement###object (object) <- defaultAgreementSupplierCustomer(supplier(object), customer(object))
        IF currency###object(object) == currencyAgreement(defaultAgreementSupplierCustomer(supplier(object), customer(object)))
    WHEN CHANGED(currency###object(object)) OR
         CHANGED(customer(object)) OR
         CHANGED(supplier(object));

    CONSTRAINT currency###object(object) != currencyAgreement(agreement###object(object))
               CHECKED BY agreement###object
               MESSAGE 'Валюта документа должны совпадать с валютой соглашения';

    CONSTRAINT supplierAgreement(agreement###object(object)) != supplier(object)
               CHECKED BY agreement###object
               MESSAGE 'Соглашение должно быть между заданными юр. лицами';

    CONSTRAINT agreement###object(object)
               AND NOT inAgreementCustomerOver(agreement###object(object), customer(object))
               CHECKED BY agreement###object
               MESSAGE 'Соглашение должно быть между заданными юр. лицами';
END



META deriveDocumentDetailPriceListTypeAgreementCustom (object, detail)
    priceListType###user###detail(detail) <- IF agreement###user###object(object###detail(detail))
                                             THEN priceListTypeAgreementSkuOver(agreement###user###object(object###detail(detail)), sku###user###detail(detail))
                                             ELSE priceListType###user###object(object###detail(detail))
    WHEN CHANGED(agreement###user###object(object###detail(detail))) OR
         CHANGED(priceListType###user###object(object###detail(detail)));
END
META deriveDocumentDetailPriceListTypeAgreement (object)
    @deriveDocumentDetailPriceListTypeAgreementCustom(object, object###detail);
END

//--------------------------------------- Для двух объектов (object1 - документ)----------------------------------------------------------//
META defineDocumentDoubleHeaderAgreement (object1, object2)
    agreement###object1###object2 (object1, object2) = DATA agreement (object1, object2);
    nameAgreement###object1###object2 'Соглашение' (object1, object2)= name(agreement###object1###object2 (object1, object2)) IN documentPrmGroup MINCHARWIDTH 5 PREFCHARWIDTH 10;
    defaultPriceListType###object1###object2 (object1, object2) = priceListTypeAgreement(agreement###object1###object2 (object1, object2));
    priceListType###object1###object2 (object1, object2) =
        UNION OVERRIDE defaultPriceListType###object1###object2(object1, object2),
                       userPriceListType###object1###object2(object1, object2);
    namePriceListType###object1###object2 'Вид цен' (object1, object2)= name(priceListType###object1###object2(object1, object2)) IN documentPrmGroup MINCHARWIDTH 5 PREFCHARWIDTH 10;
END

META defineDocumentDoubleInterfaceHeaderAgreement (object1, object2, supplierProp, customerProp)
    @defineDocumentDoubleHeaderAgreement(object1, object2);
    agreement###object1###object2 (object1, object2) <- defaultAgreementSupplierCustomer(supplierProp###object1(object1), customerProp###object1(object1))
        IF currency###object1(object1) == currencyAgreement(defaultAgreementSupplierCustomer(supplierProp###object1(object1), customerProp###object1(object1)))
        AND in###object1###object2(object1, object2)
    WHEN CHANGED(currency###object1(object1)) AND object2 IS object2 OR
         CHANGED(supplierProp###object1(object1)) AND object2 IS object2 OR
         CHANGED(customerProp###object1(object1))AND object2 IS object2  OR
         CHANGED(in###object1###object2(object1, object2));

    CONSTRAINT currency###object1(object1) != currencyAgreement(agreement###object1###object2(object1, object2))
               CHECKED BY agreement###object1###object2
               MESSAGE 'Валюта документа должны совпадать с валютой соглашения';

    CONSTRAINT supplierAgreement(agreement###object1###object2(object1, object2)) != supplierProp###object1(object1)
               CHECKED BY agreement###object1###object2
               MESSAGE 'Соглашение должно быть между заданными юр. лицами';

    CONSTRAINT agreement###object1###object2(object1, object2)
               AND NOT inAgreementCustomerOver(agreement###object1###object2(object1, object2), customerProp###object1(object1))
               CHECKED BY agreement###object1###object2
               MESSAGE 'Соглашение должно быть между заданными юр. лицами';
END

META deriveDocumentDoubleDetailPriceListTypeAgreementCustom (object1, detail, object2, stockProp2)
    priceListType###detail (idetail) = UNION OVERRIDE priceListType###object1###object2 (object1###detail(idetail), stockProp2###detail(idetail)), dataPriceListType###detail(idetail) PERSISTENT;
    namePriceListType###detail 'Вид цен' (idetail) = name(priceListType###detail(idetail)) MINCHARWIDTH 10 PREFCHARWIDTH 20;

    priceListType###detail(detail) <- IF agreement###object1###object2(object1###detail(detail), stockProp2###detail(detail))
                                             THEN priceListTypeAgreementSkuOver(agreement###object1###object2(object1###detail(detail), stockProp2###detail(detail)), sku###detail(detail))
                                             ELSE priceListType###object1###object2(object1###detail(detail), stockProp2###detail(detail))
    WHEN CHANGED(agreement###object1###object2(object1###detail(detail), stockProp2###detail(detail))) OR
         CHANGED(priceListType###object1###object2(object1###detail(detail), stockProp2###detail(detail))) OR
         CHANGED(sku###detail(detail)) OR
         CHANGED(object1###detail(detail)) OR
         CHANGED(stockProp2###detail(detail));
END
META deriveDocumentDoubleDetailPriceListTypeAgreement (object1, object2, stockProp2)
    @deriveDocumentDoubleDetailPriceListTypeAgreementCustom(object1, object1###detail, object2, stockProp2);
END

META deriveDocumentDetailPricePriceListTypeCustom (detail, stockProp)
    price###detail(detail) <- prevPricePriceListTypeSkuStockDateTime(priceListType###detail(detail),
                                                                     sku###detail(detail),
                                                                     stockProp###detail(detail),
                                                                     dateTime###detail(detail))
                                    WHEN CHANGED(priceListType###detail(detail)) OR
                                         CHANGED(sku###detail(detail)) OR
                                         CHANGED(stockProp###detail(detail)) OR
                                         CHANGED(dateTime###detail(detail));
END

META deriveDocumentDetailPricePriceListType (object, stockProp)
    @deriveDocumentDetailPricePriceListTypeCustom(object##Detail, stockProp);
END

META deriveDocumentDetailPriceBatchPriceListTypeCustom (detail, stockProp)
    price###detail(detail) <- IF batch###detail(detail) THEN
                                    prevPricePriceListTypeBatchStockDateTime(priceListType###detail(detail),
                                                                             batch###detail(detail),
                                                                             stockProp###detail(detail),
                                                                             dateTime###detail(detail))
                              ELSE
                                    prevPricePriceListTypeSkuStockDateTime(priceListType###detail(detail),
                                                                           sku###detail(detail),
                                                                           stockProp###detail(detail),
                                                                           dateTime###detail(detail))
                                    WHEN CHANGED(batch###detail(detail)) OR
                                         CHANGED(priceListType###detail(detail)) OR
                                         CHANGED(sku###detail(detail)) OR
                                         CHANGED(stockProp###detail(detail)) OR
                                         CHANGED(dateTime###detail(detail));
END

META deriveDocumentDetailPriceBatchPriceListType (object, stockProp)
    @deriveDocumentDetailPriceBatchPriceListTypeCustom(object##Detail, stockProp);
END

FORM agreementsCustomer 'Соглашения'

    OBJECTS s=legalEntity FIXED PANEL
    PROPERTIES(s) name

    OBJECTS c=legalEntity FIXED PANEL
    PROPERTIES(c) name

    OBJECTS ag=agreement
    PROPERTIES(ag) READONLY name, numberObject, seriesObject, dateAgreement, timeAgreement,
                            fromDateAgreement, fromTimeAgreement, toDateAgreement, toTimeAgreement,
                            nameCurrencyAgreement, namePriceListTypeAgreement, noteAgreement
    PROPERTIES inAgreementCustomerOver(ag, s)
;

DESIGN agreementsCustomer FROM DEFAULT{
    NEW mainContainer{
        REMOVE s.box;
        REMOVE c.box;
        ADD ag.box;
    }
    ADD functions.box;
}

addAgreementsSupplierCustomer 'Добавление соглашений' = ACTION (supplier, customer) {

    FORM agreementsCustomer OBJECTS s=supplier, c=customer MODAL;
    IF formResult() == formResult.ok THEN {
        EXEC apply();
    }
} TOOLBAR;

FORM agreement 'Соглашение'

    OBJECTS a = agreement FIXED PANEL
    PROPERTIES(a) name, nameNumeratorObject, numberObject, seriesObject, dateAgreement, timeAgreement,
                  fromDateAgreement, fromTimeAgreement, toDateAgreement, toTimeAgreement, nameSupplierAgreement,
                  nameCurrencyAgreement, namePriceListTypeAgreement, noteAgreement

    TREE legalEntityGroupTree b=STRING[3], lg = legalEntityGroup PARENT parentLegalEntityGroup
    PROPERTIES READONLY OBJVALUE(b), lgTreeName = name(lg)
    FILTERS stringEqualsAll(b)
    PROPERTIES(a) inCustomerAgreement TODRAW b FORCE GRID
    PROPERTIES(a, lg) inAgreementCustomerGroupOver

    OBJECTS c = legalEntity
    PROPERTIES(c) READONLY name
    PROPERTIES(a, c) inAgreementCustomerOver
    FILTERS inLegalEntityGroupLegalEntity(lg, c),
            isBuyerLegalEntity(c)

    FILTERGROUP filters
        FILTER 'Только отмеченные' 'F10' inAgreementCustomerOver (a, c)

    TREE priceGroupTree g=priceGroup PARENT parentPriceGroup
    PROPERTIES READONLY name(g)
    ORDER BY name(g)

    OBJECTS pg = priceGroup
    PROPERTIES(pg) READONLY canonicalNamePriceGroup
    PROPERTIES(a, pg) namePriceListTypeAgreementPriceGroup
    FILTERS isParentPriceGroupPriceGroup(pg, g)

    TREE skuGroupTree sg=skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY name(sg)
    ORDER BY name(sg)

    OBJECTS s = sku
    PROPERTIES(s) READONLY nameSku
    PROPERTIES(a, s) namePriceListTypeAgreementSku
    FILTERS isParentSkuGroupSku(sg, s)

    EDIT agreement OBJECT a
;

DESIGN agreement FROM DEFAULT {

    NEW topContainer{
        childConstraints = TO THE BOTTOM;
        NEW headContainer {
            caption = 'Шапка документа';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY (name);
            ADD PROPERTY (nameNumeratorObject);
            ADD PROPERTY (numberObject);
            ADD PROPERTY (seriesObject);
            ADD PROPERTY (dateAgreement);
            ADD PROPERTY (timeAgreement);

        }
        NEW firstContainer{
            childConstraints = TO THE BOTTOM;
            NEW timeContainer{
                caption = 'Период действия';
                childConstraints = TO THE RIGHT;
                ADD PROPERTY (fromDateAgreement);
                ADD PROPERTY (fromTimeAgreement);
                ADD PROPERTY (toDateAgreement);
                ADD PROPERTY (toTimeAgreement);
            }
            NEW propContainer{
                caption = 'Параметры документа';
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(nameSupplierAgreement);
                ADD PROPERTY(nameCurrencyAgreement);
                ADD PROPERTY(namePriceListTypeAgreement);
                ADD PROPERTY(noteAgreement);
            }
        }
            NEW tabContainer{
                type = TABBED;
                NEW customerBox{
                    caption = 'Контрагенты';
                    childConstraints = TO THE RIGHT;
                    type = SPLITH;
                    ADD legalEntityGroupTree.tree.box;
                    ADD c.box{
                        fillHorizontal = 2.0;
                    }
                }
                NEW priceGroupContainer{
                    childConstraints = TO THE RIGHT;
                    caption = 'Уточнение цен по ценовым группам';
                    type = SPLITH;
                    ADD priceGroupTree.tree.box;
                    ADD pg.box{fillHorizontal = 3.0;}
                }
                NEW skuContainer{
                    childConstraints = TO THE RIGHT;
                    caption = 'Уточнение цен по товарам';
                    type = SPLITH;
                    ADD skuGroupTree.tree.box;
                    ADD s.box{fillHorizontal = 3.0;}
                }
            }
    }
    ADD functions.box;
}

createAgreementSupplierCustomer 'Создать соглашение' = ACTION (supplier, customer) {

    FOR ADDOBJ ag = agreement DO {
        SET inAgreementCustomer(ag, customer) <- TRUE;
        SET supplierAgreement(ag) <- (supplier AS legalEntity);
        FORM agreement OBJECTS a = ag MODAL;
        IF TRUE AND NOT formResult() == formResult.ok THEN {
            EXEC delete(ag);
        }
    }
} TOOLBAR;

FORM agreements 'Соглашения'

    OBJECTS a = agreement
    PROPERTIES(a) READONLY name, seriesNumberObject, dateTimeAgreement,
                           fromDateTimeAgreement, toDateTimeAgreement, nameSupplierAgreement,
                           nameCurrencyAgreement, namePriceListTypeAgreement, customerAgreement, noteAgreement

    PROPERTIES(a) ADDFORM, EDITFORM, delete
;

relationSupplierCustomer 'Связь' (supplier, customer)= GROUP SUM 1 IF inAgreementCustomerOver(agreement, customer) BY supplierAgreement(agreement), customer;

EXTEND FORM legalEntity

    OBJECTS s=legalEntity
    PROPERTIES(s) READONLY name

    OBJECTS ag=agreement
    PROPERTIES(ag, s, l) isDefaultAgreementSupplierCustomer
    PROPERTIES(ag, l) inAgreementCustomerOver
    PROPERTIES(ag) READONLY name, numberObject, seriesObject, dateAgreement, timeAgreement,
                            fromDateAgreement, fromTimeAgreement, toDateAgreement, toTimeAgreement,
                            nameCurrencyAgreement, namePriceListTypeAgreement, noteAgreement
    PROPERTIES(ag) EDITFORM
    PROPERTIES createAgreementSupplierCustomer(s, l) TODRAW ag FORCE PANEL DRAWTOTOOLBAR, addAgreementsSupplierCustomer(s, l) TODRAW ag FORCE PANEL DRAWTOTOOLBAR
    FILTERS inAgreementCustomerOver(ag,l),
            supplierAgreement(ag)==s,
            isSellerLegalEntity(s)
    FILTERGROUP filters1
        FILTER 'Только с соглашением' 'F11' relationSupplierCustomer(s, l) DEFAULT

    OBJECTS ag2=agreement
    PROPERTIES(ag2) READONLY name, numberObject, seriesObject, dateAgreement, timeAgreement,
                            fromDateAgreement, fromTimeAgreement, toDateAgreement, toTimeAgreement,
                            nameCurrencyAgreement, namePriceListTypeAgreement, noteAgreement
    PROPERTIES(ag2) EDITFORM
    FILTERS supplierAgreement(ag2) == l

    OBJECTS c=legalEntity
    PROPERTIES(c) READONLY name

    PROPERTIES(ag2, c) READONLY inAgreementCustomerOver
    PROPERTIES(ag2, l, c) isDefaultAgreementSupplierCustomer
    PROPERTIES createAgreementSupplierCustomer(l, c) TODRAW ag2 FORCE PANEL DRAWTOTOOLBAR, addAgreementsSupplierCustomer (l, c) TODRAW ag2 FORCE PANEL DRAWTOTOOLBAR
    FILTERS isBuyerLegalEntity(c)

    FILTERGROUP filters3
        FILTER 'Только отмеченные' 'F9' inAgreementCustomerOver(ag2,c)

;

EXTEND DESIGN legalEntity {
    extendContainer {
        NEW agreementBuyContainer {
            caption = 'Соглашения на поставку';
            type = SPLITH;
            ADD s.box {title = 'Поставщики';};
            ADD ag.box{fillHorizontal = 3;}
        }
        NEW agreementSaleContainer {
            caption = 'Соглашения на продажу';
            type = SPLITH;
            ADD ag2.box{fillHorizontal = 3;}
            ADD c.box {title = 'Покупатели';}
        }
    }
}