MODULE Agreement;

REQUIRE Currency,
        Document,
        LegalEntity,
        Numerator,
        PriceList;

CLASS agreement 'Соглашение' : named, numeratedObject;

TABLE agreement (agreement);

@defineNumeratedObjectDefault(agreement, 'Нумератор для договоров', 'ТД');

@defineDocumentHeaderTime(agreement);
@defineDocumentHeaderTimePrefix(agreement, from, ' с');

@defineDocumentHeaderTimePrefix(agreement, to, ' по');
toDateAgreement(agreement) <- NULL WHEN ASSIGNED(agreement IS agreement);
toTimeAgreement(agreement) <- NULL WHEN ASSIGNED(agreement IS agreement);

@defineDocumentHeaderNote(agreement);
@defineDocumentHeaderCurrency(agreement);
@defineDocumentHeaderDescription(agreement, seriesNumberObject, 'Соглашение');

inLegalEntityAgreement 'Отм' = DATA BOOLEAN (agreement);

TABLE agreementLegalEntityGroup (agreement, legalEntityGroup);
inAgreementLegalEntityGroup 'Отм' = DATA BOOLEAN (agreement, legalEntityGroup);

TABLE agreementLegalEntity(agreement, legalEntity);
inAgreementLegalEntity 'Отм.' (agreement, legalEntity) = DATA BOOLEAN (agreement, legalEntity);

levelParentAgreementLegalEntityGroup (agreement, legalEntityGroup) =
    GROUP MIN levelLegalEntityGroupLegalEntityGroup(legalEntityGroup, parent) IF inAgreementLegalEntityGroup(agreement, parent)
          BY agreement, legalEntityGroup PERSISTENT;
nearestParentLegalEntityGroup (agreement, legalEntityGroup) =
    legalEntityGroupLegalEntityGroupLevel(legalEntityGroup, levelParentAgreementLegalEntityGroup(agreement, legalEntityGroup));
nearestInAgreementLegalEntityGroup (agreement, legalEntityGroup) =
    inAgreementLegalEntityGroup(agreement, nearestParentLegalEntityGroup(agreement, legalEntityGroup));

inAgreementLegalEntityGroupOver 'Отм' (agreement, legalEntityGroup) =
    UNION OVERRIDE inLegalEntityAgreement(agreement) AND legalEntityGroup IS legalEntityGroup,
                   nearestInAgreementLegalEntityGroup(agreement, legalEntityGroup),
                   inAgreementLegalEntityGroup(agreement, legalEntityGroup);

inAgreementLegalEntityOver 'Отм' (agreement, legalEntity) =
    UNION OVERRIDE inLegalEntityAgreement(agreement) AND legalEntity IS legalEntity,
                   nearestInAgreementLegalEntityGroup(agreement, legalEntityGroupLegalEntity(legalEntity)),
                   inAgreementLegalEntity(agreement, legalEntity);

legalEntityAgreement 'Контрагенты' (agreement) = GROUP CONCAT name(legalEntity) IF inAgreementLegalEntityOver(agreement, legalEntity) , ', '
                                                 BY agreement
                                                 ORDER legalEntity MINCHARWIDTH 100 PERSISTENT;

companyAgreement (agreement) = DATA company (agreement);
nameCompanyAgreement 'Компания' (agreement) = name(companyAgreement(agreement));

priceListTypeAgreement (agreement) = DATA priceListType (agreement) NOT NULL;
namePriceListTypeAgreement 'Вид цены' (agreement) = name(priceListTypeAgreement(agreement));

TABLE agreementPriceGroup(agreement, priceGroup);
priceListTypeAgreementPriceGroup (agreement, priceGroup) = DATA priceListType (agreement, priceGroup);
namePriceListTypeAgreementPriceGroup 'Вид цены' (agreement, priceGroup) = name(priceListTypeAgreementPriceGroup(agreement, priceGroup));

TABLE agreementSku(agreement, sku);
priceListTypeAgreementSku (agreement, sku) = DATA priceListType (agreement, sku);
namePriceListTypeAgreementSku 'Вид цены' (agreement, sku) = name(priceListTypeAgreementSku(agreement, sku));

CONSTRAINT currencyAgreement(agreement) != currencyPriceListType(priceListTypeAgreement(agreement))
           CHECKED BY priceListTypeAgreement
           MESSAGE 'Валюта соглашения должна совпадать с валютой вида цены';

CONSTRAINT currencyAgreement(agreement) != currencyPriceListType(priceListTypeAgreementPriceGroup(agreement, priceGroup))
           CHECKED BY priceListTypeAgreementPriceGroup
           MESSAGE 'Валюта соглашения должна совпадать с валютой вида цены';

CONSTRAINT currencyAgreement(agreement) != currencyPriceListType(priceListTypeAgreementSku(agreement, sku))
           CHECKED BY priceListTypeAgreementSku
           MESSAGE 'Валюта соглашения должна совпадать с валютой вида цены';

priceListTypeAgreementSkuOver (agreement, sku) =
    UNION OVERRIDE priceListTypeAgreement(agreement) AND sku IS sku,
                   priceListTypeAgreementPriceGroup(agreement, priceGroupSku(sku)),
                   priceListTypeAgreementSku(agreement, sku);

namePriceListTypeAgreementSkuOver 'Вид цены' = name(priceListTypeAgreementSkuOver(agreement, sku));

userDefaultAgreementCompanyLegalEntity = DATA agreement (company, legalEntity);
userDefaultAgreementCompanyLegalEntity(company, legalEntity) => inAgreementLegalEntityOver(userDefaultAgreementCompanyLegalEntity(company, legalEntity), legalEntity) RESOLVE FALSE;

calcDefaultAgreementCompanyLegalEntity(company, legalEntity) =
    GROUP MAX agreement IF inAgreementLegalEntityOver(agreement, legalEntity)
    BY companyAgreement(agreement), legalEntity;

defaultAgreementCompanyLegalEntity(company, legalEntity) = UNION OVERRIDE calcDefaultAgreementCompanyLegalEntity(company, legalEntity), userDefaultAgreementCompanyLegalEntity(company, legalEntity) PERSISTENT;
nameDefaultAgreementCompanyLegalEntity 'Соглашение по умолчанию' (company, legalEntity) = name(defaultAgreementCompanyLegalEntity(company, legalEntity));

isDefaultAgreementCompanyLegalEntity 'Соглашение по умолчанию' (agreement, company, legalEntity) = defaultAgreementCompanyLegalEntity(company, legalEntity) == agreement;

META defineDocumentAbstractHeaderAgreement (object)
    agreement###object (object) = ABSTRACT agreement (object) PERSISTENT;
    nameAgreement###object 'Соглашение' (object)= name(agreement###object(object)) IN documentPrmGroup MINCHARWIDTH 5 PREFCHARWIDTH 10;
END
META defineDocumentHeaderAgreement (object)
    agreement###object (object) = DATA agreement (object);
    nameAgreement###object 'Соглашение' (object)= name(agreement###object(object)) IN documentPrmGroup MINCHARWIDTH 5 PREFCHARWIDTH 10;
END
META defineDocumentInterfaceHeaderAgreement (object, company, legalEntity)
    @defineDocumentAbstractHeaderAgreement(object);
    @defineDocumentHeaderAgreement(user###object);
    agreement###user###object (object) <- defaultAgreementCompanyLegalEntity(company(object), legalEntity(object))
        IF currency###user###object(object) == currencyAgreement(defaultAgreementCompanyLegalEntity(company(object), legalEntity(object)))
    WHEN CHANGED(currency###user###object(object)) OR
         CHANGED(legalEntity(object));
    agreement###object (object) += agreement###user###object(object);

    CONSTRAINT currency###user###object(object) != currencyAgreement(agreement###user###object(object))
               CHECKED BY agreement###user###object
               MESSAGE 'Валюта документа должны совпадать с валютой соглашения';

    CONSTRAINT companyAgreement(agreement###user###object(object)) != company(object)
               CHECKED BY agreement###user###object
               MESSAGE 'Соглашение должно быть между заданными юр. лицами';

    CONSTRAINT agreement###user###object(object)
               AND NOT inAgreementLegalEntityOver(agreement###user###object(object), legalEntity(object))
               CHECKED BY agreement###user###object
               MESSAGE 'Соглашение должно быть между заданными юр. лицами';
END


META deriveDocumentDetailPriceListTypeAgreementCustom (object, detail)
    priceListType###user###detail(detail) <- IF agreement###user###object(object###detail(detail))
                                             THEN priceListTypeAgreementSkuOver(agreement###user###object(object###detail(detail)), sku###user###detail(detail))
                                             ELSE priceListType###user###object(object###detail(detail))
    WHEN CHANGED(agreement###user###object(object###detail(detail))) OR
         CHANGED(priceListType###user###object(object###detail(detail)));
END
META deriveDocumentDetailPriceListTypeAgreement (object)
    @deriveDocumentDetailPriceListTypeAgreementCustom(object, object###detail);
END

FORM agreementsLegalEntity 'Соглашения'

    OBJECTS l=legalEntity FIXED PANEL
    PROPERTIES(l) name

    OBJECTS c=company FIXED PANEL
    PROPERTIES(c) name

    OBJECTS ag=agreement
    PROPERTIES(ag) READONLY name, numberObject, seriesObject, dateAgreement, timeAgreement,
                            fromDateAgreement, fromTimeAgreement, toDateAgreement, toTimeAgreement,
                            nameCurrencyAgreement, namePriceListTypeAgreement, noteAgreement
    PROPERTIES inAgreementLegalEntityOver(ag, l)
;

DESIGN agreementsLegalEntity FROM DEFAULT{
    NEW mainContainer{
        REMOVE l.box;
        REMOVE c.box;
        ADD ag.box;
    }
    ADD functions.box;
}

addAgreementsCompanyLegalEntity 'Добавление соглашений' = ACTION (company, legalEntity) {

    FORM agreementsLegalEntity OBJECTS c=company, l=legalEntity MODAL;
    IF formResult() == formResult.ok THEN {
        EXEC apply();
    }
} TOOLBAR;

FORM agreement 'Соглашение'

    OBJECTS a = agreement FIXED PANEL
    PROPERTIES(a) name, nameNumeratorObject, numberObject, seriesObject, dateAgreement, timeAgreement,
                  fromDateAgreement, fromTimeAgreement, toDateAgreement, toTimeAgreement, nameCompanyAgreement,
                  nameCurrencyAgreement, namePriceListTypeAgreement, noteAgreement

    TREE legalEntityGroupTree b=STRING[3], lg = legalEntityGroup PARENT parentLegalEntityGroup
    PROPERTIES READONLY OBJVALUE(b), lgTreeName = name(lg)
    FILTERS stringEqualsAll(b)
    PROPERTIES(a) inLegalEntityAgreement TODRAW b FORCE GRID
    PROPERTIES(a, lg) inAgreementLegalEntityGroupOver

    OBJECTS l = legalEntity
    PROPERTIES(l) READONLY name
    PROPERTIES(a, l) inAgreementLegalEntityOver
    FILTERS inLegalEntityGroupLegalEntity(lg, l)

    FILTERGROUP filters
        FILTER 'Только отмеченные' 'F10' inAgreementLegalEntityOver (a, l)

    TREE priceGroupTree g=priceGroup PARENT parentPriceGroup
    PROPERTIES READONLY name(g)
    ORDER BY name(g)

    OBJECTS pg = priceGroup
    PROPERTIES(pg) READONLY canonicalNamePriceGroup
    PROPERTIES(a, pg) namePriceListTypeAgreementPriceGroup
    FILTERS isParentPriceGroupPriceGroup(pg, g)

    TREE skuGroupTree sg=skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY name(sg)
    ORDER BY name(sg)

    OBJECTS s = sku
    PROPERTIES(s) READONLY nameSku
    PROPERTIES(a, s) namePriceListTypeAgreementSku
    FILTERS isParentSkuGroupSku(sg, s)

    EDIT agreement OBJECT a
;

DESIGN agreement FROM DEFAULT {

    NEW topContainer{
        childConstraints = TO THE BOTTOM;
        NEW headContainer {
            caption = 'Шапка документа';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY (name);
            ADD PROPERTY (nameNumeratorObject);
            ADD PROPERTY (numberObject);
            ADD PROPERTY (seriesObject);
            ADD PROPERTY (dateAgreement);
            ADD PROPERTY (timeAgreement);

        }
        NEW firstContainer{
            childConstraints = TO THE BOTTOM;
            NEW timeContainer{
                caption = 'Период действия';
                childConstraints = TO THE RIGHT;
                ADD PROPERTY (fromDateAgreement);
                ADD PROPERTY (fromTimeAgreement);
                ADD PROPERTY (toDateAgreement);
                ADD PROPERTY (toTimeAgreement);
            }
            NEW propContainer{
                caption = 'Параметры документа';
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(nameCompanyAgreement);
                ADD PROPERTY(nameCurrencyAgreement);
                ADD PROPERTY(namePriceListTypeAgreement);
                ADD PROPERTY(noteAgreement);
            }
        }
            NEW tabContainer{
                type = TABBED;
                NEW legalEntityBox{
                    caption = 'Контрагенты';
                    childConstraints = TO THE RIGHT;
                    type = SPLITH;
                    ADD legalEntityGroupTree.tree.box;
                    ADD l.box{
                        fillHorizontal = 2.0;
                    }
                }
                NEW priceGroupContainer{
                    childConstraints = TO THE RIGHT;
                    caption = 'Уточнение цен по ценовым группам';
                    type = SPLITH;
                    ADD priceGroupTree.tree.box;
                    ADD pg.box{fillHorizontal = 3.0;}
                }
                NEW skuContainer{
                    childConstraints = TO THE RIGHT;
                    caption = 'Уточнение цен по товарам';
                    type = SPLITH;
                    ADD skuGroupTree.tree.box;
                    ADD s.box{fillHorizontal = 3.0;}
                }
            }
    }
    ADD functions.box;
}

createAgreementCompanyLegalEntity 'Создать соглашение' = ACTION (company, legalEntity) {

    FOR ADDOBJ ag = agreement DO {
        SET inAgreementLegalEntity(ag, legalEntity) <- TRUE;
        SET companyAgreement(ag) <- (company AS company);
        FORM agreement OBJECTS a = ag MODAL;
        IF TRUE AND NOT formResult() == formResult.ok THEN {
            EXEC delete(ag);
        }
    }
} TOOLBAR;

FORM agreements 'Соглашения'

    OBJECTS a = agreement
    PROPERTIES(a) READONLY name, seriesNumberObject, dateTimeAgreement,
                           fromDateTimeAgreement, toDateTimeAgreement, nameCompanyAgreement,
                           nameCurrencyAgreement, namePriceListTypeAgreement, legalEntityAgreement, noteAgreement

    PROPERTIES(a) ADDFORM, EDITFORM, delete
;
