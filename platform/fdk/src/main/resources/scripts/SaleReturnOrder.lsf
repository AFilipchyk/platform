MODULE SaleReturnOrder;

REQUIRE Order, SaleShipment;

NAMESPACE SaleReturn;

@defineOrder(' (продажа-возврат)', supplierStock, salePack, showSalePack, 'Отображать упаковку');

@defineOrderStockDestination(customerStock, supplierStock);

@defineNumeratedObjectDefaultPrefix(userOrder, 'Нумератор для заказов (продажа-возврат)', 'ВП', saleReturn);

CONSTRAINT supplierUserOrder(userOrder) AND NOT isCompanyLegalEntity(supplierUserOrder(userOrder))
    CHECKED BY supplierUserOrder MESSAGE 'Для заказа выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerUserOrder(userOrder) AND NOT isCustomerLegalEntity(customerUserOrder(userOrder))
    CHECKED BY customerUserOrder MESSAGE 'Для заказа выбрано в качестве покупателя организация, не являющаяся покупателем';


@defineDocumentPackageSkuStock(userOrder, sku, supplierStock, salePack);
@extendFormDocumentPackageSkuStockCustom(userOrder, userOrder, o, supplierStock, showSalePack);

overChangeQuantityValueSkuUserOrderDetail(detail) += ACTION (detail) {
    IF  salePackBarcodeSku(skuUserOrderDetail(detail)) THEN {
        SET quantityPackUserOrderDetail(detail) <- quantityUserOrderDetail(detail)/amountPackUserOrderDetail(detail);
    }
}

@defineDocumentContactSkuStock (userOrder, userOrder, supplier, 'Поставщик', o, sts);

inUserOrderSku (userOrder, sku)= inCustomerSku(customerUserOrder(userOrder), sku);
EXTEND FORM userOrder
    FILTERGROUP filter1
        FILTER 'С продажей' 'F8' inUserOrderSku(o, s)
        FILTER'В ассортименте' 'F7' priceSkuStockUserOrder(s, st, o) DEFAULT

;