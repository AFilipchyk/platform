MODULE Utils;

REQUIRE System;

dateDiffersCurrent(date) = date IS DATE AND date != currentDate();

// --------------------------------------------- Стандартные группы --------------------------------- //

GROUP printGroup 'Печатные формы' : publicGroup;

// --------------------------------------------- Работа со строками --------------------------------- //

stringEqualsAll(string) = string == 'Все';

castToString255 = FORMULA STRING[255] 'CAST($1 AS character(255))';
castToString3 = FORMULA STRING[3] 'CAST($1 AS character(3))';
isWordInCSV = FORMULA INTEGER 'CASE WHEN CAST($1 AS text)=ANY(string_to_array($2,\',\')) THEN 1 ELSE 0 END';

// --------------------------------------------- Округления --------------------------------- //

ceil = FORMULA 'ceil($1)';

roundM1 (number) = round(number, -1);
round0 (number) = round(number, 0);
round1 (number) = round(number, 1);
round2 (number) = round(number, 2);
round3 (number) = round(number, 3);

// --------------------------------------------- Двойное имя --------------------------------- //

CLASS doubleNamed 'Объект с кратким наименованием' : named;

shortName 'Краткое наименование' = DATA STRING[5] (doubleNamed) IN baseGroup;

CLASS language 'Язык' : doubleNamed;

// --------------------------------------------- Yes/No --------------------------------- //
CLASS STATIC yesNo 'Логическое' {
    yes 'ДА',
    no 'НЕТ'
};

classSIDToYesNo 'Да/нет по ИД'(string) = GROUP UNIQUE yesNo BY classSID (yesNo) WHERE yesNo IS yesNo;

META defineHistorizableDoubleYesNo(property, caption, object1, object1Identity, object2, object2Identity, group)
    default###property###object1###object2 = yesNo.no AND object1 IS object1 AND object2 IS object2;
    @defineHistorizableDoubleDefaultCustom(property, default###property###object1###object2, caption, yesNo, name,
        object1, object1Identity, object2, object2Identity, 7, group);
END

META defineHistorizableTripleYesNo(property, caption, object1, object1Identity, object2, object2Identity, object3, object3Identity, group)
    default###property###object1###object2###object3 = yesNo.no AND object1 IS object1 AND object2 IS object2 AND object3 IS object3;
    @defineHistorizableTripleDefaultCustom(property, default###property###object1###object2###object3, caption, yesNo, name,
        object1, object1Identity, object2, object2Identity, object3, object3Identity, 7, group);
END

// --------------------------------------------- Диалоги --------------------------------- //

FORM dialogDate 'Выбор даты'
    OBJECTS d = DATE FIXED PANEL
    PROPERTIES(d) objValue = OBJVALUE
;

DESIGN dialogDate FROM DEFAULT {
    PROPERTY (objValue) {
        caption = 'Введите дату';
        font = 'Tahoma bold 64';
        panelLabelAbove = TRUE;
    }
}

// --------------------------- Агрегации --------------------------------- //

META defineAggregationCustom (primProperty, primObject, aggrObject, aggrProperty)
    aggrObject###primObject (primObject) =
        GROUP UNIQUE aggrObject BY primProperty(aggrObject)
        WHERE aggrObject IS aggrObject;

    aggrProperty(primObject) => aggrObject###primObject(primObject) RESOLVE TRUE;

    is###aggrObject(aggrObject) = aggrObject IS aggrObject;
    is###aggrObject(aggrObject) => aggrProperty(primProperty(aggrObject)) RESOLVE FALSE;
END

META defineAggregation (primObject, aggrObject, aggrProperty)
    primObject###aggrObject = DATA primObject (aggrObject);

    @defineAggregationCustom (primObject###aggrObject, primObject, aggrObject, aggrProperty);
END

META defineAggregationDoubleCustom (prim1Property, prim2Property, prim1Object, prim2Object, aggrObject, aggrProperty)
    aggrObject###prim1Object###prim2Object (prim1Object, prim2Object) =
        GROUP UNIQUE aggrObject BY prim1Property(aggrObject), prim2Property(aggrObject)
        WHERE aggrObject IS aggrObject;

    aggrProperty(prim1Object, prim2Object) => aggrObject###prim1Object###prim2Object(prim1Object, prim2Object) RESOLVE TRUE;

    is###aggrObject(aggrObject) = aggrObject IS aggrObject;
    is###aggrObject(aggrObject) => aggrProperty(prim1Property(aggrObject), prim2Property(aggrObject)) RESOLVE FALSE;
END

META defineAggregationDouble (prim1Object, prim2Object, aggrObject, aggrProperty)
    prim1Object###aggrObject = DATA prim1Object (aggrObject);
    prim2Object###aggrObject = DATA prim2Object (aggrObject);

    @defineAggregationDoubleCustom(prim1Object###aggrObject, prim2Object###aggrObject, prim1Object, prim2Object, aggrObject, aggrProperty);
END

