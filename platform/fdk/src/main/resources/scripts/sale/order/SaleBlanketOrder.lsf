MODULE SaleBlanketOrder;

REQUIRE SaleOrder, BlanketOrder, SaleOperation;

NAMESPACE Sale;

//----------------------------------------------- Множественный Заказ ---------------------------------------------------//
@defineBlanketOrder(' (продажа)');
@defineOrderBlanketOrder(' (продажа)');

numeratorBlanketOrderStock(order, stock) <- saleDefaultNumeratorUserOrder() WHEN ASSIGNED(inBlanketOrderStock(order, stock));

CONSTRAINT supplierBlanketOrder(blanketOrder) AND NOT isCompanyLegalEntity(supplierBlanketOrder(blanketOrder))
    CHECKED BY supplierBlanketOrder MESSAGE 'Для множественного заказа выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerBlanketOrder(blanketOrder) AND NOT isCustomerLegalEntity(customerBlanketOrder(blanketOrder))
    CHECKED BY customerBlanketOrder MESSAGE 'Для множественного заказа выбрано в качестве покупателя организация, не являющаяся покупателем';

supplierBlanketOrder(blanketOrder) <- defaultCompanyEmployee(currentUser()) IF countIsCompanyEntityEmployee (currentUser()) == 1
    WHEN ASSIGNED(blanketOrder IS blanketOrder);

supplierStockBlanketOrder(blanketOrder) <- defaultStockEmployeeLegalEntity(currentUser(), supplierBlanketOrder(blanketOrder))
    IF countStocksLegalEntityEmployee (currentUser(), supplierBlanketOrder(blanketOrder)) == 1
        WHEN CHANGED(supplierBlanketOrder(blanketOrder));

//--------------------- Расширяем форму Подбор заказа резервами -------//
@extendFormDocumentOrderLedgerStock(blanketOrder, blanketOrder, o);

NAVIGATOR {
    saleSaleNavigator {
        ADD blanketOrders BEFORE orders;
    }
}

//----------------------------------------------- Операции -----------------------------------------------------//

saleOperationBlanketOrder = DATA saleOperation (blanketOrder);
nameSaleOperationBlanketOrder 'Операция' = name(saleOperationBlanketOrder(blanketOrder));

saleOperationBlanketOrderDetail 'Операция' (blanketOrderDetail) = saleOperationBlanketOrder(blanketOrderBlanketOrderDetail(blanketOrderDetail));

CONSTRAINT saleOperationBlanketOrderDetail(blanketOrderDetail) AND priceListTypeBlanketOrderDetail(blanketOrderDetail)
           AND NOT isPriceListTypeSaleOperation(priceListTypeBlanketOrderDetail(blanketOrderDetail), saleOperationBlanketOrderDetail(blanketOrderDetail))
    CHECKED BY priceListTypeBlanketOrderDetail
    MESSAGE 'Вид цены должен совпадать с отмеченными в операции';

CONSTRAINT saleOperationBlanketOrder(blanketOrder) AND priceListTypeBlanketOrderStock(blanketOrder, stock)
           AND NOT isPriceListTypeSaleOperation(priceListTypeBlanketOrderStock(blanketOrder, stock), saleOperationBlanketOrder(blanketOrder))
    CHECKED BY priceListTypeBlanketOrderStock
    MESSAGE 'Вид цены должен совпадать с отмеченными в операции';

CONSTRAINT saleOperationBlanketOrder(blanketOrder)
           AND NOT isSupplierSaleOperationOver(supplierBlanketOrder(blanketOrder), saleOperationBlanketOrder(blanketOrder))
    CHECKED BY supplierBlanketOrder
    MESSAGE 'Поставщик должен совпадать с отмеченными в операции';

CONSTRAINT saleOperationBlanketOrder(blanketOrder)
           AND NOT isCustomerSaleOperationOver(customerBlanketOrder(blanketOrder), saleOperationBlanketOrder(blanketOrder))
    CHECKED BY customerBlanketOrder
    MESSAGE 'Покупатель должен совпадать с отмеченными в операции';

EXTEND FORM blanketOrder
    PROPERTIES(o) nameSaleOperationBlanketOrder
;

EXTEND DESIGN blanketOrder{
    o.documentPrmGroup{
        ADD PROPERTY(nameSaleOperationBlanketOrder) BEFORE PROPERTY(nameCurrencyBlanketOrder);
    }
}
