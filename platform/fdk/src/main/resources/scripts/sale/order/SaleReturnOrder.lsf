MODULE SaleReturnOrder;

REQUIRE Order, SaleShipment, SaleOperation, SalePack;

PRIORITY Sale, Operation;

NAMESPACE SaleReturn;

@defineOrder(' (продажа-возврат)', supplier, supplierStock, Sale, showSalePack, 'Упаковка');

@defineOrderStockDestination(customerStock, supplierStock);

@defineNumeratedObjectDefaultPrefix(UserOrder, 'Нумератор для заказов (продажа-возврат)', 'ВП', saleReturn);

@defineDocumentContactSkuStock (userOrder, userOrder, supplier, 'Поставщик', o, sts);

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperation(order, o);
Order.operationOrder(order) += operationOrder(order);
@defineDocumentOperationPriceListType(userOrder);
@defineDocumentOperationLegalEntity(userOrder, supplier, 'Поставщик');
@defineDocumentOperationLegalEntity(userOrder, customer, 'Покупатель');

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserOrder(userOrder) AND NOT isCompanyLegalEntity(supplierUserOrder(userOrder))
    CHECKED BY supplierUserOrder MESSAGE 'Для заказа выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerUserOrder(userOrder) AND NOT isCustomerLegalEntity(customerUserOrder(userOrder))
    CHECKED BY customerUserOrder MESSAGE 'Для заказа выбрано в качестве покупателя организация, не являющаяся покупателем';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserOrder, company, customer, userOrder);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPackSkuStock(userOrder, sku, supplierStock, Sale);
@extendFormDocumentPackSkuStockCustom(userOrder, userOrder, o, supplierStock, showSalePack, Sale);

overChangeQuantityValueSkuUserOrderDetail(detail) += ACTION (detail) {
    IF  packBarcodeSku(skuUserOrderDetail(detail)) THEN {
        SET quantityPackUserOrderDetail(detail) <- quantityUserOrderDetail(detail)/amountPackUserOrderDetail(detail);
    }
}

//------------------------------ Расширение формы -----------------------------//

// Фильтры
inUserOrderSku (userOrder, sku) = inCustomerSku(customerUserOrder(userOrder), sku);
EXTEND FORM userOrder

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' currentBalanceSkuStock(s, st)
        FILTER 'В заказе ' 'F9' quantitySkuUserOrderSupplierStock(s, o, st)

    FILTERGROUP filter1
        FILTER 'С продажей' 'F8' inUserOrderSku(o, s)
        FILTER'В ассортименте' 'F7' priceSkuStockUserOrder(s, st, o) DEFAULT

;

// Резервы
@extendFormDocumentOrderLedgerStock(userOrder, userOrder, o);

//--------------------- Проводим по регистру резерва ------------------//
@implementSaleOrderLedger(Order, sku, shipmentDateTime, supplierStock, customer);


NAVIGATOR {
    saleReturnNavigator {
        ADD orders;
    }
}
