MODULE SalePurchaseOrder;

REQUIRE SaleOrder, PurchaseOrder;

PRIORITY Sale;

//----------------------------------------------------------------------------//

GROUP orderSaleGroup 'Информация о заказе' : public;

createPurchaseOrder 'Создать заказ (закупка)' = ABSTRACT BOOLEAN (Order) PERSISTENT;
createPurchaseUserOrder 'Создать заказ (закупка)' = DATA BOOLEAN (UserOrder) PERSISTENT;
createPurchaseOrder(order) += createPurchaseUserOrder(order);

createPurchaseOrderDetail 'Создать заказ (закупка)' (orderDetail) = createPurchaseOrder(orderOrderDetail(orderDetail))PERSISTENT;
createPurchaseUserOrderDetail 'Создать заказ (закупка)' (userOrderDetail) = createPurchaseUserOrder(userOrderUserOrderDetail(userOrderDetail));
backgroundPurchaseOrder 'Цвет' (order) = RGB(255, 214, 214) IF order IS Order;
EXTEND FORM userOrder
    PROPERTIES(o) BACKGROUND backgroundPurchaseOrder(o) createPurchaseUserOrder
;
EXTEND DESIGN userOrder {
    headerRow1{
        NEW headerRow13{
            title = 'Заказ';
            childConstraints = TO THE RIGHTBOTTOM;
            ADD PROPERTY(createPurchaseUserOrder);
        }
    }
}

EXTEND FORM orders
    PROPERTIES(o) READONLY BACKGROUND backgroundPurchaseOrder(o) createPurchaseOrder
;

CLASS PurchaseOrder 'Заказ на основе заказа': Purchase.Order;
CLASS PurchaseOrderPosted 'Проведенный заказ на основе заказа' : PurchaseOrder, PostedObject;
CLASS PurchaseOrderDetail 'Строка заказа на основе заказа' : Purchase.OrderDetail;

@defineDocumentTables(purchaseOrder);

@defineDocumentAggregation(order, purchaseOrder, createPurchaseOrder);
Purchase.orderOrderDetail(detail) += purchaseOrderPurchaseOrderDetail(detail);

@defineDocumentDetailIndex(purchaseOrder);

Purchase.dateOrder(order) += datePurchaseOrder(order);
Purchase.timeOrder(order) += timePurchaseOrder(order);

Purchase.shipmentDateOrder(order) += shipmentDateOrder(orderPurchaseOrder(order));
Purchase.shipmentDataDateOrderDetail(detail) += shipmentDataDateOrderDetail(orderDetailPurchaseOrderDetail(detail));

Purchase.shipmentTimeOrder(order) += shipmentTimeOrder(orderPurchaseOrder(order));
Purchase.shipmentDataTimeOrderDetail(detail) += shipmentDataTimeOrderDetail(orderDetailPurchaseOrderDetail(detail));

Purchase.agreementOrder(order) += agreementOrder(orderPurchaseOrder(order));
Purchase.priceListTypeOrder(order) += priceListTypeOrder(orderPurchaseOrder(order));
Purchase.priceListTypeOrderDetail(detail) += priceListTypeOrderDetail(orderDetailPurchaseOrderDetail(detail));

@defineDocumentAggregationStockPrefix(order, purchaseOrder, supplierStock, 'Склад поставщика', , );
Purchase.supplierStockOrder(order) += supplierStockPurchaseOrder(order);
Purchase.dataSupplierStockOrderDetail(orderDetail) += dataSupplierStockOrderDetail(orderDetailPurchaseOrderDetail(orderDetail));
@defineDocumentAggregationStockPrefix(order, purchaseOrder, customerStock, 'Склад покупателя', , );
Purchase.customerStockOrder(order) += customerStockPurchaseOrder(order);
Purchase.dataCustomerStockOrderDetail(orderDetail) += dataCustomerStockOrderDetail(orderDetailPurchaseOrderDetail(orderDetail));

@defineDocumentAggregationStockPrefix(order, purchaseOrder, supplier, 'Поставщик', , );
Purchase.supplierOrder(order) += supplierPurchaseOrder(order);
@defineDocumentAggregationStockPrefix(order, purchaseOrder, customer, 'Покупатель', , );
Purchase.customerOrder(order) += customerPurchaseOrder(order);

@defineDocumentAggregationPosted(order, purchaseOrder);
Purchase.isPostedOrder(order) += isPostedPurchaseOrder(order);

Purchase.numberOrder(order) += numberOrder(orderPurchaseOrder(order));
Purchase.seriesOrder(order) += seriesOrder(orderPurchaseOrder(order));
seriesNumberPurchaseOrder 'Серия/номер документа' (purchaseOrder) = seriesNumberOrder(orderPurchaseOrder(purchaseOrder));

noteOrderPurchaseOrder 'Примечание' (purchaseOrder) = noteOrder(orderPurchaseOrder(purchaseOrder));
Purchase.noteOrder(order) += noteOrderPurchaseOrder(order);

currencyPurchaseOrder  (purchaseOrder) = currencyOrder(orderPurchaseOrder(purchaseOrder));
Purchase.currencyOrder (order) += currencyPurchaseOrder(order);

@defineDocumentDescription(purchaseOrder, PurchaseOrderDetail, seriesNumberPurchaseOrder, 'Поставка на основе поставки ');
Purchase.descriptionOrder (order) += descriptionPurchaseOrder(order);

@defineDocumentAggregationDetailSku(order, purchaseOrder, sku);
Purchase.skuOrderDetail(orderDetail) +=  skuPurchaseOrderDetail(orderDetail);

Purchase.quantityOrderDetail(orderDetail) += quantityOrderDetail(orderDetailPurchaseOrderDetail(orderDetail));
Purchase.priceOrderDetail(orderDetail) += priceOrderDetail(orderDetailPurchaseOrderDetail(orderDetail));
Purchase.sumOrderDetail(orderDetail) += sumOrderDetail(orderDetailPurchaseOrderDetail(orderDetail));

Purchase.VATOrderDetail(orderDetail) +=VATOrderDetail(orderDetailPurchaseOrderDetail(orderDetail));
Purchase.valueVATOrderDetail(orderDetail) += valueVATOrderDetail(orderDetailPurchaseOrderDetail(orderDetail));
Purchase.VATSumOrderDetail(orderDetail) += VATSumOrderDetail(orderDetailPurchaseOrderDetail(orderDetail));
Purchase.invoiceSumOrderDetail(orderDetail) += invoiceSumOrderDetail(orderDetailPurchaseOrderDetail(orderDetail));

Purchase.showPackOrder(order) +=  showPackOrder(orderPurchaseOrder(order));
Purchase.barcodePackOrderDetail(orderDetail) +=  barcodePackOrderDetail(orderDetailPurchaseOrderDetail(orderDetail));
Purchase.amountPackOrderDetail(orderDetail) +=  amountPackOrderDetail(orderDetailPurchaseOrderDetail(orderDetail));
Purchase.packQuantityOrderDetail(orderDetail) +=  packQuantityOrderDetail(orderDetailPurchaseOrderDetail(orderDetail));

Purchase.editOrder(order) += ACTION EXEC editOrder(orderPurchaseOrder(order));

