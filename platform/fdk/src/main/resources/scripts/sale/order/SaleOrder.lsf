MODULE SaleOrder;

REQUIRE Order, Store, SaleOperation;

NAMESPACE Sale;

// todo : переделать
// Упаковка
salePackBarcodeSku 'Штрих-код для продажи' = DATA barcode (sku);
CONSTRAINT skuBarcode(salePackBarcodeSku(item)) != item CHECKED BY salePackBarcodeSku MESSAGE 'Выбран неверный sku для штрих-кода';
salePackBarcode 'Штрих-код для продажи' (barcode)=  salePackBarcodeSku(skuBarcode(barcode)) == barcode;
changeSalePackBarcodeSku = ACTION (barcode, sku) {
    REQUEST BOOLEAN INPUT;
    IF requestedLogical() THEN {
        SET salePackBarcodeSku(sku) <- barcode;
    } ELSE
        SET salePackBarcodeSku(sku) <- NULL;
}

EXTEND FORM barcodeDialog
    PROPERTIES (b) READONLY salePackBarcode
;

@defineOrder(' (продажа)', supplier, supplierStock, salePack, showSalePack, 'Отображать упаковку');

@defineOrderStockDestination(supplierStock, customerStock);

@defineNumeratedObjectDefaultPrefix(userOrder, 'Нумератор для заказов (продажа)', 'ЗП', sale);

toDateUserOrder(userOrder) <- sumDate(shipmentDateUserOrder(userOrder), quantityDaysCloseOrdersLegalEntity(supplierUserOrder(userOrder))) WHEN CHANGED(supplierUserOrder(userOrder)) OR CHANGED(shipmentDateUserOrder(userOrder));

@defineDocumentContactSkuStock (userOrder, userOrder, supplier, 'Поставщик', o, sts);

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperation(sale, order, o);
@defineDocumentOperationPriceListType(sale, userOrder);
@defineDocumentOperationLegalEntity(sale, userOrder, supplier, 'Поставщик');
@defineDocumentOperationLegalEntity(sale, userOrder, customer, 'Покупатель');

// --------------------- НДС расчетный ----------------------- //

@defineDocumentInterfaceHeaderTAX(order, VAT, 'НДС расч.');

CONSTRAINT taxRange(VATUserOrder(userOrder)) != tax.taxVAT OR
           countryRange(VATUserOrder(userOrder)) != countryStock(supplierStockOrder(userOrder)) OR
           rangeTypeRange(VATUserOrder(userOrder)) != rangeType.units
           CHECKED BY VATUserOrder
           MESSAGE 'ошибка: Шкала и страна строки должна соответствовать шкале и строке НДС';

VATUserOrder (userOrder) <- rangeTaxTaxUnit(tax.taxVAT, storeDepartmentStore(supplierStockUserOrder(userOrder)))
        WHEN CHANGED(supplierStockUserOrder(userOrder));

@deriveDocumentDetailVATHeader(userOrder, VAT, supplierStock);

derivedVATSumUserOrderDetail (userOrderDetail) =
    IF rangeTypeRange(VATUserOrderDetail(userOrderDetail)) == rangeType.units
        THEN roundPriceCurrency(invoicePriceUserOrderDetail (userOrderDetail) * quantityUserOrderDetail (userOrderDetail) * valueVATUserOrderDetail (userOrderDetail)/100, currencyUserOrderDetail(userOrderDetail))
        ELSE roundPriceCurrency((sumUserOrderDetail(userOrderDetail) * valueVATUserOrderDetail (userOrderDetail) / 100), currencyUserOrderDetail(userOrderDetail))
    PERSISTENT;

VATSumUserOrderDetail (userOrderDetail) <- derivedVATSumUserOrderDetail (userOrderDetail)
    WHEN CHANGED(invoicePriceUserOrderDetail(userOrderDetail)) OR CHANGED(quantityUserOrderDetail(userOrderDetail)) OR CHANGED(VATUserOrderDetail(userOrderDetail))
      OR CHANGED(sumUserOrderDetail(userOrderDetail)) OR CHANGED(currencyUserOrderDetail(userOrderDetail));

derivedInvoiceSumUserOrderDetail (userOrderDetail) =
    IF rangeTypeRange(VATUserOrderDetail(userOrderDetail)) == rangeType.units
        THEN invoicePriceUserOrderDetail (userOrderDetail) * quantityUserOrderDetail (userOrderDetail)
        ELSE sumUserOrderDetail (userOrderDetail) (+) VATSumUserOrderDetail (userOrderDetail)
    PERSISTENT;

invoiceSumUserOrderDetail (userOrderDetail) <- derivedInvoiceSumUserOrderDetail (userOrderDetail)
    WHEN CHANGED(invoicePriceUserOrderDetail(userOrderDetail)) OR CHANGED(quantityUserOrderDetail(userOrderDetail))
    OR CHANGED(sumUserOrderDetail(userOrderDetail)) OR CHANGED(VATSumUserOrderDetail(userOrderDetail));

derivedPriceUserOrderDetail (userOrderDetail) =
    IF rangeTypeRange(VATUserOrderDetail(userOrderDetail)) == rangeType.units
        THEN invoicePriceUserOrderDetail(userOrderDetail)*(100-valueVATUserOrderDetail (userOrderDetail))/100
        ELSE invoicePriceUserOrderDetail(userOrderDetail)*100/(100+valueVATUserOrderDetail (userOrderDetail))
    PERSISTENT;

priceUserOrderDetail (userOrderDetail) <- derivedPriceUserOrderDetail (userOrderDetail)
    WHEN CHANGED(invoicePriceUserOrderDetail(userOrderDetail)) OR CHANGED(VATUserOrderDetail (userOrderDetail));

isDepartmentStoreSupplierStockOrder (order) = supplierStockOrder(order) IS departmentStore;

EXTEND FORM userOrder
    PROPERTIES(o) numberVATUserOrder SHOWIF isDepartmentStoreSupplierStockOrder(o), valueVATUserOrder SHOWIF isDepartmentStoreSupplierStockOrder(o);
;

// ----------------------------- Автоматическая отсылка почты ---------------------------------- //

FORM emailOrder 'Заказ' PRINT
    OBJECTS o = order FIXED PANEL
    PROPERTIES (o) numberOrder, seriesOrder, nameSupplierOrder, nameCustomerOrder, nameSupplierStockOrder, nameCustomerStockOrder,
                   numberObject, seriesObject, dateOrder, timeOrder, nameCurrencyOrder, noteOrder,
                   countOrderDetailOrder, quantityOrderDetailOrder, sumOrderDetailOrder,
                   VATSumOrderDetailOrder, invoiceSumOrderDetailOrder, shipmentDateOrder

    OBJECTS d = orderDetail
    PROPERTIES (d) indexOrderDetail, idBarcodeSkuOrderDetail, nameSkuOrderDetail, shortNameUOMSkuOrderDetail,
                   quantityOrderDetail, priceOrderDetail,  sumOrderDetail, valueVATOrderDetail,
                   VATSumOrderDetail, invoiceSumOrderDetail

    FILTERS orderOrderDetail(d) == o
;

emailCustomerOrder 'Выслать подтвержденный заказ покупателю' (order) = ACTION EMAIL
    FROM emailLegalEntity(supplierOrder(order))
    SUBJECT [FORMULA STRING[60] '\'Подтверждение заказа №\' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT)'](seriesNumberOrder(order), dateOrder(order))
    TO emailLegalEntity(customerOrder(order))
    INLINE emailOrder OBJECTS o=order
    ATTACH PDF
           NAME [FORMULA STRING[60] '\'Заказ №\' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT)'](seriesNumberOrder(order), dateOrder(order))
           emailOrder OBJECTS o=order
;

WHEN isPostedOrder(order) DO EXEC emailCustomerOrder(order);

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserOrder(userOrder) AND NOT isCompanyLegalEntity(supplierUserOrder(userOrder))
    CHECKED BY supplierUserOrder MESSAGE 'Для заказа выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerUserOrder(userOrder) AND NOT isCustomerLegalEntity(customerUserOrder(userOrder))
    CHECKED BY customerUserOrder MESSAGE 'Для заказа выбрано в качестве покупателя организация, не являющаяся покупателем';

//------------------------------ Автоматическое проставление свойств -----------------------------//

supplierUserOrder(userOrder) <- defaultCompanyEmployee(currentUser()) IF countAccessCompanyEmployee (currentUser()) == 1
    WHEN ASSIGNED(userOrder IS userOrder);
customerUserOrder(userOrder) <- defaultCustomerEmployee(currentUser()) IF countAccessCustomerEmployee (currentUser()) == 1
    WHEN ASSIGNED(userOrder IS userOrder);

supplierStockUserOrder(userOrder) <- defaultStockEmployeeLegalEntity(currentUser(), supplierUserOrder(userOrder))
    IF countAccessStockEmployeeLegalEntity (currentUser(), supplierUserOrder(userOrder)) == 1
        WHEN CHANGED(supplierUserOrder(userOrder));
customerStockUserOrder(userOrder) <- defaultStockEmployeeLegalEntity(currentUser(), customerUserOrder(userOrder))
    IF countAccessStockEmployeeLegalEntity (currentUser(), customerUserOrder(userOrder)) == 1
        WHEN CHANGED(customerUserOrder(userOrder));

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPackageSkuStock(userOrder, sku, supplierStock, salePack);
@extendFormDocumentPackageSkuStockCustom(userOrder, userOrder, o, supplierStock, showSalePack);

overChangeQuantityValueSkuUserOrderDetail(detail) += ACTION (detail) {
    IF  salePackBarcodeSku(skuUserOrderDetail(detail)) THEN {
        SET quantityPackUserOrderDetail(detail) <- quantityUserOrderDetail(detail)/amountPackUserOrderDetail(detail);
    }
}

//------------------------------ Расширение формы -----------------------------//

// Фильтры
inUserOrderSku (userOrder, sku)= inCustomerSku(customerUserOrder(userOrder), sku);
EXTEND FORM userOrder

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' currentBalanceSkuStock(s, st) DEFAULT
        FILTER 'В заказе ' 'F9' quantitySkuUserOrderSupplierStock(s, o, st)

    FILTERGROUP filter1
        FILTER 'С продажей' 'F8' inUserOrderSku(o, s)
        FILTER 'В ассортименте' 'F7' ledgerPriceSkuStockUserOrder(s, st, o) DEFAULT
;

// Резервы
@extendFormDocumentOrderLedgerStock(userOrder, userOrder, o);

//--------------------- Проводим по регистру резерва ------------------//
@implementSaleOrderLedger(order, sku, shipmentDateTime, supplierStock, customer);


NAVIGATOR {
    saleSaleNavigator {
        ADD orders;
    }
}