MODULE SalePurchaseInvoice;

REQUIRE SaleInvoice, PurchaseInvoice;

PRIORITY Sale;

//----------------------------------------------------------------------------//

// Создание накладной на основе накладной //

FORM invoiceInvoices 'Накладные'
    OBJECTS s = legalEntity FIXED PANEL
    PROPERTIES (s) READONLY name
    OBJECTS c = legalEntity FIXED PANEL
    PROPERTIES (c) READONLY name

    OBJECTS ss = stock FIXED PANEL
    PROPERTIES (ss) READONLY name
    OBJECTS cs = stock FIXED PANEL
    PROPERTIES (cs) READONLY name

    OBJECTS t=DATE FIXED PANEL
    PROPERTIES(t) OBJVALUE

    OBJECTS o = invoice
    PROPERTIES (o) READONLY isPostedInvoice FORCE GRID, objectClassName, numberInvoice, seriesInvoice, dateInvoice, timeInvoice,
                            nameCurrencyInvoice, noteInvoice,
                            countInvoiceDetailInvoice, quantityInvoiceDetailInvoice, sumInvoiceDetailInvoice, showSalePackInvoice
    FILTERS supplierInvoice(o) == s,
            customerInvoice(o) == c,
            supplierStockInvoice(o) == ss,
            customerStockInvoice(o) == cs,
            isPostedInvoice(o)

    FILTERGROUP filters1
        FILTER 'Только этой даты' 'F11' dateInvoice(o) == t DEFAULT

    OBJECTS d = invoiceDetail

    PROPERTIES (d) READONLY indexInvoiceDetail, idBarcodeSkuInvoiceDetail, nameSkuInvoiceDetail, shortNameUOMSkuInvoiceDetail
    PROPERTIES (d) READONLY SHOWIF showSalePackInvoice(o) idBarcodePackInvoiceDetail, shortNameUOMPackInvoiceDetail, amountPackInvoiceDetail, quantityPackInvoiceDetail
    PROPERTIES (d) READONLY quantityInvoiceDetail, priceInvoiceDetail, sumInvoiceDetail, numberVATInvoiceDetail, valueVATInvoiceDetail,
                            VATSumInvoiceDetail, invoiceSumInvoiceDetail, nameSupplierStockInvoiceDetail

    FILTERS invoiceInvoiceDetail(d) == o
;

DESIGN invoiceInvoices FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        NEW documentContainer BEFORE functions.box {

            childConstraints = TO THE BOTTOM;
            NEW headerBox1 {
                childConstraints = TO THE RIGHTBOTTOM;
                NEW headerBox11 {
                    childConstraints = TO THE RIGHTBOTTOM;
                    title = 'Поставщик';
                    ADD s.box;
                    ADD ss.box;
                }
                NEW headerBox12 {
                    childConstraints = TO THE RIGHTBOTTOM;
                    title = 'Покупатель';
                    ADD c.box;
                    ADD cs.box;
                }
            }
            NEW headerBox2 {
                childConstraints = TO THE RIGHTBOTTOM;
                ADD t.box;
            }
            ADD o.box;
            NEW documentDetail {
                type = TABBED;

                ADD d.box {
                    title = 'Спецификация';
                }
                NEW printTab {
                    title = 'Печатные формы';
                    NEW printContainer {
                        title = 'Печать';
                        childConstraints = TO THE BOTTOM;
                        fillVertical = 1.0;
                    }
                }
            }
        }
    }
}


fillInvoiceUserInvoice 'Заполнить на основе накладной' =  ACTION (userInvoice) {
    FORM invoiceInvoices OBJECTS s = Purchase.supplierUserInvoice(userInvoice), c = Purchase.customerUserInvoice(userInvoice),
                                   ss = Purchase.supplierStockUserInvoice(userInvoice), cs = Purchase.customerStockUserInvoice(userInvoice),
                                   t = Purchase.dateUserInvoice(userInvoice) MODAL;
    IF formResult() == formResult.ok THEN {
        LOCAL saleInvoice = invoice();
        SET saleInvoice() <- chosenObject('o');

        FOR invoiceInvoiceDetail(invoiceDetail) == saleInvoice() ADDOBJ d = Purchase.userInvoiceDetail DO {
            SET Purchase.userInvoiceUserInvoiceDetail(d) <- userInvoice;
            SET Purchase.skuUserInvoiceDetail(d) <- skuInvoiceDetail(invoiceDetail);
            SET Purchase.batchUserInvoiceDetail(d) <- batchInvoiceDetail(invoiceDetail);
            SET Purchase.barcodePackUserInvoiceDetail(d) <- barcodePackInvoiceDetail(invoiceDetail);
            SET Purchase.amountPackUserInvoiceDetail(d) <- amountPackInvoiceDetail(invoiceDetail);
            SET Purchase.quantityPackUserInvoiceDetail(d) <- quantityPackInvoiceDetail(invoiceDetail);
            SET Purchase.quantityUserInvoiceDetail (d) <- quantityInvoiceDetail(invoiceDetail);
            SET Purchase.VATUserInvoiceDetail(d) <- VATInvoiceDetail(invoiceDetail);
            SET Purchase.valueVATUserInvoiceDetail(d) <- valueVATInvoiceDetail(invoiceDetail);
            SET Purchase.priceUserInvoiceDetail(d) <- priceInvoiceDetail(invoiceDetail);
            SET Purchase.invoicePriceUserInvoiceDetail(d) <- invoicePriceInvoiceDetail(invoiceDetail);
        }
    }
} IN Purchase.invoiceGroup;

EXTEND FORM Purchase.userInvoice
    PROPERTIES(i) fillInvoiceUserInvoice
;
EXTEND DESIGN Purchase.userInvoice {
    headerRow13{
        NEW headerRow131{
            title = 'Информация о накладной';
            childConstraints = TO THE RIGHTBOTTOM;
            ADD PROPERTY(fillInvoiceUserInvoice);
        }
    }
}

//----------------------------------------------------------------------------//

GROUP invoiceGroup 'Информация о накладной' : base;

createPurchaseInvoiceInvoice 'Создать накладную (закупка)' = ABSTRACT BOOLEAN (invoice) PERSISTENT;
createPurchaseInvoiceUserInvoice 'Создать накладную (закупка)' = DATA BOOLEAN (userInvoice) PERSISTENT;
createPurchaseInvoiceInvoice(invoice) += createPurchaseInvoiceUserInvoice(invoice);

createPurchaseInvoiceInvoiceDetail 'Создать накладную (закупка)' (invoiceDetail) = createPurchaseInvoiceInvoice(invoiceInvoiceDetail(invoiceDetail))PERSISTENT;
createPurchaseInvoiceUserInvoiceDetail 'Создать накладную (закупка)' (userInvoiceDetail) = createPurchaseInvoiceUserInvoice(userInvoiceUserInvoiceDetail(userInvoiceDetail));
backgroundPurchaseInvoice 'Цвет' (invoice) = RGB(255, 255, 190) IF invoice IS invoice;
EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundPurchaseInvoice(i) createPurchaseInvoiceUserInvoice
;
EXTEND DESIGN userInvoice {
    headerRow15{
        title = 'Закупка';
        NEW headerRow151 {
            title = 'Накладная';
            childConstraints = TO THE RIGHTBOTTOM;
            ADD PROPERTY(createPurchaseInvoiceUserInvoice);
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(i) READONLY BACKGROUND backgroundPurchaseInvoice(i) createPurchaseInvoiceInvoice
;
//--  Связь поставки с поставкой

invoiceDetailInvoiceDetail = ABSTRACT invoiceDetail (Purchase.invoiceDetail) PERSISTENT;
invoiceDetailUserInvoiceDetail = DATA invoiceDetail (Purchase.userInvoiceDetail);
invoiceDetailInvoiceDetail(invoiceDetail) += invoiceDetailUserInvoiceDetail(invoiceDetail);

CONSTRAINT Purchase.supplierInvoiceDetail(detail) != supplierInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) OR
           Purchase.supplierStockInvoiceDetail(detail) != supplierStockInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) OR
           Purchase.customerInvoiceDetail(detail) != customerInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) OR
           Purchase.customerStockInvoiceDetail(detail) != customerStockInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) OR
           Purchase.skuInvoiceDetail(detail) != skuInvoiceDetail(invoiceDetailUserInvoiceDetail(detail))
    CHECKED BY invoiceDetailUserInvoiceDetail
        MESSAGE 'Поставщик, покупатель, склад поставщика и склад покупателя в накладной и накладной на осове накладной должны соответствовать друг другу';


descriptionIndexInvoiceDetailInvoiceDetail 'Строка накладной (продажа)' (detail) = descriptionIndexInvoiceDetail(invoiceDetailInvoiceDetail(detail));
descriptionIndexInvoiceDetailUserInvoiceDetail 'Строка накладной (продажа)' (detail) = descriptionIndexInvoiceDetail(invoiceDetailUserInvoiceDetail(detail));

quantityInvoiceDetailInvoiceInvoice (sale, purchase) = GROUP SUM Purchase.quantityInvoiceDetail(detail) BY invoiceInvoiceDetail(invoiceDetailInvoiceDetail(detail)), Purchase.invoiceInvoiceDetail(detail);

saleInvoicesInvoice 'Поставки (продажа)' (purchase) = GROUP CONCAT toString255(descriptionInvoice(sale)) IF quantityInvoiceDetailInvoiceInvoice(sale, purchase) , ', '
                                                        BY purchase
                                                        ORDER sale IN invoiceGroup MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

relationPurchaseInvoice 'Связь' (purchase) = GROUP SUM quantityInvoiceDetailInvoiceInvoice (sale, purchase) BY purchase PERSISTENT;

invoicedInvoiceDetail 'Кол-во (выписано)' (invoiceDetail) = GROUP SUM Purchase.quantityInvoiceDetail(detail) IF Purchase.isPostedInvoiceDetail(detail)
                                                                   BY invoiceDetailInvoiceDetail(detail) PERSISTENT;

toInvoicedInvoiceDetail 'Не выписано' (invoiceDetail) = quantityInvoiceDetail (invoiceDetail) (-) invoicedInvoiceDetail(invoiceDetail);

CLASS purchaseInvoice 'Накладная на основе накладной': Purchase.invoice;
CLASS purchaseInvoicePosted 'Проведенная накладная на основе накладной' : purchaseInvoice, postedObject;
CLASS purchaseInvoiceDetail 'Строка накладной на основе накладной' : Purchase.invoiceDetail;

@defineDocumentTables(purchaseInvoice);

@defineDocumentAggregation(invoice, purchaseInvoice, createPurchaseInvoiceInvoice);
Purchase.invoiceInvoiceDetail(detail) += purchaseInvoicePurchaseInvoiceDetail(detail);

@defineDocumentDetailIndex(purchaseInvoice);

Purchase.dateInvoice(invoice) += datePurchaseInvoice(invoice);
Purchase.timeInvoice(invoice) += timePurchaseInvoice(invoice);

@defineDocumentAggregationStockPrefix(invoice, purchaseInvoice, supplierStock, 'Склад поставщика', , );
Purchase.supplierStockInvoice(invoice) += supplierStockPurchaseInvoice(invoice);
Purchase.dataSupplierStockInvoiceDetail(invoiceDetail) += dataSupplierStockInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
@defineDocumentAggregationStockPrefix(invoice, purchaseInvoice, customerStock, 'Склад покупателя', , );
Purchase.customerStockInvoice(invoice) += customerStockPurchaseInvoice(invoice);
Purchase.dataCustomerStockInvoiceDetail(invoiceDetail) += dataCustomerStockInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));

@defineDocumentAggregationStockPrefix(invoice, purchaseInvoice, supplier, 'Поставщик', , );
Purchase.supplierInvoice(invoice) += supplierPurchaseInvoice(invoice);
@defineDocumentAggregationStockPrefix(invoice, purchaseInvoice, customer, 'Покупатель', , );
Purchase.customerInvoice(invoice) += customerPurchaseInvoice(invoice);

@defineDocumentAggregationPosted(invoice, purchaseInvoice);
Purchase.isPostedInvoice(invoice) += isPostedPurchaseInvoice(invoice);

Purchase.numberInvoice(invoice) += numberInvoice(invoicePurchaseInvoice(invoice));
Purchase.seriesInvoice(invoice) += seriesInvoice(invoicePurchaseInvoice(invoice));
seriesNumberPurchaseInvoice 'Серия/номер документа' (purchaseInvoice) = seriesNumberInvoice(invoicePurchaseInvoice(purchaseInvoice));

noteInvoicePurchaseInvoice 'Примечание' (purchaseInvoice) = noteInvoice(invoicePurchaseInvoice(purchaseInvoice));
Purchase.noteInvoice(invoice) += noteInvoicePurchaseInvoice(invoice);

currencyPurchaseInvoice  (purchaseInvoice) = currencyInvoice(invoicePurchaseInvoice(purchaseInvoice));
Purchase.currencyInvoice (invoice) += currencyPurchaseInvoice(invoice);

agreementPurchaseInvoice  (purchaseInvoice) = agreementInvoice(invoicePurchaseInvoice(purchaseInvoice));
Purchase.agreementInvoice (invoice) += agreementPurchaseInvoice(invoice);

priceListTypeIPurchaseInvoice  (purchaseInvoice) = priceListTypeInvoice(invoicePurchaseInvoice(purchaseInvoice));
Purchase.priceListTypeInvoice (invoice) += priceListTypeIPurchaseInvoice(invoice);

@defineDocumentDescription(purchaseInvoice, purchaseInvoiceDetail, seriesNumberPurchaseInvoice, 'Поставка на основе поставки ');
Purchase.descriptionInvoice (invoice) += descriptionPurchaseInvoice(invoice);

Purchase.contractSkuInvoice (invoice) += contractSkuInvoice(invoicePurchaseInvoice(invoice));
Purchase.isCommissionInvoice (invoice) += isCommissionInvoice(invoicePurchaseInvoice(invoice));

@defineDocumentAggregationDetailSku(invoice, purchaseInvoice, sku);
Purchase.skuInvoiceDetail(invoiceDetail) +=  skuPurchaseInvoiceDetail(invoiceDetail);

@defineDocumentAggregationDetailBatch(invoice, purchaseInvoice);
Purchase.batchInvoiceDetail(invoiceDetail) += batchPurchaseInvoiceDetail(invoiceDetail);

Purchase.quantityInvoiceDetail(invoiceDetail) += quantityInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
Purchase.priceListTypeInvoiceDetail(invoiceDetail) += priceListTypeInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));

Purchase.priceInvoiceDetail(invoiceDetail) += priceInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
Purchase.sumInvoiceDetail(invoiceDetail) += sumInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
Purchase.VATInvoiceDetail(invoiceDetail) += VATInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
Purchase.valueVATInvoiceDetail(invoiceDetail) += valueVATInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
Purchase.invoicePriceInvoiceDetail(invoiceDetail) += invoicePriceInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
Purchase.VATSumInvoiceDetail(invoiceDetail) += VATSumInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
Purchase.invoiceSumInvoiceDetail(invoiceDetail) += invoiceSumInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));

Purchase.editInvoice(invoice) += ACTION EXEC editInvoice(invoicePurchaseInvoice(invoice));

Purchase.showPurchasePackInvoice(invoice) +=  showSalePackInvoice(invoicePurchaseInvoice(invoice));
Purchase.barcodePackInvoiceDetail(invoiceDetail) += barcodePackInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
Purchase.amountPackInvoiceDetail(invoiceDetail) +=  amountPackInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
Purchase.quantityPackInvoiceDetail(invoiceDetail) +=  quantityPackInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));

invoiceDetailInvoiceDetail(invoiceDetail) += invoiceDetailPurchaseInvoiceDetail(invoiceDetail);

//------------------------------ Создание аггрегированных объектов через операции -----------------------------//

@deriveDocumentHeaderCreate(userInvoice, createPurchaseInvoice, sale);




