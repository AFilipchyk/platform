MODULE SaleReturnInvoice;

REQUIRE OrderInvoice, SaleReturnOrder, SaleInvoice, SaleOperation;

PRIORITY Sale, Operation;

NAMESPACE SaleReturn;

//----------------------------------------------- Накладная ---------------------------------------------------//
@defineInvoice(' (продажа-возврат)', supplierStock, showSalePack, 'Упаковка', Sale);
@defineOrderInvoice(' (продажа-возврат)', supplierStock, showSalePack, 'Упаковка', salePack);
@defineInvoiceBatch(supplierStock);

@defineInvoiceReturn(Sale, SaleReturn, supplierStock);
@defineInvoiceDestination(customer, supplier);
@defineInvoiceStockDestination(customerStock, supplierStock);

@defineDocumentContactSkuStock (userInvoice, userInvoice, supplier, 'Поставщик', i, s);

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperation(invoice, i);
@defineDocumentOperationPriceListType(userInvoice);
@defineDocumentOperationLegalEntity(userInvoice, supplier, 'Поставщик');
@defineDocumentOperationLegalEntity(userInvoice, customer, 'Покупатель');
@defineDocumentConstraintOperationRole(userInvoice);

showSalePackUserInvoice (invoice) <- showSalePackOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));
//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserInvoice(userInvoice) AND NOT isCompanyLegalEntity(supplierUserInvoice(userInvoice))
    CHECKED BY supplierUserInvoice MESSAGE 'Для накладной выбрано в качестве поставщика организация, не являющаяся компанией: возврат';
CONSTRAINT customerUserInvoice(userInvoice) AND NOT isCustomerLegalEntity(customerUserInvoice(userInvoice))
    CHECKED BY customerUserInvoice MESSAGE 'Для накладной выбрано в качестве покупателя организация, не являющаяся покупателем: возврат';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserInvoice, company, customer, userInvoice);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPackSku(userInvoice, sku, supplierStock, Sale);
@extendFormDocumentPackSkuCustom(userInvoice, userInvoice, i, showSalePack, Sale);

overChangeQuantityValueSkuUserInvoiceDetail(detail) += ACTION (detail) {
    IF  packBarcodeSku(skuUserInvoiceDetail(detail)) THEN {
        SET quantityPackUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
    }
}

//------------------------------ Расширение формы -----------------------------//

// Фильтры
inUserInvoiceSku (userInvoice, sku)= inCustomerSku(customerUserInvoice(userInvoice), sku);
EXTEND FORM userInvoice

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' currentBalanceSkuUserInvoice(s, i)
        FILTER 'В документе ' 'F9' quantityUserInvoiceDetailSkuUserInvoice(s, i)

    FILTERGROUP filter2
        FILTER 'Товары с продажей ' 'F8' inUserInvoiceSku(i, s)
        FILTER 'В ассортименте' 'F7' ledgerPriceSkuUserInvoice(s, i)
;

// Резервы
@extendFormDocumentOrderLedger(userInvoice, userInvoice, supplierStock, i);
@extendFormDocumentOrderLedgerAll(userInvoice, userInvoice, i);

NAVIGATOR {
    saleReturnNavigator {
        ADD invoices;
    }
}