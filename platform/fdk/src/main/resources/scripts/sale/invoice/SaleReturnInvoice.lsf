MODULE SaleReturnInvoice;

REQUIRE OrderInvoice, SaleReturnOrder, SaleInvoice;

NAMESPACE SaleReturn;

//----------------------------------------------- Накладная ---------------------------------------------------//
@defineInvoice(' (продажа-возврат)', supplierStock, showSalePack, 'Отображать упаковку', salePack);
@defineOrderInvoice(' (продажа-возврат)', supplierStock, showSalePack, 'Отображать упаковку', salePack);
@defineInvoiceBatch(supplierStock);

@defineInvoiceReturn(Sale, SaleReturn, supplierStock);
@defineInvoiceDestination(customer, supplier);
@defineInvoiceStockDestination(customerStock, supplierStock);

// -------------------------------------- Формирование задолженности ---------------------------------------------------

@implementContractLedger(, userInvoice, contractSku);
sumContractLedger(contractLedger) += -invoiceSumUserInvoiceDetailUserInvoice(contractLedger);

@implementContractLedger(a, userInvoice, contractSku);
sumContractALedger(contractALedger) += -invoiceSumUserInvoiceDetailUserInvoice(contractALedger);

@implementOutContractLedgerInContractLedgerPrefix(out, userInvoice, contractSku);
sumOutContractLedger(outContractLedger) += invoiceSumUserInvoiceDetailUserInvoice(outContractLedger);

CONSTRAINT supplierUserInvoice(userInvoice) AND NOT isCompanyLegalEntity(supplierUserInvoice(userInvoice))
    CHECKED BY supplierUserInvoice MESSAGE 'Для накладной выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerUserInvoice(userInvoice) AND NOT isCustomerLegalEntity(customerUserInvoice(userInvoice))
    CHECKED BY customerUserInvoice MESSAGE 'Для накладной выбрано в качестве покупателя организация, не являющаяся покупателем';

@defineDocumentContactSkuStock (userInvoice, userInvoice, supplier, 'Поставщик', i, s);

@defineDocumentPackageSku(userInvoice, sku, supplierStock);
@extendFormDocumentPackageSkuCustom(userInvoice, userInvoice, i, showSalePack);

overChangeQuantityValueSkuUserInvoiceDetail(detail) += ACTION (detail) {
    IF  salePackBarcodeSku(skuUserInvoiceDetail(detail)) THEN {
        SET quantityPackUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
    }
}

inUserInvoiceSku (userInvoice, sku)= inCustomerSku(customerUserInvoice(userInvoice), sku);
EXTEND FORM userInvoice

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' currentBalanceSkuUserInvoice(s, i)
        FILTER 'В документе ' 'F9' quantityUserInvoiceDetailSkuUserInvoice(s, i)

    FILTERGROUP filter2
        FILTER 'Товары с продажей ' 'F8' inUserInvoiceSku(i, s)
        FILTER'В ассортименте' 'F7' priceSkuUserInvoice(s, i)
;

//--------------------- Расширяем форму Подбор инвойса резервами -------//
@extendFormDocumentOrderLedger(userInvoice, userInvoice, supplierStock, i);

NAVIGATOR {
    saleReturnNavigator {
        ADD invoices;
    }
}