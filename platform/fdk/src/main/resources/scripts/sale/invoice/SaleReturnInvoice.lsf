MODULE SaleReturnInvoice;

REQUIRE OrderInvoice, SaleReturnOrder, SaleInvoice, SaleOperation;

NAMESPACE SaleReturn;

//----------------------------------------------- Накладная ---------------------------------------------------//
@defineInvoice(' (продажа-возврат)', supplierStock, showSalePack, 'Отображать упаковку', salePack);
@defineOrderInvoice(' (продажа-возврат)', supplierStock, showSalePack, 'Отображать упаковку', salePack, saleOperation);
@defineInvoiceBatch(supplierStock);

@defineInvoiceReturn(Sale, SaleReturn, supplierStock);
@defineInvoiceDestination(customer, supplier);
@defineInvoiceStockDestination(customerStock, supplierStock);

@defineDocumentContactSkuStock (userInvoice, userInvoice, supplier, 'Поставщик', i, s);

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperation(sale, invoice, i);
@defineDocumentOperationPriceListType(sale, userInvoice);
@defineDocumentOperationLegalEntity(sale, userInvoice, supplier, 'Поставщик');
@defineDocumentOperationLegalEntity(sale, userInvoice, customer, 'Покупатель');

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserInvoice(userInvoice) AND NOT isCompanyLegalEntity(supplierUserInvoice(userInvoice))
    CHECKED BY supplierUserInvoice MESSAGE 'Для накладной выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerUserInvoice(userInvoice) AND NOT isCustomerLegalEntity(customerUserInvoice(userInvoice))
    CHECKED BY customerUserInvoice MESSAGE 'Для накладной выбрано в качестве покупателя организация, не являющаяся покупателем';

//------------------------------ Автоматическое проставление свойств -----------------------------//

supplierUserInvoice(userInvoice) <- defaultCompanyEmployee(currentUser()) IF countAccessCompanyEmployee (currentUser()) == 1
    WHEN ASSIGNED(userInvoice IS userInvoice);
customerUserInvoice(userInvoice) <- defaultCustomerEmployee(currentUser()) IF countAccessCustomerEmployee (currentUser()) == 1
    WHEN ASSIGNED(userInvoice IS userInvoice);

supplierStockUserInvoice(userInvoice) <- defaultStockEmployeeLegalEntity(currentUser(), supplierUserInvoice(userInvoice))
    IF countAccessStockEmployeeLegalEntity (currentUser(), supplierUserInvoice(userInvoice)) == 1
        WHEN CHANGED(supplierUserInvoice(userInvoice));
customerStockUserInvoice(userInvoice) <- defaultStockEmployeeLegalEntity(currentUser(), customerUserInvoice(userInvoice))
    IF countAccessStockEmployeeLegalEntity (currentUser(), customerUserInvoice(userInvoice)) == 1
        WHEN CHANGED(customerUserInvoice(userInvoice));

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPackageSku(userInvoice, sku, supplierStock);
@extendFormDocumentPackageSkuCustom(userInvoice, userInvoice, i, showSalePack);

overChangeQuantityValueSkuUserInvoiceDetail(detail) += ACTION (detail) {
    IF  salePackBarcodeSku(skuUserInvoiceDetail(detail)) THEN {
        SET quantityPackUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
    }
}

//------------------------------ Расширение формы -----------------------------//

// Фильтры
inUserInvoiceSku (userInvoice, sku)= inCustomerSku(customerUserInvoice(userInvoice), sku);
EXTEND FORM userInvoice

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' currentBalanceSkuUserInvoice(s, i)
        FILTER 'В документе ' 'F9' quantityUserInvoiceDetailSkuUserInvoice(s, i)

    FILTERGROUP filter2
        FILTER 'Товары с продажей ' 'F8' inUserInvoiceSku(i, s)
        FILTER'В ассортименте' 'F7' priceSkuUserInvoice(s, i)
;

// Резервы
@extendFormDocumentOrderLedger(userInvoice, userInvoice, supplierStock, i);

// --------------------------- Проведение по регистру задолженностей ------------------------------------ //

@implementContractLedger(, userInvoice, contractSku);
sumContractLedger(contractLedger) += -invoiceSumUserInvoiceDetailUserInvoice(contractLedger);

@implementContractLedger(a, userInvoice, contractSku);
sumContractALedger(contractALedger) += -invoiceSumUserInvoiceDetailUserInvoice(contractALedger);

@implementOutContractLedgerInContractLedgerPrefix(out, userInvoice, contractSku);
sumOutContractLedger(outContractLedger) += invoiceSumUserInvoiceDetailUserInvoice(outContractLedger);


NAVIGATOR {
    saleReturnNavigator {
        ADD invoices;
    }
}