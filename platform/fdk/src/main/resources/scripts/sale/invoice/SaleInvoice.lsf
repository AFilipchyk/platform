MODULE SaleInvoice;

REQUIRE SaleOrder, OrderInvoice, StockTax, Store, SaleOperation;

NAMESPACE Sale;

//----------------------------------------------- Накладная ---------------------------------------------------//
@defineInvoice(' (продажа)', supplierStock, showSalePack, 'Отображать упаковку', Sale);

@defineInvoiceBatch(supplierStock);

@defineInvoiceDestination(supplier, customer);
@defineInvoiceStockDestination(supplierStock, customerStock);

@defineDocumentContactSkuStock (userInvoice, userInvoice, supplier, 'Поставщик', i, s);

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperation(invoice, i);
@defineDocumentOperationPriceListType(userInvoice);
@defineDocumentOperationLegalEntity(userInvoice, supplier, 'Поставщик');
@defineDocumentOperationLegalEntity(userInvoice, customer, 'Покупатель');

// ---------------------------------------------- Создание инвойса по заказу ---------------------------------- //

@defineOrderInvoice(' (продажа)', supplierStock, showSalePack, 'Отображать упаковку', salePack);

// --------------------- НДС расчетный ----------------------- //

@defineDocumentInterfaceHeaderTAX(invoice, VAT, 'НДС расч.');

CONSTRAINT taxRange(VATUserInvoice(userInvoice)) != tax.taxVAT OR
           countryRange(VATUserInvoice(userInvoice)) != countryStock(supplierStockInvoice(userInvoice)) OR
           rangeTypeRange(VATUserInvoice(userInvoice)) != rangeType.units
           CHECKED BY VATUserInvoice
           MESSAGE 'ошибка: Шкала и страна строки должна соответствовать шкале и строке НДС';

VATUserInvoice (userInvoice) <- rangeTaxTaxUnit(tax.taxVAT, storeDepartmentStore(supplierStockUserInvoice(userInvoice)))
        WHEN CHANGED(supplierStockUserInvoice(userInvoice));

@deriveDocumentDetailVATHeader(userInvoice, VAT, supplierStock);

derivedVATSumUserInvoiceDetail (userInvoiceDetail) =
    IF rangeTypeRange(VATUserInvoiceDetail(userInvoiceDetail)) == rangeType.units
        THEN roundPriceCurrency(invoicePriceUserInvoiceDetail (userInvoiceDetail) * quantityUserInvoiceDetail (userInvoiceDetail) * valueVATUserInvoiceDetail (userInvoiceDetail)/100, currencyUserInvoiceDetail(userInvoiceDetail))
        ELSE roundPriceCurrency((sumUserInvoiceDetail(userInvoiceDetail) * valueVATUserInvoiceDetail (userInvoiceDetail) / 100), currencyUserInvoiceDetail(userInvoiceDetail))
    PERSISTENT;

VATSumUserInvoiceDetail (userInvoiceDetail) <- derivedVATSumUserInvoiceDetail (userInvoiceDetail)
    WHEN CHANGED(invoicePriceUserInvoiceDetail(userInvoiceDetail)) OR CHANGED(quantityUserInvoiceDetail(userInvoiceDetail)) OR CHANGED(VATUserInvoiceDetail(userInvoiceDetail))
      OR CHANGED(sumUserInvoiceDetail(userInvoiceDetail)) OR CHANGED(currencyUserInvoiceDetail(userInvoiceDetail));

derivedInvoiceSumUserInvoiceDetail (userInvoiceDetail) =
    IF rangeTypeRange(VATUserInvoiceDetail(userInvoiceDetail)) == rangeType.units
        THEN invoicePriceUserInvoiceDetail (userInvoiceDetail) * quantityUserInvoiceDetail (userInvoiceDetail)
        ELSE sumUserInvoiceDetail (userInvoiceDetail) (+) VATSumUserInvoiceDetail (userInvoiceDetail)
    PERSISTENT;

invoiceSumUserInvoiceDetail (userInvoiceDetail) <- derivedInvoiceSumUserInvoiceDetail (userInvoiceDetail)
    WHEN CHANGED(invoicePriceUserInvoiceDetail(userInvoiceDetail)) OR CHANGED(quantityUserInvoiceDetail(userInvoiceDetail))
    OR CHANGED(sumUserInvoiceDetail(userInvoiceDetail)) OR CHANGED(VATSumUserInvoiceDetail(userInvoiceDetail));

derivedPriceUserInvoiceDetail (userInvoiceDetail) =
    IF rangeTypeRange(VATUserInvoiceDetail(userInvoiceDetail)) == rangeType.units
        THEN invoicePriceUserInvoiceDetail(userInvoiceDetail)*(100-valueVATUserInvoiceDetail (userInvoiceDetail))/100
        ELSE invoicePriceUserInvoiceDetail(userInvoiceDetail)*100/(100+valueVATUserInvoiceDetail (userInvoiceDetail))
    PERSISTENT;

priceUserInvoiceDetail (userInvoiceDetail) <- derivedPriceUserInvoiceDetail (userInvoiceDetail)
    WHEN CHANGED(invoicePriceUserInvoiceDetail(userInvoiceDetail)) OR CHANGED(VATUserInvoiceDetail (userInvoiceDetail));

isDepartmentStoreSupplierStockInvoice (invoice) = supplierStockInvoice(invoice) IS departmentStore;

EXTEND FORM userInvoice
    PROPERTIES(i) numberVATUserInvoice SHOWIF isDepartmentStoreSupplierStockInvoice(i), valueVATUserInvoice SHOWIF isDepartmentStoreSupplierStockInvoice(i);
;

// ---------------- Проставление партий в инвойсе с использование партий заказа -------- //

useExplicitBatchDetailUserInvoiceOrder (userInvoice, order) += userInvoice IS Sale.userInvoice AND order IS Sale.order;

toInvoiceBatchOrderDetail (batch, orderDetail) = PARTITION UNGROUP toInvoiceOrderDetail
                                                           LIMIT STRICT currentBalanceBatchStock(batch, supplierStockOrderDetail(orderDetail)) AND skuBatch(batch) == skuOrderDetail(orderDetail)
                                                           BY orderDetail
                                                           ORDER orderBatch(batch);

createExplicitBatchDetailUserInvoiceOrder (userInvoice, order) += ACTION (userInvoice, order) {
    FOR orderOrderDetail(orderDetail) == order AND toInvoiceBatchOrderDetail(batch, orderDetail)
        ADDOBJ d = userInvoiceDetail DO {
            SET userInvoiceUserInvoiceDetail(d) <- userInvoice;
            SET orderUserInvoiceDetail(d) <- order;
            SET skuUserInvoiceDetail(d) <- skuOrderDetail(orderDetail);
            SET batchUserInvoiceDetail(d) <- batch;
            SET quantityUserInvoiceDetail (d) <- toInvoiceBatchOrderDetail(batch, orderDetail);
       // todo: решить какие цены задавать: из заказа или из партии
            SET barcodePackUserInvoiceDetail(d) <- barcodePackOrderDetail(orderDetail);
            SET amountPackUserInvoiceDetail(d) <- amountPackOrderDetail(orderDetail);
            SET quantityPackUserInvoiceDetail (d) <- toInvoiceOrderDetail(orderDetail)/amountPackOrderDetail(orderDetail);
            SET VATUserInvoiceDetail (d) <- VATOrderDetail(orderDetail);
            SET valueVATUserInvoiceDetail (d) <- valueVATOrderDetail(orderDetail);
            SET priceListTypeInvoiceDetail (d) <- priceListTypeOrderDetail(orderDetail);
            SET priceUserInvoiceDetail (d) <- priceOrderDetail(orderDetail);
            SET invoicePriceUserInvoiceDetail (d) <- invoicePriceOrderDetail(orderDetail);
            SET sumUserInvoiceDetail (d) <- sumOrderDetail(orderDetail);
        }
}

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserInvoice(userInvoice) AND NOT isCompanyLegalEntity(supplierUserInvoice(userInvoice))
    CHECKED BY supplierUserInvoice MESSAGE 'Для накладной выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerUserInvoice(userInvoice) AND NOT isCustomerLegalEntity(customerUserInvoice(userInvoice))
    CHECKED BY customerUserInvoice MESSAGE 'Для накладной выбрано в качестве покупателя организация, не являющаяся покупателем';

//------------------------------ Автоматическое проставление свойств -----------------------------//

supplierUserInvoice(userInvoice) <- defaultCompanyEmployee(currentUser()) IF countAccessCompanyEmployee (currentUser()) == 1
    WHEN ASSIGNED(userInvoice IS userInvoice);
customerUserInvoice(userInvoice) <- defaultCustomerEmployee(currentUser()) IF countAccessCustomerEmployee (currentUser()) == 1
    WHEN ASSIGNED(userInvoice IS userInvoice);

supplierStockUserInvoice(userInvoice) <- defaultStockEmployeeLegalEntity(currentUser(), supplierUserInvoice(userInvoice))
    IF countAccessStockEmployeeLegalEntity (currentUser(), supplierUserInvoice(userInvoice)) == 1
        WHEN CHANGED(supplierUserInvoice(userInvoice));
customerStockUserInvoice(userInvoice) <- defaultStockEmployeeLegalEntity(currentUser(), customerUserInvoice(userInvoice))
    IF countAccessStockEmployeeLegalEntity (currentUser(), customerUserInvoice(userInvoice)) == 1
        WHEN CHANGED(customerUserInvoice(userInvoice));

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPackSku(userInvoice, sku, supplierStock, Sale);
@extendFormDocumentPackSkuCustom(userInvoice, userInvoice, i, showSalePack, Sale);

overChangeQuantityValueSkuUserInvoiceDetail(detail) += ACTION (detail) {
    IF  packBarcodeSku(skuUserInvoiceDetail(detail)) THEN {
        SET quantityPackUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
    }
}

//------------------------------ Расширение формы -----------------------------//

// Фильтры
inUserInvoiceSku (userInvoice, sku)= inCustomerSku(customerUserInvoice(userInvoice), sku);
EXTEND FORM userInvoice

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' currentBalanceSkuUserInvoice(s, i) DEFAULT
        FILTER 'В документе ' 'F9' quantityUserInvoiceDetailSkuUserInvoice(s, i)

    FILTERGROUP filter2
        FILTER 'С продажей ' 'F8' inUserInvoiceSku(i, s)
        FILTER 'В ассортименте' 'F7' ledgerPriceSkuUserInvoice(s, i)

;

// Резервы
@extendFormDocumentOrderLedger(userInvoice, userInvoice, supplierStock, i);

// --------------------------- Проведение по регистру задолженностей ------------------------------------ //

@implementContractLedger(a, userInvoice, contractSku);
sumContractALedger(contractALedger) += invoiceSumUserInvoiceDetailUserInvoice(contractALedger);

@implementContractPrepaymentLedger(userInvoice, invoiceSumUserInvoiceDetailUserInvoice, contractSku);

@implementOutContractLedgerInContractLedgerPrefix(in, userInvoice, contractSku);
sumInContractLedger(inContractLedger) += invoiceSumUserInvoiceDetailUserInvoice(inContractLedger);

// --------------------------- Проведение по регистру продаж ------------------------------------ //
@implementSaleLedger(invoice, sku, supplierStock);
quantitySaleLedger (ledger) += quantityInvoiceDetail(ledger);
VATSaleLedger (ledger) += VATInvoiceDetail(ledger);
sumSaleLedger (ledger) += invoiceSumInvoiceDetail(ledger);
customerSaleLedger (ledger) += customerInvoiceDetail(ledger);


NAVIGATOR {
    saleSaleNavigator {
        ADD invoices;
    }
}

