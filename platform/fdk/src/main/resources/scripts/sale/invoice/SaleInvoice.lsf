MODULE SaleInvoice;

REQUIRE SaleOrder, OrderInvoice, StockTax, Store, SaleOperation;

NAMESPACE Sale;

//----------------------------------------------- Накладная ---------------------------------------------------//
@defineInvoice(' (продажа)', supplierStock);

@defineInvoiceBatch(supplierStock);

@defineInvoiceDestination(supplier, customer);
@defineInvoiceStockDestination(supplierStock, customerStock);

@defineDocumentSkuStockSupplier (userInvoice, userInvoice, i, s);

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperation(invoice, i);
@defineDocumentOperationPriceListType(userInvoice, 'накладной (продажа)');
@defineDocumentOperationLegalEntity(userInvoice, supplier, 'Поставщик');
@defineDocumentOperationLegalEntity(userInvoice, customer, 'Покупатель');
@defineDocumentOperationRole(userInvoice);

// ---------------------------------------------- Создание инвойса по заказу ---------------------------------- //

@defineOrderInvoice(' (продажа)', supplierStock);

// --------------------- НДС расчетный ----------------------- //

@defineDocumentInterfaceHeaderTAX(invoice, VAT, 'НДС расч.');

CONSTRAINT taxRange(VATUserInvoice(userInvoice)) != Tax.taxVAT OR
           countryRange(VATUserInvoice(userInvoice)) != countryStock(supplierStockInvoice(userInvoice)) OR
           rangeTypeRange(VATUserInvoice(userInvoice)) != RangeType.units
           CHECKED BY VATUserInvoice
           MESSAGE 'ошибка: Шкала и страна строки должна соответствовать шкале и строке НДС: продажа';

VATUserInvoice (userInvoice) <- rangeTaxTaxUnit(Tax.taxVAT, storeDepartmentStore(supplierStockUserInvoice(userInvoice)))
        WHEN CHANGED(supplierStockUserInvoice(userInvoice));

@deriveDocumentDetailVATHeader(userInvoice, VAT, supplierStock);

derivedVATSumUserInvoiceDetail (userInvoiceDetail) =
    IF rangeTypeRange(VATUserInvoiceDetail(userInvoiceDetail)) == RangeType.units
        THEN roundPriceCurrency(invoicePriceUserInvoiceDetail (userInvoiceDetail) * quantityUserInvoiceDetail (userInvoiceDetail) * valueVATUserInvoiceDetail (userInvoiceDetail)/100, currencyUserInvoiceDetail(userInvoiceDetail))
        ELSE roundPriceCurrency((sumUserInvoiceDetail(userInvoiceDetail) * valueVATUserInvoiceDetail (userInvoiceDetail) / 100), currencyUserInvoiceDetail(userInvoiceDetail))
    PERSISTENT;

VATSumUserInvoiceDetail (userInvoiceDetail) <- derivedVATSumUserInvoiceDetail (userInvoiceDetail)
    WHEN CHANGED(invoicePriceUserInvoiceDetail(userInvoiceDetail)) OR CHANGED(quantityUserInvoiceDetail(userInvoiceDetail)) OR CHANGED(VATUserInvoiceDetail(userInvoiceDetail))
      OR CHANGED(sumUserInvoiceDetail(userInvoiceDetail)) OR CHANGED(currencyUserInvoiceDetail(userInvoiceDetail));

derivedInvoiceSumUserInvoiceDetail (userInvoiceDetail) =
    IF rangeTypeRange(VATUserInvoiceDetail(userInvoiceDetail)) == RangeType.units
        THEN invoicePriceUserInvoiceDetail (userInvoiceDetail) * quantityUserInvoiceDetail (userInvoiceDetail)
        ELSE sumUserInvoiceDetail (userInvoiceDetail) (+) VATSumUserInvoiceDetail (userInvoiceDetail)
    PERSISTENT;

invoiceSumUserInvoiceDetail (userInvoiceDetail) <- derivedInvoiceSumUserInvoiceDetail (userInvoiceDetail)
    WHEN CHANGED(invoicePriceUserInvoiceDetail(userInvoiceDetail)) OR CHANGED(quantityUserInvoiceDetail(userInvoiceDetail))
    OR CHANGED(sumUserInvoiceDetail(userInvoiceDetail)) OR CHANGED(VATSumUserInvoiceDetail(userInvoiceDetail));

derivedPriceUserInvoiceDetail (userInvoiceDetail) =
    IF rangeTypeRange(VATUserInvoiceDetail(userInvoiceDetail)) == RangeType.units
        THEN invoicePriceUserInvoiceDetail(userInvoiceDetail)*(100-valueVATUserInvoiceDetail (userInvoiceDetail))/100
        ELSE invoicePriceUserInvoiceDetail(userInvoiceDetail)*100/(100+valueVATUserInvoiceDetail (userInvoiceDetail))
    PERSISTENT;

priceUserInvoiceDetail (userInvoiceDetail) <- derivedPriceUserInvoiceDetail (userInvoiceDetail)
    WHEN CHANGED(invoicePriceUserInvoiceDetail(userInvoiceDetail)) OR CHANGED(VATUserInvoiceDetail (userInvoiceDetail));

isDepartmentStoreSupplierStockInvoice (invoice) = supplierStockInvoice(invoice) IS DepartmentStore;

EXTEND FORM userInvoice
    PROPERTIES(i) numberVATUserInvoice SHOWIF isDepartmentStoreSupplierStockInvoice(i), valueVATUserInvoice SHOWIF isDepartmentStoreSupplierStockInvoice(i);
;

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserInvoice(userInvoice) AND NOT isCompanyLegalEntity(supplierUserInvoice(userInvoice))
    CHECKED BY supplierUserInvoice MESSAGE 'Для накладной выбрано в качестве поставщика организация, не являющаяся компанией: продажа';
CONSTRAINT customerUserInvoice(userInvoice) AND NOT isCustomerLegalEntity(customerUserInvoice(userInvoice))
    CHECKED BY customerUserInvoice MESSAGE 'Для накладной выбрано в качестве покупателя организация, не являющаяся покупателем: продажа';

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(invoice, i);
Invoice.packQuantityInvoiceDetail(detail) += packQuantityInvoiceDetail(detail);
EXTEND DESIGN userInvoice {
    headerExtraParams {
        NEW headerPack {
            title = 'Упаковка';
            ADD PROPERTY(showPackUserInvoice);
        }
    }
}

@defineOrderInvoicePack(showPack);

@defineDocumentPackSku(userInvoice, sku, supplierStock);
@extendFormDocumentPackSku(userInvoice, userInvoice, i);

overChangeQuantityValueSkuUserInvoiceDetail(detail) += ACTION (detail) {
    IF  packBarcodeSku(skuUserInvoiceDetail(detail)) THEN {
        SET packQuantityUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
    }
}

showPackUserInvoice (invoice) <- showPackOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));


// ---------------- Проставление партий в инвойсе с использование партий заказа -------- //

useExplicitBatchDetailUserInvoiceOrder (userInvoice, order) += userInvoice IS Sale.UserInvoice AND order IS Sale.Order;

toInvoiceBatchOrderDetail (batch, orderDetail) = PARTITION UNGROUP toInvoicedOrderDetail
                                                           LIMIT STRICT currentBalanceBatchStock(batch, supplierStockOrderDetail(orderDetail)) AND skuBatch(batch) == skuOrderDetail(orderDetail)
                                                           BY orderDetail
                                                           ORDER orderBatch(batch);

createExplicitBatchDetailUserInvoiceOrder (userInvoice, order) += ACTION (userInvoice, order) {
    FOR orderOrderDetail(orderDetail) == order AND toInvoiceBatchOrderDetail(batch, orderDetail)
        ADDOBJ d = UserInvoiceDetail DO {
            SET userInvoiceUserInvoiceDetail(d) <- userInvoice;
            SET orderUserInvoiceDetail(d) <- order;
            SET skuUserInvoiceDetail(d) <- skuOrderDetail(orderDetail);
            SET batchUserInvoiceDetail(d) <- batch;
            SET quantityUserInvoiceDetail (d) <- toInvoiceBatchOrderDetail(batch, orderDetail);
       // todo: решить какие цены задавать: из заказа или из партии
            SET barcodePackUserInvoiceDetail(d) <- barcodePackOrderDetail(orderDetail);
            SET amountPackUserInvoiceDetail(d) <- amountPackOrderDetail(orderDetail);
            SET packQuantityUserInvoiceDetail (d) <- toInvoicedOrderDetail(orderDetail)/amountPackOrderDetail(orderDetail);
            SET VATUserInvoiceDetail (d) <- VATOrderDetail(orderDetail);
            SET valueVATUserInvoiceDetail (d) <- valueVATOrderDetail(orderDetail);
            SET priceListTypeInvoiceDetail (d) <- priceListTypeOrderDetail(orderDetail);
            SET priceUserInvoiceDetail (d) <- priceOrderDetail(orderDetail);
            SET invoicePriceUserInvoiceDetail (d) <- invoicePriceOrderDetail(orderDetail);
            SET sumUserInvoiceDetail (d) <- sumOrderDetail(orderDetail);
            SET supplierStockUserInvoiceDetail (d) <- supplierStockOrderDetail(orderDetail);
        }
}

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserInvoice, company, customer, userInvoice);

//------------------------------ Расширение формы -----------------------------//

// Фильтры
inUserInvoiceSku (userInvoice, sku)= inCustomerSku(customerUserInvoice(userInvoice), sku);
EXTEND FORM userInvoice

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' prevCurrentBalanceSkuUserInvoice(s, i) DEFAULT
        FILTER 'В документе ' 'F9' quantityUserInvoiceDetailSkuUserInvoice(s, i)

    FILTERGROUP filter2
        FILTER 'С продажей ' 'F8' inUserInvoiceSku(i, s)
        FILTER 'В ассортименте' 'F7' ledgerPriceSkuUserInvoice(s, i)

;

// Резервы
@extendFormDocumentOrderLedger(userInvoice, userInvoice, supplierStock, i);
@extendFormDocumentOrderLedgerAll(userInvoice, userInvoice, i);

// --------------------------- Проведение по регистру продаж ------------------------------------ //
@implementSaleLedger(Invoice, sku, supplierStock);
quantitySaleLedger (ledger) += quantityInvoiceDetail(ledger);
VATSaleLedger (ledger) += VATInvoiceDetail(ledger);
sumSaleLedger (ledger) += invoiceSumInvoiceDetail(ledger);
customerSaleLedger (ledger) += customerInvoiceDetail(ledger);


NAVIGATOR {
    saleSaleNavigator {
        ADD invoices;
    }
}

