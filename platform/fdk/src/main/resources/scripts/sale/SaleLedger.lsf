MODULE SaleLedger;

REQUIRE System, Stock, Tax, Employee, Sale;

CLASS ABSTRACT saleLedger 'Продажа товара';
TABLE saleLedger(saleLedger);

dateTimeSaleLedger 'Дата/время' (ledger) = ABSTRACT DATETIME (saleLedger) PERSISTENT INDEXED;
dateSaleLedger 'Дата' (ledger) = toDate(dateTimeSaleLedger(ledger)) PERSISTENT INDEXED;

isPostedSaleLedger 'Проведен' (ledger) = ABSTRACT BOOLEAN (saleLedger) PERSISTENT;

skuSaleLedger (ledger) = ABSTRACT sku (saleLedger) PERSISTENT INDEXED;
nameSkuSaleLedger 'SKU' (ledger) = nameSku(skuSaleLedger(ledger));

stockSaleLedger (ledger) = ABSTRACT stock (saleLedger) PERSISTENT INDEXED;
nameStockSaleLedger 'Склад' (ledger) = name(stockSaleLedger(ledger));

descriptionSaleLedger 'Название документа' (ledger) = ABSTRACT STRING[200] (saleLedger) PERSISTENT;

quantitySaleLedger 'Кол-во' (ledger) = ABSTRACT NUMERIC[14,3] (saleLedger) PERSISTENT;

sumSaleLedger 'Сумма продажи' (ledger) = ABSTRACT NUMERIC[16,2] (saleLedger) PERSISTENT;

customerSaleLedger (ledger) = ABSTRACT legalEntity (saleLedger) PERSISTENT INDEXED;
nameCustomerSaleLedger 'Покупатель' (ledger) = name(customerSaleLedger(ledger));

inCustomerSku 'Связь' (legalEntity, sku)= GROUP SUM quantitySaleLedger(ledger) IF isPostedSaleLedger(ledger)
    BY customerSaleLedger(ledger), skuSaleLedger(ledger) PERSISTENT;

sumSoldTypeExchangeSaleLedger 'Сумма продажи валюта' (typeExchange, saleLedger)= roundCurrency((sumSaleLedger (saleLedger)/
    rateTypeExchangeCurrencyDate(typeExchange, currencyStock(stockSaleLedger(saleLedger)), dateSaleLedger(saleLedger))), currencyTypeExchange(typeExchange));


CONSTRAINT quantitySaleLedger(saleLedger) == 0 MESSAGE 'ошибка: Количество продажи не должно быть равно нулю';

averagePriceSaleLedger 'Цена продажи (средняя)' (saleLedger) = sumSaleLedger(saleLedger)/quantitySaleLedger(saleLedger);

VATSaleLedger (ledger) = ABSTRACT range (saleLedger) PERSISTENT;
valueVATSaleLedger 'НДС, %' (ledger) = valueRateRangeDate(VATSaleLedger(ledger), dateSaleLedger(ledger));

sumVATSaleLedger 'Сумма НДС' (ledger) = [X*Y/(100+Y)](
        sumSaleLedger(ledger), valueVATSaleLedger(ledger));

markupSumSaleLedger 'Надбавка' (ledger) = sumSaleLedger(ledger) - sumVATSaleLedger(ledger) - costSumSkuLedger(ledger);

quantitySoldSkuStockDate (sku, stock, date) = GROUP SUM quantitySaleLedger(ledger) IF isPostedSaleLedger(ledger)
    BY skuSaleLedger(ledger), stockSaleLedger(ledger), dateSaleLedger(ledger) PERSISTENT;

sumSoldSkuStockDate (sku, stock, date) = GROUP SUM sumSaleLedger(ledger) IF isPostedSaleLedger(ledger)
    BY skuSaleLedger(ledger), stockSaleLedger(ledger), dateSaleLedger(ledger) PERSISTENT;


quantitySoldSkuStockWeekDateFromTo 'Продано за неделю (кол-во)' (sku, stock, week, dateFrom, dateTo) = GROUP SUM
        quantitySoldSkuStockDate(sku, stock, date) AND date >= (dateFrom AS DATE) AND date <= (dateTo AS DATE)
        BY sku, stock, weekInDate(date), dateFrom, dateTo;

sumSoldSkuStockWeekDateFromTo 'Продано за неделю (сумма)' (sku, stock, week, dateFrom, dateTo) = GROUP SUM
        sumSoldSkuStockDate(sku, stock, date) AND date >= (dateFrom AS DATE) AND date <= (dateTo AS DATE)
        BY sku, stock, weekInDate(date), dateFrom, dateTo;

averagePriceSoldSkuStockWeekDateFromTo 'Средняя цена за неделю' (sku, stock, week, dateFrom, dateTo)=  round2(sumSoldSkuStockWeekDateFromTo(sku, stock, week, dateFrom, dateTo) /
        quantitySoldSkuStockWeekDateFromTo(sku, stock, week, dateFrom, dateTo));

averageSoldSkuStockWeekDateFromTo 'Продано за неделю кол-во/цена' (sku, stock, week, dateFrom, dateTo)= [FORMULA STRING[30] 'CAST($1 AS TEXT) || \'(\' || CAST($2 AS TEXT) || \')\'']
        (quantitySoldSkuStockWeekDateFromTo(sku, stock, week, dateFrom, dateTo), averagePriceSoldSkuStockWeekDateFromTo(sku, stock, week, dateFrom, dateTo)) MINCHARWIDTH 10 PREFCHARWIDTH 15;

quantitySkuSoldWeekDateFromTo 'Продано за неделю (кол-во)' (week, dateFrom, dateTo) = GROUP SUM
        quantitySoldSkuStockWeekDateFromTo(sku, stock, week, dateFrom, dateTo) BY  week, dateFrom, dateTo;

sumSoldWeekDateFromTo 'Продано за неделю (сумма)' (week, dateFrom, dateTo) = GROUP SUM
        sumSoldSkuStockWeekDateFromTo(sku, stock, week, dateFrom, dateTo) BY  week, dateFrom, dateTo;

quantitySoldSkuStockDateFromTo 'Продано за интервал (кол-во)' (sku, stock, dateFrom, dateTo) = GROUP SUM
        quantitySoldSkuStockDate(sku, stock, date) AND date >= (dateFrom AS DATE) AND date <= (dateTo AS DATE)
        BY sku, stock, dateFrom, dateTo;

sumSoldSkuStockDateFromTo 'Продано за интервал (сумма)' (sku, stock, dateFrom, dateTo) = GROUP SUM
        sumSoldSkuStockDate(sku, stock, date) AND date >= (dateFrom AS DATE) AND date <= (dateTo AS DATE)
        BY sku, stock, dateFrom, dateTo;

quantitySoldSkuDateFromTo 'Продано за интервал (кол-во)' (sku, dateFrom, dateTo) = GROUP SUM
        quantitySoldSkuStockDate(sku, stock, date) AND date >= (dateFrom AS DATE) AND date <= (dateTo AS DATE)
        BY sku, dateFrom, dateTo;

sumSoldSkuDateFromTo 'Продано за интервал (сумма)' (sku, dateFrom, dateTo) = GROUP SUM
        sumSoldSkuStockDate(sku, stock, date) AND date >= (dateFrom AS DATE) AND date <= (dateTo AS DATE)
        BY sku, dateFrom, dateTo;

quantityDaysDateToFrom 'Кол-во дней' (dateTo, dateFrom) =  subtractInteger(dateTo, dateFrom) + 1 AND dateTo AS DATE AND dateFrom AS DATE;
   averageSoldInDaySkuStockDateFromTo 'Продаж в день' (sku, stock, dateFrom, dateTo) =  quantitySoldSkuStockDateFromTo(sku, stock, dateFrom, dateTo) / quantityDaysDateToFrom(dateTo, dateFrom);

//---------------------------------Тип обмена---------------------------------------//

sumSoldTypeExchangeSkuStockDate (typeExchange, sku, stock, date)= roundCurrency((sumSoldSkuStockDate (sku, stock, date)/ rateTypeExchangeCurrencyDate(typeExchange, currencyStock(stock), date)), currencyTypeExchange(typeExchange));

sumSoldTypeExchangeSkuStockDateFromTo 'Продано за интервал (сумма-валюта)' (typeExchange, sku, stock, dateFrom, dateTo) = GROUP SUM
        sumSoldTypeExchangeSkuStockDate (typeExchange, sku, stock, date) AND date >= (dateFrom AS DATE) AND date <= (dateTo AS DATE)
        BY typeExchange, sku, stock, dateFrom, dateTo;

sumSoldTypeExchangeSkuDateFromTo 'Продано за интервал (сумма-валюта)' (typeExchange, sku, dateFrom, dateTo) = GROUP SUM
        sumSoldTypeExchangeSkuStockDateFromTo(typeExchange, sku, stock, dateFrom, dateTo) BY typeExchange, sku, dateFrom, dateTo;


skuStockAverageInterval 'Интервал расчета продаж в день' = DATA INTEGER ();

averageSoldSkuStock 'Продаж в день' = DATA NUMERIC[14,3] (sku, stock);

calcQuantitySoldInterval = ACTION (dateFrom, dateTo) {
    LOCAL balance = NUMERIC[14,3] (sku, stock);
    LOCAL days = INTEGER (sku, stock);
    LOCAL dateCur = DATE();

    SET dateCur() <- (dateFrom AS DATE);
    SET balance(sku, stock) <- balanceBSkuStockDate(sku, stock, dateFrom);

    WHILE dateCur() <= (dateTo AS DATE) DO {
        SET days(sku, stock) <- days(sku, stock) (+)
                   (1 IF ((balance(sku, stock) > 0) OR (quantitySkuStockDate(sku, stock, dateCur()) > 0)));
        SET balance(sku, stock) <- balance(sku, stock) (+)
                   signedQuantitySkuStockDate(sku, stock, dateCur());
        SET dateCur() <- sumDate(dateCur(), 1);
    }

    SET averageSoldSkuStock(sku, stock) <- quantitySoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo) / days(sku, stock);
}
calcCurrentQuantitySoldInterval 'Пересчитать однодневные продажи' = ACTION () NEWSESSION AUTOAPPLY {
    EXEC calcQuantitySoldInterval(subtractDate(currentDate(), skuStockAverageInterval()), subtractDate(currentDate(), 1));
}

EXTEND FORM options
    PROPERTIES() skuStockAverageInterval, calcCurrentQuantitySoldInterval
;
EXTEND DESIGN options {
    commons {
        ADD PROPERTY(skuStockAverageInterval);
        ADD PROPERTY(calcCurrentQuantitySoldInterval);
    }
}

//---------------------------------------------- Формы продаж -------------------------------------//
FORM saleLedger 'Продажи по позициям'

    OBJECTS dates = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES valFrom = OBJVALUE(dFrom), valTo = OBJVALUE(dTo)

    OBJECTS te = typeExchange FIXED PANEL
    PROPERTIES nameType = name(te) SELECTOR, nameCurrencyTypeExchange(te) READONLY

    OBJECTS s = saleLedger
    PROPERTIES(s) READONLY dateSaleLedger, dateTimeSaleLedger, nameStockSaleLedger, nameCustomerSaleLedger, nameSkuSaleLedger, descriptionSaleLedger,
                           quantitySaleLedger, costSumSkuLedger, markupSumSaleLedger, sumVATSaleLedger, sumSaleLedger, averagePriceSaleLedger
    PROPERTIES    READONLY sumSoldTypeExchangeSaleLedger (te, s)
    FILTERS isPostedSaleLedger(s)
    FILTERS dateSaleLedger(s) >= dFrom, dateSaleLedger(s) <= dTo
;
@extendFormFilterAccess(saleLedger, s, saleLedger, stock);

DESIGN saleLedger FROM DEFAULT {
    main {
        childConstraints = TO THE BOTTOM;
        ADD dates.box {
            childConstraints = TO THE RIGHT;
            PROPERTY(nameCurrencyTypeExchange(te)) { caption = 'Валюта'; preferredCharWidth = 20;}
            PROPERTY(nameType) { caption = 'Тип обмена'; preferredCharWidth = 20;}
        }
        ADD te.box {
            childConstraints = TO THE RIGHT;
            PROPERTY(nameCurrencyTypeExchange(te)) { caption = 'Валюта'; preferredCharWidth = 20;}
            PROPERTY(nameType) { caption = 'Тип обмена'; preferredCharWidth = 20;}
        }
        ADD s.box{
            childConstraints = TO THE BOTTOM;
        }
    }
    ADD functions.box;
}

FORM saleSkuStock 'Продажи по SKU'

    OBJECTS dates = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES valFrom = OBJVALUE(dFrom), valTo = OBJVALUE(dTo)

    OBJECTS te = typeExchange FIXED PANEL
    PROPERTIES nameType = name(te) SELECTOR, nameCurrencyTypeExchange(te) READONLY

    OBJECTS w = INTEGER
    FILTERS quantitySkuSoldWeekDateFromTo(w, dFrom, dTo)

    TREE stockTree sg = stockGroup PARENT parentStockGroup, ts = stock
    PROPERTIES READONLY sgTreeName = name(sg), tsTreeName = name(ts)
    FILTERS stockGroupStock(ts) == sg

    TREE skuTree sk = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = name(sk)
    ORDER BY skuTreeName

    OBJECTS           sts=(st=stock, s=sku)
    PROPERTIES        READONLY nameSku(s), stockName = name(st)

    FILTERS           isParentSkuGroupSku(sk, s),
                      (st == ts AND sg IS stockGroup) OR (isParentStockGroupStock(sg, st) AND NOT ts)

    ORDER BY          nameSku

    PROPERTIES        balanceBSkuStockDate(s, st, dFrom), quantitySoldSkuStockWeekDateFromTo(s, st, w, dFrom, dTo)  COLUMNS (w) HEADER toString4 (w),
                      quantitySoldSkuStockDateFromTo(s, st, dFrom, dTo),
                      balanceASkuStockDate(s, st, dTo), sumSoldSkuStockDateFromTo (s, st, dFrom, dTo),  sumSoldTypeExchangeSkuStockDateFromTo(te,s, st, dFrom, dTo)

    FILTERGROUP filtersSold
        FILTER 'Показывать проданные за интервал' 'F11' quantitySoldSkuStockDateFromTo(s, st, dFrom, dTo)

    FILTERGROUP filtersSold
        FILTER 'Показывать с остатками' 'F10' balanceASkuStockDate(s, st, dTo)

;
@extendFormFilterStockAccess(stock, st, saleSkuStock);
@extendFormFilterStockGroupAccess(stock, ts, saleSkuStock, accessEmployeeEmployeeDivisionOver);
@extendFormFilterStockGroupAccess(stockGroup, sg, saleSkuStock, accessEmployeeEmployeeDivisionGroup);

DESIGN saleSkuStock FROM DEFAULT {

    main {
        NEW topContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            NEW firstCase {
                type = SPLITV;
                childConstraints = TO THE BOTTOM;

                ADD stockTree.tree.box {title = 'Магазины'; }
                ADD skuTree.tree.box { title = 'Товарные группы'; }
            }

            NEW secondCase {
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;

                ADD dates.box { childConstraints = TO THE RIGHT; }
                ADD te.box {
                    childConstraints = TO THE RIGHT;
                    PROPERTY(nameCurrencyTypeExchange(te)) { caption = 'Валюта'; preferredCharWidth = 20;}
                    PROPERTY(nameType) { caption = 'Тип обмена'; preferredCharWidth = 20;}
                }

                REMOVE w.box;
                ADD sts.box { fillVertical = 2; }

            }
        }
        ADD functions.box;
    }
}

NAVIGATOR {
    saleNavigator {
        NEW saleLedgerNavigator 'Продажи' {
            ADD saleLedger;
            ADD saleSkuStock;
        }
    }
}

//---------------------------------------------- Расширение формы подбор товаров -------------------------------------//
META defineCustomerDialogStockSku (form)

    form###customer = DATA SESSION legalEntity ();
    form###nameCustomer 'Покупатель' () = name(form###customer()) PREFCHARWIDTH 30;
    form###customersFilter (sku) =  (TRUE AND inCustomerSku(form###customer(), sku)) OR (sku IS sku AND NOT form###customer());

    EXTEND FORM form
        PROPERTIES() form###nameCustomer
        FILTERS form###customersFilter(s)
    ;

    EXTEND DESIGN form {
        filterContainer {
            ADD PROPERTY(form###nameCustomer());
        }
    }
END
@defineCustomerDialogStockSku(dialogSku);

//---------------------------------------------- Макросы для имплементаций -------------------------------------//

META implementSaleLedgerCustom(concrete, skuProp, stockProp)
    dateTimeSaleLedger (ledger) += dateTime###concrete##Detail(ledger);
    isPostedSaleLedger (ledger) += isPosted###concrete##Detail(ledger);
    skuSaleLedger (ledger) += skuProp###concrete##Detail(ledger);
    stockSaleLedger (ledger) += stockProp###concrete##Detail(ledger);
    descriptionSaleLedger (ledger) += description###concrete##Detail(ledger);
END
META implementSaleLedger(concrete, skuProp, stockProp)
    EXTEND CLASS concrete##Detail : saleLedger;
    @implementSaleLedgerCustom(concrete, skuProp, stockProp);
END

EXTEND FORM currentBalanceSkuStock PROPERTIES(s, st) averageSoldSkuStock READONLY;