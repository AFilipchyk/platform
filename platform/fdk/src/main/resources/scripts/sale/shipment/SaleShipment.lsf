MODULE SaleShipment;

REQUIRE Shipment, SaleInvoice, SaleOperation;

NAMESPACE Sale;


//----------------------------------------------- Поставка ---------------------------------------------------//

@defineShipment(' (продажа)', supplierStock, showSalePack, 'Отображать упаковку', salePack);
@defineShipmentBatch(supplierStock);

@defineShipmentStockDestination(supplierStock, customerStock);

// Берем учетную цену
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (userInvoice, accountPriceListType, shipment, , sku, supplierStock);
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (userShipment, accountPriceListType, , , sku, supplierStock);

// Проводим по регистру
@implementSkuLedgerOutFIFO(shipmentDetail, sku, supplierStock);
quantityOutFIFOSkuLedger (ledger) += quantityShipmentDetail (ledger);
@implementSkuLedgerOutFIFOBatchBalance(shipmentDetail, supplierStock);
sumOutSkuLedger(ledger) += sumShipmentDetail(ledger);

costShipmentDetailBatch(detail, batch) += costSkuLedgerBatch(detail, batch) IF detail IS shipmentDetail;

@implementStockDocumentLedgerOut(shipment, supplierStock);
sumOutStockDocumentLedger (ledger) += sumShipmentDetailShipment(ledger);
sumItemOutStockDocumentLedger (ledger) += sumItemShipmentDetailShipment(ledger);
sumContainerOutStockDocumentLedger (ledger) += sumContainerShipmentDetailShipment(ledger);

CONSTRAINT supplierUserShipment(userShipment) AND NOT isCompanyLegalEntity(supplierUserShipment(userShipment))
    CHECKED BY supplierUserShipment MESSAGE 'Для поставки выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerUserShipment(userShipment) AND NOT isCustomerLegalEntity(customerUserShipment(userShipment))
    CHECKED BY customerUserShipment MESSAGE 'Для поставки выбрано в качестве покупателя организация, не являющаяся покупателем';

supplierUserShipment(userShipment) <- defaultCompanyEmployee(currentUser()) IF countIsCompanyEntityEmployee (currentUser()) == 1
    WHEN ASSIGNED(userShipment IS userShipment);
customerUserShipment(userShipment) <- defaultCustomerEmployee(currentUser()) IF countIsCustomerEntityEmployee (currentUser()) == 1
    WHEN ASSIGNED(userShipment IS userShipment);

supplierStockUserShipment(userShipment) <- defaultStockEmployeeLegalEntity(currentUser(), supplierUserShipment(userShipment))
    IF countStocksLegalEntityEmployee (currentUser(), supplierUserShipment(userShipment)) == 1
        WHEN CHANGED(supplierUserShipment(userShipment));
customerStockUserShipment(userShipment) <- defaultStockEmployeeLegalEntity(currentUser(), customerUserShipment(userShipment))
    IF countStocksLegalEntityEmployee (currentUser(), customerUserShipment(userShipment)) == 1
        WHEN CHANGED(customerUserShipment(userShipment));

NAVIGATOR {
    saleSaleNavigator {
        ADD shipments;
    }
}

//------------------------------------------------- Операции ------------------------------------------------------//

@defineOperationObject(sale, shipment, s);
@defineSupplierCustomerConstraintOperationObject(sale, shipment);

//------------------------------ Создание аггрегированных объектов через операции ---------------------------------//

createShipmentUserInvoice(invoice) <- createShipmentSaleOperation(saleOperationUserInvoice(invoice))
    WHEN CHANGED(saleOperationUserInvoice(invoice));