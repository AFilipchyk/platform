MODULE SaleShipment;

REQUIRE Shipment, SaleInvoice, SaleOperation, OrderShipment, InvoiceShipment;

NAMESPACE Sale;


//----------------------------------------------- Поставка ---------------------------------------------------//

@defineShipment(' (продажа)', supplierStock);
@defineShipmentBatch(supplierStock);

@defineShipmentStockDestination(supplierStock, customerStock);

@defineOrderShipment(' (продажа)', supplierStock);
@defineInvoiceShipment(' (продажа)', supplierStock);
@defineInvoiceShipmentAction(invoices);

@defineInvoiceShipmentBatch();

//------------------------------------------------- Операции ------------------------------------------------------//

@defineDocumentOperation(shipment, s);
@defineDocumentOperationLegalEntity(userShipment, supplier, 'Поставщик');
@defineDocumentOperationLegalEntity(userShipment, customer, 'Покупатель');
@defineDocumentOperationRole(userShipment);

@defineOperationProperty(createShipment, 'Поставка', createContainer);
@deriveDocumentOperationProperty(UserInvoice, createShipment);

overFillInvoiceUserShipmentInvoice(s, i) += ACTION (s, i) {
    SET operationUserShipment(s) <- operationInvoice(i);
}

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserShipment(userShipment) AND NOT isCompanyLegalEntity(supplierUserShipment(userShipment))
    CHECKED BY supplierUserShipment MESSAGE 'Для поставки выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerUserShipment(userShipment) AND NOT isCustomerLegalEntity(customerUserShipment(userShipment))
    CHECKED BY customerUserShipment MESSAGE 'Для поставки выбрано в качестве покупателя организация, не являющаяся покупателем';

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(shipment, s);
Shipment.packQuantityShipmentDetail(detail) += packQuantityShipmentDetail(detail);
EXTEND DESIGN userShipment {
    headerExtraParams {
        NEW headerPack {
            title = 'Упаковка';
            ADD PROPERTY(showPackUserShipment);
        }
    }
}

@defineOrderShipmentPack();
@defineInvoiceShipmentPack();

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserShipment, company, customer, userShipment);

// ------------------------------- Расчет учетной цены для поставки ------------------------ //

@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (userInvoice, accountPriceListType, shipment, , sku, supplierStock);
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (userShipment, accountPriceListType, , , sku, supplierStock);

// ------------------------------- Проведение по регистру остатков ------------------------ //

@implementSkuLedgerOutFIFO(ShipmentDetail, sku, supplierStock);
quantityOutFIFOSkuLedger (ledger) += quantityShipmentDetail (ledger);
@implementSkuLedgerOutFIFOBatchBalance(shipmentDetail, supplierStock);
sumOutSkuLedger(ledger) += sumShipmentDetail(ledger);

costShipmentDetailBatch(detail, batch) += costSkuLedgerBatch(detail, batch) IF detail IS ShipmentDetail;

// ------------------------------- Проведение по товарному отчету ------------------------ //

@implementStockDocumentLedgerOut(Shipment, supplierStock);
sumOutStockDocumentLedger (ledger) += sumShipmentDetailShipment(ledger);
sumItemOutStockDocumentLedger (ledger) += sumItemShipmentDetailShipment(ledger);
sumContainerOutStockDocumentLedger (ledger) += sumContainerShipmentDetailShipment(ledger);

// ------------------------------- Себестоимость продажи ------------------------ //
costSaleInvoiceDetail (invoiceDetail) = GROUP SUM costSumSkuLedger(shipmentDetail) BY invoiceDetailShipmentDetail(shipmentDetail);
costSumSaleLedger(ledger) += costSaleInvoiceDetail(ledger);

NAVIGATOR {
    saleSaleNavigator {
        ADD shipments;
    }
}