MODULE SaleReturnShipment;

REQUIRE Shipment, SaleReturnInvoice;

PRIORITY Sale, Operation;

NAMESPACE SaleReturn;


//----------------------------------------------- Поставка ---------------------------------------------------//

@defineShipment(' (продажа-возврат)', supplierStock, showSalePack, 'Упаковка', Sale);
@defineShipmentBatch(supplierStock);

@defineShipmentStockDestination(customerStock, supplierStock);

//------------------------------------------------- Операции ------------------------------------------------------//

@defineDocumentOperation(shipment, s);
@defineDocumentOperationLegalEntity(userShipment, supplier, 'Поставщик');
@defineDocumentOperationLegalEntity(userShipment, customer, 'Покупатель');
@defineDocumentOperationRole(userShipment);

createShipmentUserInvoice(invoice) <- createShipmentOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserShipment(userShipment) AND NOT isCompanyLegalEntity(supplierUserShipment(userShipment))
    CHECKED BY supplierUserShipment MESSAGE 'Для поставки выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerUserShipment(userShipment) AND NOT isCustomerLegalEntity(customerUserShipment(userShipment))
    CHECKED BY customerUserShipment MESSAGE 'Для поставки выбрано в качестве покупателя организация, не являющаяся покупателем';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserShipment, company, customer, userShipment);

// ------------------------------- Расчет учетной цены для поставки ------------------------ //

@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (userInvoice, accountPriceListType, shipment, , sku, supplierStock);
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (userShipment, accountPriceListType, , , sku, supplierStock);

// ------------------------------- Проведение по регистру остатков ------------------------ //

@implementSkuLedgerInLIFO(ShipmentDetail, sku, supplierStock);
quantityInLIFOSkuLedger (ledger) += quantityShipmentDetail(ledger);
@implementSkuLedgerInLIFOBatchBalance(shipmentDetail, supplierStock);
sumInSkuLedger(ledger) += sumShipmentDetail(ledger);

// ------------------------------- Проведение по товарному отчету ------------------------ //

@implementStockDocumentLedgerInc(Shipment, supplierStock);
sumIncStockDocumentLedger (ledger) += sumShipmentDetailShipment(ledger);
sumItemIncStockDocumentLedger (ledger) += sumItemShipmentDetailShipment(ledger);
sumContainerIncStockDocumentLedger (ledger) += sumContainerShipmentDetailShipment(ledger);


NAVIGATOR {
    saleReturnNavigator {
        ADD shipments;
    }
}
