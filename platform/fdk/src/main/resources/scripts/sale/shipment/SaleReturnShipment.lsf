MODULE SaleReturnShipment;

REQUIRE Shipment, SaleReturnInvoice;

NAMESPACE SaleReturn;


//----------------------------------------------- Поставка ---------------------------------------------------//

@defineShipment(' (продажа-возврат)', supplierStock, showSalePack, 'Отображать упаковку', salePack);
@defineShipmentBatch(supplierStock);

@defineShipmentStockDestination(customerStock, supplierStock);

// Берем учетную цену
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (userInvoice, accountPriceListType, shipment, , sku, supplierStock);
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (userShipment, accountPriceListType, , , sku, supplierStock);

// Проводим по регистру
@implementSkuLedgerInLIFO(shipmentDetail, sku, supplierStock);
quantityInLIFOSkuLedger (ledger) += quantityShipmentDetail(ledger);
@implementSkuLedgerInLIFOBatchBalance(shipmentDetail, supplierStock);
sumInSkuLedger(ledger) += sumShipmentDetail(ledger);

@implementStockDocumentLedgerInc(shipment, supplierStock);
sumIncStockDocumentLedger (ledger) += sumShipmentDetailShipment(ledger);
sumItemIncStockDocumentLedger (ledger) += sumItemShipmentDetailShipment(ledger);
sumContainerIncStockDocumentLedger (ledger) += sumContainerShipmentDetailShipment(ledger);

CONSTRAINT supplierUserShipment(userShipment) AND NOT isCompanyLegalEntity(supplierUserShipment(userShipment))
    CHECKED BY supplierUserShipment MESSAGE 'Для поставки выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerUserShipment(userShipment) AND NOT isCustomerLegalEntity(customerUserShipment(userShipment))
    CHECKED BY customerUserShipment MESSAGE 'Для поставки выбрано в качестве покупателя организация, не являющаяся покупателем';

NAVIGATOR {
    saleReturnNavigator {
        ADD shipments;
    }
}