MODULE SaleOperation;

REQUIRE Operation, SaleInvoice, SaleOrder, SaleBlanketOrder;

NAMESPACE Sale;

@defineOperationPrefix(sale, isCompanyLegalEntity, isBuyerLegalEntity);

//------------------------------ Множественные заказы ---------------------------------------- //

saleOperationBlanketOrder = DATA saleOperation (blanketOrder);
nameSaleOperationBlanketOrder 'Операция' = name(saleOperationBlanketOrder(blanketOrder));

saleOperationBlanketOrderDetail 'Операция' (blanketOrderDetail) = saleOperationBlanketOrder(blanketOrderBlanketOrderDetail(blanketOrderDetail));

CONSTRAINT saleOperationBlanketOrderDetail(blanketOrderDetail)
           AND NOT isPriceListTypeSaleOperation(priceListTypeBlanketOrderDetail(blanketOrderDetail), saleOperationBlanketOrderDetail(blanketOrderDetail))
//    CHECKED BY priceListTypeBlanketOrderDetail
    MESSAGE 'Вид цены должен совпадать с отмеченными в операции';

CONSTRAINT saleOperationBlanketOrder(blanketOrder)
           AND NOT isSupplierSaleOperation(supplierBlanketOrder(blanketOrder), saleOperationBlanketOrder(blanketOrder))
//    CHECKED BY supplierBlanketOrder
    MESSAGE 'Поставщик должен совпадать с отмеченными в операции';

CONSTRAINT saleOperationBlanketOrder(blanketOrder)
           AND NOT isCustomerSaleOperation(customerBlanketOrder(blanketOrder), saleOperationBlanketOrder(blanketOrder))
//    CHECKED BY customerBlanketOrder
    MESSAGE 'Покупатель должен совпадать с отмеченными в операции';

EXTEND FORM blanketOrder
    PROPERTIES(o) nameSaleOperationBlanketOrder
;

EXTEND DESIGN blanketOrder{
    o.documentPrmGroup{
        ADD PROPERTY(nameSaleOperationBlanketOrder) BEFORE PROPERTY(nameCurrencyBlanketOrder);
    }
}

NAVIGATOR {
    saleMasterData {
        ADD saleOperations;
    }
}
