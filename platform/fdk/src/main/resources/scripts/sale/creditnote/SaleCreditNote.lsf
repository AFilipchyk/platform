MODULE SaleCreditNote;

REQUIRE CreditNote, SaleShipment;

NAMESPACE Sale;


//----------------------------------------------- Акт ---------------------------------------------------//

@defineCreditNote(' (продажа)', supplierStock);
@defineCreditNoteBatch();

CONSTRAINT supplierUserCreditNote(userCreditNote) AND NOT isCompanyLegalEntity(supplierUserCreditNote(userCreditNote))
    CHECKED BY supplierUserCreditNote MESSAGE 'Для акта расхождения выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerUserCreditNote(userCreditNote) AND NOT isCustomerLegalEntity(customerUserCreditNote(userCreditNote))
    CHECKED BY customerUserCreditNote MESSAGE 'Для акта расхождения выбрано в качестве покупателя организация, не являющаяся покупателем';

supplierUserCreditNote(userCreditNote) <- defaultCompanyEmployee(currentUser()) IF countIsCompanyEntityEmployee (currentUser()) == 1
    WHEN ASSIGNED(userCreditNote IS userCreditNote);
customerUserCreditNote(userCreditNote) <- defaultCustomerEmployee(currentUser()) IF countIsCustomerEntityEmployee (currentUser()) == 1
    WHEN ASSIGNED(userCreditNote IS userCreditNote);

supplierStockUserCreditNote(userCreditNote) <- defaultStockEmployeeLegalEntity(currentUser(), supplierUserCreditNote(userCreditNote))
    IF countStocksLegalEntityEmployee (currentUser(), supplierUserCreditNote(userCreditNote)) == 1
        WHEN CHANGED(supplierUserCreditNote(userCreditNote));
customerStockUserCreditNote(userCreditNote) <- defaultStockEmployeeLegalEntity(currentUser(), customerUserCreditNote(userCreditNote))
    IF countStocksLegalEntityEmployee (currentUser(), customerUserCreditNote(userCreditNote)) == 1
        WHEN CHANGED(customerUserCreditNote(userCreditNote));

     
//------------------------------ Создание аггрегированных объектов через операции -----------------------------//

@deriveDocumentHeaderCreate(userInvoice, createCreditNote, sale);

NAVIGATOR {
    saleSaleNavigator {
        ADD creditNotes;
    }
}