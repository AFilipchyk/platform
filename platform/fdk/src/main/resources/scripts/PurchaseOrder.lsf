MODULE PurchaseOrder;

REQUIRE Order;

NAMESPACE Purchase;

//-- Для закупки упаковками
purchasePackBarcodeSku 'Штрих-код для закупки' = DATA barcode (sku);
CONSTRAINT skuBarcode(purchasePackBarcodeSku(item)) != item CHECKED BY purchasePackBarcodeSku MESSAGE 'Выбран неверный sku для штрих-кода';
purchasePackBarcode 'Штрих-код для закупки' (barcode)=  purchasePackBarcodeSku(skuBarcode(barcode)) == barcode;
changePurchasePackBarcodeSku = ACTION (barcode, sku) {
    REQUEST BOOLEAN INPUT;
    IF requestedLogical() THEN {
        SET purchasePackBarcodeSku(sku) <- barcode;
    } ELSE
        SET purchasePackBarcodeSku(sku) <- NULL;
}

EXTEND FORM barcodeDialog
    PROPERTIES (b) READONLY purchasePackBarcode
;
//--

@defineOrder(' (закупка)', customerStock, purchasePack, showPurchasePack, 'Отображать упаковку');

@defineOrderStockDestination(supplierStock, customerStock);

@defineNumeratedObjectDefaultPrefix(userOrder, 'Нумератор для заказов (закупка)', 'ЗК', purchase);

CONSTRAINT supplierUserOrder(userOrder) AND NOT isSupplierLegalEntity(supplierUserOrder(userOrder))
    CHECKED BY supplierUserOrder MESSAGE 'Для заказа выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerUserOrder(userOrder) AND NOT isCompanyLegalEntity(customerUserOrder(userOrder))
    CHECKED BY customerUserOrder MESSAGE 'Для заказа выбрано в качестве покупателя организация, не являющаяся компанией';

@defineDocumentPackageSkuStock(userOrder, sku, customerStock, purchasePack);
@extendFormDocumentPackageSkuStockCustom(userOrder, userOrder, o, customerStock, showPurchasePack);

quantitySoldSkuStockUserOrder 'Закуплено' (sku, stock, userOrder) = quantitySoldSkuStockDateFromTo(sku, stock, fromShipmentDateUserOrder(userOrder), dateUserOrder(userOrder));
recQuantitySkuStockUserOrder  (sku, stock, userOrder) = stockReserveStockSkuDate(stock, sku, dateUserOrder(userOrder))  (+) quantitySoldSkuStockUserOrder(sku, stock, userOrder) (-) (currentBalanceSkuStock(sku, stock) AND userOrder IS userOrder);
recommendedQuantitySkuStockUserOrder 'Рекомендуемое к закупке кол-во' (sku, stock, userOrder) = recQuantitySkuStockUserOrder(sku, stock, userOrder) IF recQuantitySkuStockUserOrder(sku, stock, userOrder) >0;
stockReserveSkuStockUserOrder 'Страховой запас (кол-во)' (sku, stock, userOrder) = stockReserveStockSkuDate(stock, sku, dateUserOrder(userOrder));

fillRecommendedQuantityStockUserOrder 'Заполнить рекомендуемым количеством' = ACTION (stock, userOrder) {
    FOR inSupplierSku(supplierUserOrder(userOrder), sku) DO {
        SET requestedNumeric() <- recommendedQuantitySkuStockUserOrder (sku, stock, userOrder);
        EXEC changeQuantityValueSkuUserOrderStock(sku, userOrder, stock);
    }
} TOOLBAR CONFIRM;


EXTEND FORM userOrder
    PROPERTIES READONLY AFTER currentBalanceSkuStock(s,st) quantitySoldSkuStockUserOrder(s,st,o), stockReserveSkuStockUserOrder(s,st,o)
    PROPERTIES READONLY AFTER quantitySkuUserOrderCustomerStock(s,o,st) recommendedQuantitySkuStockUserOrder(s,st,o)
    PROPERTIES  fillRecommendedQuantityStockUserOrder(st,o) TODRAW s
;

inAssortmentSkuStockUserOrder (sku, stock, userOrder)= companyLedgerPriceListTypeSkuStockDateTime(priceListTypeUserOrderSku(userOrder, sku), sku, stock, dateTimeUserOrder(userOrder)) == supplierUserOrder(userOrder);
inUserOrderSku (userOrder, sku)= inSupplierSku(supplierUserOrder(userOrder), sku);
EXTEND FORM userOrder

   FILTERGROUP filter1
        FILTER 'С поступлением' 'F8' inUserOrderSku(o, s)
        FILTER 'В ассортименте' 'F7' inAssortmentSkuStockUserOrder(s, st, o)
;
