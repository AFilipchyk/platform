MODULE Import;

REQUIRE System,
        Barcode,
        Compliance,
        Country,
        Currency,
        CustomsGroup,
        Employee,
        Integration,
        Item,
        LegalEntity,
        LegalEntityBy,
        Bank,
        Numerator,
        PriceListType,
        PriceListCalc,
        PriceList,
        PurchaseCompliance,
        PurchaseInvoice,
        PurchaseInvoiceCharge,
        PurchaseManufacturingPrice,
        PurchaseShipment,
        PurchaseWriteOff,
        PricingPurchase,
        SaleOrder,
        Stock,
        Store,
        Tax,
        TaxItem,
        Ware,
        Warehouse,
        WareInvoice,
        WareItem,
        WarePurchaseInvoice,
        WriteOffItem,
        PurchaseInvoiceWholesalePrice,
        PurchaseManufacturingPrice;

@defineExternalizable(bank, STRING[100]);
@defineExternalizable(barcode, STRING[100], ext);
@defineExternalizable(brand, STRING[100]);
@defineExternalizable(calcPriceListType, STRING[100]);
@defineExternalizable(dataPriceListType, STRING[100]);
@defineExternalizable(chainStores, STRING[100]);
@defineExternalizable(departmentStore, STRING[100]);
@defineExternalizable(employee, STRING[100]);
@defineExternalizable(item, STRING[100]);
@defineExternalizable(itemGroup, STRING[100]);
@defineExternalizable(legalEntity, STRING[100]);
@defineExternalizable(position, STRING[100]);
@defineExternalizable(store, STRING[100]);
@defineExternalizable(storeType, STRING[100]);
@defineExternalizable(UOM, STRING[100]);
@defineExternalizable(userContractSku, STRING[100]);
@defineExternalizable(userPriceList, STRING[100]);
@defineExternalizable(userInvoiceDetail, STRING[100]);
@defineExternalizable(ware, STRING[100]);
@defineExternalizable(warehouse, STRING[100]);
@defineExternalizable(warehouseGroup, STRING[100]);
@defineExternalizable(writeOffRate, STRING[100]);

showIDs 'Показывать ID объектов' = DATA BOOLEAN ();

numberSeriesToUserInvoice (number, series) = GROUP AGGR userInvoice BY numberObject(userInvoice), seriesObject(userInvoice) WHERE userInvoice IS UserInvoice;

userPriceListDetailIdSkuIdUserPriceList (sku, userPriceList) = GROUP AGGR userPriceListDetail BY idItem(skuUserPriceListDetail(userPriceListDetail)), idUserPriceList(userPriceListUserPriceListDetail(userPriceListDetail)) WHERE userPriceListDetail IS UserPriceListDetail;

storeTypeNameChainStores 'Формат магазина по имени и торговой сети' (name, chainStores) = GROUP AGGR storeType BY nameStoreType(storeType), idStoreType(storeType) WHERE storeType IS StoreType; ////

extIdBatch 'Внешний код' (batch) = ABSTRACT STRING[100] (Batch) PERSISTENT;

extIdBatch (batch) += idUserInvoiceDetail (invoiceDetailShipmentDetail(shipmentDetailShipmentBatch(batch))) IF batch IS ShipmentBatch;

EXTEND FORM options PROPERTIES() showIDs;
EXTEND DESIGN options {
    commons {
        ADD PROPERTY(showIDs);
    }
}

EXTEND FORM banks PROPERTIES (b) READONLY idBank BEFORE deleteb SHOWIF showIDs();
EXTEND FORM brands PROPERTIES (t) READONLY idBrand SHOWIF showIDs();
EXTEND FORM chainStores PROPERTIES (n) READONLY idChainStores SHOWIF showIDs();
EXTEND FORM employees PROPERTIES (e) READONLY idEmployee SHOWIF showIDs();
EXTEND FORM items PROPERTIES (i) READONLY idItem BEFORE deletei SHOWIF showIDs();
EXTEND FORM itemGroups PROPERTIES (g) READONLY idItemGroup BEFORE deleteg SHOWIF showIDs();
EXTEND FORM legalEntities PROPERTIES (l) READONLY idLegalEntity BEFORE deletel SHOWIF showIDs();
EXTEND FORM stores PROPERTIES (d) READONLY idDepartmentStore SHOWIF showIDs();
EXTEND FORM stores PROPERTIES (s) READONLY idStore SHOWIF showIDs();
EXTEND FORM UOMs PROPERTIES (u) READONLY idUOM SHOWIF showIDs();
EXTEND FORM positions PROPERTIES (of) READONLY idPosition SHOWIF showIDs();
EXTEND FORM priceLists PROPERTIES (p) READONLY idUserPriceList SHOWIF showIDs();
EXTEND FORM wares PROPERTIES (w) READONLY idWare BEFORE deletew SHOWIF showIDs();
EXTEND FORM warehouses PROPERTIES (w) READONLY idWarehouse BEFORE deletew SHOWIF showIDs();