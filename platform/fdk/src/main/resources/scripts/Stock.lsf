MODULE Stock;

REQUIRE System, Utils, Hierarchy, LegalEntity, I18n;

// ----------------------------------- Склады ------------------------------------------ //

CLASS ABSTRACT stockGroup 'Группа складов' : named;
@defineHierarchyAbstract(stockGroup);

CLASS ABSTRACT stock 'Склад' : named;
TABLE stock(stock);

stockGroupStock (stock) = ABSTRACT stockGroup (stock) PERSISTENT;

companyStock (stock) = ABSTRACT company (stock) PERSISTENT;
nameCompanyStock 'Компания' (stock) = name(companyStock(stock));
countryStock (stock) = countryLegalEntity(companyStock(stock)) PERSISTENT;
currencyStock (stock) = currencyLegalEntity(companyStock(stock)) PERSISTENT;
languageStock (stock) = languageLegalEntity(companyStock(stock)) PERSISTENT;

addressStock 'Адрес' (stock) = ABSTRACT STRING[100] (stock);

TABLE stockGroupStock (stockGroup, stock);
isParentStockGroupStock (stockGroup, stock) = isParentStockGroupStockGroup(stockGroupStock(stock), stockGroup) PERSISTENT;

// ----------------------------------- Единицы измерения ------------------------------------------ //

CLASS UOM 'Единица измерения' : doubleNamed, externalObject;
TABLE UOM (UOM);

baseUOM = DATA UOM(UOM) IN idGroup;
shortNameBaseUOM 'Базовая ед.изм.' (UOM) = shortName(baseUOM(UOM)) IN baseGroup;
factorUOM 'Коэффициент пересчета в баз.ед.' = DATA NUMERIC[14,3] (UOM) IN baseGroup;

FORM UOM 'Единица измерения'
    OBJECTS u=UOM FIXED PANEL
    PROPERTIES(u) name, shortName, shortNameBaseUOM, factorUOM
    EDIT UOM OBJECT u
;

FORM UOMs 'Единицы измерений'
    OBJECTS u=UOM
    PROPERTIES(u) READONLY name, shortName, shortNameBaseUOM, factorUOM
    PROPERTIES(u) ADDFORM, EDITFORM, delete
;

// ----------------------------------- Sku Group ------------------------------------------ //

CLASS ABSTRACT skuGroup 'Группа SKU' : named;
@defineHierarchyAbstract(skuGroup);

TABLE skuGroupLanguage(skuGroup, language);
nameSkuGroupLanguage 'Наименование (иностр.)' = ABSTRACT STRING[110] (skuGroup, language) PERSISTENT MINCHARWIDTH 40 PREFCHARWIDTH 80 INDEXED AGGPROP;

nameSkuGroupStock 'Наименование (иностр.)' (skuGroup, stock) = IF languageStock(stock) THEN nameSkuGroupLanguage(skuGroup, languageStock(stock)) ELSE name(skuGroup);

// ----------------------------------- Sku ------------------------------------------ //

CLASS ABSTRACT sku 'SKU';
TABLE sku(sku);

skuGroupSku (sku) = ABSTRACT skuGroup (sku);
nameSku 'Наименование' (sku) = ABSTRACT STRING[200] (sku) PERSISTENT MINCHARWIDTH 40 PREFCHARWIDTH 80 INDEXED AGGPROP IN recognizeGroup;

TABLE skuLanguage(sku, language);
nameSkuLanguage 'Наименование (иностр.)' = ABSTRACT STRING[200] (sku, language) PERSISTENT MINCHARWIDTH 40 PREFCHARWIDTH 80 INDEXED AGGPROP;

nameSkuStock 'Наименование (иностр.)' (sku, stock) = IF languageStock(stock) THEN nameSkuLanguage(sku, languageStock(stock)) ELSE nameSku(sku);

UOMSku (sku) = ABSTRACT UOM (sku);
shortNameUOMSku 'Ед. изм.' (sku) = shortName(UOMSku(sku)) IN recognizeGroup;

TABLE skuGroupSku(skuGroup, sku);
isParentSkuGroupSku (skuGroup, sku) = isParentSkuGroupSkuGroup(skuGroupSku(sku), skuGroup) PERSISTENT;

isContainerSku 'Тара' (sku) = ABSTRACT BOOLEAN (sku);
quantityPackSku 'Количество в грузовом месте' = ABSTRACT NUMERIC[9,3] (sku);
netWeightSku 'Вес нетто' = ABSTRACT NUMERIC[9,3] (sku);

// ----------------------------------- Ledger ------------------------------------------ //

CLASS ABSTRACT skuLedger 'Изменение остатка по товару';
TABLE skuLedger (skuLedger);

CLASS ABSTRACT inSkuLedger 'Приход' : skuLedger;
CLASS ABSTRACT outSkuLedger 'Расход' : skuLedger;

CLASS ABSTRACT batch 'Партия' : inSkuLedger;

CLASS ABSTRACT dataSkuLedger 'Изменение остатка с первичной себестоимостью' : skuLedger;

CLASS ABSTRACT inLIFOSkuLedger 'Приход по LIFO' : inSkuLedger, dataSkuLedger;
CLASS ABSTRACT outFIFOSkuLedger 'Расход по FIFO' : outSkuLedger, dataSkuLedger;

// --------------------------------- Партии ------------------------------------------------ //

TABLE batch(batch);
TABLE skuLedgerBatch (skuLedger, batch);
TABLE batchStock(batch, stock);

dateTimeBatch 'Дата/время' (batch) = ABSTRACT DATETIME (batch) PERSISTENT INDEXED;
dateBatch 'Дата' (batch) = dateInTime(dateTimeBatch(batch));

isPostedBatch 'Проведен' (batch) = ABSTRACT BOOLEAN (batch) PERSISTENT;

skuBatch (batch) = ABSTRACT sku (batch) PERSISTENT INDEXED;
nameSkuBatch 'Наименование' (batch) = nameSku(skuBatch(batch)) IN recognizeGroup;

stockBatch (batch) = ABSTRACT stock (batch) PERSISTENT INDEXED ;
nameStockBatch 'Склад' (batch) = name(stockBatch(batch)) IN recognizeGroup;

costBatch 'Себестоимость' (batch) = ABSTRACT NUMERIC[14,2] (batch) PERSISTENT;
descriptionBatch 'Описание' (batch) = ABSTRACT STRING[200] (batch) PERSISTENT IN recognizeGroup MINCHARWIDTH 30 PREFCHARWIDTH 60;

expiryDateBatch 'Годен до' (batch) = ABSTRACT DATE (batch) PERSISTENT INDEXED;
expiresBatchDateTime(batch, dateTime, period) = expiryDateBatch(batch) < sumDate(dateInTime(dateTime), period);
expiresBatchDate(batch, date, period) = expiryDateBatch(batch) < sumDate(date, period);

orderBatch (batch) = LIST (dateTimeBatch(batch), batch) PERSISTENT;

isSkuBatch (batch, sku) = skuBatch(batch) == sku;

isParentSkuGroupBatch (skuGroup, batch) = isParentSkuGroupSku(skuGroup, skuBatch(batch));

isContainerBatch 'Тара' (batch) = isContainerSku(skuBatch(batch));

//---------------------------- Количественные регистры (конкретная реализация) ----------------------------------------//

dateTimeDataSkuLedger 'Дата/время' = ABSTRACT DATETIME (dataSkuLedger) PERSISTENT INDEXED;
dateDataSkuLedger 'Дата' (ledger) = dateInTime(dateTimeDataSkuLedger(ledger)) PERSISTENT;

isPostedDataSkuLedger 'Проведен' = ABSTRACT BOOLEAN (dataSkuLedger) PERSISTENT;

skuDataSkuLedger = ABSTRACT sku (dataSkuLedger) PERSISTENT INDEXED;

stockDataSkuLedger = ABSTRACT stock(dataSkuLedger) PERSISTENT INDEXED;

descriptionDataSkuLedger 'Название документа' = ABSTRACT STRING[200] (skuLedger) PERSISTENT;

changedDataSkuLedger = ABSTRACT BOOLEAN (dataSkuLedger);

// -------------------------------- Для всего ledger'а -------------------- //

dateTimeSkuLedger 'Дата/время' (ledger) = UNION EXCLUSIVE dateTimeDataSkuLedger (ledger), dateTimeBatch (ledger) PERSISTENT INDEXED;
dateSkuLedger 'Дата' (ledger) = dateInTime(dateTimeSkuLedger(ledger)) PERSISTENT INDEXED;

isPostedSkuLedger 'Проведен' (ledger) = UNION EXCLUSIVE isPostedDataSkuLedger (ledger), isPostedBatch (ledger) PERSISTENT;

skuSkuLedger (ledger) = UNION EXCLUSIVE skuDataSkuLedger (ledger), skuBatch (ledger) PERSISTENT INDEXED;
nameSkuSkuLedger 'SKU' (ledger) = nameSku(skuSkuLedger(ledger));

stockSkuLedger (ledger) = UNION EXCLUSIVE stockDataSkuLedger (ledger), stockBatch (ledger) PERSISTENT INDEXED;
nameStockSkuLedger 'Склад' (ledger) = name(stockSkuLedger(ledger));

descriptionSkuLedger 'Описание' (ledger) = UNION EXCLUSIVE descriptionDataSkuLedger (ledger), descriptionBatch (ledger) PERSISTENT;

// -------------------------------- Количества ---------------------------- //

quantityBatch 'Кол-во в партии' = ABSTRACT NUMERIC[14,3] (batch) PERSISTENT;

quantityInLIFOSkuLedger 'Кол-во' (ledger) = ABSTRACT NUMERIC[14,3] (inLIFOSkuLedger) PERSISTENT;

quantityInSkuLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityBatch(ledger),
                                                        quantityInLIFOSkuLedger(ledger) PERSISTENT;

quantityOutFIFOSkuLedger 'Кол-во' = ABSTRACT NUMERIC[14,3] (outFIFOSkuLedger) PERSISTENT;

quantityOutSkuLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityOutFIFOSkuLedger(ledger) PERSISTENT;

quantityDataSkuLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityInLIFOSkuLedger(ledger),
                                                          quantityOutFIFOSkuLedger(ledger) PERSISTENT;

quantitySkuLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityInSkuLedger(ledger),
                                                      quantityOutSkuLedger(ledger) PERSISTENT;

signedQuantitySkuLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityInSkuLedger(ledger),
                                                            -quantityOutSkuLedger(ledger) PERSISTENT;

// -------------------------------------------- Расчет себестоимости -------------------------------------- //

orderDataSkuLedger (ledger) = LIST(dateTimeDataSkuLedger(ledger), ledger);

// Формулы для расчета
quantityBatchBatch 'Кол-во' (ledger, batch) = quantityBatch(ledger) AND batch == ledger;

limitInLIFOSkuLedgerBatch = ABSTRACT NUMERIC[14,3] (inLIFOSkuLedger, batch);
orderInLIFOSkuLedgerBatch = ABSTRACT LONG (inLIFOSkuLedger, batch);

quantityInLIFOSkuLedgerBatch (ledger, batch) =
        PARTITION UNGROUP quantityInLIFOSkuLedger
                  LIMIT STRICT limitInLIFOSkuLedgerBatch(ledger, batch) AND skuBatch(batch) == skuDataSkuLedger(ledger)
                  BY ledger
                  ORDER DESC orderInLIFOSkuLedgerBatch(ledger, batch), orderBatch(batch);

limitOutFIFOSkuLedgerBatch = ABSTRACT NUMERIC[14,3] (outFIFOSkuLedger, batch);
orderOutFIFOSkuLedgerBatch = ABSTRACT LONG (outFIFOSkuLedger, batch);

quantityOutFIFOSkuLedgerBatch (ledger, batch) =
        PARTITION UNGROUP quantityOutFIFOSkuLedger
                  LIMIT STRICT limitOutFIFOSkuLedgerBatch(ledger, batch) AND skuBatch(batch) == skuDataSkuLedger(ledger)
                  BY ledger
                  ORDER orderOutFIFOSkuLedgerBatch(ledger, batch), orderBatch(batch);

quantityDataSkuLedgerBatch (ledger, batch) = UNION EXCLUSIVE quantityInLIFOSkuLedgerBatch(ledger, batch),
                                                             quantityOutFIFOSkuLedgerBatch(ledger, batch);

// Свойства для расчета себестоимости

costDataSkuLedgerBatch 'Расписано из партии (перв.)' (ledger, batch) = DATA NUMERIC[14,3] (skuLedger, batch);

costSkuLedgerBatch 'Расписано из партии' (ledger, batch) = UNION EXCLUSIVE quantityBatchBatch(ledger, batch), costDataSkuLedgerBatch(ledger, batch) PERSISTENT;

signedCostSkuLedgerBatch (ledger, batch) = IF ledger IS outSkuLedger
                                              THEN -costSkuLedgerBatch(ledger, batch)
                                              ELSE costSkuLedgerBatch(ledger, batch);

// Расчет себестоимости по Action
costedDataSkuLedger 'Расписано' (ledger) = GROUP SUM costDataSkuLedgerBatch (ledger, batch) BY ledger PERSISTENT;
costedSkuLedger 'Расписано' (ledger) = GROUP SUM costSkuLedgerBatch (ledger, batch) BY ledger PERSISTENT;

needToCostDataSkuLedger 'Требуется расчет себестоимости' (ledger) = quantitySkuLedger(ledger) > 0 AND isPostedDataSkuLedger(ledger)
                                                                        AND NOT quantitySkuLedger(ledger) == costedDataSkuLedger(ledger);

resetCostDataSkuLedger 'Перерассчитать себестоимость' = ACTION (ledger) { //NEWSESSION AUTOAPPLY {
    SET costDataSkuLedgerBatch(ledger, batch) <- NULL;
    SET costDataSkuLedgerBatch(ledger, batch) <- quantityDataSkuLedgerBatch(ledger, batch);
}

iterate(i, from, to) = RECURSION i==from AND from IS INTEGER AND to IS INTEGER STEP i==$i+1 AND i<=to CYCLES IMPOSSIBLE;

// мгновенный расчет себестоимости
//WHEN ASSIGNED(isPostedDataSkuLedger(ledger)) DO EXEC resetCostDataSkuLedger (ledger) ORDER orderDataSkuLedger(ledger);
changedCostDataSkuLedger 'Перерасчитывалась себестоимость' = SESSION DATA BOOLEAN (dataSkuLedger);

ON APPLY {
    LOCAL changedLedger = BOOLEAN (dataSkuLedger);
    SET changedLedger(ledger) <- ASSIGNED(isPostedDataSkuLedger(ledger)) OR ((
                                  CHANGED(quantityDataSkuLedger(ledger))
                                  OR CHANGED(skuDataSkuLedger(ledger))
                                  OR CHANGED(stockDataSkuLedger(ledger))
                                  OR CHANGED(changedDataSkuLedger(ledger)))
                                 AND isPostedDataSkuLedger(ledger));

    IF [GROUP MAX changedLedger(ledger)]() THEN
        NEWSESSION SINGLE {
            SET costDataSkuLedgerBatch(ledger, batch) <- NULL WHERE changedLedger(ledger);

            LOCAL orderedLedger = INTEGER (dataSkuLedger);
            SET orderedLedger(ledger) <- PARTITION SUM 1 IF changedLedger(ledger) BY skuDataSkuLedger(ledger) ORDER orderDataSkuLedger(ledger);

            FOR iterate(i, 1, [GROUP MAX orderedLedger(ledger)]()) DO {
                SET changedCostDataSkuLedger(ledger) <- TRUE WHERE orderedLedger(ledger) == i;
                SET costDataSkuLedgerBatch(ledger, batch) <- quantityDataSkuLedgerBatch(ledger, batch) WHERE orderedLedger(ledger) == i;
            }
        }
}

setDataSkuLedgerBatchCost 'Дорассчитать себестоимость' = ACTION () NEWSESSION {

    SET costDataSkuLedgerBatch(ledger, batch) <- NULL WHERE needToCostDataSkuLedger(ledger);
    EXEC apply();

    FOR needToCostDataSkuLedger(ledger) ORDER orderDataSkuLedger(ledger) DO {
        SET costDataSkuLedgerBatch(ledger, batch) <- quantityDataSkuLedgerBatch(ledger, batch);
        EXEC apply();
    }
} CONFIRM;

resetDataSkuLedgerBatchCost 'Перерассчитать себестоимость' = ACTION () NEWSESSION {
    FORM dialogDate MODAL;
    IF formResult() == formResult.ok THEN {

        FOR d == chosenDate('d') DO {
            SET costDataSkuLedgerBatch(ledger, batch) AND dateDataSkuLedger(ledger) >= (d AS DATE) <- NULL;
            EXEC apply();

            FOR dateSkuLedger(ledger) >= (d AS DATE) AND isPostedDataSkuLedger(ledger) ORDER orderDataSkuLedger(ledger) DO {
                SET costDataSkuLedgerBatch(ledger, batch) <- quantityDataSkuLedgerBatch(ledger, batch);
                EXEC apply();
            }
        }
    }
} CONFIRM;

clearDataSkuLedgerBatchCost 'Сбросить всю себестоимость' = ACTION() NEWSESSION AUTOAPPLY {
    SET costDataSkuLedgerBatch(ledger, batch) <- NULL;
} CONFIRM;

// Суммы

costSumSkuLedgerBatch 'Сумма поставщика без НДС' (ledger, batch) = costSkuLedgerBatch(ledger, batch) * costBatch(batch);
costSumSkuLedger 'Сумма поставщика без НДС' = GROUP SUM costSumSkuLedgerBatch(ledger, batch) BY ledger;

// ---------------------------- Учетные цены и суммы ------------------------------- //

// сумма операции
sumInSkuLedger 'Сумма' (ledger) = ABSTRACT NUMERIC[16,2] (inSkuLedger) PERSISTENT;
sumOutSkuLedger 'Сумма' (ledger) = ABSTRACT NUMERIC[16,2] (outSkuLedger) PERSISTENT;

signedSumSkuLedger 'Сумма' (ledger) = UNION EXCLUSIVE sumInSkuLedger(ledger),
                                                      -sumOutSkuLedger(ledger) PERSISTENT;

// управленческие цены
priceSkuStockDateTime 'Цена' = ABSTRACT NUMERIC[14,2] (sku, stock, DATETIME);
priceBatchStockDateTime 'Цена' = ABSTRACT NUMERIC[14,2] (batch, stock, DATETIME);

// ---------------------------- Остаток по товару -------------------------------- //

TABLE skuStock(sku, stock);
TABLE skuStockDate(sku, stock, DATE);

META defineSkuLedgerBalanceProperties(postfix, caption)
    skip##postfix##SkuLedger 'Не проводить по учету'###caption = ABSTRACT BOOLEAN (skuLedger) PERSISTENT;

    currentBalance##postfix##SkuStock 'Текущий остаток'###caption (sku, stock) = GROUP SUM signedQuantitySkuLedger (ledger) AND isPostedSkuLedger(ledger) AND NOT skip##postfix##SkuLedger(ledger)
                                                              BY skuSkuLedger(ledger), stockSkuLedger(ledger) PERSISTENT;
    countLedger##postfix##SkuStock 'Кол-во движений'###caption (sku, stock) = GROUP SUM 1 AND signedQuantitySkuLedger (ledger) AND isPostedSkuLedger(ledger) AND NOT skip##postfix##SkuLedger(ledger)
                                                              BY skuSkuLedger(ledger), stockSkuLedger(ledger) PERSISTENT;

    quantityIn##postfix##SkuStockDate (sku, stock, date) = GROUP SUM quantityInSkuLedger(ledger) AND isPostedSkuLedger(ledger) AND NOT skip##postfix##SkuLedger(ledger)
                                                      BY skuSkuLedger(ledger), stockSkuLedger(ledger), dateSkuLedger(ledger) PERSISTENT;

    quantityOut##postfix##SkuStockDate (sku, stock, date) = GROUP SUM quantityOutSkuLedger(ledger) AND isPostedSkuLedger(ledger) AND NOT skip##postfix##SkuLedger(ledger)
                                                       BY skuSkuLedger(ledger), stockSkuLedger(ledger), dateSkuLedger(ledger) PERSISTENT;

    quantity##postfix##SkuStockDate (sku, stock, date) = quantityIn##postfix##SkuStockDate(sku, stock, date)
                                                         (+)
                                                         quantityOut##postfix##SkuStockDate(sku, stock, date) PERSISTENT;

    signedQuantity##postfix##SkuStockDate (sku, stock, date) = quantityIn##postfix##SkuStockDate(sku, stock, date)
                                                               (-)
                                                               quantityOut##postfix##SkuStockDate(sku, stock, date) PERSISTENT;

    // без учета текущей даты/времени
    balanceB##postfix##SkuStockDate 'Остаток на начало дня'###caption (sku, stock, date) = (currentBalance##postfix##SkuStock(sku, stock) AND date AS DATE)
                                                                      (-) [GROUP SUM signedQuantity##postfix##SkuStockDate (sku, stock, dateIn) AND dateIn >= (date AS DATE)
                                                                                 BY sku, stock, date](sku, stock, date);

    // с учетом текущей даты/времени
    balanceA##postfix##SkuStockDate 'Остаток на конец дня'###caption (sku, stock, date) = (currentBalance##postfix##SkuStock(sku, stock) AND date AS DATE)
                                                                     (-) [GROUP SUM signedQuantity##postfix##SkuStockDate (sku, stock, dateIn) AND dateIn > (date AS DATE)
                                                                                BY sku, stock, date](sku, stock, date);

    // без учета текущей даты/времени
    balanceB##postfix##SkuStockDateTime 'Остаток (до)'###caption (sku, stock, dateTime) = (currentBalance##postfix##SkuStock(sku, stock) AND dateTime AS DATETIME)
                                                                              (-) [GROUP SUM signedQuantitySkuLedger (ledger) AND dateTimeSkuLedger(ledger) >= (dateTime AS DATETIME) AND isPostedSkuLedger(ledger) AND NOT skip##postfix##SkuLedger(ledger)
                                                                                         BY skuSkuLedger(ledger), stockSkuLedger(ledger), dateTime](sku, stock, dateTime);

    // с учетом текущей даты/времени
    balanceA##postfix##SkuStockDateTime 'Остаток (после)'###caption (sku, stock, dateTime) = (currentBalance##postfix##SkuStock(sku, stock) AND dateTime AS DATETIME)
                                                                             (-) [GROUP SUM signedQuantitySkuLedger (ledger) AND dateTimeSkuLedger(ledger) > (dateTime AS DATETIME) AND isPostedSkuLedger(ledger) AND NOT skip##postfix##SkuLedger(ledger)
                                                                                        BY skuSkuLedger(ledger), stockSkuLedger(ledger), dateTime](sku, stock, dateTime);

    currentBalance##postfix##Sku 'Остаток (всего)'###caption (sku) = GROUP SUM currentBalance##postfix##SkuStock(sku, stock) BY sku PERSISTENT;

    currentBalance##postfix##BatchStock 'Текущий остаток'###caption (batch, stock) = GROUP SUM signedCostSkuLedgerBatch (ledger, batch) AND isPostedSkuLedger(ledger) AND NOT skip##postfix##SkuLedger(ledger)
                                                                                           BY batch, stockSkuLedger(ledger) PERSISTENT;

    currentBalance##postfix##Batch 'Остаток (всего)'###caption (batch) = GROUP SUM currentBalance##postfix##BatchStock(batch, stock) BY batch PERSISTENT;

    // ---------------------------- Суммы по товару -------------------------------- //

    currentSum##postfix##SkuStock 'Сумма остатка'###caption (sku, stock) = GROUP SUM signedSumSkuLedger (ledger) AND isPostedSkuLedger(ledger) AND NOT skip##postfix##SkuLedger(ledger)
                                                            BY skuSkuLedger(ledger), stockSkuLedger(ledger) PERSISTENT;

    averagePrice##postfix##SkuStock 'Цена (средневзв.)'###caption (sku, stock) = currentSum##postfix##SkuStock(sku, stock) / currentBalance##postfix##SkuStock(sku, stock); // IF NOT currentBalance##postfix##SkuStock(sku, stock) == 0; (возможно не нужно, так как 0 не может быть в GROUP SUM )

END

@defineSkuLedgerBalanceProperties(,);

expiryDateSkuStock 'Годен до (max.)' (sku, stock) = GROUP MAX expiryDateBatch(batch) IF currentBalanceBatchStock(batch, stock)
                                                          BY skuBatch(batch), stock PERSISTENT;

// -------------------------------------- Последнее движение ---------------------------------- //

dateLastMovedSkuStock 'Дата последнего движения товара' (sku, stock) =
    GROUP MAX dateTimeSkuLedger(ledger)
    BY skuSkuLedger(ledger), stockSkuLedger(ledger) PERSISTENT;

movedSkuStockDateTimePeriod (item, departmentStore, dateTime, period) =
    dateLastMovedSkuStock(item, departmentStore) >= subtractDate(dateInTime(dateTime), period AS INTEGER);

balanceSkuStockDateTimePeriod (item, departmentStore, dateTime, period) =
    movedSkuStockDateTimePeriod (item, departmentStore, dateTime, period) OR (period IS INTEGER) IF balanceASkuStockDateTime(item, departmentStore, dateTime);

movedSkuStockDatePeriod (item, departmentStore, date, period) =
    dateLastMovedSkuStock(item, departmentStore) >= subtractDate(date, period AS INTEGER);

balanceSkuStockDatePeriod (item, departmentStore, date, period) =
    movedSkuStockDatePeriod (item, departmentStore, date, period) OR (period IS INTEGER) IF balanceASkuStockDate(item, departmentStore, date);

//----------------------------------------- По партиям ---------------------------------------------//
// без учета текущей даты/времени
balanceBBatchStockDate 'Остаток на начало дня' (batch, stock, date) = (currentBalanceBatchStock(batch, stock) AND date AS DATE)
    (-) [GROUP SUM signedCostSkuLedgerBatch (ledger, batch) AND isPostedSkuLedger(ledger) AND dateSkuLedger(ledger) >= (date AS DATE)
    BY batch, stockSkuLedger(ledger), date](batch, stock, date);

// с учетом текущей даты/времени
balanceABatchStockDate 'Остаток на конец дня' (batch, stock, date) = (currentBalanceBatchStock(batch, stock) AND date AS DATE)
    (-) [GROUP SUM signedCostSkuLedgerBatch (ledger, batch) AND isPostedSkuLedger(ledger) AND dateSkuLedger(ledger) > (date AS DATE)
    BY batch, stockSkuLedger(ledger), date](batch, stock, date);

// без учета текущей даты/времени
 balanceBBatchStockDateTime 'Остаток на начало дня' (batch, stock, dateTime) = (currentBalanceBatchStock(batch, stock) AND dateTime AS DATETIME)
    (-) [GROUP SUM signedCostSkuLedgerBatch (ledger, batch) AND isPostedSkuLedger(ledger) AND dateTimeSkuLedger(ledger) >= (dateTime AS DATETIME)
    BY batch, stockSkuLedger(ledger), dateTime](batch, stock, dateTime);

// с учетом текущей даты/времени
 balanceABatchStockDateTime 'Остаток на конец дня' (batch, stock, dateTime) = (currentBalanceBatchStock(batch, stock) AND dateTime AS DATETIME)
    (-) [GROUP SUM signedCostSkuLedgerBatch (ledger, batch) AND isPostedSkuLedger(ledger) AND dateTimeSkuLedger(ledger) > (dateTime AS DATETIME)
    BY batch, stockSkuLedger(ledger), dateTime](batch, stock, dateTime);

// --------------------------------------- Суммы ----------------------------------------------------- //

costSumBatchStockDateFrom 'Сумма на начало' (batch, stock, dateFrom) = costBatch(batch) * balanceBBatchStockDate(batch, stock, dateFrom);

costSumBatchStockDateTo 'Сумма на конец' (batch, stock, dateTo) = costBatch(batch) * balanceABatchStockDate(batch, stock, dateTo);

//---------------------------------------------- За период ------------------------------------------//

costInBalanceBatchStockDateFromTo 'Приход' (batch, stock, dateFrom, dateTo) = GROUP SUM costSkuLedgerBatch (ledger, batch)
    IF ledger IS inSkuLedger AND isPostedSkuLedger(ledger)
    AND dateSkuLedger(ledger) >= (dateFrom AS DATE)  AND dateSkuLedger(ledger)<= (dateTo AS DATE)
    BY batch, stockSkuLedger(ledger), dateFrom, dateTo;

costSumInBalanceBatchStockDateFromTo 'Сумма прихода' (batch, stock, dateFrom, dateTo) =
    costBatch(batch) * costInBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo);

costOutBalanceBatchStockDateFromTo 'Расход' (batch, stock, dateFrom, dateTo) = GROUP SUM costSkuLedgerBatch (ledger, batch)
    IF ledger IS outSkuLedger AND isPostedSkuLedger(ledger)
    AND dateSkuLedger(ledger) >= (dateFrom AS DATE)  AND dateSkuLedger(ledger)<= (dateTo AS DATE)
    BY batch, stockSkuLedger(ledger), dateFrom, dateTo;

costSumOutBalanceBatchStockDateFromTo 'Сумма расхода' (batch, stock, dateFrom, dateTo) =
    costBatch(batch) * costOutBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo);

// ---------------------------------------------- Макросы ------------------------------------------------- //

META implementSkuLedgerCustom(idetail, skuProp, stockProp)
    dateTimeDataSkuLedger (ledger) += dateTime###idetail(ledger);
    isPostedDataSkuLedger (ledger) += isPosted###idetail(ledger);
    skuDataSkuLedger (ledger) += skuProp###idetail(ledger);
    stockDataSkuLedger (ledger) += stockProp###idetail(ledger);
    descriptionDataSkuLedger (ledger) += description###idetail(ledger);
END

META implementSkuLedger(concrete, skuProp, stockProp)
    dateTimeDataSkuLedger (ledger) += dateTime###concrete##Detail(ledger);
    isPostedDataSkuLedger (ledger) += isPosted###concrete##Detail(ledger);
    skuDataSkuLedger (ledger) += skuProp###concrete##Detail(ledger);
    stockDataSkuLedger (ledger) += stockProp###concrete##Detail(ledger);
    descriptionDataSkuLedger (ledger) += description###concrete##Detail(ledger);
END

META implementSkuLedgerInLIFOBalancePostfix (concrete, skuProp, stockProp, postfix)
    limitInLIFOSkuLedgerBatch(ledger, batch) += (quantityBatch(batch) (-) currentBalance##postfix##Batch(batch)) AND
                                                countLedger##postfix##SkuStock(skuProp###concrete##Detail(ledger), stockProp###concrete##Detail(ledger));
END

META implementSkuLedgerInLIFOBalance (concrete, skuProp, stockProp)
    @implementSkuLedgerInLIFOBalancePostfix(concrete, skuProp, stockProp, );
END

META implementSkuLedgerOutFIFOBalancePostfix (concrete, skuProp, stockProp, postfix)
    limitOutFIFOSkuLedgerBatch(ledger, batch) += currentBalance##postfix##BatchStock(batch, stockProp###concrete##Detail(ledger));
END

META implementSkuLedgerOutFIFOBalance (concrete, skuProp, stockProp)
    @implementSkuLedgerOutFIFOBalancePostfix(concrete, skuProp, stockProp, );
END

META implementBatch(concrete, skuProp, stockProp, costProp)
    dateTimeBatch (batch) += dateTime###concrete##Detail(batch);
    isPostedBatch (batch) += isPosted###concrete##Detail(batch);
    skuBatch (batch) += skuProp###concrete##Detail(batch);
    stockBatch (batch) += stockProp###concrete##Detail(batch);
    descriptionBatch (batch) += description###concrete##Detail(batch);
    costBatch (batch) += costProp###concrete##Detail(batch);
END

META defineConstraintSkuLedgerCosted (concrete, caption)
    CONSTRAINT (ASSIGNED(changedCostDataSkuLedger(detail)) OR CHANGED(costedDataSkuLedger(detail))) AND isPosted###concrete##Detail(detail) AND NOT quantity###concrete##Detail(detail) == costedDataSkuLedger(detail)
        MESSAGE caption;
END

// ---------------------------------------------- Макросы для документов ------------------------------------------------- //

// Склады
META defineDocumentHeaderStock (object, stockClass, stockCaption, prefix)
    prefix###stockClass###object = DATA stockClass(object) AUTOSET;
    name###prefix###stockClass###object stockCaption (object) = name(prefix###stockClass###object(object)) IN documentHeaderGroup
            MINCHARWIDTH 10 PREFCHARWIDTH 20;

    prefix###company###object (object) = companyStock(prefix###stockClass###object(object));
    name###prefix###company###object 'Компания ('###stockCaption###')' (object) = name(prefix###company###object (object));

    prefix###country###object (object) = countryStock(prefix###stockClass###object(object));
END
META defineDocumentAbstractHeaderStock (object, stockClass, stockCaption, prefix)
    prefix###stockClass###object = ABSTRACT stockClass(object) PERSISTENT;
    name###prefix###stockClass###object stockCaption (object) = name(prefix###stockClass###object(object)) IN documentHeaderGroup
            MINCHARWIDTH 10 PREFCHARWIDTH 20;

    prefix###company###object (object) = companyStock(prefix###stockClass###object(object));
    name###prefix###company###object 'Компания ('###stockCaption###')' (object) = name(prefix###company###object (object));

    prefix###country###object (object) = countryStock(prefix###stockClass###object(object));
END
META defineDocumentInterfaceHeaderStock (object, stockClass, stockCaption, prefix)
    @defineDocumentAbstractHeaderStock (object, stockClass, stockCaption, prefix);
    @defineDocumentHeaderStock (user###object, stockClass, stockCaption, prefix);
    prefix###stockClass###object (object) += prefix###stockClass###user###object(object);
END

META defineDocumentHeaderStock (object, stockClass, stockCaption)
    @defineDocumentHeaderStock(object, stockClass, stockCaption, );
END
META defineDocumentAbstractHeaderStock (object, stockClass, stockCaption)
    @defineDocumentAbstractHeaderStock(object, stockClass, stockCaption, );
END
META defineDocumentInterfaceHeaderStock (object, stockClass, stockCaption)
    @defineDocumentInterfaceHeaderStock(object, stockClass, stockCaption, );
END

META defineDocumentDetailStock (object, detail, stockProp, stockCaption)
    stockProp###detail (idetail) = stockProp###object(object###detail(idetail));
    name###stockProp###detail stockCaption (idetail) = name(stockProp###detail(idetail)) MINCHARWIDTH 10 PREFCHARWIDTH 20;
    country###stockProp###detail (idetail) = countryStock(stockProp###detail(idetail));
    company###stockProp###detail (idetail) = companyStock(stockProp###detail(idetail));
    name###company###stockProp###detail 'Компания ('###stockCaption###')' (idetail) = name(company###stockProp###detail (idetail));
END
META defineDocumentDetailStock (object, stockProp, stockCaption)
    @defineDocumentDetailStock (object, object##Detail, stockProp, stockCaption);
END

META defineDocumentDetailDataStock (object, detail, stockClass, stockProp, stockCaption)
    data###stockProp###detail = DATA stockClass(detail);
    stockProp###detail (idetail) = UNION OVERRIDE stockProp###object(object###detail(idetail)), data###stockProp###detail(idetail) PERSISTENT;
    name###stockProp###detail stockCaption (idetail) = name(stockProp###detail(idetail)) MINCHARWIDTH 10 PREFCHARWIDTH 20;
    country###stockProp###detail (idetail) = countryStock(stockProp###detail(idetail));
    company###stockProp###detail (idetail) = companyStock(stockProp###detail(idetail));
    name###company###stockProp###detail 'Компания ('###stockCaption###')' (idetail) = name(company###stockProp###detail (idetail));
END
META defineDocumentAbstractDetailDataStock (object, detail, stockClass, stockProp, stockCaption)
    data###stockProp###detail = ABSTRACT stockClass(detail) PERSISTENT;
    stockProp###detail (idetail) = UNION OVERRIDE stockProp###object(object###detail(idetail)), data###stockProp###detail(idetail) PERSISTENT;
    name###stockProp###detail stockCaption (idetail) = name(stockProp###detail(idetail)) MINCHARWIDTH 10 PREFCHARWIDTH 20;
    country###stockProp###detail (idetail) = countryStock(stockProp###detail(idetail));
    company###detail (idetail) = companyStock(stockProp###detail(idetail));
    name###company###detail 'Компания ('###stockCaption###')' (idetail) = name(company###detail (idetail));
END
META defineDocumentInterfaceDetailDataStock (object, detail, stockClass, stockProp, stockCaption)
    @defineDocumentAbstractDetailDataStock(object, detail, stockClass, stockProp, stockCaption);
    @defineDocumentDetailDataStock(user###object, user###detail, stockClass, stockProp, stockCaption);
    data###stockProp###detail (detail) += data###stockProp###user###detail (detail);
END

META defineDocumentDetailDataStock (object, stockClass, stockProp, stockCaption)
    @defineDocumentDetailDataStock (object, object##Detail, stockClass, stockProp, stockCaption);
END
META defineDocumentAbstractDetailDataStock (object, stockClass, stockProp, stockCaption)
    @defineDocumentAbstractDetailDataStock (object, object##Detail, stockClass, stockProp, stockCaption);
END
META defineDocumentInterfaceDetailDataStock (object, stockClass, stockProp, stockCaption)
    @defineDocumentInterfaceDetailDataStock (object, object##Detail, stockClass, stockProp, stockCaption);
END

META defineDocumentStock (object, stockClass, stockCaption, prefix)
    @defineDocumentHeaderStock(object, stockClass, stockCaption, prefix);
    @defineDocumentDetailStock(object, prefix###stockClass, stockCaption);
END
META defineDocumentAbstractStock (object, stockClass, stockCaption, prefix)
    @defineDocumentAbstractHeaderStock(object, stockClass, stockCaption, prefix);
    @defineDocumentDetailStock(object, prefix###stockClass, stockCaption);
END
META defineDocumentInterfaceStock (object, stockClass, stockCaption, prefix)
    @defineDocumentInterfaceHeaderStock(object, stockClass, stockCaption, prefix);
    @defineDocumentDetailStock(object, prefix###stockClass, stockCaption);
END

META defineDocumentDataStock (object, stockClass, stockCaption, prefix)
    @defineDocumentHeaderStock(object, stockClass, stockCaption, prefix);
    @defineDocumentDetailDataStock(object, stockClass, prefix###stockClass, stockCaption);
END
META defineDocumentAbstractDataStock (object, stockClass, stockCaption, prefix)
    @defineDocumentAbstractHeaderStock(object, stockClass, stockCaption, prefix);
    @defineDocumentAbstractDetailDataStock(object, stockClass, prefix###stockClass, stockCaption);
END
META defineDocumentInterfaceDataStock (object, stockClass, stockCaption, prefix)
    @defineDocumentInterfaceHeaderStock(object, stockClass, stockCaption, prefix);
    @defineDocumentInterfaceDetailDataStock(object, stockClass, prefix###stockClass, stockCaption);
END

META defineDocumentStock (object, stockClass, stockCaption)
    @defineDocumentStock(object, stockClass, stockCaption, );
END
META defineDocumentAbstractStock (object, stockClass, stockCaption)
    @defineDocumentAbstractStock(object, stockClass, stockCaption, );
END
META defineDocumentInterfaceStock (object, stockClass, stockCaption)
    @defineDocumentInterfaceStock(object, stockClass, stockCaption, );
END

META defineDocumentDataStock (object, stockClass, stockCaption)
    @defineDocumentDataStock(object, stockClass, stockCaption, );
END
META defineDocumentAbstractDataStock (object, stockClass, stockCaption)
    @defineDocumentAbstractDataStock(object, stockClass, stockCaption, );
END
META defineDocumentInterfaceDataStock (object, stockClass, stockCaption)
    @defineDocumentInterfaceDataStock(object, stockClass, stockCaption, );
END

// Sku
META defineDocumentDetailSkuCustomPrefix (detail, skuClass, prefix, caption)
    prefix###skuClass###detail = DATA skuClass (detail);
    prefix###nameSku###detail 'SKU'###caption (detail) = nameSku(prefix###skuClass###detail(detail)) IN recognizeGroup;
    prefix###shortNameUOMSku###detail 'Ед. изм.'###caption = shortNameUOMSku(prefix###skuClass###detail(detail)) IN recognizeGroup;
    prefix###idBarcodeSku###detail 'Штрих-код'###caption (detail) = idBarcodeSku(prefix###skuClass###detail(detail)) IN recognizeGroup;
END
META defineDocumentAbstractDetailSkuCustomPrefix (detail, skuClass, prefix, caption)
    prefix###skuClass###detail = ABSTRACT skuClass (detail);
    prefix###nameSku###detail 'SKU'###caption (detail) = nameSku(prefix###skuClass###detail(detail)) IN recognizeGroup;
    prefix###shortNameUOMSku###detail 'Ед. изм.'###caption = shortNameUOMSku(prefix###skuClass###detail(detail)) IN recognizeGroup;
    prefix###idBarcodeSku###detail 'Штрих-код'###caption (detail) = idBarcodeSku(prefix###skuClass###detail(detail)) IN recognizeGroup;
END
META defineDocumentInterfaceDetailSkuCustomPrefix (detail, skuClass, prefix, caption)
    @defineDocumentAbstractDetailSkuCustomPrefix(detail, skuClass, prefix, caption);
    @defineDocumentDetailSkuCustomPrefix(user###detail, skuClass, prefix, caption);
    prefix###skuClass###detail(detail) += prefix###skuClass###user###detail(detail);
END

META defineDocumentDetailSkuCustom (detail, skuClass)
    @defineDocumentDetailSkuCustomPrefix(detail, skuClass, ,);
END
META defineDocumentAbstractDetailSkuCustom (detail, skuClass)
    @defineDocumentAbstractDetailSkuCustomPrefix(detail, skuClass, ,);
END
META defineDocumentInterfaceDetailSkuCustom (detail, skuClass)
    @defineDocumentInterfaceDetailSkuCustomPrefix(detail, skuClass, ,);
END

META defineDocumentDetailSkuPrefix (object, skuClass, prefix, caption)
    @defineDocumentDetailSkuCustomPrefix(object##Detail, skuClass, prefix, caption);
END
META defineDocumentAbstractDetailSkuPrefix (object, skuClass, prefix, caption)
    @defineDocumentAbstractDetailSkuCustomPrefix(object###Detail, skuClass, prefix, caption);
END
META defineDocumentInterfaceDetailSkuPrefix (object, skuClass, prefix, caption)
    @defineDocumentInterfaceDetailSkuCustomPrefix(object###Detail, skuClass, prefix, caption);
END

META defineDocumentDetailSku (object, skuClass)
    @defineDocumentDetailSkuPrefix(object, skuClass, ,);
END
META defineDocumentAbstractDetailSku (object, skuClass)
    @defineDocumentAbstractDetailSkuPrefix(object, skuClass, ,);
END
META defineDocumentInterfaceDetailSku (object, skuClass)
    @defineDocumentInterfaceDetailSkuPrefix(object, skuClass, ,);
END

// ---------------------------------------------- Агрегированные документы -------------------------------------------- //

// Склады
META defineDocumentAggregationHeaderStockPrefix (primObject, aggrObject, stockProp, stockCaption, prefixP, prefixA)
    prefixA###stockProp###aggrObject (object) = prefixP###stockProp###primObject(primObject###aggrObject(object)) PERSISTENT;
    name###prefixA###stockProp###aggrObject stockCaption (object) = name(prefixA###stockProp###aggrObject(object)) MINCHARWIDTH 20 PREFCHARWIDTH 40;
END
META defineDocumentAggregationHeaderStock (primObject, aggrObject, stockProp, stockCaption)
    @defineDocumentAggregationHeaderStockPrefix (primObject, aggrObject, stockProp, stockCaption, , );
END

META defineDocumentAggregationDetailStockPrefix (primObject, aggrObject, stockProp, stockCaption, prefixP, prefixA)
    prefixA###stockProp###aggrObject##Detail (detail) = prefixP###stockProp###primObject##Detail(primObject##Detail###aggrObject##Detail(detail)) PERSISTENT;
END
META defineDocumentAggregationDetailStock (primObject, aggrObject, stockProp, stockCaption)
    @defineDocumentAggregationDetailStockPrefix(primObject, aggrObject, stockProp, stockCaption, , );
END

META defineDocumentAggregationStockPrefix (primObject, aggrObject, stockProp, stockCaption, prefixP, prefixA)
    @defineDocumentAggregationHeaderStockPrefix(primObject, aggrObject, stockProp, stockCaption, prefixP, prefixA);
    @defineDocumentAggregationDetailStockPrefix(primObject, aggrObject, stockProp, stockCaption, prefixP, prefixA);
END
META defineDocumentAggregationStock (primObject, aggrObject, stockProp, stockCaption)
    @defineDocumentAggregationStockPrefix(primObject, aggrObject, stockProp, stockCaption, , );
END

// Sku
META defineDocumentAggregationDetailSkuPrefix (primObject, aggrObject, skuProp, prefix)
    skuProp###aggrObject##Detail (detail) = prefix###skuProp###primObject##Detail(primObject##Detail###aggrObject##Detail(detail));
    nameSku###aggrObject##Detail 'SKU' (detail) = nameSku(skuProp###aggrObject##Detail(detail)) IN recognizeGroup;
    idBarcodeSku###aggrObject##Detail 'Штрих-код' (detail) = idBarcodeSku(skuProp###aggrObject##Detail(detail)) IN recognizeGroup;
END
META defineDocumentAggregationDetailSku (primObject, aggrObject, skuProp)
    @defineDocumentAggregationDetailSkuPrefix(primObject, aggrObject, skuProp, );
END

// Quantity
META defineDocumentAggregationDetailQuantity (primObject, aggrObject)
    quantity###aggrObject##Detail 'Кол-во' (detail) = quantity###primObject##Detail(primObject##Detail###aggrObject##Detail(detail)) PERSISTENT;
END

// Batch
META defineDocumentAggregationDetailBatch (primObject, aggrObject)
    batch###aggrObject##Detail 'Партия' (detail) = batch###primObject##Detail(primObject##Detail###aggrObject##Detail(detail)) PERSISTENT;
END

// ---------------------------------------------- Кол-во -------------------------------------------- //

META defineDocumentDetailQuantityCustomPrefix (detail, prefix, caption)
    prefix###quantity###detail 'Кол-во'###caption = DATA NUMERIC[14,3] (detail);
END
META defineDocumentAbstractDetailQuantityCustomPrefix (detail, prefix, caption)
    prefix###quantity###detail 'Кол-во'###caption = ABSTRACT NUMERIC[14,3] (detail);
END
META defineDocumentInterfaceDetailQuantityCustomPrefix (detail, prefix, caption)
    @defineDocumentAbstractDetailQuantityCustomPrefix(detail, prefix, caption);
    @defineDocumentDetailQuantityCustomPrefix (user###detail, prefix, caption);
    prefix###quantity###detail (detail) += prefix###quantity###user###detail(detail);
END

META defineDocumentDetailQuantityCustom (detail)
    @defineDocumentDetailQuantityCustomPrefix(detail, , );
END
META defineDocumentAbstractDetailQuantityCustom (detail)
    @defineDocumentAbstractDetailQuantityCustomPrefix(detail, , );
END
META defineDocumentInterfaceDetailQuantityCustom (detail)
    @defineDocumentInterfaceDetailQuantityCustomPrefix(detail, , );
END

META defineDocumentDetailQuantityPrefix (object, prefix, caption)
    @defineDocumentDetailQuantityCustomPrefix(object##Detail, prefix, caption);
END
META defineDocumentAbstractDetailQuantityPrefix (object, prefix, caption)
    @defineDocumentAbstractDetailQuantityCustomPrefix(object##Detail, prefix, caption);
END
META defineDocumentInterfaceDetailQuantityPrefix (object, prefix, caption)
    @defineDocumentInterfaceDetailQuantityCustomPrefix(object##Detail, prefix, caption);
END

META defineDocumentDetailQuantity (object)
    @defineDocumentDetailQuantityPrefix(object, , );
END
META defineDocumentAbstractDetailQuantity (object)
    @defineDocumentAbstractDetailQuantityPrefix(object, , );
END
META defineDocumentInterfaceDetailQuantity (object)
    @defineDocumentInterfaceDetailQuantityPrefix(object, , );
END

// ---------------------------------------------- Учетные суммы -------------------------------------------- //

META defineDocumentDetailPriceCustomPrefix (detail, prefix, caption)
    prefix###price###detail 'Цена'###caption = DATA NUMERIC[14,2] (detail);
END
META defineDocumentAbstractDetailPriceCustomPrefix (detail, prefix, caption)
    prefix###price###detail 'Цена'###caption = ABSTRACT NUMERIC[14,2] (detail);
END
META defineDocumentInterfaceDetailPriceCustomPrefix (detail, prefix, caption)
    @defineDocumentAbstractDetailPriceCustomPrefix(detail, prefix, caption);
    @defineDocumentDetailPriceCustomPrefix(user###detail, prefix, caption);
    prefix###price###detail (detail) += prefix###price###user###detail(detail);
END

META defineDocumentDetailPriceCustom (detail, caption)
    @defineDocumentDetailPriceCustomPrefix(detail, , caption);
END
META defineDocumentDetailAbstractPriceCustom (detail, caption)
    @defineDocumentAbstractDetailPriceCustomPrefix(detail, , caption);
END
META defineDocumentDetailInterfacePriceCustom (detail, caption)
    @defineDocumentInterfaceDetailPriceCustomPrefix(detail, , caption);
END

META defineDocumentDetailPricePrefix (object, prefix, caption)
    @defineDocumentDetailPriceCustomPrefix(object##Detail, prefix, caption);
END
META defineDocumentAbstractDetailPricePrefix (object, prefix, caption)
    @defineDocumentAbstractDetailPriceCustomPrefix(object##Detail, prefix, caption);
END
META defineDocumentInterfaceDetailPricePrefix (object, prefix, caption)
    @defineDocumentInterfaceDetailPriceCustomPrefix(object##Detail, prefix, caption);
END

META defineDocumentDetailPrice (object)
    @defineDocumentDetailPricePrefix(object, ,);
END
META defineDocumentAbstractDetailPrice (object)
    @defineDocumentAbstractDetailPricePrefix(object, ,);
END
META defineDocumentInterfaceDetailPrice (object)
    @defineDocumentInterfaceDetailPricePrefix(object, ,);
END

META deriveDocumentDetailPriceBatchStockCustomPrefix (detail, prefix)
    prefix###price###detail (detail)  <- IF batch###detail(detail)
                THEN priceBatchStockDateTime(batch###detail(detail), stock###detail(detail), dateTime###detail(detail))
                ELSE priceSkuStockDateTime(sku###detail(detail), stock###detail(detail), dateTime###detail(detail))
                WHEN CHANGED(sku###detail(detail)) OR CHANGED(batch###detail(detail)) OR CHANGED(stock###detail(detail)) OR CHANGED (dateTime###detail(detail));
END
META deriveDocumentDetailPriceBatchStockPrefix (object, prefix)
    @deriveDocumentDetailPriceBatchStockCustomPrefix(object##Detail, prefix);
END
META deriveDocumentDetailPriceBatchStock (object)
    @deriveDocumentDetailPriceBatchStockPrefix(object, );
END

META defineDocumentDetailSumCustom (detail, currencyProp)
    sum###detail 'Сумма' (detail) = roundCurrency((quantity###detail(detail) * price###detail(detail)), currencyProp###detail(detail));
END
META defineDocumentDetailSumCustom (detail)
    @defineDocumentDetailSumCustom(detail, currency);
END
META defineDocumentInterfaceDetailSumCustom (detail, currencyProp)
    @defineDocumentDetailSumCustom(detail, currencyProp);
    @defineDocumentDetailSumCustom(user###detail, currencyProp);
END

META defineDocumentDetailSum (object, currencyProp)
    @defineDocumentDetailSumCustom(object##Detail, currencyProp);
END
META defineDocumentDetailSum (object)
    @defineDocumentDetailSum(object, currency);
END

META defineDocumentInterfaceDetailSum (object, currencyProp)
    @defineDocumentInterfaceDetailSumCustom(object##Detail, currencyProp);
END

META defineDocumentInterfaceDetailSum (object)
    @defineDocumentInterfaceDetailSum(object, currency);
END

META defineDocumentHeaderAndDetailSumCustomCaption (object, detail, caption, captionDetail)
    @defineDocumentDetailPriceCustom(detail, captionDetail);
    @defineDocumentDetailSumCustom (detail);
    @defineDocumentHeaderSumCustom(object, detail, caption);
END
//--
META defineDocumentDetailDataSumCustomPrefix (detail, prefix, caption)
    prefix###sum###detail 'Сумма'###caption = DATA NUMERIC[16,2] (detail);
END
META defineDocumentAbstractDetailDataSumCustomPrefix (detail, prefix, caption)
    prefix###sum###detail 'Сумма'###caption = ABSTRACT NUMERIC[16,2] (detail);
END

META defineDocumentInterfaceDetailDataSumCustomPrefix (detail, prefix, caption)
    @defineDocumentAbstractDetailDataSumCustomPrefix(detail, prefix, caption);
    @defineDocumentDetailDataSumCustomPrefix(user###detail, prefix, caption);
    prefix###sum###detail (detail) += prefix###sum###user###detail(detail);
END

META defineDocumentInterfaceDetailDataSumPrefix (object, prefix, caption)
    @defineDocumentInterfaceDetailDataSumCustomPrefix(object##Detail, prefix, caption);
END
META defineDocumentInterfaceDetailDataSum (object)
    @defineDocumentInterfaceDetailDataSumPrefix(object, ,);
END

META deriveDocumentDetailSumCustomPrefix(detail, prefix, currencyProp)
    prefix###sum###detail (detail)  <- roundCurrency((quantity###detail(detail) * prefix###price###detail(detail)), currencyProp###detail(detail))
                    WHEN CHANGED(quantity###detail(detail)) OR CHANGED (prefix###price###detail(detail));
END
META deriveDocumentDetailSumPrefix(object, prefix, currencyProp)
    @deriveDocumentDetailSumCustomPrefix(object##Detail, prefix, currencyProp);
END
META deriveDocumentDetailSum(object, currencyProp)
    @deriveDocumentDetailSumPrefix(object, ,currencyProp);
END
META deriveDocumentDetailSum(object)
    @deriveDocumentDetailSum(object, currency);
END
//-

META derivePriceOnSkuChange(concrete, skuProp, stockProp)
    price###concrete##Detail (detail)  <- priceSkuStockDateTime(
                    skuProp###concrete##Detail(detail), stockProp###concrete##Detail(detail), dateTime###concrete##Detail(detail))
                    WHEN CHANGED(skuProp###concrete##Detail(detail)) OR CHANGED (dateTime###concrete##Detail(detail));
END

META derivePriceOnBatchChange(concrete, batchProp, stockProp)
    price###concrete##Detail (detail)  <- priceBatchStockDateTime(
                    batchProp###concrete##Detail(detail), stockProp###concrete##Detail(detail), dateTime###concrete##Detail(detail))
                    WHEN CHANGED(batchProp###concrete##Detail(detail)) OR CHANGED (dateTime###concrete##Detail(detail));
END


META defineDocumentHeaderItemSumCustom (object, detail)
    sumItem###detail###object 'Сумма, товар' (object) =
        GROUP SUM sum###detail(idetail) AND NOT isContainerSku(sku###detail(idetail))
            BY object###detail(idetail) IN documentSumGroup;
    sumContainer###detail###object 'Сумма, тара' (object) =
        GROUP SUM sum###detail(idetail) IF isContainerSku(sku###detail(idetail))
            BY object###detail(idetail) IN documentSumGroup;
END
META defineDocumentHeaderItemSum (object)
    @defineDocumentHeaderItemSumCustom(object, object##Detail);
END

//--------------------------------------------------Партия для Detail--------------------------------------//
META defineDocumentDetailBatchCustom(detail, batchProp)
    batch###detail = DATA batchProp (detail);
    descriptionBatch###detail 'Партия' (detail) = descriptionBatch(batch###detail(detail)) MINCHARWIDTH 20 PREFCHARWIDTH 40;

    CONSTRAINT skuBatch(batch###detail(detail)) != sku###detail(detail) CHECKED BY batch###detail
        MESSAGE 'Товар партии строки должен соответствовать SKU строки';

    CONSTRAINT batch###detail(detail) AND NOT sku###detail(detail) CHECKED BY batch###detail
        MESSAGE 'Для строки задана парктия, но не задан товар';
END
META defineDocumentAbstractDetailBatchCustom(detail, batchProp)
    batch###detail = ABSTRACT batchProp (detail);
    descriptionBatch###detail 'Партия' (detail) = descriptionBatch(batch###detail(detail)) MINCHARWIDTH 20 PREFCHARWIDTH 40;
END
META defineDocumentInterfaceDetailBatchCustom(detail, batchProp)
    @defineDocumentAbstractDetailBatchCustom(detail, batchProp);
    @defineDocumentDetailBatchCustom(user###detail, batchProp);
    batch###detail(detail) += batch###user###detail(detail);
END

META defineDocumentDetailBatch(object, batchProp)
    @defineDocumentDetailBatchCustom(object##Detail, batchProp);
END
META defineDocumentAbstractDetailBatch(object, batchProp)
    @defineDocumentAbstractDetailBatchCustom(object##Detail, batchProp);
END
META defineDocumentInterfaceDetailBatch(object, batchProp)
    @defineDocumentInterfaceDetailBatchCustom(object##Detail, batchProp);
END
// ------------------------------------------------ Кол-во в документе ------------------------------------ //
META defineDocumentHeaderQuantityCustomPrefix (object, detail, prefix, caption)
    prefix###quantity###detail###object 'Кол-во (всего)'###caption (object) = GROUP SUM prefix###quantity###detail(idetail) BY object###detail(idetail) IN documentSumGroup PERSISTENT;
END
META defineDocumentInterfaceHeaderQuantityCustomPrefix (object, detail, prefix, caption)
    @defineDocumentHeaderQuantityCustomPrefix (object, detail, prefix, caption);
    @defineDocumentHeaderQuantityCustomPrefix (user###object, user###detail, prefix, caption);
END

META defineDocumentHeaderQuantityCustom (object, detail)
    @defineDocumentHeaderQuantityCustomPrefix(object, detail, , );
END
META defineDocumentInterfaceHeaderQuantityCustom (object, detail)
    @defineDocumentHeaderQuantityCustom (object, detail)
    @defineDocumentHeaderQuantityCustom (user###object, user###detail)
END

META defineDocumentHeaderQuantityPrefix (object, prefix, caption)
    @defineDocumentHeaderQuantityCustomPrefix(object, object##Detail, prefix, caption);
END
META defineDocumentInterfaceHeaderQuantityPrefix (object, prefix, caption)
    @defineDocumentHeaderQuantityPrefix (object, prefix, caption)
    @defineDocumentHeaderQuantityPrefix (user###object, prefix, caption)
END

META defineDocumentHeaderQuantity (object)
    @defineDocumentHeaderQuantityCustomPrefix(object, object##Detail, , );
END
META defineDocumentInterfaceHeaderQuantity (object)
    @defineDocumentHeaderQuantity(object);
    @defineDocumentHeaderQuantity(user###object);
END

// ------------------------------------------------ Кол-во SKU в документе ------------------------------------ //
META defineDocumentHeaderSkuQuantityCaptionCustom (object, detail, skuProp, caption)
    quantity###detail###skuProp###object 'Кол-во товара в документе'###caption (sku, object) = GROUP SUM quantity###detail(idetail)
                                                                                           BY  skuProp###detail(idetail),
                                                                                               object###detail(idetail);
END

META defineDocumentHeaderSkuQuantityCustom (object, detail, skuProp)
    quantity###detail###skuProp###object 'Кол-во товара в документе' (sku, object) = GROUP SUM quantity###detail(idetail)
                                                                                           BY  skuProp###detail(idetail),
                                                                                               object###detail(idetail);
END

META defineDocumentHeaderSkuQuantity (object, skuProp)
    @defineDocumentHeaderSkuQuantityCustom(object, object###detail, skuProp);
END

// ------------------------------------------------ Сумма в документе ------------------------------------ //

META defineDocumentHeaderSumCustom (object, detail, caption)
    sum###detail###object 'Сумма'###caption (object) = GROUP SUM sum###detail(idetail) BY object###detail(idetail) IN documentSumGroup;
END
META defineDocumentInterfaceHeaderSumCustom (object, detail, caption)
    @defineDocumentHeaderSumCustom (object, detail, caption);
    @defineDocumentHeaderSumCustom (user###object, user###detail, caption);
END

META defineDocumentHeaderSumCustom (object, detail)
    @defineDocumentHeaderSumCustom(object, detail, );
END
META defineDocumentInterfaceHeaderSumCustom (object, detail)
    @defineDocumentHeaderSumCustom(object, detail);
    @defineDocumentHeaderSumCustom(user###object, user###detail);
END

META defineDocumentHeaderSum (object)
    @defineDocumentHeaderSumCustom(object, object##Detail);
END
META defineDocumentInterfaceHeaderSum (object)
    @defineDocumentHeaderSum(object);
    @defineDocumentHeaderSum(user###object);
END

// ---------------------------------------------- Остатки -------------------------------------------- //

META defineDocumentDetailSkuBalance (object, skuProp, stockProp)
    balanceBSku###object##Detail 'Текущий остаток' (object##Detail) = balanceBSkuStockDateTime(
        skuProp###object##Detail(object##Detail), stockProp###object##Detail(object##Detail), dateTime###object##Detail(object##Detail));
END

// ---------------------------------------------- Остатки или партия или товар -------------------------------------------- //

META defineDocumentDetailSkuBatchBalance (object, skuProp, stockProp)
    balanceBSkuBatch###object##Detail 'Текущий остаток' (object##Detail) =
        IF batch###object##Detail(object##Detail) IS batch
        THEN balanceBBatchStockDateTime(batch###object##Detail(object##Detail), stockProp###object##Detail(object##Detail), dateTime###object##Detail(object##Detail))
            ELSE balanceBSkuStockDateTime(skuProp###object##Detail(object##Detail), stockProp###object##Detail(object##Detail), dateTime###object##Detail(object##Detail));
END

// ----------------------------------------------- Формы --------------------------------------------------- //

// ---------------------------------- Диалоги --------------------------- //

FORM stocks 'Склады'

    TREE stockTree sg = stockGroup PARENT parentStockGroup
    PROPERTIES READONLY stockGroupName = name(sg)

    OBJECTS s = stock
    PROPERTIES(s) READONLY skuName = name
    FILTERS isParentStockGroupStock(sg, s)

    DIALOG stock OBJECT s

;

DESIGN stocks FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            ADD stockTree.tree.box {
                title = 'Склады';
            }

            ADD s.box {
                s.grid {
                    defaultComponent = TRUE;
                }
            }
        }

        ADD functions.box;
    }
}

FORM skus 'Sku'
    TREE skuTree sg = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuGroupName = name(sg)

    OBJECTS s = sku
    PROPERTIES(s) READONLY nameSku, shortNameUOMSku
    FILTERS isParentSkuGroupSku(sg, s)
    ORDER BY nameSku

    DIALOG sku OBJECT s
;

DESIGN skus FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            ADD skuTree.tree.box {
                title = 'Группы SKU';
            }

            ADD s.box {
                s.grid {
                    defaultComponent = TRUE;
                }
            }
        }

        ADD functions.box;
    }
}

// ------------------------------------------------- Себестоимость --------------------------- //

FORM costSkuLedger 'Себестоимость (операции)'
    OBJECTS bil = skuLedger
    PROPERTIES(bil) READONLY dateTimeSkuLedger, descriptionSkuLedger, nameSkuSkuLedger, nameStockSkuLedger,
                             quantitySkuLedger, costedSkuLedger
    PROPERTIES(bil)          resetCostDataSkuLedger FORCE GRID
    ORDER BY dateTimeSkuLedger

    FILTERGROUP needToCostDataSkuLedger
        FILTER 'Нерасписанные строки' 'F9' needToCostDataSkuLedger(bil)

    OBJECTS bt = batch
    PROPERTIES(bt) READONLY dateTimeBatch, descriptionBatch, quantityBatch, costBatch, currentBalanceBatch
    PROPERTIES(bil, bt)     costSkuLedgerBatch FORCE GRID
    FILTERS skuBatch(bt) == skuSkuLedger(bil)
    ORDER BY dateTimeBatch DESC

    FILTERGROUP inSkuLedgerBatch
        FILTER 'Только расписанные партии' 'F10' costSkuLedgerBatch (bil, bt) DEFAULT

    PROPERTIES() setDataSkuLedgerBatchCost, resetDataSkuLedgerBatchCost, clearDataSkuLedgerBatchCost
;


DESIGN costSkuLedger FROM DEFAULT {
    NEW topContainer{
        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD bil.box;
        ADD bt.box;
    }

    NEW buttonContainer {
        childConstraints = TO THE RIGHT;
        ADD PROPERTY(setDataSkuLedgerBatchCost);
        ADD PROPERTY(resetDataSkuLedgerBatchCost);
        ADD PROPERTY(clearDataSkuLedgerBatchCost);
    }

    ADD functions.box;
}

FORM costSkuBatchLedger 'Себестоимость (партии)'
    OBJECTS i = sku FIXED PANEL
    PROPERTIES(i) SELECTOR nameSku//, idBarcodeSku

    OBJECTS bt = batch
    PROPERTIES(bt) READONLY dateTimeBatch, descriptionBatch, quantityBatch, costBatch, currentBalanceBatch

    OBJECTS bil = skuLedger
    PROPERTIES(bil) READONLY dateTimeSkuLedger, descriptionSkuLedger, nameStockSkuLedger,
                             quantitySkuLedger, costedSkuLedger
//    PROPERTIES(bil)          resetCostSkuLedger
    ORDER BY dateTimeSkuLedger

    FILTERGROUP needToCostSkuLedger
        FILTER 'Нерасписанные строки' 'F9' needToCostDataSkuLedger(bil)


    PROPERTIES(bil, bt)     READONLY costSkuLedgerBatch FORCE GRID
    FILTERS skuBatch(bt) == i,
            skuSkuLedger(bil) == i

    ORDER BY dateTimeBatch DESC

    FILTERGROUP inSkuLedgerBatch
        FILTER 'Только расписанные партии' 'F10' costSkuLedgerBatch (bil, bt) DEFAULT
;

DESIGN costSkuBatchLedger FROM DEFAULT {
    NEW topContainer {
        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD bt.box;
        ADD bil.box;
    }
    ADD functions.box;
}

// ------------------------------------------------ Остатки по товарам ---------------------------------------- //

FORM currentBalanceSkuStock 'Текущие остатки'

    TREE stockTree sg = stockGroup PARENT parentStockGroup, ts = stock
    PROPERTIES READONLY sgTreeName = name(sg), tsTreeName = name(ts)
    FILTERS stockGroupStock(ts) == sg

    TREE skuTree sk = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = name(sk)
    ORDER BY skuTreeName

    OBJECTS           sts=(st=stock, s=sku)
    PROPERTIES        READONLY nameSku(s), stockName = name(st)  //  idBarcodeSku
    FILTERS           isParentSkuGroupSku(sk, s),
                      st == ts AND sg IS stockGroup OR
                      isParentStockGroupStock(sg, st) AND NOT ts
    ORDER BY          nameSku


    PROPERTIES(s, st) READONLY currentBalanceSkuStock, averagePriceSkuStock, currentSumSkuStock, dateLastMovedSkuStock

    FILTERGROUP filters
        FILTER 'Товары с остатком' 'F10' currentBalanceSkuStock(s, st) DEFAULT
        FILTER 'Товары с движением не позднее 1 дня' 'F9' balanceSkuStockDatePeriod(s, st, currentDate(), 1)
        FILTER 'Товары с движением не позднее 7 дней' 'F8' balanceSkuStockDatePeriod(s, st, currentDate(), 7)
        FILTER 'Товары с движением не позднее 30 дней' 'F7' balanceSkuStockDatePeriod(s, st, currentDate(), 30)

    OBJECTS bil=skuLedger
    PROPERTIES(bil) READONLY descriptionSkuLedger, dateTimeSkuLedger, signedQuantitySkuLedger, signedSumSkuLedger, skipSkuLedger
    FILTERS isPostedSkuLedger(bil) AND skuSkuLedger(bil)==s AND stockSkuLedger(bil)==st
    ORDER BY dateTimeSkuLedger DESC

    OBJECTS bt=batch
    PROPERTIES(bt) READONLY      dateTimeBatch, descriptionBatch, quantityBatch, costBatch
    PROPERTIES(bt, st) READONLY  currentBalanceBatchStock
    FILTERS isPostedBatch(bt) AND skuBatch(bt)==s
    ORDER BY dateTimeBatch DESC
;

DESIGN currentBalanceSkuStock FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;

            NEW firstBottom {
                type = SPLITV;
                ADD stockTree.tree.box {title = 'Склады';};
                ADD skuTree.tree.box {title = 'Группы';};
            }

            NEW secondCase {
                type = SPLITV;
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD sts.box { fillVertical = 2; }

                NEW ledger.box {
                    fillVertical = 1;
                    title = 'Изменение цен';
                    type = TABBED;
                    ADD bil.box;
                    ADD bt.box;
                }
            }
        }

        ADD functions.box;
    }
}

FORM balanceSkuStock 'Остатки на дату'

    OBJECTS t=DATETIME FIXED PANEL
    PROPERTIES(t) OBJVALUE

    TREE stockTree sg = stockGroup PARENT parentStockGroup
    PROPERTIES READONLY sgTreeName = name(sg)

    TREE skuTree sk = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = name(sk)
    ORDER BY skuTreeName

    OBJECTS           sts=(st=stock, s=sku)
    PROPERTIES        READONLY nameSku(s), stockName = name(st)  //  idBarcodeSku
    FILTERS           isParentSkuGroupSku(sk, s),
                      isParentStockGroupStock(sg, st)

    PROPERTIES(s, st, t) READONLY balanceASkuStockDateTime
    PROPERTIES(s, st) READONLY dateLastMovedSkuStock

    FILTERGROUP filters
        FILTER 'Товары с остатком' 'F10' balanceASkuStockDateTime(s, st, t) DEFAULT
        FILTER 'Товары с движением не позднее 1 дня' 'F9' balanceSkuStockDateTimePeriod(s, st, t, 1)
        FILTER 'Товары с движением не позднее 7 дней' 'F8' balanceSkuStockDateTimePeriod(s, st, t, 7)
        FILTER 'Товары с движением не позднее 30 дней' 'F7' balanceSkuStockDateTimePeriod(s, st, t, 30)

    OBJECTS bil=skuLedger
    PROPERTIES(bil) READONLY descriptionSkuLedger, dateTimeSkuLedger, signedQuantitySkuLedger, signedSumSkuLedger
    FILTERS isPostedSkuLedger(bil) AND skuSkuLedger(bil)==s AND stockSkuLedger(bil)==st
    ORDER BY dateTimeSkuLedger DESC
;

DESIGN balanceSkuStock FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            NEW firstCase {
                type = SPLITV;
                fillHorizontal = 1;
                childConstraints = TO THE BOTTOM;
                ADD t.box;
                NEW firstCaseTwo {
                    type = SPLITV;
                    ADD stockTree.tree.box {title = 'Склады';};
                    ADD skuTree.tree.box {title = 'Группы';};
                }
            }

            NEW secondCase {
                type = SPLITV;
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD sts.box {fillVertical = 2;}

                NEW ledger.box {
                    fillVertical = 1;
                    title = 'Регистры';
                    type = TABBED;
                    ADD bil.box;
                }

            }
        }

        ADD functions.box;
    }
}

// ------------------------------------------------ Остатки по партиям ---------------------------------------- //

FORM currentBalanceBatchStock 'Текущие остатки по партиям'

    TREE stockTree sg = stockGroup PARENT parentStockGroup
    PROPERTIES READONLY sgTreeName = name(sg)

    TREE skuTree sk = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = name(sk)
    ORDER BY skuTreeName

    OBJECTS           stb=(st=stock, bt=batch)
    PROPERTIES        READONLY nameSkuBatch(bt), stockName = name(st)
    PROPERTIES        currentBalanceBatchStock(bt, st)
    PROPERTIES(bt)    READONLY dateTimeBatch, descriptionBatch, quantityBatch, costBatch, expiryDateBatch
    FILTERS           isParentSkuGroupBatch(sk, bt),
                      isParentStockGroupStock(sg, st)
    ORDER BY          dateTimeBatch

    OBJECTS bil=skuLedger
    PROPERTIES(bil) READONLY descriptionSkuLedger, dateTimeSkuLedger, signedQuantitySkuLedger, skipSkuLedger
    FILTERS isPostedSkuLedger(bil) AND skuSkuLedger(bil)==skuBatch(bt) AND stockSkuLedger(bil)==st
    ORDER BY dateTimeSkuLedger DESC

    FILTERGROUP filterBalance
        FILTER 'Партии с остатком' 'F11' currentBalanceBatchStock(bt, st) DEFAULT
        FILTER 'Партии пришедшие за последний 1 день' 'F10' dateTimeBatch(bt) >= currentDate() - 1
        FILTER 'Партии пришедшие за последние 7 дней' 'F9' dateTimeBatch(bt) >= currentDate() - 7
        FILTER 'Партии пришедшие за последние 30 дней' 'F8' dateTimeBatch(bt) >= currentDate() - 30

    FILTERGROUP filterExpiry
        FILTER 'Партии с истекшим сроком годности' 'F7' expiryDateBatch(bt) < currentDate()
        FILTER 'Партии со сроком годности, истекающим через 1 день' 'F6' expiresBatchDate(bt, currentDate(), 1)
        FILTER 'Партии со сроком годности, истекающим через 7 дней' 'F5' expiresBatchDate(bt, currentDate(), 7)
        FILTER 'Партии со сроком годности, истекающим через 30 дней' 'F4' expiresBatchDate(bt, currentDate(), 30)
;

DESIGN currentBalanceBatchStock FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            NEW firstCase {
                type = SPLITV;
                fillHorizontal = 1;
                childConstraints = TO THE BOTTOM;
                ADD stockTree.tree.box {title = 'Склады';};
                ADD skuTree.tree.box {title = 'Группы';};
            }

            NEW secondCase {
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD stb.box {
                    title = 'Партии';

                }
                ADD bil.box {
                    title = 'Движение';
                }
            }
        }

        ADD functions.box;
    }
}

FORM balanceBatchStock 'Остатки по партиям на дату'

    OBJECTS t=DATETIME FIXED PANEL
    PROPERTIES(t) OBJVALUE

    TREE stockTree sg = stockGroup PARENT parentStockGroup
    PROPERTIES READONLY sgTreeName = name(sg)

    TREE skuTree sk = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = name(sk)
    ORDER BY skuTreeName

    OBJECTS           stb=(st=stock, bt=batch)
    PROPERTIES        READONLY stockName = name(st), nameSkuBatch(bt)
    PROPERTIES        balanceBBatchStockDateTime(bt, st, t)
    PROPERTIES(bt)    READONLY dateTimeBatch, descriptionBatch, quantityBatch, costBatch, expiryDateBatch
    FILTERS           isParentSkuGroupBatch(sk, bt),
                      isParentStockGroupStock(sg, st)
    ORDER BY          dateTimeBatch

    FILTERGROUP filterBalance
        FILTER 'Партии с остатком' 'F11' balanceBBatchStockDateTime(bt, st, t) DEFAULT
        FILTER 'Партии пришедшие за последний 1 день' 'F10' dateTimeBatch(bt) >= t - 1
        FILTER 'Партии пришедшие за последние 7 дней' 'F9' dateTimeBatch(bt) >= t - 7
        FILTER 'Партии пришедшие за последние 30 дней' 'F8' dateTimeBatch(bt) >= t - 30

    FILTERGROUP filterExpiry
        FILTER 'Партии с истекшим сроком годности' 'F7' expiryDateBatch(bt) < t
        FILTER 'Партии со сроком годности, истекающим через 1 день' 'F6' expiresBatchDateTime(bt, t, 1)
        FILTER 'Партии со сроком годности, истекающим через 7 дней' 'F5' expiresBatchDateTime(bt, t, 7)
        FILTER 'Партии со сроком годности, истекающим через 30 дней' 'F4' expiresBatchDateTime(bt, t, 30)
;

DESIGN balanceBatchStock FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            NEW firstCase {
                type = SPLITV;
                fillHorizontal = 1;
                childConstraints = TO THE BOTTOM;
                ADD t.box;
                NEW firstCaseTwo {
                    type = SPLITV;
                    ADD stockTree.tree.box {title = 'Склады';};
                    ADD skuTree.tree.box {title = 'Группы';};
                }
            }

            ADD stb.box {
                title = 'Партии';
                fillHorizontal = 2;
            };
        }

        ADD functions.box;
    }
}

NAVIGATOR {
    NEW stockCost 'Себестоимость' {
        ADD costSkuLedger;
        ADD costSkuBatchLedger;
    }
    NEW stockBalance 'Остатки' {
        NEW balanceItem 'Остатки по товару' {
            ADD currentBalanceSkuStock;
            ADD balanceSkuStock;
        }
        NEW balanceBatch 'Остатки по партиям' {
            ADD currentBalanceBatchStock;
            ADD balanceBatchStock;
        }
    }
}


// -------------------------------------------- Подбор SKU --------------------------------------- //

META defineDialogSku (form)
    form###quantity 'Кол-во' = SESSION DATA NUMERIC[14,3] (sku);

    form###stock = SESSION DATA stock ();
    form###nameStock 'Склад' () = name(form###stock()) PREFCHARWIDTH 30;

    form###balance 'Остаток' (sku) = currentBalanceSkuStock(sku, form###stock());
    form###balanceFilter (sku) = (TRUE AND form###balance(sku)) OR (sku IS sku AND NOT form###stock());

    form###all 'Весь остаток' = SESSION DATA BOOLEAN (sku);
    form###quantity(sku) <- form###balance(sku) WHEN ASSIGNED(form###all(sku));

    FORM form 'Подбор SKU'
        TREE skuTree sk = skuGroup PARENT parentSkuGroup
        PROPERTIES READONLY skuTreeName = name(sk)
        ORDER BY skuTreeName

        PROPERTIES form###nameStock()

        OBJECTS s=sku                                 //form###nameSku 'Наименование' (sku) = IF form###stock() THEN nameSkuStock(sku, form###stock()) ELSE nameSku(sku);
        PROPERTIES READONLY    inputName = nameSku(s) //form###nameSku(s)
        PROPERTIES(s)          form###quantity
        PROPERTIES(s) READONLY form###balance SHOWIF form###stock()
        PROPERTIES(s)          form###all SHOWIF form###stock()
        FILTERS                isParentSkuGroupSku(sk, s)
        FILTERS                form###balanceFilter(s)
        ORDER BY inputName

        OBJECTS si=sku
        PROPERTIES READONLY     selectedName = nameSku(si)
        PROPERTIES              form###quantity(si)
        PROPERTIES(si) READONLY form###balance SHOWIF form###stock()
        PROPERTIES(si)          form###all SHOWIF form###stock()
        FILTERS                 form###quantity(si)
        ORDER BY selectedName
    ;

    DESIGN form FROM DEFAULT {
        main {
            preferredSize = (1024, 768);
            NEW skuContainer BEFORE functions.box {
                childConstraints = TO THE RIGHT;
                type = SPLITH;

                ADD skuTree.tree.box;
                NEW inputContainer {
                    childConstraints = TO THE BOTTOM;
                    type = SPLITV;

                    NEW filterContainer {
                        childConstraints = TO THE RIGHTBOTTOM;
                        ADD PROPERTY(form###nameStock());
                    }

                    NEW inputSkuContainer {
                        childConstraints = TO THE BOTTOM;
                        type = SPLITV;

                        ADD s.box {
                            fillVertical = 3;
                            fillHorizontal = 2;
                        }
                        ADD si.box;
                    }
                }
            }
        }
    }

END

META defineAddDetailDialogSkuStock (object, skuProp, stockProp, form)
    @defineAddDetailDialogSkuStockCustom (object, object##Detail, , skuProp, stockProp, form);
END

META defineAddDetailDialogSkuStockCustom (object, detail, caption, skuProp, stockProp, form)
    @defineAddDetailDialogSkuCustom(object, detail, caption, skuProp, form);
    addDetailDialogSkuStock###detail###object 'Подбор товаров'###caption = ACTION (object) {
        SET form###stock() <- stockProp###object(object);
        EXEC addDetailDialogSku###detail###object(object AS object);
    } TOOLBAR;
END

META defineAddDetailDialogSku (object, skuProp, form)
    @defineAddDetailDialogSkuCustom(object, object##Detail, , skuProp, form);
END

META defineAddDetailDialogSkuCustom (object, detail, caption, skuProp, form)
    addDetailDialogSku###detail###object 'Подбор товаров'###caption = ACTION (object) {
        SET form###all(sku) <- NULL;
        FORM form MODAL;
        IF formResult() == formResult.ok THEN {
            FOR form###quantity(sku) DO {
                ADDOBJ detail;
                FOR w == addedObject() DO {
                    SET object###detail(w) <- object AS object;
                    SET skuProp###detail(w) <- sku AS sku;
                    SET quantity###detail(w) <- form###quantity(sku);
                }
            }
        }
        SET form###quantity(sku) <- NULL;
    } TOOLBAR;
END

@defineDialogSku(dialogSku);

// ------------------------------------------------ Стандартные значения --------------------------------------- //

loadDefaultUOM 'Добавить ед.изм.' = ACTION (stringOne, stringTwo, numeric) {
    ADDOBJ UOM;
    FOR u == addedObject() DO {
       SET name(u) <- stringOne AS STRING[110];
       SET shortName(u) <- stringTwo AS STRING[5];
       SET baseUOM(u) <- u AS UOM;
       SET factorUOM(u) <- numeric AS NUMERIC[14,3];
    }
}

loadDefaultUOMs 'Загрузить стандартные единицы измерений' = ACTION () {
    EXEC loadDefaultUOM('Банка', 'бан', 1);
    EXEC loadDefaultUOM('Бутылка', 'бут', 1);
    EXEC loadDefaultUOM('Килограмм', 'кг', 1);
    EXEC loadDefaultUOM('Коробка', 'кор', 1);
    EXEC loadDefaultUOM('Литр', 'л', 1);
    EXEC loadDefaultUOM('Место', 'мест', 1);
    EXEC loadDefaultUOM('Мешок', 'меш', 1);
    EXEC loadDefaultUOM('Пакет', 'пак', 1);
    EXEC loadDefaultUOM('Пачка', 'пач', 1);
    EXEC loadDefaultUOM('Рубль', 'руб', 1);
    EXEC loadDefaultUOM('Рулон', 'рул', 1);
    EXEC loadDefaultUOM('Упаковка', 'упак', 1);
    EXEC loadDefaultUOM('Штука', 'шт', 1);
    EXEC loadDefaultUOM('Ящик', 'ящ', 1);
    EXEC loadDefaultUOM('Десяток', 'дес', 1);
    EXEC loadDefaultUOM('Изделие', 'изд', 1);
    EXEC loadDefaultUOM('Набор', 'набор', 1);
    EXEC loadDefaultUOM('Пара', 'пар', 1);
    EXEC loadDefaultUOM('Погонный метр', 'пог.м', 1);
    EXEC loadDefaultUOM('Условный метр', 'усл.м', 1);
    EXEC loadDefaultUOM('Номер', 'ном', 1);
    EXEC loadDefaultUOM('Лист', 'л.', 1);
    EXEC loadDefaultUOM('Элемент', 'элем', 1);
    EXEC loadDefaultUOM('Единица', 'ед', 1);
    EXEC loadDefaultUOM('Комплект', 'компл', 1);
    EXEC loadDefaultUOM('Флакон', 'флак', 1);
    EXEC loadDefaultUOM('Ампула', 'ампул', 1);
} IN loadDefaultGroup;

@implementLoadDefaultData(loadDefaultUOMs);
