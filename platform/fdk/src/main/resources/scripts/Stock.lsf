MODULE Stock;

REQUIRE System, Utils, Hierarchy, LegalEntity;

// ----------------------------------- Склады ------------------------------------------ //

CLASS ABSTRACT stockGroup 'Группа складов' : named;
@defineHierarchyAbstract(stockGroup);

CLASS ABSTRACT stock 'Склад' : named;
TABLE stock(stock);

stockGroupStock (stock) = ABSTRACT stockGroup (stock);
//legalEntityStock (stock) = ABSTRACT legalEntity (stock);
//nameLegalEntityStock 'Юр. лицо' (stock) = name(legalEntityStock(stock));
addressStock 'Адрес' (stock) = ABSTRACT STRING[100] (stock);

isParentStockGroupStock (stockGroup, stock) = isParentStockGroupStockGroup(stockGroupStock(stock), stockGroup) PERSISTENT;

// ----------------------------------- Единицы измерения ------------------------------------------ //

CLASS UOM 'Единица измерения' : doubleNamed, externalObject;
TABLE UOM (UOM);

baseUOM = DATA UOM(UOM) IN idGroup;
shortNameBaseUOM 'Базовая ед.изм.' (UOM) = shortName(baseUOM(UOM)) IN baseGroup;
factorUOM 'Коэффициент пересчета в баз.ед.' = DATA NUMERIC[14,3] (UOM) IN baseGroup;

FORM UOM 'Единица измерения'
OBJECTS u=UOM FIXED PANEL
PROPERTIES(u) name, shortName, shortNameBaseUOM, factorUOM
EDIT UOM OBJECT u;

FORM unitsOfMeasure 'Единицы измерений'
OBJECTS u=UOM
PROPERTIES(u) READONLY name, shortName, shortNameBaseUOM, factorUOM
PROPERTIES(u) ADDFORM, EDITFORM, delete;

// ----------------------------------- Sku ------------------------------------------ //

CLASS ABSTRACT skuGroup 'Группа SKU' : named;
@defineHierarchyAbstract(skuGroup);

CLASS ABSTRACT sku 'SKU';
TABLE sku(sku);

skuGroupSku (sku) = ABSTRACT skuGroup (sku);
nameSku 'Наименование' (sku) = ABSTRACT STRING[200] (sku) PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 80 INDEXED AGGPROP IN recognizeGroup;

UOMSku (sku) = ABSTRACT UOM (sku);
shortNameUOMSku (sku) = shortName(UOMSku(sku)) IN recognizeGroup;

isParentSkuGroupSku (skuGroup, sku) = isParentSkuGroupSkuGroup(skuGroupSku(sku), skuGroup) PERSISTENT;

// ----------------------------------- Ledger ------------------------------------------ //

CLASS ABSTRACT skuLedger 'Изменение остатка по товару';
TABLE skuLedger (skuLedger);

CLASS ABSTRACT inSkuLedger 'Приход' : skuLedger;
CLASS ABSTRACT outSkuLedger 'Расход' : skuLedger;

CLASS ABSTRACT outUserSkuLedger 'Внешний расход с указанной партией' : outSkuLedger;
CLASS ABSTRACT outAutoSkuLedger 'Внешний расход с автоматической себестоимостью' : outSkuLedger;

CLASS ABSTRACT inAutoSkuLedger 'Внутренний приход с автоматической себестоимостью' : inSkuLedger;

CLASS ABSTRACT inTransferSkuLedger 'Внутренний приход по перемещению' : inSkuLedger;

// --------------------------------- Партии ------------------------------------------------ //

CLASS ABSTRACT batch 'Партия' : inSkuLedger;
TABLE batch(batch);
TABLE skuLedgerBatch (skuLedger, batch);
TABLE batchStock(batch, stock);

dateTimeBatch 'Дата/время' (batch) = ABSTRACT DATETIME (batch) PERSISTENT INDEXED;
dateBatch 'Дата' (batch) = dateInTime(dateTimeBatch(batch));

isPostedBatch 'Закрыт' (batch) = ABSTRACT BOOLEAN (batch) PERSISTENT;

skuBatch (batch) = ABSTRACT sku (batch) PERSISTENT INDEXED;
nameSkuBatch 'Наименование' (batch) = nameSku(skuBatch(batch));

supplierPriceBatch 'Цена поставщика' (batch) = ABSTRACT NUMERIC[14,2] (batch) PERSISTENT;
descriptionBatch 'Описание' (batch) = ABSTRACT STRING[200] (batch) PERSISTENT;

expiryDateBatch 'Годен до' (batch) = ABSTRACT DATE (batch) PERSISTENT INDEXED;
expiresBatchDateTime(batch, dateTime, period) = expiryDateBatch(batch) < sumDate(dateInTime(dateTime), period);
expiresBatchDate(batch, date, period) = expiryDateBatch(batch) < sumDate(date, period);

orderBatch (batch) = LIST (dateTimeBatch(batch), batch) PERSISTENT;

isSkuBatch (batch, sku) = skuBatch(batch) == sku;

isParentSkuGroupBatch (skuGroup, batch) = isParentSkuGroupSku(skuGroup, skuBatch(batch));

//---------------------------- Количественные регистры (конкретная реализация) ----------------------------------------//

dateTimeSkuLedger 'Дата/время' = ABSTRACT DATETIME (skuLedger) PERSISTENT INDEXED;
dateSkuLedger 'Дата' (ledger) = dateInTime(dateTimeSkuLedger(ledger)) PERSISTENT;

orderSkuLedger (ledger) = LIST(dateTimeSkuLedger(ledger), ledger);

isPostedSkuLedger 'Закрыт' = ABSTRACT BOOLEAN (skuLedger) PERSISTENT;

skuSkuLedger = ABSTRACT sku (skuLedger) PERSISTENT INDEXED;
nameSkuSkuLedger 'SKU' (ledger) = nameSku(skuSkuLedger(ledger));

stockSkuLedger = ABSTRACT stock(skuLedger) PERSISTENT INDEXED;
nameStockSkuLedger 'Склад' (ledger) = name(stockSkuLedger(ledger));

descriptionSkuLedger 'Название документа' = ABSTRACT STRING[200] (skuLedger);

quantityBatch 'Кол-во в партии' = ABSTRACT NUMERIC[14,3] (batch) PERSISTENT;

quantityOutAutoSkuLedger 'Кол-во' = ABSTRACT NUMERIC[14,3] (outAutoSkuLedger);

quantityOutUserSkuLedger 'Кол-во' = ABSTRACT NUMERIC[14,3] (outUserSkuLedger);
batchOutUserSkuLedger 'Партия' = ABSTRACT batch (outUserSkuLedger);

quantityOutSkuLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityOutAutoSkuLedger(ledger),
                                                         quantityOutUserSkuLedger(ledger) PERSISTENT;

quantityInAutoSkuLedger 'Кол-во' (ledger) = ABSTRACT NUMERIC[14,3] (inAutoSkuLedger);

quantityInTransferSkuLedger 'Кол-во' (ledger) = ABSTRACT NUMERIC[14,3] (inTransferSkuLedger);

quantityInSkuLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityBatch(ledger),
                                                        quantityInAutoSkuLedger(ledger),
                                                        quantityInTransferSkuLedger(ledger) PERSISTENT;

quantitySkuLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityInSkuLedger(ledger),
                                                      quantityOutSkuLedger(ledger) PERSISTENT;

signedQuantitySkuLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityInSkuLedger(ledger),
                                                            -quantityOutSkuLedger(ledger) PERSISTENT;

// ---------------------------- Учетные цены и суммы ------------------------------- //

// сумма операции
sumInSkuLedger 'Сумма' (ledger) = ABSTRACT NUMERIC[16,2] (inSkuLedger) PERSISTENT;
sumOutSkuLedger 'Сумма' (ledger) = ABSTRACT NUMERIC[16,2] (outSkuLedger) PERSISTENT;

signedSumSkuLedger 'Сумма' (ledger) = UNION EXCLUSIVE sumInSkuLedger(ledger),
                                                      -sumOutSkuLedger(ledger) PERSISTENT;

// управленческие цены
priceSkuStockDateTime 'Цена' (sku, stock, dateTime) = ABSTRACT NUMERIC[14,2] (sku, stock, DATETIME);

// ---------------------------- Остаток по товару -------------------------------- //

TABLE stockSku(stock, sku);

currentBalanceSkuStock 'Текущий остаток' (sku, stock) = GROUP SUM signedQuantitySkuLedger (ledger) AND isPostedSkuLedger(ledger)
                                                          BY skuSkuLedger(ledger), stockSkuLedger(ledger) PERSISTENT;
countLedgerSkuStock 'Кол-во движений' (sku, stock) = GROUP SUM 1 AND signedQuantitySkuLedger (ledger) AND isPostedSkuLedger(ledger)
                                                          BY skuSkuLedger(ledger), stockSkuLedger(ledger) PERSISTENT;

quantityInSkuStockDate (sku, stock, date) = GROUP SUM quantityInSkuLedger(ledger) AND isPostedSkuLedger(ledger)
                                                  BY skuSkuLedger(ledger), stockSkuLedger(ledger), dateSkuLedger(ledger) PERSISTENT;

quantityOutSkuStockDate (sku, stock, date) = GROUP SUM quantityOutSkuLedger(ledger) AND isPostedSkuLedger(ledger)
                                                   BY skuSkuLedger(ledger), stockSkuLedger(ledger), dateSkuLedger(ledger) PERSISTENT;

quantitySkuStockDate (sku, stock, date) = quantityInSkuStockDate(sku, stock, date)
                                          (+)
                                          quantityOutSkuStockDate(sku, stock, date) PERSISTENT;

signedQuantitySkuStockDate (sku, stock, date) = quantityInSkuStockDate(sku, stock, date)
                                                (-)
                                                quantityOutSkuStockDate(sku, stock, date) PERSISTENT;

// без учета текущей даты/времени
balanceBSkuStockDate 'Остаток на начало дня' (sku, stock, date) = (currentBalanceSkuStock(sku, stock) AND date AS DATE)
                                                                  (-) [GROUP SUM signedQuantitySkuStockDate (sku, stock, dateIn) AND dateIn >= (date AS DATE)
                                                                             BY sku, stock, date](sku, stock, date);

// с учетом текущей даты/времени
balanceASkuStockDate 'Остаток на конец дня' (sku, stock, date) = (currentBalanceSkuStock(sku, stock) AND date AS DATE)
                                                                 (-) [GROUP SUM signedQuantitySkuStockDate (sku, stock, dateIn) AND dateIn > (date AS DATE)
                                                                            BY sku, stock, date](sku, stock, date);

// без учета текущей даты/времени
balanceBSkuStockDateTime 'Остаток на начало дня' (sku, stock, dateTime) = (currentBalanceSkuStock(sku, stock) AND dateTime AS DATETIME)
                                                                          (-) [GROUP SUM signedQuantitySkuLedger (ledger) AND dateTimeSkuLedger(ledger) >= (dateTime AS DATETIME) AND isPostedSkuLedger(ledger)
                                                                                     BY skuSkuLedger(ledger), stockSkuLedger(ledger), dateTime](sku, stock, dateTime);

// с учетом текущей даты/времени
balanceASkuStockDateTime 'Остаток на конец дня' (sku, stock, dateTime) = (currentBalanceSkuStock(sku, stock) AND dateTime AS DATETIME)
                                                                         (-) [GROUP SUM signedQuantitySkuLedger (ledger) AND dateTimeSkuLedger(ledger) > (dateTime AS DATETIME) AND isPostedSkuLedger(ledger)
                                                                                    BY skuSkuLedger(ledger), stockSkuLedger(ledger), dateTime](sku, stock, dateTime);

costSkuLedgerBatch 'Расписано из партии' (ledger, batch) = DATA NUMERIC[14,3] (skuLedger, batch);

signedCostSkuLedgerBatch (ledger, batch) = IF ledger IS outSkuLedger
                                              THEN -costSkuLedgerBatch(ledger, batch)
                                              ELSE costSkuLedgerBatch(ledger, batch);

currentBalanceBatchStock 'Текущий остаток' (batch, stock) = GROUP SUM signedCostSkuLedgerBatch (ledger, batch) AND isPostedSkuLedger(ledger)
                                                                  BY batch, stockSkuLedger(ledger) PERSISTENT;

expiryDateSkuStock 'Годен до (max.)' (sku, stock) = GROUP MAX expiryDateBatch(batch) IF currentBalanceBatchStock(batch, stock)
                                                          BY skuBatch(batch), stock PERSISTENT;

// ---------------------------- Суммы по товару -------------------------------- //

currentSumSkuStock 'Сумма остатка' (sku, stock) = GROUP SUM signedSumSkuLedger (ledger) AND isPostedSkuLedger(ledger)
                                                        BY skuSkuLedger(ledger), stockSkuLedger(ledger) PERSISTENT;

averagePriceSkuStock 'Цена (средневзв.)' (sku, stock) = currentSumSkuStock(sku, stock) / currentBalanceSkuStock(sku, stock) IF NOT currentBalanceSkuStock(sku, stock) == 0;

// -------------------------------------- Последнее движение ---------------------------------- //

dateLastMovedSkuStock 'Дата последнего движения товара' (sku, stock) =
    GROUP MAX dateTimeSkuLedger(ledger)
    BY skuSkuLedger(ledger), stockSkuLedger(ledger) PERSISTENT;

movedSkuStockDateTimePeriod (item, departmentStore, dateTime, period) =
    dateLastMovedSkuStock(item, departmentStore) >= subtractDate(dateInTime(dateTime), period AS INTEGER);

balanceSkuStockDateTimePeriod (item, departmentStore, dateTime, period) =
    movedSkuStockDateTimePeriod (item, departmentStore, dateTime, period) OR (period IS INTEGER) IF balanceASkuStockDateTime(item, departmentStore, dateTime);

movedSkuStockDatePeriod (item, departmentStore, date, period) =
    dateLastMovedSkuStock(item, departmentStore) >= subtractDate(date, period AS INTEGER);

balanceSkuStockDatePeriod (item, departmentStore, date, period) =
    movedSkuStockDatePeriod (item, departmentStore, date, period) OR (period IS INTEGER) IF balanceASkuStockDate(item, departmentStore, date);

//----------------------------------------- По партиям ---------------------------------------------//
// без учета текущей даты/времени
balanceBBatchStockDate 'Остаток на начало дня' (batch, stock, date) = (currentBalanceBatchStock(batch, stock) AND date AS DATE)
    (-) [GROUP SUM signedCostSkuLedgerBatch (ledger, batch) AND isPostedSkuLedger(ledger) AND dateSkuLedger(ledger) >= (date AS DATE)
    BY batch, stockSkuLedger(ledger), date](batch, stock, date);

// с учетом текущей даты/времени
balanceABatchStockDate 'Остаток на конец дня' (batch, stock, date) = (currentBalanceBatchStock(batch, stock) AND date AS DATE)
    (-) [GROUP SUM signedCostSkuLedgerBatch (ledger, batch) AND isPostedSkuLedger(ledger) AND dateSkuLedger(ledger) > (date AS DATE)
    BY batch, stockSkuLedger(ledger), date](batch, stock, date);

// без учета текущей даты/времени
 balanceBStockBatchDateTime 'Остаток на начало дня' (batch, stock, dateTime) = (currentBalanceBatchStock(batch, stock) AND dateTime AS DATETIME)
    (-) [GROUP SUM signedCostSkuLedgerBatch (ledger, batch) AND isPostedSkuLedger(ledger) AND dateTimeSkuLedger(ledger) >= (dateTime AS DATETIME)
    BY batch, stockSkuLedger(ledger), dateTime](batch, stock, dateTime);

// с учетом текущей даты/времени
 balanceAStockBatchDateTime 'Остаток на конец дня' (batch, stock, dateTime) = (currentBalanceBatchStock(batch, stock) AND dateTime AS DATETIME)
    (-) [GROUP SUM signedCostSkuLedgerBatch (ledger, batch) AND isPostedSkuLedger(ledger) AND dateTimeSkuLedger(ledger) > (dateTime AS DATETIME)
    BY batch, stockSkuLedger(ledger), dateTime](batch, stock, dateTime);

// --------------------------------------- Суммы ----------------------------------------------------- //

supplierSumBatchStockDateFrom 'Сумма на начало' (batch, stock, dateFrom) = supplierPriceBatch(batch) * balanceBBatchStockDate(batch, stock, dateFrom);

supplierSumBatchStockDateTo 'Сумма на конец' (batch, stock, dateTo) = supplierPriceBatch(batch) * balanceABatchStockDate(batch, stock, dateTo);

//---------------------------------------------- За период ------------------------------------------//

costInBalanceBatchStockDateFromTo 'Приход' (batch, stock, dateFrom, dateTo) = GROUP SUM costSkuLedgerBatch (ledger, batch)
    IF ledger IS inSkuLedger AND isPostedSkuLedger(ledger)
    AND dateSkuLedger(ledger) >= (dateFrom AS DATE)  AND dateSkuLedger(ledger)<= (dateTo AS DATE)
    BY batch, stockSkuLedger(ledger), dateFrom, dateTo;

supplierSumInBalanceBatchStockDateFromTo 'Сумма прихода' (batch, stock, dateFrom, dateTo) =
    supplierPriceBatch(batch) * costInBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo);

costOutBalanceBatchStockDateFromTo 'Расход' (batch, stock, dateFrom, dateTo) = GROUP SUM costSkuLedgerBatch (ledger, batch)
    IF ledger IS outSkuLedger AND isPostedSkuLedger(ledger)
    AND dateSkuLedger(ledger) >= (dateFrom AS DATE)  AND dateSkuLedger(ledger)<= (dateTo AS DATE)
    BY batch, stockSkuLedger(ledger), dateFrom, dateTo;

supplierSumOutBalanceBatchStockDateFromTo 'Сумма расхода' (batch, stock, dateFrom, dateTo) =
    supplierPriceBatch(batch) * costOutBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo);

costedSkuLedger 'Расписано' (ledger) = GROUP SUM costSkuLedgerBatch (ledger, batch) BY ledger PERSISTENT;

needToCostSkuLedger 'Требуется расчет себестоимости' (ledger) = quantitySkuLedger(ledger) > 0 AND isPostedSkuLedger(ledger)
                                                                        AND NOT quantitySkuLedger(ledger) == costedSkuLedger(ledger);

quantityBatchBatch 'Кол-во' (ledger, batch) = quantityBatch(ledger) AND batch == ledger;

currentBalanceBatch 'Остаток (всего)' (batch) = GROUP SUM currentBalanceBatchStock(batch, stock) BY batch PERSISTENT;

quantityOutUserSkuLedgerBatch (ledger, batch) = quantityOutUserSkuLedger(ledger) AND batch == batchOutUserSkuLedger(ledger);
quantityOutAutoSkuLedgerBatch (ledger, batch) =
        PARTITION UNGROUP quantityOutAutoSkuLedger
                  LIMIT currentBalanceBatchStock(batch, stockSkuLedger(ledger)) AND skuBatch(batch) == skuSkuLedger(ledger)
                  BY ledger
                  ORDER orderBatch(batch);

quantityOutSkuLedgerBatch (ledger, batch) = UNION EXCLUSIVE quantityOutUserSkuLedgerBatch(ledger, batch),
                                                            quantityOutAutoSkuLedgerBatch(ledger, batch);

quantityInSkuLedgerBatch (ledger, batch) =
        PARTITION UNGROUP quantityInAutoSkuLedger
                  LIMIT (quantityBatch(batch) (-) currentBalanceBatch(batch))
                    AND countLedgerSkuStock(skuSkuLedger(ledger), stockSkuLedger(ledger))
                    AND skuBatch(batch) == skuSkuLedger(ledger)
                  BY ledger
                  ORDER DESC orderBatch(batch);

limitInTransferSkuLedgerBatch = ABSTRACT NUMERIC[14,3] (inTransferSkuLedger, batch);

quantityInTransferSkuLedgerBatch (ledger, batch) =
        PARTITION UNGROUP quantityInTransferSkuLedger
                  LIMIT limitInTransferSkuLedgerBatch(ledger, batch)
                    AND skuBatch(batch) == skuSkuLedger(ledger)
                  BY ledger
                  ORDER DESC orderBatch(batch);

quantitySkuLedgerBatch (ledger, batch) = UNION EXCLUSIVE quantityBatchBatch(ledger, batch),
                                                         quantityOutSkuLedgerBatch(ledger, batch),
                                                         quantityInSkuLedgerBatch(ledger, batch),
                                                         quantityInTransferSkuLedgerBatch(ledger, batch);

supplierSumSkuLedgerBatch 'Сумма поставщика без НДС' (ledger, batch) = costSkuLedgerBatch(ledger, batch) * supplierPriceBatch(batch);
supplierSumSkuLedger 'Сумма поставщика без НДС' = GROUP SUM supplierSumSkuLedgerBatch(ledger, batch) BY ledger;

resetCostSkuLedgerBatch 'Перерассчитать себестоимость' = ACTION (ledger) NEWSESSION AUTOAPPLY {
    IF costedSkuLedger(ledger) THEN {
        SET costSkuLedgerBatch(ledger, batch) <- NULL;
        EXEC apply(); // todo : здесь apply не нужен, но без этого следующая команда повиснет
    }
    SET costSkuLedgerBatch(ledger, batch) <- quantitySkuLedgerBatch(ledger, batch);
}

// мгновенный расчет себестоимости
resetCostSkuLedgerBatch (ledger) WHEN ASSIGNED(isPostedSkuLedger(ledger));

setSkuLedgerBatchCost 'Дорассчитать себестоимость' = ACTION () NEWSESSION {

    SET costSkuLedgerBatch(ledger, batch) AND needToCostSkuLedger(ledger) <- NULL;
    EXEC apply();

    FOR needToCostSkuLedger(ledger) ORDER orderSkuLedger(ledger) DO {
        SET costSkuLedgerBatch(ledger, batch) <- quantitySkuLedgerBatch(ledger, batch);
        EXEC apply();
    }
} CONFIRM;

resetSkuLedgerBatchCost 'Перерассчитать себестоимость' = ACTION () NEWSESSION {
    FORM dialogDate MODAL;
    IF formResult() == formResult.ok THEN {

        FOR d == chosenDate('d') DO {
            SET costSkuLedgerBatch(ledger, batch) AND dateSkuLedger(ledger) >= (d AS DATE) <- NULL;
            EXEC apply();

            FOR dateSkuLedger(ledger) >= (d AS DATE) AND isPostedSkuLedger(ledger) ORDER orderSkuLedger(ledger) DO {
                SET costSkuLedgerBatch(ledger, batch) <- quantitySkuLedgerBatch(ledger, batch);
                EXEC apply();
            }
        }
    }
} CONFIRM;

clearSkuLedgerBatchCost 'Сбросить всю себестоимость' = ACTION() NEWSESSION AUTOAPPLY {
    SET costSkuLedgerBatch(ledger, batch) <- NULL;
} CONFIRM;

// ---------------------------------------------- Макросы ------------------------------------------------- //

META implementSkuLedger(concrete, skuProp, stockProp)
    dateTimeSkuLedger (ledger) += dateTime###concrete##Detail(ledger);
    isPostedSkuLedger (ledger) += isPosted###concrete##Detail(ledger);
    descriptionSkuLedger (ledger) += description###concrete##Detail(ledger);
    skuSkuLedger (ledger) += skuProp###concrete##Detail(ledger);
    stockSkuLedger (ledger) += stockProp###concrete##Detail(ledger);
END

META implementBatch(concrete, skuProp)
    dateTimeBatch (batch) += dateTime###concrete##Detail(batch);
    isPostedBatch (batch) += isPosted###concrete##Detail(batch);
    descriptionBatch (batch) += description###concrete##Detail(batch);
    skuBatch (batch) += skuProp###concrete##Detail(batch);
    supplierPriceBatch (batch) += supplierPrice###concrete##Detail(batch);
END

// ---------------------------------------------- Макросы для документов ------------------------------------------------- //

META defineDocumentDetailAggregationSkuPrefix (primObject, aggrObject, skuProp, prefix)
    sku###aggrObject##Detail (detail) = prefix###skuProp###primObject##Detail(primObject##Detail###aggrObject##Detail(detail));
    nameSku###aggrObject##Detail 'SKU' (detail) = nameSku(sku###aggrObject##Detail(detail));
    idBarcodeSku###aggrObject##Detail 'Штрих-код' (detail) = idBarcodeSku(sku###aggrObject##Detail(detail));
END
META defineDocumentDetailAggregationSku (primObject, aggrObject, skuProp)
    @defineDocumentDetailAggregationSkuPrefix(primObject, aggrObject, skuProp, );
END

// ---------------------------------------------- Учетные суммы -------------------------------------------- //

META defineDocumentDetailPrice (object)
    price###object##Detail 'Цена' = DATA NUMERIC[14,2] (object##Detail) IN baseGroup;
END

META defineDocumentDetailSumCustom (object, detail)
    sum###detail 'Сумма' (detail) = quantity###detail(detail) * price###detail(detail);
END
META defineDocumentDetailSum (object)
    @defineDocumentDetailSumCustom(object, object##Detail);
END

META defineDocumentHeaderSumCustom (object, detail)
    sum###detail###object 'Сумма' (object) = GROUP SUM sum###detail(idetail) BY object###detail(idetail) IN documentSumGroup;
END
META defineDocumentHeaderSum (object)
    @defineDocumentHeaderSumCustom(object, object##Detail);
END

META derivePriceOnSkuChange(concrete, skuProp, stockProp)
    price###concrete##Detail (detail)  <- priceSkuStockDateTime(
                    skuProp###concrete##Detail(detail), stockProp###concrete##Detail(detail), dateTime###concrete##Detail(detail))
                    WHEN CHANGED(skuProp###concrete##Detail(detail));
END

// ----------------------------------------------- Формы --------------------------------------------------- //

FORM costSkuLedger 'Себестоимость (операции)'
    OBJECTS bil = skuLedger
    PROPERTIES(bil) READONLY dateTimeSkuLedger, descriptionSkuLedger, nameSkuSkuLedger, nameStockSkuLedger,
                             quantitySkuLedger, costedSkuLedger
    PROPERTIES(bil)          resetCostSkuLedgerBatch
    ORDER BY dateTimeSkuLedger

    FILTERGROUP needToCostSkuLedger
        FILTER 'Нерасписанные строки' 'F9' needToCostSkuLedger(bil)

    OBJECTS bt = batch
    PROPERTIES(bt) READONLY dateTimeBatch, descriptionBatch, quantityBatch, supplierPriceBatch, currentBalanceBatch
    PROPERTIES(bil, bt)     costSkuLedgerBatch FORCE GRID
    FILTERS skuBatch(bt) == skuSkuLedger(bil)
    ORDER BY dateTimeBatch DESC

    FILTERGROUP inSkuLedgerBatch
        FILTER 'Только расписанные партии' 'F10' costSkuLedgerBatch (bil, bt) DEFAULT

    PROPERTIES() setSkuLedgerBatchCost, resetSkuLedgerBatchCost, clearSkuLedgerBatchCost
;


DESIGN costSkuLedger FROM DEFAULT {
    NEW topContainer{
        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD bil.box;
        ADD bt.box;
    }

    NEW buttonContainer {
        childConstraints = TO THE RIGHT;
        ADD PROPERTY(setSkuLedgerBatchCost);
        ADD PROPERTY(resetSkuLedgerBatchCost);
        ADD PROPERTY(clearSkuLedgerBatchCost);
    }

    ADD functions.box;
}

FORM costSkuBatchLedger 'Себестоимость (партии)'
    OBJECTS i = sku FIXED PANEL
    PROPERTIES(i) SELECTOR nameSku//, idBarcodeSku

    OBJECTS bt = batch
    PROPERTIES(bt) READONLY dateTimeBatch, descriptionBatch, quantityBatch, supplierPriceBatch, currentBalanceBatch

    OBJECTS bil = skuLedger
    PROPERTIES(bil) READONLY dateTimeSkuLedger, descriptionSkuLedger, nameStockSkuLedger,
                             quantitySkuLedger, costedSkuLedger
//    PROPERTIES(bil)          resetCostSkuLedgerBatch
    ORDER BY dateTimeSkuLedger

    FILTERGROUP needToCostSkuLedger
        FILTER 'Нерасписанные строки' 'F9' needToCostSkuLedger(bil)


    PROPERTIES(bil, bt)     READONLY costSkuLedgerBatch FORCE GRID
    FILTERS skuBatch(bt) == i,
            skuSkuLedger(bil) == i

    ORDER BY dateTimeBatch DESC

    FILTERGROUP inSkuLedgerBatch
        FILTER 'Только расписанные партии' 'F10' costSkuLedgerBatch (bil, bt) DEFAULT
;

DESIGN costSkuBatchLedger FROM DEFAULT {
    NEW topContainer {
        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD bt.box;
        ADD bil.box;
    }
    ADD functions.box;
}

// ------------------------------------------------ Остатки по товарам ---------------------------------------- //

FORM currentBalanceSkuStock 'Текущие остатки'

    TREE stockTree sg = stockGroup PARENT parentStockGroup
    PROPERTIES READONLY sgTreeName = name(sg)

    TREE skuTree sk = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = name(sk)
    ORDER BY skuTreeName

    OBJECTS           sts=(st=stock, s=sku)
    PROPERTIES        READONLY nameSku(s), stockName = name(st)  //  idBarcodeSku
    FILTERS           isParentSkuGroupSku(sk, s)//,
                      //isParentStockGroupStock(sg, st)
    ORDER BY          nameSku


    PROPERTIES(s, st) READONLY currentBalanceSkuStock, averagePriceSkuStock, currentSumSkuStock, dateLastMovedSkuStock

    FILTERGROUP filters
        FILTER 'Товары с остатком' 'F10' currentBalanceSkuStock(s, st) DEFAULT
        FILTER 'Товары с движением не позднее 1 дня' 'F9' balanceSkuStockDatePeriod(s, st, currentDate(), 1)
        FILTER 'Товары с движением не позднее 7 дней' 'F8' balanceSkuStockDatePeriod(s, st, currentDate(), 7)
        FILTER 'Товары с движением не позднее 30 дней' 'F7' balanceSkuStockDatePeriod(s, st, currentDate(), 30)

    OBJECTS bil=skuLedger
    PROPERTIES(bil) descriptionSkuLedger, dateTimeSkuLedger, signedQuantitySkuLedger READONLY
    FILTERS isPostedSkuLedger(bil) AND skuSkuLedger(bil)==s AND stockSkuLedger(bil)==st
    ORDER BY dateTimeSkuLedger DESC

    OBJECTS bt=batch
    PROPERTIES(bt) READONLY      dateTimeBatch, descriptionBatch, quantityBatch, supplierPriceBatch
    PROPERTIES(bt, st) READONLY  currentBalanceBatchStock
    FILTERS isPostedBatch(bt) AND skuBatch(bt)==s
    ORDER BY dateTimeBatch DESC
;

DESIGN currentBalanceSkuStock FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;

            NEW firstBottom {
                type = SPLITV;
                ADD stockTree.tree.box {title = 'Склады';};
                ADD skuTree.tree.box {title = 'Группы';};
            }

            NEW secondCase {
                type = SPLITV;
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD sts.box { fillVertical = 2; }

                NEW ledger.box {
                    fillVertical = 1;
                    title = 'Изменение цен';
                    type = TABBED;
                    ADD bil.box;
                    ADD bt.box;
                }
            }
        }

        ADD functions.box;
    }
}

FORM balanceSkuStock 'Остатки на дату'

    OBJECTS t=DATETIME FIXED PANEL
    PROPERTIES(t) OBJVALUE

    TREE stockTree sg = stockGroup PARENT parentStockGroup
    PROPERTIES READONLY sgTreeName = name(sg)

    TREE skuTree sk = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = name(sk)
    ORDER BY skuTreeName

    OBJECTS           sts=(st=stock, s=sku)
    PROPERTIES        READONLY nameSku(s), stockName = name(st)  //  idBarcodeSku
    FILTERS           isParentSkuGroupSku(sk, s),
                      isParentStockGroupStock(sg, st)

    PROPERTIES(s, st, t) READONLY balanceASkuStockDateTime
    PROPERTIES(s, st) READONLY dateLastMovedSkuStock

    FILTERGROUP filters
        FILTER 'Товары с остатком' 'F10' balanceASkuStockDateTime(s, st, t) DEFAULT
        FILTER 'Товары с движением не позднее 1 дня' 'F9' balanceSkuStockDateTimePeriod(s, st, t, 1)
        FILTER 'Товары с движением не позднее 7 дней' 'F8' balanceSkuStockDateTimePeriod(s, st, t, 7)
        FILTER 'Товары с движением не позднее 30 дней' 'F7' balanceSkuStockDateTimePeriod(s, st, t, 30)

    OBJECTS bil=skuLedger
    PROPERTIES(bil) descriptionSkuLedger, dateTimeSkuLedger, signedQuantitySkuLedger READONLY
    FILTERS isPostedSkuLedger(bil) AND skuSkuLedger(bil)==s AND stockSkuLedger(bil)==st
    ORDER BY dateTimeSkuLedger DESC
;

DESIGN balanceSkuStock FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            NEW firstCase {
                type = SPLITV;
                fillHorizontal = 1;
                childConstraints = TO THE BOTTOM;
                ADD t.box;
                NEW firstCaseTwo {
                    type = SPLITV;
                    ADD stockTree.tree.box {title = 'Склады';};
                    ADD skuTree.tree.box {title = 'Группы';};
                }
            }

            NEW secondCase {
                type = SPLITV;
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD sts.box {fillVertical = 2;}

                NEW ledger.box {
                    fillVertical = 1;
                    title = 'Регистры';
                    type = TABBED;
                    ADD bil.box;
                }

            }
        }

        ADD functions.box;
    }
}

// ------------------------------------------------ Остатки по партиям ---------------------------------------- //

FORM currentBalanceBatchStock 'Текущие остатки по партиям'

    TREE stockTree sg = stockGroup PARENT parentStockGroup
    PROPERTIES READONLY sgTreeName = name(sg)

    TREE skuTree sk = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = name(sk)
    ORDER BY skuTreeName

    OBJECTS           stb=(st=stock, bt=batch)
    PROPERTIES        READONLY stockName = name(st), nameSkuBatch(bt)
    PROPERTIES        currentBalanceBatchStock(bt, st)
    PROPERTIES(bt)    READONLY dateTimeBatch, descriptionBatch, quantityBatch, supplierPriceBatch, expiryDateBatch
    FILTERS           isParentSkuGroupBatch(sk, bt),
                      isParentStockGroupStock(sg, st)
    ORDER BY          dateTimeBatch

    OBJECTS bil=skuLedger
    PROPERTIES(bil) descriptionSkuLedger, dateTimeSkuLedger, signedQuantitySkuLedger READONLY
    FILTERS isPostedSkuLedger(bil) AND skuSkuLedger(bil)==skuBatch(bt) AND stockSkuLedger(bil)==st
    ORDER BY dateTimeSkuLedger DESC

    FILTERGROUP filterBalance
        FILTER 'Партии с остатком' 'F11' currentBalanceBatchStock(bt, st) DEFAULT
        FILTER 'Партии пришедшие за последний 1 день' 'F10' dateTimeBatch(bt) >= currentDate() - 1
        FILTER 'Партии пришедшие за последние 7 дней' 'F9' dateTimeBatch(bt) >= currentDate() - 7
        FILTER 'Партии пришедшие за последние 30 дней' 'F8' dateTimeBatch(bt) >= currentDate() - 30

    FILTERGROUP filterExpiry
        FILTER 'Партии с истекшим сроком годности' 'F7' expiryDateBatch(bt) < currentDate()
        FILTER 'Партии со сроком годности, истекающим через 1 день' 'F6' expiresBatchDate(bt, currentDate(), 1)
        FILTER 'Партии со сроком годности, истекающим через 7 дней' 'F5' expiresBatchDate(bt, currentDate(), 7)
        FILTER 'Партии со сроком годности, истекающим через 30 дней' 'F4' expiresBatchDate(bt, currentDate(), 30)
;

DESIGN currentBalanceBatchStock FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            NEW firstCase {
                type = SPLITV;
                fillHorizontal = 1;
                childConstraints = TO THE BOTTOM;
                ADD stockTree.tree.box {title = 'Склады';};
                ADD skuTree.tree.box {title = 'Группы';};
            }

            NEW secondCase {
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD stb.box {
                    title = 'Партии';

                }
                ADD bil.box {
                    title = 'Движение';
                }
            }
        }

        ADD functions.box;
    }
}

FORM balanceBatchStock 'Остатки по партиям на дату'

    OBJECTS t=DATETIME FIXED PANEL
    PROPERTIES(t) OBJVALUE

    TREE stockTree sg = stockGroup PARENT parentStockGroup
    PROPERTIES READONLY sgTreeName = name(sg)

    TREE skuTree sk = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = name(sk)
    ORDER BY skuTreeName

    OBJECTS           stb=(st=stock, bt=batch)
    PROPERTIES        READONLY stockName = name(st), nameSkuBatch(bt)
    PROPERTIES        balanceBStockBatchDateTime(bt, st, t)
    PROPERTIES(bt)    READONLY dateTimeBatch, descriptionBatch, quantityBatch, supplierPriceBatch, expiryDateBatch
    FILTERS           isParentSkuGroupBatch(sk, bt),
                      isParentStockGroupStock(sg, st)
    ORDER BY          dateTimeBatch

    FILTERGROUP filterBalance
        FILTER 'Партии с остатком' 'F11' balanceBStockBatchDateTime(bt, st, t) DEFAULT
        FILTER 'Партии пришедшие за последний 1 день' 'F10' dateTimeBatch(bt) >= t - 1
        FILTER 'Партии пришедшие за последние 7 дней' 'F9' dateTimeBatch(bt) >= t - 7
        FILTER 'Партии пришедшие за последние 30 дней' 'F8' dateTimeBatch(bt) >= t - 30

    FILTERGROUP filterExpiry
        FILTER 'Партии с истекшим сроком годности' 'F7' expiryDateBatch(bt) < t
        FILTER 'Партии со сроком годности, истекающим через 1 день' 'F6' expiresBatchDateTime(bt, t, 1)
        FILTER 'Партии со сроком годности, истекающим через 7 дней' 'F5' expiresBatchDateTime(bt, t, 7)
        FILTER 'Партии со сроком годности, истекающим через 30 дней' 'F4' expiresBatchDateTime(bt, t, 30)
;

DESIGN balanceBatchStock FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            NEW firstCase {
                type = SPLITV;
                fillHorizontal = 1;
                childConstraints = TO THE BOTTOM;
                ADD t.box;
                NEW firstCaseTwo {
                    type = SPLITV;
                    ADD stockTree.tree.box {title = 'Склады';};
                    ADD skuTree.tree.box {title = 'Группы';};
                }
            }

            ADD stb.box {
                title = 'Партии';
                fillHorizontal = 2;
            };
        }

        ADD functions.box;
    }
}

// -------------------------------------------- Подбор SKU --------------------------------------- //

META defineDialogSku (form)
    form###quantity 'Кол-во' = SESSION DATA NUMERIC[14,3] (sku);

    form###stock = SESSION DATA stock ();
    form###nameStock 'Склад' () = name(form###stock()) PREFCHARWIDTH 30;

    form###balance 'Остаток' (sku) = currentBalanceSkuStock(sku, form###stock());
    form###balanceFilter (sku) = (TRUE AND form###balance(sku)) OR (sku IS sku AND NOT form###stock());

    form###all 'Весь остаток' = SESSION DATA BOOLEAN (sku);
    form###quantity(sku) <- form###balance(sku) WHEN ASSIGNED(form###all(sku));

    FORM form 'Подбор SKU'
        TREE skuTree sk = skuGroup PARENT parentSkuGroup
        PROPERTIES READONLY skuTreeName = name(sk)
        ORDER BY skuTreeName

        PROPERTIES form###nameStock()

        OBJECTS s=sku
        PROPERTIES READONLY    inputName = nameSku(s)
        PROPERTIES(s)          form###quantity
        PROPERTIES(s) READONLY form###balance SHOWIF form###stock()
        PROPERTIES(s)          form###all SHOWIF form###stock()
        FILTERS                isParentSkuGroupSku(sk, s)
        FILTERS                form###balanceFilter(s)
        ORDER BY inputName

        OBJECTS si=sku
        PROPERTIES READONLY     selectedName = nameSku(si)
        PROPERTIES              form###quantity(si)
        PROPERTIES(si) READONLY form###balance SHOWIF form###stock()
        PROPERTIES(si)          form###all SHOWIF form###stock()
        FILTERS                 form###quantity(si)
        ORDER BY selectedName
    ;

    DESIGN form FROM DEFAULT {
        main {
            preferredSize = (1024, 768);
            NEW skuContainer BEFORE functions.box {
                childConstraints = TO THE RIGHT;
                type = SPLITH;

                ADD skuTree.tree.box;
                NEW inputContainer {
                    childConstraints = TO THE BOTTOM;
                    type = SPLITV;

                    NEW filterContainer {
                        childConstraints = TO THE RIGHTBOTTOM;
                        ADD PROPERTY(form###nameStock());
                    }

                    NEW inputSkuContainer {
                        childConstraints = TO THE BOTTOM;
                        type = SPLITV;

                        ADD s.box {
                            fillVertical = 3;
                            fillHorizontal = 2;
                        }
                        ADD si.box;
                    }
                }
            }
        }
    }

END

META defineAddDetailDialogSkuStock (object, skuProp, stockProp, form)
    @defineAddDetailDialogSkuStockCustom (object, object##Detail, , skuProp, stockProp, form);
END

META defineAddDetailDialogSkuStockCustom (object, detail, caption, skuProp, stockProp, form)
    @defineAddDetailDialogSkuCustom(object, detail, caption, skuProp, form);
    addDetailDialogSkuStock###detail###object 'Подбор товаров'###caption = ACTION (object) {
        SET form###stock() <- stockProp###object(object);
        EXEC addDetailDialogSku###detail###object(object AS object);
    } TOOLBAR;
END

META defineAddDetailDialogSku (object, skuProp, form)
    @defineAddDetailDialogSkuCustom(object, object##Detail, , skuProp, form);
END

META defineAddDetailDialogSkuCustom (object, detail, caption, skuProp, form)
    addDetailDialogSku###detail###object 'Подбор товаров'###caption = ACTION (object) {
        SET form###all(sku) <- NULL;
        FORM form MODAL;
        IF formResult() == formResult.ok THEN {
            FOR form###quantity(sku) DO {
                ADDOBJ detail;
                FOR w == addedObject() DO {
                    SET object###detail(w) <- object AS object;
                    SET skuProp###detail(w) <- sku AS sku;
                    SET quantity###detail(w) <- form###quantity(sku);
                }
            }
        }
        SET form###quantity(sku) <- NULL;
    } TOOLBAR;
END
