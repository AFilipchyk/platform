MODULE Stock;

REQUIRE System, Utils, Hierarchy, LegalEntity, I18n, Geo, Employee;

// ----------------------------------- Склады ------------------------------------------ //

CLASS ABSTRACT stockGroup 'Группа складов' : named;
@defineHierarchyAbstract(stockGroup);

CLASS ABSTRACT stock 'Склад' : named;
TABLE stock(stock);

stockGroupStock (stock) = ABSTRACT stockGroup (stock) PERSISTENT;
nameStockGroupStock 'Группа' (stock) = name(stockGroupStock (stock));

legalEntityStock (stock) = ABSTRACT legalEntity (stock) PERSISTENT NOT NULL;
nameLegalEntityStock 'Компания' (stock) = name(legalEntityStock(stock));

isCompanyStock(stock) = isCompanyLegalEntity(legalEntityStock(stock));

quantityStocksStockGroup 'Кол-во складов' (stockGroup) = GROUP SUM 1 IF isCompanyStock(stock)
    AND isParentStockGroupStockGroup(stockGroupStock(stock), stockGroup)
    BY stockGroup PERSISTENT;

userLegalEntityStock 'Отм.' = ABSTRACT BOOLEAN (legalEntity, stock);
inLegalEntityStock 'Отм.' (legalEntity, stock) = (legalEntityStock(stock) == legalEntity) OR userLegalEntityStock(legalEntity, stock);
isDefaultLegalEntityStock 'Свой склад' (legalEntity, stock) = legalEntityStock(stock) == legalEntity;

currencyStock (stock) = currencyLegalEntity(legalEntityStock(stock)) PERSISTENT;
languageStock (stock) = languageLegalEntity(legalEntityStock(stock)) PERSISTENT;

EXTEND CLASS stock : POI;

namePOI(poi) += name(poi) IF poi IS stock;

countryStock (stock) = countryLegalEntity(legalEntityStock(stock)) PERSISTENT;
nameCountryStock 'Страна' (stock) = name(countryStock(stock));
countryPOI (poi) += countryStock(poi);

addressStock 'Адрес' (stock) = ABSTRACT STRING[100] (stock) PERSISTENT;
addressPOI (poi) += addressStock(poi);

//latitudeStock 'Координата X' = DATA NUMERIC[10,5](stock);
//longitudeStock 'Координата Y' = DATA NUMERIC[10,5](stock);

//latitudePOI(stock) += latitudeStock(stock);
//longitudePOI(stock) += longitudeStock(stock);

TABLE stockGroupStock (stockGroup, stock);
isParentStockGroupStock (stockGroup, stock) = isParentStockGroupStockGroup(stockGroupStock(stock), stockGroup) PERSISTENT;

GROUP createGroup 'Создавать по умолчанию' : public;
GROUP committeeGroup 'Комиссии' : public;
GROUP responsibilityGroup 'Ответственные лица' : public;
GROUP bookkeepingGroup 'Учет и цены' : public;

// -------------------------------------- Регион ------------------------------- //

CLASS region 'Регион' : named;
TABLE region (region);

regionStock 'Регион' (stock) = ABSTRACT region (stock) PERSISTENT;
nameRegionStock 'Регион' (stock)= name(regionStock(stock));

// ----------------------------------- Единицы измерения ------------------------------------------ //

CLASS UOM 'Единица измерения' : doubleNamed, externalizable;
TABLE UOM (UOM);

baseUOM = DATA UOM(UOM);
shortNameBaseUOM 'Базовая ед.изм.' (UOM) = shortName(baseUOM(UOM)) IN base;
genitiveNameUOM 'Ед. изм. (родительный)' = DATA STRING[20](UOM) IN base;
factorUOM 'Коэффициент пересчета в баз.ед.' = DATA NUMERIC[14,3] (UOM) IN base;

FORM UOM 'Единица измерения'
    OBJECTS u=UOM FIXED PANEL
    PROPERTIES(u) name, shortName, shortNameBaseUOM, genitiveNameUOM, factorUOM
    EDIT UOM OBJECT u
;

FORM UOMs 'Единицы измерений'
    OBJECTS u=UOM
    PROPERTIES(u) READONLY name, shortName, shortNameBaseUOM, genitiveNameUOM, factorUOM
    PROPERTIES(u) ADDFORM, EDITFORM, delete
;

// ----------------------------------- Sku Group ------------------------------------------ //

CLASS ABSTRACT skuGroup 'Группа SKU' : named;
@defineHierarchyAbstract(skuGroup);

TABLE skuGroupLanguage(skuGroup, language);
nameSkuGroupLanguage 'Наименование (иностр.)' = ABSTRACT STRING[110] (skuGroup, language) PERSISTENT MINCHARWIDTH 40 PREFCHARWIDTH 80 INDEXED AGGPROP;

nameSkuGroupStock 'Наименование (иностр.)' (skuGroup, stock) = IF languageStock(stock) THEN nameSkuGroupLanguage(skuGroup, languageStock(stock)) ELSE name(skuGroup);

// ----------------------------------- Sku ------------------------------------------ //

CLASS ABSTRACT sku 'SKU';
TABLE sku(sku);
TABLE legalEntitySku(legalEntity, sku);

skuGroupSku (sku) = ABSTRACT skuGroup (sku) PERSISTENT;
nameSku 'Наименование' (sku) = ABSTRACT STRING[255] (sku) PERSISTENT MINCHARWIDTH 40 PREFCHARWIDTH 80 INDEXED AGGPROP IN recognize;

TABLE skuLanguage(sku, language);
nameSkuLanguage 'Наименование (иностр.)' = ABSTRACT STRING[200] (sku, language) PERSISTENT MINCHARWIDTH 40 PREFCHARWIDTH 80 INDEXED AGGPROP;

nameSkuStock 'Наименование (иностр.)' (sku, stock) = IF languageStock(stock) THEN nameSkuLanguage(sku, languageStock(stock)) ELSE nameSku(sku);

UOMSku (sku) = ABSTRACT UOM (sku) PERSISTENT;
shortNameUOMSku 'Ед. изм.' (sku) = shortName(UOMSku(sku)) IN recognize;

countrySku = ABSTRACT country (sku) PERSISTENT;
nameCountrySku 'Страна' (sku) = name(countrySku(sku)) IN recognize;

TABLE skuGroupSku(skuGroup, sku);
isParentSkuGroupSku (skuGroup, sku) = isParentSkuGroupSkuGroup(skuGroupSku(sku), skuGroup) PERSISTENT;

netWeightSku 'Вес нетто' = ABSTRACT NUMERIC[9,3] (sku) PERSISTENT;
grossWeightSku 'Вес брутто' = ABSTRACT NUMERIC[9,3] (sku) PERSISTENT;
volumeSku 'Объем' = ABSTRACT NUMERIC[9,3] (sku) PERSISTENT;

isContainerSku 'Тара' (sku) = ABSTRACT BOOLEAN (sku) PERSISTENT;
isWeightSku 'Весовой товар' =  ABSTRACT BOOLEAN (sku) PERSISTENT;

inactiveSku 'Неактивный' = ABSTRACT BOOLEAN (sku) PERSISTENT;

// ----------------------------------- Ledger ------------------------------------------ //

CLASS ABSTRACT skuLedger 'Изменение остатка по товару';
TABLE skuLedger (skuLedger);

CLASS ABSTRACT inSkuLedger 'Приход' : skuLedger;
CLASS ABSTRACT outSkuLedger 'Расход' : skuLedger;

CLASS ABSTRACT batch 'Партия' : inSkuLedger;

CLASS ABSTRACT dataSkuLedger 'Изменение остатка с первичной себестоимостью' : skuLedger;

CLASS ABSTRACT inLIFOSkuLedger 'Приход по LIFO' : inSkuLedger, dataSkuLedger;
CLASS ABSTRACT outFIFOSkuLedger 'Расход по FIFO' : outSkuLedger, dataSkuLedger;

// --------------------------------- Партии ------------------------------------------------ //

TABLE batch(batch);
TABLE skuLedgerBatch (skuLedger, batch);
TABLE batchStock(batch, stock);

dateTimeBatch 'Дата/время' (batch) = ABSTRACT DATETIME (batch) PERSISTENT INDEXED;
dateBatch 'Дата' (batch) = toDate(dateTimeBatch(batch));
timeBatch 'Время' (batch) = toTime(dateTimeBatch(batch));

isPostedBatch 'Проведен' (batch) = ABSTRACT BOOLEAN (batch) PERSISTENT;

skuBatch (batch) = ABSTRACT sku (batch) PERSISTENT INDEXED;
nameSkuBatch 'Наименование' (batch) = nameSku(skuBatch(batch)) IN recognize;

stockBatch (batch) = ABSTRACT stock (batch) PERSISTENT INDEXED ;
nameStockBatch 'Склад' (batch) = name(stockBatch(batch)) IN recognize;

costBatch 'Себестоимость' (batch) = ABSTRACT NUMERIC[14,2] (batch) PERSISTENT;
prevCostBatch 'Себестоимость' (batch) = PREV(costBatch(batch));

descriptionBatch 'Описание' (batch) = ABSTRACT STRING[200] (batch) PERSISTENT IN recognize MINCHARWIDTH 30 PREFCHARWIDTH 60;

expiryDateBatch 'Годен до' (batch) = ABSTRACT DATE (batch) PERSISTENT INDEXED;
prevExpiryDateBatch 'Годен до' (batch) = PREV(expiryDateBatch(batch));

expiresBatchDateTime(batch, dateTime, period) = expiryDateBatch(batch) < sumDate(toDate(dateTime), period);
expiresBatchDate(batch, date, period) = expiryDateBatch(batch) < sumDate(date, period);

orderBatch (batch) = LIST (dateTimeBatch(batch), batch) PERSISTENT;

isSkuBatch (batch, sku) = skuBatch(batch) == sku;

isParentSkuGroupBatch (skuGroup, batch) = isParentSkuGroupSku(skuGroup, skuBatch(batch));

isContainerBatch 'Тара' (batch) = isContainerSku(skuBatch(batch));

//---------------------------- Количественные регистры (конкретная реализация) ----------------------------------------//

dateTimeDataSkuLedger 'Дата/время' = ABSTRACT DATETIME (dataSkuLedger) PERSISTENT INDEXED;
dateDataSkuLedger 'Дата' (ledger) = toDate(dateTimeDataSkuLedger(ledger)) PERSISTENT;

isPostedDataSkuLedger 'Проведен' = ABSTRACT BOOLEAN (dataSkuLedger) PERSISTENT;

skuDataSkuLedger = ABSTRACT sku (dataSkuLedger) PERSISTENT INDEXED;

stockDataSkuLedger = ABSTRACT stock(dataSkuLedger) PERSISTENT INDEXED;

descriptionDataSkuLedger 'Название документа' = ABSTRACT STRING[200] (skuLedger) PERSISTENT;

changedDataSkuLedger = ABSTRACT BOOLEAN (dataSkuLedger);

// -------------------------------- Для всего ledger'а -------------------- //

dateTimeSkuLedger 'Дата/время' (ledger) = UNION CLASS dateTimeDataSkuLedger (ledger), dateTimeBatch (ledger) PERSISTENT INDEXED;
dateSkuLedger 'Дата' (ledger) = toDate(dateTimeSkuLedger(ledger)) PERSISTENT INDEXED;

isPostedSkuLedger 'Проведен' (ledger) = UNION CLASS isPostedDataSkuLedger (ledger), isPostedBatch (ledger) PERSISTENT;

skuSkuLedger (ledger) = UNION CLASS skuDataSkuLedger (ledger), skuBatch (ledger) PERSISTENT INDEXED;
nameSkuSkuLedger 'SKU' (ledger) = nameSku(skuSkuLedger(ledger));

stockSkuLedger (ledger) = UNION CLASS stockDataSkuLedger (ledger), stockBatch (ledger) PERSISTENT INDEXED;
nameStockSkuLedger 'Склад' (ledger) = name(stockSkuLedger(ledger));

descriptionSkuLedger 'Описание' (ledger) = UNION CLASS descriptionDataSkuLedger (ledger), descriptionBatch (ledger) PERSISTENT;

// -------------------------------- Количества ---------------------------- //

quantityBatch 'Кол-во в партии' = ABSTRACT NUMERIC[14,3] (batch) PERSISTENT;

quantityInLIFOSkuLedger 'Кол-во' (ledger) = ABSTRACT NUMERIC[14,3] (inLIFOSkuLedger) PERSISTENT;

quantityInSkuLedger 'Кол-во' (ledger) = UNION CLASS quantityBatch(ledger),
                                                        quantityInLIFOSkuLedger(ledger) PERSISTENT;

quantityOutFIFOSkuLedger 'Кол-во' = ABSTRACT NUMERIC[14,3] (outFIFOSkuLedger) PERSISTENT;

quantityOutSkuLedger 'Кол-во' (ledger) = UNION CLASS quantityOutFIFOSkuLedger(ledger) PERSISTENT;

quantityDataSkuLedger 'Кол-во' (ledger) = UNION CLASS quantityInLIFOSkuLedger(ledger),
                                                          quantityOutFIFOSkuLedger(ledger) PERSISTENT;

quantitySkuLedger 'Кол-во' (ledger) = UNION CLASS quantityInSkuLedger(ledger),
                                                      quantityOutSkuLedger(ledger) PERSISTENT;

signedQuantitySkuLedger 'Кол-во' (ledger) = UNION CLASS quantityInSkuLedger(ledger),
                                                            -quantityOutSkuLedger(ledger) PERSISTENT;

// -------------------------------------------- Расчет себестоимости -------------------------------------- //

explicitBatchLedgerStock 'Партионный учет' = ABSTRACT BOOLEAN (stock) PERSISTENT IN bookkeepingGroup;

orderDataSkuLedger (ledger) = LIST(dateTimeDataSkuLedger(ledger), ledger);

// Формулы для расчета
quantityBatchBatch 'Кол-во' (ledger, batch) = quantityBatch(ledger) AND batch == ledger;

limitInLIFOSkuLedgerBatch = ABSTRACT NUMERIC[14,3] (inLIFOSkuLedger, batch);
orderInLIFOSkuLedgerBatch = ABSTRACT LONG (inLIFOSkuLedger, batch);

quantityInLIFOSkuLedgerBatch (ledger, batch) =
        PARTITION UNGROUP quantityInLIFOSkuLedger
                  LIMIT STRICT limitInLIFOSkuLedgerBatch(ledger, batch) AND skuBatch(batch) == skuDataSkuLedger(ledger)
                  BY ledger
                  ORDER DESC orderInLIFOSkuLedgerBatch(ledger, batch), orderBatch(batch);

limitOutFIFOSkuLedgerBatch = ABSTRACT NUMERIC[14,3] (outFIFOSkuLedger, batch);
orderOutFIFOSkuLedgerBatch = ABSTRACT LONG (outFIFOSkuLedger, batch);

quantityOutFIFOSkuLedgerBatch (ledger, batch) =
        PARTITION UNGROUP quantityOutFIFOSkuLedger
                  LIMIT STRICT limitOutFIFOSkuLedgerBatch(ledger, batch) AND skuBatch(batch) == skuDataSkuLedger(ledger)
                  BY ledger
                  ORDER orderOutFIFOSkuLedgerBatch(ledger, batch), orderBatch(batch);

quantityDataSkuLedgerBatch (ledger, batch) = UNION CLASS quantityInLIFOSkuLedgerBatch(ledger, batch),
                                                             quantityOutFIFOSkuLedgerBatch(ledger, batch);

// Свойства для расчета себестоимости

costDataSkuLedgerBatch 'Расписано из партии (перв.)' (ledger, batch) = DATA NUMERIC[14,3] (skuLedger, batch);

costSkuLedgerBatch 'Расписано из партии' (ledger, batch) = UNION CLASS quantityBatchBatch(ledger, batch), costDataSkuLedgerBatch(ledger, batch) PERSISTENT;

signedCostSkuLedgerBatch (ledger, batch) = IF ledger IS outSkuLedger
                                              THEN -costSkuLedgerBatch(ledger, batch)
                                              ELSE costSkuLedgerBatch(ledger, batch);

// Расчет себестоимости по Action
costedDataSkuLedger 'Расписано' (ledger) = GROUP SUM costDataSkuLedgerBatch (ledger, batch) BY ledger PERSISTENT;
costedSkuLedger 'Расписано' (ledger) = GROUP SUM costSkuLedgerBatch (ledger, batch) BY ledger PERSISTENT;

needToCostDataSkuLedger 'Требуется расчет себестоимости' (ledger) = quantitySkuLedger(ledger) > 0 AND isPostedDataSkuLedger(ledger)
                                                                        AND NOT quantitySkuLedger(ledger) == costedDataSkuLedger(ledger);

resetCostDataSkuLedger 'Перерассчитать себестоимость' = ACTION (ledger) { //NEWSESSION AUTOAPPLY {
    SET costDataSkuLedgerBatch(ledger, batch) <- NULL;
    SET costDataSkuLedgerBatch(ledger, batch) <- quantityDataSkuLedgerBatch(ledger, batch);
}

iterate(i, from, to) = RECURSION i==from AND from IS INTEGER AND to IS INTEGER STEP i==$i+1 AND i<=to CYCLES IMPOSSIBLE;

// мгновенный расчет себестоимости
//WHEN ASSIGNED(isPostedDataSkuLedger(ledger)) DO EXEC resetCostDataSkuLedger (ledger) ORDER orderDataSkuLedger(ledger);
changedCostDataSkuLedger 'Перерасчитывалась себестоимость' = DATA SESSION BOOLEAN (dataSkuLedger);

ON APPLY {
    LOCAL changedLedger = BOOLEAN (dataSkuLedger);
    SET changedLedger(ledger) <- ASSIGNED(isPostedDataSkuLedger(ledger)) OR ((
                                  CHANGED(quantityDataSkuLedger(ledger))
                                  OR CHANGED(skuDataSkuLedger(ledger))
                                  OR CHANGED(stockDataSkuLedger(ledger))
                                  OR CHANGED(changedDataSkuLedger(ledger)))
                                 AND isPostedDataSkuLedger(ledger));

    IF [GROUP MAX changedLedger(ledger)]() THEN
        NEWSESSION SINGLE {
            SET costDataSkuLedgerBatch(ledger, batch) <- NULL WHERE changedLedger(ledger);

            LOCAL orderedLedger = INTEGER (dataSkuLedger);
            SET orderedLedger(ledger) <- PARTITION SUM 1 IF changedLedger(ledger) BY skuDataSkuLedger(ledger) ORDER orderDataSkuLedger(ledger);

            FOR iterate(i, 1, [GROUP MAX orderedLedger(ledger)]()) DO {
                SET changedCostDataSkuLedger(ledger) <- TRUE WHERE orderedLedger(ledger) == i;
                SET costDataSkuLedgerBatch(ledger, batch) <- quantityDataSkuLedgerBatch(ledger, batch) WHERE orderedLedger(ledger) == i;
            }
        }
}

setDataSkuLedgerBatchCost 'Дорассчитать себестоимость' = ACTION () NEWSESSION {

    SET costDataSkuLedgerBatch(ledger, batch) <- NULL WHERE needToCostDataSkuLedger(ledger);
    EXEC apply();

    FOR needToCostDataSkuLedger(ledger) ORDER orderDataSkuLedger(ledger) DO {
        SET costDataSkuLedgerBatch(ledger, batch) <- quantityDataSkuLedgerBatch(ledger, batch);
        EXEC apply();
    }
} CONFIRM;

resetDataSkuLedgerBatchCost 'Перерассчитать себестоимость' = ACTION () NEWSESSION {
    FORM dialogDate MODAL;
    IF formResult() == formResult.ok THEN {

        FOR d == chosenDate('d') DO {
            SET costDataSkuLedgerBatch(ledger, batch) AND dateDataSkuLedger(ledger) >= (d AS DATE) <- NULL;
            EXEC apply();

            FOR dateSkuLedger(ledger) >= (d AS DATE) AND isPostedDataSkuLedger(ledger) ORDER orderDataSkuLedger(ledger) DO {
                SET costDataSkuLedgerBatch(ledger, batch) <- quantityDataSkuLedgerBatch(ledger, batch);
                EXEC apply();
            }
        }
    }
} CONFIRM;

clearDataSkuLedgerBatchCost 'Сбросить всю себестоимость' = ACTION() NEWSESSION AUTOAPPLY {
    SET costDataSkuLedgerBatch(ledger, batch) <- NULL;
} CONFIRM;

// Суммы

costSumSkuLedgerBatch 'Сумма поставщика без НДС' (ledger, batch) = costSkuLedgerBatch(ledger, batch) * costBatch(batch);
costSumSkuLedger 'Сумма поставщика без НДС' = GROUP SUM costSumSkuLedgerBatch(ledger, batch) BY ledger;

// ---------------------------- Учетные цены и суммы ------------------------------- //

// сумма операции
sumInSkuLedger 'Сумма' (ledger) = ABSTRACT NUMERIC[16,2] (inSkuLedger) PERSISTENT;
sumOutSkuLedger 'Сумма' (ledger) = ABSTRACT NUMERIC[16,2] (outSkuLedger) PERSISTENT;

signedSumSkuLedger 'Сумма' (ledger) = UNION CLASS sumInSkuLedger(ledger),
                                                      -sumOutSkuLedger(ledger) PERSISTENT;

// ---------------------------- Остаток по товару -------------------------------- //

TABLE skuStock(sku, stock);
TABLE skuStockDate(sku, stock, DATE);

META defineSkuLedgerBalanceProperties(postfix, caption)
    skip##postfix##SkuLedger 'Не проводить по учету'###caption = ABSTRACT BOOLEAN (skuLedger) PERSISTENT;
    active##postfix##SkuLedger 'Активен'###caption (ledger) = isPostedSkuLedger(ledger) AND NOT skip##postfix##SkuLedger(ledger) PERSISTENT;

    signedQuantityActiveSkuLedger(ledger) = signedQuantitySkuLedger(ledger) AND active##postfix##SkuLedger(ledger) PERSISTENT;

    currentBalance##postfix##SkuStock 'Текущий остаток'###caption (sku, stock) =
        GROUP SUM signedQuantitySkuLedger(ledger) BY skuSkuLedger(ledger), stockSkuLedger(ledger) PERSISTENT;
    countLedger##postfix##SkuStock 'Кол-во движений'###caption (sku, stock) =
        GROUP SUM 1 AND signedQuantityActiveSkuLedger(ledger) BY skuSkuLedger(ledger), stockSkuLedger(ledger) PERSISTENT;

    quantityInActiveSkuLedger(ledger) = quantityInSkuLedger(ledger) AND isPostedSkuLedger(ledger) AND NOT skip##postfix##SkuLedger(ledger) PERSISTENT;
    quantityIn##postfix##SkuStockDate (sku, stock, date) =
        GROUP SUM quantityInActiveSkuLedger(ledger) BY skuSkuLedger(ledger), stockSkuLedger(ledger), dateSkuLedger(ledger) PERSISTENT;

    quantityOutActiveSkuLedger(ledger) = quantityOutSkuLedger(ledger) AND isPostedSkuLedger(ledger) AND NOT skip##postfix##SkuLedger(ledger) PERSISTENT;
    quantityOut##postfix##SkuStockDate (sku, stock, date) =
        GROUP SUM quantityOutActiveSkuLedger(ledger) BY skuSkuLedger(ledger), stockSkuLedger(ledger), dateSkuLedger(ledger) PERSISTENT;

    quantity##postfix##SkuStockDate (sku, stock, date) = quantityIn##postfix##SkuStockDate(sku, stock, date)
                                                         (+)
                                                         quantityOut##postfix##SkuStockDate(sku, stock, date) PERSISTENT;

    signedQuantity##postfix##SkuStockDate (sku, stock, date) = quantityIn##postfix##SkuStockDate(sku, stock, date)
                                                               (-)
                                                               quantityOut##postfix##SkuStockDate(sku, stock, date) PERSISTENT;

    // без учета текущей даты/времени
    balanceB##postfix##SkuStockDate 'Остаток на начало дня'###caption (sku, stock, date) = (currentBalance##postfix##SkuStock(sku, stock) AND date AS DATE)
                                                                      (-) [GROUP SUM signedQuantity##postfix##SkuStockDate (sku, stock, dateIn) AND dateIn >= (date AS DATE)
                                                                                 BY sku, stock, date](sku, stock, date);

    // с учетом текущей даты/времени
    balanceA##postfix##SkuStockDate 'Остаток на конец дня'###caption (sku, stock, date) = (currentBalance##postfix##SkuStock(sku, stock) AND date AS DATE)
                                                                     (-) [GROUP SUM signedQuantity##postfix##SkuStockDate (sku, stock, dateIn) AND dateIn > (date AS DATE)
                                                                                BY sku, stock, date](sku, stock, date);

    // без учета текущей даты/времени
    balanceB##postfix##SkuStockDateTime 'Остаток (до)'###caption (sku, stock, dateTime) = (currentBalance##postfix##SkuStock(sku, stock) AND dateTime AS DATETIME)
                                                                              (-) [GROUP SUM signedQuantityActiveSkuLedger(ledger) AND dateTimeSkuLedger(ledger) >= (dateTime AS DATETIME)
                                                                                         BY skuSkuLedger(ledger), stockSkuLedger(ledger), dateTime](sku, stock, dateTime);

    // с учетом текущей даты/времени
    balanceA##postfix##SkuStockDateTime 'Остаток (после)'###caption (sku, stock, dateTime) = (currentBalance##postfix##SkuStock(sku, stock) AND dateTime AS DATETIME)
                                                                             (-) [GROUP SUM signedQuantityActiveSkuLedger(ledger) AND dateTimeSkuLedger(ledger) > (dateTime AS DATETIME)
                                                                                        BY skuSkuLedger(ledger), stockSkuLedger(ledger), dateTime](sku, stock, dateTime);

    currentBalance##postfix##Sku 'Остаток (всего)'###caption (sku) = GROUP SUM currentBalance##postfix##SkuStock(sku, stock) BY sku PERSISTENT;

    currentBalance##postfix##BatchStock 'Текущий остаток'###caption (batch, stock) = GROUP SUM signedCostSkuLedgerBatch (ledger, batch) AND active##postfix##SkuLedger(ledger)
                                                                                           BY batch, stockSkuLedger(ledger) PERSISTENT;

    currentBalance##postfix##Batch 'Остаток (всего)'###caption (batch) = GROUP SUM currentBalance##postfix##BatchStock(batch, stock) BY batch PERSISTENT;

    // ---------------------------- Суммы по товару -------------------------------- //

    signedSumActiveSkuLedger(ledger) = signedSumSkuLedger(ledger) AND isPostedSkuLedger(ledger) AND NOT skip##postfix##SkuLedger(ledger) PERSISTENT;
    currentSum##postfix##SkuStock 'Сумма остатка'###caption (sku, stock) =
        GROUP SUM signedSumActiveSkuLedger(ledger) BY skuSkuLedger(ledger), stockSkuLedger(ledger) PERSISTENT;

    sumInActiveSkuLedger(ledger) = sumInSkuLedger(ledger) AND isPostedSkuLedger(ledger) AND NOT skip##postfix##SkuLedger(ledger) PERSISTENT;
    sumIn##postfix##SkuStockDate (sku, stock, date) =
        GROUP SUM sumInActiveSkuLedger(ledger) BY skuSkuLedger(ledger), stockSkuLedger(ledger), dateSkuLedger(ledger) PERSISTENT;

    sumOutActiveSkuLedger(ledger) = sumOutSkuLedger(ledger) AND isPostedSkuLedger(ledger) AND NOT skip##postfix##SkuLedger(ledger) PERSISTENT;
    sumOut##postfix##SkuStockDate (sku, stock, date) =
        GROUP SUM sumOutActiveSkuLedger(ledger) BY skuSkuLedger(ledger), stockSkuLedger(ledger), dateSkuLedger(ledger) PERSISTENT;

    sum##postfix##SkuStockDate (sku, stock, date) = sumIn##postfix##SkuStockDate(sku, stock, date)
                                                         (+)
                                                         sumOut##postfix##SkuStockDate(sku, stock, date) PERSISTENT;

    signedSum##postfix##SkuStockDate (sku, stock, date) = sumIn##postfix##SkuStockDate(sku, stock, date)
                                                               (-)
                                                               sumOut##postfix##SkuStockDate(sku, stock, date) PERSISTENT;

    // без учета текущей даты/времени
    sumB##postfix##SkuStockDate 'Сумма на начало дня'###caption (sku, stock, date) = (currentSum##postfix##SkuStock(sku, stock) AND date AS DATE)
                                                                      (-) [GROUP SUM signedSum##postfix##SkuStockDate (sku, stock, dateIn) AND dateIn >= (date AS DATE)
                                                                                 BY sku, stock, date](sku, stock, date);

    // с учетом текущей даты/времени
    sumA##postfix##SkuStockDate 'Сумма на конец дня'###caption (sku, stock, date) = (currentSum##postfix##SkuStock(sku, stock) AND date AS DATE)
                                                                     (-) [GROUP SUM signedSum##postfix##SkuStockDate (sku, stock, dateIn) AND dateIn > (date AS DATE)
                                                                                BY sku, stock, date](sku, stock, date);

    averagePrice##postfix##SkuStock 'Цена (средневзв.)'###caption (sku, stock) = currentSum##postfix##SkuStock(sku, stock) / currentBalance##postfix##SkuStock(sku, stock); // IF NOT currentBalance##postfix##SkuStock(sku, stock) == 0; (возможно не нужно, так как 0 не может быть в GROUP SUM )

END

@defineSkuLedgerBalanceProperties(,);

expiryDateSkuStock 'Годен до (max.)' (sku, stock) = GROUP MAX expiryDateBatch(batch) IF currentBalanceBatchStock(batch, stock)
                                                          BY skuBatch(batch), stock PERSISTENT;

// -------------------------------------- Последнее движение ---------------------------------- //

dateLastMovedSkuStock 'Дата последнего движения товара' (sku, stock) =
    GROUP MAX dateTimeSkuLedger(ledger)
    BY skuSkuLedger(ledger), stockSkuLedger(ledger) PERSISTENT;

movedSkuStockDateTimePeriod (item, departmentStore, dateTime, period) =
    dateLastMovedSkuStock(item, departmentStore) >= subtractDate(toDate(dateTime), period AS INTEGER);

balanceSkuStockDateTimePeriod (item, departmentStore, dateTime, period) =
    movedSkuStockDateTimePeriod (item, departmentStore, dateTime, period) OR (period IS INTEGER) IF balanceASkuStockDateTime(item, departmentStore, dateTime);

movedSkuStockDatePeriod (item, departmentStore, date, period) =
    dateLastMovedSkuStock(item, departmentStore) >= subtractDate(date, period AS INTEGER);

balanceSkuStockDatePeriod (item, departmentStore, date, period) =
    movedSkuStockDatePeriod (item, departmentStore, date, period) OR (period IS INTEGER) IF balanceASkuStockDate(item, departmentStore, date);

//----------------------------------------- По партиям ---------------------------------------------//
// без учета текущей даты/времени
balanceBBatchStockDate 'Остаток на начало дня' (batch, stock, date) = (currentBalanceBatchStock(batch, stock) AND date AS DATE)
    (-) [GROUP SUM signedCostSkuLedgerBatch (ledger, batch) AND isPostedSkuLedger(ledger) AND dateSkuLedger(ledger) >= (date AS DATE)
    BY batch, stockSkuLedger(ledger), date](batch, stock, date);

// с учетом текущей даты/времени
balanceABatchStockDate 'Остаток на конец дня' (batch, stock, date) = (currentBalanceBatchStock(batch, stock) AND date AS DATE)
    (-) [GROUP SUM signedCostSkuLedgerBatch (ledger, batch) AND isPostedSkuLedger(ledger) AND dateSkuLedger(ledger) > (date AS DATE)
    BY batch, stockSkuLedger(ledger), date](batch, stock, date);

// без учета текущей даты/времени
 balanceBBatchStockDateTime 'Остаток (до)' (batch, stock, dateTime) = (currentBalanceBatchStock(batch, stock) AND dateTime AS DATETIME)
    (-) [GROUP SUM signedCostSkuLedgerBatch (ledger, batch) AND isPostedSkuLedger(ledger) AND dateTimeSkuLedger(ledger) >= (dateTime AS DATETIME)
    BY batch, stockSkuLedger(ledger), dateTime](batch, stock, dateTime);

// с учетом текущей даты/времени
 balanceABatchStockDateTime 'Остаток (после)' (batch, stock, dateTime) = (currentBalanceBatchStock(batch, stock) AND dateTime AS DATETIME)
    (-) [GROUP SUM signedCostSkuLedgerBatch (ledger, batch) AND isPostedSkuLedger(ledger) AND dateTimeSkuLedger(ledger) > (dateTime AS DATETIME)
    BY batch, stockSkuLedger(ledger), dateTime](batch, stock, dateTime);

// --------------------------------------- Суммы ----------------------------------------------------- //

costSumBatchStockDateFrom 'Сумма на начало' (batch, stock, dateFrom) = costBatch(batch) * balanceBBatchStockDate(batch, stock, dateFrom);

costSumBatchStockDateTo 'Сумма на конец' (batch, stock, dateTo) = costBatch(batch) * balanceABatchStockDate(batch, stock, dateTo);

//---------------------------------------------- За период ------------------------------------------//

costInBalanceBatchStockDateFromTo 'Приход' (batch, stock, dateFrom, dateTo) = GROUP SUM costSkuLedgerBatch (ledger, batch)
    IF ledger IS inSkuLedger AND isPostedSkuLedger(ledger)
    AND dateSkuLedger(ledger) >= (dateFrom AS DATE)  AND dateSkuLedger(ledger)<= (dateTo AS DATE)
    BY batch, stockSkuLedger(ledger), dateFrom, dateTo;

costSumInBalanceBatchStockDateFromTo 'Сумма прихода' (batch, stock, dateFrom, dateTo) =
    costBatch(batch) * costInBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo);

costOutBalanceBatchStockDateFromTo 'Расход' (batch, stock, dateFrom, dateTo) = GROUP SUM costSkuLedgerBatch (ledger, batch)
    IF ledger IS outSkuLedger AND isPostedSkuLedger(ledger)
    AND dateSkuLedger(ledger) >= (dateFrom AS DATE)  AND dateSkuLedger(ledger)<= (dateTo AS DATE)
    BY batch, stockSkuLedger(ledger), dateFrom, dateTo;

costSumOutBalanceBatchStockDateFromTo 'Сумма расхода' (batch, stock, dateFrom, dateTo) =
    costBatch(batch) * costOutBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo);

// ---------------------------------------------- Доступ ------------------------------------------------- //

META extendFormFilterAccess(object, concrete, form, stockProp)
    EXTEND FORM form
    FILTERS
    (concrete IS object AND NOT restrictAccessEmployee(currentUser())) OR accessEmployeeDivisionEmployee(stockProp###object(concrete), currentUser());
END
META extendFormFilterStockAccess(object, concrete, form)
    EXTEND FORM form
    FILTERS
    (concrete IS object AND NOT restrictAccessEmployee(currentUser())) OR accessEmployeeDivisionEmployee(concrete, currentUser());
END
META extendFormFilterStockGroupAccess(object, concrete, form, prop)
    EXTEND FORM form
    FILTERS
    (concrete IS object AND NOT restrictAccessEmployee(currentUser())) OR prop(currentUser(), concrete);
END

// ---------------------------------------------- Макросы ------------------------------------------------ //

META implementSkuLedger(object, skuProp, stockProp)
    dateTimeDataSkuLedger (ledger) += dateTime###object(ledger);
    isPostedDataSkuLedger (ledger) += isPosted###object(ledger);
    skuDataSkuLedger (ledger) += skuProp###object(ledger);
    stockDataSkuLedger (ledger) += stockProp###object(ledger);
    descriptionDataSkuLedger (ledger) += description###object(ledger);
END

META defineSkuLedgerAggregation(primObject, aggrObject, skuProp, stockProp)
    dateTime###aggrObject (batch) = dateTime###primObject(primObject###aggrObject(batch));
    isPosted###aggrObject (batch) = isPosted###primObject(primObject###aggrObject(batch));
    sku###aggrObject (batch) = sku###primObject(primObject###aggrObject(batch));
    stock###aggrObject (batch) = stockProp###primObject(primObject###aggrObject(batch));
    description###aggrObject (batch) = description###primObject(primObject###aggrObject(batch));
END

META implementSkuLedgerInLIFO(object, skuProp, stockProp)
    EXTEND CLASS object : inLIFOSkuLedger;
    @implementSkuLedger(object, skuProp, stockProp);
END

META implementSkuLedgerInLIFOBalancePostfix (object, skuProp, stockProp, postfix)
    limitInLIFOSkuLedgerBatch(ledger, batch) += (quantityBatch(batch) (-) currentBalance##postfix##Batch(batch)) AND
                                                countLedger##postfix##SkuStock(skuProp###object(ledger), stockProp###object(ledger));
END

META implementSkuLedgerInLIFOBalance (object, skuProp, stockProp)
    @implementSkuLedgerInLIFOBalancePostfix(object, skuProp, stockProp, );
END

META implementSkuLedgerOutFIFO(object, skuProp, stockProp)
    EXTEND CLASS object : outFIFOSkuLedger;
    @implementSkuLedger(object, skuProp, stockProp);
END

META implementSkuLedgerOutFIFOBalancePostfix (object, skuProp, stockProp, postfix)
    limitOutFIFOSkuLedgerBatch(ledger, batch) += currentBalance##postfix##BatchStock(batch, stockProp###object(ledger));
END

META implementSkuLedgerOutFIFOBalance (object, skuProp, stockProp)
    @implementSkuLedgerOutFIFOBalancePostfix(object, skuProp, stockProp, );
END

META implementBatchCustom(object, skuProp, stockProp, costProp)
    dateTimeBatch (batch) += dateTime###object(batch);
    isPostedBatch (batch) += isPosted###object(batch);
    skuBatch (batch) += skuProp###object(batch);
    stockBatch (batch) += stockProp###object(batch);
    descriptionBatch (batch) += description###object(batch);
    costBatch (batch) += costProp###object(batch);
END

META implementBatch(object, skuProp, stockProp, costProp)
    EXTEND CLASS object : batch;
    @implementBatchCustom(object, skuProp, stockProp, costProp);
END

META defineConstraintSkuLedgerCosted (concrete, caption)
    CONSTRAINT (ASSIGNED(changedCostDataSkuLedger(detail)) OR CHANGED(costedDataSkuLedger(detail))) AND isPosted###concrete##Detail(detail) AND NOT quantity###concrete##Detail(detail) == costedDataSkuLedger(detail)
        MESSAGE caption;
END

// ---------------------------------------------- Макросы для документов ------------------------------------------------- //

// Склады
META defineDocumentHeaderStock (object, stockClass, stockCaption, prefix)
    prefix###stockClass###object = DATA stockClass(object);
    name###prefix###stockClass###object stockCaption (object) = name(prefix###stockClass###object(object)) IN documentHeaderGroup
            MINCHARWIDTH 10 PREFCHARWIDTH 20;

    prefix###legalEntityStock###object (object) = legalEntityStock(prefix###stockClass###object(object));
    name###prefix###legalEntityStock###object 'Компания ('###stockCaption###')' (object) = name(prefix###legalEntityStock###object (object));

    address###prefix##Stock###object 'Адрес ('###stockCaption###')' (object) = addressStock(prefix###stockClass###object(object));

    prefix###country###object (object) = countryStock(prefix###stockClass###object(object));
END
META defineDocumentAbstractHeaderStock (object, stockClass, stockCaption, prefix)
    prefix###stockClass###object = ABSTRACT stockClass(object) PERSISTENT;
    name###prefix###stockClass###object stockCaption (object) = name(prefix###stockClass###object(object)) IN documentHeaderGroup
            MINCHARWIDTH 10 PREFCHARWIDTH 20;

    prefix###legalEntityStock###object (object) = legalEntityStock(prefix###stockClass###object(object));
    name###prefix###legalEntityStock###object 'Компания ('###stockCaption###')' (object) = name(prefix###legalEntityStock###object (object));

    address###prefix##Stock###object 'Адрес ('###stockCaption###')' (object) = addressStock(prefix###stockClass###object(object));

    prefix###country###object (object) = countryStock(prefix###stockClass###object(object));
END
META defineDocumentInterfaceHeaderStock (object, stockClass, stockCaption, prefix)
    @defineDocumentAbstractHeaderStock (object, stockClass, stockCaption, prefix);
    @defineDocumentHeaderStock (user###object, stockClass, stockCaption, prefix);
    prefix###stockClass###object (object) += prefix###stockClass###user###object(object);
END

META defineDocumentHeaderStock (object, stockClass, stockCaption)
    @defineDocumentHeaderStock(object, stockClass, stockCaption, );
END
META defineDocumentAbstractHeaderStock (object, stockClass, stockCaption)
    @defineDocumentAbstractHeaderStock(object, stockClass, stockCaption, );
END
META defineDocumentInterfaceHeaderStock (object, stockClass, stockCaption)
    @defineDocumentInterfaceHeaderStock(object, stockClass, stockCaption, );
END

META defineDocumentDetailStock (object, detail, stockProp, stockCaption)
    stockProp###detail (idetail) = stockProp###object(object###detail(idetail));
    name###stockProp###detail stockCaption (idetail) = name(stockProp###detail(idetail)) MINCHARWIDTH 10 PREFCHARWIDTH 20;
    country###stockProp###detail (idetail) = countryStock(stockProp###detail(idetail));
    legalEntity###stockProp###detail (idetail) = legalEntityStock(stockProp###detail(idetail));
    name###legalEntity###stockProp###detail 'Компания ('###stockCaption###')' (idetail) = name(legalEntity###stockProp###detail (idetail));
END
META defineDocumentDetailStock (object, stockProp, stockCaption)
    @defineDocumentDetailStock (object, object##Detail, stockProp, stockCaption);
END

META defineDocumentDetailDataStock (object, detail, stockClass, stockProp, stockCaption)
    data###stockProp###detail = DATA stockClass(detail);
    stockProp###detail (idetail) = UNION OVERRIDE stockProp###object(object###detail(idetail)), data###stockProp###detail(idetail) PERSISTENT;
    name###stockProp###detail stockCaption (idetail) = name(stockProp###detail(idetail)) MINCHARWIDTH 10 PREFCHARWIDTH 20;
    country###stockProp###detail (idetail) = countryStock(stockProp###detail(idetail));
    legalEntity###stockProp###detail (idetail) = legalEntityStock(stockProp###detail(idetail));
    name###legalEntity###stockProp###detail 'Компания ('###stockCaption###')' (idetail) = name(legalEntity###stockProp###detail (idetail));
END
META defineDocumentAbstractDetailDataStock (object, detail, stockClass, stockProp, stockCaption)
    data###stockProp###detail = ABSTRACT stockClass(detail) PERSISTENT;
    stockProp###detail (idetail) = UNION OVERRIDE stockProp###object(object###detail(idetail)), data###stockProp###detail(idetail) PERSISTENT;
    name###stockProp###detail stockCaption (idetail) = name(stockProp###detail(idetail)) MINCHARWIDTH 10 PREFCHARWIDTH 20;
    country###stockProp###detail (idetail) = countryStock(stockProp###detail(idetail));
    legalEntity###stockProp###detail (idetail) = legalEntityStock(stockProp###detail(idetail));
    name###legalEntity###stockProp###detail 'Компания ('###stockCaption###')' (idetail) = name(legalEntity###stockProp###detail (idetail));
END
META defineDocumentInterfaceDetailDataStock (object, detail, stockClass, stockProp, stockCaption)
    @defineDocumentAbstractDetailDataStock(object, detail, stockClass, stockProp, stockCaption);
    @defineDocumentDetailDataStock(user###object, user###detail, stockClass, stockProp, stockCaption);
    data###stockProp###detail (detail) += data###stockProp###user###detail (detail);
END

META defineDocumentDetailDataStock (object, stockClass, stockProp, stockCaption)
    @defineDocumentDetailDataStock (object, object##Detail, stockClass, stockProp, stockCaption);
END
META defineDocumentAbstractDetailDataStock (object, stockClass, stockProp, stockCaption)
    @defineDocumentAbstractDetailDataStock (object, object##Detail, stockClass, stockProp, stockCaption);
END
META defineDocumentInterfaceDetailDataStock (object, stockClass, stockProp, stockCaption)
    @defineDocumentInterfaceDetailDataStock (object, object##Detail, stockClass, stockProp, stockCaption);
END

META defineDocumentStock (object, stockClass, stockCaption, prefix)
    @defineDocumentHeaderStock(object, stockClass, stockCaption, prefix);
    @defineDocumentDetailStock(object, prefix###stockClass, stockCaption);
END
META defineDocumentAbstractStock (object, stockClass, stockCaption, prefix)
    @defineDocumentAbstractHeaderStock(object, stockClass, stockCaption, prefix);
    @defineDocumentDetailStock(object, prefix###stockClass, stockCaption);
END
META defineDocumentInterfaceStock (object, stockClass, stockCaption, prefix)
    @defineDocumentInterfaceHeaderStock(object, stockClass, stockCaption, prefix);
    @defineDocumentDetailStock(object, prefix###stockClass, stockCaption);
END

META defineDocumentDataStock (object, stockClass, stockCaption, prefix)
    @defineDocumentHeaderStock(object, stockClass, stockCaption, prefix);
    @defineDocumentDetailDataStock(object, stockClass, prefix###stockClass, stockCaption);
END
META defineDocumentAbstractDataStock (object, stockClass, stockCaption, prefix)
    @defineDocumentAbstractHeaderStock(object, stockClass, stockCaption, prefix);
    @defineDocumentAbstractDetailDataStock(object, stockClass, prefix###stockClass, stockCaption);
END
META defineDocumentInterfaceDataStock (object, stockClass, stockCaption, prefix)
    @defineDocumentInterfaceHeaderStock(object, stockClass, stockCaption, prefix);
    @defineDocumentInterfaceDetailDataStock(object, stockClass, prefix###stockClass, stockCaption);
END

META defineDocumentStock (object, stockClass, stockCaption)
    @defineDocumentStock(object, stockClass, stockCaption, );
END
META defineDocumentAbstractStock (object, stockClass, stockCaption)
    @defineDocumentAbstractStock(object, stockClass, stockCaption, );
END
META defineDocumentInterfaceStock (object, stockClass, stockCaption)
    @defineDocumentInterfaceStock(object, stockClass, stockCaption, );
END

META defineDocumentDataStock (object, stockClass, stockCaption)
    @defineDocumentDataStock(object, stockClass, stockCaption, );
END
META defineDocumentAbstractDataStock (object, stockClass, stockCaption)
    @defineDocumentAbstractDataStock(object, stockClass, stockCaption, );
END
META defineDocumentInterfaceDataStock (object, stockClass, stockCaption)
    @defineDocumentInterfaceDataStock(object, stockClass, stockCaption, );
END

// Sku
META defineDocumentDetailSkuCustomPrefix (detail, skuClass, prefix, caption)
    prefix###skuClass###detail = DATA skuClass (detail);
    prefix###nameSku###detail 'SKU'###caption (detail) = nameSku(prefix###skuClass###detail(detail)) IN recognize;
    prefix###shortNameUOMSku###detail 'Ед. изм.'###caption = shortNameUOMSku(prefix###skuClass###detail(detail)) IN recognize;
    prefix###idBarcodeSku###detail 'Штрих-код'###caption (detail) = idBarcodeSku(prefix###skuClass###detail(detail)) IN recognize;
END
META defineDocumentAbstractDetailSkuCustomPrefix (detail, skuClass, prefix, caption)
    prefix###skuClass###detail = ABSTRACT skuClass (detail) PERSISTENT;
    prefix###nameSku###detail 'SKU'###caption (detail) = nameSku(prefix###skuClass###detail(detail)) IN recognize;
    prefix###shortNameUOMSku###detail 'Ед. изм.'###caption = shortNameUOMSku(prefix###skuClass###detail(detail)) IN recognize;
    prefix###idBarcodeSku###detail 'Штрих-код'###caption (detail) = idBarcodeSku(prefix###skuClass###detail(detail)) IN recognize;
END
META defineDocumentInterfaceDetailSkuCustomPrefix (detail, skuClass, prefix, caption)
    @defineDocumentAbstractDetailSkuCustomPrefix(detail, skuClass, prefix, caption);
    @defineDocumentDetailSkuCustomPrefix(user###detail, skuClass, prefix, caption);
    prefix###skuClass###detail(detail) += prefix###skuClass###user###detail(detail);
END

META defineDocumentDetailSkuCustom (detail, skuClass)
    @defineDocumentDetailSkuCustomPrefix(detail, skuClass, ,);
END
META defineDocumentAbstractDetailSkuCustom (detail, skuClass)
    @defineDocumentAbstractDetailSkuCustomPrefix(detail, skuClass, ,);
END
META defineDocumentInterfaceDetailSkuCustom (detail, skuClass)
    @defineDocumentInterfaceDetailSkuCustomPrefix(detail, skuClass, ,);
END

META defineDocumentDetailSkuPrefix (object, skuClass, prefix, caption)
    @defineDocumentDetailSkuCustomPrefix(object##Detail, skuClass, prefix, caption);
END
META defineDocumentAbstractDetailSkuPrefix (object, skuClass, prefix, caption)
    @defineDocumentAbstractDetailSkuCustomPrefix(object###Detail, skuClass, prefix, caption);
END
META defineDocumentInterfaceDetailSkuPrefix (object, skuClass, prefix, caption)
    @defineDocumentInterfaceDetailSkuCustomPrefix(object###Detail, skuClass, prefix, caption);
END

META defineDocumentDetailSku (object, skuClass)
    @defineDocumentDetailSkuPrefix(object, skuClass, ,);
END
META defineDocumentAbstractDetailSku (object, skuClass)
    @defineDocumentAbstractDetailSkuPrefix(object, skuClass, ,);
END
META defineDocumentInterfaceDetailSku (object, skuClass)
    @defineDocumentInterfaceDetailSkuPrefix(object, skuClass, ,);
END

// ---------------------------------------------- Агрегированные документы -------------------------------------------- //

// Склады
META defineDocumentAggregationHeaderStockPrefix (primObject, aggrObject, stockProp, stockCaption, prefixP, prefixA)
    prefixA###stockProp###aggrObject (object) = prefixP###stockProp###primObject(primObject###aggrObject(object)) PERSISTENT;
    name###prefixA###stockProp###aggrObject stockCaption (object) = name(prefixA###stockProp###aggrObject(object)) MINCHARWIDTH 20 PREFCHARWIDTH 40;
END
META defineDocumentAggregationHeaderStock (primObject, aggrObject, stockProp, stockCaption)
    @defineDocumentAggregationHeaderStockPrefix (primObject, aggrObject, stockProp, stockCaption, , );
END

META defineDocumentAggregationDetailStockPrefix (primObject, aggrObject, stockProp, stockCaption, prefixP, prefixA)
    prefixA###stockProp###aggrObject##Detail (detail) = prefixP###stockProp###primObject##Detail(primObject##Detail###aggrObject##Detail(detail)) PERSISTENT;
END
META defineDocumentAggregationDetailStock (primObject, aggrObject, stockProp, stockCaption)
    @defineDocumentAggregationDetailStockPrefix(primObject, aggrObject, stockProp, stockCaption, , );
END

META defineDocumentAggregationStockPrefix (primObject, aggrObject, stockProp, stockCaption, prefixP, prefixA)
    @defineDocumentAggregationHeaderStockPrefix(primObject, aggrObject, stockProp, stockCaption, prefixP, prefixA);
    @defineDocumentAggregationDetailStockPrefix(primObject, aggrObject, stockProp, stockCaption, prefixP, prefixA);
END
META defineDocumentAggregationStock (primObject, aggrObject, stockProp, stockCaption)
    @defineDocumentAggregationStockPrefix(primObject, aggrObject, stockProp, stockCaption, , );
END

// Sku
META defineDocumentAggregationDetailSkuPrefix (primObject, aggrObject, skuProp, prefix)
    skuProp###aggrObject##Detail (detail) = prefix###skuProp###primObject##Detail(primObject##Detail###aggrObject##Detail(detail));
    nameSku###aggrObject##Detail 'SKU' (detail) = nameSku(skuProp###aggrObject##Detail(detail)) IN recognize;
    idBarcodeSku###aggrObject##Detail 'Штрих-код' (detail) = idBarcodeSku(skuProp###aggrObject##Detail(detail)) IN recognize;
END
META defineDocumentAggregationDetailSku (primObject, aggrObject, skuProp)
    @defineDocumentAggregationDetailSkuPrefix(primObject, aggrObject, skuProp, );
END

// Quantity
META defineDocumentAggregationDetailQuantity (primObject, aggrObject)
    quantity###aggrObject##Detail 'Кол-во' (detail) = quantity###primObject##Detail(primObject##Detail###aggrObject##Detail(detail)) PERSISTENT;
END

// Batch
META defineDocumentAggregationDetailBatch (primObject, aggrObject)
    batch###aggrObject##Detail 'Партия' (detail) = batch###primObject##Detail(primObject##Detail###aggrObject##Detail(detail)) PERSISTENT;
END

// Prop
META defineDocumentAggregationDetailProperty (primObject, aggrObject, propertyPrim, propertyAggr, caption)
    propertyAggr###aggrObject##Detail caption (detail) = propertyPrim###primObject##Detail(primObject##Detail###aggrObject##Detail(detail)) PERSISTENT;
END
META defineDocumentAggregationDetailProperty (primObject, aggrObject, property, caption)
    @defineDocumentAggregationDetailProperty (primObject, aggrObject, property, property, caption);
END


// ---------------------------------------------- Кол-во -------------------------------------------- //

META defineDocumentDetailQuantityCustomPrefix (detail, prefix, caption)
    prefix###quantity###detail 'Кол-во'###caption = DATA NUMERIC[14,3] (detail);
END
META defineDocumentAbstractDetailQuantityCustomPrefix (detail, prefix, caption)
    prefix###quantity###detail 'Кол-во'###caption = ABSTRACT NUMERIC[14,3] (detail) PERSISTENT;
END
META defineDocumentInterfaceDetailQuantityCustomPrefix (detail, prefix, caption)
    @defineDocumentAbstractDetailQuantityCustomPrefix(detail, prefix, caption);
    @defineDocumentDetailQuantityCustomPrefix (user###detail, prefix, caption);
    prefix###quantity###detail (detail) += prefix###quantity###user###detail(detail);
END

META defineDocumentDetailQuantityCustom (detail)
    @defineDocumentDetailQuantityCustomPrefix(detail, , );
END
META defineDocumentAbstractDetailQuantityCustom (detail)
    @defineDocumentAbstractDetailQuantityCustomPrefix(detail, , );
END
META defineDocumentInterfaceDetailQuantityCustom (detail)
    @defineDocumentInterfaceDetailQuantityCustomPrefix(detail, , );
END

META defineDocumentDetailQuantityPrefix (object, prefix, caption)
    @defineDocumentDetailQuantityCustomPrefix(object##Detail, prefix, caption);
END
META defineDocumentAbstractDetailQuantityPrefix (object, prefix, caption)
    @defineDocumentAbstractDetailQuantityCustomPrefix(object##Detail, prefix, caption);
END
META defineDocumentInterfaceDetailQuantityPrefix (object, prefix, caption)
    @defineDocumentInterfaceDetailQuantityCustomPrefix(object##Detail, prefix, caption);
END

META defineDocumentDetailQuantity (object)
    @defineDocumentDetailQuantityPrefix(object, , );
END
META defineDocumentAbstractDetailQuantity (object)
    @defineDocumentAbstractDetailQuantityPrefix(object, , );
END
META defineDocumentInterfaceDetailQuantity (object)
    @defineDocumentInterfaceDetailQuantityPrefix(object, , );
END

// --------------------- Задание  значения по умолчанию для stock ---------------------------//
META defineDocumentHeaderCreate(object, createProp, caption)
    createProp###object caption (object) = DATA BOOLEAN(object) IN documentPrmGroup;
END
META defineDocumentAbstractHeaderCreate(object, createProp, caption)
    createProp###object caption (object) = ABSTRACT BOOLEAN(object) PERSISTENT IN documentPrmGroup;
END
META deriveDocumentHeaderCreate(object, createProp, stockClass, stockProp)
    createProp###object (object) <- TRUE IF createProp###stockClass(stockProp###object(object))
        WHEN CHANGED(stockProp###object(object));
END

META defineDocumentInterfaceHeaderCreate (object, createProp, caption)
    @defineDocumentAbstractHeaderCreate (object, createProp, caption);
    @defineDocumentHeaderCreate (user###object, createProp, caption);
    createProp###object (object) += createProp###user###object(object);
END
META defineDocumentDetailCreateCustom(object, detail, createProp, caption)
    createProp###detail caption (detail) = createProp###object(object###detail(detail)) PERSISTENT;
END
META defineDocumentInterfaceDetailCreateCustom (object, detail, createProp, caption)
    @defineDocumentDetailCreateCustom (object, detail, createProp, caption);
    @defineDocumentDetailCreateCustom (user###object, user###detail, createProp, caption);
END
META defineDocumentInterfaceDetailCreate (object, createProp, caption)
    @defineDocumentInterfaceDetailCreateCustom (object, object##Detail, createProp, caption);
END
META defineDocumentInterfaceCreate (object, createProp, caption)
    @defineDocumentInterfaceHeaderCreate (object, createProp, caption);
    @defineDocumentInterfaceDetailCreate (object, createProp, caption);
END

// ---------------------------------------------- Учетные суммы -------------------------------------------- //

META defineDocumentDetailPriceCustomPrefix (detail, prefix, caption)
    prefix###price###detail 'Цена'###caption = DATA NUMERIC[14,2] (detail);
END
META defineDocumentAbstractDetailPriceCustomPrefix (detail, prefix, caption)
    prefix###price###detail 'Цена'###caption = ABSTRACT NUMERIC[14,2] (detail) PERSISTENT;
END
META defineDocumentInterfaceDetailPriceCustomPrefix (detail, prefix, caption)
    @defineDocumentAbstractDetailPriceCustomPrefix(detail, prefix, caption);
    @defineDocumentDetailPriceCustomPrefix(user###detail, prefix, caption);
    prefix###price###detail (detail) += prefix###price###user###detail(detail);
END

META defineDocumentDetailPriceCustom (detail, caption)
    @defineDocumentDetailPriceCustomPrefix(detail, , caption);
END
META defineDocumentDetailAbstractPriceCustom (detail, caption)
    @defineDocumentAbstractDetailPriceCustomPrefix(detail, , caption);
END
META defineDocumentDetailInterfacePriceCustom (detail, caption)
    @defineDocumentInterfaceDetailPriceCustomPrefix(detail, , caption);
END

META defineDocumentDetailPricePrefix (object, prefix, caption)
    @defineDocumentDetailPriceCustomPrefix(object##Detail, prefix, caption);
END
META defineDocumentAbstractDetailPricePrefix (object, prefix, caption)
    @defineDocumentAbstractDetailPriceCustomPrefix(object##Detail, prefix, caption);
END
META defineDocumentInterfaceDetailPricePrefix (object, prefix, caption)
    @defineDocumentInterfaceDetailPriceCustomPrefix(object##Detail, prefix, caption);
END

META defineDocumentDetailPrice (object)
    @defineDocumentDetailPricePrefix(object, ,);
END
META defineDocumentAbstractDetailPrice (object)
    @defineDocumentAbstractDetailPricePrefix(object, ,);
END
META defineDocumentInterfaceDetailPrice (object)
    @defineDocumentInterfaceDetailPricePrefix(object, ,);
END

META defineDocumentDetailSumCustom (detail, currencyProp)
    sum###detail 'Сумма' (detail) = toNumeric16p2(roundCurrency((quantity###detail(detail) * price###detail(detail)), currencyProp###detail(detail)));
END
META defineDocumentDetailSumCustom (detail)
    @defineDocumentDetailSumCustom(detail, currency);
END
META defineDocumentInterfaceDetailSumCustom (detail, currencyProp)
    @defineDocumentDetailSumCustom(detail, currencyProp);
    @defineDocumentDetailSumCustom(user###detail, currencyProp);
END

META defineDocumentDetailSum (object, currencyProp)
    @defineDocumentDetailSumCustom(object##Detail, currencyProp);
END
META defineDocumentDetailSum (object)
    @defineDocumentDetailSum(object, currency);
END

META defineDocumentInterfaceDetailSum (object, currencyProp)
    @defineDocumentInterfaceDetailSumCustom(object##Detail, currencyProp);
END

META defineDocumentInterfaceDetailSum (object)
    @defineDocumentInterfaceDetailSum(object, currency);
END

META defineDocumentHeaderAndDetailSumCustomCaption (object, detail, caption, captionDetail)
    @defineDocumentDetailPriceCustom(detail, captionDetail);
    @defineDocumentDetailSumCustom (detail);
    @defineDocumentHeaderSumCustom(object, detail, caption);
END
//--
META defineDocumentDetailDataSumCustomPrefix (detail, prefix, caption)
    prefix###sum###detail 'Сумма'###caption = DATA NUMERIC[16,2] (detail);
END
META defineDocumentAbstractDetailDataSumCustomPrefix (detail, prefix, caption)
    prefix###sum###detail 'Сумма'###caption = ABSTRACT NUMERIC[16,2] (detail) PERSISTENT;
END

META defineDocumentInterfaceDetailDataSumCustomPrefix (detail, prefix, caption)
    @defineDocumentAbstractDetailDataSumCustomPrefix(detail, prefix, caption);
    @defineDocumentDetailDataSumCustomPrefix(user###detail, prefix, caption);
    prefix###sum###detail (detail) += prefix###sum###user###detail(detail);
END

META defineDocumentInterfaceDetailDataSumPrefix (object, prefix, caption)
    @defineDocumentInterfaceDetailDataSumCustomPrefix(object##Detail, prefix, caption);
END
META defineDocumentInterfaceDetailDataSum (object)
    @defineDocumentInterfaceDetailDataSumPrefix(object, ,);
END

META defineDocumentDetailDataSum(object)
    @defineDocumentDetailDataSumCustomPrefix(object##Detail, , );
END

META deriveDocumentDetailSumCustomPrefix(detail, prefix, currencyProp, quantityProp)
    prefix###sum###detail (detail)  <- roundCurrency(quantityProp###detail(detail) * prefix###price###detail(detail), currencyProp###detail(detail))
                    WHEN CHANGED(quantityProp###detail(detail)) OR CHANGED (prefix###price###detail(detail)) OR CHANGED(currencyProp###detail(detail));
END

META deriveDocumentDetailSumPrefix(object, prefix, currencyProp, quantityProp)
    @deriveDocumentDetailSumCustomPrefix(object##Detail, prefix, currencyProp, quantityProp);
END
META deriveDocumentDetailSum(object, currencyProp, quantityProp)
    @deriveDocumentDetailSumPrefix(object, ,currencyProp, quantityProp);
END
META deriveDocumentDetailSum(object, quantityProp)
    @deriveDocumentDetailSum(object, currency, quantityProp);
END

//-
META defineDocumentHeaderItemSumCustom (object, detail, prefixA, prefixB)
    prefixB###sumItem###detail###object 'Сумма, товар' (object) =
        GROUP SUM prefixA###sum###detail(idetail) AND NOT isContainerSku(sku###detail(idetail))
            BY object###detail(idetail) IN documentSumGroup;
    prefixB###sumContainer###detail###object 'Сумма, тара' (object) =
        GROUP SUM prefixA###sum###detail(idetail) IF isContainerSku(sku###detail(idetail))
            BY object###detail(idetail) IN documentSumGroup;
END
META defineDocumentHeaderItemSum (object, prefixA, prefixB)
    @defineDocumentHeaderItemSumCustom(object, object##Detail, prefixA, prefixB);
END

// ------------------------------------------------- Вес нетто ----------------------------------- //

META defineDocumentDetailNetWeightCustomPrefix (detail, skuProp, prefix, caption)
    prefix###netWeight###detail 'Вес нетто'###caption (detail) = quantity###detail(detail) * netWeightSku(skuProp###detail(detail)) PERSISTENT;
END
META defineDocumentInterfaceDetailNetWeightCustomPrefix (detail, skuProp, prefix, caption)
    @defineDocumentDetailNetWeightCustomPrefix(detail, skuProp, prefix, caption);
    @defineDocumentDetailNetWeightCustomPrefix (user###detail, skuProp, prefix, caption);
    prefix###netWeight###detail (detail) += prefix###netWeight###user###detail(detail);
END

META defineDocumentDetailNetWeightCustom (detail, skuProp)
    @defineDocumentDetailNetWeightCustomPrefix(detail, skuProp, , );
END
META defineDocumentInterfaceDetailNetWeightCustom (detail, skuProp)
    @defineDocumentInterfaceDetailNetWeightCustomPrefix(detail, skuProp, , );
END

META defineDocumentDetailNetWeightPrefix (object, skuProp, prefix, caption)
    @defineDocumentDetailNetWeightCustomPrefix(object##Detail, skuProp, prefix, caption);
END
META defineDocumentInterfaceDetailNetWeightPrefix (object, skuProp, prefix, caption)
    @defineDocumentInterfaceDetailNetWeightCustomPrefix(object##Detail, skuProp, prefix, caption);
END

META defineDocumentDetailNetWeight (object, skuProp)
    @defineDocumentDetailNetWeightPrefix(object, skuProp, , );
END
META defineDocumentInterfaceDetailNetWeight (object, skuProp)
    @defineDocumentInterfaceDetailNetWeightPrefix(object, skuProp, , );
END

// ------------------------------------------------- Вес брутто ----------------------------------- //

META defineDocumentDetailGrossWeightCustomPrefix (detail, skuProp, prefix, caption)
    prefix###grossWeight###detail 'Вес брутто, кг'###caption (detail) = quantity###detail(detail) * grossWeightSku(skuProp###detail(detail)) PERSISTENT;
    prefix###grossWeightTon###detail 'Вес брутто, т'###caption (detail) = round6(prefix###grossWeight###detail(detail) / 1000);
END
META defineDocumentInterfaceDetailGrossWeightCustomPrefix (detail, skuProp, prefix, caption)
    @defineDocumentDetailGrossWeightCustomPrefix(detail, skuProp, prefix, caption);
    @defineDocumentDetailGrossWeightCustomPrefix (user###detail, skuProp, prefix, caption);
    prefix###grossWeight###detail (detail) += prefix###grossWeight###user###detail(detail);
END

META defineDocumentDetailGrossWeightCustom (detail, skuProp)
    @defineDocumentDetailGrossWeightCustomPrefix(detail, skuProp, , );
END
META defineDocumentInterfaceDetailGrossWeightCustom (detail, skuProp)
    @defineDocumentInterfaceDetailGrossWeightCustomPrefix(detail, skuProp, , );
END

META defineDocumentDetailGrossWeightPrefix (object, skuProp, prefix, caption)
    @defineDocumentDetailGrossWeightCustomPrefix(object##Detail, skuProp, prefix, caption);
END
META defineDocumentInterfaceDetailGrossWeightPrefix (object, skuProp, prefix, caption)
    @defineDocumentInterfaceDetailGrossWeightCustomPrefix(object##Detail, skuProp, prefix, caption);
END

META defineDocumentDetailGrossWeight (object, skuProp)
    @defineDocumentDetailGrossWeightPrefix(object, skuProp, , );
END
META defineDocumentInterfaceDetailGrossWeight (object, skuProp)
    @defineDocumentInterfaceDetailGrossWeightPrefix(object, skuProp, , );
END

// ------------------------------------------------- Кол-во в грузовом месте ----------------------------------- //

META defineDocumentDetailDataQuantityPackCustomPrefix (detail, prefix, caption)
    prefix###quantityPack###detail 'Кол-во'###caption = DATA NUMERIC[14,3] (detail);
END
META defineDocumentDetailAbstractDataQuantityPackCustomPrefix (detail, prefix, caption)
    prefix###quantityPack###detail 'Кол-во'###caption = ABSTRACT NUMERIC[14,3] (detail) PERSISTENT;
END
META defineDocumentDetailInterfaceDataQuantityPackCustomPrefix (detail, prefix, caption)
    @defineDocumentDetailAbstractDataQuantityPackCustomPrefix(detail, prefix, caption);
    @defineDocumentDetailDataQuantityPackCustomPrefix (user###detail, prefix, caption);
    prefix###quantityPack###detail (detail) += prefix###quantityPack###user###detail(detail);
END
META defineDocumentDetailInterfaceDataQuantityPack (object)
    @defineDocumentDetailInterfaceDataQuantityPackCustomPrefix(object##Detail, , );
END

//--------------------------------------------------Партия для Detail--------------------------------------//
META defineDocumentDetailBatchCustomPrefix(detail, batchProp, prefix)
    prefix###batch###detail = DATA batchProp (detail);
    prefix###descriptionBatch###detail 'Партия' (detail) = descriptionBatch(prefix###batch###detail(detail)) MINCHARWIDTH 20 PREFCHARWIDTH 40;

    CONSTRAINT skuBatch(prefix###batch###detail(detail)) != prefix###sku###detail(detail) CHECKED BY prefix###batch###detail
        MESSAGE 'Товар партии строки должен соответствовать SKU строки';

    CONSTRAINT prefix###batch###detail(detail) AND NOT prefix###sku###detail(detail) CHECKED BY prefix###batch###detail
        MESSAGE 'Для строки задана парктия, но не задан товар';
END

//META defineDocumentDetailBatchCustom(detail, batchProp)
//    batch###detail = DATA batchProp (detail);
//    descriptionBatch###detail 'Партия' (detail) = descriptionBatch(batch###detail(detail)) MINCHARWIDTH 20 PREFCHARWIDTH 40;
//
//    CONSTRAINT skuBatch(batch###detail(detail)) != sku###detail(detail) CHECKED BY batch###detail
//        MESSAGE 'Товар партии строки должен соответствовать SKU строки';
//
//    CONSTRAINT batch###detail(detail) AND NOT sku###detail(detail) CHECKED BY batch###detail
//        MESSAGE 'Для строки задана парктия, но не задан товар';
//END
META defineDocumentDetailBatchCustom(detail, batchProp)
    @defineDocumentDetailBatchCustomPrefix(detail, batchProp, );
END

META defineDocumentAbstractDetailBatchCustom(detail, batchProp)
    batch###detail = ABSTRACT batchProp (detail) PERSISTENT;
    descriptionBatch###detail 'Партия' (detail) = descriptionBatch(batch###detail(detail)) MINCHARWIDTH 20 PREFCHARWIDTH 40;
END
META defineDocumentInterfaceDetailBatchCustom(detail, batchProp)
    @defineDocumentAbstractDetailBatchCustom(detail, batchProp);
    @defineDocumentDetailBatchCustom(user###detail, batchProp);
    batch###detail(detail) += batch###user###detail(detail);
END

META defineDocumentDetailBatch(object, batchProp)
    @defineDocumentDetailBatchCustom(object##Detail, batchProp);
END
META defineDocumentAbstractDetailBatch(object, batchProp)
    @defineDocumentAbstractDetailBatchCustom(object##Detail, batchProp);
END
META defineDocumentInterfaceDetailBatch(object, batchProp)
    @defineDocumentInterfaceDetailBatchCustom(object##Detail, batchProp);
END
// ------------------------------------------------ Кол-во в документе ------------------------------------ //
META defineDocumentHeaderQuantityCustomPrefix (object, detail, prefix, caption)
    prefix###quantity###detail###object 'Кол-во (всего)'###caption (object) = GROUP SUM prefix###quantity###detail(idetail) BY object###detail(idetail) IN documentSumGroup PERSISTENT;
END
META defineDocumentInterfaceHeaderQuantityCustomPrefix (object, detail, prefix, caption)
    @defineDocumentHeaderQuantityCustomPrefix (object, detail, prefix, caption);
    @defineDocumentHeaderQuantityCustomPrefix (user###object, user###detail, prefix, caption);
END

META defineDocumentHeaderQuantityCustom (object, detail)
    @defineDocumentHeaderQuantityCustomPrefix(object, detail, , );
END
META defineDocumentInterfaceHeaderQuantityCustom (object, detail)
    @defineDocumentHeaderQuantityCustom (object, detail)
    @defineDocumentHeaderQuantityCustom (user###object, user###detail)
END

META defineDocumentHeaderQuantityPrefix (object, prefix, caption)
    @defineDocumentHeaderQuantityCustomPrefix(object, object##Detail, prefix, caption);
END
META defineDocumentInterfaceHeaderQuantityPrefix (object, prefix, caption)
    @defineDocumentHeaderQuantityPrefix (object, prefix, caption)
    @defineDocumentHeaderQuantityPrefix (user###object, prefix, caption)
END

META defineDocumentHeaderQuantity (object)
    @defineDocumentHeaderQuantityCustomPrefix(object, object##Detail, , );
END
META defineDocumentInterfaceHeaderQuantity (object)
    @defineDocumentHeaderQuantity(object);
    @defineDocumentHeaderQuantity(user###object);
END

// ------------------------------------------------ Вес нетто в документе ------------------------------------ //
META defineDocumentHeaderNetWeightCustomPrefix (object, detail, prefix, caption)
    prefix###netWeight###detail###object 'Вес нетто (всего)'###caption (object) = GROUP SUM prefix###netWeight###detail(idetail) BY object###detail(idetail) IN documentSumGroup PERSISTENT;
END
META defineDocumentInterfaceHeaderNetWeightCustomPrefix (object, detail, prefix, caption)
    @defineDocumentHeaderNetWeightCustomPrefix (object, detail, prefix, caption);
    @defineDocumentHeaderNetWeightCustomPrefix (user###object, user###detail, prefix, caption);
END

META defineDocumentHeaderNetWeightCustom (object, detail)
    @defineDocumentHeaderNetWeightCustomPrefix(object, detail, , );
END
META defineDocumentInterfaceHeaderNetWeightCustom (object, detail)
    @defineDocumentHeaderNetWeightCustom (object, detail)
    @defineDocumentHeaderNetWeightCustom (user###object, user###detail)
END

META defineDocumentHeaderNetWeightPrefix (object, prefix, caption)
    @defineDocumentHeaderNetWeightCustomPrefix(object, object##Detail, prefix, caption);
END
META defineDocumentInterfaceHeaderNetWeightPrefix (object, prefix, caption)
    @defineDocumentHeaderNetWeightPrefix (object, prefix, caption)
    @defineDocumentHeaderNetWeightPrefix (user###object, prefix, caption)
END

META defineDocumentHeaderNetWeight (object)
    @defineDocumentHeaderNetWeightCustomPrefix(object, object##Detail, , );
END
META defineDocumentInterfaceHeaderNetWeight (object)
    @defineDocumentHeaderNetWeight(object);
    @defineDocumentHeaderNetWeight(user###object);
END

// ------------------------------------------------ Вес брутто в документе ------------------------------------ //
META defineDocumentHeaderGrossWeightCustomPrefix (object, detail, prefix, caption)
    prefix###grossWeight###detail###object 'Вес брутто (всего)'###caption (object) = GROUP SUM prefix###grossWeight###detail(idetail) BY object###detail(idetail) IN documentSumGroup PERSISTENT;
END
META defineDocumentInterfaceHeaderGrossWeightCustomPrefix (object, detail, prefix, caption)
    @defineDocumentHeaderGrossWeightCustomPrefix (object, detail, prefix, caption);
    @defineDocumentHeaderGrossWeightCustomPrefix (user###object, user###detail, prefix, caption);
END

META defineDocumentHeaderGrossWeightCustom (object, detail)
    @defineDocumentHeaderGrossWeightCustomPrefix(object, detail, , );
END
META defineDocumentInterfaceHeaderGrossWeightCustom (object, detail)
    @defineDocumentHeaderGrossWeightCustom (object, detail)
    @defineDocumentHeaderGrossWeightCustom (user###object, user###detail)
END

META defineDocumentHeaderGrossWeightPrefix (object, prefix, caption)
    @defineDocumentHeaderGrossWeightCustomPrefix(object, object##Detail, prefix, caption);
END
META defineDocumentInterfaceHeaderGrossWeightPrefix (object, prefix, caption)
    @defineDocumentHeaderGrossWeightPrefix (object, prefix, caption)
    @defineDocumentHeaderGrossWeightPrefix (user###object, prefix, caption)
END

META defineDocumentHeaderGrossWeight (object)
    @defineDocumentHeaderGrossWeightCustomPrefix(object, object##Detail, , );
END
META defineDocumentInterfaceHeaderGrossWeight (object)
    @defineDocumentHeaderGrossWeight(object);
    @defineDocumentHeaderGrossWeight(user###object);
END

// ------------------------------------------------ Кол-во в документе для contact ------------------------------------ //
META defineDocumentHeaderQuantityContractorCustomPrefix (object, detail, prefix, caption, contact)
    prefix###quantity###detail###object###contact 'Кол-во (всего)'###caption (object, contact) = GROUP SUM prefix###quantity###detail(idetail) BY object###detail(idetail), contact###detail(idetail) IN documentSumGroup PERSISTENT;
END

META defineDocumentHeaderQuantityContractorCustom (object, detail, contact)
    @defineDocumentHeaderQuantityContractorCustomPrefix(object, detail, , , contact);
END

META defineDocumentHeaderQuantityContractorPrefix (object, prefix, caption, contact)
    @defineDocumentHeaderQuantityContractorCustomPrefix(object, object##Detail, prefix, caption, contact);
END

META defineDocumentHeaderQuantityContractor (object, contact)
    @defineDocumentHeaderQuantityContractorCustomPrefix(object, object##Detail, , , contact);
END


// ------------------------------------------------ Кол-во SKU в документе ------------------------------------ //
META defineDocumentHeaderSkuQuantityCaptionCustom (object, detail, skuProp, caption)
    quantity###detail###skuProp###object 'Кол-во товара в документе'###caption (sku, object) = GROUP SUM quantity###detail(idetail)
                                                                                           BY  skuProp###detail(idetail),
                                                                                               object###detail(idetail);
END

META defineDocumentHeaderSkuQuantityCustom (object, detail, skuProp)
    quantity###detail###skuProp###object 'Кол-во товара в документе' (sku, object) = GROUP SUM quantity###detail(idetail)
                                                                                           BY  skuProp###detail(idetail),
                                                                                               object###detail(idetail);
END

META defineDocumentHeaderSkuQuantity (object, skuProp)
    @defineDocumentHeaderSkuQuantityCustom(object, object###detail, skuProp);
END

// ------------------------------------------------ Кол-во SKU в документе для contact------------------------------------ //
META defineDocumentHeaderSkuQuantityContractorCaptionCustom (object, detail, skuProp, caption, contact)
    quantity###detail###skuProp###object###contact 'Кол-во товара в документе'###caption (sku, object, contact) = GROUP SUM quantity###detail(idetail)
                                                                                           BY  skuProp###detail(idetail),
                                                                                               object###detail(idetail),
                                                                                               contact###detail(idetail);
END

META defineDocumentHeaderSkuQuantityContractorCustom (object, detail, skuProp, contact)
    quantity###detail###skuProp###object###contact 'Кол-во товара в документе' (sku, object, contact) = GROUP SUM quantity###detail(idetail)
                                                                                           BY  skuProp###detail(idetail),
                                                                                               object###detail(idetail),
                                                                                               contact###detail(idetail);
END

META defineDocumentHeaderSkuQuantityContractor (object, skuProp, contact)
    @defineDocumentHeaderSkuQuantityContractorCustom(object, object###detail, skuProp, contact);
END

// ------------------------------------------------ Сумма в документе ------------------------------------ //

META defineDocumentHeaderSumCustom (object, detail, caption)
    sum###detail###object 'Сумма'###caption (object) = GROUP SUM sum###detail(idetail) BY object###detail(idetail) IN documentSumGroup;
END
META defineDocumentInterfaceHeaderSumCustom (object, detail, caption)
    @defineDocumentHeaderSumCustom (object, detail, caption);
    @defineDocumentHeaderSumCustom (user###object, user###detail, caption);
END

META defineDocumentHeaderSumCustom (object, detail)
    @defineDocumentHeaderSumCustom(object, detail, );
END
META defineDocumentInterfaceHeaderSumCustom (object, detail)
    @defineDocumentHeaderSumCustom(object, detail);
    @defineDocumentHeaderSumCustom(user###object, user###detail);
END

META defineDocumentHeaderSum (object)
    @defineDocumentHeaderSumCustom(object, object##Detail);
END
META defineDocumentInterfaceHeaderSum (object)
    @defineDocumentHeaderSum(object);
    @defineDocumentHeaderSum(user###object);
END

META defineDocumentHeaderSumCustomPrefix (object, detail, prefix, caption)
    prefix###sum###detail###object 'Сумма'###caption (object) = GROUP SUM prefix###sum###detail(idetail) BY object###detail(idetail) IN documentSumGroup;
END
META defineDocumentInterfaceHeaderSumCustomPrefix (object, detail, prefix, caption)
    @defineDocumentHeaderSumCustomPrefix(object, detail, prefix, caption);
    @defineDocumentHeaderSumCustomPrefix(user###object, user###detail, prefix, caption);
END

META defineDocumentHeaderSumPrefix (object, prefix, caption)
    @defineDocumentHeaderSumCustomPrefix(object, object##Detail, prefix, caption);
END
META defineDocumentInterfaceHeaderSumPrefix (object, prefix, caption)
    @defineDocumentHeaderSumPrefix(object, prefix, caption);
    @defineDocumentHeaderSumPrefix(user###object, prefix, caption);
END

META defineDocumentDetailDiffSumCustomPrefix (detail, prop, prefixA, prefixB, caption)
    diff###prop###detail 'Сумма '###caption (detail) =  prefixA###prop###detail(detail) (-) prefixB###prop###detail(detail);
END

META defineDocumentInterfaceDetailDiffSumCustomPrefix (detail, prop, prefixA, prefixB, caption)
    @defineDocumentDetailDiffSumCustomPrefix(detail, prop, prefixA, prefixB, caption);
    @defineDocumentDetailDiffSumCustomPrefix(user###detail, prop, prefixA, prefixB, caption);

END
META defineDocumentInterfaceDetailDiffSumPrefix (object, prop, prefixA, prefixB, caption)
    @defineDocumentInterfaceDetailDiffSumCustomPrefix(object##Detail, prop, prefixA, prefixB, caption);
END


// ------------------------------------------------ Сумма в документе для contact------------------------------------ //

META defineDocumentHeaderSumContractorCustom (object, detail, caption, contact)
    sum###detail###object###contact 'Сумма'###caption (object, contact) = GROUP SUM sum###detail(idetail) BY object###detail(idetail), contact###detail(idetail)  IN documentSumGroup;
END


META defineDocumentHeaderSumContractorCustom (object, detail, contact)
    @defineDocumentHeaderSumContractorCustom(object, detail, , contact);
END

META defineDocumentHeaderSumContractor (object, contact)
    @defineDocumentHeaderSumContractorCustom(object, object##Detail, , contact);
END
// ---------------------------------------------- Остатки -------------------------------------------- //

META defineDocumentDetailSkuBalance (object, skuProp, stockProp)
    balanceBSku###object##Detail 'Текущий остаток' (object##Detail) = balanceBSkuStockDateTime(
        skuProp###object##Detail(object##Detail), stockProp###object##Detail(object##Detail), dateTime###object##Detail(object##Detail));
END
META defineDocumentDetailSkuBalanceCustom (detail)
    balanceBSku###detail 'Количество до' (detail) = DATA NUMERIC[14,3] (detail);

END
META defineDocumentAbstractDetailSkuBalanceCustom (detail)
    balanceBSku###detail 'Количество до' (detail) = ABSTRACT NUMERIC[14,3] (detail) PERSISTENT;
END


META defineDocumentInterfaceDetailSkuBalanceCustom(detail)
    @defineDocumentAbstractDetailSkuBalanceCustom(detail);
    @defineDocumentDetailSkuBalanceCustom(user###detail);
    balanceBSku###detail(detail) += balanceBSku###user###detail(detail);
END
META defineDocumentInterfaceDetailSkuBalance(object)
    @defineDocumentInterfaceDetailSkuBalanceCustom(object##Detail);
END

META deriveDocumentDetailSkuBalanceCustom (detail, skuProp, stockProp)
    balanceBSku###detail (detail)  <- [PREV(balanceBSkuStockDateTime(sku, stock, dateTime))](skuProp###detail(detail), stockProp###detail(detail), dateTime###detail(detail))
        WHEN CHANGED(skuProp###detail(detail)) OR CHANGED(stockProp###detail(detail)) OR CHANGED(dateTime###detail(detail));
END
META deriveDocumentDetailSkuBalance (object, skuProp, stockProp)
    @deriveDocumentDetailSkuBalanceCustom(object##Detail, skuProp, stockProp);
END

// ---------------------------------------------- Остатки или партия или товар -------------------------------------------- //

META defineDocumentDetailSkuBatchBalance (object, skuProp, stockProp)
    balanceBSkuBatch###object##Detail 'Текущий остаток' (object##Detail) =
        IF batch###object##Detail(object##Detail) IS batch
        THEN balanceBBatchStockDateTime(batch###object##Detail(object##Detail), stockProp###object##Detail(object##Detail), dateTime###object##Detail(object##Detail))
            ELSE balanceBSkuStockDateTime(skuProp###object##Detail(object##Detail), stockProp###object##Detail(object##Detail), dateTime###object##Detail(object##Detail));
END

//----------- Изменение кол-ва для строки при изменении кол-ва для товара (несколько складов)---------------//
META defineDocumentSkuStockCustom(object, detail, skuProp, stockProp)
    detail###Sku###object###stockProp (sku, object, stock) =  GROUP MAX detail
        BY skuProp###detail(detail), object###detail(detail), stockProp###detail(detail);

    quantitySku###object###stockProp 'Кол-во товара в документе' (sku, object, stock) = GROUP SUM quantity###detail(detail)
        BY skuProp###detail(detail), object###detail(detail), stockProp###detail(detail);

    priceListType###object###sku(object, sku) = (priceListType###object(object) AND sku IS sku) OR priceListTypeAgreementSkuOver(agreement###object(object), sku);

    priceSkuStock###object 'Цена' (sku, stock, object) = prevPricePriceListTypeSkuStockDateTime(priceListType###object###sku(object, sku), sku, stock, dateTime###object(object));
    ledgerPriceSkuStock###object 'Цена (базовая)' (sku, stock, object) = prevPricePriceListTypeSkuStockDateTime(ledgerPriceListTypePriceListType(priceListType###object###sku(object, sku)), sku, stock, dateTime###object(object));

    overChangeQuantityValueSku###object##Detail = ABSTRACT ACTION (detail);
    changeQuantityValueSku###object###Stock = ACTION (sku, object, stock) {

        IF detail###Sku###object###stockProp(sku, object, stock) THEN {
            IF requestedNumeric() THEN {
                SET quantity###detail(detail) <- requestedNumeric() WHERE detail == detail###Sku###object###stockProp(sku, object, stock);
                EXEC overChangeQuantityValueSku###object##Detail(detail###Sku###object###stockProp(sku, object, stock));
            } ELSE {
                EXEC delete(detail###Sku###object###stockProp(sku, object, stock));
            }

        } ELSE {
            IF requestedNumeric() THEN {
                FOR ADDOBJ d = detail DO {
                   SET object###detail(d) <- object;
                   SET data###stockProp###detail (d) <- stock;
                   SET skuProp###detail(d) <- sku;
                   SET quantity###detail (d) <- requestedNumeric();
                   SET shipmentDataDate###detail (d) <- shipmentDate###object(object);
                   SET shipmentDataTime###detail (d) <- shipmentTime###object(object);
                   EXEC overChangeQuantityValueSku###object##Detail(d);
                }
            }
        }
    }
    changeQuantitySku###object###Stock = ACTION (sku, object, stock) {
        REQUEST NUMERIC[14,3] INPUT;
        EXEC changeQuantityValueSku###object###Stock(sku, object, stock);
    }

END
META defineDocumentSkuStock(object, skuProp, stockProp)
    @defineDocumentSkuStockCustom(object, object##Detail, skuProp, stockProp);
END

META extendFormDocumentSkuStockCustom(object, form, concrete, stockProp)

    EXTEND FORM form

        TREE stockTree a = STRING[3], sg = stockGroup PARENT parentStockGroup, ts = stock
        PROPERTIES READONLY OBJVALUE(a), sgTreeName = name(sg), tsTreeName = name(ts)
        ORDER BY sgTreeName
        FILTERS stringEqualsAll(a),
                stockGroupStock(ts) == sg

        TREE skuTree sk = skuGroup PARENT parentSkuGroup
        PROPERTIES READONLY skuTreeName = name(sk)
        ORDER BY skuTreeName

        OBJECTS           sts=(st=stock, s=sku)
        PROPERTIES        READONLY nameSku(s), idBarcodeSku(s), shortNameUOMSku(s), stockName = name(st)

        FILTERS           isParentSkuGroupSku(sk, s),
                          (st == ts AND sg IS stockGroup OR isParentStockGroupStock(sg, st) AND NOT ts OR st IS stock AND NOT sg AND NOT ts) AND NOT stockProp###object(concrete) OR
                          st == stockProp###object(concrete) AND NOT sg AND NOT ts

        ORDER BY          nameSku, stockName

        PROPERTIES        quantitySku###object###stockProp(s, concrete, st) ON CHANGE EXEC changeQuantitySku###object###stock(s, concrete, st), currentBalanceSkuStock(s,st) READONLY, priceSkuStock###object(s, st, concrete) READONLY
        FILTERGROUP filter
            FILTER 'С остатком ' 'F10' currentBalanceSkuStock(s, st)
            FILTER 'В заказе ' 'F9' quantitySku###object###stockProp(s, concrete, st)
    ;

    EXTEND DESIGN form {
        specification.box {
            type = TABBED;
            NEW itemBox {
                childConstraints = TO THE RIGHT;
                title = 'Подбор';
                type = SPLITH;

                NEW skuFilters {
                    type = SPLITV;
                    ADD stockTree.tree.box { title = 'Группы складов'; }
                    ADD skuTree.tree.box { title = 'Группы SKU'; }
                }
                NEW row {
                    childConstraints = TO THE BOTTOM;
                    ADD sts.box {
                        title = 'SKU';
                        sts.grid { fillHorizontal = 2; }
                    }
                }
            }
        }
        PROPERTY(currentBalanceSkuStock) { background = #FFEEEE; }
    }
END

//----------- Изменение кол-ва для строки при изменении кол-ва для товара (один склад)---------------//

META defineDocumentSkuPriceListType(object, stockProp)
    @defineDocumentSku(object, sku, stockProp);
    priceListType###object###sku(object, sku) = (priceListType###object(object) AND sku IS sku) OR priceListTypeAgreementSkuOver(agreement###object(object), sku);

    priceSku###object 'Цена' (sku, object) = pricePriceListTypeSkuStockDateTime(priceListType###object###sku(object, sku), sku, stockProp###object(object), dateTime###object(object));
END
META defineDocumentSkuSystemLedgerPriceListType(object, priceListTypeProp, stockProp)
    @defineDocumentSku(object, sku, stockProp);
    priceSku###object 'Цена' (sku, object) = pricePriceListTypeSkuStockDateTime(systemLedgerPriceListType.##priceListTypeProp, sku, stockProp###object(object), dateTime###object(object));
END


META defineDocumentSku(object, detail, skuProp, stockProp)
    detail###Sku###object###stockProp (sku, object, stock) =  GROUP MAX detail
        BY skuProp###detail(detail), object###detail(detail), stockProp###detail(detail);
    detail###Sku###object (sku, object) = detail###Sku###object###stockProp(sku, object, stockProp###object(object));

    currentBalanceSku###object 'Остаток' (sku, object) = currentBalanceSkuStock(sku, stockProp###object(object));

    overChangeQuantityValueSku###object##Detail = ABSTRACT ACTION (detail);

    changeQuantityValueSku###object = ACTION (sku, object) {
        IF detail###Sku###object(sku, object) THEN {
            IF requestedNumeric() THEN {
                SET quantity###detail(detail) <- requestedNumeric() WHERE detail == detail###Sku###object(sku, object);
                EXEC overChangeQuantityValueSku###object##Detail(detail###Sku###object(sku, object));
            } ELSE {
                FOR object###detail(detail) == object AND stockProp###detail(detail) == stockProp###object(object) AND skuProp###detail(detail) == sku DO {    //AND NOT quantity###detail(detail)
                    EXEC delete(detail###Sku###object(sku, object));
                }
            }
        } ELSE {
            IF requestedNumeric() THEN {
                ADDOBJ detail;
                FOR d == addedObject() DO {
                    SET object###detail(d) <- object;
                    SET stockProp###detail (d) <- stockProp###object(object);
                    SET skuProp###detail(d) <- sku;
                    SET quantity###detail (d) <- requestedNumeric();
                    EXEC overChangeQuantityValueSku###object##Detail(d);
                }
            }
        }
    }

    changeQuantitySku###object = ACTION (sku, object) {
        REQUEST NUMERIC[14,3] INPUT;
        EXEC changeQuantityValueSku###object(sku, object);
    }
END

META defineDocumentSku(object, skuProp, stockProp)
    @defineDocumentSku(object, object##Detail, skuProp, stockProp);
END

META extendFormDocumentSkuCustom(object, form, concrete, skuProp, detail)

    EXTEND FORM form

        TREE skuTree sk = skuGroup PARENT parentSkuGroup
        PROPERTIES READONLY skuTreeName = name(sk)
        ORDER BY skuTreeName

        OBJECTS s=sku
        PROPERTIES             READONLY    inputName = nameSku(s)
        PROPERTIES(s)          READONLY idBarcodeSku, shortNameUOMSku
        PROPERTIES(s, concrete) quantity###detail###skuProp###object ON CHANGE EXEC changeQuantitySku###object(s, concrete), currentBalanceSku###object READONLY, priceSku###object READONLY

        FILTERS                isParentSkuGroupSku(sk, s)
        ORDER BY inputName

        FILTERGROUP filter
            FILTER 'С остатком ' 'F10' currentBalanceSku###object(s, concrete)
            FILTER 'В документе ' 'F9' quantity###detail###skuProp###object(s, concrete)

    ;

    EXTEND DESIGN form {
        specification.box {
            type = TABBED;
            NEW itemBox {
                childConstraints = TO THE RIGHT;
                title = 'Подбор';
                type = SPLITH;

                ADD skuTree.tree.box { title = 'Группы SKU'; }
                NEW row {
                    childConstraints = TO THE BOTTOM;
                    ADD s.box {
                        s.grid { fillHorizontal = 2; }
                    }
                }
            }
        }
        PROPERTY(currentBalanceSku###object) { background = #FFEEEE; }
    }
END
META extendFormDocumentSku(object, form, concrete)
    @extendFormDocumentSkuCustom(object, form, concrete, sku, object##Detail);
END

//----------- Изменение кол-ва для строки при изменении кол-ва для товара (несколько складов и несколько контрагентов(в колонках))---------------//
META defineDocumentSkuStockContractorCustom(object, detail, skuProp, stockProp, contactStock)
    detail###Sku###object###stockProp###contactStock (sku, object, stockProp, contactStock) =  GROUP MAX detail
        BY skuProp###detail(detail), object###detail(detail), stockProp###detail(detail), contactStock###detail(detail);

    quantitySku###object###stockProp###contactStock 'Кол-во товара в документе' (sku, object, stockProp, contactStock) = GROUP SUM quantity###detail(detail)
        BY skuProp###detail(detail), object###detail(detail), stockProp###detail(detail), contactStock###detail(detail);

    quantitySku###object###stockProp 'Итого' (sku, object, stockProp) = GROUP SUM quantity###detail(detail)
        BY skuProp###detail(detail), object###detail(detail), stockProp###detail(detail);

    backgroundQuantitySku###object###Stock 'Цвет' (sku, object, stock) = RGB(255,128,128)
        IF quantitySku###object###stockProp(sku, object, stock) > (currentBalanceSkuStock(sku, stock) AND object IS object);

    priceSkuStock###object###contactStock 'Цена' (sku, stockProp, object, contactStock) = pricePriceListTypeSkuStockDateTime(priceListType###object###stock(object, contactStock), sku, stockProp, dateTime###object(object));

    changeQuantitySku###object###Stock###contactStock = ACTION (sku, object, stockProp, contactStock) {
        REQUEST NUMERIC[14,3] INPUT;
        IF detail###Sku###object###stockProp###contactStock(sku, object, stockProp, contactStock) THEN {
            IF requestedNumeric() THEN {
                SET quantity###detail(detail) <- requestedNumeric() WHERE detail == detail###Sku###object###stockProp###contactStock(sku, object, stockProp, contactStock);
            } ELSE {
                FOR object###detail(detail) == object AND stockProp###detail(detail) == stockProp AND skuProp###detail(detail) == sku AND contactStock###detail(detail) == contactStock DO { //AND NOT quantity###detail(detail)
                    EXEC delete(detail###Sku###object###stockProp###contactStock(sku, object, stockProp, contactStock));
                }
            }
        } ELSE {
            IF requestedNumeric() THEN {
                FOR ADDOBJ d = detail DO {

                   SET object###detail(d) <- object;
                   SET data###stockProp###detail (d) <- stockProp;
                   SET skuProp###detail(d) <- sku;
                   SET contactStock###detail(d) <- contactStock ;
                   SET quantity###detail (d) <- requestedNumeric();
                   SET shipmentDataDate###detail (d) <- shipmentDate###object(object);
                   SET shipmentDataTime###detail (d) <- shipmentTime###object(object);
                }
            }
        }
    }
END
META defineDocumentSkuStockContractor(object, skuProp, stockProp, contactStock)
    @defineDocumentSkuStockContractorCustom(object, object##Detail, skuProp, stockProp, contactStock);
END

META extendFormDocumentSkuStockContractorCustom(object, form, concrete, stockProp, contactStock)

    nameQuantity###contactStock (stock)= [FORMULA STRING[50] 'CAST($1 AS TEXT) || \' \' || \'(кол-во)\''](name(stock)) MINCHARWIDTH 15 PREFCHARWIDTH 20;
    namePrice###contactStock (stock)= [FORMULA STRING[50] 'CAST($1 AS TEXT) || \' \' || \'(цена)\''](name(stock)) MINCHARWIDTH 15 PREFCHARWIDTH 20;

    EXTEND FORM form

        TREE stockTree a = STRING[3], sg = stockGroup PARENT parentStockGroup, ts = stock
        PROPERTIES READONLY OBJVALUE(a), sgTreeName = name(sg), tsTreeName = name(ts)
        ORDER BY sgTreeName
        FILTERS stringEqualsAll(a),
                stockGroupStock(ts) == sg

        TREE skuTree sk = skuGroup PARENT parentSkuGroup
        PROPERTIES READONLY skuTreeName = name(sk)
        ORDER BY skuTreeName

        OBJECTS cc = stock FIXED GRID

        OBJECTS           sts=(st=stock, s=sku)
        PROPERTIES        READONLY nameSku(s), idBarcodeSku(s), shortNameUOMSku(s), stockName = name(st)

        FILTERS           isParentSkuGroupSku(sk, s),
                          (st == ts AND sg IS stockGroup OR isParentStockGroupStock(sg, st) AND NOT ts OR st IS stock AND NOT sg AND NOT ts) AND NOT stockProp###object(concrete) OR
                          st == stockProp###object(concrete) AND NOT sg AND NOT ts

        ORDER BY          nameSku, stockName

        PROPERTIES quantitySku###object###stockProp(s, concrete, st) READONLY BACKGROUND backgroundQuantitySku###object###Stock(s, concrete, st)
        PROPERTIES quantitySku###object###stockProp###contactStock(s, concrete, st, cc)  COLUMNS (cc) HEADER nameQuantity###contactStock(cc) ON CHANGE EXEC changeQuantitySku###object###Stock###contactStock(s, concrete, st, cc)
        PROPERTIES READONLY currentBalanceSkuStock(s,st)
        PROPERTIES READONLY  priceSkuStock###object###contactStock(s, st, concrete, cc)  COLUMNS (cc) HEADER namePrice###contactStock(cc)

        FILTERS in###object###stock(concrete,cc)

        FILTERGROUP filtr2
            FILTER 'С остатком ' 'F10' currentBalanceSkuStock(s, st)
            FILTER 'В заказе' 'F9' quantitySku###object###stockProp(s, concrete, st)


    ;

    EXTEND DESIGN form {
        REMOVE cc.box;
        specification.box {
            type = TABBED;
            NEW itemBox {
                childConstraints = TO THE RIGHT;
                title = 'Подбор';
                type = SPLITH;

                NEW skuFilters {
                    type = SPLITV;
                    ADD stockTree.tree.box { title = 'Группы складов'; }
                    ADD skuTree.tree.box { title = 'Группы SKU'; }
                }
                NEW row {
                    childConstraints = TO THE BOTTOM;
                    ADD sts.box {
                        title = 'SKU';
                        sts.grid { fillHorizontal = 4; }
                    }
                }
            }
        }
        PROPERTY(currentBalanceSkuStock) { background = #FFEEEE; }
    }
END

//-------------------------------- Расширение формы подбор товаров (заказ/инвойс)----------------------------//

META defineDocumentContactSkuStock (object, form, contact, contactCaption, concrete, concrete2)  //  defineDocumentSupplierSkuStock
    contact###entity###object = DATA SESSION legalEntity (object);
    name###contact###entity###object contactCaption (object) = name(contact###entity###object(object));
    relation###contact###object###sku (object, sku) =  (TRUE AND in###contact###Sku(contact###entity###object(object), sku)) OR (sku IS sku AND NOT contact###entity###object(object));

    EXTEND FORM form
        PROPERTIES name###contact###entity###object(concrete) FORCE PANEL
        FILTERS           relation###contact###object###sku(concrete, s)
    ;
    EXTEND DESIGN form {
        row {
            ADD concrete.panel BEFORE concrete2.box;
        }
    }
END
// ---------------------------------- Диалоги --------------------------- //

editStock 'Редактировать' = ABSTRACT ACTION (stock) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
editSessionStock 'Редактировать' = ABSTRACT ACTION (stock) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

FORM stocks 'Склады'

    TREE stockTree a = STRING[3], sg = stockGroup PARENT parentStockGroup
    PROPERTIES READONLY OBJVALUE(a), sgTreeName = name(sg)
    ORDER BY sgTreeName
    FILTERS stringEqualsAll(a)

    OBJECTS s = stock
    PROPERTIES(s) READONLY stockName = name, nameLegalEntityStock, nameCountryStock, addressStock
    PROPERTIES(s)          editStock
    ORDER BY stockName
    FILTERS isParentStockGroupStock(sg, s) OR (s IS stock AND NOT sg)

    DIALOG stock OBJECT s
;

DESIGN stocks FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            ADD stockTree.tree.box {
                title = 'Склады';
            }

            ADD s.box {
                s.grid {
                    defaultComponent = TRUE;
                    fillHorizontal = 2;
                }
            }
        }

        ADD functions.box;
    }
}

editSku 'Редактировать' = ABSTRACT ACTION (sku) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
addSku 'Добавить' = ABSTRACT ACTION () IMAGE 'add.png' EDITKEY 'INSERT' HIDE TOOLBAR;

FORM skus 'Sku'
    TREE skuTree sg = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuGroupName = name(sg)

    OBJECTS s = sku
    PROPERTIES(s) READONLY nameSku, shortNameUOMSku
    PROPERTIES() addSku TODRAW s
    PROPERTIES(s) editSku
    FILTERS isParentSkuGroupSku(sg, s)
    ORDER BY nameSku

    DIALOG sku OBJECT s
;

DESIGN skus FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            ADD skuTree.tree.box {
                title = 'Группы SKU';
            }

            ADD s.box {
                s.grid {
                    defaultComponent = TRUE;
                    fillHorizontal = 4;
                }
            }
        }

        ADD functions.box;
    }
}

FORM batchDialog 'Партии'

    OBJECTS bt = batch
    PROPERTIES (bt) READONLY nameSkuBatch, dateTimeBatch, descriptionBatch,
                   quantityBatch, costBatch
    DIALOG batch OBJECT bt
;

FORM dialogBatch 'Партии'
    OBJECTS st = stock FIXED PANEL
    OBJECTS t = DATETIME FIXED PANEL
    OBJECTS sk = sku FIXED PANEL

    OBJECTS bt = batch
    PROPERTIES (bt) READONLY nameSkuBatch, dateTimeBatch, descriptionBatch, quantityBatch, costBatch
    PROPERTIES  READONLY balanceBBatchStockDateTime(bt, st, t)
    FILTERS skuBatch(bt) == sk

    FILTERGROUP batch
        FILTER 'Партии с остатком' 'F11' balanceBBatchStockDateTime(bt, st, t) DEFAULT
;
DESIGN dialogBatch FROM DEFAULT {
    main {
        PROPERTY (balanceBBatchStockDateTime) {
            caption = 'Текущий остаток';
        }
    }
}

// ------------------------------------------------- Себестоимость --------------------------- //

FORM costSkuLedger 'Себестоимость (операции)'
    OBJECTS bil = skuLedger
    PROPERTIES(bil) READONLY dateTimeSkuLedger, descriptionSkuLedger, nameSkuSkuLedger, nameStockSkuLedger,
                             quantitySkuLedger, costedSkuLedger
    PROPERTIES(bil)          resetCostDataSkuLedger FORCE GRID
    ORDER BY dateTimeSkuLedger

    FILTERGROUP needToCostDataSkuLedger
        FILTER 'Нерасписанные строки' 'F9' needToCostDataSkuLedger(bil)

    OBJECTS bt = batch
    PROPERTIES(bt) READONLY dateTimeBatch, descriptionBatch, quantityBatch, costBatch, currentBalanceBatch
    PROPERTIES(bil, bt)     costSkuLedgerBatch FORCE GRID
    FILTERS skuBatch(bt) == skuSkuLedger(bil)
    ORDER BY dateTimeBatch DESC

    FILTERGROUP inSkuLedgerBatch
        FILTER 'Только расписанные партии' 'F10' costSkuLedgerBatch (bil, bt) DEFAULT

    PROPERTIES() setDataSkuLedgerBatchCost, resetDataSkuLedgerBatchCost, clearDataSkuLedgerBatchCost
;
@extendFormFilterAccess(skuLedger, bil, costSkuLedger, stock);


DESIGN costSkuLedger FROM DEFAULT {
    NEW topContainer{
        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD bil.box;
        ADD bt.box;
    }

    NEW buttonContainer {
        childConstraints = TO THE RIGHT;
        ADD PROPERTY(setDataSkuLedgerBatchCost);
        ADD PROPERTY(resetDataSkuLedgerBatchCost);
        ADD PROPERTY(clearDataSkuLedgerBatchCost);
    }

    ADD functions.box;
}

FORM costSkuBatchLedger 'Себестоимость (партии)'
    OBJECTS i = sku FIXED PANEL
    PROPERTIES(i) SELECTOR nameSku//, idBarcodeSku

    OBJECTS bt = batch
    PROPERTIES(bt) READONLY dateTimeBatch, descriptionBatch, quantityBatch, costBatch, currentBalanceBatch

    OBJECTS bil = skuLedger
    PROPERTIES(bil) READONLY dateTimeSkuLedger, descriptionSkuLedger, nameStockSkuLedger,
                             quantitySkuLedger, costedSkuLedger
//    PROPERTIES(bil)          resetCostSkuLedger
    ORDER BY dateTimeSkuLedger

    FILTERGROUP needToCostSkuLedger
        FILTER 'Нерасписанные строки' 'F9' needToCostDataSkuLedger(bil)


    PROPERTIES(bil, bt)     READONLY costSkuLedgerBatch FORCE GRID
    FILTERS skuBatch(bt) == i,
            skuSkuLedger(bil) == i

    ORDER BY dateTimeBatch DESC

    FILTERGROUP inSkuLedgerBatch
        FILTER 'Только расписанные партии' 'F10' costSkuLedgerBatch (bil, bt) DEFAULT
;

DESIGN costSkuBatchLedger FROM DEFAULT {
    NEW topContainer {
        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD bt.box;
        ADD bil.box;
    }
    ADD functions.box;
}

// ------------------------------------------------ Остатки по товарам ---------------------------------------- //

FORM currentBalanceSkuStock 'Текущие остатки'

    TREE stockTree a = STRING[3], sg = stockGroup PARENT parentStockGroup, ts = stock
    PROPERTIES READONLY OBJVALUE(a), sgTreeName = name(sg), tsTreeName = name(ts)
    ORDER BY sgTreeName
    FILTERS stringEqualsAll(a),
            stockGroupStock(ts) == sg

    TREE skuTree sk = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = name(sk)
    ORDER BY skuTreeName

    OBJECTS           sts=(st=stock, s=sku)
    PROPERTIES        READONLY nameSku(s), stockName = name(st)  //  idBarcodeSku
    FILTERS           isParentSkuGroupSku(sk, s),
                      st == ts AND sg IS stockGroup OR isParentStockGroupStock(sg, st) AND NOT ts OR st IS stock AND NOT sg AND NOT ts

    ORDER BY          nameSku


    PROPERTIES(s, st) READONLY currentBalanceSkuStock, averagePriceSkuStock, currentSumSkuStock, dateLastMovedSkuStock

    FILTERGROUP filters
        FILTER 'Товары с остатком' 'F10' currentBalanceSkuStock(s, st) DEFAULT
        FILTER 'Товары с движением не позднее 1 дня' 'F9' balanceSkuStockDatePeriod(s, st, currentDate(), 1)
        FILTER 'Товары с движением не позднее 7 дней' 'F8' balanceSkuStockDatePeriod(s, st, currentDate(), 7)
        FILTER 'Товары с движением не позднее 30 дней' 'F7' balanceSkuStockDatePeriod(s, st, currentDate(), 30)

    OBJECTS bil=skuLedger
    PROPERTIES(bil) READONLY descriptionSkuLedger, dateTimeSkuLedger, signedQuantitySkuLedger, signedSumSkuLedger, skipSkuLedger
    FILTERS isPostedSkuLedger(bil) AND skuSkuLedger(bil)==s AND stockSkuLedger(bil)==st
    ORDER BY dateTimeSkuLedger DESC

    OBJECTS bt=batch
    PROPERTIES(bt) READONLY      dateTimeBatch, descriptionBatch, quantityBatch, costBatch
    PROPERTIES(bt, st) READONLY  currentBalanceBatchStock
    FILTERS isPostedBatch(bt) AND skuBatch(bt)==s
    ORDER BY dateTimeBatch DESC
;
@extendFormFilterStockAccess(stock, st, currentBalanceSkuStock);
@extendFormFilterStockGroupAccess(stock, ts, currentBalanceSkuStock, accessEmployeeEmployeeDivisionOver);
@extendFormFilterStockGroupAccess(stockGroup, sg, currentBalanceSkuStock, accessEmployeeEmployeeDivisionGroup);

DESIGN currentBalanceSkuStock FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;

            NEW firstBottom {
                type = SPLITV;
                ADD stockTree.tree.box { title = 'Склады'; }
                ADD skuTree.tree.box { title = 'Группы'; }
            }

            NEW secondCase {
                type = SPLITV;
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD sts.box { fillVertical = 2; }

                NEW ledger.box {
                    fillVertical = 1;
                    title = 'Изменение цен';
                    type = TABBED;
                    ADD bil.box;
                    ADD bt.box;
                }
            }
        }

        ADD functions.box;
    }
}

FORM balanceSkuStock 'Остатки на дату'

    OBJECTS t=DATETIME FIXED PANEL
    PROPERTIES(t) OBJVALUE

    TREE stockTree a = STRING[3], sg = stockGroup PARENT parentStockGroup, ts = stock
    PROPERTIES READONLY OBJVALUE(a), sgTreeName = name(sg), tsTreeName = name(ts)
    ORDER BY sgTreeName
    FILTERS stringEqualsAll(a),
            stockGroupStock(ts) == sg

    TREE skuTree sk = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = name(sk)
    ORDER BY skuTreeName

    OBJECTS           sts=(st=stock, s=sku)
    PROPERTIES        READONLY nameSku(s), stockName = name(st)  //  idBarcodeSku
    FILTERS           isParentSkuGroupSku(sk, s),
                      st == ts AND sg IS stockGroup OR isParentStockGroupStock(sg, st) AND NOT ts OR st IS stock AND NOT sg AND NOT ts

    PROPERTIES(s, st, t) READONLY balanceASkuStockDateTime
    PROPERTIES(s, st) READONLY dateLastMovedSkuStock

    FILTERGROUP filters
        FILTER 'Товары с остатком' 'F10' balanceASkuStockDateTime(s, st, t) DEFAULT
        FILTER 'Товары с движением не позднее 1 дня' 'F9' balanceSkuStockDateTimePeriod(s, st, t, 1)
        FILTER 'Товары с движением не позднее 7 дней' 'F8' balanceSkuStockDateTimePeriod(s, st, t, 7)
        FILTER 'Товары с движением не позднее 30 дней' 'F7' balanceSkuStockDateTimePeriod(s, st, t, 30)

    OBJECTS bil=skuLedger
    PROPERTIES(bil) READONLY descriptionSkuLedger, dateTimeSkuLedger, signedQuantitySkuLedger, signedSumSkuLedger
    FILTERS isPostedSkuLedger(bil) AND skuSkuLedger(bil)==s AND stockSkuLedger(bil)==st
    ORDER BY dateTimeSkuLedger DESC
;
@extendFormFilterStockAccess(stock, st, balanceSkuStock);
@extendFormFilterStockGroupAccess(stock, ts, balanceSkuStock, accessEmployeeEmployeeDivisionOver);
@extendFormFilterStockGroupAccess(stockGroup, sg, balanceSkuStock, accessEmployeeEmployeeDivisionGroup);

DESIGN balanceSkuStock FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            NEW firstCase {
                type = SPLITV;
                fillHorizontal = 1;
                childConstraints = TO THE BOTTOM;
                ADD t.box;
                NEW firstCaseTwo {
                    type = SPLITV;
                    ADD stockTree.tree.box { title = 'Склады'; }
                    ADD skuTree.tree.box { title = 'Группы'; }
                }
            }

            NEW secondCase {
                type = SPLITV;
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD sts.box {fillVertical = 2;}

                NEW ledger.box {
                    fillVertical = 1;
                    title = 'Регистры';
                    type = TABBED;
                    ADD bil.box;
                }

            }
        }

        ADD functions.box;
    }
}

// ------------------------------------------------ Остатки по партиям ---------------------------------------- //

FORM currentBalanceBatchStock 'Текущие остатки по партиям'

    TREE stockTree a = STRING[3], sg = stockGroup PARENT parentStockGroup, ts = stock
    PROPERTIES READONLY OBJVALUE(a), sgTreeName = name(sg), tsTreeName = name(ts)
    ORDER BY sgTreeName
    FILTERS stringEqualsAll(a),
            stockGroupStock(ts) == sg

    TREE skuTree sk = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = name(sk)
    ORDER BY skuTreeName

    OBJECTS           stb=(st=stock, bt=batch)
    PROPERTIES        READONLY nameSkuBatch(bt), stockName = name(st)
    PROPERTIES        currentBalanceBatchStock(bt, st)
    PROPERTIES(bt)    READONLY dateTimeBatch, descriptionBatch, quantityBatch, costBatch, expiryDateBatch
    FILTERS           isParentSkuGroupBatch(sk, bt),
                      st == ts AND sg IS stockGroup OR isParentStockGroupStock(sg, st) AND NOT ts OR st IS stock AND NOT sg AND NOT ts

    ORDER BY          dateTimeBatch

    OBJECTS bil=skuLedger
    PROPERTIES(bil) READONLY descriptionSkuLedger, dateTimeSkuLedger, signedQuantitySkuLedger, skipSkuLedger
    FILTERS isPostedSkuLedger(bil) AND skuSkuLedger(bil)==skuBatch(bt) AND stockSkuLedger(bil)==st
    ORDER BY dateTimeSkuLedger DESC

    FILTERGROUP filterBalance
        FILTER 'Партии с остатком' 'F11' currentBalanceBatchStock(bt, st) DEFAULT
        FILTER 'Партии пришедшие за последний 1 день' 'F10' dateTimeBatch(bt) >= currentDate() - 1
        FILTER 'Партии пришедшие за последние 7 дней' 'F9' dateTimeBatch(bt) >= currentDate() - 7
        FILTER 'Партии пришедшие за последние 30 дней' 'F8' dateTimeBatch(bt) >= currentDate() - 30

    FILTERGROUP filterExpiry
        FILTER 'Партии с истекшим сроком годности' 'F7' expiryDateBatch(bt) < currentDate()
        FILTER 'Партии со сроком годности, истекающим через 1 день' 'F6' expiresBatchDate(bt, currentDate(), 1)
        FILTER 'Партии со сроком годности, истекающим через 7 дней' 'F5' expiresBatchDate(bt, currentDate(), 7)
        FILTER 'Партии со сроком годности, истекающим через 30 дней' 'F4' expiresBatchDate(bt, currentDate(), 30)
;
@extendFormFilterStockAccess(stock, st, currentBalanceBatchStock);
@extendFormFilterStockGroupAccess(stock, ts, currentBalanceBatchStock, accessEmployeeEmployeeDivisionOver);
@extendFormFilterStockGroupAccess(stockGroup, sg, currentBalanceBatchStock, accessEmployeeEmployeeDivisionGroup);

DESIGN currentBalanceBatchStock FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            NEW firstCase {
                type = SPLITV;
                fillHorizontal = 1;
                childConstraints = TO THE BOTTOM;
                ADD stockTree.tree.box { title = 'Склады'; }
                ADD skuTree.tree.box { title = 'Группы'; }
            }

            NEW secondCase {
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;
                ADD stb.box {
                    title = 'Партии';

                }
                ADD bil.box {
                    title = 'Движение';
                }
            }
        }

        ADD functions.box;
    }
}

FORM balanceBatchStock 'Остатки по партиям на дату'

    OBJECTS t=DATETIME FIXED PANEL
    PROPERTIES(t) OBJVALUE

    TREE stockTree a = STRING[3], sg = stockGroup PARENT parentStockGroup, ts = stock
    PROPERTIES READONLY OBJVALUE(a), sgTreeName = name(sg), tsTreeName = name(ts)
    ORDER BY sgTreeName
    FILTERS stringEqualsAll(a),
            stockGroupStock(ts) == sg

    TREE skuTree sk = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = name(sk)
    ORDER BY skuTreeName

    OBJECTS           stb=(st=stock, bt=batch)
    PROPERTIES        READONLY stockName = name(st), nameSkuBatch(bt)
    PROPERTIES        balanceBBatchStockDateTime(bt, st, t)
    PROPERTIES(bt)    READONLY dateTimeBatch, descriptionBatch, quantityBatch, costBatch, expiryDateBatch
    FILTERS           isParentSkuGroupBatch(sk, bt),
                      st == ts AND sg IS stockGroup OR isParentStockGroupStock(sg, st) AND NOT ts OR st IS stock AND NOT sg AND NOT ts
    ORDER BY          dateTimeBatch

    FILTERGROUP filterBalance
        FILTER 'Партии с остатком' 'F11' balanceBBatchStockDateTime(bt, st, t) DEFAULT
        FILTER 'Партии пришедшие за последний 1 день' 'F10' dateTimeBatch(bt) >= t - 1
        FILTER 'Партии пришедшие за последние 7 дней' 'F9' dateTimeBatch(bt) >= t - 7
        FILTER 'Партии пришедшие за последние 30 дней' 'F8' dateTimeBatch(bt) >= t - 30

    FILTERGROUP filterExpiry
        FILTER 'Партии с истекшим сроком годности' 'F7' expiryDateBatch(bt) < t
        FILTER 'Партии со сроком годности, истекающим через 1 день' 'F6' expiresBatchDateTime(bt, t, 1)
        FILTER 'Партии со сроком годности, истекающим через 7 дней' 'F5' expiresBatchDateTime(bt, t, 7)
        FILTER 'Партии со сроком годности, истекающим через 30 дней' 'F4' expiresBatchDateTime(bt, t, 30)
;
@extendFormFilterStockAccess(stock, st, balanceBatchStock);
@extendFormFilterStockGroupAccess(stock, ts, balanceBatchStock, accessEmployeeEmployeeDivisionOver);
@extendFormFilterStockGroupAccess(stockGroup, sg, balanceBatchStock, accessEmployeeEmployeeDivisionGroup);

DESIGN balanceBatchStock FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            NEW firstCase {
                type = SPLITV;
                fillHorizontal = 1;
                childConstraints = TO THE BOTTOM;
                ADD t.box;
                NEW firstCaseTwo {
                    type = SPLITV;
                    ADD stockTree.tree.box { title = 'Склады'; }
                    ADD skuTree.tree.box { title = 'Группы'; }
                }
            }

            ADD stb.box {
                title = 'Партии';
                fillHorizontal = 2;
            };
        }

        ADD functions.box;
    }
}

NAVIGATOR {
    NEW stockCost 'Себестоимость' {
        ADD costSkuLedger;
        ADD costSkuBatchLedger;
    }
    NEW balanceSku 'Остатки по товару' {
        ADD currentBalanceSkuStock;
        ADD balanceSkuStock;
    }
    NEW balanceBatch 'Остатки по партиям' {
        ADD currentBalanceBatchStock;
        ADD balanceBatchStock;
    }
}


// -------------------------------------------- Подбор SKU --------------------------------------- //

META defineDialogSku (form)

    form###quantity 'Кол-во' = DATA SESSION NUMERIC[14,3] (sku);


    FORM form 'Подбор SKU'
        TREE skuTree sk = skuGroup PARENT parentSkuGroup
        PROPERTIES READONLY skuTreeName = name(sk)
        ORDER BY skuTreeName

        OBJECTS s=sku                                 //form###nameSku 'Наименование' (sku) = IF form###stock() THEN nameSkuStock(sku, form###stock()) ELSE nameSku(sku);
        PROPERTIES READONLY    inputName = nameSku(s) //form###nameSku(s)
        PROPERTIES(s)          form###quantity
        FILTERS                isParentSkuGroupSku(sk, s)
        ORDER BY inputName

        OBJECTS si=sku
        PROPERTIES READONLY     selectedName = nameSku(si)
        PROPERTIES(si)          form###quantity
        FILTERS                 form###quantity(si)
        ORDER BY selectedName
    ;

    DESIGN form FROM DEFAULT {
        main {
            preferredSize = (1024, 768);
            NEW skuContainer BEFORE functions.box {
                childConstraints = TO THE RIGHT;
                type = SPLITH;

                ADD skuTree.tree.box;
                NEW inputContainer {
                    childConstraints = TO THE BOTTOM;
                    type = SPLITV;

                    NEW filterContainer {
                        childConstraints = TO THE RIGHTBOTTOM;
                        //ADD PROPERTY(form###nameStock());
                    }

                    NEW inputSkuContainer {
                        childConstraints = TO THE BOTTOM;
                        type = SPLITV;

                        ADD s.box {
                            fillVertical = 3;
                            fillHorizontal = 2;
                        }
                        ADD si.box;
                    }
                }
            }
        }
    }

END

META defineDialogStockSku (form)

    @defineDialogSku (form);

    form###stock = DATA SESSION stock ();
    form###all 'Весь остаток' = DATA SESSION BOOLEAN (sku);
    form###nameStock 'Склад' () = name(form###stock()) PREFCHARWIDTH 30;

    form###balance 'Остаток' (sku) = currentBalanceSkuStock(sku, form###stock());
    form###balanceFilter (sku) = (TRUE AND form###balance(sku)) OR (sku IS sku AND NOT form###stock());

    form###quantity(sku) <- form###balance(sku) WHEN ASSIGNED(form###all(sku));

    EXTEND FORM form
        PROPERTIES() form###nameStock

        PROPERTIES(s) READONLY form###balance SHOWIF form###stock()
        PROPERTIES(s)          form###all SHOWIF form###stock()
        FILTERS                form###balanceFilter(s)

        PROPERTIES(si) READONLY form###balance SHOWIF form###stock()
        PROPERTIES(si)          form###all SHOWIF form###stock()
    ;

    EXTEND DESIGN form {
        filterContainer {
            ADD PROPERTY(form###nameStock());
        }
    }
END

META defineAddDetailDialogSkuStock (object, skuProp, stockProp, form)
    @defineAddDetailDialogSkuStockCustom (object, object##Detail, , skuProp, stockProp, form);
END

META defineAddDetailDialogSkuStockCustom (object, detail, caption, skuProp, stockProp, form)
    @defineAddDetailDialogSkuCustom(object, detail, caption, skuProp, form);
    addDetailDialogSkuStock###detail###object 'Подбор товаров'###caption = ACTION (object) {
        SET form###stock() <- stockProp###object(object);
        SET form###all(sku) <- NULL;

        EXEC addDetailDialogSku###detail###object(object AS object);
    } TOOLBAR;
END

META defineAddDetailDialogSku (object, skuProp, form)
    @defineAddDetailDialogSkuCustom(object, object##Detail, , skuProp, form);
END

META defineAddDetailDialogSkuCustom (object, detail, caption, skuProp, form)
    addDetailDialogSku###detail###object 'Подбор товаров'###caption = ACTION (object) {
        FORM form MODAL;
        IF formResult() == formResult.ok THEN {
            FOR form###quantity(sku) DO {
                ADDOBJ detail;
                FOR w == addedObject() DO {
                    SET object###detail(w) <- object AS object;
                    SET skuProp###detail(w) <- sku AS sku;
                    SET quantity###detail(w) <- form###quantity(sku);
                }
            }
        }
        SET form###quantity(sku) <- NULL;
    } TOOLBAR;
END

@defineDialogStockSku(dialogSku);

FORM chooseStocks 'Выбор складов'

    OBJECTS l = legalEntity

    TREE stockTree a = STRING[3], sg = stockGroup PARENT parentStockGroup
    PROPERTIES READONLY OBJVALUE(a), sgTreeName = name(sg)
    ORDER BY sgTreeName
    FILTERS stringEqualsAll(a)

    OBJECTS s=stock
    PROPERTIES(s) READONLY name, addressStock, nameLegalEntityStock
    PROPERTIES userLegalEntityStock(l, s)
    ORDER BY name
    FILTERS isParentStockGroupStock(sg, s) OR (s IS stock AND sg IS stockGroup AND NOT stockGroupStock(s)) OR (s IS stock AND NOT sg)
;

DESIGN chooseStocks FROM DEFAULT{

    NEW mainContainer{
        REMOVE l.box;
        type = SPLITH;
        childConstraints = TO THE RIGHT;
        ADD stockTree.tree.box;
        ADD s.box{fillHorizontal = 2.0;}
    }
    ADD functions.box;
}

chooseStocksLegalEntity 'Выбрать склады' = ACTION (legalEntity) {

    FORM chooseStocks OBJECTS l = legalEntity MODAL;
}

EXTEND FORM legalEntity
    TREE stockTree b=STRING[3], sg = stockGroup PARENT parentStockGroup
    PROPERTIES READONLY OBJVALUE(b), sgTreeName = name(sg)
    ORDER BY sgTreeName
    FILTERS stringEqualsAll(b)

    OBJECTS st=stock
    PROPERTIES(st) READONLY name, nameLegalEntityStock, nameCountryStock, addressStock
    PROPERTIES(st) FORCE PANEL DRAWTOTOOLBAR SHOWIF isDefaultLegalEntityStock(l,st) editSessionStock, delete
    PROPERTIES chooseStocksLegalEntity(l) TODRAW st FORCE PANEL DRAWTOTOOLBAR
    FILTERS isParentStockGroupStock(sg, st) OR (st IS stock AND NOT sg)
    FILTERS inLegalEntityStock(l, st)

    OBJECTS s=legalEntity
    PROPERTIES(s) READONLY name

    OBJECTS c=legalEntity
    PROPERTIES(c) READONLY name
;

EXTEND DESIGN legalEntity{
    extendContainer {
        NEW stockContainer {
            caption = 'Склады';
            childConstraints = TO THE RIGHT;
            type = SPLITH;
            ADD stockTree.tree.box;
            ADD st.box{fillHorizontal = 3.0;}
        }

        NEW agreementBuyContainer {
            caption = 'Закупка';
            type = SPLITH;
            ADD s.box {title = 'Поставщики';}
            NEW docContainer{
                type = SPLITV;
                caption = 'Договоры и соглашения';
                childConstraints = TO THE BOTTOM;
                fillHorizontal = 3;
            }
        }

        NEW agreementSaleContainer {
            caption = 'Продажа';
            type = SPLITH;
            ADD c.box {title = 'Покупатели';}
            NEW docContainer2{
                type = SPLITV;
                caption = 'Договоры и соглашения';
                childConstraints = TO THE BOTTOM;
                fillHorizontal = 3;
            }
        }
    }
}

// ------------------------------------------------ Стандартные значения --------------------------------------- //

loadDefaultUOM 'Добавить ед.изм.' = ACTION (stringOne, stringTwo, numeric) {
    ADDOBJ UOM;
    FOR u == addedObject() DO {
       SET name(u) <- stringOne AS STRING[110];
       SET shortName(u) <- stringTwo AS STRING[5];
       SET baseUOM(u) <- u AS UOM;
       SET factorUOM(u) <- numeric AS NUMERIC[17,3];
    }
}

loadDefaultUOMs 'Загрузить стандартные единицы измерений' = ACTION () {
    EXEC loadDefaultUOM('Банка', 'бан', 1);
    EXEC loadDefaultUOM('Бутылка', 'бут', 1);
    EXEC loadDefaultUOM('Килограмм', 'кг', 1);
    EXEC loadDefaultUOM('Коробка', 'кор', 1);
    EXEC loadDefaultUOM('Литр', 'л', 1);
    EXEC loadDefaultUOM('Место', 'мест', 1);
    EXEC loadDefaultUOM('Мешок', 'меш', 1);
    EXEC loadDefaultUOM('Пакет', 'пак', 1);
    EXEC loadDefaultUOM('Пачка', 'пач', 1);
    EXEC loadDefaultUOM('Рубль', 'руб', 1);
    EXEC loadDefaultUOM('Рулон', 'рул', 1);
    EXEC loadDefaultUOM('Упаковка', 'упак', 1);
    EXEC loadDefaultUOM('Штука', 'шт', 1);
    EXEC loadDefaultUOM('Ящик', 'ящ', 1);
    EXEC loadDefaultUOM('Десяток', 'дес', 1);
    EXEC loadDefaultUOM('Изделие', 'изд', 1);
    EXEC loadDefaultUOM('Набор', 'набор', 1);
    EXEC loadDefaultUOM('Пара', 'пар', 1);
    EXEC loadDefaultUOM('Погонный метр', 'пог.м', 1);
    EXEC loadDefaultUOM('Условный метр', 'усл.м', 1);
    EXEC loadDefaultUOM('Номер', 'ном', 1);
    EXEC loadDefaultUOM('Лист', 'л.', 1);
    EXEC loadDefaultUOM('Элемент', 'элем', 1);
    EXEC loadDefaultUOM('Единица', 'ед', 1);
    EXEC loadDefaultUOM('Комплект', 'компл', 1);
    EXEC loadDefaultUOM('Флакон', 'флак', 1);
    EXEC loadDefaultUOM('Ампула', 'ампул', 1);
} IN loadDefaultGroup;

@implementLoadDefaultData(loadDefaultUOMs);
