MODULE Stock;

REQUIRE BaseLogicsModule, Utils, Hierarchy;

// ----------------------------------- Склады ------------------------------------------ //

CLASS ABSTRACT stockGroup 'Группа складов' : named;
@defineHierarchyAbstract(stockGroup);

CLASS ABSTRACT stock 'Склад' : named;
TABLE stock(stock);

stockGroupStock (stock) = ABSTRACT stockGroup (stock);
addressStock 'Адрес' (stock) = ABSTRACT STRING[100] (stock);

// ----------------------------------- Единицы измерения ------------------------------------------ //

CLASS UOM 'Единица измерения' : doubleNamed, externalObject;
TABLE UOM (UOM);

baseUOM = DATA UOM(UOM) IN idGroup;
shortNameBaseUOM 'Базовая ед.изм.' (UOM) = shortName(baseUOM(UOM)) IN baseGroup;
factorUOM 'Коэффициент пересчета в баз.ед.' = DATA NUMERIC[14,3] (UOM) IN baseGroup;

FORM UOM 'Единица измерения'
OBJECTS u=UOM FIXED PANEL
PROPERTIES(u) name, shortName, shortNameBaseUOM, factorUOM
EDIT UOM OBJECT u;

FORM unitsOfMeasure 'Единицы измерений'
OBJECTS u=UOM
PROPERTIES(u) READONLY name, shortName, shortNameBaseUOM, factorUOM
PROPERTIES(u) ADDFORM, EDITFORM, delete;

// ----------------------------------- Sku ------------------------------------------ //

CLASS ABSTRACT sku 'SKU';
TABLE sku(sku);

nameSku 'Наименование' (sku) = ABSTRACT STRING[200] (sku) PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 80 INDEXED AGGPROP IN recognizeGroup;

UOMSku (sku) = ABSTRACT UOM (sku);
shortNameUOMSku (sku) = shortName(UOMSku(sku)) IN recognizeGroup;

// ----------------------------------- Ledger ------------------------------------------ //

CLASS ABSTRACT balanceSkuLedger 'Изменение остатка по товару';
TABLE balanceSkuLedger (balanceSkuLedger);

CLASS ABSTRACT inBalanceSkuLedger 'Приход' : balanceSkuLedger;
CLASS ABSTRACT outBalanceSkuLedger 'Расход' : balanceSkuLedger;

CLASS ABSTRACT batch 'Партия' : inBalanceSkuLedger;
TABLE batch(batch);
TABLE balanceSkuLedgerBatch (balanceSkuLedger, batch);
TABLE batchStock(batch, stock);

CLASS ABSTRACT outUserBalanceSkuLedger 'Внешний расход с указанной партией' : outBalanceSkuLedger;
CLASS ABSTRACT outAutoBalanceSkuLedger 'Внешний расход с автоматической себестоимостью' : outBalanceSkuLedger;

CLASS ABSTRACT inAutoBalanceSkuLedger 'Внутренний приход с автоматической себестоимостью' : inBalanceSkuLedger;

CLASS ABSTRACT inTransferBalanceSkuLedger 'Внутренний приход по перемещению' : inBalanceSkuLedger;

//---------------------------- Количественные регистры (конкретная реализация) ----------------------------------------//

dateTimeBalanceSkuLedger 'Дата/время' = ABSTRACT DATETIME (balanceSkuLedger) PERSISTENT INDEXED;
dateBalanceSkuLedger 'Дата' (ledger) = dateInTime(dateTimeBalanceSkuLedger(ledger)) PERSISTENT;

orderBalanceSkuLedger (ledger) = LIST(dateTimeBalanceSkuLedger(ledger), ledger);

isPostedBalanceSkuLedger 'Закрыт' = ABSTRACT BOOLEAN (balanceSkuLedger) PERSISTENT;

skuBalanceSkuLedger = ABSTRACT sku (balanceSkuLedger) PERSISTENT INDEXED;
nameSkuBalanceSkuLedger 'SKU' (ledger) = nameSku(skuBalanceSkuLedger(ledger));

stockBalanceSkuLedger = ABSTRACT stock(balanceSkuLedger) PERSISTENT INDEXED;
nameStockBalanceSkuLedger 'Склад' (ledger) = name(stockBalanceSkuLedger(ledger));

descriptionBalanceSkuLedger 'Название документа' = ABSTRACT STRING[200] (balanceSkuLedger);

quantityBatch 'Кол-во в партии' = ABSTRACT NUMERIC[14,3] (batch) PERSISTENT;

quantityOutAutoBalanceSkuLedger 'Кол-во' = ABSTRACT NUMERIC[14,3] (outAutoBalanceSkuLedger);

quantityOutUserBalanceSkuLedger 'Кол-во' = ABSTRACT NUMERIC[14,3] (outUserBalanceSkuLedger);
batchOutUserBalanceSkuLedger 'Партия' = ABSTRACT batch (outUserBalanceSkuLedger);

quantityOutBalanceSkuLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityOutAutoBalanceSkuLedger(ledger),
                                                                 quantityOutUserBalanceSkuLedger(ledger) PERSISTENT;

quantityInAutoBalanceSkuLedger 'Кол-во' (ledger) = ABSTRACT NUMERIC[14,3] (inAutoBalanceSkuLedger);

quantityInTransferBalanceSkuLedger 'Кол-во' (ledger) = ABSTRACT NUMERIC[14,3] (inTransferBalanceSkuLedger);

quantityInBalanceSkuLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityBatch(ledger),
                                                                quantityInAutoBalanceSkuLedger(ledger),
                                                                quantityInTransferBalanceSkuLedger(ledger) PERSISTENT;

quantityBalanceSkuLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityInBalanceSkuLedger(ledger),
                                                              quantityOutBalanceSkuLedger(ledger) PERSISTENT;

signedQuantityBalanceSkuLedger 'Кол-во' (ledger) = UNION EXCLUSIVE quantityInBalanceSkuLedger(ledger),
                                                                    -quantityOutBalanceSkuLedger(ledger) PERSISTENT;

// ---------------------------- Остаток по товару -------------------------------- //

TABLE stockSku(stock, sku);

currentBalanceSkuLedger 'Текущий остаток' (sku, stock) = GROUP SUM signedQuantityBalanceSkuLedger (ledger) AND isPostedBalanceSkuLedger(ledger)
                                                          BY skuBalanceSkuLedger(ledger), stockBalanceSkuLedger(ledger) PERSISTENT;
countBalanceSkuLedger 'Кол-во движений' (sku, stock) = GROUP SUM 1 AND signedQuantityBalanceSkuLedger (ledger) AND isPostedBalanceSkuLedger(ledger)
                                                          BY skuBalanceSkuLedger(ledger), stockBalanceSkuLedger(ledger) PERSISTENT;

quantityInSkuStockDate (sku, stock, date) = GROUP SUM quantityInBalanceSkuLedger(ledger) AND isPostedBalanceSkuLedger(ledger)
                                                  BY skuBalanceSkuLedger(ledger), stockBalanceSkuLedger(ledger), dateBalanceSkuLedger(ledger) PERSISTENT;

quantityOutSkuStockDate (sku, stock, date) = GROUP SUM quantityOutBalanceSkuLedger(ledger) AND isPostedBalanceSkuLedger(ledger)
                                                   BY skuBalanceSkuLedger(ledger), stockBalanceSkuLedger(ledger), dateBalanceSkuLedger(ledger) PERSISTENT;

quantitySkuStockDate (sku, stock, date) = quantityInSkuStockDate(sku, stock, date)
                                          (+)
                                          quantityOutSkuStockDate(sku, stock, date) PERSISTENT;

signedQuantitySkuStockDate (sku, stock, date) = quantityInSkuStockDate(sku, stock, date)
                                                (-)
                                                quantityOutSkuStockDate(sku, stock, date) PERSISTENT;

// без учета текущей даты/времени
balanceBSkuLedgerDate 'Остаток на начало дня' (sku, stock, date) = (currentBalanceSkuLedger(sku, stock) AND date AS DATE)
                                                                         (-) [GROUP SUM signedQuantitySkuStockDate (sku, stock, dateIn) AND dateIn >= (date AS DATE)
                                                                                 BY sku, stock, date](sku, stock, date);

// с учетом текущей даты/времени
balanceASkuLedgerDate 'Остаток на конец дня' (sku, stock, date) = (currentBalanceSkuLedger(sku, stock) AND date AS DATE)
                                                                         (-) [GROUP SUM signedQuantitySkuStockDate (sku, stock, dateIn) AND dateIn > (date AS DATE)
                                                                                 BY sku, stock, date](sku, stock, date);

// без учета текущей даты/времени
balanceBSkuLedgerDateTime 'Остаток на начало дня' (sku, stock, dateTime) = (currentBalanceSkuLedger(sku, stock) AND dateTime AS DATETIME)
                                                                         (-)[GROUP SUM signedQuantityBalanceSkuLedger (ledger) AND dateTimeBalanceSkuLedger(ledger) >= (dateTime AS DATETIME) AND isPostedBalanceSkuLedger(ledger)
                                                                         BY skuBalanceSkuLedger(ledger), stockBalanceSkuLedger(ledger), dateTime](sku, stock, dateTime);

// с учетом текущей даты/времени
balanceASkuLedgerDateTime 'Остаток на конец дня' (sku, stock, dateTime) = (currentBalanceSkuLedger(sku, stock) AND dateTime AS DATETIME)
                                                                         (-)[GROUP SUM signedQuantityBalanceSkuLedger (ledger) AND dateTimeBalanceSkuLedger(ledger) > (dateTime AS DATETIME) AND isPostedBalanceSkuLedger(ledger)
                                                                         BY skuBalanceSkuLedger(ledger), stockBalanceSkuLedger(ledger), dateTime](sku, stock, dateTime);

dateLastMovedSkuStock 'Дата последнего движения товара' (sku, stock) =
    GROUP MAX dateTimeBalanceSkuLedger(ledger)
    BY skuBalanceSkuLedger(ledger), stockBalanceSkuLedger(ledger) PERSISTENT;

costBalanceSkuLedgerBatch 'Расписано из партии' (ledger, batch) = DATA NUMERIC[14,3] (balanceSkuLedger, batch);

signedCostBalanceSkuLedgerBatch (ledger, batch) = IF ledger IS outBalanceSkuLedger
                                                        THEN -costBalanceSkuLedgerBatch(ledger, batch)
                                                        ELSE costBalanceSkuLedgerBatch(ledger, batch);

currentBalanceBatchLedger 'Текущий остаток' (batch, stock) = GROUP SUM signedCostBalanceSkuLedgerBatch (ledger, batch) AND isPostedBalanceSkuLedger(ledger)
                                                          BY batch, stockBalanceSkuLedger(ledger) PERSISTENT;

//----------------------------------------- По партиям ---------------------------------------------//
// без учета текущей даты/времени
balanceBBatchStockDate 'Остаток на начало дня' (batch, stock, date) = (currentBalanceBatchLedger(batch, stock) AND date AS DATE)
    (-) [GROUP SUM signedCostBalanceSkuLedgerBatch (ledger, batch) AND isPostedBalanceSkuLedger(ledger) AND dateBalanceSkuLedger(ledger) >= (date AS DATE)
    BY batch, stockBalanceSkuLedger(ledger), date](batch, stock, date);

// с учетом текущей даты/времени
balanceABatchStockDate 'Остаток на конец дня' (batch, stock, date) = (currentBalanceBatchLedger(batch, stock) AND date AS DATE)
    (-) [GROUP SUM signedCostBalanceSkuLedgerBatch (ledger, batch) AND isPostedBalanceSkuLedger(ledger) AND dateBalanceSkuLedger(ledger) > (date AS DATE)
    BY batch, stockBalanceSkuLedger(ledger), date](batch, stock, date);

// без учета текущей даты/времени
 balanceBStockBatchDateTime 'Остаток на начало дня' (batch, stock, dateTime) = (currentBalanceBatchLedger(batch, stock) AND dateTime AS DATETIME)
    (-) [GROUP SUM signedCostBalanceSkuLedgerBatch (ledger, batch) AND isPostedBalanceSkuLedger(ledger) AND dateTimeBalanceSkuLedger(ledger) >= (dateTime AS DATETIME)
    BY batch, stockBalanceSkuLedger(ledger), dateTime](batch, stock, dateTime);

// с учетом текущей даты/времени
 balanceAStockBatchDateTime 'Остаток на конец дня' (batch, stock, dateTime) = (currentBalanceBatchLedger(batch, stock) AND dateTime AS DATETIME)
    (-) [GROUP SUM signedCostBalanceSkuLedgerBatch (ledger, batch) AND isPostedBalanceSkuLedger(ledger) AND dateTimeBalanceSkuLedger(ledger) > (dateTime AS DATETIME)
    BY batch, stockBalanceSkuLedger(ledger), dateTime](batch, stock, dateTime);

//---------------------------------------------- За период ------------------------------------------//

costInBalanceBatchStockDateFromTo 'Приход' (batch, stock, dateFrom, dateTo) = GROUP SUM costBalanceSkuLedgerBatch (ledger, batch)
    IF ledger IS inBalanceSkuLedger AND isPostedBalanceSkuLedger(ledger)
    AND dateBalanceSkuLedger(ledger) >= (dateFrom AS DATE)  AND dateBalanceSkuLedger(ledger)<= (dateTo AS DATE)
    BY batch, stockBalanceSkuLedger(ledger), dateFrom, dateTo;

costOutBalanceBatchStockDateFromTo 'Расход' (batch, stock, dateFrom, dateTo) = GROUP SUM costBalanceSkuLedgerBatch (ledger, batch)
    IF ledger IS outBalanceSkuLedger AND isPostedBalanceSkuLedger(ledger)
    AND dateBalanceSkuLedger(ledger) >= (dateFrom AS DATE)  AND dateBalanceSkuLedger(ledger)<= (dateTo AS DATE)
    BY batch, stockBalanceSkuLedger(ledger), dateFrom, dateTo;


costedBalanceSkuLedger 'Расписано' (ledger) = GROUP SUM costBalanceSkuLedgerBatch (ledger, batch) BY ledger PERSISTENT;

needToCostBalanceSkuLedger 'Требуется расчет себестоимости' (ledger) = quantityBalanceSkuLedger(ledger) > 0 AND isPostedBalanceSkuLedger(ledger)
                                                                        AND NOT quantityBalanceSkuLedger(ledger) == costedBalanceSkuLedger(ledger);

quantityBatchBatch 'Кол-во' (ledger, batch) = quantityBatch(ledger) AND batch == ledger;

dateTimeBatch 'Дата/время' (batch) = ABSTRACT DATETIME (batch) PERSISTENT INDEXED;
isPostedBatch 'Закрыт' (batch) = ABSTRACT BOOLEAN (batch) PERSISTENT;
skuBatch 'SKU (ИД)' (batch) = ABSTRACT sku (batch) PERSISTENT INDEXED;
supplierPriceBatch 'Цена поставщика' (batch) = ABSTRACT NUMERIC[14,2] (batch) PERSISTENT;
descriptionBatch 'Описание' (batch) = ABSTRACT STRING[200] (batch) PERSISTENT;
dateExpireBatch 'Годен до' (batch) = ABSTRACT DATE (batch) PERSISTENT INDEXED;

orderBatch (batch) = LIST (dateTimeBatch(batch), batch) PERSISTENT;

isSkuBatch (batch, sku) = skuBatch(batch) == sku;

currentBalanceBatch 'Остаток (всего)' = GROUP SUM currentBalanceBatchLedger(batch, stock) BY batch PERSISTENT;

quantityOutUserBalanceSkuLedgerBatch (ledger, batch) = quantityOutUserBalanceSkuLedger(ledger) AND batch == batchOutUserBalanceSkuLedger(ledger);
quantityOutAutoBalanceSkuLedgerBatch (ledger, batch) =
        PARTITION UNGROUP quantityOutAutoBalanceSkuLedger
                  LIMIT currentBalanceBatchLedger(batch, stockBalanceSkuLedger(ledger)) AND skuBatch(batch) == skuBalanceSkuLedger(ledger)
                  BY ledger
                  ORDER orderBatch(batch);

quantityOutBalanceSkuLedgerBatch (ledger, batch) = UNION EXCLUSIVE quantityOutUserBalanceSkuLedgerBatch(ledger, batch),
                                                                    quantityOutAutoBalanceSkuLedgerBatch(ledger, batch);

quantityInBalanceSkuLedgerBatch (ledger, batch) =
        PARTITION UNGROUP quantityInAutoBalanceSkuLedger
                  LIMIT (quantityBatch(batch) (-) currentBalanceBatch(batch))
                    AND countBalanceSkuLedger(skuBalanceSkuLedger(ledger), stockBalanceSkuLedger(ledger))
                    AND skuBatch(batch) == skuBalanceSkuLedger(ledger)
                  BY ledger
                  ORDER DESC orderBatch(batch);

limitInTransferBalanceSkuLedgerBatch = ABSTRACT NUMERIC[14,3] (inTransferBalanceSkuLedger, batch);

quantityInTransferBalanceSkuLedgerBatch (ledger, batch) =
        PARTITION UNGROUP quantityInTransferBalanceSkuLedger
                  LIMIT limitInTransferBalanceSkuLedgerBatch(ledger, batch)
                    AND skuBatch(batch) == skuBalanceSkuLedger(ledger)
                  BY ledger
                  ORDER DESC orderBatch(batch);

quantityBalanceSkuLedgerBatch (ledger, batch) = UNION EXCLUSIVE quantityBatchBatch(ledger, batch),
                                                                 quantityOutBalanceSkuLedgerBatch(ledger, batch),
                                                                 quantityInBalanceSkuLedgerBatch(ledger, batch),
                                                                 quantityInTransferBalanceSkuLedgerBatch(ledger, batch);

supplierSumBalanceSkuLedgerBatch 'Сумма поставщика без НДС' (ledger, batch) = costBalanceSkuLedgerBatch(ledger, batch) * supplierPriceBatch(batch);
supplierSumBalanceSkuLedger 'Сумма поставщика без НДС' = GROUP SUM supplierSumBalanceSkuLedgerBatch(ledger, batch) BY ledger;

resetCostBalanceSkuLedgerBatch 'Перерассчитать себестоимость' = ACTION (ledger) NEWSESSION AUTOAPPLY {
    IF costedBalanceSkuLedger(ledger) THEN {
        SET costBalanceSkuLedgerBatch(ledger, batch) <- NULL;
        EXEC apply(); // todo : здесь apply не нужен, но без этого следующая команда повиснет
    }
    SET costBalanceSkuLedgerBatch(ledger, batch) <- quantityBalanceSkuLedgerBatch(ledger, batch);
}

// мгновенный расчет себестоимости
resetCostBalanceSkuLedgerBatch (ledger) WHEN ASSIGNED(isPostedBalanceSkuLedger(ledger));

setBalanceSkuLedgerBatchCost 'Дорассчитать себестоимость' = ACTION () NEWSESSION {

    SET costBalanceSkuLedgerBatch(ledger, batch) AND needToCostBalanceSkuLedger(ledger) <- NULL;
    EXEC apply();

    FOR needToCostBalanceSkuLedger(ledger) ORDER orderBalanceSkuLedger(ledger) DO {
        SET costBalanceSkuLedgerBatch(ledger, batch) <- quantityBalanceSkuLedgerBatch(ledger, batch);
        EXEC apply();
    }
} CONFIRM;

resetBalanceSkuLedgerBatchCost 'Перерассчитать себестоимость' = ACTION () NEWSESSION {

    FORM dialogDate MODAL;
    IF formResult() == formResult.ok THEN {

        FOR d == chosenDate('d') DO {
            SET costBalanceSkuLedgerBatch(ledger, batch) AND dateBalanceSkuLedger(ledger) >= (d AS DATE) <- NULL;
            EXEC apply();

            FOR dateBalanceSkuLedger(ledger) >= (d AS DATE) AND isPostedBalanceSkuLedger(ledger) ORDER orderBalanceSkuLedger(ledger) DO {
                SET costBalanceSkuLedgerBatch(ledger, batch) <- quantityBalanceSkuLedgerBatch(ledger, batch);
                EXEC apply();
            }
        }
    }
} CONFIRM;

clearBalanceSkuLedgerBatchCost 'Сбросить всю себестоимость' = ACTION() NEWSESSION AUTOAPPLY {
    SET costBalanceSkuLedgerBatch(ledger, batch) <- NULL;
} CONFIRM;

// ---------------------------------------------- Макросы ------------------------------------------------- //

META implementBalanceSkuLedger(concrete, skuProp, stockProp)
    dateTimeBalanceSkuLedger (ledger) += dateTime###concrete##Detail(ledger);
    isPostedBalanceSkuLedger (ledger) += isPosted###concrete##Detail(ledger);
    descriptionBalanceSkuLedger (ledger) += description###concrete##Detail(ledger);
    skuBalanceSkuLedger (ledger) += skuProp###concrete##Detail(ledger);
    stockBalanceSkuLedger (ledger) += stockProp###concrete##Detail(ledger);
END

META implementBatch(concrete, skuProp)
    dateTimeBatch (batch) += dateTime###concrete##Detail(batch);
    isPostedBatch (batch) += isPosted###concrete##Detail(batch);
    descriptionBatch (batch) += description###concrete##Detail(batch);
    skuBatch (batch) += skuProp###concrete##Detail(batch);
    supplierPriceBatch (batch) += supplierPrice###concrete##Detail(batch);
END

// ---------------------------------------------- Макросы для документов ------------------------------------------------- //

META defineDocumentDetailAggregationSkuPrefix (primObject, aggrObject, skuProp, prefix)
    sku###aggrObject##Detail (detail) = prefix###skuProp###primObject##Detail(primObject##Detail###aggrObject##Detail(detail));
    nameSku###aggrObject##Detail 'SKU' (detail) = nameSku(sku###aggrObject##Detail(detail));
    idBarcodeSku###aggrObject##Detail 'Штрих-код' (detail) = idBarcodeSku(sku###aggrObject##Detail(detail));
END
META defineDocumentDetailAggregationSku (primObject, aggrObject, skuProp)
    @defineDocumentDetailAggregationSkuPrefix(primObject, aggrObject, skuProp, );
END

// ----------------------------------------------- Формы --------------------------------------------------- //

FORM costSkuLedger 'Себестоимость (операции)'
    OBJECTS bil = balanceSkuLedger
    PROPERTIES(bil) READONLY dateTimeBalanceSkuLedger, descriptionBalanceSkuLedger, nameSkuBalanceSkuLedger, nameStockBalanceSkuLedger,
                             quantityBalanceSkuLedger, costedBalanceSkuLedger
    PROPERTIES(bil)          resetCostBalanceSkuLedgerBatch
    ORDER BY dateTimeBalanceSkuLedger

    FILTERGROUP needToCostBalanceSkuLedger
        FILTER 'Нерасписанные строки' 'F9' needToCostBalanceSkuLedger(bil)

    OBJECTS bt = batch
    PROPERTIES(bt) READONLY dateTimeBatch, descriptionBatch, quantityBatch, supplierPriceBatch, currentBalanceBatch
    PROPERTIES(bil, bt)     costBalanceSkuLedgerBatch FORCE GRID
    FILTERS skuBatch(bt) == skuBalanceSkuLedger(bil)
    ORDER BY dateTimeBatch DESC

    FILTERGROUP inBalanceSkuLedgerBatch
        FILTER 'Только расписанные партии' 'F10' costBalanceSkuLedgerBatch (bil, bt) DEFAULT

    PROPERTIES() setBalanceSkuLedgerBatchCost, resetBalanceSkuLedgerBatchCost, clearBalanceSkuLedgerBatchCost
;


DESIGN costSkuLedger FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD bil.box;
        ADD bt.box;
    }

    NEW buttonCont{
        childConstraints = TO THE RIGHT;
        ADD PROPERTY(setBalanceSkuLedgerBatchCost);
        ADD PROPERTY(resetBalanceSkuLedgerBatchCost);
        ADD PROPERTY(clearBalanceSkuLedgerBatchCost);
    }

    ADD functions.box;
}

FORM costSkuBatchLedger 'Себестоимость (партии)'
    OBJECTS i = sku FIXED PANEL
    PROPERTIES(i) SELECTOR nameSku//, idBarcodeSku

    OBJECTS bt = batch
    PROPERTIES(bt) READONLY dateTimeBatch, descriptionBatch, quantityBatch, supplierPriceBatch, currentBalanceBatch

    OBJECTS bil = balanceSkuLedger
    PROPERTIES(bil) READONLY dateTimeBalanceSkuLedger, descriptionBalanceSkuLedger, nameStockBalanceSkuLedger,
                             quantityBalanceSkuLedger, costedBalanceSkuLedger
//    PROPERTIES(bil)          resetCostBalanceSkuLedgerBatch
    ORDER BY dateTimeBalanceSkuLedger

    FILTERGROUP needToCostBalanceSkuLedger
        FILTER 'Нерасписанные строки' 'F9' needToCostBalanceSkuLedger(bil)


    PROPERTIES(bil, bt)     READONLY costBalanceSkuLedgerBatch FORCE GRID
    FILTERS skuBatch(bt) == i,
            skuBalanceSkuLedger(bil) == i

    ORDER BY dateTimeBatch DESC

    FILTERGROUP inBalanceSkuLedgerBatch
        FILTER 'Только расписанные партии' 'F10' costBalanceSkuLedgerBatch (bil, bt) DEFAULT

//    PROPERTIES() setBalanceSkuLedgerBatchCost, resetBalanceSkuLedgerBatchCost, clearBalanceSkuLedgerBatchCost
;

DESIGN costSkuBatchLedger FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD bt.box;
        ADD bil.box;
    }

    ADD functions.box;
}
