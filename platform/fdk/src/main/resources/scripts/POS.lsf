MODULE POS;

REQUIRE System,
        Document,
        Store,
        Stock,
        CashRegister,
        CashOperation,
        Sales,
        RetailCRM,
        AccountDocument; // todo : эту зависимость надо будет убить, но сейчас не получается из-за того что нельзя донаследовать классы

POSRoundDecimals () = -1;

// ------------------------------------- Объявление Z-отчета ---------------------------------------- //

CLASS zReport 'Z-отчет (открытый)' : incomeCashOrder, outAccountDocumentLedger, historyObject;
CLASS zReportPosted 'Z-отчет (закрытый)' : zReport, postedObject;

TABLE zReport (zReport);

@defineDocumentHeaderPosted(zReport);
@defineDocumentHeaderTime(zReport);
@defineDocumentHeaderDepartmentStore(zReport);

castBasisZReport =
    FORMULA STRING[100] '\'Z-отчет №\' || CAST($1 AS TEXT) || \' с кассы \' || CAST($2 AS TEXT) || \' от \' || CAST($3 AS TEXT)';

numberZReport 'Номер Z-отчета' (zReport) = DATA STRING[21](zReport) IN documentPrmGroup;
cashRegisterZReport (zReport) = DATA cashRegister(zReport);
numberCashRegisterZReport 'Касса Z-отчета' (zReport) = numberCashRegister(cashRegisterZReport(zReport)) IN documentPrmGroup;
numberNumberCashRegisterToZReportPosted (numberZReport, numberCashRegister) = GROUP UNIQUE zReportPosted BY numberZReport (zReportPosted), numberCashRegisterZReport (zReportPosted) WHERE zReportPosted IS zReportPosted;
maxNumberZReport(cashRegister) = GROUP MAX numberZReport(zReport)  BY cashRegisterZReport (zReport);
basisZReport 'Основание' (zReport) = castBasisZReport(numberZReport(zReport), numberCashRegisterZReport(zReport), dateZReport(zReport)) IN documentPrmGroup;

dateCashDocument(zReport) += dateZReport(zReport);
timeCashDocument(zReport) += timeZReport(zReport);
dateTimeCashDocument(zReport) += dateTimeZReport(zReport);
numberCashDocument(zReport) += numberZReport(zReport);
departmentStoreCashDocument(zReport) += departmentStoreZReport(zReport);
basisCashDocument(zReport) += basisZReport(zReport);
cashRegisterCashDocument(zReport) += cashRegisterZReport(zReport);

departmentStoreZReport(zReport) <- departmentStoreCashRegister(cashRegisterZReport(zReport))
    WHEN CHANGED(cashRegisterZReport(zReport));

descriptionZReport (zReport) =
    [FORMULA STRING[200] '\'Продажа по кассе \' || CAST($1 AS TEXT) || \' отдела \' || CAST($2 AS TEXT) ||  \' от \' || CAST($3 AS TEXT)'](
    numberCashRegisterZReport(zReport), nameDepartmentStoreZReport(zReport), dateZReport(zReport));

//----------------------------------------------- Чеки ---------------------------------------------------//

CLASS receipt 'Чек' : historyObject;

CLASS ABSTRACT receiptDetail 'Строка чека';
CLASS receiptSaleDetail 'Строка продажи' : receiptDetail, outFIFOSkuLedger, salesLedger;
CLASS receiptReturnDetail 'Строка возврата' : receiptDetail, inLIFOSkuLedger;

TABLE receipt (receipt);
TABLE receiptSaleDetail (receiptSaleDetail);
TABLE receiptReturnDetail (receiptReturnDetail);

@defineDocumentRelationCustom(zReport, receipt);
numberCashRegisterReceipt 'Номер кассы' (receipt) = numberCashRegisterZReport(zReportReceipt(receipt)) IN recognizeGroup;
numberZReportReceipt 'Номер Z-отчета' (receipt) = numberZReport(zReportReceipt(receipt)) IN recognizeGroup;

@defineDocumentHeaderTime(receipt);

@defineDocumentDetailDepartmentStoreCustom(zReport, receipt);
@defineDocumentDetailPostedCustom(zReport, receipt);

@defineDocumentRelationCustom(receipt, receiptSaleDetail);
@defineDocumentRelationCustom(receipt, receiptReturnDetail);
receiptReceiptDetail (receiptDetail) = UNION EXCLUSIVE receiptReceiptReturnDetail(receiptDetail), receiptReceiptSaleDetail(receiptDetail) PERSISTENT;

typeReceiptDetail 'Тип' (receiptDetail) = UNION EXCLUSIVE 'Продажа' AND receiptDetail IS receiptSaleDetail, 'Возврат' AND receiptDetail IS receiptReturnDetail FIXEDCHARWIDTH 8;

@defineDocumentDetailIndexCustom(receipt, receiptDetail);

@defineDocumentDetailTimeCustom(receipt, receiptSaleDetail);
@defineDocumentDetailTimeCustom(receipt, receiptReturnDetail);
dateTimeReceiptDetail 'Дата/время' (receiptDetail) = UNION EXCLUSIVE dateTimeReceiptReturnDetail(receiptDetail), dateTimeReceiptSaleDetail(receiptDetail) PERSISTENT;

@defineDocumentDetailPostedCustom(receipt, receiptSaleDetail);
@defineDocumentDetailPostedCustom(receipt, receiptReturnDetail);
isPostedReceiptDetail 'Закрыт' (receiptDetail) = UNION EXCLUSIVE isPostedReceiptReturnDetail(receiptDetail), isPostedReceiptSaleDetail(receiptDetail) PERSISTENT;

@defineDocumentDetailDepartmentStoreCustom(receipt, receiptSaleDetail);
@defineDocumentDetailDepartmentStoreCustom(receipt, receiptReturnDetail);
departmentStoreReceiptDetail (receiptDetail) = UNION EXCLUSIVE departmentStoreReceiptReturnDetail(receiptDetail), departmentStoreReceiptSaleDetail(receiptDetail) PERSISTENT;

@defineDocumentDetailSku(receiptSale, sku);
@defineDocumentDetailSku(receiptReturn, sku);
skuReceiptDetail (receiptDetail) = skuReceiptReturnDetail(receiptDetail) OR skuReceiptSaleDetail(receiptDetail);
nameSkuReceiptDetail 'Товар' (receiptDetail) = nameSku(skuReceiptDetail(receiptDetail)) IN recognizeGroup;

numberReceipt 'Номер чека' (receipt) = DATA INTEGER (receipt) IN documentHeaderGroup;
numberReceiptReceiptDetail 'Номер чека' (receiptDetail) = numberReceipt(receiptReceiptDetail(receiptDetail));

maxNumberReceiptZReport 'Максимальный номер чека' (zReport) = GROUP MAX numberReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT;

zReportReceiptToReceipt (zReport, receipt, cashRegister) = GROUP UNIQUE receipt BY numberZReport(zReportReceipt(receipt)), numberReceipt(receipt), numberCashRegister(cashRegisterZReport(zReportReceipt(receipt))) WHERE receipt IS receipt;

discountCardReceipt (receipt) = DATA discountCard (receipt);
numberDiscountCardReceipt 'Номер дисконтной карты' (receipt) = seriesNumberObject(discountCardReceipt(receipt));
nameClientDiscountCardReceipt 'Держатель дисконтной карты' (receipt) = nameClientDiscountCard(discountCardReceipt(receipt));
numberDiscountCardReceiptDetail 'Номер дисконтной карты' (receiptDetail) = numberDiscountCardReceipt(receiptReceiptDetail(receiptDetail));
nameClientDiscountCardReceiptDetail 'Держатель дисконтной карты' (receiptDetail) = nameClientDiscountCardReceipt(receiptReceiptDetail(receiptDetail));

zReportReceiptDetail (receiptDetail) = zReportReceipt(receiptReceiptDetail(receiptDetail));

idBarcodeReceiptDetail 'Штрих-код' (receiptDetail) = DATA STRING[14] (receiptDetail) FIXEDCHARWIDTH 14 INDEXED;

// Возвраты

receiptSaleDetailReceiptReturnDetail = DATA receiptSaleDetail (receiptReturnDetail);
receiptSaleReceiptReturnDetail (returnDetail) = receiptReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(returnDetail));

descriptionSaleReceiptReturnDetail 'Чек продажи' (returnDetail) =
    [FORMULA STRING[200] '\'Чек № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) ||  \' позиция \' || CAST($3 AS TEXT)'](
    numberReceipt(receiptSaleReceiptReturnDetail(returnDetail)), dateTimeReceipt(receiptSaleReceiptReturnDetail(returnDetail)), indexReceiptDetail(receiptSaleDetailReceiptReturnDetail(returnDetail)));

// Количества и суммы

quantityReceiptSaleDetail 'Количество' (receiptDetail) = DATA NUMERIC[14,3] (receiptSaleDetail);
priceReceiptSaleDetail 'Цена' (receiptDetail) = DATA NUMERIC[14,2] (receiptSaleDetail);
sumReceiptSaleDetail 'Сумма' (receiptDetail) = DATA NUMERIC[16,2] (receiptSaleDetail);
discountSumReceiptSaleDetail 'Сумма скидки' (receiptDetail) = DATA NUMERIC[16,2] (receiptSaleDetail);

calcSumReceiptSaleDetail (detail) = quantityReceiptSaleDetail(detail) * priceReceiptSaleDetail(detail) (-) discountSumReceiptSaleDetail(detail);
sumReceiptSaleDetail (detail) <- calcSumReceiptSaleDetail(detail) WHEN CHANGED (calcSumReceiptSaleDetail(detail));

quantityReceiptReturnDetail 'Количество' (receiptDetail) = DATA NUMERIC[14,3] (receiptReturnDetail);
priceReceiptReturnDetail 'Цена' (receiptDetail) = DATA NUMERIC[14,2] (receiptReturnDetail);
sumReceiptReturnDetail 'Сумма' (receiptDetail) = DATA NUMERIC[16,2] (receiptReturnDetail);
discountSumReceiptReturnDetail 'Сумма скидки' (receiptDetail) = DATA NUMERIC[16,2] (receiptReturnDetail);

quantityReturnedReceiptSaleDetail 'Возвращено' (saleDetail) = GROUP SUM quantityReceiptReturnDetail(returnDetail) BY receiptSaleDetailReceiptReturnDetail(returnDetail) PERSISTENT;
CONSTRAINT quantityReturnedReceiptSaleDetail(detail) > quantityReceiptSaleDetail (detail) MESSAGE 'Количество возвратов по строке чека превышает проданное количество';

calcSumReceiptReturnDetail(detail) = round(quantityReceiptReturnDetail(detail) * sumReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(detail)) / quantityReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(detail)), POSRoundDecimals());
sumReceiptReturnDetail (detail) <- calcSumReceiptReturnDetail(detail) WHEN CHANGED (calcSumReceiptReturnDetail(detail));

calcDiscountSumReceiptReturnDetail(detail) = round(quantityReceiptReturnDetail(detail) * discountSumReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(detail)) / quantityReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(detail)), POSRoundDecimals());
discountSumReceiptReturnDetail (detail) <- calcDiscountSumReceiptReturnDetail(detail) WHEN CHANGED (calcDiscountSumReceiptReturnDetail(detail));

quantityReceiptDetail 'Количество' (receiptDetail) = UNION EXCLUSIVE quantityReceiptReturnDetail(receiptDetail), quantityReceiptSaleDetail(receiptDetail) PERSISTENT;
priceReceiptDetail 'Цена' (receiptDetail) = UNION EXCLUSIVE priceReceiptReturnDetail(receiptDetail), priceReceiptSaleDetail(receiptDetail) PERSISTENT;
sumReceiptDetail 'Сумма' (receiptDetail) = UNION EXCLUSIVE sumReceiptReturnDetail(receiptDetail), sumReceiptSaleDetail(receiptDetail) PERSISTENT;
discountSumReceiptDetail 'Сумма скидки' (receiptDetail) = UNION EXCLUSIVE discountSumReceiptReturnDetail(receiptDetail), discountSumReceiptSaleDetail(receiptDetail) PERSISTENT;

sumSaleReceiptDetailSaleReceipt 'Сумма продажи' (receipt) = GROUP SUM sumReceiptSaleDetail(receiptDetail)
    BY receiptReceiptSaleDetail (receiptDetail) IN documentSumGroup PERSISTENT;

sumReturnReceiptDetailReturnReceipt 'Сумма возврата' (receipt) = GROUP SUM sumReceiptReturnDetail(receiptDetail)
    BY receiptReceiptReturnDetail (receiptDetail) IN documentSumGroup PERSISTENT;

sumReceiptDetailReceipt 'Сумма чека' (receipt) = sumSaleReceiptDetailSaleReceipt(receipt) (-) sumReturnReceiptDetailReturnReceipt(receipt) PERSISTENT;
sumReceiptDetailReceiptDetail 'Сумма чека' (receiptDetail) = sumReceiptDetailReceipt(receiptReceiptDetail(receiptDetail));

discountSumSaleReceiptDetailSaleReceipt 'Сумма скидки (продажи)' (receipt) = GROUP SUM discountSumReceiptSaleDetail(receiptDetail)
    BY receiptReceiptSaleDetail (receiptDetail) IN documentSumGroup;
discountSumSaleReceipt 'Сумма скидки (продажи) по чеку' (receipt) = DATA NUMERIC[16,2] (receipt);

discountSumReturnReceiptDetailReturnReceipt 'Сумма скидки (возврат)' (receipt) = GROUP SUM discountSumReceiptReturnDetail(receiptDetail)
    BY receiptReceiptReturnDetail (receiptDetail) IN documentSumGroup;
discountSumReturnReceipt 'Сумма скидки (возврат) по чеку' (receipt) = DATA NUMERIC[16,2] (receipt);

discountSumReceiptDetailReceipt 'Сумма скидки' (receipt) = discountSumSaleReceiptDetailSaleReceipt(receipt) (-) discountSumReturnReceiptDetailReturnReceipt(receipt);
discountSumReceipt 'Сумма скидки по чеку' (receipt) = discountSumSaleReceipt(receipt) (-) discountSumReturnReceipt(receipt);

@defineDocumentHeaderCount(receipt);

@defineDocumentHeaderQuantity(receipt);
@defineDocumentHeaderSkuQuantity(receipt, sku);

VATReceiptSaleDetail = DATA range (receiptSaleDetail);
VATReceiptReturnDetail = DATA range (receiptReturnDetail);
VATReceiptDetail (receiptDetail) = UNION EXCLUSIVE VATReceiptReturnDetail(receiptDetail), VATReceiptSaleDetail(receiptDetail) PERSISTENT;

// используется только для приема реализации из внешних касс
numberReceiptDetail 'Номер позиции чека' = DATA INTEGER (receiptDetail);
zReportReceiptReceiptDetailToReceiptDetail (zReport, receipt, receiptDetail, cashRegister) = GROUP UNIQUE receiptDetail BY numberZReport(zReportReceiptDetail(receiptDetail)), numberReceipt(receiptReceiptDetail(receiptDetail)), numberReceiptDetail(receiptDetail), numberCashRegister(cashRegisterZReport(zReportReceiptDetail(receiptDetail))) WHERE receiptDetail IS receiptDetail;
//

descriptionReceipt 'Название документа' (receipt) = [FORMULA STRING[200] '\'Чек № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) '](
                                               numberReceipt(receipt), dateTimeReceipt(receipt));

descriptionReceiptSaleDetail (receiptDetail) = [FORMULA STRING[200] '\'Продажа № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) '] (
                                          numberReceipt(receiptReceiptSaleDetail(receiptDetail)), dateTimeReceipt(receiptReceiptSaleDetail(receiptDetail)));

descriptionReceiptReturnDetail (receiptDetail) = [FORMULA STRING[200] '\'Возврат № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) '] (
                                            numberReceipt(receiptReceiptReturnDetail(receiptDetail)), dateTimeReceipt(receiptReceiptReturnDetail(receiptDetail)));

descriptionReceiptDetail (receiptDetail) = descriptionReceiptReturnDetail(receiptDetail) OR descriptionReceiptSaleDetail(receiptDetail);

@defineAddDetailDialogSkuStockCustom(receipt, receiptSaleDetail, ' (продажа)', sku, departmentStore, dialogSku);
@defineAddDetailDialogSkuStockCustom(receipt, receiptReturnDetail, ' (возврат)', sku, departmentStore, dialogSku);

@implementSkuLedger(receipt, sku, departmentStore);

quantityOutFIFOSkuLedger (ledger) += quantityReceiptSaleDetail(ledger);
@implementSkuLedgerOutFIFOBalance(receiptSale, sku, departmentStore);
sumOutSkuLedger (ledger) += sumReceiptSaleDetail(ledger);

quantityInLIFOSkuLedger (ledger) += quantityReceiptReturnDetail(ledger);
@implementSkuLedgerInLIFOBalance(receiptReturn, sku, departmentStore);
sumInSkuLedger (ledger) += sumReceiptReturnDetail(ledger);

@implementSalesLedger(receiptSale, sku, departmentStore);
quantitySalesLedger (ledger) += quantityReceiptSaleDetail(ledger);
VATSalesLedger (ledger) += VATReceiptSaleDetail(ledger);
sumSalesLedger (ledger) += sumReceiptSaleDetail(ledger);

// ----------------- Оплаты по чеку ------------------------------

CLASS payment 'Оплата по чеку';
TABLE payment (payment);

CLASS STATIC paymentMeans 'Форма оплаты'{
    paymentMeansCash 'Наличные',
    paymentMeansCard 'Карточка'
};
CLASS paymentType 'Тип платежа' : named;
TABLE paymentType (paymentType);

paymentMeansPaymentType (paymentType) = DATA paymentMeans (paymentType);
namePaymentMeansPaymentType 'Форма оплаты' (paymentType) = name(paymentMeansPaymentType(paymentType)) IN baseGroup;

addPaymentType 'Добавить тип оплаты' = ACTION(string, paymentMeans) {
    ADDOBJ paymentType;
    FOR p == addedObject() DO {
        SET name(p) <- string AS STRING[110];
        SET paymentMeansPaymentType(p) <- paymentMeans AS paymentMeans;
    }
}

fillPaymentTypeDefaultValues 'Заполнить значения типов платежей по умолчанию' = ACTION(){
    EXEC addPaymentType('Наличные', paymentMeans.paymentMeansCash);
    EXEC addPaymentType('Visa', paymentMeans.paymentMeansCard);
    EXEC addPaymentType('Mastercard', paymentMeans.paymentMeansCard);
}

sidPaymentType 'Идентификатор' = DATA STRING[10] (paymentType) IN baseGroup;
sidToTypePayment (tp) = GROUP UNIQUE paymentType BY sidPaymentType(paymentType) WHERE paymentType IS paymentType;

receiptPayment (payment) = DATA receipt (payment) NOT NULL DELETE;

countPaymentReceipt 'Кол-во типов платежей' (receipt) = GROUP SUM 1 IF receiptPayment(payment) == receipt BY receipt;

paymentTypePayment (payment) = DATA paymentType(payment);
namePaymentTypePayment 'Тип платежа' (payment) = name(paymentTypePayment(payment));

minCashPaymentType () = GROUP MIN paymentType IF paymentMeansPaymentType(paymentType) == paymentMeans.paymentMeansCash;
minCardPaymentType () = GROUP MIN paymentType IF paymentMeansPaymentType(paymentType) == paymentMeans.paymentMeansCard;

paymentMeansPayment (payment) = paymentMeansPaymentType(paymentTypePayment(payment));
namePaymentMeansPayment 'Форма оплаты' (payment) = name(paymentMeansPayment(payment));

numberPayment 'Номер платежа' (payment) = DATA INTEGER (payment);
zReportReceiptPaymentToPayment (zReport, receipt, number, cashRegister) = GROUP UNIQUE payment BY numberZReport(zReportReceipt(receiptPayment(payment))), numberReceipt(receiptPayment(payment)), numberPayment(payment), numberCashRegister(cashRegisterZReport(zReportReceipt(receiptPayment(payment)))) WHERE payment IS payment;

sumPayment 'Сумма платежа' (payment) = DATA NUMERIC[16,2] (payment);

sumPaymentReceipt (receipt) = GROUP SUM sumPayment(payment) BY receiptPayment(payment);

sumInCashPaymentReceipt (receipt) = GROUP SUM sumPayment(payment) AND paymentMeansPayment(payment) == paymentMeans.paymentMeansCash  BY receiptPayment(payment);

changePaymentReceipt 'Сдача' (receipt) = sumPaymentReceipt(receipt) - sumReceiptDetailReceipt(receipt);

sumCashPaymentReceipt (receipt) = sumInCashPaymentReceipt(receipt) - changePaymentReceipt(receipt);
sumNotCashPaymentReceipt (receipt) = GROUP SUM sumPayment(payment) AND NOT paymentMeansPayment(payment) == paymentMeans.paymentMeansCash BY receiptPayment(payment);

CONSTRAINT receipt IS receipt AND NOT sumPaymentReceipt(receipt) MESSAGE 'По чеку не указаны платежи';
CONSTRAINT sumReceiptDetailReceipt(receipt) > sumPaymentReceipt(receipt) MESSAGE 'Сумма платежей по чеку меньше суммы чека';
CONSTRAINT sumReceiptDetailReceipt(receipt) < sumNotCashPaymentReceipt(receipt) MESSAGE 'Сумма платежей по безналичному расчету больше суммы чека';

// Итоги по Z-отчету

@defineDocumentHeaderQuantityCustom(zReport, receiptDetail);

sumCashZReport 'Сумма наличных Z-отчета' (zReport) = GROUP SUM sumCashPaymentReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT IN documentSumGroup;
sumCashIncomeCashOrder(zReport) += sumCashZReport(zReport);
sumReceiptDetailZReport 'Сумма Z-отчета' (zReport) = GROUP SUM sumReceiptDetailReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT IN documentSumGroup;
discountSumReceiptDetailZReport 'Сумма скидок Z-отчета' (zReport) = GROUP SUM discountSumReceiptDetailReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT IN documentSumGroup;
discountSumReceiptZReport 'Сумма скидок по чекам Z-отчета' (zReport) = GROUP SUM discountSumReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT IN documentSumGroup;
discountSumZReport 'Сумма скидок Z-отчета' (zReport) = discountSumReceiptDetailZReport(zReport) (+) discountSumReceiptZReport(zReport);

@implementAccountDocumentLedger(zReport);
sumOutAccountDocumentLedger (ledger) += sumReceiptDetailZReport(ledger);
sumItemOutAccountDocumentLedger (ledger) += sumReceiptDetailZReport(ledger);
sumContainerOutAccountDocumentLedger (ledger) += 0.0 IF ledger IS zReport;

//----------------------------------- Формы -------------------------------------------------//

FORM zReport 'Z-отчет'
    OBJECTS z=zReport FIXED PANEL
    PROPERTIES (z) numberCashRegisterZReport, nameDepartmentStoreZReport READONLY, dateZReport, timeZReport, numberZReport,
                   basisZReport, countReceiptZReport, quantityReceiptDetailZReport, sumCashZReport, sumReceiptDetailZReport,
                   discountSumReceiptDetailZReport

    OBJECTS b=receipt, d=receiptDetail
    PROPERTIES(b) numberReceipt, dateReceipt, timeReceipt,
                  numberDiscountCardReceipt, nameClientDiscountCardReceipt, sumReceiptDetailReceipt, discountSumReceiptDetailReceipt,
                  discountSumReceipt, countReceiptDetailReceipt, quantityReceiptDetailReceipt, ADDOBJ, delete
    FILTERS zReportReceipt(b)==z

    PROPERTIES(b) TODRAW d addDetailDialogSkuStockReceiptSaleDetailReceipt, addDetailDialogSkuStockReceiptReturnDetailReceipt
                           // todo : добавить операции возврата по штрих-коду

    PROPERTIES(d) typeReceiptDetail, idBarcodeReceiptDetail, nameSkuReceiptDetail, quantityReceiptDetail, quantityReturnedReceiptSaleDetail FORCE GRID, priceReceiptDetail,
                  sumReceiptDetail, discountSumReceiptDetail, descriptionSaleReceiptReturnDetail, ADDOBJ, delete

    FILTERS receiptReceiptDetail(d)==b

    OBJECTS p=payment
    PROPERTIES(p) namePaymentTypePayment, namePaymentMeansPayment, sumPayment, ADDOBJ, delete

    FILTERS receiptPayment(p)==b

    EDIT zReport OBJECT z
;

DESIGN zReport FROM DEFAULT{

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        NEW firstCase {

            type = SPLITV;

            ADD z.box;
            ADD b.box;
        }

        NEW secondCase{

            type = SPLITH;
            childConstraints = TO THE RIGHT;

            ADD d.box{
                title = 'Строка чека';
                fillHorizontal = 3;
            }
            ADD p.box;
        }
    }

    ADD functions.box;
}

FORM zReports 'Z-отчеты'
    OBJECTS z=zReport
    PROPERTIES (z) READONLY objectClassName, numberCashRegisterZReport, nameDepartmentStoreZReport, dateZReport, timeZReport,
                            numberZReport, basisZReport, countReceiptZReport, quantityReceiptDetailZReport, sumCashZReport,
                            sumReceiptDetailZReport, discountSumReceiptDetailZReport
    PROPERTIES (z) ADDFORM, EDITFORM SHOWIF isDraftZReport(z), delete FORCE PANEL SHOWIF isDraftZReport(z),
                            postZReport SHOWIF isDraftZReport(z), unpostZReport SHOWIF isPostedZReport(z)

    OBJECTS b=receipt
    PROPERTIES(b) READONLY  numberReceipt, dateReceipt, timeReceipt,
                            numberDiscountCardReceipt, nameClientDiscountCardReceipt, sumReceiptDetailReceipt, discountSumReceiptDetailReceipt,
                            discountSumReceipt, countReceiptDetailReceipt, quantityReceiptDetailReceipt

    FILTERS zReportReceipt(b)==z
    ORDER BY                numberReceipt

    OBJECTS d=receiptDetail
    PROPERTIES(d) READONLY  typeReceiptDetail, idBarcodeReceiptDetail, nameSkuReceiptDetail, quantityReceiptDetail, quantityReturnedReceiptSaleDetail FORCE GRID, priceReceiptDetail,
                            costSumSkuLedger, sumReceiptDetail, discountSumReceiptDetail, descriptionSaleReceiptReturnDetail

    FILTERS receiptReceiptDetail(d)==b

    OBJECTS p=payment
    PROPERTIES(p) READONLY  namePaymentTypePayment, namePaymentMeansPayment, sumPayment

    FILTERS receiptPayment(p)==b
;

DESIGN zReports FROM DEFAULT{

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        NEW firstCase {

            type = SPLITV;

            ADD z.box;
            ADD b.box;
        }

        NEW secondCase{

            type = SPLITH;
            childConstraints = TO THE RIGHT;

            ADD d.box{
                title = 'Строка чека';
                fillHorizontal = 3;
            }
            ADD p.box;
        }
    }

    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }
    PROPERTY (delete(z)) {
        panelLocation = TOOLBAR;
        askConfirm = TRUE;
    }

    ADD functions.box;
}

// ----------------------------- Кассовый модуль ---------------- //

POSPriceSkuDepartmentStoreDateTime 'Цена в кассе' = ABSTRACT NUMERIC[14,2] (sku, departmentStore, DATETIME);
currentPOSPriceSkuDepartmentStore 'Текущая цена' (sku, departmentStore) = POSPriceSkuDepartmentStoreDateTime(sku, departmentStore, currentDateTime());

zReportCashRegister = DATA zReport (cashRegister);

currentCashRegister () = cashRegisterComputer(currentComputer());

GROUP receiptZReportGroup 'Z-отчет' : publicGroup;

currentZReport () = zReportCashRegister(currentCashRegister());
numberCurrentZReport 'Номер текущего Z-отчета' () = numberZReport(currentZReport()) IN receiptZReportGroup;

closedCurrentZReport () = TRUE AND NOT currentZReport();

// Операции с чеками

createCurrentReceipt 'Создать новый чек' = ACTION () {
    ADDOBJ receipt;
    FOR r == addedObject() DO {
        SET zReportReceipt(r) <- currentZReport();
        SET numberReceipt(r) <- maxNumberReceiptZReport(currentZReport()) (+) 1;
    }
}

GROUP receiptActionGroup 'Оплата' : publicGroup;

// Проведение чека

FORM postReceiptPayment 'Оплата по чеку'
    OBJECTS r = receipt FIXED PANEL
    PROPERTIES(r) READONLY changePaymentReceipt

    OBJECTS p = payment FIXED GRID
    PROPERTIES(p) sumPayment, namePaymentTypePayment, ADDOBJ, delete
    FILTERS receiptPayment(p) == r
;

DESIGN postReceiptPayment FROM DEFAULT {

    main {
        preferredSize = (600, 250);
        PROPERTY(sumPayment) { font = 'Tahoma bold 48'; }
        PROPERTY(namePaymentTypePayment) { font = 'Tahoma bold 48'; }
        PROPERTY(delete) { font = 'Tahoma bold 48'; }
        ADD PROPERTY(changePaymentReceipt) BEFORE functions.box { panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 72'; }
    }
}

postReceipt 'Смешанный платеж' = ACTION (receipt) {
    IF sumReceiptDetailReceipt(receipt) THEN {
        ADDOBJ payment;
        FOR p == addedObject() DO {
            SET receiptPayment(p) <- receipt;
            SET paymentTypePayment(p) <- minCashPaymentType();
        }
        ADDOBJ payment;
        FOR p == addedObject() DO {
            SET receiptPayment(p) <- receipt;
            SET paymentTypePayment(p) <- minCardPaymentType();
        }
        FORM postReceiptPayment OBJECTS r = receipt MODAL CHECK;
        IF formResult() == formResult.ok THEN {
            EXEC apply();

            EXEC createCurrentReceipt();
        } ELSE {
            FOR receiptPayment(p) == receipt DO {
                EXEC delete(p);
            }
        }
    }
} EDITKEY 'F9' IN receiptActionGroup;

postCardReceipt 'Карточкой' = ACTION (receipt) {
    IF sumReceiptDetailReceipt(receipt) THEN {
        ADDOBJ payment;
        FOR p == addedObject() DO {
            SET receiptPayment(p) <- receipt;
            SET paymentTypePayment(p) <- minCardPaymentType();
            SET sumPayment(p) <- sumReceiptDetailReceipt(receipt);
        }
        EXEC apply();
        // todo : здесь нужно как-то проверить, что все применилось
        EXEC createCurrentReceipt();
    }
} EDITKEY 'F10' CONFIRM IN receiptActionGroup;

postCashReceipt 'Наличными' = ACTION (receipt) {
    IF sumReceiptDetailReceipt(receipt) THEN {
        ADDOBJ payment;
        FOR p == addedObject() DO {
            SET receiptPayment(p) <- receipt;
            SET paymentTypePayment(p) <- minCashPaymentType();
            SET sumPayment(p) <- sumReceiptDetailReceipt(receipt);
        }
        FORM postReceiptPayment OBJECTS r = receipt MODAL CHECK;
        IF formResult() == formResult.ok THEN {
            EXEC apply();

            EXEC createCurrentReceipt();
        } ELSE {
            FOR receiptPayment(p) == receipt DO {
                EXEC delete(p);
            }
        }
    }
} EDITKEY 'F11' IN receiptActionGroup;

cancelReceipt 'Отменить чек' = ACTION (receipt) {
    IF sumReceiptDetailReceipt(receipt) THEN {
        EXEC cancel();

        EXEC createCurrentReceipt();
    }
} EDITKEY 'shift F11' CONFIRM IN receiptActionGroup;

// Операции по добавлению строк в чек

// Продажи
createReceiptSaleDetail 'Добавить строку продажи' = ACTION (receipt, sku, barcode) {
    ADDOBJ receiptSaleDetail;
    FOR d == addedObject() DO {
        SET receiptReceiptSaleDetail(d) <- receipt;
        SET idBarcodeReceiptDetail(d) <- barcode;
        SET skuReceiptSaleDetail(d) <- sku;
        SET quantityReceiptSaleDetail(d) <- 1.0;
        SET priceReceiptSaleDetail(d) <- POSPriceSkuDepartmentStoreDateTime(sku, departmentStoreReceipt(receipt), currentDateTime());
    }
}

GROUP receiptSaleActionGroup 'Продажа' : publicGroup;

// По штрих-коду
scanBarcodeSaleReceipt 'Ввести штрих-код' = ACTION (receipt) {
    FORM barcodeInput MODAL;
    IF formResult() == formResult.ok THEN {
        LOCAL dialogBarcodeSku = sku();
        SET dialogBarcodeSku() <- skuBarcodeIdDate(chosenString('barcode'), currentDate());

        IF dialogBarcodeSku() IS sku THEN {
            EXEC createReceiptSaleDetail(receipt, dialogBarcodeSku(), chosenString('barcode'));
        } ELSE
            MESSAGE 'Не найден штрих-код';
    }
} EDITKEY 'F4' IN receiptSaleActionGroup;

// Поиск подбором
FORM searchSkuSaleReceipt 'Поиск SKU'
    OBJECTS st = departmentStore

    TREE skuTree sk = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = name(sk)
    ORDER BY skuTreeName

    OBJECTS           s=sku
    PROPERTIES        READONLY nameSku(s), idBarcodeSku(s)
    FILTERS           isParentSkuGroupSku(sk, s)
    ORDER BY          nameSku

    PROPERTIES(s, st) READONLY currentBalanceSkuStock HINTNOUPDATE, currentPOSPriceSkuDepartmentStore

    FILTERGROUP filters
        FILTER 'Товары с остатком' 'F10' currentBalanceSkuStock(s, st) DEFAULT

;

DESIGN searchSkuSaleReceipt FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        NEW topContainer BEFORE functions.box {
            type = SPLITH;
            ADD skuTree.tree.box { title = 'Группы'; }
            ADD s.box {
                fillHorizontal = 2;
                s.grid {
                    defaultComponent = TRUE;
                }
            }
        }
    }
}

searchSkuSaleReceipt 'Поиск' = ACTION (receipt) {
    FORM searchSkuSaleReceipt OBJECTS st = departmentStoreReceipt(receipt) MODAL;
    IF formResult() == formResult.ok THEN {
        EXEC createReceiptSaleDetail(receipt, chosenObject('s'), idBarcodeSku(chosenObject('s')));
    }
} EDITKEY 'F3' IN receiptSaleActionGroup;

// Возвраты

createReceiptReturnDetail 'Добавить строку возврата' = ACTION (receipt, receiptSaleDetail, barcode) {
    ADDOBJ receiptReturnDetail;
    FOR d == addedObject() DO {
        SET receiptReceiptReturnDetail(d) <- receipt;
        SET idBarcodeReceiptDetail(d) <- barcode;
        SET receiptSaleDetailReceiptReturnDetail(d) <- receiptSaleDetail;
        SET skuReceiptReturnDetail(d) <- skuReceiptSaleDetail(receiptSaleDetail);
        SET quantityReceiptReturnDetail(d) <- 1.0;
        SET priceReceiptReturnDetail(d) <- priceReceiptSaleDetail(receiptSaleDetail);
    }
}

GROUP receiptReturnActionGroup 'Возврат' : publicGroup;

// По штрих-коду
FORM scanBarcodeReturnReceipt 'Выбор строки возврата'
    OBJECTS d = departmentStore FIXED PANEL

    OBJECTS s = sku FIXED PANEL
    PROPERTIES(s) READONLY idBarcodeSku, nameSku

    OBJECTS r = receiptSaleDetail FIXED GRID
    PROPERTIES(r) READONLY numberReceiptReceiptDetail, dateTimeReceiptSaleDetail, numberDiscountCardReceiptDetail, nameClientDiscountCardReceiptDetail, sumReceiptDetailReceiptDetail,
                           indexReceiptDetail, quantityReceiptDetail, quantityReturnedReceiptSaleDetail, priceReceiptDetail, sumReceiptDetail, discountSumReceiptDetail
    FILTERS departmentStoreReceiptSaleDetail(r) == d,
            skuReceiptSaleDetail(r) == s
;

DESIGN scanBarcodeReturnReceipt FROM DEFAULT {
    PROPERTY(idBarcodeSku) {
        focusable = FALSE;
    }
    PROPERTY(nameSku) {
        focusable = FALSE;
    }
}

scanBarcodeReturnReceipt 'Ввести штрих-код' = ACTION (receipt) {
    FORM barcodeInput MODAL;
    IF formResult() == formResult.ok THEN {
        LOCAL dialogBarcodeSku = sku();
        SET dialogBarcodeSku() <- skuBarcodeIdDate(chosenString('barcode'), currentDate());

        IF dialogBarcodeSku() IS sku THEN {
            FORM scanBarcodeReturnReceipt OBJECTS d = departmentStoreReceipt(receipt), s = dialogBarcodeSku() MODAL;
            IF formResult() == formResult.ok THEN {
                EXEC createReceiptReturnDetail(receipt, chosenObject('r'), chosenString('barcode'));
            }
        } ELSE
            MESSAGE 'Не найден штрих-код';
    }
} EDITKEY 'F7' IN receiptReturnActionGroup;

// Поиск

FORM searchSkuReturnReceipt 'Поиск строки возврата'
    OBJECTS st = departmentStore FIXED PANEL

    OBJECTS s = receipt FIXED GRID
    PROPERTIES(s) READONLY  numberReceipt, dateReceipt, timeReceipt,
                            numberDiscountCardReceipt, nameClientDiscountCardReceipt, sumReceiptDetailReceipt, discountSumReceiptDetailReceipt,
                            countReceiptDetailReceipt, quantityReceiptDetailReceipt
    FILTERS departmentStoreReceipt(s) == st

    OBJECTS r = receiptSaleDetail FIXED GRID
    PROPERTIES(r) READONLY  idBarcodeReceiptDetail, nameSkuReceiptDetail, quantityReceiptDetail, quantityReturnedReceiptSaleDetail FORCE GRID, priceReceiptDetail,
                            sumReceiptDetail, discountSumReceiptDetail
    FILTERS receiptReceiptSaleDetail(r) == s
;

searchSkuReturnReceipt 'Поиск' = ACTION (receipt) {
    FORM searchSkuReturnReceipt OBJECTS st = departmentStoreReceipt(receipt) MODAL;
    IF formResult() == formResult.ok THEN {
        EXEC createReceiptReturnDetail(receipt, chosenObject('r'), idBarcodeSku(skuReceiptSaleDetail(chosenObject('r'))));
    }
} EDITKEY 'F6' IN receiptReturnActionGroup;

// Операции с Z-отчетами

openCurrentZReport 'Открыть Z-отчет' = ACTION () {
    ADDOBJ zReportPosted;
    FOR z == addedObject() DO {
        SET numberZReport(z) <- castToString255(z);
        SET cashRegisterZReport(z) <- currentCashRegister();
        SET zReportCashRegister(cashRegister) IF cashRegister == currentCashRegister() <- z AS zReport;
        EXEC apply();
    }

    EXEC createCurrentReceipt();
} CONFIRM IN receiptZReportGroup;

closeCurrentZReport 'Закрыть Z-отчет' = ACTION () {
    EXEC cancel();
    SET zReportCashRegister(cashRegister) IF cashRegister == currentCashRegister() <- NULL;
    EXEC apply();
} CONFIRM IN receiptZReportGroup;

// Форма POS-терминала

prevCurrentBalanceSkuReceipt (sku, receipt) = [PREV(currentBalanceSkuStock(sku, stock))] (sku, departmentStoreReceipt(receipt));
prevCurrentBalanceReceiptDetail 'Тек. остаток' (receiptDetail) = prevCurrentBalanceSkuReceipt(skuReceiptDetail(receiptDetail), receiptReceiptDetail(receiptDetail));

FORM POS
    PROPERTIES() READONLY hostnameCurrentComputer, numberCurrentZReport, currentDateTime

    OBJECTS r = receipt FIXED PANEL
    PROPERTIES(r) SHOWIF currentZReport() discountSumReceiptDetailReceipt, sumReceiptDetailReceipt,
                                          searchSkuSaleReceipt, scanBarcodeSaleReceipt, searchSkuReturnReceipt, scanBarcodeReturnReceipt, postReceipt, postCardReceipt, postCashReceipt, cancelReceipt

    OBJECTS d = receiptDetail FIXED GRID
    PROPERTIES(d) SHOWIF currentZReport() READONLY indexReceiptDetail, typeReceiptDetail, idBarcodeReceiptDetail, nameSkuReceiptDetail, prevCurrentBalanceReceiptDetail
    PROPERTIES(d) SHOWIF currentZReport()          quantityReceiptDetail, priceReceiptDetail, sumReceiptDetail, discountSumReceiptDetail, delete
    FILTERS receiptReceiptDetail(d) == r

    PROPERTIES() openCurrentZReport SHOWIF closedCurrentZReport(), closeCurrentZReport SHOWIF currentZReport()
;

DESIGN POS FROM DEFAULT {
    main {
        childConstraints = TO THE BOTTOM;

        NEW centerContainer BEFORE functions.box {
            childConstraints = TO THE RIGHT;
            ADD d.box {
                PROPERTY(indexReceiptDetail) { focusable = FALSE; font = 'Tahoma 16'; }
                PROPERTY(typeReceiptDetail) { focusable = FALSE; font = 'Tahoma 16'; }
                PROPERTY(idBarcodeReceiptDetail) { focusable = FALSE; font = 'Tahoma 16'; }
                PROPERTY(nameSkuReceiptDetail) { focusable = FALSE; font = 'Tahoma 16'; }
                PROPERTY(prevCurrentBalanceReceiptDetail) { focusable = FALSE; font = 'Tahoma 16'; }
                PROPERTY(quantityReceiptDetail) { font = 'Tahoma 16'; }
                PROPERTY(priceReceiptDetail) { font = 'Tahoma 16'; }
                PROPERTY(sumReceiptDetail) { font = 'Tahoma 16'; }
                PROPERTY(discountSumReceiptDetail) { font = 'Tahoma 16'; }
                PROPERTY(delete) { font = 'Tahoma 16'; }
            }
            NEW eastContainer {
                childConstraints = TO THE BOTTOM;
                ADD r.receiptSaleActionGroup {
                    childConstraints = TO THE BOTTOM;
                    PROPERTY(searchSkuSaleReceipt) { focusable = FALSE; font = 'Tahoma bold 24'; }
                    PROPERTY(scanBarcodeSaleReceipt) { focusable = FALSE; font = 'Tahoma bold 24'; }
                }
                ADD r.receiptReturnActionGroup {
                    childConstraints = TO THE BOTTOM;
                    PROPERTY(searchSkuReturnReceipt) { focusable = FALSE; font = 'Tahoma bold 24'; }
                    PROPERTY(scanBarcodeReturnReceipt) { focusable = FALSE; font = 'Tahoma bold 24'; }
                }
                ADD r.receiptActionGroup {
                    childConstraints = TO THE BOTTOM;
                    PROPERTY(postReceipt) { focusable = FALSE; font = 'Tahoma bold 24'; }
                    PROPERTY(postCardReceipt) { focusable = FALSE; font = 'Tahoma bold 24'; }
                    PROPERTY(postCashReceipt) { focusable = FALSE; font = 'Tahoma bold 24'; }
                    PROPERTY(cancelReceipt) { focusable = FALSE; font = 'Tahoma bold 24'; }
                }
                NEW sumContainer {
                    title = 'Итого';
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY(discountSumReceiptDetailReceipt) { panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 72'; }
                    ADD PROPERTY(sumReceiptDetailReceipt) { panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 72'; }
                }
            }
        }

        NEW southContainer BEFORE functions.box {
            childConstraints = TO THE RIGHT;
            ADD NOGROUP.receiptZReportGroup {
                childConstraints = TO THE RIGHT;
            }
            NEW currentContainer {
                title = 'Текущие значения';
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(hostnameCurrentComputer) {
                    focusable = FALSE;
                }
                ADD PROPERTY(currentDateTime) {
                    focusable = FALSE;
                }
            }
        }
    }
}