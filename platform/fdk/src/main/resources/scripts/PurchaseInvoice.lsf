MODULE PurchaseInvoice;

REQUIRE PurchaseOrder, Invoice;

NAMESPACE Purchase;

//----------------------------------------------- Накладная ---------------------------------------------------//
@defineInvoice(' (закупка)', customerStock, showPurchasePack, 'Отображать упаковку', purchasePack);
@defineInvoiceBatch(customerStock);

@defineInvoiceDestination(supplier, customer);
@defineInvoiceStockDestination(supplierStock, customerStock);

// -------------------------------------- Формирование задолженности ---------------------------------------------------

@implementContractLedger(a, userInvoice, contractSku);
sumContractALedger(contractALedger) += invoiceSumUserInvoiceDetailUserInvoice(contractALedger);

@implementContractPrepaymentLedger(userInvoice, invoiceSumUserInvoiceDetailUserInvoice, contractSku);

@implementOutContractLedgerInContractLedgerPrefix(in, userInvoice, contractSku);
sumInContractLedger(inContractLedger) += invoiceSumUserInvoiceDetailUserInvoice(inContractLedger);

CONSTRAINT supplierUserInvoice(userInvoice) AND NOT isSupplierLegalEntity(supplierUserInvoice(userInvoice))
    CHECKED BY supplierUserInvoice MESSAGE 'Для накладной выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerUserInvoice(userInvoice) AND NOT isCompanyLegalEntity(customerUserInvoice(userInvoice))
    CHECKED BY customerUserInvoice MESSAGE 'Для накладной выбрано в качестве покупателя организация, не являющаяся компанией';

        // для импорта
numberSeriesToUserInvoice (number, series) = GROUP UNIQUE userInvoice BY numberObject(userInvoice), seriesObject(userInvoice) WHERE userInvoice IS userInvoice;
sidUserInvoiceDetail (userInvoiceDetail) = DATA STRING[200] (userInvoiceDetail);
userInvoiceDetailSID (sidUserInvoiceDetail) = GROUP MAX userInvoiceDetail BY sidUserInvoiceDetail(userInvoiceDetail) WHERE userInvoiceDetail IS userInvoice;

@defineDocumentPackageSku(userInvoice, sku, customerStock);
@extendFormDocumentPackageSkuCustom(userInvoice, userInvoice, i, showPurchasePack);

overChangeQuantityValueSkuUserInvoiceDetail(detail) += ACTION (detail) {
    IF  purchasePackBarcodeSku(skuUserInvoiceDetail(detail)) THEN {
        SET quantityPackUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
    }
}

inAssortmentSkuUserInvoice (sku, userInvoice)= companyLedgerPriceListTypeSkuStockDateTime(priceListTypeUserInvoiceSku(userInvoice, sku), sku, customerStockUserInvoice(userInvoice), dateTimeUserInvoice(userInvoice)) == supplierUserInvoice(userInvoice);
inUserInvoiceSku (userInvoice, sku)= inSupplierSku(supplierUserInvoice(userInvoice), sku);
EXTEND FORM userInvoice
       FILTERGROUP filter2
            FILTER 'С поступлением ' 'F8' inUserInvoiceSku(i, s)
            FILTER 'В ассортименте ' 'F7' inAssortmentSkuUserInvoice(s, i)
;

// Проводим по регистру закупок
@implementSupplyLedger(invoice, sku, customerStock);
supplierSupplyLedger (ledger) += supplierInvoiceDetail(ledger);
quantitySupplyLedger (ledger) += quantityInvoiceDetail(ledger);
VATSupplyLedger (ledger) += VATInvoiceDetail(ledger);
sumSupplyLedger (ledger) += sumInvoiceDetail(ledger);

