MODULE Contract;

REQUIRE System, Historizable, LegalEntity;

// ---------------------------------------- Договора ------------------------------------ //

CLASS ABSTRACT contract 'Договор';
TABLE contract (contract);
TABLE contractDate (contract, DATE);

GROUP contractGroup 'Реквизиты' : recognizeGroup;

numberContract 'Номер договора' = DATA STRING[30] (contract) IN contractGroup;
dateFromContract 'Дата начала договора' = DATA DATE (contract) IN contractGroup;
dateToContract 'Дата окончания договора' = DATA DATE (contract) IN contractGroup;
activeContract 'Действуюший' (contract, date) =
    (dateFromContract(contract) < (date AS DATE)) AND (dateToContract(contract) > (date AS DATE));

GROUP partyGroup 'Контрагенты' : recognizeGroup;

partyAContract = ABSTRACT legalEntity (contract) PERSISTENT INDEXED;
namePartyAContract 'Сторона 1' (contract) = name(partyAContract(contract)) IN partyGroup;

partyBContract = ABSTRACT legalEntity (contract) PERSISTENT INDEXED;
namePartyBContract 'Сторона 2' (contract) = name(partyBContract(contract)) IN partyGroup;

countContractPartyAPartyB 'Кол-во договоров' (partyA, partyB) =
    GROUP SUM 1 IF partyAContract(contract) == partyA AND partyBContract(contract) == partyB BY partyA, partyB;

GROUP attributeGroup 'Атрибуты' : publicGroup;

currencyContract = DATA currency (contract);
nameCurrencyContract 'Валюта взаиморасчетов' (contract) = name(currencyContract(contract)) IN attributeGroup;
shortNameCurrencyContract 'Валюта взаиморасчетов' (contract) = shortNameCurrency(currencyContract(contract)) IN attributeGroup;
symbolCurrencyContract 'Символ' (contract) = symbolCurrency(currencyContract(contract)) IN attributeGroup;

noteContract 'Примечание' = DATA TEXT (contract) MINCHARWIDTH 50 PREFCHARWIDTH 50 IN attributeGroup;

// ------------------------------------ Макрос для создания договоров по умолчанию ----------------------------- //

META defineContractDefault (contract, partyA, partyB)
    data###contract###partyA###partyB = DATA contract (partyA, partyB);

    CONSTRAINT partyA != partyA###contract(data###contract###partyA###partyB(partyA, partyB)) CHECKED BY data###contract###partyA###partyB
        MESSAGE 'Договор по умолчанию не является договором между выбранными контрагентами';
    CONSTRAINT partyB != partyB###contract(data###contract###partyA###partyB(partyA, partyB)) CHECKED BY data###contract###partyA###partyB
        MESSAGE 'Договор по умолчанию не является договором между выбранными контрагентами';

    contract###partyA###partyB (partyA, partyB) = [GROUP MAX contract IF dateFromContract(contract) <= currentDate() AND NOT dateToContract(contract) < currentDate()
                                                         BY partyA###contract(contract), partyB###contract(contract)](partyA, partyB) OR
                                                  data###contract###partyA###partyB(partyA, partyB);
    number###contract###partyA###partyB 'Основной договор' (partyA, partyB) = numberContract(contract###partyA###partyB(partyA, partyB));

    is###partyA###partyB###contract 'Основной' (partyA, partyB, contract) = contract###partyA###partyB (partyA, partyB) == contract;
END

// Формы
FORM contract 'Договор'
    OBJECTS c=contract FIXED PANEL
    PROPERTIES(c) namePartyAContract, namePartyBContract,
                  numberContract, dateFromContract, dateToContract,
                  nameCurrencyContract, noteContract

    EDIT contract OBJECT c
;

// ------------------------------------ Договора на перемещение товаров ---------------- //

CLASS ABSTRACT contractSku 'Договор на поставку' : contract;

GROUP paymentGroup 'Взаиморасчеты' : publicGroup;

CLASS STATIC contractSkuType 'Тип договора на поставку' {
    sale 'Договор купли-продажи',
    commission 'Договор комиссии'
}
@defineHistorizableCustom(typeContractSku, 'Тип договора', contractSkuType, name, contract, numberContract, paymentGroup);

CLASS STATIC contractSkuForm 'Порядок оплаты договора на поставку' {
    prepayment 'С отсрочкой платежа',
    implement 'По факту реализации',
    requirement 'Платежное требование'
}
@defineHistorizableCustom(formContractSku, 'Порядок оплаты', contractSkuForm, name, contract, numberContract, paymentGroup);

@defineHistorizable(delayContractSku, 'Отсрочка платежа (календ. дней)', INTEGER, contract, numberContract, paymentGroup);

// Формы
FORM contractSku 'Договор на поставку товаров'
    OBJECTS c=contract FIXED PANEL
    PROPERTIES(c) namePartyAContract, namePartyBContract,
                  numberContract, dateFromContract, dateToContract,
                  nameCurrencyContract, noteContract,
                  nameTypeContractSku, dialogTypeContractSku,
                  nameFormContractSku, dialogFormContractSku,
                  delayContractSku, dialogDelayContractSku

    EDIT contract OBJECT c
;
