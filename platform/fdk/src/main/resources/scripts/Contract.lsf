MODULE Contract;

REQUIRE System, Historizable, LegalEntity;

// ---------------------------------------- Договора ------------------------------------ //

CLASS ABSTRACT contract 'Договор';
TABLE contract (contract);
TABLE contractDate (contract, DATE);

GROUP contractGroup 'Реквизиты' : recognizeGroup;

numberContract 'Номер договора' = DATA STRING[30] (contract) IN contractGroup;
dateFromContract 'Дата начала договора' = DATA DATE (contract) IN contractGroup;
dateToContract 'Дата окончания договора' = DATA DATE (contract) IN contractGroup;
activeContract 'Действуюший' (contract, date) =
//    (dateFromContract(contract) < (date AS DATE)) AND (dateToContract(contract) > (date AS DATE));
    (dateFromContract(contract) <= (date AS DATE)) AND NOT (dateToContract(contract) < (date AS DATE));


GROUP partyGroup 'Контрагенты' : recognizeGroup;

partyAContract = ABSTRACT legalEntity (contract) PERSISTENT INDEXED;
namePartyAContract 'Сторона А' (contract) = name(partyAContract(contract)) IN partyGroup;

partyBContract = ABSTRACT legalEntity (contract) PERSISTENT INDEXED;
namePartyBContract 'Сторона Б' (contract) = name(partyBContract(contract)) IN partyGroup;

countContractPartyAPartyB 'Кол-во договоров' (partyA, partyB) =
    GROUP SUM 1 IF partyAContract(contract) == partyA AND partyBContract(contract) == partyB BY partyA, partyB;

GROUP attributeGroup 'Атрибуты' : publicGroup;

currencyContract = DATA currency (contract);
nameCurrencyContract 'Валюта взаиморасчетов' (contract) = name(currencyContract(contract)) IN attributeGroup;
shortNameCurrencyContract 'Валюта взаиморасчетов' (contract) = shortNameCurrency(currencyContract(contract)) IN attributeGroup;
symbolCurrencyContract 'Символ' (contract) = symbolCurrency(currencyContract(contract)) IN attributeGroup;

noteContract 'Примечание' = DATA TEXT (contract) MINCHARWIDTH 50 PREFCHARWIDTH 50 IN attributeGroup;

// ------------------------------------ Макрос для создания договоров по умолчанию ----------------------------- //

META defineContractDefault (contract, partyA, partyB)
    @defineContractDefaultCustom(contract, partyA, partyB, partyA, partyB);
END

META defineContractDefaultCustom (contract, partyA, partyB, prefixA, prefixB)
    data###contract###partyA###partyB = DATA contract (partyA, partyB);

    CONSTRAINT partyA != prefixA###contract(data###contract###partyA###partyB(partyA, partyB)) CHECKED BY data###contract###partyA###partyB
        MESSAGE 'Договор по умолчанию не является договором между выбранными контрагентами';
    CONSTRAINT partyB != prefixB###contract(data###contract###partyA###partyB(partyA, partyB)) CHECKED BY data###contract###partyA###partyB
        MESSAGE 'Договор по умолчанию не является договором между выбранными контрагентами';

    contract###partyA###partyB (pA, pB) = [GROUP MAX contract IF dateFromContract(contract) <= currentDate() AND NOT dateToContract(contract) < currentDate()
                                                         BY prefixA###contract(contract), prefixB###contract(contract)](pA, pB) OR
                                                  data###contract###partyA###partyB(pA, pB);
    number###contract###partyA###partyB 'Основной договор' (pA, pB) = numberContract(contract###partyA###partyB(pA, pB));

    single###contract###partyA###partyB (pA, pB) = contract###partyA###partyB(pA, pB) IF countContractPartyAPartyB(pA, pB);

    is###partyA###partyB###contract 'Основной' (pA, pB, contract) = contract###partyA###partyB (pA, pB) == contract;
END

META defineDocumentContract (object, contractType, singleContractProp, partyAProp, partyBProp, partyAMessage, partyBMessage)
    contractType###object = DATA contractType (object);
    number###contractType###object 'Номер договора' (object) = numberContract(contractType###object(object)) IN documentPrmGroup;
    
    isCommission###object 'Продажа на комиссию' = DATA BOOLEAN (object) IN documentPrmGroup;
    isCommission###object(object) <- typeContractSkuDate(contractType###object(object), date###object(object)) == contractSkuType.commission
        WHEN CHANGED(contractType###object(object)) OR
             CHANGED(date###object(object));

    contractType###object(object) <- singleContractProp(partyAProp(object), partyBProp(object))
                                          WHEN CHANGED(partyAProp(object)) OR CHANGED(partyBProp(object));

    CONSTRAINT contractType###object(object) AND NOT partyAProp(object) == partyAContract(contractType###object(object))
        CHECKED BY contractType###object MESSAGE partyAMessage;

    CONSTRAINT contractType###object(object) AND NOT partyBProp(object) == partyBContract(contractType###object(object))
        CHECKED BY contractType###object MESSAGE partyBMessage;
END
META defineDocumentAbstractContract (object, contractType)
    contractType###object = ABSTRACT contractType (object) PERSISTENT;
    number###contractType###object 'Номер договора' (object) = numberContract(contractType###object(object)) IN documentPrmGroup;

    isCommission###object 'Продажа на комиссию' = ABSTRACT BOOLEAN (object) PERSISTENT IN documentPrmGroup;
END
META defineDocumentInterfaceContract (object, contractType, singleContractProp, partyAProp, partyBProp, partyAMessage, partyBMessage)
    @defineDocumentAbstractContract(object, contractType);
    @defineDocumentContract(user###object, contractType, singleContractProp, partyAProp, partyBProp, partyAMessage, partyBMessage);
    contractType###object(object) += contractType###user###object(object);
    isCommission###object(object) += isCommission###user###object(object);
END

// Формы
FORM contract 'Договор'
    OBJECTS c=contract FIXED PANEL
    PROPERTIES(c) namePartyAContract, namePartyBContract,
                  numberContract, dateFromContract, dateToContract,
                  nameCurrencyContract, noteContract

    EDIT contract OBJECT c
;

// ------------------------------------ Договора на перемещение товаров ---------------- //


CLASS ABSTRACT contractSku 'Договор на поставку' : contract;

GROUP paymentGroup 'Взаиморасчеты' : publicGroup;

CLASS STATIC contractSkuType 'Тип договора на поставку' {
    sale 'Договор купли-продажи',
    commission 'Договор комиссии'
}

CLASS STATIC contractSkuForm 'Порядок оплаты договора на поставку' {
    prepayment 'С отсрочкой платежа',
    implement 'По факту реализации',
    requirement 'Платежное требование'
}

CLASS userContractSku 'Договор на поставку' : contractSku;

supplierContractSku = DATA legalEntity (userContractSku) AUTOSET;
nameSupplierContractSku 'Поставщик' (contract) = name(supplierContractSku(contract)) IN recognizeGroup MAXCHARWIDTH 30 PREFCHARWIDTH 30;
partyAContract (contract) += supplierContractSku(contract);

customerContractSku = DATA legalEntity (contractSku) AUTOSET;
nameCustomerContractSku 'Организация' (contract) = name(customerContractSku(contract)) IN recognizeGroup MAXCHARWIDTH 30 PREFCHARWIDTH 30;
partyBContract (contract) += customerContractSku(contract);

TABLE supplierCustomer(legalEntity, legalEntity);
//@defineContractDefault(contractSku, supplier, customer);

dataContractSkuSupplierCustomer = DATA contract (legalEntity, legalEntity);

CONSTRAINT supplier != supplierContractSku(dataContractSkuSupplierCustomer(supplier, customer)) CHECKED BY dataContractSkuSupplierCustomer
    MESSAGE 'Договор по умолчанию не является договором между выбранными контрагентами';
CONSTRAINT customer != customerContractSku(dataContractSkuSupplierCustomer(supplier, customer)) CHECKED BY dataContractSkuSupplierCustomer
    MESSAGE 'Договор по умолчанию не является договором между выбранными контрагентами';

contractSkuSupplierCustomer (supplier, customer) = [GROUP MAX contractSku IF dateFromContract(contractSku) <= currentDate() AND NOT dateToContract(contractSku) < currentDate()
                                                         BY supplierContractSku(contractSku),customerContractSku(contractSku)](supplier, customer) OR
                                                  dataContractSkuSupplierCustomer(supplier, customer);
numberContractSkuSupplierCustomer 'Основной договор' (supplier, customer) = numberContract(contractSkuSupplierCustomer(supplier, customer));

singleContractSkuSupplierCustomer (supplier, customer) = contractSkuSupplierCustomer(supplier, customer) IF countContractPartyAPartyB(supplier, customer);

isSupplierCustomerContractSku 'Основной' (supplier, customer, contractSku) = contractSkuSupplierCustomer(supplier, customer) == contractSku;

CLASS paymentCondition 'Условия оплаты';
TABLE paymentCondition(paymentCondition);

datePaymentCondition 'Дата' = DATA DATE (paymentCondition);
datePaymentCondition (paymentCondition) <- currentDate() WHEN ASSIGNED(paymentCondition IS paymentCondition);
contractPaymentCondition 'Договор' = DATA contractSku (paymentCondition) AUTOSET;
numberContractPaymentCondition 'Номер договора' (paymentCondition) = numberContract(contractPaymentCondition(paymentCondition));

TABLE contractSkuDate (contractSku, DATE);
dataPaymentConditionContractDate 'Условия оплаты для контракта и даты' (contract, date) =
    GROUP UNIQUE paymentCondition BY contractPaymentCondition(paymentCondition), datePaymentCondition(paymentCondition) PERSISTENT;

datePaymentConditionContractDate 'Дата' (contract, date) =
    GROUP MAX datePaymentCondition(paymentCondition) AND datePaymentCondition(paymentCondition) <= (date AS DATE)
    BY contractPaymentCondition(paymentCondition), date;

paymentConditionContractDate 'Условия оплаты по договору на дату' (contract, date) =
    dataPaymentConditionContractDate(contract, datePaymentConditionContractDate(contract, date));

currentPaymentConditionContract 'Текущие условия оплаты по договору' (contract) =
    dataPaymentConditionContractDate(contract, datePaymentConditionContractDate(contract, currentDate()));

typePaymentCondition = DATA contractSkuType (paymentCondition);
nameTypePaymentCondition 'Тип договора' (paymentCondition) = name(typePaymentCondition(paymentCondition));
isSaleTypePaymentCondition(paymentCondition) = typePaymentCondition(paymentCondition) == contractSkuType.sale;

formPaymentCondition = DATA contractSkuForm (paymentCondition);
nameFormPaymentCondition 'Порядок оплаты' (paymentCondition) = name(formPaymentCondition(paymentCondition));
isPrepaymentFormPaymentCondition(paymentCondition) = formPaymentCondition(paymentCondition) == contractSkuForm.prepayment;

isSaleTypePrepaymentFormPaymentCondition(paymentCondition) = isSaleTypePaymentCondition(paymentCondition) AND isPrepaymentFormPaymentCondition(paymentCondition);

//для обратной совместимости

typeContractSkuDate(contract, date) = typePaymentCondition(paymentConditionContractDate(contract, date));
typeContractSku(contract) = typeContractSkuDate(contract, currentDate());
nameTypeContractSku 'Тип договора' (contract) = name(typeContractSku(contract));
formContractSkuDate(contract, date) = formPaymentCondition(paymentConditionContractDate(contract, date));
formContractSku(contract) = formContractSkuDate(contract, currentDate());
nameFormContractSku 'Условия оплаты' (contract) = name(formContractSku(contract));

CLASS paymentPeriod 'Период рассрочки';
TABLE paymentPeriod(paymentPeriod);

countDaysPaymentPeriod 'Кол-во дней' = DATA INTEGER (paymentPeriod);
percentPaymentPeriod 'Процент' = DATA NUMERIC[8,3] (paymentPeriod);
paymentConditionPaymentPeriod 'Условия оплаты периода рассрочки' = DATA paymentCondition (paymentPeriod);

CLASS bonusPeriod 'Период бонуса';
TABLE bonusPeriod(bonusPeriod);

countDaysBonusPeriod 'Кол-во дней' = DATA INTEGER (bonusPeriod);
percentBonusPeriod 'Процент' = DATA NUMERIC[8,3] (bonusPeriod);
paymentConditionBonusPeriod 'Условия оплаты периода бонуса' = DATA paymentCondition (bonusPeriod);

bonusPeriodPaymentConditionDays(paymentCondition, days) = GROUP UNIQUE bonusPeriod BY paymentConditionBonusPeriod(bonusPeriod),
                                                                                      countDaysBonusPeriod(bonusPeriod)
                                                                                   WHERE bonusPeriod IS bonusPeriod;

sumPercentPaymentCondition(paymentCondition) = GROUP SUM percentPaymentPeriod(paymentPeriod) BY paymentConditionPaymentPeriod(paymentPeriod);
CONSTRAINT sumPercentPaymentCondition(paymentCondition) != 100.0 CHECKED BY sumPercentPaymentCondition
    MESSAGE 'Сумма процентов рассрочки должна быть равна 100';

FORM paymentCondition 'Условия оплаты'

    OBJECTS pc = paymentCondition FIXED PANEL
    PROPERTIES(pc) datePaymentCondition, numberContractPaymentCondition, nameTypePaymentCondition, nameFormPaymentCondition

    OBJECTS pp = paymentPeriod
    PROPERTIES(pp) countDaysPaymentPeriod SHOWIF isSaleTypePrepaymentFormPaymentCondition(pc),
                   percentPaymentPeriod SHOWIF isSaleTypePrepaymentFormPaymentCondition(pc)
    PROPERTIES(pp) ADDOBJ SHOWIF isSaleTypePrepaymentFormPaymentCondition(pc),
                   delete SHOWIF isSaleTypePrepaymentFormPaymentCondition(pc)

    OBJECTS bp = bonusPeriod
    PROPERTIES(bp) countDaysBonusPeriod, percentBonusPeriod
    PROPERTIES(bp) ADDOBJ, delete

    FILTERS paymentConditionPaymentPeriod(pp) == pc,
            paymentConditionBonusPeriod(bp) == pc

    EDIT paymentCondition OBJECT pc
;

// Формы
FORM contractSku 'Договор на поставку товаров'
    OBJECTS c=contractSku FIXED PANEL
    PROPERTIES(c) namePartyAContract, namePartyBContract,
                  numberContract, dateFromContract, dateToContract,
                  nameCurrencyContract, noteContract

    OBJECTS pc = paymentCondition
    PROPERTIES(pc) READONLY datePaymentCondition, numberContractPaymentCondition, nameTypePaymentCondition,
                            nameFormPaymentCondition
    PROPERTIES(pc) ADDSESSIONFORM, EDITSESSIONFORM, delete
    ORDER BY datePaymentCondition

    FILTERS contractPaymentCondition(pc) == c

    EDIT userContractSku OBJECT c
;
addUserContractSku 'Добавить' = ACTION ADDFORM userContractSku;
editUserContractSku 'Редактировать' (userContractSku) = ACTION EDITFORM userContractSku;
isUserContractSku (contractSku) = TRUE IF contractSku IS userContractSku;

FORM contractSkus 'Договора на поставку'
    OBJECTS c=userContractSku
    PROPERTIES(c) READONLY namePartyAContract, namePartyBContract, numberContract, dateFromContract, dateToContract,
                           nameCurrencyContract, noteContract, nameTypeContractSku,
                           nameFormContractSku

    PROPERTIES() addUserContractSku TODRAW c
    PROPERTIES(c) editUserContractSku, delete SHOWIF isUserContractSku(c)
;

//// --------------------------------------- Договора между юрлицами ------------------------------------- //
//
//CLASS contractSkuCompany 'Договор на поставку между компаниями' : contractSku;
//
//companyAContractSkuCompany = DATA company (contractSkuCompany) AUTOSET;
//nameCompanyAContractSkuCompany 'Компания (поставщик)' (contract) = name(companyAContractSkuCompany(contract)) IN recognizeGroup MAXCHARWIDTH 30 PREFCHARWIDTH 30;
//partyAContract (contract) += companyAContractSkuCompany(contract);
//
//companyBContractSkuCompany = DATA company (contractSkuCompany) AUTOSET;
//nameCompanyBContractSkuCompany 'Компания (покупатель)' (contract) = name(companyBContractSkuCompany(contract)) IN recognizeGroup MAXCHARWIDTH 30 PREFCHARWIDTH 30;
//partyBContract (contract) += companyBContractSkuCompany(contract);
//
//@defineContractDefaultCustom(contractSkuCompany, company, company, companyA, companyB);
//
//// Формы
//FORM contractSkuCompany 'Договор'
//    OBJECTS c=contractSkuCompany FIXED PANEL
//    PROPERTIES(c) nameCompanyAContractSkuCompany, nameCompanyBContractSkuCompany,
//                  numberContract, dateFromContract, dateToContract,
//                  nameCurrencyContract, noteContract
//
//    OBJECTS pc = paymentCondition
//    PROPERTIES(pc) READONLY datePaymentCondition, numberContractPaymentCondition, nameTypePaymentCondition,
//                            nameFormPaymentCondition
//    PROPERTIES(pc) ADDSESSIONFORM, EDITSESSIONFORM, delete
//    ORDER BY datePaymentCondition
//
//    FILTERS contractPaymentCondition(pc) == c
//
//    EDIT contractSkuCompany OBJECT c
//;
//
//FORM contractsSkuCompany 'Договора'
//    OBJECTS c=contractSkuCompany
//    PROPERTIES(c) READONLY numberContract, dateFromContract, dateToContract,
//                           nameCompanyAContractSkuCompany, nameCompanyBContractSkuCompany, nameTypeContractSku
//
//    PROPERTIES(c) ADDFORM, EDITFORM, delete
//    ORDER BY dateFromContract
//
//    DIALOG contractSkuCompany OBJECT c
//;
//
//EXTEND FORM company
//
//    OBJECTS cb=company
//    PROPERTIES(cb) name
//    PROPERTIES(co, cb)    numberContractSkuCompanyCompanyCompany
//
//    OBJECTS cc=contractSkuCompany
//    PROPERTIES(cc)  READONLY numberContract, dateFromContract, dateToContract,
//                            nameTypeContractSku, nameFormContractSku,
//                            nameCurrencyContract, noteContract
//    PROPERTIES(co, cb, cc) isCompanyCompanyContractSkuCompany
//    PROPERTIES(cc)  ADDFORM, EDITFORM, delete
//    FILTERS companyAContractSkuCompany(cc) == co,
//            companyBContractSkuCompany(cc) == cb
//;
//
//EXTEND DESIGN company {
//    extendContainer {
//        NEW companyContractSku {
//            title = 'Договора между компаниями';
//            type = SPLITH;
//            childConstraints = TO THE RIGHT;
//
//            ADD cb.box;
//            ADD cc.box {
//                fillHorizontal = 2;
//            }
//        }
//    }
//}