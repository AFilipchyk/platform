MODULE Contract;

REQUIRE System, Historizable, LegalEntity;

// ---------------------------------------- Договора ------------------------------------ //

CLASS ABSTRACT contract 'Договор';
TABLE contract (contract);
TABLE contractDate (contract, DATE);

GROUP contractGroup 'Реквизиты' : recognizeGroup;

numberContract 'Номер договора' = DATA STRING[30] (contract) IN contractGroup;
dateFromContract 'Дата начала договора' = DATA DATE (contract) IN contractGroup;
dateToContract 'Дата окончания договора' = DATA DATE (contract) IN contractGroup;
activeContract 'Действуюший' (contract, date) =
//    (dateFromContract(contract) < (date AS DATE)) AND (dateToContract(contract) > (date AS DATE));
    (dateFromContract(contract) <= (date AS DATE)) AND NOT (dateToContract(contract) < (date AS DATE));


GROUP partyGroup 'Контрагенты' : recognizeGroup;

partyAContract = ABSTRACT legalEntity (contract) PERSISTENT INDEXED;
namePartyAContract 'Сторона 1' (contract) = name(partyAContract(contract)) IN partyGroup;

partyBContract = ABSTRACT legalEntity (contract) PERSISTENT INDEXED;
namePartyBContract 'Сторона 2' (contract) = name(partyBContract(contract)) IN partyGroup;

countContractPartyAPartyB 'Кол-во договоров' (partyA, partyB) =
    GROUP SUM 1 IF partyAContract(contract) == partyA AND partyBContract(contract) == partyB BY partyA, partyB;

GROUP attributeGroup 'Атрибуты' : publicGroup;

currencyContract = DATA currency (contract);
nameCurrencyContract 'Валюта взаиморасчетов' (contract) = name(currencyContract(contract)) IN attributeGroup;
shortNameCurrencyContract 'Валюта взаиморасчетов' (contract) = shortNameCurrency(currencyContract(contract)) IN attributeGroup;
symbolCurrencyContract 'Символ' (contract) = symbolCurrency(currencyContract(contract)) IN attributeGroup;

noteContract 'Примечание' = DATA TEXT (contract) MINCHARWIDTH 50 PREFCHARWIDTH 50 IN attributeGroup;

// ------------------------------------ Макрос для создания договоров по умолчанию ----------------------------- //

META defineContractDefault (contract, partyA, partyB)
    @defineContractDefaultCustom(contract, partyA, partyB, partyA, partyB);
END

META defineContractDefaultCustom (contract, partyA, partyB, prefixA, prefixB)
    data###contract###partyA###partyB = DATA contract (partyA, partyB);

    CONSTRAINT partyA != prefixA###contract(data###contract###partyA###partyB(partyA, partyB)) CHECKED BY data###contract###partyA###partyB
        MESSAGE 'Договор по умолчанию не является договором между выбранными контрагентами';
    CONSTRAINT partyB != prefixB###contract(data###contract###partyA###partyB(partyA, partyB)) CHECKED BY data###contract###partyA###partyB
        MESSAGE 'Договор по умолчанию не является договором между выбранными контрагентами';

    contract###partyA###partyB (pA, pB) = [GROUP MAX contract IF dateFromContract(contract) <= currentDate() AND NOT dateToContract(contract) < currentDate()
                                                         BY prefixA###contract(contract), prefixB###contract(contract)](pA, pB) OR
                                                  data###contract###partyA###partyB(pA, pB);
    number###contract###partyA###partyB 'Основной договор' (pA, pB) = numberContract(contract###partyA###partyB(pA, pB));

    single###contract###partyA###partyB (pA, pB) = contract###partyA###partyB(pA, pB) IF countContractPartyAPartyB(pA, pB);

    is###partyA###partyB###contract 'Основной' (pA, pB, contract) = contract###partyA###partyB (pA, pB) == contract;
END

META defineDocumentContract (concrete, contractType, singleContractProp, partyAProp, partyBProp, partyAMessage, partyBMessage)
    contractType###concrete = DATA contractType (concrete);
    number###contractType###concrete 'Номер договора' (object) = numberContract(contractType###concrete(object)) IN documentPrmGroup;

    contractType###concrete(object) <- singleContractProp(partyAProp(object), partyBProp(object))
                                          WHEN CHANGED(partyAProp(object)) OR CHANGED(partyBProp(object));

    CONSTRAINT contractType###concrete(saleOut) AND NOT partyAProp(saleOut) == companyAContractSkuCompany(contractType###concrete(saleOut))
        CHECKED BY contractType###concrete MESSAGE partyAMessage;

    CONSTRAINT contractType###concrete(saleOut) AND NOT partyBProp(saleOut) == companyBContractSkuCompany(contractType###concrete(saleOut))
        CHECKED BY contractType###concrete MESSAGE partyBMessage;

    isCommission###concrete 'Продажа на комиссию' (object) = typeContractSkuDate(contractType###concrete(object), date###concrete(object)) == contractSkuType.commission;
END

// Формы
FORM contract 'Договор'
    OBJECTS c=contract FIXED PANEL
    PROPERTIES(c) namePartyAContract, namePartyBContract,
                  numberContract, dateFromContract, dateToContract,
                  nameCurrencyContract, noteContract

    EDIT contract OBJECT c
;

// ------------------------------------ Договора на перемещение товаров ---------------- //

CLASS ABSTRACT contractSku 'Договор на поставку' : contract;

GROUP paymentGroup 'Взаиморасчеты' : publicGroup;

CLASS STATIC contractSkuType 'Тип договора на поставку' {
    sale 'Договор купли-продажи',
    commission 'Договор комиссии'
}
@defineHistorizableCustom(typeContractSku, 'Тип договора', contractSkuType, name, contract, numberContract, paymentGroup);

CLASS STATIC contractSkuForm 'Порядок оплаты договора на поставку' {
    prepayment 'С отсрочкой платежа',
    implement 'По факту реализации',
    requirement 'Платежное требование'
}
@defineHistorizableCustom(formContractSku, 'Порядок оплаты', contractSkuForm, name, contract, numberContract, paymentGroup);

@defineHistorizable(delayContractSku, 'Отсрочка платежа (календ. дней)', INTEGER, contract, numberContract, paymentGroup);

// Формы
FORM contractSku 'Договор на поставку товаров'
    OBJECTS c=contract FIXED PANEL
    PROPERTIES(c) namePartyAContract, namePartyBContract,
                  numberContract, dateFromContract, dateToContract,
                  nameCurrencyContract, noteContract,
                  nameTypeContractSku ON CHANGE EXEC dialogTypeContractSku(c),
                  nameFormContractSku ON CHANGE EXEC dialogFormContractSku(c),
                  delayContractSku ON CHANGE EXEC dialogDelayContractSku(c)

    EDIT contract OBJECT c
;

// --------------------------------------- Договора между юрлицами ------------------------------------- //

CLASS contractSkuCompany 'Договор на поставку между компаниями' : contractSku;

companyAContractSkuCompany = DATA company (contractSkuCompany) AUTOSET;
nameCompanyAContractSkuCompany 'Компания (поставщик)' (contract) = name(companyAContractSkuCompany(contract)) IN recognizeGroup MAXCHARWIDTH 30 PREFCHARWIDTH 30;
partyAContract (contract) += companyAContractSkuCompany(contract);

companyBContractSkuCompany = DATA company (contractSkuCompany) AUTOSET;
nameCompanyBContractSkuCompany 'Компания (покупатель)' (contract) = name(companyBContractSkuCompany(contract)) IN recognizeGroup MAXCHARWIDTH 30 PREFCHARWIDTH 30;
partyBContract (contract) += companyBContractSkuCompany(contract);

@defineContractDefaultCustom(contractSkuCompany, company, company, companyA, companyB);

// Формы
FORM contractSkuCompany 'Договор'
    OBJECTS c=contractSkuCompany FIXED PANEL
    PROPERTIES(c) nameCompanyAContractSkuCompany, nameCompanyBContractSkuCompany,
                  numberContract, dateFromContract, dateToContract,
                  nameCurrencyContract, noteContract,
                  nameTypeContractSku ON CHANGE EXEC dialogTypeContractSku(c),
                  nameFormContractSku ON CHANGE EXEC dialogFormContractSku(c),
                  delayContractSku ON CHANGE EXEC dialogDelayContractSku(c)

    EDIT contractSkuCompany OBJECT c
;

FORM contractsSkuCompany 'Договора'
    OBJECTS c=contractSkuCompany
    PROPERTIES(c) READONLY numberContract, dateFromContract, dateToContract,
                           nameCompanyAContractSkuCompany, nameCompanyBContractSkuCompany, nameTypeContractSku

    PROPERTIES(c) ADDFORM, EDITFORM, delete
    ORDER BY dateFromContract

    DIALOG contractSkuCompany OBJECT c
;

EXTEND FORM company

    OBJECTS cb=company
    PROPERTIES(cb) name
    PROPERTIES(co, cb)    numberContractSkuCompanyCompanyCompany

    OBJECTS cc=contractSkuCompany
    PROPERTIES(cc)  READONLY numberContract, dateFromContract, dateToContract,
                            nameTypeContractSku, nameFormContractSku, delayContractSku,
                            nameCurrencyContract, noteContract
    PROPERTIES(co, cb, cc) isCompanyCompanyContractSkuCompany
    PROPERTIES(cc)  ADDFORM, EDITFORM, delete
    FILTERS companyAContractSkuCompany(cc) == co,
            companyBContractSkuCompany(cc) == cb
;

EXTEND DESIGN company {
    extendContainer {
        NEW companyContractSku {
            title = 'Договора между компаниями';
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            ADD cb.box;
            ADD cc.box {
                fillHorizontal = 2;
            }
        }
    }
}