MODULE Label;

REQUIRE System, Store, Stock, Barcode, Machinery; // на Machinery пока нужна ссылка только для PriceTransactionDocument

// Ориентация страницы
CLASS STATIC printOrientation 'Ориентация' {
    portrait 'Книжная',
    landscape 'Альбомная'
}

// типы ценников
CLASS labelType 'Тип ценника' : named;
TABLE labelType(labelType);

widthLabelType 'Ширина' = DATA INTEGER (labelType);
heightLabelType 'Высота' = DATA INTEGER (labelType);

orientationLabelType = DATA printOrientation (labelType);
nameOrientationLabelType 'Ориентация' (labelType) = name(orientationLabelType(labelType));

fileTemplateLabelType 'Файл шаблона' = DATA STRING[200] (labelType);

TABLE labelTypeDepartmentStore (labelType, departmentStore);
inLabelTypeDepartmentStore 'Включен' (labelType, departmentStore) = DATA BOOLEAN (labelType, departmentStore);

defaultLabelTypeDepartmentStore = DATA labelType (departmentStore);
isDefaultLabelTypeDepartmentStore 'По умолчанию' (labelType, departmentStore) = defaultLabelTypeDepartmentStore(departmentStore) == labelType;

FORM labelType 'Тип ценника'
    OBJECTS l = labelType FIXED PANEL
    PROPERTIES(l) name, widthLabelType, heightLabelType, nameOrientationLabelType, fileTemplateLabelType

    TREE treeStore a=STRING[3], t=chainStores, st=storeType, s=store
    PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS stringEqualsAll(a), inChainStoresStoreType (t, st), inStoreTypeStore(st, s)

    OBJECTS d=departmentStore
    PROPERTIES(d) READONLY depName = name
    FILTERS inChainStoresStoreTypeStoreDepartment(t, st, s, d)
    ORDER BY depName

    PROPERTIES inLabelTypeDepartmentStore(l, d), isDefaultLabelTypeDepartmentStore(l, d)

    EDIT labelType OBJECT l
;

DESIGN labelType FROM DEFAULT {
    POSITION treeStore.tree.box TO THE LEFT d.box;
    treeStore.tree {
        fillHorizontal = 0.3;
    }
}

FORM labelTypes 'Типы ценников'
    OBJECTS l = labelType
    PROPERTIES(l) READONLY name, widthLabelType, heightLabelType, nameOrientationLabelType, fileTemplateLabelType
    PROPERTIES(l)          ADDFORM, EDITFORM, delete
;

//----------------------------------- Печать ценников -------------------------------------------------------

CLASS labelTransaction 'Печать ценников' : historyObject;
TABLE labelTransaction(labelTransaction);

dateLabelTransaction 'Дата' = DATA DATE (labelTransaction);
dateLabelTransaction (transaction) <- currentDate() WHEN ASSIGNED(transaction IS labelTransaction);

timeLabelTransaction 'Время' = DATA TIME (labelTransaction);
timeLabelTransaction (transaction) <- currentTime() WHEN ASSIGNED(transaction IS labelTransaction);

departmentStoreLabelTransaction = DATA departmentStore (labelTransaction);
nameDepartmentStoreLabelTransaction 'Отдел магазина' (transaction) = name(departmentStoreLabelTransaction(transaction));
nameStoreLabelTransaction 'Магазин' (transaction) = name(storeDepartmentStore(departmentStoreLabelTransaction(transaction)));
nameCompanyLabelTransaction 'Компания' (transaction) = nameCompanyDepartmentStore(departmentStoreLabelTransaction(transaction));

labelTypeLabelTransaction = DATA labelType (labelTransaction);
nameLabelTypeLabelTransaction 'Тип ценника' (transaction) = name(labelTypeLabelTransaction(transaction));

CONSTRAINT labelTypeLabelTransaction(transaction) AND NOT inLabelTypeDepartmentStore(labelTypeLabelTransaction(transaction), departmentStoreLabelTransaction(transaction))
           CHECKED BY labelTypeLabelTransaction MESSAGE 'Тип ценника запрещен для выбранного подразделения';

fileTemplateLabelTransaction 'Файл шаблона' (transaction) = fileTemplateLabelType(labelTypeLabelTransaction(transaction));

printedPriceTransactionDocument 'Распечатан' = DATA BOOLEAN (priceTransactionDocument);
printedPriceTransactionDocument(document) <- NULL WHEN ASSIGNED(isDraftPriceTransactionDocument(document));

priceTransactionDocumentLabelTransaction = DATA priceTransactionDocument (labelTransaction);
descriptionLabelTransaction 'Основание загрузки' (transaction) =
    descriptionPriceTransactionDocument(priceTransactionDocumentLabelTransaction(transaction));

statusLabelPriceTransactionDocument 'Статус печати ценника' (document) =
    IF printedPriceTransactionDocument(document) THEN 'Распечатан' AND document IS priceTransactionDocument
                                                 ELSE 'Не распечатан' AND document IS priceTransactionDocument;

TABLE labelTransactionBarcode(labelTransaction, barcode);

inLabelTransactionBarcode 'Вкл' (labelTransaction, barcode) = DATA BOOLEAN (labelTransaction, barcode);

quantityLabelTransactionBarcode 'Кол-во' (labelTransaction, barcode) = DATA INTEGER (labelTransaction, barcode);
nameLabelTransactionBarcode 'Наименование' = DATA STRING[255] (labelTransaction, barcode);
priceLabelTransactionBarcode 'Цена' = DATA NUMERIC[14,2] (labelTransaction, barcode);

FORM printLabelTransaction 'Печать ценников' PRINT
    OBJECTS l = labelTransaction REPORTFILE fileTemplateLabelTransaction(l) FIXED PANEL
    PROPERTIES(l) READONLY nameLabelTypeLabelTransaction, nameDepartmentStoreLabelTransaction, descriptionLabelTransaction,
                  dateLabelTransaction, timeLabelTransaction, nameStoreLabelTransaction, nameCompanyLabelTransaction

    OBJECTS b = barcode
    PROPERTIES(l, b) READONLY inLabelTransactionBarcode
    PROPERTIES(b)    READONLY idBarcode
    PROPERTIES(l, b) READONLY quantityLabelTransactionBarcode, nameLabelTransactionBarcode, priceLabelTransactionBarcode
    FILTERS inLabelTransactionBarcode(l, b)
;

FORM customLabelTransaction 'Печать ценников'
    OBJECTS l = labelTransaction FIXED PANEL
    PROPERTIES(l) nameLabelTypeLabelTransaction, nameDepartmentStoreLabelTransaction, descriptionLabelTransaction, dateLabelTransaction, timeLabelTransaction,
                  nameStoreLabelTransaction, nameCompanyLabelTransaction

    OBJECTS b = barcode
    PROPERTIES(l, b)          inLabelTransactionBarcode
    PROPERTIES(b)    READONLY idBarcode
    PROPERTIES(l, b)          quantityLabelTransactionBarcode, nameLabelTransactionBarcode, priceLabelTransactionBarcode
    FILTERS inLabelTransactionBarcode(l, b)
;

FORM labelTransactions 'Печать ценников'
    OBJECTS d = departmentStore FIXED PANEL
    PROPERTIES name(d) SELECTOR

    OBJECTS l = labelTransaction
    PROPERTIES(l) READONLY nameLabelTypeLabelTransaction, descriptionLabelTransaction, dateLabelTransaction, timeLabelTransaction
    PROPERTIES(l) READONLY nameUserCreated, hostnameComputerCreated
    FILTERS departmentStoreLabelTransaction(l) == d

    OBJECTS b = barcode
    PROPERTIES(l, b) READONLY inLabelTransactionBarcode
    PROPERTIES(b)    READONLY idBarcode
    PROPERTIES(l, b) READONLY quantityLabelTransactionBarcode, nameLabelTransactionBarcode, priceLabelTransactionBarcode
    FILTERS inLabelTransactionBarcode(l, b)
;

DESIGN labelTransactions FROM DEFAULT {
    NEW topContainer{
        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD l.box;
        ADD b.box;
    }
    ADD functions.box;
}

// -------------------------------------------- Действия по печати ценников ------------------------------ //

priceLabelBarcodeDepartmentStore = ABSTRACT NUMERIC[14,2] (barcode, departmentStore);
labelTypeBarcodeDepartmentStoreDate = ABSTRACT labelType (barcode, departmentStore, DATE);
countLabelBarcodeDepartmentStoreDate = ABSTRACT INTEGER (barcode, departmentStore, DATE);

createLabelTransactionSku = SESSION DATA BOOLEAN (sku);
createLabelTransactionDocument = SESSION DATA priceTransactionDocument();
createLabelTransactionSnapshot = SESSION DATA BOOLEAN();

createAttributeLabelTransaction = ABSTRACT ACTION (labelTransaction);

createLabelTransactionFillParams 'Заполнить параметры' = ACTION (labelTransaction, departmentStore) {
    SET departmentStoreLabelTransaction(labelTransaction) <- departmentStore;
    SET priceTransactionDocumentLabelTransaction(labelTransaction) <- createLabelTransactionDocument();

    SET nameLabelTransactionBarcode(labelTransaction, barcode) <- nameSkuBarcode(barcode) WHERE inLabelTransactionBarcode(labelTransaction, barcode);
    SET priceLabelTransactionBarcode(labelTransaction, barcode) <- priceLabelBarcodeDepartmentStore(barcode, departmentStore) WHERE inLabelTransactionBarcode(labelTransaction, barcode);

    EXEC createAttributeLabelTransaction(labelTransaction);
}

createLabelTransaction 'Распечатать ценники' = ACTION (departmentStore, date) {

    LOCAL inBarcode = BOOLEAN (barcode);
    SET inBarcode(barcode) <- createLabelTransactionSku(skuBarcode(barcode)) // если передали параметром
                                                         AND activeBarcode(barcode) // если активный штрих-код
                                                         AND priceLabelBarcodeDepartmentStore(barcode, departmentStore);

    IF createLabelTransactionSnapshot() THEN {
        ADDOBJ labelTransaction;
        FOR t == addedObject() DO {
            SET inLabelTransactionBarcode(t, barcode) <- inBarcode(barcode);
            SET quantityLabelTransactionBarcode(t, barcode) AND inLabelTransactionBarcode(t, barcode) <- 1;
            EXEC createLabelTransactionFillParams(t, departmentStore);
            FORM customLabelTransaction OBJECTS l = t AS labelTransaction MODAL;
            IF formResult() == formResult.ok THEN {
                FORM printLabelTransaction OBJECTS l = t AS labelTransaction;
            }
        }
    } ELSE {
        // бежим по всем типам ценников из управленческих параметров
        FOR ([GROUP SUM 1 AND inBarcode(barcode) BY labelTypeBarcodeDepartmentStoreDate(barcode, departmentStore, date), departmentStore, date](l, departmentStore, date)) DO {
            // для каждого создаем по операции печати ценников
            ADDOBJ labelTransaction;
            FOR t == addedObject() DO {
                SET inLabelTransactionBarcode(t, barcode) <- inBarcode(barcode) AND labelTypeBarcodeDepartmentStoreDate(barcode, departmentStore, date) == l;
                SET quantityLabelTransactionBarcode(t, barcode) AND inLabelTransactionBarcode(t, barcode) <- countLabelBarcodeDepartmentStoreDate(barcode, departmentStore, date);
                SET labelTypeLabelTransaction(t) <- l;
                EXEC createLabelTransactionFillParams(t, departmentStore);
                // вызываем печатную форму для каждого из них
                FORM printLabelTransaction OBJECTS l = t AS labelTransaction;
            }
        }
    }
}

// -------------------------------- Добавление новых атрибутов -------------------------- //
META defineLabelTransactionAttributeAction(object, barcodeProp)
    createAttributeLabelTransaction(labelTransaction) +=
        ACTION SET object##LabelTransactionBarcode(labelTransaction, barcode) <- barcodeProp##Barcode(barcode) WHERE inLabelTransactionBarcode(labelTransaction, barcode);

    EXTEND FORM printLabelTransaction PROPERTIES(l, b) READONLY object##LabelTransactionBarcode;
    EXTEND FORM customLabelTransaction PROPERTIES(l, b) object##LabelTransactionBarcode;
    EXTEND FORM labelTransactions PROPERTIES(l, b) READONLY object##LabelTransactionBarcode;
END

META defineLabelTransactionAttribute(object, caption, type, barcodeProp)
    object##LabelTransactionBarcode caption  = DATA type (labelTransaction, barcode);
    @defineLabelTransactionAttributeAction(object, barcodeProp);
END

// ---------- Атрибуты по умолчанию ------ //

@defineLabelTransactionAttribute(shortNameUOM, 'Ед. изм.', STRING[5], shortNameUOM);

// ------------------------- Подключение печати ценников в документ --------------------- //
META defineDocumentLabelTransaction (document, skuProp, stockProp)
    create###document##LabelTransaction 'Печать ценников' = ACTION (document) NEWSESSION AUTOAPPLY {
        SET createLabelTransactionSku(skuProp) <- TRUE IF quantity###document##Detail###skuProp###document(skuProp, document);
        SET createLabelTransactionDocument() <- document;
        EXEC createLabelTransaction(stockProp###document(document), date###document(document));
        SET printedPriceTransactionDocument(document) <- TRUE;
    } TOOLBAR CONFIRM;

    createSnapshot###document##LabelTransaction 'Перепечатать ценники' = ACTION (document) NEWSESSION AUTOAPPLY {
        SET createLabelTransactionSku(skuProp) <- TRUE IF quantity###document##Detail###skuProp###document(skuProp, document);
        SET createLabelTransactionDocument() <- document AS priceTransactionDocument;
        SET createLabelTransactionSnapshot() <- TRUE;
        EXEC createLabelTransaction(stockProp###document(document), date###document(document));
    } SHORTCUT statusLabelPriceTransactionDocument CONFIRM;

    showPrintLabelTransaction###document 'Показывать' (document) = isPosted###document(document) AND NOT printedPriceTransactionDocument(document);
    backgroundPrintLabelTransaction###document 'Цвет' (document) = RGB(212,255,212) IF showPrintLabelTransaction###document(document);
END

META extendFormDocumentLabelTransaction(form, object, document)
    EXTEND FORM form
        PROPERTIES(object) statusLabelPriceTransactionDocument BACKGROUND backgroundPrintLabelTransaction###document(object) READONLY,
                           create###document##LabelTransaction FORCE PANEL SHOWIF showPrintLabelTransaction###document(object),
                           createSnapshot###document##LabelTransaction SHOWIF isPosted###document(object)
    ;
END

// ---------------------------------------------------------- Стандартные значения --------------------------------- //

loadDefaultLabelType 'Добавить тип ценника' = ACTION(name, width, height, orientation, file, byDefault) {
    ADDOBJ labelType;
    FOR lt ==  addedObject() DO {
        SET name(lt) <- name AS STRING[110];
        SET widthLabelType(lt) <-width AS INTEGER;
        SET heightLabelType(lt) <-height AS INTEGER;
        SET orientationLabelType(lt) <- orientation;
        SET fileTemplateLabelType(lt) <-file AS STRING[200];

        FOR storeDepartmentStore(departmentStore) != 0 DO {
            SET inLabelTypeDepartmentStore(lt, departmentStore) <- TRUE;
            IF byDefault == TRUE THEN {
                SET isDefaultLabelTypeDepartmentStore(lt, departmentStore) <- TRUE;
            }
        }
    }
}

loadDefaultLabelTypes 'Загрузить стандартные ценники' = ACTION() {
    EXEC loadDefaultLabelType('Ценник 200x130', 200, 130, printOrientation.portrait, 'Label_printLabelTransaction_l.jrxml', TRUE);
    EXEC loadDefaultLabelType('Ценник 595x480', 595, 480, printOrientation.portrait, 'Label_printLabelTransaction_l_a4.jrxml', 0);
} IN loadDefaultGroup;

@implementLoadDefaultData(loadDefaultLabelTypes);

NAVIGATOR {
    machineryNavigator {
        NEW labelNavigator 'Ценники' {
            ADD labelTransactions;
            ADD labelTypes;
        }
    }
}