MODULE Item;

REQUIRE System, Stock, Hierarchy, RetailCRM, Barcode, PriceList;

// ------------------------------------ Классификатор товаров --------------------------- //

CLASS itemGroup 'Товарная группа' : named, externalObject, skuGroup, priceGroup;

@defineHierarchy(itemGroup);

parentSkuGroup (itemGroup) += parentItemGroup(itemGroup);

// ------------------ Формы  --------------------- //

FORM itemGroup 'Товарная группа'
    OBJECTS g=itemGroup FIXED PANEL
    PROPERTIES(g) name, nameParentItemGroup
    EDIT itemGroup OBJECT g
;

FORM itemGroups 'Товарные группы'
    TREE treeGroups tg=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(tg)
    ORDER BY name

    OBJECTS g=itemGroup
    PROPERTIES(g) READONLY canonicalNameItemGroup, extSID, delete
    PROPERTIES(g)          ADDFORM, EDITFORM
    ORDER BY canonicalNameItemGroup

    FILTERGROUP filters
        FILTER 'Все листья' 'F10' isParentLeafItemGroupItemGroup(g, tg) DEFAULT
        FILTER 'Всех потомков' 'F9' isParentItemGroupItemGroup(g, tg)
        FILTER 'Только непосредственных потомков' 'F8' parentItemGroup(g) == tg

    DIALOG itemGroup OBJECT g
;

DESIGN itemGroups FROM DEFAULT {
    NEW rootContainer BEFORE functions.box{
        childConstraints = TO THE RIGHT;
        type = SPLITH;

        ADD treeGroups.tree.box ;

        ADD g.box {
            fillHorizontal = 4;
            PROPERTY(extSID) {
                maximumCharWidth = 7;
            }
        }
    }
}


// ----------------------------------- Товары ----------------------------------- //

CLASS item 'Товар' : sku, externalObject;
TABLE item(item);

TABLE itemDate (item, DATE);

// Связь с группой товаров
itemGroupItem = DATA itemGroup(item) IN idGroup AUTOSET;
skuGroupSku(item) += itemGroupItem(item);
//roundSkuGroupSkuSku(item) += itemGroupItem(item);

nameItemGroupItem 'Группа товара' (item) = name(itemGroupItem(item));
canonicalNameItemGroupItem 'Группа товара' (item) = canonicalNameItemGroup(itemGroupItem(item)) IN baseGroup;

TABLE itemGroupItem (itemGroup, item);

isParentItemGroupItem (itemGroup, item) = isParentItemGroupItemGroup(itemGroupItem(item), itemGroup) PERSISTENT;

// Атрибуты
imageItem 'Изображение' = DATA IMAGEFILE (item);
loadImageItem 'Загрузить изображение' (item) = ACTION LOADFILE imageItem(item);

// --------------------------- Ценовые группы -------------------------------------//

parentPriceGroup(priceGroup) += parentItemGroup(priceGroup);
priceGroupSku(sku) += itemGroupItem(sku);

// ------------------------------------ Формы -------------------------- //
FORM item 'Товар'

    OBJECTS i=item FIXED PANEL

    PROPERTIES(i) canonicalNameItemGroupItem, idBarcodeSku READONLY,
                  imageItem, loadImageItem

    OBJECTS b=barcode
    PROPERTIES(b)       idBarcode, dateBarcode, shortNameUOMBarcode,
                        amountBarcode, activeBarcode, primaryBarcode
    PROPERTIES(i)       generateBarcodeSku TODRAW b FORCE PANEL
    PROPERTIES(b)       ADDOBJ, delete
    FILTERS skuBarcode(b) == i

    EDIT item OBJECT i
;

DESIGN item FROM DEFAULT {
    main {
        NEW itemHeader BEFORE functions.box {
            childConstraints = TO THE RIGHT;
            NEW itemHeaderColumn1 {
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(canonicalNameItemGroupItem);
                ADD PROPERTY(idBarcodeSku);
            }
            NEW itemHeaderColumn2 {
                childConstraints = TO THE BOTTOM;
            }
        }
        NEW itemDetail BEFORE functions.box {
            type = TABBED;
            NEW itemPrimary {
                childConstraints = TO THE BOTTOM;
                title = 'Основные данные';
                fillVertical = 1.0;
                fillHorizontal = 1.0;

                NEW itemPrimaryRow1 {
                    childConstraints = TO THE RIGHT;
                    NEW itemPrimaryColumn1 {
                        childConstraints = TO THE BOTTOM;
                    }
                    NEW itemPrimaryColumn2 {
                        childConstraints = TO THE BOTTOM;
                    }
                }
                ADD b.box;
            }
            NEW itemImage {
                title = 'Изображение';
                ADD PROPERTY(imageItem);
                PROPERTY(imageItem) {
                    caption = '';
                    fillVertical = 1.0;
                    fillHorizontal = 1.0;
                }
                ADD PROPERTY(loadImageItem);
            }
       }
    }
}

editFormSku(sku) += [ACTION EDITFORM item](sku);

FORM items 'Товары'
    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS i=item
    PROPERTIES(i) READONLY idBarcodeSku
    PROPERTIES(i) ADDFORM, EDITFORM, delete

    DIALOG item OBJECT i
;

DESIGN items FROM DEFAULT {
    NEW rootContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;
            ADD treeGroup.tree.box;
            ADD i.box {
                defaultComponent = TRUE;
                fillHorizontal = 4;
            }
    }
    ADD functions.box;
}

// ----------------------------------- Атрибуты товаров ------------------------------------------ //

CLASS ABSTRACT itemAttribute 'Атрибут товара' : named;
TABLE itemAttribute(itemAttribute);
TABLE itemItemAttribute(item, itemAttribute);

// Отображение
META defineItemAttribute (attribute, caption, group)
    show###attribute##ItemGroup caption (itemGroup) = DATA BOOLEAN (itemGroup) IN group;
    show###attribute##ItemGroup(itemGroup) <- TRUE WHEN ASSIGNED(itemGroup IS itemGroup);

    show###attribute##Item caption (item) = show###attribute##ItemGroup(itemGroupItem(item));
END

// Объявление
valueItemAttribute = ABSTRACT STRING[100] (item, itemAttribute) EXCLUSIVE PERSISTENT;

META implementItemAttribute(attribute, caption, itemType, attributeClass)
    EXTEND CLASS itemType##ItemAttribute { attributeClass caption }
    value###attribute##ItemAttribute(item, attribute) = attribute##Item(item) AND attribute == itemType##ItemAttribute.##attributeClass;
    value###itemType##ItemAttribute(item, attribute) += value###attribute##ItemAttribute(item, attribute);
END

META defineItemAttribute(attribute, formProperty, caption, group, itemType, attributeClass)
    @defineItemAttribute(attribute, caption, group);

    EXTEND FORM itemGroup PROPERTIES(g) show###attribute##ItemGroup;
    EXTEND FORM itemGroups PROPERTIES(g) BEFORE delete show###attribute##ItemGroup;
    EXTEND FORM item PROPERTIES(i) formProperty SHOWIF show###attribute##Item(i);
    EXTEND FORM items PROPERTIES(i) READONLY BEFORE delete formProperty SHOWIF show###attribute##ItemGroup(g);

    @implementItemAttribute(attribute, caption, itemType, attributeClass);
END

// Примитивный тип
META definePrimitiveItemAttribute(attribute, type, caption, group, itemType)
    attribute##Item caption = DATA type (item) IN group;
    @defineItemAttribute(attribute, attribute##Item, caption, group, itemType, item###attribute);
END

// Расширяем формы настройки
EXTEND FORM options
    OBJECTS ia = itemAttribute
    PROPERTIES(ia) name
;

EXTEND DESIGN options {
    pane {
        NEW itemTab {
            caption = 'Товары';
            ADD ia.box;
        }
    }
}

// -------------------------------------------- Формирование наименования ----------------------------------- //

prefixInNameItemAttribute 'Префикс' = DATA STRING[20] (itemAttribute);
postfixInNameItemAttribute 'Постфикс' = DATA STRING[20] (itemAttribute);

EXTEND FORM options PROPERTIES(ia) prefixInNameItemAttribute, postfixInNameItemAttribute;

META defineItemAttributeName (prefix, caption, group)
    numberInName###prefix##ItemAttribute 'Порядковый номер в наименовании'##caption = DATA INTEGER (itemAttribute) IN baseGroup;
    EXTEND FORM options PROPERTIES(ia) numberInName###prefix##ItemAttribute;

    name###prefix##AttributeItem 'Наименование'###caption (item) = castToString255(
                    [GROUP CONCAT ustring3(prefixInNameItemAttribute(attribute) AND item IS item, valueItemAttribute(item, attribute), postfixInNameItemAttribute(attribute) AND item IS item)
                                  IF numberInName###prefix##ItemAttribute(attribute) AND valueItemAttribute(item, attribute), ' ' BY item ORDER numberInName###prefix##ItemAttribute(attribute)](item))
                    IN group PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 80 INDEXED AGGPROP;
    EXTEND FORM item PROPERTIES(i) READONLY name###prefix##AttributeItem;
    EXTEND DESIGN item { itemHeaderColumn2 {ADD PROPERTY(name###prefix##AttributeItem); } }
END

// -------------------------------------- Типы атрибутов ------------------------------- //

// Строка
CLASS STATIC stringItemAttribute 'Строковый атрибут' : itemAttribute;

valueStringItemAttribute = ABSTRACT STRING[100] (item, itemAttribute) EXCLUSIVE PERSISTENT;
valueItemAttribute(item, attribute) += valueStringItemAttribute(item, attribute);

META defineStringItemAttribute(attribute, type, caption, group)
    @definePrimitiveItemAttribute(attribute, type, caption, group, string);
END

// Целое число
CLASS STATIC integerItemAttribute 'Целочисленный атрибут' : itemAttribute;

valueIntegerItemAttribute = ABSTRACT INTEGER (item, itemAttribute) EXCLUSIVE PERSISTENT;
stringIntegerItemAttribute(item, attribute) = castToString255(valueIntegerItemAttribute(item, attribute));
valueItemAttribute(item, attribute) += stringIntegerItemAttribute(item, attribute);

META defineIntegerItemAttribute(attribute, caption, group)
    @definePrimitiveItemAttribute(attribute, INTEGER, caption, group, integer);
END

// Дробное число
CLASS STATIC doubleItemAttribute 'Дробный атрибут' : itemAttribute;

valueDoubleItemAttribute = ABSTRACT DOUBLE (item, itemAttribute) EXCLUSIVE PERSISTENT;
stringDoubleItemAttribute(item, attribute) = castToString255(valueDoubleItemAttribute(item, attribute));
valueItemAttribute(item, attribute) += stringDoubleItemAttribute(item, attribute);

META defineDoubleItemAttribute(attribute, type, caption, group)
    @definePrimitiveItemAttribute(attribute, type, caption, group, double);
END

// Объектный атрибут
CLASS STATIC objectItemAttribute 'Объектный атрибут' : itemAttribute;

valueObjectItemAttribute = ABSTRACT named (item, itemAttribute) EXCLUSIVE PERSISTENT;
nameObjectItemAttribute(item, attribute) = name(valueObjectItemAttribute(item, attribute));
valueItemAttribute(item, attribute) += nameObjectItemAttribute(item, attribute);

META implementObjectItemAttribute(attribute, caption)
    @implementItemAttribute(attribute, caption, object, item###attribute);
END

META defineObjectItemAttribute(attribute, identity, caption, group)
    attribute##Item = DATA attribute (item);
    identity###attribute##Item caption (item) = identity(attribute##Item(item)) IN group;
    @defineItemAttribute(attribute, identity###attribute##Item, caption, group, object, item###attribute);
END

// Краткое наименование атрибута
CLASS STATIC objectShortItemAttribute 'Объектный краткий атрибут' : itemAttribute;

valueObjectShortItemAttribute = ABSTRACT doubleNamed (item, itemAttribute) EXCLUSIVE PERSISTENT;
shortNameObjectItemAttribute(item, attribute) = shortName(valueObjectShortItemAttribute(item, attribute));
valueItemAttribute(item, attribute) += shortNameObjectItemAttribute(item, attribute);

META implementObjectShortItemAttribute(attribute, caption)
    EXTEND CLASS objectShortItemAttribute { shortItem###attribute caption }
    value###attribute##ItemShortAttribute(item, attribute) = attribute##Item(item) AND attribute == objectShortItemAttribute.shortItem###attribute;
    valueObjectShortItemAttribute(item, attribute) += value###attribute##ItemShortAttribute(item, attribute);
END

// ---------------------------- Конкретные свойства -------------------------------- //

// Свойства товара
GROUP itemBaseGroup 'Базовые свойства' : baseGroup;

// Группа
@implementObjectItemAttribute(itemGroup, 'Группа товаров');

// Название
@defineStringItemAttribute(caption, STRING[100], 'Название', itemBaseGroup);

// Единица измерения
@defineObjectItemAttribute(UOM, name, 'Единица измерения', itemBaseGroup);

shortNameUOMItem 'Единица измерения' (item) = shortName(UOMItem(item)) IN itemBaseGroup;
UOMSku(item) += UOMItem(item);

@implementObjectShortItemAttribute(UOM, 'Единица измерения (сокр.)');

// Брэнд
CLASS brand 'Бренд' : named, externalObject;
TABLE brand(brand);

@defineObjectItemAttribute(brand, name, 'Бренд', itemBaseGroup);

// Страна
@defineObjectItemAttribute(country, name, 'Страна', itemBaseGroup);
residentItem 'Отечественное производство' (item) = residentCountry(countryItem(item)) IN itemBaseGroup;

// Производитель
CLASS manufacturer 'Производитель товара' : named;
TABLE manufacturer(manufacturer);

@defineObjectItemAttribute(manufacturer, name, 'Производитель', itemBaseGroup);

EXTEND DESIGN item { itemPrimaryColumn1 { ADD i.itemBaseGroup; } }

// ---------------------------------------------- Формирование наименований -------------------------------------- //

// Базовое наименование
@defineItemAttributeName( , , recognizeGroup);
nameSku(item) += nameAttributeItem(item);

// для оптимизации запросов
nameAttributeItemGroupItem 'Наименование' (itemGroup, item) = nameAttributeItem(item) AND isParentItemGroupItem(itemGroup, item) PERSISTENT INDEXED;

EXTEND FORM items
    PROPERTIES READONLY AFTER idBarcodeSku(i) nameAttributeItemGroupItem(g, i)
    FILTERS nameAttributeItemGroupItem(g, i)
    ORDER BY nameAttributeItemGroupItem
;

// Кассы
@defineItemAttributeName(cashRegister, ' (кассы)', publicGroup);
dataTitleCashRegisterBarcode 'Наименование для касс' = DATA STRING[100] (barcode);
titleCashRegisterBarcode 'Наименование для касс' = UNION OVERRIDE nameCashRegisterAttributeItem(skuBarcode(barcode)), dataTitleCashRegisterBarcode(barcode) MINCHARWIDTH 30 PREFCHARWIDTH 30;

// Весы
@defineItemAttributeName(scales, ' (весы)', publicGroup);
dataTitleScalesBarcode 'Наименование для весов' = DATA STRING[100] (barcode);
titleScalesBarcode 'Наименование для весов' = UNION OVERRIDE nameScalesAttributeItem(skuBarcode(barcode)), dataTitleScalesBarcode(barcode) MINCHARWIDTH 30 PREFCHARWIDTH 30;