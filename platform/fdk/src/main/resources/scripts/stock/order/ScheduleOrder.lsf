MODULE ScheduleOrder;

REQUIRE System,
        Utils,
        Historizable,
        Stock,
        Numerator,
        Document;

CLASS STATIC genType 'Тип генерации' {
    genDays 'Генерация через N дней',
    genNumber 'Генерация по числам',
    genDayMonth 'Генерация по дням недели и месяца'
};

CLASS ABSTRACT scheduleOrder 'График';
TABLE scheduleOrder(scheduleOrder);

CLASS ABSTRACT scheduleOrderDetail 'Заказ по графику';
TABLE scheduleOrderDetail(scheduleOrderDetail);

startDateScheduleOrder 'Дата начала' = ABSTRACT DATE (scheduleOrder) IN base;
endDateScheduleOrder 'Дата окончания' = ABSTRACT DATE (scheduleOrder) IN base;

typeScheduleOrder 'Тип генерации графика' = ABSTRACT genType (scheduleOrder);
nameTypeScheduleOrder 'Тип генерации графика' (scheduleOrder) = name(typeScheduleOrder(scheduleOrder)) IN base;

supplierScheduleOrder = ABSTRACT legalEntity(scheduleOrder);
customerScheduleOrder = ABSTRACT legalEntity(scheduleOrder);

addScheduleOrderSupplierCustomer 'Добавить' = ABSTRACT ACTION(supplier, customer) IMAGE 'add.png' EDITKEY 'INSERT' HIDE TOOLBAR;
editScheduleOrder 'Редактировать' = ABSTRACT ACTION(scheduleOrder) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

META defineScheduleOrder(sign, stockProp)

    CLASS scheduleOrder 'График поставок'##sign : ScheduleOrder.scheduleOrder;
    CLASS scheduleOrderDetail 'Заказ по графику'##sign : ScheduleOrder.scheduleOrderDetail;

    //общие свойства
    typeScheduleOrder 'Тип генерации графика (ИД)' = DATA genType (scheduleOrder);
    ScheduleOrder.typeScheduleOrder(scheduleOrder) += typeScheduleOrder(scheduleOrder);
    nameTypeScheduleOrder 'Тип генерации графика' (scheduleOrder) = name(typeScheduleOrder(scheduleOrder)) IN base;

    supplierScheduleOrder 'Поставщик (ИД)' = DATA legalEntity(scheduleOrder);
    nameSupplierScheduleOrder 'Поставщик' (scheduleOrder) = name(supplierScheduleOrder(scheduleOrder)) IN base;

    customerScheduleOrder 'Покупатель (ИД)' = DATA legalEntity(scheduleOrder);
    nameCustomerScheduleOrder 'Покупатель' (scheduleOrder) = name(customerScheduleOrder(scheduleOrder)) IN base;

    ScheduleOrder.supplierScheduleOrder(scheduleOrder) += supplierScheduleOrder(scheduleOrder);
    ScheduleOrder.customerScheduleOrder(scheduleOrder) += customerScheduleOrder(scheduleOrder);

    supplierStockScheduleOrder = DATA stock(scheduleOrder);
    nameSupplierStockScheduleOrder 'Склад поставщика' (scheduleOrder) = name(supplierStockScheduleOrder(scheduleOrder));

    customerStockScheduleOrder = DATA stock(scheduleOrder);
    nameCustomerStockScheduleOrder 'Склад покупателя' (scheduleOrder) = name(customerStockScheduleOrder(scheduleOrder));

    CONSTRAINT supplierScheduleOrder(scheduleOrder) AND supplierStockScheduleOrder(scheduleOrder) AND NOT
    inLegalEntityStock(supplierScheduleOrder(scheduleOrder), supplierStockScheduleOrder(scheduleOrder))
        CHECKED BY supplierScheduleOrder, supplierStockScheduleOrder
            MESSAGE 'Поставщик и склад поставщика не имеют связи';

    CONSTRAINT customerScheduleOrder(scheduleOrder) AND customerStockScheduleOrder(scheduleOrder) AND NOT
    inLegalEntityStock(customerScheduleOrder(scheduleOrder), customerStockScheduleOrder(scheduleOrder))
        CHECKED BY customerScheduleOrder, customerStockScheduleOrder
            MESSAGE 'Покупатель и склад покупателя не имеют связи';

    startDateScheduleOrder 'Дата начала' = DATA DATE (scheduleOrder) IN base;
    endDateScheduleOrder 'Дата окончания' = DATA DATE (scheduleOrder) IN base;

    ScheduleOrder.startDateScheduleOrder (scheduleOrder) += startDateScheduleOrder(scheduleOrder);
    ScheduleOrder.endDateScheduleOrder (scheduleOrder) += endDateScheduleOrder(scheduleOrder);

    dayBeforeScheduleOrder 'За сколько дней формировать заказ' = DATA INTEGER (scheduleOrder);

    //свойства "Каждые N недель"
    periodScheduleOrder 'Кол-во недель между поставками' = DATA INTEGER (scheduleOrder);
    overPeriodScheduleOrder 'Кол-во недель между поставками' (scheduleOrder) = UNION OVERRIDE 1 IF scheduleOrder IS scheduleOrder, periodScheduleOrder(scheduleOrder);

    //свойства "Каждые N дней"
    dayAfterScheduleOrder 'Через сколько дней после последней поставки делать заказ' = DATA INTEGER (scheduleOrder);
    dayLastOrderScheduleOrder 'Дата последнего заказа' = DATA DATE (scheduleOrder);

    //свойства "По числам"
    stringNumberScheduleOrder 'Числа месяца поставок (указывать через запятую)' = DATA STRING[100] (scheduleOrder);
    transferDayScheduleOrder 'День на который переносить поставки с Субботы и Воскресенья (ИД)' = DATA DOW (scheduleOrder);
    nameTransferDayScheduleOrder 'День на который переносить поставки с Субботы и Воскресенья' (scheduleOrder) = name(transferDayScheduleOrder(scheduleOrder));
    CONSTRAINT transferDayScheduleOrder(scheduleOrder) != DOW.friday AND transferDayScheduleOrder(scheduleOrder) != DOW.monday CHECKED MESSAGE 'Выберите день с ПН по ПТ';

    //свойства "По дням недели и месяца"
    TABLE scheduleOrderMonth(scheduleOrder, month);
    inMonthScheduleOrder 'Включать' = DATA BOOLEAN (scheduleOrder, month);
    inAllMonthScheduleOrder 'Включить все месяцы' = DATA BOOLEAN (scheduleOrder);
    inMonthScheduleOrder(scheduleOrder, month) <- inAllMonthScheduleOrder(scheduleOrder) WHEN ASSIGNED(inAllMonthScheduleOrder(scheduleOrder) AND month IS month);

    TABLE scheduleOrderDOW(scheduleOrder, DOW);
    inDayScheduleOrder 'Включать' = DATA BOOLEAN (scheduleOrder, DOW);

    toShowGenDay (scheduleOrder) = typeScheduleOrder(scheduleOrder) == genType.genDays;
    toShowGenNumber (scheduleOrder) = typeScheduleOrder(scheduleOrder) == genType.genNumber;
    toShowGenDayMonth (scheduleOrder) = typeScheduleOrder(scheduleOrder) == genType.genDayMonth;

    dateOrderScheduleOrderDetail 'Дата заказа' = DATA DATE (scheduleOrderDetail) IN base;
    dateSupplyScheduleOrderDetail 'Дата поставки' = DATA DATE (scheduleOrderDetail) IN base;

    scheduleOrderScheduleOrderDetail 'График поставок' = DATA scheduleOrder(scheduleOrderDetail);

    CONSTRAINT scheduleOrderScheduleOrderDetail(scheduleOrderDetail1) == scheduleOrderScheduleOrderDetail(scheduleOrderDetail2) AND
               dateSupplyScheduleOrderDetail(scheduleOrderDetail1) == dateSupplyScheduleOrderDetail(scheduleOrderDetail2) AND
               dateOrderScheduleOrderDetail(scheduleOrderDetail1) == dateOrderScheduleOrderDetail(scheduleOrderDetail2) AND NOT
               scheduleOrderDetail1 == scheduleOrderDetail2 MESSAGE 'Совпадение даты заказа и даты поставки';

    supplierScheduleOrderDetail(scheduleOrderDetail) = supplierScheduleOrder(scheduleOrderScheduleOrderDetail(scheduleOrderDetail));
    nameSupplierScheduleOrderDetail 'Поставщик' (scheduleOrderDetail) = name(supplierScheduleOrderDetail(scheduleOrderDetail));

    customerScheduleOrderDetail(scheduleOrderDetail) = customerScheduleOrder(scheduleOrderScheduleOrderDetail(scheduleOrderDetail));
    nameCustomerScheduleOrderDetail 'Покупатель' (scheduleOrderDetail) = name(customerScheduleOrderDetail(scheduleOrderDetail));

    supplierStockScheduleOrderDetail(scheduleOrderDetail) = supplierStockScheduleOrder(scheduleOrderScheduleOrderDetail(scheduleOrderDetail));
    nameSupplierStockScheduleOrderDetail 'Склад поставщика' (scheduleOrderDetail) = name(supplierStockScheduleOrderDetail(scheduleOrderDetail));

    customerStockScheduleOrderDetail(scheduleOrderDetail) = customerStockScheduleOrder(scheduleOrderScheduleOrderDetail(scheduleOrderDetail));
    nameCustomerStockScheduleOrderDetail 'Склад покупателя' (scheduleOrderDetail) = name(customerStockScheduleOrderDetail(scheduleOrderDetail));

    tmpDate = DATA SESSION DATE();
    tmpDateP = DATA SESSION DATE();
    tmpDateS = DATA SESSION DATE();

    createScheduleOrder 'Генерировать предварительные заказы' = ACTION (scheduleOrder) {
        // генерация через N дней
        IF typeScheduleOrder(scheduleOrder) == genType.genDays THEN {
            SET tmpDate() <- dayLastOrderScheduleOrder(scheduleOrder);
            // итерируемся по всем датам через n дней
            WHILE tmpDate() <= endDateScheduleOrder(scheduleOrder) DO {
                IF tmpDate() >= startDateScheduleOrder(scheduleOrder) THEN {
                    ADDOBJ scheduleOrderDetail;
                    FOR o == addedObject() DO {
                        SET dateOrderScheduleOrderDetail(o) <- subtractDate(tmpDate(), dayBeforeScheduleOrder(scheduleOrder));
                        SET dateSupplyScheduleOrderDetail(o) <- tmpDate();
                        SET scheduleOrderScheduleOrderDetail(o) <- scheduleOrder;
                    };
                };
                SET tmpDate() <- sumDate(tmpDate(), dayAfterScheduleOrder(scheduleOrder));
            };
        };

        // генерация по числам
        IF typeScheduleOrder(scheduleOrder) == genType.genNumber THEN {
            SET tmpDate() <- startDateScheduleOrder(scheduleOrder);
            // итерируемся по всем датам через 1 день
            WHILE tmpDate() <= endDateScheduleOrder(scheduleOrder) DO {
                IF isWordInCSV(dayInDate(tmpDate()), stringNumberScheduleOrder(scheduleOrder)) == 1 THEN {
                    ADDOBJ scheduleOrderDetail;
                    FOR o == addedObject() DO {
                        SET tmpDateS() <- tmpDate();
                        SET scheduleOrderScheduleOrderDetail(o) <- scheduleOrder;
                        // если попали на субботу или воскресенье
                        IF UNION OVERRIDE numberDOWInDate(tmpDateS()) == 0, numberDOWInDate(tmpDateS()) == 6 THEN {
                            IF numberDOW(transferDayScheduleOrder(scheduleOrder)) == 1 THEN {
                            // если нужно переносить на понедельник, то добавляем
                                WHILE numberDOWInDate(tmpDateS()) != 1 DO SET tmpDateS() <- sumDate(tmpDateS(), 1);
                            }
                            ELSE {
                                // если нужно переносить на пятницу, то отнимаем
                                WHILE numberDOWInDate(tmpDateS()) != 5 DO SET tmpDateS() <- subtractDate(tmpDateS(), 1);
                            };
                        };
                        SET dateSupplyScheduleOrderDetail(o) <- tmpDateS();
                        SET dateOrderScheduleOrderDetail(o) <- subtractDate(tmpDateS(), dayBeforeScheduleOrder(scheduleOrder));
                    };
                };
                SET tmpDate() <- sumDate(tmpDate(), 1);
            };
        };

        // генерация по дням и месяцам
        IF typeScheduleOrder(scheduleOrder) == genType.genDayMonth THEN {
            SET tmpDate() <- startDateScheduleOrder(scheduleOrder);
            // итерируемся по всем датам через 1 день
            WHILE tmpDate() <= endDateScheduleOrder(scheduleOrder) DO {
                SET tmpDateP() <- tmpDate();
                WHILE tmpDate() < sumDate(tmpDateP(), 7) AND tmpDate() <= endDateScheduleOrder(scheduleOrder) DO {
                    IF inMonthScheduleOrder(scheduleOrder, monthInDate(tmpDate())) AND inDayScheduleOrder(scheduleOrder, DOWInDate(tmpDate())) THEN {
                        ADDOBJ scheduleOrderDetail;
                        FOR o == addedObject() DO {
                            SET dateOrderScheduleOrderDetail(o) <- subtractDate(tmpDate(), dayBeforeScheduleOrder(scheduleOrder));
                            SET dateSupplyScheduleOrderDetail(o) <- tmpDate();
                            SET scheduleOrderScheduleOrderDetail(o) <- scheduleOrder;
                        };
                    };
                    SET tmpDate() <- sumDate(tmpDate(), 1);
                };
                SET tmpDate() <- sumDate(tmpDate(), (overPeriodScheduleOrder(scheduleOrder) - 1) * 7);
            };
        };

        //EXEC apply();
    } TOOLBAR;


    monthInDateScheduleOrderDetail 'Месяц'(scheduleOrderDetail) = name(monthNumber(numberMonthInDate(dateSupplyScheduleOrderDetail(scheduleOrderDetail))));
    DOWInDateScheduleOrderDetail 'День недели'(scheduleOrderDetail) = name(DOWNumber(numberDOWInDate(dateSupplyScheduleOrderDetail(scheduleOrderDetail))));

    orderScheduleOrderDetail = STRUCT(dateSupplyScheduleOrderDetail(scheduleOrderDetail), scheduleOrderDetail) PERSISTENT;

    concatNextScheduleOrderDetail(scheduleOrderDetail, scheduleOrder) = GROUP MIN orderScheduleOrderDetail(scheduleOrderDetail1) AND
                                                                                  dateSupplyScheduleOrderDetail(scheduleOrderDetail1) > dateSupplyScheduleOrderDetail(scheduleOrderDetail)
                                                                               BY scheduleOrderDetail, scheduleOrderScheduleOrderDetail(scheduleOrderDetail1);

    nextScheduleOrderDetail(scheduleOrderDetail) = concatNextScheduleOrderDetail(scheduleOrderDetail, scheduleOrderScheduleOrderDetail(scheduleOrderDetail))[2];

    dateSupplyNextScheduleOrderDetail(scheduleOrderDetail) = dateSupplyScheduleOrderDetail(nextScheduleOrderDetail(scheduleOrderDetail));

    scheduleOrderDetailUserOrder = DATA scheduleOrderDetail(userOrder);
    quantityOrdersScheduleOrderDetail 'Кол-во заказов' (scheduleOrderDetail) =
        GROUP SUM 1 IF supplierStockOrder(userOrder)==supplierStockScheduleOrderDetail(scheduleOrderDetail) AND
                       customerStockOrder(userOrder)==customerStockScheduleOrderDetail(scheduleOrderDetail) AND
                       shipmentDateUserOrder(userOrder)==dateSupplyScheduleOrderDetail(scheduleOrderDetail) AND
                       dateOrder(userOrder)==dateOrderScheduleOrderDetail(scheduleOrderDetail)
               BY scheduleOrderDetail PERSISTENT;

    overCreateOrder = ABSTRACT ACTION (userOrder);

    createOrder 'Создать заказ' = ACTION (scheduleOrderDetail) NEWSESSION {
        FOR ADDOBJ o = userOrder DO {
            SET scheduleOrderDetailUserOrder(o) <- scheduleOrderDetail;
            SET dateOrder(o) <- dateOrderScheduleOrderDetail(scheduleOrderDetail);
            SET shipmentDateUserOrder(o) <- dateSupplyScheduleOrderDetail(scheduleOrderDetail);
            SET shipmentTimeUserOrder(o) <- currentTime();
            SET nextShipmentDateUserOrder(o) <- dateSupplyNextScheduleOrderDetail(scheduleOrderDetail);
            SET supplierOrder(o) <- supplierScheduleOrderDetail(scheduleOrderDetail);
            SET customerOrder(o) <- customerScheduleOrderDetail(scheduleOrderDetail);
            SET supplierStockOrder(o) <- supplierStockScheduleOrderDetail(scheduleOrderDetail);
            SET customerStockOrder(o) <- customerStockScheduleOrderDetail(scheduleOrderDetail);

            EXEC overCreateOrder(o);

            FORM userOrder OBJECTS o = o MANAGESESSION DOCKEDMODAL;
        };
    } TOOLBAR;


    FORM scheduleOrder 'График поставок'
        OBJECTS s=scheduleOrder FIXED PANEL
        PROPERTIES (s) nameSupplierScheduleOrder, nameSupplierStockScheduleOrder, nameCustomerScheduleOrder, nameCustomerStockScheduleOrder,
                       startDateScheduleOrder, endDateScheduleOrder, nameTypeScheduleOrder, dayBeforeScheduleOrder,
                       overPeriodScheduleOrder SHOWIF toShowGenDayMonth(s), inAllMonthScheduleOrder SHOWIF toShowGenDayMonth(s),
                       dayLastOrderScheduleOrder SHOWIF toShowGenDay(s), dayAfterScheduleOrder SHOWIF toShowGenDay(s),
                       stringNumberScheduleOrder SHOWIF toShowGenNumber(s), nameTransferDayScheduleOrder SHOWIF toShowGenNumber(s)

        OBJECTS m=month FIXED GRID
        PROPERTIES(m) name SHOWIF toShowGenDayMonth(s)
        PROPERTIES(s, m) inMonthScheduleOrder SHOWIF toShowGenDayMonth(s)

        OBJECTS d=DOW FIXED GRID
        PROPERTIES(d) name SHOWIF toShowGenDayMonth(s)
        PROPERTIES(s, d) inDayScheduleOrder SHOWIF toShowGenDayMonth(s)

        OBJECTS sd=scheduleOrderDetail
        PROPERTIES (sd) dateOrderScheduleOrderDetail, dateSupplyScheduleOrderDetail
        PROPERTIES (sd) READONLY monthInDateScheduleOrderDetail, DOWInDateScheduleOrderDetail,
                        nameSupplierScheduleOrderDetail, nameSupplierStockScheduleOrderDetail,
                        nameCustomerScheduleOrderDetail, nameCustomerStockScheduleOrderDetail
        PROPERTIES (sd) createOrder, delete
        ORDER BY dateSupplyScheduleOrderDetail
        PROPERTIES createScheduleOrder(s) TODRAW sd

        PROPERTIES(sd) ADDOBJ TOOLBAR

        FILTERS scheduleOrderScheduleOrderDetail(sd)==s

        EDIT scheduleOrder OBJECT s
    ;

    DESIGN scheduleOrder FROM DEFAULT{
        main {
            NEW topContainer {
                NEW orderContainer {
                    childConstraints = TO THE RIGHT;
                    NEW suppContainer {
                        caption = 'Поставщик';
                        ADD PROPERTY(nameSupplierScheduleOrder);
                        ADD PROPERTY(nameSupplierStockScheduleOrder);
                    }

                    NEW custContainer {
                        caption = 'Покупатель';
                        ADD PROPERTY(nameCustomerScheduleOrder);
                        ADD PROPERTY(nameCustomerStockScheduleOrder);
                    }

                    NEW dateContainer {
                        caption = 'Сроки';
                        ADD PROPERTY(startDateScheduleOrder);
                        ADD PROPERTY(endDateScheduleOrder);
                    }
                }
            }

            NEW bottomContainer {
                fillVertical = 2;
                type = TABBED;
                NEW paramContainer {
                    caption = 'Параметры';
                    childConstraints = TO THE RIGHT;
                    type = SPLITH;
                    NEW createContainer {
                        fillHorizontal = 1;
                        NEW propContainer {
                            caption = 'Общие';
                            ADD PROPERTY(nameTypeScheduleOrder);
                            ADD PROPERTY(dayBeforeScheduleOrder);
                        }

                        NEW changeContainer {
                            caption = 'Для типа';
                            ADD PROPERTY(overPeriodScheduleOrder);
                            ADD PROPERTY(inAllMonthScheduleOrder);
                            ADD PROPERTY(dayLastOrderScheduleOrder);
                            ADD PROPERTY(dayAfterScheduleOrder);
                            ADD PROPERTY(stringNumberScheduleOrder);
                            ADD PROPERTY(nameTransferDayScheduleOrder);
                        }
                    }

                    NEW monthContainer {
                        childConstraints = TO THE RIGHT;
                        fillHorizontal = 2;
                        ADD m.box;
                        ADD d.box;
                    }
                }

                ADD sd.box {
                    caption = 'Предварительные заказы';
                };
            }
            ADD functions.box;
        }
    }

    editScheduleOrder 'Редактировать' = ACTION EDITFORM scheduleOrder TOOLBAR;

    ScheduleOrder.editScheduleOrder(scheduleOrder) += editScheduleOrder(scheduleOrder);

    editScheduleOrderDetail 'Редактировать' (detail) = editScheduleOrder(scheduleOrderScheduleOrderDetail(detail)) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

    addScheduleOrderSupplierCustomer 'Добавить'##sign = ACTION (supplier, customer) {
        FOR ADDOBJ s = scheduleOrder DO {
            SET supplierScheduleOrder(s) <- supplier;
            SET customerScheduleOrder(s) <- customer;

            FORM scheduleOrder OBJECTS s = s MANAGESESSION DOCKEDMODAL;
            IF TRUE AND NOT formResult() == formResult.ok THEN {
                EXEC delete(s);
            }
        }
    } IMAGE 'add.png' EDITKEY 'INSERT' HIDE TOOLBAR;

    ScheduleOrder.addScheduleOrderSupplierCustomer(supplier, customer) += addScheduleOrderSupplierCustomer(supplier, customer);

    supplier = DATA SESSION legalEntity();
    nameSupplier 'Поставщик' = name(supplier());
    customer = DATA SESSION legalEntity();
    nameCustomer 'Покупатель' = name(customer());
    supplierStock = DATA SESSION stock();
    nameSupplierStock 'Склад поставщика' = name(supplierStock());
    customerStock = DATA SESSION stock();
    nameCustomerStock 'Склад покупателя' = name(customerStock());

    CONSTRAINT supplier() AND supplierStock() AND NOT inLegalEntityStock(supplier(), supplierStock())
        CHECKED BY supplier, supplierStock MESSAGE 'Поставщик и склад поставщика не имеют связи';

    CONSTRAINT customer() AND customerStock() AND NOT inLegalEntityStock(customer(), customerStock())
        CHECKED BY customer, customerStock MESSAGE 'Покупатель и склад покупателя не имеют связи';


    FORM scheduleOrderDetails 'Заказы по графику'

        OBJECTS d=DATE FIXED PANEL
        PROPERTIES dv=OBJVALUE(d)
        PROPERTIES () nameSupplier, nameCustomer, nameSupplierStock, nameCustomerStock

        OBJECTS sd=scheduleOrderDetail
        PROPERTIES (sd) READONLY dateOrderScheduleOrderDetail, dateSupplyScheduleOrderDetail,
                        monthInDateScheduleOrderDetail, DOWInDateScheduleOrderDetail,
                        nameSupplierScheduleOrderDetail, nameSupplierStockScheduleOrderDetail,
                        nameCustomerScheduleOrderDetail, nameCustomerStockScheduleOrderDetail, quantityOrdersScheduleOrderDetail
        PROPERTIES (sd) createOrder, editScheduleOrderDetail

        ORDER BY dateSupplyScheduleOrderDetail

        FILTERS supplierScheduleOrderDetail(sd) == supplier() OR (sd IS scheduleOrderDetail AND NOT supplier()),
                supplierStockScheduleOrderDetail(sd) == supplierStock() OR (sd IS scheduleOrderDetail AND NOT supplierStock()),
                customerScheduleOrderDetail(sd) == customer() OR (sd IS scheduleOrderDetail AND NOT customer()),
                customerStockScheduleOrderDetail(sd) == customerStock() OR (sd IS scheduleOrderDetail AND NOT customerStock())

        FILTERGROUP dateFilter
            FILTER 'На дату' 'F10' dateOrderScheduleOrderDetail(sd) == d DEFAULT
    ;

    DESIGN scheduleOrderDetails FROM DEFAULT{
        main {
            NEW topContainer {
                childConstraints = TO THE RIGHTBOTTOM;
                ADD PROPERTY(dv);
                ADD PROPERTY(nameSupplier);
                ADD PROPERTY(nameSupplierStock);
                ADD PROPERTY(nameCustomer);
                ADD PROPERTY(nameCustomerStock);
            }
            ADD sd.box;
            ADD functions.box;
        }
    }


    FORM scheduleOrders 'Графики поставок'

        OBJECTS d=DATE FIXED PANEL
        PROPERTIES dv=OBJVALUE(d)
        PROPERTIES () nameSupplier, nameCustomer, nameSupplierStock, nameCustomerStock

        OBJECTS s=scheduleOrder
        PROPERTIES(s) READONLY nameSupplierScheduleOrder, nameSupplierStockScheduleOrder,
                      nameCustomerScheduleOrder, nameCustomerStockScheduleOrder, nameTypeScheduleOrder

        PROPERTIES(s) ADDFORM, EDITFORM, delete TOOLBAR

        OBJECTS sd=scheduleOrderDetail
        PROPERTIES(sd) READONLY dateOrderScheduleOrderDetail, dateSupplyScheduleOrderDetail,
                       monthInDateScheduleOrderDetail, DOWInDateScheduleOrderDetail,
                       nameSupplierScheduleOrderDetail, nameSupplierStockScheduleOrderDetail,
                       nameCustomerScheduleOrderDetail, nameCustomerStockScheduleOrderDetail

        ORDER BY dateSupplyScheduleOrderDetail

        FILTERS supplierScheduleOrderDetail(sd) == supplier() OR (sd IS scheduleOrderDetail AND NOT supplier()),
                supplierStockScheduleOrderDetail(sd) == supplierStock() OR (sd IS scheduleOrderDetail AND NOT supplierStock()),
                customerScheduleOrderDetail(sd) == customer() OR (sd IS scheduleOrderDetail AND NOT customer()),
                customerStockScheduleOrderDetail(sd) == customerStock() OR (sd IS scheduleOrderDetail AND NOT customerStock())

        FILTERGROUP dateFilter
            FILTER 'На дату' 'F10' dateSupplyScheduleOrderDetail(sd) == d

        FILTERGROUP orderFilter
            FILTER 'Текущего графика' 'F11' scheduleOrderScheduleOrderDetail(sd) == s DEFAULT
    ;

    DESIGN scheduleOrders FROM DEFAULT{
        main {
            NEW topContainer {
                childConstraints = TO THE RIGHTBOTTOM;
                ADD PROPERTY(dv);
                ADD PROPERTY(nameSupplier);
                ADD PROPERTY(nameSupplierStock);
                ADD PROPERTY(nameCustomer);
                ADD PROPERTY(nameCustomerStock);
            }
            ADD s.box;
            ADD sd.box;

            ADD functions.box;
        }
    }

END

filterCompanySupplier(legalEntity, supplier) = (isCompanyLegalEntity(legalEntity) AND isSupplierLegalEntity(supplier)) OR
                                               (isCustomerLegalEntity(legalEntity) AND isCompanyLegalEntity(supplier));

filterCompanyCustomer(legalEntity, customer) = (isCompanyLegalEntity(legalEntity) AND isCustomerLegalEntity(customer)) OR
                                               (isSupplierLegalEntity(legalEntity) AND isCompanyLegalEntity(customer));

EXTEND FORM legalEntity

    OBJECTS ss=scheduleOrder
    PROPERTIES(ss) READONLY objectClassName, startDateScheduleOrder, endDateScheduleOrder, nameTypeScheduleOrder
    PROPERTIES(ss) delete, editScheduleOrder

    FILTERS filterCompanySupplier(l, s)
    FILTERS supplierScheduleOrder(ss) == s, customerScheduleOrder(ss) == l

    OBJECTS sc=scheduleOrder
    PROPERTIES(sc) READONLY objectClassName, startDateScheduleOrder, endDateScheduleOrder, nameTypeScheduleOrder
    PROPERTIES(sc) delete, editScheduleOrder

    FILTERS filterCompanyCustomer(l, c)
    FILTERS customerScheduleOrder(sc) == c, supplierScheduleOrder(sc) == l


;

EXTEND DESIGN legalEntity {
    extendContainer {
        docContainer{
            ADD ss.box;
        }

        docContainer2{
            ADD sc.box;
        }
    }
}

