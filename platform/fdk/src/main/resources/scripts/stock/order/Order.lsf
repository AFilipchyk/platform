MODULE Order;

REQUIRE System,
        Utils,
        Historizable,
        Stock,
        Numerator,
        Document,
        Currency,
        Barcode,
        PriceList,
        Agreement,
        PurchaseLedger,
        SaleLedger,
        StockReserve,
        OrderLedger,
        Employee,
        Operation,
        StockTax;


PRIORITY Utils, Stock;

CLASS ABSTRACT Order 'Заказ' : Document;
CLASS ABSTRACT OrderDetail 'Строка заказа' : DocumentDetail;

@defineDocumentAbstract(order);
@defineDocumentAbstractNumber(order);
//@defineDocumentDetailIndex(order);

@defineDocumentAbstractLegalEntity(order, supplier, 'Поставщик');
addressSupplierOrder 'Адрес поставщика' (order) = addressLegalEntity(supplierOrder(order));

@defineDocumentAbstractLegalEntity(order, customer, 'Покупатель');
addressCustomerOrder 'Адрес покупателя' (order) = addressLegalEntity(customerOrder(order));

toDateOrder 'Дата автоматического закрытия' = ABSTRACT DATE (Order) IN documentPrmGroup PERSISTENT;

@defineDocumentAbstractDataStock(order, stock, 'Склад поставщика', supplier);
@defineDocumentAbstractDataStock(order, stock, 'Склад покупателя', customer);

@defineDocumentAbstractDataStock(order, stock, 'Склад (отправитель)', from);
@defineDocumentAbstractDataStock(order, stock, 'Склад (получатель)', to);

@defineDocumentAbstractPosted(order);

@defineDocumentAbstractDetailSku(order, sku);

@defineDocumentAbstractDetailPrice(order);
@defineDocumentAbstractDetailDataSumCustomPrefix (orderDetail, , );
@defineDocumentAbstractDetailVAT(order, , );
@defineDocumentAbstractDetailVATDataSumCustom (orderDetail, invoice);

@defineDocumentAbstractDetailQuantity(order);
@defineDocumentDetailGrossWeight(order, sku);
@defineDocumentHeaderSkuQuantity(order, sku);

@defineDocumentHeaderQuantity(order);
@defineDocumentHeaderVATSum(order, orderDetail, invoice);
@defineDocumentHeaderSum (order);

@defineDocumentHeaderGrossWeight(order);
@defineDocumentAbstractHeaderCurrency (order);

operationOrder = ABSTRACT Operation (Order) PERSISTENT;
nameOperationOrder 'Операция' (order) = name(operationOrder(order));

quantityFromOrderStock 'Кол-во со склада' (order, stock) = GROUP SUM quantityOrderDetail(orderDetail) BY orderOrderDetail(orderDetail),
                                                                                                         fromStockOrderDetail(orderDetail);

quantityToOrderStock 'Кол-во на склад' (order, stock) = GROUP SUM quantityOrderDetail(orderDetail) BY orderOrderDetail(orderDetail),
                                                                                                      toStockOrderDetail(orderDetail);

editOrder 'Редактировать' = ABSTRACT ACTION (order) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

//----------------------------------------------- Заказ ---------------------------------------------------//

META defineOrder(sign, legalEntityProp, stockProp, NS, toShowProp, captionProp)

    CLASS ABSTRACT Order 'Заказ'###sign : Order.Order;
    CLASS ABSTRACT OrderDetail 'Строка заказа'###sign : Order.OrderDetail, Named;

    CLASS UserOrder 'Заказ (польз.)'###sign : Order, Historizable, NumeratedObject;
    CLASS UserOrderDetail 'Строка заказа (польз.)'###sign : OrderDetail;
    CLASS UserOrderPosted 'Проведенный заказ (польз.)'###sign : UserOrder, PostedObject;

    @defineDocumentInterface(order);
    Order.orderOrderDetail (detail) += orderOrderDetail(detail);
    Order.dateOrder (order) += dateOrder(order);
    Order.timeOrder (order) += timeOrder(order);

    @defineDocumentInterfaceNumber(order);
    Order.numberOrder (order) += numberOrder(order);
    Order.seriesOrder (order) += seriesOrder(order);

    @defineDocumentInterfaceLegalEntity (order, supplier, 'Поставщик');
    @defineDocumentInterfaceLegalEntity (order, customer, 'Покупатель');
    Order.supplierOrder(order) += supplierOrder(order);
    Order.customerOrder(order) += customerOrder(order);

    @defineDocumentInterfaceDataStock(order, stock, 'Склад поставщика', supplier);
    @defineDocumentInterfaceDataStock(order, stock, 'Склад покупателя', customer);
    Order.supplierStockOrder(order) += supplierStockOrder(order);
    Order.customerStockOrder(order) += customerStockOrder(order);
    Order.dataSupplierStockOrderDetail(detail) += dataSupplierStockOrderDetail(detail);
    Order.dataCustomerStockOrderDetail(detail) += dataCustomerStockOrderDetail(detail);

    CONSTRAINT supplierUserOrder(userOrder) AND supplierStockUserOrder(userOrder) AND NOT
               inLegalEntityStock(supplierUserOrder(userOrder), supplierStockUserOrder(userOrder))
        CHECKED BY supplierStockUserOrder
            MESSAGE 'Поставщик и склад поставщика для заказа не имеют связи';
    CONSTRAINT customerUserOrder(userOrder) AND customerStockUserOrder(userOrder) AND NOT
               inLegalEntityStock(customerUserOrder(userOrder), customerStockUserOrder(userOrder))
        CHECKED BY customerStockUserOrder
            MESSAGE 'Покупатель и склад покупателя для заказа не имеют связи';

    @defineDocumentInterfacePosted(order);
    Order.isPostedOrder (order) += isPostedOrder(order);

    @defineDocumentInterfaceTimeShipment(order, shipment, ' поставки');
    toDateOrder 'Дата автоматического закрытия' = ABSTRACT DATE (Order) IN documentPrmGroup PERSISTENT;
    toDateUserOrder 'Дата автоматического закрытия' = DATA DATE (UserOrder) IN documentPrmGroup;
    toDateOrder(order) += toDateUserOrder(order);
    Order.toDateOrder (order) += toDateOrder(order);

    @defineDocumentClosed (order);

    @defineDocumentInterfaceDescription(order, 'Заказ'###sign);

    @defineDocumentInterfaceCurrency(order);
    @deriveDocumentCurrency(userOrder, stockProp);
    Order.currencyOrder(order) += currencyOrder(order);

    @defineDocumentInterfaceHeaderAgreement(order);
    @deriveDocumentHeaderAgreement (userOrder, supplierUserOrder, customerUserOrder);

    @defineDocumentInterfaceDetailSku(order, sku);
    Order.skuOrderDetail(detail) += skuOrderDetail(detail);

    @defineDocumentInterfaceDetailQuantity(order);
    Order.quantityOrderDetail(detail) += quantityOrderDetail(detail);

    @defineDocumentInterfaceDetailPrice(order); // объявляем цену без НДС
    Order.priceOrderDetail(detail) += priceOrderDetail(detail);

    @defineDocumentInterfaceDetailVAT(order, country###stockProp, , ); // объявляем шкалу
    @deriveDocumentDetailVAT (userOrder, , date,  sku, stockProp); // записываем ставку
    @deriveDocumentDetailValueVAT(userOrder); // записываем значение ставки

    Order.VATOrderDetail(detail) += VATOrderDetail(detail);
    Order.valueVATOrderDetail(detail) += valueVATOrderDetail(detail);

    @defineDocumentInterfaceDetailPricePrefix (order, invoice, ' с НДС'); // объявляем цену с НДС

    // объявляем Action'ы для ON CHANGE
    @defineDocumentDetailPriceVATOnChange(userOrder);
    @defineDocumentDetailNumberVATOnChange(userOrder, stockProp);
    @defineDocumentDetailValueVATOnChange(userOrder);
    @defineDocumentDetailInvoicePriceVATOnChange(userOrder);

    @defineDocumentInterfacePriceListType(order); // объявляем вид цены
    @deriveDocumentDetailPriceListTypeAgreement(order); // записываем вид цены из соглашения
    @deriveDocumentDetailPricePriceListTypeVAT (userOrder, stockProp); // записываем цены с НДС и без НДС на основе priceListType

    // суммма без НДС
    @defineDocumentInterfaceDetailDataSum(order);
    @deriveDocumentDetailSum(userOrder, quantity);
    Order.sumOrderDetail(detail) += sumOrderDetail(detail);

    // суммы НДС и с НДС
    @defineDocumentInterfaceDetailVATDataSum (order, invoice); // объявляем свойства суммы НДС и суммы с НДС
    @deriveDocumentDetailVATDataSum(userOrder); // записываем сумму НДС
    @deriveDocumentDetailVATPrefixSum (userOrder, invoice); // записываем сумму с НДС

    Order.VATSumOrderDetail(detail) += VATSumOrderDetail(detail);
    Order.invoiceSumOrderDetail(detail) += invoiceSumOrderDetail(detail);

    @defineDocumentInterfaceHeaderVATSum (order, orderDetail, invoice);

    @defineDocumentInterfaceHeaderQuantity(order);
    @defineDocumentHeaderSkuQuantity(order, sku);
    //Order.quantityOrderSku (order, sku) += quantityOrderDetailSkuOrder(sku, order);

    @defineDocumentHeaderSkuQuantity(userOrder, sku);
    @defineDocumentInterfaceHeaderSum(order);

    @defineAddDetailDialogSkuStock(userOrder, sku, stockProp, dialogSku);
    @defineAddDetailDialogBarcode(userOrder, sku);

    noAgreementUserOrder (order) = order IS UserOrder AND NOT agreementUserOrder(order);

    countOrderDetailStockOrder 'Кол-во строк по складу '(stock, order) = GROUP SUM 1 BY stockProp###orderDetail(orderDetail), orderOrderDetail(orderDetail);

//-- Упаковка
    @defineDocumentInterfaceCreate (order, toShowProp, captionProp);
    @defineDocumentInterfaceBarcodeSkuPrefix (order, sku, , );
    @defineDocumentDetailInterfaceDataQuantityPackCustomPrefix (orderDetail, , ' упаковок');
    @deriveDocumentDetailQuantityBarcodeCustom (userOrderDetail, sku, NS, toShowProp);
    @deriveDocumentQuantityPackageDetailOnChangeQuantity(userOrderDetail);
    @deriveDocumentQuantityDetailOnAmountPack(userOrderDetail);
    @deriveDocumentQuantityDetailOnChangeQuantityPack (userOrderDetail);

//-- Дата следующей поставки
    @defineDocumentInterfaceDatePrefix (order, nextShipment, ' следующей поставки');
    quantityDaysNextShipmentUserOrder 'Кол-во дней до след. поставки' (userOrder) =  subtractInteger(nextShipmentDateUserOrder(userOrder), dateUserOrder(userOrder)) + 1;
    fromShipmentDateUserOrder 'Начало периода' (userOrder) = subtractDate(dateUserOrder(userOrder), quantityDaysNextShipmentUserOrder(userOrder));

     @implementDocumentSupplierCustomer(order);

// --------------------------- Формы Заказа ---------------------------------

    editOrder 'Редактировать' = ABSTRACT ACTION (order) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    Order.editOrder (order) += editOrder(order);

    FORM userOrder 'Заказ'###sign
        OBJECTS o = UserOrder FIXED PANEL
        PROPERTIES (o) objectClassName, nameSupplierUserOrder, nameCustomerUserOrder, nameSupplierStockUserOrder, nameCustomerStockUserOrder,
                       nameNumeratorObject, numberObject, seriesObject, dateUserOrder, timeUserOrder,
                       nameCurrencyUserOrder, nameAgreementUserOrder, namePriceListTypeUserOrder SHOWIF noAgreementUserOrder(o), noteUserOrder,
                       countUserOrderDetailUserOrder, quantityUserOrderDetailUserOrder, sumUserOrderDetailUserOrder,
                       VATSumUserOrderDetailUserOrder, invoiceSumUserOrderDetailUserOrder,
                       shipmentDateUserOrder, shipmentTimeUserOrder, toDateUserOrder, nextShipmentDateUserOrder,
                       quantityDaysNextShipmentUserOrder READONLY, toShowProp###userOrder

        OBJECTS d = UserOrderDetail
        PROPERTIES (d) indexUserOrderDetail, idBarcodeSkuUserOrderDetail, nameSkuUserOrderDetail, shortNameUOMSkuUserOrderDetail
        PROPERTIES (d) SHOWIF toShowProp###userOrder(o) idBarcodePackUserOrderDetail, shortNameUOMPackUserOrderDetail,
                       amountPackUserOrderDetail ON CHANGE changeAmountPackUserOrderDetail(d), quantityPackUserOrderDetail ON CHANGE changeQuantityPackUserOrderDetail(d)
        PROPERTIES (d) quantityUserOrderDetail  ON CHANGE changeQuantityUserOrderDetail(d), namePriceListTypeUserOrderDetail,
                       priceUserOrderDetail ON CHANGE changePriceUserOrderDetail(d), sumUserOrderDetail,
                       numberVATUserOrderDetail ON CHANGE changeNumberVATUserOrderDetail(d),
                       valueVATUserOrderDetail ON CHANGE changeValueVATUserOrderDetail(d),
                       invoicePriceUserOrderDetail ON CHANGE changeInvoicePriceUserOrderDetail(d),
                       VATSumUserOrderDetail, invoiceSumUserOrderDetail,
                       name###stockProp###userOrderDetail, shipmentDateUserOrderDetail,
                       shipmentTimeUserOrderDetail, ADDOBJ, delete

        PROPERTIES(o) TODRAW d fillDocumentOrder, addDetailDialogSkuStockUserOrderDetailUserOrder,
                               addDetailInputBarcodeUserOrderDetailUserOrder, deleteUserOrderDetailUserOrder
        FILTERS userOrderUserOrderDetail(d) == o

        EVENTS
            ON OK prePostUserOrder(o)

        HINTTABLE LIST dateTimeUserOrderDetail, skuUserOrderDetail, supplierStockUserOrderDetail, customerStockUserOrderDetail,
                       priceListTypeUserOrderDetail, currencyUserOrderDetail,
                       priceUserOrderDetail, VATUserOrderDetail, valueVATUserOrderDetail, invoicePriceUserOrderDetail

        EDIT UserOrder OBJECT o
    ;

    DESIGN userOrder FROM DEFAULT{

        main {
            preferredSize = (1024, 768);
            NEW specification.box BEFORE functions.box{
                ADD d.box {
                    title = 'Спецификация';
                    d.panel {
                        childConstraints = TO THE BOTTOM;
                    }
                }
            }

            NEW header.box BEFORE specification.box {
                childConstraints = TO THE RIGHT;

                NEW headerRow1 {
                    childConstraints = TO THE BOTTOM;

                    ADD o.documentHeaderGroup {
                        childConstraints = TO THE RIGHTBOTTOM;
                        ADD PROPERTY(objectClassName) { preferredCharWidth = 10; }
                        ADD PROPERTY(nameNumeratorObject);
                        ADD PROPERTY(numberObject);
                        ADD PROPERTY(seriesObject);
                        ADD PROPERTY(dateUserOrder);
                        ADD PROPERTY(timeUserOrder);
                    }
                    NEW headerRow11 {

                        childConstraints = TO THE RIGHTBOTTOM;
                        NEW headerRow111 {
                            title = 'Поставщик';
                            childConstraints = TO THE RIGHTBOTTOM;
                            ADD PROPERTY(nameSupplierUserOrder);
                            ADD PROPERTY(nameSupplierStockUserOrder);

                        }
                        NEW headerRow112 {
                            title = 'Покупатель';
                            childConstraints = TO THE RIGHTBOTTOM;
                            ADD PROPERTY(nameCustomerUserOrder);
                            ADD PROPERTY(nameCustomerStockUserOrder);
                        }

                    }
                    NEW headerRow12 {
                        childConstraints = TO THE RIGHTBOTTOM;
                        ADD o.documentPrmGroup {
                            childConstraints = TO THE RIGHTBOTTOM;
                            ADD PROPERTY(toShowProp###userOrder);
                        }
                        ADD o.documentShipmentGroup {
                            childConstraints = TO THE RIGHTBOTTOM;
                        }
                        NEW headerRow121 {
                            title = 'Поставка';
                            childConstraints = TO THE RIGHTBOTTOM;
                            ADD PROPERTY(nextShipmentDateUserOrder);
                            ADD PROPERTY(quantityDaysNextShipmentUserOrder);
                        }
                    }
                }

                ADD o.documentSumGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }

            PROPERTY(formOk) {
                caption = 'Провести';
            }
        }
    }

//-- SKU
    @defineDocumentSkuStock(userOrder, sku, stockProp);
    @extendFormDocumentSkuStockCustom(userOrder, userOrder, o, legalEntityProp, stockProp);

    addUserOrder 'Добавить' = ACTION ADDFORM UserOrder;
    editUserOrder 'Редактировать' (userOrder) = ACTION EDITFORM UserOrder;
    editOrder(order) += editUserOrder(order);

    isClosedOrder(userOrder) <- TRUE IF toDateUserOrder(userOrder) <= subtractDate(currentDate(), 1) AND isPostedOrder(userOrder)
        WHEN CHANGED(currentDate() AND userOrder IS UserOrder) OR CHANGED(toDateUserOrder(userOrder));

    copyOrder 'Копировать' = ACTION (userOrder) NEWSESSION {
        FOR ADDOBJ o = UserOrder DO {
            SET supplierUserOrder(o) <- supplierUserOrder(userOrder);
            SET supplierStockUserOrder(o) <- supplierStockUserOrder(userOrder);
            SET customerUserOrder(o) <- customerUserOrder(userOrder);
            SET customerStockUserOrder(o) <- customerStockUserOrder(userOrder);
            SET currencyUserOrder(o) <- currencyUserOrder(userOrder);
            SET agreementUserOrder(o) <- agreementUserOrder(userOrder);
            SET priceListTypeUserOrder(o) <- priceListTypeUserOrder(userOrder);
            SET noteUserOrder(o) <- noteUserOrder(userOrder);
            SET toShowProp###userOrder(o) <- toShowProp###userOrder(userOrder);

            FOR userOrderUserOrderDetail(userOrderDetail) == userOrder DO {
                FOR ADDOBJ d=UserOrderDetail DO {
                    SET userOrderUserOrderDetail(d) <- o;
                    SET skuUserOrderDetail(d) <- skuUserOrderDetail(userOrderDetail);
                    SET quantityOrderDetail(d) <- quantityUserOrderDetail(userOrderDetail);
                    SET data###stockProp###userOrderDetail(d) <- data###stockProp###userOrderDetail(userOrderDetail);
                }
            }

            FORM userOrder OBJECTS o = o MANAGESESSION DOCKEDMODAL;
        }
    } TOOLBAR;


    FORM orders 'Заказы' TITLE 'Заказы'###sign
        OBJECTS o = Order
        PROPERTIES (o) READONLY isPostedOrder FORCE GRID, isClosedOrder, numberOrder, seriesOrder, dateOrder, timeOrder,
                                nameSupplierOrder, nameSupplierStockOrder, nameCustomerOrder, nameCustomerStockOrder, nameCurrencyOrder,
                                nameAgreementOrder, namePriceListTypeOrder,
                                countOrderDetailOrder, quantityOrderDetailOrder, sumOrderDetailOrder,
                                VATSumOrderDetailOrder, invoiceSumOrderDetailOrder, shipmentDateOrder, shipmentTimeOrder, toDateOrder,
                                noteOrder, objectClassName,
                                toShowProp###order

        PROPERTIES (o) READONLY FORCE PANEL nameUserCreatedHistorizable, timeCreatedHistorizable, hostnameComputerCreatedHistorizable, nameUserClosed, timeClosed, hostnameComputerClosed

        PROPERTIES ()  addUserOrder TODRAW o
        PROPERTIES (o) editOrder, copyOrder
        PROPERTIES (o) closeOrder SHOWIF isOpenedOrder(o), openOrder SHOWIF isClosedOrder(o)
        PROPERTIES     delete(o) FORCE PANEL TOOLBAR  SHOWIF isUserOrder(o)

        OBJECTS d=OrderDetail
        PROPERTIES (d) READONLY indexOrderDetail, idBarcodeSkuOrderDetail, nameSkuOrderDetail, shortNameUOMSkuOrderDetail
        PROPERTIES (d) READONLY SHOWIF toShowProp###order(o) idBarcodePackOrderDetail, shortNameUOMPackOrderDetail,
                       amountPackOrderDetail, quantityPackOrderDetail
        PROPERTIES (d) READONLY quantityOrderDetail, namePriceListTypeOrderDetail, priceOrderDetail, sumOrderDetail,
                       numberVATOrderDetail, valueVATOrderDetail, VATSumOrderDetail, invoiceSumOrderDetail,
                       name###stockProp###orderDetail, shipmentDateOrderDetail, shipmentTimeOrderDetail

        FILTERS orderOrderDetail(d) == o
        DIALOG Order OBJECT o
    ;
    @extendFormFilterAccess(Order, o, orders, stockProp);

    DESIGN orders FROM DEFAULT {
        PROPERTY (delete(o)) {
            askConfirm = TRUE;
        }

        NEW documentContainer BEFORE functions.box {
            type = SPLITV;
            childConstraints = TO THE BOTTOM;

            ADD o.box { fillVertical = 2.0; }

            NEW documentDetail {
                type = TABBED;

                ADD d.box {
                    title = 'Спецификация';
                }
                NEW documentHistory {
                    title = 'История';

                    ADD o.historyGroup;
                    ADD o.postedGroup;
                }
                NEW printTab {
                    title = 'Печатные формы';
                    NEW printContainer {
                        title = 'Печать';
                        childConstraints = TO THE BOTTOM;
                    }
                }
            }
        }
    }
END

META defineOrderStockDestination(fromStock, toStock)
    Order.fromStockOrder(order) += fromStock##Order(order);
    Order.toStockOrder(order) += toStock##Order(order);
    Order.dataFromStockOrderDetail(detail) += data###fromStock##OrderDetail(detail);
    Order.dataToStockOrderDetail(detail) += data###toStock##OrderDetail(detail);
END


META deriveDocumentQuantityPackageDetailOnChangeQuantity (detail);
    changeQuantity###detail = ACTION (detail) {
        REQUEST NUMERIC[14,3] INPUT;
        IF requestedNumeric() THEN {
            SET quantity###detail(detail) <- requestedNumeric();

            IF  barcodePack###detail(detail) THEN {
                SET quantityPack###detail(detail) <- quantity###detail(detail)/amountPack###detail(detail);
            }
        } ELSE {
            EXEC delete(detail);
        }
    }
END
META deriveDocumentQuantityDetailOnAmountPack (detail);
    changeAmountPack###detail = ACTION (detail) {
        REQUEST NUMERIC[14,3] INPUT;
        IF requestedNumeric() THEN {
            SET amountPack###detail(detail) <- requestedNumeric();

            IF  barcodePack###detail(detail) THEN {
                SET quantity###detail(detail) <- quantityPack###detail(detail)*amountPack###detail(detail);
            }
        } ELSE {
            EXEC delete(detail);
        }
    }
END

//-- Расширение формы подбора упаковкой (несколько складов)
META defineDocumentPackSkuStockCustom(object, detail, skuProp, stockProp, NS)
    quantityPackSku###object###stockProp 'Кол-во упаковок в документе' (sku, object, stock) = GROUP SUM quantityPack###detail(detail)
        BY skuProp###detail(detail), object###detail(detail), stockProp###detail(detail);

    changeQuantityPackSku###object###Stock = ACTION (sku, object, stock) {
        REQUEST NUMERIC[14,3] INPUT;
        IF detail###Sku###object###stockProp(sku, object, stock) THEN {
            IF requestedNumeric() THEN {
                SET quantityPack###detail(detail) <- requestedNumeric() WHERE detail == detail###Sku###object###stockProp(sku, object, stock);
                SET quantity###detail(detail) <- quantityPack###detail(detail)*amountPack###detail(detail) WHERE detail == detail###Sku###object###stockProp(sku, object, stock);

            } ELSE {
                EXEC delete(detail###Sku###object###stockProp(sku, object, stock));

            }
        } ELSE {
            IF requestedNumeric() THEN  {
                FOR ADDOBJ d = ###detail DO {
                   SET object###detail(d) <- object;
                   SET data###stockProp###detail (d) <- stock;
                   SET skuProp###detail(d) <- sku;
                   SET quantityPack###detail (d) <- requestedNumeric();
                   SET shipmentDataDate###detail (d) <- shipmentDate###object(object);
                   SET shipmentDataTime###detail (d) <- shipmentTime###object(object);
                }
            }
        }
    }

    changeAmountPackSku###object###Stock = ACTION (sku, object, stock) {
        REQUEST NUMERIC[14,3] INPUT;
        IF detail###Sku###object###stockProp(sku, object, stock) THEN {
            IF requestedNumeric() THEN {
                SET amountPack###detail(detail) <- requestedNumeric() WHERE detail == detail###Sku###object###stockProp(sku, object, stock);
                SET quantity###detail(detail) <- quantityPack###detail(detail)*amountPack###detail(detail) WHERE detail == detail###Sku###object###stockProp(sku, object, stock) AND quantityPack###detail(detail);
            } ELSE {
                SET amountPack###detail(detail) <- NULL WHERE detail == detail###Sku###object###stockProp(sku, object, stock);
            }

        }
        EXEC NS.changeValuePackSku(sku);
    }

END
META defineDocumentPackSkuStock(object, skuProp, stockProp, NS)
    @defineDocumentPackSkuStockCustom(object, object##Detail, skuProp, stockProp, NS);
END


META extendFormDocumentPackSkuStockCustom(object, form, concrete, stockProp, toShowProp, NS)

    EXTEND FORM form
        PROPERTIES SHOWIF toShowProp###object(concrete)  BEFORE quantitySku###object###stockProp(s, concrete, st) NS.idBarcodePackSku(s) READONLY,
                   NS.shortNameUOMPackSku(s) READONLY, NS.amountPackSku(s) ON CHANGE changeAmountPackSku###object###Stock(s, concrete, st),
                   quantityPackSku###object###stockProp(s, concrete, st) ON CHANGE changeQuantityPackSku###object###Stock(s, concrete, st)
    ;
END

//numberDocument(order) += numberOrder(order);
//seriesDocument(order) += seriesOrder(order);
//dateDocument(order) += dateOrder(order);
//
//skuDocumentDetail(orderDetail) += skuOrderDetail(orderDetail);
//quantityDocumentDetail(orderDetail) += quantityOrderDetail(orderDetail);
//priceDocumentDetail(orderDetail) += priceOrderDetail(orderDetail);
//
//documentDocumentDetail(orderDetail) += orderOrderDetail(orderDetail);
