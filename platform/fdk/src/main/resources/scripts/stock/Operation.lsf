MODULE Operation;

REQUIRE Utils, Historizable;

CLASS ABSTRACT operation 'Операция' : named, historizable;
TABLE operation(operation);

META defineRecursionGroupChoose(object, prefix)

    levelParent###prefix###object###legalEntityGroup (object, legalEntityGroup) = GROUP MIN level###legalEntityGroup###legalEntityGroup(legalEntityGroup, parent) IF is###prefix##Group###object(parent, object)
                                                                   BY object, legalEntityGroup PERSISTENT;
    nearestParent###prefix##Group###legalEntityGroup (object, legalEntityGroup) = legalEntityGroup###legalEntityGroup###level(legalEntityGroup, levelParent###prefix###object###legalEntityGroup(object, legalEntityGroup));
    nearest###is###prefix##Group###object (legalEntityGroup, object) =
        is###prefix##Group###object(nearestParent###prefix##Group###legalEntityGroup(object, legalEntityGroup), object) PERSISTENT;

    is###prefix##Group###object##Over 'Отм' (legalEntityGroup, object) =
        UNION OVERRIDE nearest###is###prefix##Group###object(legalEntityGroup, object),
                       is###prefix##Group###object(legalEntityGroup, object);

    is###prefix###object##Over 'Отм' (legalEntity, object) =
        (UNION OVERRIDE nearest###is###prefix##Group###object(legalEntityGroup###legalEntity(legalEntity), object),
                        is###prefix###object(legalEntity, object));

END

META defineOperationObject(prefix, object, char)

    prefix###operation###object = ABSTRACT prefix###operation (object) PERSISTENT;
    name###prefix###operation###object 'Операция' = name(prefix###operation###object(object));
    prefix###operationUser###object = DATA prefix###operation (user###object);
    name###prefix###operationUser###object 'Операция' = name(prefix###operationUser###object(user###object));
    prefix###operation###object(object) += prefix###operationUser###object(object);

    prefix###operation###object##Detail 'Операция' (object##Detail) = prefix###operation###object(object###object##Detail(object##Detail));
    prefix###operationUser###object##Detail 'Операция' (user###object##Detail) = prefix###operationUser###object(user###object##User###object##Detail(user###object##Detail));

    CONSTRAINT prefix###operationUser###object##Detail(user###object##Detail)
               AND NOT isPriceListType###prefix###operation(priceListTypeUser###object##Detail(user###object##Detail), prefix###operationUser###object##Detail(user###object##Detail))
        CHECKED BY priceListTypeUser###object##Detail
        MESSAGE 'Вид цены должен совпадать с отмеченными в операции';

    CONSTRAINT prefix###operationUser###object(user###object) AND priceListTypeUser###object(user###object)
               AND NOT isPriceListType###prefix###operation(priceListTypeUser###object(user###object), prefix###operationUser###object(user###object))
        CHECKED BY priceListTypeUser###object
        MESSAGE 'Вид цены должен совпадать с отмеченными в операции';

    CONSTRAINT prefix###operationUser###object(user###object)
               AND NOT isSupplier###prefix###operation(supplierUser###object(user###object), prefix###operationUser###object(user###object))
        CHECKED BY supplierUser###object
        MESSAGE 'Поставщик должен совпадать с отмеченными в операции';

    CONSTRAINT prefix###operationUser###object(user###object)
               AND NOT isCustomer###prefix###operation(customerUser###object(user###object), prefix###operationUser###object(user###object))
        CHECKED BY customerUser###object
        MESSAGE 'Покупатель должен совпадать с отмеченными в операции';

    EXTEND FORM user###object
        PROPERTIES(char) name###prefix###operationUser###object
    ;

    EXTEND DESIGN user###object{
        char.documentPrmGroup{
            ADD PROPERTY(name###prefix###operationUser###object) BEFORE PROPERTY(nameCurrencyUser###object);
        }
    }

END

META defineOperationPrefix(prefix, supplierFilter, customerFilter, postfix)

    CLASS prefix###operation 'Операция' : operation;
    TABLE prefix###operation(prefix###operation);

    TABLE priceListType###prefix###operation(priceListType, prefix###operation);
    isPriceListType###prefix###operation 'Отм.' = DATA BOOLEAN (priceListType, prefix###operation);

    TABLE legalEntity###prefix###operation(legalEntity, prefix###operation);
    isSupplier###prefix###operation 'Отм.' = DATA BOOLEAN (legalEntity, prefix###operation);
    isSupplierGroup###prefix###operation 'Отм.' = DATA BOOLEAN (legalEntityGroup, prefix###operation);

    isCustomer###prefix###operation 'Отм.' = DATA BOOLEAN (legalEntity, prefix###operation);
    isCustomerGroup###prefix###operation 'Отм.' = DATA BOOLEAN (legalEntityGroup, prefix###operation);

    TABLE legalEntityGroup###prefix###operation(legalEntityGroup, prefix###operation);
    @defineRecursionGroupChoose(prefix###operation, supplier);
    @defineRecursionGroupChoose(prefix###operation, customer);

    //------------------------------ Накладные ---------------------------------------- //

    @defineOperationObject(prefix, invoice, i);

    //------------------------------ Заказы ---------------------------------------- //

    @defineOperationObject(prefix, order, o);

    //------------------------------- Формы ------------------------------------------- //

    FORM prefix###operation 'Операция'##postfix
        OBJECTS o = prefix###operation FIXED PANEL
        PROPERTIES(o) name, timeCreatedHistorizable, nameUserCreatedHistorizable, hostnameComputerCreatedHistorizable

        OBJECTS pt = priceListType
        PROPERTIES(pt, o) isPriceListType###prefix###operation
        PROPERTIES(pt) READONLY objectClassName, name, nameCurrencyPriceListType
        FILTERGROUP filters
            FILTER 'Показывать отмеченные' 'F9' isPriceListType###prefix###operation(pt, o)

        TREE supplierGroupTree sg = legalEntityGroup PARENT parentLegalEntityGroup
        PROPERTIES READONLY sgTreeName = name(sg)
        PROPERTIES isSupplierGroup###prefix###operation##Over(sg, o)

        OBJECTS s = legalEntity
        PROPERTIES(s, o) isSupplier###prefix###operation##Over
        PROPERTIES(s) READONLY name, fullNameLegalEntity, shortNameOwnershipLegalEntity, nameLegalEntityGroupLegalEntity,
                               addressLegalEntity, phoneLegalEntity,
                               isSupplierLegalEntity, isCompanyLegalEntity, isCustomerLegalEntity
        FILTERS (inLegalEntityGroupLegalEntity(sg, s) OR (s IS legalEntity AND sg IS legalEntityGroup AND NOT legalEntityGroupLegalEntity(s))),
                supplierFilter(s)
        FILTERGROUP filters2
            FILTER 'Показывать отмеченные' 'F10' isSupplier###prefix###operation(s, o)

        TREE customerGroupTree cg = legalEntityGroup PARENT parentLegalEntityGroup
        PROPERTIES READONLY cgTreeName = name(cg)
        PROPERTIES isCustomerGroup###prefix###operation##Over(cg, o)

        OBJECTS c = legalEntity
        PROPERTIES(c, o) isCustomer###prefix###operation##Over
        PROPERTIES(c) READONLY name, fullNameLegalEntity, shortNameOwnershipLegalEntity, nameLegalEntityGroupLegalEntity,
                               addressLegalEntity, phoneLegalEntity,
                               isSupplierLegalEntity, isCompanyLegalEntity, isCustomerLegalEntity
        FILTERS (inLegalEntityGroupLegalEntity(cg, c) OR (c IS legalEntity AND cg IS legalEntityGroup AND NOT legalEntityGroupLegalEntity(c))),
                customerFilter(c)
        FILTERGROUP filters3
            FILTER 'Показывать отмеченные' 'F11' isCustomer###prefix###operation(c, o)

        EDIT prefix###operation OBJECT o
    ;

    DESIGN prefix###operation FROM DEFAULT{
        main{
            NEW headContainer{
                childConstraints = TO THE RIGHT;
                NEW propertyContainer{
                    childConstraints = TO THE BOTTOM;
                    caption = 'Параметры';
                    ADD PROPERTY(name);
                }
                ADD o.historyGroup;
            }
            NEW tabContainer{
                type = TABBED;
                ADD pt.box;
                NEW supplierContainer{
                    childConstraints = TO THE RIGHT;
                    type = SPLITH;
                    caption = 'Поставщики';
                    ADD supplierGroupTree.tree.box;
                    ADD s.box{fillHorizontal = 2.0;}
                }
                NEW customerContainer{
                    childConstraints = TO THE RIGHT;
                    type = SPLITH;
                    caption = 'Покупатели';
                    ADD customerGroupTree.tree.box;
                    ADD c.box{fillHorizontal = 2.0;}
                }
            }
        }
        ADD functions.box;
    }

    FORM prefix###operations 'Операции' TITLE 'Операции'##postfix
        OBJECTS o = prefix###operation
        PROPERTIES(o) READONLY name, timeCreatedHistorizable, nameUserCreatedHistorizable, hostnameComputerCreatedHistorizable
        PROPERTIES(o) ADDFORM, EDITFORM, delete

        DIALOG prefix###operation OBJECT o
    ;

END
