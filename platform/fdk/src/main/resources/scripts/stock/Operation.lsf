MODULE Operation;

REQUIRE Utils, Historizable;

CLASS ABSTRACT Operation 'Операция' : Historizable;
TABLE operation(Operation);

nameOperation 'Наименование' = ABSTRACT ISTRING[100](Operation);

// -------------------------------------- Макросы по созданию операций ---------------------------------- //

META defineOperation(postfix)

    CLASS Operation 'Операция' : Operation.Operation;
    TABLE operation(Operation);

    nameOperation 'Наименование' = DATA ISTRING[100](Operation);
    Operation.nameOperation(operation) += nameOperation(operation);

    TABLE legalEntity###operation(LegalEntity, Operation);
    TABLE legalEntityGroup###operation(LegalEntityGroup, Operation);

    FORM operation 'Операция'##postfix
        OBJECTS o = Operation FIXED PANEL
        PROPERTIES(o) nameOperation, timeCreatedHistorizable, nameUserCreatedHistorizable, hostnameComputerCreatedHistorizable

        EDIT Operation OBJECT o
    ;

    DESIGN operation FROM DEFAULT {
        main {
            preferredSize = (1024, 768);
            NEW topContainer{
                type = SPLITV;
                NEW headContainer{
                    childConstraints = TO THE RIGHTBOTTOM;
                    NEW propertyContainer{
                        childConstraints = TO THE BOTTOM;
                        caption = 'Параметры';
                        ADD PROPERTY(nameOperation);
                    }
                    ADD o.historyGroup;
                }
                NEW tabContainer{
                    type = TABBED;
                }
            }
            ADD functions.box;
        }
    }

    FORM operations 'Операции' TITLE 'Операции'##postfix
        OBJECTS o = Operation
        PROPERTIES(o) READONLY nameOperation, timeCreatedHistorizable, nameUserCreatedHistorizable, hostnameComputerCreatedHistorizable
        PROPERTIES(o) ADDFORM, EDITFORM, delete
    ;

    FORM dialogOperations 'Операции' TITLE 'Операции'##postfix
        OBJECTS o = Operation
        PROPERTIES(o) READONLY nameOperation, timeCreatedHistorizable, nameUserCreatedHistorizable, hostnameComputerCreatedHistorizable
        PROPERTIES(o) ADDFORM, EDITFORM, delete

        DIALOG Operation OBJECT o
    ;

END

// -------------------------------------- Макросы по объявлению операций в документах ---------------------------------- //

META defineDocumentOperation(object, char)

    operation###object = ABSTRACT Operation (###object) PERSISTENT;
    name###operation###object 'Операция' = nameOperation(operation###object(object));
    operationUser###object = DATA Operation (User###object);
    name###operationUser###object 'Операция' = nameOperation(operationUser###object(user###object));
    operation###object(object) += operationUser###object(object);

    operation###object##Detail 'Операция' (object##Detail) = operation###object(object###object##Detail(object##Detail));
    operationUser###object##Detail 'Операция' (user###object##Detail) = operationUser###object(user###object##User###object##Detail(user###object##Detail));

    EXTEND FORM user###object
        PROPERTIES(char) name###operationUser###object
    ;

    EXTEND DESIGN user###object{
        char.documentPrmGroup{
            ADD PROPERTY(name###operationUser###object) BEFORE PROPERTY(nameCurrencyUser###object);
        }
    }

END

// -------------------------------------- Организации ---------------------------------- //

META defineOperationLegalEntity(prop, object, tabcaption)

    // Отметка для групп
    is###prop###group###operation 'Отм.' = DATA BOOLEAN (LegalEntityGroup, Operation);

    levelParent###prop###operation###legalEntityGroup (operation, legalEntityGroup) = GROUP MIN level###legalEntityGroup###legalEntityGroup(legalEntityGroup, parent) IF is###prop##Group###operation(parent, operation)
                                                                   BY operation, legalEntityGroup PERSISTENT;
    nearestParent###prop##Group###legalEntityGroup (operation, legalEntityGroup) = legalEntityGroup###legalEntityGroup###level(legalEntityGroup, levelParent###prop###operation###legalEntityGroup(operation, legalEntityGroup));
    nearest###is###prop##Group###operation (legalEntityGroup, operation) =
        is###prop##Group###operation(nearestParent###prop##Group###legalEntityGroup(operation, legalEntityGroup), operation) PERSISTENT;

    is###prop##Group###operation##Over 'Отм' (legalEntityGroup, operation) =
        nearest###is###prop##Group###operation(legalEntityGroup, operation) OVERRIDE is###prop##Group###operation(legalEntityGroup, operation);

    // Отметка для организаций
    is###prop###operation 'Отм.' = DATA BOOLEAN (LegalEntity, Operation);
    is###prop###operation##Over 'Отм' (legalEntity, operation) =
        nearest###is###prop##Group###operation(legalEntityGroup###legalEntity(legalEntity), operation) OVERRIDE is###prop###operation(legalEntity, operation);

    EXTEND FORM operation
        TREE prop###groupTree object##g = LegalEntityGroup PARENT parentLegalEntityGroup
        PROPERTIES READONLY sgTreeName = nameLegalEntityGroup(object##g)
        PROPERTIES is###prop###Group###operation##Over(object##g, o)

        OBJECTS object = LegalEntity
        PROPERTIES(object, o) is###prop###operation##Over
        PROPERTIES(object) READONLY nameLegalEntity, fullNameLegalEntity, shortNameOwnershipLegalEntity, nameLegalEntityGroupLegalEntity,
                               addressLegalEntity, phoneLegalEntity,
                               isSupplierLegalEntity, isCompanyLegalEntity, isCustomerLegalEntity
        FILTERS isParentLegalEntityGroupLegalEntityGroup(legalEntityGroupLegalEntity(object), object##g) OR
                object IS LegalEntity AND NOT object##g IS LegalEntityGroup OR
                (object IS LegalEntity AND object##g IS LegalEntityGroup AND NOT legalEntityGroupLegalEntity(object))
        FILTERGROUP filters2
                FILTER 'Показывать отмеченные' 'F10' is###prop###operation(object, o)
    ;

    EXTEND DESIGN operation {
        tabContainer {
            NEW prop###Container{
                childConstraints = TO THE RIGHT;
                type = SPLITH;
                caption = tabcaption;
                ADD prop###groupTree.tree.box;
                ADD object.box { fillHorizontal = 2.0; };
            }
        }
    }

END

META defineDocumentOperationLegalEntity(object, prop, caption)
    CONSTRAINT operation###object(object)
               AND NOT is###prop###operation##Over(prop###object(object), operation###object(object))
        CHECKED BY prop###object
        MESSAGE caption##' должен совпадать с отмеченными в операции';
END

//Валюта

META defineOperationCurrency(prop, object, tabcaption)
is###prop###operation 'Отм.' = DATA BOOLEAN (Currency, Operation);

EXTEND FORM operation
    OBJECTS object = Currency
    PROPERTIES(object, o) is###prop###operation
    PROPERTIES(object) READONLY name###prop
    FILTERGROUP filters3
        FILTER 'Показывать отмеченные' 'F11' is###prop###operation(object, o)
;

EXTEND DESIGN operation{
    tabContainer {
        NEW prop###Container{
            caption = tabcaption;
            ADD object.box;
        }
    }
}

END

META defineOperationRole(dumb)

    includeOperation 'Для всех ролей' = DATA BOOLEAN (Operation);

    TABLE userRoleOperation (UserRole, Operation);
    includeDataUserRoleOperation 'Отм.' = DATA BOOLEAN (UserRole, Operation);

    includeUserRoleOperation 'Отм' (role, operation) =
        includeOperation(operation) AND role IS UserRole OVERRIDE includeDataUserRoleOperation(role, operation);

    includeUserOperation (user, operation) = includeOperation(operation) AND user IS User OR includeUserRoleOperation(mainRoleUser(user), operation);

    countOperationsUser (user) = GROUP SUM 1 IF includeUserOperation(user, operation) BY user;
    defaultOperationUser 'Операция по умолчанию' (user) = GROUP MIN operation IF includeUserOperation(user, operation) BY user;


    EXTEND FORM operation
        PROPERTIES(o)  includeOperation

        OBJECTS r = UserRole
        PROPERTIES(r) READONLY nameUserRole
        PROPERTIES(r, o) includeUserRoleOperation

        FILTERGROUP filtersRole
                FILTER 'Показывать отмеченные' 'F8' includeDataUserRoleOperation(r, o)
    ;

    EXTEND DESIGN operation {
        tabContainer {
            NEW roleContainer{
                childConstraints = TO THE BOTTOM;
                caption = 'Роли';
                NEW roleContainer1 {
                    ADD PROPERTY(includeOperation);
                    caption = 'Для всех';
                }
                ADD r.box;
            }
        }
    }

END

META extendFormFilterRole(concrete, form)
    EXTEND FORM form FILTERS includeUserOperation(currentUser(), concrete);
END

META defineDocumentOperationRole(object, objectClass)
    operation###object(o) <- defaultOperationUser(currentUser()) IF countOperationsUser(currentUser()) == 1
        WHEN ASSIGNED(o IS objectClass);
END
META defineDocumentOperationRole(object)
    @defineDocumentOperationRole(object, ###object);
END

META defineOperationProperty(property, caption, container)
    property###operation caption = DATA BOOLEAN (Operation);

    EXTEND FORM operation
        PROPERTIES(o) property###operation
    ;
    EXTEND DESIGN operation {
        container {
            ADD PROPERTY(property###operation);
        }
    }
END

META deriveDocumentOperationProperty(objectClass, property)
    property###objectClass (o) <- property###operation(operation###objectClass(o))
        WHEN CHANGED(operation###objectClass(o));
END