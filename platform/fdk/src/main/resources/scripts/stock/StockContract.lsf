MODULE StockContract;

REQUIRE Contract, Stock;

NAMESPACE Contract;

// ------------------------------------ Договора на перемещение товаров ---------------- //


CLASS ABSTRACT ContractSku 'Договор на поставку' : Contract;
TABLE contractSku(ContractSku);

editContractSku 'Редактировать' = ABSTRACT ACTION (contractSku) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

GROUP paymentGroup 'Взаиморасчеты' : public;

CLASS ContractSkuType 'Тип договора на поставку' {
    sale 'Договор купли-продажи',
    commission 'Договор комиссии'
} : Named;

CLASS ContractSkuForm 'Порядок оплаты договора на поставку' {
    prepayment 'С отсрочкой платежа',
    implement 'По факту реализации',
    requirement 'Платежное требование'
} : Named;

CLASS UserContractSku 'Договор на поставку (польз.)' : ContractSku;

supplierContractSku = DATA LegalEntity (ContractSku);
nameSupplierContractSku 'Поставщик' (contract) = name(supplierContractSku(contract)) IN recognize MAXCHARWIDTH 30 PREFCHARWIDTH 30;
partyAContract (contract) += supplierContractSku(contract);

customerContractSku = DATA LegalEntity (ContractSku);
nameCustomerContractSku 'Покупатель' (contract) = name(customerContractSku(contract)) IN recognize MAXCHARWIDTH 30 PREFCHARWIDTH 30;
partyBContract (contract) += customerContractSku(contract);

TABLE supplierCustomer(LegalEntity, LegalEntity);
@defineContractDefault(contractSku, legalEntity, legalEntity, supplier, customer);

CLASS PaymentCondition 'Условия оплаты';
TABLE paymentCondition(PaymentCondition);

datePaymentCondition 'Дата' = DATA DATE (PaymentCondition) IN base;
datePaymentCondition (paymentCondition) <- currentDate() WHEN ASSIGNED(paymentCondition IS PaymentCondition);
contractPaymentCondition 'Договор' = DATA ContractSku (PaymentCondition) AUTOSET;
numberContractPaymentCondition 'Номер договора' (paymentCondition) = numberContract(contractPaymentCondition(paymentCondition));

TABLE contractSkuDate (ContractSku, DATE);
dataPaymentConditionContractDate 'Условия оплаты для контракта и даты' (contract, date) =
    GROUP UNIQUE paymentCondition BY contractPaymentCondition(paymentCondition), datePaymentCondition(paymentCondition) PERSISTENT;

datePaymentConditionContractDate 'Дата' (contract, date) =
    GROUP MAX datePaymentCondition(paymentCondition) AND datePaymentCondition(paymentCondition) <= (date AS DATE)
    BY contractPaymentCondition(paymentCondition), date;

paymentConditionContractDate 'Условия оплаты по договору на дату' (contract, date) =
    dataPaymentConditionContractDate(contract, datePaymentConditionContractDate(contract, date));

currentPaymentConditionContract 'Текущие условия оплаты по договору' (contract) =
    dataPaymentConditionContractDate(contract, datePaymentConditionContractDate(contract, currentDate()));

typePaymentCondition = DATA ContractSkuType (PaymentCondition);
nameTypePaymentCondition 'Тип договора' (paymentCondition) = name(typePaymentCondition(paymentCondition));
isSaleTypePaymentCondition(paymentCondition) = typePaymentCondition(paymentCondition) == ContractSkuType.sale;

formPaymentCondition = DATA ContractSkuForm (PaymentCondition);
nameFormPaymentCondition 'Порядок оплаты' (paymentCondition) = name(formPaymentCondition(paymentCondition));
isPrepaymentFormPaymentCondition(paymentCondition) = formPaymentCondition(paymentCondition) == ContractSkuForm.prepayment;

isSaleTypePrepaymentFormPaymentCondition(paymentCondition) = isSaleTypePaymentCondition(paymentCondition) AND isPrepaymentFormPaymentCondition(paymentCondition);

//для обратной совместимости

typeContractSkuDate(contract, date) = typePaymentCondition(paymentConditionContractDate(contract, date));
typeContractSku(contract) = typeContractSkuDate(contract, currentDate());
nameTypeContractSku 'Тип договора' (contract) = name(typeContractSku(contract));
formContractSkuDate(contract, date) = formPaymentCondition(paymentConditionContractDate(contract, date));
formContractSku(contract) = formContractSkuDate(contract, currentDate());
nameFormContractSku 'Условия оплаты' (contract) = name(formContractSku(contract));

CLASS PaymentPeriod 'Период рассрочки';
TABLE paymentPeriod(PaymentPeriod);

countDaysPaymentPeriod 'Кол-во дней' = DATA INTEGER (PaymentPeriod);
percentPaymentPeriod 'Процент' = DATA NUMERIC[8,3] (PaymentPeriod);
paymentConditionPaymentPeriod 'Условия оплаты периода рассрочки' = DATA PaymentCondition (PaymentPeriod);

CLASS BonusPeriod 'Период бонуса';
TABLE bonusPeriod(BonusPeriod);

countDaysBonusPeriod 'Кол-во дней' = DATA INTEGER (BonusPeriod);
percentBonusPeriod 'Процент' = DATA NUMERIC[8,3] (BonusPeriod);
paymentConditionBonusPeriod 'Условия оплаты периода бонуса' = DATA PaymentCondition (BonusPeriod);

bonusPeriodPaymentConditionDays(paymentCondition, days) = GROUP UNIQUE bonusPeriod BY paymentConditionBonusPeriod(bonusPeriod),
                                                                                      countDaysBonusPeriod(bonusPeriod)
                                                                                   WHERE bonusPeriod IS BonusPeriod;

sumPercentPaymentCondition(paymentCondition) = GROUP SUM percentPaymentPeriod(paymentPeriod) BY paymentConditionPaymentPeriod(paymentPeriod);
CONSTRAINT sumPercentPaymentCondition(paymentCondition) != 100.0 CHECKED BY sumPercentPaymentCondition
    MESSAGE 'Сумма процентов рассрочки должна быть равна 100';

FORM paymentCondition 'Условия оплаты'

    OBJECTS pc = PaymentCondition FIXED PANEL
    PROPERTIES(pc) datePaymentCondition, numberContractPaymentCondition, nameTypePaymentCondition, nameFormPaymentCondition

    OBJECTS pp = PaymentPeriod FIXED GRID
    PROPERTIES(pp) countDaysPaymentPeriod SHOWIF isSaleTypePrepaymentFormPaymentCondition(pc),
                   percentPaymentPeriod SHOWIF isSaleTypePrepaymentFormPaymentCondition(pc)
    PROPERTIES(pp) ADDOBJ SHOWIF isSaleTypePrepaymentFormPaymentCondition(pc),
                   delete SHOWIF isSaleTypePrepaymentFormPaymentCondition(pc)

    OBJECTS bp = BonusPeriod
    PROPERTIES(bp) countDaysBonusPeriod, percentBonusPeriod
    PROPERTIES(bp) ADDOBJ, delete

    FILTERS paymentConditionPaymentPeriod(pp) == pc,
            paymentConditionBonusPeriod(bp) == pc

    EDIT PaymentCondition OBJECT pc
;

// Формы
FORM userContractSku 'Договор на поставку товаров'
    OBJECTS c=UserContractSku FIXED PANEL
    PROPERTIES(c) nameSupplierContractSku, nameCustomerContractSku,
                  numberContract, dateFromContract, dateToContract,
                  nameCurrencyContract, noteContract

    OBJECTS pc = PaymentCondition
    PROPERTIES(pc) READONLY datePaymentCondition, numberContractPaymentCondition, nameTypePaymentCondition,
                            nameFormPaymentCondition
    PROPERTIES(pc) ADDSESSIONFORM, EDITSESSIONFORM, delete
    ORDER BY datePaymentCondition

    FILTERS contractPaymentCondition(pc) == c

    EDIT UserContractSku OBJECT c
;

editUserContractSku 'Редактировать' = ACTION EDITFORM UserContractSku;
editContractSku(userContractSku) += editUserContractSku(userContractSku);

addUserContractSkuSupplierCustomer 'Добавить' = ACTION (supplier, customer) {

    FOR ADDOBJ uc = UserContractSku DO {
        SET supplierContractSku(uc) <- (supplier AS LegalEntity);
        SET customerContractSku(uc) <- (customer AS LegalEntity);
        FORM userContractSku OBJECTS c = uc DOCKEDMODAL;
        IF TRUE AND NOT formResult() == FormResult.ok THEN {
            EXEC delete(uc);
        }
    }
} IMAGE 'add.png' EDITKEY 'INSERT' HIDE TOOLBAR;

isUserContractSku (contractSku) = TRUE IF contractSku IS UserContractSku;

addUserContractSku 'Добавить' = ACTION ADDFORM UserContractSku;

FORM contractSkus 'Договора на поставку'
    OBJECTS c=ContractSku
    PROPERTIES(c) READONLY nameSupplierContractSku, nameCustomerContractSku, numberContract, dateFromContract, dateToContract,
                           nameCurrencyContract, noteContract, nameTypeContractSku,
                           nameFormContractSku

    PROPERTIES() addUserContractSku TODRAW c
    PROPERTIES(c) editContractSku, delete FORCE PANEL TOOLBAR SHOWIF isUserContractSku(c)

    DIALOG ContractSku OBJECT c
;

NAVIGATOR {
    stockMasterData {
        ADD contractSkus;
    }
}

// ----------------------------- Расширяем форму организаций ------------------------------------------- //

EXTEND FORM legalEntity

    OBJECTS css = UserContractSku
    PROPERTIES(css) READONLY numberContract, nameTypeContractSku, nameFormContractSku, dateFromContract,
                    dateToContract, nameCurrencyContract, noteContract
    PROPERTIES addUserContractSkuSupplierCustomer(s, l) TODRAW css FORCE PANEL TOOLBAR
    PROPERTIES(css)  EDITSESSIONFORM, delete SHOWIF isUserContractSku(css)
    FILTERS customerContractSku(css) == l,
            supplierContractSku(css) == s

    FILTERGROUP filters
        FILTER 'Есть договор' 'F10' countContractPartyAPartyB(s, l)

    OBJECTS csc = UserContractSku
    PROPERTIES(csc) READONLY numberContract, nameTypeContractSku, nameFormContractSku, dateFromContract,
                    dateToContract, nameCurrencyContract, noteContract
    PROPERTIES addUserContractSkuSupplierCustomer(l, c) TODRAW csc FORCE PANEL TOOLBAR
    PROPERTIES(csc) EDITSESSIONFORM, delete SHOWIF isUserContractSku(csc)
    FILTERS customerContractSku(csc) == c,
            supplierContractSku(csc) == l

    FILTERGROUP filters
        FILTER 'Есть договор' 'F8' countContractPartyAPartyB(l, c)
;

EXTEND DESIGN legalEntity {

    docContainer{
        type = TABBED;
        ADD css.box;
    }
    docContainer2{
        type = TABBED;
        ADD csc.box;
    }
}
