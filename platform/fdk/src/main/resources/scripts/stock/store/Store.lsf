MODULE Store;

REQUIRE System, Utils, Historizable, Stock, Employee, Tax, WriteOff, LegalEntity, Retail, Bank, Cash;

// -------------------------------------- Торговая сеть ------------------------------- //

CLASS chainStores 'Торговая сеть' : stockGroup;
TABLE chainStores (chainStores);

// -------------------------------------- Формат магазина ----------------------------- //

CLASS storeType 'Формат магазина' : stockGroup;
TABLE storeType (storeType);

chainStoresStoreType = DATA chainStores (storeType) NOT NULL DELETE;
nameChainStoresStoreType 'Торговая сеть' (storeType) = name(chainStoresStoreType(storeType)) IN base;

inChainStoresStoreType(chainStores, storeType) = chainStoresStoreType(storeType) == chainStores;

parentStockGroup (storeType) += chainStoresStoreType(storeType);

FORM chainStores 'Торговая сеть'
    OBJECTS n=chainStores FIXED PANEL
    PROPERTIES(n) name

    OBJECTS s=storeType
    PROPERTIES(s) name
    PROPERTIES(s) ADDOBJ, delete
    FILTERS inChainStoresStoreType(n, s)

    EDIT chainStores OBJECT n
;

// -------------------------------------- Магазин ------------------------------- //

CLASS store 'Магазин' : stockGroup, taxUnit, POI;
TABLE store (store);

legalEntityStore = DATA legalEntity (store) NOT NULL;
nameLegalEntityStore 'Компания' (store) = name(legalEntityStore(store)) IN base;

bankAccountStore = DATA Bank.account (store);
bankAccountStore(store) <- accountLegalEntity(legalEntityStore(store))
    WHEN CHANGED(legalEntityStore(store));
numberBankAccountStore 'Номер счета для инкасаций' = Bank.numberAccount(bankAccountStore(store));

CONSTRAINT Bank.legalEntityAccount(bankAccountStore(store)) != legalEntityStore(store)
    CHECKED BY bankAccountStore MESSAGE 'Организация магазина должна совпадать с организацией расчетного счета';

isCompanyStore(store) = isCompanyLegalEntity(legalEntityStore(store));

languageStore (store) = languageLegalEntity(legalEntityStore(store));

regionStore = DATA region (store);
nameRegionStore 'Регион' (store) = name(regionStore(store));

addressStore 'Адрес' = DATA STRING[100] (store);
addressPOI (store) += addressStore(store);

latitudeStore 'Координата X' = DATA NUMERIC[10,5](store);
longitudeStore 'Координата Y' = DATA NUMERIC[10,5](store);

latitudePOI (store) += latitudeStore(store);
longitudePOI (store) += longitudeStore(store);

storeTypeStore = DATA storeType (store) AUTOSET;
nameStoreTypeStore 'Формат' (store) = name(storeTypeStore(store)) IN base;

inStoreTypeStore (storeType, store) = storeTypeStore (store) == storeType;

chainStoresStore (store) = chainStoresStoreType(storeTypeStore(store));
nameChainStoresStore 'Торговая сеть' (store) = name(chainStoresStore(store)) IN base;

inChainStoresStore (chainStores, store) = chainStoresStore(store) == chainStores;

parentStockGroup (store) += storeTypeStore(store);

taxUnitGroupTaxUnit(store) += legalEntityStore(store);
descriptionTaxUnit(store) += string2SP(name(store), addressStore(store));

inChainStoresStoreTypeStore (chainStores, storeType, store) =
    (storeTypeStore(store) == storeType AND chainStores) OR
    (chainStoresStore(store) == chainStores AND NOT storeType) OR
    (store IS store AND NOT storeType AND NOT chainStores);

// -------------------------------------- Отдел магазина ------------------------------- //

CLASS departmentStore 'Отдел магазина' : stock;
TABLE departmentStore (departmentStore);
TABLE departmentStoreDate (departmentStore, DATE);

storeDepartmentStore = DATA store (departmentStore) AUTOSET;
nameStoreDepartmentStore 'Магазин' (departmentStore) = name(storeDepartmentStore(departmentStore)) IN base;
stockGroupStock (departmentStore) += storeDepartmentStore(departmentStore);

inStoreDepartment(store, departmentStore) = storeDepartmentStore(departmentStore) == store;

storeTypeDepartmentStore(departmentStore) = storeTypeStore(storeDepartmentStore(departmentStore)) PERSISTENT;
chainStoresDepartmentStore(departmentStore) = chainStoresStoreType(storeTypeDepartmentStore(departmentStore)) PERSISTENT;

legalEntityDepartmentStore (departmentStore) = legalEntityStore(storeDepartmentStore(departmentStore)) PERSISTENT;
legalEntityStock (stock) += legalEntityDepartmentStore(stock);

userLegalEntityDepartmentStore 'Отм.' = DATA BOOLEAN (legalEntity, departmentStore);
userLegalEntityStock(legalEntity, stock) += userLegalEntityDepartmentStore(legalEntity, stock);

nameLegalEntityDepartmentStore 'Компания' (departmentStore) = name(legalEntityDepartmentStore(departmentStore));

primaryDepartmentStoreStore 'Основной отдел' (store) =
    GROUP MIN departmentStore BY storeDepartmentStore(departmentStore);

addressDepartmentStore 'Адрес' (departmentStore) = addressStore(storeDepartmentStore(departmentStore));
addressStock (departmentStore) += addressDepartmentStore(departmentStore);

latitudeDepartmentStore 'Координата X' (departmentStore) = latitudeStore(storeDepartmentStore(departmentStore));
longitudeDepartmentStore 'Координата Y' (departmentStore) = longitudeStore(storeDepartmentStore(departmentStore));

latitudePOI (departmentStore) += latitudeDepartmentStore(departmentStore);
longitudePOI (departmentStore) += longitudeDepartmentStore(departmentStore);

explicitBatchLedgerDepartmentStore 'Партионный учет' = DATA BOOLEAN (departmentStore);
explicitBatchLedgerStock(stock) += explicitBatchLedgerDepartmentStore(stock);

regionStock(stock) += regionStore(storeDepartmentStore(stock));

@defineHistorizable(tradingSquareDepartmentStore, 'Торговая площадь', NUMERIC[10,2], departmentStore, name, public);

tradingSquareStoreDate (store, date) = GROUP SUM tradingSquareDepartmentStoreDate(departmentStore, date) BY storeDepartmentStore(departmentStore), date;
tradingSquareStore 'Торговая площадь' (store) = tradingSquareStoreDate(store, currentDate());

cashAccountDepartmentStore 'Счет' = DATA Cash.account (departmentStore);
numberCashAccountDepartmentStore 'Номер счета' = Cash.numberAccount(cashAccountDepartmentStore(departmentStore));

CONSTRAINT legalEntityDepartmentStore(departmentStore) != Cash.legalEntityAccount(cashAccountDepartmentStore(departmentStore))
    CHECKED BY cashAccountDepartmentStore MESSAGE 'Организация отдела магазина должна совпадать с организацией счета';

inChainStoresStoreTypeStoreDepartmentStore (chainStores, storeType, store, department) =
    (storeDepartmentStore(department) == store AND storeType AND chainStores) OR
    (storeTypeDepartmentStore(department) == storeType AND chainStores AND NOT store) OR
    (chainStoresDepartmentStore(department) == chainStores AND NOT store AND NOT storeType) OR
    (department IS departmentStore AND NOT store AND NOT storeType AND NOT chainStores);

// -------------------------------------- Формы отдела магазинов ------------------------------------------ //

FORM departmentStore 'Отдел магазина'
    OBJECTS d = departmentStore FIXED PANEL
    PROPERTIES(d) nameDep=name, nameStoreDepartmentStore, tradingSquareDepartmentStore, nameWriteOffCommitteeStock,
                  explicitBatchLedgerStock, numberCashAccountDepartmentStore

    OBJECTS e = employee
    PROPERTIES(e) READONLY firstNameContact, lastNameContact
    PROPERTIES(e) ADDSESSIONFORM, EDITSESSIONFORM, delete
    FILTERS inEmployeeDivisionEmployee(d, e)

    EDIT departmentStore OBJECT d
;

DESIGN departmentStore FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        d.panel {
            childConstraints = TO THE BOTTOM;
            NEW topContainer {
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(nameDep);
                ADD PROPERTY(nameStoreDepartmentStore);
                ADD PROPERTY(tradingSquareDepartmentStore);
                ADD PROPERTY(numberCashAccountDepartmentStore);
            }
            NEW row {
                childConstraints = TO THE BOTTOM;
                NEW row1 {
                    childConstraints = TO THE RIGHT;
                    ADD d.committeeGroup {childConstraints = TO THE BOTTOM;}
                }
                NEW row2 {
                    childConstraints = TO THE RIGHT;
                    ADD d.bookkeepingGroup {childConstraints = TO THE BOTTOM;}
                    NEW row21{
                        title = 'Создавать по умолчанию';
                        childConstraints = TO THE BOTTOM;
                    }

                }
            }

        }
    }
}

editDepartmentStore 'Редактировать' = ACTION EDITFORM departmentStore;
editStock(stock) += editDepartmentStore(stock);

editSessionDepartmentStore 'Редактировать' = ACTION EDITFORM SESSION departmentStore;
editSessionStock(stock) += editSessionDepartmentStore(stock);

FORM departmentStores 'Отделы магазинов'
    TREE treeStore a=STRING[3], t=chainStores, st=storeType, s=store
    PROPERTIES READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS stringEqualsAll(a), inChainStoresStoreType (t, st), inStoreTypeStore(st, s)

    OBJECTS d=departmentStore
    PROPERTIES(d) READONLY depName = name
    FILTERS inChainStoresStoreTypeStoreDepartmentStore(t, st, s, d)
    ORDER BY depName

    DIALOG departmentStore OBJECT d
;

DESIGN departmentStores FROM DEFAULT {
    POSITION treeStore.tree.box TO THE LEFT d.box;
    treeStore.tree {
        fillHorizontal = 0.3;
    }
    d.grid {
        defaultComponent = TRUE;
    }
}

FORM store 'Магазин'
    OBJECTS s=store FIXED PANEL
    PROPERTIES(s) name, addressStore, nameStoreTypeStore, tradingSquareStore, nameLegalEntityStore, numberBankAccountStore,
                  nameRegionStore, latitudePOI, longitudePOI, showOnMapPOI

    OBJECTS d=departmentStore
    PROPERTIES(d) READONLY objectClassName, name, tradingSquareDepartmentStore
    PROPERTIES(d)          ADDSESSIONFORM, EDITSESSIONFORM, delete
    FILTERS inStoreDepartment(s, d)

    EDIT store OBJECT s
;

// -------------------------------------- Формы магазинов ------------------------------------------ //

FORM stores 'Магазины'
    TREE treeStore a=STRING[3], t=chainStores, st=storeType
    PROPERTIES READONLY OBJVALUE(a), name(t), name(st)

    FILTERS stringEqualsAll(a)
    FILTERS inChainStoresStoreType (t, st)

    PROPERTIES(t)          addT=ADDFORM FORCE PANEL, editT=EDITFORM FORCE PANEL, delete FORCE PANEL TOOLBAR

    OBJECTS s=store
    PROPERTIES(s) READONLY name, addressStore, nameStoreTypeStore, nameLegalEntityStore, nameRegionStore
    PROPERTIES(s)          ADDFORM, EDITFORM, delete TOOLBAR
    FILTERS inChainStoresStoreTypeStore(t, st, s)

    OBJECTS d=departmentStore
    PROPERTIES(d) READONLY objectClassName, name
    FILTERS inStoreDepartment(s, d)
;

DESIGN stores FROM DEFAULT {


    NEW topContainer {

        type = SPLITH;
        childConstraints = TO THE RIGHT;

        ADD treeStore.tree.box;

        NEW firstCase {

            type = SPLITV;
            childConstraints = TO THE BOTTOM;
            fillHorizontal = 3;

            ADD s.box;
            ADD d.box;
        }
    }

    PROPERTY (delete(t)) {
        caption = 'Удалить';
        askConfirm = TRUE;
    }

    PROPERTY (addT) {
        caption = 'Добавить';
    }

    PROPERTY (editT) {
        caption = 'Ред-ть';
        maximumCharWidth = 5;
    }

    ADD functions.box;
}

NAVIGATOR {
    retailMasterData {
        ADD stores;
    }
}

// -------------------------------------- Макросы ----------------------------------------------- //

META defineDocumentHeaderDepartmentStore (object)
    @defineDocumentHeaderStock(object, departmentStore, 'Отдел магазина');
END

META defineDocumentDetailDepartmentStoreCustom (object, detail)
   @defineDocumentDetailStock (object, detail, departmentStore, 'Отдел магазина');
   store###detail (detail) = storeDepartmentStore(departmentStore###detail(detail));
   nameStore###detail 'Магазин' (detail) = name(store###detail(detail));
END
META defineDocumentDetailDepartmentStore (object)
    @defineDocumentDetailDepartmentStoreCustom (object, object##Detail);
END

META defineDocumentDepartmentStore (object)
    @defineDocumentHeaderDepartmentStore(object);
    @defineDocumentDetailDepartmentStore(object);
END

addStoreLegalEntity 'Добавить магазин' = ACTION (legalEntity) {

    FOR ADDOBJ st = store DO {
        SET legalEntityStore(st) <- legalEntity;
        FORM store OBJECTS s = st DOCKEDMODAL;
    }
}

EXTEND FORM legalEntity

    PROPERTIES addStoreLegalEntity(l) TODRAW st FORCE PANEL TOOLBAR
;

