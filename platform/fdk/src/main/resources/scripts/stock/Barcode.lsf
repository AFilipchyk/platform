MODULE Barcode;

REQUIRE System, Stock, Utils, Numerator;

CLASS barcode 'Штрих код';
TABLE barcode (barcode);
TABLE stringDate (STRING[14], DATE);

idBarcode 'Штрих код' = DATA STRING[14] (barcode) IN recognize FIXEDCHARWIDTH 14 AGGPROP INDEXED;

dataDateBarcode 'Дата действия' = DATA DATE (barcode);
dateBarcode 'Дата действия' = (2001_01_01 IF barcode IS barcode) OR dataDateBarcode(barcode) IN base PERSISTENT;

dataBarcodeIdDate (id, date) = GROUP UNIQUE barcode BY idBarcode(barcode), dateBarcode(barcode) WHERE barcode IS barcode PERSISTENT;
orderBarcodeIdDate 'Дата действия' (id, date) = GROUP MAX LIST(dateIn, dataBarcodeIdDate(id, dateIn)) IF dateIn <= (date AS DATE) BY id, date IN base;
barcodeIdDate (id, date) = orderBarcodeIdDate(id, date)[2];

barcodeId (id) = barcodeIdDate(id, currentDate());
activeBarcode 'Активный' (barcode) = barcodeId(idBarcode(barcode)) == barcode;

dataAmountBarcode 'Множитель' = DATA NUMERIC[14,3] (barcode);
amountBarcode 'Множитель' = (1.0 IF barcode IS barcode) OR dataAmountBarcode (barcode) PERSISTENT;

completeBarcode = FORMULA STRING[13] 'completeBarcode($1)';

// Sku
skuBarcode = DATA sku(barcode) IN base NOT NULL DELETE;
nameSkuBarcode 'Наименование' (barcode) = nameSku(skuBarcode(barcode)) IN recognize;

skuBarcodeIdDate (id, date) = skuBarcode(barcodeIdDate(id, date));

dataBarcodeSku = DATA barcode (sku);
CONSTRAINT skuBarcode(dataBarcodeSku(item)) != item CHECKED BY dataBarcodeSku MESSAGE 'Выбран неверный sku для штрих-кода';

barcodeSku(sku) = [GROUP MIN barcode BY skuBarcode(barcode)](sku) OR dataBarcodeSku(sku) PERSISTENT;

primaryBarcode 'Основной' (barcode) = barcodeSku(skuBarcode(barcode)) == barcode;
changePrimaryBarcodeSku = ACTION (barcode, sku) {
    REQUEST BOOLEAN INPUT;
    IF requestedLogical() THEN {
        SET dataBarcodeSku(sku) <- barcode;
    }
}

idBarcodeSku 'Штрих-код' (sku) = idBarcode(barcodeSku(sku)) IN base AGGPROP PERSISTENT;
idBarcodeSkuBatch 'Штрих-код' (batch) = idBarcodeSku(skuBatch(batch));
idBarcodeSkuSkuLedger 'Штрих-код' (skuLedger) = idBarcodeSku(skuSkuLedger(skuLedger));

dataUOMBarcode = DATA UOM (barcode);
UOMBarcode = UOMSku(skuBarcode(barcode)) OR dataUOMBarcode(barcode) PERSISTENT;
shortNameUOMBarcode 'Единица измерения' (barcode) = shortName(UOMBarcode(barcode));

// Атрибуты вытянутые от sku

skuGroupBarcode (barcode) = skuGroupSku(skuBarcode(barcode));

isWeightBarcode(barcode) = isWeightSku(skuBarcode(barcode));

countryBarcode (barcode) = countrySku(skuBarcode(barcode));
nameCountryBarcode 'Страна' (barcode) = name(countryBarcode(barcode));

expiryDateBarcodeStock 'Годен до (max.)' (barcode, stock) = expiryDateSkuStock(skuBarcode(barcode), stock);

// Генерация штрих-кодов

barcodeNumeratorSku = ABSTRACT numerator (sku);

generateBarcodeSku 'Сгенерировать штрих-код' = ACTION (sku) {
    ADDOBJ barcode;
    FOR b == addedObject() DO {
        SET skuBarcode(b) <- sku;
        SET idBarcode(b) <- completeBarcode(curStringValueNumerator(barcodeNumeratorSku(sku)));
        EXEC incrementValueNumerator(barcodeNumeratorSku(sku));
    };
} TOOLBAR CONFIRM;

FORM barcodeDialog 'Штрих код'
    OBJECTS b = barcode
    PROPERTIES (b) READONLY idBarcode, nameSkuBarcode, dateBarcode, shortNameUOMBarcode, amountBarcode, activeBarcode, primaryBarcode//, ordersBarcode
    PROPERTIES (b) ADDSESSIONFORM, EDITSESSIONFORM, delete
    DIALOG barcode OBJECT b
;

// ----------------------------------- Форма по вводу штрих-кода ---------------------------- //

barcodeInput 'Штрих-код' = DATA SESSION STRING[13] () EVENTID 'SCANNER';
changeBarcodeInput = ACTION () {
    REQUEST STRING[13] INPUT;
    SET barcodeInput() <- requestedString();
    EXEC formOk();
}
FORM barcodeInput 'Ввод штрих-кода'
    PROPERTIES() barcodeInput ON CHANGE EXEC changeBarcodeInput()
;

DESIGN barcodeInput FROM DEFAULT {
    PROPERTY (barcodeInput) {
        caption = 'Штрих-код';
        font = 'Tahoma bold 64';
        panelLabelAbove = TRUE;
        editKey = 'F4';
        focusable = TRUE;
    }
}

// ------------------------------------ Добавление сканированием строк в документ ----------------------//

sessionSku = DATA SESSION sku();

createSkuBarcodeDate = ABSTRACT ACTION (barcode, date);

skuAddedUser = DATA sku(user);
setSkuAddedUser = ACTION (sku) NEWSESSION AUTOAPPLY {
    SET skuAddedUser(u) <- sku WHERE u == currentUser();
}

META defineAddDetailDialogBarcodeCustom(object, idetail, skuProp)
    idetail###object##Sku(object, sku) = GROUP MAX detail BY object###idetail(detail), skuProp###idetail(detail);

    addDetailBarcode###idetail###object = ACTION (object, barcode) {
        LOCAL dialogBarcodeSku = sku ();
        SET dialogBarcodeSku() <- skuBarcodeIdDate(barcode, date###object(object));

        IF TRUE AND NOT dialogBarcodeSku() IS sku THEN {
            EXEC createSkuBarcodeDate(barcode, date###object(object));
            SET dialogBarcodeSku() <- skuBarcodeIdDate(barcode, date###object(object));
        }

        IF dialogBarcodeSku() IS sku THEN {
            LOCAL dialogBarcodeDetail = idetail();
            SET dialogBarcodeDetail() <- idetail###object##Sku(object, dialogBarcodeSku());
            IF dialogBarcodeDetail() IS idetail THEN {
                SET quantity###idetail(detail) IF detail == dialogBarcodeDetail() <-
                    quantity###idetail(detail) (+) (amountBarcode(barcodeIdDate(barcode, date###object(object))) IF detail IS idetail);
            } ELSE {
                FOR ADDOBJ w = idetail DO {
                    SET object###idetail(w) <- object;
                    SET skuProp###idetail(w) <- dialogBarcodeSku();
                    SET quantity###idetail(w) <- amountBarcode(barcodeIdDate(barcode, date###object(object)));
                }
            }
            EXEC setSkuAddedUser(dialogBarcodeSku());
        } ELSE {
            MESSAGE 'Штрих-код не найден';
        }
    }

    addDetailDialogBarcode###idetail###object 'Ввод штрих-кода' = ACTION (object) {
        FORM barcodeInput MODAL;

        IF formResult() == formResult.ok THEN
            EXEC addDetailBarcode###idetail###object(object, barcodeInput());
    } TOOLBAR EDITKEY 'F4';

    changeAddDetailInputBarcode###idetail###object = ACTION (object) {
        REQUEST STRING[14] INPUT;
        EXEC addDetailBarcode###idetail###object(object, requestedString());
    };
    addDetailInputBarcode###idetail###object 'Ввод штрих-кода :' (object) = DATA SESSION STRING[14] (object) TOOLBAR EDITKEY 'F4' EVENTID 'SCANNER'
                                                                            ON CHANGE EXEC changeAddDetailInputBarcode###idetail###object(object);
END

META defineAddDetailDialogBarcode(object, skuProp)
    @defineAddDetailDialogBarcodeCustom(object, object##Detail, skuProp);
END

// ----------------------------------- Расширение подбора товаров ---------------------------- //

META defineDialogSkuBarcode (form)
    EXTEND FORM form
        PROPERTIES READONLY idBarcodeSku(s), idBarcodeSku(si)
    ;
END

@defineDialogSkuBarcode(dialogSku);

EXTEND FORM skus
    PROPERTIES(s) READONLY idBarcodeSku AFTER nameSku
;

EXTEND FORM currentBalanceSkuStock
    PROPERTIES(s) READONLY idBarcodeSku AFTER nameSku
;

EXTEND FORM currentBalanceBatchStock
    PROPERTIES(bt) READONLY idBarcodeSkuBatch AFTER nameSkuBatch
;

EXTEND FORM costSkuLedger
    PROPERTIES(bil) READONLY idBarcodeSkuSkuLedger AFTER nameSkuSkuLedger
;
EXTEND FORM batchDialog
    PROPERTIES(bt) READONLY idBarcodeSkuBatch AFTER nameSkuBatch
;
EXTEND FORM dialogBatch
    PROPERTIES(bt) READONLY idBarcodeSkuBatch AFTER nameSkuBatch
;

// Barcode
META defineDocumentDetailBarcodeCustomPrefix (detail, skuProp, prefixB, prefixS)
    prefixB###barcodePack###detail = DATA barcode (detail);
    prefixB###idBarcodePack###detail 'Штрих-код упаковки' (detail) = idBarcode(prefixB###barcodePack###detail(detail)) IN recognize;
    prefixB###shortNameUOMPack###detail 'Ед. изм. упаковки' = shortNameUOMBarcode(prefixB###barcodePack###detail(detail)) IN recognize;
    prefixB###amountPack###detail 'Кол-во в упаковке' = DATA NUMERIC[14,3] (detail) IN recognize;

    prefixB###amountPack###detail(detail) <- amountBarcode(prefixB###barcodePack###detail(detail)) WHEN CHANGED(prefixB###barcodePack###detail(detail));

    CONSTRAINT skuBarcode(prefixB###barcodePack###detail(detail)) != prefixS###skuProp###detail(detail) CHECKED BY prefixB###barcodePack###detail
        MESSAGE 'Выбран штрих-кода не соответствующий sku';
END
META defineDocumentAbstractDetailBarcodeCustomPrefix (detail, prefixB)
    prefixB###barcodePack###detail = ABSTRACT barcode (detail);
    prefixB###idBarcodePack###detail 'Штрих-код упаковки' (detail) = idBarcode(prefixB###barcodePack###detail(detail)) IN recognize;
    prefixB###shortNameUOMPack###detail 'Ед. изм. упаковки' = shortNameUOMBarcode(prefixB###barcodePack###detail(detail)) IN recognize;
    prefixB###amountPack###detail 'Кол-во в упаковке' = ABSTRACT NUMERIC[14,3] (detail) IN recognize;
END
META defineDocumentInterfaceBarcodeSkuCustomPrefix (detail, skuProp, prefixB, prefixS)
    @defineDocumentAbstractDetailBarcodeCustomPrefix(detail, prefixB);
    @defineDocumentDetailBarcodeCustomPrefix(user###detail, skuProp, prefixB, prefixS);
    prefixB###barcodePack###detail(detail) += prefixB###barcodePack###user###detail(detail);
    prefixB###amountPack###detail(detail) += prefixB###amountPack###user###detail(detail);
END

META defineDocumentInterfaceBarcodeSkuPrefix (object, skuProp, prefixB, prefixS)
    @defineDocumentInterfaceBarcodeSkuCustomPrefix(object###Detail, skuProp, prefixB, prefixS);
END
META defineDocumentInterfaceBarcodeSkuPrefix (object, skuProp, prefixB)
    @defineDocumentInterfaceBarcodeSkuPrefix(object, skuProp, prefixB, );
END

META deriveDocumentDetailQuantityBarcodeCustom (detail, skuProp, prop, toShowProp)
    barcodePack###detail(detail) <- prop###barcodeSku(skuProp###detail(detail)) IF toShowProp###detail(detail)
        WHEN CHANGED(skuProp###detail(detail)) OR CHANGED(toShowProp###detail(detail));
    amountPack###detail(detail) <- amountBarcode(prop###barcodeSku(skuProp###detail(detail))) IF toShowProp###detail(detail)
        WHEN CHANGED(skuProp###detail(detail)) OR CHANGED(toShowProp###detail(detail));
    quantity###detail(detail) <- quantityPack###detail(detail)*amountPack###detail(detail)
        WHEN CHANGED(quantityPack###detail(detail)) OR CHANGED(amountPack###detail(detail));
END

META deriveDocumentQuantityDetailOnChangeQuantityPack (detail);
    changeQuantityPack###detail = ACTION (detail) {
        REQUEST NUMERIC[14,3] INPUT;
        IF requestedNumeric() THEN {
            SET quantityPack###detail(detail) <- requestedNumeric();

            IF  barcodePack###detail(detail) THEN {
                SET quantity###detail(detail) <- quantityPack###detail(detail)*amountPack###detail(detail);
            }
        } ELSE {
            EXEC delete(detail);
        }
    }
END