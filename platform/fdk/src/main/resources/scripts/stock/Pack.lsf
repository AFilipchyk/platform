MODULE Pack;

REQUIRE System,
        Utils,
        Stock,
        Barcode;

PRIORITY Utils, Stock;

GROUP itemPackGroup 'Упаковка товара' : public;

META definePackSku (caption, NS)
    packBarcodeSku 'Штрих-код для '##caption = DATA Barcode (Sku);
    packBarcode 'Штрих-код для '##caption (barcode)=  packBarcodeSku(skuBarcode(barcode)) == barcode;
    
    CONSTRAINT skuBarcode(packBarcodeSku(item)) != item CHECKED BY packBarcodeSku MESSAGE 'Выбран неверный sku для штрих-кода';
    
    changePackBarcodeSku = ACTION (barcode, sku) {
        REQUEST BOOLEAN INPUT;
        IF requestedLogical() THEN {
            SET packBarcodeSku(sku) <- barcode;
        } ELSE
            SET packBarcodeSku(sku) <- NULL;
    }
    
    EXTEND FORM barcodeDialog
        PROPERTIES (b) READONLY NS.packBarcode
    ;
    
    idBarcodePackSku 'Штрих-код упаковки' (sku)= idBarcode(packBarcodeSku(sku));
    shortNameUOMPackSku 'Ед. изм. упаковки' (sku)= shortNameUOMBarcode(packBarcodeSku(sku));
    amountPackSku 'Кол-во в упаковке'(sku) =amountBarcode(packBarcodeSku(sku)) IN itemPackGroup;
    
    changeValuePackSku = ACTION (sku) {
        IF requestedNumeric() THEN {
            IF TRUE AND NOT  packBarcodeSku(sku) THEN {
    
                FOR ADDOBJ b = Barcode DO {
                   SET skuBarcode(b) <- sku;
                   SET amountBarcode (b) <- requestedNumeric();
    
                   SET packBarcodeSku(sku) <- b;
                }
            } ELSE {
                SET amountBarcode (bb) <- requestedNumeric() WHERE bb == packBarcodeSku(sku);
            }
    
        } ELSE {
            IF packBarcodeSku(sku) THEN {
                EXEC delete(packBarcodeSku(sku));
            }
        }
    
    }

    changePackSku = ACTION (sku) {
        REQUEST NUMERIC[14,3] INPUT;
        EXEC changeValuePackSku(sku);
    }
END