MODULE Label;

REQUIRE System, Store, Stock, Barcode;

// Ориентация страницы
CLASS printOrientation 'Ориентация' {
    portrait 'Книжная',
    landscape 'Альбомная'
} : named;

// типы ценников
CLASS labelType 'Тип ценника' : named;
TABLE labelType(labelType);

widthLabelType 'Ширина' = DATA INTEGER (labelType);
heightLabelType 'Высота' = DATA INTEGER (labelType);

orientationLabelType = DATA printOrientation (labelType);
nameOrientationLabelType 'Ориентация' (labelType) = name(orientationLabelType(labelType));

fileTemplateLabelType 'Файл шаблона' = DATA STRING[200] (labelType);

priceListTypeLabelType = DATA priceListType (labelType);
namePriceListTypeLabelType  'Вид цен' (labelType) = name(priceListTypeLabelType(labelType));

TABLE labelTypeStoreType (labelType, storeType);
TABLE labelTypeStore (labelType, store);
TABLE labelTypeDepartmentStore (labelType, departmentStore);

inLabelType 'Включен' = DATA BOOLEAN (labelType);
inLabelType(labelType) <- TRUE WHEN ASSIGNED(labelType IS labelType);

inDataLabelTypeStoreType 'Включен' (labelType, storeType) = DATA BOOLEAN (labelType, storeType);
inLabelTypeStoreType 'Включен' (labelType, storeType) =
    UNION OVERRIDE inLabelType(labelType) AND storeType IS storeType,
                   inDataLabelTypeStoreType(labelType, storeType);
inDataLabelTypeStore 'Включен' (labelType, store) = DATA BOOLEAN (labelType, store);
inLabelTypeStore 'Включен' (labelType, store) =
    UNION OVERRIDE inLabelTypeStoreType(labelType, storeTypeStore(store)),
                   inDataLabelTypeStore(labelType, store);
inDataLabelTypeDepartmentStore 'Включен' (labelType, departmentStore) = DATA BOOLEAN (labelType, departmentStore);
inLabelTypeDepartmentStore 'Включен' (labelType, departmentStore) =
    UNION OVERRIDE inLabelTypeStore(labelType, storeDepartmentStore(departmentStore)),
                   inDataLabelTypeDepartmentStore(labelType, departmentStore);
//-- Приоритет
dataPriorityLabelType 'Приоритет' = DATA INTEGER (labelType);
priorityLabelType 'Приоритет' (labelType) =
    UNION OVERRIDE (0 AND labelType IS labelType),
                   dataPriorityLabelType(labelType);

dataPriorityLabelTypeStoreType 'Приоритет' (labelType, storeType) = DATA INTEGER (labelType, storeType);
priorityLabelTypeStoreType 'Приоритет' (labelType, storeType) =
    UNION OVERRIDE priorityLabelType(labelType) AND storeType IS storeType,
                   dataPriorityLabelTypeStoreType(labelType, storeType);
dataPriorityLabelTypeStore 'Приоритет' (labelType, store) = DATA INTEGER (labelType, store);
priorityLabelTypeStore 'Приоритет' (labelType, store) =
    UNION OVERRIDE priorityLabelTypeStoreType(labelType, storeTypeStore(store)),
                   dataPriorityLabelTypeStore(labelType, store);
dataPriorityLabelTypeDepartmentStore 'Приоритет' (labelType, departmentStore) = DATA INTEGER (labelType, departmentStore);
priorityLabelTypeDepartmentStore 'Приоритет' (labelType, departmentStore) =
    UNION OVERRIDE priorityLabelTypeStore(labelType, storeDepartmentStore(departmentStore)),
                   dataPriorityLabelTypeDepartmentStore(labelType, departmentStore);

groupTypeLabelType = DATA groupType (labelType);
nameGroupTypeLabelType 'Тип классификатора' (labelType) = name(groupTypeLabelType(labelType));

TABLE labelTypeGroup (labelType, group);
dataInLabelTypeGroup 'Вкл.' = DATA BOOLEAN (labelType, group);
TABLE labelTypeSku (labelType, sku);
dataInLabelTypeSku 'Вкл.' = DATA BOOLEAN (labelType, sku);

levelParentLabelTypeGroup (labelType, group) = GROUP MIN levelGroupGroup(group, parent) IF dataInLabelTypeGroup(labelType, parent)
                                                              BY labelType, group PERSISTENT;
nearestParentLabelTypeGroup (labelType, group) = groupGroupLevel(group, levelParentLabelTypeGroup (labelType, group));
nearestInLabelTypeGroup 'Вкл.' (labelType, group) =
    dataInLabelTypeGroup(labelType, nearestParentLabelTypeGroup (labelType, group)) PERSISTENT;

inLabelTypeGroup 'Вкл.' (labelType, group) =
    UNION OVERRIDE nearestInLabelTypeGroup(labelType, group), dataInLabelTypeGroup(labelType, group) PERSISTENT;

inLabelTypeSku 'Вкл.' (labelType, sku) =
    UNION OVERRIDE inLabelTypeGroup(labelType, groupGroupTypeSku(groupTypeLabelType(labelType), sku)),
                   dataInLabelTypeSku(labelType, sku);

listLabelTypeDepartmentStoreSku (labelType, departmentStore) = STRUCT(priorityLabelTypeDepartmentStore(labelType, departmentStore), labelType);


concatSkuDepartmentStore (sku, departmentStore)= GROUP MAX listLabelTypeDepartmentStoreSku (labelType, departmentStore) IF inLabelTypeSku(labelType, sku) AND inLabelTypeDepartmentStore(labelType, departmentStore)
    BY sku, departmentStore;

labelTypeSkuDepartmentStore (sku, departmentStore)= concatSkuDepartmentStore (sku, departmentStore)[2];
nameLabelTypeSkuDepartmentStore 'Тип ценника по умолчанию' (sku, departmentStore)= name(labelTypeSkuDepartmentStore (sku, departmentStore));

//-- Множитель
dataCountLabelLabelTypeGroup 'Множитель' = DATA INTEGER (labelType, group);
dataCountLabelLabelTypeSku 'Множитель' = DATA INTEGER (labelType, sku);

levelParentCountLabelLabelTypeGroup (labelType, group) = GROUP MIN levelGroupGroup(group, parent) IF dataCountLabelLabelTypeGroup(labelType, parent)
                                                              BY labelType, group PERSISTENT;
nearestParentCountLabelLabelTypeGroup (labelType, group) = groupGroupLevel(group, levelParentCountLabelLabelTypeGroup (labelType, group));
nearestCountLabelLabelTypeGroup 'Множитель' (labelType, group) =
    dataCountLabelLabelTypeGroup(labelType, nearestParentCountLabelLabelTypeGroup (labelType, group)) PERSISTENT;

countLabelLabelTypeGroup 'Множитель' (labelType, group) =
    UNION OVERRIDE 1 IF group IS group AND labelType IS labelType,
                   nearestCountLabelLabelTypeGroup(labelType, group),
                   dataCountLabelLabelTypeGroup(labelType, group) PERSISTENT;

countLabelLabelTypeSku 'Множитель' (labelType, sku) =
    UNION OVERRIDE countLabelLabelTypeGroup(labelType, groupGroupTypeSku(groupTypeLabelType(labelType), sku)),
                   dataCountLabelLabelTypeSku(labelType, sku);

countLabelSkuDepartmentStore 'Множитель' (sku, departmentStore) = countLabelLabelTypeSku(labelTypeSkuDepartmentStore (sku, departmentStore), sku);

FORM labelType 'Тип ценника'
    OBJECTS l = labelType FIXED PANEL
    PROPERTIES(l) name, widthLabelType, heightLabelType, nameOrientationLabelType, fileTemplateLabelType, namePriceListTypeLabelType, nameGroupTypeLabelType

    TREE treeStore a=STRING[3], st=storeType, s=store
    PROPERTIES READONLY OBJVALUE(a), name(st), name(s)
    FILTERS stringEqualsAll(a), inStoreTypeStore(st, s)

    OBJECTS d=departmentStore
    PROPERTIES(d) READONLY depName = name
    FILTERS (d IS departmentStore AND NOT s IS store AND NOT st IS storeType) OR
            (storeDepartmentStore(d)==s AND st IS storeType) OR
            (storeTypeDepartmentStore(d)==st AND NOT s IS store)
    PROPERTIES(l) inLabelType TODRAW a FORCE GRID
    PROPERTIES inLabelTypeStoreType(l,st), inLabelTypeStore(l,s), inLabelTypeDepartmentStore(l,d)
    PROPERTIES(l) priorityLabelType TODRAW a FORCE GRID
    PROPERTIES priorityLabelTypeStoreType(l,st), priorityLabelTypeStore(l,s), priorityLabelTypeDepartmentStore(l,d)

    ORDER BY depName

    TREE treeGroup g=group PARENT parentGroup
    PROPERTIES READONLY name(g)
    FILTERS groupTypeGroup(g) == groupTypeLabelType(l)
    ORDER BY name(g)
    PROPERTIES(l, g) inLabelTypeGroup, countLabelLabelTypeGroup

    OBJECTS sk = sku
    PROPERTIES(sk) READONLY nameSku, idBarcodeSku
    FILTERS isParentGroupSku(g, sk) OR sk IS sku AND NOT g
    PROPERTIES(l, sk) inLabelTypeSku, countLabelLabelTypeSku

    EDIT labelType OBJECT l
;
@extendFormFilterStockAccess(departmentStore, d, labelType);
@extendFormFilterStockGroupAccess(storeType, st, labelType, countAccessEmployeeEmployeeDivisionGroup);
@extendFormFilterStockGroupAccess(store, s, labelType, countAccessEmployeeEmployeeDivisionGroup);

DESIGN labelType FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        childConstraints = TO THE BOTTOM;
        ADD l.box;
        NEW specification{
            type = TABBED;
            NEW departmentCase {
                title = 'Склады';
                childConstraints = TO THE RIGHT;
                ADD treeStore.tree.box {fillHorizontal = 1;}
                ADD d.box {fillHorizontal = 2;};
            }
            NEW itemCase {
                title = 'Товары';
                childConstraints = TO THE BOTTOM;
                NEW row1 {
                    title = 'Классификатор';
                    ADD PROPERTY(nameGroupTypeLabelType);
                }
                NEW row2 {
                    childConstraints = TO THE RIGHT;
                    ADD treeGroup.tree.box {fillHorizontal = 1;}
                    ADD sk.box {fillHorizontal = 2;}
                }
            }
        }
        ADD functions.box;
    }
}

FORM labelTypes 'Типы ценников'
    OBJECTS l = labelType
    PROPERTIES(l) READONLY name, widthLabelType, heightLabelType, nameOrientationLabelType, fileTemplateLabelType, namePriceListTypeLabelType
    PROPERTIES(l)          ADDFORM, EDITFORM, delete
;

//---------------------------- Документы для печати ценников ----------------------------------------//

CLASS ABSTRACT priceTransactionDocument 'Документ, требующий загрузки в оборудование';
TABLE priceTransactionDocument (priceTransactionDocument);

isDraftPriceTransactionDocument 'Не проведен' = ABSTRACT BOOLEAN (priceTransactionDocument) PERSISTENT;
descriptionPriceTransactionDocument 'Название документа загрузки' = ABSTRACT STRING[200] (priceTransactionDocument) PERSISTENT;
skipPriceTransactionDocument 'Не загружать' = ABSTRACT BOOLEAN (priceTransactionDocument) PERSISTENT;

printedPriceTransactionDocument 'Распечатан' = DATA BOOLEAN (priceTransactionDocument);
printedPriceTransactionDocument(document) <- NULL WHEN ASSIGNED(isDraftPriceTransactionDocument(document));

META implementPriceTransactionDocument(concrete)
    EXTEND CLASS concrete : Label.priceTransactionDocument;
    Label.isDraftPriceTransactionDocument (document) += isDraft###concrete(document);
    Label.descriptionPriceTransactionDocument (document) += description###concrete(document);
END

//----------------------------------- Печать ценников -------------------------------------------------------

CLASS labelTransaction 'Печать ценников' : historizable;
TABLE labelTransaction(labelTransaction);

dateLabelTransaction 'Дата' = DATA DATE (labelTransaction);
dateLabelTransaction (transaction) <- currentDate() WHEN ASSIGNED(transaction IS labelTransaction);

timeLabelTransaction 'Время' = DATA TIME (labelTransaction);
timeLabelTransaction (transaction) <- currentTime() WHEN ASSIGNED(transaction IS labelTransaction);

departmentStoreLabelTransaction = DATA departmentStore (labelTransaction);
nameDepartmentStoreLabelTransaction 'Отдел магазина' (transaction) = name(departmentStoreLabelTransaction(transaction));
nameStoreLabelTransaction 'Магазин' (transaction) = name(storeDepartmentStore(departmentStoreLabelTransaction(transaction)));
nameLegalEntityLabelTransaction 'Компания' (transaction) = nameLegalEntityDepartmentStore(departmentStoreLabelTransaction(transaction));

labelTypeLabelTransaction = DATA labelType (labelTransaction);
nameLabelTypeLabelTransaction 'Тип ценника' (transaction) = name(labelTypeLabelTransaction(transaction));

CONSTRAINT labelTypeLabelTransaction(transaction) AND NOT inLabelTypeDepartmentStore(labelTypeLabelTransaction(transaction), departmentStoreLabelTransaction(transaction))
           CHECKED BY labelTypeLabelTransaction MESSAGE 'Тип ценника запрещен для выбранного подразделения';

fileTemplateLabelTransaction 'Файл шаблона' (transaction) = fileTemplateLabelType(labelTypeLabelTransaction(transaction));

priceTransactionDocumentLabelTransaction = DATA priceTransactionDocument (labelTransaction);
descriptionLabelTransaction 'Основание загрузки' (transaction) =
    descriptionPriceTransactionDocument(priceTransactionDocumentLabelTransaction(transaction));

statusLabelPriceTransactionDocument 'Статус печати ценника' (document) =
                                                        CASE
                                                            WHEN skipPriceTransactionDocument(document) THEN 'Загрузка не требуется' IF document IS priceTransactionDocument
                                                            WHEN printedPriceTransactionDocument(document) THEN 'Распечатан' IF document IS priceTransactionDocument
                                                            DEFAULT 'Не распечатан' AND document IS priceTransactionDocument
                                                        END;

TABLE labelTransactionBarcode(labelTransaction, barcode);

inLabelTransactionBarcode 'Вкл' (labelTransaction, barcode) = DATA BOOLEAN (labelTransaction, barcode);

quantityLabelTransactionBarcode 'Кол-во' (labelTransaction, barcode) = DATA INTEGER (labelTransaction, barcode);
nameLabelTransactionBarcode 'Наименование' = DATA STRING[255] (labelTransaction, barcode);
priceLabelTransactionBarcode 'Цена' = DATA NUMERIC[14,2] (labelTransaction, barcode);

FORM printLabelTransaction 'Печать ценников' PRINT
    OBJECTS l = labelTransaction REPORTFILE fileTemplateLabelTransaction(l) FIXED PANEL
    PROPERTIES(l) READONLY nameLabelTypeLabelTransaction, nameDepartmentStoreLabelTransaction, descriptionLabelTransaction,
                  dateLabelTransaction, timeLabelTransaction, nameStoreLabelTransaction, nameLegalEntityLabelTransaction

    OBJECTS b = barcode
    PROPERTIES(l, b) READONLY inLabelTransactionBarcode
    PROPERTIES(b)    READONLY idBarcode
    PROPERTIES(l, b) READONLY quantityLabelTransactionBarcode, nameLabelTransactionBarcode, priceLabelTransactionBarcode
    FILTERS inLabelTransactionBarcode(l, b)
;

FORM customLabelTransaction 'Печать ценников'
    OBJECTS l = labelTransaction FIXED PANEL
    PROPERTIES(l) nameLabelTypeLabelTransaction, nameDepartmentStoreLabelTransaction, descriptionLabelTransaction, dateLabelTransaction, timeLabelTransaction,
                  nameStoreLabelTransaction, nameLegalEntityLabelTransaction

    OBJECTS b = barcode
    PROPERTIES(l, b)          inLabelTransactionBarcode
    PROPERTIES(b)    READONLY idBarcode
    PROPERTIES(l, b)          quantityLabelTransactionBarcode, nameLabelTransactionBarcode, priceLabelTransactionBarcode
    FILTERS inLabelTransactionBarcode(l, b)
;

FORM labelTransactions 'Печать ценников'
    OBJECTS d = departmentStore FIXED PANEL
    PROPERTIES name(d) SELECTOR

    OBJECTS l = labelTransaction
    PROPERTIES(l) READONLY nameLabelTypeLabelTransaction, descriptionLabelTransaction, dateLabelTransaction, timeLabelTransaction
    PROPERTIES(l) READONLY nameUserCreatedHistorizable, hostnameComputerCreatedHistorizable
    PROPERTIES(l) delete
    FILTERS departmentStoreLabelTransaction(l) == d

    OBJECTS b = barcode
    PROPERTIES(l, b) READONLY inLabelTransactionBarcode
    PROPERTIES(b)    READONLY idBarcode
    PROPERTIES(l, b) READONLY quantityLabelTransactionBarcode, nameLabelTransactionBarcode, priceLabelTransactionBarcode
    FILTERS inLabelTransactionBarcode(l, b)
;
@extendFormFilterStockAccess(departmentStore, d, labelTransactions);

DESIGN labelTransactions FROM DEFAULT {
    NEW topContainer{
        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD l.box;
        ADD b.box;
    }
    ADD functions.box;
}

// -------------------------------------------- Действия по печати ценников ------------------------------ //

priceLabelBarcodeDepartmentStore (barcode, departmentStore) = pricePriceListTypeSkuStockDateTime(priceListTypeLabelType(labelTypeSkuDepartmentStore(skuBarcode(barcode),departmentStore)),
                                                                                                 skuBarcode(barcode),
                                                                                                 departmentStore,
                                                                                                 currentDateTime());

labelTypeBarcodeDepartmentStore (barcode, departmentStore) = labelTypeSkuDepartmentStore(skuBarcode(barcode), departmentStore);
countLabelBarcodeDepartmentStore (barcode, departmentStore) = countLabelSkuDepartmentStore(skuBarcode(barcode), departmentStore);

createLabelTransactionSku = DATA SESSION BOOLEAN (sku);
createLabelTransactionDocument = DATA SESSION priceTransactionDocument();
createLabelTransactionSnapshot = DATA SESSION BOOLEAN();

createAttributeLabelTransaction = ABSTRACT ACTION (labelTransaction);

createLabelTransactionFillParams 'Заполнить параметры' = ACTION (labelTransaction, departmentStore) {
    SET departmentStoreLabelTransaction(labelTransaction) <- departmentStore;
    SET priceTransactionDocumentLabelTransaction(labelTransaction) <- createLabelTransactionDocument();

    SET nameLabelTransactionBarcode(labelTransaction, barcode) <- nameSkuBarcode(barcode) WHERE inLabelTransactionBarcode(labelTransaction, barcode);
    SET priceLabelTransactionBarcode(labelTransaction, barcode) <- priceLabelBarcodeDepartmentStore(barcode, departmentStore) WHERE inLabelTransactionBarcode(labelTransaction, barcode);

    EXEC createAttributeLabelTransaction(labelTransaction);
}

createLabelTransaction 'Распечатать ценники' = ACTION (departmentStore) {

    LOCAL inBarcode = BOOLEAN (barcode);
    SET inBarcode(barcode) <- createLabelTransactionSku(skuBarcode(barcode)) // если передали параметром
                                                         AND activeBarcode(barcode) // если активный штрих-код
                                                         AND priceLabelBarcodeDepartmentStore(barcode, departmentStore);

    IF createLabelTransactionSnapshot() THEN {
        FOR ADDOBJ t = labelTransaction DO {
            SET inLabelTransactionBarcode(t, barcode) <- inBarcode(barcode);
            SET quantityLabelTransactionBarcode(t, barcode) <- 1 WHERE inLabelTransactionBarcode(t, barcode);
            EXEC createLabelTransactionFillParams(t, departmentStore);
            FORM customLabelTransaction OBJECTS l = t AS labelTransaction MODAL;
            IF formResult() == formResult.ok THEN {
                FORM printLabelTransaction OBJECTS l = t AS labelTransaction;
            }
        }
    } ELSE {
        // бежим по всем типам ценников из управленческих параметров
        FOR ([GROUP SUM 1 AND inBarcode(barcode) BY labelTypeBarcodeDepartmentStore(barcode, departmentStore), departmentStore](labelType, departmentStore)) DO {
            // для каждого создаем по операции печати ценников
            FOR ADDOBJ t = labelTransaction DO {
                SET inLabelTransactionBarcode(t, barcode) <- inBarcode(barcode) WHERE labelTypeBarcodeDepartmentStore(barcode, departmentStore) == labelType;
                SET quantityLabelTransactionBarcode(t, barcode) <- countLabelBarcodeDepartmentStore(barcode, departmentStore) WHERE inLabelTransactionBarcode(t, barcode);
                SET labelTypeLabelTransaction(t) <- labelType;
                EXEC createLabelTransactionFillParams(t, departmentStore);
                // вызываем печатную форму для каждого из них
                FORM printLabelTransaction OBJECTS l = t AS labelTransaction;
            }
        }
    }
}
// -------------------------------- Добавление новых атрибутов -------------------------- //
META defineLabelTransactionAttributeAction(object, barcodeProp)
    createAttributeLabelTransaction(labelTransaction) +=
        ACTION SET object##LabelTransactionBarcode(labelTransaction, barcode) <- barcodeProp##Barcode(barcode) WHERE inLabelTransactionBarcode(labelTransaction, barcode);

    EXTEND FORM printLabelTransaction PROPERTIES(l, b) READONLY object##LabelTransactionBarcode;
    EXTEND FORM customLabelTransaction PROPERTIES(l, b) object##LabelTransactionBarcode;
    EXTEND FORM labelTransactions PROPERTIES(l, b) READONLY object##LabelTransactionBarcode;
END

META defineLabelTransactionAttribute(object, caption, type, barcodeProp)
    object##LabelTransactionBarcode caption  = DATA type (labelTransaction, barcode);
    @defineLabelTransactionAttributeAction(object, barcodeProp);
END

// ---------- Атрибуты по умолчанию ------ //

@defineLabelTransactionAttribute(shortNameUOM, 'Ед. изм.', STRING[5], shortNameUOM);
@defineLabelTransactionAttribute(country, 'Страна', STRING[255], nameCountry);

// ------------------------- Подключение печати ценников в документ --------------------- //
META defineDocumentLabelTransaction (document, skuProp, stockProp)
    create###document##LabelTransaction 'Печать ценников' = ACTION (document) NEWSESSION AUTOAPPLY {
        SET createLabelTransactionSku(skuProp) <- TRUE IF quantity###document##Detail###skuProp###document(skuProp, document);
        SET createLabelTransactionDocument() <- document;
        EXEC createLabelTransaction(stockProp###document(document));
        SET printedPriceTransactionDocument(document) <- TRUE;
    } TOOLBAR CONFIRM;

    createSnapshot###document##LabelTransaction 'Перепечатать ценники' = ACTION (document) NEWSESSION AUTOAPPLY {
        SET createLabelTransactionSku(skuProp) <- TRUE IF quantity###document##Detail###skuProp###document(skuProp, document);
        SET createLabelTransactionDocument() <- document AS Label.priceTransactionDocument;
        SET createLabelTransactionSnapshot() <- TRUE;
        EXEC createLabelTransaction(stockProp###document(document));
    } CONFIRM;

    showPrintLabelTransaction###document 'Показывать' (document) = isPosted###document(document) AND NOT Label.skipPriceTransactionDocument(document)
                                                                                                 AND NOT printedPriceTransactionDocument(document);
    backgroundPrintLabelTransaction###document 'Цвет' (document) = RGB(212,255,212) IF showPrintLabelTransaction###document(document);
END

META extendFormDocumentLabelTransaction(form, object, document)
    EXTEND FORM form
        PROPERTIES(object) statusLabelPriceTransactionDocument ON SHORTCUT createSnapshot###document##LabelTransaction(object) BACKGROUND backgroundPrintLabelTransaction###document(object) READONLY,
                           create###document##LabelTransaction FORCE PANEL SHOWIF showPrintLabelTransaction###document(object)
    ;
END

// ---------------------------------------------------------- Стандартные значения --------------------------------- //

loadDefaultLabelType 'Добавить тип ценника' = ACTION(name, width, height, orientation, file) {
    ADDOBJ labelType;
    FOR lt ==  addedObject() DO {
        SET name(lt) <- name AS STRING[110];
        SET widthLabelType(lt) <-width AS INTEGER;
        SET heightLabelType(lt) <-height AS INTEGER;
        SET orientationLabelType(lt) <- orientation;
        SET fileTemplateLabelType(lt) <-file AS STRING[200];
    }
}

loadDefaultLabelTypes 'Загрузить стандартные ценники' = ACTION() {
    EXEC loadDefaultLabelType('Ценник 200x130', 200, 130, printOrientation.portrait, 'Label_printLabelTransaction_l.jrxml');
    EXEC loadDefaultLabelType('Ценник 595x480', 595, 480, printOrientation.portrait, 'Label_printLabelTransaction_l_a4.jrxml');
} IN loadDefaultGroup;

@implementLoadDefaultData(loadDefaultLabelTypes);

NAVIGATOR {
    machineryNavigator {
        NEW labelNavigator 'Ценники' {
            ADD labelTransactions;
            ADD labelTypes;
        }
    }
}