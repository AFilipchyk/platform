MODULE Employee;

REQUIRE System, Security, Email, Hierarchy, Utils;

// ------------------------------------- Должности -------------------------------------- //
CLASS position 'Должность' : named;
TABLE position(position);

positionEmployee(employee) = DATA position (employee);

FORM position 'Должность'
    OBJECTS of=position FIXED PANEL
    PROPERTIES(of) name
    EDIT position OBJECT of
;

// ------------------------------------- Доступ ------------------------------------------ //

CLASS ABSTRACT employeeDivisionGroup 'Группа подразделений' : named;
@defineHierarchyAbstract(employeeDivisionGroup);

CLASS ABSTRACT employeeDivision 'Подразделение' : named;
TABLE employeeDivision(employeeDivision);

TABLE employeeDivisionGroupEmployeeDivision(employeeDivisionGroup, employeeDivision);

employeeDivisionGroupEmployeeDivision = ABSTRACT employeeDivisionGroup (employeeDivision) PERSISTENT;
isParentEmployeeDivisionGroupEmployeeDivision (employeeDivisionGroup, employeeDivision) = isParentEmployeeDivisionGroupEmployeeDivisionGroup(employeeDivisionGroupEmployeeDivision(employeeDivision), employeeDivisionGroup) PERSISTENT;

// ------------------------------------- Сотрудники -------------------------------------- //

CLASS employee 'Сотрудник' : customUser;
TABLE employee(employee);

namePositionEmployee 'Должность сотрудника' (employee) = name(positionEmployee(employee)) IN baseGroup MINCHARWIDTH 15 PREFCHARWIDTH 15;

positionNameEmployee 'Должность ФИО' (employee) = [FORMULA STRING[40] ' CAST($1 AS TEXT) || \' \' || CAST($2 AS TEXT)']
                                                         (namePositionEmployee(employee), commonName(employee));

TABLE employeeDivisionEmployee (employeeDivision, employee);
inEmployeeDivisionEmployee 'Сотрудник отдела' = DATA BOOLEAN (employeeDivision, employee);

FORM employee 'Сотрудник'
    OBJECTS e=employee FIXED PANEL
    PROPERTIES(e)      userFirstName, userLastName, namePositionEmployee,
                       userLogin, userPassword, emailContact, nameMainRoleUser

    TREE treeEmployeeDivision dg = employeeDivisionGroup PARENT parentEmployeeDivisionGroup, dd = employeeDivision
    PROPERTIES READONLY  dgTreeName = name(dg), ddTreeName = name(dd)
    FILTERS                    employeeDivisionGroupEmployeeDivision(dd) == dg

    OBJECTS                    d=employeeDivision
    PROPERTIES(d)              name
    PROPERTIES(d, e)           inEmployeeDivisionEmployee

    FILTERS           dd == d AND dg IS employeeDivisionGroup OR
                      isParentEmployeeDivisionGroupEmployeeDivision(dg, d) AND NOT dd

    EDIT employee OBJECT e
;

DESIGN employee FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        NEW oneCase BEFORE treeEmployeeDivision.tree.box {
            title = 'Сотрудник';
            childConstraints = TO THE RIGHT;
            NEW twoCase {
                title = 'Личные данные';
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(userFirstName(e));
                ADD PROPERTY(userLastName(e));
                ADD PROPERTY(namePositionEmployee(e));
            };
            NEW threeCase {
                title = 'Данные пользователя';
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(userLogin(e));
                ADD PROPERTY(userPassword(e));
                ADD PROPERTY(emailContact(e));
                ADD PROPERTY(nameMainRoleUser(e));
            };

        }
        POSITION treeEmployeeDivision.tree.box TO THE LEFT d.box;
        ADD functions.box;
    }
}

FORM employees 'Сотрудники'
    OBJECTS e=employee
    PROPERTIES(e) READONLY userFirstName, userLastName, namePositionEmployee
    PROPERTIES(e) ADDFORM, EDITFORM, delete

    OBJECTS d=employeeDivision
    PROPERTIES(d) READONLY name
    FILTERS inEmployeeDivisionEmployee(d, e)
;

DESIGN employees FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD e.box;
        ADD d.box;
    }

    ADD functions.box;
}

FORM employeeDialog 'Сотрудники'
    OBJECTS e=employee
    PROPERTIES(e) READONLY userFirstName, userLastName, namePositionEmployee

    DIALOG employee OBJECT e
;

// ----------------------------------- Комиссии ---------------------------------------------------------- //

META defineCommitteeEmployee (committee, prefix, caption)
    prefix##Committee = DATA employee (committee);
    name###prefix##Committee caption (committee) = commonName(prefix##Committee(committee)) IN recognizeGroup;
    namePosition###prefix##Committee caption (committee) = namePositionEmployee(prefix##Committee(committee));
    CONSTRAINT prefix##Committee(committee) AND NOT countDivisionEmployeeCommittee(prefix##Committee(committee), committee)
        CHECKED BY prefix##Committee MESSAGE '\''##caption##'\' не входит в выбранные подразделения';
END

META defineCommitteeEmployeePrefix (committee, prefix, caption)
    prefix###committee = DATA employee (committee);
    name###prefix###committee caption (committee) = commonName(prefix###committee(committee)) IN recognizeGroup;
    namePosition###prefix###committee caption (committee) = namePositionEmployee(prefix###committee(committee));
    CONSTRAINT prefix###committee(committee) AND NOT countDivisionEmployeeCommittee(prefix###committee(committee), committee)
        CHECKED BY prefix###committee MESSAGE '\''##caption##'\' не входит в выбранные подразделения';
END

CLASS ABSTRACT committee 'Комиссия' : named;
TABLE committee (committee);

TABLE committeeEmployee (committee, employee);
inCommitteeEmployee 'Является членом комиссии' (committee, employee) = DATA BOOLEAN (committee, employee);

TABLE committeeEmployeeDivision (committee, employeeDivision);
inCommitteeEmployeeDivision 'Вкл.' (committee, employeeDivision) = DATA BOOLEAN (committee, employeeDivision);

inEmployeeDivisionEmployeeCommittee(employeeDivision, employee, committee) = inCommitteeEmployeeDivision(committee, employeeDivision) AND inEmployeeDivisionEmployee(employeeDivision, employee);

countDivisionEmployeeCommittee (employee, committee) = GROUP SUM 1 IF inEmployeeDivisionEmployeeCommittee(employeeDivision, employee, committee) BY employee, committee;
CONSTRAINT inCommitteeEmployee(committee, employee) AND NOT countDivisionEmployeeCommittee(employee, committee)
    CHECKED MESSAGE 'Член комиссии не входит в выбранные подразделения';

@defineCommitteeEmployee(committee, chairman, 'Председатель');

namePositionEmployeeCommittee 'Члены комиссии' (committee) =
     GROUP CONCAT positionNameEmployee(employee) IF inCommitteeEmployee(committee, employee), ', '
     BY committee
     ORDER employee
     MINCHARWIDTH 50 PREFCHARWIDTH 50;

nameEmployeeCommittee 'Члены комиссии' (committee) =
     GROUP CONCAT commonName(employee) IF inCommitteeEmployee(committee, employee), ', '
     BY committee
     ORDER employee
     MINCHARWIDTH 50 PREFCHARWIDTH 50;

nameEmployeeDivisionCommittee 'Подразделения' (committee) =
     GROUP CONCAT name(employeeDivision) IF inCommitteeEmployeeDivision(committee, employeeDivision), ', '
     BY committee
     ORDER employeeDivision
     MINCHARWIDTH 50 PREFCHARWIDTH 50;
