MODULE GeneralLedger;

REQUIRE GLAccountType;

//-------------------------- Проводки -------------------------//

CLASS ABSTRACT GeneralLedger 'Проводка': Named;
TABLE generalLedger(GeneralLedger);

CLASS UserGeneralLedger 'Проводка (польз.)': GeneralLedger, Historizable;
CLASS UserGeneralLedgerPosted 'Проведенная проводка (польз.)': UserGeneralLedger, PostedObject;

@defineDocumentInterfaceHeaderPosted (generalLedger);
@defineDocumentInterfaceHeaderDatePrefix(generalLedger, , );
WHEN SESSION ASSIGNED(userGeneralLedger AS UserGeneralLedger) DO {
    IF userGeneralLedger IS UserGeneralLedger AND NOT dateUserGeneralLedger(userGeneralLedger) THEN SET dateUserGeneralLedger(userGeneralLedger) <- currentDate();
};

legalEntityGeneralLedger = ABSTRACT LegalEntity (GeneralLedger) PERSISTENT;
nameLegalEntityGeneralLedger 'Компания' (generalLedger) = name(legalEntityGeneralLedger(generalLedger));
legalEntityUserGeneralLedger = DATA LegalEntity (UserGeneralLedger);
nameLegalEntityUserGeneralLedger 'Компания' (userGeneralLedger) = name(legalEntityUserGeneralLedger(userGeneralLedger));
legalEntityGeneralLedger (generalLedger) += legalEntityUserGeneralLedger (generalLedger);

debitGeneralLedger = ABSTRACT GLAccount (GeneralLedger) PERSISTENT;
idDebitGeneralLedger 'Дебет' (generalLedger) = idGLAccount(debitGeneralLedger(generalLedger));
debitUserGeneralLedger = DATA GLAccount (UserGeneralLedger);
idDebitUserGeneralLedger 'Дебет' (userGeneralLedger) = idGLAccount(debitUserGeneralLedger(userGeneralLedger));
debitGeneralLedger (generalLedger) += debitUserGeneralLedger (generalLedger);


creditGeneralLedger = ABSTRACT GLAccount (GeneralLedger) PERSISTENT;
idCreditGeneralLedger 'Кредит' (generalLedger) = idGLAccount(creditGeneralLedger(generalLedger));
creditUserGeneralLedger = DATA GLAccount (UserGeneralLedger);
idCreditUserGeneralLedger 'Кредит' (userGeneralLedger) = idGLAccount(creditUserGeneralLedger(userGeneralLedger));
creditGeneralLedger (generalLedger) += creditUserGeneralLedger (generalLedger);

CONSTRAINT GLAccountTypeGLAccount(debitUserGeneralLedger(userGeneralLedger)) != GLAccountTypeGLAccount(creditUserGeneralLedger(userGeneralLedger))
    CHECKED BY  debitUserGeneralLedger, creditUserGeneralLedger
    MESSAGE 'У дебета и кредита разные планы счетов';

sumGeneralLedger 'Сумма' = ABSTRACT NUMERIC[16,2] (GeneralLedger) PERSISTENT;
sumUserGeneralLedger 'Сумма' = DATA NUMERIC[16,2] (UserGeneralLedger);
sumGeneralLedger (generalLedger) += sumUserGeneralLedger (generalLedger);

descriptionGeneralLedger 'Описание' = ABSTRACT STRING[200] (GeneralLedger) PERSISTENT;
descriptionUserGeneralLedger 'Описание' = DATA STRING[200] (UserGeneralLedger);
descriptionGeneralLedger (generalLedger) += descriptionUserGeneralLedger (generalLedger);

skipGeneralLedger 'Не изменять значение' (generalLedger) = ABSTRACT BOOLEAN (GeneralLedger) PERSISTENT;
skipUserGeneralLedger 'Не изменять значение' (userGeneralLedger) = DATA BOOLEAN (UserGeneralLedger);
skipGeneralLedger (generalLedger) += skipUserGeneralLedger (generalLedger);

editGeneralLedger 'Редактировать' = ABSTRACT ACTION (generalLedger) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

// ----------------------------- Сальдо ---------------------------//

META  defineGLAccountSum (caption, concrete, prefix)
    // без учета текущей даты
    prefix###sumB###concrete###GLAccountCompanyDate 'Сумма на начало дня '###caption (GLAccount, company, date) = (sum###concrete###GLAccountCompany(GLAccount, company) AND date AS DATE)
                                                                      (-) [GROUP SUM sum###concrete###GLAccountCompanyDate(GLAccount, company, dateIn) AND dateIn >= (date AS DATE)
                                                                                 BY GLAccount, company, date](GLAccount, company, date);
    // с учетом текущей даты
    prefix###sumA###concrete###GLAccountCompanyDate 'Сумма на конец дня '###caption (GLAccount, company, date) = (sum###concrete###GLAccountCompany(GLAccount, company) AND date AS DATE)
                                                                     (-) [GROUP SUM sum###concrete###GLAccountCompanyDate(GLAccount, company, dateIn) AND dateIn > (date AS DATE)
                                                                                BY GLAccount, company, date](GLAccount, company, date);
END
META defineGLAccountBalance (caption, prefix)
    prefix###balanceAGLAccountCompanyDate 'Сальдо на начало дня '###caption (GLAccount, company, date) =  prefix###sumADebitGLAccountCompanyDate(GLAccount, company, date) (-) prefix###sumACreditGLAccountCompanyDate(GLAccount, company, date);
    prefix###balanceBGLAccountCompanyDate 'Сальдо на конец дня '###caption (GLAccount, company, date) =  prefix###sumBDebitGLAccountCompanyDate(GLAccount, company, date) (-) prefix###sumBCreditGLAccountCompanyDate(GLAccount, company, date);
END

sumCreditGLAccountCompany 'Сумма (кредит)' (GLAccount, company)= GROUP SUM sumGeneralLedger(ledger) AND isPostedGeneralLedger(ledger) BY creditGeneralLedger(ledger), legalEntityGeneralLedger(ledger);
sumDebitGLAccountCompany 'Сумма (дебит)' (GLAccount, company)= GROUP SUM sumGeneralLedger(ledger) AND isPostedGeneralLedger(ledger) BY debitGeneralLedger(ledger), legalEntityGeneralLedger(ledger);
balanceGLAccountCompany 'Сальдо' (GLAccount, company)= sumDebitGLAccountCompany(GLAccount, company) (-) sumCreditGLAccountCompany(GLAccount, company);

sumCreditGLAccountCompanyDate 'Сумма (кредит)' (GLAccount, company, date)= GROUP SUM sumGeneralLedger(ledger) AND isPostedGeneralLedger(ledger)BY creditGeneralLedger(ledger), legalEntityGeneralLedger(ledger), dateGeneralLedger(ledger);
sumDebitGLAccountCompanyDate 'Сумма (дебит)' (GLAccount, company, date)= GROUP SUM sumGeneralLedger(ledger) AND isPostedGeneralLedger(ledger) BY debitGeneralLedger(ledger), legalEntityGeneralLedger(ledger), dateGeneralLedger(ledger);
balanceGLAccountCompanyDate 'Сальдо' (GLAccount, company, date)= sumDebitGLAccountCompanyDate(GLAccount, company, date) (-) sumCreditGLAccountCompanyDate(GLAccount, company, date);

sumCreditGLAccountCompanyDateFromTo 'Сумма (кредит)' (GLAccount, company, dateFrom, dateTo) = GROUP SUM
        sumCreditGLAccountCompanyDate(GLAccount, company, date) AND date >= (dateFrom AS DATE) AND date <= (dateTo AS DATE)
        BY GLAccount, company, dateFrom, dateTo;
sumDebitGLAccountCompanyDateFromTo 'Сумма (дебит)' (GLAccount, company, dateFrom, dateTo) = GROUP SUM
        sumDebitGLAccountCompanyDate(GLAccount, company, date) AND date >= (dateFrom AS DATE) AND date <= (dateTo AS DATE)
        BY GLAccount, company, dateFrom, dateTo;
balanceGLAccountCompanyDateFromTo 'Сальдо' (GLAccount, company, dateFrom, dateTo)= sumDebitGLAccountCompanyDateFromTo(GLAccount, company, dateFrom, dateTo) (-) sumCreditGLAccountCompanyDateFromTo(GLAccount, company, dateFrom, dateTo);

@defineGLAccountSum ('(кредит)', credit, );
@defineGLAccountSum ('(дебит)', debit, );
@defineGLAccountBalance ( , );

//- Рекурсивно
recSumCreditGLAccountCompany 'Сумма (кредит)' (GLAccount, company)=  GROUP SUM sumCreditGLAccountCompany(child, company)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount, company;
recSumDebitGLAccountCompany 'Сумма (дебит)' (GLAccount, company)=  GROUP SUM sumDebitGLAccountCompany(child, company)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount, company;
recBalanceGLAccountCompany 'Сальдо' (GLAccount, company)=  GROUP SUM balanceGLAccountCompany(child, company)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount, company;

recSumCreditGLAccountCompanyDate 'Сумма (кредит)' (GLAccount, company, date)=  GROUP SUM sumCreditGLAccountCompanyDate(child, company, date)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount, company, date;
recSumDebitGLAccountCompanyDate 'Сумма (дебит)' (GLAccount, company, date)=  GROUP SUM sumDebitGLAccountCompanyDate(child, company, date)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount, company, date;
recBalanceGLAccountCompanyDate 'Сальдо' (GLAccount, company, date)=  GROUP SUM balanceGLAccountCompanyDate(child, company, date)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount, company, date;

recSumCreditGLAccountCompanyDateFromTo 'Сумма (кредит)' (GLAccount, company, dateFrom, dateTo)=  GROUP SUM sumCreditGLAccountCompanyDateFromTo(child, company, dateFrom, dateTo)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount, company, dateFrom, dateTo;
recSumDebitGLAccountCompanyDateFromTo 'Сумма (дебит)' (GLAccount, company, dateFrom, dateTo)=  GROUP SUM sumDebitGLAccountCompanyDateFromTo(child, company, dateFrom, dateTo)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount, company, dateFrom, dateTo;
recBalanceGLAccountCompanyDateFromTo 'Сальдо' (GLAccount, company, dateFrom, dateTo)=  GROUP SUM balanceGLAccountCompanyDateFromTo(child, company, dateFrom, dateTo)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount, company, dateFrom, dateTo;


@defineGLAccountSum ('(кредит)', credit, rec);
@defineGLAccountSum ('(дебит)', debit, rec);
@defineGLAccountBalance ( , rec);

EXTEND FORM GLAccounts
    PROPERTIES(g,l,dFrom,dTo) READONLY BEFORE delete(g) recSumCreditGLAccountCompanyDateFromTo, recSumDebitGLAccountCompanyDateFromTo, recBalanceGLAccountCompanyDateFromTo
;


FORM userGeneralLedger 'Проводка'
    OBJECTS g=UserGeneralLedger FIXED PANEL
    PROPERTIES(g) nameLegalEntityUserGeneralLedger, descriptionUserGeneralLedger, dateUserGeneralLedger, idDebitUserGeneralLedger, idCreditUserGeneralLedger,
                  sumUserGeneralLedger

    EVENTS
        ON OK prePostUserGeneralLedger(g)

    EDIT UserGeneralLedger OBJECT g
;

DESIGN userGeneralLedger FROM DEFAULT{

    main {
        preferredSize = (1024, 768);

        ADD g.box BEFORE functions.box {
            childConstraints = TO THE BOTTOM;

            ADD g.documentHeaderGroup {
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(nameLegalEntityUserGeneralLedger);
                ADD PROPERTY(descriptionUserGeneralLedger);
                ADD PROPERTY(dateUserGeneralLedger);
            }
            NEW headerRow11 {
                title = 'Корреспонденция';
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(idDebitUserGeneralLedger);
                ADD PROPERTY(idCreditUserGeneralLedger);
                ADD PROPERTY(sumUserGeneralLedger);

            }
        }
        PROPERTY(formOk) {
            caption = 'Провести';
        }
    }
}
addUserGeneralLedger 'Добавить' = ACTION ADDFORM UserGeneralLedger;
editUserGeneralLedger 'Редактировать' (userGeneralLedger) = ACTION EDITFORM UserGeneralLedger;
editGeneralLedger(generalLedger) += editUserGeneralLedger(generalLedger);
isUserGeneralLedger(generalLedger) = TRUE IF generalLedger IS UserGeneralLedger;

overCopyGeneralLedger = ABSTRACT ACTION (from, to);
copyGeneralLedger 'Копировать' = ACTION (generalLedger) NEWSESSION {

    FOR ADDOBJ g = UserGeneralLedger DO {
        SET legalEntityUserGeneralLedger(g) <- legalEntityGeneralLedger(generalLedger);
//        SET dateUserGeneralLedger(g) <- dateGeneralLedger(generalLedger);
        SET descriptionUserGeneralLedger(g) <- descriptionGeneralLedger(generalLedger);
        SET sumUserGeneralLedger(g) <- sumGeneralLedger(generalLedger);
        SET creditUserGeneralLedger(g) <- creditGeneralLedger(generalLedger);
        SET debitUserGeneralLedger(g) <- debitGeneralLedger(generalLedger);

        EXEC overCopyGeneralLedger(generalLedger, g);

        FORM userGeneralLedger OBJECTS g = g MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

FORM generalLedgers 'Проводки'
    OBJECTS g = GeneralLedger
    PROPERTIES(g)  READONLY isPostedGeneralLedger FORCE GRID, dateGeneralLedger, nameLegalEntityGeneralLedger, descriptionGeneralLedger, idDebitGeneralLedger,
                   idCreditGeneralLedger, sumGeneralLedger


    PROPERTIES (g) READONLY FORCE PANEL nameUserCreatedHistorizable, timeCreatedHistorizable, hostnameComputerCreatedHistorizable,
                   nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES ()  addUserGeneralLedger TODRAW g
    PROPERTIES (g) editGeneralLedger, copyGeneralLedger
    PROPERTIES     delete(g) FORCE PANEL TOOLBAR  SHOWIF isUserGeneralLedger(g)

    DIALOG GeneralLedger OBJECT g
;
DESIGN generalLedgers FROM DEFAULT {
    PROPERTY (delete(g)) {
        askConfirm = TRUE;
    }

    NEW documentHistory BEFORE functions.box {
        title = 'История';

        ADD g.historyGroup;
        ADD g.postedGroup;
    }
    ADD g.box BEFORE documentHistory;
}

META defineGeneralLedgerAggregation (object, prop, companyProp, property, dateProp, description, debit, credit, accountType)
    @defineGeneralLedgerAggregationInner (object, prop, ###prop, companyProp, property, dateProp, description, debit, credit, accountType);
END

META defineGeneralLedgerAggregationInner (object, prop, propClass, companyProp, property, dateProp, description, debit, credit, accountType)

    CLASS propClass###generalLedger : GeneralLedger;

    TABLE prop###generalLedger (propClass###generalLedger);
    @defineAggregation(object, prop###generalLedger, property);

    legalEntityGeneralLedger(generalLedger) += companyProp###object(object###prop###generalLedger(generalLedger));
    isPostedGeneralLedger(generalLedger) += isPosted###object(object###prop###generalLedger(generalLedger));
    descriptionGeneralLedger(generalLedger) += description(object###prop###generalLedger(generalLedger));
    dateGeneralLedger(generalLedger) += dateProp###object(object###prop###generalLedger(generalLedger));
    debitGeneralLedger(generalLedger) += GLAccountIdTypeIdGLAccount(accountType, debit) AND generalLedger IS propClass###generalLedger;
    creditGeneralLedger(generalLedger) += GLAccountIdTypeIdGLAccount(accountType, credit) AND generalLedger IS propClass###generalLedger;
    sumGeneralLedger(generalLedger) += property(object###prop###generalLedger(generalLedger));

END

META defineGeneralLedgerAggregation (prim1Object, prim2Object, prop, companyProp, property, dateProp, description, debit, credit, accountType)   //  prim1Object - документ
    @defineGeneralLedgerAggregationInner (prim1Object, prim2Object, prop, ###prop, companyProp, property, dateProp, description, debit, credit, accountType);
END

META defineGeneralLedgerAggregationInner (prim1Object, prim2Object, prop, propClass, companyProp, property, dateProp, description, debit, credit, accountType)

    CLASS propClass###generalLedger : GeneralLedger;

    TABLE prop###generalLedger (propClass###generalLedger);
    @defineAggregation (prim1Object, prim2Object, prop###generalLedger, property);

    legalEntityGeneralLedger(generalLedger) += companyProp###prim1Object(prim1Object###prop###generalLedger(generalLedger));
    isPostedGeneralLedger(generalLedger) += isPosted###prim1Object(prim1Object###prop###generalLedger(generalLedger));
    descriptionGeneralLedger(generalLedger) += description(prim1Object###prop###generalLedger(generalLedger), prim2Object###prop###generalLedger(generalLedger));
    dateGeneralLedger(generalLedger) += dateProp###prim1Object(prim1Object###prop###generalLedger(generalLedger));
    debitGeneralLedger(generalLedger) += GLAccountIdTypeIdGLAccount(accountType, debit) AND generalLedger IS propClass###generalLedger;
    creditGeneralLedger(generalLedger) += GLAccountIdTypeIdGLAccount(accountType, credit) AND generalLedger IS propClass###generalLedger;
    sumGeneralLedger(generalLedger) += property(prim1Object###prop###generalLedger(generalLedger), prim2Object###prop###generalLedger(generalLedger));
END

NAVIGATOR {
    accountType {
        ADD generalLedgers;
    }
}
