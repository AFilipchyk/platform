MODULE GeneralLedger;

REQUIRE GLAccountType;

//-------------------------- Проводки -------------------------//

CLASS ABSTRACT GeneralLedger 'Проводка': Named;
TABLE generalLedger(GeneralLedger);

CLASS UserGeneralLedger 'Проводка (польз.)': GeneralLedger, Historizable;
CLASS UserGeneralLedgerPosted 'Проведенная проводка (польз.)': UserGeneralLedger, PostedObject;

@defineDocumentInterfaceHeaderPosted (generalLedger);
@defineDocumentInterfaceHeaderDatePrefix(generalLedger, , );
WHEN SESSION ASSIGNED(userGeneralLedger AS UserGeneralLedger) DO {
    IF userGeneralLedger IS UserGeneralLedger AND NOT dateUserGeneralLedger(userGeneralLedger) THEN SET dateUserGeneralLedger(userGeneralLedger) <- currentDate();
};

debitGeneralLedger = ABSTRACT GLAccount (GeneralLedger) PERSISTENT;
idDebitGeneralLedger 'Дебет' (generalLedger) = idGLAccount(debitGeneralLedger(generalLedger));
debitUserGeneralLedger = DATA GLAccount (UserGeneralLedger);
idDebitUserGeneralLedger 'Дебет' (userGeneralLedger) = idGLAccount(debitUserGeneralLedger(userGeneralLedger));
debitGeneralLedger (generalLedger) += debitUserGeneralLedger (generalLedger);


creditGeneralLedger = ABSTRACT GLAccount (GeneralLedger) PERSISTENT;
idCreditGeneralLedger 'Кредит' (generalLedger) = idGLAccount(creditGeneralLedger(generalLedger));
creditUserGeneralLedger = DATA GLAccount (UserGeneralLedger);
idCreditUserGeneralLedger 'Кредит' (userGeneralLedger) = idGLAccount(creditUserGeneralLedger(userGeneralLedger));
creditGeneralLedger (generalLedger) += creditUserGeneralLedger (generalLedger);

CONSTRAINT GLAccountTypeGLAccount(debitUserGeneralLedger(userGeneralLedger)) != GLAccountTypeGLAccount(creditUserGeneralLedger(userGeneralLedger))
    CHECKED BY  debitUserGeneralLedger, creditUserGeneralLedger
    MESSAGE 'У дебета и кредита разные планы счетов';

sumGeneralLedger 'Сумма' = ABSTRACT NUMERIC[16,2] (GeneralLedger) PERSISTENT;
sumUserGeneralLedger 'Сумма' = DATA NUMERIC[16,2] (UserGeneralLedger);
sumGeneralLedger (generalLedger) += sumUserGeneralLedger (generalLedger);

descriptionGeneralLedger 'Описание' = ABSTRACT STRING[200] (GeneralLedger) PERSISTENT;
descriptionUserGeneralLedger 'Описание' = DATA STRING[200] (UserGeneralLedger);
descriptionGeneralLedger (generalLedger) += descriptionUserGeneralLedger (generalLedger);

skipGeneralLedger 'Не изменять значение' (generalLedger) = ABSTRACT BOOLEAN (GeneralLedger) PERSISTENT;
skipUserGeneralLedger 'Не изменять значение' (userGeneralLedger) = DATA BOOLEAN (UserGeneralLedger);
skipGeneralLedger (generalLedger) += skipUserGeneralLedger (generalLedger);

editGeneralLedger 'Редактировать' = ABSTRACT ACTION (generalLedger) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

// ----------------------------- Сальдо ---------------------------//

META  defineGLAccountSum (caption, concrete, prefix)
    // без учета текущей даты
    prefix###sumB###concrete###GLAccountDate 'Сумма на начало дня '###caption (GLAccount, date) = (sum###concrete###GLAccount(GLAccount) AND date AS DATE)
                                                                      (-) [GROUP SUM sum###concrete###GLAccountDate(GLAccount, dateIn) AND dateIn >= (date AS DATE)
                                                                                 BY GLAccount, date](GLAccount, date);
    // с учетом текущей даты
    prefix###sumA###concrete###GLAccountDate 'Сумма на конец дня '###caption (GLAccount, date) = (sum###concrete###GLAccount(GLAccount) AND date AS DATE)
                                                                     (-) [GROUP SUM sum###concrete###GLAccountDate(GLAccount, dateIn) AND dateIn > (date AS DATE)
                                                                                BY GLAccount, date](GLAccount, date);
END
META defineGLAccountBalance (caption, prefix)
    prefix###balanceAGLAccountDate 'Сальдо на начало дня '###caption (GLAccount, date) =  prefix###sumADebitGLAccountDate(GLAccount, date) (-) prefix###sumACreditGLAccountDate(GLAccount, date);
    prefix###balanceBGLAccountDate 'Сальдо на конец дня '###caption (GLAccount, date) =  prefix###sumBDebitGLAccountDate(GLAccount, date) (-) prefix###sumBCreditGLAccountDate(GLAccount, date);
END

sumCreditGLAccount 'Сумма (кредит)' (GLAccount)= GROUP SUM sumGeneralLedger(ledger) AND isPostedGeneralLedger(ledger) BY creditGeneralLedger(ledger);
sumDebitGLAccount 'Сумма (дебит)' (GLAccount)= GROUP SUM sumGeneralLedger(ledger) AND isPostedGeneralLedger(ledger) BY debitGeneralLedger(ledger);
balanceGLAccount 'Сальдо' (GLAccount)= sumDebitGLAccount(GLAccount) (-) sumCreditGLAccount(GLAccount);

sumCreditGLAccountDate 'Сумма (кредит)' (GLAccount, date)= GROUP SUM sumGeneralLedger(ledger) AND isPostedGeneralLedger(ledger)BY creditGeneralLedger(ledger), dateGeneralLedger(ledger);
sumDebitGLAccountDate 'Сумма (дебит)' (GLAccount, date)= GROUP SUM sumGeneralLedger(ledger) AND isPostedGeneralLedger(ledger) BY debitGeneralLedger(ledger), dateGeneralLedger(ledger);
balanceGLAccountDate 'Сальдо' (GLAccount, date)= sumDebitGLAccountDate(GLAccount, date) (-) sumCreditGLAccountDate(GLAccount, date);

sumCreditGLAccountDateFromTo 'Сумма (кредит)' (GLAccount, dateFrom, dateTo) = GROUP SUM
        sumCreditGLAccountDate(GLAccount, date) AND date >= (dateFrom AS DATE) AND date <= (dateTo AS DATE)
        BY GLAccount, dateFrom, dateTo;
sumDebitGLAccountDateFromTo 'Сумма (дебит)' (GLAccount, dateFrom, dateTo) = GROUP SUM
        sumDebitGLAccountDate(GLAccount, date) AND date >= (dateFrom AS DATE) AND date <= (dateTo AS DATE)
        BY GLAccount, dateFrom, dateTo;
balanceGLAccountDateFromTo 'Сальдо' (GLAccount, dateFrom, dateTo)= sumDebitGLAccountDateFromTo(GLAccount, dateFrom, dateTo) (-) sumCreditGLAccountDateFromTo(GLAccount, dateFrom, dateTo);

@defineGLAccountSum ('(кредит)', credit, );
@defineGLAccountSum ('(дебит)', debit, );
@defineGLAccountBalance ( , );

//- Рекурсивно
recSumCreditGLAccount 'Сумма (кредит)' (GLAccount)=  GROUP SUM sumCreditGLAccount(child)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount;
recSumDebitGLAccount 'Сумма (дебит)' (GLAccount)=  GROUP SUM sumDebitGLAccount(child)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount;
recBalanceGLAccount 'Сальдо' (GLAccount)=  GROUP SUM balanceGLAccount(child)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount;

recSumCreditGLAccountDate 'Сумма (кредит)' (GLAccount, date)=  GROUP SUM sumCreditGLAccountDate(child, date)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount, date;
recSumDebitGLAccountDate 'Сумма (дебит)' (GLAccount, date)=  GROUP SUM sumDebitGLAccountDate(child, date)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount, date;
recBalanceGLAccountDate 'Сальдо' (GLAccount, date)=  GROUP SUM balanceGLAccountDate(child, date)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount, date;

recSumCreditGLAccountDateFromTo 'Сумма (кредит)' (GLAccount, dateFrom, dateTo)=  GROUP SUM sumCreditGLAccountDateFromTo(child, dateFrom, dateTo)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount, dateFrom, dateTo;
recSumDebitGLAccountDateFromTo 'Сумма (дебит)' (GLAccount, dateFrom, dateTo)=  GROUP SUM sumDebitGLAccountDateFromTo(child, dateFrom, dateTo)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount, dateFrom, dateTo;
recBalanceGLAccountDateFromTo 'Сальдо' (GLAccount, dateFrom, dateTo)=  GROUP SUM balanceGLAccountDateFromTo(child, dateFrom, dateTo)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount, dateFrom, dateTo;


@defineGLAccountSum ('(кредит)', credit, rec);
@defineGLAccountSum ('(дебит)', debit, rec);
@defineGLAccountBalance ( , rec);

EXTEND FORM GLAccounts
    PROPERTIES(g) READONLY BEFORE delete(g) recSumDebitGLAccount, recSumCreditGLAccount, recBalanceGLAccount
;


FORM userGeneralLedger 'Проводка'
    OBJECTS g=UserGeneralLedger FIXED PANEL
    PROPERTIES(g) descriptionUserGeneralLedger, dateUserGeneralLedger, idDebitUserGeneralLedger, idCreditUserGeneralLedger,
                  sumUserGeneralLedger

    EVENTS
        ON OK prePostUserGeneralLedger(g)

    EDIT UserGeneralLedger OBJECT g
;

DESIGN userGeneralLedger FROM DEFAULT{

    main {
        preferredSize = (1024, 768);

        ADD g.box BEFORE functions.box {
            childConstraints = TO THE BOTTOM;

            ADD g.documentHeaderGroup {
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(descriptionUserGeneralLedger);
                ADD PROPERTY(dateUserGeneralLedger);
            }
            NEW headerRow11 {
                title = 'Корреспонденция';
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(idDebitUserGeneralLedger);
                ADD PROPERTY(idCreditUserGeneralLedger);
                ADD PROPERTY(sumUserGeneralLedger);

            }
        }
        PROPERTY(formOk) {
            caption = 'Провести';
        }
    }
}
addUserGeneralLedger 'Добавить' = ACTION ADDFORM UserGeneralLedger;
editUserGeneralLedger 'Редактировать' (userGeneralLedger) = ACTION EDITFORM UserGeneralLedger;
editGeneralLedger(generalLedger) += editUserGeneralLedger(generalLedger);
isUserGeneralLedger(generalLedger) = TRUE IF generalLedger IS UserGeneralLedger;

FORM generalLedgers 'Проводки'
    OBJECTS g = GeneralLedger
    PROPERTIES(g)  READONLY isPostedGeneralLedger FORCE GRID, dateGeneralLedger, descriptionGeneralLedger, idDebitGeneralLedger,
                   idCreditGeneralLedger, sumGeneralLedger


    PROPERTIES (g) READONLY FORCE PANEL nameUserCreatedHistorizable, timeCreatedHistorizable, hostnameComputerCreatedHistorizable,
                   nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES ()  addUserGeneralLedger TODRAW g
    PROPERTIES (g) editGeneralLedger//, copyOrder
    PROPERTIES     delete(g) FORCE PANEL TOOLBAR  SHOWIF isUserGeneralLedger(g)

    DIALOG GeneralLedger OBJECT g
;
DESIGN generalLedgers FROM DEFAULT {
    PROPERTY (delete(g)) {
        askConfirm = TRUE;
    }

    NEW documentHistory BEFORE functions.box {
        title = 'История';

        ADD g.historyGroup;
        ADD g.postedGroup;
    }
    ADD g.box BEFORE documentHistory;
}

META defineGeneralLedgerAggregation (object, prop, property, dateProp, description, debit, credit, accountType)
    @defineGeneralLedgerAggregationInner (object, prop, ###prop, property, dateProp, description, debit, credit, accountType);
END

META defineGeneralLedgerAggregationInner (object, prop, propClass, property, dateProp, description, debit, credit, accountType)

    CLASS propClass###generalLedger : GeneralLedger;

    TABLE prop###generalLedger (propClass###generalLedger);
    @defineAggregation(object, prop###generalLedger, property);

    isPostedGeneralLedger(generalLedger) += isPosted###object(object###prop###generalLedger(generalLedger));
    descriptionGeneralLedger(generalLedger) += description(object###prop###generalLedger(generalLedger));
    dateGeneralLedger(generalLedger) += dateProp###object(object###prop###generalLedger(generalLedger));
    debitGeneralLedger(generalLedger) += GLAccountIdTypeIdGLAccount(accountType, debit) AND generalLedger IS propClass###generalLedger;
    creditGeneralLedger(generalLedger) += GLAccountIdTypeIdGLAccount(accountType, credit) AND generalLedger IS propClass###generalLedger;
    sumGeneralLedger(generalLedger) += property(object###prop###generalLedger(generalLedger));

END

META defineGeneralLedgerAggregation (prim1Object, prim2Object, prop, property, dateProp, description, debit, credit, accountType)   //  prim1Object - документ
    @defineGeneralLedgerAggregationInner (prim1Object, prim2Object, prop, ###prop, property, dateProp, description, debit, credit, accountType);
END

META defineGeneralLedgerAggregationInner (prim1Object, prim2Object, prop, propClass, property, dateProp, description, debit, credit, accountType)

    CLASS propClass###generalLedger : GeneralLedger;

    TABLE prop###generalLedger (propClass###generalLedger);
    @defineAggregation (prim1Object, prim2Object, prop###generalLedger, property);

    isPostedGeneralLedger(generalLedger) += isPosted###prim1Object(prim1Object###prop###generalLedger(generalLedger));
    descriptionGeneralLedger(generalLedger) += description(prim1Object###prop###generalLedger(generalLedger), prim2Object###prop###generalLedger(generalLedger));
    dateGeneralLedger(generalLedger) += dateProp###prim1Object(prim1Object###prop###generalLedger(generalLedger));
    debitGeneralLedger(generalLedger) += GLAccountIdTypeIdGLAccount(accountType, debit) AND generalLedger IS propClass###generalLedger;
    creditGeneralLedger(generalLedger) += GLAccountIdTypeIdGLAccount(accountType, credit) AND generalLedger IS propClass###generalLedger;
    sumGeneralLedger(generalLedger) += property(prim1Object###prop###generalLedger(generalLedger), prim2Object###prop###generalLedger(generalLedger));
END

NAVIGATOR {
    accountType {
        ADD generalLedgers;
    }
}
