MODULE Invoice;

REQUIRE System,
        Utils,
        Historizable,
        Stock,
        Numerator,
        Document,
        Currency,
        PriceRound,
        Barcode,
        PriceList,
        Agreement,
        PurchaseLedger,
        SaleLedger,
        StockReserve,
        Employee,
        ContractLedger,
        StockTax;

CLASS ABSTRACT Invoice 'Накладная' : ContractLedger, ContractALedger, InContractLedger, OutContractLedger, Document;
CLASS ABSTRACT InvoiceDetail 'Строка накладной' : DocumentDetail;

@defineDocumentAbstract(invoice);
@defineDocumentAbstractNumber(invoice);

@defineDocumentAbstractLegalEntity(invoice, supplier, 'Поставщик');
@defineDocumentAbstractLegalEntity(invoice, customer, 'Покупатель');

@defineDocumentAbstractLegalEntity(invoice, fromLegalEntity, 'Отправитель');
@defineDocumentAbstractLegalEntity(invoice, toLegalEntity, 'Получатель');

@defineDocumentAbstractDataStock(invoice, stock, 'Склад поставщика', supplier);
@defineDocumentAbstractDataStock(invoice, stock, 'Склад покупателя', customer);

@defineDocumentAbstractDataStock(invoice, stock, 'Склад (отправитель)', from);
@defineDocumentAbstractDataStock(invoice, stock, 'Склад (получатель)', to);

@defineDocumentAbstractPosted(invoice);

@defineDocumentAbstractDetailSku(invoice, sku);

@defineDocumentAbstractDetailQuantity(invoice);
@defineDocumentDetailGrossWeight(invoice, sku);
//@defineDocumentDetailQuantityPack (invoice, sku);
@defineDocumentDetailAbstractDataQuantityPackCustomPrefix (invoiceDetail, , ' упаковок');
@defineDocumentHeaderSkuQuantity(invoice, sku);

@defineDocumentHeaderGrossWeight(invoice);

@defineDocumentAbstractHeaderCurrency (invoice);

@defineDocumentAbstractDetailPrice(invoice);
@defineDocumentAbstractDetailDataSumCustomPrefix (invoiceDetail, , );
@defineDocumentAbstractDetailVAT(invoice, , );
@defineDocumentAbstractDetailVATDataSumCustom (invoiceDetail, invoice);

@defineDocumentAbstractDetailNote (InvoiceDetail);

shortDescriptionInvoice (invoice) = [FORMULA STRING[30] 'CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'] (
                                               seriesNumberObject(invoice), dateInvoice(invoice));

extraDescriptionInvoiceDetail 'Доп. наименование' (invoiceDetail) = ABSTRACT STRING[255] (InvoiceDetail) MINCHARWIDTH 30 PREFCHARWIDTH 80;

editInvoice 'Редактировать' = ABSTRACT ACTION (invoice) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

countryInvoiceDetail(invoiceDetail) = countryStock(customerStockInvoice(invoiceInvoiceDetail(invoiceDetail)));

//----------------------------------------------- Накладная ---------------------------------------------------//

META defineInvoice(sign, stockProp, toShowProp, captionProp, NS)

    CLASS ABSTRACT Invoice 'Накладная'###sign : Invoice.Invoice;
    CLASS ABSTRACT InvoiceDetail 'Строка накладной'###sign : Invoice.InvoiceDetail;

    CLASS UserInvoice 'Накладная (польз.)'###sign : Invoice, Historizable, NumeratedDocument;
    CLASS UserInvoiceDetail 'Строка накладной (польз.)'###sign : InvoiceDetail;
    CLASS UserInvoicePosted 'Проведенная накладная (польз.)'###sign : UserInvoice, PostedObject;

    GROUP invoiceGroup 'Информация о накладной' : base;

    @defineDocumentInterface(invoice);
    Invoice.invoiceInvoiceDetail (detail) += invoiceInvoiceDetail(detail);
    Invoice.dateInvoice (invoice) += dateInvoice(invoice);
    Invoice.timeInvoice (invoice) += timeInvoice(invoice);

    @defineDocumentInterfaceTimePrefix(invoice, before, ' документа (до)');

    @defineDocumentInterfaceNumber(invoice);
    Invoice.numberInvoice (invoice) += numberInvoice(invoice);
    Invoice.seriesInvoice (invoice) += seriesInvoice(invoice);

    @defineDocumentInterfaceLegalEntity (invoice, supplier, 'Поставщик');
    @defineDocumentInterfaceLegalEntity (invoice, customer, 'Покупатель');
    Invoice.supplierInvoice(invoice) += supplierInvoice(invoice);
    Invoice.customerInvoice(invoice) += customerInvoice(invoice);

    @defineDocumentInterfaceDataStock(invoice, stock, 'Склад поставщика', supplier);
    @defineDocumentInterfaceDataStock(invoice, stock, 'Склад покупателя', customer);
    Invoice.supplierStockInvoice(invoice) += supplierStockInvoice(invoice);
    Invoice.customerStockInvoice(invoice) += customerStockInvoice(invoice);
    Invoice.dataSupplierStockInvoiceDetail(detail) += dataSupplierStockInvoiceDetail(detail);
    Invoice.dataCustomerStockInvoiceDetail(detail) += dataCustomerStockInvoiceDetail(detail);

    CONSTRAINT supplierUserInvoice(userInvoice) AND supplierStockUserInvoice(userInvoice) AND NOT
    inLegalEntityStock(supplierUserInvoice(userInvoice), supplierStockUserInvoice(userInvoice))
        CHECKED BY supplierUserInvoice, supplierStockUserInvoice
            MESSAGE 'Поставщик и склад поставщика для накладной не имеют связи';
    CONSTRAINT customerUserInvoice(userInvoice) AND customerStockUserInvoice(userInvoice) AND NOT
    inLegalEntityStock(customerUserInvoice(userInvoice), customerStockUserInvoice(userInvoice))
        CHECKED BY customerUserInvoice, customerStockUserInvoice
            MESSAGE 'Покупатель и склад покупателя для накладной не имеют связи';

    @defineDocumentInterfacePosted(invoice);
    Invoice.isPostedInvoice (invoice) += isPostedInvoice(invoice);

    @defineDocumentInterfaceDescription(invoice, 'Накладная'###sign);

    @defineDocumentInterfaceCurrency(invoice);
    @deriveDocumentCurrency(userInvoice, supplier, currencyLegalEntity);
    Invoice.currencyInvoice(invoice) += currencyInvoice(invoice);

    @defineDocumentInterfaceContract(Invoice, contractSku, supplier, customer,
                                     'Организация (поставщик) договора накладной не соответствует организация (поставщик) накладной',
                                     'Организация (покупатель) договора накладной не соответствует организация (покупатель) накладной');

    @defineDocumentInterfaceHeaderAgreement(invoice);
    @deriveDocumentHeaderAgreement (userInvoice, supplierUserInvoice, customerUserInvoice);
    noAgreementUserInvoice (invoice) = invoice IS UserInvoice AND NOT agreementUserInvoice(invoice);

    @defineDocumentInterfaceDetailSku(invoice, sku);
    Invoice.skuInvoiceDetail(detail) += skuInvoiceDetail(detail);

    isStockSkuInvoiceDetail (invoiceDetail) = isStockSku(skuInvoiceDetail(invoiceDetail));
    isStockSkuUserInvoiceDetail (userInvoiceDetail) = isStockSku(skuUserInvoiceDetail(userInvoiceDetail));

    isChargeSkuInvoiceDetail (invoiceDetail) = isChargeSku(skuInvoiceDetail(invoiceDetail));
    isChargeSkuUserInvoiceDetail (userInvoiceDetail) = isChargeSku(skuUserInvoiceDetail(userInvoiceDetail));

    @defineDocumentInterfaceDetailQuantity(invoice);
    Invoice.quantityInvoiceDetail(detail) += quantityInvoiceDetail(detail);

    @defineDocumentDetailGrossWeight(invoice, sku);

    @defineDocumentInterfaceDetailPrice(invoice); // объявляем цену без НДС
    Invoice.priceInvoiceDetail(detail) += priceInvoiceDetail(detail);

    @defineDocumentInterfaceDetailVAT(invoice, country###stockProp, , ); // объявляем шкалу
    // саму шкалу не записываем, поскольку на продаже может быть расчетный НДС
    @deriveDocumentDetailValueVAT(userInvoice); // записываем значение ставки

    Invoice.VATInvoiceDetail(detail) += VATInvoiceDetail(detail);
    Invoice.valueVATInvoiceDetail(detail) += valueVATInvoiceDetail(detail);

    @defineDocumentInterfaceDetailPricePrefix (invoice, invoice, ' с НДС'); // объявляем цену с НДС

    // объявляем Action'ы для ON CHANGE по изменению цен
    @defineDocumentDetailPriceVATOnChange(userInvoice);
    @defineDocumentDetailNumberVATOnChange(userInvoice, stockProp);
    @defineDocumentDetailValueVATOnChange(userInvoice);
    @defineDocumentDetailInvoicePriceVATOnChange(userInvoice);

    @defineDocumentInterfacePriceListType(invoice); // объявляем вид цены
    @deriveDocumentDetailPriceListTypeAgreement(invoice); // записываем вид цены из соглашения
//    @deriveDocumentDetailPricePriceListTypeVAT (userInvoice, stockProp); // записываем цены с НДС и без НДС на основе priceListType

    @defineDocumentInterfaceDetailDataSum(invoice); // объявляем сумму без НДС
    @deriveDocumentDetailSum(userInvoice, quantity);
    Invoice.sumInvoiceDetail(detail) += sumInvoiceDetail(detail);

    @defineDocumentInterfaceDetailVATDataSum (invoice, invoice); // объявляем свойства суммы НДС и суммы с НДС
    // суммы НДС и с НДС не записываем, поскольку для продажи нужен расчетный НДС
    Invoice.VATSumInvoiceDetail(detail) += VATSumInvoiceDetail(detail);
    Invoice.invoiceSumInvoiceDetail(detail) += invoiceSumInvoiceDetail(detail);

    @defineDocumentInterfaceHeaderVATSum(invoice);

    @defineDocumentInterfaceHeaderQuantity(invoice);
    @defineDocumentHeaderSkuQuantity(invoice, sku);
    @defineDocumentHeaderSkuQuantity(userInvoice, sku);

    @defineDocumentInterfaceHeaderSum(invoice);

    @defineDocumentHeaderItemSum(invoice, , );
    @defineDocumentHeaderItemSum(userInvoice, , );

    @defineAddDetailDialogSkuStock(userInvoice, sku, stockProp, dialogSku);
    @defineAddDetailDialogBarcode(userInvoice, sku);

    countInvoiceDetailStockInvoice (stock, invoice) = GROUP SUM 1 BY stockProp###invoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);

//-- Упаковка
    @defineDocumentInterfaceCreate (invoice, toShowProp, captionProp);

    @defineDocumentInterfaceBarcodeSkuPrefix (invoice, sku, , );
    @defineDocumentDetailInterfaceDataQuantityPackCustomPrefix (invoiceDetail, , ' упаковок');
    @deriveDocumentDetailQuantityBarcodeCustom (userInvoiceDetail, sku, NS, toShowProp);
    @deriveDocumentQuantityPackageDetailOnChangeQuantity(userInvoiceDetail);
    @deriveDocumentQuantityDetailOnAmountPack(userInvoiceDetail);
    @deriveDocumentQuantityDetailOnChangeQuantityPack (userInvoiceDetail);
    Invoice.quantityPackInvoiceDetail(detail) += quantityPackInvoiceDetail(detail);

    @implementDocumentSupplierCustomer(invoice);

//    fillDocumentInvoice 'Подбор документа' = ACTION (userInvoice) {
//        FORM documents MODAL;
//        IF formResult() == FormResult.ok THEN {
//            LOCAL chosenDocument = Document();
//            SET chosenDocument() <- chosenObject('d');
//            FOR documentDocumentDetail(documentDetail) == chosenDocument() ADDOBJ i = UserInvoiceDetail DO {
//                SET userInvoiceUserInvoiceDetail(i) <- userInvoice;
//                SET skuInvoiceDetail(i) <- skuDocumentDetail(documentDetail);
//                SET quantityInvoiceDetail(i) <- quantityDocumentDetail(documentDetail);
//                SET priceInvoiceDetail(i) <- priceDocumentDetail(documentDetail);
//            }
//        }
//    } TOOLBAR;

// --------------------------- Формы ---------------------------------- //

    editInvoice 'Редактировать' = ABSTRACT ACTION (invoice) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    Invoice.editInvoice (invoice) += editInvoice(invoice);

    FORM userInvoice 'Накладная'###sign
        OBJECTS i = UserInvoice FIXED PANEL
        PROPERTIES (i) objectClassName, nameSupplierUserInvoice, nameSupplierStockUserInvoice, nameCustomerUserInvoice, nameCustomerStockUserInvoice,
                       nameNumeratorObject, numberObject, seriesObject, dateUserInvoice, timeUserInvoice,
                       nameCurrencyUserInvoice, nameAgreementUserInvoice, namePriceListTypeUserInvoice SHOWIF noAgreementUserInvoice(i), noteUserInvoice,
                       numberContractSkuUserInvoice, isCommissionUserInvoice
        PROPERTIES (i) countUserInvoiceDetailUserInvoice, quantityUserInvoiceDetailUserInvoice, sumUserInvoiceDetailUserInvoice,
                       VATSumUserInvoiceDetailUserInvoice, invoiceSumUserInvoiceDetailUserInvoice
        PROPERTIES (i) toShowProp###userInvoice//, fillDocumentInvoice

        OBJECTS d = UserInvoiceDetail
        PROPERTIES (d) indexUserInvoiceDetail, idBarcodeSkuUserInvoiceDetail, nameSkuUserInvoiceDetail, shortNameUOMSkuUserInvoiceDetail
        PROPERTIES (d) SHOWIF toShowProp###userInvoice(i) idBarcodePackUserInvoiceDetail, shortNameUOMPackUserInvoiceDetail,
                       amountPackUserInvoiceDetail ON CHANGE changeAmountPackUserInvoiceDetail(d), quantityPackUserInvoiceDetail ON CHANGE changeQuantityPackUserInvoiceDetail(d)
        PROPERTIES (d) quantityUserInvoiceDetail ON CHANGE changeQuantityUserInvoiceDetail(d), namePriceListTypeUserInvoiceDetail,
                       priceUserInvoiceDetail ON CHANGE changePriceUserInvoiceDetail(d), sumUserInvoiceDetail,
                       numberVATUserInvoiceDetail ON CHANGE changeNumberVATUserInvoiceDetail(d),
                       valueVATUserInvoiceDetail ON CHANGE changeValueVATUserInvoiceDetail(d),
                       invoicePriceUserInvoiceDetail ON CHANGE changeInvoicePriceUserInvoiceDetail(d),
                       VATSumUserInvoiceDetail, invoiceSumUserInvoiceDetail, ADDOBJ, delete

        PROPERTIES(i) TODRAW d fillDocumentInvoice, addDetailDialogSkuStockUserInvoiceDetailUserInvoice,
                               addDetailInputBarcodeUserInvoiceDetailUserInvoice, deleteUserInvoiceDetailUserInvoice
        FILTERS userInvoiceUserInvoiceDetail(d) == i

        EVENTS
            ON OK prePostUserInvoice(i)

        HINTTABLE LIST dateTimeUserInvoiceDetail, skuUserInvoiceDetail, supplierStockUserInvoiceDetail, customerStockUserInvoiceDetail,
                       priceListTypeUserInvoiceDetail, currencyUserInvoiceDetail,
                       priceUserInvoiceDetail, VATUserInvoiceDetail, valueVATUserInvoiceDetail, invoicePriceUserInvoiceDetail

        EDIT UserInvoice OBJECT i
    ;

    DESIGN userInvoice FROM DEFAULT{
        main {
            preferredSize = (1024, 768);
            NEW specification.box BEFORE functions.box{

                ADD d.box {
                    title = 'Спецификация';
                    d.panel {
                        childConstraints = TO THE RIGHTBOTTOM;
                    }
                }
            }
            NEW header.box BEFORE specification.box {
                childConstraints = TO THE RIGHT;

                NEW headerParams {
                    childConstraints = TO THE BOTTOM;

                    ADD i.documentHeaderGroup {
                        childConstraints = TO THE RIGHTBOTTOM;
                        ADD PROPERTY(objectClassName) { preferredCharWidth = 10; }
                        ADD PROPERTY(nameNumeratorObject);
                        ADD PROPERTY(numberObject);
                        ADD PROPERTY(seriesObject);
                        ADD PROPERTY(dateUserInvoice);
                        ADD PROPERTY(timeUserInvoice);
                    }
                    NEW headerLegalEntity {
                        childConstraints = TO THE RIGHTBOTTOM;
                        NEW headerSupplier {
                            title = 'Поставщик';
                            childConstraints = TO THE RIGHTBOTTOM;
                            ADD PROPERTY(nameSupplierUserInvoice);
                            ADD PROPERTY(nameSupplierStockUserInvoice);
                        }
                        NEW headerCustomer {
                            title = 'Покупатель';
                            childConstraints = TO THE RIGHTBOTTOM;
                            ADD PROPERTY(nameCustomerUserInvoice);
                            ADD PROPERTY(nameCustomerStockUserInvoice);
                        }
                        NEW headerContract {
                            title = 'Договор';
                            childConstraints = TO THE RIGHTBOTTOM;
                            ADD PROPERTY(numberContractSkuUserInvoice);
                            ADD PROPERTY(isCommissionUserInvoice);
                        }
                    }
                    NEW headerTabbedPane {
                        type = TABBED;
                        NEW headerMainParams {
                            title = 'Основные параметры';
                            childConstraints = TO THE BOTTOM;
                            ADD i.documentPrmGroup {
                                childConstraints = TO THE RIGHTBOTTOM;
                                ADD PROPERTY(toShowProp###userInvoice);
                            }
                        }
                        NEW headerCreateDetail {
                            title = 'Основание';
                        }
                        NEW headerCreateDocuments {
                            title = 'Производные документы';
                            minimumSize = (300, -1);
                        }
                     }
                }
                ADD i.documentSumGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }
            PROPERTY(formOk) {
                caption = 'Провести';
            }
        }
    }

//-- SKU
    @defineDocumentSkuPriceListType(userInvoice, stockProp);
    @extendFormDocumentSku(userInvoice, userInvoice, i);

    addUserInvoice 'Добавить' = ACTION ADDFORM UserInvoice;
    editUserInvoice 'Редактировать' (userInvoice) = ACTION EDITFORM UserInvoice;
    editInvoice (invoice) += editUserInvoice(invoice);

    overCopyInvoice = ABSTRACT ACTION (s, d);

    copyInvoice 'Копировать' = ACTION (invoice) NEWSESSION {
        FOR ADDOBJ i = UserInvoice DO {
            SET supplierUserInvoice(i) <- supplierInvoice(invoice);
            SET supplierStockUserInvoice(i) <- supplierStockInvoice(invoice);
            SET customerUserInvoice(i) <- customerInvoice(invoice);
            SET customerStockUserInvoice(i) <- customerStockInvoice(invoice);
            SET contractSkuUserInvoice(i) <- contractSkuInvoice(invoice);
            SET isCommissionUserInvoice(i) <- isCommissionInvoice(invoice);
            SET currencyUserInvoice(i) <- currencyInvoice(invoice);
            SET agreementUserInvoice(i) <- agreementInvoice(invoice);
            SET priceListTypeUserInvoice(i) <- priceListTypeInvoice(invoice);
            SET noteUserInvoice(i) <- noteInvoice(invoice);
            //SET createShipmentUserInvoice(i) <- createShipmentUserInvoice(invoice);
            SET toShowProp###userInvoice(i) <- toShowProp###invoice(invoice);

            EXEC overCopyInvoice(invoice, i);

            FOR invoiceInvoiceDetail(invoiceDetail) == invoice DO {
                FOR ADDOBJ d=UserInvoiceDetail DO {
                    SET userInvoiceUserInvoiceDetail(d) <- i;
                    SET skuUserInvoiceDetail(d) <- skuInvoiceDetail(invoiceDetail);
                    SET quantityUserInvoiceDetail(d) <- quantityInvoiceDetail(invoiceDetail);
                    SET priceUserInvoiceDetail(d) <- priceInvoiceDetail(invoiceDetail);
                    SET data###stockProp###userInvoiceDetail(d) <- data###stockProp###invoiceDetail(invoiceDetail);
                }
            }

            FORM userInvoice OBJECTS i = i MANAGESESSION DOCKEDMODAL;
        }
    } TOOLBAR;



    FORM invoices 'Накладные' TITLE 'Накладные'###sign
        OBJECTS i = Invoice
        PROPERTIES (i) READONLY isPostedInvoice FORCE GRID, numberInvoice, seriesInvoice, dateInvoice, timeInvoice,
                                nameSupplierInvoice, nameSupplierStockInvoice, nameCustomerInvoice, nameCustomerStockInvoice,
                                nameCurrencyInvoice, nameAgreementInvoice,
                                numberContractSkuInvoice, isCommissionInvoice,
                                countInvoiceDetailInvoice, quantityInvoiceDetailInvoice, sumInvoiceDetailInvoice,
                                VATSumInvoiceDetailInvoice, invoiceSumInvoiceDetailInvoice,
                                noteInvoice, objectClassName,
                                toShowProp###invoice
        PROPERTIES (i) READONLY FORCE PANEL nameUserCreatedHistorizable, timeCreatedHistorizable, hostnameComputerCreatedHistorizable, nameUserClosed, timeClosed, hostnameComputerClosed

        PROPERTIES ()  addUserInvoice TODRAW i
        PROPERTIES (i) editInvoice, copyInvoice
        PROPERTIES (i) delete FORCE PANEL TOOLBAR  SHOWIF isUserInvoice(i)

        OBJECTS d = InvoiceDetail
        PROPERTIES (d) READONLY indexInvoiceDetail, idBarcodeSkuInvoiceDetail, nameSkuInvoiceDetail, shortNameUOMSkuInvoiceDetail
        PROPERTIES (d) READONLY SHOWIF toShowProp##Invoice(i) idBarcodePackInvoiceDetail, shortNameUOMPackInvoiceDetail,
                       amountPackInvoiceDetail, quantityPackInvoiceDetail
        PROPERTIES (d) READONLY quantityInvoiceDetail, namePriceListTypeInvoiceDetail, priceInvoiceDetail, sumInvoiceDetail,
                       numberVATInvoiceDetail, valueVATInvoiceDetail, VATSumInvoiceDetail, invoiceSumInvoiceDetail

        FILTERS invoiceInvoiceDetail(d) == i

        DIALOG Invoice OBJECT i
    ;
    @extendFormFilterAccess(Invoice, i, invoices, stockProp);

    DESIGN invoices FROM DEFAULT {
        main {
            preferredSize = (1024, 768);
            PROPERTY (delete(i)) {
                askConfirm = TRUE;
            }

            NEW documentContainer BEFORE functions.box {
                type = SPLITV;
                childConstraints = TO THE BOTTOM;

                ADD i.box { fillVertical = 2.0; }

                NEW documentDetail {
                    type = TABBED;

                    ADD d.box {
                        title = 'Спецификация';
                    }
                    NEW documentHistory {
                        title = 'История';

                        ADD i.historyGroup;
                        ADD i.postedGroup;
                    }
                    NEW printTab {
                        title = 'Печатные формы';
                        NEW printContainer {
                            title = 'Печать';
                            childConstraints = TO THE BOTTOM;
                        }
                    }
                }
            }
        }
    }

    FORM invoiceDetails 'Продажа'
        OBJECTS d = InvoiceDetail
        PROPERTIES(d) READONLY indexInvoiceDetail, idBarcodeSkuInvoiceDetail, nameSkuInvoiceDetail, shortNameUOMSkuInvoiceDetail,
                               descriptionInvoiceDetail,
                               quantityInvoiceDetail, priceInvoiceDetail, sumInvoiceDetail,
                               numberVATInvoiceDetail, valueVATInvoiceDetail, VATSumInvoiceDetail, invoiceSumInvoiceDetail,
                               name###stockProp###invoiceDetail

        DIALOG InvoiceDetail OBJECT d
    ;

END

// Партии
META defineInvoiceBatch(stockProp)
    @defineDocumentInterfaceDetailBatch(invoice, batch);
    //@deriveDocumentDetailPriceBatchPriceListType(userInvoice, stockProp);
    @deriveDocumentDetailPricePriceListTypeVATBatch(userInvoice, stockProp);

    changeBatchUserInvoiceDetail = ACTION (userInvoiceDetail) {
        FORM dialogBatch OBJECTS st = stockProp###userInvoiceDetail(userInvoiceDetail),
                                 t = dateTimeUserInvoiceDetail(userInvoiceDetail),
                                 sk = skuUserInvoiceDetail(userInvoiceDetail) MODAL SHOWDROP;

        IF formResult() == FormResult.ok THEN {
            SET batchUserInvoiceDetail(userInvoiceDetail) <- chosenObject('bt');
        } ELSE IF formResult() == FormResult.drop THEN {
            SET batchUserInvoiceDetail(userInvoiceDetail) <- NULL;
        }

    };

    EXTEND FORM userInvoice
        PROPERTIES (d) descriptionBatchUserInvoiceDetail ON CHANGE changeBatchUserInvoiceDetail(d) AFTER shortNameUOMSkuUserInvoiceDetail
        HINTTABLE LIST batchUserInvoiceDetail
    ;
    EXTEND FORM invoices PROPERTIES (d) READONLY descriptionBatchInvoiceDetail AFTER shortNameUOMSkuInvoiceDetail;
END

META defineInvoiceReturn(NS, NSR, stockProp)
    invoiceDetailInvoiceDetail (invoiceDetail) = ABSTRACT NS.InvoiceDetail (NSR.InvoiceDetail) PERSISTENT;
    invoiceDetailUserInvoiceDetail (userInvoiceDetail) = DATA NS.InvoiceDetail (NSR.UserInvoiceDetail);
    invoiceDetailInvoiceDetail(detail) += invoiceDetailUserInvoiceDetail(detail);

    returnQuantityInvoiceDetail 'Кол-во (возвращено)' (invoiceDetail)= GROUP SUM NSR.quantityInvoiceDetail(invoiceDetail) BY invoiceDetailInvoiceDetail(invoiceDetail);
    returnQuantityInvoiceDetailInvoice 'Кол-во (возвращено)' (invoice) =  GROUP SUM returnQuantityInvoiceDetail(invoiceDetail) BY NS.invoiceInvoiceDetail(invoiceDetail);

    CONSTRAINT returnQuantityInvoiceDetail(detail) > NS.quantityInvoiceDetail(detail)
        MESSAGE 'Количество строки возврата больше чем количество строки основания';

    CONSTRAINT NS.skuInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) != NSR.skuUserInvoiceDetail(detail) CHECKED BY invoiceDetailUserInvoiceDetail
        MESSAGE 'SKU строки основания должен соответствовать SKU строки возврата';

    CONSTRAINT NS.supplierInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) != NSR.supplierUserInvoiceDetail(detail) CHECKED BY invoiceDetailUserInvoiceDetail
        MESSAGE 'Поставщик строки основания должен соответствовать Поставщик строки возврата';

    CONSTRAINT NS.customerInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) != NSR.customerUserInvoiceDetail(detail) CHECKED BY invoiceDetailUserInvoiceDetail
        MESSAGE 'Покупатель строки основания должен соответствовать Покупатель строки возврата';
        
    descriptionInvoiceDetailInvoiceDetail 'Основание' (invoiceDetail) = NS.descriptionInvoiceDetail(invoiceDetailInvoiceDetail(invoiceDetail));
    descriptionInvoiceDetailUserInvoiceDetail 'Основание' (userInvoiceDetail) = NS.descriptionInvoiceDetail(invoiceDetailUserInvoiceDetail(userInvoiceDetail));

//    NSR.priceUserInvoiceDetail(detail) <- IF invoiceDetailUserInvoiceDetail(detail) THEN
//                                                    NS.priceInvoiceDetail(invoiceDetailUserInvoiceDetail(detail))
//                                                 ELSE IF batchUserInvoiceDetail(detail) THEN
//                                                    prevPricePriceListTypeBatchStockDateTime(NSR.priceListTypeInvoiceDetail(detail),
//                                                                                             NSR.batchInvoiceDetail(detail),
//                                                                                             NSR.stockProp###invoiceDetail(detail),
//                                                                                             NSR.dateTimeInvoiceDetail(detail))
//                                                 ELSE
//                                                    prevPricePriceListTypeSkuStockDateTime(NSR.priceListTypeInvoiceDetail(detail),
//                                                                                           NSR.skuInvoiceDetail(detail),
//                                                                                           NSR.stockProp###invoiceDetail(detail),
//                                                                                           NSR.dateTimeInvoiceDetail(detail))
//                                        WHEN CHANGED(invoiceDetailUserInvoiceDetail(detail)) OR
//                                             CHANGED(NSR.batchInvoiceDetail(detail)) OR
//                                             CHANGED(NSR.priceListTypeInvoiceDetail(detail)) OR
//                                             CHANGED(NSR.skuInvoiceDetail(detail)) OR
//                                             CHANGED(NSR.stockProp###invoiceDetail(detail)) OR
//                                             CHANGED(NSR.dateTimeInvoiceDetail(detail));

    recalculatedPriceUserInvoiceDetail(detail) = ACTION (detail) {    //todo: необходимо сделать, чтобы ACTION вызывался после пересчета цены от партии
        IF invoiceDetailUserInvoiceDetail(detail) THEN {
            SET NSR.priceUserInvoiceDetail(detail) <-  NS.priceInvoiceDetail(invoiceDetailUserInvoiceDetail(detail));
            SET NSR.invoicePriceUserInvoiceDetail(detail) <-  NS.invoicePriceInvoiceDetail(invoiceDetailUserInvoiceDetail(detail));
            SET NSR.VATUserInvoiceDetail(detail) <- NS.VATInvoiceDetail(invoiceDetailUserInvoiceDetail(detail));
        }
    }
        WHEN SESSION (CHANGED(invoiceDetailUserInvoiceDetail(detail)) OR
            CHANGED(NSR.batchInvoiceDetail(detail)) OR
            CHANGED(NSR.priceListTypeInvoiceDetail(detail)) OR
            CHANGED(NSR.skuInvoiceDetail(detail)) OR
            CHANGED(NSR.stockProp###invoiceDetail(detail)) OR
            CHANGED(NSR.dateTimeInvoiceDetail(detail)))
            DO EXEC recalculatedPriceUserInvoiceDetail(detail);


    EXTEND FORM userInvoice PROPERTIES (d) descriptionInvoiceDetailUserInvoiceDetail AFTER shortNameUOMSkuUserInvoiceDetail;
    EXTEND FORM NS.userInvoice PROPERTIES (d) READONLY returnQuantityInvoiceDetail BEFORE namePriceListTypeUserInvoiceDetail;

    EXTEND FORM invoices PROPERTIES (d) READONLY descriptionInvoiceDetailInvoiceDetail AFTER shortNameUOMSkuInvoiceDetail;
    EXTEND FORM NS.invoices PROPERTIES (d) READONLY returnQuantityInvoiceDetail BEFORE namePriceListTypeInvoiceDetail;

    NSR.batchUserInvoiceDetail(detail) <- NS.maxBatchInvoiceDetail(invoiceDetailUserInvoiceDetail(detail))
        WHEN CHANGED(invoiceDetailUserInvoiceDetail(detail)) AND NS.countBatchInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) == 1;

    CONSTRAINT batchUserInvoiceDetail(detail) AND invoiceDetailUserInvoiceDetail(detail) AND
               NOT costInvoiceDetailBatch(invoiceDetailUserInvoiceDetail(detail), batchUserInvoiceDetail(detail))
               CHECKED BY batchUserInvoiceDetail, invoiceDetailUserInvoiceDetail
               MESSAGE 'Выбрана партия, которая не была списана в соответствующей строке продажи';
END

META defineInvoiceDestination(fromLegalEntity, toLegalEntity)
    Invoice.fromLegalEntityInvoice(invoice) += fromLegalEntity##Invoice(invoice);
    Invoice.toLegalEntityInvoice(invoice) += toLegalEntity##Invoice(invoice);
    //Invoice.dataFromLegalEntityInvoiceDetail(detail) += data###fromLegalEntity##InvoiceDetail(detail);
    //Invoice.dataToLegalEntityInvoiceDetail(detail) += data###toLegalEntity##InvoiceDetail(detail);
END


META defineInvoiceStockDestination(fromStock, toStock)
    Invoice.fromStockInvoice(invoice) += fromStock##Invoice(invoice);
    Invoice.toStockInvoice(invoice) += toStock##Invoice(invoice);
    Invoice.dataFromStockInvoiceDetail(detail) += data###fromStock##InvoiceDetail(detail);
    Invoice.dataToStockInvoiceDetail(detail) += data###toStock##InvoiceDetail(detail);
END

//-- Расширение формы подбора упаковкой (один склад)
META defineDocumentPackSkuCustom(object, detail, skuProp, stockProp, NS)
    quantityPackSku###object 'Кол-во упаковок в документе' (sku, object) = GROUP SUM quantityPack###detail(detail)
        BY skuProp###detail(detail), object###detail(detail);

    changeQuantityPackSku###object = ACTION (sku, object) {
        REQUEST NUMERIC[14,3] INPUT;
        IF detail###Sku###object(sku, object) THEN {
            IF requestedNumeric() THEN {
                SET quantityPack###detail(detail) <- requestedNumeric() WHERE detail == detail###Sku###object(sku, object);
                SET quantity###detail(detail) <- quantityPack###detail(detail)*amountPack###detail(detail) WHERE detail == detail###Sku###object(sku, object);
            } ELSE {
                EXEC delete(detail###Sku###object(sku, object));

            }
        } ELSE {
            IF requestedNumeric() THEN
                FOR ADDOBJ d = ###detail DO {
                SET object###detail(d) <- object;
                SET stockProp###detail (d) <- stockProp###object(object);
                SET skuProp###detail(d) <- sku;
                SET quantityPack###detail (d) <- requestedNumeric();
            }
        }
    }
    changeAmountPackSku###object = ACTION (sku, object) {
        REQUEST NUMERIC[14,3] INPUT;
        IF detail###Sku###object(sku, object) THEN {
            IF requestedNumeric() THEN {
                SET amountPack###detail(detail) <- requestedNumeric() WHERE detail == detail###Sku###object(sku, object);
                SET quantity###detail(detail) <- quantityPack###detail(detail)*amountPack###detail(detail) WHERE detail == detail###Sku###object(sku, object) AND quantityPack###detail(detail);
            } ELSE {
                SET amountPack###detail(detail) <- NULL WHERE detail == detail###Sku###object(sku, object);
            }

        }
        EXEC NS.changeValuePackSku(sku);
    }

END
META defineDocumentPackSku(object, skuProp, stockProp, NS)
    @defineDocumentPackSkuCustom(object, object##Detail, skuProp, stockProp, NS);
END


META extendFormDocumentPackSkuCustom(object, form, concrete, toShowProp, NS)

    EXTEND FORM form
        PROPERTIES SHOWIF toShowProp###object(concrete)  BEFORE quantity###object##Detail###sku###object(s, concrete) NS.idBarcodePackSku(s) READONLY,
                   NS.shortNameUOMPackSku(s) READONLY, NS.amountPackSku(s) ON CHANGE changeAmountPackSku###object(s, concrete),
                   quantityPackSku###object(s, concrete) ON CHANGE changeQuantityPackSku###object(s, concrete)
    ;
END

// вторая валюта
META defineHomeCurrencyInvoice(invoice)
    isHomeCurrency 'Конвертация' = DATA BOOLEAN(###invoice) IN documentPrmGroup;

    homeCurrencyInvoice = ABSTRACT Currency(###invoice);
    homeCurrencyUserInvoice = DATA Currency(User###invoice);
    homeCurrencyInvoice(invoice) += homeCurrencyUserInvoice(invoice);
    nameHomeCurrencyInvoice 'Валюта (пост.)' (invoice) = name(homeCurrencyInvoice(invoice));

    typeExchangeInvoice = ABSTRACT TypeExchange(###invoice);
    typeExchangeUserInvoice = DATA TypeExchange(User###invoice);
    typeExchangeInvoice(invoice) += typeExchangeUserInvoice(invoice);
    nameTypeExchangeInvoice 'Тип обмена' (invoice) = name(typeExchangeInvoice(invoice));

    dateRateExchangeInvoice 'Дата конвертации' = ABSTRACT DATE(###invoice);

    dateRateExchangeUserInvoice 'Дата конвертации' = DATA DATE(User###invoice);
    dateRateExchangeInvoice(invoice) += dateRateExchangeUserInvoice(invoice);

    dateRateExchangeUserInvoice(user###invoice) <- dateInvoice(user###invoice) WHEN CHANGED (dateInvoice(user###invoice));

    calcRateExchangeInvoice 'Курс' (invoice) = rateTypeExchangeCurrencyDate(typeExchangeInvoice(invoice), currencyInvoice(invoice), dateRateExchangeInvoice(invoice));

    rateExchangeInvoice 'Курс' = ABSTRACT NUMERIC[14,3](###invoice);
    rateExchangeUserInvoice 'Курс' = DATA NUMERIC[14,3](User###invoice);
    rateExchangeInvoice(invoice) += rateExchangeUserInvoice(invoice);

    rateExchangeUserInvoice(invoice) <- calcRateExchangeInvoice(invoice) WHEN CHANGED (dateRateExchangeInvoice(invoice)) OR
                                                                              CHANGED (typeExchangeInvoice(invoice)) OR
                                                                              CHANGED (currencyInvoice(invoice));

    roundCurrencyInvoice(number, invoice) = roundPriceCurrency(number, homeCurrencyInvoice(invoice));
    ratePriceInvoiceDetail 'Цена (пост.)' (invoice##Detail) = roundCurrencyInvoice(priceInvoiceDetail(invoice##Detail)*rateExchangeInvoice(invoiceInvoiceDetail(invoice##Detail)), invoiceInvoiceDetail(invoice##Detail));

    homePriceInvoiceDetail 'Цена (пост.)' = ABSTRACT NUMERIC[14,3](###invoice##Detail);
    homePriceUserInvoiceDetail 'Цена (пост.)' = DATA NUMERIC[14,3](User###invoice##Detail);
    homePriceInvoiceDetail(invoiceDetail) += homePriceUserInvoiceDetail(invoiceDetail);

    homePriceUserInvoiceDetail(invoice##Detail) <- ratePriceInvoiceDetail(invoice##Detail) WHEN CHANGED (dateInvoice(invoiceInvoiceDetail(invoice##Detail))) OR
                                                                                                CHANGED (homeCurrencyUserInvoice(invoiceInvoiceDetail(invoice##Detail))) OR
                                                                                                CHANGED (typeExchangeUserInvoice(invoiceInvoiceDetail(invoice##Detail))) OR
                                                                                                CHANGED (priceInvoiceDetail(invoice##Detail));

    sumHomeInvoiceDetail 'Сумма (пост.)' (invoice##Detail) = quantityInvoiceDetail(invoice##Detail) * homePriceInvoiceDetail(invoice##Detail);

    EXTEND FORM userInvoice
        PROPERTIES(i) isHomeCurrency BEFORE nameAgreementUserInvoice
        PROPERTIES(i) SHOWIF isHomeCurrency(i) nameHomeCurrencyInvoice, nameTypeExchangeInvoice, dateRateExchangeInvoice, rateExchangeInvoice
        PROPERTIES(d) sumHomeInvoiceDetail AFTER sumUserInvoiceDetail SHOWIF isHomeCurrency(i)
        PROPERTIES(d) homePriceUserInvoiceDetail AFTER sumHomeInvoiceDetail SHOWIF isHomeCurrency(i)
    ;

    EXTEND DESIGN userInvoice {
        headerMainParams {
            NEW headerHomeCurrency {
                title = 'Конвертация';
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(nameHomeCurrencyInvoice);
                ADD PROPERTY(nameTypeExchangeInvoice);
                ADD PROPERTY(dateRateExchangeInvoice);
                ADD PROPERTY(rateExchangeInvoice);
            }
        }
    }

    EXTEND FORM invoices
        PROPERTIES(i) READONLY isHomeCurrency, nameHomeCurrencyInvoice, nameTypeExchangeInvoice, dateRateExchangeInvoice, rateExchangeInvoice
        PROPERTIES(d) READONLY sumHomeInvoiceDetail AFTER sumInvoiceDetail SHOWIF isHomeCurrency(i)
        PROPERTIES(d) READONLY homePriceInvoiceDetail AFTER sumHomeInvoiceDetail SHOWIF isHomeCurrency(i)
    ;
END

