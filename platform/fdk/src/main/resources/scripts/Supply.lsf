MODULE Supply;

REQUIRE System, Stock, Tax;

CLASS ABSTRACT supplyLedger 'Покупка товара' : skuLedger;
TABLE supplyLedger(supplyLedger);

dateTimeSupplyLedger 'Дата/время' (ledger) = ABSTRACT DATETIME (supplyLedger) PERSISTENT INDEXED;
dateSupplyLedger 'Дата' (ledger) = toDate(dateTimeSupplyLedger(ledger)) PERSISTENT INDEXED;

isPostedSupplyLedger 'Проведен' (ledger) = ABSTRACT BOOLEAN (supplyLedger) PERSISTENT;

skuSupplyLedger (ledger) = ABSTRACT sku (supplyLedger) PERSISTENT INDEXED;
nameSkuSupplyLedger 'SKU' (ledger) = nameSku(skuSupplyLedger(ledger));

stockSupplyLedger (ledger) = ABSTRACT stock (supplyLedger) PERSISTENT INDEXED;
nameStockSupplyLedger 'Склад' (ledger) = name(stockSupplyLedger(ledger));

descriptionSupplyLedger 'Название документа' (ledger) = ABSTRACT STRING[200] (supplyLedger) PERSISTENT;

quantitySupplyLedger 'Кол-во' (ledger) = ABSTRACT NUMERIC[14,3] (supplyLedger) PERSISTENT;

sumSupplyLedger 'Сумма покупки' (ledger) = ABSTRACT NUMERIC[16,2] (supplyLedger) PERSISTENT;

supplierSupplyLedger  (ledger) = ABSTRACT legalEntity (supplyLedger) PERSISTENT;
nameSupplierSupplyLedger 'Поставщик' (ledger) = name(supplierSupplyLedger (ledger));

quantitySupplierSku 'Связь' (legalEntity, sku)= GROUP SUM quantitySupplyLedger(ledger) IF isPostedSupplyLedger(ledger)
    BY supplierSupplyLedger(ledger), skuSupplyLedger(ledger) PERSISTENT;

sumPurchaseTypeExchangeSupplyLedger 'Сумма покупки валюта' (typeExchange, supplyLedger)= roundCurrency((sumSupplyLedger (supplyLedger)/
    rateTypeExchangeCurrencyDate(typeExchange, currencyStock(stockSupplyLedger(supplyLedger)), dateSupplyLedger(supplyLedger))), currencyTypeExchange(typeExchange));

CONSTRAINT quantitySupplyLedger(supplyLedger) == 0 MESSAGE 'ошибка: Количество покупки не должно быть равно нулю';

averagePriceSupplyLedger 'Цена покупки (средняя)' (supplyLedger) = sumSupplyLedger(supplyLedger)/quantitySupplyLedger(supplyLedger);

VATSupplyLedger (ledger) = ABSTRACT range (supplyLedger) PERSISTENT;
valueVATSupplyLedger 'НДС, %' (ledger) = valueRateRangeDate(VATSupplyLedger(ledger), dateSupplyLedger(ledger));

sumVATSupplyLedger 'Сумма НДС' (ledger) = [X*Y/(100+Y)](
        sumSupplyLedger(ledger), valueVATSupplyLedger(ledger));

quantityPurchaseSkuStockDate (sku, stock, date) = GROUP SUM quantitySupplyLedger(ledger) IF isPostedSupplyLedger(ledger)
    BY skuSupplyLedger(ledger), stockSupplyLedger(ledger), dateSupplyLedger(ledger) PERSISTENT;

sumPurchaseSkuStockDate (sku, stock, date) = GROUP SUM sumSupplyLedger(ledger) IF isPostedSupplyLedger(ledger)
    BY skuSupplyLedger(ledger), stockSupplyLedger(ledger), dateSupplyLedger(ledger) PERSISTENT;


quantityPurchaseSkuStockWeekDateFromTo 'Закуплено за неделю (кол-во)' (sku, stock, week, dateFrom, dateTo) = GROUP SUM
        quantityPurchaseSkuStockDate(sku, stock, date) AND date >= (dateFrom AS DATE) AND date <= (dateTo AS DATE)
        BY sku, stock, weekInDate(date), dateFrom, dateTo;

sumPurchaseSkuStockWeekDateFromTo 'Закуплено за неделю (сумма)' (sku, stock, week, dateFrom, dateTo) = GROUP SUM
        sumPurchaseSkuStockDate(sku, stock, date) AND date >= (dateFrom AS DATE) AND date <= (dateTo AS DATE)
        BY sku, stock, weekInDate(date), dateFrom, dateTo;

averagePricePurchaseSkuStockWeekDateFromTo 'Средняя цена за неделю' (sku, stock, week, dateFrom, dateTo)=  round2(sumPurchaseSkuStockWeekDateFromTo(sku, stock, week, dateFrom, dateTo) /
        quantityPurchaseSkuStockWeekDateFromTo(sku, stock, week, dateFrom, dateTo));

averagePurchaseSkuStockWeekDateFromTo 'Закуплено за неделю кол-во/цена' (sku, stock, week, dateFrom, dateTo)= [FORMULA STRING[30] 'CAST($1 AS TEXT) || \'(\' || CAST($2 AS TEXT) || \')\'']
        (quantityPurchaseSkuStockWeekDateFromTo(sku, stock, week, dateFrom, dateTo), averagePricePurchaseSkuStockWeekDateFromTo(sku, stock, week, dateFrom, dateTo)) MINCHARWIDTH 10 PREFCHARWIDTH 15;

quantitySkuPurchaseWeekDateFromTo 'Закуплено за неделю (кол-во)' (week, dateFrom, dateTo) = GROUP SUM
        quantityPurchaseSkuStockWeekDateFromTo(sku, stock, week, dateFrom, dateTo) BY  week, dateFrom, dateTo;

sumPurchaseWeekDateFromTo 'Закуплено за неделю (сумма)' (week, dateFrom, dateTo) = GROUP SUM
        sumPurchaseSkuStockWeekDateFromTo(sku, stock, week, dateFrom, dateTo) BY  week, dateFrom, dateTo;

quantityPurchaseSkuStockDateFromTo 'Закуплено за интервал (кол-во)' (sku, stock, dateFrom, dateTo) = GROUP SUM
        quantityPurchaseSkuStockDate(sku, stock, date) AND date >= (dateFrom AS DATE) AND date <= (dateTo AS DATE)
        BY sku, stock, dateFrom, dateTo;

sumPurchaseSkuStockDateFromTo 'Закуплено за интервал (сумма)' (sku, stock, dateFrom, dateTo) = GROUP SUM
        sumPurchaseSkuStockDate(sku, stock, date) AND date >= (dateFrom AS DATE) AND date <= (dateTo AS DATE)
        BY sku, stock, dateFrom, dateTo;

quantityPurchaseSkuDateFromTo 'Закуплено за интервал (кол-во)' (sku, dateFrom, dateTo) = GROUP SUM
        quantityPurchaseSkuStockDate(sku, stock, date) AND date >= (dateFrom AS DATE) AND date <= (dateTo AS DATE)
        BY sku, dateFrom, dateTo;

sumPurchaseSkuDateFromTo 'Закуплено за интервал (сумма)' (sku, dateFrom, dateTo) = GROUP SUM
        sumPurchaseSkuStockDate(sku, stock, date) AND date >= (dateFrom AS DATE) AND date <= (dateTo AS DATE)
        BY sku, dateFrom, dateTo;

//---------------------------------Тип обмена---------------------------------------//

sumPurchaseTypeExchangeSkuStockDate (typeExchange, sku, stock, date)= roundCurrency((sumPurchaseSkuStockDate (sku, stock, date)/ rateTypeExchangeCurrencyDate(typeExchange, currencyStock(stock), date)), currencyTypeExchange(typeExchange));

sumPurchaseTypeExchangeSkuStockDateFromTo 'Закуплено за интервал (сумма-валюта)' (typeExchange, sku, stock, dateFrom, dateTo) = GROUP SUM
        sumPurchaseTypeExchangeSkuStockDate (typeExchange, sku, stock, date) AND date >= (dateFrom AS DATE) AND date <= (dateTo AS DATE)
        BY typeExchange, sku, stock, dateFrom, dateTo;

sumPurchaseTypeExchangeSkuDateFromTo 'Закуплено за интервал (сумма-валюта)' (typeExchange, sku, dateFrom, dateTo) = GROUP SUM
        sumPurchaseTypeExchangeSkuStockDateFromTo(typeExchange, sku, stock, dateFrom, dateTo) BY typeExchange, sku, dateFrom, dateTo;


skuStockAveragePurchaseInterval 'Интервал расчета закупок в день' = DATA INTEGER ();

averagePurchaseSkuStock 'Закупок в день' = DATA NUMERIC[14,3] (sku, stock);

calcQuantityPurchaseInterval = ACTION (dateFrom, dateTo) {
    LOCAL balance = NUMERIC[14,3] (sku, stock);
    LOCAL days = INTEGER (sku, stock);
    LOCAL dateCur = DATE();

    SET dateCur() <- (dateFrom AS DATE);
    SET balance(sku, stock) <- balanceBSkuStockDate(sku, stock, dateFrom);

    WHILE dateCur() <= (dateTo AS DATE) DO {
        SET days(sku, stock) <- days(sku, stock) (+)
                   (1 IF ((balance(sku, stock) > 0) OR (quantitySkuStockDate(sku, stock, dateCur()) > 0)));
        SET balance(sku, stock) <- balance(sku, stock) (+)
                   signedQuantitySkuStockDate(sku, stock, dateCur());
        SET dateCur() <- sumDate(dateCur(), 1);
    }

    SET averagePurchaseSkuStock(sku, stock) <- quantityPurchaseSkuStockDateFromTo (sku, stock, dateFrom, dateTo) / days(sku, stock);
}
calcCurrentQuantityPurchaseInterval 'Пересчитать однодневные закупки' = ACTION () NEWSESSION AUTOAPPLY {
    EXEC calcQuantityPurchaseInterval(subtractDate(currentDate(), skuStockAveragePurchaseInterval()), subtractDate(currentDate(), 1));
}

EXTEND FORM options
    PROPERTIES() skuStockAveragePurchaseInterval, calcCurrentQuantityPurchaseInterval
;
EXTEND DESIGN options {
    commons {
        ADD PROPERTY(skuStockAveragePurchaseInterval);
        ADD PROPERTY(calcCurrentQuantityPurchaseInterval);
    }
}

//---------------------------------------------- Формы закупки -------------------------------------//

FORM supplyLedger 'Поступления по позициям'

    OBJECTS dates = (dFrom = DATE, dTo = DATE, te=typeExchange) FIXED PANEL
    PROPERTIES valFrom = OBJVALUE(dFrom), valTo = OBJVALUE(dTo), nameType = name(te) SELECTOR, nameCurrencyTypeExchange(te) READONLY

    OBJECTS s = supplyLedger
    PROPERTIES(s) READONLY dateSupplyLedger, dateTimeSupplyLedger, nameStockSupplyLedger, nameSupplierSupplyLedger, nameSkuSupplyLedger, descriptionSupplyLedger,
                           quantitySupplyLedger, sumVATSupplyLedger, sumSupplyLedger, averagePriceSupplyLedger
    PROPERTIES    READONLY sumPurchaseTypeExchangeSupplyLedger (te, s)
    FILTERS isPostedSupplyLedger(s)
    FILTERS dateSupplyLedger(s) >= dFrom, dateSupplyLedger(s) <= dTo
;
DESIGN supplyLedger FROM DEFAULT {
    main {
        childConstraints = TO THE BOTTOM;
        ADD dates.box {
            childConstraints = TO THE RIGHT;
            PROPERTY(nameCurrencyTypeExchange(te)) { caption = 'Валюта'; preferredCharWidth = 20;}
            PROPERTY(nameType) { caption = 'Тип обмена'; preferredCharWidth = 20;}
        }
        ADD s.box{
            childConstraints = TO THE BOTTOM;
        }
    }
    ADD functions.box;
}

FORM supplySkuStock 'Поступления по SKU'

    OBJECTS dates = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES valFrom = OBJVALUE(dFrom), valTo = OBJVALUE(dTo)

    OBJECTS te = typeExchange FIXED PANEL
    PROPERTIES nameType = name(te) SELECTOR, nameCurrencyTypeExchange(te) READONLY

    OBJECTS w = INTEGER
    FILTERS quantitySkuPurchaseWeekDateFromTo(w, dFrom, dTo)

    TREE stockTree sg = stockGroup PARENT parentStockGroup, ts = stock
    PROPERTIES READONLY sgTreeName = name(sg), tsTreeName = name(ts)
    FILTERS stockGroupStock(ts) == sg

    TREE skuTree sk = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = name(sk)
    ORDER BY skuTreeName

    OBJECTS           sts=(st=stock, s=sku)
    PROPERTIES        READONLY nameSku(s), stockName = name(st)

    FILTERS           isParentSkuGroupSku(sk, s),
                      (st == ts AND sg IS stockGroup) OR (isParentStockGroupStock(sg, st) AND NOT ts)

    ORDER BY          nameSku

    PROPERTIES        balanceBSkuStockDate(s, st, dFrom), quantityPurchaseSkuStockWeekDateFromTo(s, st, w, dFrom, dTo)  COLUMNS (w) HEADER toString4 (w),
                      quantityPurchaseSkuStockDateFromTo(s, st, dFrom, dTo),
                      balanceASkuStockDate(s, st, dTo), sumPurchaseSkuStockDateFromTo (s, st, dFrom, dTo),  sumPurchaseTypeExchangeSkuStockDateFromTo(te,s, st, dFrom, dTo)

    FILTERGROUP filtersPurchase
        FILTER 'Показывать поступившие за интервал' 'F11' quantityPurchaseSkuStockDateFromTo(s, st, dFrom, dTo)

    FILTERGROUP filtersPurchase
        FILTER 'Показывать с остатками' 'F10' balanceASkuStockDate(s, st, dTo)

;

DESIGN supplySkuStock FROM DEFAULT {

    main {
        NEW topContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            NEW firstCase {
                type = SPLITV;
                childConstraints = TO THE BOTTOM;

                ADD stockTree.tree.box {title = 'Магазины'; }
                ADD skuTree.tree.box { title = 'Товарные группы'; }
            }

            NEW secondCase {
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;

                ADD dates.box { childConstraints = TO THE RIGHT; }
                ADD te.box {
                    childConstraints = TO THE RIGHT;
                    PROPERTY(nameCurrencyTypeExchange(te)) { caption = 'Валюта'; preferredCharWidth = 20;}
                    PROPERTY(nameType) { caption = 'Тип обмена'; preferredCharWidth = 20;}
                }

                REMOVE w.box;
                ADD sts.box { fillVertical = 2; }

            }
        }
        ADD functions.box;
    }
}

NAVIGATOR {
    NEW supplyNavigator 'Поступления' {
        ADD supplyLedger;
        ADD supplySkuStock;
    }
}

//---------------------------------------------- Макросы для имплементаций -------------------------------------//

META implementSupplyLedgerCustom(concrete, skuProp, stockProp)
    dateTimeSupplyLedger (ledger) += dateTime###concrete##Detail(ledger);
    isPostedSupplyLedger (ledger) += isPosted###concrete##Detail(ledger);
    skuSupplyLedger (ledger) += skuProp###concrete##Detail(ledger);
    stockSupplyLedger (ledger) += stockProp###concrete##Detail(ledger);
    descriptionSupplyLedger (ledger) += description###concrete##Detail(ledger);
END
META implementSupplyLedger(concrete, skuProp, stockProp)
    EXTEND CLASS concrete##Detail : supplyLedger;
    @implementSupplyLedgerCustom(concrete, skuProp, stockProp);
END

EXTEND FORM currentBalanceSkuStock PROPERTIES(s, st) averagePurchaseSkuStock READONLY;

//---------------------------------------------- Расширение формы подбор товаров -------------------------------------//
META defineSupplierDialogStockSku (form)

    form###supplier = SESSION DATA legalEntity ();
    form###nameSupplier 'Поставщик' () = name(form###supplier()) PREFCHARWIDTH 30;

    form###suppliersFilter (sku) =  (TRUE AND quantitySupplierSku(form###supplier(), sku)) OR (sku IS sku AND NOT form###supplier());


    EXTEND FORM form
        PROPERTIES() form###nameSupplier

        PROPERTIES(s) READONLY form###balance SHOWIF form###stock()
        FILTERS form###suppliersFilter(s)

    ;

    EXTEND DESIGN form {
        filterContainer {
            ADD PROPERTY(form###nameSupplier());
        }
    }
END
@defineSupplierDialogStockSku(dialogSku);

//-------------------------------- Расширение формы подбор товаров (заказ/инвойс)----------------------------//

META defineDocumentSupplierSkuStock (object, form, concrete, concrete2)
    supplierEntity###object = SESSION DATA legalEntity (object);
    nameSupplierEntity###object 'Поставщик' (object) = name(supplierEntity###object(object));
    relationSupplier###object###sku (object, sku) =  (TRUE AND quantitySupplierSku(supplierEntity###object(object), sku)) OR (sku IS sku AND NOT supplierEntity###object(object));

    EXTEND FORM form
    PROPERTIES nameSupplierEntity###object(concrete) FORCE PANEL
    FILTERS           relationSupplier###object###sku(concrete, s)
    ;
    EXTEND DESIGN form {
        row {
            ADD concrete.panel BEFORE concrete2.box;
        }
    }
END