MODULE BlanketOrder;

REQUIRE Order;

//----------------------------------------------- Множественнвй Заказ ---------------------------------------------------//

META defineBlanketOrder(sign)

    CLASS blanketOrder 'Множественный заказ'###sign : historizable, numeratedDocument;
    CLASS blanketOrderDetail 'Строка множественного заказа'###sign : named;

    CLASS blanketOrderPosted 'Проведенный множественный заказ'###sign : blanketOrder, postedObject;
    CLASS blanketOrderClosed 'Закрытый множественный заказ'###sign : blanketOrderPosted;

    @defineDocument(blanketOrder);
    @defineDocumentHeaderLegalEntity (blanketOrder, supplier, 'Поставщик');
    @defineDocumentHeaderLegalEntity (blanketOrder, customer, 'Покупатель');

    @defineDocumentHeaderStock(blanketOrder, stock, 'Склад поставщика', supplier);
    @defineDocumentDetailDataStock (blanketOrder, stock, supplierStock, 'Склад поставщика');

    CONSTRAINT supplierBlanketOrder(blanketOrder) AND supplierStockBlanketOrder(blanketOrder) AND NOT
    inLegalEntityStock(supplierBlanketOrder(blanketOrder), supplierStockBlanketOrder(blanketOrder))
        CHECKED BY supplierBlanketOrder, supplierStockBlanketOrder
            MESSAGE 'Поставщик и склад поставщика не имеют связи';

    @defineDocumentPosted(blanketOrder);
    @defineDocumentClosed (blanketOrder);

    @defineDocumentTimeShipment (blanketOrder, shipment, ' поставки');

    @defineDocumentDescription(blanketOrder, 'Множественный заказ'###sign);

    @defineDocumentCurrency (blanketOrder);
    @deriveDocumentCurrency(blanketOrder, supplierStock);

    TABLE blanketOrderStock(blanketOrder, stock);

    customerStockBlanketOrderDetail (blanketOrderDetail) = DATA stock (blanketOrderDetail);
    nameCustomerStockBlanketOrderDetail 'Склад покупателя' (blanketOrderDetail) = name(customerStockBlanketOrderDetail(blanketOrderDetail));

    userPriceListTypeBlanketOrderStock (blanketOrder, stock) = DATA priceListType (blanketOrder, stock);
    @defineDocumentDetailPriceListType(blanketOrder, blanketOrderDetail);

    @defineDocumentDetailSku(blanketOrder, sku);
    @defineDocumentDetailQuantity(blanketOrder);

    @defineDocumentHeaderQuantityContractor(blanketOrder, customerStock);
    @defineDocumentHeaderQuantity(blanketOrder);

    @defineDocumentHeaderSkuQuantityContractor (blanketOrder, sku, customerStock);
    @defineDocumentHeaderSkuQuantity(blanketOrder, sku);

    countBlanketOrderDetailStockBlanketOrder 'Кол-во строк по складу '(stock, blanketOrder) = GROUP SUM 1 BY supplierStockBlanketOrderDetail(blanketOrderDetail), blanketOrderBlanketOrderDetail(blanketOrderDetail);
    inBlanketOrderStock 'В заказе' (blanketOrder, stock) = DATA BOOLEAN (blanketOrder, stock); //customerStock
    inCustomerBlanketOrderStock 'Отм.' (blanketOrder, stock) = inLegalEntityStock(customerBlanketOrder(blanketOrder), stock);

    @defineDocumentHeaderAgreement (blanketOrder);
    @deriveDocumentHeaderAgreement (blanketOrder, supplierBlanketOrder, customerBlanketOrder);
    @defineDocumentDoubleInterfaceHeaderAgreement (blanketOrder, stock, supplier, customer);

    priceListTypeBlanketOrderDetail (detail) <-
        IF TRUE AND NOT supplierStockBlanketOrder (blanketOrderBlanketOrderDetail(detail))
            THEN priceListTypeAgreementSkuOver(defaultAgreementSupplierCustomer(legalEntityStock(supplierStockBlanketOrderDetail(detail)), legalEntityStock(customerStockBlanketOrderDetail(detail))), skuBlanketOrderDetail(detail))
            ELSE priceListTypeBlanketOrderStock (blanketOrderBlanketOrderDetail(detail), customerStockBlanketOrderDetail(detail))
        WHEN CHANGED(supplierStockBlanketOrderDetail(detail)) OR CHANGED(customerStockBlanketOrderDetail(detail)) OR CHANGED(skuBlanketOrderDetail(detail));

//    dataPriceListTypeBlanketOrderDetail (detail) <-
//        priceListTypeAgreementSkuOver(defaultAgreementSupplierCustomer(legalEntityStock(supplierStockBlanketOrderDetail(detail)), legalEntityStock(customerStockBlanketOrderDetail(detail))), skuBlanketOrderDetail(detail))
//        WHEN ASSIGNED(detail IS blanketOrderDetail);

    @defineDocumentDetailPrice(blanketOrder);
    @deriveDocumentDetailPricePriceListType(blanketOrder, supplierStock);

    @defineDocumentDetailDataSum (blanketOrder);
    @deriveDocumentDetailSum(blanketOrder, quantity);

    @defineDocumentDetailVAT(blanketOrder, countrySupplierStock);
    @defineDocumentDetailVATDataSum (blanketOrder, invoice);
    @deriveDocumentDetailVATPrefixSum (blanketOrder, invoice);
    @deriveDocumentDetailVATDataSum(blanketOrder);


    @defineDocumentDetailPriceCustomPrefix (blanketOrderDetail, invoice, ' с НДС');
    @deriveDocumentDetailVAT (blanketOrder, , date,  sku, supplierStock);
    @deriveDocumentDetailValueVAT(blanketOrder, );
    @deriveDocumentDetailPricePriceListTypeVAT (blanketOrder, supplierStock);
    @deriveDocumentPriceDetailOnChangeInvoicePrice(blanketOrder);
    @deriveDocumentInvoicePriceDetailOnChangePrice(blanketOrder);
    @deriveDocumentInvoicePriceDetailOnChangeVAT(blanketOrder, supplierStock);
//    @deriveDocumentRangeDetailOnChange (blanketOrderDetail, supplierStock);

    @defineDocumentHeaderVATSum (blanketOrder, blanketOrderDetail, invoice);

    @defineDocumentHeaderSumContractor (blanketOrder, customerStock);
    @defineDocumentHeaderSum (blanketOrder);
    @defineDocumentHeaderCountContractor (blanketOrder, customerStock);

    CONSTRAINT customerStockBlanketOrderDetail(blanketOrderDetail) AND NOT inBlanketOrderStock(blanketOrderBlanketOrderDetail(blanketOrderDetail), customerStockBlanketOrderDetail(blanketOrderDetail))
        CHECKED BY customerStockBlanketOrderDetail
            MESSAGE 'Для строки множественного заказа выбран склад не включенный в заказ';

    customerStocksBlanketOrder 'Контрагенты' (blanketOrder) =
        GROUP CONCAT name(stock) IF inBlanketOrderStock(blanketOrder, stock), ', '
        BY blanketOrder
        ORDER stock MINCHARWIDTH 20 MAXCHARWIDTH 60 PREFCHARWIDTH 40 PERSISTENT;

    @defineNumeratedObject (blanketOrder, stock);
// --------------------------- Формы Заказа ---------------------------------

    FORM blanketOrder 'Множественный заказ'###sign
        OBJECTS o = blanketOrder FIXED PANEL
        PROPERTIES (o) objectClassName, nameSupplierBlanketOrder, nameSupplierStockBlanketOrder, nameNumeratorObject, numberObject, seriesObject, dateBlanketOrder, timeBlanketOrder,
                       nameCurrencyBlanketOrder, noteBlanketOrder, nameCustomerBlanketOrder, nameAgreementBlanketOrder,
                       countBlanketOrderDetailBlanketOrder, quantityBlanketOrderDetailBlanketOrder, sumBlanketOrderDetailBlanketOrder,
                       VATSumBlanketOrderDetailBlanketOrder, invoiceSumBlanketOrderDetailBlanketOrder, shipmentDateBlanketOrder, shipmentTimeBlanketOrder

        OBJECTS d = blanketOrderDetail
        PROPERTIES (d) indexBlanketOrderDetail, idBarcodeSkuBlanketOrderDetail, nameSkuBlanketOrderDetail, shortNameUOMSkuBlanketOrderDetail,
                       quantityBlanketOrderDetail, namePriceListTypeBlanketOrderDetail,

                       priceBlanketOrderDetail ON CHANGE EXEC changeInvoicePriceBlanketOrderDetail(d), sumBlanketOrderDetail,
                       numberVATBlanketOrderDetail ON CHANGE EXEC changeInvoicePriceVATBlanketOrderDetail(d),
                       valueVATBlanketOrderDetail, invoicePriceBlanketOrderDetail ON CHANGE EXEC changePriceBlanketOrderDetail(d),
                       VATSumBlanketOrderDetail, invoiceSumBlanketOrderDetail, nameSupplierStockBlanketOrderDetail, nameCustomerStockBlanketOrderDetail,
                       shipmentDateBlanketOrderDetail, shipmentTimeBlanketOrderDetail, ADDOBJ, delete

        OBJECTS c = stock
        PROPERTIES     name(c) READONLY, inBlanketOrderStock(o,c)
        PROPERTIES(o,c) nameNumeratorBlanketOrderStock, numberBlanketOrderStock, seriesBlanketOrderStock,
                        nameAgreementBlanketOrderStock, namePriceListTypeBlanketOrderStock
        PROPERTIES(o,c) READONLY countBlanketOrderDetailBlanketOrderCustomerStock, quantityBlanketOrderDetailBlanketOrderCustomerStock, sumBlanketOrderDetailBlanketOrderCustomerStock

        PROPERTIES(o) TODRAW d deleteBlanketOrderDetailBlanketOrder

        FILTERS blanketOrderBlanketOrderDetail(d) == o,
                inCustomerBlanketOrderStock(o,c)
        FILTERGROUP filtr1
            FILTER 'В заказе' 'F11' inBlanketOrderStock(o,c)


        EVENTS
            ON OK EXEC prePostBlanketOrder(o)

        EDIT blanketOrder OBJECT o
    ;

    DESIGN blanketOrder FROM DEFAULT{

        main {
            preferredSize = (1024, 768);
            NEW specification.box BEFORE functions.box{
                type = TABBED;
                ADD c.box {title = 'Контрагент';}
                ADD d.box {title = 'Спецификация';}

            }

            NEW header.box BEFORE specification.box {
                childConstraints = TO THE RIGHT;

                NEW headerRow1 {
                    childConstraints = TO THE BOTTOM;

                    ADD o.documentHeaderGroup {
                        childConstraints = TO THE RIGHTBOTTOM;
                        ADD PROPERTY(objectClassName) { preferredCharWidth = 10; }
                        ADD PROPERTY(nameNumeratorObject);
                        ADD PROPERTY(numberObject);
                        ADD PROPERTY(seriesObject);
                        ADD PROPERTY(dateBlanketOrder);
                        ADD PROPERTY(timeBlanketOrder);
                    }
                    NEW headerRow11 {
                        childConstraints = TO THE RIGHTBOTTOM;
                        NEW headerRow111 {
                            title = 'Поставщик';
                            childConstraints = TO THE RIGHTBOTTOM;
                            ADD PROPERTY(nameSupplierBlanketOrder);
                            ADD PROPERTY(nameSupplierStockBlanketOrder);
                        }
                        NEW headerRow112 {
                            title = 'Покупатель';
                            childConstraints = TO THE RIGHTBOTTOM;
                            ADD PROPERTY(nameCustomerBlanketOrder);
                        }
                    }
                    NEW headerRow12 {
                        childConstraints = TO THE RIGHTBOTTOM;
                        ADD o.documentPrmGroup {
                            childConstraints = TO THE RIGHTBOTTOM;
                        }
                        ADD o.documentShipmentGroup {
                            childConstraints = TO THE RIGHTBOTTOM;
                        }
                    }
                }
                ADD o.documentSumGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }


            PROPERTY(formOkAction) {
                caption = 'Провести';
            }
        }
    }

    editBlanketOrder 'Редактировать' = ACTION EDITFORM blanketOrder;

//-- SKU
    @defineDocumentSkuStockContractor(blanketOrder, sku, supplierStock, customerStock);
    @extendFormDocumentSkuStockContractorCustom(blanketOrder, blanketOrder, o, supplierStock, customerStock);
    @defineDocumentContactSkuStock (blanketOrder, blanketOrder, supplier, 'Поставщик', o, sts);

    FORM blanketOrders 'Множественные заказы' TITLE 'Множественные заказы'###sign
        OBJECTS o = blanketOrder
        PROPERTIES (o) READONLY isPostedBlanketOrder FORCE GRID, objectClassName, numberObject, seriesObject, dateBlanketOrder, timeBlanketOrder,
                                nameSupplierBlanketOrder, nameSupplierStockBlanketOrder, nameCustomerBlanketOrder, nameCurrencyBlanketOrder, noteBlanketOrder,
                                countBlanketOrderDetailBlanketOrder, quantityBlanketOrderDetailBlanketOrder, sumBlanketOrderDetailBlanketOrder,
                                VATSumBlanketOrderDetailBlanketOrder, invoiceSumBlanketOrderDetailBlanketOrder,
                                shipmentDateBlanketOrder, shipmentTimeBlanketOrder, customerStocksBlanketOrder

        PROPERTIES (o) READONLY FORCE PANEL nameUserCreatedHistorizable, timeCreatedHistorizable, hostnameComputerCreatedHistorizable, nameUserClosed, timeClosed, hostnameComputerClosed

        PROPERTIES (o) ADDFORM, EDITFORM, delete FORCE PANEL DRAWTOTOOLBAR
        PROPERTIES (o) closeBlanketOrder SHOWIF isOpenedBlanketOrder(o)


        OBJECTS d=blanketOrderDetail
        PROPERTIES (d) READONLY indexBlanketOrderDetail, idBarcodeSkuBlanketOrderDetail, nameSkuBlanketOrderDetail, shortNameUOMSkuBlanketOrderDetail,
                       quantityBlanketOrderDetail, namePriceListTypeBlanketOrderDetail,
                       priceBlanketOrderDetail, sumBlanketOrderDetail,
                       numberVATBlanketOrderDetail, valueVATBlanketOrderDetail, VATSumBlanketOrderDetail, invoiceSumBlanketOrderDetail,
                       nameSupplierStockBlanketOrderDetail, nameCustomerStockBlanketOrderDetail,
                       shipmentDateBlanketOrderDetail, shipmentTimeBlanketOrderDetail


        FILTERS blanketOrderBlanketOrderDetail(d) == o
        DIALOG blanketOrder OBJECT o
    ;
    @extendFormFilterAccess(blanketOrder, o, blanketOrders, supplierStock);

    DESIGN blanketOrders FROM DEFAULT {
        PROPERTY(objectClassName) {
            preferredCharWidth = 10;
        }
        PROPERTY (delete(o)) {
            askConfirm = TRUE;
        }

        NEW documentContainer BEFORE functions.box {
            type = SPLITV;
            childConstraints = TO THE BOTTOM;

            ADD o.box;

            NEW documentDetail {
                type = TABBED;

                ADD d.box {
                    title = 'Спецификация';
                }
                NEW documentHistory {
                    title = 'История';

                    ADD o.historyGroup;
                    ADD o.postedGroup;
                }
                NEW printTab {
                    title = 'Печатные формы';
                    NEW printContainer {
                        title = 'Печать';
                        childConstraints = TO THE BOTTOM;
                        fillVertical = 1.0;
                    }
                }
            }
        }
    }
END

META defineOrderBlanketOrder(sign)

    CLASS blanketOrderOrder 'Заказ на основе множественного'###sign : order;
    CLASS blanketOrderOrderDetail 'Строка заказа на основе множественного'###sign : orderDetail;

    CLASS blanketOrderOrderPosted 'Проведенный заказ на основе множественного'###sign : blanketOrderOrder, postedObject;

    @defineDocumentTables(blanketOrderOrder);

    needToOrderBlanketOrderDetailStock (blanketOrderDetail, stock)= quantityBlanketOrderDetail(blanketOrderDetail)
        AND isPostedBlanketOrderDetail(blanketOrderDetail) AND customerStockBlanketOrderDetail(blanketOrderDetail) == stock;

    needToOrderBlanketOrderStock (blanketOrder, stock)= quantityBlanketOrderDetailBlanketOrderCustomerStock(blanketOrder, stock)
        AND isPostedBlanketOrder(blanketOrder);

//-- object
    @defineAggregation(blanketOrder, stock, blanketOrderOrder, needToOrderBlanketOrderStock);

    supplierOrder(order) += supplierBlanketOrder(blanketOrderBlanketOrderOrder(order));
    customerOrder(order) += customerBlanketOrder(blanketOrderBlanketOrderOrder(order));

    @defineDocumentAggregationHeaderStock (blanketOrder, blanketOrderOrder, supplierStock, 'Склад поставщика');
    supplierStockOrder(order) += supplierStockBlanketOrderOrder(order);

    customerStockOrder(order) += stockBlanketOrderOrder(order);

    shipmentDateOrder(order) += shipmentDateBlanketOrder(blanketOrderBlanketOrderOrder(order));
    shipmentTimeOrder(order) += shipmentTimeBlanketOrder(blanketOrderBlanketOrderOrder(order));

    currencyOrder(order) += currencyBlanketOrder(blanketOrderBlanketOrderOrder(order));
    priceListTypeOrder(order) += priceListTypeBlanketOrderStock(blanketOrderBlanketOrderOrder(order), stockBlanketOrderOrder(order));

    @defineDocumentAggregationHeaderNote (blanketOrder, blanketOrderOrder);
    noteOrder(order) += noteBlanketOrderOrder(order);

    seriesOrder(order) += seriesBlanketOrderStock(blanketOrderBlanketOrderOrder(order), stockBlanketOrderOrder(order));
    numberOrder(order) += numberBlanketOrderStock(blanketOrderBlanketOrderOrder(order), stockBlanketOrderOrder(order));
    seriesNumberBlanketOrderOrder 'Серия/Номер' (blanketOrderOrder) = ustring2(
        seriesBlanketOrderStock(blanketOrderBlanketOrderOrder(blanketOrderOrder), stockBlanketOrderOrder(blanketOrderOrder)),
        numberBlanketOrderStock(blanketOrderBlanketOrderOrder(blanketOrderOrder), stockBlanketOrderOrder(blanketOrderOrder)));

//-- detail
    @defineAggregation(blanketOrderDetail, stock, blanketOrderOrderDetail, needToOrderBlanketOrderDetailStock);

    blanketOrderOrderBlanketOrderOrderDetail (blanketOrderOrderDetail) =
        blanketOrderOrderBlanketOrderStock(blanketOrderBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(blanketOrderOrderDetail)),
                                           customerStockBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(blanketOrderOrderDetail)));
    orderOrderDetail(detail) += blanketOrderOrderBlanketOrderOrderDetail(detail);

    dataSupplierStockOrderDetail(detail) += dataSupplierStockBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));

    @defineDocumentHeaderCount(blanketOrderOrder);
    @defineDocumentDetailIndex(blanketOrderOrder);

    @defineDocumentAggregationTime(blanketOrder, blanketOrderOrder);
    dateOrder(order) += dateBlanketOrderOrder(order);
    timeOrder(order) += timeBlanketOrderOrder(order);

    @defineDocumentHeaderDescription(blanketOrderOrder, seriesNumberBlanketOrderOrder, 'Заказ на основе множественного'###sign);
    descriptionOrder (order) += descriptionBlanketOrderOrder(order);

    @defineDocumentAggregationPosted(blanketOrder, blanketOrderOrder);
    isPostedOrder(order) += isPostedBlanketOrderOrder(order);

    @defineDocumentAggregationDetailSku (blanketOrder, blanketOrderOrder, sku);
    skuOrderDetail(detail) +=  skuBlanketOrderOrderDetail(detail);

    @defineDocumentAggregationDetailQuantity (blanketOrder, blanketOrderOrder);
    quantityOrderDetail(detail) +=  quantityBlanketOrderOrderDetail(detail);

    shipmentDataDateOrderDetail(detail) += shipmentDataDateBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));
    shipmentDataTimeOrderDetail(detail) += shipmentDataTimeBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));

    priceListTypeOrderDetail(detail) += priceListTypeBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));

    priceOrderDetail(detail) += priceBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));
    sumOrderDetail(detail) += sumBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));

    editOrder(order) += ACTION EXEC editBlanketOrder(blanketOrderBlanketOrderOrder(order));

END

