MODULE PriceList;

REQUIRE System, Document, Numerator, Stock, Barcode;

// --------------------------- Ценовые группы -------------------------------------//

CLASS ABSTRACT priceGroup 'Ценовая группа' : named;

priceGroupSku = ABSTRACT priceGroup (sku);

@defineHierarchyAbstract(priceGroup);

// --------------------------- Виды цен ------------------------- //

CLASS ABSTRACT priceListType 'Вид цены' : named;

pricePriceListTypeSkuStockDateTime 'Цена' = ABSTRACT NUMERIC[14,2] (priceListType, sku, stock, DATETIME);
pricePriceListTypeBatchStockDateTime 'Цена' = ABSTRACT NUMERIC[14,2] (priceListType, batch, stock, DATETIME);

CLASS ABSTRACT basePriceListType 'Базовый вид цены' : priceListType;

// --------------------------- Системные виды цен ------------------------- //
CLASS STATIC systemPriceListType 'Системный вид цены' {
    stockPriceListType 'Учетная цена'
} : basePriceListType;

priceStockPriceListTypeSkuStockDateTime (type, sku, stock, dateTime) =
    priceSkuStockDateTime(sku, stock, dateTime) AND type == systemPriceListType.stockPriceListType;
priceStockPriceListTypeBatchStockDateTime (type, batch, stock, dateTime) =
    priceBatchStockDateTime(batch, stock, dateTime) AND type == systemPriceListType.stockPriceListType;

priceSystemPriceListTypeSkuStockDateTime (type, sku, stock, dateTime) =
    UNION EXCLUSIVE priceStockPriceListTypeSkuStockDateTime (type, sku, stock, dateTime);
priceSystemPriceListTypeBatchStockDateTime (type, batch, stock, dateTime) =
    UNION EXCLUSIVE priceStockPriceListTypeBatchStockDateTime (type, batch, stock, dateTime);

// --------------------------- Пользовательские виды цен ------------------------- //

CLASS dataPriceListType 'Пользовательский вид цены' : basePriceListType;
@defineDocumentHeaderCurrency(dataPriceListType);

CLASS ABSTRACT priceList 'Прайс';
CLASS ABSTRACT priceListDetail 'Строка прайса';

CLASS userPriceList 'Прайс (польз.)' : priceList, historyObject, numeratedObject;
CLASS userPriceListDetail 'Строка прайса (польз.)' : priceListDetail;
CLASS userPriceListPosted 'Закрытый прайс (польз.)' : userPriceList, postedObject;

@defineDocumentInterface(priceList);

@defineDocumentInterfaceTimePrefix(priceList, from, ' c');
@defineDocumentInterfaceTimePrefix(priceList, to, ' по');

@defineDocumentInterfaceNumber(priceList);

//@defineDocumentInterfaceDataStock(priceList, stock, 'Склад');
@defineDocumentInterfacePosted(priceList);

@defineDocumentInterfaceDescription(priceList, 'Прайс');

@defineDocumentInterfaceCurrency(priceList);
//@deriveDocumentCurrency(userPriceList, dataPriceListType);

@defineDocumentInterfaceDetailSku(priceList, sku);
//@defineDocumentInterfaceDetailPrice(priceList);

toDateUserPriceList(userPriceList) <- NULL WHEN ASSIGNED(userPriceList IS userPriceList);
toTimeUserPriceList(userPriceList) <- NULL WHEN ASSIGNED(userPriceList IS userPriceList);

pricePriceListDetailDataPriceListType 'Цена' = ABSTRACT NUMERIC[14,2] (priceListDetail, dataPriceListType);
priceUserPriceListDetailDataPriceListType 'Цена' = DATA NUMERIC[14,2] (priceListDetail, dataPriceListType);
pricePriceListDetailDataPriceListType (priceListDetail, dataPriceListType) += priceUserPriceListDetailDataPriceListType(priceListDetail, dataPriceListType);

//@defineAddDetailDialogSkuStock(userPriceList, sku, stock, dialogSku);

TABLE priceListDataPriceListType (priceList, dataPriceListType);
TABLE priceListDetailDataPriceListType (priceListDetail, dataPriceListType);

inPriceListPriceListType 'Включен' = ABSTRACT BOOLEAN (priceList, dataPriceListType) PERSISTENT;
inUserPriceListPriceListType 'Включен' = DATA BOOLEAN (userPriceList, dataPriceListType);
inPriceListPriceListType (priceList, dataPriceListType) += inUserPriceListPriceListType(priceList, dataPriceListType);

dataPriceListDetailPriceListType (detail, dataPriceListType) = inPriceListPriceListType(priceListPriceListDetail(detail), dataPriceListType) PERSISTENT;

inPriceList 'Включен' = ABSTRACT BOOLEAN (priceList) PERSISTENT;
inUserPriceList 'Включен' = DATA BOOLEAN (userPriceList);
inUserPriceList(userPriceList) <- TRUE WHEN ASSIGNED(userPriceList IS userPriceList);
inPriceList (priceList) += inUserPriceList(priceList);

inPriceListStockGroup 'Включен' = ABSTRACT BOOLEAN (priceList, stockGroup) PERSISTENT;
inUserPriceListStockGroup 'Включен' = DATA BOOLEAN (userPriceList, stockGroup);
inPriceListStockGroup (priceList, stockGroup) += inUserPriceListStockGroup(priceList, stockGroup);

inPriceListStock 'Включен' = ABSTRACT BOOLEAN (priceList, stock) PERSISTENT;
inUserPriceListStock 'Включен' = DATA BOOLEAN (userPriceList, stock);
inPriceListStock (priceList, stock) += inUserPriceListStock(priceList, stock);

dataPriceListDetailStock (detail, stock) = inPriceListStock(priceListPriceListDetail(detail), stock) PERSISTENT;

levelParentPriceListStockGroup (priceList, stockGroup) = GROUP MIN levelStockGroupStockGroup(stockGroup, parent) IF inPriceListStockGroup(priceList, parent)
                                                              BY priceList, stockGroup PERSISTENT;
nearestParentStockGroup (priceList, stockGroup) = stockGroupStockGroupLevel(stockGroup, levelParentPriceListStockGroup(priceList, stockGroup));
nearestInPriceListStockGroup (priceList, stockGroup) =
    inPriceListStockGroup(priceList, nearestParentStockGroup(priceList, stockGroup));

inPriceListStockGroupOver 'Включен' (priceList, stockGroup) =
    UNION OVERRIDE inPriceList(priceList) AND stockGroup IS stockGroup,
                   nearestInPriceListStockGroup(priceList, stockGroup),
                   inPriceListStockGroup(priceList, stockGroup);

inPriceListStockOver 'Включен' (priceList, stock) =
    UNION OVERRIDE inPriceList(priceList) AND stock IS stock,
                   nearestInPriceListStockGroup(priceList, stockGroupStock(stock)),
                   inPriceListStock(priceList, stock);

currentPricePriceListDetailDataPriceListTypeStock 'Действующая цена' (priceListDetail, dataPriceListType, stock) =
    pricePriceListTypeSkuStockDateTime(dataPriceListType, skuPriceListDetail(priceListDetail), stock, fromDateTimePriceListDetail(priceListDetail));

currentPriceSkuPriceListDataPriceListTypeStock 'Действующая цена' (sku, priceList, dataPriceListType, stock) =
    pricePriceListTypeSkuStockDateTime(dataPriceListType, sku, stock, fromDateTimePriceList(priceList));

markUpPricePriceListDetailDataPriceListTypeStock 'Надбавка, %' (priceListDetail, dataPriceListType, stock) =
    pricePriceListDetailDataPriceListType(priceListDetail, dataPriceListType) * 100.0 /
    currentPricePriceListDetailDataPriceListTypeStock (priceListDetail, dataPriceListType, stock) - 100.0;

extendNameDataPriceListType (dataPriceListType) =
    [FORMULA STRING[50]  ' \'Действующая \' || CAST($1 AS TEXT) || \' цена \''](
    name(dataPriceListType)) MINCHARWIDTH 30 MAXCHARWIDTH 50;

extendNameMarkUpDataPriceListType (dataPriceListType) =
    [FORMULA STRING[50]  'CAST($1 AS TEXT) || \' наценка \''](
    name(dataPriceListType)) MINCHARWIDTH 30 MAXCHARWIDTH 50;

inStockGroupStock (stockGroup, stock) = UNION OVERRIDE stock IS stock AND NOT stockGroup IS stockGroup, isParentStockGroupStock(stockGroup, stock);

inSku 'Включен' (sku) = SESSION DATA BOOLEAN (sku) MINCHARWIDTH 10 MAXCHARWIDTH 10;

FORM userPriceListSku 'Подбор товаров для прайсов'
    TREE skuTree sk = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = name(sk)
    ORDER BY skuTreeName

    OBJECTS p = userPriceList FIXED PANEL, t = dataPriceListType
    FILTERS inPriceListPriceListType(p, t)

    TREE stockTree a=STRING[3], sg = stockGroup PARENT parentStockGroup
    PROPERTIES READONLY OBJVALUE(a), sgTreeName = name(sg)
    ORDER BY sgTreeName
    FILTERS stringEqualsAll(a)
    PROPERTIES(p) READONLY inPriceList TODRAW a FORCE GRID
    PROPERTIES(p, sg) READONLY inPriceListStockGroupOver

    OBJECTS ts = stock
    PROPERTIES(ts) READONLY name
    PROPERTIES(p, ts) READONLY inPriceListStockOver
    FILTERS inStockGroupStock(sg, ts)

    OBJECTS s=sku
    PROPERTIES(s) inSku
    PROPERTIES READONLY inputName = nameSku(s), idBarcodeSku(s)
    PROPERTIES READONLY currentPriceSkuPriceListDataPriceListTypeStock(s, p, t, ts) COLUMNS (t) HEADER extendNameDataPriceListType(t)

    FILTERS isParentSkuGroupSku(sk, s)
    ORDER BY inputName

    OBJECTS si=sku
    PROPERTIES READONLY selectedName = nameSku(si), idBarcodeSku(si)
    PROPERTIES READONLY currentPriceSkuPriceListDataPriceListTypeStock(si, p, t, ts) COLUMNS (t) HEADER extendNameDataPriceListType(t)
    FILTERS inSku(si)
    ORDER BY selectedName
;

DESIGN userPriceListSku FROM DEFAULT {
    REMOVE p.box;
    REMOVE t.box;
    NEW topContainer{
        childConstraints = TO THE RIGHT;
        type = SPLITH;
        ADD skuTree.tree.box;
        NEW firstContainer{
            childConstraints = TO THE BOTTOM;
            fillHorizontal = 3.0;
            type = SPLITV;
            NEW skuContainer {
                childConstraints = TO THE BOTTOM;
                caption = 'Товары';
                type = SPLITV;
                ADD s.box;
                ADD si.box;
            }
            NEW stockContainer {
                childConstraints = TO THE RIGHT;
                caption = 'Склады';
                type = SPLITH;
                ADD stockTree.tree.box{fillHorizontal = 3.0;}
                ADD ts.box{fillHorizontal = 2.0;}
            }
        }
    }
    ADD functions.box;
}

addDetailDialogSkuUserPriceListDetailUserPriceList 'Подбор товара' = ACTION (userPriceList) {

    SET inSku(sku) <- NULL;
    FORM userPriceListSku MODAL;
    IF formResult() == formResult.ok THEN {
        FOR inSku(sku) ADDOBJ u = userPriceListDetail DO {
            SET userPriceListUserPriceListDetail(u) <- userPriceList AS userPriceList;
            SET skuUserPriceListDetail(u) <- sku AS sku;
        }
    }
    SET inSku(sku) <- NULL;
} TOOLBAR;

isSelectedPriceListDetail 'Включен' = SESSION DATA BOOLEAN (priceListDetail);

changeMarkUpSkuUserPriceList 'Изменить наценку' = ACTION (userPriceList, dataPriceListType, stock){

    FORM dialogNumeric MODAL;
    IF formResult() == formResult.ok THEN {
        FOR isSelectedPriceListDetail(detail) AND userPriceListUserPriceListDetail(detail) == userPriceList DO {
            SET pricePriceListDetailDataPriceListType(detail, dataPriceListType) <- currentPricePriceListDetailDataPriceListTypeStock(detail, dataPriceListType, stock) * (chosenNumeric('n') + 100.0) / 100.0;
        }
    }
}

FORM userPriceList 'Прайс'
    TREE skuTree sk = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = name(sk)
    ORDER BY skuTreeName

    OBJECTS p = userPriceList FIXED PANEL
    PROPERTIES(p) objectClassName, nameNumeratorObject, numberObject, seriesObject,
                  dateUserPriceList, timeUserPriceList,
                  fromDateUserPriceList, fromTimeUserPriceList, toDateUserPriceList, toTimeUserPriceList,
                  nameCurrencyUserPriceList, noteUserPriceList

    OBJECTS t = dataPriceListType
    PROPERTIES(t) READONLY name
    PROPERTIES(p, t) inPriceListPriceListType

    OBJECTS st = dataPriceListType
    PROPERTIES(st) READONLY name
    FILTERS inPriceListPriceListType(p, st)

    OBJECTS d = userPriceListDetail
    PROPERTIES(d) isSelectedPriceListDetail, indexUserPriceListDetail, idBarcodeSkuUserPriceListDetail, nameSkuUserPriceListDetail,
                  shortNameUOMSkuUserPriceListDetail

    TREE stockTree a=STRING[3], sg = stockGroup PARENT parentStockGroup
    PROPERTIES READONLY OBJVALUE(a), sgTreeName = name(sg)
    ORDER BY sgTreeName
    FILTERS stringEqualsAll(a)
    PROPERTIES(p) inPriceList TODRAW a FORCE GRID
    PROPERTIES(p, sg) inPriceListStockGroupOver

    OBJECTS ts = stock
    PROPERTIES(ts) READONLY name
    PROPERTIES(p, ts) inPriceListStockOver

    PROPERTIES(p, t, ts) changeMarkUpSkuUserPriceList TODRAW t FORCE GRID

    PROPERTIES(d, st, ts) currentPricePriceListDetailDataPriceListTypeStock COLUMNS (st) HEADER extendNameDataPriceListType(st) TODRAW d FORCE GRID
    PROPERTIES(d, st) pricePriceListDetailDataPriceListType COLUMNS (st) HEADER name(st)
    PROPERTIES(d, st, ts) markUpPricePriceListDetailDataPriceListTypeStock COLUMNS (st) HEADER extendNameMarkUpDataPriceListType(st) TODRAW d FORCE GRID
    PROPERTIES(d, st, ts) currentPricePriceListDetailDataPriceListTypeStock COLUMNS (st) HEADER extendNameDataPriceListType(st)
    PROPERTIES(d, st, ts) markUpPricePriceListDetailDataPriceListTypeStock COLUMNS (st) HEADER extendNameMarkUpDataPriceListType(st)

    PROPERTIES(d) ADDOBJ, delete

    PROPERTIES(p) addDetailDialogSkuUserPriceListDetailUserPriceList TODRAW d FORCE PANEL

    FILTERS userPriceListUserPriceListDetail(d) == p,
            isParentSkuGroupSku(sk, skuPriceListDetail(d)),
            inStockGroupStock(sg, ts),
            currencyUserPriceList(p) == currencyDataPriceListType(t)

    FILTERGROUP filters
            FILTER 'Выбранные склады' 'F10' inPriceListStockOver(p, ts) DEFAULT

    EVENTS
        ON OK EXEC prePostUserPriceList(p)

    EDIT userPriceList OBJECT p
;

DESIGN userPriceList FROM DEFAULT {
    REMOVE st.box;
    NEW topContainer{
        NEW headContainer {
            caption = 'Шапка документа';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY (objectClassName);
            ADD PROPERTY (nameNumeratorObject);
            ADD PROPERTY (numberObject);
            ADD PROPERTY (seriesObject);
            ADD PROPERTY (dateUserPriceList);
            ADD PROPERTY (timeUserPriceList);

        }
        NEW timeContainer{
            caption = 'Период действия';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY (fromDateUserPriceList);
            ADD PROPERTY (fromTimeUserPriceList);
            ADD PROPERTY (toDateUserPriceList);
            ADD PROPERTY (toTimeUserPriceList);
        }
        NEW propContainer {
            caption = 'Параметры документа';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY(nameCurrencyUserPriceList);
            ADD PROPERTY(noteUserPriceList);
        }
        NEW detailContainer{
            childConstraints = TO THE RIGHT;
            type = SPLITH;
            NEW firstContainer{
                childConstraints = TO THE BOTTOM;
                type = SPLITV;
                ADD t.box;
                ADD skuTree.tree.box{
                    caption = 'Товары';
                    fillVertical = 3.0;
                }
            }
            NEW secondContainer {
                childConstraints = TO THE BOTTOM;
                fillHorizontal = 3.0;
                type = SPLITV;
                ADD d.box{fillVertical = 3.0;}
                NEW stockContainer {
                    childConstraints = TO THE RIGHT;
                    caption = 'Склады';
                    type = SPLITH;
                    ADD stockTree.tree.box{fillHorizontal = 3.0;}
                    ADD ts.box{fillHorizontal = 2.0;}
                }
            }
        }
        PROPERTY(formOkAction) {
            caption = 'Провести';
        }
    }

    ADD functions.box;
}

FORM userPriceLists 'Прайсы'

    OBJECTS p = userPriceList
    PROPERTIES(p) READONLY objectClassName, nameNumeratorObject, numberObject, seriesObject,
                           fromDateTimeUserPriceList, toDateTimeUserPriceList, nameCurrencyUserPriceList, noteUserPriceList
    PROPERTIES(p) ADDFORM, EDITFORM, delete

    OBJECTS t = dataPriceListType
    PROPERTIES(t) READONLY name
    PROPERTIES(p, t) READONLY inPriceListPriceListType

    OBJECTS d =userPriceListDetail
    PROPERTIES(d) READONLY indexUserPriceListDetail, idBarcodeSkuUserPriceListDetail, nameSkuUserPriceListDetail,
                           shortNameUOMSkuUserPriceListDetail

    TREE stockTree a=STRING[3], sg = stockGroup PARENT parentStockGroup
    PROPERTIES READONLY OBJVALUE(a), sgTreeName = name(sg)
    ORDER BY sgTreeName
    FILTERS stringEqualsAll(a)
    PROPERTIES(p) READONLY inPriceList TODRAW a FORCE GRID
    PROPERTIES(p, sg) READONLY inPriceListStockGroupOver

    OBJECTS ts = stock
    PROPERTIES(ts) READONLY name
    PROPERTIES(p, ts) READONLY inPriceListStockOver

    PROPERTIES(d, t, ts) READONLY currentPricePriceListDetailDataPriceListTypeStock COLUMNS (t) HEADER extendNameDataPriceListType(t)

    PROPERTIES(d, t) READONLY pricePriceListDetailDataPriceListType COLUMNS (t) HEADER name(t)

    FILTERS userPriceListUserPriceListDetail(d) == p,
            inPriceListPriceListType(p, t),
            inStockGroupStock(sg, ts),
            inPriceListStockOver(p, ts),
            currencyUserPriceList(p) == currencyDataPriceListType(t)

;

DESIGN userPriceLists FROM DEFAULT{
    NEW topContainer{
        type = SPLITV;
        ADD p.box{fillVertical = 2.0;}
        NEW detailContainer{
            childConstraints = TO THE RIGHT;
            type = SPLITH;
            fillVertical = 3.0;
            ADD t.box;
            NEW firstContainer{
                childConstraints = TO THE BOTTOM;
                fillHorizontal = 3.0;
                type = SPLITV;
                ADD d.box{fillVertical = 3.0;}
                NEW stockContainer {
                    childConstraints = TO THE RIGHT;
                    caption = 'Склады';
                    type = SPLITH;
                    ADD stockTree.tree.box{fillHorizontal = 3.0;}
                    ADD ts.box{fillHorizontal = 2.0;}
                }
            }
        }
    }
    ADD functions.box;
}

// ------- Расчет действующей цен ----- //

TABLE priceListDetailDataPriceListTypeStock (priceListDetail, dataPriceListType, stock);

orderPriceListDetail(detail) = LIST(fromDateTimePriceListDetail(detail), detail) PERSISTENT;
orderPriceListDetailPriceListTypeStock(detail, type, stock) = orderPriceListDetail(detail)
    IF dataPriceListDetailPriceListType(detail, type) AND
       pricePriceListDetailDataPriceListType(detail, type) AND
       inPriceListStockOver(priceListPriceListDetail(detail), stock) PERSISTENT;

concatDataPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    GROUP MAX orderPriceListDetailPriceListTypeStock(detail, type, stock)
              IF fromDateTimePriceListDetail(detail) < (dateTimeIn AS DATETIME) AND NOT toDateTimePriceListDetail(detail) <= (dateTimeIn AS DATETIME)
          BY type, skuPriceListDetail(detail), stock, dateTimeIn;
priceListDetailDataPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    concatDataPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)[2];

priceDataPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    pricePriceListDetailDataPriceListType(priceListDetailDataPriceListTypeSkuStockDateTime(type, sku, stock, dateTime), type);
priceDataPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
    priceDataPriceListTypeSkuStockDateTime(type, skuBatch(batch), stock, dateTime);

priceBasePriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    UNION EXCLUSIVE priceSystemPriceListTypeSkuStockDateTime(type, sku, stock, dateTime),
                    priceDataPriceListTypeSkuStockDateTime(type, sku, stock, dateTime);

priceBasePriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
    UNION EXCLUSIVE priceSystemPriceListTypeBatchStockDateTime(type, batch, stock, dateTime),
                    priceDataPriceListTypeBatchStockDateTime(type, batch, stock, dateTime);

pricePriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceBasePriceListTypeSkuStockDateTime(type, sku, stock, dateTime);
pricePriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceBasePriceListTypeBatchStockDateTime(type, batch, stock, dateTime);

// --------------------------- Расчетные виды цен ------------------------- //

CLASS calcPriceListType 'Расчетный вид цены' : priceListType;

basePriceListTypeCalcPriceListType(type) = DATA basePriceListType (calcPriceListType);
nameBasePriceListTypeCalcPriceListType 'Базовый вид цены' (type) = name(basePriceListTypeCalcPriceListType(type));

TABLE calcPriceListTypePriceGroup (calcPriceListType, priceGroup);

markupCalcPriceListTypePriceGroup 'Надбавка, %' = DATA NUMERIC[8,2] (calcPriceListType, priceGroup);
roundCalcPriceListType 'Округление (кол-во знаков)' = DATA INTEGER (calcPriceListType);

levelParentMarkupPriceGroup (calcPriceListType, priceGroup) = GROUP MIN levelPriceGroupPriceGroup(priceGroup, parent) IF markupCalcPriceListTypePriceGroup(calcPriceListType, parent)
                                                              BY calcPriceListType, priceGroup PERSISTENT;
nearestParentPriceGroup (calcPriceListType, priceGroup) = priceGroupPriceGroupLevel(priceGroup, levelParentMarkupPriceGroup(calcPriceListType, priceGroup));
nearestMarkupCalcPriceListTypePriceGroup 'Расчетная надбавка, %' (calcPriceListType, priceGroup) =
    markupCalcPriceListTypePriceGroup(calcPriceListType, nearestParentPriceGroup(calcPriceListType, priceGroup));

markupCalcPriceListTypePriceGroupOver 'Надбавка, %' (calcPriceListType, priceGroup) =
    UNION OVERRIDE nearestMarkupCalcPriceListTypePriceGroup(calcPriceListType, priceGroup), markupCalcPriceListTypePriceGroup(calcPriceListType, priceGroup);

multiplierCalcPriceListTypePriceGroup (type, priceGroup) = (100 + markupCalcPriceListTypePriceGroupOver(type, priceGroup)) / 100 PERSISTENT;

priceCalcPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    round(priceBasePriceListTypeSkuStockDateTime(basePriceListTypeCalcPriceListType(type), sku, stock, dateTime) * multiplierCalcPriceListTypePriceGroup(type, priceGroupSku(sku)), roundCalcPriceListType(type));
priceCalcPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
    round(priceBasePriceListTypeBatchStockDateTime(basePriceListTypeCalcPriceListType(type), batch, stock, dateTime) * multiplierCalcPriceListTypePriceGroup(type, priceGroupSku(skuBatch(batch))), roundCalcPriceListType(type));

pricePriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceCalcPriceListTypeSkuStockDateTime(type, sku, stock, dateTime);
pricePriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceCalcPriceListTypeBatchStockDateTime(type, batch, stock, dateTime);

backgroundMarkup 'Цвет' (calcPriceListType, priceGroup) = RGB(255,160,160) AND markupCalcPriceListTypePriceGroup(calcPriceListType, priceGroup);

// --------------------------- Формы ------------------------- //

FORM dataPriceListType 'Базовый вид цен'
    OBJECTS p = dataPriceListType FIXED PANEL
    PROPERTIES(p) name, nameCurrencyDataPriceListType

    EDIT dataPriceListType OBJECT p
;

DESIGN dataPriceListType FROM DEFAULT {
    NEW topContainer{
        ADD PROPERTY(name);
        ADD PROPERTY(nameCurrencyDataPriceListType);
    }
    ADD functions.box;
}

FORM calcPriceListType 'Базовый вид цен'
    OBJECTS p = calcPriceListType FIXED PANEL
    PROPERTIES(p) name, nameBasePriceListTypeCalcPriceListType, roundCalcPriceListType

    TREE treeGroup g=priceGroup PARENT parentPriceGroup
    PROPERTIES READONLY name(g)
    ORDER BY name(g)

    PROPERTIES(p, g) markupCalcPriceListTypePriceGroup , nearestMarkupCalcPriceListTypePriceGroup

    EDIT calcPriceListType OBJECT p
;

FORM priceListTypes 'Типы цен'
    OBJECTS pd = dataPriceListType
    PROPERTIES(pd) READONLY name, nameCurrencyDataPriceListType
    PROPERTIES(pd) ADDFORM, EDITFORM, delete

    OBJECTS pc = calcPriceListType
    PROPERTIES(pc) READONLY name
    PROPERTIES(pc) ADDFORM, EDITFORM, delete
;

NAVIGATOR {
    NEW priceListNavigator 'Управление ценами' {
        ADD priceListTypes;
        ADD userPriceLists;
    }
}

// --------------------------------------------------- Макросы по добавлению видов цен в документы ------------------------------------ //

META defineDocumentHeaderPriceListType (object)
    priceListType###object (object) = DATA priceListType (object);
    namePriceListType###object 'Вид цен' (object)= name(priceListType###object(object)) IN documentPrmGroup MINCHARWIDTH 5 PREFCHARWIDTH 10;
END
META defineDocumentAbstractHeaderPriceListType (object)
    priceListType###object (object) = ABSTRACT priceListType (object) PERSISTENT;
    namePriceListType###object 'Вид цен' (object)= name(priceListType###object(object)) IN documentPrmGroup MINCHARWIDTH 5 PREFCHARWIDTH 10;
END
META defineDocumentInterfaceHeaderPriceListType (object)
    @defineDocumentAbstractHeaderPriceListType(object);
    @defineDocumentHeaderPriceListType(user###object);
    priceListType###object (object) += priceListType###user###object(object);
END

META defineDocumentDetailPriceListType (object, detail)
    priceListType###detail (idetail) = priceListType###object(object###detail(idetail)) PERSISTENT;
    namePriceListType###detail 'Вид цен' (idetail) = namePriceListType###object(object###detail(idetail)) IN documentPrmGroup MINCHARWIDTH 5 PREFCHARWIDTH 10;
END
META defineDocumentInterfaceDetailPriceListType(object, detail)
    @defineDocumentDetailPriceListType(object, detail);
    @defineDocumentDetailPriceListType(user###object, user###detail);
END

META defineDocumentPriceListType (object, detail)
    @defineDocumentHeaderPriceListType(object);
    @defineDocumentDetailPriceListType(object, detail);
END
META defineDocumentAbstractPriceListType (object, detail)
    @defineDocumentAbstractHeaderPriceListType(object);
    @defineDocumentDetailPriceListType(object, detail);
END
META defineDocumentInterfacePriceListType (object, detail)
    @defineDocumentInterfaceHeaderPriceListType(object);
    @defineDocumentInterfaceDetailPriceListType(object, detail);
END

META defineDocumentPriceListType (object)
    @defineDocumentPriceListType(object, object##Detail);
END
META defineDocumentAbstractPriceListType (object)
    @defineDocumentAbstractPriceListType(object, object##Detail);
END
META defineDocumentInterfacePriceListType (object)
    @defineDocumentInterfacePriceListType(object, object##Detail);
END
// ------------------------- Макросы по добавлению видов цен в документы (два объекта) --------------------- //
META defineDocumentDoubleObjHeaderPriceListType (object, contact)
    priceListType###object###contact (object, contact) = DATA priceListType (object, contact);
    namePriceListType###object###contact 'Вид цен' (object, contact)= name(priceListType###object###contact(object, contact)) IN documentPrmGroup MINCHARWIDTH 5 PREFCHARWIDTH 10;
END
META defineDocumentDoubleObjDetailDataPriceListType (object, contact, detail)
    dataPriceListType###detail =  DATA priceListType (detail);
    priceListType###detail (idetail) = UNION OVERRIDE priceListType###object###contact(object###detail(idetail), contact###detail(idetail)), dataPriceListType###detail(idetail) PERSISTENT;
    namePriceListType###detail 'Вид цен' (idetail) = name(priceListType###detail(idetail)) MINCHARWIDTH 10 PREFCHARWIDTH 20;
END
META defineDocumentDoubleObjPriceListType (object, contact)
    @defineDocumentDoubleObjHeaderPriceListType(object, contact);
    @defineDocumentDoubleObjDetailDataPriceListType(object, contact, object##Detail);
END

//--

META defineDocumentDetailDataPriceListType (object, detail)
    dataPriceListType###detail =  DATA priceListType (detail);
    priceListType###detail (idetail) = UNION OVERRIDE priceListType###object(object###detail(idetail)), dataPriceListType###detail(idetail) PERSISTENT;
    namePriceListType###detail 'Вид цен' (idetail) = name(priceListType###detail(idetail)) MINCHARWIDTH 10 PREFCHARWIDTH 20;
END

META defineDocumentAbstractDetailDataPriceListType (object, detail)
    dataPriceListType###detail =  ABSTRACT priceListType (detail);
    priceListType###detail (idetail) = UNION OVERRIDE priceListType###object(object###detail(idetail)), dataPriceListType###detail(idetail) PERSISTENT;
    namePriceListType###detail 'Вид цен' (idetail) = name(priceListType###detail(idetail)) MINCHARWIDTH 10 PREFCHARWIDTH 20;
END

META defineDocumentDataPriceListType (object, detail)
    @defineDocumentHeaderPriceListType(object);
    @defineDocumentDetailDataPriceListType(object, detail);
END
META defineDocumentDataPriceListType (object)
    @defineDocumentDataPriceListType(object, object##Detail);
END

META defineDocumentInterfaceDetailDataPriceListType (object, detail)
    @defineDocumentAbstractDetailDataPriceListType(object, detail);
    @defineDocumentDetailDataPriceListType(user###object, user###detail);
    dataPriceListType###detail (detail) += dataPriceListType###user###detail (detail);
END

META defineDocumentInterfaceDetailDataPriceListType (object)
    @defineDocumentInterfaceDetailDataPriceListType(object, object##Detail);
END

META defineDocumentInterfaceDataPriceListType (object, detail)
    @defineDocumentInterfaceHeaderPriceListType(object);
    @defineDocumentInterfaceDetailDataPriceListType(object, detail);
END
META defineDocumentInterfaceDataPriceListType (object)
    @defineDocumentInterfaceDataPriceListType(object, object##Detail);
END


META deriveDocumentDetailPricePriceListTypeCustom (detail)
    price###detail(detail) <- pricePriceListTypeSkuStockDateTime(priceListType###detail(detail),
                                                                 sku###detail(detail),
                                                                 stock###detail(detail),
                                                                 dateTime###detail(detail))
                                    WHEN CHANGED(priceListType###detail(detail)) OR
                                         CHANGED(sku###detail(detail)) OR
                                         CHANGED(stock###detail(detail)) OR
                                         CHANGED(dateTime###detail(detail));
END

META deriveDocumentDetailPricePriceListType (object)
    @deriveDocumentDetailPricePriceListTypeCustom(object##Detail);
END

META deriveDocumentDetailPriceBatchPriceListTypeCustom (detail)
    price###detail(detail) <- IF batch###detail(detail) THEN
                                    pricePriceListTypeBatchStockDateTime(priceListType###detail(detail),
                                                                         batch###detail(detail),
                                                                         stock###detail(detail),
                                                                         dateTime###detail(detail))
                              ELSE
                                    pricePriceListTypeSkuStockDateTime(priceListType###detail(detail),
                                                                       sku###detail(detail),
                                                                       stock###detail(detail),
                                                                       dateTime###detail(detail))
                                    WHEN CHANGED(batch###detail(detail)) OR
                                         CHANGED(priceListType###detail(detail)) OR
                                         CHANGED(sku###detail(detail)) OR
                                         CHANGED(stock###detail(detail)) OR
                                         CHANGED(dateTime###detail(detail));
END

META deriveDocumentDetailPriceBatchPriceListType (object)
    @deriveDocumentDetailPriceBatchPriceListTypeCustom(object##Detail);
END
