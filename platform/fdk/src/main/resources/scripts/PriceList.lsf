MODULE PriceList;

REQUIRE System, Document, Numerator, Stock, Barcode;

// --------------------------- Ценовые группы -------------------------------------//

CLASS ABSTRACT priceGroup 'Ценовая группа' : named;

priceGroupSku = ABSTRACT priceGroup (sku);

@defineHierarchyAbstract(priceGroup);

// --------------------------- Виды цен ------------------------- //

CLASS ABSTRACT priceListType 'Вид цены' : named;

pricePriceListTypeSkuStockDateTime 'Цена' = ABSTRACT NUMERIC[14,2] (priceListType, sku, stock, DATETIME);
pricePriceListTypeBatchStockDateTime 'Цена' = ABSTRACT NUMERIC[14,2] (priceListType, batch, stock, DATETIME);

CLASS ABSTRACT basePriceListType 'Базовый вид цены' : priceListType;

// --------------------------- Системные виды цен ------------------------- //
CLASS STATIC systemPriceListType 'Системный вид цены' {
    stockPriceListType 'Учетная цена'
} : basePriceListType;

priceStockPriceListTypeSkuStockDateTime (type, sku, stock, dateTime) =
    priceSkuStockDateTime(sku, stock, dateTime) AND type == systemPriceListType.stockPriceListType;
priceStockPriceListTypeBatchStockDateTime (type, batch, stock, dateTime) =
    priceBatchStockDateTime(batch, stock, dateTime) AND type == systemPriceListType.stockPriceListType;

priceSystemPriceListTypeSkuStockDateTime (type, sku, stock, dateTime) =
    UNION EXCLUSIVE priceStockPriceListTypeSkuStockDateTime (type, sku, stock, dateTime);
priceSystemPriceListTypeBatchStockDateTime (type, batch, stock, dateTime) =
    UNION EXCLUSIVE priceStockPriceListTypeBatchStockDateTime (type, batch, stock, dateTime);

// --------------------------- Пользовательские виды цен ------------------------- //

CLASS dataPriceListType 'Пользовательский вид цены' : basePriceListType;

CLASS ABSTRACT priceList 'Прайс';
CLASS ABSTRACT priceListDetail 'Строка прайса';

CLASS userPriceList 'Прайс (польз.)' : priceList, historyObject, numeratedObject;
CLASS userPriceListDetail 'Строка прайса (польз.)' : priceListDetail;
CLASS userPriceListPosted 'Закрытый прайс (польз.)' : userPriceList, postedObject;

@defineDocumentInterface(priceList);

@defineDocumentInterfaceNumber(priceList);

@defineDocumentInterfaceDataStock(priceList, stock, 'Склад');
@defineDocumentInterfacePosted(priceList);

@defineDocumentInterfaceDescription(priceList, 'Прайс');

@defineDocumentInterfaceCurrency(priceList);
@deriveDocumentCurrency(userPriceList, stock);

@defineDocumentInterfaceDetailSku(priceList, sku);
//@defineDocumentInterfaceDetailPrice(priceList);

pricePriceListDetailDataPriceListType 'Цена' = ABSTRACT NUMERIC[14,2] (priceListDetail, dataPriceListType);
priceUserPriceListDetailDataPriceListType 'Цена' = DATA NUMERIC[14,2] (priceListDetail, dataPriceListType);
pricePriceListDetailDataPriceListType (priceListDetail, dataPriceListType) += priceUserPriceListDetailDataPriceListType(priceListDetail, dataPriceListType);

//@defineAddDetailDialogSkuStock(userPriceList, sku, stock, dialogSku);

TABLE priceListDataPriceListType (priceList, dataPriceListType);
TABLE priceListDetailDataPriceListType (priceListDetail, dataPriceListType);

inPriceListPriceListType 'Включен' = ABSTRACT BOOLEAN (priceList, dataPriceListType) PERSISTENT;
inUserPriceListPriceListType 'Включен' = DATA BOOLEAN (userPriceList, dataPriceListType);
inPriceListPriceListType (priceList, dataPriceListType) += inUserPriceListPriceListType(priceList, dataPriceListType);

//nameDataPriceListTypeUserPriceList 'Вид цены' (priceList) = name(dataPriceListTypeUserPriceList(priceList));

dataPriceListDetailPriceListType (detail, dataPriceListType) = inPriceListPriceListType(priceListPriceListDetail(detail), dataPriceListType) PERSISTENT;

currentPricePriceListDetailDataPriceListType 'Действующая цена' (priceListDetail, dataPriceListType) =
    pricePriceListTypeSkuStockDateTime(dataPriceListType, skuPriceListDetail(priceListDetail), stockPriceListDetail(priceListDetail), dateTimePriceListDetail(priceListDetail));

extendNameDataPriceListType (dataPriceListType) =
    [FORMULA STRING[50]  ' \'Действующая \' || CAST($1 AS TEXT) || \' цена \''](
    name(dataPriceListType)) MINCHARWIDTH 30 PREFCHARWIDTH 50;

inSku 'Включен' (sku) = SESSION DATA BOOLEAN (sku) MINCHARWIDTH 5 PREFCHARWIDTH 5;

FORM userPriceListSku 'Подбор товаров для прайсов'
    TREE skuTree sk = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = name(sk)
    ORDER BY skuTreeName

    OBJECTS s=sku
    PROPERTIES(s) inSku
    PROPERTIES READONLY    inputName = nameSku(s)//, inBarcodeSku(s)

    FILTERS                isParentSkuGroupSku(sk, s)
    ORDER BY inputName

    OBJECTS si=sku
    PROPERTIES READONLY     selectedName = nameSku(si)//, inBarcodeSku(si)
    FILTERS                 inSku(si)
    ORDER BY selectedName
;

DESIGN userPriceListSku FROM DEFAULT {
    NEW topContainer{
        childConstraints = TO THE RIGHT;
        type = SPLITH;
        ADD skuTree.tree.box;
        NEW skuContainer{
            childConstraints = TO THE BOTTOM;
            fillHorizontal = 3.0;
            type = SPLITV;
            ADD s.box;
            ADD si.box;
        }
    }
    ADD functions.box;
}

addDetailDialogSkuUserPriceListDetailUserPriceList 'Подбор товара' = ACTION (userPriceList) {

    SET inSku(sku) <- NULL;
    FORM userPriceListSku MODAL;
    IF formResult() == formResult.ok THEN {
        FOR inSku(sku) DO {
            ADDOBJ userPriceListDetail;
            FOR u == addedObject() DO {
                SET userPriceListUserPriceListDetail(u) <- userPriceList AS userPriceList;
                SET skuUserPriceListDetail(u) <- sku AS sku;
            }
       }
    }
    SET inSku(sku) <- NULL;
} TOOLBAR;

FORM userPriceList 'Прайс'
    OBJECTS p = userPriceList FIXED PANEL
    PROPERTIES(p) objectClassName, nameStockUserPriceList, nameNumeratorObject, numberObject, seriesObject, dateUserPriceList,
                  timeUserPriceList, nameCurrencyUserPriceList, noteUserPriceList

    OBJECTS t = dataPriceListType
    PROPERTIES(t) READONLY name
    PROPERTIES(p, t) inPriceListPriceListType

    OBJECTS st = dataPriceListType
    PROPERTIES(st) READONLY name
    FILTERS inPriceListPriceListType(p, st)

    OBJECTS d = userPriceListDetail
    PROPERTIES(d) indexUserPriceListDetail, idBarcodeSkuUserPriceListDetail, nameSkuUserPriceListDetail,
                  shortNameUOMSkuUserPriceListDetail

    PROPERTIES(d, st) currentPricePriceListDetailDataPriceListType COLUMNS (st) HEADER extendNameDataPriceListType(st)

    PROPERTIES(d, st) pricePriceListDetailDataPriceListType COLUMNS (st) HEADER name(st)

    PROPERTIES(d) ADDOBJ, delete

    PROPERTIES(p) addDetailDialogSkuUserPriceListDetailUserPriceList TODRAW d FORCE PANEL

    FILTERS userPriceListUserPriceListDetail(d) == p

    EVENTS
        ON OK EXEC prePostUserPriceList(p)

    EDIT userPriceList OBJECT p
;

DESIGN userPriceList FROM DEFAULT {
    REMOVE st.box;
    NEW topContainer{
        NEW headContainer {
            caption = 'Шапка документа';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY (objectClassName);
            ADD PROPERTY (nameStockUserPriceList);
            ADD PROPERTY (nameNumeratorObject);
            ADD PROPERTY (numberObject);
            ADD PROPERTY (seriesObject);
            ADD PROPERTY (dateUserPriceList);
            ADD PROPERTY (timeUserPriceList);
        }
        NEW propContainer {
            caption = 'Параметры документа';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY(nameCurrencyUserPriceList);
            ADD PROPERTY(noteUserPriceList);
        }
        NEW detailContainer{
            childConstraints = TO THE RIGHT;
            type = SPLITH;
            ADD t.box;
            ADD d.box{fillHorizontal = 3.0;}
        }
        PROPERTY(formOkAction) {
            caption = 'Провести';
        }
    }

    ADD functions.box;
}

FORM userPriceLists 'Прайсы'

    OBJECTS p = userPriceList
    PROPERTIES(p) READONLY objectClassName, nameStockUserPriceList, nameNumeratorObject, numberObject, seriesObject, dateUserPriceList,
                           timeUserPriceList, nameCurrencyUserPriceList, noteUserPriceList
    PROPERTIES(p) ADDFORM, EDITFORM, delete

    OBJECTS t = dataPriceListType
    PROPERTIES(t) READONLY name
    PROPERTIES(p, t) READONLY inPriceListPriceListType

    OBJECTS d =userPriceListDetail
    PROPERTIES(d) READONLY indexUserPriceListDetail, idBarcodeSkuUserPriceListDetail, nameSkuUserPriceListDetail,
                           shortNameUOMSkuUserPriceListDetail
    PROPERTIES(d, t) currentPricePriceListDetailDataPriceListType COLUMNS (t) HEADER extendNameDataPriceListType(t)

    PROPERTIES(d, t) pricePriceListDetailDataPriceListType COLUMNS (t) HEADER name(t)

    FILTERS userPriceListUserPriceListDetail(d) == p,
            inPriceListPriceListType(p, t)
;

DESIGN userPriceLists FROM DEFAULT{
    NEW topContainer{
        type = SPLITV;
        ADD p.box;
        NEW detailContainer{
            childConstraints = TO THE RIGHT;
            type = SPLITH;
            ADD t.box;
            ADD d.box{fillHorizontal = 3.0;}
        }
    }
    ADD functions.box;
}

// ------- Расчет действующей цен ----- //

orderPriceListDetail(detail) = LIST(dateTimePriceListDetail(detail), detail) PERSISTENT;
orderPriceListDetailPriceListType(detail, type) = orderPriceListDetail(detail) IF dataPriceListDetailPriceListType(detail, type) AND pricePriceListDetailDataPriceListType(detail, type) PERSISTENT;

concatDataPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    GROUP MAX orderPriceListDetailPriceListType(detail, type) IF dateTimePriceListDetail(detail) <= (dateTimeIn AS DATETIME)
          BY type, skuPriceListDetail(detail), stockPriceListDetail(detail), dateTimeIn;
priceListDetailDataPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    concatDataPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)[2];

priceDataPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    pricePriceListDetailDataPriceListType(priceListDetailDataPriceListTypeSkuStockDateTime(type, sku, stock, dateTime), type);
priceDataPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
    priceDataPriceListTypeSkuStockDateTime(type, skuBatch(batch), stock, dateTime);

priceBasePriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    UNION EXCLUSIVE priceSystemPriceListTypeSkuStockDateTime(type, sku, stock, dateTime),
                    priceDataPriceListTypeSkuStockDateTime(type, sku, stock, dateTime);

priceBasePriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
    UNION EXCLUSIVE priceSystemPriceListTypeBatchStockDateTime(type, batch, stock, dateTime),
                    priceDataPriceListTypeBatchStockDateTime(type, batch, stock, dateTime);

pricePriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceBasePriceListTypeSkuStockDateTime(type, sku, stock, dateTime);
pricePriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceBasePriceListTypeBatchStockDateTime(type, batch, stock, dateTime);

// --------------------------- Расчетные виды цен ------------------------- //

CLASS calcPriceListType 'Расчетный вид цены' : priceListType;

basePriceListTypeCalcPriceListType(type) = DATA basePriceListType (calcPriceListType);
nameBasePriceListTypeCalcPriceListType 'Базовый вид цены' (type) = name(basePriceListTypeCalcPriceListType(type));

TABLE calcPriceListTypePriceGroup (calcPriceListType, priceGroup);

markupCalcPriceListTypePriceGroup 'Надбавка, %' = DATA NUMERIC[8,2] (calcPriceListType, priceGroup);
roundCalcPriceListType 'Округление (кол-во знаков)' = DATA INTEGER (calcPriceListType);

levelParentMarkupPriceGroup (calcPriceListType, priceGroup) = GROUP MIN levelPriceGroupPriceGroup(priceGroup, parent) IF markupCalcPriceListTypePriceGroup(calcPriceListType, parent)
                                                              BY calcPriceListType, priceGroup PERSISTENT;
nearestParentPriceGroup (calcPriceListType, priceGroup) = priceGroupPriceGroupLevel(priceGroup, levelParentMarkupPriceGroup(calcPriceListType, priceGroup));
nearestMarkupCalcPriceListTypePriceGroup 'Расчетная надбавка, %' (calcPriceListType, priceGroup) =
    markupCalcPriceListTypePriceGroup(calcPriceListType, nearestParentPriceGroup(calcPriceListType, priceGroup));

markupCalcPriceListTypePriceGroupOver 'Надбавка, %' (calcPriceListType, priceGroup) =
    UNION OVERRIDE nearestMarkupCalcPriceListTypePriceGroup(calcPriceListType, priceGroup), markupCalcPriceListTypePriceGroup(calcPriceListType, priceGroup);

multiplierCalcPriceListTypePriceGroup (type, priceGroup) = (100 + markupCalcPriceListTypePriceGroupOver(type, priceGroup)) / 100 PERSISTENT;

priceCalcPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    round(priceBasePriceListTypeSkuStockDateTime(basePriceListTypeCalcPriceListType(type), sku, stock, dateTime) * multiplierCalcPriceListTypePriceGroup(type, priceGroupSku(sku)), roundCalcPriceListType(type));
priceCalcPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
    round(priceBasePriceListTypeBatchStockDateTime(basePriceListTypeCalcPriceListType(type), batch, stock, dateTime) * multiplierCalcPriceListTypePriceGroup(type, priceGroupSku(skuBatch(batch))), roundCalcPriceListType(type));

pricePriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceCalcPriceListTypeSkuStockDateTime(type, sku, stock, dateTime);
pricePriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceCalcPriceListTypeBatchStockDateTime(type, batch, stock, dateTime);

backgroundMarkup 'Цвет' (calcPriceListType, priceGroup) = RGB(255,160,160) AND markupCalcPriceListTypePriceGroup(calcPriceListType, priceGroup);

// --------------------------- Формы ------------------------- //

FORM dataPriceListType 'Базовый вид цен'
    OBJECTS p = dataPriceListType FIXED PANEL
    PROPERTIES(p) name

    EDIT dataPriceListType OBJECT p
;

FORM calcPriceListType 'Базовый вид цен'
    OBJECTS p = calcPriceListType FIXED PANEL
    PROPERTIES(p) name, nameBasePriceListTypeCalcPriceListType, roundCalcPriceListType

    TREE treeGroup g=priceGroup PARENT parentPriceGroup
    PROPERTIES READONLY name(g)
    ORDER BY name(g)

    PROPERTIES(p, g) markupCalcPriceListTypePriceGroup , nearestMarkupCalcPriceListTypePriceGroup

    EDIT calcPriceListType OBJECT p
;

FORM priceListTypes 'Типы цен'
    OBJECTS pd = dataPriceListType
    PROPERTIES(pd) READONLY name
    PROPERTIES(pd)          ADDFORM, EDITFORM, delete

    OBJECTS pc = calcPriceListType
    PROPERTIES(pc) READONLY name
    PROPERTIES(pc)          ADDFORM, EDITFORM, delete
;

NAVIGATOR {
    NEW priceListNavigator 'Управление ценами' {
        ADD priceListTypes;
        ADD userPriceLists;
    }
}

// --------------------------------------------------- Макросы по добавлению видов цен в документы ------------------------------------ //

META defineDocumentHeaderPriceListType (object)
    priceListType###object (object) = DATA priceListType (object);
    namePriceListType###object 'Вид цен' (object)= name(priceListType###object(object)) IN documentPrmGroup MINCHARWIDTH 5 PREFCHARWIDTH 10;
END
META defineDocumentAbstractHeaderPriceListType (object)
    priceListType###object (object) = ABSTRACT priceListType (object) PERSISTENT;
    namePriceListType###object 'Вид цен' (object)= name(priceListType###object(object)) IN documentPrmGroup MINCHARWIDTH 5 PREFCHARWIDTH 10;
END
META defineDocumentInterfaceHeaderPriceListType (object)
    @defineDocumentAbstractHeaderPriceListType(object);
    @defineDocumentHeaderPriceListType(user###object);
    priceListType###object (object) += priceListType###user###object(object);
END

META defineDocumentDetailPriceListType (object, detail)
    priceListType###detail (idetail) = priceListType###object(object###detail(idetail)) PERSISTENT;
    namePriceListType###detail 'Вид цен' (idetail) = namePriceListType###object(object###detail(idetail)) IN documentPrmGroup MINCHARWIDTH 5 PREFCHARWIDTH 10;
END
META defineDocumentInterfaceDetailPriceListType(object, detail)
    @defineDocumentDetailPriceListType(object, detail);
    @defineDocumentDetailPriceListType(user###object, user###detail);
END

META defineDocumentPriceListType (object, detail)
    @defineDocumentHeaderPriceListType(object);
    @defineDocumentDetailPriceListType(object, detail);
END
META defineDocumentAbstractPriceListType (object, detail)
    @defineDocumentAbstractHeaderPriceListType(object);
    @defineDocumentDetailPriceListType(object, detail);
END
META defineDocumentInterfacePriceListType (object, detail)
    @defineDocumentInterfaceHeaderPriceListType(object);
    @defineDocumentInterfaceDetailPriceListType(object, detail);
END

META defineDocumentPriceListType (object)
    @defineDocumentPriceListType(object, object##Detail);
END
META defineDocumentAbstractPriceListType (object)
    @defineDocumentAbstractPriceListType(object, object##Detail);
END
META defineDocumentInterfacePriceListType (object)
    @defineDocumentInterfacePriceListType(object, object##Detail);
END
//--

META defineDocumentDetailDataPriceListType (object, detail)
    dataPriceListType###detail =  DATA priceListType (detail);
    priceListType###detail (idetail) = UNION OVERRIDE priceListType###object(object###detail(idetail)), dataPriceListType###detail(idetail) PERSISTENT;
    namePriceListType###detail 'Вид цен' (idetail) = name(priceListType###detail(idetail)) MINCHARWIDTH 10 PREFCHARWIDTH 20;
END

META defineDocumentAbstractDetailDataPriceListType (object, detail)
    dataPriceListType###detail =  ABSTRACT priceListType (detail);
    priceListType###detail (idetail) = UNION OVERRIDE priceListType###object(object###detail(idetail)), dataPriceListType###detail(idetail) PERSISTENT;
    namePriceListType###detail 'Вид цен' (idetail) = name(priceListType###detail(idetail)) MINCHARWIDTH 10 PREFCHARWIDTH 20;
END

META defineDocumentInterfaceDetailDataPriceListType (object, detail)
    @defineDocumentAbstractDetailDataPriceListType(object, detail);
    @defineDocumentDetailDataPriceListType(user###object, user###detail);
    dataPriceListType###detail (detail) += dataPriceListType###user###detail (detail);
END

META defineDocumentInterfaceDetailDataPriceListType (object)
    @defineDocumentInterfaceDetailDataPriceListType(object, object##Detail);
END

META defineDocumentInterfaceDataPriceListType (object, detail)
    @defineDocumentInterfaceHeaderPriceListType(object);
    @defineDocumentInterfaceDetailDataPriceListType(object, detail);
END
META defineDocumentInterfaceDataPriceListType (object)
    @defineDocumentInterfaceDataPriceListType(object, object##Detail);
END


META deriveDocumentDetailPricePriceListTypeCustom (detail)
    price###detail(detail) <- pricePriceListTypeSkuStockDateTime(priceListType###detail(detail),
                                                                 sku###detail(detail),
                                                                 stock###detail(detail),
                                                                 dateTime###detail(detail))
                                    WHEN CHANGED(priceListType###detail(detail)) OR
                                         CHANGED(sku###detail(detail)) OR
                                         CHANGED(stock###detail(detail)) OR
                                         CHANGED(dateTime###detail(detail));
END

META deriveDocumentDetailPricePriceListType (object)
    @deriveDocumentDetailPricePriceListTypeCustom(object##Detail);
END

META deriveDocumentDetailPriceBatchPriceListTypeCustom (detail)
    price###detail(detail) <- IF batch###detail(detail) THEN
                                    pricePriceListTypeBatchStockDateTime(priceListType###detail(detail),
                                                                         batch###detail(detail),
                                                                         stock###detail(detail),
                                                                         dateTime###detail(detail))
                              ELSE
                                    pricePriceListTypeSkuStockDateTime(priceListType###detail(detail),
                                                                       sku###detail(detail),
                                                                       stock###detail(detail),
                                                                       dateTime###detail(detail))
                                    WHEN CHANGED(batch###detail(detail)) OR
                                         CHANGED(priceListType###detail(detail)) OR
                                         CHANGED(sku###detail(detail)) OR
                                         CHANGED(stock###detail(detail)) OR
                                         CHANGED(dateTime###detail(detail));
END

META deriveDocumentDetailPriceBatchPriceListType (object)
    @deriveDocumentDetailPriceBatchPriceListTypeCustom(object##Detail);
END
