MODULE SaleInvoice;

REQUIRE SaleOrder, Invoice, StockTax, Store;

NAMESPACE Sale;

//----------------------------------------------- Накладная ---------------------------------------------------//
@defineInvoice(' (продажа)', supplierStock);
@defineInvoiceBatch(supplierStock);
@defineDocumentInterfaceHeaderTAX(invoice, VAT, 'НДС расч.');

VATUserInvoice (userInvoice) <- rangeTaxTaxUnit(tax.taxVAT, storeDepartmentStore(supplierStockUserInvoice(userInvoice)))
        WHEN CHANGED(supplierStockUserInvoice(userInvoice));

@deriveDocumentHeaderTAXDetail(userInvoice, VAT);

CONSTRAINT supplierUserInvoice(userInvoice) AND NOT isCompanyLegalEntity(supplierUserInvoice(userInvoice))
    CHECKED BY supplierUserInvoice MESSAGE 'Для накладной выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerUserInvoice(userInvoice) AND NOT isCustomerLegalEntity(customerUserInvoice(userInvoice))
    CHECKED BY customerUserInvoice MESSAGE 'Для накладной выбрано в качестве покупателя организация, не являющаяся покупателем';

CONSTRAINT taxRange(VATUserInvoice(userInvoice)) != tax.taxVAT OR
           countryRange(VATUserInvoice(userInvoice)) != countryStock(supplierStockInvoice(userInvoice)) OR
           rangeTypeRange(VATUserInvoice(userInvoice)) != rangeType.units
           CHECKED BY VATUserInvoice
           MESSAGE 'ошибка: Шкала и страна строки должна соответствовать шкале и строке НДС';

EXTEND FORM userInvoice
    PROPERTIES(i) numberVATUserInvoice, valueVATUserInvoice
;

// ------- Создание инвойса по партиям -------- //
useExplicitBatchDetailUserInvoiceOrder (userInvoice, order) += userInvoice IS Sale.userInvoice AND order IS Sale.order;

toInvoiceBatchOrderDetail (batch, orderDetail) = PARTITION UNGROUP toInvoiceOrderDetail
                                                           LIMIT STRICT currentBalanceBatchStock(batch, supplierStockOrderDetail(orderDetail)) AND skuBatch(batch) == skuOrderDetail(orderDetail)
                                                           BY orderDetail
                                                           ORDER orderBatch(batch);

createExplicitBatchDetailUserInvoiceOrder (userInvoice, order) += ACTION (userInvoice, order) {
    FOR orderOrderDetail(orderDetail) == order AND toInvoiceBatchOrderDetail(batch, orderDetail)
        ADDOBJ d = userInvoiceDetail DO {
            SET userInvoiceUserInvoiceDetail(d) <- userInvoice;
            SET orderUserInvoiceDetail(d) <- order;
            SET skuUserInvoiceDetail(d) <- skuOrderDetail(orderDetail);
            SET batchUserInvoiceDetail(d) <- batch;
            SET quantityUserInvoiceDetail (d) <- toInvoiceBatchOrderDetail(batch, orderDetail);
        }
}