MODULE SaleInvoice;

REQUIRE SaleOrder, Invoice, StockTax, Store;

NAMESPACE Sale;

//----------------------------------------------- Накладная ---------------------------------------------------//
@defineInvoice(' (продажа)', supplierStock, showSalePack, 'Отображать упаковку', salePack);
@defineInvoiceBatch(supplierStock);
@defineDocumentInterfaceHeaderTAX(invoice, VAT, 'НДС расч.');

@defineInvoiceDestination(supplier, customer);
@defineInvoiceStockDestination(supplierStock, customerStock);

VATUserInvoice (userInvoice) <- rangeTaxTaxUnit(tax.taxVAT, storeDepartmentStore(supplierStockUserInvoice(userInvoice)))
        WHEN CHANGED(supplierStockUserInvoice(userInvoice));

@deriveDocumentHeaderTAXDetail(userInvoice, VAT, supplierStock);

derivedVATSumUserInvoiceDetail (userInvoiceDetail) =
    IF rangeTypeRange(VATUserInvoiceDetail(userInvoiceDetail)) == rangeType.units
        THEN roundCurrency(invoicePriceUserInvoiceDetail (userInvoiceDetail) * quantityUserInvoiceDetail (userInvoiceDetail) * valueVATUserInvoiceDetail (userInvoiceDetail)/100, currencyUserInvoiceDetail(userInvoiceDetail))
        ELSE roundCurrency((sumUserInvoiceDetail(userInvoiceDetail) * valueVATUserInvoiceDetail (userInvoiceDetail) / 100), currencyUserInvoiceDetail(userInvoiceDetail))
    PERSISTENT;

VATSumUserInvoiceDetail (userInvoiceDetail) <- derivedVATSumUserInvoiceDetail (userInvoiceDetail)
    WHEN CHANGED(invoicePriceUserInvoiceDetail(userInvoiceDetail)) OR CHANGED(quantityUserInvoiceDetail(userInvoiceDetail)) OR CHANGED(VATUserInvoiceDetail(userInvoiceDetail))
      OR CHANGED(sumUserInvoiceDetail(userInvoiceDetail)) OR CHANGED(currencyUserInvoiceDetail(userInvoiceDetail));

derivedInvoiceSumUserInvoiceDetail (userInvoiceDetail) =
    IF rangeTypeRange(VATUserInvoiceDetail(userInvoiceDetail)) == rangeType.units
        THEN invoicePriceUserInvoiceDetail (userInvoiceDetail) * quantityUserInvoiceDetail (userInvoiceDetail)
        ELSE sumUserInvoiceDetail (userInvoiceDetail) (+) VATSumUserInvoiceDetail (userInvoiceDetail)
    PERSISTENT;

invoiceSumUserInvoiceDetail (userInvoiceDetail) <- derivedInvoiceSumUserInvoiceDetail (userInvoiceDetail)
    WHEN CHANGED(invoicePriceUserInvoiceDetail(userInvoiceDetail)) OR CHANGED(quantityUserInvoiceDetail(userInvoiceDetail))
    OR CHANGED(sumUserInvoiceDetail(userInvoiceDetail)) OR CHANGED(VATSumUserInvoiceDetail(userInvoiceDetail));

derivedPriceUserInvoiceDetail (userInvoiceDetail) =
    IF rangeTypeRange(VATUserInvoiceDetail(userInvoiceDetail)) == rangeType.units
        THEN invoicePriceUserInvoiceDetail(userInvoiceDetail)*(100-valueVATUserInvoiceDetail (userInvoiceDetail))/100
        ELSE invoicePriceUserInvoiceDetail(userInvoiceDetail)*100/(100+valueVATUserInvoiceDetail (userInvoiceDetail))
    PERSISTENT;

priceUserInvoiceDetail (userInvoiceDetail) <- derivedPriceUserInvoiceDetail (userInvoiceDetail)
    WHEN CHANGED(invoicePriceUserInvoiceDetail(userInvoiceDetail)) OR CHANGED(VATUserInvoiceDetail (userInvoiceDetail));

CONSTRAINT supplierUserInvoice(userInvoice) AND NOT isCompanyLegalEntity(supplierUserInvoice(userInvoice))
    CHECKED BY supplierUserInvoice MESSAGE 'Для накладной выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerUserInvoice(userInvoice) AND NOT isCustomerLegalEntity(customerUserInvoice(userInvoice))
    CHECKED BY customerUserInvoice MESSAGE 'Для накладной выбрано в качестве покупателя организация, не являющаяся покупателем';

CONSTRAINT taxRange(VATUserInvoice(userInvoice)) != tax.taxVAT OR
           countryRange(VATUserInvoice(userInvoice)) != countryStock(supplierStockInvoice(userInvoice)) OR
           rangeTypeRange(VATUserInvoice(userInvoice)) != rangeType.units
           CHECKED BY VATUserInvoice
           MESSAGE 'ошибка: Шкала и страна строки должна соответствовать шкале и строке НДС';

isDepartmentStoreSupplierStockInvoice (invoice) = isDepartmentStoreStock (supplierStockInvoice(invoice));

EXTEND FORM userInvoice
    PROPERTIES(i) numberVATUserInvoice SHOWIF isDepartmentStoreSupplierStockInvoice(i), valueVATUserInvoice SHOWIF isDepartmentStoreSupplierStockInvoice(i);
;

// ------- Создание инвойса по партиям -------- //
useExplicitBatchDetailUserInvoiceOrder (userInvoice, order) += userInvoice IS Sale.userInvoice AND order IS Sale.order;

toInvoiceBatchOrderDetail (batch, orderDetail) = PARTITION UNGROUP toInvoiceOrderDetail
                                                           LIMIT STRICT currentBalanceBatchStock(batch, supplierStockOrderDetail(orderDetail)) AND skuBatch(batch) == skuOrderDetail(orderDetail)
                                                           BY orderDetail
                                                           ORDER orderBatch(batch);

createExplicitBatchDetailUserInvoiceOrder (userInvoice, order) += ACTION (userInvoice, order) {
    FOR orderOrderDetail(orderDetail) == order AND toInvoiceBatchOrderDetail(batch, orderDetail)
        ADDOBJ d = userInvoiceDetail DO {
            SET userInvoiceUserInvoiceDetail(d) <- userInvoice;
            SET orderUserInvoiceDetail(d) <- order;
            SET skuUserInvoiceDetail(d) <- skuOrderDetail(orderDetail);
            SET batchUserInvoiceDetail(d) <- batch;
            SET quantityUserInvoiceDetail (d) <- toInvoiceBatchOrderDetail(batch, orderDetail);
        }
}

// -------------------------------------- Формирование задолженности ---------------------------------------------------

@implementContractLedger(a, userInvoice, contractSku);
sumContractALedger(contractALedger) += invoiceSumUserInvoiceDetailUserInvoice(contractALedger) IF isPostedInvoice(contractALedger);

@implementContractPrepaymentLedger(userInvoice, invoiceSumUserInvoiceDetailUserInvoice, contractSku);

@implementOutContractLedgerInContractLedgerPrefix(in, userInvoice, contractSku);
sumInContractLedger(inContractLedger) += invoiceSumUserInvoiceDetailUserInvoice(inContractLedger) IF isPostedInvoice(inContractLedger);