MODULE SaleInvoice;

REQUIRE System,
        Utils,
        Historizable,
        Stock,
        Numerator,
        Document,
        Currency,
        Customer,
        Contract,
        Consignment,
        AccountDocument,
        Barcode,
        SaleOrder,
        StorePrice,
        Historizable;


PRIORITY Utils, Stock;

NAMESPACE Sale;


//----------------------------------------------- Накладная ---------------------------------------------------//

CLASS ABSTRACT invoice 'Накладная ';  //consignment
CLASS ABSTRACT invoiceDetail 'Строка накладной ';         //consignmentDetail

CLASS userInvoice 'Накладная (польз.)' : invoice, historyObject, numeratedDocument;
CLASS userInvoiceDetail 'Строка накладной (польз.)' : invoiceDetail;
CLASS userInvoicePosted 'Закрытая накладная (польз.)' : userInvoice, postedObject;

@defineDocumentInterface(invoice);

@defineDocumentInterfaceNumber(invoice);

@defineDocumentInterfaceDataStock(invoice, stock, 'Склад');
@defineDocumentInterfacePosted(invoice);

@defineDocumentInterfaceDescription(invoice, 'Накладная');

@defineDocumentInterfaceCurrency(invoice);
@deriveDocumentCurrency(userInvoice, stock);

@defineDocumentInterfaceCustomer(invoice);
@defineDocumentInterfaceContract(invoice, contractSkuCustomer, singleContractSkuCustomerCompanyCustomer, companyInvoice, customerInvoice,
                                 'Сторона A договора накладной не соответствует компании склада-отправителя',
                                 'Сторона B договора накладной не соответствует покупателю');

@defineDocumentInterfaceDetailSku(invoice, sku);
@defineDocumentInterfaceDetailBatch(invoice, batch);

@defineDocumentInterfaceDetailQuantity(invoice);
@defineDocumentInterfaceDetailPrice(invoice);
@defineDocumentInterfaceDetailSum(invoice);

@defineDocumentInterfaceDetailVAT(invoice, countryStock);
@defineDocumentInterfaceDetailVATSum(invoice, countryStock);

@defineDocumentInterfaceDetailPricePrefix(invoice, shipment, ' (учетная)');
@deriveDocumentDetailPriceBatchPrefix(invoice, shipment);

@defineDocumentInterfaceHeaderQuantity(invoice);
@defineDocumentHeaderSkuQuantity(invoice, sku);
@defineDocumentInterfaceHeaderSum(invoice);

@defineAddDetailDialogSkuStock(userInvoice, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(userInvoice, sku);

//--  Связь с заказом
orderInvoice = ABSTRACT order (invoice);
orderUserInvoice = DATA order(userInvoice);
orderInvoice(invoice) += orderUserInvoice(invoice);

CONSTRAINT customerUserInvoice(invoice) != customerOrder(orderUserInvoice(invoice)) OR
           companyUserInvoice(invoice) != companyOrder(orderUserInvoice(invoice))
    CHECKED BY orderUserInvoice
        MESSAGE 'Покупатель и компания в заказе и накладной должны соответствовать друг другу';

GROUP orderGroup 'Информация о заказе' : publicGroup;
descriptionOrderInvoice 'Заказ' (invoice) = descriptionOrder(orderInvoice(invoice)) IN orderGroup;
descriptionOrderUserInvoice 'Заказ' (userInvoice) = descriptionOrder(orderUserInvoice(userInvoice)) IN orderGroup;
fillOrderUserInvoice 'Заполнить накладную на основании заказа' =  ACTION (userInvoice) {
    FOR orderOrderDetail(orderDetail) == orderUserInvoice(userInvoice) DO {
        ADDOBJ userInvoiceDetail;
        FOR d == addedObject() DO {
            SET userInvoiceUserInvoiceDetail(d) <- userInvoice;
            SET stockUserInvoiceDetail (d) <- stockOrderDetail(orderDetail);
            SET skuUserInvoiceDetail(d) <- skuOrderDetail(orderDetail);
            SET quantityUserInvoiceDetail (d) <- quantityOrderDetail(orderDetail);
            SET priceUserInvoiceDetail (d) <- priceOrderDetail(orderDetail);
        };
    };
} CONFIRM IN orderGroup;

// --------------------------- Формы ---------------------------------- //

FORM userInvoice 'Накладная'
    OBJECTS i = userInvoice FIXED PANEL
    PROPERTIES (i) objectClassName, nameStockUserInvoice, nameNumeratorObject, numberObject, seriesObject, dateUserInvoice, timeUserInvoice,
                   nameCustomerUserInvoice, nameCurrencyUserInvoice, noteUserInvoice,
                   numberContractSkuCustomerUserInvoice, isCommissionUserInvoice,
                   descriptionOrderUserInvoice, fillOrderUserInvoice,
                   countUserInvoiceDetailUserInvoice, quantityUserInvoiceDetailUserInvoice, sumUserInvoiceDetailUserInvoice

    OBJECTS d = userInvoiceDetail
    PROPERTIES (d) indexUserInvoiceDetail, idBarcodeSkuUserInvoiceDetail, nameSkuUserInvoiceDetail, shortNameUOMSkuUserInvoiceDetail,
                   descriptionBatchUserInvoiceDetail, quantityUserInvoiceDetail, priceUserInvoiceDetail, sumUserInvoiceDetail,
                   numberVATUserInvoiceDetail, valueVATUserInvoiceDetail, VATSumUserInvoiceDetail, invoiceSumUserInvoiceDetail,
                   nameStockUserInvoiceDetail, ADDOBJ, delete

    PROPERTIES(i) TODRAW d addDetailDialogSkuStockUserInvoiceDetailUserInvoice,
                           addDetailInputBarcodeUserInvoiceDetailUserInvoice, deleteUserInvoiceDetailUserInvoice
    FILTERS userInvoiceUserInvoiceDetail(d) == i

    EVENTS
        ON OK EXEC prePostUserInvoice(i)

    EDIT userInvoice OBJECT i
;

DESIGN userInvoice FROM DEFAULT{
    main {
        preferredSize = (1024, 768);

        NEW header.box BEFORE d.box {
            childConstraints = TO THE RIGHT;

            NEW headerRow1 {
                childConstraints = TO THE BOTTOM;

                ADD i.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(objectClassName) { preferredCharWidth = 10; }
                    ADD PROPERTY(nameStockUserInvoice);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateUserInvoice);
                    ADD PROPERTY(timeUserInvoice);
                }

                NEW headerRow2 {
                    childConstraints = TO THE RIGHT;
                    ADD i.documentPrmGroup;
                    ADD i.orderGroup;
                }
            }

            ADD i.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }

        d.panel{
            childConstraints = TO THE BOTTOM;
        }
        PROPERTY(formOkAction) {
            caption = 'Провести';
        }
    }
}

FORM userInvoices 'Накладные'
    OBJECTS i = userInvoice
    PROPERTIES (i) READONLY isPostedUserInvoice FORCE GRID, objectClassName, numberObject, seriesObject, dateUserInvoice, timeUserInvoice,
                            nameStockUserInvoice, nameCustomerUserInvoice, nameCurrencyUserInvoice, noteUserInvoice,
                            numberContractSkuCustomerUserInvoice, isCommissionUserInvoice,
                            descriptionOrderUserInvoice,
                            countUserInvoiceDetailUserInvoice, quantityUserInvoiceDetailUserInvoice, sumUserInvoiceDetailUserInvoice

    PROPERTIES (i) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES (i) ADDFORM, EDITFORM, delete FORCE PANEL DRAWTOTOOLBAR

    OBJECTS d = userInvoiceDetail
    PROPERTIES (d) READONLY indexUserInvoiceDetail, idBarcodeSkuUserInvoiceDetail, nameSkuUserInvoiceDetail, shortNameUOMSkuUserInvoiceDetail,
                   descriptionBatchUserInvoiceDetail, quantityUserInvoiceDetail, priceUserInvoiceDetail, sumUserInvoiceDetail,
                   numberVATUserInvoiceDetail, valueVATUserInvoiceDetail, VATSumUserInvoiceDetail, invoiceSumUserInvoiceDetail,
                   nameStockUserInvoiceDetail

    FILTERS userInvoiceUserInvoiceDetail(d) == i

    DIALOG userInvoice OBJECT i
;

DESIGN userInvoices FROM DEFAULT {
    PROPERTY (delete(i)) {
        askConfirm = TRUE;
    }

    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD i.box;

        NEW documentDetail {
            type = TABBED;

            ADD d.box {
                title = 'Спецификация';
            }
            NEW documentHistory {
                title = 'История';

                ADD i.historyGroup;
                ADD i.postedGroup;
            }
            NEW printTab {
                title = 'Печатные формы';
                NEW printContainer {
                    title = 'Печать';
                    childConstraints = TO THE BOTTOM;
                    fillVertical = 1.0; // todo : иначе кнопка не всегда показывается, нужно будет пофиксить как-нибудь
                }
            }
        }
    }
}

FORM invoices 'Накладные'
    OBJECTS i = invoice
    PROPERTIES (i) READONLY isPostedInvoice FORCE GRID, objectClassName, numberInvoice, seriesInvoice, dateInvoice, timeInvoice,
                            nameStockInvoice, nameCustomerInvoice, nameCurrencyInvoice, noteInvoice,
                            numberContractSkuCustomerInvoice, isCommissionInvoice,
                            descriptionOrderInvoice,
                            countInvoiceDetailInvoice, quantityInvoiceDetailInvoice, sumInvoiceDetailInvoice

    OBJECTS d = userInvoiceDetail
    PROPERTIES (d) READONLY indexInvoiceDetail, idBarcodeSkuInvoiceDetail, nameSkuInvoiceDetail, shortNameUOMSkuInvoiceDetail,
                   descriptionBatchInvoiceDetail, quantityInvoiceDetail, priceInvoiceDetail, sumInvoiceDetail,
                   numberVATInvoiceDetail, valueVATInvoiceDetail, VATSumInvoiceDetail, invoiceSumInvoiceDetail,
                   nameStockInvoiceDetail

    FILTERS invoiceInvoiceDetail(d) == i

    DIALOG invoice OBJECT i
;

DESIGN invoices FROM DEFAULT {
    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD i.box;

        NEW documentDetail {
            type = TABBED;

            ADD d.box {
                title = 'Спецификация';
            }
            NEW printTab {
                title = 'Печатные формы';
                NEW printContainer {
                    title = 'Печать';
                    childConstraints = TO THE BOTTOM;
                    fillVertical = 1.0; // todo : иначе кнопка не всегда показывается, нужно будет пофиксить как-нибудь
                }
            }
        }
    }
}

NAVIGATOR {
    saleNavigator {
        ADD userInvoices;
    }
}

