MODULE PriceList;

REQUIRE System, Document, Numerator, Stock, Barcode, PriceRound;

// --------------------------- Виды цен ------------------------- //

CLASS ABSTRACT priceListType 'Вид цены' : named;
TABLE priceListType(priceListType);

includeVATPriceListType 'Цена с НДС' = ABSTRACT BOOLEAN (priceListType) PERSISTENT;

pricePriceListTypeSkuStockDateTime 'Цена' = ABSTRACT NUMERIC[14,2] (priceListType, sku, stock, DATETIME);
pricePriceListTypeBatchStockDateTime 'Цена' = ABSTRACT NUMERIC[14,2] (priceListType, batch, stock, DATETIME);

prevPricePriceListTypeSkuStockDateTime 'Цена (пред.)' (type, sku, stock, dateTime) = PREV(pricePriceListTypeSkuStockDateTime(type, sku, stock, dateTime));
prevPricePriceListTypeBatchStockDateTime 'Цена (пред.)' (type, batch, stock, dateTime) = PREV(pricePriceListTypeBatchStockDateTime(type, batch, stock, dateTime));

prevPriceMVATPriceListTypeSkuStockDateTimeVAT 'Цена без НДС (пред.)' (type, sku, stock, dateTime, VAT) =
    IF includeVATPriceListType(type)
        THEN
            prevPricePriceListTypeSkuStockDateTime(type, sku, stock, dateTime) * 100 /(100 + VAT)
        ELSE
            prevPricePriceListTypeSkuStockDateTime(type, sku, stock, dateTime) AND VAT IS NUMERIC[10,5];

prevPricePVATPriceListTypeSkuStockDateTimeVAT 'Цена с НДС (пред.)' (type, sku, stock, dateTime, VAT) =
    IF includeVATPriceListType(type)
        THEN
            prevPricePriceListTypeSkuStockDateTime(type, sku, stock, dateTime) AND VAT IS NUMERIC[10,5]
        ELSE
            prevPricePriceListTypeSkuStockDateTime(type, sku, stock, dateTime) * (100 + VAT)/100;

prevPriceMVATPriceListTypeBatchStockDateTimeVAT 'Цена без НДС (пред.)' (type, batch, stock, dateTime, VAT) =
    IF includeVATPriceListType(type)
        THEN
            prevPricePriceListTypeBatchStockDateTime(type, batch, stock, dateTime) * 100 /(100 + VAT)
        ELSE
            prevPricePriceListTypeBatchStockDateTime(type, batch, stock, dateTime) AND VAT IS NUMERIC[10,5];

prevPricePVATPriceListTypeBatchStockDateTimeVAT 'Цена с НДС (пред.)' (type, batch, stock, dateTime, VAT) =
    IF includeVATPriceListType(type)
        THEN
            prevPricePriceListTypeBatchStockDateTime(type, batch, stock, dateTime) AND VAT IS NUMERIC[10,5]
        ELSE
            prevPricePriceListTypeBatchStockDateTime(type, batch, stock, dateTime) * (100 + VAT)/100;

@defineDocumentAbstractHeaderCurrency(priceListType);

CLASS ABSTRACT basePriceListType 'Базовый вид цены' : priceListType;

priceBasePriceListTypeSkuStockDateTime (type, sku, stock, dateTime) = ABSTRACT NUMERIC[14,2] (basePriceListType, sku, stock, DATETIME);
priceBasePriceListTypeBatchStockDateTime (type, sku, stock, dateTime) = ABSTRACT NUMERIC[14,2] (basePriceListType, batch, stock, DATETIME);

includeVATBasePriceListType 'Цена с НДС' = ABSTRACT BOOLEAN (basePriceListType);
includeVATPriceListType(type) += includeVATBasePriceListType(type);

pricePriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceBasePriceListTypeSkuStockDateTime(type, sku, stock, dateTime);
pricePriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceBasePriceListTypeBatchStockDateTime(type, batch, stock, dateTime);

// --------------------------- Системные виды цен ------------------------- //
CLASS STATIC systemPriceListType 'Системный вид цены' : basePriceListType;

priceSystemPriceListTypeSkuStockDateTime (type, sku, stock, dateTime) = ABSTRACT NUMERIC[14,3] (systemPriceListType, sku, stock, DATETIME) EXCLUSIVE;
priceSystemPriceListTypeBatchStockDateTime (type, sku, stock, dateTime) = ABSTRACT NUMERIC[14,3] (systemPriceListType, batch, stock, DATETIME) EXCLUSIVE;

includeVATSystemPriceListType 'Цена с НДС' = ABSTRACT BOOLEAN (systemPriceListType);
includeVATBasePriceListType(type) += includeVATSystemPriceListType(type);

// ------------------------------------- Виды цен, формируемые ledger'ами ----------- //

CLASS ABSTRACT ledgerPriceListType 'Регистровый вид цены' : basePriceListType;

batchLedgerPriceListType 'Использовать для партий свои цены' = ABSTRACT BOOLEAN (priceListType) PERSISTENT;

CLASS ABSTRACT priceListLedger;
TABLE priceListLedger(priceListLedger);

fromDateTimePriceListLedger = ABSTRACT DATETIME (priceListLedger) PERSISTENT INDEXED;
toDateTimePriceListLedger = ABSTRACT DATETIME (priceListLedger) PERSISTENT INDEXED;

isPostedPriceListLedger 'Проведен' (ledger) = ABSTRACT BOOLEAN (priceListLedger) PERSISTENT;
skipPriceListLedger 'Не изменять значение' (ledger) = ABSTRACT BOOLEAN (priceListLedger) PERSISTENT;

activePriceListLedger 'Активен' (ledger) = isPostedPriceListLedger(ledger) AND NOT skipPriceListLedger(ledger) PERSISTENT;

skuPriceListLedger = ABSTRACT sku (priceListLedger) PERSISTENT INDEXED;
batchPriceListLedger = ABSTRACT batch (priceListLedger) PERSISTENT INDEXED;

descriptionPriceListLedger = ABSTRACT STRING[200] (priceListLedger) PERSISTENT;

companyPriceListLedger = ABSTRACT legalEntity (priceListLedger) PERSISTENT;

TABLE priceListLedgerLedgerPriceListType(priceListLedger, ledgerPriceListType);
pricePriceListLedgerLedgerPriceListType = ABSTRACT NUMERIC[14,2] (priceListLedger, ledgerPriceListType) PERSISTENT;

TABLE priceListLedgerStock(priceListLedger, stock);
inPriceListLedgerStock (ledger, stock) = ABSTRACT BOOLEAN (priceListLedger, stock) PERSISTENT;

orderPriceListLedger(ledger) = LIST(fromDateTimePriceListLedger(ledger), ledger) AND activePriceListLedger(ledger) PERSISTENT;

TABLE priceListLedgerLedgerPriceListTypeStock (priceListLedger, ledgerPriceListType, stock);
orderPriceListLedgerLedgerPriceListTypeStock(ledger, type, stock) =
    orderPriceListLedger(ledger) IF pricePriceListLedgerLedgerPriceListType(ledger, type) AND inPriceListLedgerStock(ledger, stock) PERSISTENT INDEXED;

concatLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    GROUP MAX orderPriceListLedgerLedgerPriceListTypeStock(ledger, type, stock)
              IF fromDateTimePriceListLedger(ledger) < (dateTimeIn AS DATETIME) AND NOT toDateTimePriceListLedger(ledger) <= (dateTimeIn AS DATETIME)
          BY type, skuPriceListLedger(ledger), stock, dateTimeIn;
priceListLedgerLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    concatLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)[2];

concatLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
    GROUP MAX orderPriceListLedgerLedgerPriceListTypeStock(ledger, type, stock)
              IF fromDateTimePriceListLedger(ledger) < (dateTimeIn AS DATETIME) AND NOT toDateTimePriceListLedger(ledger) <= (dateTimeIn AS DATETIME)
          BY type, batchPriceListLedger(ledger), stock, dateTimeIn;
priceListLedgerLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
    IF batchLedgerPriceListType(type) THEN concatLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime)[2]
                                      ELSE priceListLedgerLedgerPriceListTypeSkuStockDateTime(type, skuBatch(batch), stock, dateTime);

priceLedgerPriceListTypeSkuStockDateTime 'Цена' (type, sku, stock, dateTime) =
    pricePriceListLedgerLedgerPriceListType(priceListLedgerLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime), type);
priceLedgerPriceListTypeBatchStockDateTime 'Цена' (type, batch, stock, dateTime) =
    pricePriceListLedgerLedgerPriceListType(priceListLedgerLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime), type);

companyLedgerPriceListTypeSkuStockDateTime (type, sku, stock, dateTime) =
    companyPriceListLedger(priceListLedgerLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime));
nameCompanyLedgerPriceListTypeSkuStockDateTime 'Компания прайса' (type, sku, stock, dateTime) =
    name(companyLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime));
companyLedgerPriceListTypeBatchStockDateTime (type, batch, stock, dateTime) =
    companyPriceListLedger(priceListLedgerLedgerPriceListTypeSkuStockDateTime(type, skuBatch(batch), stock, dateTime));
nameCompanyLedgerPriceListTypeBatchStockDateTime 'Компания прайса' (type, batch, stock, dateTime) =
    name(companyLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime));

descriptionLedgerPriceListTypeSkuStockDateTime 'Описание' (type, sku, stock, dateTime) =
    descriptionPriceListLedger(priceListLedgerLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime));
descriptionLedgerPriceListTypeBatchStockDateTime 'Описание' (type, batch, stock, dateTime) =
    descriptionPriceListLedger(priceListLedgerLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime));

includeVATLedgerPriceListType 'Цена с НДС' = ABSTRACT BOOLEAN (ledgerPriceListType);

priceBasePriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime);
priceBasePriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime);

includeVATBasePriceListType(type) += includeVATLedgerPriceListType(type);

// ------ оптимизация для ассортиментов
ledgerPriceListTypePriceListType = ABSTRACT ledgerPriceListType (priceListType);

ledgerPriceListTypePriceListType(type) += type AS ledgerPriceListType;

// --------------------------- Системные виды цен, на основе Ledger'ов ------------------ //

CLASS STATIC systemLedgerPriceListType 'Системный вид цены (регистр)' {
    accountPriceListType 'Учетная'
}: ledgerPriceListType;

batchLedgerPriceListType (type) += type == systemLedgerPriceListType.accountPriceListType;

includeVATSystemLedgerPriceListType 'Цена с НДС' = ABSTRACT BOOLEAN (systemLedgerPriceListType) EXCLUSIVE;
includeVATLedgerPriceListType (type) += includeVATSystemLedgerPriceListType(type);

pricePriceListLedgerSystemLedgerPriceListType = ABSTRACT NUMERIC[14,2] (priceListLedger, systemLedgerPriceListType) EXCLUSIVE PERSISTENT;
pricePriceListLedgerLedgerPriceListType(ledger, type) += pricePriceListLedgerSystemLedgerPriceListType(ledger, type);

META implementSystemLedgerPriceListType (type, object, stockProp, prefix)
    EXTEND CLASS object : priceListLedger;

    fromDateTimePriceListLedger (ledger) += dateTime###object(ledger);

    isPostedPriceListLedger(ledger) += isPosted###object(ledger);

    skuPriceListLedger (ledger) += sku###object(ledger);

    descriptionPriceListLedger (ledger) += description###object(ledger);

    pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += prefix###price###object(ledger) WHEN CLASS(prefix###price###object(ledger)) AND type == systemLedgerPriceListType.##type##PriceListType;
    inPriceListLedgerStock (ledger, stock) += stockProp###object(ledger) == stock;
END

META implementSystemLedgerPriceListType (type, object, stockProp)
    @implementSystemLedgerPriceListType(type, object, stockProp, );
END

META implementSystemLedgerPriceListTypeBatch (type, object, stockProp)
    @implementSystemLedgerPriceListType(type, object, stockProp);
    batchPriceListLedger (ledger) += ledger AS object;
END
// --------------------------- Пользовательские виды цен ------------------------- //

CLASS dataPriceListType 'Пользовательский вид цены' : ledgerPriceListType;
batchLedgerPriceListType (priceListType) += priceListType IS dataPriceListType;

includeVATDataPriceListType 'Цена с НДС' = DATA BOOLEAN (dataPriceListType);
includeVATLedgerPriceListType (priceListType) += includeVATDataPriceListType(priceListType);

@defineDocumentHeaderCurrency(dataPriceListType);
currencyPriceListType(dataPriceListType) += currencyDataPriceListType(dataPriceListType);

CLASS ABSTRACT priceList 'Прайс';
CLASS ABSTRACT priceListDetail 'Строка прайса';

CLASS userPriceList 'Прайс (польз.)' : priceList, historizable, numeratedObject, externalizable;
CLASS userPriceListDetail 'Строка прайса (польз.)' : priceListDetail;
CLASS userPriceListPosted 'Проведенный прайс (польз.)' : userPriceList, postedObject;

@defineDocumentInterface(priceList);

@defineDocumentInterfaceTimePrefix(priceList, from, ' c');
@defineDocumentInterfaceTimePrefix(priceList, to, ' по');

@defineDocumentInterfaceNumber(priceList);
@defineNumeratedObjectDefault(priceList, 'Нумератор для прайсов', 'ПЛ');

//@defineDocumentInterfaceDataStock(priceList, stock, 'Склад');
@defineDocumentInterfacePosted(priceList);

@defineDocumentInterfaceDescription(priceList, 'Прайс');

@defineDocumentInterfaceCurrency(priceList);

@defineDocumentInterfaceDetailSku(priceList, sku);

@defineDocumentInterfaceLegalEntity(priceList, company, 'Организация');
@defineDocumentInterfaceDetailQuantity(priceList);
@defineAddDetailDialogBarcode(userPriceList, sku);

WHEN ASSIGNED(u AS userPriceList) DO {
    IF u IS userPriceList AND toDateUserPriceList(u) THEN SET toDateUserPriceList(u) <- NULL;
    IF u IS userPriceList AND toTimeUserPriceList(u) THEN SET toTimeUserPriceList(u) <- NULL;
} SESSION;

//toDateUserPriceList(userPriceList) <- NULL WHEN ASSIGNED(userPriceList IS userPriceList);
//toTimeUserPriceList(userPriceList) <- NULL WHEN ASSIGNED(userPriceList IS userPriceList);

userPriceListLegalEntity (legalEntity) = GROUP MAX userPriceList BY companyPriceList(userPriceList) WHERE userPriceList IS userPriceList;
userPriceListDetailSkuSIDUserPriceListSID (sku, userPriceList) = GROUP UNIQUE userPriceListDetail BY sidExternalizable(skuUserPriceListDetail(userPriceListDetail)), sidExternalizable(userPriceListUserPriceListDetail(userPriceListDetail)) WHERE userPriceListDetail IS userPriceListDetail;

pricePriceListDetailDataPriceListType 'Цена (новая)' = ABSTRACT NUMERIC[14,2] (priceListDetail, dataPriceListType) PERSISTENT;
priceUserPriceListDetailDataPriceListType 'Цена (новая)' = DATA NUMERIC[14,2] (priceListDetail, dataPriceListType);
pricePriceListDetailDataPriceListType (priceListDetail, dataPriceListType) += priceUserPriceListDetailDataPriceListType(priceListDetail, dataPriceListType);

TABLE priceListPriceListType (priceList, priceListType);
TABLE priceListDetailPriceListType (priceListDetail, priceListType);

TABLE priceListDataPriceListType (priceList, dataPriceListType);
TABLE priceListDetailDataPriceListType (priceListDetail, dataPriceListType);

inPriceListDataPriceListType 'Изменять цены' = ABSTRACT BOOLEAN (priceList, dataPriceListType) PERSISTENT;
inUserPriceListDataPriceListType 'Изменять цены' = DATA BOOLEAN (userPriceList, dataPriceListType);
inPriceListDataPriceListType (priceList, dataPriceListType) += inUserPriceListDataPriceListType(priceList, dataPriceListType);

showPriceListPriceListType 'Показывать цены' = ABSTRACT BOOLEAN (priceList, priceListType) PERSISTENT;
showUserPriceListPriceListType 'Показывать цены' = DATA BOOLEAN (userPriceList, priceListType);
showPriceListPriceListType (priceList, priceListType) += showUserPriceListPriceListType(priceList, priceListType);

inShowPriceListPriceListType (priceList, priceListType) = inPriceListDataPriceListType (priceList, priceListType) AND
                                                          showPriceListPriceListType (priceList, priceListType);

priceListTypesPriceList 'Цены' (priceList) = GROUP CONCAT name(priceListType) IF inPriceListDataPriceListType(priceList, priceListType) , ', '
                                               BY priceList
                                               ORDER priceListType MINCHARWIDTH 50 PERSISTENT;

inPriceListDetailPriceListType (detail, dataPriceListType) = inPriceListDataPriceListType(priceListPriceListDetail(detail), dataPriceListType) PERSISTENT;

pricePriceListDetailDataPriceListType(detail, dataPriceListType) => inPriceListDetailPriceListType (detail, dataPriceListType) RESOLVE FALSE;

inPriceList 'Отм' = ABSTRACT BOOLEAN (priceList) PERSISTENT;
inUserPriceList 'Отм' = DATA BOOLEAN (userPriceList);
inUserPriceList(userPriceList) <- TRUE WHEN ASSIGNED(userPriceList IS userPriceList);
inPriceList (priceList) += inUserPriceList(priceList);

TABLE priceListStockGroup(priceList, stockGroup);
inPriceListStockGroup 'Отм' = ABSTRACT BOOLEAN (priceList, stockGroup) PERSISTENT;
inUserPriceListStockGroup 'Отм' = DATA BOOLEAN (userPriceList, stockGroup);
inPriceListStockGroup (priceList, stockGroup) += inUserPriceListStockGroup(priceList, stockGroup);

TABLE priceListStock(priceList, stock);
inPriceListStock 'Отм' = ABSTRACT BOOLEAN (priceList, stock) PERSISTENT;
inUserPriceListStock 'Отм' = DATA BOOLEAN (userPriceList, stock);
inPriceListStock (priceList, stock) += inUserPriceListStock(priceList, stock);

TABLE priceListDetailStock(priceListDetail, stock);
dataPriceListDetailStock (detail, stock) = inPriceListStock(priceListPriceListDetail(detail), stock) PERSISTENT;

levelParentPriceListStockGroup (priceList, stockGroup) = GROUP MIN levelStockGroupStockGroup(stockGroup, parent) IF inPriceListStockGroup(priceList, parent)
                                                               BY priceList, stockGroup PERSISTENT;
nearestParentStockGroup (priceList, stockGroup) = stockGroupStockGroupLevel(stockGroup, levelParentPriceListStockGroup(priceList, stockGroup));
nearestInPriceListStockGroup (priceList, stockGroup) =
    inPriceListStockGroup(priceList, nearestParentStockGroup(priceList, stockGroup));

inPriceListStockGroupOver 'Отм' (priceList, stockGroup) =
    UNION OVERRIDE inPriceList(priceList) AND stockGroup IS stockGroup,
                   nearestInPriceListStockGroup(priceList, stockGroup),
                   inPriceListStockGroup(priceList, stockGroup);

inPriceListStockOver 'Отм' (priceList, stock) =
    (UNION OVERRIDE inPriceList(priceList) AND stock IS stock,
                   nearestInPriceListStockGroup(priceList, stockGroupStock(stock)),
                   inPriceListStock(priceList, stock)) AND isCompanyStock(stock);

stocksPriceList 'Склады' (priceList) = GROUP CONCAT name(stock) IF inPriceListStockOver(priceList, stock) , ', '
                                       BY priceList
                                       ORDER stock MINCHARWIDTH 100 PERSISTENT;

currentPricePriceListDetailDataPriceListTypeStock 'Действующая цена' (priceListDetail, dataPriceListType, stock) =
    prevPricePriceListTypeSkuStockDateTime(dataPriceListType, skuPriceListDetail(priceListDetail), stock, fromDateTimePriceListDetail(priceListDetail));

currentPriceSkuPriceListDataPriceListTypeStock 'Действующая цена' (sku, priceList, dataPriceListType, stock) =
    prevPricePriceListTypeSkuStockDateTime(dataPriceListType, sku, stock, fromDateTimePriceList(priceList));

markUpPricePriceListDetailDataPriceListTypeStock 'Изменение, %' (priceListDetail, dataPriceListType, stock) =
    pricePriceListDetailDataPriceListType(priceListDetail, dataPriceListType) * 100.0 /
    currentPricePriceListDetailDataPriceListTypeStock (priceListDetail, dataPriceListType, stock) - 100.0;

extendNameCurrentDataPriceListType (userPriceList, dataPriceListType) =
    [FORMULA STRING[50]  ' CAST($1 AS TEXT) || \' (старая) \''](
    name(dataPriceListType)) IF showPriceListPriceListType(userPriceList, dataPriceListType) MINCHARWIDTH 30 MAXCHARWIDTH 50;

extendNameMarkUpDataPriceListType (userPriceList, dataPriceListType) =
    [FORMULA STRING[50]  'CAST($1 AS TEXT) || \' (изменение, %) \''](
    name(dataPriceListType)) IF inShowPriceListPriceListType(userPriceList, dataPriceListType) MINCHARWIDTH 30 MAXCHARWIDTH 50;

extendNameDataPriceListType (userPriceList, dataPriceListType) =
    [FORMULA STRING[50]  ' CAST($1 AS TEXT) || \' (новая) \''](
    name(dataPriceListType)) IF inPriceListDataPriceListType(userPriceList, dataPriceListType) MINCHARWIDTH 30 MAXCHARWIDTH 50;

backgroundCurrentDataPriceListType 'Цвет' (dataPriceListType) = RGB(255,238,165) AND dataPriceListType IS dataPriceListType;
backgroundMarkUpDataPriceListType 'Цвет' (dataPriceListType) = RGB(232,184,146) AND dataPriceListType IS dataPriceListType;
backgroundDataPriceListType 'Цвет' (dataPriceListType) = RGB(213,249,185) AND dataPriceListType IS  dataPriceListType;

inStockGroupStock (stockGroup, stock) = UNION OVERRIDE stock IS stock AND NOT stockGroup IS stockGroup, isParentStockGroupStock(stockGroup, stock);

detailSkuUserPriceList(sku, price) = GROUP SUM 1 IF sku == skuUserPriceListDetail(detail) AND price == userPriceListUserPriceListDetail(detail)
                                           BY skuUserPriceListDetail(detail), userPriceListUserPriceListDetail(detail);

inSkuUserPriceList 'Отм.' (sku, price) = TRUE IF detailSkuUserPriceList(sku, price);

changeInSkuUserPriceList = ACTION (sku, price) {
    REQUEST BOOLEAN INPUT;
    IF TRUE AND NOT requestedLogical() THEN {
        IF detailSkuUserPriceList(sku, price) THEN {
            FOR sku == skuUserPriceListDetail(detail) AND price == userPriceListUserPriceListDetail(detail) DO {
                EXEC delete(detail);
            }
        }
    } ELSE {
        IF requestedLogical() THEN {
            FOR ADDOBJ d = userPriceListDetail DO {
               SET userPriceListUserPriceListDetail(d) <- price;
               SET skuUserPriceListDetail(d) <- sku;
            }
        }
    }
}

isSelectedPriceListDetail 'Отм' = DATA SESSION BOOLEAN (priceListDetail);
sumSelectedPriceList (priceList) =
    GROUP SUM 1 IF isSelectedPriceListDetail(priceListDetail)
          BY priceListPriceListDetail(priceListDetail);

FORM chooseMarkUpSkuUserPriceList 'Наценка'

    OBJECTS p = userPriceList FIXED PANEL

    OBJECTS t = priceListType FIXED PANEL
    PROPERTIES(t) SELECTOR name

    OBJECTS n = NUMERIC[20,7] FIXED PANEL
    PROPERTIES(n) objValue = OBJVALUE

    OBJECTS t2 = dataPriceListType FIXED PANEL
    PROPERTIES(t2) SELECTOR name
    FILTERS inPriceListDataPriceListType(p, t2)
;

DESIGN chooseMarkUpSkuUserPriceList FROM DEFAULT {

    REMOVE p.box;
    NEW topContainer {
        childConstraints = TO THE BOTTOM;
        ADD PROPERTY(name(t));
        PROPERTY(name(t)){caption = 'Старая цена';}
        ADD PROPERTY(objValue);
        PROPERTY(objValue){caption = 'Изменение, %';}
        ADD PROPERTY(name(t2));
        PROPERTY(name(t2)){caption = 'Новая цена';}
    }
    ADD functions.box;
}

FORM priceLists 'Прайсы'

    OBJECTS p = priceList
    PROPERTIES(p) READONLY objectClassName, numberObject, seriesObject,
                           fromDateTimePriceList, toDateTimePriceList, nameCurrencyPriceList,
                           nameCompanyPriceList, noteUserPriceList, priceListTypesPriceList, stocksPriceList

    DIALOG priceList OBJECT p
;

addUnderPriceListUserPriceList 'Заполнить на основании' = ACTION (userPriceList){

    FORM priceLists MODAL;
    IF formResult() == formResult.ok THEN {
        FOR priceListPriceListDetail(detail) == chosenObject('p') DO {
            ADDOBJ userPriceListDetail;
            FOR d == addedObject() DO {
                SET userPriceListUserPriceListDetail(d) <- userPriceList;
                SET skuUserPriceListDetail(d) <- skuPriceListDetail(detail);
            }
        }
    }
}

sessionDataPriceListType 'Вид цены' = DATA SESSION dataPriceListType();

changeMarkUpSkuUserPriceList 'Изменить наценку' = ACTION (userPriceList, dataPriceListType, stock){

    FORM chooseMarkUpSkuUserPriceList OBJECTS p = userPriceList, t2 = dataPriceListType MODAL;
    IF formResult() == formResult.ok THEN {
        IF TRUE AND NOT sumSelectedPriceList(userPriceList) THEN MESSAGE 'Выберите хотя бы одну позицию' ELSE
        SET priceUserPriceListDetailDataPriceListType(detail, t) <-
                currentPricePriceListDetailDataPriceListTypeStock(detail, chosenObject('t'), stock) * (chosenNumeric('n') + 100.0) / 100.0
                WHERE isSelectedPriceListDetail(detail) AND userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('t2');
    }
}

FORM userPriceList 'Прайс'
    TREE skuTree sk = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = name(sk)
    ORDER BY skuTreeName

    OBJECTS p = userPriceList FIXED PANEL
    PROPERTIES(p) objectClassName, nameNumeratorObject, numberObject, seriesObject,
                  dateUserPriceList, timeUserPriceList,
                  fromDateUserPriceList, fromTimeUserPriceList, toDateUserPriceList, toTimeUserPriceList,
                  nameCurrencyUserPriceList, nameCompanyUserPriceList, noteUserPriceList, includeVATLedgerPriceListType

    OBJECTS t = priceListType
    PROPERTIES(t) READONLY name
    PROPERTIES(p, t) inPriceListDataPriceListType TODRAW t FORCE GRID, showPriceListPriceListType

    OBJECTS d = userPriceListDetail
    PROPERTIES(d) isSelectedPriceListDetail, indexUserPriceListDetail, idBarcodeSkuUserPriceListDetail, nameSkuUserPriceListDetail,
                  shortNameUOMSkuUserPriceListDetail, ADDOBJ, delete
    PROPERTIES(p) TODRAW d FORCE PANEL DRAWTOTOOLBAR addUnderPriceListUserPriceList, addDetailInputBarcodeUserPriceListDetailUserPriceList

    TREE stockTree a=STRING[3], sg = stockGroup PARENT parentStockGroup
    PROPERTIES READONLY OBJVALUE(a), sgTreeName = name(sg)
    ORDER BY sgTreeName
    FILTERS stringEqualsAll(a)
    PROPERTIES(p) inPriceList TODRAW a FORCE GRID
    PROPERTIES(p, sg) inPriceListStockGroupOver

    OBJECTS ts = stock
    PROPERTIES READONLY name(ts), stockName = name(ts) FORCE PANEL
    PROPERTIES(p, ts) inPriceListStockOver

    PROPERTIES(p, t, ts) changeMarkUpSkuUserPriceList TODRAW d FORCE PANEL DRAWTOTOOLBAR

    PROPERTIES(d, t, ts) currentPricePriceListDetailDataPriceListTypeStock COLUMNS (t) HEADER extendNameCurrentDataPriceListType(p, t) BACKGROUND backgroundCurrentDataPriceListType(t) TODRAW d FORCE GRID
    PROPERTIES(d, t, ts) markUpPricePriceListDetailDataPriceListTypeStock COLUMNS (t) HEADER extendNameMarkUpDataPriceListType(p, t) BACKGROUND backgroundMarkUpDataPriceListType(t) TODRAW d FORCE GRID
    PROPERTIES(d, t) pricePriceListDetailDataPriceListType COLUMNS (t) HEADER extendNameDataPriceListType(p, t) BACKGROUND backgroundDataPriceListType(t) TODRAW d FORCE GRID
    PROPERTIES(d, t, ts) currentPricePriceListDetailDataPriceListTypeStock COLUMNS (t) HEADER extendNameCurrentDataPriceListType(p, t) BACKGROUND backgroundCurrentDataPriceListType(t)
    PROPERTIES(d, t, ts) markUpPricePriceListDetailDataPriceListTypeStock COLUMNS (t) HEADER extendNameMarkUpDataPriceListType(p, t) BACKGROUND backgroundMarkUpDataPriceListType(t)

    FILTERS userPriceListUserPriceListDetail(d) == p,
            isParentSkuGroupSku(sk, skuPriceListDetail(d)) OR (sk IS skuGroup AND d IS priceListDetail AND NOT skuPriceListDetail(d)),
            inStockGroupStock(sg, ts),
            currencyUserPriceList(p) == currencyDataPriceListType(t),
            isCompanyStock(ts),
            quantityStocksStockGroup(sg)

    FILTERGROUP filters
            FILTER 'Выбранные склады' 'F10' inPriceListStockOver(p, ts) DEFAULT

    TREE skuTree2 sk2 = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName2 = name(sk2)
    ORDER BY skuTreeName2

    OBJECTS ts2 = stock FIXED PANEL
    PROPERTIES(ts2) SELECTOR name
    FILTERS inPriceListStockOver(p, ts2),
            isCompanyStock(ts2)

    OBJECTS t2 = priceListType FIXED PANEL
    PROPERTIES(t2) SELECTOR name

    OBJECTS s2=sku
    PROPERTIES inSkuUserPriceList(s2, p) ON CHANGE EXEC changeInSkuUserPriceList(s2, p)
    PROPERTIES READONLY inputName2 = nameSku(s2), idBarcodeSku(s2), currentBalanceSkuStock(s2, ts2)
    PROPERTIES READONLY currentPriceSkuPriceListDataPriceListTypeStock(s2, p, t, ts2) COLUMNS (t) HEADER extendNameCurrentDataPriceListType(p, t) BACKGROUND backgroundCurrentDataPriceListType(t)
    FILTERGROUP filters
        FILTER 'С действующей ценой' 'F10' currentPriceSkuPriceListDataPriceListTypeStock(s2, p, t2, ts2) DEFAULT

    FILTERGROUP filters2
        FILTER 'С остатком' 'F11' currentBalanceSkuStock(s2, ts2)

    FILTERS isParentSkuGroupSku(sk2, s2)
    ORDER BY inputName2

    EVENTS
        ON OK EXEC prePostUserPriceList(p)

    EDIT userPriceList OBJECT p
;

DESIGN userPriceList FROM DEFAULT {
//    REMOVE st.box;
    NEW topContainer{
        NEW headContainer {
            caption = 'Шапка документа';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY (objectClassName);
            ADD PROPERTY (nameNumeratorObject);
            ADD PROPERTY (numberObject);
            ADD PROPERTY (seriesObject);
            ADD PROPERTY (dateUserPriceList);
            ADD PROPERTY (timeUserPriceList);

        }
        NEW timeContainer{
            caption = 'Период действия';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY (fromDateUserPriceList);
            ADD PROPERTY (fromTimeUserPriceList);
            ADD PROPERTY (toDateUserPriceList);
            ADD PROPERTY (toTimeUserPriceList);
        }
        NEW propContainer{
            caption = 'Параметры документа';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY(nameCurrencyUserPriceList);
            ADD PROPERTY(nameCompanyUserPriceList);
            ADD PROPERTY(noteUserPriceList);
        }
        POSITION propContainer TO THE RIGHT timeContainer;
        NEW detailContainer{
            childConstraints = TO THE RIGHT;
            type = TABBED;
            NEW firstContainer{
                caption = 'Параметры';
                type = SPLITH;
                NEW firstSecondContainer{
                    type = SPLITV;
                    ADD t.box;
                    ADD stockTree.tree.box{caption = 'Группы складов';}
                }
                ADD ts.box{fillHorizontal = 2.0;}
            }
            NEW secondContainer {
                caption = 'Спецификация';
                childConstraints = TO THE BOTTOM;

                ADD PROPERTY(stockName);
                NEW secondSecondContainer{
                    type = SPLITH;
                    childConstraints =  TO THE RIGHT;
                    ADD skuTree.tree.box {caption = 'Товары';}
                    ADD d.box{fillHorizontal = 3.0;}
                }
            }
            NEW thirdContainer{
                caption = 'Подбор';
                NEW topThirdContainer{
                    childConstraints = TO THE RIGHT;
                    ADD ts2.box;
                    ADD t2.box;
                }
                NEW detailThirdContainer{
                    childConstraints = TO THE RIGHT;
                    type = SPLITH;
                    ADD skuTree2.tree.box;
                    ADD s2.box{fillHorizontal = 3.0;}
                }
           }
        }
        PROPERTY(formOk) {
            caption = 'Провести';
        }
    }

    ADD functions.box;
}

copyUserPriceList 'Копировать' = ACTION (price) NEWSESSION {

    FOR ADDOBJ u = userPriceList DO {
        SET currencyUserPriceList(u) <- currencyUserPriceList(price);
        SET inUserPriceListStock(u, stock) <- inUserPriceListStock(price, stock);
        SET inUserPriceListStockGroup(u, stockGroup) <- inUserPriceListStockGroup(price, stockGroup);
        SET inUserPriceList(u) <- inUserPriceList(price);
        SET inPriceListDataPriceListType(u, priceListType) <- inPriceListDataPriceListType(price, priceListType);
        FOR userPriceListUserPriceListDetail(detail) == price DO {
            FOR ADDOBJ d = userPriceListDetail DO {
                SET userPriceListUserPriceListDetail(d) <- u;
                SET skuUserPriceListDetail(d) <- skuUserPriceListDetail(detail);
            }
        }
        FORM userPriceList OBJECTS p = u MANAGESESSION DOCKED_MODAL;
    }
}

FORM userPriceLists 'Прайсы'

    OBJECTS p = userPriceList
    PROPERTIES(p) READONLY objectClassName, numberObject, seriesObject,
                           fromDateTimeUserPriceList, toDateTimeUserPriceList, nameCurrencyUserPriceList,
                           nameCompanyUserPriceList, noteUserPriceList, priceListTypesPriceList, stocksPriceList
    PROPERTIES(p) copyUserPriceList TODRAW p FORCE PANEL DRAWTOTOOLBAR
    PROPERTIES(p) ADDFORM, EDITFORM, delete TODRAW p FORCE PANEL DRAWTOTOOLBAR

    OBJECTS t = dataPriceListType

    OBJECTS d =userPriceListDetail
    PROPERTIES(d) READONLY indexUserPriceListDetail, idBarcodeSkuUserPriceListDetail, nameSkuUserPriceListDetail,
                           shortNameUOMSkuUserPriceListDetail

    OBJECTS ts = stock
    PROPERTIES(ts) READONLY name
    PROPERTIES(p, ts) READONLY inPriceListStockOver

    PROPERTIES(d, t) READONLY pricePriceListDetailDataPriceListType COLUMNS (t) HEADER name(t)

    FILTERS userPriceListUserPriceListDetail(d) == p,
            inPriceListDataPriceListType(p, t),
            inPriceListStockOver(p, ts),
            currencyUserPriceList(p) == currencyDataPriceListType(t),
            isCompanyStock(ts)

;

DESIGN userPriceLists FROM DEFAULT{

    REMOVE t.box;
    NEW topContainer{
        type = SPLITV;
        ADD p.box{fillVertical = 3.0;}
        NEW detailContainer{
            childConstraints = TO THE RIGHT;
            type = SPLITH;
            fillVertical = 2.0;
            NEW firstContainer{
                childConstraints = TO THE RIGHT;
                type = SPLITH;
                ADD d.box{fillHorizontal = 4.0;}
                ADD ts.box{fillHorizontal = 1.0;}
            }
        }
    }
    ADD functions.box;
}

// ------- Проведение по priceListLedger ----- //

EXTEND CLASS priceListDetail : priceListLedger;

fromDateTimePriceListLedger (ledger) += fromDateTimePriceListDetail(ledger);
toDateTimePriceListLedger (ledger) += toDateTimePriceListDetail(ledger);

isPostedPriceListLedger(ledger) += isPostedPriceListDetail(ledger);

skuPriceListLedger (ledger) += skuPriceListDetail(ledger);

companyPriceListLedger (ledger) += companyPriceList(priceListPriceListDetail(ledger));

descriptionPriceListLedger (ledger) += descriptionPriceList(priceListPriceListDetail(ledger));

pricePriceListLedgerLedgerPriceListType (ledger, type) += pricePriceListDetailDataPriceListType(ledger, type);
inPriceListLedgerStock (ledger, stock) += inPriceListStockOver(priceListPriceListDetail(ledger), stock);

// --------------------------- Расчетные виды цен ------------------------- //

CLASS calcPriceListType 'Расчетный вид цены' : priceListType;

basePriceListTypeCalcPriceListType(type) = DATA basePriceListType (calcPriceListType);
nameBasePriceListTypeCalcPriceListType 'Базовый вид цены' (type) = name(basePriceListTypeCalcPriceListType(type));

ledgerPriceListTypePriceListType(type) += basePriceListTypeCalcPriceListType(type) AS ledgerPriceListType;

includeVATCalcPriceListType 'Цена с НДС' = DATA BOOLEAN (calcPriceListType);

includeVATPriceListType(type) += includeVATCalcPriceListType(type);

@defineDocumentHeaderCurrency(calcPriceListType);
currencyPriceListType(calcPriceListType) += currencyCalcPriceListType(calcPriceListType);

groupTypeCalcPriceListType = DATA groupType (calcPriceListType);
nameGroupTypeCalcPriceListType 'Тип классификатора' (type) = name(groupTypeCalcPriceListType(type));

TABLE calcPriceListTypeGroup (calcPriceListType, group);

markupCalcPriceListTypeGroup 'Надбавка, %' = DATA NUMERIC[8,2] (calcPriceListType, group);

roundConditionCalcPriceListType 'Условие округления' = DATA roundCondition (calcPriceListType);
nameRoundConditionCalcPriceListType 'Условие округления' (calcPriceListType) = name(roundConditionCalcPriceListType(calcPriceListType));

CONSTRAINT currencyRoundCondition(roundConditionCalcPriceListType(calcPriceListType)) != currencyCalcPriceListType(calcPriceListType)
           CHECKED BY roundConditionCalcPriceListType
           MESSAGE 'Валюта документа должна совпадать с валютой условия округления цены';

levelParentMarkupGroup (calcPriceListType, group) = GROUP MIN levelGroupGroup(group, parent) IF markupCalcPriceListTypeGroup(calcPriceListType, parent)
                                                              BY calcPriceListType, group PERSISTENT;
nearestParentGroup (calcPriceListType, group) = groupGroupLevel(group, levelParentMarkupGroup(calcPriceListType, group));
nearestMarkupCalcPriceListTypeGroup 'Расчетная надбавка, %' (calcPriceListType, group) =
    markupCalcPriceListTypeGroup(calcPriceListType, nearestParentGroup(calcPriceListType, group)) PERSISTENT;

markupCalcPriceListTypeGroupOver 'Надбавка, %' (type, group) =
    UNION OVERRIDE nearestMarkupCalcPriceListTypeGroup(type, group), markupCalcPriceListTypeGroup(type, group) PERSISTENT;

markupCalcPriceListTypeSku 'Надбавка, %' (type, sku) = markupCalcPriceListTypeGroupOver(type, groupGroupTypeSku(groupTypeCalcPriceListType(type), sku));

multiplierCalcPriceListTypeGroup (type, group) = (100 + markupCalcPriceListTypeGroupOver(type, group)) / 100 PERSISTENT;

priceCalcPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    roundPriceRoundCondition(priceBasePriceListTypeSkuStockDateTime(basePriceListTypeCalcPriceListType(type), sku, stock, dateTime) * multiplierCalcPriceListTypeGroup(type, groupGroupTypeSku(groupTypeCalcPriceListType(type), sku)), roundConditionCalcPriceListType(type));
priceCalcPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
    roundPriceRoundCondition(priceBasePriceListTypeBatchStockDateTime(basePriceListTypeCalcPriceListType(type), batch, stock, dateTime) * multiplierCalcPriceListTypeGroup(type, groupGroupTypeSku(groupTypeCalcPriceListType(type), skuBatch(batch))), roundConditionCalcPriceListType(type));

pricePriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceCalcPriceListTypeSkuStockDateTime(type, sku, stock, dateTime);
pricePriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceCalcPriceListTypeBatchStockDateTime(type, batch, stock, dateTime);

backgroundMarkup 'Цвет' (calcPriceListType, group) = RGB(255,160,160) AND markupCalcPriceListTypeGroup(calcPriceListType, group);

// --------------------------- Формы ------------------------- //

editPriceListType 'Редактировать' = ABSTRACT ACTION (priceListType) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

FORM dataPriceListType 'Пользовательский вид цен'
    OBJECTS d = dataPriceListType FIXED PANEL
    PROPERTIES(d) name, includeVATPriceListType, nameCurrencyDataPriceListType

    EDIT dataPriceListType OBJECT d
;

DESIGN dataPriceListType FROM DEFAULT {
    d.box{
        ADD PROPERTY(name);
        ADD PROPERTY(includeVATPriceListType);
        ADD PROPERTY(nameCurrencyDataPriceListType);
    }
}

addDataPriceListType 'Добавить пользовательскую цену' = ACTION ADDFORM dataPriceListType;
editDataPriceListType 'Редактировать' = ACTION EDITFORM dataPriceListType;
editPriceListType(priceListType) += editDataPriceListType(priceListType);

FORM calcPriceListType 'Расчетный вид цен'
    OBJECTS c = calcPriceListType FIXED PANEL
    PROPERTIES(c) name, includeVATPriceListType, nameCurrencyCalcPriceListType, nameBasePriceListTypeCalcPriceListType, nameRoundConditionCalcPriceListType, nameGroupTypeCalcPriceListType

    TREE treeGroup g=group PARENT parentGroup
    PROPERTIES READONLY name(g)
    FILTERS groupTypeGroup(g) == groupTypeCalcPriceListType(c)
    ORDER BY name(g)
    PROPERTIES(c, g) markupCalcPriceListTypeGroup , nearestMarkupCalcPriceListTypeGroup

    EDIT calcPriceListType OBJECT c
;

DESIGN calcPriceListType FROM DEFAULT{
    NEW mainContainer{
        childConstraints = TO THE RIGHT;
        type = SPLITH;
        ADD c.box{fillHorizontal = 3.0;}
        NEW groupContainer {
            childConstraints = TO THE BOTTOM;
            ADD PROPERTY(nameGroupTypeCalcPriceListType);
            ADD treeGroup.tree.box { fillHorizontal = 2.0; }
        }
    }
    ADD functions.box;
}

addCalcPriceListType 'Добавить расчетную цену' = ACTION ADDFORM calcPriceListType;
editCalcPriceListType 'Редактировать' = ACTION EDITFORM calcPriceListType;
editPriceListType(priceListType) += editCalcPriceListType(priceListType);

FORM priceListType 'Вид цены'
    OBJECTS p = priceListType
    PROPERTIES(p) READONLY name, nameCurrencyPriceListType
    PROPERTIES(p) includeVATPriceListType

    DIALOG priceListType OBJECT p
;

FORM priceListTypes 'Виды цен'
    OBJECTS dt = DATETIME FIXED PANEL
    PROPERTIES(dt) objValue = OBJVALUE

    OBJECTS s = stock FIXED PANEL
    PROPERTIES(s) SELECTOR name

    OBJECTS pt = priceListType
    PROPERTIES(pt) READONLY objectClassName, name, nameCurrencyPriceListType
    PROPERTIES() TODRAW pt FORCE PANEL addDataPriceListType, addCalcPriceListType
    PROPERTIES(pt) editPriceListType, delete
    ORDER BY objectClassName

    OBJECTS p = userPriceList
    PROPERTIES(p) READONLY seriesNumberObject, dateUserPriceList, timeUserPriceList, fromDateUserPriceList, fromTimeUserPriceList,
                           toDateUserPriceList, toTimeUserPriceList, nameCurrencyUserPriceList, noteUserPriceList
    PROPERTIES(p) EDITFORM, delete
    ORDER BY fromDateUserPriceList, fromTimeUserPriceList
    FILTERS inPriceListDataPriceListType(p, pt),
            inPriceListStockOver(p, s)

    TREE skuTree sg = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = name(sg)
    ORDER BY skuTreeName

    OBJECTS sk = sku
    PROPERTIES(sk) READONLY nameSku, idBarcodeSku
    PROPERTIES(sk, s, dt) READONLY balanceASkuStockDateTime
    ORDER BY nameSku
    FILTERS isParentSkuGroupSku(sg, sk)

    TREE skuTree2 sg2 = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName2 = name(sg2)
    ORDER BY skuTreeName2

    OBJECTS b = batch
    PROPERTIES(b) READONLY isPostedBatch, dateBatch, timeBatch, nameSkuBatch, nameStockBatch, descriptionBatch, costBatch
    PROPERTIES(b, s, dt) READONLY balanceABatchStockDateTime
    ORDER BY dateBatch, timeBatch
    FILTERGROUP filters
        FILTER 'Проведенные партии' 'F10' isPostedBatch(b) DEFAULT
    FILTERS isParentSkuGroupBatch(sg2, b)

    PROPERTIES(pt, sk, s, dt) READONLY pricePriceListTypeSkuStockDateTime, nameCompanyLedgerPriceListTypeSkuStockDateTime, descriptionLedgerPriceListTypeSkuStockDateTime
    PROPERTIES(pt, b, s, dt) READONLY pricePriceListTypeBatchStockDateTime, nameCompanyLedgerPriceListTypeBatchStockDateTime, descriptionLedgerPriceListTypeBatchStockDateTime
    FILTERS pricePriceListTypeSkuStockDateTime(pt, sk, s, dt),
            pricePriceListTypeBatchStockDateTime(pt, b, s, dt)
;
@extendFormFilterStockAccess(stock, s, priceListTypes);

DESIGN priceListTypes FROM DEFAULT{
    NEW mainContainer{
        type = SPLITV;
        ADD pt.box;
        NEW firstContainer{
            fillVertical = 2.0;
            ADD s.box;
            NEW tabContainer{
                type = TABBED;
                ADD p.box{
                    caption = 'Прайсы';
                }
                NEW priceContainer{
                    caption = 'Текущие цены';
                    childConstraints = TO THE BOTTOM;
                    ADD dt.box;
                    NEW currentPriceContainer{
                        type = TABBED;
                        NEW skuContainer{
                            caption = 'Товары';
                            childConstraints = TO THE RIGHT;
                            type = SPLITH;
                            ADD skuTree.tree.box;
                            ADD sk.box{fillHorizontal = 2.0;}
                        }
                        NEW batchContainer{
                            caption = 'Партии';
                            childConstraints = TO THE RIGHT;
                            type = SPLITH;
                            ADD skuTree2.tree.box;
                            ADD b.box{fillHorizontal = 2.0;}
                        }
                    }
                }
            }
        }
    }
    ADD functions.box;
}

addUserPriceListLegalEntity 'Добавить' = ACTION (legalEntity) {

    FOR ADDOBJ u = userPriceList DO {
        SET companyUserPriceList(u) <- legalEntity;
        FORM userPriceList OBJECTS p = u DOCKED_MODAL;
        IF TRUE AND NOT formResult() == formResult.ok THEN {
            EXEC delete(u);
        }
    }
} TOOLBAR;

EXTEND FORM legalEntity

    OBJECTS p = userPriceList
    PROPERTIES(p) READONLY objectClassName, numberObject, seriesObject, fromDateTimeUserPriceList, toDateTimeUserPriceList,
                           nameCurrencyUserPriceList, nameCompanyUserPriceList, noteUserPriceList, priceListTypesPriceList,
                           stocksPriceList
    PROPERTIES addUserPriceListLegalEntity(l) TODRAW p FORCE PANEL
    PROPERTIES(p) EDITSESSIONFORM, delete FORCE PANEL DRAWTOTOOLBAR
    FILTERS companyUserPriceList(p) == l
;

EXTEND DESIGN legalEntity{

    extendContainer {
        ADD p.box{caption = 'Прайсы';}
    }
}


NAVIGATOR {
    NEW priceListNavigator 'Цены' BEFORE masterData TO toolbar IMAGE '/images/label.png' {
        NEW priceListDocuments 'Документы' {
            ADD userPriceLists;
        }
        NEW priceListMasterData 'Справочники' {
            ADD priceListTypes;
            ADD priceIntervals;
        }
    }
}

// ---------------------- Макросы по добавлению видов цен в документы ------------------------------------ //

META defineDocumentHeaderPriceListType (object, type, prefix, caption)
    prefix###type###object (object) = DATA type (object);
    name###prefix###type###object 'Вид цен'###caption (object)= name(prefix###type###object(object)) IN documentPrmGroup MINCHARWIDTH 5 PREFCHARWIDTH 10;
END
META defineDocumentAbstractHeaderPriceListType (object, type, prefix, caption)
    prefix###type###object (object) = ABSTRACT type (object) PERSISTENT;
    name###prefix###type###object 'Вид цен'###caption (object)= name(prefix###type###object(object)) IN documentPrmGroup MINCHARWIDTH 5 PREFCHARWIDTH 10;
END
META defineDocumentInterfaceHeaderPriceListType (object, type, prefix, caption)
    @defineDocumentAbstractHeaderPriceListType(object, type, prefix, caption);
    @defineDocumentHeaderPriceListType(user###object, type, prefix, caption);
    prefix###type###object (object) += prefix###type###user###object(object);
END

META defineDocumentHeaderPriceListType (object)
    @defineDocumentHeaderPriceListType(object, priceListType, ,);
END
META defineDocumentAbstractHeaderPriceListType (object)
    @defineDocumentAbstractHeaderPriceListType(object, priceListType, ,);
END
META defineDocumentInterfaceHeaderPriceListType (object)
    @defineDocumentInterfaceHeaderPriceListType(object, priceListType, ,);
END

//--
META defineDocumentDetailPriceListTypePrefix (object, detail, type, prefix, caption)
    prefix###type###detail = prefix###type###object(object###detail (detail));
    name###prefix###type###detail 'Вид цен'###caption (idetail) = name(prefix###type###detail(idetail)) MINCHARWIDTH 10 PREFCHARWIDTH 20;
END
//--

META defineDocumentDetailPriceListType (object, detail, type, prefix, caption)
    prefix###type###detail =  DATA type (detail);
    name###prefix###type###detail 'Вид цен'###caption (idetail) = name(prefix###type###detail(idetail)) MINCHARWIDTH 10 PREFCHARWIDTH 20;
END

META defineDocumentAbstractDetailPriceListType (object, detail, type, prefix, caption)
    prefix###type###detail =  ABSTRACT type (detail) PERSISTENT;
    name###prefix###type###detail 'Вид цен'###caption (idetail) = name(prefix###type###detail(idetail)) MINCHARWIDTH 10 PREFCHARWIDTH 20;
END

META defineDocumentPriceListType (object, detail, type, prefix, caption)
    @defineDocumentHeaderPriceListType(object, type, prefix, caption);
    @defineDocumentDetailPriceListType(object, detail, type, prefix, caption);
END
META defineDocumentPriceListType (object, type, prefix, caption)
    @defineDocumentPriceListType(object, object##Detail, type, prefix, caption);
END

META defineDocumentInterfaceDetailPriceListType (object, detail, type, prefix, caption)
    @defineDocumentAbstractDetailPriceListType(object, detail, type, prefix, caption);
    @defineDocumentDetailPriceListType(user###object, user###detail, type, prefix, caption);
    prefix###type###detail (detail) += prefix###type###user###detail (detail);
END

META defineDocumentInterfaceDetailPriceListType (object, type, prefix, caption)
    @defineDocumentInterfaceDetailPriceListType(object, object##Detail, type, prefix, caption);
END

META defineDocumentInterfacePriceListType (object, detail, type, prefix, caption)
    @defineDocumentInterfaceHeaderPriceListType(object, type, prefix, caption);
    @defineDocumentInterfaceDetailPriceListType(object, detail, type, prefix, caption);

    CONSTRAINT currency###user###object(object) != currencyPriceListType(prefix###type###user###object(object))
               CHECKED BY prefix###type###user###object
               MESSAGE 'Валюта документа должна совпадать с валютой вида цены';

    CONSTRAINT currency###user###object(object) != currencyPriceListType(prefix###type###user###detail(detail))
               CHECKED BY prefix###type###user###detail
               MESSAGE 'Валюта документа должна совпадать с валютой вида цены';
END
META defineDocumentInterfacePriceListType (object, type, prefix, caption)
    @defineDocumentInterfacePriceListType(object, object##Detail, type, prefix, caption);
END

//--
META defineDocumentDetailPriceListType (object, detail)
    @defineDocumentDetailPriceListType(object, detail, priceListType, , );
END

META defineDocumentAbstractDetailPriceListType (object, detail)
    @defineDocumentAbstractDetailPriceListType(object, detail, priceListType, , );
END

META defineDocumentPriceListType (object, detail)
    @defineDocumentPriceListType (object, detail, priceListType, , );
END
META defineDocumentPriceListType (object)
    @defineDocumentPriceListType(object, object##Detail);
END

META defineDocumentInterfaceDetailPriceListType (object, detail)
    @defineDocumentInterfaceDetailPriceListType (object, detail, priceListType, , );
END

META defineDocumentInterfaceDetailPriceListType (object)
    @defineDocumentInterfaceDetailPriceListType(object, object##Detail);
END

META defineDocumentInterfacePriceListType (object, detail)
    @defineDocumentInterfacePriceListType (object, detail, priceListType, , );
END
META defineDocumentInterfacePriceListType (object)
    @defineDocumentInterfacePriceListType(object, object##Detail);
END

// ----------------------------------------------- Автоматическое проставление

META deriveDocumentDetailPricePriceListTypeCustom (detail, stockProp)
    price###detail(detail) <- prevPricePriceListTypeSkuStockDateTime(priceListType###detail(detail),
                                                                     sku###detail(detail),
                                                                     stockProp###detail(detail),
                                                                     dateTime###detail(detail))
                                    WHEN CHANGED(priceListType###detail(detail)) OR
                                         CHANGED(sku###detail(detail)) OR
                                         CHANGED(stockProp###detail(detail)) OR
                                         CHANGED(dateTime###detail(detail));
END

META deriveDocumentDetailPricePriceListType (object, stockProp)
    @deriveDocumentDetailPricePriceListTypeCustom(object##Detail, stockProp);
END

META deriveDocumentDetailPricePriceListTypeVATCustom (detail, stockProp)
    prevListSkuPrice###detail (detail) = prevPricePriceListTypeSkuStockDateTime(priceListType###detail(detail),
                                                                                sku###detail(detail),
                                                                                stockProp###detail(detail),
                                                                                dateTime###detail(detail));

    prevListSkuPriceMVAT###detail (detail) =
        IF includeVATPriceListType(priceListType###detail(detail))
            THEN
                prevListSkuPrice###detail(detail) * 100.0 /(100.0 + valueVAT###detail(detail))
            ELSE
                prevListSkuPrice###detail(detail);

    prevListSkuPricePVAT###detail (detail) =
        IF includeVATPriceListType(priceListType###detail(detail))
            THEN
                prevListSkuPrice###detail(detail)
            ELSE
                prevListSkuPrice###detail(detail) * (100.0 + valueVAT###detail(detail)) / 100.0;

    price###detail(detail) <- prevListSkuPriceMVAT###detail (detail)
                            WHEN priceListType###detail(detail) AND
                                 (CHANGED(priceListType###detail(detail)) OR
                                 CHANGED(sku###detail(detail)) OR
                                 CHANGED(stockProp###detail(detail)) OR
                                 CHANGED(dateTime###detail(detail)) OR
                                 CHANGED(valueVAT###detail(detail)));

    invoice###price###detail(detail) <- prevListSkuPricePVAT###detail (detail)
                            WHEN priceListType###detail(detail) AND
                                 (CHANGED(priceListType###detail(detail)) OR
                                 CHANGED(sku###detail(detail)) OR
                                 CHANGED(stockProp###detail(detail)) OR
                                 CHANGED(dateTime###detail(detail)) OR
                                 CHANGED(valueVAT###detail(detail)));

END

META deriveDocumentDetailPricePriceListTypeVAT (object, stockProp)
    @deriveDocumentDetailPricePriceListTypeVATCustom (object##Detail, stockProp);
END

META deriveDocumentDetailPriceBatchPriceListTypeCustom (detail, stockProp)
    price###detail(detail) <- IF batch###detail(detail) THEN
                                    prevPricePriceListTypeBatchStockDateTime(priceListType###detail(detail),
                                                                             batch###detail(detail),
                                                                             stockProp###detail(detail),
                                                                             dateTime###detail(detail))
                              ELSE
                                    prevPricePriceListTypeSkuStockDateTime(priceListType###detail(detail),
                                                                           sku###detail(detail),
                                                                           stockProp###detail(detail),
                                                                           dateTime###detail(detail))
                                    WHEN priceListType###detail(detail) AND
                                        (CHANGED(batch###detail(detail)) OR
                                         CHANGED(priceListType###detail(detail)) OR
                                         CHANGED(sku###detail(detail)) OR
                                         CHANGED(stockProp###detail(detail)) OR
                                         CHANGED(dateTime###detail(detail)));
END

META deriveDocumentDetailPriceBatchPriceListType (object, stockProp)
    @deriveDocumentDetailPriceBatchPriceListTypeCustom(object##Detail, stockProp);
END

META deriveDocumentDetailPricePriceListTypeVATBatchCustom (detail, stockProp)
    prevListSkuPrice###detail (priceListType, detail) = prevPricePriceListTypeSkuStockDateTime(priceListType,
                                                                                               sku###detail(detail),
                                                                                               stockProp###detail(detail),
                                                                                               dateTime###detail(detail));
    prevListBatchPrice###detail (priceListType, detail) = prevPricePriceListTypeBatchStockDateTime(priceListType,
                                                                                                   batch###detail(detail),
                                                                                                   stockProp###detail(detail),
                                                                                                   dateTime###detail(detail));
    prevListPrice###detail (priceListType, detail) = IF batch###detail(detail) THEN prevListBatchPrice###detail(priceListType, detail) ELSE prevListSkuPrice###detail (priceListType, detail);

    prevListPriceMVAT###detail (priceListType, detail) =
        IF includeVATPriceListType(priceListType)
            THEN
                prevListPrice###detail(priceListType, detail) * 100.0 /(100.0 + valueVAT###detail(detail))
            ELSE
                prevListPrice###detail(priceListType, detail);

    prevListPricePVAT###detail (priceListType, detail) =
        IF includeVATPriceListType(priceListType)
            THEN
                prevListPrice###detail(priceListType, detail)
            ELSE
                prevListPrice###detail(priceListType, detail) * (100.0 + valueVAT###detail(detail)) / 100.0;

//    price###detail(detail) <- prevListPriceMVAT###detail (detail)
//                            WHEN priceListType###detail(detail) AND
//                                (CHANGED(priceListType###detail(detail)) OR
//                                 CHANGED(batch###detail(detail)) OR
//                                 CHANGED(sku###detail(detail)) OR
//                                 CHANGED(stockProp###detail(detail)) OR
//                                 CHANGED(dateTime###detail(detail)) OR
//                                 CHANGED(valueVAT###detail(detail)));
//
//    invoicePrice###detail(detail) <- prevListPricePVAT###detail (detail)
//                            WHEN priceListType###detail(detail) AND
//                                (CHANGED(priceListType###detail(detail)) OR
//                                 CHANGED(batch###detail(detail)) OR
//                                 CHANGED(sku###detail(detail)) OR
//                                 CHANGED(stockProp###detail(detail)) OR
//                                 CHANGED(dateTime###detail(detail)) OR
//                                 CHANGED(valueVAT###detail(detail)));

    ON SESSION PREVSTART pricePriceListTypeSkuStockDateTime, pricePriceListTypeBatchStockDateTime { // цены берем на начало сессии, а не этого event'а
        LOCAL changedPriceListType = BOOLEAN (detail);
        SET changedPriceListType(detail) <- TRUE IF priceListType###detail(detail) AND
                                                    skuUserInvoiceDetail(detail) AND
                                            (CHANGED(priceListType###detail(detail)) OR
                                             CHANGED(batch###detail(detail)) OR
                                             CHANGED(sku###detail(detail)) OR
                                             CHANGED(stockProp###detail(detail)) OR
                                             CHANGED(dateTime###detail(detail)) OR
                                             CHANGED(valueVAT###detail(detail)));

        FOR [GROUP MAX(changedPriceListType(detail)) BY priceListType###detail(detail)](priceListType) DO {
            IF 1 == 2 THEN BREAK; // чтобы не компилировала в один запрос, а выполняло императивно
            SET price###detail(detail) <- prevListPriceMVAT###detail (priceListType, detail)
                WHERE changedPriceListType(detail) AND priceListType###detail(detail) == priceListType;
            SET invoicePrice###detail(detail) <- prevListPricePVAT###detail (priceListType, detail)
                WHERE changedPriceListType(detail) AND priceListType###detail(detail) == priceListType;
        }
    }

END

META deriveDocumentDetailPricePriceListTypeVATBatch (object, stockProp)
    @deriveDocumentDetailPricePriceListTypeVATBatchCustom (object##Detail, stockProp);
END

// Системные ledger'ы
META deriveDocumentDetailPriceSystemLedgerPriceListType (concrete, priceListTypeProp, prefixP, skuProp, stockProp)
    prefixP###price###concrete##Detail (detail)  <- prevPricePriceListTypeSkuStockDateTime(systemLedgerPriceListType.##priceListTypeProp,
                                                                                           skuProp###concrete##Detail(detail),
                                                                                           stockProp###concrete##Detail(detail),
                                                                                           dateTime###concrete##Detail(detail))
                                                    WHEN CHANGED(skuProp###concrete##Detail(detail)) OR
                                                         CHANGED(stockProp###concrete##Detail(detail)) OR
                                                         CHANGED(dateTime###concrete##Detail(detail));
END

META deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, prefixP, prefixB, skuProp, stockProp)
    prefixP###price###concrete##Detail (detail)  <- IF prefixB###batch###concrete##Detail(detail)

                                                    THEN prevPricePriceListTypeBatchStockDateTime (systemLedgerPriceListType.##priceListTypeProp,
                                                                                               prefixB###batch###concrete##Detail(detail),
                                                                                               stockProp###concrete##Detail(detail),
                                                                                               dateTime###concrete##Detail(detail))
                                                    ELSE prevPricePriceListTypeSkuStockDateTime(systemLedgerPriceListType.##priceListTypeProp,
                                                                                           prefixB###skuProp###concrete##Detail(detail),
                                                                                           stockProp###concrete##Detail(detail),
                                                                                           dateTime###concrete##Detail(detail))
                                                    WHEN CHANGED(prefixB###skuProp###concrete##Detail(detail)) OR
                                                         CHANGED(stockProp###concrete##Detail(detail)) OR
                                                         CHANGED(dateTime###concrete##Detail(detail)) OR
                                                         CHANGED(prefixB###batch###concrete##Detail(detail));
END

META deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, prefixP, skuProp, stockProp)
    @deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, prefixP, , skuProp, stockProp);
END

// ----------------------------- Action'ы для ON CHANGE ------------------------- //

// Изменение цены без НДС
META defineDocumentDetailPriceVATOnChangeCustom (detail)
    changePrice###detail (detail) = ACTION (detail) {
        REQUEST NUMERIC[14,3] INPUT;
        IF requestedNumeric() THEN {
            IF rangeTypeRange(VAT###detail(detail)) == rangeType.units THEN {
                SET price###detail (detail) <- requestedNumeric();
                SET invoicePrice###detail (detail) <- price###detail (detail) * 100 /(100 - valueVAT###detail(detail));
            } ELSE {
                SET price###detail (detail) <- requestedNumeric();
                SET invoicePrice###detail (detail) <- price###detail (detail) * (100 + valueVAT###detail(detail))/100;
            }
        }
    }
END

META defineDocumentDetailPriceVATOnChange (object)
    @defineDocumentDetailPriceVATOnChangeCustom(object###Detail);
END

// Изменение щкалы НДС
META defineDocumentDetailNumberVATOnChangeCustom (detail, stockProp)
    changeNumberVAT###detail (detail) = ACTION (detail) {
        FORM rangeDialog OBJECTS c = country###stockProp###detail(detail) MODAL;
        IF formResult() == formResult.ok THEN {
            IF rangeTypeRange(chosenObject('r')) == rangeType.units THEN {
                SET VAT###detail (detail) <- chosenObject('r');
                SET invoicePrice###detail (detail) <- price###detail (detail) * 100 /(100 - valueVAT###detail(detail));
            } ELSE {
                SET VAT###detail (detail) <- chosenObject('r');
                SET invoicePrice###detail (detail) <- price###detail (detail) * (100 + valueVAT###detail(detail))/100;
            }
        }
    }
END

META defineDocumentDetailNumberVATOnChange (object, stockProp)
    @defineDocumentDetailNumberVATOnChangeCustom(object###Detail, stockProp);
END

// Изменение ставки НДС
META defineDocumentDetailValueVATOnChangeCustom (detail)
    changeValueVAT###detail (detail) = ACTION (detail) {
        REQUEST NUMERIC[10,5] INPUT;
        IF requestedNumeric() THEN {
            IF rangeTypeRange(VAT###detail(detail)) == rangeType.units THEN {
                SET valueVAT###detail (detail) <- requestedNumeric();
                SET invoicePrice###detail (detail) <- price###detail (detail) * 100 /(100 - requestedNumeric());
            } ELSE {
                SET valueVAT###detail (detail) <- requestedNumeric();
                SET invoicePrice###detail (detail) <- price###detail (detail) * (100 + requestedNumeric())/100;
            }
        }
    }
END

META defineDocumentDetailValueVATOnChange (object)
    @defineDocumentDetailValueVATOnChangeCustom(object###Detail);
END

// Изменение цены с НДС
META defineDocumentDetailInvoicePriceVATOnChangeCustom (detail)
    changeInvoicePrice###detail (detail) = ACTION (detail) {
        REQUEST NUMERIC[14,3] INPUT;
        IF requestedNumeric() THEN {
            IF rangeTypeRange(VAT###detail(detail)) == rangeType.units THEN {
                SET invoicePrice###detail (detail) <- requestedNumeric();
                SET price###detail (detail) <- invoicePrice###detail (detail) * (100-valueVAT###detail(detail))/100;
            } ELSE {
                SET invoicePrice###detail (detail) <- requestedNumeric();
                SET price###detail (detail) <- invoicePrice###detail (detail) * 100/(100 + valueVAT###detail(detail));
            }
        }
    }
END

META defineDocumentDetailInvoicePriceVATOnChange (object)
    @defineDocumentDetailInvoicePriceVATOnChangeCustom(object###Detail);
END
