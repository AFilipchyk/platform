MODULE PriceListLedger;

REQUIRE PriceListType;

NAMESPACE PriceList;

CLASS ABSTRACT LedgerPriceListType 'Регистровый вид цены' : BasePriceListType;

nameLedgerPriceListType 'Наименование' = ABSTRACT ISTRING[50](LedgerPriceListType);
nameBasePriceListType(type) += nameLedgerPriceListType(type) IF type IS LedgerPriceListType;

batchLedgerPriceListType 'Использовать для партий свои цены' = ABSTRACT BOOLEAN (PriceListType) EXCLUSIVE PERSISTENT;

CLASS ABSTRACT PriceListLedger 'Изменение цены';
TABLE priceListLedger(PriceListLedger);

fromDateTimePriceListLedger = ABSTRACT DATETIME (PriceListLedger) PERSISTENT INDEXED;
toDateTimePriceListLedger = ABSTRACT DATETIME (PriceListLedger) PERSISTENT INDEXED;

isPostedPriceListLedger 'Проведен' (ledger) = ABSTRACT BOOLEAN (PriceListLedger) PERSISTENT;
skipPriceListLedger 'Не изменять значение' (ledger) = ABSTRACT BOOLEAN (PriceListLedger) PERSISTENT;

activePriceListLedger 'Активен' (ledger) = isPostedPriceListLedger(ledger) AND NOT skipPriceListLedger(ledger) PERSISTENT;

skuPriceListLedger = ABSTRACT Sku (PriceListLedger) PERSISTENT INDEXED;
batchPriceListLedger = ABSTRACT Batch (PriceListLedger) PERSISTENT INDEXED;

descriptionPriceListLedger = ABSTRACT STRING[200] (PriceListLedger) PERSISTENT;

companyPriceListLedger = ABSTRACT LegalEntity (PriceListLedger) PERSISTENT;

TABLE priceListLedgerLedgerPriceListType(PriceListLedger, LedgerPriceListType);
pricePriceListLedgerLedgerPriceListType = ABSTRACT NUMERIC[14,2] (PriceListLedger, LedgerPriceListType) PERSISTENT;

TABLE priceListLedgerStock(PriceListLedger, Stock);
inPriceListLedgerStock (ledger, stock) = ABSTRACT BOOLEAN (PriceListLedger, Stock);

orderPriceListLedger(ledger) = STRUCT(fromDateTimePriceListLedger(ledger), ledger) IF activePriceListLedger(ledger) PERSISTENT;

TABLE priceListLedgerLedgerPriceListTypeStock (PriceListLedger, LedgerPriceListType, Stock);
orderPriceListLedgerLedgerPriceListTypeStock(ledger, type, stock) =
    orderPriceListLedger(ledger) IF pricePriceListLedgerLedgerPriceListType(ledger, type) AND inPriceListLedgerStock(ledger, stock) PERSISTENT INDEXED;

concatLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    GROUP MAX orderPriceListLedgerLedgerPriceListTypeStock(ledger, type, stock)
              IF fromDateTimePriceListLedger(ledger) < (dateTimeIn AS DATETIME) AND NOT toDateTimePriceListLedger(ledger) <= (dateTimeIn AS DATETIME)
          BY type, skuPriceListLedger(ledger), stock, dateTimeIn;
priceListLedgerLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    concatLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)[2];

concatLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
    GROUP MAX orderPriceListLedgerLedgerPriceListTypeStock(ledger, type, stock)
              IF fromDateTimePriceListLedger(ledger) < (dateTimeIn AS DATETIME) AND NOT toDateTimePriceListLedger(ledger) <= (dateTimeIn AS DATETIME)
          BY type, batchPriceListLedger(ledger), stock, dateTimeIn;
priceListLedgerLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
    IF batchLedgerPriceListType(type) THEN concatLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime)[2]
                                      ELSE priceListLedgerLedgerPriceListTypeSkuStockDateTime(type, skuBatch(batch), stock, dateTime);

priceLedgerPriceListTypeSkuStockDateTime 'Цена' (type, sku, stock, dateTime) =
    pricePriceListLedgerLedgerPriceListType(priceListLedgerLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime), type);
priceLedgerPriceListTypeBatchStockDateTime 'Цена' (type, batch, stock, dateTime) =
    pricePriceListLedgerLedgerPriceListType(priceListLedgerLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime), type);

companyLedgerPriceListTypeSkuStockDateTime (type, sku, stock, dateTime) =
    companyPriceListLedger(priceListLedgerLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime));
nameCompanyLedgerPriceListTypeSkuStockDateTime 'Компания прайса' (type, sku, stock, dateTime) =
    nameLegalEntity(companyLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime));
companyLedgerPriceListTypeBatchStockDateTime (type, batch, stock, dateTime) =
    companyPriceListLedger(priceListLedgerLedgerPriceListTypeSkuStockDateTime(type, skuBatch(batch), stock, dateTime));
nameCompanyLedgerPriceListTypeBatchStockDateTime 'Компания прайса' (type, batch, stock, dateTime) =
    nameLegalEntity(companyLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime));

descriptionLedgerPriceListTypeSkuStockDateTime 'Описание' (type, sku, stock, dateTime) =
    descriptionPriceListLedger(priceListLedgerLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime));
descriptionLedgerPriceListTypeBatchStockDateTime 'Описание' (type, batch, stock, dateTime) =
    descriptionPriceListLedger(priceListLedgerLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime));

includeVATLedgerPriceListType 'Цена с НДС' = ABSTRACT BOOLEAN (LedgerPriceListType);

priceBasePriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime);
priceBasePriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime);

includeVATBasePriceListType(type) += includeVATLedgerPriceListType(type);

// ------ оптимизация для ассортиментов
ledgerPriceListTypePriceListType = ABSTRACT LedgerPriceListType (PriceListType) PERSISTENT;

ledgerPriceListTypePriceListType(type) += type AS LedgerPriceListType;

// --------------------------- Системные виды цен, на основе Ledger'ов ------------------ //

CLASS SystemLedgerPriceListType 'Системный вид цены (регистр)' {
    accountPriceListType 'Учетная'
}: LedgerPriceListType;

nameLedgerPriceListType (type) += staticCaption(type) IF type IS SystemLedgerPriceListType;

batchLedgerPriceListType(type) += type == SystemLedgerPriceListType.accountPriceListType;

includeVATSystemLedgerPriceListType 'Цена с НДС' = ABSTRACT BOOLEAN (SystemLedgerPriceListType) EXCLUSIVE;
includeVATLedgerPriceListType (type) += includeVATSystemLedgerPriceListType(type);

pricePriceListLedgerSystemLedgerPriceListType = ABSTRACT NUMERIC[14,2] (PriceListLedger, SystemLedgerPriceListType) EXCLUSIVE PERSISTENT;
pricePriceListLedgerLedgerPriceListType(ledger, type) += pricePriceListLedgerSystemLedgerPriceListType(ledger, type);

// --------------------------- Формы ---------------------------- //

EXTEND FORM priceListTypes
    PROPERTIES(pt, sk, s, dt) READONLY nameCompanyLedgerPriceListTypeSkuStockDateTime, descriptionLedgerPriceListTypeSkuStockDateTime
    PROPERTIES(pt, b, s, dt) READONLY nameCompanyLedgerPriceListTypeBatchStockDateTime, descriptionLedgerPriceListTypeBatchStockDateTime
;

// ----------------------------- Метакоды ------------------------ //

// Implement
META implementSystemLedgerPriceListType (type, object, stockProp, prefix)
    @implementSystemLedgerPriceListTypeInner (type, object, ###object, stockProp, prefix);
END

META implementSystemLedgerPriceListTypeInner (type, object, class, stockProp, prefix)
    EXTEND CLASS class : PriceListLedger;

    fromDateTimePriceListLedger (ledger) += dateTime###object(ledger);

    isPostedPriceListLedger(ledger) += isPosted###object(ledger);

    skuPriceListLedger (ledger) += sku###object(ledger);

    descriptionPriceListLedger (ledger) += description###object(ledger);

    pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += prefix###price###object(ledger) WHEN CLASS(prefix###price###object(ledger)) AND type == SystemLedgerPriceListType.##type##PriceListType;
    inPriceListLedgerStock (ledger, stock) += stockProp###object(ledger) == stock;
END

META implementSystemLedgerPriceListType (type, object, stockProp)
    @implementSystemLedgerPriceListType(type, object, stockProp, );
END

META implementSystemLedgerPriceListTypeBatch (type, object, stockProp)
    @implementSystemLedgerPriceListTypeBatchInner(type, object, ###object, stockProp);
END

META implementSystemLedgerPriceListTypeBatchInner (type, object, class, stockProp)
    @implementSystemLedgerPriceListType(type, object, stockProp);
    batchPriceListLedger (ledger) += ledger AS class;
END

// Derive
META deriveDocumentDetailPriceSystemLedgerPriceListType (concrete, priceListTypeProp, prefixP, skuProp, stockProp)
    prefixP###price###concrete##Detail (detail)  <- prevPricePriceListTypeSkuStockDateTime(SystemLedgerPriceListType.##priceListTypeProp,
                                                                                           skuProp###concrete##Detail(detail),
                                                                                           stockProp###concrete##Detail(detail),
                                                                                           dateTime###concrete##Detail(detail))
                                                    WHEN DO CHANGED(skuProp###concrete##Detail(detail)) OR
                                                         CHANGED(stockProp###concrete##Detail(detail)) OR
                                                         CHANGED(dateTime###concrete##Detail(detail));
END

META deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, prefixP, prefixB, skuProp, stockProp)
    prefixP###price###concrete##Detail (detail)  <- IF prefixB###batch###concrete##Detail(detail)

                                                    THEN prevPricePriceListTypeBatchStockDateTime (SystemLedgerPriceListType.##priceListTypeProp,
                                                                                               prefixB###batch###concrete##Detail(detail),
                                                                                               stockProp###concrete##Detail(detail),
                                                                                               dateTime###concrete##Detail(detail))
                                                    ELSE prevPricePriceListTypeSkuStockDateTime(SystemLedgerPriceListType.##priceListTypeProp,
                                                                                           prefixB###skuProp###concrete##Detail(detail),
                                                                                           stockProp###concrete##Detail(detail),
                                                                                           dateTime###concrete##Detail(detail))
                                                    WHEN DO CHANGED(prefixB###skuProp###concrete##Detail(detail)) OR
                                                         CHANGED(stockProp###concrete##Detail(detail)) OR
                                                         CHANGED(dateTime###concrete##Detail(detail)) OR
                                                         CHANGED(prefixB###batch###concrete##Detail(detail));
END

META deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, prefixP, skuProp, stockProp)
    @deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, prefixP, , skuProp, stockProp);
END
