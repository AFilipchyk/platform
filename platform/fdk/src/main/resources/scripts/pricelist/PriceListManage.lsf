MODULE PriceListManage;

REQUIRE PriceList;

NAMESPACE PriceList;

//Фильтры

filterLegalEntityRangeManagement = DATA SESSION LegalEntity ();
nameFilterLegalEntityRangeManagement 'Организация' () = nameLegalEntity(filterLegalEntityRangeManagement());
filterLegalEntityRangeManagementUserPriceList (userPriceList) = (companyUserPriceList(userPriceList) == filterLegalEntityRangeManagement()) OR
                                                                (userPriceList IS UserPriceList AND NOT filterLegalEntityRangeManagement());

filterCompanySkuDateTimeRangeManagement (priceListType, sku, stock, dateTime) =
    (companyLedgerPriceListTypeSkuStockDateTime(priceListType, sku, stock, dateTime) == filterLegalEntityRangeManagement()) OR
    (priceListType IS PriceListType AND sku IS Sku  AND stock IS Stock AND dateTime IS DATETIME AND NOT filterLegalEntityRangeManagement());

priceLedgerPriceListTypeSkuDateTimeFilterLegalEntity 'Цена' (priceListType, sku, dateTime) =
    priceLedgerPriceListTypeSkuCompanyDateTime(priceListType, sku, filterLegalEntityRangeManagement(), dateTime);

nameCompanyLedgerPriceListTypeSkuDateTimeFilterLegalEntity 'Компания прайса' (priceListType, sku, dateTime) =
    nameCompanyLedgerPriceListTypeSkuCompanyDateTime(priceListType, sku, filterLegalEntityRangeManagement(), dateTime);

descriptionLedgerPriceListTypeSkuDateTimeFilterLegalEntity 'Описание' (priceListType, sku, dateTime) =
    descriptionLedgerPriceListTypeSkuCompanyDateTime(priceListType, sku, filterLegalEntityRangeManagement(), dateTime);

showNameCompanyLedger() = TRUE AND NOT nameFilterLegalEntityRangeManagement();
//Создание прайса через форму ассортимента

inRangeManagement 'Отм.' = DATA SESSION BOOLEAN(Sku);

createPriceRangeManagement 'Создать прайс' = ACTION (dataPriceListType) NEWSESSION{
    FOR ADDOBJ u = UserPriceList DO {
        SET fromDateUserPriceList(u) <- currentDate();
        SET fromTimeUserPriceList(u) <- currentTime();
        SET companyUserPriceList(u) <- filterLegalEntityRangeManagement();
        SET currencyUserPriceList(u) <- currencyLegalEntity(filterLegalEntityRangeManagement());
        SET inUserPriceListDataPriceListType(u, dataPriceListType) <- TRUE;
        SET showUserPriceListPriceListType(u, dataPriceListType) <- TRUE;
        FOR inRangeManagement(sku) ADDOBJ d = UserPriceListDetail DO {
            SET skuUserPriceListDetail(d) <- sku AS Sku;
            SET userPriceListUserPriceListDetail(d) <- u AS UserPriceList;
        }
        FORM userPriceList OBJECTS p = u DOCKEDMODAL;
        IF TRUE IF NOT formResult() == FormResult.ok THEN {
            //FOR userPriceListUserPriceListDetail(detail) == u DO {
            DELETE detail WHERE userPriceListUserPriceListDetail(detail) == u;
            //}
            DELETE u;
        }
    }
} TOOLBAR;

FORM rangeManagement 'Управление ценами'
    OBJECTS dt = DATETIME FIXED PANEL
    PROPERTIES(dt) objValue = OBJVALUE

    OBJECTS pt = DataPriceListType FIXED PANEL
    PROPERTIES(pt) SELECTOR namePriceListType

    PROPERTIES() nameFilterLegalEntityRangeManagement

    OBJECTS p = UserPriceList
    PROPERTIES(p) READONLY isPostedUserPriceList FORCE GRID, numberObject, seriesObject, dateUserPriceList, timeUserPriceList,
                           fromDateUserPriceList, fromTimeUserPriceList, toDateUserPriceList, toTimeUserPriceList,
                           nameCurrencyUserPriceList, nameCompanyUserPriceList, priceListTypesPriceList, stocksPriceList,
                           noteUserPriceList, objectClassName
    PROPERTIES(p) EDITFORM, DELETE, updatePriceList FORCE PANEL TOOLBAR
    ORDER BY fromDateUserPriceList, fromTimeUserPriceList
    FILTERS filterLegalEntityRangeManagementUserPriceList(p),
            inPriceListDataPriceListType(p, pt)

    TREE skuTree sg = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = nameSkuGroup(sg)
    ORDER BY skuTreeName

    TREE stockTree a=STRING[3], stg = StockGroup PARENT parentStockGroup
    PROPERTIES READONLY OBJVALUE(a), stTreeName = nameStockGroup(stg)
    ORDER BY stTreeName
    FILTERS stringEqualsAll(a), quantityStocksStockGroup(stg)

    OBJECTS sm = (sk = Sku, s = Stock)
    PROPERTIES(sk) inRangeManagement
    PROPERTIES(s) READONLY nameStock
    PROPERTIES(sk) READONLY nameSku, idBarcodeSku
    PROPERTIES(sk, s, dt) READONLY balanceASkuStockDateTime
    PROPERTIES createPriceRangeManagement(pt) TODRAW sk FORCE PANEL
    ORDER BY nameSku(sk)
    FILTERS isParentSkuGroupSku(sg, sk),
            s IS Stock AND NOT stg IS StockGroup OR isParentStockGroupStock(stg, s),
            isCompanyStock(s)

    PROPERTIES(pt, sk, s, dt) READONLY pricePriceListTypeSkuStockDateTime, nameCompanyLedgerPriceListTypeSkuStockDateTime SHOWIF showNameCompanyLedger(),
                                       descriptionLedgerPriceListTypeSkuStockDateTime

    FILTERS pricePriceListTypeSkuStockDateTime(pt, sk, s, dt),
            filterCompanySkuDateTimeRangeManagement(pt, sk, s, dt)

    TREE skuTree2 sg2 = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName2 = nameSkuGroup(sg2)
    ORDER BY skuTreeName2

    OBJECTS sk2 = Sku
    PROPERTIES(sk2) inRangeManagement
    PROPERTIES(sk2) READONLY nameSku, idBarcodeSku
    PROPERTIES createPriceRangeManagement(pt) TODRAW sk2 FORCE PANEL
    ORDER BY nameSku(sk2)
    PROPERTIES(pt, sk2, dt) READONLY priceLedgerPriceListTypeSkuDateTime SHOWIF showNameCompanyLedger(),
                                     nameCompanyLedgerPriceListTypeSkuDateTime SHOWIF showNameCompanyLedger(),
                                     descriptionLedgerPriceListTypeSkuDateTime SHOWIF showNameCompanyLedger(),
                                     priceLedgerPriceListTypeSkuDateTimeFilterLegalEntity SHOWIF filterLegalEntityRangeManagement(),
//                                     nameCompanyLedgerPriceListTypeSkuDateTimeFilterLegalEntity SHOWIF filterLegalEntityRangeManagement(),
                                     descriptionLedgerPriceListTypeSkuDateTimeFilterLegalEntity SHOWIF filterLegalEntityRangeManagement()
    FILTERS isParentSkuGroupSku(sg2, sk2),
            IF filterLegalEntityRangeManagement()
                THEN priceLedgerPriceListTypeSkuDateTimeFilterLegalEntity(pt, sk2, dt)
                ELSE priceLedgerPriceListTypeSkuDateTime(pt, sk2, dt)

    OBJECTS s2 = Stock
    PROPERTIES(s2) READONLY nameStock
    PROPERTIES(sk2, s2, dt) READONLY balanceASkuStockDateTime
    ORDER BY nameStock
    FILTERS isCompanyStock(s),
            priceLedgerPriceListTypeSkuStockDateTime(pt, sk2, s2, dt)
//            balanceASkuStockDateTime(sk2, s2, dt)
;

DESIGN rangeManagement FROM DEFAULT{
    NEW mainContainer{
        NEW topContainer{
            childConstraints = TO THE RIGHTBOTTOM;
            ADD dt.box;
            NEW filtersContainer{
                caption = 'Фильтры';
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(namePriceListType(pt)){caption ='Вид цены';}
                ADD PROPERTY(nameFilterLegalEntityRangeManagement);
            }
        }
        NEW firstContainer{
            NEW tabContainer{
                type = TABBED;
                NEW skuContainer{
                    caption = 'Товары';
                    childConstraints = TO THE BOTTOM;
                    type = SPLITV;
                    NEW firstSkuContainer{
                        fillVertical = 2.0;
                        childConstraints = TO THE RIGHT;
                        type = SPLITH;
                        ADD skuTree2.tree.box{caption = 'Товарные группы';}
                        ADD sk2.box{
                            caption = 'Товары';
                            fillHorizontal = 2.0;
                        }
                    }
                    NEW secondSkuContainer{
                        childConstraints = TO THE RIGHT;
                        ADD s2.box{caption = 'Склады';}
                    }
                }
                NEW priceContainer{
                    caption = 'Товары/Магазины';
                    childConstraints = TO THE RIGHT;
                    type = SPLITH;
                    NEW treeContainer{
                        type = SPLITV;
                        ADD skuTree.tree.box{caption = 'Товарные группы';}
                        ADD stockTree.tree.box{caption = 'Группы складов';}
                    }
                    ADD sm.box{
                        caption = 'Товары';
                        fillHorizontal = 2.0;
                        PROPERTY(pricePriceListTypeSkuStockDateTime){caption = 'Текущая цена';}
                    }
                }
                ADD p.box{
                    caption = 'Прайсы';
                }
            }
        }
    }
    ADD functions.box;
}

NAVIGATOR {
    priceListDocuments {
        ADD rangeManagement FIRST;
    }
}