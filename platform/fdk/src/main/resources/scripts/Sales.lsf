MODULE Sales;

REQUIRE BaseLogicsModule, Stock, Tax;

CLASS ABSTRACT salesLedger 'Продажа товара' : balanceSkuLedger;
TABLE salesLedger(salesLedger);

dateTimeSalesLedger 'Дата/время' (ledger) = ABSTRACT DATETIME (salesLedger) PERSISTENT INDEXED;
dateSalesLedger 'Дата' (ledger) = dateInTime(dateTimeSalesLedger(ledger)) PERSISTENT INDEXED;

isPostedSalesLedger 'Закрыт' (ledger) = ABSTRACT BOOLEAN (salesLedger) PERSISTENT;

skuSalesLedger (ledger) = ABSTRACT sku (salesLedger) PERSISTENT INDEXED;
nameSkuSalesLedger 'SKU' (ledger) = nameSku(skuSalesLedger(ledger));

stockSalesLedger (ledger) = ABSTRACT stock (salesLedger) PERSISTENT INDEXED;
nameStockSalesLedger 'Склад' (ledger) = name(stockSalesLedger(ledger));

descriptionSalesLedger 'Название документа' (ledger) = ABSTRACT STRING[200] (salesLedger);

quantitySalesLedger 'Кол-во' (ledger) = ABSTRACT NUMERIC[14,3] (salesLedger) PERSISTENT;

sumSalesLedger 'Сумма продажи' (ledger) = ABSTRACT NUMERIC[16,2] (salesLedger) PERSISTENT;

VATSalesLedger (ledger) = ABSTRACT range (salesLedger) PERSISTENT;
valueVATSalesLedger 'НДС, %' (ledger) = valueRateRangeDate(VATSalesLedger(ledger), dateSalesLedger(ledger));

sumVATSalesLedger 'Сумма НДС' (ledger) = [X*Y/(100+Y)](
        sumSalesLedger(ledger), valueVATSalesLedger(ledger));

markupSumSalesLedger 'Надбавка' (ledger) = sumSalesLedger(ledger) - sumVATSalesLedger(ledger) - supplierSumBalanceSkuLedger(ledger);

quantitySoldSkuStockDateFromTo 'Продано за интервал (кол-во)' (sku, stock, dateFrom, dateTo) = GROUP SUM
        quantitySalesLedger(ledger) AND dateSalesLedger(ledger) >= (dateFrom AS DATE) AND dateSalesLedger(ledger) <= (dateTo AS DATE)
        BY skuSalesLedger(ledger), stockSalesLedger(ledger), dateFrom, dateTo;

sumSoldSkuStockDateFromTo 'Продано за интервал (сумма)' (sku, stock, dateFrom, dateTo) = GROUP SUM
        sumSalesLedger(ledger) AND dateSalesLedger(ledger) >= (dateFrom AS DATE) AND dateSalesLedger(ledger) <= (dateTo AS DATE)
        BY skuSalesLedger(ledger), stockSalesLedger(ledger), dateFrom, dateTo;

skuStockAverageInterval 'Интервал расчета продаж в день' = DATA INTEGER ();

averageSoldSkuStock 'Продаж в день' = DATA NUMERIC[14,3] (sku, stock);

calcQuantitySoldInterval = ACTION (dateFrom, dateTo) {
    LOCAL balance = NUMERIC[14,3] (sku, stock);
    LOCAL days = INTEGER (sku, stock);
    LOCAL dateCur = DATE();

    SET dateCur() <- (dateFrom AS DATE);
    SET balance(sku, stock) <- balanceBSkuLedgerDate(sku, stock, dateFrom);

    WHILE dateCur() <= (dateTo AS DATE) DO {
        SET days(sku, stock) <- days(sku, stock) (+)
                   (1 IF ((balance(sku, stock) > 0) OR (quantitySkuStockDate(sku, stock, dateCur()) > 0)));
        SET balance(sku, stock) <- balance(sku, stock) (+)
                   signedQuantitySkuStockDate(sku, stock, dateCur());
        SET dateCur() <- sumDate(dateCur(), 1);
    }

    SET averageSoldSkuStock(sku, stock) <- quantitySoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo) / days(sku, stock);
}
calcCurrentQuantitySoldInterval 'Пересчитать однодневные продажи' = ACTION () NEWSESSION AUTOAPPLY {
    EXEC calcQuantitySoldInterval(subtractDate(currentDate(), skuStockAverageInterval()), subtractDate(currentDate(), 1));
}

//---------------------------------------------- Формы продаж -------------------------------------//

FORM salesLedger 'Продажи по позициям'

    OBJECTS (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES OBJVALUE(dFrom), OBJVALUE(dTo)

    OBJECTS s = salesLedger
    PROPERTIES(s) READONLY dateSalesLedger, dateTimeSalesLedger, nameStockSalesLedger, nameSkuSalesLedger, descriptionSalesLedger,
                           quantitySalesLedger, supplierSumBalanceSkuLedger, markupSumSalesLedger, sumVATSalesLedger, sumSalesLedger
    FILTERS isPostedSalesLedger(s)
    FILTERS dateSalesLedger(s) >= dFrom, dateSalesLedger(s) <= dTo
;

FORM salesSkuStock 'Продажи по SKU'

    OBJECTS dates = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES OBJVALUE(dFrom), OBJVALUE(dTo)

    TREE stockTree sg = stockGroup PARENT parentStockGroup
    PROPERTIES READONLY sgTreeName = name(sg)

    TREE skuTree sk = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = name(sk)
    ORDER BY skuTreeName

    OBJECTS           sts=(st=stock, s=sku)
    PROPERTIES        READONLY nameSku(s), stockName = name(st)  //  idBarcodeSku
    FILTERS           isParentSkuGroupSku(sk, s),
                      isParentStockGroupStock(sg, st)
    ORDER BY          nameSku

    PROPERTIES        balanceBSkuLedgerDate(s, st, dFrom),
                      quantitySoldSkuStockDateFromTo(s, st, dFrom, dTo),
                      balanceASkuLedgerDate(s, st, dTo)
;

DESIGN salesSkuStock FROM DEFAULT {

    main {
        NEW topContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            NEW firstCase {
                type = SPLITV;
                childConstraints = TO THE BOTTOM;

                ADD stockTree.box {title = 'Магазины';};
                ADD skuTree.box {title = 'Товарные группы';};
            }

            NEW secondCase {
                type = SPLITV;
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;

                ADD dates.box;
                ADD sts.box { fillVertical = 2; }
            }
        }
        ADD functions.box;
    }
}

//---------------------------------------------- Макросы для имплементаций -------------------------------------//

META implementSalesLedger(concrete, skuProp, stockProp)
    dateTimeSalesLedger (ledger) += dateTime###concrete##Detail(ledger);
    isPostedSalesLedger (ledger) += isPosted###concrete##Detail(ledger);
    skuSalesLedger (ledger) += skuProp###concrete##Detail(ledger);
    stockSalesLedger (ledger) += stockProp###concrete##Detail(ledger);
    descriptionSalesLedger (ledger) += description###concrete##Detail(ledger);
END

EXTEND FORM currentBalanceSkuStock PROPERTIES(s, st) averageSoldSkuStock;