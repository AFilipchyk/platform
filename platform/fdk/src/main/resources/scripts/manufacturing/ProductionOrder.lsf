MODULE  ProductionOrder;

REQUIRE Substitute, PriceList;
NAMESPACE Production;

// ---------------- Производственный заказ ------------------- //
CLASS order 'Производственный заказ' : historizable, numeratedObject;
CLASS orderPosted 'Проведенный производственный заказ' : order, postedObject;
TABLE order(order);

@defineDocumentHeaderTime(order);
@defineDocumentHeaderNote(order);

@defineNumeratedObjectDefault(order, 'Нумератор для производственного заказа', 'ПЗ');

@defineDocumentHeaderPosted (order);
@defineDocumentHeaderPriceListType (order, priceListType, , ' (потребность)');
@defineDocumentHeaderPriceListType (order, calcPriceListType, , ' (надбавка)');

@defineDocumentHeaderStock (order, stock, 'Склад сырья', components);
@defineDocumentHeaderStock (order, stock, 'Склад готовой продукции', goods);

@defineDocumentHeaderDatePrefix (order, from, ' действия с');
@defineDocumentHeaderDatePrefix (order, to, ' действия по');

@defineDocumentHeaderDescription(order, 'Производственный заказ');
@defineDocumentHeaderCurrency (order);
@deriveDocumentCurrency (order, componentsStock, currencyStock);

// ---------------- Изделие ------------------- //
CLASS productDetail 'Строка изделия' : named;
TABLE productDetail (productDetail);

@defineDocumentRelation (order, productDetail, );
@defineDocumentDetailIndex (order, productDetail);
@defineDocumentDetailActionsCustom (order, productDetail);
@defineDocumentDetailPosted (order, productDetail);
@defineDocumentDetailTime (order, productDetail);
@defineDocumentDetailDescription(order, productDetail);
@defineDocumentDetailDatePrefix (order, productDetail, from, ' действия с');
fromDateOrder(order) <- currentDate() WHEN ASSIGNED(order IS order);
@defineDocumentDetailDatePrefix (order, productDetail, to, ' действия по');

@defineDocumentDetailStock (order, productDetail, componentsStock, 'Склад сырья');
@defineDocumentDetailStock (order, productDetail, goodsStock, 'Склад готовой продукции');

@defineDocumentDetailQuantityCustom (productDetail);
@defineDocumentHeaderQuantityCustomPrefix (order, productDetail, , ' (изделие)');

@defineDocumentDetailSkuCustom (productDetail, sku);

productProductDetail = DATA product (productDetail);
nameProductProductDetail 'Изделие' (productDetail) = nameMaterial(productProductDetail(productDetail)) IN recognize;

UOMProductDetail = DATA UOM (productDetail);
shortNameUOMProductDetail 'Ед.изм.' (productDetail) = shortName(UOMProductDetail(productDetail)) IN recognize;
UOMProductDetail(productDetail) <-UOMProduct(productProductDetail(productDetail)) WHEN CHANGED (productProductDetail(productDetail));

CONSTRAINT skuProductDetail(productDetail) != skuProduct(productProductDetail(productDetail)) CHECKED BY productProductDetail
    MESSAGE 'Sku изделия и строки изделия не соответствуют друг другу';
currencyProductDetail (productDetail)= currencyOrder(orderProductDetail(productDetail));

@defineDocumentDetailPriceCustomPrefix (productDetail, components, ' компонентов');

componentsSumProductDetail 'Сумма компонентов' = DATA NUMERIC[16,2] (productDetail);
componentsSumProductDetail(productDetail) <- toNumeric16p2(roundCurrency((quantityProductDetail(productDetail) * componentsPriceProductDetail(productDetail)), currencyProductDetail(productDetail)))
    WHEN CHANGED (quantityProductDetail(productDetail)) OR
         CHANGED (componentsPriceProductDetail(productDetail)) OR
         CHANGED(currencyProductDetail(productDetail));

calcPriceListTypeProductDetail (productDetail) = calcPriceListTypeOrder(orderProductDetail(productDetail));
markupProductDetail 'Надбавка, %' = DATA NUMERIC[8,2] (productDetail);
markupProductDetail(productDetail) <- markupCalcPriceListTypeSku(calcPriceListTypeProductDetail(productDetail), skuProductDetail(productDetail))
    WHEN CHANGED (calcPriceListTypeProductDetail(productDetail)) OR
         CHANGED (skuProductDetail(productDetail));

multiplierCalcProductDetail (productDetail) = ((100.00 IF productDetail IS productDetail) (+) markupProductDetail(productDetail)) / 100 PERSISTENT;

@defineDocumentDetailPriceCustomPrefix (productDetail, products, ' изделия');
productsPriceProductDetail(productDetail) <- IF calcPriceListTypeProductDetail(productDetail) THEN
    toNumeric14p2(roundPriceRoundCondition(componentsPriceProductDetail(productDetail) * multiplierCalcProductDetail(productDetail), roundConditionCalcPriceListType(calcPriceListTypeProductDetail(productDetail))))
    ELSE toNumeric14p2(roundCurrency((componentsPriceProductDetail(productDetail) * multiplierCalcProductDetail(productDetail)), currencyProductDetail(productDetail)))
        WHEN CHANGED (componentsPriceProductDetail(productDetail)) OR
             CHANGED (multiplierCalcProductDetail(productDetail)) OR
             CHANGED (calcPriceListTypeProductDetail(productDetail)) OR
             CHANGED (currencyProductDetail(productDetail));

productsSumProductDetail 'Сумма изделия' = DATA NUMERIC[16,2] (productDetail);
productsSumProductDetail(productDetail) <- toNumeric16p2(roundCurrency((quantityProductDetail(productDetail) * productsPriceProductDetail(productDetail)), currencyProductDetail(productDetail)))
    WHEN CHANGED (quantityProductDetail(productDetail)) OR
         CHANGED (productsPriceProductDetail(productDetail)) OR
         CHANGED(currencyProductDetail(productDetail));

@defineDocumentHeaderSumCustomPrefix (order, productDetail, products, ' (изделие)');

// ------------- Компоненты ----------- //
CLASS componentDetail 'Строка компонента' : named;
TABLE componentDetail (componentDetail);

@defineDocumentRelation (order, componentDetail, );
@defineDocumentDetailIndex (order, componentDetail);
@defineDocumentDetailActionsCustom (order, componentDetail);
@defineDocumentDetailPosted (order, componentDetail);
@defineDocumentDetailTime (order, componentDetail);
@defineDocumentDetailDescription(order, componentDetail);
@defineDocumentDetailDatePrefix (order, componentDetail, from, ' действия с');
@defineDocumentDetailDatePrefix (order, componentDetail, to, ' действия по');

@defineDocumentDetailQuantityCustomPrefix (componentDetail, brutto, ' (брутто)');
//@defineDocumentHeaderQuantityCustomPrefix (order, componentDetail, brutto, ' (материал брутто)');

@defineDocumentDetailStock (order, componentDetail, componentsStock, 'Склад сырья');
@defineDocumentDetailStock (order, componentDetail, goodsStock, 'Склад готовой продукции');

@defineDocumentDetailPriceListTypePrefix (order, componentDetail, priceListType, , );

@defineDocumentDetailSkuCustom (componentDetail, sku);

componentComponentDetail = DATA component (componentDetail);
nameComponentComponentDetail 'Компонент' (componentDetail) = nameComponent(componentComponentDetail(componentDetail));

UOMComponentDetail = DATA UOM (componentDetail);
shortNameUOMComponentDetail 'Ед. изм.' (componentDetail) = shortName(UOMComponentDetail(componentDetail));
UOMComponentDetail(componentDetail) <- UOMComponent(componentComponentDetail(componentDetail)) WHEN CHANGED (componentComponentDetail(componentDetail));

CONSTRAINT materialComponent(componentComponentDetail(componentDetail)) IS sku AND NOT skuComponentDetail(componentDetail) == materialComponent(componentComponentDetail(componentDetail))
    CHECKED BY componentComponentDetail MESSAGE 'Sku компонента и строки компонента не соответствуют друг другу';

productComponentDetail = DATA product (componentDetail);
nameMaterialComponentDetail 'Изделие' (componentDetail) = nameMaterial(productComponentDetail(componentDetail));

CONSTRAINT skuComponentDetail(componentDetail) != skuProduct(productComponentDetail(componentDetail))
    CHECKED BY productComponentDetail MESSAGE 'Sku изделия и строки компонента не соответствуют друг другу';

//--

quantityBOMOrder 'Кол-во спецификаций' (BOM, order) = [GROUP MAX quantityProductDetail(productDetail) / quantityProduct(productProductDetail(productDetail))  //ceil
    BY BOMProduct(productProductDetail(productDetail)), orderProductDetail(productDetail)](BOM, order);

createComponentOrder 'Заполнить из спецификации' = ACTION (order)  {

    FOR quantityBOMOrder(BOM, order) DO {

        FOR  BOMComponent(component) == BOM  DO {
            FOR ADDOBJ d=componentDetail DO {
                SET orderComponentDetail(d) <- order;
                SET componentComponentDetail(d) <- component;
                SET bruttoQuantityComponentDetail(d) <- bruttoQuantityComponentDate(component, dateOrder(order))*quantityBOMOrder(BOM,order);

                IF materialComponent(component) AS sku THEN {
                    SET skuComponentDetail(d) <- materialComponent(component);
                } ELSE {
                    IF materialComponent(component) AS product THEN {
                        SET productComponentDetail(d) <- materialComponent(component);
                        SET skuComponentDetail(d) <- skuProduct(materialComponent(component));
                    }
                }
            }
        }
    }

} TOOLBAR;

createComponentDetail 'Развернуть изделие' = ACTION (componentDetail)  {

    FOR  BOMComponent(component) == BOMProduct(productComponentDetail(componentDetail))  DO {
        FOR ADDOBJ d=componentDetail DO {
            SET orderComponentDetail(d) <- orderComponentDetail(componentDetail);
            SET componentComponentDetail(d) <- component;
            SET bruttoQuantityComponentDetail(d) <- bruttoQuantityComponentDate(component, dateOrder(orderComponentDetail(componentDetail)))*
                bruttoQuantityComponentDetail(componentDetail)/quantityProduct(productComponentDetail(componentDetail));    //ceil

            IF materialComponent(component) AS sku THEN {
                SET skuComponentDetail(d) <- materialComponent(component);
            } ELSE {
                IF materialComponent(component) AS product THEN {
                    SET productComponentDetail(d) <- materialComponent(component);
                    SET skuComponentDetail(d) <- skuProduct(materialComponent(component));
                }
            }
        }
    }
    EXEC delete(componentDetail);
} TOOLBAR;


recBruttoQuantityOrderSku 'Рекур.кол-во' (order, sku) = GROUP SUM quantityBOMOrder(BOM, order) * recBruttoQuantityBOMSkuDate(BOM, sku, dateOrder(order)) BY order, sku;
createRecComponentOrder 'Заполнить из спецификации (рекурсивно)' = ACTION (order)  {

    FOR q == recBruttoQuantityOrderSku(order, sku) ADDOBJ d = componentDetail DO {
        SET orderComponentDetail(d) <- order;
        SET skuComponentDetail(d) <- sku;
        SET bruttoQuantityComponentDetail(d) <- q;
    }
} TOOLBAR;

backgroundComponentDetail 'Цвет' (componentDetail) = RGB(255,255,229) IF productComponentDetail(componentDetail);

//--  Сбивка по sku

TABLE skuOrder(sku, order);
bruttoQuantitySkuOrder 'Количество брутто' (sku,order)= GROUP SUM bruttoQuantityComponentDetail(componentDetail) BY skuComponentDetail(componentDetail), orderComponentDetail(componentDetail) PERSISTENT;

dataPriceSkuOrder 'Цена' = DATA NUMERIC[14,2] (sku, order);
dataPriceSkuOrder(sku,order) <- prevPricePriceListTypeSkuStockDateTime(priceListTypeOrder(order),
                                                                       sku,
                                                                       componentsStockOrder(order),
                                                                       dateTimeOrder(order))
                                    WHEN CHANGED(priceListTypeOrder(order)) OR
                                         CHANGED(componentsStockOrder(order)) OR
                                         CHANGED(dateTimeOrder(order));

priceSkuOrder 'Цена' (sku, order) = dataPriceSkuOrder(sku, order) AND bruttoQuantitySkuOrder(sku, order);

sumSkuOrder 'Сумма' = DATA NUMERIC[16,2] (sku, order);

sumSkuOrder(sku, order) <- toNumeric16p2(roundCurrency((bruttoQuantitySkuOrder(sku, order) * priceSkuOrder(sku, order)), currencyOrder(order)))
    WHEN CHANGED (bruttoQuantitySkuOrder(sku, order)) OR
         CHANGED (priceSkuOrder(sku, order)) OR
         CHANGED(currencyOrder(order) AND sku IS sku);


//-- Замена

substituteSkuOrder  = DATA sku (sku, order);
nameSubstituteSkuOrder 'Замена' (sku, order) = nameSku(substituteSkuOrder(sku, order));
isSubstituteSkuOrder 'Использовать замену' (substitute, sku, order) = substituteSkuOrder(sku, order) == toSkuSubstitute(substitute);

multiplierSkuOrder 'Коэффициент замены' = DATA NUMERIC[8,3] (sku, order);
quantitySubstitutesSkuOrder 'Кол-во замены' = DATA NUMERIC[14,3] (sku, order);
dataPriceSubstitutesSkuOrder 'Цена замены' = DATA NUMERIC[14,2] (sku, order);

dataPriceSubstitutesSkuOrder(sku,order) <- prevPricePriceListTypeSkuStockDateTime(priceListTypeOrder(order),
                                                                                  substituteSkuOrder(sku, order),
                                                                                  componentsStockOrder(order),
                                                                                  dateTimeOrder(order))
                                    WHEN CHANGED(priceListTypeOrder(order) AND sku IS sku) OR
                                         CHANGED(componentsStockOrder(order) AND sku IS sku) OR
                                         CHANGED(substituteSkuOrder(sku, order)) OR
                                         CHANGED(dateTimeOrder(order) AND sku IS sku);
priceSubstitutesSkuOrder 'Цена замены' (sku, order) = dataPriceSubstitutesSkuOrder(sku, order) AND quantitySubstitutesSkuOrder(sku, order);

changeSubstituteSkuOrder = ACTION (substitute, sku, order) {
    REQUEST BOOLEAN INPUT;
    IF requestedLogical() THEN {
        SET substituteSkuOrder(sku, order) <- toSkuSubstitute(substitute);
        SET multiplierSkuOrder(sku, order) <- multiplierSubstitute(substitute);

    } ELSE {
        SET substituteSkuOrder(sku, order) <- NULL;
        SET multiplierSkuOrder(sku, order) <- NULL;
    }

}
quantitySubstitutesSkuOrder(sku, order) <- bruttoQuantitySkuOrder(sku,order) * multiplierSkuOrder(sku, order)
    WHEN CHANGED (bruttoQuantitySkuOrder(sku,order)) OR CHANGED(multiplierSkuOrder(sku, order));

overPriceSkuOrder 'Цена для расчета с/с изделия' (sku, order) = priceSkuOrder(sku,order) OR (priceSubstitutesSkuOrder(sku,order)*multiplierSkuOrder(sku,order));

backgroundSubstitutesOrder 'Цвет' (order) = RGB(255,224,255) IF order IS order;

//-- Подсчет цены изделия с учетом замен

recPriceProductOrder (product, order) = GROUP SUM recPricePercentProductSkuDate (product, sku, dateOrder(order))*overPriceSkuOrder(sku, order)/100
    BY product, order;
recPricePercentProductDetailSkuOrder 'Коэф.цены' (productDetail, sku, order)= recPricePercentProductSkuDate (productProductDetail(productDetail), sku, dateOrder(order))/100;

recPriceProductDetail 'Цена расчетная'(productDetail) = recPriceProductOrder (productProductDetail(productDetail), orderProductDetail(productDetail));

fillPriceProductsOrder 'Заполнить цены для изделий по с/с' = ACTION (order)  {

    FOR orderProductDetail(productDetail) == order DO {
        SET componentsPriceProductDetail(productDetail) <- recPriceProductDetail(productDetail);
    }
} TOOLBAR;

//-- Замены для компонентов

substituteComponentDetail(componentDetail)= substituteSkuOrder(skuComponentDetail(componentDetail), orderComponentDetail(componentDetail));
nameSubstituteComponentDetail 'Замена' (componentDetail)= nameSku(substituteComponentDetail (componentDetail));
multiplierSubstitutesComponentDetail 'Коэффициент замены' (componentDetail)= multiplierSkuOrder(skuComponentDetail(componentDetail), orderComponentDetail(componentDetail)) AND
    substituteSkuOrder(skuComponentDetail(componentDetail), orderComponentDetail(componentDetail));
quantitySubstitutesComponentDetail 'Кол-во замены' (componentDetail)= quantitySubstitutesSkuOrder(skuComponentDetail(componentDetail), orderComponentDetail(componentDetail)) AND
    substituteSkuOrder(skuComponentDetail(componentDetail), orderComponentDetail(componentDetail));

overSkuComponentDetail (componentDetail) = skuComponentDetail(componentDetail) OR substituteComponentDetail(componentDetail);
overNameSkuComponentDetail 'SKU' (componentDetail) = nameSku(overSkuComponentDetail(componentDetail));
overQuantityComponentDetail 'Кол-во' (componentDetail) = bruttoQuantityComponentDetail(componentDetail) OR quantitySubstitutesComponentDetail(componentDetail);

@defineDocumentHeaderQuantityCustomPrefix (order, componentDetail, over, ' (материал)');
// ------------- Формы ----------- //

FORM order 'Производственный заказ'

    OBJECTS o = order FIXED PANEL
    PROPERTIES(o) objectClassName, nameComponentsStockOrder, nameGoodsStockOrder, nameNumeratorObject, numberObject, seriesObject,
                  dateOrder, timeOrder, fromDateOrder, toDateOrder, noteOrder, quantityProductDetailOrder, productsSumProductDetailOrder, overQuantityComponentDetailOrder
    PROPERTIES(o) nameCalcPriceListTypeOrder FORCE PANEL
    OBJECTS pd=productDetail
    PROPERTIES(pd) indexProductDetail, nameSkuProductDetail,  nameProductProductDetail, shortNameUOMProductDetail, quantityProductDetail, recPriceProductDetail READONLY,
                   componentsPriceProductDetail, componentsSumProductDetail, markupProductDetail, productsPriceProductDetail, productsSumProductDetail
    PROPERTIES(pd) ADDOBJ, delete
    PROPERTIES(o) TODRAW pd fillPriceProductsOrder, deleteProductDetailOrder

    FILTERS orderProductDetail(pd)==o

    OBJECTS cd = componentDetail
    PROPERTIES(cd) BACKGROUND backgroundComponentDetail(cd) indexComponentDetail, nameSkuComponentDetail, nameMaterialComponentDetail, nameComponentComponentDetail,
                   shortNameUOMComponentDetail, bruttoQuantityComponentDetail
    PROPERTIES(cd) READONLY BACKGROUND backgroundSubstitutesOrder(o) nameSubstituteComponentDetail, multiplierSubstitutesComponentDetail, quantitySubstitutesComponentDetail

    PROPERTIES(o) TODRAW cd createComponentOrder, createRecComponentOrder
    PROPERTIES(cd) TODRAW cd createComponentDetail SHOWIF productComponentDetail(cd)
    PROPERTIES(cd) ADDOBJ, delete
    PROPERTIES(o) TODRAW cd deleteComponentDetailOrder

    FILTERS orderComponentDetail(cd)==o

    OBJECTS s = sku
    PROPERTIES(s) READONLY nameSku, idBarcodeSku, shortNameUOMSku
    PROPERTIES(s,o) READONLY bruttoQuantitySkuOrder
    PROPERTIES(s,o) priceSkuOrder, sumSkuOrder
    PROPERTIES(s,o) BACKGROUND backgroundSubstitutesOrder(o) nameSubstituteSkuOrder, multiplierSkuOrder, quantitySubstitutesSkuOrder, priceSubstitutesSkuOrder
    PROPERTIES(s,o) overPriceSkuOrder
    FILTERS bruttoQuantitySkuOrder(s,o)

    PROPERTIES(o) namePriceListTypeOrder FORCE PANEL

//    PROPERTIES    recPricePercentProductDetailSkuOrder(pd,s,o), recBruttoQuantityOrderSku(o,s)

    OBJECTS su = substitute
    PROPERTIES(su) READONLY nameToSkuSubstitute, multiplierSubstitute
    PROPERTIES(su,s,o) isSubstituteSkuOrder ON CHANGE EXEC changeSubstituteSkuOrder(su,s,o)

    FILTERS fromSkuSubstitute(su) == s

    EVENTS
        ON OK EXEC prePostOrder(o)
    EDIT order OBJECT o
;

DESIGN order FROM DEFAULT{

    main {
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            type = TABBED;
            NEW row1 {
                title = 'Изделия';
                childConstraints = TO THE BOTTOM;
                NEW row11 {
                    childConstraints = TO THE BOTTOM;
                    NEW row111{
                        title = 'Цена изделий';
                        ADD PROPERTY(nameCalcPriceListTypeOrder);
                    }
                    ADD pd.box;
                }
            }
            ADD cd.box { title = 'Компоненты';}
            NEW row2 {
                title = 'Потребность';
                childConstraints = TO THE BOTTOM;
                NEW row21 {
                    childConstraints = TO THE BOTTOM;
                    NEW row211 {
                        title = 'Цена материалов';
                        ADD PROPERTY(namePriceListTypeOrder);
                    }
                    ADD s.box;
                }
                ADD su.box;
            }
        }

        NEW header.box BEFORE specification.box {
            childConstraints = TO THE RIGHT;

            NEW headerRow1 {
                childConstraints = TO THE BOTTOM;
                ADD o.documentHeaderGroup {
                    childConstraints = TO THE RIGHTBOTTOM;
                    ADD PROPERTY(objectClassName) { preferredCharWidth = 10; }
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateOrder);
                    ADD PROPERTY(timeOrder);
                }
                NEW headerRow11 {
                    title = 'Склады';
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameComponentsStockOrder);
                    ADD PROPERTY(nameGoodsStockOrder);
                }
                NEW headerRow12 {
                    childConstraints = TO THE RIGHTBOTTOM;
                    ADD o.documentPrmGroup {
                        childConstraints = TO THE RIGHTBOTTOM;
                    }
                    NEW timeRow {
                        title = 'Срок действия';
                        childConstraints = TO THE RIGHTBOTTOM;
                        ADD PROPERTY(fromDateOrder);
                        ADD PROPERTY(toDateOrder);
                    }
                }
            }

            ADD o.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }

        PROPERTY(formOk) {
            caption = 'Провести';
        }
    }
}

FORM orders 'Производственные заказы'

    OBJECTS o = order
    PROPERTIES(o) READONLY isPostedOrder FORCE GRID, objectClassName, nameComponentsStockOrder, nameGoodsStockOrder, nameNumeratorObject, numberObject, seriesObject,
                  dateOrder, timeOrder, fromDateOrder, toDateOrder, noteOrder, quantityProductDetailOrder, productsSumProductDetailOrder, overQuantityComponentDetailOrder,
                  nameCalcPriceListTypeOrder, namePriceListTypeOrder

    PROPERTIES(o) ADDFORM, EDITFORM, delete
    PROPERTIES (o) READONLY FORCE PANEL nameUserCreatedHistorizable, timeCreatedHistorizable, hostnameComputerCreatedHistorizable, nameUserClosed, timeClosed, hostnameComputerClosed

    OBJECTS pd=productDetail
    PROPERTIES(pd) READONLY indexProductDetail, nameSkuProductDetail, nameProductProductDetail, shortNameUOMProductDetail, quantityProductDetail,
                   recPriceProductDetail, componentsPriceProductDetail, componentsSumProductDetail, markupProductDetail, productsPriceProductDetail, productsSumProductDetail
    FILTERS orderProductDetail(pd)==o

    OBJECTS cd = componentDetail
    PROPERTIES(cd) READONLY BACKGROUND backgroundComponentDetail(cd) indexComponentDetail, nameSkuComponentDetail, nameComponentComponentDetail,
                   shortNameUOMComponentDetail, bruttoQuantityComponentDetail
    PROPERTIES(cd) READONLY BACKGROUND backgroundSubstitutesOrder(o) nameSubstituteComponentDetail, multiplierSubstitutesComponentDetail,
                   quantitySubstitutesComponentDetail

    FILTERS orderComponentDetail(cd)==o

    OBJECTS s = sku
    PROPERTIES(s) READONLY nameSku, idBarcodeSku, shortNameUOMSku
    PROPERTIES(s,o) READONLY bruttoQuantitySkuOrder
    PROPERTIES(s,o) READONLY priceSkuOrder, sumSkuOrder
    FILTERS bruttoQuantitySkuOrder(s,o)

;
DESIGN orders FROM DEFAULT {
    PROPERTY (delete(o)) {
        askConfirm = TRUE;
    }

    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD o.box;

        NEW documentDetail {
            type = TABBED;

            ADD pd.box {
                title = 'Изделия';
            }
            ADD cd.box {
                title = 'Компоненты';
            }
            ADD s.box {
                title = 'Потребность';
            }
            NEW documentHistory {
                title = 'История';

                ADD o.historyGroup;
                ADD o.postedGroup;
            }
            NEW printTab {
                title = 'Печатные формы';
                NEW printContainer {
                    title = 'Печать';
                    childConstraints = TO THE BOTTOM;
                    fillVertical = 1.0;
                }
            }
        }
    }
}

FORM componentDetails 'Строка компонента'
    OBJECTS d = componentDetail
    PROPERTIES(d) READONLY indexComponentDetail, overNameSkuComponentDetail, shortNameUOMComponentDetail,
                           descriptionComponentDetail, overQuantityComponentDetail

    DIALOG componentDetail OBJECT d
;
DESIGN componentDetails FROM DEFAULT {

}

FORM productDetails 'Строка изделия'
    OBJECTS d = productDetail
    PROPERTIES(d) READONLY indexProductDetail, nameSkuProductDetail, nameProductProductDetail, shortNameUOMProductDetail, descriptionProductDetail,
                  quantityProductDetail, productsPriceProductDetail, productsSumProductDetail //componentsPriceProductDetail, componentsSumProductDetail, markupProductDetail,

    DIALOG productDetail OBJECT d
;
DESIGN productDetails FROM DEFAULT {

}

NAVIGATOR {
    manufacturingDocuments {
        ADD orders;
    }
}