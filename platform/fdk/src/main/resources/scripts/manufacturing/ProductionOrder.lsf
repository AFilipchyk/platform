MODULE  ProductionOrder;

REQUIRE Substitute, PriceList, StockTax;
NAMESPACE Production;

// ----------------  заказ ------------------- //
CLASS order 'Производственный заказ' : historizable, numeratedObject;
CLASS orderPosted 'Проведенный производственный заказ' : order, postedObject;
TABLE order(order);

@defineDocumentHeaderTime(order);
@defineDocumentHeaderNote(order);

@defineNumeratedObjectDefault(order, 'Нумератор для производственного заказа', 'ПЗ');

@defineDocumentHeaderPosted (order);
@defineDocumentHeaderPriceListType (order, priceListType, , ' (потребность)');
includeVATOrder 'Цена с НДС' = DATA BOOLEAN (order);
includeVATOrder(order) <- includeVATPriceListType(priceListTypeOrder(order)) WHEN CHANGED(priceListTypeOrder(order));
backgroundVATOrder 'Цвет' (order) = RGB(255, 255, 224) IF order IS order;

@defineDocumentHeaderPriceListType (order, calcPriceListType, , ' (надбавка-изделие)');
@defineDocumentHeaderPriceListType (order, calcPriceListType, components, ' (надбавка-потребность)');

@defineDocumentHeaderStock (order, stock, 'Склад сырья', components);
@defineDocumentHeaderStock (order, stock, 'Склад готовой продукции', goods);

@defineDocumentHeaderDatePrefix (order, from, ' действия с');
@defineDocumentHeaderDatePrefix (order, to, ' действия по');

@defineDocumentHeaderDescription(order, 'Производственный заказ');
@defineDocumentHeaderCurrency (order);
@deriveDocumentCurrency (order, componentsStock, currencyStock);

// ---------------- Изделие ------------------- //
CLASS productDetail 'Строка изделия' : named;
TABLE productDetail (productDetail);

@defineDocumentRelation (order, productDetail, );
@defineDocumentDetailIndex (order, productDetail);
@defineDocumentDetailActionsCustom (order, productDetail);
@defineDocumentDetailPosted (order, productDetail);
@defineDocumentDetailTime (order, productDetail);
@defineDocumentDetailDescription(order, productDetail);
@defineDocumentDetailDatePrefix (order, productDetail, from, ' действия с');
fromDateOrder(order) <- currentDate() WHEN ASSIGNED(order IS order);
@defineDocumentDetailDatePrefix (order, productDetail, to, ' действия по');

@defineDocumentDetailStock (order, productDetail, componentsStock, 'Склад сырья');
@defineDocumentDetailStock (order, productDetail, goodsStock, 'Склад готовой продукции');

@defineDocumentDetailQuantityCustom (productDetail);
@defineDocumentHeaderQuantityCustomPrefix (order, productDetail, , ' (изделие)');

@defineDocumentDetailSkuCustom (productDetail, sku);

productProductDetail = DATA product (productDetail);
nameProductProductDetail 'Изделие' (productDetail) = nameMaterial(productProductDetail(productDetail)) IN recognize;

UOMProductDetail = DATA UOM (productDetail);
shortNameUOMProductDetail 'Ед.изм.' (productDetail) = shortName(UOMProductDetail(productDetail)) IN recognize;
UOMProductDetail(productDetail) <- UOMProduct(productProductDetail(productDetail)) WHEN CHANGED (productProductDetail(productDetail));

CONSTRAINT skuProductDetail(productDetail) != skuProduct(productProductDetail(productDetail)) CHECKED BY productProductDetail
    MESSAGE 'Sku изделия и строки изделия не соответствуют друг другу';
currencyProductDetail (productDetail)= currencyOrder(orderProductDetail(productDetail));

@defineDocumentDetailPriceCustomPrefix (productDetail, components, ' компонентов');

calcPriceListTypeProductDetail (productDetail) = calcPriceListTypeOrder(orderProductDetail(productDetail));
markupProductDetail 'Надбавка, %' = DATA NUMERIC[8,2] (productDetail);

multiplierCalcProductDetail (productDetail) = ((100.00 IF productDetail IS productDetail) (+) markupProductDetail(productDetail)) / 100 PERSISTENT;

@defineDocumentDetailPriceCustomPrefix (productDetail, products, ' изделия');

productsSumProductDetail 'Сумма изделия' = DATA NUMERIC[16,2] (productDetail);
productsSumProductDetail(productDetail) <- toNumeric16p2(roundPriceCurrency((quantityProductDetail(productDetail) * productsPriceProductDetail(productDetail)), currencyProductDetail(productDetail)))
    WHEN CHANGED (quantityProductDetail(productDetail)) OR
         CHANGED (productsPriceProductDetail(productDetail)) OR
         CHANGED(currencyProductDetail(productDetail));

@defineDocumentHeaderSumCustomPrefix (order, productDetail, products, ' (изделие)');

// ------------- Компоненты ----------- //
CLASS componentDetail 'Строка компонента' : named;
TABLE componentDetail (componentDetail);

@defineDocumentRelation (order, componentDetail, );
@defineDocumentDetailIndex (order, componentDetail);
@defineDocumentDetailActionsCustom (order, componentDetail);
@defineDocumentDetailPosted (order, componentDetail);
@defineDocumentDetailTime (order, componentDetail);
@defineDocumentDetailDescription(order, componentDetail);
@defineDocumentDetailDatePrefix (order, componentDetail, from, ' действия с');
@defineDocumentDetailDatePrefix (order, componentDetail, to, ' действия по');

@defineDocumentDetailQuantityCustomPrefix (componentDetail, brutto, ' (брутто)');
//@defineDocumentHeaderQuantityCustomPrefix (order, componentDetail, brutto, ' (материал брутто)');

@defineDocumentDetailStock (order, componentDetail, componentsStock, 'Склад сырья');
@defineDocumentDetailStock (order, componentDetail, goodsStock, 'Склад готовой продукции');

@defineDocumentDetailPriceListTypePrefix (order, componentDetail, priceListType, , );

@defineDocumentDetailDataSumCustomPrefix (componentDetail, , );

@defineDocumentDetailSkuCustom (componentDetail, sku);

componentComponentDetail = DATA component (componentDetail);
nameComponentComponentDetail 'Компонент' (componentDetail) = nameComponent(componentComponentDetail(componentDetail));

UOMComponentDetail = DATA UOM (componentDetail);
shortNameUOMComponentDetail 'Ед. изм.' (componentDetail) = shortName(UOMComponentDetail(componentDetail));
UOMComponentDetail(componentDetail) <- UOMComponent(componentComponentDetail(componentDetail)) WHEN CHANGED (componentComponentDetail(componentDetail));

CONSTRAINT skuComponentDetail(componentDetail) != skuMaterial(materialComponent(componentComponentDetail(componentDetail)))
    CHECKED BY componentComponentDetail MESSAGE 'Sku компонента и строки компонента не соответствуют друг другу';

currencyComponentDetail (componentDetail)= currencyOrder(orderComponentDetail(componentDetail));

productComponentDetail = DATA product (componentDetail);
nameMaterialComponentDetail 'Изделие' (componentDetail) = nameMaterial(productComponentDetail(componentDetail));

CONSTRAINT skuComponentDetail(componentDetail) != skuProduct(productComponentDetail(componentDetail))
    CHECKED BY productComponentDetail MESSAGE 'Sku изделия и строки компонента не соответствуют друг другу';

//--

TABLE productOrder(product, order);
quantityProductOrder 'Кол-во изделий в заказе' (product, order) = GROUP SUM quantityProductDetail(productDetail)
    BY productProductDetail(productDetail), orderProductDetail(productDetail) PERSISTENT;

TABLE BOMOrder(BOM, order);
quantityProductsBOMOrder 'Кол-во спецификаций' (BOM, order) = [GROUP MAX quantityProductOrder(product, order)/ quantityProduct(product)
    BY BOMProduct(product), order](BOM, order) PERSISTENT;

createComponentOrder 'Заполнить компоненты из спецификации' = ACTION (order)  {

    FOR quantityProductsBOMOrder(BOM, order) DO {

        FOR  BOMComponent(component) == BOM  DO {
            FOR ADDOBJ d=componentDetail DO {
                SET orderComponentDetail(d) <- order;
                SET componentComponentDetail(d) <- component;
                SET bruttoQuantityComponentDetail(d) <- bruttoQuantityComponentDate(component, dateOrder(order))*quantityProductsBOMOrder(BOM,order);

                IF materialComponent(component) AS sku THEN {
                    SET skuComponentDetail(d) <- materialComponent(component);
                } ELSE {
                    IF materialComponent(component) AS product THEN {
                        SET productComponentDetail(d) <- materialComponent(component);
                        SET skuComponentDetail(d) <- skuProduct(materialComponent(component));
                    }
                }
            }
        }
    }

} TOOLBAR;

quantityComponentsBOMOrder 'Кол-во спецификаций' (BOM, order) = [GROUP MAX bruttoQuantityComponentDetail(componentDetail) / bruttoQuantityComponentDate(componentComponentDetail(componentDetail), dateComponentDetail(componentDetail))  //ceil
    BY BOMComponent(componentComponentDetail(componentDetail)), orderComponentDetail(componentDetail)](BOM, order) PERSISTENT;

createProductOrder 'Заполнить изделия из спецификации ' = ACTION (order)  {

    FOR quantityComponentsBOMOrder(BOM, order) DO {

        FOR  BOM == BOMProduct(product)  DO {
            FOR ADDOBJ d=productDetail DO {
                SET orderProductDetail(d) <- order;
                SET skuProductDetail(d) <- skuProduct(product);
                SET productProductDetail(d) <- product;
                SET quantityProductDetail(d) <- quantityProduct(product)*quantityComponentsBOMOrder(BOM,order);
            }
        }
    }

} TOOLBAR;


createComponentDetail 'Развернуть изделие' = ACTION (componentDetail)  {

    FOR  BOMComponent(component) == BOMProduct(productComponentDetail(componentDetail))  DO {
        FOR ADDOBJ d=componentDetail DO {
            SET orderComponentDetail(d) <- orderComponentDetail(componentDetail);
            SET componentComponentDetail(d) <- component;
            SET bruttoQuantityComponentDetail(d) <- bruttoQuantityComponentDate(component, dateOrder(orderComponentDetail(componentDetail)))*
                bruttoQuantityComponentDetail(componentDetail)/quantityProduct(productComponentDetail(componentDetail));    //ceil

            IF materialComponent(component) AS sku THEN {
                SET skuComponentDetail(d) <- materialComponent(component);
            } ELSE {
                IF materialComponent(component) AS product THEN {
                    SET productComponentDetail(d) <- materialComponent(component);
                    SET skuComponentDetail(d) <- skuProduct(materialComponent(component));
                }
            }
        }
    }
    EXEC delete(componentDetail);
} TOOLBAR;


recBruttoQuantityOrderSku 'Рекур.кол-во' (order, sku) = GROUP SUM quantityProductsBOMOrder(BOM, order) * recBruttoQuantityBOMSkuDate(BOM, sku, dateOrder(order)) BY order, sku;
createRecComponentOrder 'Заполнить из спецификации (рекурсивно)' = ACTION (order)  {

    FOR q == recBruttoQuantityOrderSku(order, sku) ADDOBJ d = componentDetail DO {
        SET orderComponentDetail(d) <- order;
        SET skuComponentDetail(d) <- sku;
        SET bruttoQuantityComponentDetail(d) <- q;
    }
} TOOLBAR;

backgroundComponentDetail 'Цвет' (componentDetail) = RGB(255,255,229) IF productComponentDetail(componentDetail);

//--  Сбивка по sku

TABLE skuOrder(sku, order);
bruttoQuantitySkuOrder 'Количество брутто' (sku,order) = GROUP SUM bruttoQuantityComponentDetail(componentDetail) BY skuComponentDetail(componentDetail), orderComponentDetail(componentDetail) PERSISTENT;

dataPriceSkuOrder 'Цена' = DATA NUMERIC[14,2] (sku, order);
dataPriceSkuOrder(sku,order) <- prevPricePriceListTypeSkuStockDateTime(priceListTypeOrder(order),
                                                                       sku,
                                                                       componentsStockOrder(order),
                                                                       dateTimeOrder(order))
                                    WHEN CHANGED(priceListTypeOrder(order)) OR
                                         CHANGED(componentsStockOrder(order)) OR
                                         CHANGED(dateTimeOrder(order));

priceSkuOrder 'Цена' (sku, order) = dataPriceSkuOrder(sku, order) AND bruttoQuantitySkuOrder(sku, order) PERSISTENT;
sumSkuOrder 'Сумма' = DATA NUMERIC[16,2] (sku, order);
sumSkuOrder(sku, order) <- toNumeric16p2(roundPriceCurrency((bruttoQuantitySkuOrder(sku, order) * priceSkuOrder(sku, order)), currencyOrder(order)))
    WHEN CHANGED (bruttoQuantitySkuOrder(sku, order)) OR
         CHANGED (priceSkuOrder(sku, order)) OR
         CHANGED(currencyOrder(order) AND sku IS sku);

markupSkuOrder 'Надбавка, %' = DATA NUMERIC[8,2] (sku, order);

premiumPriceSkuOrder 'Цена с надбавкой' = DATA NUMERIC[14,2] (sku, order);

valueVATSkuOrder 'НДС, %' = DATA NUMERIC[10,5] (sku, order);

//-- Замена

substituteSkuOrder  = DATA sku (sku, order);
nameSubstituteSkuOrder 'Замена' (sku, order) = nameSku(substituteSkuOrder(sku, order));
isSubstituteSkuOrder 'Использовать замену' (substitute, sku, order) = substituteSkuOrder(sku, order) == toSkuSubstitute(substitute);

multiplierSkuOrder 'Коэффициент замены' = DATA NUMERIC[8,3] (sku, order);
quantitySubstitutesSkuOrder 'Кол-во замены' = DATA NUMERIC[14,3] (sku, order);
dataPriceSubstitutesSkuOrder 'Цена замены' = DATA NUMERIC[14,2] (sku, order);

dataPriceSubstitutesSkuOrder(sku,order) <- prevPricePriceListTypeSkuStockDateTime(priceListTypeOrder(order),
                                                                                  substituteSkuOrder(sku, order),
                                                                                  componentsStockOrder(order),
                                                                                  dateTimeOrder(order))
                                    WHEN CHANGED(priceListTypeOrder(order) AND sku IS sku) OR
                                         CHANGED(componentsStockOrder(order) AND sku IS sku) OR
                                         CHANGED(substituteSkuOrder(sku, order)) OR
                                         CHANGED(dateTimeOrder(order) AND sku IS sku);
priceSubstitutesSkuOrder 'Цена замены' (sku, order) = dataPriceSubstitutesSkuOrder(sku, order) AND quantitySubstitutesSkuOrder(sku, order) PERSISTENT;

overSkuSkuOrder (sku, order) = (sku AS sku AND order IS order) OR substituteSkuOrder(sku,order) PERSISTENT;
nameSkuSkuOrder 'Итоговый sku' (sku,order)= nameSku(overSkuSkuOrder (sku,order));
idBarcodeSkuSkuOrder 'Штрих-код' (sku,order) = idBarcodeSku(overSkuSkuOrder (sku, order));
shortNameUOMSkuSkuOrder 'Ед.изм.' (sku,order) = shortNameUOMSku(overSkuSkuOrder (sku, order));

valueVATSkuOrder(sku, order) <- valueRateRangeDate(
    VATSkuCountryDate (overSkuSkuOrder (sku,order), componentsCountryOrder(order), dateOrder(order)), dateOrder(order)) AND includeVATOrder(order)
        WHEN CHANGED(overSkuSkuOrder (sku,order)) OR
             CHANGED(componentsCountryOrder(order) AND sku IS sku) OR
             CHANGED(dateOrder(order) AND sku IS sku) OR
             CHANGED(includeVATOrder(order) AND sku IS sku);

changeSubstituteSkuOrder = ACTION (substitute, sku, order) {
    REQUEST BOOLEAN INPUT;
    IF requestedLogical() THEN {
        SET substituteSkuOrder(sku, order) <- toSkuSubstitute(substitute);
        SET multiplierSkuOrder(sku, order) <- multiplierSubstitute(substitute);

    } ELSE {
        SET substituteSkuOrder(sku, order) <- NULL;
        SET multiplierSkuOrder(sku, order) <- NULL;
    }
}
quantitySubstitutesSkuOrder(sku, order) <- bruttoQuantitySkuOrder(sku,order) * multiplierSkuOrder(sku, order)
    WHEN CHANGED (bruttoQuantitySkuOrder(sku,order)) OR CHANGED(multiplierSkuOrder(sku, order));

overPriceSkuOrder 'Цена с учетом коэфф. замены' (sku, order) = priceSkuOrder(sku,order) OR (priceSubstitutesSkuOrder(sku,order)*multiplierSkuOrder(sku,order)) PERSISTENT;

multiplierCalcSkuOrder(sku, order) = ((100.00 IF sku IS sku AND order IS order) (+) markupSkuOrder(sku, order)) / 100 PERSISTENT;

changeValueMarkupSkuOrder (sku, order) = ACTION (sku, order) {
    IF overPriceSkuOrder(sku, order) THEN {
        SET premiumPriceSkuOrder(sku, order) <- overPriceSkuOrder(sku, order) * multiplierCalcSkuOrder(sku, order);
    }
}
changeMarkupSkuOrder (sku, order) = ACTION (sku, order) {
    REQUEST NUMERIC[8,2] INPUT;
    IF requestedNumeric() THEN {
        SET markupSkuOrder (sku, order) <- requestedNumeric();
        EXEC changeValueMarkupSkuOrder(sku, order);
    }
}

recordMarkupSkuOrder(sku, order) = ACTION (sku, order) {
    IF componentsCalcPriceListTypeOrder(order) AND bruttoQuantitySkuOrder(sku, order) THEN {
        SET markupSkuOrder(sku, order) <- markupCalcPriceListTypeSku(componentsCalcPriceListTypeOrder(order), sku);
        EXEC changeValueMarkupSkuOrder(sku, order);
    }
}

WHEN CHANGED(componentsCalcPriceListTypeOrder(order) AND sku IS sku)
    DO EXEC recordMarkupSkuOrder(sku, order) SESSION;



backgroundSubstitutesOrder 'Цвет' (order) = RGB(255,224,255) IF order IS order;

//-- Подсчет цены изделия с учетом замен

calcComponentsPriceProductDetail 'Цена расчетная (с/с)' (productDetail)= [GROUP SUM recPricePercentProductSkuDate (product, sku, dateOrder(order))*overPriceSkuOrder(sku, order)/(100 *quantityProduct(product))
    BY product, order](productProductDetail(productDetail), orderProductDetail(productDetail)) PERSISTENT;

calcPremiumComponentsPriceProductDetail 'Цена компонентов с надбавкой' (productDetail)= [GROUP SUM recPricePercentProductSkuDate (product, sku, dateOrder(order))*premiumPriceSkuOrder(sku, order)/(100 *quantityProduct(product))
    BY product, order](productProductDetail(productDetail), orderProductDetail(productDetail)) PERSISTENT;

calcPremiumPriceProductDetail 'Цена расчетная (с надбавками)' (productDetail) = IF calcPriceListTypeProductDetail(productDetail) THEN
    toNumeric14p2(roundPriceRoundCondition(calcPremiumComponentsPriceProductDetail(productDetail) * multiplierCalcProductDetail(productDetail), roundConditionCalcPriceListType(calcPriceListTypeProductDetail(productDetail))))
        ELSE toNumeric14p2(roundPriceCurrency((calcPremiumComponentsPriceProductDetail(productDetail) * multiplierCalcProductDetail(productDetail)), currencyProductDetail(productDetail))) PERSISTENT;

changeValueMarkupProductDetail (detail) = ACTION (detail) {
    IF calcPremiumPriceProductDetail(detail) THEN {
        SET productsPriceProductDetail(detail) <- calcPremiumPriceProductDetail(detail);
    }
}
changeMarkupProductDetail (detail) = ACTION (detail) {
    REQUEST NUMERIC[8,2] INPUT;
    IF requestedNumeric() THEN {
        SET markupProductDetail (detail) <- requestedNumeric();
        EXEC changeValueMarkupProductDetail(detail);
    }
}

recordMarkupProductDetail(detail) = ACTION (detail) {
    IF calcPriceListTypeProductDetail(detail) THEN {
        SET markupProductDetail(detail) <- markupCalcPriceListTypeSku(calcPriceListTypeProductDetail(detail), skuProductDetail(detail));
        EXEC changeValueMarkupProductDetail(detail);
    }
}

WHEN CHANGED(calcPriceListTypeProductDetail(detail)) OR
    CHANGED(skuProductDetail(detail))
    DO EXEC recordMarkupProductDetail(detail) SESSION;

resetSubstituteOrder 'Сбросить все замены' = ACTION (order) {
    FOR (TRUE IF substituteSkuOrder(sku, order)) OR (TRUE IF multiplierSkuOrder(sku, order)) DO {
        SET substituteSkuOrder(sku, order) <- NULL;
        SET multiplierSkuOrder(sku, order) <- NULL;
    }
} TOOLBAR;

deleteComponentOrder 'Очистить' =  ACTION (order) {
    EXEC deleteComponentDetailOrder(order);
    EXEC resetSubstituteOrder(order);
} TOOLBAR;

//-- Расчет НДС с надбавками
calcPremiumVATComponentsPriceProductDetail 'Сумма НДС с надбавками' (productDetail)=
    [GROUP SUM recPricePercentProductSkuDate (product, sku, dateOrder(order))*premiumPriceSkuOrder(sku, order)*(valueVATSkuOrder(sku, order)/(100+valueVATSkuOrder(sku, order)))/(100 *quantityProduct(product))
    BY product, order](productProductDetail(productDetail), orderProductDetail(productDetail)) PERSISTENT;
densityPremiumVATComponentsPriceProductDetail 'Уд.вес НДС изделия' (productDetail)= [100*X/(Y-X)](
    calcPremiumVATComponentsPriceProductDetail(productDetail),calcPremiumComponentsPriceProductDetail(productDetail)) PERSISTENT;

//--
fillPriceProductsOrder 'Заполнить цены для изделий' = ACTION (order)  {
    FOR orderProductDetail(productDetail) == order DO {
        SET componentsPriceProductDetail(productDetail) <- calcComponentsPriceProductDetail(productDetail);
        SET productsPriceProductDetail(productDetail) <- calcPremiumPriceProductDetail(productDetail);
    }
} TOOLBAR;

//-- Замены для компонентов

substituteComponentDetail(componentDetail)= substituteSkuOrder(skuComponentDetail(componentDetail), orderComponentDetail(componentDetail)) PERSISTENT;
nameSubstituteComponentDetail 'Замена' (componentDetail)= nameSku(substituteComponentDetail (componentDetail));
multiplierSubstitutesComponentDetail 'Коэффициент замены' (componentDetail)= multiplierSkuOrder(skuComponentDetail(componentDetail), orderComponentDetail(componentDetail)) AND
    substituteSkuOrder(skuComponentDetail(componentDetail), orderComponentDetail(componentDetail));
quantitySubstitutesComponentDetail 'Кол-во замены' (componentDetail)= quantitySubstitutesSkuOrder(skuComponentDetail(componentDetail), orderComponentDetail(componentDetail)) AND
    substituteSkuOrder(skuComponentDetail(componentDetail), orderComponentDetail(componentDetail));


overSkuComponentDetail (componentDetail) = skuComponentDetail(componentDetail) OR substituteComponentDetail(componentDetail) PERSISTENT;
overNameSkuComponentDetail 'SKU' (componentDetail) = nameSku(overSkuComponentDetail(componentDetail));
overQuantityComponentDetail 'Кол-во' (componentDetail) = bruttoQuantityComponentDetail(componentDetail) OR quantitySubstitutesComponentDetail(componentDetail) PERSISTENT;

idBarcodeOverSkuComponentDetail 'Штрих-код' (componentDetail) = idBarcodeSku(overSkuComponentDetail(componentDetail));
shortNameUOMOverSkuComponentDetail 'Ед.изм.' (componentDetail) = shortNameUOMSku(overSkuComponentDetail(componentDetail));

calcPriceSkuOrder 'Цена материала с учетом замены' (sku, order) = priceSkuOrder(sku,order) OR priceSubstitutesSkuOrder(sku,order) PERSISTENT;
priceComponentDetail 'Цена' (detail) = calcPriceSkuOrder(skuComponentDetail(detail), orderComponentDetail(detail)) PERSISTENT;
sumComponentDetail (detail) <- toNumeric16p2(roundPriceCurrency((priceComponentDetail(detail)* overQuantityComponentDetail(detail)), currencyComponentDetail(detail)))
        WHEN CHANGED(priceComponentDetail(detail)) OR
             CHANGED(overQuantityComponentDetail(detail)) OR
             CHANGED(currencyComponentDetail(detail));

@defineDocumentHeaderQuantityCustomPrefix (order, componentDetail, over, ' (материал)');
// ------------- Формы ----------- //

FORM order 'Производственный заказ'

    OBJECTS o = order FIXED PANEL
    PROPERTIES(o) objectClassName, nameComponentsStockOrder, nameGoodsStockOrder, nameNumeratorObject, numberObject, seriesObject,
                  dateOrder, timeOrder, fromDateOrder, toDateOrder, noteOrder, quantityProductDetailOrder, productsSumProductDetailOrder, overQuantityComponentDetailOrder
    PROPERTIES(o) nameCalcPriceListTypeOrder FORCE PANEL
    OBJECTS pd=productDetail
    PROPERTIES(pd) indexProductDetail, nameSkuProductDetail,  nameProductProductDetail, shortNameUOMProductDetail, quantityProductDetail, calcComponentsPriceProductDetail READONLY,
                   componentsPriceProductDetail
    PROPERTIES(pd) markupProductDetail ON CHANGE EXEC changeMarkupProductDetail(pd), calcPremiumPriceProductDetail READONLY,
                   productsPriceProductDetail, productsSumProductDetail
    PROPERTIES(pd) READONLY BACKGROUND backgroundVATOrder(o) SHOWIF includeVATOrder(o) densityPremiumVATComponentsPriceProductDetail
    PROPERTIES(pd) ADDOBJ, delete
    PROPERTIES(o) TODRAW pd createProductOrder, fillPriceProductsOrder, deleteProductDetailOrder

    FILTERS orderProductDetail(pd)==o

    OBJECTS cd = componentDetail
    PROPERTIES(cd) BACKGROUND backgroundComponentDetail(cd) indexComponentDetail, nameSkuComponentDetail, nameMaterialComponentDetail, nameComponentComponentDetail,
                   shortNameUOMComponentDetail, bruttoQuantityComponentDetail
    PROPERTIES(cd) READONLY BACKGROUND backgroundSubstitutesOrder(o) nameSubstituteComponentDetail, multiplierSubstitutesComponentDetail, quantitySubstitutesComponentDetail
    PROPERTIES(cd) priceComponentDetail READONLY, sumComponentDetail

    PROPERTIES(o) TODRAW cd createComponentOrder, createRecComponentOrder
    PROPERTIES(cd) TODRAW cd createComponentDetail SHOWIF productComponentDetail(cd)
    PROPERTIES(cd) ADDOBJ, delete
    PROPERTIES(o) TODRAW cd deleteComponentOrder

    FILTERS orderComponentDetail(cd)==o

    OBJECTS s = sku
    PROPERTIES(s) READONLY nameSku, idBarcodeSku, shortNameUOMSku
    PROPERTIES(s,o) READONLY bruttoQuantitySkuOrder
    PROPERTIES(s,o) priceSkuOrder, sumSkuOrder
    PROPERTIES(s,o) BACKGROUND backgroundSubstitutesOrder(o) nameSubstituteSkuOrder, multiplierSkuOrder, quantitySubstitutesSkuOrder, priceSubstitutesSkuOrder
    PROPERTIES(s,o) overPriceSkuOrder, markupSkuOrder  ON CHANGE EXEC changeMarkupSkuOrder(s,o), premiumPriceSkuOrder, valueVATSkuOrder BACKGROUND backgroundVATOrder(o) SHOWIF includeVATOrder(o)
    FILTERS bruttoQuantitySkuOrder(s,o)

    PROPERTIES(o) FORCE PANEL namePriceListTypeOrder, includeVATOrder  BACKGROUND backgroundVATOrder(o), nameComponentsCalcPriceListTypeOrder

    OBJECTS su = substitute
    PROPERTIES(su) READONLY nameToSkuSubstitute, multiplierSubstitute
    PROPERTIES(su,s,o) isSubstituteSkuOrder ON CHANGE EXEC changeSubstituteSkuOrder(su,s,o)

    FILTERS fromSkuSubstitute(su) == s

    EVENTS
        ON OK EXEC prePostOrder(o)
    EDIT order OBJECT o
;

DESIGN order FROM DEFAULT{

    main {
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            type = TABBED;
            NEW row1 {
                title = 'Изделия';
                childConstraints = TO THE BOTTOM;
                NEW row11 {
                    childConstraints = TO THE BOTTOM;
                    NEW row111{
                        title = 'Цена изделий';
                        ADD PROPERTY(nameCalcPriceListTypeOrder);
                    }
                    ADD pd.box;
                }
            }
            ADD cd.box { title = 'Компоненты';}
            NEW row2 {
                title = 'Потребность';
                childConstraints = TO THE BOTTOM;
                NEW row21 {
                    childConstraints = TO THE BOTTOM;
                    NEW row211 {
                        childConstraints = TO THE RIGHT;
                        NEW row2111 {
                            title = 'Цена материалов';
                            childConstraints = TO THE RIGHTBOTTOM;
                            ADD PROPERTY(namePriceListTypeOrder);
                            ADD PROPERTY(includeVATOrder);
                        }
                        NEW row2112 {
                            title = 'Надбавка к материалам';
                            ADD PROPERTY(nameComponentsCalcPriceListTypeOrder);
                        }
                    }
                    ADD s.box;
                }
                ADD su.box;
            }
        }

        NEW header.box BEFORE specification.box {
            childConstraints = TO THE RIGHT;

            NEW headerRow1 {
                childConstraints = TO THE BOTTOM;
                ADD o.documentHeaderGroup {
                    childConstraints = TO THE RIGHTBOTTOM;
                    ADD PROPERTY(objectClassName) { preferredCharWidth = 10; }
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateOrder);
                    ADD PROPERTY(timeOrder);
                }
                NEW headerRow11 {
                    childConstraints = TO THE RIGHTBOTTOM;
                    NEW headerRow111 {
                        title = 'Склады';
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(nameComponentsStockOrder);
                        ADD PROPERTY(nameGoodsStockOrder);
                    }
                    NEW headerRow112 {
                        childConstraints = TO THE RIGHTBOTTOM;
                    }
                }
                NEW headerRow12 {
                    childConstraints = TO THE RIGHTBOTTOM;
                    ADD o.documentPrmGroup {
                        childConstraints = TO THE RIGHTBOTTOM;
                    }
                    NEW timeRow {
                        title = 'Срок действия';
                        childConstraints = TO THE RIGHTBOTTOM;
                        ADD PROPERTY(fromDateOrder);
                        ADD PROPERTY(toDateOrder);
                    }
                }
            }

            ADD o.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }

        PROPERTY(formOk) {
            caption = 'Провести';
        }
    }
}
editOrder 'Редактировать' (order) = ACTION EDITFORM order;

copyOrder 'Копировать' = ACTION (order) NEWSESSION {
    FOR ADDOBJ o = order DO {
        SET componentsStockOrder(o) <- componentsStockOrder(order);
        SET goodsStockOrder(o) <- goodsStockOrder(order);
        SET fromDateOrder(o) <- fromDateOrder(order);
        SET toDateOrder(o) <- toDateOrder(order);
        SET calcPriceListTypeOrder(o) <- calcPriceListTypeOrder(order);
        SET priceListTypeOrder(o) <- priceListTypeOrder(order);
        SET includeVATOrder(o) <- includeVATOrder(order);
        SET componentsCalcPriceListTypeOrder(o) <- componentsCalcPriceListTypeOrder(order);
        SET noteOrder(o) <- noteOrder(order);

        FOR orderProductDetail(productDetail) == order ADDOBJ p=productDetail DO {
            SET orderProductDetail(p) <- o;
            SET skuProductDetail(p) <- skuProductDetail(productDetail);
            SET productProductDetail(p) <- productProductDetail(productDetail);
            SET quantityProductDetail(p) <- quantityProductDetail(productDetail);
            SET markupProductDetail(p) <- markupProductDetail(productDetail);
        }
        FOR orderComponentDetail(componentDetail) == order ADDOBJ c=componentDetail DO {
            SET orderComponentDetail(c) <- o;
            SET skuComponentDetail(c) <- skuComponentDetail(componentDetail);
            SET productComponentDetail(c) <- productComponentDetail(componentDetail);
            SET componentComponentDetail(c) <- componentComponentDetail(componentDetail);
            SET bruttoQuantityComponentDetail(c) <- bruttoQuantityComponentDetail(componentDetail);
        }
        FOR bruttoQuantitySkuOrder(sku,order) DO {
            SET dataPriceSkuOrder(sku,o) <- dataPriceSkuOrder(sku,order);
            SET substituteSkuOrder(sku,o) <- substituteSkuOrder(sku,order);
            SET multiplierSkuOrder(sku,o) <- multiplierSkuOrder(sku,order);
        }

        FORM order OBJECTS o = o MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

FORM orders 'Производственные заказы'

    OBJECTS o = order
    PROPERTIES(o) READONLY isPostedOrder FORCE GRID, objectClassName, nameComponentsStockOrder, nameGoodsStockOrder, nameNumeratorObject, numberObject, seriesObject,
                  dateOrder, timeOrder, fromDateOrder, toDateOrder, noteOrder, quantityProductDetailOrder, productsSumProductDetailOrder, overQuantityComponentDetailOrder,
                  nameCalcPriceListTypeOrder, namePriceListTypeOrder

    PROPERTIES(o) ADDFORM, EDITFORM, copyOrder, delete FORCE PANEL DRAWTOTOOLBAR
    PROPERTIES (o) READONLY FORCE PANEL nameUserCreatedHistorizable, timeCreatedHistorizable, hostnameComputerCreatedHistorizable, nameUserClosed, timeClosed, hostnameComputerClosed

    OBJECTS pd=productDetail
    PROPERTIES(pd) READONLY indexProductDetail, nameSkuProductDetail, nameProductProductDetail, shortNameUOMProductDetail, quantityProductDetail,
                   calcComponentsPriceProductDetail, componentsPriceProductDetail, markupProductDetail, productsPriceProductDetail, productsSumProductDetail
    FILTERS orderProductDetail(pd)==o

    OBJECTS cd = componentDetail
    PROPERTIES(cd) READONLY BACKGROUND backgroundComponentDetail(cd) indexComponentDetail, nameSkuComponentDetail, nameComponentComponentDetail,
                   shortNameUOMComponentDetail, bruttoQuantityComponentDetail
    PROPERTIES(cd) READONLY BACKGROUND backgroundSubstitutesOrder(o) nameSubstituteComponentDetail, multiplierSubstitutesComponentDetail,
                   quantitySubstitutesComponentDetail
    PROPERTIES(cd) READONLY priceComponentDetail, sumComponentDetail

    FILTERS orderComponentDetail(cd)==o

    OBJECTS s = sku
    PROPERTIES(s) READONLY nameSku, idBarcodeSku, shortNameUOMSku
    PROPERTIES(s,o) READONLY bruttoQuantitySkuOrder
    PROPERTIES(s,o) READONLY priceSkuOrder, markupSkuOrder, premiumPriceSkuOrder
    FILTERS bruttoQuantitySkuOrder(s,o)

;
DESIGN orders FROM DEFAULT {
    PROPERTY (delete(o)) {
        askConfirm = TRUE;
    }

    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD o.box;

        NEW documentDetail {
            type = TABBED;

            ADD pd.box {
                title = 'Изделия';
            }
            ADD cd.box {
                title = 'Компоненты';
            }
            ADD s.box {
                title = 'Потребность';
            }
            NEW documentHistory {
                title = 'История';

                ADD o.historyGroup;
                ADD o.postedGroup;
            }
            NEW printTab {
                title = 'Печатные формы';
                NEW printContainer {
                    title = 'Печать';
                    childConstraints = TO THE BOTTOM;
                    fillVertical = 1.0;
                    fillHorizontal = 1.0;
                }
            }
        }
    }
}

FORM componentDetails 'Строка компонента'
    OBJECTS d = componentDetail
    PROPERTIES(d) READONLY indexComponentDetail, overNameSkuComponentDetail, shortNameUOMComponentDetail,
                           descriptionComponentDetail, overQuantityComponentDetail

    DIALOG componentDetail OBJECT d
;
DESIGN componentDetails FROM DEFAULT {

}

FORM productDetails 'Строка изделия'
    OBJECTS d = productDetail
    PROPERTIES(d) READONLY indexProductDetail, nameSkuProductDetail, nameProductProductDetail, shortNameUOMProductDetail, descriptionProductDetail,
                  quantityProductDetail, productsPriceProductDetail, productsSumProductDetail

    DIALOG productDetail OBJECT d
;
DESIGN productDetails FROM DEFAULT {

}

FORM requestForMaterialsOrder 'Требование на сырье' PRINT

    OBJECTS o = order FIXED PANEL
    PROPERTIES(o) nameGoodsLegalEntityStockOrder, nameComponentsStockOrder, nameGoodsStockOrder, numberObject, seriesObject, seriesNumberObject,
                  dateOrder, timeOrder, fromDateOrder, toDateOrder

    OBJECTS cd = componentDetail
    PROPERTIES(cd) READONLY indexComponentDetail, overNameSkuComponentDetail, nameComponentComponentDetail, shortNameUOMOverSkuComponentDetail,
                   idBarcodeOverSkuComponentDetail, overQuantityComponentDetail

    FILTERS orderComponentDetail(cd)==o

;
printRequestForMaterialsOrder 'Требование на сырье' (order) = ACTION FORM requestForMaterialsOrder OBJECTS o = order IMAGE 'print.png' IN printGroup;
EXTEND FORM orders
    PROPERTIES(o) FORCE PANEL printRequestForMaterialsOrder
;
EXTEND DESIGN orders {printContainer { ADD o.printGroup;}}


NAVIGATOR {
    manufacturingDocuments {
        ADD orders;
    }
}

//--  Цна без НДС (пока нигде не используется)

//componentsPriceMVATProductDetail 'Цена компонентов без НДС' = DATA NUMERIC[14,2] (productDetail);
////-- Расчет НДС без надбавок
//calcVATComponentsPriceProductDetail 'Сумма НДС' (productDetail)=
//    [GROUP SUM recPricePercentProductSkuDate (product, sku, dateOrder(order))*overPriceSkuOrder(sku, order)*(valueVATSkuOrder(sku, order)/(100+valueVATSkuOrder(sku, order)))/100
//    BY product, order](productProductDetail(productDetail), orderProductDetail(productDetail));
//densityVATComponentsPriceProductDetail 'Уд.вес НДС компонентов' (productDetail)= [100*X/(Y-X)](
//    calcVATComponentsPriceProductDetail(productDetail),calcComponentsPriceProductDetail(productDetail));

//calcComponentsPriceMVATProductDetail 'Цена компонентов без НДС' (productDetail)= [100*Y/(100+X)](
//    componentsPriceProductDetail(productDetail),
//    0.0 IF productDetail IS productDetail OR densityVATComponentsPriceProductDetail(productDetail));
//componentsPriceMVATProductDetail(productDetail) <- toNumeric14p2(calcComponentsPriceMVATProductDetail(productDetail))
//    WHEN CHANGED(calcComponentsPriceMVATProductDetail(productDetail));