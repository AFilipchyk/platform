MODULE ContractLedger;

REQUIRE Contract,
        LegalEntity,
        Numerator,
        Currency;

PRIORITY Contract;

META defineContractLedgerPrefix (caption, prefix)

    CLASS ABSTRACT contract###prefix##Ledger caption;
    TABLE contract###prefix##Ledger(contract###prefix##Ledger);

    dateTimeContract###prefix##Ledger 'Дата/время' (contract###prefix##Ledger) = ABSTRACT DATETIME (contract###prefix##Ledger) PERSISTENT;
    dateContract###prefix##Ledger 'Дата' (contract###prefix##Ledger) = dateInTime(dateTimeContract###prefix##Ledger(contract###prefix##Ledger)) PERSISTENT;
    timeContract###prefix##Ledger 'Время' (contract###prefix##Ledger) = timeInDateTime(dateTimeContract###prefix##Ledger(contract###prefix##Ledger)) PERSISTENT;

    contractContract###prefix##Ledger 'Договор' (contract###prefix##Ledger) = ABSTRACT contract (contract###prefix##Ledger) PERSISTENT;

    descriptionContract###prefix##Ledger 'Название документа' (contract###prefix##Ledger) = ABSTRACT STRING[200] (contract###prefix##Ledger) PERSISTENT;

    sumContract###prefix##Ledger 'Сумма' (contract###prefix##Ledger) = ABSTRACT NUMERIC[16,2] (contract###prefix##Ledger) PERSISTENT;

    currentBalance###prefix##Contract 'Текущая сумма задолженности по договору' (contract)=
        GROUP SUM sumContract###prefix##Ledger(contract###prefix##Ledger)
              BY contractContract###prefix##Ledger(contract###prefix##Ledger) PERSISTENT;

    balanceB###prefix##ContractDate 'Сумма задолженности по договору на дату (до)' (contract, date) =
        (currentBalance###prefix##Contract(contract) AND date AS DATE) (-)
        [GROUP SUM sumContract###prefix##Ledger(contract###prefix##Ledger)
                  IF dateContract###prefix##Ledger(contract###prefix##Ledger) >= (date AS DATE)
              BY contractContract###prefix##Ledger(contract###prefix##Ledger), date](contract, date);

    balanceA###prefix##ContractDate 'Сумма задолженности по договору на дату (после)' (contract, date) =
        (currentBalance###prefix##Contract(contract) AND date AS DATE) (-)
        [GROUP SUM sumContract###prefix##Ledger(contract###prefix##Ledger)
                  IF dateContract###prefix##Ledger(contract###prefix##Ledger) > (date AS DATE)
              BY contractContract###prefix##Ledger(contract###prefix##Ledger), date](contract, date);

END

@defineContractLedgerPrefix('Изменение управленческого долга по контракту', );
@defineContractLedgerPrefix('Изменение бухгалтерского долга по контракту', a);

META implementContractLedger(prefix, object)

    dateTimeContract###prefix##Ledger(contract###prefix##Ledger) += dateTime###object(contract###prefix##Ledger);
    contractContract###prefix##Ledger(contract###prefix##Ledger) += contract###object(contract###prefix##Ledger);
    descriptionContract###prefix##Ledger(contract###prefix##Ledger) += description###object(contract###prefix##Ledger);

END

META implementContractPrepaymentLedger(object, sumProp)

    CLASS object##ContractLedger : contractLedger;
    //TABLE object##ContractLedger(object##ContractLedger);

    needToCreate###object##ContractLedger (object, paymentPeriod) =
        isSaleTypePrepaymentFormPaymentCondition(paymentConditionContractDate(contract###object(object), date###object(object))) AND paymentPeriod IS paymentPeriod;

    @defineAggregationDouble(object, paymentPeriod, object##ContractLedger, needToCreate###object##ContractLedger);

    dateTimeContractLedger(object##ContractLedger) += sumDateTimeDay(dateTime###object(object###object##ContractLedger(object##ContractLedger)),
                                                                     countDaysPaymentPeriod(paymentPeriod###object##ContractLedger(object##ContractLedger)));
    contractContractLedger(object##ContractLedger) += contract###object(object###object##ContractLedger(object##ContractLedger));
    descriptionContractLedger(object##ContractLedger) += description###object(object###object##ContractLedger(object##ContractLedger));
    sumContractLedger(object##ContractLedger) +=
        sumProp(object###object##ContractLedger(object##ContractLedger)) * percentPaymentPeriod(paymentPeriod###object##ContractLedger(object##ContractLedger)) / 100.0;

END

//--------------------------------------------- Логика приходов и расходов ------------------------------------------------------//

META defineOutContractLedgerInContractLedgerPrefix(caption, prefix)

    CLASS ABSTRACT prefix##ContractLedger caption;
    TABLE prefix##ContractLedger(prefix##ContractLedger);

    dateTime###prefix##ContractLedger 'Дата/время' (prefix##ContractLedger) = ABSTRACT DATETIME (prefix##ContractLedger);
    date###prefix##ContractLedger 'Дата' (prefix##ContractLedger) = dateInTime(dateTime###prefix##ContractLedger(prefix##ContractLedger));
    time###prefix##ContractLedger 'Время' (prefix##ContractLedger) = timeInDateTime(dateTime###prefix##ContractLedger(prefix##ContractLedger));

    contract###prefix##ContractLedger 'Договор' (prefix##ContractLedger) = ABSTRACT contract (prefix##ContractLedger) PERSISTENT;

    paymentCondition###prefix##ContractLedger 'Условия оплаты' (prefix##ContractLedger) =
        paymentConditionContractDate(contract###prefix##ContractLedger(prefix##ContractLedger), date###prefix##ContractLedger(prefix##ContractLedger));

    description###prefix##ContractLedger 'Название документа' (prefix##ContractLedger) = ABSTRACT STRING[200] (prefix##ContractLedger) PERSISTENT;
    sum###prefix##ContractLedger 'Сумма' = ABSTRACT NUMERIC[16,2] (prefix##ContractLedger) PERSISTENT;

END

@defineOutContractLedgerInContractLedgerPrefix('Приход', in);
@defineOutContractLedgerInContractLedgerPrefix('Расход', out);

TABLE outContractLedgerInContractLedger (outContractLedger, inContractLedger);
costOutContractLedgerInContractLedger 'Оплачено из документа' (outContractLedger, inContractLedger) = DATA NUMERIC[16,2] (outContractLedger, inContractLedger) PERSISTENT;
costedOutContractLedgerInContractLedger 'Оплачено по документу' (inContractLedger) =
    GROUP SUM costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) BY inContractLedger PERSISTENT;
costedOutContractLedgerInContractLedgerDate 'Оплачено по документу на дату' (inContractLedger, date) =
    GROUP SUM costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) AND
              dateOutContractLedger(outContractLedger) <= (date AS DATE)
    BY inContractLedger, date;
costedInContractLedgerOutContractLedger 'Расписано из документа' (outContractLedger) =
    GROUP SUM costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) BY outContractLedger PERSISTENT;
costedInContractLedgerOutContractLedgerDate 'Расписано из документа на дату' (outContractLedger, date) =
    GROUP SUM costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) AND
              dateInContractLedger(inContractLedger) <= (date AS DATE)
    BY outContractLedger, date;

debtInContractLedger 'Долг по документу' (inContractLedger) =
    sumInContractLedger(inContractLedger) (-) costedOutContractLedgerInContractLedger(inContractLedger) PERSISTENT;

debtInContractLedgerDate 'Долг по документу на дату' (inContractLedger, date) =
    sumInContractLedger(inContractLedger) (-) costedOutContractLedgerInContractLedgerDate(inContractLedger, date);

appliedInContractLedgerBonusPeriod(inContractLedger, bonusPeriod) =
    debtInContractLedgerDate(inContractLedger, sumDate(dateInContractLedger(inContractLedger), countDaysBonusPeriod(bonusPeriod))) <= 0.0
    AND contractInContractLedger(inContractLedger) == contractPaymentCondition(paymentConditionBonusPeriod(bonusPeriod));

daysBonusPeriodInContractLedger(inContractLedger, date) =
    GROUP MIN countDaysBonusPeriod(bonusPeriod) AND
              contractInContractLedger(inContractLedger) == contractPaymentCondition(paymentConditionBonusPeriod(bonusPeriod)) AND
              sumDate(dateInContractLedger(inContractLedger), countDaysBonusPeriod(bonusPeriod)) >= (date AS DATE)
              //appliedInContractLedgerBonusPeriod(inContractLedger, bonusPeriod)
    BY inContractLedger, date;

bonusPeriodInContractLedger(inContractLedger, date) =
    bonusPeriodPaymentConditionDays(paymentConditionInContractLedger(inContractLedger), daysBonusPeriodInContractLedger(inContractLedger, date));

bonusSumInContractLedger 'Сумма бонуса' (inContractLedger, date) =
    sumInContractLedger(inContractLedger) * percentBonusPeriod(bonusPeriodInContractLedger(inContractLedger, date))/100
    IF debtInContractLedger(inContractLedger) > 0.0;

bonusDebtSumInContractLedgerDate 'Сумма долга по документу с учетом бонуса' (inContractLedger, date) =
    debtInContractLedgerDate(inContractLedger, date) (-) bonusSumInContractLedger(inContractLedger, date);

CONSTRAINT costedInContractLedgerOutContractLedger(outContractLedger) > sumOutContractLedger(outContractLedger)
    MESSAGE 'Расписанная сумма должна быть равна сумме платежа';

orderInContractLedger(inContractLedger) = LIST(dateTimeInContractLedger(inContractLedger), inContractLedger);

sumInFIFOOutContractLedgerInContractLedger (outContractLedger, inContractLedger) =
    PARTITION UNGROUP sumOutContractLedger
              LIMIT debtInContractLedger(inContractLedger) AND
                    contractOutContractLedger(outContractLedger) == contractInContractLedger(inContractLedger)
              BY outContractLedger
              ORDER orderInContractLedger(inContractLedger);

sumInLIFOOutContractLedgerInContractLedger (outContractLedger, inContractLedger) =
    PARTITION UNGROUP sumOutContractLedger
              LIMIT debtInContractLedger(inContractLedger) AND (outContractLedger IS outContractLedger) AND
                    contractOutContractLedger(outContractLedger) == contractInContractLedger(inContractLedger)
              BY outContractLedger
              ORDER DESC orderInContractLedger(inContractLedger);

writeOutContractLedgerFIFO 'Расписать по FIFO' = ACTION (outContractLedger) {

    SET costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) <- NULL;
    SET costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) <- sumInFIFOOutContractLedgerInContractLedger(outContractLedger, inContractLedger);
}

writeOutContractLedgerLIFO 'Расписать по LIFO' = ACTION (outContractLedger) {

    SET costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) <- NULL;
    SET costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) <- sumInLIFOOutContractLedgerInContractLedger(outContractLedger, inContractLedger);
}

META implementOutContractLedgerInContractLedgerPrefix(prefix, object)

    dateTime###prefix##ContractLedger(prefix##ContractLedger) += dateTime###object(prefix##ContractLedger);
    contract###prefix##ContractLedger(prefix##ContractLedger) += contract###object(prefix##ContractLedger);
    description###prefix##ContractLedger(prefix##ContractLedger) += description###object(prefix##ContractLedger);

END

//-------------------------------------------- Логика платежей ----------------------------------------------------------------//

CLASS payment 'Платеж' : numeratedObject, contractLedger, contractALedger, outContractLedger;
TABLE payment(payment);

@defineNumeratedObject(payment, 'Нумератор для платежей', 'ПЛ');

dateTimePayment 'Дата время' (payment) = DATA DATETIME (payment) PERSISTENT;
dateTimePayment(payment) <- currentDateTime() WHEN ASSIGNED(payment IS payment);
datePayment 'Дата' (payment) = dateInTime(dateTimePayment(payment));
timePayment 'Время' (payment) = timeInDateTime(dateTimePayment(payment));

contractPayment 'Контракт' (payment) = DATA contract (payment) AUTOSET  PERSISTENT;
numberContractPayment 'Номер контракта' (payment) = numberContract(contractPayment(payment));

payerPayment(payment) = DATA legalEntity (payment) PERSISTENT;
payerPayment(payment) <- partyBContract(contractPayment(payment)) WHEN ASSIGNED (contractPayment(payment));
namePayerPayment 'Сторона Б(Плательщик)' (payment) = name(payerPayment(payment));
beneficiaryPayment(payment) = DATA legalEntity (payment) PERSISTENT;
beneficiaryPayment(payment) <- partyAContract(contractPayment(payment)) WHEN ASSIGNED (contractPayment(payment));
nameBeneficiaryPayment 'Сторона А(Бенефициар)' (payment) = name(beneficiaryPayment(payment));

currencyPayment 'Валюта платежа' (payment) = DATA currency (payment) PERSISTENT;
nameCurrencyPayment 'Валюта платежа' (payment) = name(currencyPayment(payment));
typeExchangePayment (payment) = DATA typeExchange (payment) PERSISTENT;
nameTypeExchangePayment 'Тип обмена' (payment) = name(typeExchangePayment(payment));
rateExchangePayment 'Курс' (payment) = DATA NUMERIC[15,8] (payment) PERSISTENT;
rateExchangePayment (payment) <- UNION OVERRIDE 1.0 IF payment IS payment, rateTypeExchangeCurrencyDate(typeExchangePayment(payment), currencyPayment(payment), datePayment(payment))
    WHEN CHANGED (currencyPayment(payment)) OR
         CHANGED (typeExchangePayment(payment)) OR
         CHANGED (datePayment(payment));

CONSTRAINT currencyTypeExchange(typeExchangePayment(payment)) != currencyContract(contractPayment(payment))
    CHECKED BY typeExchangePayment MESSAGE 'Валюта типа обмена должны соответствовать валюте договора+';

sumPayment 'Сумма платежа' (payment) = DATA NUMERIC[16,2] (payment) PERSISTENT;
sumRateExchangePayment 'Сумма платежа(конверт.)' (payment) = sumPayment(payment) / rateExchangePayment(payment);

isNotSameCurrencyPayment (payment) = currencyContract(contractPayment(payment)) != currencyPayment(payment);

descriptionPayment 'Название документа' =
    [FORMULA STRING[200] '\'Платеж \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberObject(payment), datePayment(payment), nameBeneficiaryPayment(payment)) PERSISTENT;

@implementContractLedger( ,payment);
sumContractLedger(contractLedger) += -sumRateExchangePayment(contractLedger);

@implementContractLedger(a ,payment);
sumContractALedger(contractALedger) += -sumRateExchangePayment(contractALedger);

@implementOutContractLedgerInContractLedgerPrefix(out, payment);
sumOutContractLedger(outContractLedger) += sumRateExchangePayment(outContractLedger);

FORM payment 'Платеж'

    OBJECTS p = payment FIXED PANEL, i = inContractLedger
    PROPERTIES(p) nameNumeratorObject, numberObject, seriesObject, dateTimePayment, numberContractPayment
    PROPERTIES(p) READONLY namePayerPayment, nameBeneficiaryPayment
    PROPERTIES(p) nameCurrencyPayment, nameTypeExchangePayment SHOWIF isNotSameCurrencyPayment(p), sumPayment,
                  rateExchangePayment SHOWIF isNotSameCurrencyPayment(p),
                  sumRateExchangePayment SHOWIF isNotSameCurrencyPayment(p),
                  costedInContractLedgerOutContractLedger,
                  writeOutContractLedgerFIFO TODRAW i FORCE PANEL,
                  writeOutContractLedgerLIFO TODRAW i FORCE PANEL

    PROPERTIES(i) READONLY descriptionInContractLedger, debtInContractLedger
    PROPERTIES(p, i) costOutContractLedgerInContractLedger

    FILTERS contractPayment(p) == contractInContractLedger(i)

    EDIT payment OBJECT p
;

DESIGN payment FROM DEFAULT{

    NEW topContainer{

        childConstraints = TO THE RIGHT;
        ADD PROPERTY(nameNumeratorObject);
        ADD PROPERTY(numberObject);
        ADD PROPERTY(seriesObject);
        ADD PROPERTY(dateTimePayment);
    }

    ADD PROPERTY(numberContractPayment);
    ADD PROPERTY(namePayerPayment);
    ADD PROPERTY(nameBeneficiaryPayment);
    ADD PROPERTY(nameCurrencyPayment);
    ADD PROPERTY(nameTypeExchangePayment);
    ADD PROPERTY(sumPayment);
    ADD PROPERTY(rateExchangePayment);
    ADD PROPERTY(sumRateExchangePayment);
    ADD PROPERTY(costedInContractLedgerOutContractLedger);
    POSITION PROPERTY(writeOutContractLedgerLIFO) TO THE RIGHT PROPERTY(writeOutContractLedgerFIFO);

    ADD i.box;

    ADD functions.box;
}

partyA = SESSION DATA legalEntity();
namePartyA 'Сторона А' = name(partyA());
partyB = SESSION DATA legalEntity();
namePartyB 'Сторона Б' = name(partyB());

FORM payments 'Платежи'

    OBJECTS d = DATE FIXED PANEL
    PROPERTIES(d) date = OBJVALUE

    PROPERTIES() namePartyA, namePartyB

    OBJECTS p = payment
    PROPERTIES(p) READONLY numberObject, seriesObject, dateTimePayment, numberContractPayment, namePayerPayment,
                           nameBeneficiaryPayment, nameCurrencyPayment, nameTypeExchangePayment, sumPayment,
                           rateExchangePayment, sumRateExchangePayment

    PROPERTIES(p) ADDFORM, EDITFORM, delete

    FILTERS payerPayment(p) == partyB() OR (p IS payment AND NOT partyB()),
            beneficiaryPayment(p) == partyA() OR (p IS payment AND NOT partyA()),
            datePayment(p) <= d

;

DESIGN payments FROM DEFAULT{

    NEW headerContainer {
        childConstraints = TO THE RIGHT;
        caption = 'Шапка';
        ADD PROPERTY(date);
        ADD PROPERTY(namePartyA);
        ADD PROPERTY(namePartyB);
    }
    ADD p.box;
    ADD functions.box;
}

//--------------------------------------------- Платежное требование ------------------------------------------------------//

CLASS paymentRequest 'Платежное требование' : numeratedObject, contractLedger, inContractLedger;
TABLE paymentRequest(paymentRequest);

@defineNumeratedObject(paymentRequest, 'Нумератор для платежных требований', 'ПТ');

dateTimePaymentRequest 'Дата время' (paymentRequest) = DATA DATETIME (paymentRequest) PERSISTENT;
dateTimePaymentRequest(paymentRequest) <- currentDateTime() WHEN ASSIGNED(paymentRequest IS paymentRequest);
datePaymentRequest 'Дата' (paymentRequest) = dateInTime(dateTimePaymentRequest(paymentRequest));
timePaymentRequest 'Время' (paymentRequest) = timeInDateTime(dateTimePaymentRequest(paymentRequest));

contractPaymentRequest 'Контракт' (paymentRequest) = DATA contract (paymentRequest) AUTOSET PERSISTENT;
numberContractPaymentRequest 'Номер контракта' (paymentRequest) = numberContract(contractPaymentRequest(paymentRequest));

payerPaymentRequest(paymentRequest) = DATA legalEntity (paymentRequest) PERSISTENT;
payerPaymentRequest(paymentRequest) <- partyBContract(contractPaymentRequest(paymentRequest)) WHEN ASSIGNED (contractPaymentRequest(paymentRequest));
namePayerPaymentRequest 'Сторона Б' (paymentRequest) = name(payerPaymentRequest(paymentRequest));
lenderPaymentRequest(paymentRequest) = DATA legalEntity (paymentRequest) PERSISTENT;
lenderPaymentRequest(paymentRequest) <- partyAContract(contractPaymentRequest(paymentRequest)) WHEN ASSIGNED (contractPaymentRequest(paymentRequest));
nameLenderPaymentRequest 'Сторона А' (paymentRequest) = name(lenderPaymentRequest(paymentRequest));

sumPaymentRequest 'Сумма' (paymentRequest) = DATA NUMERIC[16,2] (paymentRequest) PERSISTENT;

descriptionPaymentRequest 'Название документа' =
    [FORMULA STRING[200] '\'Платежное требование \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberObject(paymentRequest), datePaymentRequest(paymentRequest), nameLenderPaymentRequest(paymentRequest)) PERSISTENT;

@implementContractLedger( ,paymentRequest);
sumContractLedger(contractLedger) += sumPaymentRequest(contractLedger);

FORM paymentRequest 'Платежное требование'

    OBJECTS p = paymentRequest FIXED PANEL
    PROPERTIES(p) nameNumeratorObject, numberObject, seriesObject, dateTimePaymentRequest,
                  numberContractPaymentRequest
    PROPERTIES(p) READONLY namePayerPaymentRequest, nameLenderPaymentRequest
    PROPERTIES(p) sumPaymentRequest

    EDIT paymentRequest OBJECT p
;

DESIGN paymentRequest FROM DEFAULT{

    NEW topContainer{

        childConstraints = TO THE RIGHT;
        ADD PROPERTY(nameNumeratorObject);
        ADD PROPERTY(numberObject);
        ADD PROPERTY(seriesObject);
        ADD PROPERTY(dateTimePaymentRequest);
    }

    ADD PROPERTY(numberContractPaymentRequest);
    ADD PROPERTY(namePayerPaymentRequest);
    ADD PROPERTY(nameLenderPaymentRequest);
    ADD PROPERTY(sumPaymentRequest);

    ADD functions.box;
}

//-------------------------------------------- Кредитная нота --------------------------------------------------------//

CLASS ABSTRACT creditMemo 'Кредитная нота' : numeratedObject;
TABLE creditMemo(creditMemo);

META defineCreditMemoPrefix(prefix, caption)

    CLASS creditMemo###prefix caption : creditMemo, contractLedger, contractALedger, prefix##ContractLedger;

    @defineNumeratedObject(creditMemo###prefix, 'Нумератор для кредитных нот', 'КН');

    dateTimeCreditMemo###prefix 'Дата время' (creditMemo###prefix) = DATA DATETIME (creditMemo###prefix) PERSISTENT;
    dateTimeCreditMemo###prefix(creditMemo###prefix) <- currentDateTime() WHEN ASSIGNED(creditMemo###prefix IS creditMemo###prefix);
    dateCreditMemo###prefix 'Дата' (creditMemo###prefix) = dateInTime(dateTimeCreditMemo###prefix(creditMemo###prefix));
    timeCreditMemo###prefix 'Время' (creditMemo###prefix) = timeInDateTime(dateTimeCreditMemo###prefix(creditMemo###prefix));

    contractCreditMemo###prefix 'Контракт' (creditMemo###prefix) = DATA contract (creditMemo###prefix) AUTOSET PERSISTENT;
    numberContractCreditMemo###prefix 'Номер контракта' (creditMemo###prefix) = numberContract(contractCreditMemo###prefix(creditMemo###prefix));

    partyBCreditMemo###prefix(creditMemo###prefix) = DATA legalEntity (creditMemo###prefix) PERSISTENT;
    partyBCreditMemo###prefix(creditMemo###prefix) <- partyBContract(contractCreditMemo###prefix(creditMemo###prefix))
        WHEN ASSIGNED (contractCreditMemo###prefix(creditMemo###prefix));
    namePartyBCreditMemo###prefix 'Сторона Б' (creditMemo###prefix) = name(partyBCreditMemo###prefix(creditMemo###prefix));
    partyACreditMemo###prefix(creditMemo###prefix) = DATA legalEntity (creditMemo###prefix) PERSISTENT;
    partyACreditMemo###prefix(creditMemo###prefix) <- partyAContract(contractCreditMemo###prefix(creditMemo###prefix))
        WHEN ASSIGNED (contractCreditMemo###prefix(creditMemo###prefix));
    namePartyACreditMemo###prefix 'Сторона А' (creditMemo###prefix) = name(partyACreditMemo###prefix(creditMemo###prefix));

    sumCreditMemo###prefix 'Сумма' (creditMemo###prefix) = DATA NUMERIC[16,2] (creditMemo###prefix) PERSISTENT;

    descriptionCreditMemo###prefix 'Название документа' =
        [FORMULA STRING[200] '\''###caption###' \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
        seriesNumberObject(creditMemo###prefix), dateCreditMemo###prefix(creditMemo###prefix), namePartyACreditMemo###prefix(creditMemo###prefix)) PERSISTENT;

END

META defineCreditMemoUnion (prop, caption)

    prop##CreditMemo caption (creditMemo) = UNION EXCLUSIVE prop##CreditMemoIn(creditMemo), prop##CreditMemoOut(creditMemo);

END

@defineCreditMemoPrefix(in, 'Кредитная нота');
@defineCreditMemoPrefix(out, 'Дебетная нота');

@defineCreditMemoUnion(dateTime, 'Дата время');
dateCreditMemo 'Дата' (creditMemo) = dateInTime(dateTimeCreditMemo(creditMemo));
timeCreditMemo 'Время' (creditMemo) = timeInDateTime(dateTimeCreditMemo(creditMemo));
@defineCreditMemoUnion(contract, 'Контракт');
numberContractCreditMemo 'Номер контракта' (creditMemo) = numberContract(contractCreditMemo(creditMemo));
@defineCreditMemoUnion(partyB, );
namePartyBCreditMemo 'Сторона Б' (creditMemo) = name(partyBCreditMemo(creditMemo));
@defineCreditMemoUnion(partyA, );
namePartyACreditMemo 'Сторона А' (creditMemo) = name(partyACreditMemo(creditMemo));
@defineCreditMemoUnion(sum, 'Сумма');
@defineCreditMemoUnion(description, 'Название документа');

isCreditMemoOut(creditMemo) = creditMemo IS creditMemoOut;

@implementContractLedger( ,creditMemoIn);
sumContractLedger(contractLedger) += sumCreditMemoIn(contractLedger);

@implementContractLedger(a ,creditMemoIn);
sumContractALedger(contractALedger) += sumCreditMemoIn(contractALedger);

@implementOutContractLedgerInContractLedgerPrefix(in, creditMemoIn);
sumInContractLedger(inContractLedger) += sumCreditMemoIn(inContractLedger);

@implementContractLedger( ,creditMemoOut);
sumContractLedger(contractLedger) += -sumCreditMemoOut(contractLedger);

@implementContractLedger(a ,creditMemoOut);
sumContractALedger(contractALedger) += -sumCreditMemoOut(contractALedger);

@implementOutContractLedgerInContractLedgerPrefix(out, creditMemoOut);
sumOutContractLedger(outContractLedger) += sumCreditMemoOut(outContractLedger);

FORM creditMemo 'Кредитная нота'

    OBJECTS c = creditMemo FIXED PANEL, i = inContractLedger
    PROPERTIES(c) nameNumeratorObject, numberObject, seriesObject, dateTimeCreditMemo, numberContractCreditMemo
    PROPERTIES(c) READONLY namePartyBCreditMemo, namePartyACreditMemo
    PROPERTIES(c) sumCreditMemo,
                  costedInContractLedgerOutContractLedger SHOWIF isCreditMemoOut(c),
                  writeOutContractLedgerFIFO TODRAW i FORCE PANEL SHOWIF isCreditMemoOut(c),
                  writeOutContractLedgerLIFO TODRAW i FORCE PANEL SHOWIF isCreditMemoOut(c)

    PROPERTIES(i) READONLY descriptionInContractLedger SHOWIF isCreditMemoOut(c), debtInContractLedger SHOWIF isCreditMemoOut(c)
    PROPERTIES(c, i) costOutContractLedgerInContractLedger SHOWIF isCreditMemoOut(c)

    FILTERS contractCreditMemo(c) == contractInContractLedger(i)


    EDIT creditMemo OBJECT c
;

DESIGN creditMemo FROM DEFAULT{

    NEW topContainer{

        childConstraints = TO THE RIGHT;
        ADD PROPERTY(nameNumeratorObject);
        ADD PROPERTY(numberObject);
        ADD PROPERTY(seriesObject);
        ADD PROPERTY(dateTimeCreditMemo);
    }

    ADD PROPERTY(numberContractCreditMemo);
    ADD PROPERTY(namePartyBCreditMemo);
    ADD PROPERTY(namePartyACreditMemo);
    ADD PROPERTY(sumCreditMemo);
    ADD PROPERTY(costedInContractLedgerOutContractLedger);
    POSITION PROPERTY(writeOutContractLedgerLIFO) TO THE RIGHT PROPERTY(writeOutContractLedgerFIFO);

    ADD i.box;

    ADD functions.box;
}

//------------------------------------------- Платеж по договору -----------------------------------------------------//

debtSumContractDate 'Долг по договору на дату' (contract, date) = GROUP SUM debtInContractLedgerDate(inContractLedger, date) AND
                                                                            dateInContractLedger(inContractLedger) <= (date AS DATE)
                                                                  BY contractInContractLedger(inContractLedger), date;

bonusSumContractDate 'Сумма бонуса на дату' (contract, date) = GROUP SUM bonusSumInContractLedger(inContractLedger, date) AND
                                                                         dateInContractLedger(inContractLedger) <= (date AS DATE)
                                                               BY contractInContractLedger(inContractLedger), date;

bonusDebtSumContractDate 'Сумма долга с учетом бонуса' (contract, date) =
    debtSumContractDate(contract, date) (-) bonusSumContractDate(contract, date);

payContractDate 'Оплатить по договору' = ACTION (contract, date) NEWSESSION {

    ADDOBJ payment;
    FOR pm == addedObject() DO {
        SET dateTimePayment(pm) <- timeDate(date AS DATE);
        SET contractPayment(pm) <- contract AS contract;
        SET currencyPayment(pm) <- currencyContract(contract);
        SET sumPayment(pm) <- debtSumContractDate(contract, date);
        SET costOutContractLedgerInContractLedger(pm, inContractLedger) <- debtInContractLedgerDate(inContractLedger, date)
            WHERE contractPayment(pm) == contractInContractLedger(inContractLedger);
        FORM payment OBJECTS p = pm MODAL;
        IF formResult() == formResult.ok THEN {
            EXEC apply();
        }
    }

}

//------------------------------------------- Платеж c учетом бонусов договора --------------------------------------------//

payPaymentConditionInContractLedgerDate 'Оплатить c учетом бонусов договора' = [ACTION (inContractLedger, date) NEWSESSION {

    ADDOBJ payment;
    FOR pm == addedObject() DO {
        SET dateTimePayment(pm) <- timeDate(date AS DATE);
        SET contractPayment(pm) <- contractInContractLedger(inContractLedger);
        SET currencyPayment(pm) <- currencyContract(contractInContractLedger(inContractLedger));
        SET sumPayment(pm) <- bonusDebtSumInContractLedgerDate(inContractLedger, date);
        SET costOutContractLedgerInContractLedger(pm, inContractLedger) <- bonusDebtSumInContractLedgerDate(inContractLedger, date);
        FORM payment OBJECTS p = pm MODAL;
        IF formResult() == formResult.ok THEN {
            ADDOBJ creditMemoOut;
            FOR cm == addedObject() DO {
                SET dateTimeCreditMemoOut(cm) <- timeDate(date AS DATE);
                SET contractCreditMemoOut(cm) <- contractInContractLedger(inContractLedger);
                SET sumCreditMemoOut(cm) <- bonusSumInContractLedger(inContractLedger, date);
                SET costOutContractLedgerInContractLedger(cm, inContractLedger) <- bonusSumInContractLedger(inContractLedger, date);
                FORM creditMemo OBJECTS c = cm MODAL;
                IF formResult() == formResult.ok THEN {
                    EXEC apply();
                }
            }
        }
    }
}](inContractLedger, date) AND bonusSumInContractLedger(inContractLedger, date) > 0.0;

payPaymentConditionContractDate 'Оплатить c учетом бонусов договора' = [ACTION (contract, date) NEWSESSION {

    ADDOBJ payment;
    FOR pm == addedObject() DO {
        SET dateTimePayment(pm) <- timeDate(date AS DATE);
        SET contractPayment(pm) <- contract AS contract;
        SET currencyPayment(pm) <- currencyContract(contract);
        SET sumPayment(pm) <- bonusDebtSumContractDate(contract, date);
        SET costOutContractLedgerInContractLedger(pm, inContractLedger) <- bonusDebtSumInContractLedgerDate(inContractLedger, date)
            WHERE contractPayment(pm) == contractInContractLedger(inContractLedger);
        FORM payment OBJECTS p = pm MODAL;
        IF formResult() == formResult.ok THEN {
            ADDOBJ creditMemoOut;
            FOR cm == addedObject() DO {
                SET dateTimeCreditMemoOut(cm) <- timeDate(date AS DATE);
                SET contractCreditMemoOut(cm) <- contract AS contract;
                SET sumCreditMemoOut(cm) <- bonusSumContractDate(contract, date);
                SET costOutContractLedgerInContractLedger(cm, inContractLedger) <- bonusSumInContractLedger(inContractLedger, date)
                    WHERE contractCreditMemo(cm) == contractInContractLedger(inContractLedger);
                FORM creditMemo OBJECTS c = cm MODAL;
                IF formResult() == formResult.ok THEN {
                    EXEC apply();
                }
            }
        }
    }

}](contract, date) AND bonusSumContractDate(contract, date) > 0.0;

//----------------------------------------------- Цвета --------------------------------------------------------------//

backgroundSumContractLedger 'Цвет' (contractLedger) = RGB(255,238,165) AND contractLedger IS contractLedger;
backgroundContractLedgerDate 'Цвет' (contractLedger, date) = RGB(255,160,160) AND dateContractLedger(contractLedger) > (date AS DATE);
backgroundSumContract 'Цвет' (contract) = RGB(255,238,165) AND contract IS contract;
backgroundSumContractALedger 'Цвет' (contractALedger) = RGB(232,184,146) AND contractALedger IS contractALedger;
backgroundContractALedgerDate 'Цвет' (contractALedger, date) = RGB(255,160,160) AND dateContractALedger(contractALedger) > (date AS DATE);
backgroundSumContractA 'Цвет' (contract) = RGB(232,184,146) AND contract IS contract;
backgroundBonusSumInContractLedger 'Цвет' (inContractLedger) = RGB(213,249,185) AND inContractLedger IS inContractLedger;
backgroundBonusSumContract 'Цвет' (contract) = RGB(213,249,185) AND contract IS contract;
backgroundPaymentDate 'Цвет' (payment, date) = RGB(255,160,160) AND datePayment(payment) > (date AS DATE);
backgroundPaymentRequestDate 'Цвет' (paymentRequest, date) = RGB(255,160,160) AND datePaymentRequest(paymentRequest) > (date AS DATE);
backgroundCreditMemoDate 'Цвет' (creditMemo, date) = RGB(255,160,160) AND dateCreditMemo(creditMemo) > (date AS DATE);

//-------------------------------------------- Сводная форма ---------------------------------------------------------//

FORM contractLedger 'Задолженности и платежи по договору'

    OBJECTS d = DATE FIXED PANEL
    PROPERTIES(d) date = OBJVALUE

    PROPERTIES() namePartyA, namePartyB

    OBJECTS c = contract
    PROPERTIES(c) READONLY numberContract, namePartyAContract, namePartyBContract, nameCurrencyContract
    PROPERTIES(c, d) READONLY balanceAContractDate BACKGROUND backgroundSumContract(c),
                              balanceAAContractDate BACKGROUND backgroundSumContractA(c),
                              debtSumContractDate BACKGROUND backgroundBonusSumContract(c),
                              bonusSumContractDate BACKGROUND backgroundBonusSumContract(c),
                              bonusDebtSumContractDate BACKGROUND backgroundBonusSumContract(c)
    PROPERTIES(c, d) FORCE PANEL payContractDate, payPaymentConditionContractDate
    ORDER BY numberContract

    OBJECTS cl = contractLedger
    PROPERTIES(cl) READONLY dateContractLedger BACKGROUND backgroundContractLedgerDate(cl, d),
                            sumContractLedger BACKGROUND backgroundSumContractLedger(cl),
                            descriptionContractLedger BACKGROUND backgroundContractLedgerDate(cl, d)
    ORDER BY dateContractLedger

    OBJECTS cal = contractALedger
    PROPERTIES(cal) READONLY dateContractALedger BACKGROUND backgroundContractALedgerDate(cal, d),
                             sumContractALedger BACKGROUND backgroundSumContractALedger(cal),
                             descriptionContractALedger BACKGROUND backgroundContractALedgerDate(cal, d)
    ORDER BY dateContractALedger

    OBJECTS pm = payment
    PROPERTIES(pm) READONLY dateTimePayment BACKGROUND backgroundPaymentDate(pm, d),
                            seriesNumberObject BACKGROUND backgroundPaymentDate(pm, d),
                            namePayerPayment BACKGROUND backgroundPaymentDate(pm, d),
                            nameBeneficiaryPayment BACKGROUND backgroundPaymentDate(pm, d),
                            nameCurrencyPayment BACKGROUND backgroundPaymentDate(pm, d),
                            nameTypeExchangePayment BACKGROUND backgroundPaymentDate(pm, d) SHOWIF isNotSameCurrencyPayment(pm),
                            sumPayment BACKGROUND backgroundPaymentDate(pm, d),
                            rateExchangePayment BACKGROUND backgroundPaymentDate(pm, d) SHOWIF isNotSameCurrencyPayment(pm),
                            sumRateExchangePayment BACKGROUND backgroundPaymentDate(pm, d) SHOWIF isNotSameCurrencyPayment(pm),
                            costedInContractLedgerOutContractLedger BACKGROUND backgroundPaymentDate(pm, d)
    PROPERTIES(pm) FORCE PANEL writeOutContractLedgerFIFO, writeOutContractLedgerLIFO
    PROPERTIES(pm) ADDFORM, EDITFORM, delete
    ORDER BY dateTimePayment

    OBJECTS pr = paymentRequest
    PROPERTIES(pr) READONLY dateTimePaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            seriesNumberObject BACKGROUND backgroundPaymentRequestDate(pr, d),
                            sumPaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d)
    PROPERTIES(pr) ADDFORM, EDITFORM, delete
    ORDER BY dateTimePaymentRequest

    OBJECTS cm = creditMemo
    PROPERTIES(cm) READONLY objectClassName BACKGROUND backgroundCreditMemoDate(cm, d),
                            dateTimeCreditMemo BACKGROUND backgroundCreditMemoDate(cm, d),
                            seriesNumberObject BACKGROUND backgroundCreditMemoDate(cm, d),
                            sumCreditMemo BACKGROUND backgroundCreditMemoDate(cm, d)
    PROPERTIES(cm) FORCE GRID READONLY costedInContractLedgerOutContractLedger BACKGROUND backgroundCreditMemoDate(cm, d) SHOWIF isCreditMemoOut(cm)
    PROPERTIES(cm) FORCE PANEL writeOutContractLedgerFIFO SHOWIF isCreditMemoOut(cm),
                               writeOutContractLedgerLIFO SHOWIF isCreditMemoOut(cm)
    PROPERTIES(cm) ADDFORM, EDITFORM, delete
    ORDER BY dateTimeCreditMemo


    OBJECTS ic = inContractLedger
    PROPERTIES(ic) READONLY descriptionInContractLedger, sumInContractLedger
    PROPERTIES(ic, d) READONLY debtInContractLedgerDate BACKGROUND backgroundBonusSumInContractLedger(ic),
                               bonusSumInContractLedger BACKGROUND backgroundBonusSumInContractLedger(ic),
                               bonusDebtSumInContractLedgerDate BACKGROUND backgroundBonusSumInContractLedger(ic)
    PROPERTIES(ic, d) FORCE PANEL payPaymentConditionInContractLedgerDate

    OBJECTS icoc = outContractLedger
    PROPERTIES(icoc) READONLY descriptionOutContractLedger, sumOutContractLedger
    PROPERTIES(icoc, d) READONLY costedInContractLedgerOutContractLedgerDate
    PROPERTIES READONLY costOutContractLedgerInContractLedger(icoc, ic)

    OBJECTS oc = outContractLedger
    PROPERTIES(oc) READONLY descriptionOutContractLedger, sumOutContractLedger
    PROPERTIES(oc, d) READONLY costedInContractLedgerOutContractLedgerDate
    PROPERTIES(oc) FORCE PANEL writeOutContractLedgerFIFO SHOWIF isCreditMemoOut(oc),
                               writeOutContractLedgerLIFO SHOWIF isCreditMemoOut(oc)

    OBJECTS ocic = inContractLedger
    PROPERTIES(ocic) READONLY descriptionInContractLedger, sumInContractLedger
    PROPERTIES(ocic, d) READONLY debtInContractLedgerDate
    PROPERTIES READONLY costOutContractLedgerInContractLedger(oc, ocic)

    FILTERS contractContractLedger(cl) == c,
            contractContractALedger(cal) == c,
            contractPayment(pm) == c,
            contractPaymentRequest(pr) == c,
            contractCreditMemo(cm) == c,
            contractInContractLedger(ic) == c,
            contractOutContractLedger(oc) == c,
            partyBContract(c) == partyB() OR (c IS contract AND NOT partyB()),
            partyAContract(c) == partyA() OR (c IS contract AND NOT partyA()),
            //dateContractLedger(cl) <= d,
            //dateContractALedger(cal) <= d,
            //datePayment(pm) <= d,
            //datePaymentRequest(pr) <= d,
            //dateCreditMemo(cm) <= d,
            //dateInContractLedger(ic) <=d,
            //dateOutContractLedger(oc) <=d,
            //dateInContractLedger(ocic) <=d,
            //dateOutContractLedger(icoc) <=d,
            costOutContractLedgerInContractLedger(icoc, ic) > 0,
            costOutContractLedgerInContractLedger(oc, ocic) > 0

;

DESIGN contractLedger FROM DEFAULT{

    NEW topContainer {

        childConstraints = TO THE BOTTOM;
        NEW headerContainer {
            childConstraints = TO THE RIGHT;
            caption = 'Шапка';
            ADD PROPERTY(date);
            ADD PROPERTY(namePartyA);
            ADD PROPERTY(namePartyB);
        }
        NEW firstContainer {

            type = SPLITV;
            ADD c.box{
                PROPERTY (payContractDate(c, d)){panelLocation = TOOLBAR;}
                PROPERTY (payPaymentConditionContractDate(c, d)){panelLocation = TOOLBAR;}
            }
            NEW firstSecondContainer {

                type = SPLITV;
                NEW firstThirdContainer {

                    type = SPLITH;
                    childConstraints = TO THE RIGHT;
                    ADD cl.box;
                    ADD cal.box;
                }
                NEW secondContainer {

                    type = TABBED;
                    ADD pm.box{
                         PROPERTY (writeOutContractLedgerFIFO(pm)){panelLocation = TOOLBAR;}
                         PROPERTY (writeOutContractLedgerLIFO(pm)){panelLocation = TOOLBAR;}
                    }
                    ADD pr.box;
                    ADD cm.box{
                        PROPERTY (writeOutContractLedgerFIFO(cm)){panelLocation = TOOLBAR;}
                        PROPERTY (writeOutContractLedgerLIFO(cm)){panelLocation = TOOLBAR;}
                    }
                    NEW debt.box{

                        childConstraints = TO THE RIGHT;
                        caption = 'Долг по документу';
                        ADD ic.box{
                            PROPERTY (payPaymentConditionInContractLedgerDate(ic, d)){panelLocation = TOOLBAR;}
                        }
                        ADD icoc.box;
                    }
                    NEW cost.box{

                        childConstraints = TO THE RIGHT;
                        caption = 'Расписано по документу';
                        ADD oc.box{
                            PROPERTY (writeOutContractLedgerFIFO(oc)){panelLocation = TOOLBAR;}
                            PROPERTY (writeOutContractLedgerLIFO(oc)){panelLocation = TOOLBAR;}
                        }
                        ADD ocic.box;
                    }
                }
            }
        }
    }

    ADD functions.box;
}