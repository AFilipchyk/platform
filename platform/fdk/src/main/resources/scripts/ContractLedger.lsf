MODULE ContractLedger;

REQUIRE ContractStock,
        Document,
        LegalEntity,
        Numerator,
        Currency;

PRIORITY Contract;

META defineContractLedgerPrefix (caption, prefix)

    CLASS ABSTRACT contract###prefix##Ledger caption;
    TABLE contract###prefix##Ledger(contract###prefix##Ledger);

    isPostedContract###prefix##Ledger 'Закрыт' (contract###prefix##Ledger) = ABSTRACT BOOLEAN (contract###prefix##Ledger) PERSISTENT;

    dateTimeContract###prefix##Ledger 'Дата/время' (contract###prefix##Ledger) = ABSTRACT DATETIME (contract###prefix##Ledger) PERSISTENT;
    dateContract###prefix##Ledger 'Дата' (contract###prefix##Ledger) = toDate(dateTimeContract###prefix##Ledger(contract###prefix##Ledger));
    timeContract###prefix##Ledger 'Время' (contract###prefix##Ledger) = toTime(dateTimeContract###prefix##Ledger(contract###prefix##Ledger));

    contractContract###prefix##Ledger 'Договор' (contract###prefix##Ledger) = ABSTRACT contract (contract###prefix##Ledger) PERSISTENT;

    descriptionContract###prefix##Ledger 'Название документа' (contract###prefix##Ledger) = ABSTRACT STRING[200] (contract###prefix##Ledger) PERSISTENT;

    sumContract###prefix##Ledger 'Сумма' (contract###prefix##Ledger) = ABSTRACT NUMERIC[16,2] (contract###prefix##Ledger) PERSISTENT;

    currentBalance###prefix##Contract 'Текущая сумма задолженности по договору' (contract)=
        GROUP SUM sumContract###prefix##Ledger(contract###prefix##Ledger) AND isPostedContract###prefix##Ledger(contract###prefix##Ledger)
              BY contractContract###prefix##Ledger(contract###prefix##Ledger) PERSISTENT;

    balanceB###prefix##ContractDate 'Сумма задолженности по договору на дату (до)' (contract, date) =
        (currentBalance###prefix##Contract(contract) AND date AS DATE) (-)
        [GROUP SUM sumContract###prefix##Ledger(contract###prefix##Ledger) AND isPostedContract###prefix##Ledger(contract###prefix##Ledger)
                  IF dateContract###prefix##Ledger(contract###prefix##Ledger) >= (date AS DATE)
              BY contractContract###prefix##Ledger(contract###prefix##Ledger), date](contract, date);

    balanceA###prefix##ContractDate 'Сумма задолженности по договору на дату (после)' (contract, date) =
        (currentBalance###prefix##Contract(contract) AND date AS DATE) (-)
        [GROUP SUM sumContract###prefix##Ledger(contract###prefix##Ledger) AND isPostedContract###prefix##Ledger(contract###prefix##Ledger)
                  IF dateContract###prefix##Ledger(contract###prefix##Ledger) > (date AS DATE)
              BY contractContract###prefix##Ledger(contract###prefix##Ledger), date](contract, date);

END

@defineContractLedgerPrefix('Изменение управленческого долга по контракту', );
@defineContractLedgerPrefix('Изменение бухгалтерского долга по контракту', a);

META implementContractLedger(prefix, object, contractProp)

    isPostedContract###prefix##Ledger(contract###prefix##Ledger) += isPosted###object(contract###prefix##Ledger);
    dateTimeContract###prefix##Ledger(contract###prefix##Ledger) += dateTime###object(contract###prefix##Ledger);
    contractContract###prefix##Ledger(contract###prefix##Ledger) += contractProp###object(contract###prefix##Ledger);
    descriptionContract###prefix##Ledger(contract###prefix##Ledger) += description###object(contract###prefix##Ledger);

END

META implementContractPrepaymentLedger(object, sumProp, contractProp)

    CLASS object##ContractLedger : contractLedger;
    //TABLE object##ContractLedger(object##ContractLedger);

    needToCreate###object##ContractLedger (object, paymentPeriod) =
        isSaleTypePrepaymentFormPaymentCondition(paymentConditionContractDate(contractProp###object(object), date###object(object))) AND
        contractProp###object(object) == contractPaymentCondition(paymentConditionPaymentPeriod(paymentPeriod)) AND
        isPosted###object(object);

    @defineAggregation(object, paymentPeriod, object##ContractLedger, needToCreate###object##ContractLedger);

    isPostedContractLedger(object##ContractLedger) += isPosted###object(object###object##ContractLedger(object##ContractLedger));
    dateTimeContractLedger(object##ContractLedger) += sumDateTimeDay(dateTime###object(object###object##ContractLedger(object##ContractLedger)),
                                                                     countDaysPaymentPeriod(paymentPeriod###object##ContractLedger(object##ContractLedger)));
    contractContractLedger(object##ContractLedger) += contractProp###object(object###object##ContractLedger(object##ContractLedger));
    descriptionContractLedger(object##ContractLedger) += description###object(object###object##ContractLedger(object##ContractLedger));
    sumContractLedger(object##ContractLedger) +=
        toNumeric16p2(sumProp(object###object##ContractLedger(object##ContractLedger)) * percentPaymentPeriod(paymentPeriod###object##ContractLedger(object##ContractLedger)) / 100.0);

END

//--------------------------------------------- Логика приходов и расходов ------------------------------------------------------//

META defineOutContractLedgerInContractLedgerPrefix(caption, prefix)

    CLASS ABSTRACT prefix##ContractLedger caption;
    TABLE prefix##ContractLedger(prefix##ContractLedger);

    isPosted###prefix##ContractLedger 'Закрыт' (prefix##ContractLedger) = ABSTRACT BOOLEAN (prefix##ContractLedger) PERSISTENT;

    dateTime###prefix##ContractLedger 'Дата/время' (prefix##ContractLedger) = ABSTRACT DATETIME (prefix##ContractLedger) PERSISTENT;
    date###prefix##ContractLedger 'Дата' (prefix##ContractLedger) = toDate(dateTime###prefix##ContractLedger(prefix##ContractLedger));
    time###prefix##ContractLedger 'Время' (prefix##ContractLedger) = toTime(dateTime###prefix##ContractLedger(prefix##ContractLedger));

    contract###prefix##ContractLedger 'Договор' (prefix##ContractLedger) = ABSTRACT contract (prefix##ContractLedger) PERSISTENT;

    paymentCondition###prefix##ContractLedger 'Условия оплаты' (prefix##ContractLedger) =
        paymentConditionContractDate(contract###prefix##ContractLedger(prefix##ContractLedger), date###prefix##ContractLedger(prefix##ContractLedger));

    description###prefix##ContractLedger 'Название документа' (prefix##ContractLedger) = ABSTRACT STRING[200] (prefix##ContractLedger) PERSISTENT;
    sum###prefix##ContractLedger 'Сумма' = ABSTRACT NUMERIC[22,8] (prefix##ContractLedger) PERSISTENT;

    is###prefix##ContractLedger (prefix##ContractLedger) = prefix##ContractLedger IS prefix##ContractLedger;

END

@defineOutContractLedgerInContractLedgerPrefix('Приход', in);
@defineOutContractLedgerInContractLedgerPrefix('Расход', out);

TABLE outContractLedgerInContractLedger (outContractLedger, inContractLedger);
costOutContractLedgerInContractLedger 'Оплачено из документа' (outContractLedger, inContractLedger) = DATA NUMERIC[16,2] (outContractLedger, inContractLedger) PERSISTENT;
costedOutContractLedgerInContractLedger 'Оплачено по документу' (inContractLedger) =
    GROUP SUM costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) AND
    isPostedInContractLedger(inContractLedger) AND isPostedOutContractLedger(outContractLedger)
    BY inContractLedger PERSISTENT;
costedOutContractLedgerInContractLedgerDate 'Оплачено по документу на дату' (inContractLedger, date) =
    GROUP SUM costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) AND
              isPostedInContractLedger(inContractLedger) AND isPostedOutContractLedger(outContractLedger) AND
              dateOutContractLedger(outContractLedger) <= (date AS DATE)
    BY inContractLedger, date;
costedInContractLedgerOutContractLedger 'Расписано из документа' (outContractLedger) =
    GROUP SUM costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) AND
    isPostedInContractLedger(inContractLedger) //AND isPostedOutContractLedger(outContractLedger)
    BY outContractLedger PERSISTENT;
costedInContractLedgerOutContractLedgerDate 'Расписано из документа на дату' (outContractLedger, date) =
    GROUP SUM costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) AND
              isPostedInContractLedger(inContractLedger) AND //isPostedOutContractLedger(outContractLedger) AND
              dateInContractLedger(inContractLedger) <= (date AS DATE)
    BY outContractLedger, date;

debtInContractLedger 'Долг по документу' (inContractLedger) =
    sumInContractLedger(inContractLedger) (-) costedOutContractLedgerInContractLedger(inContractLedger);

debtInContractLedgerDate 'Долг по документу на дату' (inContractLedger, date) =
    sumInContractLedger(inContractLedger) (-) costedOutContractLedgerInContractLedgerDate(inContractLedger, date);

appliedInContractLedgerBonusPeriod(inContractLedger, bonusPeriod) =
    debtInContractLedgerDate(inContractLedger, sumDate(dateInContractLedger(inContractLedger), countDaysBonusPeriod(bonusPeriod))) <= 0.0
    AND contractInContractLedger(inContractLedger) == contractPaymentCondition(paymentConditionBonusPeriod(bonusPeriod));

daysBonusPeriodInContractLedger(inContractLedger, date) =
    GROUP MIN countDaysBonusPeriod(bonusPeriod) AND
              contractInContractLedger(inContractLedger) == contractPaymentCondition(paymentConditionBonusPeriod(bonusPeriod)) AND
              sumDate(dateInContractLedger(inContractLedger), countDaysBonusPeriod(bonusPeriod)) >= (date AS DATE)
              //appliedInContractLedgerBonusPeriod(inContractLedger, bonusPeriod)
    BY inContractLedger, date;

bonusPeriodInContractLedger(inContractLedger, date) =
    bonusPeriodPaymentConditionDays(paymentConditionInContractLedger(inContractLedger), daysBonusPeriodInContractLedger(inContractLedger, date));

bonusSumInContractLedger 'Сумма бонуса' (inContractLedger, date) =
    sumInContractLedger(inContractLedger) * percentBonusPeriod(bonusPeriodInContractLedger(inContractLedger, date))/100
    IF debtInContractLedger(inContractLedger) > 0.0;

bonusDebtSumInContractLedgerDate 'Сумма долга по документу с учетом бонуса' (inContractLedger, date) =
    debtInContractLedgerDate(inContractLedger, date) (-) bonusSumInContractLedger(inContractLedger, date);

CONSTRAINT costedInContractLedgerOutContractLedger(outContractLedger) > sumOutContractLedger(outContractLedger)
    MESSAGE 'Расписанная сумма должна быть равна сумме платежа';

orderInContractLedger(inContractLedger) = LIST(dateTimeInContractLedger(inContractLedger), inContractLedger);

sumInFIFOOutContractLedgerInContractLedger (outContractLedger, inContractLedger) =
    PARTITION UNGROUP sumOutContractLedger
              LIMIT debtInContractLedger(inContractLedger) AND (outContractLedger IS outContractLedger) AND
                    contractOutContractLedger(outContractLedger) == contractInContractLedger(inContractLedger) AND
                    isPostedInContractLedger(inContractLedger)
              BY outContractLedger
              ORDER orderInContractLedger(inContractLedger);

sumInLIFOOutContractLedgerInContractLedger (outContractLedger, inContractLedger) =
    PARTITION UNGROUP sumOutContractLedger
              LIMIT debtInContractLedger(inContractLedger) AND (outContractLedger IS outContractLedger) AND
                    contractOutContractLedger(outContractLedger) == contractInContractLedger(inContractLedger) AND
                    isPostedInContractLedger(inContractLedger)
              BY outContractLedger
              ORDER DESC orderInContractLedger(inContractLedger);

writeOutContractLedgerFIFO 'Расписать по FIFO' = ACTION (outContractLedger) {

    SET costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) <- NULL;
    SET costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) <- sumInFIFOOutContractLedgerInContractLedger(outContractLedger, inContractLedger);
}

writeOutContractLedgerLIFO 'Расписать по LIFO' = ACTION (outContractLedger) {

    SET costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) <- NULL;
    SET costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) <- sumInLIFOOutContractLedgerInContractLedger(outContractLedger, inContractLedger);
}

META implementOutContractLedgerInContractLedgerPrefix(prefix, object, contractProp)

    isPosted###prefix##ContractLedger(prefix##ContractLedger) += isPosted###object(prefix##ContractLedger);
    dateTime###prefix##ContractLedger(prefix##ContractLedger) += dateTime###object(prefix##ContractLedger);
    contract###prefix##ContractLedger(prefix##ContractLedger) += contractProp###object(prefix##ContractLedger);
    description###prefix##ContractLedger(prefix##ContractLedger) += description###object(prefix##ContractLedger);

END

//-------------------------------------------- Логика платежей ----------------------------------------------------------------//

CLASS payment 'Платеж' : numeratedObject, contractLedger, contractALedger, outContractLedger;
CLASS paymentPosted 'Проведенный платеж' : payment, postedObject;
TABLE payment(payment);

@defineDocumentHeaderPosted(payment);
@defineNumeratedObjectDefault(payment, 'Нумератор для платежей', 'ПЛ');

datePayment 'Дата' (payment) = DATA DATE (payment);
datePayment(payment) <- currentDate() WHEN ASSIGNED(payment IS payment);
timePayment 'Время' (payment) = DATA TIME (payment);
timePayment(payment) <- currentTime() WHEN ASSIGNED(payment IS payment);
dateTimePayment 'Дата время' (payment) = dateTimeToDateTime(datePayment(payment), timePayment(payment));

contractPayment 'Контракт' (payment) = DATA contract (payment) AUTOSET;
numberContractPayment 'Номер контракта' (payment) = numberContract(contractPayment(payment));

notePayment 'Примечение' (payment) = DATA STRING[200] (payment);

payerPayment(payment) = DATA legalEntity (payment);
payerPayment(payment) <- partyBContract(contractPayment(payment)) WHEN ASSIGNED (contractPayment(payment));
namePayerPayment 'Сторона Б(Плательщик)' (payment) = name(payerPayment(payment));
beneficiaryPayment(payment) = DATA legalEntity (payment);
beneficiaryPayment(payment) <- partyAContract(contractPayment(payment)) WHEN ASSIGNED (contractPayment(payment));
nameBeneficiaryPayment 'Сторона А(Бенефициар)' (payment) = name(beneficiaryPayment(payment));

currencyPayment 'Валюта платежа' (payment) = DATA currency (payment);
nameCurrencyPayment 'Валюта платежа' (payment) = name(currencyPayment(payment));

typeExchangePayment (payment) = DATA typeExchange (payment);
nameTypeExchangePayment 'Тип обмена' (payment) = name(typeExchangePayment(payment));
rateExchangePayment 'Курс' (payment) = DATA NUMERIC[15,8] (payment);
rateExchangePayment (payment) <- UNION OVERRIDE 1.0 IF payment IS payment, rateTypeExchangeCurrencyDate(typeExchangePayment(payment), currencyPayment(payment), datePayment(payment))
    WHEN CHANGED (currencyPayment(payment)) OR
         CHANGED (typeExchangePayment(payment)) OR
         CHANGED (datePayment(payment));

CONSTRAINT currencyTypeExchange(typeExchangePayment(payment)) != currencyContract(contractPayment(payment))
    CHECKED BY typeExchangePayment MESSAGE 'Валюта типа обмена должны соответствовать валюте договора+';

sumPayment 'Сумма платежа' (payment) = DATA NUMERIC[16,2] (payment);
sumRateExchangePayment 'Сумма платежа(конверт.)' (payment) = toNumeric16p2(sumPayment(payment) / rateExchangePayment(payment));

isNotSameCurrencyPayment (payment) = currencyContract(contractPayment(payment)) != currencyPayment(payment);

descriptionPayment 'Название документа' =
    [FORMULA STRING[200] '\'Платеж \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberObject(payment), datePayment(payment), nameBeneficiaryPayment(payment)) PERSISTENT;

@implementContractLedger( ,payment, contract);
sumContractLedger(contractLedger) += -sumRateExchangePayment(contractLedger);

@implementContractLedger(a ,payment, contract);
sumContractALedger(contractALedger) += -sumRateExchangePayment(contractALedger);

@implementOutContractLedgerInContractLedgerPrefix(out, payment, contract);
sumOutContractLedger(outContractLedger) += sumRateExchangePayment(outContractLedger);

FORM payment 'Платеж'

    OBJECTS p = payment FIXED PANEL, i = inContractLedger
    PROPERTIES(p) objectClassName, nameNumeratorObject, numberObject, seriesObject, datePayment, timePayment,
                  numberContractPayment, notePayment
    PROPERTIES(p) READONLY namePayerPayment, nameBeneficiaryPayment
    PROPERTIES(p) nameCurrencyPayment, nameTypeExchangePayment SHOWIF isNotSameCurrencyPayment(p), sumPayment,
                  rateExchangePayment SHOWIF isNotSameCurrencyPayment(p),
                  sumRateExchangePayment SHOWIF isNotSameCurrencyPayment(p),
                  costedInContractLedgerOutContractLedger,
                  writeOutContractLedgerFIFO TODRAW i FORCE PANEL DRAWTOTOOLBAR,
                  writeOutContractLedgerLIFO TODRAW i FORCE PANEL DRAWTOTOOLBAR

    PROPERTIES(i) READONLY descriptionInContractLedger, debtInContractLedger
    PROPERTIES(p, i) costOutContractLedgerInContractLedger

    FILTERS contractPayment(p) == contractInContractLedger(i)

    EVENTS
        ON OK EXEC prePostPayment(p)

    EDIT payment OBJECT p
;

DESIGN payment FROM DEFAULT{

    main{

        NEW headerContainer{

            caption = 'Шапка документа';
            childConstraints = TO THE RIGHTBOTTOM;
            ADD PROPERTY(objectClassName);
            ADD PROPERTY(namePayerPayment);
            ADD PROPERTY(nameNumeratorObject);
            ADD PROPERTY(numberObject);
            ADD PROPERTY(seriesObject);
            ADD PROPERTY(datePayment);
            ADD PROPERTY(timePayment);
        }

        NEW paramContainer {

            caption = 'Параметры документа';
            ADD PROPERTY(numberContractPayment);
            ADD PROPERTY(nameBeneficiaryPayment);
            ADD PROPERTY(notePayment);
        }

        NEW sumContainer{

            caption = 'Суммы документа';
            childConstraints = TO THE BOTTOM;
            ADD PROPERTY(sumPayment);
            ADD PROPERTY(nameCurrencyPayment);
            ADD PROPERTY(nameTypeExchangePayment);
            ADD PROPERTY(rateExchangePayment);
            ADD PROPERTY(sumRateExchangePayment);
            ADD PROPERTY(costedInContractLedgerOutContractLedger);
        }
        POSITION sumContainer TO THE RIGHT headerContainer;
        POSITION sumContainer TO THE RIGHT paramContainer;

        ADD i.box;
    }

    POSITION PROPERTY(writeOutContractLedgerLIFO) TO THE RIGHT PROPERTY(writeOutContractLedgerFIFO);

    PROPERTY(formOk) {
        caption = 'Провести';
    }

    ADD functions.box;
}

partyA = DATA SESSION legalEntity();
namePartyA 'Сторона А(поставщик)' = name(partyA());
partyB = DATA SESSION legalEntity();
namePartyB 'Сторона Б(покупатель)' = name(partyB());

//--------------------------------------------- Платежное требование ------------------------------------------------------//

CLASS paymentRequest 'Платежное требование' : numeratedObject, contractLedger, inContractLedger;
CLASS paymentRequestPosted 'Проведенное платежное требование' : paymentRequest, postedObject;
TABLE paymentRequest(paymentRequest);

@defineDocumentHeaderPosted(paymentRequest);
@defineNumeratedObjectDefault(paymentRequest, 'Нумератор для платежных требований', 'ПТ');

datePaymentRequest 'Дата' (paymentRequest) = DATA DATE (paymentRequest);
datePaymentRequest(paymentRequest) <- currentDate() WHEN ASSIGNED(paymentRequest IS paymentRequest);
timePaymentRequest 'Время' (paymentRequest) = DATA TIME (paymentRequest);
timePaymentRequest(paymentRequest) <- currentTime() WHEN ASSIGNED(paymentRequest IS paymentRequest);
dateTimePaymentRequest 'Дата время' (paymentRequest) = dateTimeToDateTime(datePaymentRequest(paymentRequest), timePaymentRequest(paymentRequest));

contractPaymentRequest 'Контракт' (paymentRequest) = DATA contract (paymentRequest) AUTOSET;
numberContractPaymentRequest 'Номер контракта' (paymentRequest) = numberContract(contractPaymentRequest(paymentRequest));

notePaymentRequest 'Примечание' (paymentRequest) = DATA STRING[200] (paymentRequest);

payerPaymentRequest(paymentRequest) = DATA legalEntity (paymentRequest);
payerPaymentRequest(paymentRequest) <- partyBContract(contractPaymentRequest(paymentRequest)) WHEN ASSIGNED (contractPaymentRequest(paymentRequest));
namePayerPaymentRequest 'Сторона Б' (paymentRequest) = name(payerPaymentRequest(paymentRequest));
lenderPaymentRequest(paymentRequest) = DATA legalEntity (paymentRequest);
lenderPaymentRequest(paymentRequest) <- partyAContract(contractPaymentRequest(paymentRequest)) WHEN ASSIGNED (contractPaymentRequest(paymentRequest));
nameLenderPaymentRequest 'Сторона А' (paymentRequest) = name(lenderPaymentRequest(paymentRequest));

sumPaymentRequest 'Сумма' (paymentRequest) = DATA NUMERIC[16,2] (paymentRequest);

descriptionPaymentRequest 'Название документа' =
    [FORMULA STRING[200] '\'Платежное требование \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberObject(paymentRequest), datePaymentRequest(paymentRequest), nameLenderPaymentRequest(paymentRequest)) PERSISTENT;

@implementContractLedger( ,paymentRequest, contract);
sumContractLedger(contractLedger) += sumPaymentRequest(contractLedger);

FORM paymentRequest 'Платежное требование'

    OBJECTS p = paymentRequest FIXED PANEL
    PROPERTIES(p) objectClassName, nameNumeratorObject, numberObject, seriesObject, datePaymentRequest, timePaymentRequest,
                  numberContractPaymentRequest, notePaymentRequest
    PROPERTIES(p) READONLY namePayerPaymentRequest, nameLenderPaymentRequest
    PROPERTIES(p) sumPaymentRequest

    EVENTS
        ON OK EXEC prePostPaymentRequest(p)

    EDIT paymentRequest OBJECT p
;

DESIGN paymentRequest FROM DEFAULT{

    main{

        NEW headerContainer{

            caption = 'Шапка документа';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY(objectClassName);
            ADD PROPERTY(namePayerPaymentRequest);
            ADD PROPERTY(nameNumeratorObject);
            ADD PROPERTY(numberObject);
            ADD PROPERTY(seriesObject);
            ADD PROPERTY(datePaymentRequest);
            ADD PROPERTY(timePaymentRequest);
        }

        NEW paramContainer {

            caption = 'Параметры документа';
            ADD PROPERTY(numberContractPaymentRequest);
            ADD PROPERTY(nameLenderPaymentRequest);
            ADD PROPERTY(notePaymentRequest);
        }

        NEW sumContainer{

            caption = 'Суммы документа';
            childConstraints = TO THE BOTTOM;
            ADD PROPERTY(sumPaymentRequest);
        }
        POSITION sumContainer TO THE RIGHT headerContainer;
        POSITION sumContainer TO THE RIGHT paramContainer;
    }

    PROPERTY(formOk) {
        caption = 'Провести';
    }

    ADD functions.box;
}

//-------------------------------------------- Кредитная нота --------------------------------------------------------//

CLASS ABSTRACT creditMemo 'Кредитная нота' : numeratedObject;
TABLE creditMemo(creditMemo);

META defineCreditMemoPrefix(prefix, caption, captionPost)

    CLASS creditMemo###prefix caption : creditMemo, contractLedger, contractALedger, prefix##ContractLedger;
    CLASS creditMemo###prefix##Posted  captionPost : creditMemo###prefix, postedObject;

    @defineDocumentHeaderPosted(creditMemo###prefix);
    @defineNumeratedObjectDefault(creditMemo###prefix, 'Нумератор для кредитных нот', 'КН');

    dateCreditMemo###prefix 'Дата' (creditMemo###prefix) = DATA DATE (creditMemo###prefix);
    dateCreditMemo###prefix(creditMemo###prefix) <- currentDate() WHEN ASSIGNED(creditMemo###prefix IS creditMemo###prefix);
    timeCreditMemo###prefix 'Время' (creditMemo###prefix) = DATA TIME (creditMemo###prefix);
    timeCreditMemo###prefix(creditMemo###prefix) <- currentTime() WHEN ASSIGNED(creditMemo###prefix IS creditMemo###prefix);
    dateTimeCreditMemo###prefix 'Дата время' (creditMemo###prefix) = dateTimeToDateTime(dateCreditMemo###prefix(creditMemo###prefix), timeCreditMemo###prefix(creditMemo###prefix));

    contractCreditMemo###prefix 'Контракт' (creditMemo###prefix) = DATA contract (creditMemo###prefix) AUTOSET;
    numberContractCreditMemo###prefix 'Номер контракта' (creditMemo###prefix) = numberContract(contractCreditMemo###prefix(creditMemo###prefix));

    noteCreditMemo###prefix 'Примечание' (creditMemo###prefix) = DATA STRING[200] (creditMemo###prefix);

    partyBCreditMemo###prefix(creditMemo###prefix) = DATA legalEntity (creditMemo###prefix);
    partyBCreditMemo###prefix(creditMemo###prefix) <- partyBContract(contractCreditMemo###prefix(creditMemo###prefix))
        WHEN ASSIGNED (contractCreditMemo###prefix(creditMemo###prefix));
    namePartyBCreditMemo###prefix 'Сторона Б' (creditMemo###prefix) = name(partyBCreditMemo###prefix(creditMemo###prefix));
    partyACreditMemo###prefix(creditMemo###prefix) = DATA legalEntity (creditMemo###prefix);
    partyACreditMemo###prefix(creditMemo###prefix) <- partyAContract(contractCreditMemo###prefix(creditMemo###prefix))
        WHEN ASSIGNED (contractCreditMemo###prefix(creditMemo###prefix));
    namePartyACreditMemo###prefix 'Сторона А' (creditMemo###prefix) = name(partyACreditMemo###prefix(creditMemo###prefix));

    sumCreditMemo###prefix 'Сумма' (creditMemo###prefix) = DATA NUMERIC[16,2] (creditMemo###prefix);

    descriptionCreditMemo###prefix 'Название документа' =
        [FORMULA STRING[200] '\''###caption###' \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
        seriesNumberObject(creditMemo###prefix), dateCreditMemo###prefix(creditMemo###prefix), namePartyACreditMemo###prefix(creditMemo###prefix)) PERSISTENT;

END

META defineCreditMemoUnion (prop, caption)

    prop##CreditMemo caption (creditMemo) = UNION CLASS prop##CreditMemoIn(creditMemo), prop##CreditMemoOut(creditMemo);

END

@defineCreditMemoPrefix(in, 'Кредитная нота', 'Проведенная кредитная нота');
@defineCreditMemoPrefix(out, 'Дебетная нота', 'Проведенная дебитовая нота');

prePostCreditMemo 'Провести' (creditMemo) = ABSTRACT ACTION(creditMemo);
prePostCreditMemo(creditMemo) += prePostCreditMemoIn(creditMemo);
prePostCreditMemo(creditMemo) += prePostCreditMemoOut(creditMemo);

@defineCreditMemoUnion(date, 'Дата');
@defineCreditMemoUnion(time, 'Время');
dateTimeCreditMemo 'Дата/время' (creditMemo) = dateTimeToDateTime(dateCreditMemo(creditMemo), timeCreditMemo(creditMemo));
@defineCreditMemoUnion(contract, 'Контракт');
numberContractCreditMemo 'Номер контракта' (creditMemo) = numberContract(contractCreditMemo(creditMemo));
@defineCreditMemoUnion(partyB, );
namePartyBCreditMemo 'Сторона Б' (creditMemo) = name(partyBCreditMemo(creditMemo));
@defineCreditMemoUnion(partyA, );
namePartyACreditMemo 'Сторона А' (creditMemo) = name(partyACreditMemo(creditMemo));
@defineCreditMemoUnion(sum, 'Сумма');
@defineCreditMemoUnion(description, 'Название документа');
@defineCreditMemoUnion(note, 'Примечание');

@implementContractLedger( ,creditMemoIn, contract);
sumContractLedger(contractLedger) += sumCreditMemoIn(contractLedger);

@implementContractLedger(a ,creditMemoIn, contract);
sumContractALedger(contractALedger) += sumCreditMemoIn(contractALedger);

@implementOutContractLedgerInContractLedgerPrefix(in, creditMemoIn, contract);
sumInContractLedger(inContractLedger) += sumCreditMemoIn(inContractLedger);

@implementContractLedger( ,creditMemoOut, contract);
sumContractLedger(contractLedger) += -sumCreditMemoOut(contractLedger);

@implementContractLedger(a ,creditMemoOut,contract);
sumContractALedger(contractALedger) += -sumCreditMemoOut(contractALedger);

@implementOutContractLedgerInContractLedgerPrefix(out, creditMemoOut, contract);
sumOutContractLedger(outContractLedger) += sumCreditMemoOut(outContractLedger);

FORM creditMemo 'Кредитная нота'

    OBJECTS c = creditMemo FIXED PANEL, i = inContractLedger
    PROPERTIES(c) objectClassName, nameNumeratorObject, numberObject, seriesObject, dateCreditMemo, timeCreditMemo,
                  numberContractCreditMemo, noteCreditMemo
    PROPERTIES(c) READONLY namePartyBCreditMemo, namePartyACreditMemo
    PROPERTIES(c) sumCreditMemo,
                  costedInContractLedgerOutContractLedger SHOWIF isOutContractLedger(c),
                  writeOutContractLedgerFIFO TODRAW i FORCE PANEL DRAWTOTOOLBAR SHOWIF isOutContractLedger(c),
                  writeOutContractLedgerLIFO TODRAW i FORCE PANEL DRAWTOTOOLBAR SHOWIF isOutContractLedger(c)

    PROPERTIES(i) READONLY descriptionInContractLedger SHOWIF isOutContractLedger(c), debtInContractLedger SHOWIF isOutContractLedger(c)
    PROPERTIES(c, i) costOutContractLedgerInContractLedger SHOWIF isOutContractLedger(c)

    FILTERS contractCreditMemo(c) == contractInContractLedger(i)

    EVENTS
        ON OK EXEC prePostCreditMemo(c)

    EDIT creditMemo OBJECT c
;

DESIGN creditMemo FROM DEFAULT{

    main{

        NEW headerContainer{

            caption = 'Шапка документа';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY(objectClassName);
            ADD PROPERTY(namePartyBCreditMemo);
            ADD PROPERTY(nameNumeratorObject);
            ADD PROPERTY(numberObject);
            ADD PROPERTY(seriesObject);
            ADD PROPERTY(dateCreditMemo);
            ADD PROPERTY(timeCreditMemo);
        }

        NEW paramContainer {

            caption = 'Параметры документа';
            ADD PROPERTY(numberContractCreditMemo);
            ADD PROPERTY(namePartyACreditMemo);
            ADD PROPERTY(noteCreditMemo);
        }

        NEW sumContainer{

            caption = 'Суммы документа';
            childConstraints = TO THE BOTTOM;
            ADD PROPERTY(sumCreditMemo);
            ADD PROPERTY(costedInContractLedgerOutContractLedger);
        }
        POSITION sumContainer TO THE RIGHT headerContainer;
        POSITION sumContainer TO THE RIGHT paramContainer;

        ADD i.box;
    }

    POSITION PROPERTY(writeOutContractLedgerLIFO) TO THE RIGHT PROPERTY(writeOutContractLedgerFIFO);

    PROPERTY(formOk) {
        caption = 'Провести';
    }

    ADD functions.box;
}

//------------------------------------------- Платеж по договору -----------------------------------------------------//

debtSumContractDate 'Долг по договору на дату' (contract, date) = GROUP SUM debtInContractLedgerDate(inContractLedger, date) AND
                                                                            dateInContractLedger(inContractLedger) <= (date AS DATE)
                                                                  BY contractInContractLedger(inContractLedger), date;

bonusSumContractDate 'Сумма бонуса на дату' (contract, date) = GROUP SUM bonusSumInContractLedger(inContractLedger, date) AND
                                                                         dateInContractLedger(inContractLedger) <= (date AS DATE)
                                                               BY contractInContractLedger(inContractLedger), date;

bonusDebtSumContractDate 'Сумма долга с учетом бонуса' (contract, date) =
    debtSumContractDate(contract, date) (-) bonusSumContractDate(contract, date);

payContractDate 'Оплатить по договору' = ACTION (contract, date) NEWSESSION {

    ADDOBJ payment;
    FOR pm == addedObject() DO {
        SET dateTimePayment(pm) <- toDateTime(date AS DATE);
        SET contractPayment(pm) <- contract AS contract;
        SET currencyPayment(pm) <- currencyContract(contract);
        SET sumPayment(pm) <- debtSumContractDate(contract, date);
        SET costOutContractLedgerInContractLedger(pm, inContractLedger) <- debtInContractLedgerDate(inContractLedger, date)
            WHERE contractPayment(pm) == contractInContractLedger(inContractLedger);
        FORM payment OBJECTS p = pm MODAL;
        IF formResult() == formResult.ok THEN {
            EXEC apply();
        }
    }

}

//------------------------------------------- Платеж c учетом бонусов договора --------------------------------------------//

payPaymentConditionInContractLedgerDate 'Оплатить c учетом бонусов договора' = [ACTION (inContractLedger, date) NEWSESSION {

    ADDOBJ payment;
    FOR pm == addedObject() DO {
        SET dateTimePayment(pm) <- toDateTime(date AS DATE);
        SET contractPayment(pm) <- contractInContractLedger(inContractLedger);
        SET currencyPayment(pm) <- currencyContract(contractInContractLedger(inContractLedger));
        SET sumPayment(pm) <- bonusDebtSumInContractLedgerDate(inContractLedger, date);
        SET costOutContractLedgerInContractLedger(pm, inContractLedger) <- bonusDebtSumInContractLedgerDate(inContractLedger, date);
        FORM payment OBJECTS p = pm MODAL;
        IF formResult() == formResult.ok THEN {
            ADDOBJ creditMemoOut;
            FOR cm == addedObject() DO {
                SET dateTimeCreditMemoOut(cm) <- toDateTime(date AS DATE);
                SET contractCreditMemoOut(cm) <- contractInContractLedger(inContractLedger);
                SET sumCreditMemoOut(cm) <- bonusSumInContractLedger(inContractLedger, date);
                SET costOutContractLedgerInContractLedger(cm, inContractLedger) <- bonusSumInContractLedger(inContractLedger, date);
                FORM creditMemo OBJECTS c = cm MODAL;
                IF formResult() == formResult.ok THEN {
                    EXEC apply();
                }
            }
        }
    }
}](inContractLedger, date) AND bonusSumInContractLedger(inContractLedger, date) > 0.0;

payPaymentConditionContractDate 'Оплатить c учетом бонусов договора' = [ACTION (contract, date) NEWSESSION {

    ADDOBJ payment;
    FOR pm == addedObject() DO {
        SET dateTimePayment(pm) <- toDateTime(date AS DATE);
        SET contractPayment(pm) <- contract AS contract;
        SET currencyPayment(pm) <- currencyContract(contract);
        SET sumPayment(pm) <- bonusDebtSumContractDate(contract, date);
        SET costOutContractLedgerInContractLedger(pm, inContractLedger) <- bonusDebtSumInContractLedgerDate(inContractLedger, date)
            WHERE contractPayment(pm) == contractInContractLedger(inContractLedger);
        FORM payment OBJECTS p = pm MODAL;
        IF formResult() == formResult.ok THEN {
            ADDOBJ creditMemoOut;
            FOR cm == addedObject() DO {
                SET dateTimeCreditMemoOut(cm) <- toDateTime(date AS DATE);
                SET contractCreditMemoOut(cm) <- contract AS contract;
                SET sumCreditMemoOut(cm) <- bonusSumContractDate(contract, date);
                SET costOutContractLedgerInContractLedger(cm, inContractLedger) <- bonusSumInContractLedger(inContractLedger, date)
                    WHERE contractCreditMemo(cm) == contractInContractLedger(inContractLedger);
                FORM creditMemo OBJECTS c = cm MODAL;
                IF formResult() == formResult.ok THEN {
                    EXEC apply();
                }
            }
        }
    }

}](contract, date) AND bonusSumContractDate(contract, date) > 0.0;

//----------------------------------------------- Цвета --------------------------------------------------------------//

backgroundSumContractLedgerDate 'Цвет' (contractLedger, date) = RGB(255,238,165) AND dateContractLedger(contractLedger) <= (date AS DATE) OR
                                                                RGB(255,160,160) AND dateContractLedger(contractLedger) > (date AS DATE);
backgroundContractLedgerDate 'Цвет' (contractLedger, date) = RGB(255,160,160) AND dateContractLedger(contractLedger) > (date AS DATE);
backgroundSumContract 'Цвет' (contract) = RGB(255,238,165) AND contract IS contract;
backgroundSumContractALedgerDate 'Цвет' (contractALedger, date) = RGB(232,184,146) AND dateContractALedger(contractALedger) <= (date AS DATE) OR
                                                              RGB(255,160,160) AND dateContractALedger(contractALedger) > (date AS DATE);
backgroundContractALedgerDate 'Цвет' (contractALedger, date) = RGB(255,160,160) AND dateContractALedger(contractALedger) > (date AS DATE);
backgroundSumContractA 'Цвет' (contract) = RGB(232,184,146) AND contract IS contract;
backgroundBonusSumInContractLedger 'Цвет' (inContractLedger) = RGB(213,249,185) AND inContractLedger IS inContractLedger;
backgroundBonusSumContract 'Цвет' (contract) = RGB(213,249,185) AND contract IS contract;
backgroundPaymentRequestDate 'Цвет' (paymentRequest, date) = RGB(255,160,160) AND datePaymentRequest(paymentRequest) > (date AS DATE);
backgroundOutContractLedgerDate 'Цвет' (outContractLedger, date) = RGB(255,160,160) AND dateOutContractLedger(outContractLedger) > (date AS DATE);
backgroundInContractLedgerDate 'Цвет' (inContractLedger, date) = RGB(255,160,160) AND dateInContractLedger(inContractLedger) > (date AS DATE);

//-------------------------------------------- Форма платежей ---------------------------------------------------------//

FORM payments 'Платежи'

    OBJECTS d = DATE FIXED PANEL
    PROPERTIES(d) date = OBJVALUE

    PROPERTIES() namePartyA, namePartyB

    OBJECTS p = payment
    PROPERTIES(p) READONLY objectClassName BACKGROUND backgroundOutContractLedgerDate(p, d),
                           numberObject BACKGROUND backgroundOutContractLedgerDate(p, d),
                           seriesObject BACKGROUND backgroundOutContractLedgerDate(p, d),
                           dateTimePayment BACKGROUND backgroundOutContractLedgerDate(p, d),
                           numberContractPayment BACKGROUND backgroundOutContractLedgerDate(p, d),
                           namePayerPayment BACKGROUND backgroundOutContractLedgerDate(p, d),
                           nameBeneficiaryPayment BACKGROUND backgroundOutContractLedgerDate(p, d),
                           nameCurrencyPayment BACKGROUND backgroundOutContractLedgerDate(p, d),
                           nameTypeExchangePayment BACKGROUND backgroundOutContractLedgerDate(p, d),
                           sumPayment BACKGROUND backgroundOutContractLedgerDate(p, d),
                           rateExchangePayment BACKGROUND backgroundOutContractLedgerDate(p, d),
                           sumRateExchangePayment BACKGROUND backgroundOutContractLedgerDate(p, d),
                           notePayment BACKGROUND backgroundOutContractLedgerDate(p, d)

    PROPERTIES(p) ADDFORM, EDITFORM, delete

    FILTERS payerPayment(p) == partyB() OR (p IS payment AND NOT partyB()),
            beneficiaryPayment(p) == partyA() OR (p IS payment AND NOT partyA())

;

DESIGN payments FROM DEFAULT{

    NEW headerContainer {
        childConstraints = TO THE RIGHT;
        caption = 'Шапка';
        ADD PROPERTY(date);
        ADD PROPERTY(namePartyA);
        ADD PROPERTY(namePartyB);
    }
    ADD p.box;
    ADD functions.box;
}

//-------------------------------------------- Разнесение по документам -----------------------------------------------//

isCostedOutContractLedger 'Расписан' (outContractLedger) = sumOutContractLedger(outContractLedger) (-) costedInContractLedgerOutContractLedger(outContractLedger);

FORM costContractLedger 'Разнесение документов'

    OBJECTS d = DATE FIXED PANEL
    PROPERTIES(d) date = OBJVALUE

    PROPERTIES() namePartyA, namePartyB

    OBJECTS o = outContractLedger, i = inContractLedger
    PROPERTIES(o) READONLY dateOutContractLedger BACKGROUND backgroundOutContractLedgerDate(o, d),
                           descriptionOutContractLedger BACKGROUND backgroundOutContractLedgerDate(o, d),
                           sumOutContractLedger BACKGROUND backgroundOutContractLedgerDate(o, d),
                           costedInContractLedgerOutContractLedger BACKGROUND backgroundOutContractLedgerDate(o, d)
    PROPERTIES(o) writeOutContractLedgerFIFO TODRAW i FORCE PANEL DRAWTOTOOLBAR,
                  writeOutContractLedgerLIFO TODRAW i FORCE PANEL DRAWTOTOOLBAR
    ORDER BY dateOutContractLedger

    PROPERTIES(i) READONLY dateInContractLedger BACKGROUND backgroundInContractLedgerDate(i, d),
                           descriptionInContractLedger BACKGROUND backgroundInContractLedgerDate(i, d),
                           debtInContractLedger BACKGROUND backgroundInContractLedgerDate(i, d)
    PROPERTIES(o, i) costOutContractLedgerInContractLedger BACKGROUND backgroundInContractLedgerDate(i, d)
    ORDER BY dateInContractLedger

    FILTERGROUP filters1
        FILTER 'Неразнесенные' 'F9' isCostedOutContractLedger(o) DEFAULT

    FILTERGROUP filters2
        FILTER 'Неоплаченные' 'F10' debtInContractLedger(i) DEFAULT

    FILTERS partyBContract(contractOutContractLedger(o)) == partyB() OR (o IS outContractLedger AND NOT partyB()),
            partyAContract(contractOutContractLedger(o)) == partyA() OR (o IS outContractLedger AND NOT partyA()),
            contractOutContractLedger(o) == contractInContractLedger(i)

;

DESIGN costContractLedger FROM DEFAULT {

    NEW topContainer {

        childConstraints = TO THE BOTTOM;
        NEW headerContainer {
            childConstraints = TO THE RIGHT;
            caption = 'Шапка';
            ADD PROPERTY(date);
            ADD PROPERTY(namePartyA);
            ADD PROPERTY(namePartyB);
        }
        NEW firstContainer {

            type = SPLITV;
            ADD o.box;
            ADD i.box;
        }
   }

ADD functions.box;
}

//-------------------------------------------- Сводная форма ---------------------------------------------------------//

FORM contractLedger 'Управление задолженностями'

    OBJECTS d = DATE FIXED PANEL
    PROPERTIES(d) date = OBJVALUE

    PROPERTIES() namePartyA, namePartyB

    OBJECTS c = contract
    PROPERTIES(c) READONLY numberContract, namePartyAContract, namePartyBContract, nameCurrencyContract
    PROPERTIES(c, d) READONLY balanceAContractDate BACKGROUND backgroundSumContract(c),
                              balanceAAContractDate BACKGROUND backgroundSumContractA(c),
                              debtSumContractDate BACKGROUND backgroundBonusSumContract(c),
                              bonusSumContractDate BACKGROUND backgroundBonusSumContract(c),
                              bonusDebtSumContractDate BACKGROUND backgroundBonusSumContract(c)
    PROPERTIES(c, d) FORCE PANEL DRAWTOTOOLBAR payContractDate, payPaymentConditionContractDate
    ORDER BY numberContract

    OBJECTS cl = contractLedger
    PROPERTIES(cl) READONLY dateContractLedger BACKGROUND backgroundContractLedgerDate(cl, d),
                            sumContractLedger BACKGROUND backgroundSumContractLedgerDate(cl, d),
                            descriptionContractLedger BACKGROUND backgroundContractLedgerDate(cl, d)
    ORDER BY dateContractLedger
    FILTERS isPostedContractLedger(cl)

    OBJECTS cal = contractALedger
    PROPERTIES(cal) READONLY dateContractALedger BACKGROUND backgroundContractALedgerDate(cal, d),
                             sumContractALedger BACKGROUND backgroundSumContractALedgerDate(cal, d),
                             descriptionContractALedger BACKGROUND backgroundContractALedgerDate(cal, d)
    ORDER BY dateContractALedger
    FILTERS isPostedContractALedger(cal)

    OBJECTS pm = payment
    PROPERTIES(pm) READONLY objectClassName BACKGROUND backgroundOutContractLedgerDate(pm, d),
                            dateTimePayment BACKGROUND backgroundOutContractLedgerDate(pm, d),
                            seriesNumberObject BACKGROUND backgroundOutContractLedgerDate(pm, d),
                            namePayerPayment BACKGROUND backgroundOutContractLedgerDate(pm, d),
                            nameBeneficiaryPayment BACKGROUND backgroundOutContractLedgerDate(pm, d),
                            nameCurrencyPayment BACKGROUND backgroundOutContractLedgerDate(pm, d),
                            nameTypeExchangePayment BACKGROUND backgroundOutContractLedgerDate(pm, d) SHOWIF isNotSameCurrencyPayment(pm),
                            sumPayment BACKGROUND backgroundOutContractLedgerDate(pm, d),
                            rateExchangePayment BACKGROUND backgroundOutContractLedgerDate(pm, d) SHOWIF isNotSameCurrencyPayment(pm),
                            sumRateExchangePayment BACKGROUND backgroundOutContractLedgerDate(pm, d) SHOWIF isNotSameCurrencyPayment(pm),
                            costedInContractLedgerOutContractLedger BACKGROUND backgroundOutContractLedgerDate(pm, d),
                            notePayment BACKGROUND backgroundOutContractLedgerDate(pm, d)
    PROPERTIES(pm) FORCE PANEL DRAWTOTOOLBAR writeOutContractLedgerFIFO, writeOutContractLedgerLIFO
    PROPERTIES(pm) ADDFORM, EDITFORM, delete
    ORDER BY dateTimePayment

    OBJECTS pr = paymentRequest
    PROPERTIES(pr) READONLY objectClassName BACKGROUND backgroundPaymentRequestDate(pr, d),
                            dateTimePaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            seriesNumberObject BACKGROUND backgroundPaymentRequestDate(pr, d),
                            sumPaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            notePaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d)
    PROPERTIES(pr) ADDFORM, EDITFORM, delete
    ORDER BY dateTimePaymentRequest

    OBJECTS cm = creditMemo
    PROPERTIES(cm) READONLY objectClassName BACKGROUND backgroundOutContractLedgerDate(cm, d),
                            dateTimeCreditMemo BACKGROUND backgroundOutContractLedgerDate(cm, d),
                            seriesNumberObject BACKGROUND backgroundOutContractLedgerDate(cm, d),
                            sumCreditMemo BACKGROUND backgroundOutContractLedgerDate(cm, d),
                            noteCreditMemo BACKGROUND backgroundOutContractLedgerDate(cm, d)
    PROPERTIES(cm) FORCE GRID READONLY costedInContractLedgerOutContractLedger BACKGROUND backgroundOutContractLedgerDate(cm, d) SHOWIF isOutContractLedger(cm)
    PROPERTIES(cm) FORCE PANEL DRAWTOTOOLBAR writeOutContractLedgerFIFO SHOWIF isOutContractLedger(cm),
                                             writeOutContractLedgerLIFO SHOWIF isOutContractLedger(cm)
    PROPERTIES(cm) ADDFORM, EDITFORM, delete
    ORDER BY dateTimeCreditMemo


    OBJECTS ic = inContractLedger
    PROPERTIES(ic) READONLY descriptionInContractLedger, sumInContractLedger
    PROPERTIES(ic, d) READONLY debtInContractLedgerDate BACKGROUND backgroundBonusSumInContractLedger(ic),
                               bonusSumInContractLedger BACKGROUND backgroundBonusSumInContractLedger(ic),
                               bonusDebtSumInContractLedgerDate BACKGROUND backgroundBonusSumInContractLedger(ic)
    PROPERTIES(ic, d) FORCE PANEL DRAWTOTOOLBAR payPaymentConditionInContractLedgerDate

    OBJECTS icoc = outContractLedger
    PROPERTIES(icoc) READONLY descriptionOutContractLedger, sumOutContractLedger
    PROPERTIES(icoc, d) READONLY costedInContractLedgerOutContractLedgerDate
    PROPERTIES READONLY costOutContractLedgerInContractLedger(icoc, ic)

    OBJECTS oc = outContractLedger
    PROPERTIES(oc) READONLY descriptionOutContractLedger, sumOutContractLedger
    PROPERTIES(oc, d) READONLY costedInContractLedgerOutContractLedgerDate
    PROPERTIES(oc) FORCE PANEL DRAWTOTOOLBAR writeOutContractLedgerFIFO SHOWIF isOutContractLedger(oc),
                                             writeOutContractLedgerLIFO SHOWIF isOutContractLedger(oc)

    OBJECTS ocic = inContractLedger
    PROPERTIES(ocic) READONLY descriptionInContractLedger, sumInContractLedger
    PROPERTIES(ocic, d) READONLY debtInContractLedgerDate
    PROPERTIES READONLY costOutContractLedgerInContractLedger(oc, ocic)

    FILTERS contractContractLedger(cl) == c,
            contractContractALedger(cal) == c,
            contractPayment(pm) == c,
            contractPaymentRequest(pr) == c,
            contractCreditMemo(cm) == c,
            contractInContractLedger(ic) == c,
            contractOutContractLedger(oc) == c,
            partyBContract(c) == partyB() OR (c IS contract AND NOT partyB()),
            partyAContract(c) == partyA() OR (c IS contract AND NOT partyA()),
            //dateContractLedger(cl) <= d,
            //dateContractALedger(cal) <= d,
            //datePayment(pm) <= d,
            //datePaymentRequest(pr) <= d,
            //dateCreditMemo(cm) <= d,
            //dateInContractLedger(ic) <=d,
            //dateOutContractLedger(oc) <=d,
            //dateInContractLedger(ocic) <=d,
            //dateOutContractLedger(icoc) <=d,
            costOutContractLedgerInContractLedger(icoc, ic) > 0,
            costOutContractLedgerInContractLedger(oc, ocic) > 0

;

DESIGN contractLedger FROM DEFAULT{

    NEW topContainer {

        childConstraints = TO THE BOTTOM;
        NEW headerContainer {
            childConstraints = TO THE RIGHT;
            caption = 'Шапка';
            ADD PROPERTY(date);
            ADD PROPERTY(namePartyA);
            ADD PROPERTY(namePartyB);
        }
        NEW firstContainer {

            type = SPLITV;
            ADD c.box;
            NEW firstSecondContainer {

                type = SPLITV;
                NEW firstThirdContainer {

                    type = SPLITH;
                    childConstraints = TO THE RIGHT;
                    ADD cl.box;
                    ADD cal.box;
                }
                NEW secondContainer {
                    type = TABBED;

                    ADD pm.box;
                    ADD pr.box;
                    ADD cm.box;

                    NEW debt.box {
                        childConstraints = TO THE RIGHT;
                        caption = 'Долг по документу';
                        ADD ic.box;
                        ADD icoc.box;
                    }

                    NEW cost.box {
                        childConstraints = TO THE RIGHT;
                        caption = 'Расписано по документу';
                        ADD oc.box;
                        ADD ocic.box;
                    }
                }
            }
        }
    }

    ADD functions.box;
}

NAVIGATOR {
    NEW contractNavigator 'Задолженности' {
        ADD contractLedger;
        ADD payments;
        ADD costContractLedger;
    }
}
