MODULE ContractLedger;

REQUIRE Contract,
        LegalEntity,
        Numerator,
        Currency;

META defineContractLedgerPrefix (caption, prefix)

    CLASS ABSTRACT contract###prefix##Ledger caption;
    TABLE contract###prefix##Ledger(contract###prefix##Ledger);

    dateTimeContract###prefix##Ledger 'Дата/время' (contract###prefix##Ledger) = ABSTRACT DATETIME (contract###prefix##Ledger);
    dateContract###prefix##Ledger 'Дата' (contract###prefix##Ledger) = dateInTime(dateTimeContract###prefix##Ledger(contract###prefix##Ledger));
    timeContract###prefix##Ledger 'Время' (contract###prefix##Ledger) = timeInDateTime(dateTimeContract###prefix##Ledger(contract###prefix##Ledger));

    contractContract###prefix##Ledger 'Договор' (contract###prefix##Ledger) = ABSTRACT contract (contract###prefix##Ledger);

    descriptionContract###prefix##Ledger 'Название документа' (contract###prefix##Ledger) = ABSTRACT STRING[200] (contract###prefix##Ledger);

    sumContract###prefix##Ledger 'Сумма' (contract###prefix##Ledger) = ABSTRACT NUMERIC[16,2] (contract###prefix##Ledger);

    currentBalance###prefix##Contract 'Текущая сумма задолженности по договору' (contract)=
        GROUP SUM sumContract###prefix##Ledger(contract###prefix##Ledger)
              BY contractContract###prefix##Ledger(contract###prefix##Ledger);

    balanceB###prefix##ContractDate 'Сумма задолженности по договору на дату (до)' (contract, date) =
        (currentBalance###prefix##Contract(contract) AND date AS DATE) (-)
        [GROUP SUM sumContract###prefix##Ledger(contract###prefix##Ledger)
                  IF dateContract###prefix##Ledger(contract###prefix##Ledger) >= (date AS DATE)
              BY contractContract###prefix##Ledger(contract###prefix##Ledger), date](contract, date);

    balanceA###prefix##ContractDate 'Сумма задолженности по договору на дату (после)' (contract, date) =
        (currentBalance###prefix##Contract(contract) AND date AS DATE) (-)
        [GROUP SUM sumContract###prefix##Ledger(contract###prefix##Ledger)
                  IF dateContract###prefix##Ledger(contract###prefix##Ledger) > (date AS DATE)
              BY contractContract###prefix##Ledger(contract###prefix##Ledger), date](contract, date);

END

@defineContractLedgerPrefix('Изменение управленческого долга по контракту', );
@defineContractLedgerPrefix('Изменение бухгалтерского долга по контракту', a);

META implementContractLedger(prefix, object)

    dateTimeContract###prefix##Ledger(contract###prefix##Ledger) += dateTime###object(contract###prefix##Ledger);
    contractContract###prefix##Ledger(contract###prefix##Ledger) += contract###object(contract###prefix##Ledger);
    descriptionContract###prefix##Ledger(contract###prefix##Ledger) += description###object(contract###prefix##Ledger);

END

META implementContractPrepaymentLedger(object)

    CLASS object##ContractLedger : contractLedger;

    needToCreate###object##ContractLedger (object) =  formContractSkuDate(contract###object(object), date###object(object)) == contractSkuForm.prepayment;

    @defineAggregation(object, object##ContractLedger, needToCreate###object##ContractLedger);

    dateTimeContractLedger(object##ContractLedger) += sumDateTimeDay(dateTime###object(object###object##ContractLedger(object##ContractLedger)),
                                                                     delayContractSku(contract###object(object###object##ContractLedger(object##ContractLedger))));
    contractContractLedger(object##ContractLedger) += contract###object(object###object##ContractLedger(object##ContractLedger));
    descriptionContractLedger(object##ContractLedger) += description###object(object###object##ContractLedger(object##ContractLedger));

END

//--------------------------------------------- Логика приходов и расходов ------------------------------------------------------//

META defineInOutContractLedgerPrefix(caption, prefix)

    CLASS ABSTRACT prefix##ContractLedger caption;
    TABLE prefix##ContractLedger(prefix##ContractLedger);

    dateTime###prefix##ContractLedger 'Дата/время' (prefix##ContractLedger) = ABSTRACT DATETIME (prefix##ContractLedger);
    date###prefix##ContractLedger 'Дата' (prefix##ContractLedger) = dateInTime(dateTime###prefix##ContractLedger(prefix##ContractLedger));
    time###prefix##ContractLedger 'Время' (prefix##ContractLedger) = timeInDateTime(dateTime###prefix##ContractLedger(prefix##ContractLedger));

    contract###prefix##ContractLedger 'Договор' (prefix##ContractLedger) = ABSTRACT contract (prefix##ContractLedger);

END

@defineInOutContractLedgerPrefix('Приход', in);
@defineInOutContractLedgerPrefix('Расход', out);

costInOutContractLedger 'Оплачено из документу' (inContractLedger, outContractLedger) = ABSTRACT NUMERIC[14,3] (inContractLedger, outContractLedger);

costedInOutContractLedger 'Оплачено по документу' (inContractLedger) = GROUP SUM costInOutContractLedger(inContractLedger, outContractLedger) BY inContractLedger;

//-------------------------------------------- Логика платежей ----------------------------------------------------------------//

CLASS payment 'Платеж' : numeratedObject, contractLedger, contractALedger, outContractLedger;

@defineNumeratedObject(payment, 'Нумератор для платежей', 'ПЛ');

dateTimePayment 'Дата время' (payment) = DATA DATETIME (payment);
dateTimePayment(payment) <- currentDateTime() WHEN ASSIGNED(payment IS payment);
datePayment 'Дата' (payment) = dateInTime(dateTimePayment(payment));
timePayment 'Время' (payment) = timeInDateTime(dateTimePayment(payment));

contractPayment 'Контракт' (payment) = DATA contract (payment) AUTOSET;
numberContractPayment 'Номер контракта' (payment) = numberContract(contractPayment(payment));

payerPayment(payment) = DATA legalEntity (payment);
payerPayment(payment) <- partyBContract(contractPayment(payment)) WHEN ASSIGNED (contractPayment(payment));
namePayerPayment 'Сторона Б(Плательщик)' (payment) = name(payerPayment(payment));
beneficiaryPayment(payment) = DATA legalEntity (payment);
beneficiaryPayment(payment) <- partyAContract(contractPayment(payment)) WHEN ASSIGNED (contractPayment(payment));
nameBeneficiaryPayment 'Сторона А(Бенефициар)' (payment) = name(beneficiaryPayment(payment));

currencyPayment 'Валюта платежа' (payment) = DATA currency (payment);
nameCurrencyPayment 'Валюта платежа' (payment) = name(currencyPayment(payment));
typeExchangePayment (payment) = DATA typeExchange (payment);
nameTypeExchangePayment 'Тип обмена' (payment) = name(typeExchangePayment(payment));
rateExchangePayment 'Курс' (payment) = DATA NUMERIC[15,8] (payment);
rateExchangePayment (payment) <- UNION OVERRIDE 1.0 IF payment IS payment, rateTypeExchangeCurrencyDate(typeExchangePayment(payment), currencyPayment(payment), datePayment(payment))
    WHEN CHANGED (currencyPayment(payment)) OR
         CHANGED (typeExchangePayment(payment)) OR
         CHANGED (datePayment(payment));

CONSTRAINT currencyTypeExchange(typeExchangePayment(payment)) != currencyContract(contractPayment(payment))
    CHECKED BY typeExchangePayment MESSAGE 'Валюта типа обмена должны соответствовать валюте договора+';

sumPayment 'Сумма платежа' (payment) = DATA NUMERIC[16,2] (payment);
sumRateExchangePayment 'Сумма платежа(конверт.)' (payment) = sumPayment(payment) / rateExchangePayment(payment);

isNotSameCurrencyPayment (payment) = currencyContract(contractPayment(payment)) != currencyPayment(payment);

descriptionPayment 'Название документа' =
    [FORMULA STRING[200] '\'Платеж \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberObject(payment), datePayment(payment), nameBeneficiaryPayment(payment));

@implementContractLedger( ,payment);
sumContractLedger(contractLedger) += -sumRateExchangePayment(contractLedger);

@implementContractLedger(a ,payment);
sumContractALedger(contractALedger) += -sumRateExchangePayment(contractALedger);

FORM payment 'Платеж'

    OBJECTS p = payment FIXED PANEL
    PROPERTIES(p) nameNumeratorObject, numberObject, seriesObject, dateTimePayment, numberContractPayment
    PROPERTIES(p) READONLY namePayerPayment, nameBeneficiaryPayment
    PROPERTIES(p) nameCurrencyPayment, nameTypeExchangePayment SHOWIF isNotSameCurrencyPayment(p), sumPayment,
                  rateExchangePayment SHOWIF isNotSameCurrencyPayment(p),
                  sumRateExchangePayment SHOWIF isNotSameCurrencyPayment(p)

    EDIT payment OBJECT p
;

DESIGN payment FROM DEFAULT{

    NEW topContainer{

        childConstraints = TO THE RIGHT;
        ADD PROPERTY(nameNumeratorObject);
        ADD PROPERTY(numberObject);
        ADD PROPERTY(seriesObject);
        ADD PROPERTY(dateTimePayment);
    }

    ADD PROPERTY(numberContractPayment);
    ADD PROPERTY(namePayerPayment);
    ADD PROPERTY(nameBeneficiaryPayment);
    ADD PROPERTY(nameCurrencyPayment);
    ADD PROPERTY(nameTypeExchangePayment);
    ADD PROPERTY(sumPayment);
    ADD PROPERTY(rateExchangePayment);
    ADD PROPERTY(sumRateExchangePayment);

    ADD functions.box;
}

partyA = SESSION DATA legalEntity();
namePartyA 'Сторона А' = name(partyA());
partyB = SESSION DATA legalEntity();
namePartyB 'Сторона Б' = name(partyB());

FORM payments 'Платежи'

    OBJECTS d = DATE FIXED PANEL
    PROPERTIES(d) date = OBJVALUE

    PROPERTIES() namePartyA, namePartyB

    OBJECTS p = payment
    PROPERTIES(p) READONLY numberObject, seriesObject, dateTimePayment, numberContractPayment, namePayerPayment,
                           nameBeneficiaryPayment, nameCurrencyPayment, nameTypeExchangePayment, sumPayment,
                           rateExchangePayment, sumRateExchangePayment

    PROPERTIES(p) ADDFORM, EDITFORM, delete

    FILTERS payerPayment(p) == partyB() OR (p IS payment AND NOT partyB()),
            beneficiaryPayment(p) == partyA() OR (p IS payment AND NOT partyA()),
            datePayment(p) <= d

;

DESIGN payments FROM DEFAULT{

    NEW headerContainer {
        childConstraints = TO THE RIGHT;
        caption = 'Шапка';
        ADD PROPERTY(date);
        ADD PROPERTY(namePartyA);
        ADD PROPERTY(namePartyB);
    }
    ADD p.box;
    ADD functions.box;
}

//--------------------------------------------- Платежное требование ------------------------------------------------------//

CLASS paymentRequest 'Платежное требование' : numeratedObject, contractLedger, inContractLedger;

@defineNumeratedObject(paymentRequest, 'Нумератор для платежных требований', 'ПТ');

dateTimePaymentRequest 'Дата время' (paymentRequest) = DATA DATETIME (paymentRequest);
dateTimePaymentRequest(paymentRequest) <- currentDateTime() WHEN ASSIGNED(paymentRequest IS paymentRequest);
datePaymentRequest 'Дата' (paymentRequest) = dateInTime(dateTimePaymentRequest(paymentRequest));
timePaymentRequest 'Время' (paymentRequest) = timeInDateTime(dateTimePaymentRequest(paymentRequest));

contractPaymentRequest 'Контракт' (paymentRequest) = DATA contract (paymentRequest) AUTOSET;
numberContractPaymentRequest 'Номер контракта' (paymentRequest) = numberContract(contractPaymentRequest(paymentRequest));

payerPaymentRequest(paymentRequest) = DATA legalEntity (paymentRequest);
payerPaymentRequest(paymentRequest) <- partyBContract(contractPaymentRequest(paymentRequest)) WHEN ASSIGNED (contractPaymentRequest(paymentRequest));
namePayerPaymentRequest 'Сторона Б' (paymentRequest) = name(payerPaymentRequest(paymentRequest));
lenderPaymentRequest(paymentRequest) = DATA legalEntity (paymentRequest);
lenderPaymentRequest(paymentRequest) <- partyAContract(contractPaymentRequest(paymentRequest)) WHEN ASSIGNED (contractPaymentRequest(paymentRequest));
nameLenderPaymentRequest 'Сторона А' (paymentRequest) = name(lenderPaymentRequest(paymentRequest));

sumPaymentRequest 'Сумма' (paymentRequest) = DATA NUMERIC[16,2] (paymentRequest);

descriptionPaymentRequest 'Название документа' =
    [FORMULA STRING[200] '\'Платежное требование \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberObject(paymentRequest), datePaymentRequest(paymentRequest), nameLenderPaymentRequest(paymentRequest));

@implementContractLedger( ,paymentRequest);
sumContractLedger(contractLedger) += sumPaymentRequest(contractLedger);

FORM paymentRequest 'Платежное требование'

    OBJECTS p = paymentRequest FIXED PANEL
    PROPERTIES(p) nameNumeratorObject, numberObject, seriesObject, dateTimePaymentRequest,
                  numberContractPaymentRequest
    PROPERTIES(p) READONLY namePayerPaymentRequest, nameLenderPaymentRequest
    PROPERTIES(p) sumPaymentRequest

    EDIT paymentRequest OBJECT p
;

DESIGN paymentRequest FROM DEFAULT{

    NEW topContainer{

        childConstraints = TO THE RIGHT;
        ADD PROPERTY(nameNumeratorObject);
        ADD PROPERTY(numberObject);
        ADD PROPERTY(seriesObject);
        ADD PROPERTY(dateTimePaymentRequest);
    }

    ADD PROPERTY(numberContractPaymentRequest);
    ADD PROPERTY(namePayerPaymentRequest);
    ADD PROPERTY(nameLenderPaymentRequest);
    ADD PROPERTY(sumPaymentRequest);

    ADD functions.box;
}

//-------------------------------------------- Кредитная нота --------------------------------------------------------//

CLASS creditNote 'Кредитная нота' : numeratedObject, contractLedger, contractALedger, inContractLedger, outContractLedger;

@defineNumeratedObject(creditNote, 'Нумератор для кредитных нот', 'КН');

dateTimeCreditNote 'Дата время' (creditNote) = DATA DATETIME (creditNote);
dateTimeCreditNote(creditNote) <- currentDateTime() WHEN ASSIGNED(creditNote IS creditNote);
dateCreditNote 'Дата' (creditNote) = dateInTime(dateTimeCreditNote(creditNote));
timeCreditNote 'Время' (creditNote) = timeInDateTime(dateTimeCreditNote(creditNote));

contractCreditNote 'Контракт' (creditNote) = DATA contract (creditNote) AUTOSET;
numberContractCreditNote 'Номер контракта' (creditNote) = numberContract(contractCreditNote(creditNote));

partyBCreditNote(creditNote) = DATA legalEntity (creditNote);
partyBCreditNote(creditNote) <- partyBContract(contractCreditNote(creditNote)) WHEN ASSIGNED (contractCreditNote(creditNote));
namePartyBCreditNote 'Сторона Б' (creditNote) = name(partyBCreditNote(creditNote));
partyACreditNote(creditNote) = DATA legalEntity (creditNote);
partyACreditNote(creditNote) <- partyAContract(contractCreditNote(creditNote)) WHEN ASSIGNED (contractCreditNote(creditNote));
namePartyACreditNote 'Сторона А' (creditNote) = name(partyACreditNote(creditNote));

sumCreditNote 'Сумма' (creditNote) = DATA NUMERIC[16,2] (creditNote);

descriptionCreditNote 'Название документа' =
    [FORMULA STRING[200] '\'Кредитная нота \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberObject(creditNote), dateCreditNote(creditNote), namePartyACreditNote(creditNote));

@implementContractLedger( ,creditNote);
sumContractLedger(contractLedger) += sumCreditNote(contractLedger);

@implementContractLedger(a ,creditNote);
sumContractALedger(contractALedger) += sumCreditNote(contractALedger);

FORM creditNote 'Кредитная нота'

    OBJECTS c = creditNote FIXED PANEL
    PROPERTIES(c) nameNumeratorObject, numberObject, seriesObject, dateTimeCreditNote, numberContractCreditNote
    PROPERTIES(c) READONLY namePartyBCreditNote, namePartyACreditNote
    PROPERTIES(c) sumCreditNote

    EDIT creditNote OBJECT c
;

DESIGN creditNote FROM DEFAULT{

    NEW topContainer{

        childConstraints = TO THE RIGHT;
        ADD PROPERTY(nameNumeratorObject);
        ADD PROPERTY(numberObject);
        ADD PROPERTY(seriesObject);
        ADD PROPERTY(dateTimeCreditNote);
    }

    ADD PROPERTY(numberContractCreditNote);
    ADD PROPERTY(namePartyBCreditNote);
    ADD PROPERTY(namePartyACreditNote);
    ADD PROPERTY(sumCreditNote);

    ADD functions.box;
}

//-------------------------------------------- Сводная форма ---------------------------------------------------------//

FORM contractLedger 'Задолженности и платежи по договору'

    OBJECTS d = DATE FIXED PANEL
    PROPERTIES(d) date = OBJVALUE

    PROPERTIES() namePartyA, namePartyB

    OBJECTS c = contract
    PROPERTIES(c) READONLY numberContract, namePartyAContract, namePartyBContract, nameCurrencyContract
    PROPERTIES(c, d) READONLY balanceBContractDate, balanceBAContractDate,
                              balanceAContractDate, balanceAAContractDate

    OBJECTS cl = contractLedger
    PROPERTIES(cl) READONLY dateContractLedger, sumContractLedger, descriptionContractLedger

    OBJECTS cal = contractALedger
    PROPERTIES(cal) READONLY dateContractALedger, sumContractALedger, descriptionContractALedger

    OBJECTS pm = payment
    PROPERTIES(pm) READONLY dateTimePayment, seriesNumberObject, namePayerPayment, nameBeneficiaryPayment, nameCurrencyPayment,
                            nameTypeExchangePayment SHOWIF isNotSameCurrencyPayment(pm), sumPayment,
                            rateExchangePayment SHOWIF isNotSameCurrencyPayment(pm),
                            sumRateExchangePayment SHOWIF isNotSameCurrencyPayment(pm)
    PROPERTIES(pm) ADDFORM, EDITFORM, delete

    OBJECTS pr = paymentRequest
    PROPERTIES(pr) READONLY dateTimePaymentRequest, seriesNumberObject, sumPaymentRequest
    PROPERTIES(pr) ADDFORM, EDITFORM, delete

    OBJECTS cn = creditNote
    PROPERTIES(cn) READONLY dateTimeCreditNote, seriesNumberObject, sumCreditNote
    PROPERTIES(cn) ADDFORM, EDITFORM, delete

    FILTERS contractContractLedger(cl) == c,
            contractContractALedger(cal) == c,
            contractPayment(pm) == c,
            contractPaymentRequest(pr) == c,
            contractCreditNote(cn) == c,
            partyBContract(c) == partyB() OR (c IS contract AND NOT partyB()),
            partyAContract(c) == partyA() OR (c IS contract AND NOT partyA()),
            dateContractLedger(cl) <= d,
            dateContractALedger(cal) <= d,
            datePayment(pm) <= d,
            datePaymentRequest(pr) <= d,
            dateCreditNote(cn) <= d

;

DESIGN contractLedger FROM DEFAULT{

    NEW topContainer {

        childConstraints = TO THE BOTTOM;
        NEW headerContainer {
            childConstraints = TO THE RIGHT;
            caption = 'Шапка';
            ADD PROPERTY(date);
            ADD PROPERTY(namePartyA);
            ADD PROPERTY(namePartyB);
        }
        NEW firstContainer {

            type = SPLITV;
            ADD c.box;
            NEW firstSecondContainer {

                type = SPLITV;
                NEW firstThirdContainer {

                    type = SPLITH;
                    childConstraints = TO THE RIGHT;
                    ADD cl.box;
                    ADD cal.box;
                }
                NEW secondContainer {

                    type = TABBED;
                    ADD pm.box;
                    ADD pr.box;
                    ADD cn.box;
                }
            }
        }
    }

    ADD functions.box;
}