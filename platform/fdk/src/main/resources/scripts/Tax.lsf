MODULE Tax;

REQUIRE BaseLogicsModule, Utils, Hierarchy;

// ---------------------------------- Налог --------------------------------------- //

CLASS STATIC tax 'Налоги'
{
    taxVAT 'НДС',
    taxNP 'Налог с продаж'
};

nameTax 'Наименование налога' = DATA STRING[200] (tax) IN baseGroup;

// ---------------------------------- Шкала налога --------------------------------------- //

CLASS range 'Шкала';
TABLE range(range);
numberRange 'Шкала' = DATA INTEGER (range) AGGPROP;

taxRange 'Налог ИД' = DATA tax (range) IN idGroup;
nameTaxRange 'Налог' (range) = name(taxRange(range)) IN baseGroup;

maxDataRangeTax(tax) = UNION OVERRIDE 0 IF tax IS tax, [GROUP MAX numberRange(range) BY taxRange(range)](tax);
nextDataRangeTax(tax) = maxDataRangeTax(tax) + 1;

addNewRange 'Добавить шкалу' = ACTION (tax) {
    ADDOBJ range;
    SET numberRange(r) IF r == addedObject() <- nextDataRangeTax(tax);
} TOOLBAR IMAGE 'add.png';

CLASS STATIC rangeType 'Для каких подразделений действует шкала'
{
    common 'Общий',
    units 'Для подразделений'
};
rangeTypeRange = DATA rangeType (range) NOT NULL;
nameRangeTypeRange 'Тип шкалы' = name(rangeTypeRange(range)) IN baseGroup;

isUnitsTypeRange(range) = rangeTypeRange(range) == rangeType.units;

rangeTypeRange(range) <- rangeType.common WHEN ASSIGNED(range IS range);     /// потом согласовать, какое значение должно быть по-умолчанию ///

// ----------------------------- Разбиение шкалы для подразделений ------------------------------------- //

CLASS ABSTRACT taxUnitGroup 'Группа налогового субъекта' : named;
@defineHierarchyAbstract(taxUnitGroup);

CLASS ABSTRACT taxUnit 'Налоговый субъект';
TABLE taxUnit(taxUnit);

taxUnitGroupTaxUnit = ABSTRACT taxUnitGroup (taxUnit) PERSISTENT;
descriptionTaxUnit 'Название налогового субъекта' = ABSTRACT STRING[255] (taxUnit) PERSISTENT;

inRangeTaxUnit 'Вкл.' (range, taxUnit) = DATA BOOLEAN (range, taxUnit);
inRangeTaxUnit (range, taxUnit) => isUnitsTypeRange(range) RESOLVE FALSE;

rangeVATTaxTaxUnit 'Шкала по налогу и субъекту' (tax, taxUnit) = GROUP UNIQUE range BY taxRange(range), taxUnit
                                                                       WHERE inRangeTaxUnit(range, taxUnit) AND tax.taxVAT == taxRange(range);


// ---------------------------------- История изменений шкалы --------------------------------------- //

CLASS rate 'История изменений шкалы' : historyObject;
TABLE rate(rate);

rangeRate = DATA range (rate) IN idGroup;
quantityRateRange 'Количество историй' (range) = GROUP SUM 1 IF rate BY rangeRate(rate);

valueRate 'Значение ставки' = DATA NUMERIC[10,5] (rate) IN recognizeGroup NOT NULL;
dateFromRate 'Действует с' = DATA DATE (rate) IN baseGroup;
dateToRate 'Действует по' = DATA DATE (rate) IN baseGroup;

rateRangeDate(range, date) = GROUP MAX rate IF dateFromRate(rate) <= date AND NOT dateToRate(rate) < date AND date AS DATE
                                         BY rangeRate(rate), date;
valueRateRangeDate 'На дату' (range, date) = valueRate(rateRangeDate(range, date));

currentRateRange (range) = rateRangeDate(range, currentDate()) IN idGroup PERSISTENT;
valueCurrentRateRange 'Действующая ставка' (range) = valueRate(currentRateRange(range)) IN baseGroup;

dateFromActingRateRange 'Действует с' (range) = dateFromRate(currentRateRange(range)) IN baseGroup;
dateToActingRateRange 'Действует по' (range) = dateToRate(currentRateRange(range)) IN baseGroup;
nameUserCreatedActingRateRange 'Создан пользователем' (range) = nameUserCreated(currentRateRange(range)) IN baseGroup;

CONSTRAINT rangeRate(rt1) == rangeRate(rt2) AND NOT (dateFromRate(rt2) <= dateFromRate(rt1) OR dateToRate(rt1) < dateFromRate(rt2))  MESSAGE 'ошибка: Одновременно не может быть несколько действующих ставок / или не задано: действует с';

// для импорта
valueCurrentRangeValue 'Шкала по значению' (doubleValue) = GROUP UNIQUE range BY valueCurrentRateRange (range);

addTaxNumberValue 'Добавить значение НДС' = ACTION (number, value) {
    ADDOBJ range;
    FOR rn == addedObject() DO {
       SET rangeTypeRange(rn) <- rangeType.common;
       SET taxRange(rn) <- tax.taxVAT;
       SET numberRange(rn) <- number AS INTEGER;
       ADDOBJ rate;
       FOR ra == addedObject() DO {
          SET rangeRate(ra) <- rn AS range;
          SET valueRate(ra) <- value AS NUMERIC[10,5];
          SET dateFromRate(ra) <- 2001_01_01;
       };
    };
};

// --------------------------------------- Формы ------------------------------------- //

FORM tax 'Налог'
    OBJECTS           t = tax FIXED PANEL
    PROPERTIES(t)     name, nameTax

    OBJECTS           ra = range
    PROPERTIES(ra)    numberRange, nameRangeTypeRange, delete
    PROPERTIES(ra)    READONLY valueCurrentRateRange, dateFromActingRateRange, dateToActingRateRange
    PROPERTIES(t)     addNewRange TODRAW ra
    FILTERS           taxRange(ra) == t

    OBJECTS           rt=rate
    PROPERTIES(rt)    valueRate, dateFromRate, dateToRate, timeCreated, nameUserCreated, ADDOBJ, delete
    FILTERS           rangeRate(rt) == ra

    TREE treeTaxUnit  a=STRING[3], ug = taxUnitGroup PARENT parentTaxUnitGroup
    PROPERTIES READONLY OBJVALUE(a), name(ug)
    FILTERS           stringEqualsAll(a)

    OBJECTS           u=taxUnit
    PROPERTIES(u)     descriptionTaxUnit
    PROPERTIES(ra, u) inRangeTaxUnit SHOWIF isUnitsTypeRange(ra)
    FILTERS           taxUnitGroupTaxUnit(u) == ug OR u IS taxUnit AND NOT ug

    FILTERGROUP filters
        FILTER 'Показывать магазины только для данного налога' 'F10' inRangeTaxUnit(ra, u)

    EDIT tax OBJECT t
;

DESIGN tax FROM DEFAULT {
    main {
       NEW secondCase BEFORE functions.box {
            ADD u.box {
                fillHorizontal = 3.8;
            };
            ADD treeTaxUnit.box {
                title = 'Налоговые субъекты';
                fillHorizontal = 1.2;
            };
            POSITION treeTaxUnit.box TO THE LEFT u.box;
       }
       NEW firstCase BEFORE secondCase {
            ADD ra.box {
                fillHorizontal = 2.5;
            };
            ADD rt.box {
                fillHorizontal = 2.5;
            };
            POSITION ra.box TO THE LEFT rt.box;
       }
    }
}

FORM taxes 'Налоги'
    OBJECTS           t=tax
    PROPERTIES(t)     READONLY name, nameTax
    PROPERTIES(t)     EDITFORM, delete

    OBJECTS           ra=range
    PROPERTIES(ra)    READONLY numberRange, valueCurrentRateRange, dateFromActingRateRange, dateToActingRateRange, nameUserCreatedActingRateRange, nameRangeTypeRange, quantityRateRange

    OBJECTS           u=taxUnit
    PROPERTIES(u)     READONLY descriptionTaxUnit

    PROPERTIES(ra, u) READONLY inRangeTaxUnit

    FILTERS  taxRange(ra) == t,
             inRangeTaxUnit(ra, u)
;

DESIGN taxes FROM DEFAULT {

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD t.box;
        NEW firstCase {

            type = SPLITV;

            ADD ra.box;
            ADD u.box;
        }
    }
    ADD functions.box;
}
