MODULE LegalEntity;

REQUIRE System, MasterData, Historizable, Tax, Country, I18n, Employee;

// ----------------------------------- Форма собственности ------------------------------------------ //

CLASS ownership 'Форма собственности' : named;
TABLE ownership (ownership);

shortNameOwnership 'Cокращенное название' = DATA STRING[10] (ownership) IN base FIXEDCHARWIDTH 6;
shortNameToOwnership (string) = GROUP UNIQUE ownership BY shortNameOwnership (ownership) WHERE ownership IS ownership;

countryOwnership = DATA country (ownership);
nameCountryOwnership 'Страна' (ownership) = name(countryOwnership(ownership)) MINCHARWIDTH 10 PREFCHARWIDTH 15 MAXCHARWIDTH 20;

FORM ownership 'Форма собственности'

    OBJECTS o = ownership FIXED PANEL
    PROPERTIES(o) name, shortNameOwnership, nameCountryOwnership

    EDIT ownership OBJECT o
;

// ----------------------------------- Юридическое лицо --------------------------------- //

CLASS legalEntity 'Организация' : named, taxUnitGroup, employeeDivision;
TABLE legalEntity (legalEntity);
TABLE legalEntityDate (legalEntity, DATE);

countryLegalEntity = DATA country(legalEntity);
nameCountryLegalEntity 'Страна' (legalEntity) = name(countryLegalEntity(legalEntity)) MINCHARWIDTH 10 PREFCHARWIDTH 15 MAXCHARWIDTH 20;

currencyLegalEntity = DATA currency(legalEntity);
nameCurrencyLegalEntity 'Базовая валюта' (legalEntity) = name(currencyLegalEntity(legalEntity)) MINCHARWIDTH 10 PREFCHARWIDTH 10 MAXCHARWIDTH 15;
currencyLegalEntity(legalEntity) <- currencyCountry(countryLegalEntity(legalEntity)) WHEN CHANGED(countryLegalEntity(legalEntity));

languageLegalEntity = DATA language(legalEntity);
nameLanguageLegalEntity 'Язык' (legalEntity) = name(languageLegalEntity(legalEntity)) MINCHARWIDTH 5 PREFCHARWIDTH 10 MAXCHARWIDTH 15;
languageLegalEntity(legalEntity) <- languageCountry(countryLegalEntity(legalEntity)) WHEN CHANGED(countryLegalEntity(legalEntity));

GROUP lawGroup 'Реквизиты' : public;

ownershipLegalEntity = DATA ownership (legalEntity);
nameOwnershipLegalEntity 'Форма собственности' = name(ownershipLegalEntity(legalEntity)) IN lawGroup;
shortNameOwnershipLegalEntity 'Форма собственности (сокр.)' = shortNameOwnership(ownershipLegalEntity(legalEntity)) IN lawGroup;

CONSTRAINT countryOwnership(ownershipLegalEntity(legalEntity)) != countryLegalEntity(legalEntity)
    CHECKED BY ownershipLegalEntity MESSAGE 'Страна формы собственности должна совпадать со страной организации';

fullNameLegalEntity 'Полное наименование' = DATA STRING[200] (legalEntity) IN lawGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;

@defineHistorizable(addressLegalEntity, 'Юридический адрес', STRING[150], legalEntity, name, lawGroup);
@defineHistorizable(postAddressLegalEntity, 'Почтовый адрес', STRING[150], legalEntity, name, lawGroup);

GROUP contactGroup 'Контактная информация' : public;

@defineHistorizable(phoneLegalEntity, 'Телефон/факс', STRING[100], legalEntity, name, contactGroup);
emailLegalEntity 'E-mail' = DATA STRING[100] (legalEntity) IN contactGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
siteLegalEntity 'Сайт' = DATA STRING[100] (legalEntity) IN contactGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
contactsLegalEntity 'Дополнительная информация' = DATA STRING[300] (legalEntity) IN contactGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;

GROUP managementGroup 'Управление' : public;

@defineHistorizable(managerLegalEntity, 'Руководитель', STRING[100], legalEntity, name, managementGroup);
@defineHistorizable(accountantLegalEntity, 'Главный бухгалтер', STRING[100], legalEntity, name, managementGroup);

GROUP docGroup 'Для договора' : public;

GROUP orderGroup 'Для заказов' : public;

quantityDaysCloseOrdersLegalEntity 'Срок автоматического закрытия заказов' = DATA INTEGER(legalEntity) IN orderGroup;

// ----------------------------------- Группы юридический лиц ---------------------------- //

CLASS legalEntityGroup 'Группа организаций' : named, employeeDivisionGroup;

legalEntityGroupLegalEntity (legalEntity) = DATA legalEntityGroup (legalEntity) PERSISTENT AUTOSET;
nameLegalEntityGroupLegalEntity 'Группа организаций' (legalEntity) = name(legalEntityGroupLegalEntity(legalEntity));

@defineHierarchy(legalEntityGroup);

inLegalEntityGroupLegalEntity (legalEntityGroup, legalEntity) =
    UNION OVERRIDE legalEntity IS legalEntity AND NOT legalEntityGroup IS legalEntityGroup,
                   isParentLegalEntityGroupLegalEntityGroup(legalEntityGroupLegalEntity(legalEntity), legalEntityGroup);

parentEmployeeDivisionGroup (group) += parentLegalEntityGroup(group);
employeeDivisionGroupEmployeeDivision (legalEntity) += legalEntityGroupLegalEntity(legalEntity);

FORM legalEntityGroup 'Группа организаций'

    OBJECTS l = legalEntityGroup FIXED PANEL
    PROPERTIES(l) name, nameParentLegalEntityGroup

    EDIT legalEntityGroup OBJECT l
;

FORM legalEntityGroups 'Группы организаций'

    TREE legalEntityGroupTree lg = legalEntityGroup PARENT parentLegalEntityGroup
    PROPERTIES READONLY lgTreeName = name(lg)
    ORDER BY name(lg)

    DIALOG legalEntityGroup OBJECT lg
;

// ----------------------------------- Лицензия ------------------------------------------ //
GROUP licenseGroup 'Лицензионная информация' : base;
CLASS license 'Лицензия';
TABLE license (license);

numberLicense 'Номер лицензии' = DATA STRING[100] (license) IN licenseGroup;
dateFromLicense 'Действует с ' = DATA DATE (license) IN licenseGroup;
dateToLicense 'Действует по ' = DATA DATE (license) IN licenseGroup;

countryLicense = DATA country (license);
nameCountryLicense 'Страна' = name(countryLicense(license));

legalEntityLicense 'ЮЛ (ИД)' = DATA legalEntity (license);

licenseLegalEntityDate 'Действующая на дату' (legalEntity, date) = GROUP MAX license AS license IF dateFromLicense(license) <= date AND NOT dateToLicense(license) < date AND date AS DATE
                                                                         BY legalEntityLicense(license), date;
currentLicenseLegalEntity 'Действующая' (legalEntity) = licenseLegalEntityDate(legalEntity, currentDate());
numberCurrentLicenseLegalEntity 'Действующая лицензия' (legalEntity) = numberLicense(currentLicenseLegalEntity(legalEntity)) IN lawGroup;

CONSTRAINT countryLegalEntity(legalEntityLicense(license)) != countryLicense(license)
    CHECKED BY legalEntityLicense MESSAGE 'Страна лицензии должна совпадать со страной организации';

// ------------------------------------ Собственные компании ----------------------------- //
GROUP filterEntityGroup 'Фильтры' : public;

isSupplierLegalEntity 'Явл. поставщиком' = DATA BOOLEAN (legalEntity) IN filterEntityGroup;
isCompanyLegalEntity 'Явл. компанией' = DATA BOOLEAN (legalEntity) IN filterEntityGroup;
isCustomerLegalEntity 'Явл. покупателем' = DATA BOOLEAN (legalEntity) IN filterEntityGroup;
isSellerLegalEntity 'Поставщик или компания' (legalEntity) = isSupplierLegalEntity(legalEntity) OR isCompanyLegalEntity(legalEntity);
isBuyerLegalEntity 'Покупатель или компания' (legalEntity) = isCustomerLegalEntity(legalEntity) OR isCompanyLegalEntity(legalEntity);

differentStocksInDetailsLegalEntity 'Разные склады в строках' = DATA BOOLEAN (legalEntity) IN filterEntityGroup;

// ------------------------------------ Доступные организации для пользователей -------------------------- //

countAccessSupplierEmployee (employee) = GROUP SUM 1 IF isSupplierLegalEntity(legalEntity) AND accessEmployeeEmployeeDivision(employee, legalEntity)
                                               BY employee PERSISTENT;
countAccessCompanyEmployee (employee) = GROUP SUM 1 IF isCompanyLegalEntity(legalEntity) AND accessEmployeeEmployeeDivision(employee, legalEntity)
                                              BY employee PERSISTENT;
countAccessCustomerEmployee (employee)= GROUP SUM 1 IF isCustomerLegalEntity(legalEntity) AND accessEmployeeEmployeeDivision(employee, legalEntity)
                                              BY employee PERSISTENT;

defaultSupplierEmployee 'Поставщик по умолчанию' (employee)= GROUP MIN legalEntity IF isSupplierLegalEntity(legalEntity) AND accessEmployeeEmployeeDivision(employee, legalEntity)
                                                                   BY employee PERSISTENT;
defaultCompanyEmployee 'Компания по умолчанию' (employee)= GROUP MIN legalEntity IF isCompanyLegalEntity(legalEntity) AND accessEmployeeEmployeeDivision(employee, legalEntity)
                                                                 BY employee PERSISTENT;
defaultCustomerEmployee 'Покупатель по умолчанию' (employee)= GROUP MIN legalEntity IF isCustomerLegalEntity(legalEntity) AND accessEmployeeEmployeeDivision(employee, legalEntity)
                                                                    BY employee PERSISTENT;

// ---------------------------------------- Формы для ввода компаний ------------------------------------- //

FORM legalEntity 'Организация'
    OBJECTS l=legalEntity FIXED PANEL
    PROPERTIES(l) name, nameLegalEntityGroupLegalEntity, nameCountryLegalEntity, nameLanguageLegalEntity, nameCurrencyLegalEntity,
                   nameOwnershipLegalEntity, shortNameOwnershipLegalEntity, fullNameLegalEntity,
                   addressLegalEntity,
                   postAddressLegalEntity,
                   managerLegalEntity,
                   accountantLegalEntity,
                   phoneLegalEntity,
                   emailLegalEntity, siteLegalEntity,
                   isSupplierLegalEntity, isCompanyLegalEntity, isCustomerLegalEntity,
                   differentStocksInDetailsLegalEntity SHOWIF isCompanyLegalEntity(l),
                   quantityDaysCloseOrdersLegalEntity

    OBJECTS li=license
    PROPERTIES(li) numberLicense, dateFromLicense, dateToLicense, ADDOBJ, delete
    FILTERS legalEntityLicense(li) == l

    EDIT legalEntity OBJECT l
;

DESIGN legalEntity FROM DEFAULT {
    main{
       preferredSize = (1024, 768);
       l.box {
            childConstraints = TO THE RIGHT;

            NEW column1 {
                childConstraints = TO THE BOTTOM;

                NEW row11 {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(name(l));
                    ADD PROPERTY(nameLegalEntityGroupLegalEntity(l));
                }
                NEW regionContainer {
                    childConstraints =  TO THE RIGHT;
                    caption = 'Региональные настройки';
                    ADD PROPERTY(nameCountryLegalEntity);
                    ADD PROPERTY(nameCurrencyLegalEntity);
                    ADD PROPERTY(nameLanguageLegalEntity);
                }
                NEW row12 {
                    childConstraints = TO THE RIGHTBOTTOM;
                    ADD l.lawGroup {childConstraints = TO THE BOTTOM;}
                    ADD l.filterEntityGroup{childConstraints = TO THE BOTTOM;}
                }
            }

            NEW column2 {
                childConstraints = TO THE BOTTOM;

                ADD l.contactGroup;
                ADD l.managementGroup;
                ADD l.orderGroup;
            }
       }

       NEW extendContainer BEFORE functions.box {
            type = TABBED;
            ADD li.box;
       }
   }
}

FORM legalEntities 'Организации'

    TREE legalEntityGroupTree lg = legalEntityGroup PARENT parentLegalEntityGroup
    PROPERTIES READONLY lgTreeName = name(lg)
    PROPERTIES(lg) ADDFORM, EDITFORM, delete FORCE PANEL TOOLBAR

    OBJECTS l=legalEntity
    PROPERTIES(l) READONLY name, fullNameLegalEntity, shortNameOwnershipLegalEntity, nameLegalEntityGroupLegalEntity,
                           addressLegalEntity, phoneLegalEntity,
                           isSupplierLegalEntity, isCompanyLegalEntity, isCustomerLegalEntity
    PROPERTIES(l) ADDFORM, EDITFORM, delete

    FILTERS (inLegalEntityGroupLegalEntity(lg, l) OR (l IS legalEntity AND lg IS legalEntityGroup AND NOT legalEntityGroupLegalEntity(l)))

    DIALOG legalEntity OBJECT l
;

DESIGN legalEntities FROM DEFAULT{
    NEW topContainer{
        childConstraints = TO THE RIGHT;
        type = SPLITH;
        ADD legalEntityGroupTree.tree.box{
            PROPERTY(delete(lg)){
                askConfirm = TRUE;
            }
        }
        ADD l.box {
            fillHorizontal = 2.0;
            l.grid { defaultComponent = TRUE; }
        }
    }
    ADD functions.box;
}

NAVIGATOR {
    masterData {
        ADD legalEntities BEFORE regionalData;
    }
}
// -------------------------------------------- Макросы --------------------------------------------- //
META defineDocumentHeaderLegalEntity (object, contact, contactCaption)
    contact###object (object) = DATA legalEntity (object);
    name###contact###object contactCaption (object)= name(contact###object(object)) IN documentPrmGroup MINCHARWIDTH 10 PREFCHARWIDTH 20;
END
META defineDocumentAbstractHeaderLegalEntity (object, contact, contactCaption)
    contact###object (object) = ABSTRACT legalEntity (object) PERSISTENT;
    name###contact###object contactCaption (object)= name(contact###object(object)) IN documentPrmGroup MINCHARWIDTH 10 PREFCHARWIDTH 20;
END
META defineDocumentInterfaceHeaderLegalEntity (object, contact, contactCaption)
    @defineDocumentAbstractHeaderLegalEntity(object, contact, contactCaption);
    @defineDocumentHeaderLegalEntity(user###object, contact, contactCaption);
    contact###object (object) += contact###user###object(object);
END

META defineDocumentDetailLegalEntity (object, detail, contact, contactCaption)
    contact###detail (idetail) = contact###object(object###detail(idetail));
    name###contact###detail contactCaption (idetail) = name(contact###detail(idetail));
END

META defineDocumentLegalEntity (object, detail, contact, contactCaption)
    @defineDocumentHeaderLegalEntity(object, contact, contactCaption);
    @defineDocumentDetailLegalEntity(object, detail, contact, contactCaption);
END
META defineDocumentDetailDataLegalEntity (object, detail, contact, contactCaption)
    data###contact###detail (detail) = DATA legalEntity (detail);
    contact###detail (idetail) = UNION OVERRIDE contact###object(object###detail(idetail)), data###contact###detail(idetail) PERSISTENT;
    name###contact###detail contactCaption (idetail) = name(contact###detail(idetail));
END
META defineDocumentDataLegalEntity (object, detail, contact, contactCaption)
    @defineDocumentHeaderLegalEntity(object, contact, contactCaption);
    @defineDocumentDetailDataLegalEntity(object, detail, contact, contactCaption);
END
META defineDocumentDataLegalEntity (object, contact, contactCaption)
    @defineDocumentDataLegalEntity(object, object##Detail, contact, contactCaption);
END
META defineDocumentDetailLegalEntity(detail, contact, contactCaption)
    contact###detail (detail) = DATA legalEntity (detail);
    name###contact###detail contactCaption (detail) = name(contact###detail (detail));
END

META defineDocumentAbstractLegalEntity (object, detail, contact, contactCaption)
    @defineDocumentAbstractHeaderLegalEntity(object, contact, contactCaption);
    @defineDocumentDetailLegalEntity(object, detail, contact, contactCaption);
END
META defineDocumentInterfaceLegalEntity (object, detail, contact, contactCaption)
    @defineDocumentInterfaceHeaderLegalEntity(object, contact, contactCaption);
    @defineDocumentDetailLegalEntity(object, detail, contact, contactCaption);
    @defineDocumentDetailLegalEntity(user###object, user###detail, contact, contactCaption);
END

META defineDocumentLegalEntity (object, contact, contactCaption)
    @defineDocumentLegalEntity(object, object##Detail, contact, contactCaption);
END
META defineDocumentAbstractLegalEntity (object, contact, contactCaption)
    @defineDocumentAbstractLegalEntity(object, object##Detail, contact, contactCaption);
END
META defineDocumentInterfaceLegalEntity (object, contact, contactCaption)
    @defineDocumentInterfaceLegalEntity(object, object##Detail, contact, contactCaption);
END

META defineDocumentPhone(object, contact, caption)
    phone###contact###object 'Телефон'###caption (object) = phoneLegalEntity(contact###object(object)) IN documentPrmGroup;
END
