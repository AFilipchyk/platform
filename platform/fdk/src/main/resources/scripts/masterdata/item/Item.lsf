MODULE Item;

REQUIRE System, Stock, Hierarchy, RetailCRM, Barcode, PriceList;

// ------------------------------------ Классификатор товаров --------------------------- //

CLASS itemGroup 'Товарная группа' : named, skuGroup;

@defineHierarchy(itemGroup);

parentSkuGroup (itemGroup) += parentItemGroup(itemGroup);

inItemGroup 'Отм.' = DATA SESSION BOOLEAN (itemGroup);

moveItemGroup 'Перенести отмеченные группы в текущую' = ACTION (itemGroup){

    FOR inItemGroup(i) DO{
        IF i != itemGroup THEN {
            SET parentItemGroup(i) <- itemGroup;
            SET inItemGroup(i) <- NULL;
        } ELSE {
            MESSAGE 'Выделенный товарная группа не может совпадать с объединяемой';
        }
    }
}

// ------------------ Формы  --------------------- //

FORM itemGroup 'Товарная группа'
    OBJECTS g=itemGroup FIXED PANEL
    PROPERTIES(g) name, nameParentItemGroup
    EDIT itemGroup OBJECT g
;

FORM itemGroups 'Товарные группы'
    TREE treeGroups g=itemGroup PARENT parentItemGroup
    PROPERTIES inItemGroup(g), moveItemGroup(g) TODRAW g FORCE PANEL DRAWTOTOOLBAR
    PROPERTIES READONLY name(g), canonicalNameItemGroup (g)
    PROPERTIES(g) ADDFORM, EDITFORM
    ORDER BY canonicalNameItemGroup
;

FORM dialogItemGroups 'Товарные группы'
    TREE treeGroups tg=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(tg)
    ORDER BY name

    OBJECTS g=itemGroup
    PROPERTIES(g) name READONLY, canonicalNameItemGroup READONLY, delete
    PROPERTIES(g) ADDFORM, EDITFORM
    ORDER BY canonicalNameItemGroup

    FILTERS isParentItemGroupItemGroup(g, tg)

    DIALOG itemGroup OBJECT g
;

DESIGN dialogItemGroups FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
            NEW rootContainer BEFORE functions.box{
                childConstraints = TO THE RIGHT;
                type = SPLITH;

            ADD treeGroups.tree.box {
                fillHorizontal = 2;
            }

            ADD g.box {
                fillHorizontal = 4;
            }
        }
    }
}

NAVIGATOR {
    skuNavigator {
        ADD itemGroups BEFORE UOMs;
    }
}
// ----------------------------------- Товары ----------------------------------- //

CLASS item 'Товар' : sku;
TABLE item(item);

TABLE itemDate (item, DATE);

// Связь с группой товаров
itemGroupItem = DATA itemGroup(item) AUTOSET;
skuGroupSku(item) += itemGroupItem(item);
//roundSkuGroupSkuSku(item) += itemGroupItem(item);

nameItemGroupItem 'Группа товара' (item) = name(itemGroupItem(item));
canonicalNameItemGroupItem 'Группа товара' (item) = canonicalNameItemGroup(itemGroupItem(item)) IN base;

TABLE itemGroupItem (itemGroup, item);

isParentItemGroupItem (itemGroup, item) = isParentItemGroupItemGroup(itemGroupItem(item), itemGroup) PERSISTENT;

// ------------------ Дополнительные группы --------------- //
TABLE customGroupTypeItem(customGroupType, item);
customGroupCustomGroupTypeItem = DATA customGroup (customGroupType, item);
customGroupCustomGroupTypeSku(type, item) += customGroupCustomGroupTypeItem(type, item);

nameCustomGroupCustomGroupTypeItem 'Имя' (type, item) = name(customGroupCustomGroupTypeItem(type, item));
canonicalNameCustomGroupCustomGroupTypeItem 'Каноническое имя' (type, item) = canonicalNameCustomGroup(customGroupCustomGroupTypeItem(type, item));

CONSTRAINT customGroupTypeCustomGroup(customGroupCustomGroupTypeItem(type, item)) != type
           CHECKED BY customGroupCustomGroupTypeItem
           MESSAGE 'Выбранный объект классификатора SKU имеет неправильный тип';

// Атрибуты
imageItem 'Изображение' = DATA IMAGEFILE (item);
loadImageItem 'Загрузить изображение' (item) = ACTION LOADFILE imageItem(item);

// -------------------------------- Надбавки для расчетных видов цен --------------------------------//

currentBasePricePriceListTypeSkuStock 'Базовая цена' (type, sku, stock) = pricePriceListTypeSkuStockDateTime(basePriceListTypeCalcPriceListType(type), sku, stock, currentDateTime());

currentCalcPricePriceListTypeSkuStock 'Расчетная цена' (type, sku, stock) = pricePriceListTypeSkuStockDateTime(type, sku, stock, currentDateTime());

// ------------------------------------ Формы -------------------------- //
FORM item 'Товар'

    OBJECTS i=item FIXED PANEL

    PROPERTIES(i) canonicalNameItemGroupItem, idBarcodeSku READONLY,
                  imageItem, loadImageItem

    OBJECTS b=barcode
    PROPERTIES(b)       idBarcode, dateBarcode, shortNameUOMBarcode,
                        amountBarcode, activeBarcode, primaryBarcode ON CHANGE EXEC changePrimaryBarcodeSku(b,i)
    PROPERTIES(i)       generateBarcodeSku TODRAW b FORCE PANEL
    PROPERTIES(b)       ADDOBJ, delete
    FILTERS skuBarcode(b) == i

    OBJECTS cgt = customGroupType
    PROPERTIES name(cgt) READONLY, canonicalNameCustomGroupCustomGroupTypeItem(cgt, i)

    OBJECTS dtr = DATE FIXED PANEL
    PROPERTIES (dtr) OBJVALUE BACKGROUND dateDiffersCurrent(dtr)

    OBJECTS c = country
    PROPERTIES (c) READONLY name

    OBJECTS st2 = stock FIXED PANEL
    PROPERTIES(st2) SELECTOR name

    OBJECTS ct = calcPriceListType
    PROPERTIES(ct) READONLY name, includeVATPriceListType, nameCurrencyCalcPriceListType, nameRoundConditionCalcPriceListType,
                            nameBasePriceListTypeCalcPriceListType
    PROPERTIES(ct, i, st2) READONLY currentBasePricePriceListTypeSkuStock
    PROPERTIES(ct, i) dataMarkupCalcPriceListTypeSku
    PROPERTIES(ct, i, st2) READONLY currentCalcPricePriceListTypeSkuStock

    EDIT item OBJECT i
;

DESIGN item FROM DEFAULT {
    main {
        NEW itemHeader BEFORE functions.box {
            childConstraints = TO THE RIGHT;
            NEW itemHeaderColumn1 {
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(canonicalNameItemGroupItem);
                ADD PROPERTY(idBarcodeSku);
            }
            NEW itemHeaderColumn2 {
                childConstraints = TO THE BOTTOM;
            }
        }
        NEW itemDetail BEFORE functions.box {
            type = TABBED;
            NEW itemPrimary {
                childConstraints = TO THE BOTTOM;
                title = 'Основные данные';
                fillVertical = 1.0;
                fillHorizontal = 1.0;

                NEW itemPrimaryRow1 {
                    childConstraints = TO THE RIGHT;
                    NEW itemPrimaryColumn1 {
                        childConstraints = TO THE BOTTOM;
                    }
                    NEW itemPrimaryColumn2 {
                        childConstraints = TO THE BOTTOM;
                    }
                }
                ADD b.box;
            }
            NEW itemGroup {
                childConstraints = TO THE RIGHT;
                title = 'Классификаторы';
                fillVertical = 1.0;
                fillHorizontal = 1.0;
                ADD cgt.box;
            }
            NEW regionalPrm {
                caption = 'Региональные параметры';
                ADD dtr.box;
                ADD c.box;
            }
            NEW calcPriceListTypePrm {
                caption = 'Цены';
                childConstraints = TO THE BOTTOM;
                ADD st2.box;
                ADD ct.box{
                    childConstraints = TO THE RIGHTBOTTOM;
                }
            }
            NEW itemImage {
                title = 'Изображение';
                ADD PROPERTY(imageItem);
                PROPERTY(imageItem) {
                    caption = '';
                    preferredSize = ( -1, 600);
                    fillVertical = 1.0;
                    fillHorizontal = 1.0;
                }
                ADD PROPERTY(loadImageItem);
            }
        }
    }
}

seekBarcode 'Штрих-код' = DATA SESSION STRING[14] ();
seekSkuBarcode = ACTION (){
    REQUEST STRING[14] INPUT;
    SET seekBarcode() <- NULL;
    SET seekBarcode() <- requestedString();
    EXEC seek(skuBarcodeIdDate(seekBarcode(), currentDate()));
    IF TRUE AND NOT skuBarcodeIdDate(seekBarcode(), currentDate()) THEN
        MESSAGE 'Шрих-код не найден';
    SET seekBarcode() <- NULL;
}

editSku(sku) += [ACTION EDITFORM item](sku);
addSku () += [ACTION ADDFORM item]();

FORM items 'Товары'
    TREE treeGroup g=itemGroup PARENT parentItemGroup
    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS i=item
    PROPERTIES(i) READONLY idBarcodeSku
    PROPERTIES(i) ADDFORM, EDITFORM, delete
    PROPERTIES seekBarcode() TODRAW i FORCE PANEL DRAWTOTOOLBAR ON CHANGE EXEC seekSkuBarcode()

    DIALOG item OBJECT i
;

DESIGN items FROM DEFAULT {
    NEW rootContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;
            ADD treeGroup.tree.box;
            ADD i.box {
                defaultComponent = TRUE;
                fillHorizontal = 4;
                PROPERTY(seekBarcode){
                    editKey = 'F4';
                }
            }
    }
    ADD functions.box;
}

NAVIGATOR {
    skuNavigator {
        ADD items BEFORE itemGroups;
    }
}

// ----------------------------------- Атрибуты товаров ------------------------------------------ //

CLASS ABSTRACT itemAttribute 'Атрибут товара' : named;
TABLE itemAttribute(itemAttribute);
TABLE itemItemAttribute(item, itemAttribute);

// Отображение
META defineItemAttribute (attribute, caption, group)
    userShow###attribute##ItemGroup caption (itemGroup) = DATA BOOLEAN (itemGroup) IN group;

    quantityChildWith###attribute##ItemGroup (itemGroup) = GROUP SUM 1 IF userShow###attribute##ItemGroup(childItemGroup) AND isParentItemGroupItemGroup(childItemGroup, itemGroup) BY itemGroup PERSISTENT;
    quantityParentWith###attribute##ItemGroup (itemGroup) = GROUP SUM 1 IF userShow###attribute##ItemGroup(parentItemGroup) AND isParentItemGroupItemGroup(itemGroup, parentItemGroup) BY itemGroup PERSISTENT;

    show###attribute##ItemGroup caption (itemGroup) = TRUE IF (quantityChildWith###attribute##ItemGroup (itemGroup) (+) quantityParentWith###attribute##ItemGroup (itemGroup)) > 0 PERSISTENT;

    show###attribute##Item caption (item) = TRUE IF quantityParentWith###attribute##ItemGroup(itemGroupItem(item));

    backgroundShow###attribute##ItemGroup (itemGroup) =
        IF userShow###attribute##ItemGroup(itemGroup) THEN
            RGB(0,0,0) IF itemGroup IS itemGroup
        ELSE
            RGB(203,203,206) AND quantityChildWith###attribute##ItemGroup (itemGroup) != descendantNumberItemGroup(itemGroup)
                             AND NOT quantityParentWith###attribute##ItemGroup (itemGroup);

    setNullShow###attribute##ItemGroup 'Снять признак для всех потомков' = ACTION (itemGroup) {
        FOR isParentItemGroupItemGroup (childGroup, itemGroup) DO {
            SET userShow###attribute##ItemGroup(childGroup) <- NULL;
        }
    } SHORTCUT userShow###attribute##ItemGroup CONFIRM;
END

// Объявление
valueItemAttribute = ABSTRACT STRING[255] (item, itemAttribute) PERSISTENT;

META implementItemAttribute(attribute, caption, itemType, attributeClass)
    EXTEND CLASS itemType##ItemAttribute { attributeClass caption }
    value###itemType##ItemAttribute(item, attribute) += attribute##Item(item) WHEN attribute == itemType##ItemAttribute.##attributeClass;
END

META defineItemAttribute(attribute, formProperty, caption, group, itemType, attributeClass)
    @defineItemAttribute(attribute, caption, group);

    EXTEND FORM itemGroup PROPERTIES(g) userShow###attribute##ItemGroup, setNullShow###attribute##ItemGroup;
    EXTEND FORM itemGroups PROPERTIES(g) READONLY show###attribute##ItemGroup BACKGROUND backgroundShow###attribute##ItemGroup(g);
    EXTEND FORM item PROPERTIES(i) formProperty SHOWIF show###attribute##Item(i);
    EXTEND FORM items PROPERTIES(i) READONLY BEFORE delete formProperty SHOWIF show###attribute##ItemGroup(g);

    @implementItemAttribute(attribute, caption, itemType, attributeClass);
END

// Примитивный тип
META definePrimitiveItemAttribute(attribute, type, caption, group, itemType)
    attribute##Item caption = DATA type (item) IN group;
    @defineItemAttribute(attribute, attribute##Item, caption, group, itemType, item###attribute);
END

// Расширяем формы настройки
EXTEND FORM options
    OBJECTS ia = itemAttribute
    PROPERTIES(ia) name
;

EXTEND DESIGN options {
    pane {
        NEW itemTab {
            caption = 'Товары';
            ADD ia.box;
        }
    }
}

META defineItemAttributeBatch (attribute, formProperty, caption)
    show###attribute##Batch caption (batch)= show###attribute##Item(skuBatch(batch));
    attribute##Batch caption (batch) = attribute##Item(skuBatch(batch));

    EXTEND FORM batches PROPERTIES(bt) READONLY FORCE GRID formProperty SHOWIF show###attribute##ItemGroup(sk);
END
META defineItemAttributeBatch (attribute, caption)
    @defineItemAttributeBatch (attribute, attribute##Batch, caption);
END

META defineObjectItemAttributeBatch(attribute, identity, caption)
    identity###attribute##Batch caption (batch) = identity###attribute##Item(skuBatch(batch));
    @defineItemAttributeBatch(attribute, identity###attribute##Batch, caption);
END

// -------------------------------------------- Формирование наименования ----------------------------------- //

prefixInNameItemAttribute 'Префикс' = DATA STRING[20] (itemAttribute);
postfixInNameItemAttribute 'Постфикс' = DATA STRING[20] (itemAttribute);

EXTEND FORM options PROPERTIES(ia) prefixInNameItemAttribute, postfixInNameItemAttribute;

META defineItemAttributeName (prefix, caption, group)
    numberInName###prefix##ItemAttribute 'Порядковый номер в наименовании'##caption = DATA INTEGER (itemAttribute) IN base;
    EXTEND FORM options PROPERTIES(ia) numberInName###prefix##ItemAttribute;

    name###prefix##AttributeItem 'Наименование'###caption (item) = toString255(
                    [GROUP CONCAT ustring3(prefixInNameItemAttribute(attribute) AND item IS item, valueItemAttribute(item, attribute), postfixInNameItemAttribute(attribute) AND item IS item)
                                  IF numberInName###prefix##ItemAttribute(attribute) AND valueItemAttribute(item, attribute), ' ' BY item ORDER numberInName###prefix##ItemAttribute(attribute)](item))
                    IN group PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 80 INDEXED AGGPROP;
    EXTEND FORM item PROPERTIES(i) READONLY name###prefix##AttributeItem;
    EXTEND DESIGN item { itemHeaderColumn2 {ADD PROPERTY(name###prefix##AttributeItem); } }
END

// -------------------------------------- Типы атрибутов ------------------------------- //

// Строка
CLASS STATIC stringItemAttribute 'Строковый атрибут' : itemAttribute;

valueStringItemAttribute = ABSTRACT STRING[100] (item, stringItemAttribute) EXCLUSIVE PERSISTENT;
valueItemAttribute(item, attribute) += valueStringItemAttribute(item, attribute);

META defineStringItemAttribute(attribute, type, caption, group)
    @definePrimitiveItemAttribute(attribute, type, caption, group, string);
END

// Целое число
CLASS STATIC integerItemAttribute 'Целочисленный атрибут' : itemAttribute;

valueIntegerItemAttribute = ABSTRACT INTEGER (item, integerItemAttribute) EXCLUSIVE PERSISTENT;
stringIntegerItemAttribute(item, attribute) = toString255(valueIntegerItemAttribute(item, attribute));
valueItemAttribute(item, attribute) += stringIntegerItemAttribute(item, attribute);

META defineIntegerItemAttribute(attribute, caption, group)
    @definePrimitiveItemAttribute(attribute, INTEGER, caption, group, integer);
END

// Дробное число
CLASS STATIC doubleItemAttribute 'Дробный атрибут' : itemAttribute;

valueDoubleItemAttribute = ABSTRACT DOUBLE (item, doubleItemAttribute) EXCLUSIVE PERSISTENT;
stringDoubleItemAttribute(item, attribute) = toString255(valueDoubleItemAttribute(item, attribute));
valueItemAttribute(item, attribute) += stringDoubleItemAttribute(item, attribute);

META defineDoubleItemAttribute(attribute, type, caption, group)
    @definePrimitiveItemAttribute(attribute, type, caption, group, double);
END

// Объектный атрибут
CLASS STATIC objectItemAttribute 'Объектный атрибут' : itemAttribute;

valueObjectItemAttribute = ABSTRACT named (item, objectItemAttribute) EXCLUSIVE PERSISTENT;
nameObjectItemAttribute(item, attribute) = name(valueObjectItemAttribute(item, attribute));
valueItemAttribute(item, attribute) += nameObjectItemAttribute(item, attribute);

META implementObjectItemAttribute(attribute, caption)
    @implementItemAttribute(attribute, caption, object, item###attribute);
END

META defineObjectItemAttribute(attribute, identity, caption, group)
    attribute##Item = DATA attribute (item);
    identity###attribute##Item caption (item) = identity(attribute##Item(item)) IN group;
    @defineItemAttribute(attribute, identity###attribute##Item, caption, group, object, item###attribute);
END

// Краткое наименование атрибута
CLASS STATIC objectShortItemAttribute 'Объектный краткий атрибут' : itemAttribute;

valueObjectShortItemAttribute = ABSTRACT doubleNamed (item, objectShortItemAttribute) EXCLUSIVE PERSISTENT;
shortNameObjectItemAttribute(item, attribute) = shortName(valueObjectShortItemAttribute(item, attribute));
valueItemAttribute(item, attribute) += shortNameObjectItemAttribute(item, attribute);

META implementObjectShortItemAttribute(attribute, caption)
    EXTEND CLASS objectShortItemAttribute { shortItem###attribute caption }
    valueObjectShortItemAttribute(item, attribute) += attribute##Item(item) WHEN attribute == objectShortItemAttribute.shortItem###attribute;
END

//    value###attribute##ItemShortAttribute(item, attribute) = attribute##Item(item) AND attribute == objectShortItemAttribute.shortItem###attribute;

// ---------------------------- Конкретные свойства -------------------------------- //

GROUP itemBaseGroup 'Базовые свойства' : base;

// Группа
@implementObjectItemAttribute(itemGroup, 'Группа товаров');

// ------ Базовые свойства товара ------ //

// Название
@defineStringItemAttribute(caption, STRING[100], 'Название', itemBaseGroup);
@defineItemAttributeBatch (caption, 'Название');

// Единица измерения
@defineObjectItemAttribute(UOM, name, 'Единица измерения', itemBaseGroup);
@defineObjectItemAttributeBatch (UOM, name, 'Единица измерения');

shortNameUOMItem 'Единица измерения' (item) = shortName(UOMItem(item)) IN itemBaseGroup;
UOMSku(item) += UOMItem(item);

@implementObjectShortItemAttribute(UOM, 'Единица измерения (сокр.)');

// Брэнд
CLASS brand 'Бренд' : named;
TABLE brand(brand);

@defineObjectItemAttribute(brand, name, 'Бренд', itemBaseGroup);
@defineObjectItemAttributeBatch (brand, name, 'Бренд');

// Страна
@defineObjectItemAttribute(country, name, 'Страна', itemBaseGroup);
residentItem 'Отечественное производство' (item) = residentCountry(countryItem(item)) IN itemBaseGroup;
countrySku(sku) += countryItem(sku);
@defineObjectItemAttributeBatch (country, name, 'Страна');

// Производитель
CLASS manufacturer 'Производитель товара' : named;
TABLE manufacturer(manufacturer);

@defineObjectItemAttribute(manufacturer, name, 'Производитель', itemBaseGroup);
@defineObjectItemAttributeBatch (manufacturer, name, 'Производитель');

// Тара
skuTypeItem = DATA skuType (item);
skuTypeSku (sku) += skuTypeItem(sku);

skuTypeItem(item) <- skuType.skuTypeItem WHEN ASSIGNED(item IS item);

nameSkuTypeItem 'Тип' (item) = name(skuTypeItem(item)) IN itemBaseGroup;
EXTEND FORM item PROPERTIES(i) nameSkuTypeItem;

// Весовой
isWeightItem 'Весовой товар' = DATA BOOLEAN (item) IN itemBaseGroup;
isWeightSku(sku) += isWeightItem(sku);
EXTEND FORM item PROPERTIES(i) isWeightItem;

// Неактивный
inactiveItem 'Неактивный' = DATA BOOLEAN (item) IN itemBaseGroup;
activeItem 'Активный' (item) = item IS item AND NOT inactiveItem(item);
inactiveSku(sku) += inactiveItem(sku);
EXTEND FORM item PROPERTIES(i) inactiveItem;
EXTEND FORM items FILTERGROUP inactive FILTER 'Активные' 'F10' activeItem(i) DEFAULT;

EXTEND DESIGN item { itemPrimaryColumn1 { ADD i.itemBaseGroup; } }

// ------ Габариты товара ------ //

GROUP itemSizeGroup 'Габариты товара' : public;

// Вес нетто
@defineDoubleItemAttribute(netWeight, NUMERIC[9,3], 'Вес нетто, кг', itemSizeGroup);
@defineItemAttributeBatch (netWeight, 'Вес нетто, кг');
netWeightSku(sku) += netWeightItem(sku);

// Вес брутто
@defineDoubleItemAttribute(grossWeight, NUMERIC[9,3], 'Вес брутто, кг', itemSizeGroup);
@defineItemAttributeBatch (grossWeight, 'Вес брутто, кг');
grossWeightSku(sku) += grossWeightItem(sku);

// Кол-во в грузовом месте
// todo : здесь скорее всего надо будет рефакторить на более сложную логику
//@defineDoubleItemAttribute(quantityPack, NUMERIC[9,3], 'Количество в грузовом месте', itemSizeGroup);
//quantityPackSku(sku) += quantityPackItem(sku);

EXTEND DESIGN item { itemPrimaryColumn2 { ADD i.itemSizeGroup; } }

loadDefaultItemAttributes 'Загрузить стандартные атрибуты товаров' = ABSTRACT ACTION ();
@implementLoadDefaultData(loadDefaultItemAttributes);

// ---------------------------------------------- Формирование наименований -------------------------------------- //

// Базовое наименование
@defineItemAttributeName( , , recognize);
nameSku(item) += nameAttributeItem(item);
loadDefaultItemAttributes() += ACTION {
    SET numberInNameItemAttribute(a) <- 1 WHERE a == stringItemAttribute.itemCaption;
}

// для оптимизации запросов
nameAttributeItemGroupItem 'Наименование' (itemGroup, item) = nameAttributeItem(item) AND isParentItemGroupItem(itemGroup, item) PERSISTENT INDEXED;

EXTEND FORM items
    PROPERTIES READONLY AFTER idBarcodeSku(i) nameAttributeItemGroupItem(g, i)
    FILTERS nameAttributeItemGroupItem(g, i)
    ORDER BY nameAttributeItemGroupItem
;

// Кассы
@defineItemAttributeName(cashRegister, ' (кассы)', public);
dataTitleCashRegisterBarcode 'Наименование для касс' = DATA STRING[100] (barcode);
titleCashRegisterBarcode 'Наименование для касс' = UNION OVERRIDE nameCashRegisterAttributeItem(skuBarcode(barcode)), dataTitleCashRegisterBarcode(barcode) MINCHARWIDTH 30 PREFCHARWIDTH 30;
loadDefaultItemAttributes() += ACTION {
    SET numberInNameCashRegisterItemAttribute(a) <- 1 WHERE a == stringItemAttribute.itemCaption;
}
// Весы
@defineItemAttributeName(scales, ' (весы)', public);
dataTitleScalesBarcode 'Наименование для весов' = DATA STRING[100] (barcode);
titleScalesBarcode 'Наименование для весов' = UNION OVERRIDE nameScalesAttributeItem(skuBarcode(barcode)), dataTitleScalesBarcode(barcode) MINCHARWIDTH 30 PREFCHARWIDTH 30;
loadDefaultItemAttributes() += ACTION {
    SET numberInNameScalesItemAttribute(a) <- 1 WHERE a == stringItemAttribute.itemCaption;
}
EXTEND FORM item PROPERTIES(b) BEFORE delete titleScalesBarcode, titleCashRegisterBarcode;

// --------------------------------------- Генерация штрих-кодов --------------------------------------------- //

META defineNumeratorItemGroup (prefix, caption)
    data###prefix##NumeratorItemGroup = DATA numerator (itemGroup);
    levelParent###prefix##NumeratorItemGroup (itemGroup) = GROUP MIN levelItemGroupItemGroup(itemGroup, parent) IF data###prefix##NumeratorItemGroup(parent)
                                                                  BY itemGroup PERSISTENT;
    nearestParent###prefix##NumeratorItemGroup (itemGroup) = itemGroupItemGroupLevel(itemGroup, levelParent###prefix##NumeratorItemGroup(itemGroup));
    nearest###prefix##NumeratorItemGroup (itemGroup) = data###prefix##NumeratorItemGroup(nearestParent###prefix##NumeratorItemGroup(itemGroup)) PERSISTENT;

    prefix##NumeratorItemGroup (itemGroup) =
        UNION OVERRIDE nearest###prefix##NumeratorItemGroup(itemGroup), data###prefix##NumeratorItemGroup(itemGroup) PERSISTENT;
    name###prefix##NumeratorItemGroup caption (itemGroup) = name(prefix##NumeratorItemGroup(itemGroup)) MINCHARWIDTH 5 PREFCHARWIDTH 10 MAXCHARWIDTH 10;

    background###prefix##NumeratotItemGroup (itemGroup) = IF data###prefix##NumeratorItemGroup(itemGroup) THEN
                                                                      RGB(190,190,190) IF itemGroup IS itemGroup
                                                                  ELSE
                                                                      RGB(230,230,230) IF prefix##NumeratorItemGroup (itemGroup);

    EXTEND FORM itemGroup PROPERTIES(g)  AFTER nameParentItemGroup name###prefix##NumeratorItemGroup;
    EXTEND FORM itemGroups PROPERTIES(g) AFTER canonicalNameItemGroup READONLY name###prefix##NumeratorItemGroup  BACKGROUND background###prefix##NumeratotItemGroup(g);
END

@defineNumeratorItemGroup (piece, 'Нумератор штрих-кодов (для штучного товара)');
@defineNumeratorItemGroup (weight, 'Нумератор штрих-кодов (для весового товара)');

pieceNumeratorItem (item) = pieceNumeratorItemGroup(itemGroupItem(item));
weightNumeratorItem (item) = weightNumeratorItemGroup(itemGroupItem(item));

barcodeNumeratorSku(item) += IF isWeightItem(item) THEN weightNumeratorItem(item) ELSE pieceNumeratorItem(item);

// ---------------------------------------- Копирование товара ----------------------- //
overCopyItem = ABSTRACT ACTION (s, d);

copyDataItem = ACTION (item, i) {
    SET itemGroupItem(i) <- itemGroupItem(item);
    SET captionItem(i) <- captionItem(item);
    SET UOMItem(i) <- UOMItem(item);
    SET brandItem(i) <- brandItem(item);
    SET netWeightItem(i) <- netWeightItem(item);
    SET grossWeightItem(i) <- grossWeightItem(item);
    SET countryItem(i) <- countryItem(item);
    SET imageItem(i) <- imageItem(item);
    SET skuTypeItem(i) <- skuTypeItem(item);
    SET isWeightItem(i) <- isWeightItem(item);
    SET inactiveItem(i) <- inactiveItem(item);

    FOR skuBarcode(barcode) == item DO {
        FOR ADDOBJ b = barcode DO {
            SET skuBarcode(b) <- i;
            SET dataDateBarcode(b) <- dataDateBarcode(barcode);
            SET dataUOMBarcode(b) <- dataUOMBarcode(barcode);
            SET dataAmountBarcode(b) <- dataAmountBarcode(barcode);
            SET dataTitleScalesBarcode(b) <- dataTitleScalesBarcode(barcode);
            SET dataTitleCashRegisterBarcode(b) <- dataTitleCashRegisterBarcode(barcode);
        }
    }

    SET customGroupCustomGroupTypeItem(type, i) <- customGroupCustomGroupTypeItem(type, item);

    EXEC overCopyItem(item, i);
}

copyItem 'Копировать' = ACTION (item) NEWSESSION {
    FOR ADDOBJ i = item DO {
        EXEC copyDataItem(item, i);
        FORM item OBJECTS i = i MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

EXTEND FORM items PROPERTIES (i) copyItem;

createItemBarcodeDate = ACTION (barcode, date) NEWSESSION {

    LOCAL copy = BOOLEAN();
    IF skuAddedUser(currentUser()) IS item THEN {
        CONFIRM 'Создать товар на основе последнего созданного ?';
        SET copy() <- confirmed();
    }

    IF copy() THEN {
        FOR ADDOBJ i = item DO {
            EXEC copyDataItem(skuAddedUser(currentUser()), i);
            SET idBarcode(b) <- barcode AS STRING[14] WHERE skuBarcode(b) == i AND primaryBarcode(b);
            FORM item OBJECTS i = i MANAGESESSION DOCKEDMODAL;
        }
    } ELSE {
        FOR ADDOBJ bc = barcode DO {
            SET idBarcode(bc) <- (barcode AS STRING[14]);
            SET dateBarcode(bc) <- (date AS DATE);

            FOR ADDOBJ s = item DO {
                SET skuBarcode(bc) <- s AS item;
                SET activeBarcode(bc) <- TRUE;
                SET primaryBarcode(bc) <- TRUE;
                FORM item OBJECTS i = s, b = bc MANAGESESSION DOCKEDMODAL;
            }
        }
    }
}

createSkuBarcodeDate(barcode, date) += createItemBarcodeDate(barcode, date);

inItem 'Отм.' = DATA SESSION BOOLEAN (item);

replaceItem 'Объединить' = ACTION (item){
    FOR inItem(i) DO{
        IF i != item THEN {
            EXEC replaceSkuSku(i, item);
            SET inItem(i) <- NULL;
            EXEC delete(i);
        } ELSE {
            MESSAGE 'Выделенный товар не может совпадать с объединяемым';
        }
    }
}

EXTEND FORM items
    PROPERTIES(i) inItem BEFORE idBarcodeSku, replaceItem TODRAW i FORCE PANEL DRAWTOTOOLBAR
;