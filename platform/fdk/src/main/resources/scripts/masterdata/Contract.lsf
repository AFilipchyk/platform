MODULE Contract;

REQUIRE System, Historizable, LegalEntity;

// ---------------------------------------- Договора ------------------------------------ //

CLASS ABSTRACT Contract 'Договор';
TABLE contract (Contract);
TABLE contractDate (Contract, DATE);

GROUP contractGroup 'Реквизиты' : recognize;

numberContract 'Номер договора' = DATA STRING[30] (Contract) IN contractGroup;
dateFromContract 'Дата начала договора' = DATA DATE (Contract) IN contractGroup;
dateToContract 'Дата окончания договора' = DATA DATE (Contract) IN contractGroup;
activeContract 'Действуюший' (contract, date) =
//    (dateFromContract(contract) < (date AS DATE)) AND (dateToContract(contract) > (date AS DATE));
    (dateFromContract(contract) <= (date AS DATE)) AND NOT (dateToContract(contract) < (date AS DATE));


GROUP partyGroup 'Контрагенты' : recognize;

partyAContract = ABSTRACT LegalEntity (Contract) PERSISTENT INDEXED;
namePartyAContract 'Организация (поставщик)' (contract) = name(partyAContract(contract)) IN partyGroup;

partyBContract = ABSTRACT LegalEntity (Contract) PERSISTENT INDEXED;
namePartyBContract 'Организация (покупатель)' (contract) = name(partyBContract(contract)) IN partyGroup;

countContractPartyAPartyB 'Кол-во договоров' (partyA, partyB) =
    GROUP SUM 1 IF partyAContract(contract) == partyA AND partyBContract(contract) == partyB BY partyA, partyB;

GROUP attributeGroup 'Атрибуты' : public;

currencyContract = DATA Currency (Contract);
nameCurrencyContract 'Валюта взаиморасчетов' (contract) = name(currencyContract(contract)) IN attributeGroup;
shortNameCurrencyContract 'Валюта взаиморасчетов' (contract) = shortNameCurrency(currencyContract(contract)) IN attributeGroup;
symbolCurrencyContract 'Символ' (contract) = symbolCurrency(currencyContract(contract)) IN attributeGroup;

noteContract 'Примечание' = DATA TEXT (Contract) MINCHARWIDTH 50 PREFCHARWIDTH 50 IN attributeGroup;

// ------------------------------------ Макрос для создания договоров по умолчанию ----------------------------- //

META defineContractDefault (contract, partyA, partyB)
    @defineContractDefault (contract, partyA, partyB, partyA, partyB);
END

META defineContractDefault (contract, partyA, partyB, prefixA, prefixB)
    @defineContractDefaultInner(contract, ###contract, partyA, partyB, prefixA, prefixB);
END

META defineContractDefaultInner (contract, contractClass, partyA, partyB, prefixA, prefixB)
    data###contract###prefixA###prefixB = DATA contractClass (###partyA, ###partyB);

    CONSTRAINT partyA != prefixA###contract(data###contract###prefixA###prefixB(partyA, partyB)) CHECKED BY data###contract###prefixA###prefixB
        MESSAGE 'Договор по умолчанию не является договором между выбранными контрагентами';
    CONSTRAINT partyB != prefixB###contract(data###contract###prefixA###prefixB(partyA, partyB)) CHECKED BY data###contract###prefixA###prefixB
        MESSAGE 'Договор по умолчанию не является договором между выбранными контрагентами';

    contract###prefixA###prefixB (pA, pB) = [GROUP MAX contract IF dateFromContract(contract) <= currentDate() AND NOT dateToContract(contract) < currentDate()
                                                         BY prefixA###contract(contract), prefixB###contract(contract)](pA, pB) OR
                                                  data###contract###prefixA###prefixB(pA, pB);
    number###contract###prefixA###prefixB 'Основной договор' (pA, pB) = numberContract(contract###prefixA###prefixB(pA, pB));

    single###contract###prefixA###prefixB (pA, pB) = contract###prefixA###prefixB(pA, pB) IF countContractPartyAPartyB(pA, pB);

    is###prefixA###prefixB###contract 'Основной' (pA, pB, contract) = contract###prefixA###prefixB (pA, pB) == contract;
END

META defineDocumentContract (object, contractType, prefixA, prefixB, partyAMessage, partyBMessage)
    @defineDocumentContract (object, contractType, prefixA, prefixB, single###contractType###prefixA###prefixB, partyAMessage, partyBMessage);
END

META defineDocumentContract (object, contractType, prefixA, prefixB, singleContractProp, partyAMessage, partyBMessage)
    @defineDocumentContractInner (object, contractType, ###contractType, prefixA, prefixB, singleContractProp, partyAMessage, partyBMessage);
END

META defineDocumentContractInner (object, contractType, contractTypeClass, prefixA, prefixB, singleContractProp, partyAMessage, partyBMessage)
    contractType###object = DATA contractTypeClass (###object);
    number###contractType###object 'Номер договора' (object) = numberContract(contractType###object(object)) IN documentPrmGroup;

    isCommission###object 'Продажа на комиссию' = DATA BOOLEAN (###object) IN documentPrmGroup;
    isCommission###object(object) <- typeContractSkuDate(contractType###object(object), date###object(object)) == ContractSkuType.commission
        WHEN CHANGED(contractType###object(object)) OR
             CHANGED(date###object(object));

    contractType###object(object) <- singleContractProp(prefixA###object(object), prefixB###object(object))
                                          WHEN CHANGED(prefixA###object(object)) OR CHANGED(prefixB###object(object));

    CONSTRAINT contractType###object(object) AND NOT prefixA###object(object) == partyAContract(contractType###object(object))
        CHECKED BY contractType###object MESSAGE partyAMessage;

    CONSTRAINT contractType###object(object) AND NOT prefixB###object(object) == partyBContract(contractType###object(object))
        CHECKED BY contractType###object MESSAGE partyBMessage;
END

META defineDocumentAbstractContract (object, contractType)
    @defineDocumentAbstractContractInner(object, contractType, ###contractType);
END

META defineDocumentAbstractContractInner (object, contractType, contractTypeClass)
    contractType###object = ABSTRACT contractTypeClass (###object) PERSISTENT;
    number###contractType###object 'Номер договора' (object) = numberContract(contractType###object(object)) IN documentPrmGroup;

    isCommission###object 'Продажа на комиссию' = ABSTRACT BOOLEAN (###object) PERSISTENT IN documentPrmGroup;
END
META defineDocumentInterfaceContract (object, contractType, prefixA, prefixB, partyAMessage, partyBMessage)
    @defineDocumentAbstractContract(object, contractType);
    @defineDocumentContract(user###object, contractType, prefixA, prefixB, partyAMessage, partyBMessage);
    contractType###object(object) += contractType###user###object(object);
    isCommission###object(object) += isCommission###user###object(object);
END