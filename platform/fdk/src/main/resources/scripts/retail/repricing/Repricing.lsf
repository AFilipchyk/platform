MODULE Repricing;

REQUIRE Employee, Store, Pricing, StockDocument, PriceList;

// ----------------------------------- Комиссия ------------------------------------------ //

CLASS RepricingCommittee 'Комиссия переоценки' : Committee;

nameRepricingCommittee 'Наименование' = DATA ISTRING[150](RepricingCommittee);

nameCommittee(committee) += nameRepricingCommittee(committee) IF committee IS RepricingCommittee;

// ----------------------------------- Комиссия по умолчанию для отдела ------------------------------------------ //

repricingCommitteeDepartmentStore = DATA RepricingCommittee (DepartmentStore);
nameRepricingCommitteeDepartmentStore 'Комиссия переоценки' (departmentStore) = nameRepricingCommittee(repricingCommitteeDepartmentStore(departmentStore)) IN committeeGroup;
isDefaultRepricingCommitteeDepartmentStore 'По умолчанию' (repricingCommittee, departmentStore) = repricingCommitteeDepartmentStore(departmentStore) == repricingCommittee;
CONSTRAINT repricingCommitteeDepartmentStore(departmentStore) AND NOT inCommitteeEmployeeDivision(repricingCommitteeDepartmentStore(departmentStore), departmentStore)
    CHECKED BY repricingCommitteeDepartmentStore MESSAGE 'Для отдела выбрана комиссия, которая для него не действует';

EXTEND FORM departmentStore PROPERTIES nameRepricingCommitteeDepartmentStore(d);

// ----------------------------------- Формы для комиссий переоценки ------------------------------------------ //

FORM repricingCommittee 'Комиссия переоценки'
    OBJECTS c=RepricingCommittee FIXED PANEL
    PROPERTIES(c)      nameRepricingCommittee, nameChairmanCommittee

    TREE treeStore a=STRING[3], t=ChainStores, st=StoreType, s=Store
    PROPERTIES         READONLY OBJVALUE(a), nameChainStores(t), nameStoreType(st), nameStore(s)
    FILTERS            stringEqualsAll(a), inChainStoresStoreType (t, st), inStoreTypeStore(st, s)

    OBJECTS dep=DepartmentStore
    PROPERTIES(dep)    READONLY depName = nameDepartmentStore
    PROPERTIES(c, dep) inCommitteeEmployeeDivision, isDefaultRepricingCommitteeDepartmentStore
    FILTERS            inChainStoresStoreTypeStoreDepartmentStore(t, st, s, dep)
    ORDER BY depName

    OBJECTS e=Employee
    PROPERTIES(e)      READONLY nameContact, firstNameContact, lastNameContact, namePositionEmployee
    PROPERTIES(e)      ADDSESSIONFORM, EDITSESSIONFORM, delete

    PROPERTIES(c, e)   inCommitteeEmployee
    FILTERS            countDivisionEmployeeCommittee (e, c)
    FILTERGROUP filters6
        FILTER 'Показывать только членов комиссии' 'F10' inCommitteeEmployee(c, e)

    FILTERGROUP filters5
        FILTER 'Показывать отделы только для данной комиссии' 'F9' inCommitteeEmployeeDivision(c, dep)

    EDIT RepricingCommittee OBJECT c
;
@extendFormFilterStockAccess(DepartmentStore, dep, repricingCommittee);
@extendFormFilterStockGroupAccess(ChainStores, t, repricingCommittee, countAccessEmployeeEmployeeDivisionGroup);
@extendFormFilterStockGroupAccess(StoreType, st, repricingCommittee, countAccessEmployeeEmployeeDivisionGroup);
@extendFormFilterStockGroupAccess(Store, s, repricingCommittee, countAccessEmployeeEmployeeDivisionGroup);

DESIGN repricingCommittee FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW OneCase BEFORE e.box {
            ADD PROPERTY (nameChairmanCommittee);
        }

        NEW caseOne BEFORE OneCase {
            childConstraints = TO THE RIGHT;
            title = 'Отделы, для которых действуют комиссии';

            ADD treeStore.tree {
                fillHorizontal = 1;
            }

            ADD dep.box {
                fillHorizontal = 2;
            }
        };
    }
}

FORM repricingCommitteeDialog 'Комиссии переоценки'
    OBJECTS rc=RepricingCommittee
    PROPERTIES(rc)      READONLY nameRepricingCommittee, nameEmployeeDivisionCommittee, nameEmployeeCommittee, nameChairmanCommittee
    PROPERTIES(rc)      ADDFORM, EDITFORM

    DIALOG RepricingCommittee OBJECT rc
;

// ----------------------------------- Макрос для задания комиссии для документов ------------------------------------------ //


META defineDocumentHeaderRepricingCommittee(object, stockProp)
    numberDisposal###object '№ распоряжения на переоценку' (object) = DATA STRING[30] (###object) IN documentPrmGroup;

    repricingCommittee###object (object) = DATA RepricingCommittee(###object);
    nameRepricingCommittee###object 'Комиссия переоценки' (object) = nameRepricingCommittee(repricingCommittee###object(object)) IN documentPrmGroup MINCHARWIDTH 20 PREFCHARWIDTH 40;
    repricingCommittee###object (object) <- repricingCommitteeDepartmentStore(stockProp###object(object))
        WHEN CHANGED(stockProp###object(object));

    CONSTRAINT repricingCommittee###object(object) AND NOT inCommitteeEmployeeDivision(repricingCommittee###object(object), stockProp###object(object))
        CHECKED BY repricingCommittee###object MESSAGE 'Для документа выбрана комиссия, которая не действует для склада документа';

    inCommittee###object##Employee (object, employee) = inCommitteeEmployee(repricingCommittee###object (object), employee);
    nameEmployeeCommittee###object 'Сотрудники комиссии' (object) = namePositionEmployeeCommittee(repricingCommittee###object (object));
    nameChairman###object 'Председатель комиссии' (object) = nameChairmanCommittee(repricingCommittee###object (object));
    namePositionChairman###object 'Должность' (object) = namePositionChairmanCommittee(repricingCommittee###object (object));


END
META defineDocumentHeaderAbstractRepricingCommittee(object)
    numberDisposal###object '№ распоряжения на переоценку' (object) = ABSTRACT STRING[30] (###object) PERSISTENT IN documentPrmGroup;
    repricingCommittee###object (object) = ABSTRACT RepricingCommittee(###object) PERSISTENT;
    nameRepricingCommittee###object 'Комиссия переоценки' (object) = nameRepricingCommittee(repricingCommittee###object(object)) IN documentPrmGroup MINCHARWIDTH 20 PREFCHARWIDTH 40;

    inCommittee###object##Employee (object, employee) = inCommitteeEmployee(repricingCommittee###object (object), employee);
    nameEmployeeCommittee###object 'Сотрудники комиссии' (object) = namePositionEmployeeCommittee(repricingCommittee###object (object));
    nameChairman###object 'Председатель комиссии' (object) = nameChairmanCommittee(repricingCommittee###object (object));
    namePositionChairman###object 'Должность' (object) = namePositionChairmanCommittee(repricingCommittee###object (object));
END

META defineDocumentInterfaceHeaderRepricingCommittee (object, stockProp)
    @defineDocumentHeaderAbstractRepricingCommittee (object);
    @defineDocumentHeaderRepricingCommittee (user###object, stockProp);
    repricingCommittee###object (object) += repricingCommittee###user###object(object);
    numberDisposal###object (object) += numberDisposal###user###object(object);
END

//----------------------------------------------- Переоценка ---------------------------------------------------//

CLASS ABSTRACT Repricing 'Акт переоценки';
CLASS ABSTRACT RepricingDetail 'Строка акта переоценки': InLIFOSkuLedger;

CLASS UserRepricing 'Акт переоценки (польз.)' : Repricing, Historizable, NumeratedDocument;
CLASS UserRepricingDetail 'Строка акта переоценки (польз.)' : RepricingDetail;
CLASS UserRepricingPosted 'Проведенный акт переоценки (польз.)' : UserRepricing, PostedObject;

@defineDocumentInterface(repricing);

@defineDocumentInterfaceTimePrefix(repricing, before, ' документа (до)');

@defineDocumentInterfaceNumber(repricing);

@defineDocumentInterfaceDataStock(repricing, departmentStore, 'Склад');
@defineDocumentInterfacePosted(repricing);

@defineDocumentInterfaceDescription(repricing, 'Акт переоценки');

@defineDocumentInterfaceCurrency(repricing);
@deriveDocumentCurrency(userRepricing, departmentStore);

// Комиссия
@defineDocumentInterfaceHeaderRepricingCommittee (repricing, departmentStore);

// Sku
@defineDocumentInterfaceDetailSku(repricing, sku);

// Кол-во
@defineDocumentInterfaceDetailQuantity(repricing);

// Округление розничной цены
roundConditionUserRepricingDetail(userRepricingDetail) = roundConditionDepartmentStore(departmentStoreUserRepricingDetail(userRepricingDetail));

// -- До

// Цена поставщика
@defineDocumentInterfaceDetailPricePrefix(repricing, cur, ' поставщика до');

// Цена от которой будет считаться надбавка
overCurRepricingPriceRepricingDetail = ABSTRACT NUMERIC[14,2] (RepricingDetail) PERSISTENT;
overCurRepricingPriceUserRepricingDetail = ABSTRACT NUMERIC[14,2] (UserRepricingDetail) PERSISTENT;
overCurRepricingPriceRepricingDetail (detail) += overCurRepricingPriceUserRepricingDetail(detail);

curRepricingPriceUserRepricingDetail (detail) = curPriceUserRepricingDetail(detail) OVERRIDE overCurRepricingPriceUserRepricingDetail(detail) PERSISTENT;
curRepricingPriceRepricingDetail (detail) = curPriceRepricingDetail(detail) OVERRIDE overCurRepricingPriceRepricingDetail(detail) PERSISTENT;

// Надбавка
@defineDocumentInterfaceDetailMarkupPrefix (repricing, cur, ' до');

// НДС
@defineDocumentInterfaceDetailVAT(repricing, countryDepartmentStore, cur, ' до');
@deriveDocumentDetailVAT (userRepricing, cur, beforeDate);
@deriveDocumentDetailValueVAT(userRepricing, cur);

// Розничная цена
@defineDocumentInterfaceDetailPricePrefix(repricing, curRetail, ' розничная до');

// Автоматическое заполнение цен до
@deriveDocumentDetailPriceSystemLedgerPriceListType(userRepricing, supplierPricingPriceListType, cur, sku, departmentStore);
@deriveDocumentDetailPriceSystemLedgerPriceListType(userRepricing, retailPricingPriceListType, curRetail, sku, departmentStore);

// Автоматическое проставление надбавок
curMarkupUserRepricingDetail(userRepricingDetail)  <- [round2((((X - X*Y/(100+Y))/Z)-1)*100)](
    curRetailPriceUserRepricingDetail(userRepricingDetail),
    valueCurVATUserRepricingDetail(userRepricingDetail),
    curRepricingPriceUserRepricingDetail(userRepricingDetail))
    WHEN CHANGED(curRetailPriceUserRepricingDetail(userRepricingDetail)) OR
         CHANGED(curVATUserRepricingDetail(userRepricingDetail)) OR
         CHANGED(curRepricingPriceUserRepricingDetail(userRepricingDetail));

// Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены
@changeDocumentDetailMarkupCustomPrefix(userRepricingDetail, curRetail, curRepricing, cur, cur);
@changeDocumentDetailPriceCustomPrefix(userRepricingDetail, curRetail, curRepricing, cur, cur);

// -- После

// Цена поставщика
@defineDocumentInterfaceDetailPricePrefix(repricing, , ' поставщика после');

// Цена от которой будет считаться надбавка
overRepricingPriceRepricingDetail = ABSTRACT NUMERIC[14,2] (RepricingDetail) PERSISTENT;
overRepricingPriceUserRepricingDetail = ABSTRACT NUMERIC[14,2] (UserRepricingDetail) PERSISTENT;
overRepricingPriceRepricingDetail (detail) += overRepricingPriceUserRepricingDetail(detail);

repricingPriceUserRepricingDetail (detail) = priceUserRepricingDetail(detail) OVERRIDE overRepricingPriceUserRepricingDetail(detail) PERSISTENT;
repricingPriceRepricingDetail (detail) = priceRepricingDetail(detail) OVERRIDE overRepricingPriceRepricingDetail(detail) PERSISTENT;

// Надбавка
@defineDocumentInterfaceDetailMarkupPrefix (repricing, , ' после');

// НДС
@defineDocumentInterfaceDetailVAT(repricing, countryDepartmentStore, , ' после');
@deriveDocumentDetailVAT(userRepricing, );
@deriveDocumentDetailValueVAT(userRepricing, );

// Розничная цена
@defineDocumentInterfaceDetailPricePrefix(repricing, retail, ' розничная после');

// Автоматическое проставление надбавок
markupUserRepricingDetail(userRepricingDetail)  <- [round2((((X - X*Y/(100+Y))/Z)-1)*100)](
    retailPriceUserRepricingDetail(userRepricingDetail),
    valueVATUserRepricingDetail(userRepricingDetail),
    repricingPriceUserRepricingDetail(userRepricingDetail))
    WHEN CHANGED(retailPriceUserRepricingDetail(userRepricingDetail)) OR
         CHANGED (VATUserRepricingDetail(userRepricingDetail)) OR
         CHANGED(repricingPriceUserRepricingDetail(userRepricingDetail));

// Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены
@changeDocumentDetailMarkupCustomPrefix(userRepricingDetail, retail, repricing, , );
@changeDocumentDetailPriceCustomPrefix(userRepricingDetail, retail, repricing, , );

// ---- Суммы по строкам ---- //

// -- До
@defineDocumentInterfaceDetailDataSumPrefix (repricing, cur, ' поставщика до');
@defineDocumentInterfaceDetailMarkupSumPrefix (repricing, cur, ' до');
@defineDocumentInterfaceDetailVATDataSumPrefix (repricing, cur, ' до');
@defineDocumentInterfaceDetailDataSumPrefix (repricing, curRetail, ' розничная до');

// -- После
@defineDocumentInterfaceDetailDataSumPrefix (repricing, , ' поставщика после');
@defineDocumentInterfaceDetailMarkupSumPrefix (repricing, , ' после');
@defineDocumentInterfaceDetailVATDataSumPrefix (repricing, , ' после');
@defineDocumentInterfaceDetailDataSumPrefix (repricing, retail, ' розничная после');

// -- Разница
@defineDocumentInterfaceDetailDiffSumPrefix (repricing, sum, , cur, ' изменения поставщика ');
@defineDocumentInterfaceDetailDiffSumPrefix (repricing, markupSum, , cur, ' изменения надбавки');
@defineDocumentInterfaceDetailDiffSumPrefix (repricing, VATSum, , cur, ' изменения НДС');
@defineDocumentInterfaceDetailDiffSumPrefix (repricing, retailSum, , cur, ' изменения розничной');

// Расчет сумм обратным счетом
// -- До
@deriveDocumentDetailSumPrefix(userRepricing, curRetail, currency, quantity);
@deriveDocumentDetailReverseVATSumPrefix(userRepricing, cur, curRetail);
@deriveDocumentDetailMarkupSumPrefix(userRepricing, cur, curRetail, cur);
@deriveDocumentDetailSumPrefix(userRepricing, cur, currency, quantity);

// -- После
@deriveDocumentDetailSumPrefix(userRepricing, retail, currency, quantity);
@deriveDocumentDetailReverseVATSumPrefix(userRepricing, , retail);
@deriveDocumentDetailMarkupSumPrefix(userRepricing, , retail, );
@deriveDocumentDetailSumPrefix(userRepricing, , currency, quantity);

// ---- Суммы по документу ---- //

@defineDocumentInterfaceHeaderQuantity(repricing);
@defineDocumentHeaderSkuQuantity(repricing, sku);
@defineDocumentHeaderSkuQuantity(userRepricing, sku);

// -- До
@defineDocumentInterfaceHeaderSumPrefix (repricing, cur, ' поставщика  до');
@defineDocumentInterfaceHeaderSumPrefix (repricing, curMarkup, ' надбавки до');
@defineDocumentInterfaceHeaderSumPrefix (repricing, curVAT, ' НДС до');
@defineDocumentInterfaceHeaderSumPrefix (repricing, curRetail, ' розничная до');

// -- После
@defineDocumentInterfaceHeaderSumPrefix (repricing, , ' поставщика после');
@defineDocumentInterfaceHeaderSumPrefix (repricing, markup, ' надбавки после');
@defineDocumentInterfaceHeaderSumPrefix (repricing, VAT, ' НДС после');
@defineDocumentInterfaceHeaderSumPrefix (repricing, retail, ' розничная после');

// -- Разница
@defineDocumentInterfaceHeaderSumPrefix (repricing, diff, ' изменения поставщика');
@defineDocumentInterfaceHeaderSumPrefix (repricing, diffMarkup, ' изменения надбавки');
@defineDocumentInterfaceHeaderSumPrefix (repricing, diffVAT, ' изменения НДС');
@defineDocumentInterfaceHeaderSumPrefix (repricing, diffRetail, ' изменения розничной');

// Изменение сумм по товару и таре
@defineDocumentHeaderItemSum(repricing, diffRetail, );
@defineDocumentHeaderItemSum(userRepricing, diffRetail, );

// Действия по добавлению строк
@defineAddDetailDialogSkuStock(userRepricing, sku, departmentStore, dialogSku);
@defineAddDetailDialogBarcode(userRepricing, sku);
@defineAddDetailDialogTerminal(userRepricing, sku);

// Не изменять текущие цены
@defineDocumentInterfaceHeaderSkip(Repricing, changeLedger, 'Не изменять текущие цены');
@defineDocumentInterfaceDetailSkip(repricing, changeLedger, 'Не изменять текущие цены');

// Проведение по регистру
@implementSkuLedger(repricingDetail, sku, departmentStore);
sumInSkuLedger (ledger) += diffRetailSumRepricingDetail(ledger);

// ---- Действия по проставлению новых надбавок и цен ------- //

CLASS ChangePriceType 'Тип изменения цены' {
    markupChange 'Процент торговой надбавки',
    discountChange 'Процент к розничной цене'
};

changePriceTypeUserRepricing = DATA ChangePriceType (UserRepricing);
nameChangePriceTypeUserRepricing 'Тип изменения цены' (userRepricing) = staticCaption(changePriceTypeUserRepricing(userRepricing)) MINCHARWIDTH 20 PREFCHARWIDTH 20 MAXCHARWIDTH 20;

percentUserRepricing 'Процент' (userRepricing)= DATA NUMERIC[8,3](UserRepricing);

CONSTRAINT changePriceTypeUserRepricing(userRepricing) AND NOT percentUserRepricing(userRepricing) //CHECKED BY changePriceTypeUserRepricing
        MESSAGE 'Не задан процент для изменения цены';

newDiscountRetailPriceUserRepricingDetail (d) =  roundPriceRoundCondition([X+(X*Y)/100](
    curRetailPriceUserRepricingDetail(d),
    percentUserRepricing(userRepricingUserRepricingDetail(d))), roundConditionDepartmentStore(departmentStoreUserRepricingDetail(d)));

newMarkupRetailPriceUserRepricingDetail (d) = roundPriceRoundCondition([X*(Y+100)*(Z+100)/10000](
    curRepricingPriceUserRepricingDetail(d),
    percentUserRepricing(userRepricingUserRepricingDetail(d)),
    valueCurVATUserRepricingDetail(d)), roundConditionDepartmentStore(departmentStoreUserRepricingDetail(d)));


FORM addPercentUserRepricing 'Изменение цены'
    OBJECTS u=UserRepricing FIXED PANEL
    PROPERTIES (u) nameChangePriceTypeUserRepricing, percentUserRepricing
;

DESIGN addPercentUserRepricing FROM DEFAULT {
    main {
        childConstraints = TO THE BOTTOM;
        PROPERTY (nameChangePriceTypeUserRepricing) {
            caption = 'Выберите тип';
            font = 'Tahoma bold 28';
            panelLabelAbove = TRUE;
        }
        PROPERTY (percentUserRepricing) {
            caption = 'Введите процент';
            font = 'Tahoma bold 64';
            panelLabelAbove = TRUE;
        }
    }
}

overChangePriceUserRepricing = ABSTRACT ACTION (a);

changePriceUserRepricing 'Изменить цену' (userRepricing) = ACTION (userRepricing) {
        FORM addPercentUserRepricing OBJECTS u = userRepricing MODAL;
        IF formResult() == FormResult.ok AND changePriceTypeUserRepricing(userRepricing) AND percentUserRepricing(userRepricing) THEN {
            FOR userRepricingUserRepricingDetail(userRepricingDetail) == userRepricing DO {
                SET priceUserRepricingDetail(userRepricingDetail) <- curPriceUserRepricingDetail(userRepricingDetail);
                EXEC overChangePriceUserRepricing(userRepricingDetail);
                SET VATUserRepricingDetail(userRepricingDetail) <- curVATUserRepricingDetail(userRepricingDetail);
                SET valueVATUserRepricingDetail(userRepricingDetail) <- valueCurVATUserRepricingDetail(userRepricingDetail);
                IF changePriceTypeUserRepricing(userRepricing) == ChangePriceType.markupChange THEN {
                    SET retailPriceUserRepricingDetail(userRepricingDetail) <- newMarkupRetailPriceUserRepricingDetail(userRepricingDetail);
                } ELSE {
                    IF changePriceTypeUserRepricing(userRepricing)== ChangePriceType.discountChange THEN {
                        SET retailPriceUserRepricingDetail(userRepricingDetail) <- newDiscountRetailPriceUserRepricingDetail(userRepricingDetail);
                    }
                }
            }
        }
} TOOLBAR;


//------------------------------------ Печатные формы акт расценки ------------------------------------------------ //
nameStoreRepricing 'Магазин' (repricing) = nameStoreDepartmentStore(departmentStoreRepricing(repricing));

FORM repricing 'Акт переоценки (печать)' PRINT

    OBJECTS p = Repricing FIXED PANEL
    PROPERTIES (p)  SELECTOR objectClassName

    PROPERTIES (p) numberRepricing, seriesRepricing, dateRepricing, timeRepricing, nameStoreRepricing,
               nameDepartmentStoreRepricing, countRepricingDetailRepricing, quantityRepricingDetailRepricing, nameLegalEntityStockRepricing,
               curSumRepricingDetailRepricing, curMarkupSumRepricingDetailRepricing, curVATSumRepricingDetailRepricing,
               curRetailSumRepricingDetailRepricing,
               sumRepricingDetailRepricing, markupSumRepricingDetailRepricing, VATSumRepricingDetailRepricing,
               retailSumRepricingDetailRepricing,
               diffSumRepricingDetailRepricing, diffMarkupSumRepricingDetailRepricing, diffVATSumRepricingDetailRepricing,
               diffRetailSumRepricingDetailRepricing,
               noteRepricing, numberDisposalRepricing, repricingCommitteeRepricing, nameRepricingCommitteeRepricing,
               nameChairmanRepricing, namePositionChairmanRepricing, nameEmployeeCommitteeRepricing


    OBJECTS d = RepricingDetail
    PROPERTIES (d)  indexRepricingDetail, idBarcodeSkuRepricingDetail, nameSkuRepricingDetail, shortNameUOMSkuRepricingDetail, quantityRepricingDetail,
               curPriceRepricingDetail, curSumRepricingDetail,
               curMarkupRepricingDetail, curMarkupSumRepricingDetail,
               numberCurVATRepricingDetail, valueCurVATRepricingDetail, curVATSumRepricingDetail,
               curRetailPriceRepricingDetail, curRetailSumRepricingDetail,
               priceRepricingDetail, sumRepricingDetail,
               markupRepricingDetail, markupSumRepricingDetail,
               numberVATRepricingDetail, valueVATRepricingDetail, VATSumRepricingDetail,
               retailPriceRepricingDetail, retailSumRepricingDetail,
               diffSumRepricingDetail, diffMarkupSumRepricingDetail, diffVATSumRepricingDetail,
               diffRetailSumRepricingDetail

    OBJECTS e=Employee
    PROPERTIES(e) READONLY   nameContact, namePositionEmployee

    FILTERS    repricingRepricingDetail(d) == p,
               inCommitteeRepricingEmployee(p, e)

;

printRepricing 'Акт переоценки' (repricing) = ACTION FORM repricing OBJECTS p = repricing IMAGE 'print.png' IN printGroup;

// --------------------------- Формы --------------------------------- //

FORM userRepricing 'Акт переоценки'
    OBJECTS p=UserRepricing FIXED PANEL
    PROPERTIES (p) objectClassName, nameNumeratorObject, numberObject, seriesObject,
                   dateUserRepricing, timeUserRepricing, beforeDateUserRepricing, nameDepartmentStoreUserRepricing,
                   diffSumUserRepricingDetailUserRepricing, diffMarkupSumUserRepricingDetailUserRepricing, diffVATSumUserRepricingDetailUserRepricing,
                   diffRetailSumUserRepricingDetailUserRepricing,
                   noteUserRepricing, numberDisposalUserRepricing, nameRepricingCommitteeUserRepricing, skipChangeLedgerUserRepricing

    OBJECTS d=UserRepricingDetail
    PROPERTIES (d) indexUserRepricingDetail, idBarcodeSkuUserRepricingDetail, nameSkuUserRepricingDetail, shortNameUOMSkuUserRepricingDetail, quantityUserRepricingDetail,

                   curPriceUserRepricingDetail, curSumUserRepricingDetail,                    
                   curMarkupUserRepricingDetail ON CHANGE changeCurMarkupUserRepricingDetail(d), curMarkupSumUserRepricingDetail,
                   numberCurVATUserRepricingDetail, valueCurVATUserRepricingDetail, curVATSumUserRepricingDetail,
                   curRetailPriceUserRepricingDetail ON CHANGE changeCurRetailPriceUserRepricingDetail(d), curRetailSumUserRepricingDetail,
                   
                   priceUserRepricingDetail, sumUserRepricingDetail,                    
                   markupUserRepricingDetail ON CHANGE changeMarkupUserRepricingDetail(d), markupSumUserRepricingDetail,
                   numberVATUserRepricingDetail, valueVATUserRepricingDetail, VATSumUserRepricingDetail,
                   retailPriceUserRepricingDetail ON CHANGE changeRetailPriceUserRepricingDetail(d), retailSumUserRepricingDetail, ADDOBJ, delete

    PROPERTIES changePriceUserRepricing(p) TODRAW d

    PROPERTIES(p) TODRAW d addDetailDialogSkuStockUserRepricingDetailUserRepricing, addDetailDialogTerminalUserRepricingDetailUserRepricing,
                           addDetailInputBarcodeUserRepricingDetailUserRepricing, deleteUserRepricingDetailUserRepricing

    FILTERS userRepricingUserRepricingDetail(d)==p

    EVENTS
        ON OK prePostUserRepricing(p)

    EDIT UserRepricing OBJECT p
;

DESIGN userRepricing FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW specification.box BEFORE functions.box{

            ADD d.box {
                title = 'Спецификация';
                d.panel {
                    childConstraints = TO THE RIGHTBOTTOM;
                }
            }
        }
        NEW header.box BEFORE specification.box {
            childConstraints = TO THE RIGHTBOTTOM;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;
                ADD p.documentHeaderGroup {
                    childConstraints = TO THE RIGHTBOTTOM;
                    ADD PROPERTY(objectClassName);
                    ADD PROPERTY(nameDepartmentStoreUserRepricing);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateUserRepricing);
                    ADD PROPERTY(timeUserRepricing);
                    ADD PROPERTY(beforeDateUserRepricing);
                }
                ADD p.documentPrmGroup {
                    childConstraints = TO THE RIGHTBOTTOM;
                }
            }

            ADD p.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }

        PROPERTY(priceUserRepricingDetail) { background = #FFFFCC; }
        PROPERTY(sumUserRepricingDetail) { background = #FFFFCC; }
        PROPERTY(markupUserRepricingDetail) { background = #FFFFCC; }
        PROPERTY(markupSumUserRepricingDetail) { background = #FFFFCC; }
        PROPERTY(numberVATUserRepricingDetail) { background = #FFFFCC; }
        PROPERTY(valueVATUserRepricingDetail) { background = #FFFFCC; }
        PROPERTY(VATSumUserRepricingDetail) { background = #FFFFCC; }
        PROPERTY(retailPriceUserRepricingDetail) { background = #FFFFCC; }
        PROPERTY(retailSumUserRepricingDetail) { background = #FFFFCC; }

        PROPERTY(formOk) {
            caption = 'Провести';
        }
    }
}

//-- SKU
@defineDocumentSkuSystemLedgerPriceListType(userRepricing, accountPriceListType, departmentStore);
@extendFormDocumentSku(userRepricing, userRepricing, p);
@extendFormDocumentSkuAll(userRepricing, userRepricing, p);

EXTEND FORM userRepricing

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' currentBalanceSkuUserRepricing(s, p) DEFAULT
        FILTER 'В документе ' 'F9' quantityUserRepricingDetailSkuUserRepricing(s, p)
;

//allSkuUserRepricing 'Весь остаток' = DATA SESSION BOOLEAN (Sku, UserRepricing);
//
//overChangeAllSkuUserRepricing = ACTION (sku, userRepricing) {
//    REQUEST BOOLEAN INPUT;
//
//    IF requestedLogical() THEN {
//        SET allSkuUserRepricing(sku, userRepricing) <- TRUE;
//
//        IF currentBalanceSkuUserRepricing(sku, userRepricing) AND allSkuUserRepricing (sku, userRepricing) THEN {
//            SET requestedNumeric() <- currentBalanceSkuUserRepricing(sku, userRepricing) ;
//            EXEC changeQuantityValueSkuUserRepricing(sku, userRepricing);
//        }
//    }ELSE {
//        SET allSkuUserRepricing(sku, userRepricing) <- NULL;
//        SET requestedNumeric() <- NULL;
//        EXEC changeQuantityValueSkuUserRepricing(sku, userRepricing);
//    }
//}
//
//
//
//EXTEND FORM userRepricing
//    PROPERTIES allSkuUserRepricing(s,p) ON CHANGE overChangeAllSkuUserRepricing(s,p) AFTER currentBalanceSkuUserRepricing(s,p)
//;

//------------------------ Управленческая переоценка ----------------------------//

FORM managementRepricing 'Управленческая переоценка'
    OBJECTS d = DepartmentStore FIXED PANEL
    PROPERTIES (d) SELECTOR nameDepartmentStore

    OBJECTS p = PriceListType FIXED PANEL
    PROPERTIES (p) SELECTOR namePriceListType

    OBJECTS c = CalcPriceListType FIXED PANEL
    PROPERTIES (c) SELECTOR nameCalcPriceListType

    OBJECTS t=DATETIME FIXED PANEL
    PROPERTIES(t) OBJVALUE

;
DESIGN managementRepricing FROM DEFAULT {
    main {
        childConstraints = TO THE BOTTOM;

        NEW topContainer {
            childConstraints = TO THE RIGHT;
            ADD d.box { title = 'Выберите отдел магазина';}
            ADD p.box { title = 'Выберите вид цен (управленческий)';}
            ADD c.box { title = 'Выберите вид цен (надбавка)';}
            ADD t.box;
        }
        ADD functions.box;
    }
}

overManagementRepricing = ABSTRACT ACTION (a,b,c,d);

prevPricePriceListCalcListSkuStockDateTime (priceList, calcList, sku, department, time) =
    IF prevPricePriceListTypeSkuStockDateTime(priceList, sku, department, time) AND calcList IS CalcPriceListType
        THEN prevPricePriceListTypeSkuStockDateTime(priceList, sku, department, time) AND priceList IS PriceListType
        ELSE prevPricePriceListTypeSkuStockDateTime(calcList, sku, department, time) AND calcList IS CalcPriceListType;

createManagementRepricing 'Создать управленческую переоценку' = ACTION () NEWSESSION {

    FORM managementRepricing  MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL department = DepartmentStore();
        LOCAL priceList = PriceListType();
        LOCAL calcList = CalcPriceListType();
        LOCAL time =  DATETIME();

        SET department() <- chosenObject('d');
        SET priceList() <- chosenObject('p');
        SET calcList() <- chosenObject('c');
        SET time() <- chosenDateTime('t');

        FOR ADDOBJ r = UserRepricing DO {
            SET departmentStoreUserRepricing(r) <-  department();

            FOR currentBalanceSkuStock(sku, department()) AND
                prevPricePriceListCalcListSkuStockDateTime(priceList(), calcList(), sku, department(), time()) != prevPricePriceListTypeSkuStockDateTime(SystemLedgerPriceListType.retailPricingPriceListType, sku, department(), time())
                ADDOBJ rd = UserRepricingDetail DO {
                SET userRepricingUserRepricingDetail(rd) <- r;
                SET skuUserRepricingDetail(rd) <- sku;
                SET quantityUserRepricingDetail(rd) <- currentBalanceSkuStock(sku, department());
                SET retailPriceUserRepricingDetail(rd) <- prevPricePriceListCalcListSkuStockDateTime(priceList(), calcList(), sku, department(), time());
                SET curRetailPriceUserRepricingDetail(rd) <- pricePriceListTypeSkuStockDateTime(SystemLedgerPriceListType.retailPricingPriceListType, sku, department(), time());
                SET priceUserRepricingDetail(rd) <- prevPricePriceListTypeSkuStockDateTime(SystemLedgerPriceListType.supplierPricingPriceListType, sku, department(), time());
                EXEC overManagementRepricing(rd, sku, department(), time());
            }
            FORM userRepricing  OBJECTS p = r MANAGESESSION DOCKEDMODAL;

        }
    }
} TOOLBAR;

addUserRepricing 'Добавить' = ACTION ADDFORM UserRepricing;
editUserRepricing 'Редактировать' (userRepricing) = ACTION EDITFORM UserRepricing;

FORM repricings 'Акты переоценки' TITLE 'Акты переоценки'
    OBJECTS p = Repricing
    PROPERTIES (p) READONLY isPostedRepricing FORCE GRID, numberRepricing, seriesRepricing, dateRepricing, timeRepricing, beforeDateRepricing,
               nameDepartmentStoreRepricing, countRepricingDetailRepricing,
               diffSumRepricingDetailRepricing, diffMarkupSumRepricingDetailRepricing, diffVATSumRepricingDetailRepricing,
               diffRetailSumRepricingDetailRepricing,
               numberDisposalRepricing, skipChangeLedgerRepricing,
               noteRepricing, objectClassName

    PROPERTIES (p) READONLY FORCE PANEL nameUserCreatedHistorizable, timeCreatedHistorizable, hostnameComputerCreatedHistorizable, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES ()  addUserRepricing TODRAW p
    PROPERTIES (p) editUserRepricing
    PROPERTIES (p) delete FORCE PANEL TOOLBAR SHOWIF isUserRepricing(p)
    PROPERTIES (p) printRepricing FORCE PANEL
    PROPERTIES ()  createManagementRepricing TODRAW p


    OBJECTS d = RepricingDetail
    PROPERTIES (d) READONLY indexRepricingDetail, idBarcodeSkuRepricingDetail, nameSkuRepricingDetail, shortNameUOMSkuRepricingDetail, quantityRepricingDetail,

               curPriceRepricingDetail, curSumRepricingDetail,
               curMarkupRepricingDetail, curMarkupSumRepricingDetail,
               numberCurVATRepricingDetail, valueCurVATRepricingDetail, curVATSumRepricingDetail,
               curRetailPriceRepricingDetail, curRetailSumRepricingDetail,

               priceRepricingDetail, sumRepricingDetail,
               markupRepricingDetail, markupSumRepricingDetail,
               numberVATRepricingDetail, valueVATRepricingDetail, VATSumRepricingDetail,
               retailPriceRepricingDetail, retailSumRepricingDetail

    FILTERS repricingRepricingDetail(d) == p

    DIALOG Repricing OBJECT p
;
@extendFormFilterAccess(Repricing, p, repricings, departmentStore);

DESIGN repricings FROM DEFAULT {
    PROPERTY (delete(p)) {
        askConfirm = TRUE;
    }

    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD p.box { fillVertical = 2.0; }

        NEW documentDetail {
            type = TABBED;

            ADD d.box {
                title = 'Спецификация';
            }
            NEW documentHistory {
                title = 'История';

                ADD p.historyGroup;
                ADD p.postedGroup;
            }
            NEW printTab {
                title = 'Печатные формы';
                NEW printContainer {
                    title = 'Печать';
                    childConstraints = TO THE BOTTOM;
                    ADD p.printGroup;
                }
            }
            NEW actionContainer {
                title = 'Действия';
                childConstraints = TO THE RIGHT;
                NEW createdContainer {
                    title = 'Создание на основе';
                    childConstraints = TO THE BOTTOM;
                }
                NEW machineryContainer {
                    title = 'Загрузка';
                    childConstraints = TO THE BOTTOM;
                }
            }
        }
    }
}

NAVIGATOR {
    pricingNavigator {
        ADD repricings;
        ADD repricingCommitteeDialog;
    }
}

// ---------------------------- Создание PriceList ----------------------------------- //

EXTEND CLASS RepricingDetail : PriceListLedger;

fromDateTimePriceListLedger (ledger) += dateTimeRepricingDetail(ledger);

isPostedPriceListLedger(ledger) += isPostedRepricingDetail(ledger);
skipPriceListLedger(ledger) += skipChangeLedgerRepricingDetail(ledger);

skuPriceListLedger (ledger) += skuRepricingDetail(ledger);

descriptionPriceListLedger (ledger) += descriptionRepricingDetail(ledger);

pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += priceRepricingDetail(ledger) WHEN CLASS(priceRepricingDetail(ledger)) AND type == SystemLedgerPriceListType.supplierPricingPriceListType;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += retailPriceRepricingDetail(ledger) WHEN CLASS(retailPriceRepricingDetail(ledger)) AND type == SystemLedgerPriceListType.retailPricingPriceListType;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += retailPriceRepricingDetail(ledger) WHEN CLASS(retailPriceRepricingDetail(ledger)) AND type == SystemLedgerPriceListType.accountPriceListType;
inPriceListLedgerStock (ledger, stock) += departmentStoreRepricingDetail(ledger) == stock;

// ------------------------------------- Загрузка в оборудование ------------------------------ //

@Machinery.implementPriceTransactionDocument(Repricing);
Machinery.skipPriceTransactionDocument(document) += skipChangeLedgerRepricing(document);

@defineDocumentMachineryPriceTransaction(repricing, sku, departmentStore);
@extendFormDocumentMachineryPriceTransaction(repricings, p, repricing, skipChangeLedgerRepricing, machineryContainer);

@implementStockDocumentLedgerInc(Repricing, departmentStore);
sumIncStockDocumentLedger (ledger) += diffRetailSumRepricingDetailRepricing(ledger);
sumItemIncStockDocumentLedger (ledger) += sumItemRepricingDetailRepricing(ledger);
sumContainerIncStockDocumentLedger (ledger) += sumContainerRepricingDetailRepricing(ledger);

// ------------------------------------- Автоматическое создание дооценки для документа -------------------- //

META defineRepricingAggregation(sign, stockProp)
//-- аггр.объект

    // Комиссия
    @defineDocumentInterfaceHeaderRepricingCommittee (invoice, stockProp);

    // Кол-во
    @defineDocumentInterfaceDetailSkuBalance (invoice);
    @deriveDocumentDetailSkuBalance (userInvoice, sku, stockProp);

    // -- До
    @defineDocumentInterfaceDetailPricePrefix(invoice, cur, ' поставщика до');

    overCurRepricingPriceInvoiceDetail = ABSTRACT NUMERIC[14,2] (InvoiceDetail) PERSISTENT;
    overCurRepricingPriceUserInvoiceDetail = ABSTRACT NUMERIC[14,2] (UserInvoiceDetail) PERSISTENT;
    overCurRepricingPriceInvoiceDetail (detail) += overCurRepricingPriceUserInvoiceDetail(detail);

    curRepricingPriceUserInvoiceDetail (detail) = curPriceUserInvoiceDetail(detail) OVERRIDE overCurRepricingPriceUserInvoiceDetail(detail) PERSISTENT;
    curRepricingPriceInvoiceDetail (detail) = curPriceInvoiceDetail(detail) OVERRIDE overCurRepricingPriceInvoiceDetail(detail) PERSISTENT;

    @defineDocumentInterfaceDetailMarkupPrefix (invoice, cur, ' до');

    @defineDocumentInterfaceDetailVAT(invoice, country###stockProp, cur, ' до');
    @deriveDocumentDetailVAT (userInvoice, cur, beforeDate, sku, stockProp);
    @deriveDocumentDetailValueVAT(userInvoice, cur);

    @defineDocumentInterfaceDetailPricePrefix(invoice, curRetail, ' розничная до');

    // Автоматическое заполнение цен до
    @deriveDocumentDetailPriceSystemLedgerPriceListType(userInvoice, supplierPricingPriceListType, cur, sku, stockProp);
    @deriveDocumentDetailPriceSystemLedgerPriceListType(userInvoice, retailPricingPriceListType, curRetail, sku, stockProp);

    // Расчет надбавки обратным счетом
    curMarkupUserInvoiceDetail(userInvoiceDetail)  <- [round2((((X - X*Y/(100+Y))/Z)-1)*100)](
        curRetailPriceUserInvoiceDetail(userInvoiceDetail),
        valueCurVATUserInvoiceDetail(userInvoiceDetail),
        curRepricingPriceUserInvoiceDetail(userInvoiceDetail))
        WHEN CHANGED(curRetailPriceUserInvoiceDetail(userInvoiceDetail)) OR CHANGED (curVATUserInvoiceDetail(userInvoiceDetail)) OR CHANGED(curRepricingPriceUserInvoiceDetail(userInvoiceDetail));

    // Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены
    @changeDocumentDetailMarkupCustomPrefix(userInvoiceDetail, curRetail, curRepricing, cur, cur);
    @changeDocumentDetailPriceCustomPrefix(userInvoiceDetail, curRetail, curRepricing, cur, cur);

    // -- После
    overRepricingPriceInvoiceDetail = ABSTRACT NUMERIC[14,2] (InvoiceDetail) PERSISTENT;
    overRepricingPriceUserInvoiceDetail = ABSTRACT NUMERIC[14,2] (UserInvoiceDetail) PERSISTENT;
    overRepricingPriceInvoiceDetail (detail) += overRepricingPriceUserInvoiceDetail(detail);

    repricingPriceUserInvoiceDetail (detail) = priceUserInvoiceDetail(detail) OVERRIDE overRepricingPriceUserInvoiceDetail(detail) PERSISTENT;
    repricingPriceInvoiceDetail (detail) = priceInvoiceDetail(detail) OVERRIDE overRepricingPriceInvoiceDetail(detail) PERSISTENT;

    // ---- Суммы по строкам ---- //

    // -- До
    @defineDocumentInterfaceDetailDataSumPrefix (invoice, cur, ' поставщика до');
    @defineDocumentInterfaceDetailMarkupSumPrefix (invoice, cur, ' до');
    @defineDocumentInterfaceDetailVATDataSumPrefix (invoice, cur, ' до');
    @defineDocumentInterfaceDetailDataSumPrefix (invoice, curRetail, ' розничная до');

    // Расчет сумм обратным счетом
    @deriveDocumentDetailSumPrefix(userInvoice, curRetail, currency, balanceBSku);
    @deriveDocumentDetailReverseVATSumPrefix(userInvoice, cur, curRetail);
    @deriveDocumentDetailMarkupSumPrefix(userInvoice, cur, curRetail, cur);
    @deriveDocumentDetailSumPrefix(userInvoice, cur, currency, balanceBSku);

    // -- После
    @defineDocumentInterfaceDetailDataSumPrefix (invoice, after, ' поставщика после');
    @defineDocumentInterfaceDetailMarkupSumPrefix (invoice, afterRetail, ' после');
    @defineDocumentInterfaceDetailVATDataSumPrefix (invoice, afterRetail, ' после');
    @defineDocumentInterfaceDetailDataSumPrefix (invoice, afterRetail, ' розничная после');

    // Расчет сумм обратным счетом
    afterRetailSumUserInvoiceDetail (detail)  <- roundPriceCurrency(balanceBSkuUserInvoiceDetail(detail) * retailPriceUserInvoiceDetail(detail), currencyUserInvoiceDetail(detail))
                        WHEN CHANGED(balanceBSkuUserInvoiceDetail(detail)) OR CHANGED (retailPriceUserInvoiceDetail(detail)) OR CHANGED(currencyUserInvoiceDetail(detail));
    afterRetailVATSumUserInvoiceDetail (detail)  <- roundPriceCurrency([X*Y/(100+Y)](afterRetailSumUserInvoiceDetail(detail), valueRetailVATUserInvoiceDetail(detail)), currencyUserInvoiceDetail(detail))
                    WHEN CHANGED(afterRetailSumUserInvoiceDetail(detail)) OR CHANGED (valueRetailVATUserInvoiceDetail(detail)) OR CHANGED (currencyUserInvoiceDetail(detail));
    afterRetailMarkupSumUserInvoiceDetail(detail) <- afterRetailSumUserInvoiceDetail(detail) (-) afterRetailVATSumUserInvoiceDetail (detail) (-) afterSumUserInvoiceDetail(detail)
                    WHEN CHANGED(afterRetailVATSumUserInvoiceDetail(detail)) OR CHANGED (afterRetailVATSumUserInvoiceDetail (detail)) OR CHANGED (afterSumUserInvoiceDetail(detail));
    afterSumUserInvoiceDetail (detail)  <- roundPriceCurrency(balanceBSkuUserInvoiceDetail(detail) * priceUserInvoiceDetail(detail), currencyUserInvoiceDetail(detail))
                        WHEN CHANGED(balanceBSkuUserInvoiceDetail(detail)) OR CHANGED (priceUserInvoiceDetail(detail)) OR CHANGED(currencyUserInvoiceDetail(detail));

    // -- Разница
    @defineDocumentInterfaceDetailDiffSumPrefix (invoice, retailSum, after, cur, ' дооценки');

    // ---- Суммы по документу ---- //
    @defineDocumentInterfaceHeaderSumPrefix (invoice, diffRetail, ' дооценки');

    showCreateRepricingInvoice (invoice) = stockProp###invoice(invoice) IS DepartmentStore AND NOT costLedgerDepartmentStore(stockProp###invoice(invoice));
    @defineDocumentInterfaceCreate (invoice, createRepricing, 'Создать акт дооценки');

    needToRepricingInvoiceDetail (invoiceDetail) = curRetailPriceInvoiceDetail(invoiceDetail) != retailPriceInvoiceDetail(invoiceDetail)
                                                   AND balanceBSkuInvoiceDetail(invoiceDetail) != 0 AND stockProp###InvoiceDetail(invoiceDetail) IS DepartmentStore
                                                   AND NOT costLedgerDepartmentStore(stockProp###InvoiceDetail(invoiceDetail))
                                                   AND createRepricingInvoiceDetail(invoiceDetail)
                                                   AND isStockSkuInvoiceDetail(invoiceDetail) PERSISTENT;// AND isPostedInvoiceDetail(invoiceDetail) ;

    needToRepricingInvoice (invoice)= GROUP SUM 1 IF needToRepricingInvoiceDetail(invoiceDetail)
        BY invoiceInvoiceDetail(invoiceDetail) PERSISTENT;

    CLASS InvoiceRepricing 'Акт дооценки на основе инвойса'###sign : Repricing;
    CLASS InvoiceRepricingPosted 'Проведенный акт дооценки на основе инвойса'###sign : InvoiceRepricing, PostedObject;
    CLASS InvoiceRepricingDetail 'Строка акта дооценки на основе инвойса'###sign : RepricingDetail;

    @defineDocumentTables(invoiceRepricing);

    @defineDocumentAggregation(invoice, invoiceRepricing, needToRepricingInvoice);
    @defineDocumentAggregationTimePrefix(invoice, invoiceRepricing, before);

    repricingRepricingDetail(detail) += invoiceRepricingInvoiceRepricingDetail(detail);

    printRepricing 'Акт переоценки' (repricing) = ACTION FORM repricing OBJECTS p = repricing IMAGE 'print.png' IN printGroup;
    printRepricingInvoice 'Акт дооценки' (invoice) = printRepricing(invoiceRepricingInvoice(invoice)) IMAGE 'print.png' IN printGroup;
    @defineDocumentDetailIndex(invoiceRepricing);

    dateRepricing(repricing) += dateInvoiceRepricing(repricing);
    timeRepricing(repricing) += timeInvoiceRepricing(repricing);

    beforeDateRepricing(repricing) += beforeDateInvoiceRepricing(repricing);
    beforeTimeRepricing(repricing) += beforeTimeInvoiceRepricing(repricing);

    @defineDocumentAggregationStockPrefix(invoice, invoiceRepricing, stockProp, 'Склад', , );
    departmentStoreRepricing(repricing) += stockProp###invoiceRepricing(repricing) IF stockProp###invoiceRepricing(repricing) IS DepartmentStore;
    dataDepartmentStoreRepricingDetail(repricingDetail) += data###stockProp###InvoiceDetail(invoiceDetailInvoiceRepricingDetail(repricingDetail))
                                                           IF data###stockProp###InvoiceDetail(invoiceDetailInvoiceRepricingDetail(repricingDetail)) IS DepartmentStore;

    @defineDocumentAggregationPosted(invoice, invoiceRepricing);
    isPostedRepricing(repricing) += isPostedInvoiceRepricing(repricing);

    numberInvoiceRepricing 'Номер документа' (invoiceRepricing) = numberInvoice(invoiceInvoiceRepricing(invoiceRepricing));
    numberRepricing(repricing) += numberInvoiceRepricing(repricing);

    seriesInvoiceRepricing 'Серия документа' (invoiceRepricing) = seriesInvoice(invoiceInvoiceRepricing(invoiceRepricing));
    seriesRepricing(repricing) += seriesInvoiceRepricing(repricing);

    seriesNumberInvoiceRepricing 'Серия/номер документа' (invoiceRepricing) = seriesNumberInvoice(invoiceInvoiceRepricing(invoiceRepricing));

    noteInvoiceInvoiceRepricing 'Примечание' (invoiceRepricing) = noteInvoice(invoiceInvoiceRepricing(invoiceRepricing));
    noteRepricing(repricing) += noteInvoiceInvoiceRepricing(repricing);

    currencyInvoiceRepricing  (invoiceRepricing) = currencyInvoice(invoiceInvoiceRepricing(invoiceRepricing));
    currencyRepricing (repricing) += currencyInvoiceRepricing(repricing);
    repricingCommitteeRepricing(repricing) += repricingCommitteeInvoice(invoiceInvoiceRepricing(repricing));
    numberDisposalRepricing(repricing) += numberDisposalInvoice(invoiceInvoiceRepricing(repricing));

    @defineDocumentDescription(invoiceRepricing, InvoiceRepricingDetail, seriesNumberInvoiceRepricing, 'Акт дооценки на основе инвойса');
    descriptionRepricing (repricing) += descriptionInvoiceRepricing(repricing);

    skipChangeLedgerRepricing(repricing) += repricing IS InvoiceRepricing;

    @defineDocumentAggregationDetailSku(invoice, invoiceRepricing, sku);
    skuRepricingDetail(repricingDetail) +=  skuInvoiceRepricingDetail(repricingDetail);

    overCopyInvoice(s, d) += ACTION (s, d) {
        SET createRepricingUserInvoice(d) <- createRepricingUserInvoice(s);
        SET repricingCommitteeUserInvoice(d) <- repricingCommitteeUserInvoice(s);
        SET numberDisposalUserInvoice(d) <- numberDisposalUserInvoice(s);
        SET beforeDateUserInvoice(d) <- beforeDateUserInvoice(s);
    }

    backgroundCurInvoice 'Цвет' (invoice) = RGB(255, 255, 224) IF invoice IS Invoice;
    backgroundAfterInvoice 'Цвет' (invoice) = RGB(255, 255, 200) IF invoice IS Invoice;

    EXTEND FORM userInvoice
        PROPERTIES(i)   SHOWIF showCreateRepricingInvoice(i) BACKGROUND backgroundCurInvoice(i) createRepricingUserInvoice
        PROPERTIES(i)   BACKGROUND backgroundCurInvoice(i) SHOWIF createRepricingUserInvoice(i) nameRepricingCommitteeUserInvoice, numberDisposalUserInvoice, beforeDateUserInvoice
        PROPERTIES(i)   BACKGROUND backgroundAfterInvoice(i) SHOWIF createRepricingUserInvoice(i) diffRetailSumUserInvoiceDetailUserInvoice

        PROPERTIES(d)   BACKGROUND backgroundCurInvoice(i) SHOWIF createRepricingUserInvoice(i) BEFORE name###stockProp###userInvoiceDetail(d)
                        balanceBSkuUserInvoiceDetail, curPriceUserInvoiceDetail, curSumUserInvoiceDetail,
                        curMarkupUserInvoiceDetail ON CHANGE changeCurMarkupUserInvoiceDetail(d), curMarkupSumUserInvoiceDetail,
                        numberCurVATUserInvoiceDetail, valueCurVATUserInvoiceDetail, curVATSumUserInvoiceDetail,
                        curRetailPriceUserInvoiceDetail ON CHANGE changeCurRetailPriceUserInvoiceDetail(d), curRetailSumUserInvoiceDetail
        PROPERTIES(d)   BACKGROUND backgroundAfterInvoice(i) SHOWIF createRepricingUserInvoice(i) BEFORE name###stockProp###userInvoiceDetail(d)
                        afterSumUserInvoiceDetail, afterRetailVATSumUserInvoiceDetail, afterRetailMarkupSumUserInvoiceDetail, afterRetailSumUserInvoiceDetail

    ;
    EXTEND DESIGN userInvoice {
        headerCreateDocuments {
            NEW headerCreateRepricing {
                title = 'Дооценка';
                ADD PROPERTY(createRepricingUserInvoice);
                ADD PROPERTY(nameRepricingCommitteeUserInvoice);
                ADD PROPERTY(numberDisposalUserInvoice);
                ADD PROPERTY(beforeDateUserInvoice);
            }
        }
    }

    EXTEND FORM invoices
        PROPERTIES(i) READONLY BACKGROUND backgroundCurInvoice(i) createRepricingInvoice, diffRetailSumInvoiceDetailInvoice AFTER retailSumInvoiceDetailInvoice
        PROPERTIES(i) FORCE PANEL  printRepricingInvoice SHOWIF createRepricingInvoice(i)

    ;

//----------------------------------------------------------------------------------------------------------
    quantityRepricingDetail(repricingDetail) += balanceBSkuInvoiceDetail(invoiceDetailInvoiceRepricingDetail(repricingDetail));

    // -- До

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curPrice, 'Цена поставщика до');
    curPriceRepricingDetail(repricingDetail) += curPriceInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curMarkup, 'Надбавка до');
    curMarkupRepricingDetail(repricingDetail) += curMarkupInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curVAT, 'НДС до');
    curVATRepricingDetail(repricingDetail) += curVATInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, valueCurVAT, 'НДС,% до');
    valueCurVATRepricingDetail(repricingDetail) += valueCurVATInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curRetailPrice, 'Цена розничная до');
    curRetailPriceRepricingDetail(repricingDetail) += curRetailPriceInvoiceRepricingDetail(repricingDetail);

    // -- После

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, price, 'Цена поставщика после');
    priceRepricingDetail(repricingDetail) += priceInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, retailMarkup, 'Надбавка после');
    markupRepricingDetail(repricingDetail) += retailMarkupInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, retailVAT, 'НДС после');
    VATRepricingDetail(repricingDetail) += retailVATInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, valueRetailVAT, 'НДС,% после');
    valueVATRepricingDetail(repricingDetail) += valueRetailVATInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, retailPrice, 'Цена розничная после');
    retailPriceRepricingDetail(repricingDetail) += retailPriceInvoiceRepricingDetail(repricingDetail);

    // ---- Суммы по строкам ---- //

    // -- До
    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curSum, 'Сумма поставщика до');
    curSumRepricingDetail(repricingDetail) += curSumInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curMarkupSum, 'Сумма надбавки до');
    curMarkupSumRepricingDetail(repricingDetail) += curMarkupSumInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curVATSum, 'Сумма НДС до');
    curVATSumRepricingDetail(repricingDetail) += curVATSumInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curRetailSum, 'Сумма розничная до');
    curRetailSumRepricingDetail(repricingDetail) += curRetailSumInvoiceRepricingDetail(repricingDetail);

    // -- После
    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, afterSum, 'Сумма поставщика после');
    sumRepricingDetail(repricingDetail) += afterSumInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, afterRetailMarkupSum, 'Сумма надбавки после');
    markupSumRepricingDetail(repricingDetail) += afterRetailMarkupSumInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, afterRetailVATSum, 'Сумма НДС после');
    VATSumRepricingDetail(repricingDetail) += afterRetailVATSumInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, afterRetailSum, 'Сумма розничная после');
    retailSumRepricingDetail(repricingDetail) += afterRetailSumInvoiceRepricingDetail(repricingDetail);

END
