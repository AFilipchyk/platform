MODULE PricingSale;

REQUIRE Pricing, SaleInvoice, SaleShipment, SaleOperation;

NAMESPACE Sale;

// ------------------------------------- Автоматическое создание расценки для документа -------------------- //
@defineDocumentInterfaceDetailPricePrefix(invoice, supplier, ' поставщика');
@defineDocumentInterfaceDetailDataSumPrefix (invoice, supplier, ' поставщика');
@deriveDocumentDetailSumPrefix(userInvoice, supplier, currency, quantity);
@defineDocumentInterfaceHeaderSumPrefix (invoice, supplier, ' поставщика');

roundConditionUserInvoiceDetail(userInvoiceDetail) = roundConditionDepartmentStore(supplierStockUserInvoiceDetail(userInvoiceDetail));
@definePricingAggregation(invoice, Invoice, ' (закупка-возврат)', 'Акт расценки при продаже', 'Проведенный акт расценки при продаже', supplierStock, supplier);

//------------------------------ Создание аггрегированных объектов через операции -----------------------------//

createPricingUserInvoice (invoice) <- createPricingOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));

//overShipmentPriceUserInvoiceDetail(detail) += retailPriceUserInvoiceDetail(detail)
//    IF supplierStockUserInvoiceDetail(detail) IS DepartmentStore AND NOT costLedgerDepartmentStore(supplierStockUserInvoiceDetail(detail));
//-- аггр.объект

retailMarkupUserInvoiceDetail(userInvoiceDetail)  <- [round2((((X - X*Y/(100+Y))/Z)-1)*100)](
    0.0 IF userInvoiceDetail IS UserInvoiceDetail OR retailPriceUserInvoiceDetail(userInvoiceDetail),
    0.0 IF userInvoiceDetail IS UserInvoiceDetail OR valueRetailVATUserInvoiceDetail(userInvoiceDetail),
    supplierPriceUserInvoiceDetail(userInvoiceDetail))
    WHEN CHANGED(retailPriceUserInvoiceDetail(userInvoiceDetail)) OR CHANGED (retailVATUserInvoiceDetail(userInvoiceDetail)) OR CHANGED(supplierPriceUserInvoiceDetail(userInvoiceDetail));

@deriveDocumentDetailPriceSystemLedgerPriceListType(userInvoice, supplierPricingPriceListType, supplier, sku, supplierStock);
@deriveDocumentDetailPriceSystemLedgerPriceListType(userInvoice, retailPricingPriceListType, retail, sku, supplierStock);
@deriveDocumentDetailVAT (userInvoice, retail, date, sku, supplierStock);
@deriveDocumentDetailValueVAT(userInvoice, retail);

skipChangeLedgerPricing(pricing) += pricing IS InvoicePricing;
isReturnPricing(pricing) +=  pricing IS InvoicePricing;

EXTEND FORM userInvoice
    PROPERTIES(i) SHOWIF createPricingInvoice(i) BACKGROUND backgroundRetailInvoice(i) supplierSumUserInvoiceDetailUserInvoice
    PROPERTIES(d) SHOWIF createPricingInvoice(i) BACKGROUND backgroundRetailInvoice(i) BEFORE retailMarkupUserInvoiceDetail(d)
    supplierPriceUserInvoiceDetail, supplierSumUserInvoiceDetail
;
EXTEND FORM invoices
    PROPERTIES(i) READONLY BACKGROUND backgroundRetailInvoice(i) supplierSumInvoiceDetailInvoice BEFORE retailSumInvoiceDetailInvoice(i)
    PROPERTIES(d) SHOWIF createPricingInvoice(i) BACKGROUND backgroundRetailInvoice(i) BEFORE retailMarkupInvoiceDetail(d)
    supplierPriceInvoiceDetail, supplierSumInvoiceDetail
;
//--
