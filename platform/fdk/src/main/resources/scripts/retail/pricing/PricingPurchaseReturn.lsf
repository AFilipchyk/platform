MODULE PricingPurchaseReturn;

REQUIRE Pricing, PurchaseReturnInvoice, PurchaseReturnShipment;//, PurchaseOperation;

NAMESPACE PurchaseReturn;

// ------------------------------------- Автоматическое создание расценки для документа -------------------- //

@definePricingAggregation(invoice, ' (закупка-возврат)', 'Акт расценки при возврате', 'Проведенный акт расценки при возврате', customerStock, );
//-- аггр.объект

retailMarkupUserInvoiceDetail(userInvoiceDetail)  <- [round2((((X - X*Y/(100+Y))/Z)-1)*100)](
    0.0 IF userInvoiceDetail IS userInvoiceDetail OR retailPriceUserInvoiceDetail(userInvoiceDetail),
    0.0 IF userInvoiceDetail IS userInvoiceDetail OR valueRetailVATUserInvoiceDetail(userInvoiceDetail),
    priceUserInvoiceDetail(userInvoiceDetail))
    WHEN CHANGED(retailPriceUserInvoiceDetail(userInvoiceDetail)) OR CHANGED (retailVATUserInvoiceDetail(userInvoiceDetail)) OR CHANGED(priceUserInvoiceDetail(userInvoiceDetail));

@deriveDocumentDetailPriceSystemLedgerPriceListType(userInvoice, retailPricingPriceListType, retail, sku, customerStock);
@deriveDocumentDetailVAT (userInvoice, retail, date, sku, customerStock);
@deriveDocumentDetailValueVAT(userInvoice, retail);

skipChangeLedgerPricing(pricing) += pricing IS invoicePricing;
isReturnPricing(pricing) +=  pricing IS invoicePricing;
//--

//------------------------------ Создание аггрегированных объектов через операции -----------------------------//

@deriveDocumentHeaderCreate(userInvoice, createPricing, purchase);
