MODULE PricingPurchase;

REQUIRE Pricing, PurchaseInvoice, Repricing, PurchaseShipment;

NAMESPACE Purchase;

//----------------------------------------------- Акт расценки ---------------------------------------------------//

@definePricingAggregation(invoice, ' (закупка)', 'Акт расценки на основе инвойса', 'Проведенный акт расценки на основе инвойса', customerStock, );
@definePricingRelation(' (закупка)', customerStock);

@defineRepricing(' (закупка)', customerStock);

overShipmentPriceUserInvoiceDetail(detail) += retailPriceUserInvoiceDetail(detail)
    IF customerStockUserInvoiceDetail(detail) IS departmentStore AND NOT costLedgerDepartmentStore(customerStockUserInvoiceDetail(detail));

@defineDocumentInterfacePriceListType (invoice, priceListType, retail, ' (розничный)');

EXTEND FORM userInvoice
    PROPERTIES(i) SHOWIF createPricingUserInvoice(i) BACKGROUND backgroundRetailInvoice(i) nameRetailPriceListTypeUserInvoice
    PROPERTIES(d) SHOWIF createPricingUserInvoice(i) BACKGROUND backgroundRetailInvoice(i) nameRetailPriceListTypeUserInvoiceDetail BEFORE retailMarkupUserInvoiceDetail
;
EXTEND DESIGN userInvoice {
    headerRow14 {
        headerRow141 {
            ADD PROPERTY(nameRetailPriceListTypeUserInvoice);
        }
    }
}
EXTEND FORM invoices PROPERTIES(d) SHOWIF createPricingUserInvoice(i) BACKGROUND backgroundRetailInvoice(i) READONLY nameRetailPriceListTypeInvoiceDetail BEFORE retailMarkupInvoiceDetail;

retailPriceListTypeUserInvoice(userInvoice) <- priceListTypeDepartmentStore(customerStockUserInvoice(userInvoice))
    WHEN CHANGED(customerStockUserInvoice(userInvoice));

retailPriceListTypeUserInvoiceDetail(detail) <- retailPriceListTypeUserInvoice(userInvoiceUserInvoiceDetail(detail))
                                                WHEN CHANGED(retailPriceListTypeUserInvoice(userInvoiceUserInvoiceDetail(detail)));

retailVATUserInvoiceDetail (detail) <- VATUserInvoiceDetail(detail) WHEN CHANGED(VATUserInvoiceDetail(detail));

// расчет надбавок и цены при изменении priceListType

META deriveDocumentDetailPriceOnSessionPriceListType (idetail, prefix, prefixP, stockProp)
    ON SESSION PREVSTART pricePriceListTypeSkuStockDateTime { // цены берем на начало сессии, а не этого event'а
        LOCAL changedPriceListType = BOOLEAN (idetail);
        SET changedPriceListType(detail) <- TRUE IF prefix###priceListType###idetail(detail) AND
                                                    sku###idetail(detail) AND
                                            (CHANGED(prefix###priceListType###idetail(detail)) OR
                                             CHANGED(prefixP###price###idetail(detail)) OR
                                             CHANGED(sku###idetail(detail)) OR
                                             CHANGED(stockProp###idetail(detail)) OR
                                             CHANGED(dateTime###idetail(detail)) OR
                                             CHANGED(value###prefix###VAT###idetail(detail)));

        FOR [GROUP MAX(changedPriceListType(detail)) BY prefix###priceListType###idetail(detail)](priceListType) DO {
            IF 1 == 2 THEN BREAK; // чтобы не компилировала в один запрос, а выполняло императивно
            IF priceListType IS calcPriceListType THEN {
                SET prefix###markup###idetail(detail) <- markupCalcPriceListTypeSku(priceListType, sku###idetail(detail))
                                                             WHERE changedPriceListType(detail) AND prefix###priceListType###idetail(detail) == priceListType;
                SET prefix###price###idetail(detail) <- roundPriceRoundCondition([X*(Y+100)*(Z+100)/10000](
                                                                        prefixP###price###idetail(detail),
                                                                        prefix###markup###idetail(detail),
                                                                        value###prefix###VAT###idetail(detail)), roundConditionCalcPriceListType(priceListType))
                                                             WHERE changedPriceListType(detail) AND prefix###priceListType###idetail(detail) == priceListType;
            } ELSE {
                SET prefix###price###idetail(detail) <- prevPricePriceListTypeSkuStockDateTime(priceListType,
                                                                                                   sku###idetail(detail),
                                                                                                   stockProp###idetail(detail),
                                                                                                   dateTime###idetail(detail))
                                                             WHERE changedPriceListType(detail) AND prefix###priceListType###idetail(detail) == priceListType;
                SET prefix###markup###idetail(detail) <- [round2(((X/Z*100/(100+Y))-1)*100)](
                                                                         prefix###price###idetail(detail),
                                                                         prefixP###price###idetail(detail),
                                                                         value###prefix###VAT###idetail(detail))
                                                             WHERE changedPriceListType(detail) AND prefix###priceListType###idetail(detail) == priceListType;
            }
        }
    }
END

@deriveDocumentDetailPriceOnSessionPriceListType (userInvoiceDetail, retail, , customerStock);

overCopyInvoice(s, d) += ACTION (s, d) {
    SET createPricingUserInvoice(d) <- createPricingUserInvoice(s);
    SET pricingCommitteeUserInvoice(d) <- pricingCommitteeUserInvoice(s);
    SET retailPriceListTypeUserInvoice(d) <- retailPriceListTypeUserInvoice(s);
}




