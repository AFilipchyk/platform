MODULE PricingPurchase;

REQUIRE Pricing, PurchaseInvoice, Repricing, PurchaseShipment, PurchaseOperation, GLAccountType;

NAMESPACE Purchase;

//----------------------------------------------- Акт расценки ---------------------------------------------------//

@defineDocumentInterfacePriceListType (invoice, priceListType, retail, ' (розничный)');
roundConditionUserInvoiceDetail(userInvoiceDetail) =
    IF retailPriceListTypeUserInvoiceDetail(userInvoiceDetail) IS calcPriceListType
        THEN roundConditionCalcPriceListType(retailPriceListTypeUserInvoiceDetail(userInvoiceDetail))
        ELSE roundConditionDepartmentStore(customerStockUserInvoiceDetail(userInvoiceDetail));

@definePricingAggregation(invoice, ' (закупка)', 'Акт расценки на основе инвойса', 'Проведенный акт расценки на основе инвойса', customerStock, );
@definePricingRelation(' (закупка)', customerStock);

@defineRepricing(' (закупка)', customerStock);

overShipmentPriceUserInvoiceDetail(detail) += retailPriceUserInvoiceDetail(detail)
    IF customerStockUserInvoiceDetail(detail) IS departmentStore AND NOT costLedgerDepartmentStore(customerStockUserInvoiceDetail(detail));

createPricingUserInvoice (invoice) <- createPricingOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));
retailPriceListTypeUserInvoice (invoice) <- pricingPriceListTypeOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));
createRepricingUserInvoice (invoice) <- createRepricingOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));

EXTEND FORM userInvoice
    PROPERTIES(i) SHOWIF createPricingUserInvoice(i) BACKGROUND backgroundRetailInvoice(i) nameRetailPriceListTypeUserInvoice
    PROPERTIES(d) SHOWIF createPricingUserInvoice(i) BACKGROUND backgroundRetailInvoice(i) nameRetailPriceListTypeUserInvoiceDetail BEFORE retailMarkupUserInvoiceDetail
;
EXTEND DESIGN userInvoice {
    headerCreatePricing {
        ADD PROPERTY(nameRetailPriceListTypeUserInvoice);
    }
}
EXTEND FORM invoices PROPERTIES(d) SHOWIF createPricingUserInvoice(i) BACKGROUND backgroundRetailInvoice(i) READONLY nameRetailPriceListTypeInvoiceDetail BEFORE retailMarkupInvoiceDetail;

retailPriceListTypeUserInvoiceDetail(detail) <- retailPriceListTypeUserInvoice(userInvoiceUserInvoiceDetail(detail))
                                                WHEN CHANGED(retailPriceListTypeUserInvoice(userInvoiceUserInvoiceDetail(detail)));

retailVATUserInvoiceDetail (detail) <- VATUserInvoiceDetail(detail) WHEN CHANGED(VATUserInvoiceDetail(detail));

// расчет надбавок и цены при изменении priceListType

@deriveDocumentDetailPriceOnSessionPriceListType (userInvoiceDetail, retail, , customerStock);

overCopyInvoice(s, d) += ACTION (s, d) {
    SET createPricingUserInvoice(d) <- createPricingUserInvoice(s);
    SET pricingCommitteeUserInvoice(d) <- pricingCommitteeUserInvoice(s);
    SET retailPriceListTypeUserInvoice(d) <- retailPriceListTypeUserInvoice(s);
}
