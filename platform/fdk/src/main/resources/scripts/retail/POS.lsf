MODULE POS;

REQUIRE System,
        Utils,
        Document,
        Retail,
        Currency,
        Store,
        Stock,
        StockTax,
        CashRegister,
        CashOperation,
        SaleLedger,
        RetailCRM,
        PriceRound,
        PriceList,
        StockDocument; // todo : эту зависимость надо будет убить, но сейчас не получается из-за того что нельзя донаследовать классы

// ------------------------------------- Объявление Z-отчета ---------------------------------------- //

CLASS zReport 'Z-отчет (открытый)' : incomeCashOrder, historizable, numberedObject;
CLASS zReportPosted 'Z-отчет (проведенный)' : zReport, postedObject;

TABLE zReport (zReport);

@defineDocumentHeaderPosted(zReport);
@defineDocumentHeaderTime(zReport);
@defineDocumentHeaderDepartmentStore(zReport);

castBasisZReport =
    FORMULA STRING[100] '\'Z-отчет №\' || CAST($1 AS TEXT) || \' с кассы \' || CAST($2 AS TEXT) || \' от \' || CAST($3 AS TEXT)';

numberZReport 'Номер Z-отчета' (zReport) = DATA STRING[21](zReport) IN documentPrmGroup;
cashRegisterZReport (zReport) = DATA cashRegister(zReport);
numberCashRegisterZReport 'Касса Z-отчета' (zReport) = numberCashRegister(cashRegisterZReport(zReport)) IN documentPrmGroup;
numberNumberCashRegisterToZReport (numberZReport, numberCashRegister) = GROUP UNIQUE zReport BY numberZReport (zReport), numberCashRegisterZReport (zReport) WHERE zReport IS zReport;
numberNumberCashRegisterToZReportPosted (numberZReport, numberCashRegister) = GROUP UNIQUE zReportPosted BY numberZReport (zReportPosted), numberCashRegisterZReport (zReportPosted) WHERE zReportPosted IS zReportPosted;
maxNumberZReport(cashRegister) = GROUP MAX numberZReport(zReport)  BY cashRegisterZReport (zReport);
basisZReport 'Основание' (zReport) = castBasisZReport(numberZReport(zReport), numberCashRegisterZReport(zReport), dateZReport(zReport)) IN documentPrmGroup;

dateCashDocument(zReport) += dateZReport(zReport);
timeCashDocument(zReport) += timeZReport(zReport);
numberCashDocument(zReport) += numberZReport(zReport);
departmentStoreCashDocument(zReport) += departmentStoreZReport(zReport);
basisCashDocument(zReport) += basisZReport(zReport);
cashRegisterCashDocument(zReport) += cashRegisterZReport(zReport);
isPostedCashDocument(zReport) += isPostedZReport(zReport);

departmentStoreZReport(zReport) <- departmentStoreCashRegister(cashRegisterZReport(zReport))
    WHEN CHANGED(cashRegisterZReport(zReport));

descriptionZReport (zReport) =
    [FORMULA STRING[200] '\'Продажа по кассе \' || CAST($1 AS TEXT) || \' отдела \' || CAST($2 AS TEXT) ||  \' от \' || CAST($3 AS TEXT)'](
    numberCashRegisterZReport(zReport), nameDepartmentStoreZReport(zReport), dateZReport(zReport));

exportReceiptsZReport 'Экспортировать чеки' = ACTION CUSTOM 'fdk.retail.ExportReceiptsActionProperty';
importReceiptsZReport 'Импортировать чеки' = ACTION CUSTOM 'fdk.retail.ImportReceiptsActionProperty';
//----------------------------------------------- Чеки ---------------------------------------------------//

CLASS receipt 'Чек' : historizable;

CLASS ABSTRACT receiptDetail 'Строка чека';
CLASS receiptSaleDetail 'Строка продажи' : receiptDetail;
CLASS receiptReturnDetail 'Строка возврата' : receiptDetail;

TABLE receipt (receipt);
TABLE receiptDetail (receiptDetail);
TABLE receiptSaleDetail (receiptSaleDetail);
TABLE receiptReturnDetail (receiptReturnDetail);

@defineDocumentRelation(zReport, receipt);
cashRegisterReceipt (receipt) = cashRegisterZReport(zReportReceipt(receipt));
numberCashRegisterReceipt 'Номер кассы' (receipt) = numberCashRegister(cashRegisterReceipt(receipt)) IN recognize;

groupCashRegisterReceipt (receipt) = groupCashRegisterCashRegister(cashRegisterReceipt(receipt));

cashRegisterModelReceipt (receipt) = cashRegisterModelCashRegister(cashRegisterReceipt(receipt));
sidCashRegisterModelReceipt 'Код модели' (receipt) = sidModel(cashRegisterModelReceipt(receipt));

numberZReportReceipt 'Номер Z-отчета' (receipt) = numberZReport(zReportReceipt(receipt)) IN recognize;

userReceipt = DATA customUser(receipt);
nameUserReceipt 'Кассир' (receipt) = commonName(userReceipt(receipt));
userReceipt(receipt) <- currentUser() WHEN ASSIGNED(receipt IS receipt);

@defineDocumentHeaderTime(receipt);

@defineDocumentDetailDepartmentStoreCustom(zReport, receipt);
@defineDocumentDetailPosted(zReport, receipt);

@defineDocumentRelation(receipt, receiptSaleDetail);
@defineDocumentRelation(receipt, receiptReturnDetail);

@defineDocumentHeaderCurrency (receipt);
@deriveDocumentCurrency (receipt, departmentStore);

@defineDocumentDetailCurrency (receipt, receiptSaleDetail);
@defineDocumentDetailCurrency (receipt, receiptReturnDetail);

receiptReceiptDetail (receiptDetail) = UNION CLASS receiptReceiptReturnDetail(receiptDetail), receiptReceiptSaleDetail(receiptDetail) PERSISTENT;

zReportReceiptDetail (receiptDetail) = zReportReceipt(receiptReceiptDetail(receiptDetail));
sidCashRegisterModelReceiptDetail 'Код модели' (receiptDetail) = sidCashRegisterModelReceipt(receiptReceiptDetail(receiptDetail));

typeReceiptDetail 'Тип' (receiptDetail) = UNION CLASS 'Продажа' AND receiptDetail IS receiptSaleDetail, 'Возврат' AND receiptDetail IS receiptReturnDetail FIXEDCHARWIDTH 8;

@defineDocumentDetailIndex(receipt, receiptDetail);

@defineDocumentDetailTime(receipt, receiptSaleDetail);
@defineDocumentDetailTime(receipt, receiptReturnDetail);
dateReceiptDetail 'Дата' (receiptDetail) = UNION CLASS dateReceiptReturnDetail(receiptDetail), dateReceiptSaleDetail(receiptDetail) PERSISTENT;
dateTimeReceiptDetail 'Дата/время' (receiptDetail) = UNION CLASS dateTimeReceiptReturnDetail(receiptDetail), dateTimeReceiptSaleDetail(receiptDetail) PERSISTENT;

@defineDocumentDetailPosted(receipt, receiptSaleDetail);
@defineDocumentDetailPosted(receipt, receiptReturnDetail);
isPostedReceiptDetail 'Проведен' (receiptDetail) = UNION CLASS isPostedReceiptReturnDetail(receiptDetail), isPostedReceiptSaleDetail(receiptDetail) PERSISTENT;

@defineDocumentDetailDepartmentStoreCustom(receipt, receiptSaleDetail);
@defineDocumentDetailDepartmentStoreCustom(receipt, receiptReturnDetail);
departmentStoreReceiptDetail (receiptDetail) = UNION CLASS departmentStoreReceiptReturnDetail(receiptDetail), departmentStoreReceiptSaleDetail(receiptDetail) PERSISTENT;

@defineDocumentDetailSku(receiptSale, sku);
@defineDocumentDetailSku(receiptReturn, sku);
skuReceiptDetail (receiptDetail) = skuReceiptReturnDetail(receiptDetail) OR skuReceiptSaleDetail(receiptDetail);
nameSkuReceiptDetail 'Товар' (receiptDetail) = nameSkuStock(skuReceiptDetail(receiptDetail), departmentStoreReceiptDetail(receiptDetail)) IN recognize;

numberReceipt 'Номер чека' (receipt) = DATA INTEGER (receipt) IN documentHeaderGroup;
numberReceiptReceiptDetail 'Номер чека' (receiptDetail) = numberReceipt(receiptReceiptDetail(receiptDetail));

maxNumberReceiptZReport 'Максимальный номер чека' (zReport) = GROUP MAX numberReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT;

zReportReceiptToReceipt (zReport, receipt, cashRegister) = GROUP UNIQUE receipt BY numberZReport(zReportReceipt(receipt)), numberReceipt(receipt), numberCashRegister(cashRegisterZReport(zReportReceipt(receipt))) WHERE receipt IS receipt;

GROUP receiptDiscountGroup 'Дисконтная карта' : public;

discountCardReceipt (receipt) = DATA discountCard (receipt);

CONSTRAINT dateToDiscountCard(discountCardReceipt(receipt)) < dateReceipt(receipt) CHECKED BY discountCardReceipt MESSAGE 'Закончился срок действия карты';

numberDiscountCardReceipt 'Номер дисконтной карты' (receipt) = seriesNumberObject(discountCardReceipt(receipt)) IN receiptDiscountGroup;
nameClientDiscountCardReceipt 'Держатель дисконтной карты' (receipt) = nameClientDiscountCard(discountCardReceipt(receipt)) IN receiptDiscountGroup;
numberDiscountCardReceiptDetail 'Номер дисконтной карты' (receiptDetail) = numberDiscountCardReceipt(receiptReceiptDetail(receiptDetail));
nameClientDiscountCardReceiptDetail 'Держатель дисконтной карты' (receiptDetail) = nameClientDiscountCardReceipt(receiptReceiptDetail(receiptDetail));

idBarcodeReceiptDetail 'Штрих-код' (receiptDetail) = DATA STRING[14] (receiptDetail) FIXEDCHARWIDTH 14 INDEXED;

exportReceipt 'Экспортировать' (receipt) = DATA SESSION BOOLEAN (receipt);

// Возвраты

receiptSaleDetailReceiptReturnDetail = DATA receiptSaleDetail (receiptReturnDetail);
receiptSaleReceiptReturnDetail (returnDetail) = receiptReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(returnDetail));

descriptionSaleReceiptReturnDetail 'Чек продажи' (returnDetail) =
    [FORMULA STRING[200] '\'Чек № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) ||  \' позиция \' || CAST($3 AS TEXT)'](
    numberReceipt(receiptSaleReceiptReturnDetail(returnDetail)), dateTimeReceipt(receiptSaleReceiptReturnDetail(returnDetail)), indexReceiptDetail(receiptSaleDetailReceiptReturnDetail(returnDetail)));

// Количества и суммы

quantityReceiptSaleDetail 'Количество' (receiptDetail) = DATA NUMERIC[14,3] (receiptSaleDetail);
priceReceiptSaleDetail 'Цена' (receiptDetail) = DATA NUMERIC[14,2] (receiptSaleDetail);
sumReceiptSaleDetail 'Сумма' (receiptDetail) = DATA NUMERIC[16,2] (receiptSaleDetail);
discountPercentReceiptSaleDetail 'Процент скидки' (receiptDetail) = DATA NUMERIC[6,2] (receiptSaleDetail);
discountSumReceiptSaleDetail 'Сумма скидки' (receiptDetail) = DATA NUMERIC[16,2] (receiptSaleDetail);

priceSumReceiptSaleDetail 'Сумма без скидки' = round(quantityReceiptSaleDetail(detail) * priceReceiptSaleDetail(detail), priceRoundCurrency(currencyReceiptSaleDetail (detail)));

discountSumReceiptSaleDetail (detail) <- round(priceSumReceiptSaleDetail(detail) * discountPercentReceiptSaleDetail (detail) / 100,
                                               priceRoundCurrency(currencyReceiptSaleDetail (detail)))
    WHEN CHANGED (quantityReceiptSaleDetail(detail)) OR
         CHANGED (priceReceiptSaleDetail(detail)) OR
         CHANGED (discountPercentReceiptSaleDetail(detail)) OR
         CHANGED (currencyReceiptSaleDetail (detail));

calcSumReceiptSaleDetail (detail) = priceSumReceiptSaleDetail(detail) (-) discountSumReceiptSaleDetail(detail);
sumReceiptSaleDetail (detail) <- round(calcSumReceiptSaleDetail(detail), priceRoundCurrency(currencyReceiptSaleDetail (detail)))
    WHEN CHANGED (quantityReceiptSaleDetail(detail)) OR
         CHANGED (priceReceiptSaleDetail(detail)) OR
         CHANGED (discountPercentReceiptSaleDetail(detail)) OR
         CHANGED (currencyReceiptSaleDetail(detail));

quantityReceiptReturnDetail 'Количество' (receiptDetail) = DATA NUMERIC[14,3] (receiptReturnDetail);
priceReceiptReturnDetail 'Цена' (receiptDetail) = DATA NUMERIC[14,2] (receiptReturnDetail);
sumReceiptReturnDetail 'Сумма' (receiptDetail) = DATA NUMERIC[16,2] (receiptReturnDetail);
discountSumReceiptReturnDetail 'Сумма скидки' (receiptDetail) = DATA NUMERIC[16,2] (receiptReturnDetail);

quantityReturnedReceiptSaleDetail 'Возвращено' (saleDetail) = GROUP SUM quantityReceiptReturnDetail(returnDetail) BY receiptSaleDetailReceiptReturnDetail(returnDetail) PERSISTENT;
CONSTRAINT quantityReturnedReceiptSaleDetail(detail) > quantityReceiptSaleDetail (detail) MESSAGE 'Количество возвратов по строке чека превышает проданное количество';

sumReceiptReturnDetail (detail) <- round(quantityReceiptReturnDetail(detail) * sumReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(detail)) / quantityReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(detail)),
                                         priceRoundCurrency(currencyReceiptReturnDetail (detail)))
                                   WHEN CHANGED(quantityReceiptReturnDetail(detail)) OR
                                        CHANGED(receiptSaleDetailReceiptReturnDetail(detail)) OR
                                        CHANGED(currencyReceiptReturnDetail(detail));

discountSumReceiptReturnDetail (detail) <- round(quantityReceiptReturnDetail(detail) * discountSumReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(detail)) / quantityReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(detail)),
                                                 priceRoundCurrency(currencyReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(detail))))
                                           WHEN CHANGED(quantityReceiptReturnDetail(detail)) OR
                                                CHANGED(receiptSaleDetailReceiptReturnDetail(detail)) OR
                                                CHANGED(currencyReceiptReturnDetail(detail));

quantityReceiptDetail 'Количество' (receiptDetail) = UNION CLASS quantityReceiptReturnDetail(receiptDetail), quantityReceiptSaleDetail(receiptDetail) PERSISTENT;
priceReceiptDetail 'Цена' (receiptDetail) = UNION CLASS priceReceiptReturnDetail(receiptDetail), priceReceiptSaleDetail(receiptDetail) PERSISTENT;
sumReceiptDetail 'Сумма' (receiptDetail) = UNION CLASS sumReceiptReturnDetail(receiptDetail), sumReceiptSaleDetail(receiptDetail) PERSISTENT;
discountSumReceiptDetail 'Сумма скидки' (receiptDetail) = UNION CLASS discountSumReceiptReturnDetail(receiptDetail), discountSumReceiptSaleDetail(receiptDetail) PERSISTENT;

sumReceiptSaleDetailReceipt 'Сумма продажи' (receipt) = GROUP SUM sumReceiptSaleDetail(receiptDetail)
    BY receiptReceiptSaleDetail (receiptDetail) IN documentSumGroup PERSISTENT;

sumReceiptReturnDetailReceipt 'Сумма возврата' (receipt) = GROUP SUM sumReceiptReturnDetail(receiptDetail)
    BY receiptReceiptReturnDetail (receiptDetail) IN documentSumGroup PERSISTENT;

sumReceiptDetailReceipt 'Сумма чека' (receipt) = sumReceiptSaleDetailReceipt(receipt) (-) sumReceiptReturnDetailReceipt(receipt) PERSISTENT;
sumReceiptDetailReceiptDetail 'Сумма чека' (receiptDetail) = sumReceiptDetailReceipt(receiptReceiptDetail(receiptDetail));

discountSumSaleReceiptDetailSaleReceipt 'Сумма скидки (продажи)' (receipt) = GROUP SUM discountSumReceiptSaleDetail(receiptDetail)
    BY receiptReceiptSaleDetail (receiptDetail) IN documentSumGroup;
discountSumSaleReceipt 'Сумма скидки (продажи) по чеку' (receipt) = DATA NUMERIC[16,2] (receipt);

discountSumReturnReceiptDetailReturnReceipt 'Сумма скидки (возврат)' (receipt) = GROUP SUM discountSumReceiptReturnDetail(receiptDetail)
    BY receiptReceiptReturnDetail (receiptDetail) IN documentSumGroup;
discountSumReturnReceipt 'Сумма скидки (возврат) по чеку' (receipt) = DATA NUMERIC[16,2] (receipt);

discountSumReceiptDetailReceipt 'Сумма скидки' (receipt) = discountSumSaleReceiptDetailSaleReceipt(receipt) (-) discountSumReturnReceiptDetailReturnReceipt(receipt);
discountSumReceipt 'Сумма скидки по чеку' (receipt) = discountSumSaleReceipt(receipt) (-) discountSumReturnReceipt(receipt);

@defineDocumentHeaderCount(receipt);

@defineDocumentHeaderQuantity(receipt);
@defineDocumentHeaderSkuQuantity(receipt, sku);
@defineDocumentHeaderSkuQuantityCustom(receipt, receiptSaleDetail, sku);

// -------------------------------------------------- НДС ------------------------------------------------ //

overVATRetailSkuDepartmentStoreDateTime = ABSTRACT range (sku, departmentStore, DATETIME);
VATRetailSkuDepartmentStoreDateTime (sku, departmentStore, dateTime) = VATSkuCountryDate(sku, countryStock(departmentStore AS departmentStore), toDate(dateTime)) OR
                                                                       overVATRetailSkuDepartmentStoreDateTime(sku, departmentStore, dateTime);

VATReceiptSaleDetail = DATA range (receiptSaleDetail);
CONSTRAINT taxRange(VATReceiptSaleDetail(detail)) != tax.taxVAT OR
           countryRange(VATReceiptSaleDetail(detail)) != countryStock(departmentStoreReceiptSaleDetail(detail))
           CHECKED BY VATReceiptSaleDetail
           MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС и стране магазина';

VATSumSaleZReport 'Сумма НДС по продажам' (zReport) = DATA NUMERIC[16,2] (zReport);

VATReceiptReturnDetail = DATA range (receiptReturnDetail);
CONSTRAINT taxRange(VATReceiptReturnDetail(detail)) != tax.taxVAT OR
           countryRange(VATReceiptReturnDetail(detail)) != countryStock(departmentStoreReceiptReturnDetail(detail))
           CHECKED BY VATReceiptReturnDetail
           MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС и стране магазина';

VATSumReturnZReport 'Сумма НДС по возвратам' (zReport) = DATA NUMERIC[16,2] (zReport);

VATReceiptDetail (receiptDetail) = UNION CLASS VATReceiptReturnDetail(receiptDetail), VATReceiptSaleDetail(receiptDetail) PERSISTENT;
numberVATReceiptDetail 'НДС, номер' (receiptDetail) = numberRange(VATReceiptDetail(receiptDetail));
valueVATReceiptDetail 'НДС, %' (receiptDetail) = valueRateRangeDate(VATReceiptDetail(receiptDetail), dateReceiptDetail(receiptDetail));

// используется только для приема реализации из внешних касс
numberReceiptDetail 'Номер позиции чека' = DATA INTEGER (receiptDetail);
zReportReceiptReceiptDetailToReceiptDetail (zReport, receipt, receiptDetail, cashRegister) = GROUP UNIQUE receiptDetail BY numberZReport(zReportReceiptDetail(receiptDetail)), numberReceipt(receiptReceiptDetail(receiptDetail)), numberReceiptDetail(receiptDetail), numberCashRegister(cashRegisterZReport(zReportReceiptDetail(receiptDetail))) WHERE receiptDetail IS receiptDetail;
//

descriptionReceipt 'Название документа' (receipt) = [FORMULA STRING[200] '\'Чек № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) '](
                                               numberReceipt(receipt), dateTimeReceipt(receipt));

descriptionReceiptSaleDetail (receiptDetail) = [FORMULA STRING[200] '\'Продажа № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) '] (
                                          numberReceipt(receiptReceiptSaleDetail(receiptDetail)), dateTimeReceipt(receiptReceiptSaleDetail(receiptDetail)));

descriptionReceiptReturnDetail (receiptDetail) = [FORMULA STRING[200] '\'Возврат № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) '] (
                                            numberReceipt(receiptReceiptReturnDetail(receiptDetail)), dateTimeReceipt(receiptReceiptReturnDetail(receiptDetail)));

descriptionReceiptDetail (receiptDetail) = descriptionReceiptReturnDetail(receiptDetail) OR descriptionReceiptSaleDetail(receiptDetail);

@defineAddDetailDialogSkuStockCustom(receipt, receiptSaleDetail, ' (продажа)', sku, departmentStore, dialogSku);
@defineAddDetailDialogSkuStockCustom(receipt, receiptReturnDetail, ' (возврат)', sku, departmentStore, dialogSku);

// -------------------------------------------- Проведение по регистрам --------------------------------------- //

@implementSkuLedgerOutFIFO(receiptSaleDetail, sku, departmentStore);
quantityOutFIFOSkuLedger (ledger) += quantityReceiptSaleDetail(ledger);
@implementSkuLedgerOutFIFOBalance(receiptSaleDetail, departmentStore);
sumOutSkuLedger (ledger) += sumReceiptSaleDetail(ledger);

@implementSkuLedgerInLIFO(receiptReturnDetail, sku, departmentStore);
quantityInLIFOSkuLedger (ledger) += quantityReceiptReturnDetail(ledger);
@implementSkuLedgerInLIFOBalance(receiptReturnDetail, departmentStore);
sumInSkuLedger (ledger) += sumReceiptReturnDetail(ledger);

@implementSaleLedger(receiptSale, sku, departmentStore);
quantitySaleLedger (ledger) += quantityReceiptSaleDetail(ledger);
VATSaleLedger (ledger) += VATReceiptSaleDetail(ledger);
sumSaleLedger (ledger) += sumReceiptSaleDetail(ledger);

// ----------------- Оплаты по чеку ------------------------------

CLASS payment 'Оплата по чеку';
TABLE payment (payment);

CLASS STATIC paymentMeans 'Форма оплаты'{
    paymentMeansCash 'Наличные',
    paymentMeansCard 'Карточка'
};
CLASS paymentType 'Тип платежа' : named;
TABLE paymentType (paymentType);

paymentMeansPaymentType (paymentType) = DATA paymentMeans (paymentType);
namePaymentMeansPaymentType 'Форма оплаты' (paymentType) = name(paymentMeansPaymentType(paymentType)) IN base;

sidPaymentType 'Идентификатор' = DATA STRING[10] (paymentType) IN base;
sidToTypePayment (tp) = GROUP UNIQUE paymentType BY sidPaymentType(paymentType) WHERE paymentType IS paymentType;

receiptPayment (payment) = DATA receipt (payment) NOT NULL DELETE;

countPaymentReceipt 'Кол-во типов платежей' (receipt) = GROUP SUM 1 IF receiptPayment(payment) == receipt BY receipt;

paymentTypePayment (payment) = DATA paymentType(payment);
namePaymentTypePayment 'Тип платежа' (payment) = name(paymentTypePayment(payment));
sidPaymentTypePayment 'ID Типа платежа' (payment) = sidPaymentType(paymentTypePayment(payment));

minCashPaymentType () = GROUP MIN paymentType IF paymentMeansPaymentType(paymentType) == paymentMeans.paymentMeansCash;
minCardPaymentType () = GROUP MIN paymentType IF paymentMeansPaymentType(paymentType) == paymentMeans.paymentMeansCard;

paymentMeansPayment (payment) = paymentMeansPaymentType(paymentTypePayment(payment));
namePaymentMeansPayment 'Форма оплаты' (payment) = name(paymentMeansPayment(payment));

numberPayment 'Номер платежа' (payment) = DATA INTEGER (payment);
zReportReceiptPaymentToPayment (zReport, receipt, number, cashRegister) = GROUP UNIQUE payment BY numberZReport(zReportReceipt(receiptPayment(payment))), numberReceipt(receiptPayment(payment)), numberPayment(payment), numberCashRegister(cashRegisterZReport(zReportReceipt(receiptPayment(payment)))) WHERE payment IS payment;

sumPayment 'Сумма платежа' (payment) = DATA NUMERIC[16,2] (payment);

sumPaymentReceipt (receipt) = GROUP SUM sumPayment(payment) BY receiptPayment(payment);

sumInCashPaymentReceipt (receipt) = GROUP SUM sumPayment(payment) AND paymentMeansPayment(payment) == paymentMeans.paymentMeansCash  BY receiptPayment(payment);

changePaymentReceipt 'Сдача' (receipt) = sumPaymentReceipt(receipt) - sumReceiptDetailReceipt(receipt);

sumCashPaymentReceipt (receipt) = sumInCashPaymentReceipt(receipt) - changePaymentReceipt(receipt);
sumNotCashPaymentReceipt (receipt) = GROUP SUM sumPayment(payment) AND NOT paymentMeansPayment(payment) == paymentMeans.paymentMeansCash BY receiptPayment(payment);

CONSTRAINT receipt IS receipt AND NOT sumPaymentReceipt(receipt) MESSAGE 'По чеку не указаны платежи';
CONSTRAINT sumReceiptDetailReceipt(receipt) > sumPaymentReceipt(receipt) MESSAGE 'Сумма платежей по чеку меньше суммы чека';
CONSTRAINT sumReceiptDetailReceipt(receipt) < sumNotCashPaymentReceipt(receipt) MESSAGE 'Сумма платежей по безналичному расчету больше суммы чека';

// Итоги по Z-отчету

@defineDocumentHeaderQuantityCustom(zReport, receiptDetail);

sumCashZReport 'Сумма наличных Z-отчета' (zReport) = GROUP SUM sumCashPaymentReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT IN documentSumGroup;
sumCashIncomeCashOrder(zReport) += sumCashZReport(zReport);
sumReceiptDetailZReport 'Сумма Z-отчета' (zReport) = GROUP SUM sumReceiptDetailReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT IN documentSumGroup;
discountSumReceiptDetailZReport 'Сумма скидок Z-отчета' (zReport) = GROUP SUM discountSumReceiptDetailReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT IN documentSumGroup;
discountSumReceiptZReport 'Сумма скидок по чекам Z-отчета' (zReport) = GROUP SUM discountSumReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT IN documentSumGroup;
discountSumZReport 'Сумма скидок Z-отчета' (zReport) = discountSumReceiptDetailZReport(zReport) (+) discountSumReceiptZReport(zReport);

sumCardDepartmentStoreDateFromTo 'Продано с использованием банк. карточек' (departmentStore, dateFrom, dateTo) = GROUP SUM sumPayment(payment) AND paymentMeansPayment(payment)==paymentMeans.paymentMeansCard
    AND dateReceipt(receiptPayment(payment)) >= (dateFrom AS DATE) AND dateReceipt(receiptPayment(payment)) <= (dateTo AS DATE) AND isPostedReceipt(receiptPayment(payment))
        BY departmentStoreReceipt(receiptPayment(payment)), dateFrom, dateTo;

sumSaleDepartmentStoreDateFromTo 'Продано по кассе' (departmentStore, dateFrom, dateTo) = GROUP SUM sumReceiptDetailReceipt(receipt)
    AND dateReceipt(receipt) >= (dateFrom AS DATE) AND dateReceipt(receipt) <= (dateTo AS DATE) AND isPostedReceipt(receipt)
        BY departmentStoreReceipt(receipt), dateFrom, dateTo;

// ----------------------------------- Проведение по товарному отчету -------------------------- //

@implementStockDocumentLedgerOut(zReport, departmentStore);
sumOutStockDocumentLedger (ledger) += sumReceiptDetailZReport(ledger);
sumItemOutStockDocumentLedger (ledger) += sumReceiptDetailZReport(ledger);
sumContainerOutStockDocumentLedger (ledger) += 0.0 IF ledger IS zReport;

//----------------------------------- Формы -------------------------------------------------//

FORM zReport 'Z-отчет'
    OBJECTS z=zReport FIXED PANEL
    PROPERTIES (z) numberCashRegisterZReport, nameDepartmentStoreZReport READONLY, dateZReport, timeZReport, numberZReport,
                   basisZReport, countReceiptZReport, quantityReceiptDetailZReport, sumCashZReport, sumReceiptDetailZReport,
                   discountSumReceiptDetailZReport, VATSumSaleZReport, VATSumReturnZReport

    OBJECTS b=receipt, d=receiptDetail
    PROPERTIES(b) numberReceipt, dateReceipt, timeReceipt, nameUserReceipt,
                  numberDiscountCardReceipt, nameClientDiscountCardReceipt, sumReceiptDetailReceipt, discountSumReceiptDetailReceipt,
                  discountSumReceipt, countReceiptDetailReceipt, quantityReceiptDetailReceipt, exportReceipt, ADDOBJ, delete
    FILTERS zReportReceipt(b)==z

    PROPERTIES(b) TODRAW d addDetailDialogSkuStockReceiptSaleDetailReceipt, addDetailDialogSkuStockReceiptReturnDetailReceipt
                           // todo : добавить операции возврата по штрих-коду

    PROPERTIES(d) typeReceiptDetail, idBarcodeReceiptDetail, nameSkuReceiptDetail, quantityReceiptDetail, quantityReturnedReceiptSaleDetail FORCE GRID, priceReceiptDetail,
                  sumReceiptDetail, discountPercentReceiptSaleDetail FORCE GRID, discountSumReceiptDetail, descriptionSaleReceiptReturnDetail, numberVATReceiptDetail, ADDOBJ, delete

    FILTERS receiptReceiptDetail(d)==b

    OBJECTS p=payment
    PROPERTIES(p) namePaymentTypePayment, namePaymentMeansPayment, sumPayment, ADDOBJ, delete

    FILTERS receiptPayment(p)==b

    EDIT zReport OBJECT z
;

DESIGN zReport FROM DEFAULT{

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        NEW firstCase {

            type = SPLITV;

            ADD z.box;
            ADD b.box;
        }

        NEW secondCase{

            type = SPLITH;
            childConstraints = TO THE RIGHT;

            ADD d.box{
                title = 'Строка чека';
                fillHorizontal = 3;
            }
            ADD p.box;
        }
    }

    ADD functions.box;
}

FORM zReports 'Z-отчеты'
    OBJECTS z=zReport
    PROPERTIES (z) READONLY objectClassName, numberCashRegisterZReport, nameDepartmentStoreZReport, dateZReport, timeZReport,
                            numberZReport, basisZReport, countReceiptZReport, quantityReceiptDetailZReport, sumCashZReport,
                            sumReceiptDetailZReport, discountSumReceiptDetailZReport, VATSumSaleZReport, VATSumReturnZReport
    PROPERTIES (z) ADDFORM, EDITFORM SHOWIF isDraftZReport(z), delete FORCE PANEL DRAWTOTOOLBAR SHOWIF isDraftZReport(z),
                            exportReceiptsZReport FORCE PANEL DRAWTOTOOLBAR, importReceiptsZReport FORCE PANEL DRAWTOTOOLBAR,
                            postZReport SHOWIF isDraftZReport(z), unpostZReport SHOWIF isPostedZReport(z)

    OBJECTS b=receipt
    PROPERTIES(b) READONLY  numberReceipt, dateReceipt, timeReceipt, nameUserReceipt,
                            numberDiscountCardReceipt, nameClientDiscountCardReceipt, sumReceiptDetailReceipt, discountSumReceiptDetailReceipt,
                            discountSumReceipt, countReceiptDetailReceipt, quantityReceiptDetailReceipt
    PROPERTIES(b)           exportReceipt

    FILTERS zReportReceipt(b)==z
    ORDER BY                numberReceipt

    OBJECTS d=receiptDetail
    PROPERTIES(d) READONLY  typeReceiptDetail, idBarcodeReceiptDetail, nameSkuReceiptDetail, quantityReceiptDetail, quantityReturnedReceiptSaleDetail FORCE GRID, priceReceiptDetail,
                            costSumSkuLedger, sumReceiptDetail, discountPercentReceiptSaleDetail FORCE GRID, discountSumReceiptDetail, descriptionSaleReceiptReturnDetail

    FILTERS receiptReceiptDetail(d)==b

    OBJECTS p=payment
    PROPERTIES(p) READONLY  receiptPayment, namePaymentTypePayment, namePaymentMeansPayment, sumPayment

    FILTERS receiptPayment(p)==b
;
@extendFormFilterAccess(zReport, z, zReports, departmentStore);

DESIGN zReports FROM DEFAULT{

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        NEW firstCase {

            type = SPLITV;

            ADD z.box;
            ADD b.box;
        }

        NEW secondCase{

            type = SPLITH;
            childConstraints = TO THE RIGHT;

            ADD d.box{
                title = 'Строка чека';
                fillHorizontal = 3;
            }
            ADD p.box;
        }
    }

    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }
    PROPERTY (delete(z)) {
        askConfirm = TRUE;
    }

    ADD functions.box;
}

// ----------------------------- Расширяем форму отдела магазина нужными нам параметрами --------------------- //

usePriceListGroupCashRegister 'Использовать в POS вид цены напрямую' = DATA BOOLEAN (groupCashRegister);
EXTEND FORM groupCashRegister
    PROPERTIES(grc) usePriceListGroupCashRegister
;

// ----------------------------- Кассовый модуль ---------------- //

POSPriceListTypeReceipt (receipt) = priceListTypeGroupMachinery(groupCashRegisterReceipt(receipt));

POSPriceSkuReceiptDateTime 'Цена в кассе' (sku, receipt, dateTime) =
    IF usePriceListGroupCashRegister(groupCashRegisterReceipt(receipt)) THEN
        pricePriceListTypeSkuStockDateTime(POSPriceListTypeReceipt(receipt), sku, departmentStoreReceipt(receipt), dateTime)
    ELSE
        transactionPriceBarcodeGroupMachinery(barcodeSku(sku), groupCashRegisterReceipt(receipt)) AND dateTime IS DATETIME;
currentPOSPriceSkuReceipt 'Текущая цена' (sku, receipt) = POSPriceSkuReceiptDateTime(sku, receipt, currentDateTime());

zReportCashRegister = DATA zReport (cashRegister);

currentCashRegister () = cashRegisterComputer(currentComputer());

GROUP receiptZReportGroup 'Z-отчет' : public;

currentZReport() = zReportCashRegister(currentCashRegister());
numberCurrentZReport 'Номер текущего Z-отчета' () = numberZReport(currentZReport()) IN receiptZReportGroup;
sumCashCurrentZReport() = sumCashZReport(currentZReport());

closedCurrentZReport() = TRUE AND NOT currentZReport();

currentSumCashCurrentCashRegister 'Сумма наличных в кассе' () =
    curSumIncomeCashOperation(currentCashRegister()) (-) curSumOutcomeCashOperation(currentCashRegister()) (+) sumCashCurrentZReport();

//CONSTRAINT currentSumCashCurrentCashRegister() < 0 AND cashRegister == currentCashRegister() MESSAGE 'Сумма наличных денег в кассе не должна быть отрицательной';

// Операции с чеками

createCurrentReceipt 'Создать новый чек' = ACTION () {
    FOR ADDOBJ r = receipt DO {
        EXEC seek(r);
        SET zReportReceipt(r) <- currentZReport();
        SET numberReceipt(r) <- maxNumberReceiptZReport(currentZReport()) (+) 1;
    }
}

// Вывод на дисплей

fiscalDisplayTextReceiptDetail 'Вывести текст на дисплей'(receiptDetail) = ABSTRACT ACTION (receiptDetail);
WHEN CHANGED (quantityReceiptDetail(receiptDetail)) OR CHANGED(sumReceiptDetail(receiptDetail)) DO EXEC fiscalDisplayTextReceiptDetail(receiptDetail) SESSION;

// Проведение чека

GROUP receiptActionGroup 'Оплата' : public;

postPrintReceipt 'Напечатать фискальный чек' = ABSTRACT ACTION (receipt);
noFiscalPostPrintReceipt 'Создать чек (без фискального регистратора)' = ACTION (receipt) {
    IF receipt IS receipt THEN {
        EXEC apply();
        EXEC createCurrentReceipt();
    }
}
postPrintReceipt(receipt) += noFiscalPostPrintReceipt(receipt) IF NOT sidCashRegisterModelReceipt(receipt);

FORM postReceiptPayment 'Оплата по чеку'
    OBJECTS r = receipt FIXED PANEL
    PROPERTIES(r) READONLY sumReceiptDetailReceipt, changePaymentReceipt

    OBJECTS p = payment FIXED GRID
    PROPERTIES(p) sumPayment, namePaymentTypePayment, ADDOBJ, delete
    FILTERS receiptPayment(p) == r
;

DESIGN postReceiptPayment FROM DEFAULT {

    main {
        preferredSize = (800, 320);
        NEW payContainer {
            childConstraints = TO THE BOTTOM;
            ADD p.box {
                p.grid {
                    defaultComponent = TRUE;
                }
                PROPERTY(sumPayment) { font = 'Tahoma bold 36'; }
                PROPERTY(namePaymentTypePayment) { font = 'Tahoma bold 36'; }
                PROPERTY(delete) { font = 'Tahoma bold 36'; }
            }
            NEW southContainer {
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(sumReceiptDetailReceipt) { panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 72'; }
                ADD PROPERTY(changePaymentReceipt) { panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 72'; }
            }
            ADD functions.box;
        }
    }
}

postReceipt 'Смешанный платеж' = ACTION (receipt) {
    SET zReportReceipt(receipt) <- currentZReport();
    FOR receiptPayment(payment) == receipt DO {
           EXEC delete(payment);
    }
    IF sumReceiptDetailReceipt(receipt) THEN {
        ADDOBJ payment;
        FOR p == addedObject() DO {
            SET receiptPayment(p) <- receipt;
            SET paymentTypePayment(p) <- minCashPaymentType();
        }
        ADDOBJ payment;
        FOR p == addedObject() DO {
            SET receiptPayment(p) <- receipt;
            SET paymentTypePayment(p) <- minCardPaymentType();
        }
        FORM postReceiptPayment OBJECTS r = receipt MODAL CHECK;
        IF formResult() == formResult.ok THEN {
            EXEC postPrintReceipt(receipt);
        } ELSE {
            FOR receiptPayment(p) == receipt DO {
                EXEC delete(p);
            }
        }
    }
} EDITKEY 'F9' IN receiptActionGroup;

postCardReceipt 'Карточкой' = ACTION (receipt) {
    SET zReportReceipt(receipt) <- currentZReport();
    FOR receiptPayment(payment) == receipt DO {
            EXEC delete(payment);
    }
    IF sumReceiptDetailReceipt(receipt) THEN {
        ADDOBJ payment;
        FOR p == addedObject() DO {
            SET receiptPayment(p) <- receipt;
            SET paymentTypePayment(p) <- minCardPaymentType();
            SET sumPayment(p) <- sumReceiptDetailReceipt(receipt);
        }
        EXEC postPrintReceipt(receipt);
    }
} EDITKEY 'F10' CONFIRM IN receiptActionGroup;

postCashReceipt 'Наличными' = ACTION (receipt) {
    SET zReportReceipt(receipt) <- currentZReport();
    FOR receiptPayment(payment) == receipt DO {
        EXEC delete(payment);
    }
    IF sumReceiptDetailReceipt(receipt) THEN {
        ADDOBJ payment;
        FOR p == addedObject() DO {
            SET receiptPayment(p) <- receipt;
            SET paymentTypePayment(p) <- minCashPaymentType();
            SET sumPayment(p) <- sumReceiptDetailReceipt(receipt);
        }
        FORM postReceiptPayment OBJECTS r = receipt MODAL CHECK;
        IF formResult() == formResult.ok THEN {
            EXEC postPrintReceipt(receipt);
        } ELSE {
            FOR receiptPayment(p) == receipt DO {
                EXEC delete(p);
            }
        }
    }
} EDITKEY 'F11' IN receiptActionGroup;

cancelReceipt 'Отменить чек' = ACTION (receipt) {
    IF sumReceiptDetailReceipt(receipt) THEN {
        EXEC cancel();
        EXEC createCurrentReceipt();
    }
    EXEC fiscalCancelReceipt();
} EDITKEY 'shift F11' CONFIRM IN receiptActionGroup;

// Операции по добавлению строк в чек

// Продажи
createReceiptSaleDetail 'Добавить строку продажи' = ACTION (receipt, sku, barcode) {
    FOR ADDOBJ d = receiptSaleDetail DO {
        EXEC seek(d);
        SET receiptReceiptSaleDetail(d) <- receipt;
        SET idBarcodeReceiptDetail(d) <- barcode;
        SET skuReceiptSaleDetail(d) <- sku;
        SET quantityReceiptSaleDetail(d) <- 1.0;
        SET priceReceiptSaleDetail(d) <- currentPOSPriceSkuReceipt(sku, receipt);
        SET VATReceiptSaleDetail(d) <- VATRetailSkuDepartmentStoreDateTime(sku, departmentStoreReceipt(receipt), currentDateTime());
    }
}

GROUP receiptSaleActionGroup 'Продажа' : public;

// По штрих-коду
changeBarcodeSaleReceipt = ACTION (receipt) {
    REQUEST STRING[14] INPUT;
    LOCAL dialogBarcodeSku = sku();
    SET dialogBarcodeSku() <- skuBarcodeIdDate(requestedString(), currentDate());

    IF dialogBarcodeSku() IS sku THEN {
        EXEC createReceiptSaleDetail(receipt, dialogBarcodeSku(), requestedString());
    } ELSE
        MESSAGE 'Не найден штрих-код';
};

// Поиск подбором
FORM searchSkuSaleReceipt 'Поиск SKU'
    OBJECTS st = departmentStore FIXED PANEL
    OBJECTS r = receipt FIXED PANEL

    TREE skuTree sk = skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = nameSkuGroupStock(sk, st)
    ORDER BY skuTreeName

    OBJECTS           s=sku
    PROPERTIES        READONLY nameSkuStock(s, st), idBarcodeSku(s)
    FILTERS           isParentSkuGroupSku(sk, s)
    ORDER BY          nameSkuStock

    PROPERTIES(s, st) READONLY currentBalanceSkuStock HINTNOUPDATE

    PROPERTIES(s, r)  READONLY currentPOSPriceSkuReceipt

    FILTERGROUP filters
        FILTER 'Товары с остатком' 'F10' currentBalanceSkuStock(s, st) DEFAULT

    HINTTABLE LIST POSPriceListTypeReceipt, departmentStoreReceipt, groupCashRegisterReceipt
;

DESIGN searchSkuSaleReceipt FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        NEW topContainer BEFORE functions.box {
            type = SPLITH;
            ADD skuTree.tree.box { title = 'Группы'; }
            ADD s.box {
                fillHorizontal = 2;
                s.grid {
                    defaultComponent = TRUE;
                }
            }
        }
    }
}

searchSkuSaleReceipt 'Поиск' = ACTION (receipt) {
    SET zReportReceipt(receipt) <- currentZReport();
    FORM searchSkuSaleReceipt OBJECTS st = departmentStoreReceipt(receipt), r = receipt MODAL;
    IF formResult() == formResult.ok THEN {
        EXEC createReceiptSaleDetail(receipt, chosenObject('s'), idBarcodeSku(chosenObject('s')));
    }
} EDITKEY 'F3' IN receiptSaleActionGroup;

// Возвраты

createReceiptReturnDetail 'Добавить строку возврата' = ACTION (receipt, receiptSaleDetail, barcode) {
    FOR ADDOBJ d = receiptReturnDetail DO {
        EXEC seek(d);
        SET receiptReceiptReturnDetail(d) <- receipt;
        SET idBarcodeReceiptDetail(d) <- barcode;
        SET receiptSaleDetailReceiptReturnDetail(d) <- receiptSaleDetail;
        SET skuReceiptReturnDetail(d) <- skuReceiptSaleDetail(receiptSaleDetail);
        SET quantityReceiptReturnDetail(d) <- 1.0;
        SET priceReceiptReturnDetail(d) <- priceReceiptSaleDetail(receiptSaleDetail);
        SET VATReceiptReturnDetail(d) <- VATReceiptSaleDetail(receiptSaleDetail);
    }
}

GROUP receiptReturnActionGroup 'Возврат' : public;

// По штрих-коду
FORM scanBarcodeReturnReceipt 'Выбор строки возврата'
    OBJECTS d = departmentStore FIXED PANEL

    OBJECTS s = sku FIXED PANEL
    PROPERTIES idBarcodeSku(s) READONLY, nameSkuStock(s, d)

    OBJECTS r = receiptSaleDetail FIXED GRID
    PROPERTIES(r) READONLY numberReceiptReceiptDetail, dateTimeReceiptSaleDetail, numberDiscountCardReceiptDetail, nameClientDiscountCardReceiptDetail, sumReceiptDetailReceiptDetail,
                           indexReceiptDetail, quantityReceiptDetail, quantityReturnedReceiptSaleDetail, priceReceiptDetail,
                           sumReceiptDetail, discountPercentReceiptSaleDetail FORCE GRID, discountSumReceiptDetail
    FILTERS departmentStoreReceiptSaleDetail(r) == d,
            skuReceiptSaleDetail(r) == s
;

DESIGN scanBarcodeReturnReceipt FROM DEFAULT {
    PROPERTY(idBarcodeSku) {
        focusable = FALSE;
    }
    PROPERTY(nameSkuStock) {
        focusable = FALSE;
    }
}

scanBarcodeReturnReceipt 'Ввести штрих-код' = ACTION (receipt) {
    SET zReportReceipt(receipt) <- currentZReport();
    FORM barcodeInput MODAL;
    IF formResult() == formResult.ok THEN {
        LOCAL dialogBarcodeSku = sku();
        SET dialogBarcodeSku() <- skuBarcodeIdDate(barcodeInput(), currentDate());

        IF dialogBarcodeSku() IS sku THEN {
            FORM scanBarcodeReturnReceipt OBJECTS d = departmentStoreReceipt(receipt), s = dialogBarcodeSku() MODAL;
            IF formResult() == formResult.ok THEN {
                EXEC createReceiptReturnDetail(receipt, chosenObject('r'), barcodeInput());
            }
        } ELSE
            MESSAGE 'Не найден штрих-код';
    }
} EDITKEY 'F7' IN receiptReturnActionGroup;

// Поиск

FORM searchSkuReturnReceipt 'Поиск строки возврата'
    OBJECTS st = departmentStore FIXED PANEL

    OBJECTS s = receipt FIXED GRID
    PROPERTIES(s) READONLY  numberReceipt, dateReceipt, timeReceipt,
                            numberDiscountCardReceipt, nameClientDiscountCardReceipt, sumReceiptDetailReceipt, discountSumReceiptDetailReceipt,
                            countReceiptDetailReceipt, quantityReceiptDetailReceipt
    FILTERS departmentStoreReceipt(s) == st

    OBJECTS r = receiptSaleDetail FIXED GRID
    PROPERTIES(r) READONLY  idBarcodeReceiptDetail, nameSkuReceiptDetail, quantityReceiptDetail, quantityReturnedReceiptSaleDetail, priceReceiptDetail,
                            sumReceiptDetail, discountPercentReceiptSaleDetail, discountSumReceiptDetail
    FILTERS receiptReceiptSaleDetail(r) == s
;

searchSkuReturnReceipt 'Поиск' = ACTION (receipt) {
    SET zReportReceipt(receipt) <- currentZReport();
    FORM searchSkuReturnReceipt OBJECTS st = departmentStoreReceipt(receipt) MODAL;
    IF formResult() == formResult.ok THEN {
        EXEC createReceiptReturnDetail(receipt, chosenObject('r'), idBarcodeSku(skuReceiptSaleDetail(chosenObject('r'))));
    }
} EDITKEY 'F6' IN receiptReturnActionGroup;

// Дисконтные карты

FORM inputDiscountCardNumberReceipt 'Ввод номера дисконтной карты'
    OBJECTS (n = STRING[18], s = STRING[2]) FIXED PANEL
    PROPERTIES number = OBJVALUE(n), series = OBJVALUE(s)
;

DESIGN inputDiscountCardNumberReceipt FROM DEFAULT{
    NEW centerContainer BEFORE functions.box {
        childConstraints = TO THE RIGHT;
        ADD PROPERTY(number) { caption = 'Номер'; font = 'Tahoma bold 72'; }
        ADD PROPERTY(series) { minimumCharWidth = 3; caption = 'Серия'; font = 'Tahoma bold 72'; }
    }
}

inputDiscountCardNumberReceipt 'Ввести номер' = ACTION (receipt) {
    FORM inputDiscountCardNumberReceipt MODAL;
    IF formResult() == formResult.ok THEN {
        IF TRUE AND NOT chosenString('s') == '' THEN {
            IF discountCardSeriesNumber(ustring2(chosenString('s'),chosenString('n'))) THEN {
                IF dateToDiscountCard(discountCardSeriesNumber(ustring2(chosenString('s'),chosenString('n'))))<dateReceipt(receipt) THEN
                    MESSAGE 'Закончился срок действия карты'
                ELSE
                    SET discountCardReceipt(receipt) <- discountCardSeriesNumber(ustring2(chosenString('s'),chosenString('n')));
            }
            ELSE
                MESSAGE 'Дисконтная карта с такой серией и номером не найдена';
        }
        ELSE {
            IF discountCardNumber(chosenString('n')) THEN {
                IF dateToDiscountCard(discountCardNumber(chosenString('n')))<dateReceipt(receipt) THEN
                    MESSAGE 'Закончился срок действия карты'
                ELSE
                    SET discountCardReceipt(receipt) <- discountCardNumber(chosenString('n'));
            }
            ELSE
                MESSAGE 'Дисконтная карта с таким номером не найдена';
        }
    }
} IN receiptDiscountGroup EDITKEY 'F5';

clearDiscountCardReceipt 'Сбросить' = ACTION (receipt) {
    SET discountCardReceipt(receipt) <- NULL;
} IN receiptDiscountGroup EDITKEY 'shift F5';

// Операции с Z-отчетами

openCurrentZReport 'Открыть Z-отчет' = ACTION () {
    ADDOBJ zReportPosted;
    FOR z == addedObject() DO {
        SET numberZReport(z) <- toString255(z);
        SET cashRegisterZReport(z) <- currentCashRegister();
        SET departmentStoreZReport(z) <- departmentStoreCashRegister(currentCashRegister()); // todo : приходится ставить из-за того, что на ADDOBJ срабатывает resolveAdd
        SET zReportCashRegister(cashRegister) IF cashRegister == currentCashRegister() <- z AS zReport;
        EXEC apply();
    }
} CONFIRM IN receiptZReportGroup;

closeCurrentZReport 'Закрыть Z-отчет' = ACTION () {
    EXEC cancel();
    SET timeZReport(z) <- currentTime() WHERE z == currentZReport();
    SET dateZReport(z) <- currentDate() WHERE z == currentZReport();
    IF curSumCashCashOperation(cashRegisterZReport(currentZReport())) THEN {
        FOR ADDOBJ o = outcomeCashOperation DO {
            SET dateOutcomeCashOperation(o) <- dateZReport(currentZReport());
            SET timeOutcomeCashOperation(o) <- timeZReport(currentZReport());
            SET departmentStoreOutcomeCashOperation(o) <- departmentStoreZReport(currentZReport());
            SET basisOutcomeCashOperation(o) <- basisZReport(currentZReport());
            SET cashRegisterOutcomeCashOperation(o) <- cashRegisterZReport(currentZReport());
            SET sumCashOutcomeCashOperation(o) <- curSumCashCashOperation(cashRegisterZReport(currentZReport()));
        }
    }
    SET zReportCashRegister(cashRegister) IF cashRegister == currentCashRegister() <- NULL;
    EXEC apply();
} CONFIRM IN receiptZReportGroup;

// --------------------------------- Применение акций ----------------------------- //

// Накопленные суммы

posSumDiscountCard 'Сумма продаж' (discountCard) = GROUP SUM sumReceiptDetailReceipt (receipt) BY discountCardReceipt(receipt) PERSISTENT;
cumulativeSumDiscountCard 'Накопленная сумма' (discountCard) = initialSumDiscountCard(discountCard) (+) posSumDiscountCard(discountCard) PERSISTENT;

prevCumulativeSumReceipt (receipt) = (0 AND receipt IS receipt) OR [PREV(cumulativeSumDiscountCard(discountCard))](discountCardReceipt(receipt));
cumulativeSumReceiptPromotion (receipt, promotion) = IF useCurrentReceiptPromotion(promotion) THEN cumulativeSumDiscountCard(discountCardReceipt(receipt))
                                                                                              ELSE prevCumulativeSumReceipt (receipt);

EXTEND FORM discountCards
    PROPERTIES(d) posSumDiscountCard, cumulativeSumDiscountCard
;

// Расчет сумм скидок

TABLE receiptSaleDetailPromotionCondition(receiptSaleDetail, promotionCondition);
quantityReceiptSaleDetailPromotionCondition 'Кол-во по акции' = DATA NUMERIC[14,3] (receiptSaleDetail, promotionCondition) INDEXED;
promotionSumReceiptSaleDetailPromotionCondition 'Сумма скидки' = DATA NUMERIC[14,3] (receiptSaleDetail, promotionCondition);
setUserPromotionReceiptSaleDetailPromotionCondition 'Применить скидку' = DATA BOOLEAN (receiptSaleDetail, promotionCondition);

setUserPromotionReceipt (receipt) = GROUP SUM 1 IF setUserPromotionReceiptSaleDetailPromotionCondition (receiptSaleDetail, promotionCondition)  BY receiptReceiptSaleDetail (receiptSaleDetail);

promotionSumReceiptSaleDetail (detail) = GROUP SUM promotionSumReceiptSaleDetailPromotionCondition(detail, condition)
                                               BY detail;

inReceiptPromotion (receipt, promotion) = inPromotionStoreOver(promotion, storeReceipt(receipt)) AND
                                          dateReceipt(receipt) >= dateFromPromotion(promotion) AND dateReceipt(receipt) <= dateToPromotion(promotion) AND
                                          NOT timeReceipt(receipt) < timeOfFromPromotion(promotion) AND NOT timeReceipt(receipt) > timeOfToPromotion(promotion) AND
                                          NOT sumReceiptDetailReceipt(receipt) < minSumBillPromotion(promotion) AND NOT sumReceiptDetailReceipt(receipt) > maxSumBillPromotion(promotion)
                                          AND NOT skipPromotionDOW(promotion, DOWInDate(dateReceipt(receipt)))
                                          AND NOT cumulativeSumReceiptPromotion (receipt, promotion) < minCumulativeSumPromotion(promotion) AND NOT cumulativeSumReceiptPromotion (receipt, promotion) > maxCumulativeSumPromotion(promotion)
                                          AND NOT (hasDiscountCardPromotion(promotion) AND NOT inPromotionDiscountCard(promotion, discountCardReceipt(receipt)));

inReceiptSaleDetailPromotionCondition (receiptDetail, promotionCondition) =
    inReceiptPromotion(receiptReceiptDetail(receiptDetail), promotionPromotionCondition(promotionCondition))
    AND inPromotionConditionSku(promotionCondition, skuReceiptDetail(receiptDetail));

maxSalePriceReceiptSku (receipt, sku) = GROUP MAX priceReceiptSaleDetail(detail) BY receiptReceiptSaleDetail(detail), skuReceiptSaleDetail(detail);

isAppliedPromotionReceiptSaleDetailPromotionCondition 'Акция применяется' (receiptSaleDetail, promotionCondition) =
    IF userSetPromotionCondition(promotionCondition) THEN setUserPromotionReceiptSaleDetailPromotionCondition(receiptSaleDetail, promotionCondition)
      ELSE TRUE AND receiptSaleDetail IS receiptSaleDetail AND promotionCondition IS promotionCondition;

calculatePromotionsReceipt 'Рассчитать акции' = ACTION (receipt) {

    SET quantityReceiptSaleDetailPromotionCondition(detail, condition) <- NULL WHERE receiptReceiptSaleDetail(detail) == receipt;
    SET promotionSumReceiptSaleDetailPromotionCondition(detail, condition) <- NULL WHERE receiptReceiptSaleDetail(detail) == receipt;
    SET discountSumReceiptSaleDetail(detail) <- NULL WHERE receiptReceiptSaleDetail(detail) == receipt;

    LOCAL maxSalePriceSku = NUMERIC[14,2] (sku);
    SET maxSalePriceSku(sku) <- maxSalePriceReceiptSku(receipt, sku);

    FOR promotionGroup IS promotionGroup DO {
        LOCAL leftSku = NUMERIC[14,3] (sku);
        SET leftSku(sku) <- quantityReceiptSaleDetailSkuReceipt (sku, receipt);   //'Кол-во товара в документе'

        LOCAL leftQuantityReceiptSaleDetail = NUMERIC[14,3] (receiptSaleDetail);
        SET leftQuantityReceiptSaleDetail(detail) <- quantityReceiptSaleDetail(detail) WHERE receiptReceiptSaleDetail(detail) == receipt;

        LOCAL leftSumReceiptSaleDetail = NUMERIC[16,3] (receiptSaleDetail);
        SET leftSumReceiptSaleDetail(detail) <- (priceSumReceiptSaleDetail(detail) (-) promotionSumReceiptSaleDetail(detail)) WHERE receiptReceiptSaleDetail(detail) == receipt;

        FOR promotionGroupPromotion(promotion) == promotionGroup AND inReceiptPromotion(receipt, promotion) ORDER orderPromotion(promotion) DO {
            LOCAL quantityPromotionCondition = NUMERIC[14,3] (promotionCondition);
            SET quantityPromotionCondition(promotionCondition) <- [GROUP SUM leftSku (sku)
                                                                             IF inPromotionConditionSku(promotionCondition, sku)
                                                                             BY promotionCondition](promotionCondition) AND
                                                                                promotionPromotionCondition(promotionCondition) == promotion;

            LOCAL sumPromotionCondition = NUMERIC[14,3] (promotionCondition);
            SET sumPromotionCondition(promotionCondition) <- [GROUP SUM leftSku (sku) * maxSalePriceSku(sku)
                                                                    IF inPromotionConditionSku(promotionCondition, sku)
                                                                    BY promotionCondition](promotionCondition) AND
                                                                       promotionPromotionCondition(promotionCondition) == promotion;

            LOCAL countPromotionCondition = INTEGER (promotionCondition);
            SET countPromotionCondition(promotionCondition) <- -(UNION MAX -divideInteger(quantityPromotionCondition (promotionCondition), minQuantityPromotionCondition (promotionCondition)),
                                                                           -divideInteger(sumPromotionCondition(promotionCondition), minSumPromotionCondition(promotionCondition)));

            LOCAL countPromotion = INTEGER ();
            SET countPromotion () <- [GROUP MIN countPromotionCondition(promotionCondition)]();

            // Если все условия сработали хотя бы один раз
            IF countPromotion() > 0 AND [GROUP SUM 1 IF countPromotionCondition(promotionCondition) > 0]() == countPromotionConditionPromotion(promotion) THEN {

//                MESSAGE name(promotion);
//                MESSAGE toString255(cumulativeSumReceipt(receipt));
//                MESSAGE toString255(minCumulativeSumPromotion(promotion));
//                MESSAGE toString255(cumulativeSumReceipt(receipt) < minCumulativeSumPromotion(promotion));
//
                LOCAL takenPromotionCondition = NUMERIC[14,3] (promotionCondition);
                SET takenPromotionCondition(promotionCondition) <- min(countPromotion() * quantityDiscountPromotionCondition(promotionCondition), quantityPromotionCondition(promotionCondition));

                LOCAL takenSkuPromotionCondition = NUMERIC[14,3] (sku, promotionCondition);
                SET takenSkuPromotionCondition(sku, promotionCondition) <- [PARTITION UNGROUP takenPromotionCondition
                                                                                      LIMIT leftSku (sku)
                                                                                            IF inPromotionConditionSku(promotionCondition, sku)
                                                                                      BY promotionCondition
                                                                                      ORDER maxSalePriceSku(sku), sku] (sku, promotionCondition);

                LOCAL takenSku = NUMERIC[14,3] (sku);
                SET takenSku(sku) <- [GROUP SUM takenSkuPromotionCondition(sku, promotionCondition) BY sku] (sku);

                SET leftSku(sku) <- leftSku(sku) (-) takenSku(sku);

                LOCAL takenReceiptSaleDetailPromotionCondition = NUMERIC[14,3] (receiptSaleDetail, promotionCondition);
                SET takenReceiptSaleDetailPromotionCondition (detail, condition) <- [PARTITION UNGROUP takenSkuPromotionCondition
                                                                                               LIMIT leftQuantityReceiptSaleDetail(detail)
                                                                                               BY skuReceiptSaleDetail(detail), promotionCondition
                                                                                               ORDER DESC detail](detail, condition);

                LOCAL takenReceiptSaleDetail = NUMERIC[14,3] (receiptSaleDetail);
                SET takenReceiptSaleDetail(detail) <- [GROUP SUM takenReceiptSaleDetailPromotionCondition(detail, condition) BY detail](detail);

                SET leftQuantityReceiptSaleDetail(detail) <- leftQuantityReceiptSaleDetail(detail) (-) takenReceiptSaleDetail(detail);

                SET quantityReceiptSaleDetailPromotionCondition(detail, condition) <- takenReceiptSaleDetailPromotionCondition(detail, condition)
                    WHERE takenReceiptSaleDetailPromotionCondition(detail, condition) AND isAppliedPromotionReceiptSaleDetailPromotionCondition(detail, condition);

                SET promotionSumReceiptSaleDetailPromotionCondition (detail, condition) <-
                    IF sumReceiptPromotionCondition(condition) THEN
                        takenReceiptSaleDetailPromotionCondition(detail, condition) * (priceReceiptSaleDetail(detail) (-) sumReceiptPromotionCondition(condition) / quantityDiscountPromotionCondition (condition))
                    ELSE
                       IF sumDiscountPromotionCondition(condition) THEN
                            takenReceiptSaleDetailPromotionCondition(detail, condition) * sumDiscountPromotionCondition(condition)
                        ELSE
                            IF resultPricePromotionCondition(condition) THEN
                                takenReceiptSaleDetailPromotionCondition(detail, condition) * (leftSumReceiptSaleDetail(detail) / quantityReceiptSaleDetail(detail) - resultPricePromotionCondition(condition))
                            ELSE
                                takenReceiptSaleDetailPromotionCondition(detail, condition) * (leftSumReceiptSaleDetail(detail) / quantityReceiptSaleDetail(detail) * percentPromotionCondition(condition) / 100)
                            WHERE takenReceiptSaleDetailPromotionCondition(detail, condition) AND isAppliedPromotionReceiptSaleDetailPromotionCondition(detail, condition);
            }
        }
    }

    SET discountSumReceiptSaleDetail(detail) <- promotionSumReceiptSaleDetail(detail) WHERE receiptReceiptSaleDetail(detail) == receipt;
}

WHEN CHANGED(quantityReceiptDetailReceipt(receipt)) OR CHANGED(discountCardReceipt(receipt)) OR CHANGED(setUserPromotionReceipt(receipt)) DO EXEC calculatePromotionsReceipt(receipt) SESSION;

// Форма POS-терминала

prevCurrentBalanceSkuReceipt (sku, receipt) = [PREV(currentBalanceSkuStock(sku, stock))] (sku, departmentStoreReceipt(receipt));
prevCurrentBalanceReceiptDetail 'Тек. остаток' (receiptDetail) = prevCurrentBalanceSkuReceipt(skuReceiptDetail(receiptDetail), receiptReceiptDetail(receiptDetail));

closedCurrentZReportMessage '' = 'Не открыт Z-отчет';

FORM POS
    PROPERTIES() READONLY hostnameCurrentComputer, currentDateTime, currentUserName

    PROPERTIES() READONLY SHOWIF closedCurrentZReport() closedCurrentZReportMessage

    OBJECTS r = receipt FIXED PANEL
    PROPERTIES(r) SHOWIF currentZReport() discountSumReceiptDetailReceipt, sumReceiptDetailReceipt,
                                          searchSkuSaleReceipt,
                                          searchSkuReturnReceipt, scanBarcodeReturnReceipt,
                                          postReceipt, postCardReceipt, postCashReceipt, cancelReceipt,
                                          numberDiscountCardReceipt, nameClientDiscountCardReceipt,
                                          inputDiscountCardNumberReceipt, clearDiscountCardReceipt

    OBJECTS d = receiptDetail FIXED GRID
    PROPERTIES(d) SHOWIF currentZReport() READONLY indexReceiptDetail, typeReceiptDetail, idBarcodeReceiptDetail, nameSkuReceiptDetail, prevCurrentBalanceReceiptDetail
    PROPERTIES(d) SHOWIF currentZReport()          quantityReceiptDetail, priceReceiptDetail, sumReceiptDetail, discountPercentReceiptSaleDetail FORCE GRID, discountSumReceiptDetail,
                                                   numberVATReceiptDetail, valueVATReceiptDetail, delete
    FILTERS receiptReceiptDetail(d) == r

    OBJECTS bs = STRING[14] FIXED PANEL
    PROPERTIES(bs) SHOWIF currentZReport() barcodeSale = OBJVALUE ON CHANGE EXEC changeBarcodeSaleReceipt(r) EVENTID 'SCANNER'

    OBJECTS pc = promotionCondition FIXED GRID
    PROPERTIES(pc) SHOWIF currentZReport() READONLY namePromotionPromotionCondition, name, dateFromPromotionCondition, dateToPromotionCondition, percentPromotionCondition
    PROPERTIES(d, pc) SHOWIF currentZReport()       quantityReceiptSaleDetailPromotionCondition, promotionSumReceiptSaleDetailPromotionCondition
    FILTERS quantityReceiptSaleDetailPromotionCondition(d, pc) AND NOT userSetPromotionCondition(pc)

    OBJECTS pcu = promotionCondition FIXED GRID
    PROPERTIES(pcu) SHOWIF currentZReport() READONLY namePromotionPromotionCondition, name, dateFromPromotionCondition, dateToPromotionCondition, percentPromotionCondition
    PROPERTIES(d, pcu) SHOWIF currentZReport() quantityReceiptSaleDetailPromotionCondition, promotionSumReceiptSaleDetailPromotionCondition, setUserPromotionReceiptSaleDetailPromotionCondition
    FILTERS userSetPromotionCondition(pcu) AND inReceiptSaleDetailPromotionCondition(d, pcu)

    PROPERTIES() fiscalAdvancePaper, fiscalCutReceipt

    EVENTS
        ON INIT EXEC createCurrentReceipt()

    HINTTABLE LIST POSPriceListTypeReceipt, departmentStoreReceipt, groupCashRegisterReceipt
;

DESIGN POS FROM DEFAULT {
    main {
        childConstraints = TO THE BOTTOM;

        REMOVE functions.box CASCADE;

        NEW northContainer {
            ADD PROPERTY(closedCurrentZReportMessage()) {
                focusable = FALSE;
                font = 'Tahoma 100';
                fillVertical = 1.0;
            }
        }
        NEW centerContainer {
            childConstraints = TO THE RIGHT;
            NEW receiptContainer {
                type = SPLITV;
                childConstraints = TO THE BOTTOM;
                ADD d.box {
                    fillVertical = 3;
                    PROPERTY(indexReceiptDetail) { focusable = FALSE; font = 'Tahoma 14'; }
                    PROPERTY(typeReceiptDetail) { focusable = FALSE; font = 'Tahoma 14'; }
                    PROPERTY(idBarcodeReceiptDetail) { focusable = FALSE; font = 'Tahoma 14'; }
                    PROPERTY(nameSkuReceiptDetail) { focusable = FALSE; font = 'Tahoma 14'; }
                    PROPERTY(prevCurrentBalanceReceiptDetail) { focusable = FALSE; font = 'Tahoma 14'; }
                    PROPERTY(quantityReceiptDetail) { font = 'Tahoma 14'; }
                    PROPERTY(priceReceiptDetail) { font = 'Tahoma 14'; }
                    PROPERTY(sumReceiptDetail) { font = 'Tahoma 14'; }
                    PROPERTY(discountPercentReceiptSaleDetail) { font = 'Tahoma 14'; }
                    PROPERTY(discountSumReceiptDetail) { font = 'Tahoma 14'; }
                    PROPERTY(delete) { font = 'Tahoma 14'; }
                }
                NEW promotionContainer {
                type = TABBED;
                fillVertical = 0.3;
                    ADD pc.box {
                      //  fillVertical = 0.3;
                    }
                    ADD pcu.box {
                        title = 'Возможные акции';
                     //   fillVertical = 0.3;
                    }
              }
            }
            NEW eastContainer {
                childConstraints = TO THE BOTTOM;
                ADD r.receiptSaleActionGroup {
                    childConstraints = TO THE BOTTOM;
                    PROPERTY(searchSkuSaleReceipt) { focusable = FALSE; font = 'Tahoma bold 24'; }
                    ADD PROPERTY(barcodeSale) { caption = 'Ввести штрих-код'; panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 24'; editKey = 'F4'; showEditKey = TRUE; }
                }
                ADD r.receiptReturnActionGroup {
                    childConstraints = TO THE BOTTOM;
                    PROPERTY(searchSkuReturnReceipt) { focusable = FALSE; font = 'Tahoma bold 24'; }
                    PROPERTY(scanBarcodeReturnReceipt) { focusable = FALSE; font = 'Tahoma bold 24'; }
                }
                ADD r.receiptActionGroup {
                    childConstraints = TO THE BOTTOM;
                    PROPERTY(postReceipt) { focusable = FALSE; font = 'Tahoma bold 24'; }
                    PROPERTY(postCardReceipt) { focusable = FALSE; font = 'Tahoma bold 24'; }
                    PROPERTY(postCashReceipt) { focusable = FALSE; font = 'Tahoma bold 24'; }
                    PROPERTY(cancelReceipt) { focusable = FALSE; font = 'Tahoma bold 24'; }
                }
                ADD r.receiptDiscountGroup {
                    childConstraints = TO THE BOTTOM;
                    PROPERTY(numberDiscountCardReceipt) { panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 24'; }
                    PROPERTY(nameClientDiscountCardReceipt) { panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 24'; }
                    NEW buttonDiscountContainer {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(inputDiscountCardNumberReceipt) { focusable = FALSE; font = 'Tahoma bold 14'; }
                        ADD PROPERTY(clearDiscountCardReceipt) { focusable = FALSE; font = 'Tahoma bold 14'; }
                    }
                }
                NEW sumContainer {
                    title = 'Итого';
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY(discountSumReceiptDetailReceipt) { panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 72'; }
                    ADD PROPERTY(sumReceiptDetailReceipt) { panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 72'; }
                }
            }
        }

        NEW southContainer {
            childConstraints = TO THE RIGHT;
            NEW currentContainer {
                title = 'Текущие значения';
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(formRefresh) { focusable = FALSE; }
                ADD PROPERTY(hostnameCurrentComputer) { focusable = FALSE; }
                ADD PROPERTY(currentDateTime) { focusable = FALSE; }
                ADD PROPERTY(currentUserName) { focusable = FALSE; }
            }
            NEW actionsContainer {
                title = 'Действия с кассой';
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(fiscalAdvancePaper) { focusable = FALSE; }
                ADD PROPERTY(fiscalCutReceipt) { focusable = FALSE; }
            }
        }
    }
}

NAVIGATOR {
    retailNavigator {
        NEW POSNavigator 'Касса' BEFORE retailMasterData {
            ADD POS;
            ADD zReports;
            ADD centralCashRegister;
            ADD operationCashRegister;
            ADD groupsCashRegister;
            ADD cashRegistersModels;
        }
    }
}

// ----------------------------------------- Кассовые операции ---------------------------------------------- //
fiscalZReport 'Закрыть Z-отчёт' = ABSTRACT ACTION() CONFIRM;
fiscalZReport() += closeCurrentZReport() IF NOT sidModelCurrentCashRegister();

currentZReportDepartmentStore() = currentZReport() AND departmentStoreCurrentCashRegister();
closedCurrentZReportDepartmentStore() = closedCurrentZReport() AND departmentStoreCurrentCashRegister();

EXTEND FORM operationCashRegister
    PROPERTIES READONLY currentSumCashCurrentCashRegister() TODRAW interval FORCE PANEL
    PROPERTIES() READONLY numberCurrentZReport SHOWIF departmentStoreCurrentCashRegister()
    PROPERTIES() fiscalZReport SHOWIF currentZReportDepartmentStore()
    PROPERTIES() openCurrentZReport SHOWIF closedCurrentZReportDepartmentStore()

    OBJECTS z = zReportPosted
    PROPERTIES(z) READONLY objectClassName, numberZReport, dateZReport, timeZReport, nameDepartmentStoreZReport,
                           numberCashRegisterZReport, sumCashZReport, sumReceiptDetailZReport, basisZReport
    ORDER BY dateZReport(z), timeZReport(z)
    FILTERS dateZReport(z) >= (dFrom AS DATE),
            dateZReport(z) <= (dTo AS DATE)
;

EXTEND DESIGN operationCashRegister{
    actions {
        ADD PROPERTY(fiscalZReport) { font = 'Tahoma 24'; }
        ADD PROPERTY(openCurrentZReport) { font = 'Tahoma 24'; };
        ADD PROPERTY(numberCurrentZReport) { font = 'Tahoma 24'; };
    }
    ADD z.box BEFORE functions.box;
}

// Update data
fiscalUpdateData 'Загрузить информацию' = ABSTRACT ACTION();
fiscalUpdateDataShowIf = departmentStoreCurrentCashRegister() AND closedCurrentZReportDepartmentStore();

EXTEND FORM operationCashRegister
    PROPERTIES() SHOWIF fiscalUpdateDataShowIf() fiscalUpdateData
;

EXTEND DESIGN operationCashRegister{
    actions {
            ADD PROPERTY(fiscalUpdateData) BEFORE PROPERTY(fiscalXReport) { font = 'Tahoma 24'; }
            }
}
// ----------------------------------------------- Стандартные значения ------------------------------------- //

loadDefaultPaymentType 'Добавить тип оплаты' = ACTION(string, paymentMeans, sid) {
    ADDOBJ paymentType;
    FOR p == addedObject() DO {
        SET name(p) <- string AS STRING[110];
        SET paymentMeansPaymentType(p) <- paymentMeans AS paymentMeans;
        SET sidPaymentType(p) <- sid AS STRING[10];
    }
}

loadDefaultPaymentTypes 'Загрузить стандартные типы оплаты' = ACTION(){
    EXEC loadDefaultPaymentType('Наличные', paymentMeans.paymentMeansCash, 'cash');
    EXEC loadDefaultPaymentType('Карточка', paymentMeans.paymentMeansCard, 'card');
} IN loadDefaultGroup;

@implementLoadDefaultData(loadDefaultPaymentTypes);

