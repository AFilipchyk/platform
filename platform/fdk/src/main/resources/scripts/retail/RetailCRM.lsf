MODULE RetailCRM;

REQUIRE System,
        Retail,
        Stock,
        Barcode,
        Store,
        Numerator,
        Document;

PRIORITY Stock;


// ------------------------------------- Физические лица -------------------------------------- //

CLASS Client 'Покупатель (Ф.Л.)' : Contact;


FORM client 'Покупатель (Ф.Л.)'
    OBJECTS c=Client FIXED PANEL
    PROPERTIES(c)      firstNameContact, lastNameContact, postAddressContact, phoneContact,
                       emailContact, birthdayContact

    EDIT Client OBJECT c
;

FORM clients 'Покупатели (Ф.Л.)'
    OBJECTS c=Client
    PROPERTIES(c)      READONLY firstNameContact, lastNameContact, postAddressContact, phoneContact,
                       emailContact, birthdayContact
    PROPERTIES(c)      ADDFORM, EDITFORM, delete
;

//--------------------------------------Дисконтные карточки------------------------------------------------------------------//
CLASS DiscountCard 'Дисконтная карта' : NumeratedObject;
TABLE discountCard (DiscountCard);

@defineNumeratedObjectDefault(DiscountCard, 'Нумератор для дисконтных карт', 'ДС');

CLASS ABSTRACT DiscountSkuGroup 'Дисконтная группа товаров' : Named;

discountCardSeriesNumber (discountCard) = GROUP UNIQUE discountCard BY seriesNumberObject (discountCard) WHERE discountCard IS DiscountCard;
discountCardNumber (discountCard) = GROUP MAX discountCard BY numberObject(discountCard) IF discountCard IS DiscountCard;

clientDiscountCard (discountCard) = DATA Client(DiscountCard);
nameClientDiscountCard 'Держатель дисконтной карты' (discountCard) = nameContact(clientDiscountCard(discountCard)) IN recognize;

GROUP discountCardDateGroup 'Срок действия' : base;
dateDiscountCard 'Дата выдачи' (discountCard) = DATA DATE (DiscountCard) IN discountCardDateGroup;
dateDiscountCard (discountCard) <- currentDate() WHEN ASSIGNED(discountCard IS DiscountCard);

dateToDiscountCard 'Дата окончания действия' (discountCard) = DATA DATE (DiscountCard) IN discountCardDateGroup;

TABLE discountSkuGroupSku(DiscountSkuGroup, Sku);
inDiscountSkuGroupSku 'Вкл' = ABSTRACT BOOLEAN (DiscountSkuGroup, Sku) PERSISTENT;

initialSumDiscountCard 'Начальная сумма' (discountCard) = DATA NUMERIC[16,2] (DiscountCard);

// накопительная сумма  : потом посчитать ее по карте

FORM generationDiscountCards 'Генерация дисконтных карт'
    OBJECTS n=Numerator  FIXED PANEL
    PROPERTIES(n) SELECTOR name

    OBJECTS quantityCards=INTEGER FIXED PANEL
    PROPERTIES(quantityCards) intValueQuantityCards = OBJVALUE;

DESIGN generationDiscountCards FROM DEFAULT {
    main{
        PROPERTY(intValueQuantityCards) {
            caption = 'Количество дисконтных карт';
        }
    }
}

generateDiscountCards 'Сгенерировать дисконтные карты' = ACTION() {
    FORM generationDiscountCards OBJECTS n=defaultNumeratorDiscountCard() MODAL CHECK;
    IF formResult() == FormResult.ok THEN {
        LOCAL num = INTEGER();
        SET num() <- 0;
        WHILE num() < (chosenInteger('quantityCards') AS INTEGER) DO {
            ADDOBJ DiscountCard;
            FOR d == addedObject() DO {
                // todo : делается влоб, поскольку numerator сейчас не умеет генерировать сразу несколько объектов
                SET numeratorObject(d) <- chosenObject('n') AS Numerator;
                SET numberObject(d) <- curStringValueNumerator(numeratorObject(d));
                SET seriesObject(d) <- seriesNumerator(numeratorObject(d));
                SET curValueNumerator(numerator) <- curValueNumerator(numerator) + 1 WHERE numerator == numeratorObject(d);
                SET num() <- num() + 1;
            }
        }
    }
} TOOLBAR;

FORM discountCard 'Дисконтная карта'
    OBJECTS d=DiscountCard FIXED PANEL
    PROPERTIES(d) nameClientDiscountCard, initialSumDiscountCard,
                  nameNumeratorObject, numberObject, seriesObject,
                  dateDiscountCard, dateToDiscountCard

    EDIT DiscountCard OBJECT d
;

DESIGN discountCard FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        d.box {
            d.panel {
                childConstraints = TO THE BOTTOM;
                NEW row1 {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameClientDiscountCard) {
                        font = 'Tahoma 24';
                    }
                    ADD PROPERTY(initialSumDiscountCard) {
                        font = 'Tahoma 24';
                    }
                }
                NEW row2 {
                    childConstraints = TO THE RIGHT;
                    ADD d.numberedGroup;
                    ADD d.discountCardDateGroup;
                }
            }
        }
    }
}

FORM discountCardDialog 'Дисконтные карты'

    OBJECTS d = DiscountCard
    PROPERTIES(d) READONLY nameClientDiscountCard, initialSumDiscountCard, numberObject, seriesObject,
                         dateDiscountCard, dateToDiscountCard

    DIALOG DiscountCard OBJECT d
;

FORM discountCards 'Дисконтные карты'
    OBJECTS d=DiscountCard
    PROPERTIES(d) READONLY numberObject, seriesObject, nameClientDiscountCard, dateDiscountCard, dateToDiscountCard,
                  initialSumDiscountCard
    PROPERTIES(d) ADDFORM, EDITFORM, delete

    ORDER BY seriesObject, numberObject

    PROPERTIES() generateDiscountCards TODRAW d
;

// todo: сделать генерацию штрих-кода для дисконтных карт

//-------------------------- Группы акций ----------------------------------------//

CLASS PromotionGroup 'Группа акций' : Named;
TABLE promotionGroup (PromotionGroup);

//--------------------------Акции----------------------------------------//

CLASS Promotion 'Акция' : Historizable, NumeratedObject, Named;
TABLE promotion (Promotion);

@defineNumeratedObjectDefault(Promotion, 'Нумератор для акций', 'АК');

promotionGroupPromotion (promotion) = DATA PromotionGroup(Promotion) AUTOSET NOT NULL;
namePromotionGroupPromotion 'Группа акций' (promotion) = name(promotionGroupPromotion(promotion)) IN base;

userOrderPromotion 'Порядок' (promotion) = DATA INTEGER (Promotion);
orderPromotion 'Порядок' (promotion) = (1 IF promotion IS Promotion) OR userOrderPromotion(promotion) PERSISTENT;

userSetPromotion 'Задается кассиром' (promotion) = DATA BOOLEAN (Promotion);
// ----------------------------- Условия акций ------------------------ //

CLASS PromotionCondition 'Условие акции' : Named;
TABLE promotionCondition (PromotionCondition);

GROUP retailCRMGroup 'Реквизиты' : recognize;

dateFromPromotion 'ОТ:' = DATA DATE (Promotion) IN retailCRMGroup NOT NULL;
dateToPromotion 'ДО:' = DATA DATE (Promotion) IN retailCRMGroup NOT NULL;

timeOfFromPromotion 'ОТ:' =  DATA TIME (Promotion) IN retailCRMGroup;
timeOfToPromotion 'ДО:' =  DATA TIME (Promotion) IN retailCRMGroup;

TABLE promotionDOW (Promotion, DOW);
skipPromotionDOW 'Исключить' = DATA BOOLEAN (Promotion, DOW);

inPromotion 'В акции' = DATA BOOLEAN (Promotion);
inPromotion(promotion) <- TRUE WHEN ASSIGNED(promotion IS Promotion);

TABLE promotionChainStores(Promotion, ChainStores);
inPromotionChainStores 'В акции' = DATA BOOLEAN (Promotion, ChainStores);

TABLE promotionStoreType(Promotion, StoreType);
inPromotionStoreType 'В акции' = DATA BOOLEAN (Promotion, StoreType);

TABLE promotionStore(Promotion, Store);
inPromotionStore 'В акции' = DATA BOOLEAN (Promotion, Store);

inPromotionChainStoresOver 'В акции' (promotion, chainStores) =
    UNION OVERRIDE inPromotion(promotion) AND chainStores IS ChainStores,
                   inPromotionChainStores(promotion, chainStores);

inPromotionStoreTypeOver 'В акции' (promotion, storeType) =
    UNION OVERRIDE inPromotion(promotion) AND storeType IS StoreType,
                   inPromotionChainStores(promotion, chainStoresStoreType(storeType)),
                   inPromotionStoreType(promotion, storeType);

inPromotionStoreOver 'В акции' (promotion, store) =
    UNION OVERRIDE inPromotion(promotion) AND store IS Store,
                   inPromotionChainStores(promotion, chainStoresStore(store)),
                   inPromotionStoreType(promotion, storeTypeStore(store)),
                   inPromotionStore(promotion, store) AND isCompanyStore(store);

storePromotion 'Магазины' (promotion) = GROUP CONCAT name(store) IF inPromotionStoreOver(promotion, store), ', '
                                              BY promotion
                                              ORDER store PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 40;

minSumBillPromotion 'Сумма чека (от)' (promotion) = DATA NUMERIC[14,2] (Promotion);
maxSumBillPromotion 'Сумма чека (до)' (promotion) = DATA NUMERIC[14,2] (Promotion);

hasDiscountCardPromotion 'Есть дисконтная карта' = DATA BOOLEAN (Promotion);
allDiscountCardPromotion 'Любая дисконтная карта' = DATA BOOLEAN (Promotion);

TABLE promotionDiscountCard (Promotion, DiscountCard);
inDataPromotionDiscountCard 'В акции' = DATA BOOLEAN (Promotion, DiscountCard);

inPromotionDiscountCard 'В акции' (promotion, discountCard) = UNION OVERRIDE allDiscountCardPromotion(promotion) AND discountCard IS DiscountCard,
                                                                             inDataPromotionDiscountCard(promotion, discountCard);

minCumulativeSumPromotion 'Накоп. сумма (от)' (promotion) = DATA NUMERIC[14,2] (Promotion);
maxCumulativeSumPromotion 'Накоп. сумма (до)' (promotion) = DATA NUMERIC[14,2] (Promotion);

useCurrentReceiptPromotion 'Учитывать текущий чек' (promotion) = DATA BOOLEAN (Promotion);

minCumulativeSumPromotion(promotion) => hasDiscountCardPromotion (promotion) RESOLVE FALSE;
maxCumulativeSumPromotion(promotion) => hasDiscountCardPromotion (promotion) RESOLVE FALSE;
allDiscountCardPromotion(promotion) => hasDiscountCardPromotion (promotion) RESOLVE FALSE;

promotionPromotionCondition = DATA Promotion (PromotionCondition) NOT NULL DELETE;
namePromotionPromotionCondition 'Акция' (promotionCondition) = name(promotionPromotionCondition(promotionCondition));
dateFromPromotionCondition 'Действует (от)' (promotionCondition) = dateFromPromotion(promotionPromotionCondition(promotionCondition));
dateToPromotionCondition 'Действует (до)' (promotionCondition) = dateToPromotion(promotionPromotionCondition(promotionCondition));

countPromotionConditionPromotion 'Кол-во условий' (promotion) = GROUP SUM 1 IF promotionPromotionCondition(promotionCondition) == promotion BY promotion PERSISTENT;

minQuantityPromotionCondition 'Количество (от)' = DATA NUMERIC[14,3] (PromotionCondition);
CONSTRAINT minQuantityPromotionCondition(promotionCondition) <= 0.0 MESSAGE 'Количество в условии акции должно быть строго больше 0';

minSumPromotionCondition 'Сумма (от)' = DATA NUMERIC[16,2] (PromotionCondition);
CONSTRAINT minSumPromotionCondition(promotionCondition) <= 0.0 MESSAGE 'Сумма в условии акции должна быть строго больше 0';

quantityDiscountPromotionCondition 'Кол-во товаров со скидкой' = DATA NUMERIC[14,3] (PromotionCondition) NOT NULL;
percentPromotionCondition 'Процент скидки'  = DATA NUMERIC[8,3] (PromotionCondition);
resultPricePromotionCondition 'Цена со скидкой' = DATA NUMERIC[14,2] (PromotionCondition);
sumDiscountPromotionCondition 'Сумма скидки' (promotionCondition) = DATA NUMERIC[14,2] (PromotionCondition);
sumReceiptPromotionCondition 'Сумма чека' (promotionCondition) = DATA NUMERIC[14,2] (PromotionCondition);

userSetPromotionCondition 'Задается кассиром' (promotionCondition) = userSetPromotion(promotionPromotionCondition(promotionCondition));

// discountSkuGroup
TABLE promotionConditionDiscountSkuGroup (PromotionCondition, DiscountSkuGroup);
allDiscountSkuGroupPromotionCondition 'Все дисконтные группы товаров' = DATA BOOLEAN (PromotionCondition);
inDataPromotionConditionDiscountSkuGroup 'В условии' = DATA BOOLEAN (PromotionCondition, DiscountSkuGroup);
inPromotionConditionDiscountSkuGroup 'В условии' = UNION OVERRIDE allDiscountSkuGroupPromotionCondition(promotionCondition) AND discountSkuGroup IS DiscountSkuGroup,
                                                                  inDataPromotionConditionDiscountSkuGroup(promotionCondition, discountSkuGroup) PERSISTENT;
countPromotionConditionSku 'Кол-во дисконтных групп' = GROUP SUM 1 IF inPromotionConditionDiscountSkuGroup(promotionCondition, discountSkuGroup)
                                                                  AND inDiscountSkuGroupSku(discountSkuGroup, sku) BY promotionCondition, sku;


// skuGroup
TABLE promotionConditionSkuGroup (PromotionCondition, SkuGroup);
inDataPromotionConditionSkuGroup 'В условии' = DATA BOOLEAN (PromotionCondition, SkuGroup);
inParentPromotionConditionSkuGroup (promotionCondition, skuGroup) = GROUP SUM 1 IF inDataPromotionConditionSkuGroup(promotionCondition, parent) AND isParentSkuGroupSkuGroup(child, parent)
                                                                          BY promotionCondition, child PERSISTENT;
inPromotionConditionSkuGroup 'В условии' = (TRUE IF inParentPromotionConditionSkuGroup(promotionCondition, skuGroup)) OR inDataPromotionConditionSkuGroup(promotionCondition, skuGroup);

// sku
TABLE promotionConditionSku (PromotionCondition, Sku);
inDataPromotionConditionSku 'В условии' = DATA BOOLEAN (PromotionCondition, Sku);

inPromotionConditionSku 'В условии' (promotionCondition, sku) = UNION OVERRIDE ((TRUE IF countPromotionConditionSku(promotionCondition, sku)) OR (allDiscountSkuGroupPromotionCondition(promotionCondition) AND sku IS Sku))
                                                                                    AND inParentPromotionConditionSkuGroup(promotionCondition, skuGroupSku(sku)),
                                                                               inDataPromotionConditionSku(promotionCondition, sku);

FORM promotion 'Акция'
    OBJECTS sh=Promotion   FIXED PANEL
    PROPERTIES(sh)     name, namePromotionGroupPromotion, userSetPromotion,
                       nameNumeratorObject, numberObject, seriesObject,
                       dateFromPromotion, dateToPromotion, timeOfFromPromotion, timeOfToPromotion,
                       minSumBillPromotion, maxSumBillPromotion
    PROPERTIES(sh)                                     hasDiscountCardPromotion
    PROPERTIES(sh) SHOWIF hasDiscountCardPromotion(sh) minCumulativeSumPromotion, maxCumulativeSumPromotion, useCurrentReceiptPromotion, allDiscountCardPromotion
    OBJECTS d=DOW
    PROPERTIES(d)     READONLY name
    PROPERTIES(sh, d)  skipPromotionDOW
    FILTERGROUP filterDOW
        FILTER 'Только отмеченные' 'F11' skipPromotionDOW(sh, d)

    OBJECTS sg=PromotionCondition
    PROPERTIES(sg)     name, minQuantityPromotionCondition, minSumPromotionCondition, quantityDiscountPromotionCondition, percentPromotionCondition,
                       resultPricePromotionCondition, sumDiscountPromotionCondition, sumReceiptPromotionCondition, ADDOBJ, delete

    FILTERS            promotionPromotionCondition(sg)==sh

    TREE skuTree skg = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = name(skg)
    ORDER BY skuTreeName
    PROPERTIES(sg, skg) inPromotionConditionSkuGroup

    OBJECTS dg=DiscountSkuGroup
    PROPERTIES(sg) allDiscountSkuGroupPromotionCondition TODRAW dg FORCE PANEL
    PROPERTIES(dg) READONLY name
    PROPERTIES(sg, dg) inPromotionConditionDiscountSkuGroup

    FILTERGROUP filterDiscountSkuGroup
        FILTER 'Только отмеченные' 'F11' inPromotionConditionDiscountSkuGroup(sg, dg)

    OBJECTS sk= Sku
    PROPERTIES(sk)    READONLY idBarcodeSku, nameSku
    FILTERS           isParentSkuGroupSku(skg, sk)
    PROPERTIES(sg, sk)   inPromotionConditionSku

    FILTERGROUP filterSku
        FILTER 'Только отмеченные' 'F10' inPromotionConditionSku(sg, sk)

    TREE treeStore a=STRING[3], t=ChainStores, st=StoreType
    PROPERTIES READONLY OBJVALUE(a), name(t), name(st)

    FILTERS stringEqualsAll(a),
            inChainStoresStoreType (t, st)

    OBJECTS s=Store
    PROPERTIES(s) READONLY name, addressStore, nameLegalEntityStore

    FILTERS inChainStoresStoreTypeStore(t, st, s),
            isCompanyStore(s)

    PROPERTIES(sh) inPromotion TODRAW a FORCE GRID
    PROPERTIES(sh, t) inPromotionChainStoresOver
    PROPERTIES(sh, st) inPromotionStoreTypeOver
    PROPERTIES(sh, s) inPromotionStoreOver
    FILTERGROUP filterStore
        FILTER 'Только отмеченные' 'F9' inPromotionStoreOver(sh, s)

    OBJECTS dis= DiscountCard
    PROPERTIES(dis)    READONLY numberObject, seriesObject, nameClientDiscountCard
    PROPERTIES(sh, dis) inPromotionDiscountCard
    FILTERGROUP filterDiscountCard
        FILTER 'Только отмеченные' 'F8' inPromotionDiscountCard(sh, dis)

    EDIT Promotion OBJECT sh
;

DESIGN promotion FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        ADD sh.box {

            childConstraints = TO THE RIGHT;
            NEW row01 {
                title = 'Название';
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(name(sh)) {
                    preferredCharWidth = 30;

                }
                ADD PROPERTY(namePromotionGroupPromotion(sh));
                ADD PROPERTY(userSetPromotion(sh));
            }
            ADD sh.numberedGroup {
                childConstraints = TO THE BOTTOM;
            }
            NEW row11 {
                title = 'Диапозон дат';
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(dateFromPromotion);
                ADD PROPERTY(dateToPromotion);
            }
            NEW row12 {
                title = 'Часы';
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(timeOfFromPromotion);
                ADD PROPERTY(timeOfToPromotion);
            }
            NEW row13 {
                title = 'Суммы';
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(minSumBillPromotion);
                ADD PROPERTY(maxSumBillPromotion);
            }
            NEW row14 {
                title = 'Дисконтные карты';
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(hasDiscountCardPromotion);
                ADD PROPERTY(minCumulativeSumPromotion);
                ADD PROPERTY(maxCumulativeSumPromotion);
                ADD PROPERTY(useCurrentReceiptPromotion);
                ADD PROPERTY(allDiscountCardPromotion);
            }
        }

        NEW row2 {
            fillVertical = 2;
            fillHorizontal = 3;
            type = TABBED;
            NEW row21 {
                title = 'Условия';
                type = SPLITV;
                childConstraints = TO THE BOTTOM;
                ADD sg.box {
                    fillVertical = 1;
                }
                NEW row212 {
                    type = SPLITH;
                    title = 'Товары';
                    childConstraints = TO THE RIGHT;
                    NEW skuGroupContainer {
                        type = SPLITV;
                        childConstraints = TO THE BOTTOM;
                        ADD skuTree.tree.box;
                        ADD dg.box {
                            childConstraints = TO THE BOTTOM;
                            ADD dg.panel BEFORE dg.grid.box;
                        }
                    }
                    ADD sk.box {
                        fillHorizontal = 2;
                    }
                }
            }

            NEW row22 {
                type = SPLITH;
                title = 'Магазины';
                childConstraints = TO THE RIGHT;
                ADD treeStore.tree.box;
                ADD s.box {
                    fillHorizontal = 2;
                }
            }
            ADD dis.box;
            ADD d.box;
        }

        ADD functions.box;
    }
}

copyPromotion 'Копировать' = ACTION (promotion) NEWSESSION {
    FOR ADDOBJ p = Promotion DO {
        SET promotionGroupPromotion(p) <- promotionGroupPromotion(promotion);
        SET dateFromPromotion(p) <- dateFromPromotion(promotion);
        SET dateToPromotion(p) <- dateToPromotion(promotion);
        SET timeOfFromPromotion(p) <- timeOfFromPromotion(promotion);
        SET timeOfToPromotion(p) <- timeOfToPromotion(promotion);
        SET minSumBillPromotion(p) <- minSumBillPromotion(promotion);
        SET maxSumBillPromotion(p) <-  maxSumBillPromotion(promotion);
        SET hasDiscountCardPromotion(p) <- hasDiscountCardPromotion(promotion);
        SET minCumulativeSumPromotion(p) <- minCumulativeSumPromotion(promotion);
        SET maxCumulativeSumPromotion(p) <- maxCumulativeSumPromotion(promotion);
        SET useCurrentReceiptPromotion(p) <- useCurrentReceiptPromotion(promotion);
        SET allDiscountCardPromotion(p) <- allDiscountCardPromotion(promotion);

        FOR promotionPromotionCondition(promotionCondition) == promotion DO {
            FOR ADDOBJ pc = PromotionCondition DO {
                SET promotionPromotionCondition(pc) <- p AS Promotion;
                SET minQuantityPromotionCondition(pc) <- minQuantityPromotionCondition(promotionCondition);
                SET minSumPromotionCondition(pc) <- minSumPromotionCondition(promotionCondition);
                SET quantityDiscountPromotionCondition(pc) <- quantityDiscountPromotionCondition(promotionCondition);
                SET percentPromotionCondition(pc) <- percentPromotionCondition(promotionCondition);
                SET resultPricePromotionCondition(pc) <- resultPricePromotionCondition(promotionCondition);
                SET sumDiscountPromotionCondition(pc) <- sumDiscountPromotionCondition(promotionCondition);
                SET sumReceiptPromotionCondition(pc) <- sumReceiptPromotionCondition(promotionCondition);

                SET allDiscountSkuGroupPromotionCondition(pc) <- allDiscountSkuGroupPromotionCondition(promotionCondition);

                FOR inDataPromotionConditionDiscountSkuGroup(promotionCondition, discountSkuGroup) DO {
                    SET inDataPromotionConditionDiscountSkuGroup(pc, discountSkuGroup) <- TRUE;
                };
                FOR inDataPromotionConditionSkuGroup(promotionCondition, skuGroup) DO {
                    SET inDataPromotionConditionSkuGroup(pc, skuGroup) <- TRUE;
                };
                FOR inDataPromotionConditionSku(promotionCondition, sku) DO {
                    SET inDataPromotionConditionSku(pc, sku) <- TRUE;
                };
            };
        };

        FORM promotion OBJECTS sh = p MANAGESESSION DOCKEDMODAL;
    };
} TOOLBAR;

FORM promotions 'Акции'
    OBJECTS sh=Promotion
    PROPERTIES(sh)     READONLY name, numberObject, seriesObject, dateFromPromotion, dateToPromotion, storePromotion,
                                timeOfFromPromotion, timeOfToPromotion, minSumBillPromotion, maxSumBillPromotion,
                                hasDiscountCardPromotion, minCumulativeSumPromotion, maxCumulativeSumPromotion,
                                useCurrentReceiptPromotion, allDiscountCardPromotion
    PROPERTIES(sh)    copyPromotion, ADDFORM, EDITFORM, delete

    PROPERTIES (sh) READONLY FORCE PANEL nameUserCreatedHistorizable, timeCreatedHistorizable, hostnameComputerCreatedHistorizable

;

FORM promotionGroup 'Группа акций'
    OBJECTS st=PromotionGroup FIXED PANEL
    PROPERTIES(st)     name

    OBJECTS sh=Promotion
    PROPERTIES(sh)     userOrderPromotion
    PROPERTIES(sh)     READONLY name, seriesObject, numberObject, dateFromPromotion, dateToPromotion, storePromotion,
                                timeOfFromPromotion, timeOfToPromotion, minSumBillPromotion, maxSumBillPromotion,
                                hasDiscountCardPromotion, minCumulativeSumPromotion, maxCumulativeSumPromotion,
                                useCurrentReceiptPromotion, allDiscountCardPromotion
    PROPERTIES(sh)     copyPromotion, ADDFORM, EDITFORM, delete
    ORDER BY userOrderPromotion

    FILTERS promotionGroupPromotion(sh)==st

    EDIT PromotionGroup OBJECT st
;

FORM promotionGroups 'Группы акций'
    OBJECTS st=PromotionGroup
    PROPERTIES(st)     READONLY name
    PROPERTIES(st)     ADDFORM, EDITFORM, delete

    OBJECTS sh=Promotion
    PROPERTIES(sh)     READONLY orderPromotion
    PROPERTIES(sh)     READONLY name, seriesObject, numberObject, dateFromPromotion, dateToPromotion, storePromotion,
                                timeOfFromPromotion, timeOfToPromotion, minSumBillPromotion, maxSumBillPromotion,
                                hasDiscountCardPromotion, minCumulativeSumPromotion, maxCumulativeSumPromotion,
                                useCurrentReceiptPromotion, allDiscountCardPromotion
    PROPERTIES(sh)     ADDFORM, EDITFORM, delete
    ORDER BY orderPromotion

    FILTERS promotionGroupPromotion(sh)==st

;

EXTEND FORM discountCard
    OBJECTS p=Promotion
    PROPERTIES(p, d) inPromotionDiscountCard
    PROPERTIES(p) READONLY name, numberObject, seriesObject, dateFromPromotion, dateToPromotion, storePromotion,
                           timeOfFromPromotion, timeOfToPromotion, minSumBillPromotion, maxSumBillPromotion,
                           hasDiscountCardPromotion, minCumulativeSumPromotion, maxCumulativeSumPromotion,
                           useCurrentReceiptPromotion, allDiscountCardPromotion
    FILTERS hasDiscountCardPromotion(p)
;

EXTEND DESIGN discountCard {
    ADD p.box BEFORE functions.box;
}

NAVIGATOR {
    retailNavigator {
        NEW retailCRMNavigator 'CRM' BEFORE retailMasterData {
            ADD promotions;
            ADD promotionGroups;
            ADD discountCards;
            ADD clients;
        }
    }
}