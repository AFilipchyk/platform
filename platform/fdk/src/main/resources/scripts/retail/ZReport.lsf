MODULE ZReport;

REQUIRE System,
        Utils,
        Document,
        Retail,
        Currency,
        Store,
        Stock,
        StockTax,
        CashRegister,
        CashOperation,
        SaleLedger,
        RetailCRM,
        PriceRound,
        PriceList,
        StockDocument; // todo : эту зависимость надо будет убить, но сейчас не получается из-за того что нельзя донаследовать классы

// ------------------------------------- Объявление Z-отчета ---------------------------------------- //

CLASS zReport 'Z-отчет (открытый)' : incomeCashOrder, historizable, numberedObject;
CLASS zReportPosted 'Z-отчет (проведенный)' : zReport, postedObject;

TABLE zReport (zReport);

@defineDocumentHeaderPosted(zReport);
@defineDocumentHeaderTime(zReport);
@defineDocumentHeaderDepartmentStore(zReport);

castBasisZReport =
    FORMULA STRING[100] '\'Z-отчет №\' || CAST($1 AS TEXT) || \' с кассы \' || CAST($2 AS TEXT) || \' от \' || CAST($3 AS TEXT)';

numberZReport 'Номер Z-отчета' (zReport) = DATA STRING[21](zReport) IN documentPrmGroup;
cashRegisterZReport (zReport) = DATA cashRegister(zReport);
numberCashRegisterZReport 'Касса Z-отчета' (zReport) = numberCashRegister(cashRegisterZReport(zReport)) IN documentPrmGroup;
numberNumberCashRegisterToZReport (numberZReport, numberCashRegister) = GROUP UNIQUE zReport BY numberZReport (zReport), numberCashRegisterZReport (zReport) WHERE zReport IS zReport;
numberNumberCashRegisterToZReportPosted (numberZReport, numberCashRegister) = GROUP UNIQUE zReportPosted BY numberZReport (zReportPosted), numberCashRegisterZReport (zReportPosted) WHERE zReportPosted IS zReportPosted;
maxNumberZReport(cashRegister) = GROUP MAX numberZReport(zReport)  BY cashRegisterZReport (zReport);
basisZReport 'Основание' (zReport) = castBasisZReport(numberZReport(zReport), numberCashRegisterZReport(zReport), dateZReport(zReport)) IN documentPrmGroup;

dateCashDocument(zReport) += dateZReport(zReport);
timeCashDocument(zReport) += timeZReport(zReport);
numberCashDocument(zReport) += numberZReport(zReport);
departmentStoreCashDocument(zReport) += departmentStoreZReport(zReport);
basisCashDocument(zReport) += basisZReport(zReport);
cashRegisterCashDocument(zReport) += cashRegisterZReport(zReport);
isPostedCashDocument(zReport) += isPostedZReport(zReport);

departmentStoreZReport(zReport) <- departmentStoreCashRegister(cashRegisterZReport(zReport))
    WHEN CHANGED(cashRegisterZReport(zReport));

descriptionZReport (zReport) =
    [FORMULA STRING[200] '\'Продажа по кассе \' || CAST($1 AS TEXT) || \' отдела \' || CAST($2 AS TEXT) ||  \' от \' || CAST($3 AS TEXT)'](
    numberCashRegisterZReport(zReport), nameDepartmentStoreZReport(zReport), dateZReport(zReport));

exportReceiptsZReport 'Экспортировать чеки' = ACTION CUSTOM 'fdk.retail.ExportReceiptsActionProperty';
importReceiptsZReport 'Импортировать чеки' = ACTION CUSTOM 'fdk.retail.ImportReceiptsActionProperty';

//----------------------------------------------- Чеки ---------------------------------------------------//

CLASS receipt 'Чек' : historizable;

CLASS ABSTRACT receiptDetail 'Строка чека';
CLASS receiptSaleDetail 'Строка продажи' : receiptDetail;
CLASS receiptReturnDetail 'Строка возврата' : receiptDetail;

TABLE receipt (receipt);
TABLE receiptDetail (receiptDetail);
TABLE receiptSaleDetail (receiptSaleDetail);
TABLE receiptReturnDetail (receiptReturnDetail);

@defineDocumentRelation(zReport, receipt);
cashRegisterReceipt (receipt) = cashRegisterZReport(zReportReceipt(receipt));
numberCashRegisterReceipt 'Номер кассы' (receipt) = numberCashRegister(cashRegisterReceipt(receipt)) IN recognize;

groupCashRegisterReceipt (receipt) = groupCashRegisterCashRegister(cashRegisterReceipt(receipt));

cashRegisterModelReceipt (receipt) = cashRegisterModelCashRegister(cashRegisterReceipt(receipt));
sidCashRegisterModelReceipt 'Код модели' (receipt) = sidModel(cashRegisterModelReceipt(receipt));

numberZReportReceipt 'Номер Z-отчета' (receipt) = numberZReport(zReportReceipt(receipt)) IN recognize;

userReceipt = DATA customUser(receipt);
nameUserReceipt 'Кассир' (receipt) = commonName(userReceipt(receipt));
userReceipt(receipt) <- currentUser() WHEN ASSIGNED(receipt IS receipt);

@defineDocumentHeaderTime(receipt);

@defineDocumentDetailDepartmentStoreCustom(zReport, receipt);
@defineDocumentDetailPosted(zReport, receipt);

@defineDocumentRelation(receipt, receiptSaleDetail);
@defineDocumentRelation(receipt, receiptReturnDetail);

@defineDocumentHeaderCurrency (receipt);
@deriveDocumentCurrency (receipt, departmentStore);

@defineDocumentDetailCurrency (receipt, receiptSaleDetail);
@defineDocumentDetailCurrency (receipt, receiptReturnDetail);

receiptReceiptDetail (receiptDetail) = UNION CLASS receiptReceiptReturnDetail(receiptDetail), receiptReceiptSaleDetail(receiptDetail) PERSISTENT;

zReportReceiptDetail (receiptDetail) = zReportReceipt(receiptReceiptDetail(receiptDetail));
sidCashRegisterModelReceiptDetail 'Код модели' (receiptDetail) = sidCashRegisterModelReceipt(receiptReceiptDetail(receiptDetail));

typeReceiptDetail 'Тип' (receiptDetail) = UNION CLASS 'Продажа' AND receiptDetail IS receiptSaleDetail, 'Возврат' AND receiptDetail IS receiptReturnDetail FIXEDCHARWIDTH 8;

@defineDocumentDetailIndex(receipt, receiptDetail);

@defineDocumentDetailTime(receipt, receiptSaleDetail);
@defineDocumentDetailTime(receipt, receiptReturnDetail);
dateReceiptDetail 'Дата' (receiptDetail) = UNION CLASS dateReceiptReturnDetail(receiptDetail), dateReceiptSaleDetail(receiptDetail) PERSISTENT;
dateTimeReceiptDetail 'Дата/время' (receiptDetail) = UNION CLASS dateTimeReceiptReturnDetail(receiptDetail), dateTimeReceiptSaleDetail(receiptDetail) PERSISTENT;

@defineDocumentDetailPosted(receipt, receiptSaleDetail);
@defineDocumentDetailPosted(receipt, receiptReturnDetail);
isPostedReceiptDetail 'Проведен' (receiptDetail) = UNION CLASS isPostedReceiptReturnDetail(receiptDetail), isPostedReceiptSaleDetail(receiptDetail) PERSISTENT;

@defineDocumentDetailDepartmentStoreCustom(receipt, receiptSaleDetail);
@defineDocumentDetailDepartmentStoreCustom(receipt, receiptReturnDetail);
departmentStoreReceiptDetail (receiptDetail) = UNION CLASS departmentStoreReceiptReturnDetail(receiptDetail), departmentStoreReceiptSaleDetail(receiptDetail) PERSISTENT;

@defineDocumentDetailSku(receiptSale, sku);
@defineDocumentDetailSku(receiptReturn, sku);
skuReceiptDetail (receiptDetail) = skuReceiptReturnDetail(receiptDetail) OR skuReceiptSaleDetail(receiptDetail);
nameSkuReceiptDetail 'Товар' (receiptDetail) = nameSkuStock(skuReceiptDetail(receiptDetail), departmentStoreReceiptDetail(receiptDetail)) IN recognize;

numberReceipt 'Номер чека' (receipt) = DATA INTEGER (receipt) IN documentHeaderGroup;
numberReceiptReceiptDetail 'Номер чека' (receiptDetail) = numberReceipt(receiptReceiptDetail(receiptDetail));

maxNumberReceiptZReport 'Максимальный номер чека' (zReport) = GROUP MAX numberReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT;

zReportReceiptToReceipt (zReport, receipt, cashRegister) = GROUP UNIQUE receipt BY numberZReport(zReportReceipt(receipt)), numberReceipt(receipt), numberCashRegister(cashRegisterZReport(zReportReceipt(receipt))) WHERE receipt IS receipt;

GROUP receiptDiscountGroup 'Дисконтная карта' : public;

discountCardReceipt (receipt) = DATA discountCard (receipt);

CONSTRAINT dateToDiscountCard(discountCardReceipt(receipt)) < dateReceipt(receipt) CHECKED BY discountCardReceipt MESSAGE 'Закончился срок действия карты';

numberDiscountCardReceipt 'Номер дисконтной карты' (receipt) = seriesNumberObject(discountCardReceipt(receipt)) IN receiptDiscountGroup;
nameClientDiscountCardReceipt 'Держатель дисконтной карты' (receipt) = nameClientDiscountCard(discountCardReceipt(receipt)) IN receiptDiscountGroup;
numberDiscountCardReceiptDetail 'Номер дисконтной карты' (receiptDetail) = numberDiscountCardReceipt(receiptReceiptDetail(receiptDetail));
nameClientDiscountCardReceiptDetail 'Держатель дисконтной карты' (receiptDetail) = nameClientDiscountCardReceipt(receiptReceiptDetail(receiptDetail));

idBarcodeReceiptDetail 'Штрих-код' (receiptDetail) = DATA STRING[14] (receiptDetail) FIXEDCHARWIDTH 14 INDEXED;

exportReceipt 'Экспортировать' (receipt) = DATA SESSION BOOLEAN (receipt);

// Возвраты

receiptSaleDetailReceiptReturnDetail = DATA receiptSaleDetail (receiptReturnDetail);
receiptSaleReceiptReturnDetail (returnDetail) = receiptReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(returnDetail));

descriptionSaleReceiptReturnDetail 'Чек продажи' (returnDetail) =
    [FORMULA STRING[200] '\'Чек № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) ||  \' позиция \' || CAST($3 AS TEXT)'](
    numberReceipt(receiptSaleReceiptReturnDetail(returnDetail)), dateTimeReceipt(receiptSaleReceiptReturnDetail(returnDetail)), indexReceiptDetail(receiptSaleDetailReceiptReturnDetail(returnDetail)));

// Количества и суммы

quantityReceiptSaleDetail 'Количество' (receiptDetail) = DATA NUMERIC[14,3] (receiptSaleDetail);
priceReceiptSaleDetail 'Цена' (receiptDetail) = DATA NUMERIC[14,2] (receiptSaleDetail);
sumReceiptSaleDetail 'Сумма' (receiptDetail) = DATA NUMERIC[16,2] (receiptSaleDetail);
discountPercentReceiptSaleDetail 'Процент скидки' (receiptDetail) = DATA NUMERIC[6,2] (receiptSaleDetail);
discountSumReceiptSaleDetail 'Сумма скидки' (receiptDetail) = DATA NUMERIC[16,2] (receiptSaleDetail);

priceSumReceiptSaleDetail 'Сумма без скидки' = round(quantityReceiptSaleDetail(detail) * priceReceiptSaleDetail(detail), priceRoundCurrency(currencyReceiptSaleDetail (detail)));

discountSumReceiptSaleDetail (detail) <- round(priceSumReceiptSaleDetail(detail) * discountPercentReceiptSaleDetail (detail) / 100,
                                               priceRoundCurrency(currencyReceiptSaleDetail (detail)))
    WHEN CHANGED (quantityReceiptSaleDetail(detail)) OR
         CHANGED (priceReceiptSaleDetail(detail)) OR
         CHANGED (discountPercentReceiptSaleDetail(detail)) OR
         CHANGED (currencyReceiptSaleDetail (detail));

calcSumReceiptSaleDetail (detail) = priceSumReceiptSaleDetail(detail) (-) discountSumReceiptSaleDetail(detail);
sumReceiptSaleDetail (detail) <- round(calcSumReceiptSaleDetail(detail), priceRoundCurrency(currencyReceiptSaleDetail (detail)))
    WHEN CHANGED (quantityReceiptSaleDetail(detail)) OR
         CHANGED (priceReceiptSaleDetail(detail)) OR
         CHANGED (discountPercentReceiptSaleDetail(detail)) OR
         CHANGED (currencyReceiptSaleDetail(detail));

quantityReceiptReturnDetail 'Количество' (receiptDetail) = DATA NUMERIC[14,3] (receiptReturnDetail);
priceReceiptReturnDetail 'Цена' (receiptDetail) = DATA NUMERIC[14,2] (receiptReturnDetail);
sumReceiptReturnDetail 'Сумма' (receiptDetail) = DATA NUMERIC[16,2] (receiptReturnDetail);
discountSumReceiptReturnDetail 'Сумма скидки' (receiptDetail) = DATA NUMERIC[16,2] (receiptReturnDetail);

quantityReturnedReceiptSaleDetail 'Возвращено' (saleDetail) = GROUP SUM quantityReceiptReturnDetail(returnDetail) BY receiptSaleDetailReceiptReturnDetail(returnDetail) PERSISTENT;
CONSTRAINT quantityReturnedReceiptSaleDetail(detail) > quantityReceiptSaleDetail (detail) MESSAGE 'Количество возвратов по строке чека превышает проданное количество';

sumReceiptReturnDetail (detail) <- round(quantityReceiptReturnDetail(detail) * sumReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(detail)) / quantityReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(detail)),
                                         priceRoundCurrency(currencyReceiptReturnDetail (detail)))
                                   WHEN CHANGED(quantityReceiptReturnDetail(detail)) OR
                                        CHANGED(receiptSaleDetailReceiptReturnDetail(detail)) OR
                                        CHANGED(currencyReceiptReturnDetail(detail));

discountSumReceiptReturnDetail (detail) <- round(quantityReceiptReturnDetail(detail) * discountSumReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(detail)) / quantityReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(detail)),
                                                 priceRoundCurrency(currencyReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(detail))))
                                           WHEN CHANGED(quantityReceiptReturnDetail(detail)) OR
                                                CHANGED(receiptSaleDetailReceiptReturnDetail(detail)) OR
                                                CHANGED(currencyReceiptReturnDetail(detail));

quantityReceiptDetail 'Количество' (receiptDetail) = UNION CLASS quantityReceiptReturnDetail(receiptDetail), quantityReceiptSaleDetail(receiptDetail) PERSISTENT;
priceReceiptDetail 'Цена' (receiptDetail) = UNION CLASS priceReceiptReturnDetail(receiptDetail), priceReceiptSaleDetail(receiptDetail) PERSISTENT;
sumReceiptDetail 'Сумма' (receiptDetail) = UNION CLASS sumReceiptReturnDetail(receiptDetail), sumReceiptSaleDetail(receiptDetail) PERSISTENT;
discountSumReceiptDetail 'Сумма скидки' (receiptDetail) = UNION CLASS discountSumReceiptReturnDetail(receiptDetail), discountSumReceiptSaleDetail(receiptDetail) PERSISTENT;

sumReceiptSaleDetailReceipt 'Сумма продажи' (receipt) = GROUP SUM sumReceiptSaleDetail(receiptDetail)
    BY receiptReceiptSaleDetail (receiptDetail) IN documentSumGroup PERSISTENT;

sumReceiptReturnDetailReceipt 'Сумма возврата' (receipt) = GROUP SUM sumReceiptReturnDetail(receiptDetail)
    BY receiptReceiptReturnDetail (receiptDetail) IN documentSumGroup PERSISTENT;

sumReceiptDetailReceipt 'Сумма чека' (receipt) = sumReceiptSaleDetailReceipt(receipt) (-) sumReceiptReturnDetailReceipt(receipt) PERSISTENT;
sumReceiptDetailReceiptDetail 'Сумма чека' (receiptDetail) = sumReceiptDetailReceipt(receiptReceiptDetail(receiptDetail));

discountSumSaleReceiptDetailSaleReceipt 'Сумма скидки (продажи)' (receipt) = GROUP SUM discountSumReceiptSaleDetail(receiptDetail)
    BY receiptReceiptSaleDetail (receiptDetail) IN documentSumGroup;
discountSumSaleReceipt 'Сумма скидки (продажи) по чеку' (receipt) = DATA NUMERIC[16,2] (receipt);

discountSumReturnReceiptDetailReturnReceipt 'Сумма скидки (возврат)' (receipt) = GROUP SUM discountSumReceiptReturnDetail(receiptDetail)
    BY receiptReceiptReturnDetail (receiptDetail) IN documentSumGroup;
discountSumReturnReceipt 'Сумма скидки (возврат) по чеку' (receipt) = DATA NUMERIC[16,2] (receipt);

discountSumReceiptDetailReceipt 'Сумма скидки' (receipt) = discountSumSaleReceiptDetailSaleReceipt(receipt) (-) discountSumReturnReceiptDetailReturnReceipt(receipt);
discountSumReceipt 'Сумма скидки по чеку' (receipt) = discountSumSaleReceipt(receipt) (-) discountSumReturnReceipt(receipt);

@defineDocumentHeaderCount(receipt);

@defineDocumentHeaderQuantity(receipt);
@defineDocumentHeaderSkuQuantity(receipt, sku);
@defineDocumentHeaderSkuQuantityCustom(receipt, receiptSaleDetail, sku);

// -------------------------------------------------- НДС ------------------------------------------------ //

overVATRetailSkuDepartmentStoreDateTime = ABSTRACT range (sku, departmentStore, DATETIME);
VATRetailSkuDepartmentStoreDateTime (sku, departmentStore, dateTime) = VATSkuCountryDate(sku, countryStock(departmentStore AS departmentStore), toDate(dateTime)) OR
                                                                       overVATRetailSkuDepartmentStoreDateTime(sku, departmentStore, dateTime);

VATReceiptSaleDetail = DATA range (receiptSaleDetail);
CONSTRAINT taxRange(VATReceiptSaleDetail(detail)) != tax.taxVAT OR
           countryRange(VATReceiptSaleDetail(detail)) != countryStock(departmentStoreReceiptSaleDetail(detail))
           CHECKED BY VATReceiptSaleDetail
           MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС и стране магазина';

VATSumSaleZReport 'Сумма НДС по продажам' (zReport) = DATA NUMERIC[16,2] (zReport);

VATReceiptReturnDetail = DATA range (receiptReturnDetail);
CONSTRAINT taxRange(VATReceiptReturnDetail(detail)) != tax.taxVAT OR
           countryRange(VATReceiptReturnDetail(detail)) != countryStock(departmentStoreReceiptReturnDetail(detail))
           CHECKED BY VATReceiptReturnDetail
           MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС и стране магазина';

VATSumReturnZReport 'Сумма НДС по возвратам' (zReport) = DATA NUMERIC[16,2] (zReport);

VATReceiptDetail (receiptDetail) = UNION CLASS VATReceiptReturnDetail(receiptDetail), VATReceiptSaleDetail(receiptDetail) PERSISTENT;
numberVATReceiptDetail 'НДС, номер' (receiptDetail) = numberRange(VATReceiptDetail(receiptDetail));
valueVATReceiptDetail 'НДС, %' (receiptDetail) = valueRateRangeDate(VATReceiptDetail(receiptDetail), dateReceiptDetail(receiptDetail));

// используется только для приема реализации из внешних касс
numberReceiptDetail 'Номер позиции чека' = DATA INTEGER (receiptDetail);
zReportReceiptReceiptDetailToReceiptDetail (zReport, receipt, receiptDetail, cashRegister) = GROUP UNIQUE receiptDetail BY numberZReport(zReportReceiptDetail(receiptDetail)), numberReceipt(receiptReceiptDetail(receiptDetail)), numberReceiptDetail(receiptDetail), numberCashRegister(cashRegisterZReport(zReportReceiptDetail(receiptDetail))) WHERE receiptDetail IS receiptDetail;
//

descriptionReceipt 'Название документа' (receipt) = [FORMULA STRING[200] '\'Чек № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) '](
                                               numberReceipt(receipt), dateTimeReceipt(receipt));

descriptionReceiptSaleDetail (receiptDetail) = [FORMULA STRING[200] '\'Продажа № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) '] (
                                          numberReceipt(receiptReceiptSaleDetail(receiptDetail)), dateTimeReceipt(receiptReceiptSaleDetail(receiptDetail)));

descriptionReceiptReturnDetail (receiptDetail) = [FORMULA STRING[200] '\'Возврат № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) '] (
                                            numberReceipt(receiptReceiptReturnDetail(receiptDetail)), dateTimeReceipt(receiptReceiptReturnDetail(receiptDetail)));

descriptionReceiptDetail (receiptDetail) = descriptionReceiptReturnDetail(receiptDetail) OR descriptionReceiptSaleDetail(receiptDetail);

@defineAddDetailDialogSkuStockCustom(receipt, receiptSaleDetail, ' (продажа)', sku, departmentStore, dialogSku);
@defineAddDetailDialogSkuStockCustom(receipt, receiptReturnDetail, ' (возврат)', sku, departmentStore, dialogSku);

// -------------------------------------------- Проведение по регистрам --------------------------------------- //

@implementSkuLedgerOutFIFO(receiptSaleDetail, sku, departmentStore);
quantityOutFIFOSkuLedger (ledger) += quantityReceiptSaleDetail(ledger);
@implementSkuLedgerOutFIFOBalance(receiptSaleDetail, departmentStore);
sumOutSkuLedger (ledger) += sumReceiptSaleDetail(ledger);

@implementSkuLedgerInLIFO(receiptReturnDetail, sku, departmentStore);
quantityInLIFOSkuLedger (ledger) += quantityReceiptReturnDetail(ledger);
@implementSkuLedgerInLIFOBalance(receiptReturnDetail, departmentStore);
sumInSkuLedger (ledger) += sumReceiptReturnDetail(ledger);

@implementSaleLedger(receiptSale, sku, departmentStore);
quantitySaleLedger (ledger) += quantityReceiptSaleDetail(ledger);
VATSaleLedger (ledger) += VATReceiptSaleDetail(ledger);
sumSaleLedger (ledger) += sumReceiptSaleDetail(ledger);

// ----------------- Оплаты по чеку ------------------------------

CLASS payment 'Оплата по чеку';
TABLE payment (payment);

CLASS STATIC paymentMeans 'Форма оплаты'{
    paymentMeansCash 'Наличные',
    paymentMeansCard 'Карточка'
};
CLASS paymentType 'Тип платежа' : named;
TABLE paymentType (paymentType);

paymentMeansPaymentType (paymentType) = DATA paymentMeans (paymentType);
namePaymentMeansPaymentType 'Форма оплаты' (paymentType) = name(paymentMeansPaymentType(paymentType)) IN base;

sidPaymentType 'Идентификатор' = DATA STRING[10] (paymentType) IN base;
sidToTypePayment (tp) = GROUP UNIQUE paymentType BY sidPaymentType(paymentType) WHERE paymentType IS paymentType;

receiptPayment (payment) = DATA receipt (payment) NOT NULL DELETE;

countPaymentReceipt 'Кол-во типов платежей' (receipt) = GROUP SUM 1 IF receiptPayment(payment) == receipt BY receipt;

paymentTypePayment (payment) = DATA paymentType(payment);
namePaymentTypePayment 'Тип платежа' (payment) = name(paymentTypePayment(payment));
sidPaymentTypePayment 'ID Типа платежа' (payment) = sidPaymentType(paymentTypePayment(payment));

minCashPaymentType () = GROUP MIN paymentType IF paymentMeansPaymentType(paymentType) == paymentMeans.paymentMeansCash;
minCardPaymentType () = GROUP MIN paymentType IF paymentMeansPaymentType(paymentType) == paymentMeans.paymentMeansCard;

paymentMeansPayment (payment) = paymentMeansPaymentType(paymentTypePayment(payment));
namePaymentMeansPayment 'Форма оплаты' (payment) = name(paymentMeansPayment(payment));

numberPayment 'Номер платежа' (payment) = DATA INTEGER (payment);
zReportReceiptPaymentToPayment (zReport, receipt, number, cashRegister) = GROUP UNIQUE payment BY numberZReport(zReportReceipt(receiptPayment(payment))), numberReceipt(receiptPayment(payment)), numberPayment(payment), numberCashRegister(cashRegisterZReport(zReportReceipt(receiptPayment(payment)))) WHERE payment IS payment;

sumPayment 'Сумма платежа' (payment) = DATA NUMERIC[16,2] (payment);

sumPaymentReceipt (receipt) = GROUP SUM sumPayment(payment) BY receiptPayment(payment);

sumInCashPaymentReceipt (receipt) = GROUP SUM sumPayment(payment) AND paymentMeansPayment(payment) == paymentMeans.paymentMeansCash  BY receiptPayment(payment);

changePaymentReceipt 'Сдача' (receipt) = sumPaymentReceipt(receipt) - sumReceiptDetailReceipt(receipt);

sumCashPaymentReceipt (receipt) = sumInCashPaymentReceipt(receipt) - changePaymentReceipt(receipt);
sumNotCashPaymentReceipt (receipt) = GROUP SUM sumPayment(payment) AND NOT paymentMeansPayment(payment) == paymentMeans.paymentMeansCash BY receiptPayment(payment);

CONSTRAINT receipt IS receipt AND NOT sumPaymentReceipt(receipt) MESSAGE 'По чеку не указаны платежи';
CONSTRAINT sumReceiptDetailReceipt(receipt) > sumPaymentReceipt(receipt) MESSAGE 'Сумма платежей по чеку меньше суммы чека';
CONSTRAINT sumReceiptDetailReceipt(receipt) < sumNotCashPaymentReceipt(receipt) MESSAGE 'Сумма платежей по безналичному расчету больше суммы чека';

// Итоги по Z-отчету

@defineDocumentHeaderQuantityCustom(zReport, receiptDetail);

sumCashZReport 'Сумма наличных Z-отчета' (zReport) = GROUP SUM sumCashPaymentReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT IN documentSumGroup;
sumCashIncomeCashOrder(zReport) += sumCashZReport(zReport);
sumReceiptDetailZReport 'Сумма Z-отчета' (zReport) = GROUP SUM sumReceiptDetailReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT IN documentSumGroup;
discountSumReceiptDetailZReport 'Сумма скидок Z-отчета' (zReport) = GROUP SUM discountSumReceiptDetailReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT IN documentSumGroup;
discountSumReceiptZReport 'Сумма скидок по чекам Z-отчета' (zReport) = GROUP SUM discountSumReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT IN documentSumGroup;
discountSumZReport 'Сумма скидок Z-отчета' (zReport) = discountSumReceiptDetailZReport(zReport) (+) discountSumReceiptZReport(zReport);

sumCardDepartmentStoreDateFromTo 'Продано с использованием банк. карточек' (departmentStore, dateFrom, dateTo) = GROUP SUM sumPayment(payment) AND paymentMeansPayment(payment)==paymentMeans.paymentMeansCard
    AND dateReceipt(receiptPayment(payment)) >= (dateFrom AS DATE) AND dateReceipt(receiptPayment(payment)) <= (dateTo AS DATE) AND isPostedReceipt(receiptPayment(payment))
        BY departmentStoreReceipt(receiptPayment(payment)), dateFrom, dateTo;

sumSaleDepartmentStoreDateFromTo 'Продано по кассе' (departmentStore, dateFrom, dateTo) = GROUP SUM sumReceiptDetailReceipt(receipt)
    AND dateReceipt(receipt) >= (dateFrom AS DATE) AND dateReceipt(receipt) <= (dateTo AS DATE) AND isPostedReceipt(receipt)
        BY departmentStoreReceipt(receipt), dateFrom, dateTo;

// ----------------------------------- Проведение по товарному отчету -------------------------- //

@implementStockDocumentLedgerOut(zReport, departmentStore);
sumOutStockDocumentLedger (ledger) += sumReceiptDetailZReport(ledger);
sumItemOutStockDocumentLedger (ledger) += sumReceiptDetailZReport(ledger);
sumContainerOutStockDocumentLedger (ledger) += 0.0 IF ledger IS zReport;

//----------------------------------- Формы -------------------------------------------------//

FORM zReport 'Z-отчет'
    OBJECTS z=zReport FIXED PANEL
    PROPERTIES (z) numberCashRegisterZReport, nameDepartmentStoreZReport READONLY, dateZReport, timeZReport, numberZReport,
                   basisZReport, countReceiptZReport, quantityReceiptDetailZReport, sumCashZReport, sumReceiptDetailZReport,
                   discountSumReceiptDetailZReport, VATSumSaleZReport, VATSumReturnZReport

    OBJECTS b=receipt, d=receiptDetail
    PROPERTIES(b) numberReceipt, dateReceipt, timeReceipt, nameUserReceipt,
                  numberDiscountCardReceipt, nameClientDiscountCardReceipt, sumReceiptDetailReceipt, discountSumReceiptDetailReceipt,
                  discountSumReceipt, countReceiptDetailReceipt, quantityReceiptDetailReceipt, exportReceipt, ADDOBJ, delete
    FILTERS zReportReceipt(b)==z

    PROPERTIES(b) TODRAW d addDetailDialogSkuStockReceiptSaleDetailReceipt, addDetailDialogSkuStockReceiptReturnDetailReceipt
                           // todo : добавить операции возврата по штрих-коду

    PROPERTIES(d) typeReceiptDetail, idBarcodeReceiptDetail, nameSkuReceiptDetail, quantityReceiptDetail, quantityReturnedReceiptSaleDetail FORCE GRID, priceReceiptDetail,
                  sumReceiptDetail, discountPercentReceiptSaleDetail FORCE GRID, discountSumReceiptDetail, descriptionSaleReceiptReturnDetail, numberVATReceiptDetail, ADDOBJ, delete

    FILTERS receiptReceiptDetail(d)==b

    OBJECTS p=payment
    PROPERTIES(p) namePaymentTypePayment, namePaymentMeansPayment, sumPayment, ADDOBJ, delete

    FILTERS receiptPayment(p)==b

    EDIT zReport OBJECT z
;

DESIGN zReport FROM DEFAULT{

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        NEW firstCase {

            type = SPLITV;

            ADD z.box;
            ADD b.box;
        }

        NEW secondCase{

            type = SPLITH;
            childConstraints = TO THE RIGHT;

            ADD d.box{
                title = 'Строка чека';
                fillHorizontal = 3;
            }
            ADD p.box;
        }
    }

    ADD functions.box;
}

FORM zReports 'Z-отчеты'
    OBJECTS z=zReport
    PROPERTIES (z) READONLY objectClassName, numberCashRegisterZReport, nameDepartmentStoreZReport, dateZReport, timeZReport,
                            numberZReport, basisZReport, countReceiptZReport, quantityReceiptDetailZReport, sumCashZReport,
                            sumReceiptDetailZReport, discountSumReceiptDetailZReport, VATSumSaleZReport, VATSumReturnZReport
    PROPERTIES (z) ADDFORM, EDITFORM SHOWIF isDraftZReport(z), delete FORCE PANEL DRAWTOTOOLBAR SHOWIF isDraftZReport(z),
                            exportReceiptsZReport FORCE PANEL DRAWTOTOOLBAR, importReceiptsZReport FORCE PANEL DRAWTOTOOLBAR,
                            postZReport SHOWIF isDraftZReport(z), unpostZReport SHOWIF isPostedZReport(z)

    OBJECTS b=receipt
    PROPERTIES(b) READONLY  numberReceipt, dateReceipt, timeReceipt, nameUserReceipt,
                            numberDiscountCardReceipt, nameClientDiscountCardReceipt, sumReceiptDetailReceipt, discountSumReceiptDetailReceipt,
                            discountSumReceipt, countReceiptDetailReceipt, quantityReceiptDetailReceipt
    PROPERTIES(b)           exportReceipt

    FILTERS zReportReceipt(b)==z
    ORDER BY                numberReceipt

    OBJECTS d=receiptDetail
    PROPERTIES(d) READONLY  typeReceiptDetail, idBarcodeReceiptDetail, nameSkuReceiptDetail, quantityReceiptDetail, quantityReturnedReceiptSaleDetail FORCE GRID, priceReceiptDetail,
                            costSumSkuLedger, sumReceiptDetail, discountPercentReceiptSaleDetail FORCE GRID, discountSumReceiptDetail, descriptionSaleReceiptReturnDetail

    FILTERS receiptReceiptDetail(d)==b

    OBJECTS p=payment
    PROPERTIES(p) READONLY  receiptPayment, namePaymentTypePayment, namePaymentMeansPayment, sumPayment

    FILTERS receiptPayment(p)==b
;
@extendFormFilterAccess(zReport, z, zReports, departmentStore);

DESIGN zReports FROM DEFAULT{

    NEW topContainer{

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        NEW firstCase {

            type = SPLITV;

            ADD z.box;
            ADD b.box;
        }

        NEW secondCase{

            type = SPLITH;
            childConstraints = TO THE RIGHT;

            ADD d.box{
                title = 'Строка чека';
                fillHorizontal = 3;
            }
            ADD p.box;
        }
    }

    PROPERTY(objectClassName) {
        preferredCharWidth = 15;
    }
    PROPERTY (delete(z)) {
        askConfirm = TRUE;
    }

    ADD functions.box;
}