MODULE PurchaseReturnShipment;

REQUIRE Shipment, PurchaseReturnInvoice;

NAMESPACE PurchaseReturn;

//----------------------------------------------- Поставка ---------------------------------------------------//
@defineShipment(' (закупка-возврат)', customerStock, showPurchasePack, 'Отображать упаковку', purchasePack);
@defineShipmentBatch(customerStock);

@defineShipmentStockDestination(customerStock, supplierStock);

// Берем учетную цену
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (userShipment, accountPriceListType, , , sku, supplierStock);
shipmentPriceUserInvoiceDetail(detail) <- calcShipmentPriceUserInvoiceDetail(detail) (+) extraShipmentPriceUserInvoiceDetail(detail) WHEN
    (CHANGED(calcShipmentPriceUserInvoiceDetail(detail)) OR CHANGED(extraShipmentPriceUserInvoiceDetail(detail)) OR CHANGED(createShipmentUserInvoiceDetail(detail)))
        AND createShipmentUserInvoiceDetail(detail);

// Проводим по регистру

@implementSkuLedgerOutFIFO(shipmentDetail, sku, customerStock);
quantityOutFIFOSkuLedger (ledger) += quantityShipmentDetail(ledger);
limitOutFIFOSkuLedgerBatch(ledger, batch) += IF batchShipmentDetail(ledger) THEN
                                                quantityShipmentDetail (ledger) AND batchShipmentDetail(ledger) == batch
                                                ELSE currentBalanceBatchStock(batch, customerStockShipmentDetail(ledger)); //AND NOT commissionContractSkuBatchA(batch);
changedDataSkuLedger(ledger) += CHANGED(batchShipmentDetail(ledger));
sumOutSkuLedger (ledger) += sumShipmentDetail(ledger);

@implementStockDocumentLedgerOut(shipment, customerStock);
sumOutStockDocumentLedger (ledger) += sumShipmentDetailShipment(ledger);
sumItemOutStockDocumentLedger (ledger) += sumItemShipmentDetailShipment(ledger);
sumContainerOutStockDocumentLedger (ledger) += sumContainerShipmentDetailShipment(ledger);

CONSTRAINT supplierUserShipment(userShipment) AND NOT isSupplierLegalEntity(supplierUserShipment(userShipment))
    CHECKED BY supplierUserShipment MESSAGE 'Для поставки выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerUserShipment(userShipment) AND NOT isCompanyLegalEntity(customerUserShipment(userShipment))
    CHECKED BY customerUserShipment MESSAGE 'Для поставки выбрано в качестве покупателя организация, не являющаяся компанией';