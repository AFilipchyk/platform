MODULE PurchaseDeclaration;

REQUIRE Declaration, PurchaseCertificate, PurchaseInvoice;

NAMESPACE Purchase;

@defineDocumentCertificateObject(declaration, invoice, i, 'Таможенная декларация');
@defineDocumentCertificateObject(declaration, shipment, s, 'Таможенная декларация');

declarationShipmentDetail(detail) += declarationInvoiceDetail(invoiceDetailInvoiceShipmentDetail(detail));

overFillInvoiceUserShipmentDetailInvoiceDetail(s, i) += ACTION (s, i) {
    SET dataDeclarationUserShipmentDetail(s) <- declarationInvoiceDetail(i);
}

declarationBatch (batch) += declarationShipmentDetail(shipmentDetailShipmentBatch(batch));

//---------------------------------- накладные для декларации --------------------------------------------------------//
inDeclarationInvoice 'Вкл.' (declaration, invoice) = declarationUserInvoice(invoice)==declaration;

inDeclarationInvoiceDetail 'Вкл.' (declaration, invoiceDetail) = dataDeclarationUserInvoiceDetail(invoiceDetail)==declaration;

invoicesDeclaration 'Накладные' (declaration) =
    GROUP CONCAT shortDescriptionInvoice(invoice) IF inDeclarationInvoice (declaration, invoice), ','
              BY declaration ORDER invoice PERSISTENT MINCHARWIDTH 40 PREFCHARWIDTH 80 MAXCHARWIDTH 120;

backgroundCustomedInvoice 'Цвет' (invoice) = RGB(255, 224, 224) IF invoice IS Invoice;

// свойства товаров
nameCustomsSku 'Наименование (декл.)' = ABSTRACT STRING[200](Sku);
nameCustomsSku(sku) += nameSku(sku);

nameCustomsUserInvoiceDetail 'Наименование (декл.)' (userInvoiceDetail) = nameCustomsSku(skuUserInvoiceDetail(userInvoiceDetail));

countrySkuUserInvoiceDetail (userInvoiceDetail) = countrySku(skuUserInvoiceDetail(userInvoiceDetail));
nameCountrySkuUserInvoiceDetail 'Страна' (userInvoiceDetail) = nameCountry(countrySkuUserInvoiceDetail(userInvoiceDetail));

UOMUserInvoiceDetail(userInvoiceDetail) = UOMSku(skuUserInvoiceDetail(userInvoiceDetail));

customsGroupInvoiceDetail = ABSTRACT CustomsGroup(InvoiceDetail);
customsGroupUserInvoiceDetail = DATA CustomsGroup(UserInvoiceDetail);
customsGroupInvoiceDetail(detail) += customsGroupUserInvoiceDetail(detail);

codeCustomsGroupInvoiceDetail 'ТН ВЭД' (invoiceDetail) = codeCustomsGroup(customsGroupInvoiceDetail(invoiceDetail)) MINCHARWIDTH 10;

customsGroupUserInvoiceDetail(invoiceDetail) <- customsGroupCountrySku(countryInvoiceDetail(invoiceDetail), skuInvoiceDetail(invoiceDetail))
    WHEN CHANGED(countryInvoiceDetail(invoiceDetail)) OR CHANGED(skuInvoiceDetail(invoiceDetail));

sumNetWeightInvoiceDetail 'Вес нетто' (invoiceDetail) = netWeightSku(skuUserInvoiceDetail(invoiceDetail)) * quantityUserInvoiceDetail(invoiceDetail);
sumGrossWeightInvoiceDetail 'Вес брутто' (invoiceDetail) = grossWeightSku(skuUserInvoiceDetail(invoiceDetail)) * quantityUserInvoiceDetail(invoiceDetail);

FORM declarationInvoices 'Накладные декларации'
    OBJECTS d=Declaration FIXED PANEL
    PROPERTIES(d) seriesNumberObject, nameLegalEntityDeclaration, nameCurrencyDeclaration, dateTimeDeclaration

    OBJECTS i=UserInvoice
    PROPERTIES (d, i) inDeclarationInvoice
    PROPERTIES (i) READONLY numberObject, seriesObject, dateUserInvoice, timeUserInvoice, nameSupplierUserInvoice, nameCustomerUserInvoice
    FILTERS inDeclarationInvoice(d, i) OR d IS Declaration AND NOT declarationUserInvoice(i)

    OBJECTS id=UserInvoiceDetail
    PROPERTIES(d, id) inDeclarationInvoiceDetail
    PROPERTIES(id) READONLY indexUserInvoiceDetail, idBarcodeSkuUserInvoiceDetail, nameSkuUserInvoiceDetail, shortNameUOMSkuUserInvoiceDetail,
                   quantityUserInvoiceDetail, priceUserInvoiceDetail
    FILTERS invoiceInvoiceDetail(id)==i

    FILTERGROUP filtersCurrency
        FILTER 'Только с валютой декларации' 'F10' currencyDeclaration(d)==currencyUserInvoice(i) DEFAULT

    FILTERGROUP filtersImporter
        FILTER 'Только импортёра декларации' 'F11' legalEntityDeclaration(d)==customerUserInvoice(i) DEFAULT
;

showFormDeclarationInvoices 'Накладные декларации' = ACTION (declaration) {
    FORM declarationInvoices OBJECTS d=declaration MODAL;
    EXEC apply();
} TOOLBAR;

EXTEND FORM declaration
    PROPERTIES(d) invoicesDeclaration

    OBJECTS id=UserInvoiceDetail
    PROPERTIES(id) READONLY seriesNumberInvoiceDetail, idBarcodeSkuUserInvoiceDetail, nameSkuUserInvoiceDetail, shortNameUOMSkuUserInvoiceDetail,
                   nameCustomsUserInvoiceDetail, nameCountrySkuUserInvoiceDetail, sumNetWeightInvoiceDetail, quantityUserInvoiceDetail, priceUserInvoiceDetail
    PROPERTIES(id) codeCustomsGroupInvoiceDetail
    PROPERTIES(id) READONLY homePriceInvoiceDetail, sumHomeInvoiceDetail

    PROPERTIES (d) showFormDeclarationInvoices TODRAW id FORCE PANEL TOOLBAR
    FILTERS declarationUserInvoiceDetail(id) == d
;

EXTEND DESIGN declaration {
    main {
        parameterContainer {
            ADD PROPERTY(invoicesDeclaration);
        }

        ADD id.box {
            fillVertical = 2;
        }
    }
    ADD functions.box;
}

showDeclarationInvoice 'Таможенные платежи' = ABSTRACT BOOLEAN(Invoice);
showDeclarationUserInvoice 'Таможенные платежи' = DATA BOOLEAN(UserInvoice) IN documentPrmGroup;
showDeclarationInvoice(invoice) += showDeclarationUserInvoice(invoice);

//------------------------------------------ позиции декларации -------------------------------------------------------//
TABLE declarationNameUOMCustomsGroupCountryPrice(Declaration, STRING[200], UOM, CustomsGroup, Country, NUMERIC[14,2]);

quantityGroupDeclaration 'Кол-во' = GROUP SUM quantityUserInvoiceDetail(userInvoiceDetail)
                                           BY declarationUserInvoiceDetail(userInvoiceDetail),
                                              nameCustomsUserInvoiceDetail(userInvoiceDetail),
                                              UOMUserInvoiceDetail(userInvoiceDetail),
                                              customsGroupInvoiceDetail(userInvoiceDetail),
                                              countrySkuUserInvoiceDetail(userInvoiceDetail),
                                              priceUserInvoiceDetail(userInvoiceDetail) PERSISTENT;

CLASS DeclarationDetail 'Позиция декларации';
TABLE declarationDetail(DeclarationDetail);

declarationDeclarationDetail = DATA Declaration(DeclarationDetail);

dateDeclarationDetail 'Дата' (declarationDetail) = dateDeclaration(declarationDeclarationDetail(declarationDetail));

@defineDocumentPosted(declaration);

rateExchangeDeclarationDetail 'Курс' = rateExchangeDeclaration(declarationDeclarationDetail(declarationDetail));

roundCurrencyDeclarationDetail '' (number, declarationDetail) = roundCurrencyDeclaration(number, declarationDeclarationDetail(declarationDetail));

nameCustomsDeclarationDetail 'Наименование' = DATA STRING[200](DeclarationDetail);

UOMDeclarationDetail = DATA UOM(DeclarationDetail);
shortNameUOMDeclarationDetail 'Ед. изм.' (declarationDetail) = shortNameUOM(UOMDeclarationDetail(declarationDetail));

customsGroupDeclarationDetail = DATA CustomsGroup(DeclarationDetail);
codeCustomsGroupDeclarationDetail 'ТН ВЭД' (declarationDetail) = codeCustomsGroup(customsGroupDeclarationDetail(declarationDetail)) MINCHARWIDTH 10 MAXCHARWIDTH 10 PREFCHARWIDTH 10;

countryDeclarationDetail = DATA Country(DeclarationDetail);
nameCountryDeclarationDetail 'Страна' (declarationDetail) = nameCountry(countryDeclarationDetail(declarationDetail));
sidCountryDeclarationDetail 'Код страны' (declarationDetail) = sidCountry(countryDeclarationDetail(declarationDetail));
sidOrigin2CountryDeclarationDetail 'Код страны' (declarationDetail) = sidOrigin2Country(countryDeclarationDetail(declarationDetail));

priceDeclarationDetail 'Цена' = DATA NUMERIC[14,3](DeclarationDetail);

numberDefaultDeclarationDetail 'Номер' (declarationDetail) =
        PARTITION SUM 1 IF declarationDetail IS DeclarationDetail BY declarationDeclarationDetail(declarationDetail)
        ORDER declarationDetail;

userNumberDeclarationDetail 'Пользовательский номер' (declarationDetail) = DATA INTEGER (DeclarationDetail);
numberDeclarationDetail 'Номер' (declarationDetail) = numberDefaultDeclarationDetail(declarationDetail) OVERRIDE userNumberDeclarationDetail(declarationDetail);

declarationDetailUserNumberNameCustoms (number, name) = GROUP AGGR declarationDetail BY
        userNumberDeclarationDetail(declarationDetail), nameCustomsDeclarationDetail(declarationDetail)
        WHERE declarationDetail IS DeclarationDetail;

declarationDetailInvoiceDetail(invoiceDetail) = DATA DeclarationDetail(InvoiceDetail);
inInvoiceDetailDeclarationDetail 'Вкл.' (invoiceDetail, declarationDetail) = declarationDetailInvoiceDetail(invoiceDetail)==declarationDetail;

sumDataNetWeightDeclarationDetail 'Вес нетто' = DATA NUMERIC[14,3](DeclarationDetail);
sumDataGrossWeightDeclarationDetail 'Вес брутто' = DATA NUMERIC[14,3](DeclarationDetail);

// агрегированные свойства
sumNetWeightDeclarationDetail 'Вес нетто' (declarationDetail) = GROUP SUM sumNetWeightInvoiceDetail(invoiceDetail) BY declarationDetailInvoiceDetail(invoiceDetail) PERSISTENT;
overSumNetWeightDeclarationDetail 'Вес нетто' (declarationDetail) = sumNetWeightDeclarationDetail(declarationDetail) OVERRIDE sumDataNetWeightDeclarationDetail(declarationDetail);

sumGrossWeightDeclarationDetail 'Вес брутто' (declarationDetail) = GROUP SUM sumGrossWeightInvoiceDetail(invoiceDetail) BY declarationDetailInvoiceDetail(invoiceDetail) PERSISTENT;
overSumGrossWeightDeclarationDetail 'Вес брутто' (declarationDetail) =  sumGrossWeightDeclarationDetail(declarationDetail) OVERRIDE sumDataGrossWeightDeclarationDetail(declarationDetail);

quantityDeclarationDetail 'Кол-во' (declarationDetail) = GROUP SUM quantityUserInvoiceDetail(invoiceDetail) BY declarationDetailInvoiceDetail(invoiceDetail) PERSISTENT;

sumDeclarationDetail 'Стоимость (валют.)' (declarationDetail) = priceDeclarationDetail(declarationDetail) * quantityDeclarationDetail(declarationDetail);

sumRateDeclarationDetail 'Стоимость (расч.)' (declarationDetail) = sumDeclarationDetail(declarationDetail) * rateExchangeDeclarationDetail(declarationDetail) MINCHARWIDTH 12 PERSISTENT;

sumRateDeclaration 'Сумма' (declaration) = GROUP SUM sumRateDeclarationDetail(declarationDetail) BY declarationDeclarationDetail(declarationDetail) PERSISTENT;

sumDataDeclarationDetail 'Стоимость' (declarationDetail) = DATA NUMERIC[14,3](DeclarationDetail) MINCHARWIDTH 12;

inDeclarationDetailInvoice = GROUP SUM 1 BY declarationDetailInvoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);

invoicesDeclarationDetail 'Накладные' (declarationDetail) =
    GROUP CONCAT seriesNumberObject(invoice) IF inDeclarationDetailInvoice(declarationDetail, invoice) , ','
              BY declarationDetail ORDER invoice PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 40 MAXCHARWIDTH 60;

// Таможенные платежи
// пошлины
sumWeightDutyDeclarationDetail 'Пошлина по весу (валют.)' (declarationDetail) = overSumNetWeightDeclarationDetail(declarationDetail)*
                                                                                weightDutyCustomsGroupDate(customsGroupDeclarationDetail(declarationDetail), dateDeclarationDetail(declarationDetail));

sumRateWeightDutyDeclarationDetail 'Пошлина по весу' (declarationDetail) = sumWeightDutyDeclarationDetail(declarationDetail) *
                                                                           rateExchangeCustomsZoneDeclaration(declarationDeclarationDetail(declarationDetail)) PERSISTENT;

sumPriceDutyDeclarationDetail 'Пошлина по стоимости (валют.)' (declarationDetail) = sumDeclarationDetail(declarationDetail) *
                                                                                    (percentDutyCustomsGroupDate(customsGroupDeclarationDetail(declarationDetail), dateDeclarationDetail(declarationDetail))/100);

sumRatePriceDutyDeclarationDetail 'Пошлина по стоимости' (declarationDetail) = sumPriceDutyDeclarationDetail(declarationDetail) *
                                                                               rateExchangeDeclarationDetail(declarationDetail) PERSISTENT;

sumRateDutyDeclarationDetail 'Пошлина (расч.)' (declarationDetail) = roundCurrencyDeclarationDetail((UNION MAX sumRateWeightDutyDeclarationDetail(declarationDetail),
                                                                                                               sumRatePriceDutyDeclarationDetail(declarationDetail)), declarationDetail) PERSISTENT MINCHARWIDTH 12;

sumDutyDataDeclarationDetail 'Пошлина' (declarationDetail) = DATA NUMERIC[14,3](DeclarationDetail) MINCHARWIDTH 12;

sumRateDutyDeclaration 'Пошлина' (declaration) = GROUP SUM sumDutyDataDeclarationDetail(declarationDetail) BY declarationDeclarationDetail(declarationDetail) PERSISTENT MINCHARWIDTH 12;

//НДС
VATRangeDataDeclarationDetail 'Шкала НДС (ИД)' = DATA Range(DeclarationDetail);
numberVATRangeDataDeclarationDetail 'Шкала НДС' (declarationDetail) = numberRange(VATRangeDataDeclarationDetail(declarationDetail));
percentVATRangeDeclarationDetail 'НДС, %' (declarationDetail) = valueRateRangeDate(VATRangeDataDeclarationDetail(declarationDetail), dateDeclarationDetail(declarationDetail));

numberVATRangeCustomGroupDeclarationDetail 'Шкала НДС (расч.)' (declarationDetail) = numberRange(supplierVATCustomsGroupDate(customsGroupDeclarationDetail(declarationDetail), dateDeclarationDetail(declarationDetail)));
percentVATCustomsGroupDeclarationDetail 'НДС, %' (declarationDetail) = dataValueSupplierVATCustomsGroupDate(customsGroupDeclarationDetail(declarationDetail), dateDeclarationDetail(declarationDetail));

percentVATDeclarationDetail 'НДС, %' (declarationDetail) = percentVATCustomsGroupDeclarationDetail(declarationDetail) OVERRIDE percentVATRangeDeclarationDetail(declarationDetail);

sumRateVATDeclarationDetail 'НДС (расч.)' (declarationDetail) = roundCurrencyDeclarationDetail((sumRateDeclarationDetail(declarationDetail) + sumRateDutyDeclarationDetail(declarationDetail)) *
                                                                 (percentVATDeclarationDetail(declarationDetail)/100), declarationDetail) MINCHARWIDTH 12;

sumVATDataDeclarationDetail 'НДС' (declarationDetail) = DATA NUMERIC[14,3](DeclarationDetail) MINCHARWIDTH 12;

sumRateVATDeclaration 'НДС' (declaration) = GROUP SUM sumVATDataDeclarationDetail(declarationDetail) BY declarationDeclarationDetail(declarationDetail) PERSISTENT MINCHARWIDTH 12;

// оформление
sumRegistrationDeclarationDetail 'Таможенный сбор (валют.)' (declarationDetail) = registrationCustomsGroupDate(customsGroupDeclarationDetail(declarationDetail), dateDeclarationDetail(declarationDetail));

sumRegistrationMaxDeclaration 'Таможенный сбор (валют.)' (declaration) = GROUP MAX sumRegistrationDeclarationDetail(declarationDetail) BY declarationDeclarationDetail(declarationDetail) PERSISTENT;

sumRegistrationRateDeclaration 'Таможенный сбор' (declaration) = roundCurrencyDeclaration(sumRegistrationMaxDeclaration(declaration) *
                                                                                          rateExchangeCustomsZoneDeclaration(declaration), declaration) MINCHARWIDTH 12;

sumRegistrationDataDeclaration 'Таможенный сбор' = DATA NUMERIC[14,3](Declaration);

sumRegistrationDeclaration 'Таможенный сбор' (declaration) = sumRegistrationRateDeclaration(declaration) OVERRIDE sumRegistrationDataDeclaration(declaration);

setSumDeclarationDetail 'Рассчитать суммы' = ACTION (declaration) {
   FOR declarationDeclarationDetail(declarationDetail) == declaration DO {
      SET sumDataDeclarationDetail(declarationDetail) <- sumRateDeclarationDetail(declarationDetail);
      SET sumDutyDataDeclarationDetail(declarationDetail) <- sumRateDutyDeclarationDetail(declarationDetail);
      SET sumVATDataDeclarationDetail(declarationDetail) <- sumRateVATDeclarationDetail(declarationDetail);
   };
};

toCreateDeclarationDetails 'Создать позиции' = ACTION (declaration) {
    FOR quantityGroupDeclaration(declaration, customsName, UOM, customsGroup, country, price)>0 ADDOBJ dd=DeclarationDetail DO {
        SET declarationDeclarationDetail(dd) <- declaration;
        SET nameCustomsDeclarationDetail(dd) <- customsName;
        SET UOMDeclarationDetail(dd) <- UOM;
        SET customsGroupDeclarationDetail(dd) <- customsGroup;
        SET countryDeclarationDetail(dd) <- country;
        SET priceDeclarationDetail(dd) <- price;

        SET declarationDetailInvoiceDetail(invoiceDetail) <- dd WHERE declarationUserInvoiceDetail(invoiceDetail) == declaration AND
            nameCustomsUserInvoiceDetail(invoiceDetail) == customsName AND UOMUserInvoiceDetail(invoiceDetail) == UOM AND
            customsGroupInvoiceDetail(invoiceDetail) == customsGroup AND countrySkuUserInvoiceDetail(invoiceDetail) == country AND
            priceUserInvoiceDetail(invoiceDetail) == price;
    };

    EXEC setSumDeclarationDetail(declaration);

} TOOLBAR;

EXTEND FORM declaration
    PROPERTIES(d) sumRateDeclaration, sumRegistrationDeclaration, sumRateDutyDeclaration, sumRateVATDeclaration

    OBJECTS dd=DeclarationDetail
    PROPERTIES(id, dd) inInvoiceDetailDeclarationDetail
    PROPERTIES(dd) numberDeclarationDetail, invoicesDeclarationDetail READONLY, nameCustomsDeclarationDetail, shortNameUOMDeclarationDetail, nameCountryDeclarationDetail
    PROPERTIES(dd) overSumNetWeightDeclarationDetail, overSumGrossWeightDeclarationDetail
    PROPERTIES(dd) codeCustomsGroupDeclarationDetail, quantityDeclarationDetail READONLY, priceDeclarationDetail
    PROPERTIES(dd) READONLY sumDeclarationDetail, sumRateDeclarationDetail, sumRateDutyDeclarationDetail, numberVATRangeCustomGroupDeclarationDetail
    PROPERTIES(dd) numberVATRangeDataDeclarationDetail
    PROPERTIES(dd) READONLY percentVATDeclarationDetail, sumRateVATDeclarationDetail
    PROPERTIES(dd) sumDataDeclarationDetail, sumDutyDataDeclarationDetail, sumVATDataDeclarationDetail, delete

    PROPERTIES (d) toCreateDeclarationDetails TODRAW dd FORCE PANEL TOOLBAR
    PROPERTIES (d) setSumDeclarationDetail TODRAW dd FORCE PANEL TOOLBAR
    FILTERS declarationDeclarationDetail(dd) == d

    EVENTS
        ON OK prePostDeclaration(d)
;

EXTEND DESIGN declaration {
    main {
        rightContainer {
            NEW totalContainer {
                caption = 'Суммы документа';
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(sumRateDeclaration);
                ADD PROPERTY(sumRegistrationDeclaration);
                ADD PROPERTY(sumRateDutyDeclaration);
                ADD PROPERTY(sumRateVATDeclaration);
            }
        }

        ADD dd.box {
            fillVertical = 2;
        }
    }

    PROPERTY(formOk) {
        caption = 'Провести';
    }

    ADD functions.box;
}

EXTEND FORM declarations
    PROPERTIES(d) FORCE GRID isPostedDeclaration BEFORE numberObject(d), sumRateDeclaration, sumRegistrationDeclaration, sumRateDutyDeclaration, sumRateVATDeclaration

    OBJECTS dd=DeclarationDetail
    PROPERTIES(dd) READONLY numberDeclarationDetail, nameCustomsDeclarationDetail, nameCountryDeclarationDetail, sumNetWeightDeclarationDetail,
                   codeCustomsGroupDeclarationDetail, quantityDeclarationDetail, priceDeclarationDetail, sumDeclarationDetail,
                   sumRateDeclarationDetail, sumRateDutyDeclarationDetail, numberVATRangeCustomGroupDeclarationDetail,
                   numberVATRangeDataDeclarationDetail, percentVATDeclarationDetail, sumRateVATDeclarationDetail,
                   sumDataDeclarationDetail, sumDutyDataDeclarationDetail, sumVATDataDeclarationDetail
    FILTERS declarationDeclarationDetail(dd)==d
;

//------------------------------------ определение себестоимости -----------------------------------------------------//
// пошлина
coeffInvoiceDetailDeclarationDetail 'Удельный вес' (invoiceDetail) = sumHomeInvoiceDetail(invoiceDetail)/sumRateDeclarationDetail(declarationDetailInvoiceDetail(invoiceDetail))
                                                                            IF declarationDetailInvoiceDetail(invoiceDetail);

calcDutyInvoiceDetail 'Пошлины' (invoiceDetail) = PARTITION UNGROUP sumDutyDataDeclarationDetail
                                                 PROPORTION STRICT ROUND(0) coeffInvoiceDetailDeclarationDetail(invoiceDetail)
                                                                BY declarationDetailInvoiceDetail(invoiceDetail)
                                                             ORDER invoiceDetail PERSISTENT;

priceDutyInvoiceDetail 'Пошлина (ед.)' = ABSTRACT NUMERIC[14,2](InvoiceDetail);
priceDutyUserInvoiceDetail 'Пошлина (ед.)' = DATA NUMERIC[14,2](UserInvoiceDetail);
priceDutyInvoiceDetail(detail) += priceDutyUserInvoiceDetail(detail);

calcPriceDutyInvoiceDetail 'Пошлина (ед.)' (invoiceDetail) = roundCurrencyDeclaration(calcDutyInvoiceDetail(invoiceDetail)/quantityUserInvoiceDetail(invoiceDetail),
                                                                                      declarationUserInvoiceDetail(invoiceDetail));

sumDutyCostDeclaration 'Пошлина (факт)' (declaration) = GROUP SUM priceDutyUserInvoiceDetail(invoiceDetail) * quantityUserInvoiceDetail(invoiceDetail) BY declarationUserInvoiceDetail(invoiceDetail);

// таможенный сбор
coeffInvoiceDetailDeclaration 'Удельный вес' (invoiceDetail) = sumHomeInvoiceDetail(invoiceDetail)/sumRateDeclaration(declarationInvoiceDetail(invoiceDetail))
                                                               IF declarationInvoiceDetail(invoiceDetail);

calcRegistrationInvoiceDetail 'Таможенный сбор' (invoiceDetail) = PARTITION UNGROUP sumRegistrationDeclaration
                                                                  PROPORTION STRICT ROUND(0) coeffInvoiceDetailDeclaration(invoiceDetail)
                                                                                 BY declarationInvoiceDetail(invoiceDetail)
                                                                              ORDER invoiceDetail PERSISTENT;

priceRegistrationInvoiceDetail 'Таможенный сбор (ед.)' = ABSTRACT NUMERIC[14,2](InvoiceDetail);
priceRegistrationUserInvoiceDetail 'Таможенный сбор (ед.)' = DATA NUMERIC[14,2](UserInvoiceDetail);
priceRegistrationInvoiceDetail(detail) += priceRegistrationUserInvoiceDetail(detail);

calcPriceRegistrationInvoiceDetail 'Таможенный сбор (ед.)' (invoiceDetail) = roundCurrencyDeclaration(calcRegistrationInvoiceDetail(invoiceDetail)/quantityUserInvoiceDetail(invoiceDetail),
                                                                                                      declarationUserInvoiceDetail(invoiceDetail));

customCostPriceUserInvoiceDetail(invoiceDetail) += priceRegistrationUserInvoiceDetail(invoiceDetail) (+) priceDutyUserInvoiceDetail(invoiceDetail);

sumRegistrationCostDeclaration 'Таможенный сбор (факт)' (declaration) = GROUP SUM priceRegistrationUserInvoiceDetail(invoiceDetail) * quantityUserInvoiceDetail(invoiceDetail) BY declarationUserInvoiceDetail(invoiceDetail);

setPriceInvoiceDetailes 'Рассчитать расходы (за ед.)' = ACTION (declaration) {
   FOR declarationInvoiceDetail(invoiceDetail) == declaration DO {
      // todo: should be DATA property
      SET priceDutyInvoiceDetail(invoiceDetail) <- calcPriceDutyInvoiceDetail(invoiceDetail);
      // todo: should be DATA property
      SET priceRegistrationInvoiceDetail(invoiceDetail) <- calcPriceRegistrationInvoiceDetail(invoiceDetail);
   };
} TOOLBAR;

EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundCustomedInvoice(i) showDeclarationUserInvoice
    PROPERTIES(d) BACKGROUND backgroundCustomedInvoice(i) codeCustomsGroupInvoiceDetail BEFORE chargePriceUserInvoiceDetail SHOWIF showDeclarationUserInvoice(i),
                                                          priceDutyUserInvoiceDetail BEFORE chargePriceUserInvoiceDetail SHOWIF showDeclarationUserInvoice(i),
                                                          priceRegistrationUserInvoiceDetail BEFORE chargePriceUserInvoiceDetail SHOWIF showDeclarationUserInvoice(i)
;
EXTEND DESIGN userInvoice {
    headerExtraParams {
        NEW headerCustoms {
            title = 'Таможенные платежи';
            ADD PROPERTY(showDeclarationUserInvoice);
        }
    }
}


EXTEND FORM invoices
    PROPERTIES(i) READONLY BACKGROUND backgroundCustomedInvoice(i) showDeclarationInvoice FORCE GRID
    PROPERTIES(d) READONLY BACKGROUND backgroundCustomedInvoice(i) codeCustomsGroupInvoiceDetail BEFORE chargePriceInvoiceDetail SHOWIF showDeclarationInvoice(i),
                                                                   priceDutyInvoiceDetail BEFORE chargePriceInvoiceDetail SHOWIF showDeclarationInvoice(i),
                                                                   priceRegistrationInvoiceDetail BEFORE chargePriceInvoiceDetail SHOWIF showDeclarationInvoice(i)
;

EXTEND FORM declaration
    PROPERTIES(d) sumRegistrationCostDeclaration, sumDutyCostDeclaration, setPriceInvoiceDetailes TODRAW id
    PROPERTIES(id) priceDutyInvoiceDetail, priceRegistrationInvoiceDetail
;

EXTEND DESIGN declaration {
    main {
        totalContainer {
            ADD PROPERTY(sumRegistrationCostDeclaration);
            ADD PROPERTY(sumDutyCostDeclaration);
        }
    }
    ADD functions.box;
}

//-- Операция
@defineOperationProperty(showDeclaration, 'Таможенные платежи', showContainer);
@deriveDocumentOperationProperty(UserInvoice, showDeclaration);