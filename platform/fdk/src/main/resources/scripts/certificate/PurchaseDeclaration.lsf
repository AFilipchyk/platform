MODULE PurchaseDeclaration;

REQUIRE Declaration, PurchaseCertificate, Item;

NAMESPACE Purchase;

@defineDocumentCertificateObject(declaration, invoice, i, 'Таможенная декларация');
@defineDocumentCertificateObject(declaration, shipment, s, 'Таможенная декларация');

declarationShipmentDetail(detail) += declarationInvoiceDetail(invoiceDetailInvoiceShipmentDetail(detail));

declarationBatch (batch) += declarationShipmentDetail(shipmentDetailShipmentBatch(batch));

inDeclarationInvoice 'Вкл.' (declaration, invoice) = declarationUserInvoice(invoice)==declaration;

inDeclarationInvoiceDetail 'Вкл.' (declaration, invoiceDetail) = dataDeclarationUserInvoiceDetail(invoiceDetail)==declaration;

importerDeclarationInvoice(declaration, invoice) = legalEntityDeclaration(declaration) == customerUserInvoice(invoice);

currencyDeclarationInvoice(declaration, invoice) = currencyDeclaration(declaration) == currencyUserInvoice(invoice);

forDeclaration(declaration, invoice) = inDeclarationInvoice(declaration, invoice) OR declaration AS declaration AND NOT declarationUserInvoice(invoice);

stringInvoice (invoice) = [FORMULA STRING[30] 'CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'] (
                                               seriesNumberObject(invoice), dateUserInvoice(invoice));

invoicesDeclaration 'Накладные' (declaration) =
    GROUP CONCAT stringInvoice(invoice) IF inDeclarationInvoice (declaration, invoice), ','
              BY declaration ORDER invoice PERSISTENT MINCHARWIDTH 40 PREFCHARWIDTH 80 MAXCHARWIDTH 120;

// свойства товаров
nameCustomsSku = ABSTRACT STRING[200](sku);
nameCustomsSku(sku) += nameSku(sku);

nameCustomsUserInvoiceDetail 'Наименование (декл.)' (userInvoiceDetail) = nameCustomsSku(skuUserInvoiceDetail(userInvoiceDetail));

countryUserInvoiceDetail (userInvoiceDetail) = countrySku(skuUserInvoiceDetail(userInvoiceDetail));
nameCountryUserInvoiceDetail 'Страна' (userInvoiceDetail) = name(countryUserInvoiceDetail(userInvoiceDetail));

UOMUserInvoiceDetail(userInvoiceDetail) = UOMItem(skuUserInvoiceDetail(userInvoiceDetail));

FORM declarationInvoices 'Присоединение накладных'
    OBJECTS d=declaration FIXED PANEL
    PROPERTIES(d) seriesNumberObject, nameLegalEntityDeclaration, nameCurrencyDeclaration, dateTimeDeclaration

    OBJECTS i=userInvoice
    PROPERTIES (d, i) inDeclarationInvoice
    PROPERTIES (i) READONLY numberObject, seriesObject, dateUserInvoice, timeUserInvoice, nameSupplierUserInvoice, nameCustomerUserInvoice
    FILTERS forDeclaration(d, i)

    OBJECTS id=userInvoiceDetail
    PROPERTIES(d, id) inDeclarationInvoiceDetail
    PROPERTIES(id) READONLY indexUserInvoiceDetail, idBarcodeSkuUserInvoiceDetail, nameSkuUserInvoiceDetail, shortNameUOMSkuUserInvoiceDetail,
                   codeCustomsGroupUserInvoiceDetail, quantityUserInvoiceDetail, priceUserInvoiceDetail
    FILTERS invoiceInvoiceDetail(id)==i

    FILTERGROUP filtersCurrency
        FILTER 'Только с валютой декларации' 'F10' currencyDeclarationInvoice(d, i) DEFAULT

    FILTERGROUP filtersImporter
        FILTER 'Только импортёра декларации' 'F11' importerDeclarationInvoice(d, i) DEFAULT
;

showFormDeclarationInvoices 'Присоединить накладные' = ACTION (declaration) {
    FORM declarationInvoices OBJECTS d=declaration MODAL;
    EXEC apply();
} TOOLBAR;

// позиции декларации
TABLE declarationNameUOMCustomsGroupCountryPrice(declaration, STRING[200], UOM, customsGroup, country, NUMERIC[14,2]);

quantityGroupDeclaration 'Кол-во' = GROUP SUM quantityUserInvoiceDetail(userInvoiceDetail)
                                           BY declarationUserInvoiceDetail(userInvoiceDetail),
                                              nameCustomsUserInvoiceDetail(userInvoiceDetail),
                                              UOMUserInvoiceDetail(userInvoiceDetail),
                                              customsGroupUserInvoiceDetail(userInvoiceDetail),
                                              countryUserInvoiceDetail(userInvoiceDetail),
                                              priceUserInvoiceDetail(userInvoiceDetail) PERSISTENT;

CLASS declarationDetail 'Позиция декларации';
TABLE declarationDetail(declarationDetail);

declarationDeclarationDetail = DATA declaration(declarationDetail);

@defineDocumentPosted(declaration);

rateExchangeDeclarationDetail 'Курс' = rateExchangeDeclaration(declarationDeclarationDetail(declarationDetail));

roundCurrencyDeclarationDetail '' (number, declarationDetail) = roundCurrencyDeclaration(number, declarationDeclarationDetail(declarationDetail));

nameCustomsDeclarationDetail 'Наименование' = DATA STRING[200](declarationDetail);

UOMDeclarationDetail = DATA UOM(declarationDetail);
shortNameUOMDeclarationDetail 'Ед. изм.' (declarationDetail) = shortName(UOMDeclarationDetail(declarationDetail));

customsGroupDeclarationDetail = DATA customsGroup(declarationDetail);
codeCustomsGroupDeclarationDetail 'ТН ВЭД' (declarationDetail) = codeCustomsGroup(customsGroupDeclarationDetail(declarationDetail)) MINCHARWIDTH 10 MAXCHARWIDTH 10 PREFCHARWIDTH 10;

countryDeclarationDetail = DATA country(declarationDetail);
nameCountryDeclarationDetail 'Страна' (declarationDetail) = name(countryDeclarationDetail(declarationDetail));
sidCountryDeclarationDetail 'Код страны' (declarationDetail) = sidCountry(countryDeclarationDetail(declarationDetail));
sidOrigin2CountryDeclarationDetail 'Код страны' (declarationDetail) = sidOrigin2Country(countryDeclarationDetail(declarationDetail));
priceDeclarationDetail 'Цена' = DATA NUMERIC[14,3](declarationDetail);

numberDefaultDeclarationDetail 'Номер' (declarationDetail) =
        PARTITION SUM 1 IF declarationDetail IS declarationDetail BY declarationDeclarationDetail(declarationDetail)
        ORDER declarationDetail;

userNumberDeclarationDetail 'Пользовательский номер' (declarationDetail) = DATA INTEGER (declarationDetail);
numberDeclarationDetail 'Номер' (declarationDetail) = UNION OVERRIDE numberDefaultDeclarationDetail(declarationDetail), userNumberDeclarationDetail(declarationDetail);

declarationDetailUserNumberNameCustoms (number, name) = GROUP UNIQUE declarationDetail BY
        userNumberDeclarationDetail(declarationDetail), nameCustomsDeclarationDetail(declarationDetail)
        WHERE declarationDetail IS declarationDetail;


declarationDetailInvoiceDetail(invoiceDetail) = DATA declarationDetail(invoiceDetail);
inInvoiceDetailDeclarationDetail 'Вкл.' (invoiceDetail, declarationDetail) = declarationDetailInvoiceDetail(invoiceDetail)==declarationDetail;

quantityDeclarationDetail 'Кол-во' (declarationDetail) = GROUP SUM quantityUserInvoiceDetail(invoiceDetail) BY declarationDetailInvoiceDetail(invoiceDetail) PERSISTENT;

sumDeclarationDetail 'Стоимость (валют.)' (declarationDetail) = priceDeclarationDetail(declarationDetail) * quantityDeclarationDetail(declarationDetail);

sumRateDeclarationDetail 'Стоимость (расч.)' (declarationDetail) = sumDeclarationDetail(declarationDetail) * rateExchangeDeclarationDetail(declarationDetail) MINCHARWIDTH 12 PERSISTENT;

sumRateDeclaration 'Сумма' (declaration) = GROUP SUM sumRateDeclarationDetail(declarationDetail) BY declarationDeclarationDetail(declarationDetail) PERSISTENT;

sumDataDeclarationDetail 'Стоимость' (declarationDetail) = DATA NUMERIC[14,3](declarationDetail) MINCHARWIDTH 12;

sumNetWeightInvoiceDetail 'Вес нетто' (invoiceDetail) = netWeightSku(skuUserInvoiceDetail(invoiceDetail)) * quantityUserInvoiceDetail(invoiceDetail);

sumNetWeightDeclarationDetail 'Вес нетто' = GROUP SUM sumNetWeightInvoiceDetail(invoiceDetail) BY declarationDetailInvoiceDetail(invoiceDetail) PERSISTENT;

sumGrossWeightInvoiceDetail 'Вес брутто' (invoiceDetail) = grossWeightSku(skuUserInvoiceDetail(invoiceDetail)) * quantityUserInvoiceDetail(invoiceDetail);

sumGrossWeightDeclarationDetail 'Вес брутто' = GROUP SUM sumGrossWeightInvoiceDetail(invoiceDetail) BY declarationDetailInvoiceDetail(invoiceDetail) PERSISTENT;

inDeclarationDetailInvoice = GROUP SUM 1 BY declarationDetailInvoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);

invoicesDeclarationDetail 'Накладные' (declarationDetail) =
    GROUP CONCAT seriesNumberObject(invoice) IF inDeclarationDetailInvoice(declarationDetail, invoice) , ','
              BY declarationDetail ORDER invoice PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 40 MAXCHARWIDTH 60;

// пошлины
sumWeightDutyDeclarationDetail 'Пошлина по весу (валют.)' (declarationDetail) = sumNetWeightDeclarationDetail(declarationDetail)*
                                                                                weightDutyCustomsGroupDate(customsGroupDeclarationDetail(declarationDetail), dateDeclaration(declarationDeclarationDetail(declarationDetail)));

sumRateWeightDutyDeclarationDetail 'Пошлина по весу' (declarationDetail) = sumWeightDutyDeclarationDetail(declarationDetail) *
                                                                           rateExchangeCustomsZoneDeclaration(declarationDeclarationDetail(declarationDetail)) PERSISTENT;

sumPriceDutyDeclarationDetail 'Пошлина по стоимости (валют.)' (declarationDetail) = sumDeclarationDetail(declarationDetail) *
                                                                                    (percentDutyCustomsGroupDate(customsGroupDeclarationDetail(declarationDetail), dateDeclaration(declarationDeclarationDetail(declarationDetail)))/100);

sumRatePriceDutyDeclarationDetail 'Пошлина по стоимости' (declarationDetail) = sumPriceDutyDeclarationDetail(declarationDetail) *
                                                                               rateExchangeDeclarationDetail(declarationDetail) PERSISTENT;

sumRateDutyDeclarationDetail 'Пошлина (расч.)' (declarationDetail) = roundCurrencyDeclarationDetail((UNION MAX sumRateWeightDutyDeclarationDetail(declarationDetail),
                                                                                                               sumRatePriceDutyDeclarationDetail(declarationDetail)), declarationDetail) PERSISTENT MINCHARWIDTH 12;

sumDutyDataDeclarationDetail 'Пошлина' (declarationDetail) = DATA NUMERIC[14,3](declarationDetail) MINCHARWIDTH 12;

sumRateDutyDeclaration 'Пошлина' (declaration) = GROUP SUM sumDutyDataDeclarationDetail(declarationDetail) BY declarationDeclarationDetail(declarationDetail) PERSISTENT MINCHARWIDTH 12;

coeffInvoiceDetailDeclarationDetail 'Удельный вес' (invoiceDetail) = sumHomeInvoiceDetail(invoiceDetail)/sumRateDeclarationDetail(declarationDetailInvoiceDetail(invoiceDetail))
                                                                            IF declarationDetailInvoiceDetail(invoiceDetail);

calcDutyInvoiceDetail 'Пошлины' (invoiceDetail) = PARTITION UNGROUP sumDutyDataDeclarationDetail
                                                 PROPORTION STRICT ROUND(0) coeffInvoiceDetailDeclarationDetail(invoiceDetail)
                                                                BY declarationDetailInvoiceDetail(invoiceDetail)
                                                             ORDER invoiceDetail PERSISTENT;

priceDutyUserInvoiceDetail 'Пошлина (ед.)' = DATA NUMERIC[14,2](userInvoiceDetail);

calcPriceDutyInvoiceDetail 'Пошлина (ед.)' (invoiceDetail) = roundCurrencyDeclaration(calcDutyInvoiceDetail(invoiceDetail)/quantityUserInvoiceDetail(invoiceDetail),
                                                                                      declarationUserInvoiceDetail(invoiceDetail));

//priceDutyUserInvoiceDetail(invoiceDetail) <- calcPriceDutyInvoiceDetail(invoiceDetail) WHEN CHANGED (calcPriceDutyInvoiceDetail(invoiceDetail));

dutyCostPriceInvoiceDetail(invoiceDetail) += priceDutyUserInvoiceDetail(invoiceDetail);

sumDutyCostDeclaration 'Пошлина (факт)' (declaration) = GROUP SUM priceDutyUserInvoiceDetail(invoiceDetail) * quantityUserInvoiceDetail(invoiceDetail) BY declarationUserInvoiceDetail(invoiceDetail);

//НДС
VATRangeDataDeclarationDetail 'Шкала НДС (ИД)' = DATA range(declarationDetail);
numberVATRangeDataDeclarationDetail 'Шкала НДС' (declarationDetail) = numberRange(VATRangeDataDeclarationDetail(declarationDetail));
percentVATRangeDeclarationDetail 'НДС, %' (declarationDetail) = valueRateRangeDate(VATRangeDataDeclarationDetail(declarationDetail), dateDeclaration(declarationDeclarationDetail(declarationDetail)));

percentVATCustomsGroupDeclarationDetail 'НДС, %' (declarationDetail) = dataValueSupplierVATCustomsGroupDate(customsGroupDeclarationDetail(declarationDetail), dateDeclaration(declarationDeclarationDetail(declarationDetail)));

percentVATDeclarationDetail 'НДС, %' (declarationDetail) = UNION OVERRIDE percentVATCustomsGroupDeclarationDetail(declarationDetail), percentVATRangeDeclarationDetail(declarationDetail);

sumRateVATDeclarationDetail 'НДС (расч.)' (declarationDetail) = (sumRateDeclarationDetail(declarationDetail) + sumRateDutyDeclarationDetail(declarationDetail)) *
                                                                 (percentVATDeclarationDetail(declarationDetail)/100) MINCHARWIDTH 12;

sumVATDataDeclarationDetail 'НДС' (declarationDetail) = DATA NUMERIC[14,3](declarationDetail) MINCHARWIDTH 12;

sumRateVATDeclaration 'НДС' (declaration) = GROUP SUM sumVATDataDeclarationDetail(declarationDetail) BY declarationDeclarationDetail(declarationDetail) PERSISTENT MINCHARWIDTH 12;

// оформление
sumRegistrationDeclarationDetail 'Таможенный сбор (валют.)' (declarationDetail) = registrationCustomsGroupDate(customsGroupDeclarationDetail(declarationDetail), dateDeclaration(declarationDeclarationDetail(declarationDetail)));

sumRegistrationMaxDeclaration 'Таможенный сбор (валют.)' (declaration) = GROUP MAX sumRegistrationDeclarationDetail(declarationDetail) BY declarationDeclarationDetail(declarationDetail) PERSISTENT;

sumRegistrationRateDeclaration 'Таможенный сбор' (declaration) = roundCurrencyDeclaration(sumRegistrationMaxDeclaration(declaration) *
                                                                                          rateExchangeCustomsZoneDeclaration(declaration), declaration) MINCHARWIDTH 12;

sumRegistrationDataDeclaration 'Таможенный сбор' = DATA NUMERIC[14,3](declaration);

sumRegistrationDeclaration 'Таможенный сбор' (declaration) = UNION OVERRIDE sumRegistrationRateDeclaration(declaration), sumRegistrationDataDeclaration(declaration);

coeffInvoiceDetailDeclaration 'Удельный вес' (invoiceDetail) = sumHomeInvoiceDetail(invoiceDetail)/sumRateDeclaration(declarationInvoiceDetail(invoiceDetail))
                                                               IF declarationInvoiceDetail(invoiceDetail);

calcRegistrationInvoiceDetail 'Таможенный сбор' (invoiceDetail) = PARTITION UNGROUP sumRegistrationDeclaration
                                                                  PROPORTION STRICT ROUND(0) coeffInvoiceDetailDeclaration(invoiceDetail)
                                                                                 BY declarationInvoiceDetail(invoiceDetail)
                                                                              ORDER invoiceDetail PERSISTENT;

priceRegistrationUserInvoiceDetail 'Таможенный сбор (ед.)' = DATA NUMERIC[14,2](userInvoiceDetail);

calcPriceRegistrationInvoiceDetail 'Таможенный сбор (ед.)' (invoiceDetail) = roundCurrencyDeclaration(calcRegistrationInvoiceDetail(invoiceDetail)/quantityUserInvoiceDetail(invoiceDetail),
                                                                                                      declarationUserInvoiceDetail(invoiceDetail));

//priceRegistrationUserInvoiceDetail(invoiceDetail) <- calcPriceRegistrationInvoiceDetail(invoiceDetail) WHEN CHANGED (calcPriceRegistrationInvoiceDetail(invoiceDetail));

registrationCostPriceInvoiceDetail(invoiceDetail) += priceRegistrationUserInvoiceDetail(invoiceDetail);

sumRegistrationCostDeclaration 'Таможенный сбор (факт)' (declaration) = GROUP SUM priceRegistrationUserInvoiceDetail(invoiceDetail) * quantityUserInvoiceDetail(invoiceDetail) BY declarationUserInvoiceDetail(invoiceDetail);


setSumDeclarationDetail 'Рассчитать суммы' = ACTION (declaration) {
   FOR declarationDeclarationDetail(declarationDetail) == declaration DO {
      SET sumDataDeclarationDetail(declarationDetail) <- sumRateDeclarationDetail(declarationDetail);
      SET sumDutyDataDeclarationDetail(declarationDetail) <- sumRateDutyDeclarationDetail(declarationDetail);
      SET sumVATDataDeclarationDetail(declarationDetail) <- sumRateVATDeclarationDetail(declarationDetail);
   };
};

toCreateDeclarationDetails 'Создать позиции' = ACTION (declaration) {
    FOR quantityGroupDeclaration(declaration, customsName, UOM, customsGroup, country, price)>0 ADDOBJ dd=declarationDetail DO {
        SET declarationDeclarationDetail(dd) <- declaration;
        SET nameCustomsDeclarationDetail(dd) <- customsName;
        SET UOMDeclarationDetail(dd) <- UOM;
        SET customsGroupDeclarationDetail(dd) <- customsGroup;
        SET countryDeclarationDetail(dd) <- country;
        SET priceDeclarationDetail(dd) <- price;

        SET declarationDetailInvoiceDetail(invoiceDetail) <- dd WHERE declarationUserInvoiceDetail(invoiceDetail) == declaration AND
            nameCustomsUserInvoiceDetail(invoiceDetail) == customsName AND UOMUserInvoiceDetail(invoiceDetail) == UOM AND
            customsGroupUserInvoiceDetail(invoiceDetail) == customsGroup AND countryUserInvoiceDetail(invoiceDetail) == country AND
            priceUserInvoiceDetail(invoiceDetail) == price;
    };

    EXEC setSumDeclarationDetail(declaration);

} TOOLBAR;


EXTEND FORM declaration
    PROPERTIES(d) invoicesDeclaration, sumRateDeclaration, sumRegistrationDeclaration, sumRateDutyDeclaration, sumRateVATDeclaration,
                  sumRegistrationCostDeclaration, sumDutyCostDeclaration

    OBJECTS id=userInvoiceDetail
    PROPERTIES(id) READONLY seriesNumberInvoiceDetail, idBarcodeSkuUserInvoiceDetail, nameSkuUserInvoiceDetail, shortNameUOMSkuUserInvoiceDetail,
                   nameCustomsUserInvoiceDetail, nameCountryUserInvoiceDetail, sumNetWeightInvoiceDetail
    PROPERTIES(id) codeCustomsGroupUserInvoiceDetail
    PROPERTIES(id) READONLY quantityUserInvoiceDetail, priceUserInvoiceDetail, homePriceInvoiceDetail, sumHomeInvoiceDetail
    PROPERTIES(id) priceDutyUserInvoiceDetail, priceRegistrationUserInvoiceDetail
    //PROPERTIES(id) READONLY sumCustomsInvoiceDetail

    PROPERTIES (d) showFormDeclarationInvoices TODRAW id FORCE PANEL TOOLBAR
    FILTERS declarationUserInvoiceDetail(id) == d

    OBJECTS dd=declarationDetail
    PROPERTIES(id, dd) inInvoiceDetailDeclarationDetail
    PROPERTIES(dd) numberDeclarationDetail
    PROPERTIES(dd) READONLY invoicesDeclarationDetail
    PROPERTIES(dd) nameCustomsDeclarationDetail, shortNameUOMDeclarationDetail, nameCountryDeclarationDetail
    PROPERTIES(dd) READONLY sumNetWeightDeclarationDetail, sumGrossWeightDeclarationDetail
    PROPERTIES(dd) codeCustomsGroupDeclarationDetail
    PROPERTIES(dd) READONLY quantityDeclarationDetail
    PROPERTIES(dd) priceDeclarationDetail
    PROPERTIES(dd) READONLY sumDeclarationDetail, sumRateDeclarationDetail, sumRateDutyDeclarationDetail
    PROPERTIES(dd) numberVATRangeDataDeclarationDetail
    PROPERTIES(dd) READONLY percentVATDeclarationDetail, sumRateVATDeclarationDetail
    PROPERTIES(dd) sumDataDeclarationDetail, sumDutyDataDeclarationDetail, sumVATDataDeclarationDetail, delete

    PROPERTIES (d) toCreateDeclarationDetails TODRAW dd FORCE PANEL TOOLBAR
    PROPERTIES (d) setSumDeclarationDetail TODRAW dd FORCE PANEL TOOLBAR
    FILTERS declarationDeclarationDetail(dd) == d
;


EXTEND DESIGN declaration {
    main {
        parameterContainer {
            ADD PROPERTY(invoicesDeclaration);
        }

        rightContainer {
            NEW totalContainer {
                caption = 'Суммы документа';
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(sumRateDeclaration);
                ADD PROPERTY(sumRegistrationDeclaration);
                ADD PROPERTY(sumRegistrationCostDeclaration);
                ADD PROPERTY(sumRateDutyDeclaration);
                ADD PROPERTY(sumDutyCostDeclaration);
                ADD PROPERTY(sumRateVATDeclaration);
            }
        }

        ADD id.box {
            fillVertical = 2;
        }

        ADD dd.box {
            fillVertical = 2;
        }
    }
    ADD functions.box;
}

EXTEND FORM declarations
    PROPERTIES(d) FORCE GRID isPostedDeclaration BEFORE objectClassName(d), sumRateDeclaration, sumRegistrationDeclaration, sumRateDutyDeclaration, sumRateVATDeclaration

    OBJECTS dd=declarationDetail
    PROPERTIES(dd) READONLY numberDeclarationDetail, nameCustomsDeclarationDetail, nameCountryDeclarationDetail, sumNetWeightDeclarationDetail,
                   codeCustomsGroupDeclarationDetail, quantityDeclarationDetail, priceDeclarationDetail, sumDeclarationDetail,
                   sumRateDeclarationDetail, sumRateDutyDeclarationDetail, percentVATDeclarationDetail, sumRateVATDeclarationDetail,
                   sumDataDeclarationDetail, sumDutyDataDeclarationDetail, sumVATDataDeclarationDetail
    FILTERS declarationDeclarationDetail(dd)==d
;

