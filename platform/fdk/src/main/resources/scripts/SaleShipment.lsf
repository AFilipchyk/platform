MODULE SaleShipment;

REQUIRE System,
        Utils,
        Historizable,
        Stock,
        Numerator,
        Document,
        Currency,
        Customer,
        Contract,
        Consignment,
        AccountDocument,
        Barcode,
        SaleOrder,
        SaleInvoice,
        Historizable;


PRIORITY Utils, Stock;

NAMESPACE Sale;


//----------------------------------------------- Поставка ---------------------------------------------------//

CLASS ABSTRACT shipment 'Поставка';
CLASS ABSTRACT shipmentDetail 'Строка поставки' : outFIFOSkuLedger;

CLASS userShipment 'Поставка (польз.)' : shipment, historyObject, numeratedDocument;
CLASS userShipmentDetail 'Строка поставки (польз.)' : shipmentDetail;
CLASS userShipmentPosted 'Закрытая поставка (польз.)' : userShipment, postedObject;

@defineDocumentInterface(shipment);

@defineDocumentInterfaceNumber(shipment);

@defineDocumentInterfaceDataStock(shipment, stock, 'Склад');
@defineDocumentInterfacePosted(shipment);

@defineDocumentInterfaceDescription(shipment, 'Поставка');

@defineDocumentInterfaceCurrency(shipment);
@deriveDocumentCurrency(userShipment, stock);

@defineDocumentInterfaceCustomer(shipment);
@defineDocumentInterfaceContract(shipment, contractSkuCustomer, singleContractSkuCustomerCompanyCustomer, companyShipment, customerShipment,
                                 'Сторона A договора поставки не соответствует компании склада-отправителя',
                                 'Сторона B договора поставки товаров не соответствует покупателю');

@defineDocumentInterfaceDetailSku(shipment, sku);
@defineDocumentInterfaceDetailBatch(shipment, batch);

@defineDocumentInterfaceDetailQuantity(shipment);

@defineDocumentInterfaceDetailPrice(shipment);
@deriveDocumentDetailPriceBatchStock(userShipment);

@defineDocumentInterfaceDetailDataSum(shipment);
@deriveDocumentDetailSum(userShipment);

@defineDocumentInterfaceHeaderQuantity(shipment);
@defineDocumentHeaderSkuQuantity(shipment, sku);
@defineDocumentInterfaceHeaderSum(shipment);

@defineAddDetailDialogSkuStock(userShipment, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(userShipment, sku);

// --------------------------- Формы --------------------------------- //

FORM userShipment 'Поставка'
    OBJECTS s = userShipment FIXED PANEL
    PROPERTIES (s) objectClassName, nameStockUserShipment, nameNumeratorObject, numberObject, seriesObject, dateUserShipment, timeUserShipment,
                   nameCustomerUserShipment, nameCurrencyUserShipment, noteUserShipment,
                   numberContractSkuCustomerUserShipment, isCommissionUserShipment,
                   countUserShipmentDetailUserShipment, quantityUserShipmentDetailUserShipment, sumUserShipmentDetailUserShipment

    OBJECTS d = userShipmentDetail
    PROPERTIES (d) indexUserShipmentDetail, idBarcodeSkuUserShipmentDetail, nameSkuUserShipmentDetail, shortNameUOMSkuUserShipmentDetail,
                   descriptionBatchUserShipmentDetail, quantityUserShipmentDetail, priceUserShipmentDetail, sumUserShipmentDetail,
                   nameStockUserShipmentDetail, ADDOBJ, delete

    PROPERTIES(s) TODRAW d addDetailDialogSkuStockUserShipmentDetailUserShipment,
                           addDetailInputBarcodeUserShipmentDetailUserShipment, deleteUserShipmentDetailUserShipment
    FILTERS userShipmentUserShipmentDetail(d) == s

    EVENTS
        ON OK EXEC prePostUserShipment(s)

    EDIT userShipment OBJECT s
;

DESIGN userShipment FROM DEFAULT{
    main {
        preferredSize = (1024, 768);

        NEW header.box BEFORE d.box {
            childConstraints = TO THE RIGHT;

            NEW headerRow1 {
                childConstraints = TO THE BOTTOM;

                ADD s.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(objectClassName) { preferredCharWidth = 10; }
                    ADD PROPERTY(nameStockUserShipment);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateUserShipment);
                    ADD PROPERTY(timeUserShipment);
                }

                NEW headerColumn2 {
                    childConstraints = TO THE RIGHT;
                    ADD s.documentPrmGroup;
                }
            }

            ADD s.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }

        d.panel{
            childConstraints = TO THE BOTTOM;
        }
        PROPERTY(formOkAction) {
            caption = 'Провести';
        }
    }
}

FORM userShipments 'Поставки'
    OBJECTS s = userShipment
    PROPERTIES (s) READONLY isPostedUserShipment FORCE GRID, objectClassName, numberObject, seriesObject, dateUserShipment, timeUserShipment,
                            nameStockUserShipment, nameCustomerUserShipment, nameCurrencyUserShipment, noteUserShipment,
                            numberContractSkuCustomerUserShipment, isCommissionUserShipment,
                            countUserShipmentDetailUserShipment, quantityUserShipmentDetailUserShipment, sumUserShipmentDetailUserShipment

    PROPERTIES (s) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES (s) ADDFORM, EDITFORM, delete FORCE PANEL DRAWTOTOOLBAR

    OBJECTS d = userShipmentDetail
    PROPERTIES (d) READONLY indexUserShipmentDetail, idBarcodeSkuUserShipmentDetail, nameSkuUserShipmentDetail, shortNameUOMSkuUserShipmentDetail,
                            descriptionBatchUserShipmentDetail, quantityUserShipmentDetail, priceUserShipmentDetail, sumUserShipmentDetail,
                            nameStockUserShipmentDetail
    FILTERS userShipmentUserShipmentDetail(d) == s

    DIALOG shipment OBJECT s
;

DESIGN userShipments FROM DEFAULT {
    PROPERTY (delete(s)) {
        askConfirm = TRUE;
    }

    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD s.box;

        NEW documentDetail {
            type = TABBED;

            ADD d.box {
                title = 'Спецификация';
            }
            NEW documentHistory {
                title = 'История';

                ADD s.historyGroup;
                ADD s.postedGroup;
            }
            NEW printTab {
                title = 'Печатные формы';
                NEW printContainer {
                    title = 'Печать';
                    childConstraints = TO THE BOTTOM;
                    fillVertical = 1.0; // todo : иначе кнопка не всегда показывается, нужно будет пофиксить как-нибудь
                }
            }
        }
    }
}

//--  Связь накладной и поставки
invoiceShipmentDetail = ABSTRACT invoice (shipmentDetail);
invoiceUserShipmentDetail = DATA invoice (userShipmentDetail);
invoiceShipmentDetail(shipmentDetail) += invoiceUserShipmentDetail(shipmentDetail);

CONSTRAINT customerShipmentDetail(shipmentDetail) != customerInvoice(invoiceUserShipmentDetail(shipmentDetail)) OR
           companyUserShipment(shipmentDetail) != companyInvoice(invoiceUserShipmentDetail(shipmentDetail))
    CHECKED BY invoiceUserShipmentDetail
        MESSAGE 'Покупатель и компания в накладной и поставке должны соответствовать друг другу';

GROUP invoiceGroup 'Информация о накладной' : baseGroup;
descriptionInvoiceUserShipmentDetail 'Накладная' (userShipmentDetail) = descriptionInvoice(invoiceUserShipmentDetail(userShipmentDetail)) IN invoiceGroup;

inInvoiceShipment (invoice, shipment) = GROUP SUM quantityShipmentDetail(shipmentDetail) BY invoiceShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail);

invoicesShipment 'Накладные' (shipment) = GROUP CONCAT castToString255(descriptionInvoice(invoice))
    IF inInvoiceShipment(invoice, shipment) , ', ' BY shipment IN invoiceGroup MINCHARWIDTH 30 PREFCHARWIDTH 50;

//-- Подсчет к-ва в паставках

shippedInvoiceSku 'К-во в поставках' (invoice, sku) = GROUP SUM quantityShipmentDetail(shipmentDetail) IF isPostedShipmentDetail(shipmentDetail)
    BY invoiceShipmentDetail(shipmentDetail), skuShipmentDetail(shipmentDetail);

shippedInvoiceDetail 'К-во в поставках' (invoiceDetail) = PARTITION UNGROUP shippedInvoiceSku
                                                          LIMIT STRICT quantityInvoiceDetail (invoiceDetail)
                                                          BY invoiceInvoiceDetail(invoiceDetail), skuInvoiceDetail(invoiceDetail)
                                                          ORDER invoiceDetail;

EXTEND FORM userInvoice
    PROPERTIES(d) READONLY shippedInvoiceDetail AFTER quantityUserInvoiceDetail

;

EXTEND FORM userInvoices
    PROPERTIES(d) READONLY shippedInvoiceDetail AFTER quantityUserInvoiceDetail

;

EXTEND FORM invoices
    PROPERTIES(d) READONLY shippedInvoiceDetail AFTER quantityInvoiceDetail

;

diffShippedInvoiceDetail 'Разница' (invoiceDetail) = quantityInvoiceDetail (invoiceDetail) (-) shippedInvoiceDetail(invoiceDetail);
fillInvoiceUserShipment 'Заполнить поставку на основании накладной' =  ACTION (userShipment) {
    LOCAL saleInvoice = invoice();

    FORM invoices MODAL;
    IF formResult() == formResult.ok THEN {
        SET saleInvoice() <- chosenObject('i');

        FOR invoiceInvoiceDetail(invoiceDetail) == saleInvoice() AND diffShippedInvoiceDetail(invoiceDetail)>0 ADDOBJ d = userShipmentDetail DO {

            SET userShipmentUserShipmentDetail(d) <- userShipment;
            SET invoiceUserShipmentDetail(d) <- saleInvoice();
            SET stockUserShipmentDetail (d) <- stockInvoiceDetail(invoiceDetail);
            SET skuUserShipmentDetail(d) <- skuInvoiceDetail(invoiceDetail);
            SET batchUserShipmentDetail (d) <- batchInvoiceDetail(invoiceDetail);
            SET quantityUserShipmentDetail (d) <- diffShippedInvoiceDetail(invoiceDetail);
        }
    }
} IN invoiceGroup;

EXTEND FORM userShipment
    PROPERTIES(s) fillInvoiceUserShipment, invoicesShipment READONLY
    PROPERTIES(d) descriptionInvoiceUserShipmentDetail
;
EXTEND DESIGN userShipment { headerColumn2 { ADD s.invoiceGroup; } }
EXTEND FORM userShipments
    PROPERTIES(s) READONLY invoicesShipment
    PROPERTIES(d) READONLY descriptionInvoiceUserShipmentDetail
;

//-- аггр.объект

createShipmentInvoice 'Создавать поставку' = ABSTRACT BOOLEAN (invoice) IN documentPrmGroup;
createShipmentUserInvoice 'Создавать поставку' = DATA BOOLEAN (userInvoice);
createShipmentInvoice (invoice) += createShipmentUserInvoice(invoice);

EXTEND FORM userInvoice
    PROPERTIES(i) createShipmentInvoice
    PROPERTIES(d) SHOWIF createShipmentInvoice(i) shipmentPriceUserInvoiceDetail, shipmentSumUserInvoiceDetail
;
EXTEND FORM userInvoices
    PROPERTIES(i) READONLY createShipmentInvoice
    PROPERTIES(d) READONLY SHOWIF createShipmentInvoice(i) shipmentPriceUserInvoiceDetail, shipmentSumUserInvoiceDetail
;

createShipmentInvoiceDetail 'Создавать поставку' (invoiceDetail) = createShipmentInvoice(invoiceInvoiceDetail(invoiceDetail));

CLASS invoiceShipment 'Поставка на основе инвойса' : shipment;
CLASS invoiceShipmentPosted 'Закрытая поставка на основе инвойса' : invoiceShipment, postedObject;
CLASS invoiceShipmentDetail 'Строка поставки на основе инвойса' : shipmentDetail;

@defineDocumentTables(invoiceShipment);

@defineDocumentAggregation(invoice, invoiceShipment, createShipmentInvoice);
shipmentShipmentDetail(detail) += invoiceShipmentInvoiceShipmentDetail(detail);

dateShipment(shipment) += dateInvoiceShipment(shipment);
timeShipment(shipment) += timeInvoiceShipment(shipment);

@defineDocumentAggregationStockPrefix(invoice, invoiceShipment, stock, 'Склад', , );
stockShipment(shipment) += stockInvoiceShipment(shipment);
dataStockShipmentDetail(shipmentDetail) += dataStockInvoiceDetail(invoiceDetailInvoiceShipmentDetail(shipmentDetail));

@defineDocumentAggregationStockPrefix(invoice, invoiceShipment, customer, 'Покупатель', , );
customerShipment(shipment) += customerInvoiceShipment(shipment);

@defineDocumentAggregationPosted(invoice, invoiceShipment);
isPostedShipment(shipment) += isPostedInvoiceShipment(shipment);

numberInvoiceShipment 'Номер документа' (invoiceShipment) = numberInvoice(invoiceInvoiceShipment(invoiceShipment));
numberShipment(shipment) += numberInvoiceShipment(shipment);

seriesInvoiceShipment 'Серия документа' (invoiceShipment) = seriesInvoice(invoiceInvoiceShipment(invoiceShipment));
seriesShipment(shipment) += seriesInvoiceShipment(shipment);

seriesNumberInvoiceShipment 'Серия/номер документа' (invoiceShipment) = seriesNumberInvoice(invoiceInvoiceShipment(invoiceShipment));

noteInvoiceInvoiceShipment 'Примечание' (invoiceShipment) = noteInvoice(invoiceInvoiceShipment(invoiceShipment));
noteShipment(shipment) += noteInvoiceInvoiceShipment(shipment);

currencyInvoiceShipment  (invoiceShipment) = currencyInvoice(invoiceInvoiceShipment(invoiceShipment));
currencyShipment (shipment) += currencyInvoiceShipment(shipment);

contractSkuCustomerInvoiceShipment  (invoiceShipment) = contractSkuCustomerInvoice(invoiceInvoiceShipment(invoiceShipment));
contractSkuCustomerShipment (shipment) += contractSkuCustomerInvoiceShipment(shipment);

isCommissionInvoiceShipment  (invoiceShipment) = isCommissionInvoice(invoiceInvoiceShipment(invoiceShipment));
isCommissionShipment(shipment)+= isCommissionInvoiceShipment(shipment);

@defineDocumentDescription(invoiceShipment, invoiceShipmentDetail, seriesNumberInvoiceShipment, 'Поставка на основе инвойса');
descriptionShipment (shipment) += descriptionInvoiceShipment(shipment);

@defineDocumentDetailIndex(invoiceShipment);

@defineDocumentAggregationDetailSku(invoice, invoiceShipment, sku);
skuShipmentDetail(shipmentDetail) +=  skuInvoiceShipmentDetail(shipmentDetail);

@defineDocumentAggregationDetailBatch (invoice, invoiceShipment);
batchShipmentDetail (shipmentDetail) += batchInvoiceShipmentDetail(shipmentDetail);

@defineDocumentAggregationDetailQuantity(invoice, invoiceShipment);
quantityShipmentDetail(shipmentDetail) += quantityInvoiceShipmentDetail(shipmentDetail);

priceInvoiceShipmentDetail(invoiceShipmentDetail) = shipmentPriceInvoiceDetail(invoiceDetailInvoiceShipmentDetail(invoiceShipmentDetail));
priceShipmentDetail(shipmentDetail) += priceInvoiceShipmentDetail(shipmentDetail);

sumInvoiceShipmentDetail(invoiceShipmentDetail) = shipmentSumInvoiceDetail(invoiceDetailInvoiceShipmentDetail(invoiceShipmentDetail));
sumShipmentDetail(shipmentDetail) += sumInvoiceShipmentDetail(shipmentDetail);


// Проводим по регистру
@implementSkuLedger(shipment, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantityShipmentDetail (ledger);
limitOutFIFOSkuLedgerBatch(ledger, batch) += IF batchShipmentDetail(ledger) THEN
                                                quantityShipmentDetail (ledger) AND batchShipmentDetail(ledger) == batch
                                                ELSE currentBalanceBatchStock(batch, stockShipmentDetail(ledger)); //AND NOT commissionContractSkuBatchA(batch);
changedDataSkuLedger(ledger) += CHANGED(batchShipmentDetail(ledger));
sumOutSkuLedger(ledger) += sumShipmentDetail(ledger);

//skipSkuLedger (ledger) += skipSkuLedgerInvoiceWHOutDetail(ledger);
@defineConstraintSkuLedgerCosted(shipment, 'Не хватает остатков по партиям для продажи товаров');

FORM dialogShipments 'Поставки (все)'
    OBJECTS s = shipment
    PROPERTIES (s) READONLY isPostedShipment FORCE GRID, objectClassName, numberShipment, seriesShipment, dateShipment, timeShipment,
                            nameStockShipment, nameCustomerShipment, nameCurrencyShipment, noteShipment,
                            isCommissionShipment,
                            countShipmentDetailShipment, quantityShipmentDetailShipment, sumShipmentDetailShipment


    OBJECTS d = shipmentDetail
    PROPERTIES (d) READONLY indexShipmentDetail, idBarcodeSkuShipmentDetail, nameSkuShipmentDetail, shortNameUOMSkuShipmentDetail,
                            descriptionBatchShipmentDetail, quantityShipmentDetail, priceShipmentDetail, sumShipmentDetail,
                            nameStockShipmentDetail
    FILTERS shipmentShipmentDetail(d) == s

    DIALOG shipment OBJECT s
;

DESIGN dialogShipments FROM DEFAULT {

    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD s.box;

        NEW documentDetail {
            type = TABBED;

            ADD d.box {
                title = 'Спецификация';
            }

        }
    }
}

// ------------- Навигатор --------- //

NAVIGATOR {
    saleNavigator {
        ADD userShipments;
//        ADD dialogShipments;
    }
}