MODULE ScheduleOrder;

REQUIRE System,
        Utils,
        Historizable,
        Stock,
        Numerator,
        Document;

CLASS STATIC genType 'Тип генерации' {
    genDays 'Генерация через N дней',
    genNumber 'Генерация по числам',
    genDayMonth 'Генерация по дням недели и месяца'
};

CLASS scheduleOrder 'График поставок'; //: historyObject
TABLE scheduleOrder(scheduleOrder);

//общие свойства
typeScheduleOrder 'Тип генерации графика (ИД)' = DATA genType (scheduleOrder);
nameTypeScheduleOrder 'Тип генерации графика' (scheduleOrder) = name(typeScheduleOrder(scheduleOrder)) IN baseGroup;

supplierScheduleOrder 'Поставщик (ИД)' = DATA legalEntity(scheduleOrder) AUTOSET;
nameSupplierScheduleOrder 'Поставщик' (scheduleOrder) = name(supplierScheduleOrder(scheduleOrder)) IN baseGroup;
//UNPSupplierScheduleOrder 'УНП поставщика' (scheduleOrder) = UNPLegalEntity(supplierScheduleOrder(scheduleOrder)) IN baseGroup;

customerScheduleOrder 'Покупатель (ИД)' = DATA legalEntity(scheduleOrder) AUTOSET;
nameCustomerScheduleOrder 'Покупатель' (scheduleOrder) = name(customerScheduleOrder(scheduleOrder)) IN baseGroup;
//UNPCustomerScheduleOrder 'УНП покупателя' (scheduleOrder) = UNPLegalEntity(customerScheduleOrder(scheduleOrder)) IN baseGroup;

supplierStockScheduleOrder = DATA stock(scheduleOrder);
nameSupplierStockScheduleOrder 'Склад поставщика' (scheduleOrder) = name(supplierStockScheduleOrder(scheduleOrder));

customerStockScheduleOrder = DATA stock(scheduleOrder);
nameCustomerStockScheduleOrder 'Склад покупателя' (scheduleOrder) = name(customerStockScheduleOrder(scheduleOrder));

startDateScheduleOrder 'Дата начала' = DATA DATE (scheduleOrder) IN baseGroup;
endDateScheduleOrder 'Дата окончания' = DATA DATE (scheduleOrder) IN baseGroup;

dayBeforeScheduleOrder 'За сколько дней формировать заказ' = DATA INTEGER (scheduleOrder);

//свойства "Каждые N недель"
periodScheduleOrder 'По прошествии скольки недель будет осуществится следующая поставка' = DATA INTEGER (scheduleOrder);

//свойства "Каждые N дней"
dayAfterScheduleOrder 'Через сколько дней после последней поставки делать заказ' = DATA INTEGER (scheduleOrder);
dayLastOrderScheduleOrder 'Дата последнего заказа' = DATA DATE (scheduleOrder);

//свойства "По числам"
stringNumberScheduleOrder 'Числа месяца поставок (указывать через запятую)' = DATA STRING[100] (scheduleOrder);
transferDayScheduleOrder 'День на который переносить поставки с Субботы и Воскресенья (ИД)' = DATA DOW (scheduleOrder);
nameTransferDayScheduleOrder 'День на который переносить поставки с Субботы и Воскресенья' (scheduleOrder) = name(transferDayScheduleOrder(scheduleOrder));
CONSTRAINT transferDayScheduleOrder(scheduleOrder) != DOW.friday AND transferDayScheduleOrder(scheduleOrder) != DOW.monday CHECKED MESSAGE 'Выберите день с ПН по ПТ';

//свойства "По дням недели и месяца"
inMonthScheduleOrder 'Включать' = DATA BOOLEAN (scheduleOrder, month);
inDayScheduleOrder 'Включать' = DATA BOOLEAN (scheduleOrder, DOW);
inAllMonthScheduleOrder 'Включить все месяцы' = DATA BOOLEAN (scheduleOrder);
inMonthScheduleOrder(scheduleOrder, month) <- inAllMonthScheduleOrder(scheduleOrder) WHEN ASSIGNED(inAllMonthScheduleOrder(scheduleOrder) AND month IS month);

toShowGenDay (scheduleOrder) = typeScheduleOrder(scheduleOrder) == genType.genDays;
toShowGenNumber (scheduleOrder) = typeScheduleOrder(scheduleOrder) == genType.genNumber;
toShowGenDayMonth (scheduleOrder) = typeScheduleOrder(scheduleOrder) == genType.genDayMonth;

CLASS scheduleOrderDetail 'Предварительный заказ';
TABLE scheduleOrderDetail(scheduleOrderDetail);

dateOrderScheduleOrderDetail 'Дата заказа' = DATA DATE (scheduleOrderDetail) IN baseGroup;
dateSupplyScheduleOrderDetail 'Дата поставки' = DATA DATE (scheduleOrderDetail) IN baseGroup;

scheduleOrderScheduleOrderDetail 'График поставок'  = DATA scheduleOrder(scheduleOrderDetail);

supplierScheduleOrderDetail(scheduleOrderDetail) = supplierScheduleOrder(scheduleOrderScheduleOrderDetail(scheduleOrderDetail));
nameSupplierScheduleOrderDetail 'Поставщик' (scheduleOrderDetail) = name(supplierScheduleOrderDetail(scheduleOrderDetail));

customerScheduleOrderDetail(scheduleOrderDetail) = customerScheduleOrder(scheduleOrderScheduleOrderDetail(scheduleOrderDetail));
nameCustomerScheduleOrderDetail 'Покупатель' (scheduleOrderDetail) = name(customerScheduleOrderDetail(scheduleOrderDetail));

supplierStockScheduleOrderDetail(scheduleOrderDetail) = supplierStockScheduleOrder(scheduleOrderScheduleOrderDetail(scheduleOrderDetail));
nameSupplierStockScheduleOrderDetail 'Склад поставщика' (scheduleOrderDetail) = name(supplierStockScheduleOrderDetail(scheduleOrderDetail));

customerStockScheduleOrderDetail(scheduleOrderDetail) = customerStockScheduleOrder(scheduleOrderScheduleOrderDetail(scheduleOrderDetail));
nameCustomerStockScheduleOrderDetail 'Склад покупателя' (scheduleOrderDetail) = name(customerStockScheduleOrderDetail(scheduleOrderDetail));

tmpDate = SESSION DATA DATE();
tmpDateP = SESSION DATA DATE();
tmpDateS = SESSION DATA DATE();

createScheduleOrder 'Создать заказы' = ACTION (scheduleOrder) {
    // генерация через N дней
    IF typeScheduleOrder(scheduleOrder) == genType.genDays THEN {
        SET tmpDate() <- dayLastOrderScheduleOrder(scheduleOrder);
        // итерируемся по всем датам через n дней
        WHILE tmpDate() <= endDateScheduleOrder(scheduleOrder) DO {
            IF tmpDate() >= startDateScheduleOrder(scheduleOrder) THEN {
                ADDOBJ scheduleOrderDetail;
                FOR o == addedObject() DO {                    
                    SET dateOrderScheduleOrderDetail(o) <- subtractDate(tmpDate(), dayBeforeScheduleOrder(scheduleOrder));
                    SET dateSupplyScheduleOrderDetail(o) <- tmpDate();
                    SET scheduleOrderScheduleOrderDetail(o) <- scheduleOrder;
                };
            };
            SET tmpDate() <- sumDate(tmpDate(), dayAfterScheduleOrder(scheduleOrder));
        };
    };

    // генерация по числам
    IF typeScheduleOrder(scheduleOrder) == genType.genNumber THEN {
        SET tmpDate() <- startDateScheduleOrder(scheduleOrder);
        // итерируемся по всем датам через 1 день
        WHILE tmpDate() <= endDateScheduleOrder(scheduleOrder) DO {
            IF isWordInCSV(dayInDate(tmpDate()), stringNumberScheduleOrder(scheduleOrder)) == 1 THEN {
                ADDOBJ scheduleOrderDetail;
                FOR o == addedObject() DO {
                    SET tmpDateS() <- tmpDate();
                    SET scheduleOrderScheduleOrderDetail(o) <- scheduleOrder;
                    // если попали на субботу или воскресенье
                    IF UNION OVERRIDE numberDOWInDate(tmpDateS()) == 0, numberDOWInDate(tmpDateS()) == 6 THEN {
                        IF numberDOW(transferDayScheduleOrder(scheduleOrder)) == 1 THEN {
                        // если нужно переносить на понедельник, то добавляем
                            WHILE numberDOWInDate(tmpDateS()) != 1 DO SET tmpDateS() <- sumDate(tmpDateS(), 1);
                        }
                        ELSE {
                            // если нужно переносить на пятницу, то отнимаем
                            WHILE numberDOWInDate(tmpDateS()) != 5 DO SET tmpDateS() <- subtractDate(tmpDateS(), 1);
                        };
                    };
                    SET dateSupplyScheduleOrderDetail(o) <- tmpDateS();
                    SET dateOrderScheduleOrderDetail(o) <- subtractDate(tmpDateS(), dayBeforeScheduleOrder(scheduleOrder));
                };
            };
            SET tmpDate() <- sumDate(tmpDate(), 1);
        };
    };

    // генерация по дням и месяцам
    IF typeScheduleOrder(scheduleOrder) == genType.genDayMonth THEN {
        SET tmpDate() <- startDateScheduleOrder(scheduleOrder);
        // итерируемся по всем датам через 1 день
        WHILE tmpDate() <= endDateScheduleOrder(scheduleOrder) DO {
            SET tmpDateP() <- tmpDate();
            WHILE tmpDate() < sumDate(tmpDateP(), 7) AND tmpDate() <= endDateScheduleOrder(scheduleOrder) DO {
                IF inMonthScheduleOrder(scheduleOrder, monthInDate(tmpDate())) AND inDayScheduleOrder(scheduleOrder, DOWInDate(tmpDate())) THEN {
                    ADDOBJ scheduleOrderDetail;
                    FOR o == addedObject() DO {
                        SET dateOrderScheduleOrderDetail(o) <- subtractDate(tmpDate(), dayBeforeScheduleOrder(scheduleOrder));
                        SET dateSupplyScheduleOrderDetail(o) <- tmpDate();
                        SET scheduleOrderScheduleOrderDetail(o) <- scheduleOrder;
                    };
                };
                SET tmpDate() <- sumDate(tmpDate(), 1);
            };
            SET tmpDate() <- sumDate(tmpDate(), periodScheduleOrder(scheduleOrder) * 7);
        };
    };

    EXEC apply();
} TOOLBAR;


isDayMonthScheduleOrder(scheduleOrder) = typeScheduleOrder(scheduleOrder) == genType.genDayMonth;
monthInDateScheduleOrderDetail 'Месяц'(scheduleOrderDetail) = name(monthNumber(numberMonthInDate(dateSupplyScheduleOrderDetail(scheduleOrderDetail))));
DOWInDateScheduleOrderDetail 'День недели'(scheduleOrderDetail) = name(DOWNumber(numberDOWInDate(dateSupplyScheduleOrderDetail(scheduleOrderDetail))));

FORM scheduleOrder 'График поставок'
    OBJECTS s=scheduleOrder FIXED PANEL
    PROPERTIES (s) nameSupplierScheduleOrder, nameSupplierStockScheduleOrder, nameCustomerScheduleOrder, nameCustomerStockScheduleOrder,
                   nameTypeScheduleOrder, startDateScheduleOrder, endDateScheduleOrder, dayBeforeScheduleOrder, periodScheduleOrder,
                   inAllMonthScheduleOrder, dayLastOrderScheduleOrder, dayAfterScheduleOrder, stringNumberScheduleOrder,
                   nameTransferDayScheduleOrder

    OBJECTS m=month FIXED GRID
    PROPERTIES(m) name SHOWIF isDayMonthScheduleOrder(s)
    PROPERTIES(s, m) inMonthScheduleOrder SHOWIF isDayMonthScheduleOrder(s)

    OBJECTS d=DOW FIXED GRID
    PROPERTIES(d) name SHOWIF isDayMonthScheduleOrder(s)
    PROPERTIES(s, d) inDayScheduleOrder SHOWIF isDayMonthScheduleOrder(s)

    OBJECTS sd=scheduleOrderDetail
    PROPERTIES (sd) monthInDateScheduleOrderDetail, DOWInDateScheduleOrderDetail, dateOrderScheduleOrderDetail, dateSupplyScheduleOrderDetail
    PROPERTIES (sd) READONLY nameSupplierScheduleOrderDetail, nameSupplierStockScheduleOrderDetail, nameCustomerScheduleOrderDetail,
                    nameCustomerStockScheduleOrderDetail, delete
    PROPERTIES createScheduleOrder(s) TODRAW sd

    PROPERTIES(sd) ADDOBJ DRAWTOTOOLBAR

    FILTERS scheduleOrderScheduleOrderDetail(sd)==s

    EDIT scheduleOrder OBJECT s
;

DESIGN scheduleOrder FROM DEFAULT{
    main {
        NEW topContainer {
            childConstraints = TO THE RIGHT;
            fillVertical = 1;
            NEW orderContainer {
                childConstraints = TO THE BOTTOM;
                NEW headContainer {
                    caption = 'Поставщик и покупатель';
                    ADD PROPERTY(nameSupplierScheduleOrder);
                    ADD PROPERTY(nameSupplierStockScheduleOrder);
                    ADD PROPERTY(nameCustomerScheduleOrder);
                    ADD PROPERTY(nameCustomerStockScheduleOrder);
                }

                NEW createContainer {
                    caption = 'Для генерации заказов';
                    ADD PROPERTY(nameTypeScheduleOrder);
                    ADD PROPERTY(startDateScheduleOrder);
                    ADD PROPERTY(endDateScheduleOrder);
                    ADD PROPERTY(dayBeforeScheduleOrder);
                    ADD PROPERTY(periodScheduleOrder);
                    ADD PROPERTY(inAllMonthScheduleOrder);
                    ADD PROPERTY(dayLastOrderScheduleOrder);
                    ADD PROPERTY(dayAfterScheduleOrder);
                    ADD PROPERTY(stringNumberScheduleOrder);
                    ADD PROPERTY(nameTransferDayScheduleOrder);
                }
            }
            ADD m.box;
            ADD d.box;
        }

        ADD sd.box {
            fillVertical = 2;
        };

        ADD functions.box;
    }
}

sup = SESSION DATA legalEntity();
namesup 'Поставщик' = name(sup());
cust = SESSION DATA legalEntity();
namecust 'Покупатель' = name(cust());
ss = SESSION DATA stock();
namess 'Склад поставщика' = name(ss());
sc = SESSION DATA stock();
namesc 'Склад покупателя' = name(sc());


FORM scheduleOrders 'Графики поставок'

    OBJECTS d=DATE FIXED PANEL
    PROPERTIES dv=OBJVALUE(d)
    PROPERTIES () namesup, namecust, namess, namesc

    OBJECTS s=scheduleOrder
    PROPERTIES(s) READONLY nameSupplierScheduleOrder, nameSupplierStockScheduleOrder, nameCustomerScheduleOrder, nameCustomerStockScheduleOrder,
    nameTypeScheduleOrder

    PROPERTIES(s) createScheduleOrder, ADDFORM, EDITFORM, delete DRAWTOTOOLBAR

    OBJECTS sd=scheduleOrderDetail
    PROPERTIES(sd) READONLY monthInDateScheduleOrderDetail, DOWInDateScheduleOrderDetail, dateOrderScheduleOrderDetail, dateSupplyScheduleOrderDetail,
                   nameSupplierScheduleOrderDetail, nameSupplierStockScheduleOrderDetail, nameCustomerScheduleOrderDetail, nameCustomerStockScheduleOrderDetail

    FILTERS supplierScheduleOrderDetail(sd) == sup() OR (sd IS scheduleOrderDetail AND NOT sup()),
            supplierStockScheduleOrderDetail(sd) == ss() OR (sd IS scheduleOrderDetail AND NOT ss()),
            customerScheduleOrderDetail(sd) == cust() OR (sd IS scheduleOrderDetail AND NOT cust()),
            customerStockScheduleOrderDetail(sd) == sc() OR (sd IS scheduleOrderDetail AND NOT sc())

    FILTERGROUP dateFilter
        FILTER 'На дату' 'F10' dateSupplyScheduleOrderDetail(sd) == d

    FILTERGROUP orderFilter
        FILTER 'Текущего графика' 'F11' scheduleOrderScheduleOrderDetail(sd) == s DEFAULT
;

DESIGN scheduleOrders FROM DEFAULT{
    main {
        NEW topContainer {
            childConstraints = TO THE RIGHTBOTTOM;
            ADD PROPERTY(dv);
            ADD PROPERTY(namesup);
            ADD PROPERTY(namess);
            ADD PROPERTY(namecust);
            ADD PROPERTY(namesc);
        }
        ADD s.box;
        ADD sd.box;

        ADD functions.box;
    }
}


EXTEND FORM legalEntity

    OBJECTS ss=scheduleOrder
    PROPERTIES(ss) READONLY startDateScheduleOrder, endDateScheduleOrder, nameTypeScheduleOrder
    FILTERS customerScheduleOrder(ss) == l, supplierScheduleOrder(ss) == s

    OBJECTS sc=scheduleOrder
    PROPERTIES(sc) READONLY startDateScheduleOrder, endDateScheduleOrder, nameTypeScheduleOrder

    FILTERS supplierScheduleOrder(sc) == l, customerScheduleOrder(sc) == c
;

EXTEND DESIGN legalEntity {
    extendContainer {
        docContainer{
            ADD ss.box;
        }
        docContainer2{
            ADD sc.box;
        }
    }
}