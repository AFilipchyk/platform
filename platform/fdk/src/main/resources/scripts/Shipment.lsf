MODULE Shipment;

REQUIRE Invoice;


// ----------------------------------- Создавать поставку по умолчанию для склада ------------------------------------------ //

createShipmentStock 'Создавать поставку' = DATA BOOLEAN (stock);

META defineDocumentHeaderCreateShipment(object, stockClass)
    createShipment###object 'Создавать поставку' (object) = DATA BOOLEAN(object) IN documentPrmGroup;

    createShipment###object (object) <- TRUE IF createShipmentStock(stockClass###object(object))
        WHEN CHANGED(stockClass###object(object));

END
META defineDocumentAbstractHeaderCreateShipment(object, stockClass)
    createShipment###object 'Создавать поставку' (object) = ABSTRACT BOOLEAN(object);
END

META defineDocumentInterfaceHeaderCreateShipment (object, stockClass)
    @defineDocumentAbstractHeaderCreateShipment (object, stockClass);
    @defineDocumentHeaderCreateShipment (user###object, stockClass);
    createShipment###object (object) += createShipment###user###object(object);
END
//----------------------------------------------- Поставка ---------------------------------------------------//

META defineShipment(sign, contact, contactCaption, partyA, partyB)

    CLASS ABSTRACT shipment 'Поставка'###sign;
    CLASS ABSTRACT shipmentDetail 'Строка поставки'###sign;

    CLASS userShipment 'Поставка (польз.)'###sign : shipment, historyObject, numeratedDocument;
    CLASS userShipmentDetail 'Строка поставки (польз.)'###sign : shipmentDetail;
    CLASS userShipmentPosted 'Закрытая поставка (польз.)'###sign : userShipment, postedObject;

    @defineDocumentInterface(shipment);

    @defineDocumentInterfaceNumber(shipment);

    @defineDocumentInterfaceDataStock(shipment, stock, 'Склад');
    @defineDocumentInterfacePosted(shipment);

    @defineDocumentInterfaceDescription(shipment, 'Поставка'###sign);

    @defineDocumentInterfaceCurrency(shipment);
    @deriveDocumentCurrency(userShipment, stock);

    @defineDocumentInterface###contact(shipment);

    @defineDocumentInterfaceDetailSku(shipment, sku);

    @defineDocumentInterfaceDetailQuantity(shipment);

    @defineDocumentInterfaceDetailPrice(shipment);

    @defineDocumentInterfaceDetailDataSum(shipment);
    @deriveDocumentDetailSum(userShipment, quantity);

    @defineDocumentInterfaceHeaderQuantity(shipment);
    @defineDocumentHeaderSkuQuantity(shipment, sku);
    @defineDocumentInterfaceHeaderSum(shipment);

    @defineAddDetailDialogSkuStock(userShipment, sku, stock, dialogSku);
    @defineAddDetailDialogBarcode(userShipment, sku);

// --------------------------- Формы --------------------------------- //

    FORM userShipment 'Поставка'###sign
        OBJECTS s = userShipment FIXED PANEL
        PROPERTIES (s) objectClassName, nameStockUserShipment, nameNumeratorObject, numberObject, seriesObject, dateUserShipment, timeUserShipment,
                       name###contact###UserShipment, nameCurrencyUserShipment, noteUserShipment,
                       countUserShipmentDetailUserShipment, quantityUserShipmentDetailUserShipment, sumUserShipmentDetailUserShipment

        OBJECTS d = userShipmentDetail
        PROPERTIES (d) indexUserShipmentDetail, idBarcodeSkuUserShipmentDetail, nameSkuUserShipmentDetail, shortNameUOMSkuUserShipmentDetail,
                       quantityUserShipmentDetail, priceUserShipmentDetail, sumUserShipmentDetail,
                       nameStockUserShipmentDetail, ADDOBJ, delete

        PROPERTIES(s) TODRAW d addDetailDialogSkuStockUserShipmentDetailUserShipment,
                               addDetailInputBarcodeUserShipmentDetailUserShipment, deleteUserShipmentDetailUserShipment
        FILTERS userShipmentUserShipmentDetail(d) == s

        EVENTS
            ON OK EXEC prePostUserShipment(s)

        EDIT userShipment OBJECT s
    ;

    DESIGN userShipment FROM DEFAULT{
        main {
            preferredSize = (1024, 768);

            NEW header.box BEFORE d.box {
                childConstraints = TO THE RIGHT;

                NEW headerRow1 {
                    childConstraints = TO THE BOTTOM;

                    ADD s.documentHeaderGroup {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(objectClassName) { preferredCharWidth = 10; }
                        ADD PROPERTY(nameStockUserShipment);
                        ADD PROPERTY(nameNumeratorObject);
                        ADD PROPERTY(numberObject);
                        ADD PROPERTY(seriesObject);
                        ADD PROPERTY(dateUserShipment);
                        ADD PROPERTY(timeUserShipment);
                    }

                    NEW headerColumn2 {
                        childConstraints = TO THE RIGHT;
                        ADD s.documentPrmGroup;
                    }
                }

                ADD s.documentSumGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }

            d.panel{
                childConstraints = TO THE BOTTOM;
            }
            PROPERTY(formOkAction) {
                caption = 'Провести';
            }
        }
    }

    addUserShipment 'Добавить' = ACTION ADDFORM userShipment;
    editUserShipment 'Редактировать' (userShipment) = ACTION EDITFORM userShipment;

    FORM shipments 'Поставки' TITLE 'Поставки'###sign
        OBJECTS s = shipment
        PROPERTIES (s) READONLY isPostedShipment FORCE GRID, objectClassName, numberShipment, seriesShipment, dateShipment, timeShipment,
                                nameStockShipment, name###contact###Shipment, nameCurrencyShipment, noteShipment,
                                countShipmentDetailShipment, quantityShipmentDetailShipment, sumShipmentDetailShipment
        PROPERTIES (s) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

        PROPERTIES ()  addUserShipment TODRAW s
        PROPERTIES (s) editUserShipment
        PROPERTIES (s) delete FORCE PANEL DRAWTOTOOLBAR SHOWIF isUserShipment(s)

        OBJECTS d = shipmentDetail
        PROPERTIES (d)  indexShipmentDetail, idBarcodeSkuShipmentDetail, nameSkuShipmentDetail, shortNameUOMSkuShipmentDetail,
                                quantityShipmentDetail, priceShipmentDetail, sumShipmentDetail,
                                nameStockShipmentDetail
        FILTERS shipmentShipmentDetail(d) == s

        DIALOG shipment OBJECT s
    ;
    DESIGN shipments FROM DEFAULT {
        PROPERTY (delete(s)) {
            askConfirm = TRUE;
        }

        NEW documentContainer BEFORE functions.box {
            type = SPLITV;
            childConstraints = TO THE BOTTOM;

            ADD s.box;

            NEW documentDetail {
                type = TABBED;

                ADD d.box {
                    title = 'Спецификация';
                }
                NEW documentHistory {
                    title = 'История';

                    ADD s.historyGroup;
                    ADD s.postedGroup;
                }
                NEW printTab {
                    title = 'Печатные формы';
                    NEW printContainer {
                        title = 'Печать';
                        childConstraints = TO THE BOTTOM;
                        fillVertical = 1.0; // todo : иначе кнопка не всегда показывается, нужно будет пофиксить как-нибудь
                    }
                }
            }
        }
    }

//--  Связь заказа и поставки
    orderShipmentDetail = ABSTRACT order (shipmentDetail) PERSISTENT;
    orderUserShipmentDetail = DATA order (userShipmentDetail);
    orderShipmentDetail(shipmentDetail) += orderUserShipmentDetail(shipmentDetail);

    CONSTRAINT contact###ShipmentDetail(shipmentDetail) != contact###Order(orderUserShipmentDetail(shipmentDetail)) OR
               companyUserShipment(shipmentDetail) != companyOrder(orderUserShipmentDetail(shipmentDetail))
        CHECKED BY orderUserShipmentDetail
            MESSAGE contactCaption###' и компания в заказе и поставке должны соответствовать друг другу';

    descriptionOrderShipmentDetail 'Заказ' (shipmentDetail) = descriptionOrder(orderShipmentDetail(shipmentDetail)) IN orderGroup;
    descriptionOrderUserShipmentDetail 'Заказ' (userShipmentDetail) = descriptionOrder(orderUserShipmentDetail(userShipmentDetail)) IN orderGroup;

    quantityShipmentDetailOrderShipment (order, shipment) = GROUP SUM quantityShipmentDetail(shipmentDetail) BY orderShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail);
    ordersShipment 'Заказы' (shipment) = GROUP CONCAT castToString255(descriptionOrder(order)) IF quantityShipmentDetailOrderShipment(order, shipment) , ', '
                                               BY shipment
                                               ORDER order IN orderGroup MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

//-- Подсчет поставленного к-ва по заказу

    shippedShipmentDetailOrderSku 'Кол-во (поставлено)' (order, sku) = GROUP SUM quantityShipmentDetail(shipmentDetail) IF isPostedShipmentDetail(shipmentDetail)
                                                      BY orderShipmentDetail(shipmentDetail), skuShipmentDetail(shipmentDetail);
    shippedOrderDetail 'Кол-во (поставлено)' (orderDetail) = PARTITION UNGROUP shippedShipmentDetailOrderSku
                                                              LIMIT STRICT quantityOrderDetail (orderDetail) AND isPostedOrderDetail(orderDetail)
                                                              BY orderOrderDetail(orderDetail), skuOrderDetail(orderDetail)
                                                              ORDER orderDetail PERSISTENT;

    toShipOrderDetail 'Не поставлено' (orderDetail) = quantityOrderDetail (orderDetail) (-) shippedOrderDetail(orderDetail);

    toShipOrderDetailStockOrder 'Не поставлено по складу' (stock, order) = GROUP SUM toShipOrderDetail(orderDetail) IF toShipOrderDetail(orderDetail) > 0
                                                                                     BY stockOrderDetail(orderDetail), orderOrderDetail(orderDetail);

    shippedOrderDetailOrder 'Кол-во (поставлено)' (order) = GROUP SUM shippedOrderDetail(orderDetail) BY orderOrderDetail(orderDetail) IN documentSumGroup PERSISTENT;

    // Создание поставки на основе заказа //

    FORM shipmentOrders 'Заказы'###sign
        OBJECTS s = stock FIXED PANEL
        PROPERTIES (s) READONLY name
        OBJECTS c = contact FIXED PANEL
        PROPERTIES (c) READONLY name

        OBJECTS o = order
        PROPERTIES (o) READONLY isPostedOrder FORCE GRID, objectClassName, numberOrder, seriesOrder, dateOrder, timeOrder,
                                nameStockOrder, name###contact###Order, nameCurrencyOrder, noteOrder,
                                countOrderDetailOrder, quantityOrderDetailOrder, shippedOrderDetailOrder, sumOrderDetailOrder
        FILTERS contact###Order(o) == c,
                isPostedOrder(o)
        FILTERGROUP order
            FILTER 'Заказы с непоставленными товарами со склада' 'F10' toShipOrderDetailStockOrder(s, o) DEFAULT
            FILTER 'Заказы со склада' 'F9' countOrderDetailStockOrder(s, o)

        OBJECTS d = orderDetail
        PROPERTIES (d) READONLY indexOrderDetail, idBarcodeSkuOrderDetail, nameSkuOrderDetail, shortNameUOMSkuOrderDetail,
                                quantityOrderDetail, shippedOrderDetail, priceOrderDetail, sumOrderDetail, nameStockOrderDetail,
                                toShipOrderDetail
        FILTERS orderOrderDetail(d) == o
        FILTERGROUP orderDetail
            FILTER 'Строки с непоставленными товарами со склада' 'F10' stockOrderDetail(d) == s AND toShipOrderDetail(d) > 0 DEFAULT
            FILTER 'Строки со склада' 'F9' stockOrderDetail(d) == s

        DIALOG order OBJECT o
    ;

    DESIGN shipmentOrders FROM DEFAULT {
        main {
            preferredSize = (1024, 768);
            NEW documentContainer BEFORE functions.box {

                childConstraints = TO THE BOTTOM;

                NEW headerBox {
                    childConstraints = TO THE RIGHT;
                    ADD s.box;
                    ADD c.box;
                }
                ADD o.box;
                NEW documentDetail {
                    type = TABBED;

                    ADD d.box {
                        title = 'Спецификация';
                    }
                    NEW printTab {
                        title = 'Печатные формы';
                        NEW printContainer {
                            title = 'Печать';
                            childConstraints = TO THE BOTTOM;
                            fillVertical = 1.0;
                        }
                    }
                }
            }
            PROPERTY(toShipOrderDetail) { background = #FFFFCC; }
        }
    }

    fillOrderUserShipment 'Заполнить на основе заказа' =  ACTION (userShipment) {
        FORM shipmentOrders OBJECTS s = stockUserShipment(userShipment), c = contact###UserShipment(userShipment) MODAL;
        IF formResult() == formResult.ok THEN {
            LOCAL saleOrder = order();
            SET saleOrder() <- chosenObject('o');

            FOR orderOrderDetail(orderDetail) == saleOrder() AND
                stockOrderDetail(orderDetail) == stockUserShipment(userShipment) AND
                toShipOrderDetail(orderDetail) > 0
                ADDOBJ d = userShipmentDetail DO {
                    SET userShipmentUserShipmentDetail(d) <- userShipment;
                    SET orderUserShipmentDetail(d) <- saleOrder();
                    SET skuUserShipmentDetail(d) <- skuOrderDetail(orderDetail);
                    SET quantityUserShipmentDetail (d) <- toShipOrderDetail(orderDetail);
            }
        }
    } IN orderGroup;

    EXTEND FORM userOrder
        PROPERTIES(o) READONLY shippedOrderDetailOrder
        PROPERTIES(d) READONLY shippedOrderDetail AFTER invoicedOrderDetail
    ;

    EXTEND FORM orders
        PROPERTIES(o) READONLY shippedOrderDetailOrder AFTER quantityOrderDetailOrder
        PROPERTIES(d) READONLY shippedOrderDetail AFTER invoicedOrderDetail
    ;

    EXTEND FORM userShipment
        PROPERTIES(s) fillOrderUserShipment, ordersShipment READONLY
        PROPERTIES(d) descriptionOrderUserShipmentDetail BEFORE delete(d)
    ;
    EXTEND DESIGN userShipment { headerColumn2 { ADD s.orderGroup; } }
    EXTEND FORM shipments
        PROPERTIES(s) READONLY ordersShipment
        PROPERTIES(d) READONLY descriptionOrderShipmentDetail
    ;
//--  Резервирование
    currentReserveSkuStock 'Текущий резерв'###sign (sku, stock) = GROUP SUM toShipOrderDetail (orderDetail) AND isPostedOrderDetail(orderDetail) AND NOT isClosedOrderDetail(orderDetail)
                                                              BY skuOrderDetail(orderDetail), stockOrderDetail(orderDetail) PERSISTENT;
    // без учета текущей даты/времени
    reserveBSkuStockDate 'Остаток на начало дня'###sign (sku, stock, date) = (currentReserveSkuStock(sku, stock) AND  date AS DATE) (-)
        [GROUP SUM toShipOrderDetail (orderDetail) AND isPostedOrderDetail(orderDetail) AND NOT isClosedOrderDetail(orderDetail) AND shipmentDateOrderDetail(orderDetail) >= (date AS DATE)
            BY skuOrderDetail(orderDetail), stockOrderDetail(orderDetail), date](sku, stock, date);

    // с учетом текущей даты/времени
    reserveASkuStockDate 'Остаток на конец дня'###sign (sku, stock, date) = (currentReserveSkuStock(sku, stock) AND date AS DATE) (-)
        [GROUP SUM toShipOrderDetail (orderDetail) AND isPostedOrderDetail(orderDetail) AND NOT isClosedOrderDetail(orderDetail) AND shipmentDateOrderDetail(orderDetail) > (date AS DATE)
            BY skuOrderDetail(orderDetail), stockOrderDetail(orderDetail), date](sku, stock, date);

    // без учета текущей даты/времени
    reserveBSkuStockDateTime 'Остаток (до)'###sign (sku, stock, dateTime) = (currentReserveSkuStock(sku, stock) AND dateTime AS DATETIME) (-)
        [GROUP SUM toShipOrderDetail (orderDetail) AND isPostedOrderDetail(orderDetail) AND NOT isClosedOrderDetail(orderDetail) AND shipmentDateTimeOrderDetail(orderDetail) >= (dateTime AS DATETIME)
            BY skuOrderDetail(orderDetail), stockOrderDetail(orderDetail), dateTime](sku, stock, dateTime);

    // с учетом текущей даты/времени
    reserveASkuStockDateTime 'Остаток (после)'###sign (sku, stock, dateTime) = (currentReserveSkuStock(sku, stock) AND dateTime AS DATETIME) (-)
        [GROUP SUM toShipOrderDetail (orderDetail) AND isPostedOrderDetail(orderDetail) AND NOT isClosedOrderDetail(orderDetail) AND shipmentDateTimeOrderDetail(orderDetail) > (dateTime AS DATETIME)
            BY skuOrderDetail(orderDetail), stockOrderDetail(orderDetail), dateTime](sku, stock, dateTime);


//--  Связь накладной и поставки
    invoiceDetailShipmentDetail = ABSTRACT invoiceDetail (shipmentDetail) PERSISTENT;
    invoiceDetailUserShipmentDetail = DATA invoiceDetail (userShipmentDetail);
    invoiceDetailShipmentDetail(shipmentDetail) += invoiceDetailUserShipmentDetail(shipmentDetail);

    CONSTRAINT contact###ShipmentDetail(detail) != contact###InvoiceDetail(invoiceDetailUserShipmentDetail(detail)) OR
               companyStockShipmentDetail(detail) != companyInvoice(invoiceDetailUserShipmentDetail(detail)) OR
               skuUserShipmentDetail(detail) != skuInvoiceDetail(invoiceDetailUserShipmentDetail(detail))
        CHECKED BY invoiceDetailUserShipmentDetail
            MESSAGE contactCaption###', компания и товар в накладной и поставке должны соответствовать друг другу';

//    GROUP invoiceGroup 'Информация о накладной' : baseGroup;

    descriptionIndexInvoiceDetailShipmentDetail 'Строка накладной' (detail) = descriptionIndexInvoiceDetail(invoiceDetailShipmentDetail(detail));
    descriptionIndexInvoiceDetailUserShipmentDetail 'Строка накладной' (detail) = descriptionIndexInvoiceDetail(invoiceDetailUserShipmentDetail(detail));

    quantityShipmentDetailInvoiceShipment (invoice, shipment) = GROUP SUM quantityShipmentDetail(shipmentDetail) BY invoiceInvoiceDetail(invoiceDetailShipmentDetail(shipmentDetail)), shipmentShipmentDetail(shipmentDetail);

    invoicesShipment 'Накладные' (shipment) = GROUP CONCAT castToString255(descriptionInvoice(invoice)) IF quantityShipmentDetailInvoiceShipment(invoice, shipment) , ', '
                                                    BY shipment
                                                    ORDER invoice IN invoiceGroup MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

    shippedInvoiceDetail 'Кол-во (поставлено)' (invoiceDetail) = GROUP SUM quantityShipmentDetail(shipmentDetail) IF isPostedShipmentDetail(shipmentDetail)
                                                                       BY invoiceDetailShipmentDetail(shipmentDetail) PERSISTENT;

    costInvoiceDetailBatch (invoiceDetail, batch) = GROUP SUM costSkuLedgerBatch(shipmentDetail, batch) BY invoiceDetailShipmentDetail(shipmentDetail), batch;
    countBatchInvoiceDetail 'Кол-во партий' (invoiceDetail) = GROUP SUM 1 IF costInvoiceDetailBatch(invoiceDetail, batch) BY invoiceDetail PERSISTENT;
    maxBatchInvoiceDetail (invoiceDetail) = GROUP MAX batch IF costInvoiceDetailBatch(invoiceDetail, batch) BY invoiceDetail;

    toShipInvoiceDetail 'Не поставлено' (invoiceDetail) = quantityInvoiceDetail (invoiceDetail) (-) shippedInvoiceDetail(invoiceDetail);

    toShipInvoiceDetailStockInvoice 'Не поставлено по складу' (stock, invoice) =
        GROUP SUM toShipInvoiceDetail(invoiceDetail) IF toShipInvoiceDetail(invoiceDetail) > 0
              BY stockInvoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);

    // Создание поставки на основе инвойса //

    FORM shipmentInvoices 'Накладные'###sign
        OBJECTS s = stock FIXED PANEL
        PROPERTIES (s) READONLY name
        OBJECTS c = contact FIXED PANEL
        PROPERTIES (c) READONLY name

        OBJECTS i = invoice
        PROPERTIES (i) READONLY isPostedInvoice FORCE GRID, objectClassName, numberInvoice, seriesInvoice, dateInvoice, timeInvoice,
                                nameStockInvoice, name###contact###Invoice, nameCurrencyInvoice, noteInvoice,
                                numberContractSku###contact###Invoice, isCommissionInvoice,
                                countInvoiceDetailInvoice, quantityInvoiceDetailInvoice, sumInvoiceDetailInvoice,
                                VATSumInvoiceDetailInvoice, invoiceSumInvoiceDetailInvoice, ordersInvoice
        FILTERS contact###Invoice(i) == c,
                isPostedInvoice(i)
        FILTERGROUP invoice
            FILTER 'Накладные с непоставленными товарами со склада' 'F10' toShipInvoiceDetailStockInvoice(s,i) DEFAULT
            FILTER 'Накладные со склада' 'F9' countInvoiceDetailStockInvoice(s,i)

        OBJECTS d = invoiceDetail
        PROPERTIES (d) READONLY indexInvoiceDetail, idBarcodeSkuInvoiceDetail, nameSkuInvoiceDetail, shortNameUOMSkuInvoiceDetail,
                       quantityInvoiceDetail, shippedInvoiceDetail, priceInvoiceDetail, sumInvoiceDetail,
                       numberVATInvoiceDetail, valueVATInvoiceDetail, VATSumInvoiceDetail, invoiceSumInvoiceDetail,
                       nameStockInvoiceDetail, descriptionOrderInvoiceDetail, toShipInvoiceDetail
        FILTERS invoiceInvoiceDetail(d) == i
        FILTERGROUP invoiceDetail
            FILTER 'Строки с непоставленными товарами со склада' 'F10' stockInvoiceDetail(d) == s AND toShipInvoiceDetail(d) > 0 DEFAULT
            FILTER 'Строки со склада' 'F9' stockInvoiceDetail(d) == s

        DIALOG invoice OBJECT i
    ;

    DESIGN shipmentInvoices FROM DEFAULT {
        main {
            preferredSize = (1024, 768);
            NEW documentContainer BEFORE functions.box {

                childConstraints = TO THE BOTTOM;

                NEW headerBox {
                    childConstraints = TO THE RIGHT;
                    ADD s.box;
                    ADD c.box;
                }
                ADD i.box;
                NEW documentDetail {
                    type = TABBED;

                    ADD d.box {
                        title = 'Спецификация';
                    }
                    NEW printTab {
                        title = 'Печатные формы';
                        NEW printContainer {
                            title = 'Печать';
                            childConstraints = TO THE BOTTOM;
                            fillVertical = 1.0;
                        }
                    }
                }
            }
            PROPERTY(toShipInvoiceDetail) { background = #FFFFCC; }
        }
    }

    fillInvoiceBatchUserShipmentDetail = ABSTRACT ACTION (userShipmentDetail, invoiceDetail);

    fillInvoiceUserShipment 'Заполнить на основе накладной' =  ACTION (userShipment) {
        FORM shipmentInvoices OBJECTS s = stockUserShipment(userShipment), c = contact###UserShipment(userShipment) MODAL;
        IF formResult() == formResult.ok THEN {
            LOCAL saleInvoice = invoice();
            SET saleInvoice() <- chosenObject('i');

            FOR invoiceInvoiceDetail(invoiceDetail) == saleInvoice() AND
                stockInvoiceDetail(invoiceDetail) == stockUserShipment(userShipment) AND
                toShipInvoiceDetail(invoiceDetail) > 0
                ADDOBJ d = userShipmentDetail DO {
                    SET userShipmentUserShipmentDetail(d) <- userShipment;
                    SET invoiceDetailUserShipmentDetail(d) <- invoiceDetail;
                    SET orderUserShipmentDetail(d) <- orderInvoiceDetail(invoiceDetail);

                    SET skuUserShipmentDetail(d) <- skuInvoiceDetail(invoiceDetail);
                    SET quantityUserShipmentDetail (d) <- toShipInvoiceDetail(invoiceDetail);

                    EXEC fillInvoiceBatchUserShipmentDetail(d, invoiceDetail);
            }
        }
    } IN invoiceGroup;

    EXTEND FORM userShipment
        PROPERTIES(s) fillInvoiceUserShipment, invoicesShipment READONLY
        PROPERTIES(d) descriptionIndexInvoiceDetailUserShipmentDetail BEFORE delete(d)
    ;
    EXTEND DESIGN userShipment { headerColumn2 { ADD s.invoiceGroup; } }

    EXTEND FORM shipments
        PROPERTIES(s) READONLY invoicesShipment
        PROPERTIES(d) READONLY descriptionIndexInvoiceDetailShipmentDetail
    ;

//-- аггр.объект

    @defineDocumentInterfaceDetailPricePrefix(invoice, shipment, ' (учетная)');
    overShipmentPriceUserInvoiceDetail = ABSTRACT NUMERIC[14,2] (userInvoiceDetail) PERSISTENT;
    calcShipmentPriceUserInvoiceDetail (detail) = priceUserInvoiceDetail(detail) OR overShipmentPriceUserInvoiceDetail(detail) PERSISTENT;

    extraShipmentPriceUserInvoiceDetail = ABSTRACT NUMERIC[14,2] (userInvoiceDetail) PERSISTENT;

    @defineDocumentInterfaceDetailDataSumPrefix (invoice, shipment, ' (учетная)');
    @deriveDocumentDetailSumPrefix(userInvoice, shipment, currency, quantity);

    @defineDocumentInterfaceHeaderCreateShipment (invoice, stock);

    skipCreateShipmentInvoiceDetail = ABSTRACT BOOLEAN (invoiceDetail) PERSISTENT;
    createShipmentInvoiceDetail 'Создавать поставку' (invoiceDetail) = createShipmentInvoice(invoiceInvoiceDetail(invoiceDetail)) AND NOT skipCreateShipmentInvoiceDetail(invoiceDetail);
    createShipmentUserInvoiceDetail 'Создавать поставку' (invoiceDetail) = createShipmentUserInvoice(userInvoiceUserInvoiceDetail(invoiceDetail));

    showShipmentInvoice (invoice) =  invoice IS invoice AND NOT createShipmentInvoice(invoice);

    backgroundShippedInvoice 'Цвет' (invoice) = RGB(255, 224, 255) IF invoice IS userInvoice;
    EXTEND FORM userInvoice
        PROPERTIES(i) BACKGROUND backgroundShippedInvoice(i) createShipmentUserInvoice
        PROPERTIES(d) BEFORE delete(d) SHOWIF createShipmentInvoice(i) BACKGROUND backgroundShippedInvoice(i) shipmentPriceUserInvoiceDetail,
                      shipmentSumUserInvoiceDetail
        PROPERTIES(d) READONLY shippedInvoiceDetail AFTER quantityUserInvoiceDetail SHOWIF showShipmentInvoice(i) BACKGROUND backgroundShippedInvoice(i)
    ;
    EXTEND FORM invoices
        PROPERTIES(i) READONLY BACKGROUND backgroundShippedInvoice(i) createShipmentInvoice
        PROPERTIES(d) READONLY SHOWIF createShipmentInvoice(i) BACKGROUND backgroundShippedInvoice(i) shipmentPriceInvoiceDetail, shipmentSumInvoiceDetail
        PROPERTIES(d) READONLY shippedInvoiceDetail AFTER quantityInvoiceDetail SHOWIF showShipmentInvoice(i) BACKGROUND backgroundShippedInvoice(i)
    ;


    CLASS invoiceShipment 'Поставка на основе инвойса'###sign : shipment;
    CLASS invoiceShipmentPosted 'Закрытая поставка на основе инвойса'###sign : invoiceShipment, postedObject;
    CLASS invoiceShipmentDetail 'Строка поставки на основе инвойса'###sign : shipmentDetail;

    @defineDocumentTables(invoiceShipment);

    @defineDocumentAggregation(invoice, invoiceShipment, createShipmentInvoice);
    shipmentShipmentDetail(detail) += invoiceShipmentInvoiceShipmentDetail(detail);

    @defineDocumentDetailIndex(invoiceShipment);

    dateShipment(shipment) += dateInvoiceShipment(shipment);
    timeShipment(shipment) += timeInvoiceShipment(shipment);

    @defineDocumentAggregationStockPrefix(invoice, invoiceShipment, stock, 'Склад', , );
    stockShipment(shipment) += stockInvoiceShipment(shipment);
    dataStockShipmentDetail(shipmentDetail) += dataStockInvoiceDetail(invoiceDetailInvoiceShipmentDetail(shipmentDetail));

    @defineDocumentAggregationStockPrefix(invoice, invoiceShipment, contact, contactCaption, , );
    contact###Shipment(shipment) += contact###InvoiceShipment(shipment);

    @defineDocumentAggregationPosted(invoice, invoiceShipment);
    isPostedShipment(shipment) += isPostedInvoiceShipment(shipment);

    numberInvoiceShipment 'Номер документа' (invoiceShipment) = numberInvoice(invoiceInvoiceShipment(invoiceShipment));
    numberShipment(shipment) += numberInvoiceShipment(shipment);

    seriesInvoiceShipment 'Серия документа' (invoiceShipment) = seriesInvoice(invoiceInvoiceShipment(invoiceShipment));
    seriesShipment(shipment) += seriesInvoiceShipment(shipment);

    seriesNumberInvoiceShipment 'Серия/номер документа' (invoiceShipment) = seriesNumberInvoice(invoiceInvoiceShipment(invoiceShipment));

    noteInvoiceInvoiceShipment 'Примечание' (invoiceShipment) = noteInvoice(invoiceInvoiceShipment(invoiceShipment));
    noteShipment(shipment) += noteInvoiceInvoiceShipment(shipment);

    currencyInvoiceShipment  (invoiceShipment) = currencyInvoice(invoiceInvoiceShipment(invoiceShipment));
    currencyShipment (shipment) += currencyInvoiceShipment(shipment);

    @defineDocumentDescription(invoiceShipment, invoiceShipmentDetail, seriesNumberInvoiceShipment, 'Поставка на основе инвойса'###sign);
    descriptionShipment (shipment) += descriptionInvoiceShipment(shipment);

    @defineDocumentAggregationDetailProperty (invoice, invoiceShipment, order, 'Заказ');
    orderShipmentDetail (shipmentDetail) += orderInvoiceShipmentDetail(shipmentDetail);

    @defineDocumentAggregationDetailSku(invoice, invoiceShipment, sku);
    skuShipmentDetail(shipmentDetail) +=  skuInvoiceShipmentDetail(shipmentDetail);

    @defineDocumentAggregationDetailQuantity(invoice, invoiceShipment);
    quantityShipmentDetail(shipmentDetail) += quantityInvoiceShipmentDetail(shipmentDetail);

    priceInvoiceShipmentDetail(invoiceShipmentDetail) = shipmentPriceInvoiceDetail(invoiceDetailInvoiceShipmentDetail(invoiceShipmentDetail));
    priceShipmentDetail(shipmentDetail) += priceInvoiceShipmentDetail(shipmentDetail);

    sumInvoiceShipmentDetail(invoiceShipmentDetail) = shipmentSumInvoiceDetail(invoiceDetailInvoiceShipmentDetail(invoiceShipmentDetail));
    sumShipmentDetail(shipmentDetail) += sumInvoiceShipmentDetail(shipmentDetail);

    invoiceDetailShipmentDetail(shipmentDetail) += invoiceDetailInvoiceShipmentDetail(shipmentDetail);

END

META defineShipmentBatch(dumb)
    @defineDocumentInterfaceDetailBatch(shipment, batch);

    EXTEND FORM userShipment PROPERTIES (d) descriptionBatchUserShipmentDetail AFTER shortNameUOMSkuUserShipmentDetail;
    EXTEND FORM shipments PROPERTIES (d) READONLY descriptionBatchShipmentDetail AFTER shortNameUOMSkuShipmentDetail;
    EXTEND FORM shipmentInvoices PROPERTIES (d) READONLY descriptionBatchInvoiceDetail AFTER shortNameUOMSkuInvoiceDetail;

    fillInvoiceBatchUserShipmentDetail (sd, id) += ACTION SET batchUserShipmentDetail (sd) <- batchInvoiceDetail(id);

    @defineDocumentAggregationDetailBatch (invoice, invoiceShipment);
    batchShipmentDetail (shipmentDetail) += batchInvoiceShipmentDetail(shipmentDetail);

END