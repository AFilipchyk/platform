MODULE Shipment;

REQUIRE Invoice;


//----------------------------------------------- Поставка ---------------------------------------------------//

META defineShipment(skuLedger, sign, contact, partyA, partyB)

    CLASS ABSTRACT shipment 'Поставка'###sign;
    CLASS ABSTRACT shipmentDetail 'Строка поставки'###sign : skuLedger;

    CLASS userShipment 'Поставка (польз.)'###sign : shipment, historyObject, numeratedDocument;
    CLASS userShipmentDetail 'Строка поставки (польз.)'###sign : shipmentDetail;
    CLASS userShipmentPosted 'Закрытая поставка (польз.)'###sign : userShipment, postedObject;

    @defineDocumentInterface(shipment);

    @defineDocumentInterfaceNumber(shipment);

    @defineDocumentInterfaceDataStock(shipment, stock, 'Склад');
    @defineDocumentInterfacePosted(shipment);

    @defineDocumentInterfaceDescription(shipment, 'Поставка'###sign);

    @defineDocumentInterfaceCurrency(shipment);
    @deriveDocumentCurrency(userShipment, stock);

    @defineDocumentInterface###contact(shipment);
    @defineDocumentInterfaceContract(shipment, contractSku###contact, singleContractSku###contact###partyA###partyB, partyA###Shipment, partyB###Shipment,
                                     'Сторона A договора поставки не соответствует компании склада-отправителя',
                                     'Сторона B договора поставки товаров не соответствует покупателю');

    @defineDocumentInterfaceDetailSku(shipment, sku);

    @defineDocumentInterfaceDetailQuantity(shipment);

    @defineDocumentInterfaceDetailPrice(shipment);
    @derivePriceOnSkuChange(userShipment);

    @defineDocumentInterfaceDetailDataSum(shipment);
    @deriveDocumentDetailSum(userShipment);

    @defineDocumentInterfaceHeaderQuantity(shipment);
    @defineDocumentHeaderSkuQuantity(shipment, sku);
    @defineDocumentInterfaceHeaderSum(shipment);

    @defineAddDetailDialogSkuStock(userShipment, sku, stock, dialogSku);
    @defineAddDetailDialogBarcode(userShipment, sku);

// --------------------------- Формы --------------------------------- //

    FORM userShipment 'Поставка'###sign
        OBJECTS s = userShipment FIXED PANEL
        PROPERTIES (s) objectClassName, nameStockUserShipment, nameNumeratorObject, numberObject, seriesObject, dateUserShipment, timeUserShipment,
                       name###contact###UserShipment, nameCurrencyUserShipment, noteUserShipment,
                       numberContractSku###contact###UserShipment, isCommissionUserShipment,
                       countUserShipmentDetailUserShipment, quantityUserShipmentDetailUserShipment, sumUserShipmentDetailUserShipment

        OBJECTS d = userShipmentDetail
        PROPERTIES (d) indexUserShipmentDetail, idBarcodeSkuUserShipmentDetail, nameSkuUserShipmentDetail, shortNameUOMSkuUserShipmentDetail,
                       quantityUserShipmentDetail, priceUserShipmentDetail, sumUserShipmentDetail,
                       nameStockUserShipmentDetail, ADDOBJ, delete

        PROPERTIES(s) TODRAW d addDetailDialogSkuStockUserShipmentDetailUserShipment,
                               addDetailInputBarcodeUserShipmentDetailUserShipment, deleteUserShipmentDetailUserShipment
        FILTERS userShipmentUserShipmentDetail(d) == s

        EVENTS
            ON OK EXEC prePostUserShipment(s)

        EDIT userShipment OBJECT s
    ;

    DESIGN userShipment FROM DEFAULT{
        main {
            preferredSize = (1024, 768);

            NEW header.box BEFORE d.box {
                childConstraints = TO THE RIGHT;

                NEW headerRow1 {
                    childConstraints = TO THE BOTTOM;

                    ADD s.documentHeaderGroup {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(objectClassName) { preferredCharWidth = 10; }
                        ADD PROPERTY(nameStockUserShipment);
                        ADD PROPERTY(nameNumeratorObject);
                        ADD PROPERTY(numberObject);
                        ADD PROPERTY(seriesObject);
                        ADD PROPERTY(dateUserShipment);
                        ADD PROPERTY(timeUserShipment);
                    }

                    NEW headerColumn2 {
                        childConstraints = TO THE RIGHT;
                        ADD s.documentPrmGroup;
                    }
                }

                ADD s.documentSumGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }

            d.panel{
                childConstraints = TO THE BOTTOM;
            }
            PROPERTY(formOkAction) {
                caption = 'Провести';
            }
        }
    }

    FORM userShipments 'Поставки'###sign
        OBJECTS s = userShipment
        PROPERTIES (s) READONLY isPostedUserShipment FORCE GRID, objectClassName, numberObject, seriesObject, dateUserShipment, timeUserShipment,
                                nameStockUserShipment, name###contact###UserShipment, nameCurrencyUserShipment, noteUserShipment,
                                numberContractSku###contact###UserShipment, isCommissionUserShipment,
                                countUserShipmentDetailUserShipment, quantityUserShipmentDetailUserShipment, sumUserShipmentDetailUserShipment

        PROPERTIES (s) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

        PROPERTIES (s) ADDFORM, EDITFORM, delete FORCE PANEL DRAWTOTOOLBAR

        OBJECTS d = userShipmentDetail
        PROPERTIES (d) READONLY indexUserShipmentDetail, idBarcodeSkuUserShipmentDetail, nameSkuUserShipmentDetail, shortNameUOMSkuUserShipmentDetail,
                                quantityUserShipmentDetail, priceUserShipmentDetail, sumUserShipmentDetail,
                                nameStockUserShipmentDetail
        FILTERS userShipmentUserShipmentDetail(d) == s

        DIALOG shipment OBJECT s
    ;

    DESIGN userShipments FROM DEFAULT {
        PROPERTY (delete(s)) {
            askConfirm = TRUE;
        }

        NEW documentContainer BEFORE functions.box {
            type = SPLITV;
            childConstraints = TO THE BOTTOM;

            ADD s.box;

            NEW documentDetail {
                type = TABBED;

                ADD d.box {
                    title = 'Спецификация';
                }
                NEW documentHistory {
                    title = 'История';

                    ADD s.historyGroup;
                    ADD s.postedGroup;
                }
                NEW printTab {
                    title = 'Печатные формы';
                    NEW printContainer {
                        title = 'Печать';
                        childConstraints = TO THE BOTTOM;
                        fillVertical = 1.0; // todo : иначе кнопка не всегда показывается, нужно будет пофиксить как-нибудь
                    }
                }
            }
        }
    }

//--  Связь накладной и поставки
    invoiceShipmentDetail = ABSTRACT invoice (shipmentDetail);
    invoiceUserShipmentDetail = DATA invoice (userShipmentDetail);
    invoiceShipmentDetail(shipmentDetail) += invoiceUserShipmentDetail(shipmentDetail);

    CONSTRAINT contact###ShipmentDetail(shipmentDetail) != contact###Invoice(invoiceUserShipmentDetail(shipmentDetail)) OR
               companyUserShipment(shipmentDetail) != companyInvoice(invoiceUserShipmentDetail(shipmentDetail))
        CHECKED BY invoiceUserShipmentDetail
            MESSAGE 'Покупатель и компания в накладной и поставке должны соответствовать друг другу';

    GROUP invoiceGroup 'Информация о накладной' : baseGroup;

    descriptionInvoiceInvoiceShipmentDetail 'Накладная' (shipmentDetail) = descriptionInvoice(invoiceShipmentDetail(shipmentDetail)) IN orderGroup;
    descriptionInvoiceUserShipmentDetail 'Накладная' (userShipmentDetail) = descriptionInvoice(invoiceUserShipmentDetail(userShipmentDetail)) IN invoiceGroup;

    inInvoiceShipment (invoice, shipment) = GROUP SUM quantityShipmentDetail(shipmentDetail) BY invoiceShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail);

    invoicesShipment 'Накладные' (shipment) = GROUP CONCAT castToString255(descriptionInvoice(invoice)) IF inInvoiceShipment(invoice, shipment) , ', '
                                                    BY shipment
                                                    ORDER invoice IN invoiceGroup MINCHARWIDTH 30 PREFCHARWIDTH 50;



//-- Подсчет к-ва в паставках

    shippedInvoiceSku 'К-во в поставках' (invoice, sku) = [GROUP SUM quantityShipmentDetail(shipmentDetail) IF isPostedShipmentDetail(shipmentDetail)
        BY invoiceShipmentDetail(shipmentDetail), skuShipmentDetail(shipmentDetail)](invoice, sku) AND isPostedInvoice(invoice);

    shippedInvoiceDetail 'К-во в поставках' (invoiceDetail) = PARTITION UNGROUP shippedInvoiceSku
                                                              LIMIT STRICT quantityInvoiceDetail (invoiceDetail) AND isPostedInvoiceDetail(invoiceDetail)
                                                              BY invoiceInvoiceDetail(invoiceDetail), skuInvoiceDetail(invoiceDetail)
                                                              ORDER invoiceDetail;

    EXTEND FORM userInvoice
        PROPERTIES(d) READONLY shippedInvoiceDetail AFTER quantityUserInvoiceDetail

    ;

    EXTEND FORM userInvoices
        PROPERTIES(d) READONLY shippedInvoiceDetail AFTER quantityUserInvoiceDetail

    ;

    EXTEND FORM invoices
        PROPERTIES(d) READONLY shippedInvoiceDetail AFTER quantityInvoiceDetail

    ;
//--  Связь заказа и поставки
    orderShipmentDetail = ABSTRACT order (shipmentDetail);
    orderUserShipmentDetail = DATA order (userShipmentDetail);
    orderShipmentDetail(shipmentDetail) += orderUserShipmentDetail(shipmentDetail);

    CONSTRAINT contact###ShipmentDetail(shipmentDetail) != contact###Order(orderUserShipmentDetail(shipmentDetail)) OR
               companyUserShipment(shipmentDetail) != companyOrder(orderUserShipmentDetail(shipmentDetail))
        CHECKED BY orderUserShipmentDetail
            MESSAGE 'Покупатель и компания в заказе и поставке должны соответствовать друг другу';

    descriptionOrderShipmentDetail 'Заказ' (shipmentDetail) = descriptionOrder(orderShipmentDetail(shipmentDetail)) IN orderGroup;
    descriptionOrderUserShipmentDetail 'Заказ' (userShipmentDetail) = descriptionOrder(orderUserShipmentDetail(userShipmentDetail)) IN orderGroup;

    inOrderShipment (order, shipment) = GROUP SUM quantityShipmentDetail(shipmentDetail) BY orderShipmentDetail(shipmentDetail), shipmentShipmentDetail(shipmentDetail);

    ordersShipment 'Заказы' (shipment) = GROUP CONCAT castToString255(descriptionOrder(order)) IF inOrderShipment(order, shipment) , ', '
                                               BY shipment
                                               ORDER order IN orderGroup MINCHARWIDTH 30 PREFCHARWIDTH 50;

    diffShippedInvoiceDetail 'Остаток по накладной' (invoiceDetail) = quantityInvoiceDetail (invoiceDetail) (-) shippedInvoiceDetail(invoiceDetail);

    inShippedQuantityStockInvoice 'Связь по кол-ву' (stock, invoice) = GROUP SUM diffShippedInvoiceDetail(invoiceDetail) IF stockInvoiceDetail(invoiceDetail) == stock
        AND diffShippedInvoiceDetail(invoiceDetail) >0 AND isPostedInvoiceDetail(invoiceDetail)
        BY stock, invoiceInvoiceDetail(invoiceDetail);

    inStockInvoice 'Связь' (stock, invoice) = GROUP SUM 1 IF stockInvoiceDetail(invoiceDetail) == stock BY stock, invoiceInvoiceDetail(invoiceDetail);

    FORM shipmentInvoices 'Накладные'###sign
        OBJECTS s = stock FIXED PANEL
        PROPERTIES (s) READONLY name
        OBJECTS c = contact FIXED PANEL
        PROPERTIES (c) READONLY name

        OBJECTS i = invoice
        PROPERTIES (i) READONLY isPostedInvoice FORCE GRID, objectClassName, numberInvoice, seriesInvoice, dateInvoice, timeInvoice,
                                nameStockInvoice, name###contact###Invoice, nameCurrencyInvoice, noteInvoice,
                                numberContractSku###contact###Invoice, isCommissionInvoice,
                                countInvoiceDetailInvoice, quantityInvoiceDetailInvoice, sumInvoiceDetailInvoice,
                                VATSumInvoiceDetailInvoice, invoiceSumInvoiceDetailInvoice, ordersInvoice

        OBJECTS d = invoiceDetail
        PROPERTIES (d) READONLY indexInvoiceDetail, idBarcodeSkuInvoiceDetail, nameSkuInvoiceDetail, shortNameUOMSkuInvoiceDetail,
                       quantityInvoiceDetail, shippedInvoiceDetail, priceInvoiceDetail, sumInvoiceDetail,
                       numberVATInvoiceDetail, valueVATInvoiceDetail, VATSumInvoiceDetail, invoiceSumInvoiceDetail,
                       nameStockInvoiceDetail, descriptionOrderInvoiceDetail, diffShippedInvoiceDetail

        FILTERS invoiceInvoiceDetail(d) == i,
                contact###Invoice(i) == c,
                isPostedInvoice(i)

        FILTERGROUP filter
            FILTER 'Накладные для данного склада с возможностью выбора' 'F10' inShippedQuantityStockInvoice(s,i) DEFAULT
            FILTER 'Накладные только для данного склад' 'F9' inStockInvoice(s,i)

        FILTERGROUP filter
            FILTER 'Строки для данного склада с возможностью выбора' 'F10' stockInvoiceDetail(d) ==s AND diffShippedInvoiceDetail(d) >0 AND isPostedInvoiceDetail(d) DEFAULT
            FILTER 'Строки только для данного склада' 'F9' stockInvoiceDetail(d) ==s
        DIALOG invoice OBJECT i
    ;

    DESIGN shipmentInvoices FROM DEFAULT {
        main {
            preferredSize = (1024, 768);
            NEW documentContainer BEFORE functions.box {

                childConstraints = TO THE BOTTOM;

                NEW headerBox {
                    childConstraints = TO THE RIGHT;
                    ADD s.box;
                    ADD c.box;
                }
                ADD i.box;
                NEW documentDetail {
                    type = TABBED;

                    ADD d.box {
                        title = 'Спецификация';
                    }
                    NEW printTab {
                        title = 'Печатные формы';
                        NEW printContainer {
                            title = 'Печать';
                            childConstraints = TO THE BOTTOM;
                            fillVertical = 1.0;
                        }
                    }
                }
            }
            PROPERTY(diffShippedInvoiceDetail) { background = #FFFFCC; }
        }
    }

    fillBatchUserShipmentDetail = ABSTRACT ACTION (userShipmentDetail, invoiceDetail);
    fillVATUserShipmentDetail = ABSTRACT ACTION (userShipmentDetail, invoiceDetail);
    fillVATSumUserShipmentDetail = ABSTRACT ACTION (userShipmentDetail, invoiceDetail);
    fillInvoiceSumUserShipmentDetail = ABSTRACT ACTION (userShipmentDetail, invoiceDetail);

    fillInvoiceUserShipment 'Заполнить поставку на основании накладной' =  ACTION (userShipment) {
        LOCAL saleInvoice = invoice();

        FORM shipmentInvoices OBJECTS s = stockUserShipment(userShipment), c = contact###UserShipment(userShipment) MODAL;
        IF formResult() == formResult.ok THEN {
            SET saleInvoice() <- chosenObject('i');

            FOR invoiceInvoiceDetail(invoiceDetail) == saleInvoice() AND stockInvoiceDetail(invoiceDetail) ==stockUserShipment(userShipment) AND diffShippedInvoiceDetail(invoiceDetail)>0 AND isPostedInvoiceDetail(invoiceDetail) ADDOBJ d = userShipmentDetail DO {
                SET userShipmentUserShipmentDetail(d) <- userShipment;
                SET invoiceUserShipmentDetail(d) <- saleInvoice();
                SET orderUserShipmentDetail(d) <- orderInvoiceDetail(invoiceDetail);
    //            SET stockUserShipmentDetail (d) <- stockInvoiceDetail(invoiceDetail);
                SET skuUserShipmentDetail(d) <- skuInvoiceDetail(invoiceDetail);
                SET quantityUserShipmentDetail (d) <- diffShippedInvoiceDetail(invoiceDetail);

                EXEC fillBatchUserShipmentDetail(d, invoiceDetail);
                EXEC fillVATUserShipmentDetail(d, invoiceDetail);
                EXEC fillVATSumUserShipmentDetail(d, invoiceDetail);
                EXEC fillInvoiceSumUserShipmentDetail(d, invoiceDetail);
            }
        }
    } IN invoiceGroup;

//-- Подсчет поставленного к-ва по заказу

    shippedOrderSku 'К-во в поставках' (order, sku) = [GROUP SUM quantityShipmentDetail(shipmentDetail) IF isPostedShipmentDetail(shipmentDetail)
        BY orderShipmentDetail(shipmentDetail), skuShipmentDetail(shipmentDetail)](order, sku) AND isPostedOrder(order);

    shippedOrderDetail 'К-во в поставках' (orderDetail) = PARTITION UNGROUP shippedOrderSku
                                                              LIMIT STRICT quantityOrderDetail (orderDetail) AND isPostedOrderDetail(orderDetail)
                                                              BY orderOrderDetail(orderDetail), skuOrderDetail(orderDetail)
                                                              ORDER orderDetail;

    diffShippedOrderDetail 'Остаток по заказу' (orderDetail) = quantityOrderDetail (orderDetail) (-) shippedOrderDetail(orderDetail);

    currentReserveSkuStock 'Текущий резерв'###sign (sku, stock) = GROUP SUM diffShippedOrderDetail (orderDetail) AND isPostedOrderDetail(orderDetail) AND NOT isClosedOrderDetail(orderDetail)
                                                              BY skuOrderDetail(orderDetail), stockOrderDetail(orderDetail) PERSISTENT;

    inShippedQuantityStockOrder 'Связь по кол-ву' (stock, order) = GROUP SUM diffShippedOrderDetail(orderDetail) IF stockOrderDetail(orderDetail) == stock
        AND diffShippedOrderDetail(orderDetail) >0 AND isPostedOrderDetail(orderDetail)
        BY stock, orderOrderDetail(orderDetail);



    FORM shipmentOrders 'Заказы'###sign
        OBJECTS s = stock FIXED PANEL
        PROPERTIES (s) READONLY name
        OBJECTS c = contact FIXED PANEL
        PROPERTIES (c) READONLY name

        OBJECTS o = order
        PROPERTIES (o) READONLY isPostedOrder FORCE GRID, objectClassName, numberOrder, seriesOrder, dateOrder, timeOrder,
                                nameStockOrder, name###contact###Order, nameCurrencyOrder, noteOrder,
                                countOrderDetailOrder, quantityOrderDetailOrder, sumOrderDetailOrder

        OBJECTS d = orderDetail
        PROPERTIES (d) READONLY indexOrderDetail, idBarcodeSkuOrderDetail, nameSkuOrderDetail, shortNameUOMSkuOrderDetail,
                                quantityOrderDetail, shippedOrderDetail, priceOrderDetail, sumOrderDetail, nameStockOrderDetail,
                                diffShippedOrderDetail

        FILTERS orderOrderDetail(d) == o,
                contact###Order(o) == c,
                isPostedOrder(o)

        FILTERGROUP filter
            FILTER 'Заказы для данного склада с возможностью выбора' 'F10' inShippedQuantityStockOrder(s,o) DEFAULT
            FILTER 'Заказы только для данного склад' 'F9' inStockOrder(s,o)

        FILTERGROUP filter
            FILTER 'Строки для данного склада с возможностью выбора' 'F10' stockOrderDetail(d) ==s AND diffShippedOrderDetail(d) >0 AND isPostedOrderDetail(d) DEFAULT
            FILTER 'Строки только для данного склада' 'F9' stockOrderDetail(d) ==s
        DIALOG order OBJECT o
    ;

    DESIGN shipmentOrders FROM DEFAULT {
        main {
            preferredSize = (1024, 768);
            NEW documentContainer BEFORE functions.box {

                childConstraints = TO THE BOTTOM;

                NEW headerBox {
                    childConstraints = TO THE RIGHT;
                    ADD s.box;
                    ADD c.box;
                }
                ADD o.box;
                NEW documentDetail {
                    type = TABBED;

                    ADD d.box {
                        title = 'Спецификация';
                    }
                    NEW printTab {
                        title = 'Печатные формы';
                        NEW printContainer {
                            title = 'Печать';
                            childConstraints = TO THE BOTTOM;
                            fillVertical = 1.0;
                        }
                    }
                }
            }
            PROPERTY(diffShippedOrderDetail) { background = #FFFFCC; }
        }
    }


    EXTEND FORM userOrder
        PROPERTIES(d) READONLY shippedOrderDetail AFTER invoicedOrderDetail

    ;

    EXTEND FORM userOrders
        PROPERTIES(d) READONLY shippedOrderDetail AFTER invoicedOrderDetail

    ;

    EXTEND FORM orders
        PROPERTIES(d) READONLY shippedOrderDetail AFTER invoicedOrderDetail

    ;

    fillOrderUserShipment 'Заполнить поставку на основании заказа' =  ACTION (userShipment) {
        LOCAL saleOrder = order();

        FORM shipmentOrders OBJECTS s = stockUserShipment(userShipment), c = contact###UserShipment(userShipment) MODAL;
        IF formResult() == formResult.ok THEN {
            SET saleOrder() <- chosenObject('o');

            FOR orderOrderDetail(orderDetail) == saleOrder() AND stockOrderDetail(orderDetail) ==stockUserShipment(userShipment) AND diffShippedOrderDetail(orderDetail)>0 AND isPostedOrderDetail(orderDetail) ADDOBJ d = userShipmentDetail DO {

                SET userShipmentUserShipmentDetail(d) <- userShipment;
                SET orderUserShipmentDetail(d) <- saleOrder();
//                SET stockUserShipmentDetail (d) <- stockOrderDetail(orderDetail);
                SET skuUserShipmentDetail(d) <- skuOrderDetail(orderDetail);
                SET quantityUserShipmentDetail (d) <- diffShippedOrderDetail(orderDetail);
                SET priceUserShipmentDetail (d) <- priceOrderDetail(orderDetail);
            }
        }
    } IN orderGroup;

    EXTEND FORM userShipment
        PROPERTIES(s) fillInvoiceUserShipment, invoicesShipment READONLY, fillOrderUserShipment, ordersShipment READONLY
        PROPERTIES(d) descriptionInvoiceUserShipmentDetail BEFORE delete(d), descriptionOrderUserShipmentDetail BEFORE delete(d)
    ;
    EXTEND DESIGN userShipment { headerColumn2 { ADD s.invoiceGroup; ADD s.orderGroup;} }
    EXTEND FORM userShipments
        PROPERTIES(s) READONLY invoicesShipment, ordersShipment
        PROPERTIES(d) READONLY descriptionInvoiceUserShipmentDetail, descriptionOrderUserShipmentDetail
    ;

//-- аггр.объект

    createShipmentInvoice 'Создавать поставку' = ABSTRACT BOOLEAN (invoice) IN documentPrmGroup;
    createShipmentUserInvoice 'Создавать поставку' = DATA BOOLEAN (userInvoice);
    createShipmentInvoice (invoice) += createShipmentUserInvoice(invoice);

    EXTEND FORM userInvoice
        PROPERTIES(i) createShipmentInvoice
        PROPERTIES(d) SHOWIF createShipmentInvoice(i) shipmentPriceUserInvoiceDetail, shipmentSumUserInvoiceDetail
    ;
    EXTEND FORM userInvoices
        PROPERTIES(i) READONLY createShipmentInvoice
        PROPERTIES(d) READONLY SHOWIF createShipmentInvoice(i) shipmentPriceUserInvoiceDetail, shipmentSumUserInvoiceDetail
    ;

    createShipmentInvoiceDetail 'Создавать поставку' (invoiceDetail) = createShipmentInvoice(invoiceInvoiceDetail(invoiceDetail));

    CLASS invoiceShipment 'Поставка на основе инвойса' : shipment;
    CLASS invoiceShipmentPosted 'Закрытая поставка на основе инвойса' : invoiceShipment, postedObject;
    CLASS invoiceShipmentDetail 'Строка поставки на основе инвойса' : shipmentDetail;

    @defineDocumentTables(invoiceShipment);

    @defineDocumentAggregation(invoice, invoiceShipment, createShipmentInvoice);
    shipmentShipmentDetail(detail) += invoiceShipmentInvoiceShipmentDetail(detail);

    dateShipment(shipment) += dateInvoiceShipment(shipment);
    timeShipment(shipment) += timeInvoiceShipment(shipment);

    @defineDocumentAggregationStockPrefix(invoice, invoiceShipment, stock, 'Склад', , );
    stockShipment(shipment) += stockInvoiceShipment(shipment);
    dataStockShipmentDetail(shipmentDetail) += dataStockInvoiceDetail(invoiceDetailInvoiceShipmentDetail(shipmentDetail));

    @defineDocumentAggregationStockPrefix(invoice, invoiceShipment, contact, 'Покупатель', , );
    contact###Shipment(shipment) += contact###InvoiceShipment(shipment);

    @defineDocumentAggregationPosted(invoice, invoiceShipment);
    isPostedShipment(shipment) += isPostedInvoiceShipment(shipment);

    numberInvoiceShipment 'Номер документа' (invoiceShipment) = numberInvoice(invoiceInvoiceShipment(invoiceShipment));
    numberShipment(shipment) += numberInvoiceShipment(shipment);

    seriesInvoiceShipment 'Серия документа' (invoiceShipment) = seriesInvoice(invoiceInvoiceShipment(invoiceShipment));
    seriesShipment(shipment) += seriesInvoiceShipment(shipment);

    seriesNumberInvoiceShipment 'Серия/номер документа' (invoiceShipment) = seriesNumberInvoice(invoiceInvoiceShipment(invoiceShipment));

    noteInvoiceInvoiceShipment 'Примечание' (invoiceShipment) = noteInvoice(invoiceInvoiceShipment(invoiceShipment));
    noteShipment(shipment) += noteInvoiceInvoiceShipment(shipment);

    currencyInvoiceShipment  (invoiceShipment) = currencyInvoice(invoiceInvoiceShipment(invoiceShipment));
    currencyShipment (shipment) += currencyInvoiceShipment(shipment);

    contractSku###contact###InvoiceShipment  (invoiceShipment) = contractSku###contact###Invoice(invoiceInvoiceShipment(invoiceShipment));
    contractSku###contact###Shipment (shipment) += contractSku###contact###InvoiceShipment(shipment);

    isCommissionInvoiceShipment  (invoiceShipment) = isCommissionInvoice(invoiceInvoiceShipment(invoiceShipment));
    isCommissionShipment(shipment)+= isCommissionInvoiceShipment(shipment);

    @defineDocumentDescription(invoiceShipment, invoiceShipmentDetail, seriesNumberInvoiceShipment, 'Поставка на основе инвойса'###sign);
    descriptionShipment (shipment) += descriptionInvoiceShipment(shipment);

    @defineDocumentAggregationDetailProp (invoice, invoiceShipment, order, 'Заказ');
    orderShipmentDetail (shipmentDetail) += orderInvoiceShipmentDetail(shipmentDetail);

    @defineDocumentDetailIndex(invoiceShipment);

    @defineDocumentAggregationDetailSku(invoice, invoiceShipment, sku);
    skuShipmentDetail(shipmentDetail) +=  skuInvoiceShipmentDetail(shipmentDetail);

    @defineDocumentAggregationDetailQuantity(invoice, invoiceShipment);
    quantityShipmentDetail(shipmentDetail) += quantityInvoiceShipmentDetail(shipmentDetail);

    priceInvoiceShipmentDetail(invoiceShipmentDetail) = shipmentPriceInvoiceDetail(invoiceDetailInvoiceShipmentDetail(invoiceShipmentDetail));
    priceShipmentDetail(shipmentDetail) += priceInvoiceShipmentDetail(shipmentDetail);

    sumInvoiceShipmentDetail(invoiceShipmentDetail) = shipmentSumInvoiceDetail(invoiceDetailInvoiceShipmentDetail(invoiceShipmentDetail));
    sumShipmentDetail(shipmentDetail) += sumInvoiceShipmentDetail(shipmentDetail);

    invoiceInvoiceShipmentDetail(invoiceShipmentDetail) = invoiceInvoiceDetail(invoiceDetailInvoiceShipmentDetail(invoiceShipmentDetail));
    invoiceShipmentDetail(shipmentDetail) += invoiceInvoiceShipmentDetail(shipmentDetail);

    FORM dialogShipments 'Поставки (все)'###sign
        OBJECTS s = shipment
        PROPERTIES (s) READONLY isPostedShipment FORCE GRID, objectClassName, numberShipment, seriesShipment, dateShipment, timeShipment,
                                nameStockShipment, name###contact###Shipment, nameCurrencyShipment, noteShipment,
                                isCommissionShipment,
                                countShipmentDetailShipment, quantityShipmentDetailShipment, sumShipmentDetailShipment


        OBJECTS d = shipmentDetail
        PROPERTIES (d) READONLY indexShipmentDetail, idBarcodeSkuShipmentDetail, nameSkuShipmentDetail, shortNameUOMSkuShipmentDetail,
                                quantityShipmentDetail, priceShipmentDetail, sumShipmentDetail,
                                nameStockShipmentDetail, descriptionInvoiceInvoiceShipmentDetail, descriptionOrderShipmentDetail
        FILTERS shipmentShipmentDetail(d) == s

        DIALOG shipment OBJECT s
    ;

    DESIGN dialogShipments FROM DEFAULT {

        NEW documentContainer BEFORE functions.box {
            type = SPLITV;
            childConstraints = TO THE BOTTOM;

            ADD s.box;

            NEW documentDetail {
                type = TABBED;

                ADD d.box {
                    title = 'Спецификация';
                }

            }
        }
    }
END

META defineShipmentBatch(dumb)
    @defineDocumentInterfaceDetailBatch(shipment, batch);
    @deriveDocumentDetailPriceBatchStock(userShipment);

    EXTEND FORM userShipment
    PROPERTIES (d) descriptionBatchUserShipmentDetail AFTER shortNameUOMSkuUserShipmentDetail
    ;
    EXTEND FORM userShipments
    PROPERTIES (d) READONLY descriptionBatchUserShipmentDetail AFTER shortNameUOMSkuUserShipmentDetail
    ;
    EXTEND FORM shipmentInvoices
    PROPERTIES (d) READONLY descriptionBatchInvoiceDetail AFTER shortNameUOMSkuInvoiceDetail
    ;

    fillBatchUserShipmentDetail (sd, id) += ACTION SET batchUserShipmentDetail (sd) <- batchInvoiceDetail(id);

    @defineDocumentAggregationDetailBatch (invoice, invoiceShipment);
    batchShipmentDetail (shipmentDetail) += batchInvoiceShipmentDetail(shipmentDetail);

    EXTEND FORM dialogShipments
    PROPERTIES (d) READONLY descriptionBatchShipmentDetail AFTER shortNameUOMSkuShipmentDetail
    ;
END