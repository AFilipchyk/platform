MODULE PurchaseSaleShipment;

REQUIRE SaleShipment, PurchaseShipment;

PRIORITY Sale;

//----------------------------------------------------------------------------//

GROUP shipmentGroup 'Информация о поставке' : baseGroup;

createPurchaseShipment 'Создать поставку' = ABSTRACT BOOLEAN (shipment) PERSISTENT;
createPurchaseUserShipment 'Создать поставку' = DATA BOOLEAN (userShipment) PERSISTENT;
createPurchaseShipment(shipment) += createPurchaseUserShipment(shipment);

createPurchaseShipmentDetail 'Создать поставку' (shipmentDetail) = createPurchaseShipment(shipmentShipmentDetail(shipmentDetail))PERSISTENT;
createPurchaseUserShipmentDetail 'Создать поставку' (userShipmentDetail) = createPurchaseUserShipment(userShipmentUserShipmentDetail(userShipmentDetail));
backgroundPurchaseShipment 'Цвет' (shipment) = RGB(255, 224, 255) IF shipment IS shipment;
EXTEND FORM userShipment
    PROPERTIES(s) BACKGROUND backgroundPurchaseShipment(s) createPurchaseUserShipment
;
EXTEND DESIGN userShipment {
    headerRow1{
        NEW headerRow13{
            title = 'Поставка';
            childConstraints = TO THE RIGHTBOTTOM;
            ADD PROPERTY(createPurchaseUserShipment);
        }
    }
}

EXTEND FORM shipments
    PROPERTIES(s) READONLY BACKGROUND backgroundPurchaseShipment(s) createPurchaseShipment
;
//--  Связь поставки с поставкой

shipmentDetailShipmentDetail = ABSTRACT shipmentDetail (Purchase.shipmentDetail) PERSISTENT;
shipmentDetailUserShipmentDetail = DATA shipmentDetail (Purchase.userShipmentDetail);
shipmentDetailShipmentDetail(shipmentDetail) += shipmentDetailUserShipmentDetail(shipmentDetail);

CONSTRAINT Purchase.supplierShipmentDetail(detail) != supplierShipmentDetail(shipmentDetailUserShipmentDetail(detail)) OR
           Purchase.supplierStockShipmentDetail(detail) != supplierStockShipmentDetail(shipmentDetailUserShipmentDetail(detail)) OR
           Purchase.customerShipmentDetail(detail) != customerShipmentDetail(shipmentDetailUserShipmentDetail(detail)) OR
           Purchase.customerStockShipmentDetail(detail) != customerStockShipmentDetail(shipmentDetailUserShipmentDetail(detail)) OR
           Purchase.skuShipmentDetail(detail) != skuShipmentDetail(shipmentDetailUserShipmentDetail(detail))
    CHECKED BY shipmentDetailUserShipmentDetail
        MESSAGE 'Поставщик, покупатель, склад поставщика и склад покупателя в поставке и поставке на осове поставке должны соответствовать друг другу';


descriptionIndexShipmentDetailShipmentDetail 'Строка поставки (продажа)' (detail) = descriptionIndexShipmentDetail(shipmentDetailShipmentDetail(detail));
descriptionIndexShipmentDetailUserShipmentDetail 'Строка поставки (продажа)' (detail) = descriptionIndexShipmentDetail(shipmentDetailUserShipmentDetail(detail));

quantityShipmentDetailShipmentShipment (sale, purchase) = GROUP SUM Purchase.quantityShipmentDetail(detail) BY shipmentShipmentDetail(shipmentDetailShipmentDetail(detail)), Purchase.shipmentShipmentDetail(detail);

saleShipmentsShipment 'Поставки (продажа)' (purchase) = GROUP CONCAT toString255(descriptionShipment(sale)) IF quantityShipmentDetailShipmentShipment(sale, purchase) , ', '
                                                        BY purchase
                                                        ORDER sale IN shipmentGroup MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

relationPurchaseShipment 'Связь' (purchase) = GROUP SUM quantityShipmentDetailShipmentShipment (sale, purchase) BY purchase PERSISTENT;

shippedShipmentDetail 'Кол-во (поставлено)' (shipmentDetail) = GROUP SUM Purchase.quantityShipmentDetail(detail) IF Purchase.isPostedShipmentDetail(detail)
                                                                   BY shipmentDetailShipmentDetail(detail) PERSISTENT;

toShipShipmentDetail 'Не поставлено' (shipmentDetail) = quantityShipmentDetail (shipmentDetail) (-) shippedShipmentDetail(shipmentDetail);

CLASS purchaseShipment 'Поставка на основе поставки': Purchase.shipment;
CLASS purchaseShipmentPosted 'Проведенная поставка на основе поставки' : purchaseShipment, postedObject;
CLASS purchaseShipmentDetail 'Строка поставки на основе поставки' : Purchase.shipmentDetail;

@defineDocumentTables(purchaseShipment);

@defineDocumentAggregation(shipment, purchaseShipment, createPurchaseShipment);
Purchase.shipmentShipmentDetail(detail) += purchaseShipmentPurchaseShipmentDetail(detail);

@defineDocumentDetailIndex(purchaseShipment);

Purchase.dateShipment(shipment) += datePurchaseShipment(shipment);
Purchase.timeShipment(shipment) += timePurchaseShipment(shipment);

@defineDocumentAggregationStockPrefix(shipment, purchaseShipment, supplierStock, 'Склад поставщика', , );
Purchase.supplierStockShipment(shipment) += supplierStockPurchaseShipment(shipment);
Purchase.dataSupplierStockShipmentDetail(shipmentDetail) += dataSupplierStockShipmentDetail(shipmentDetailPurchaseShipmentDetail(shipmentDetail));
@defineDocumentAggregationStockPrefix(shipment, purchaseShipment, customerStock, 'Склад покупателя', , );
Purchase.customerStockShipment(shipment) += customerStockPurchaseShipment(shipment);
Purchase.dataCustomerStockShipmentDetail(shipmentDetail) += dataCustomerStockShipmentDetail(shipmentDetailPurchaseShipmentDetail(shipmentDetail));

@defineDocumentAggregationStockPrefix(shipment, purchaseShipment, supplier, 'Поставщик', , );
Purchase.supplierShipment(shipment) += supplierPurchaseShipment(shipment);
@defineDocumentAggregationStockPrefix(shipment, purchaseShipment, customer, 'Покупатель', , );
Purchase.customerShipment(shipment) += customerPurchaseShipment(shipment);

@defineDocumentAggregationPosted(shipment, purchaseShipment);
Purchase.isPostedShipment(shipment) += isPostedPurchaseShipment(shipment);

Purchase.numberShipment(shipment) += numberShipment(shipmentPurchaseShipment(shipment));
Purchase.seriesShipment(shipment) += seriesShipment(shipmentPurchaseShipment(shipment));
seriesNumberPurchaseShipment 'Серия/номер документа' (purchaseShipment) = seriesNumberShipment(shipmentPurchaseShipment(purchaseShipment));

noteShipmentPurchaseShipment 'Примечание' (purchaseShipment) = noteShipment(shipmentPurchaseShipment(purchaseShipment));
Purchase.noteShipment(shipment) += noteShipmentPurchaseShipment(shipment);

currencyPurchaseShipment  (purchaseShipment) = currencyShipment(shipmentPurchaseShipment(purchaseShipment));
Purchase.currencyShipment (shipment) += currencyPurchaseShipment(shipment);

@defineDocumentDescription(purchaseShipment, purchaseShipmentDetail, seriesNumberPurchaseShipment, 'Поставка на основе поставки ');
Purchase.descriptionShipment (shipment) += descriptionPurchaseShipment(shipment);

@defineDocumentAggregationDetailSku(shipment, purchaseShipment, sku);
Purchase.skuShipmentDetail(shipmentDetail) +=  skuPurchaseShipmentDetail(shipmentDetail);

@defineDocumentAggregationDetailBatch(shipment, purchaseShipment);
Purchase.batchShipmentDetail(shipmentDetail) += batchPurchaseShipmentDetail(shipmentDetail);

Purchase.quantityShipmentDetail(shipmentDetail) += quantityShipmentDetail(shipmentDetailPurchaseShipmentDetail(shipmentDetail));

Purchase.priceShipmentDetail(shipmentDetail) += priceShipmentDetail(shipmentDetailPurchaseShipmentDetail(shipmentDetail));

Purchase.sumShipmentDetail(shipmentDetail) += sumShipmentDetail(shipmentDetailPurchaseShipmentDetail(shipmentDetail));

Purchase.editShipment(shipment) += ACTION EXEC editShipment(shipmentPurchaseShipment(shipment));

Purchase.showPurchasePackShipment(shipment) +=  showSalePackShipment(shipmentPurchaseShipment(shipment));
Purchase.barcodePackShipmentDetail(shipmentDetail) += barcodePackShipmentDetail(shipmentDetailPurchaseShipmentDetail(shipmentDetail));
Purchase.amountPackShipmentDetail(shipmentDetail) +=  amountPackShipmentDetail(shipmentDetailPurchaseShipmentDetail(shipmentDetail));
Purchase.packQuantityShipmentDetail(shipmentDetail) +=  packQuantityShipmentDetail(shipmentDetailPurchaseShipmentDetail(shipmentDetail));

shipmentDetailShipmentDetail(shipmentDetail) += shipmentDetailPurchaseShipmentDetail(shipmentDetail);

// Создание поставки на основе поставки //

FORM shipmentShipments 'Поставки'
    OBJECTS s = legalEntity FIXED PANEL
    PROPERTIES (s) READONLY name
    OBJECTS c = legalEntity FIXED PANEL
    PROPERTIES (c) READONLY name

    OBJECTS ss = stock FIXED PANEL
    PROPERTIES (ss) READONLY name
    OBJECTS cs = stock FIXED PANEL
    PROPERTIES (cs) READONLY name

    OBJECTS o = shipment
    PROPERTIES (o) READONLY isPostedShipment FORCE GRID, objectClassName, numberShipment, seriesShipment, dateShipment, timeShipment,
                            nameCurrencyShipment, noteShipment,
                            countShipmentDetailShipment, quantityShipmentDetailShipment, sumShipmentDetailShipment, showSalePackShipment
    FILTERS supplierShipment(o) == s,
            customerShipment(o) == c,
            supplierStockShipment(o) == ss,
            customerStockShipment(o) == cs,
            isPostedShipment(o) AND NOT createPurchaseShipment(o)

    OBJECTS d = shipmentDetail

    PROPERTIES (d) READONLY indexShipmentDetail, idBarcodeSkuShipmentDetail, nameSkuShipmentDetail, shortNameUOMSkuShipmentDetail,
                            quantityShipmentDetail
    PROPERTIES (d) READONLY SHOWIF showSalePackShipment(o) idBarcodePackShipmentDetail, shortNameUOMPackShipmentDetail, amountPackShipmentDetail, packQuantityShipmentDetail
    PROPERTIES (d) READONLY priceShipmentDetail, sumShipmentDetail,
                            nameSupplierStockShipmentDetail, toShipShipmentDetail BACKGROUND backgroundPurchaseShipment(o)
    FILTERS shipmentShipmentDetail(d) == o
;

DESIGN shipmentShipments FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        NEW documentContainer BEFORE functions.box {

            childConstraints = TO THE BOTTOM;
            NEW headerBox {
                childConstraints = TO THE RIGHTBOTTOM;
                NEW headerBox1 {
                    childConstraints = TO THE RIGHTBOTTOM;
                    title = 'Поставщик';
                    ADD s.box;
                    ADD ss.box;
                }
                NEW headerBox2 {
                    childConstraints = TO THE RIGHTBOTTOM;
                    title = 'Покупатель';
                    ADD c.box;
                    ADD cs.box;
                }
            }
            ADD o.box;
            NEW documentDetail {
                type = TABBED;

                ADD d.box {
                    title = 'Спецификация';
                }
                NEW printTab {
                    title = 'Печатные формы';
                    NEW printContainer {
                        title = 'Печать';
                        childConstraints = TO THE BOTTOM;
                        fillVertical = 1.0;
                    }
                }
            }
        }
    }
}


fillShipmentUserShipment 'Заполнить на основе поставки' =  ACTION (userShipment) {       // подставляем все количество ???
    FORM shipmentShipments OBJECTS s = Purchase.supplierUserShipment(userShipment), c = Purchase.customerUserShipment(userShipment),
                                   ss = Purchase.supplierStockUserShipment(userShipment), cs = Purchase.customerStockUserShipment(userShipment) MODAL;
    IF formResult() == formResult.ok THEN {
        LOCAL saleShipment = shipment();
        SET saleShipment() <- chosenObject('o');

        FOR shipmentShipmentDetail(shipmentDetail) == saleShipment() ADDOBJ d = Purchase.userShipmentDetail DO {
            SET Purchase.userShipmentUserShipmentDetail(d) <- userShipment;
            SET shipmentDetailUserShipmentDetail(d) <- shipmentDetail;

            SET Purchase.priceUserShipmentDetail(d) <- priceShipmentDetail(shipmentDetail);

            SET Purchase.skuUserShipmentDetail(d) <- skuShipmentDetail(shipmentDetail);
            SET Purchase.batchUserShipmentDetail(d) <- batchShipmentDetail(shipmentDetail);
            SET Purchase.quantityUserShipmentDetail (d) <- quantityShipmentDetail(shipmentDetail);

            SET Purchase.barcodePackUserShipmentDetail(d) <- barcodePackShipmentDetail(shipmentDetail);
            SET Purchase.amountPackUserShipmentDetail(d) <- amountPackShipmentDetail(shipmentDetail);
            SET Purchase.packQuantityUserShipmentDetail(d) <- packQuantityShipmentDetail(shipmentDetail);
        }
    }
} IN shipmentGroup;

EXTEND FORM Purchase.userShipment
    PROPERTIES(s) fillShipmentUserShipment, saleShipmentsShipment READONLY
    PROPERTIES(d) descriptionIndexShipmentDetailUserShipmentDetail BEFORE delete(d)
;
EXTEND DESIGN Purchase.userShipment { headerRow12{ ADD s.shipmentGroup {childConstraints = TO THE RIGHTBOTTOM;}}}

EXTEND FORM Purchase.shipments
//    PROPERTIES(s) READONLY saleShipmentsShipment
    PROPERTIES(d) READONLY descriptionIndexShipmentDetailShipmentDetail SHOWIF relationPurchaseShipment(s)
;




