MODULE Pricing;

REQUIRE Invoice, Employee, Store, StorePrice;


// ----------------------------------- Комиссия ------------------------------------------ //

CLASS pricingCommittee 'Комиссия для акта расценки' : committee;

//@defineCommitteeEmployee(committee, chairman, 'Председатель');
@defineCommitteeEmployeePrefix(pricingCommittee, formedMan, 'Цены сформировал');
@defineCommitteeEmployeePrefix(pricingCommittee, checkedMan, 'Реестр проверил');
@defineCommitteeEmployeePrefix(pricingCommittee, labeledMan, 'Товар промаркировал');
@defineCommitteeEmployeePrefix(pricingCommittee, accountantMan, 'Бухгалтер');
@defineCommitteeEmployeePrefix(pricingCommittee, headMan, 'Зав. магазином');

// ----------------------------------- Комиссия по умолчанию для отдела ------------------------------------------ //

pricingCommitteeDepartmentStore 'Комиссия для акта расценки (ИД)' = DATA pricingCommittee (departmentStore);
namePricingCommitteeDepartmentStore 'Комиссия для акта расценки' (departmentStore) = name(pricingCommitteeDepartmentStore(departmentStore));
isDefaultPricingCommitteeDepartmentStore 'По умолчанию' (pricingCommittee, departmentStore) = pricingCommitteeDepartmentStore(departmentStore) == pricingCommittee;
CONSTRAINT pricingCommitteeDepartmentStore(departmentStore) AND NOT inCommitteeEmployeeDivision(pricingCommitteeDepartmentStore(departmentStore), departmentStore)
    CHECKED BY pricingCommitteeDepartmentStore MESSAGE 'Для отдела выбрана комиссия, которая для него не действует';

EXTEND FORM departmentStore PROPERTIES namePricingCommitteeDepartmentStore(d);

// ----------------------------------- Формы для комиссий для реестра цен ------------------------------------------ //

FORM pricingCommittee 'Комиссия для акта расценки'
    OBJECTS c=pricingCommittee FIXED PANEL
    PROPERTIES(c)      name, nameFormedManPricingCommittee, nameCheckedManPricingCommittee,
                       nameLabeledManPricingCommittee, nameAccountantManPricingCommittee, nameHeadManPricingCommittee

    TREE treeStore a=STRING[3], t=chainStores, st=storeType, s=store
    PROPERTIES         READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS            stringEqualsAll(a), inChainStoresStoreType (t, st), inStoreTypeStore(st, s)

    OBJECTS dep=departmentStore
    PROPERTIES(dep)    READONLY depName = name
    PROPERTIES(c, dep) inCommitteeEmployeeDivision, isDefaultPricingCommitteeDepartmentStore
    FILTERS            inChainStoresStoreTypeStoreDepartment(t, st, s, dep)
    ORDER BY depName

    FILTERGROUP filters5
        FILTER 'Показывать отделы только для данной комиссии' 'F9' inCommitteeEmployeeDivision(c, dep)

    EDIT pricingCommittee OBJECT c
;

DESIGN pricingCommittee FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        childConstraints = TO THE BOTTOM;

        NEW caseOne AFTER c.box {
            childConstraints = TO THE RIGHT;
            title = 'Отделы, для которых действуют комиссии';

            ADD treeStore.tree {
                fillHorizontal = 1;
            }

            ADD dep.box{
                fillHorizontal = 2;
            }
        }

        NEW oneCase AFTER caseOne{
            title = 'Состав комиссии';
            fillHorizontal = 3;
            childConstraints = TO THE BOTTOM;
            ADD PROPERTY (nameFormedManPricingCommittee);
            ADD PROPERTY (nameCheckedManPricingCommittee);
            ADD PROPERTY (nameLabeledManPricingCommittee);
            ADD PROPERTY (nameAccountantManPricingCommittee);
            ADD PROPERTY (nameHeadManPricingCommittee);
        }

    }
}

FORM pricingCommitteeDialog 'Комиссии для акта расценки'
    OBJECTS r=pricingCommittee
    PROPERTIES(r)      READONLY name, nameEmployeeDivisionCommittee, nameFormedManPricingCommittee, nameCheckedManPricingCommittee, nameLabeledManPricingCommittee,
                       nameAccountantManPricingCommittee, nameHeadManPricingCommittee
    PROPERTIES(r)      ADDFORM, EDITFORM

    DIALOG pricingCommittee OBJECT r
;

// ----------------------------------- Макрос для задания комиссии для документов ------------------------------------------ //

GROUP pricingCommitteeGroup 'Комиссия' : publicGroup;

META defineDocumentHeaderPricingCommittee(object, stockClass)
    pricingCommittee###object (object) = DATA pricingCommittee(object) IN idGroup;

    namePricingCommittee###object 'Комиссия для акта расценки' (object) = commonName(pricingCommittee###object(object)) IN documentPrmGroup MINCHARWIDTH 20 PREFCHARWIDTH 40;
    pricingCommittee###object (object) <- pricingCommitteeDepartmentStore(stockClass###object(object))
        WHEN ASSIGNED(object IS object);

    nameFormedMan###object 'Цены сформировал' (object) = nameFormedManPricingCommittee(pricingCommittee###object(object)) IN pricingCommitteeGroup;
    nameCheckedMan###object 'Реестр проверил' (object) = nameCheckedManPricingCommittee(pricingCommittee###object(object)) IN pricingCommitteeGroup;
    nameLabeledMan###object 'Товар промаркировал' (object) = nameLabeledManPricingCommittee(pricingCommittee###object(object)) IN pricingCommitteeGroup;
    nameAccountantMan###object 'Бухгалтер' (object) = nameAccountantManPricingCommittee(pricingCommittee###object(object)) IN pricingCommitteeGroup;
    nameHeadMan###object 'Зав. магазином' (object) = nameHeadManPricingCommittee(pricingCommittee###object(object)) IN pricingCommitteeGroup;

END
META defineDocumentHeaderAbstractPricingCommittee(object, stockClass)
    pricingCommittee###object (object) = ABSTRACT pricingCommittee(object) IN idGroup;

    namePricingCommittee###object 'Комиссия для акта расценки' (object) = commonName(pricingCommittee###object(object)) IN documentPrmGroup MINCHARWIDTH 20 PREFCHARWIDTH 40;

    nameFormedMan###object 'Цены сформировал' (object) = nameFormedManPricingCommittee(pricingCommittee###object(object)) IN pricingCommitteeGroup;
    nameCheckedMan###object 'Реестр проверил' (object) = nameCheckedManPricingCommittee(pricingCommittee###object(object)) IN pricingCommitteeGroup;
    nameLabeledMan###object 'Товар промаркировал' (object) = nameLabeledManPricingCommittee(pricingCommittee###object(object)) IN pricingCommitteeGroup;
    nameAccountantMan###object 'Бухгалтер' (object) = nameAccountantManPricingCommittee(pricingCommittee###object(object)) IN pricingCommitteeGroup;
    nameHeadMan###object 'Зав. магазином' (object) = nameHeadManPricingCommittee(pricingCommittee###object(object)) IN pricingCommitteeGroup;

END

META defineDocumentInterfaceHeaderPricingCommittee (object, stockClass)
    @defineDocumentHeaderAbstractPricingCommittee (object, stockClass);
    @defineDocumentHeaderPricingCommittee (user###object, stockClass);
    pricingCommittee###object (object) += pricingCommittee###user###object(object);
END

// ---------------------------------------------- Надбавка -------------------------------------------- //

META defineDocumentDetailMarkupCustomPrefix (detail, prefix, caption)
    prefix###markup###detail 'Надбавка,%'###caption = DATA NUMERIC[8,3] (detail);
END
META defineDocumentAbstractDetailMarkupCustomPrefix (detail, prefix, caption)
    prefix###markup###detail 'Надбавка,%'###caption = ABSTRACT NUMERIC[8,3] (detail);
END
META defineDocumentInterfaceDetailMarkupCustomPrefix (detail, prefix, caption)
    @defineDocumentAbstractDetailMarkupCustomPrefix(detail, prefix, caption);
    @defineDocumentDetailMarkupCustomPrefix(user###detail, prefix, caption);
    prefix###markup###detail (detail) += prefix###markup###user###detail(detail);
END

META defineDocumentDetailMarkupPrefix (object, prefix, caption)
    @defineDocumentDetailMarkupCustomPrefix(object##Detail, prefix, caption);
END
META defineDocumentAbstractDetailMarkupPrefix (object, prefix, caption)
    @defineDocumentAbstractDetailMarkupCustomPrefix(object##Detail, prefix, caption);
END
META defineDocumentInterfaceDetailMarkupPrefix (object, prefix, caption)
    @defineDocumentInterfaceDetailMarkupCustomPrefix(object##Detail, prefix, caption);
END

META defineDocumentDetailMarkupSumCustomPrefix (detail, prefix, caption)
    prefix###markupSum###detail 'Сумма надбавки'###caption = DATA NUMERIC[14,3] (detail);
END
META defineDocumentAbstractDetailMarkupSumCustomPrefix (detail, prefix, caption)
    prefix###markupSum###detail 'Сумма надбавки'###caption = ABSTRACT NUMERIC[14,3] (detail);
END
META defineDocumentInterfaceDetailMarkupSumCustomPrefix (detail, prefix, caption)
    @defineDocumentAbstractDetailMarkupSumCustomPrefix(detail, prefix, caption);
    @defineDocumentDetailMarkupSumCustomPrefix(user###detail, prefix, caption);
    prefix###markupSum###detail (detail) += prefix###markupSum###user###detail(detail);
END
META defineDocumentInterfaceDetailMarkupSumPrefix (object, prefix, caption)
    @defineDocumentInterfaceDetailMarkupSumCustomPrefix(object##Detail, prefix, caption);
END
META defineDocumentInterfaceDetailMarkupSumPrefix (object, prefix)
    @defineDocumentInterfaceDetailMarkupSumPrefix(object, prefix, );
END

META deriveDocumentDetailMarkupSumCustomPrefix(detail, prefixA, prefixB, prefixC)
    prefixA###markupSum###detail(detail) <- prefixB###sum###detail(detail) (-) prefixA###VATSum###detail (detail) (-) prefixC###sum###detail(detail)
                    WHEN CHANGED(prefixB###sum###detail(detail)) OR CHANGED (prefixA###VATSum###detail (detail)) OR CHANGED (prefixC###sum###detail(detail));
END
META deriveDocumentDetailMarkupSumPrefix(object, prefixA, prefixB, prefixC)
    @deriveDocumentDetailMarkupSumCustomPrefix(object##Detail, prefixA, prefixB, prefixC);
END

//------------------------  derive or change ------------------------------------//

META deriveDocumentDetailPriceMarkupCustomPrefix(detail, prefix, currencyProp)
    prefix###price###detail(detail)  <- roundCurrency([X*(Y+100)*(Z+100)/10000](
    0.0 IF detail IS detail OR price###detail(detail),
    0.0 IF detail IS detail OR prefix###markup###detail(detail),
    value###prefix##VAT###detail(detail)), currencyProp###detail(detail))
                    WHEN CHANGED(price###detail(detail)) OR CHANGED (prefix###markup###detail(detail)) OR CHANGED(currencyProp###detail(detail));
END

META deriveDocumentDetailPriceMarkupCustomPrefix(detail, prefix)
    @deriveDocumentDetailPriceMarkupCustomPrefix(detail, prefix, currency);
END

META changeDocumentDetailMarkupCustomPrefix(detail, prefixA, prefixB)
    calc###prefixA###markup###detail(detail)  = [round2((((X - X*Y/(100+Y))/Z)-1)*100)](
        0.0 IF detail IS detail OR prefixA###price###detail(detail),
        0.0 IF detail IS detail OR value###prefixA###VAT###detail(detail),
        prefixB###price###detail(detail));

    change###prefixA###price###detail = ACTION (detail) {

        REQUEST NUMERIC[14,2] INPUT;
        SET prefixA###price###detail(detail) <- requestedNumeric();

        SET prefixA###markup###detail(detail) <- calc###prefixA###markup###detail(detail);
    }
END
META changeDocumentDetailPriceCustomPrefix(detail, prefixA, prefixB, currencyProp)

    calc###prefixA###price###detail(detail)  = roundCurrency([X*(Y+100)*(Z+100)/10000](
    0.0 IF detail IS detail OR prefixB###price###detail(detail),
    0.0 IF detail IS detail OR prefixA###markup###detail(detail),
    value###prefixA###VAT###detail(detail)), currencyProp###detail(detail));

    change###prefixA###markup###detail = ACTION (detail) {

        REQUEST NUMERIC[8,3] INPUT;
        SET prefixA###markup###detail(detail) <- requestedNumeric();

        SET prefixA###price###detail(detail) <- calc###prefixA###price###detail(detail);
    }
END

//----------------------------------------------- Расценка ---------------------------------------------------//

CLASS ABSTRACT pricing 'Акт расценки';
CLASS ABSTRACT pricingDetail 'Строка акта расценки';

CLASS userPricing 'Акт расценки (польз.)' : pricing, historyObject, numeratedDocument;
CLASS userPricingDetail 'Строка акта расценки (польз.)' : pricingDetail;
CLASS userPricingPosted 'Закрытый акт расценки (польз.)' : userPricing, postedObject;

@defineDocumentInterface(pricing);

@defineDocumentInterfaceNumber(pricing);

@defineDocumentInterfaceDataStock(pricing, departmentStore, 'Отдел');
@defineDocumentInterfacePosted(pricing);

@defineDocumentInterfaceDescription(pricing, 'Акт расценки');

@defineDocumentInterfaceCurrency(pricing);
@deriveDocumentCurrency(userPricing, departmentStore);

@defineDocumentInterfaceSupplier(pricing);

@defineDocumentInterfaceDetailSku(pricing, sku);

@defineDocumentInterfaceDetailQuantity(pricing);

@defineDocumentInterfaceDetailPricePrefix(pricing, , ' входная');
@defineDocumentInterfaceDetailDataSumPrefix (pricing, , ' входная');
@deriveDocumentDetailSum(userPricing, quantity);

@defineDocumentInterfaceHeaderQuantity(pricing);
@defineDocumentHeaderSkuQuantity(pricing, sku);
@defineDocumentHeaderSkuQuantity(userPricing, sku);
@defineDocumentInterfaceHeaderSumCustom (pricing, pricingDetail, ' входная');

@defineDocumentInterfaceDetailPricePrefix(pricing, retail, ' выходная');
@defineDocumentInterfaceDetailVATPrefix(pricing, retail, countryDepartmentStore, );    //countryStock
@deriveDocumentDetailValueVATPrefix(userPricing, retail);

@defineDocumentInterfaceDetailMarkupPrefix (pricing, retail, );
@changeDocumentDetailMarkupCustomPrefix(userPricingDetail, retail, );
@changeDocumentDetailPriceCustomPrefix(userPricingDetail, retail, , currency);
@defineDocumentInterfaceDetailDataSumPrefix (pricing, retail, ' выходная');

@deriveDocumentDetailPriceMarkupCustomPrefix(userPricingDetail, retail);
@deriveDocumentDetailSumPrefix(userPricing, retail, currency, quantity);

@defineDocumentInterfaceHeaderSumPrefix (pricing, retail, ' выходная');
@defineAddDetailDialogSkuStock(userPricing, sku, departmentStore, dialogSku);
@defineAddDetailDialogBarcode(userPricing, sku);

@defineDocumentInterfaceDetailVATDataSumPrefix (pricing, retail, ' розничная');
@deriveDocumentDetailReverseVATSumPrefix(userPricing, retail, retail);

@defineDocumentInterfaceDetailMarkupSumPrefix (pricing, retail);
@deriveDocumentDetailMarkupSumPrefix(userPricing, retail, retail, );

@defineDocumentInterfaceHeaderSumPrefix (pricing, retailMarkup, ' надбавки');
@defineDocumentInterfaceHeaderSumPrefix (pricing, retailVAT, ' НДС');

@defineDocumentInterfaceHeaderPricingCommittee (pricing, departmentStore);

//------------------------------------ Печатные формы акт расценки ------------------------------------------------ //

FORM pricing 'Акт расценки (печать)' PRINT
    OBJECTS p=pricing FIXED PANEL
    PROPERTIES (p)  SELECTOR objectClassName

    PROPERTIES (p) nameDepartmentStorePricing, nameCompanyPricing, numberPricing, seriesPricing, datePricing, timePricing,
                   nameSupplierPricing, nameCurrencyPricing, notePricing,
                   countPricingDetailPricing, quantityPricingDetailPricing, sumPricingDetailPricing,
                   retailMarkupSumPricingDetailPricing, retailVATSumPricingDetailPricing,
                   retailSumPricingDetailPricing, namePricingCommitteePricing,
                   nameFormedManPricing, nameCheckedManPricing, nameLabeledManPricing, nameAccountantManPricing,
                   nameHeadManPricing    //notPassToBookkeepingListRegister

    OBJECTS d=pricingDetail

    PROPERTIES (d) indexPricingDetail, idBarcodeSkuPricingDetail, nameSkuPricingDetail, shortNameUOMSkuPricingDetail,
                   quantityPricingDetail, pricePricingDetail, sumPricingDetail,
                   retailMarkupPricingDetail, retailMarkupSumPricingDetail, numberRetailVATPricingDetail, valueRetailVATPricingDetail, retailVATSumPricingDetail,
                   retailPricePricingDetail, retailSumPricingDetail

    FILTERS pricingPricingDetail(d) == p
;

printPricing 'Акт расценки' (pricing) = ACTION FORM pricing OBJECTS p IMAGE 'print.png' IN printGroup;

// --------------------------- Формы --------------------------------- //

FORM userPricing 'Акт расценки'
    OBJECTS p = userPricing FIXED PANEL
    PROPERTIES (p) objectClassName, nameDepartmentStoreUserPricing, nameNumeratorObject, numberObject, seriesObject, dateUserPricing, timeUserPricing,
                   nameSupplierUserPricing, nameCurrencyUserPricing, noteUserPricing,
                   countUserPricingDetailUserPricing, quantityUserPricingDetailUserPricing, sumUserPricingDetailUserPricing,
                   retailSumUserPricingDetailUserPricing, namePricingCommitteeUserPricing
    PROPERTIES (p) SHOWIF pricingCommitteeUserPricing(p)  nameFormedManUserPricing, nameCheckedManUserPricing, nameLabeledManUserPricing,
                   nameAccountantManUserPricing, nameHeadManUserPricing

    OBJECTS d = userPricingDetail
    PROPERTIES (d) indexUserPricingDetail, idBarcodeSkuUserPricingDetail, nameSkuUserPricingDetail, shortNameUOMSkuUserPricingDetail,
                   quantityUserPricingDetail, priceUserPricingDetail, sumUserPricingDetail,
                   retailMarkupUserPricingDetail ON CHANGE EXEC changeRetailMarkupUserPricingDetail(d), retailMarkupSumUserPricingDetail, numberRetailVATUserPricingDetail, valueRetailVATUserPricingDetail,
                   retailVATSumUserPricingDetail, retailPriceUserPricingDetail ON CHANGE EXEC changeRetailPriceUserPricingDetail(d), retailSumUserPricingDetail,
                   nameDepartmentStoreUserPricingDetail, ADDOBJ, delete


    PROPERTIES(p) TODRAW d addDetailDialogSkuStockUserPricingDetailUserPricing,
                           addDetailInputBarcodeUserPricingDetailUserPricing, deleteUserPricingDetailUserPricing
    FILTERS userPricingUserPricingDetail(d) == p

    EVENTS
        ON OK EXEC prePostUserPricing(p)

    EDIT userPricing OBJECT p
;

DESIGN userPricing FROM DEFAULT{
    main {
        preferredSize = (1024, 768);

        NEW header.box BEFORE d.box {
            childConstraints = TO THE RIGHT;

            NEW headerRow1 {
                childConstraints = TO THE BOTTOM;

                ADD p.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(objectClassName) { preferredCharWidth = 10; }
                    ADD PROPERTY(nameDepartmentStoreUserPricing);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateUserPricing);
                    ADD PROPERTY(timeUserPricing);
                }

                NEW headerColumn2 {
                    childConstraints = TO THE RIGHT;
                    ADD p.documentPrmGroup;
                }
                ADD p.pricingCommitteeGroup;
            }

            ADD p.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }

        d.panel{
            childConstraints = TO THE BOTTOM;
        }
        PROPERTY(formOkAction) {
            caption = 'Провести';
        }
    }
}

addUserPricing 'Добавить' = ACTION ADDFORM userPricing;
editUserPricing 'Редактировать' (userPricing) = ACTION EDITFORM userPricing;

FORM pricings 'Акты расценки' TITLE 'Акты расценки'
    OBJECTS p = pricing
    PROPERTIES (p) READONLY isPostedPricing FORCE GRID, objectClassName, numberPricing, seriesPricing, datePricing, timePricing,
                            nameDepartmentStorePricing, nameSupplierPricing, nameCurrencyPricing, notePricing,
                            countPricingDetailPricing, quantityPricingDetailPricing, sumPricingDetailPricing,
                            retailSumPricingDetailPricing

    PROPERTIES (p) READONLY FORCE PANEL nameUserCreated, timeCreated, hostnameComputerCreated, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES ()  addUserPricing TODRAW p
    PROPERTIES (p) editUserPricing
    PROPERTIES (p) delete FORCE PANEL DRAWTOTOOLBAR SHOWIF isUserPricing(p)
    PROPERTIES (p) printPricing FORCE PANEL

    OBJECTS d = pricingDetail
    PROPERTIES (d) READONLY indexPricingDetail, idBarcodeSkuPricingDetail, nameSkuPricingDetail, shortNameUOMSkuPricingDetail,
                   quantityPricingDetail, pricePricingDetail, sumPricingDetail,
                   retailMarkupPricingDetail, retailMarkupSumPricingDetail, numberRetailVATPricingDetail, valueRetailVATPricingDetail, retailVATSumPricingDetail,
                   retailPricePricingDetail, retailSumPricingDetail, nameDepartmentStorePricingDetail

    FILTERS pricingPricingDetail(d) == p

    DIALOG pricing OBJECT p
;
DESIGN pricings FROM DEFAULT {
    PROPERTY (delete(p)) {
        askConfirm = TRUE;
    }

    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD p.box;

        NEW documentDetail {
            type = TABBED;

            ADD d.box {
                title = 'Спецификация';
            }
            NEW documentHistory {
                title = 'История';

                ADD p.historyGroup;
                ADD p.postedGroup;
            }
            NEW printTab {
                title = 'Печатные формы';
                NEW printContainer {
                    title = 'Печать';
                    childConstraints = TO THE BOTTOM;
                    fillVertical = 1.0; // todo : иначе кнопка не всегда показывается, нужно будет пофиксить как-нибудь
                    ADD p.printGroup;
                }
            }
        }
    }
}

// ------------------------------------- Проведение по регистру ------------------------------ //

@implementSkuDepartmentStoreLedgerCustom(supplierPrice, pricing, sku, departmentStore, price);
@implementSkuDepartmentStoreLedger(retailVAT, pricing, sku, departmentStore);
@implementSkuDepartmentStoreLedger(retailPrice, pricing, sku, departmentStore);

// ------------------------------------- Автоматическое создание расценки для документа -------------------- //

META definePricing(sign, contact, contactCaption)
//--  Связь накладной и поставки
    invoiceDetailPricingDetail = ABSTRACT invoiceDetail (pricingDetail);
    invoiceDetailUserPricingDetail = DATA invoiceDetail (userPricingDetail);
    invoiceDetailPricingDetail(pricingDetail) += invoiceDetailUserPricingDetail(pricingDetail);

    CONSTRAINT contact###PricingDetail(detail) != contact###InvoiceDetail(invoiceDetailUserPricingDetail(detail)) OR
               companyDepartmentStorePricingDetail(detail) != companyInvoice(invoiceDetailUserPricingDetail(detail)) OR
               skuUserPricingDetail(detail) != skuInvoiceDetail(invoiceDetailUserPricingDetail(detail))
        CHECKED BY invoiceDetailUserPricingDetail
            MESSAGE contactCaption###', компания и товар в накладной и акте расценки должны соответствовать друг другу';

    descriptionIndexInvoiceDetailPricingDetail 'Строка накладной' (detail) = descriptionIndexInvoiceDetail(invoiceDetailPricingDetail(detail));
    descriptionIndexInvoiceDetailUserPricingDetail 'Строка накладной' (detail) = descriptionIndexInvoiceDetail(invoiceDetailUserPricingDetail(detail));

    quantityPricingDetailInvoicePricing (invoice, pricing) = GROUP SUM quantityPricingDetail(pricingDetail) BY invoiceInvoiceDetail(invoiceDetailPricingDetail(pricingDetail)), pricingPricingDetail(pricingDetail);

    invoicesPricing 'Накладные' (pricing) = GROUP CONCAT castToString255(descriptionInvoice(invoice)) IF quantityPricingDetailInvoicePricing(invoice, pricing) , ', '
                                                    BY pricing
                                                    ORDER invoice IN invoiceGroup MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

    pricingInvoiceDetail 'Кол-во (расценено)' (invoiceDetail) = GROUP SUM quantityPricingDetail(pricingDetail) IF isPostedPricingDetail(pricingDetail)
                                                                       BY invoiceDetailPricingDetail(pricingDetail) PERSISTENT;

    toPricingInvoiceDetail 'Не расценено' (invoiceDetail) = quantityInvoiceDetail (invoiceDetail) (-) pricingInvoiceDetail(invoiceDetail);

    toPricingInvoiceDetailStockInvoice 'Не расценено по отделу' (stock, invoice) =
        GROUP SUM toPricingInvoiceDetail(invoiceDetail) IF toPricingInvoiceDetail(invoiceDetail) > 0
              BY stockInvoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);

    // Создание расценки на основе инвойса //

    FORM pricingInvoices 'Накладные'###sign
        OBJECTS s = stock FIXED PANEL
        PROPERTIES (s) READONLY name
        OBJECTS c = contact FIXED PANEL
        PROPERTIES (c) READONLY name

        OBJECTS i = invoice
        PROPERTIES (i) READONLY isPostedInvoice FORCE GRID, objectClassName, numberInvoice, seriesInvoice, dateInvoice, timeInvoice,
                                nameStockInvoice, name###contact###Invoice, nameCurrencyInvoice, noteInvoice,
                                numberContractSku###contact###Invoice, isCommissionInvoice,
                                countInvoiceDetailInvoice, quantityInvoiceDetailInvoice, sumInvoiceDetailInvoice,
                                VATSumInvoiceDetailInvoice, invoiceSumInvoiceDetailInvoice, ordersInvoice
        FILTERS contact###Invoice(i) == c,
                isPostedInvoice(i)
        FILTERGROUP invoice
            FILTER 'Накладные с нерасцененными товарами' 'F10' toPricingInvoiceDetailStockInvoice(s,i) DEFAULT
            FILTER 'Накладные со склада' 'F9' countInvoiceDetailStockInvoice(s,i)

        OBJECTS d = invoiceDetail
        PROPERTIES (d) READONLY indexInvoiceDetail, idBarcodeSkuInvoiceDetail, nameSkuInvoiceDetail, shortNameUOMSkuInvoiceDetail,
                       quantityInvoiceDetail, pricingInvoiceDetail, priceInvoiceDetail, sumInvoiceDetail,
                       nameStockInvoiceDetail, descriptionOrderInvoiceDetail, toPricingInvoiceDetail
        FILTERS invoiceInvoiceDetail(d) == i
        FILTERGROUP invoiceDetail
            FILTER 'Строки с нерасцененными товарами' 'F10' stockInvoiceDetail(d) == s AND toPricingInvoiceDetail(d) > 0 DEFAULT
            FILTER 'Строки со склада' 'F9' stockInvoiceDetail(d) == s

    ;

    DESIGN pricingInvoices FROM DEFAULT {
        main {
            preferredSize = (1024, 768);
            NEW documentContainer BEFORE functions.box {

                childConstraints = TO THE BOTTOM;

                NEW headerBox {
                    childConstraints = TO THE RIGHT;
                    ADD s.box;
                    ADD c.box;
                }
                ADD i.box;
                NEW documentDetail {
                    type = TABBED;

                    ADD d.box {
                        title = 'Спецификация';
                    }
                    NEW printTab {
                        title = 'Печатные формы';
                        NEW printContainer {
                            title = 'Печать';
                            childConstraints = TO THE BOTTOM;
                            fillVertical = 1.0;
                        }
                    }
                }
            }
            PROPERTY(toPricingInvoiceDetail) { background = #FFFFCC; }
        }
    }

    fillInvoiceUserPricing 'Заполнить на основе накладной' =  ACTION (userPricing) {
        FORM pricingInvoices OBJECTS s = departmentStoreUserPricing(userPricing), c = contact###UserPricing(userPricing) MODAL;
        IF formResult() == formResult.ok THEN {
            LOCAL saleInvoice = invoice();
            SET saleInvoice() <- chosenObject('i');

            FOR invoiceInvoiceDetail(invoiceDetail) == saleInvoice() AND
                stockInvoiceDetail(invoiceDetail) == departmentStoreUserPricing(userPricing) AND
                toPricingInvoiceDetail(invoiceDetail) > 0
                ADDOBJ d = userPricingDetail DO {
                    SET userPricingUserPricingDetail(d) <- userPricing;
                    SET invoiceDetailUserPricingDetail(d) <- invoiceDetail;

                    SET skuUserPricingDetail(d) <- skuInvoiceDetail(invoiceDetail);
                    SET quantityUserPricingDetail (d) <- toPricingInvoiceDetail(invoiceDetail);
                    SET priceUserPricingDetail (d) <- priceInvoiceDetail(invoiceDetail);

                    SET retailVATUserPricingDetail(d) <- VATInvoiceDetail(invoiceDetail);
            }
        }
    } IN invoiceGroup;

    EXTEND FORM userPricing
        PROPERTIES(p) fillInvoiceUserPricing, invoicesPricing READONLY
        PROPERTIES(d) descriptionIndexInvoiceDetailUserPricingDetail BEFORE delete(d)
    ;
    EXTEND DESIGN userPricing { headerColumn2 { ADD p.invoiceGroup; } }

    EXTEND FORM pricings
        PROPERTIES(p) READONLY invoicesPricing
        PROPERTIES(d) READONLY descriptionIndexInvoiceDetailPricingDetail
    ;

//-- аггр.объект

    @defineDocumentInterfaceHeaderPricingCommittee(invoice, stock);
    @defineDocumentInterfaceDetailPricePrefix(invoice, retail, ' розничная');

    @defineDocumentInterfaceDetailVATPrefix(invoice, retail, countryStock, ' розничный');
    @deriveDocumentDetailValueVATPrefix(userInvoice, retail);
    retailVATUserInvoiceDetail (detail) <- VATUserInvoiceDetail(detail) WHEN ASSIGNED(VATUserInvoiceDetail(detail));

    @defineDocumentInterfaceDetailMarkupPrefix (invoice, retail, );
    @defineDocumentInterfaceDetailDataSumPrefix (invoice, retail, ' розничная');

    @deriveDocumentDetailPriceMarkupCustomPrefix(userInvoiceDetail, retail);
    @deriveDocumentDetailSumPrefix(userInvoice, retail, currency, quantity);

    @defineDocumentInterfaceHeaderSumPrefix (invoice, retail, ' розничная');


    @defineDocumentInterfaceDetailVATDataSumPrefix (invoice, retail, ' розничная');
    @deriveDocumentDetailReverseVATSumPrefix(userInvoice, retail, retail);

    @defineDocumentInterfaceDetailMarkupSumPrefix (invoice, retail);
    @deriveDocumentDetailMarkupSumPrefix(userInvoice, retail, retail, );
    @changeDocumentDetailMarkupCustomPrefix(userInvoiceDetail, retail, );
    @changeDocumentDetailPriceCustomPrefix(userInvoiceDetail, retail, , currency);

    createPricingInvoice 'Создавать акт расценки' = ABSTRACT BOOLEAN (invoice) IN documentPrmGroup;
    createPricingUserInvoice 'Создавать акт расценки' = DATA BOOLEAN (userInvoice) IN documentPrmGroup;
    createPricingInvoice (invoice) += createPricingUserInvoice(invoice);

    showCreatePricingInvoice (invoice) = stockInvoice(invoice) IS departmentStore AND NOT costLedgerDepartmentStore(stockInvoice(invoice));
    showPricingInvoice (invoice) = showCreatePricingInvoice (invoice) AND NOT createPricingInvoice(invoice);

    backgroundRetailInvoice 'Цвет' (invoice) = RGB(224, 255, 255) IF invoice IS userInvoice;
    EXTEND FORM userInvoice
        PROPERTIES(i) SHOWIF showCreatePricingInvoice(i) BACKGROUND backgroundRetailInvoice(i) createPricingUserInvoice
        PROPERTIES(i) SHOWIF createPricingUserInvoice(i) BACKGROUND backgroundRetailInvoice(i) namePricingCommitteeUserInvoice,
                      retailSumUserInvoiceDetailUserInvoice

        PROPERTIES(d) BEFORE nameStockUserInvoiceDetail(d) SHOWIF createPricingInvoice(i) BACKGROUND backgroundRetailInvoice(i)
                      retailMarkupUserInvoiceDetail ON CHANGE EXEC changeRetailMarkupUserInvoiceDetail(d), retailMarkupSumUserInvoiceDetail, numberRetailVATUserInvoiceDetail,
                      valueRetailVATUserInvoiceDetail, retailVATSumUserInvoiceDetail,
                      retailPriceUserInvoiceDetail ON CHANGE EXEC changeRetailPriceUserInvoiceDetail(d),
                      retailSumUserInvoiceDetail
        PROPERTIES(d) READONLY pricingInvoiceDetail AFTER quantityUserInvoiceDetail SHOWIF showPricingInvoice(i) BACKGROUND backgroundRetailInvoice(i)

    ;
    EXTEND DESIGN userInvoice {
        headerRow3 {
            NEW wor1 {
                title = 'Расценка';
                ADD PROPERTY(createPricingUserInvoice);
                ADD PROPERTY(namePricingCommitteeUserInvoice);
            }
        }
    }
    EXTEND FORM invoices
        PROPERTIES(i) READONLY createPricingInvoice, retailSumInvoiceDetailInvoice BEFORE ordersInvoice(i)
        PROPERTIES(d) READONLY BEFORE nameStockInvoiceDetail(d) SHOWIF createPricingInvoice(i)
                      retailMarkupInvoiceDetail, retailMarkupSumInvoiceDetail, numberRetailVATInvoiceDetail,
                      valueRetailVATInvoiceDetail, retailVATSumInvoiceDetail,
                      retailPriceInvoiceDetail, retailSumInvoiceDetail
        PROPERTIES(d) READONLY pricingInvoiceDetail AFTER quantityInvoiceDetail  SHOWIF showPricingInvoice(i)
    ;
    EXTEND FORM pricingInvoices
        PROPERTIES(i) READONLY createPricingInvoice, retailSumInvoiceDetailInvoice BEFORE ordersInvoice(i)
        PROPERTIES(d) READONLY BEFORE nameStockInvoiceDetail(d) SHOWIF createPricingInvoice(i)
                      retailMarkupInvoiceDetail, retailMarkupSumInvoiceDetail, numberRetailVATInvoiceDetail,
                      valueRetailVATInvoiceDetail, retailVATSumInvoiceDetail,
                      retailPriceInvoiceDetail, retailSumInvoiceDetail
    ;


    createPricingInvoiceDetail 'Создавать акт расценки' (invoiceDetail) = createPricingInvoice(invoiceInvoiceDetail(invoiceDetail));
    createPricingUserInvoiceDetail 'Создавать акт расценки' (userInvoiceDetail) = createPricingUserInvoice(userInvoiceUserInvoiceDetail(userInvoiceDetail));

    CLASS invoicePricing 'Акт расценки на основе инвойса'###sign : pricing;
    CLASS invoicePricingPosted 'Закрытый акт расценки на основе инвойса'###sign : invoicePricing, postedObject;
    CLASS invoicePricingDetail 'Строка акта расценки на основе инвойса'###sign : pricingDetail;

    @defineDocumentTables(invoicePricing);

    @defineDocumentAggregation(invoice, invoicePricing, createPricingInvoice);


    printPricingInvoice 'Акт расценки' (invoice) = printPricing(invoicePricingInvoice(invoice)) IMAGE 'print.png' IN printGroup;
    EXTEND FORM invoices
        PROPERTIES(i) FORCE PANEL printPricingInvoice SHOWIF createPricingInvoice(i)
    ;
    EXTEND DESIGN invoices {printContainer { ADD i.printGroup;}}

    pricingPricingDetail(detail) += invoicePricingInvoicePricingDetail(detail);
    @defineDocumentDetailIndex(invoicePricing);

    datePricing(pricing) += dateInvoicePricing(pricing);
    timePricing(pricing) += timeInvoicePricing(pricing);

    @defineDocumentAggregationStockPrefix(invoice, invoicePricing, stock, 'Склад', , );
    departmentStorePricing(pricing) += stockInvoicePricing(pricing) IF stockInvoicePricing(pricing) IS departmentStore;
    dataDepartmentStorePricingDetail(pricingDetail) += dataStockInvoiceDetail(invoiceDetailInvoicePricingDetail(pricingDetail))
                                                       IF dataStockInvoiceDetail(invoiceDetailInvoicePricingDetail(pricingDetail)) IS departmentStore;

    @defineDocumentAggregationStockPrefix(invoice, invoicePricing, contact, contactCaption, , );
    contact###Pricing(pricing) += contact###InvoicePricing(pricing);

    @defineDocumentAggregationPosted(invoice, invoicePricing);
    isPostedPricing(pricing) += isPostedInvoicePricing(pricing);

    numberInvoicePricing 'Номер документа' (invoicePricing) = numberInvoice(invoiceInvoicePricing(invoicePricing));
    numberPricing(pricing) += numberInvoicePricing(pricing);

    seriesInvoicePricing 'Серия документа' (invoicePricing) = seriesInvoice(invoiceInvoicePricing(invoicePricing));
    seriesPricing(pricing) += seriesInvoicePricing(pricing);

    seriesNumberInvoicePricing 'Серия/номер документа' (invoicePricing) = seriesNumberInvoice(invoiceInvoicePricing(invoicePricing));

    noteInvoiceInvoicePricing 'Примечание' (invoicePricing) = noteInvoice(invoiceInvoicePricing(invoicePricing));
    notePricing(pricing) += noteInvoiceInvoicePricing(pricing);

    currencyInvoicePricing  (invoicePricing) = currencyInvoice(invoiceInvoicePricing(invoicePricing));
    currencyPricing (pricing) += currencyInvoicePricing(pricing);
    pricingCommitteePricing(pricing) += pricingCommitteeInvoice(invoiceInvoicePricing(pricing));

    @defineDocumentDescription(invoicePricing, invoicePricingDetail, seriesNumberInvoicePricing, 'Поставка на основе инвойса'###sign);
    descriptionPricing (pricing) += descriptionInvoicePricing(pricing);

    @defineDocumentAggregationDetailSku(invoice, invoicePricing, sku);
    skuPricingDetail(pricingDetail) +=  skuInvoicePricingDetail(pricingDetail);

    @defineDocumentAggregationDetailQuantity(invoice, invoicePricing);
    quantityPricingDetail(pricingDetail) += quantityInvoicePricingDetail(pricingDetail);

//----------------------------------------------------------------------------------------------------------
    @defineDocumentAggregationDetailProperty (invoice, invoicePricing, price, 'Цена поставщика');
    pricePricingDetail(pricingDetail) += priceInvoicePricingDetail(pricingDetail);
    @defineDocumentAggregationDetailProperty (invoice, invoicePricing, sum, 'Сумма поставщика');
    sumPricingDetail(pricingDetail) += sumInvoicePricingDetail(pricingDetail);
    @defineDocumentAggregationDetailProperty (invoice, invoicePricing, retailPrice, 'Цена поставщика');
    retailPricePricingDetail(pricingDetail) += retailPriceInvoicePricingDetail(pricingDetail);
    @defineDocumentAggregationDetailProperty (invoice, invoicePricing, retailMarkup, 'Надбавка');
    retailMarkupPricingDetail(pricingDetail) += retailMarkupInvoicePricingDetail(pricingDetail);
    @defineDocumentAggregationDetailProperty (invoice, invoicePricing, retailVAT, 'НДС');
    retailVATPricingDetail(pricingDetail) += retailVATInvoicePricingDetail(pricingDetail);
    @defineDocumentAggregationDetailProperty (invoice, invoicePricing, valueRetailVAT, 'НДС,%');
    valueRetailVATPricingDetail(pricingDetail) += valueRetailVATInvoicePricingDetail(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoicePricing, retailSum, 'Сумма розничная');
    retailSumPricingDetail(pricingDetail) += retailSumInvoicePricingDetail(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoicePricing, retailVATSum, 'Сумма НДС');
    retailVATSumPricingDetail(pricingDetail) += retailVATSumInvoicePricingDetail(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoicePricing, retailMarkupSum, 'Сумма надбавки');
    retailMarkupSumPricingDetail(pricingDetail) += retailMarkupSumInvoicePricingDetail(pricingDetail);

    invoiceDetailPricingDetail(pricingDetail) += invoiceDetailInvoicePricingDetail(pricingDetail);

END
