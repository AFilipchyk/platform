MODULE LegalEntity;

REQUIRE System, Historizable, Tax, Country, I18n, Integration;

// ----------------------------------- Форма собственности ------------------------------------------ //

CLASS ownership 'Форма собственности' : named;
TABLE ownership (ownership);

shortNameOwnership 'Cокращенное название' = DATA STRING[10] (ownership) IN baseGroup FIXEDCHARWIDTH 6;
shortNameToOwnership (string) = GROUP UNIQUE ownership BY shortNameOwnership (ownership) WHERE ownership IS ownership;

countryOwnership = DATA country (ownership);
nameCountryOwnership 'Страна' (ownership) = name(countryOwnership(ownership)) MINCHARWIDTH 10 PREFCHARWIDTH 15 MAXCHARWIDTH 20;

FORM ownership 'Форма собственности'

    OBJECTS o = ownership FIXED PANEL
    PROPERTIES(o) name, shortNameOwnership, nameCountryOwnership

    EDIT ownership OBJECT o
;

// ----------------------------------- Юридическое лицо --------------------------------- //

CLASS legalEntity 'Организация' : named, externalizable, taxUnitGroup;
TABLE legalEntity (legalEntity);
TABLE legalEntityDate (legalEntity, DATE);

countryLegalEntity = DATA country(legalEntity);
nameCountryLegalEntity 'Страна' (legalEntity) = name(countryLegalEntity(legalEntity)) MINCHARWIDTH 10 PREFCHARWIDTH 15 MAXCHARWIDTH 20;

currencyLegalEntity = DATA currency(legalEntity);
nameCurrencyLegalEntity 'Базовая валюта' (legalEntity) = name(currencyLegalEntity(legalEntity)) MINCHARWIDTH 10 PREFCHARWIDTH 10 MAXCHARWIDTH 15;
currencyLegalEntity(legalEntity) <- currencyCountry(countryLegalEntity(legalEntity)) WHEN CHANGED(countryLegalEntity(legalEntity));

languageLegalEntity = DATA language(legalEntity);
nameLanguageLegalEntity 'Язык' (legalEntity) = name(languageLegalEntity(legalEntity)) MINCHARWIDTH 5 PREFCHARWIDTH 10 MAXCHARWIDTH 15;
languageLegalEntity(legalEntity) <- languageCountry(countryLegalEntity(legalEntity)) WHEN CHANGED(countryLegalEntity(legalEntity));

GROUP lawGroup 'Реквизиты' : publicGroup;

ownershipLegalEntity = DATA ownership (legalEntity);
nameOwnershipLegalEntity 'Форма собственности' = name(ownershipLegalEntity(legalEntity)) IN lawGroup;
shortNameOwnershipLegalEntity 'Форма собственности (сокр.)' = shortNameOwnership(ownershipLegalEntity(legalEntity)) IN lawGroup;

CONSTRAINT countryOwnership(ownershipLegalEntity(legalEntity)) != countryLegalEntity(legalEntity)
    CHECKED BY ownershipLegalEntity MESSAGE 'Страна формы собственности должна совпадать со страной организации';

fullNameLegalEntity 'Полное наименование' = DATA STRING[200] (legalEntity) IN lawGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;

@defineHistorizable(addressLegalEntity, 'Юридический адрес', STRING[150], legalEntity, name, lawGroup);
@defineHistorizable(postAddressLegalEntity, 'Почтовый адрес', STRING[150], legalEntity, name, lawGroup);

GROUP contactGroup 'Контактная информация' : publicGroup;

@defineHistorizable(phoneLegalEntity, 'Телефон/факс', STRING[100], legalEntity, name, contactGroup);
emailLegalEntity 'E-mail' = DATA STRING[100] (legalEntity) IN contactGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
siteLegalEntity 'Сайт' = DATA STRING[100] (legalEntity) IN contactGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;
contactsLegalEntity 'Дополнительная информация' = DATA STRING[300] (legalEntity) IN contactGroup MINCHARWIDTH 50 PREFCHARWIDTH 50;

GROUP managementGroup 'Управление' : publicGroup;

@defineHistorizable(managerLegalEntity, 'Руководитель', STRING[100], legalEntity, name, managementGroup);
@defineHistorizable(accountantLegalEntity, 'Главный бухгалтер', STRING[100], legalEntity, name, managementGroup);

GROUP docGroup 'Для договора' : publicGroup;

// ----------------------------------- Группы юридический лиц ---------------------------- //

CLASS legalEntityGroup 'Группа организаций' : named;

legalEntityGroupLegalEntity (legalEntity) = DATA legalEntityGroup (legalEntity) PERSISTENT;
nameLegalEntityGroupLegalEntity 'Группа организаций' (legalEntity) = name(legalEntityGroupLegalEntity(legalEntity));

@defineHierarchy(legalEntityGroup);

inLegalEntityGroupLegalEntity (legalEntityGroup, legalEntity) =
    UNION OVERRIDE legalEntity IS legalEntity AND NOT legalEntityGroup IS legalEntityGroup,
                   isParentLegalEntityGroupLegalEntityGroup(legalEntityGroupLegalEntity(legalEntity), legalEntityGroup);

 FORM legalEntityGroup 'Группа организаций'
     OBJECTS l = legalEntityGroup FIXED PANEL
     PROPERTIES(l) name, nameParentLegalEntityGroup

     EDIT legalEntityGroup OBJECT l
 ;

 FORM legalEntityGroups 'Группы организаций'
     TREE legalEntityGroupTree lg = legalEntityGroup PARENT parentLegalEntityGroup
     PROPERTIES READONLY lgTreeName = name(lg)
     ORDER BY name(lg)

     DIALOG legalEntityGroup OBJECT lg
 ;
// ----------------------------------- Банк ------------------------------------------- //

CLASS bank 'Банк' : named, externalizable;
TABLE bank (bank);
TABLE bankDate (bank, DATE);

GROUP banksGroup 'Информация о банке' : baseGroup;

MFOBank 'Код МФО' = DATA STRING[9] (bank) IN banksGroup;
departmentBank 'Отдел банка' = DATA STRING[100] (bank) IN banksGroup;
CBUBank 'ЦБУ' = DATA STRING[3] (bank) IN banksGroup;
infoBank 'Дополнительные сведения' = DATA STRING[100] (bank) IN banksGroup;

countryBank = DATA country (bank);
nameCountryBank 'Страна' (bank) = name(countryBank(bank)) IN banksGroup MINCHARWIDTH 10 PREFCHARWIDTH 15 MAXCHARWIDTH 20;

@defineHistorizable(addressBank, 'Адрес банка', STRING[150], bank, name, banksGroup);

FORM bank 'Банк'
    OBJECTS b=bank FIXED PANEL
    PROPERTIES(b)  name, addressBank, dialogAddressBank, MFOBank, departmentBank, CBUBank, nameCountryBank, infoBank
    EDIT bank OBJECT b
;

FORM banks 'Банки'
    OBJECTS b=bank
    PROPERTIES(b) READONLY name, addressBank, MFOBank, departmentBank, CBUBank, nameCountryBank, infoBank
    PROPERTIES(b) ADDFORM, EDITFORM, delete
;

// ----------------------------------- Расчетный счет ------------------------------------------ //

CLASS account 'Расчетный счет';
TABLE account (account);

bankAccount = DATA bank (account);

GROUP accountGroup 'Банковская информация' : baseGroup;

numberAccount 'Номер расчетного счета'  = DATA STRING[13] (account) IN accountGroup FIXEDCHARWIDTH 13;
accountNumber 'Расчетный счет по номеру' (string) = GROUP UNIQUE account BY numberAccount (account) WHERE account IS account;

nameBankAccount 'Наименование банка' (account) = name(bankAccount(account)) IN accountGroup;
addressBankAccount 'Адрес банка' (account) = addressBank(bankAccount(account)) IN accountGroup;
MFOBankAccount 'Код МФО банка' (account) = MFOBank(bankAccount(account)) IN accountGroup;
departmentBankAccount 'Отдел банка' (account) = departmentBank(bankAccount(account)) IN accountGroup;
CBUBankAccount 'ЦБУ банка' (account) = CBUBank(bankAccount(account)) IN accountGroup;
noteAccount 'Примечание'  = DATA STRING[50] (account) IN accountGroup;

legalEntityAccount = DATA legalEntity (account);
defaultAccountLegalEntity(legalEntity) = GROUP MAX account BY legalEntityAccount(account);

userAccountLegalEntity = DATA account (legalEntity);
CONSTRAINT legalEntityAccount(userAccountLegalEntity(legalEntity)) != legalEntity CHECKED MESSAGE 'ошибка: Р/сч. по умолчанию должен соответствовать р/сч. Ю.Л.';

accountLegalEntity (legalEntity) = UNION OVERRIDE defaultAccountLegalEntity(legalEntity), userAccountLegalEntity(legalEntity);
numberAccountLegalEntity 'Основной р/сч.' (legalEntity) = numberAccount(accountLegalEntity(legalEntity)) IN lawGroup;

equalsLegalEntityAccount 'Основной' (legalEntity, account) = userAccountLegalEntity(legalEntity) == account;

// ----------------------------------- Лицензия ------------------------------------------ //
GROUP licenseGroup 'Лицензионная информация' : baseGroup;
CLASS license 'Лицензия';
TABLE license (license);

numberLicense 'Номер лицензии' = DATA STRING[100] (license) IN licenseGroup;
dateFromLicense 'Действует с ' = DATA DATE (license) IN licenseGroup;
dateToLicense 'Действует по ' = DATA DATE (license) IN licenseGroup;

countryLicense = DATA country (license);
nameCountryLicense 'Страна' = name(countryLicense(license));

legalEntityLicense 'ЮЛ (ИД)' = DATA legalEntity (license);

licenseLegalEntityDate 'Действующая на дату' (legalEntity, date) = GROUP MAX license AS license IF dateFromLicense(license) <= date AND NOT dateToLicense(license) < date AND date AS DATE
                                                                         BY legalEntityLicense(license), date;
currentLicenseLegalEntity 'Действующая' (legalEntity) = licenseLegalEntityDate(legalEntity, currentDate());
numberCurrentLicenseLegalEntity 'Действующая лицензия' (legalEntity) = numberLicense(currentLicenseLegalEntity(legalEntity)) IN lawGroup;

CONSTRAINT countryLegalEntity(legalEntityLicense(license)) != countryLicense(license)
    CHECKED BY legalEntityLicense MESSAGE 'Страна лицензии должна совпадать со страной организации';

// ------------------------------------ Собственные компании ----------------------------- //
GROUP filterEntityGroup 'Фильтры' : publicGroup;

isSupplierLegalEntity 'Явл. поставщиком' = DATA BOOLEAN (legalEntity) IN filterEntityGroup;
isCompanyLegalEntity 'Явл. компанией' = DATA BOOLEAN (legalEntity) IN filterEntityGroup;
isCustomerLegalEntity 'Явл. покупателем' = DATA BOOLEAN (legalEntity) IN filterEntityGroup;
isSellerLegalEntity 'Поставщик или компания' (legalEntity) = isSupplierLegalEntity(legalEntity) OR isCompanyLegalEntity(legalEntity);
isBuyerLegalEntity 'Покупатель или компания' (legalEntity) = isCustomerLegalEntity(legalEntity) OR isCompanyLegalEntity(legalEntity);

differentStocksInDetailsLegalEntity 'Разные склады в строках' = DATA BOOLEAN (legalEntity) IN filterEntityGroup;

// ---------------------------------------- Формы для ввода компаний ------------------------------------- //

FORM legalEntity 'Организация'
    OBJECTS l=legalEntity FIXED PANEL
    PROPERTIES(l) name, nameLegalEntityGroupLegalEntity, nameCountryLegalEntity, nameLanguageLegalEntity, nameCurrencyLegalEntity,
                   nameOwnershipLegalEntity, shortNameOwnershipLegalEntity, fullNameLegalEntity,
                   addressLegalEntity ON CHANGE EXEC dialogAddressLegalEntity(l),
                   postAddressLegalEntity ON CHANGE EXEC dialogPostAddressLegalEntity(l),
                   managerLegalEntity ON CHANGE EXEC dialogManagerLegalEntity(l),
                   accountantLegalEntity ON CHANGE EXEC dialogAccountantLegalEntity(l),
                   phoneLegalEntity ON CHANGE EXEC dialogPhoneLegalEntity(l),
                   emailLegalEntity, siteLegalEntity,
                   isSupplierLegalEntity, isCompanyLegalEntity, isCustomerLegalEntity,
                   differentStocksInDetailsLegalEntity SHOWIF isCompanyLegalEntity(l)

    OBJECTS a=account
    PROPERTIES(a)  numberAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount, MFOBankAccount, noteAccount, ADDOBJ, delete
    FILTERS legalEntityAccount(a) == l
    PROPERTIES equalsLegalEntityAccount(l,a)

    OBJECTS li=license
    PROPERTIES(li) numberLicense, dateFromLicense, dateToLicense, ADDOBJ, delete
    FILTERS legalEntityLicense(li) == l

    EDIT legalEntity OBJECT l
;

DESIGN legalEntity FROM DEFAULT {
    main{
       preferredSize = (1024, 768);
       l.box {
            childConstraints = TO THE RIGHT;

            NEW column1 {
                childConstraints = TO THE BOTTOM;

                NEW row11 {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(name(l));
                    ADD PROPERTY(nameLegalEntityGroupLegalEntity(l));
                }
                NEW regionContainer {
                    childConstraints =  TO THE RIGHT;
                    caption = 'Региональные настройки';
                    ADD PROPERTY(nameCountryLegalEntity);
                    ADD PROPERTY(nameCurrencyLegalEntity);
                    ADD PROPERTY(nameLanguageLegalEntity);
                }
                NEW row12 {
                    childConstraints = TO THE RIGHTBOTTOM;
                    ADD l.lawGroup {childConstraints = TO THE BOTTOM;}
                    ADD l.filterEntityGroup{childConstraints = TO THE BOTTOM;}
                }
            }

            NEW column2 {
                childConstraints = TO THE BOTTOM;

                ADD l.contactGroup;
                ADD l.managementGroup;
            }
       }

       NEW extendContainer BEFORE functions.box {
            type = TABBED;
            ADD a.box;
            ADD li.box;
       }
   }
}

FORM legalEntities 'Организации'

    TREE legalEntityGroupTree lg = legalEntityGroup PARENT parentLegalEntityGroup
    PROPERTIES READONLY lgTreeName = name(lg)
    PROPERTIES(lg) ADDFORM, EDITFORM, delete FORCE PANEL DRAWTOTOOLBAR

    OBJECTS l=legalEntity
    PROPERTIES(l) READONLY name, fullNameLegalEntity, shortNameOwnershipLegalEntity, nameLegalEntityGroupLegalEntity,
                           numberAccountLegalEntity, addressLegalEntity, phoneLegalEntity,
                           isSupplierLegalEntity, isCompanyLegalEntity, isCustomerLegalEntity
    PROPERTIES(l) ADDFORM, EDITFORM, delete

    FILTERS (inLegalEntityGroupLegalEntity(lg, l) OR (l IS legalEntity AND lg IS legalEntityGroup AND NOT legalEntityGroupLegalEntity(l)))
;


DESIGN legalEntities FROM DEFAULT{
    NEW topContainer{
        childConstraints = TO THE RIGHT;
        type = SPLITH;
        ADD legalEntityGroupTree.tree.box{
            PROPERTY(delete(lg)){
                askConfirm = TRUE;
            }
        }
        ADD l.box {
            fillHorizontal = 2.0;
            l.grid { defaultComponent = TRUE; }
        }
    }
    ADD functions.box;
}
    
// -------------------------------------------- Макросы --------------------------------------------- //
META defineDocumentHeaderLegalEntity (object, contact, contactCaption)
    contact###object (object) = DATA legalEntity (object);
    name###contact###object contactCaption (object)= name(contact###object(object)) IN documentPrmGroup MINCHARWIDTH 10 PREFCHARWIDTH 20;
END
META defineDocumentAbstractHeaderLegalEntity (object, contact, contactCaption)
    contact###object (object) = ABSTRACT legalEntity (object) PERSISTENT;
    name###contact###object contactCaption (object)= name(contact###object(object)) IN documentPrmGroup MINCHARWIDTH 10 PREFCHARWIDTH 20;
END
META defineDocumentInterfaceHeaderLegalEntity (object, contact, contactCaption)
    @defineDocumentAbstractHeaderLegalEntity(object, contact, contactCaption);
    @defineDocumentHeaderLegalEntity(user###object, contact, contactCaption);
    contact###object (object) += contact###user###object(object);
END

META defineDocumentDetailLegalEntity (object, detail, contact, contactCaption)
    contact###detail (idetail) = contact###object(object###detail(idetail));
    name###contact###detail contactCaption (idetail) = name(contact###detail(idetail));
END

META defineDocumentLegalEntity (object, detail, contact, contactCaption)
    @defineDocumentHeaderLegalEntity(object, contact, contactCaption);
    @defineDocumentDetailLegalEntity(object, detail, contact, contactCaption);
END
META defineDocumentDetailDataLegalEntity (object, detail, contact, contactCaption)
    data###contact###detail (detail) = DATA legalEntity (detail);
    contact###detail (idetail) = UNION OVERRIDE contact###object(object###detail(idetail)), data###contact###detail(idetail) PERSISTENT;
    name###contact###detail contactCaption (idetail) = name(contact###detail(idetail));
END
META defineDocumentDataLegalEntity (object, detail, contact, contactCaption)
    @defineDocumentHeaderLegalEntity(object, contact, contactCaption);
    @defineDocumentDetailDataLegalEntity(object, detail, contact, contactCaption);
END
META defineDocumentDataLegalEntity (object, contact, contactCaption)
    @defineDocumentDataLegalEntity(object, object##Detail, contact, contactCaption);
END
META defineDocumentDetailLegalEntity(detail, contact, contactCaption)
    contact###detail (detail) = DATA legalEntity (detail);
    name###contact###detail contactCaption (detail) = name(contact###detail (detail));
END

META defineDocumentAbstractLegalEntity (object, detail, contact, contactCaption)
    @defineDocumentAbstractHeaderLegalEntity(object, contact, contactCaption);
    @defineDocumentDetailLegalEntity(object, detail, contact, contactCaption);
END
META defineDocumentInterfaceLegalEntity (object, detail, contact, contactCaption)
    @defineDocumentInterfaceHeaderLegalEntity(object, contact, contactCaption);
    @defineDocumentDetailLegalEntity(object, detail, contact, contactCaption);
    @defineDocumentDetailLegalEntity(user###object, user###detail, contact, contactCaption);
END

META defineDocumentLegalEntity (object, contact, contactCaption)
    @defineDocumentLegalEntity(object, object##Detail, contact, contactCaption);
END
META defineDocumentAbstractLegalEntity (object, contact, contactCaption)
    @defineDocumentAbstractLegalEntity(object, object##Detail, contact, contactCaption);
END
META defineDocumentInterfaceLegalEntity (object, contact, contactCaption)
    @defineDocumentInterfaceLegalEntity(object, object##Detail, contact, contactCaption);
END

META defineDocumentAccountPhoneContact(object, contact, caption)
    numberAccount###contact###object 'Расчетный счет'###caption (object) = numberAccountLegalEntity(contact###object(object)) IN documentPrmGroup;
    phone###contact###object 'Телефон'###caption (object) = phoneLegalEntity(contact###object(object)) IN documentPrmGroup;
    nameBank###contact###object 'Банк'###caption (object) = nameBankAccount(accountLegalEntity(contact###object(object))) IN documentPrmGroup;
    addressBank###contact###object 'Адрес банка'###caption (object) = addressBankAccount(accountLegalEntity(contact###object(object))) IN documentPrmGroup;
    departmentBank###contact###object 'Отдел банка'###caption (object) = departmentBankAccount(accountLegalEntity(contact###object(object))) IN documentPrmGroup;
    CBUBank###contact###object 'ЦБУ банка'###caption (object) = CBUBankAccount(accountLegalEntity(contact###object(object))) IN documentPrmGroup;
    MFOBank###contact###object 'Код МФО банка'###caption (object) = MFOBankAccount(accountLegalEntity(contact###object(object))) IN documentPrmGroup;
END

