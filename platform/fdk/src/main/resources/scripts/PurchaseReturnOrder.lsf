MODULE PurchaseReturnOrder;

REQUIRE Order, PurchaseShipment;

NAMESPACE PurchaseReturn;

@defineOrder(' (закупка-возврат)', customerStock, purchasePack, showPurchasePack, 'Отображать упаковку');

@defineOrderStockDestination(customerStock, supplierStock);

@defineNumeratedObjectDefaultPrefix(userOrder, 'Нумератор для заказов (закупка-возврат)', 'ВЗ', purchaseReturn);

CONSTRAINT supplierUserOrder(userOrder) AND NOT isSupplierLegalEntity(supplierUserOrder(userOrder))
    CHECKED BY supplierUserOrder MESSAGE 'Для заказа выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerUserOrder(userOrder) AND NOT isCompanyLegalEntity(customerUserOrder(userOrder))
    CHECKED BY customerUserOrder MESSAGE 'Для заказа выбрано в качестве покупателя организация, не являющаяся компанией';


@defineDocumentPackageSkuStock(userOrder, sku, customerStock, purchasePack);
@extendFormDocumentPackageSkuStockCustom(userOrder, userOrder, o, customerStock, showPurchasePack);

@defineDocumentContactSkuStock (userOrder, userOrder, supplier, 'Поставщик', o, sts);
supplierEntityUserOrder(userOrder) <- supplierUserOrder(userOrder) WHEN CHANGED(supplierUserOrder(userOrder));

inAssortmentSkuStockUserOrder (sku, stock, userOrder)= companyLedgerPriceListTypeSkuStockDateTime(priceListTypeUserOrderSku(userOrder, sku), sku, stock, dateTimeUserOrder(userOrder)) == supplierUserOrder(userOrder);
inUserOrderSku (userOrder, sku)= inSupplierSku(supplierUserOrder(userOrder), sku);
EXTEND FORM userOrder
       FILTERGROUP filter2
            FILTER 'Товары с поступлением ' 'F7' inUserOrderSku(o, s)
            FILTER 'Товары в ассортименте ' 'F6' inAssortmentSkuStockUserOrder(s, st, o)
;