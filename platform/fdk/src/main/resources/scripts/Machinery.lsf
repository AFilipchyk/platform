MODULE Machinery;

REQUIRE System, Stock, Barcode;

//---------------------------- Сервера управления оборудования ----------------------------//

CLASS equipmentServer 'Сервер оборудования' : named;
TABLE equipmentServer (equipmentServer);

sidEquipmentServer 'Идентификатор' = DATA STRING[20] (equipmentServer) IN baseGroup;
sidToEquipmentServer(equipmentServer) = GROUP UNIQUE equipmentServer BY sidEquipmentServer (equipmentServer) WHERE equipmentServer IS equipmentServer;
delayEquipmentServer 'Период обновления (в миллисекундах)' = DATA INTEGER (equipmentServer) IN baseGroup;

//---------------------------- Ошибки сервера оборудования ----------------------------//

CLASS equipmentServerError 'Ошибки';
TABLE equipmentServerError (equipmentServerError);

dataEquipmentServerError 'Сообщение об ошибке' = DATA STRING[200] (equipmentServerError) IN baseGroup;
erTraceEquipmentServerError 'След ошибки' = DATA TEXT (equipmentServerError) IN baseGroup;
dateEquipmentServerError 'Время возникновения' = DATA DATETIME (equipmentServerError) IN baseGroup;
equipmentServerEquipmentServerError 'Сервер оборудования (ID)' = DATA equipmentServer(equipmentServerError) IN baseGroup;

//---------------------------- Лог сервера оборудования ----------------------------//

CLASS equipmentServerLog 'Лог';
TABLE equipmentServerLog (equipmentServerLog);

dataEquipmentServerLog 'Сообщение' = DATA TEXT (equipmentServerLog) IN baseGroup;
dateEquipmentServerLog 'Время' = DATA DATETIME (equipmentServerLog) IN baseGroup;
equipmentServerEquipmentServerLog 'Сервер оборудования (ID)' = DATA equipmentServer(equipmentServerLog) IN baseGroup;

//---------------------------- Формы для серверов оборудования ----------------------------//

FORM equipmentServer 'Серверы оборудования'
    OBJECTS es = equipmentServer
    PROPERTIES(es)  READONLY sidEquipmentServer
    PROPERTIES(es)  delayEquipmentServer, ADDFORM, EDITFORM, delete

    OBJECTS e = equipmentServerError
    PROPERTIES(e) READONLY dataEquipmentServerError, dateEquipmentServerError
    PROPERTIES(e) delete
    PROPERTIES(e) FORCE PANEL erTraceEquipmentServerError

    OBJECTS l = equipmentServerLog
    PROPERTIES(l) READONLY dataEquipmentServerLog, dateEquipmentServerLog
    PROPERTIES(l) delete

    FILTERS equipmentServerEquipmentServerError (e) == es
    FILTERS equipmentServerEquipmentServerLog (l) == es
;

DESIGN equipmentServer FROM DEFAULT {
    main {
        NEW topContainer {
            type = SPLITV;
            childConstraints =  TO THE BOTTOM;

            ADD es.box;

            NEW specContainer {
                type = TABBED;

                NEW errorContainer {
                    title = 'Ошибки';
                    ADD e.box;
                    PROPERTY(erTraceEquipmentServerError(e)) {
                        fillHorizontal = 1;
                        panelLabelAbove = TRUE;
                    }
                }
                ADD l.box;
            }
        }
        ADD functions.box;
    }
}

//---------------------------- группы оборудования ----------------------------------------//

CLASS ABSTRACT groupMachinery 'Группы оборудования';
TABLE groupMachinery (groupMachinery);

nameGroupMachinery 'Наименование' = DATA STRING[200] (groupMachinery) IN baseGroup MINCHARWIDTH 10 PREFCHARWIDTH 20;

equipmentServerGroupMachinery = DATA equipmentServer (groupMachinery);
nameEquipmentServerGroupMachinery 'Сервер оборудования' (groupMachinery) = name(equipmentServerGroupMachinery(groupMachinery));
sidEquipmentServerGroupMachinery 'ИД сервера оборудования' (groupMachinery) = sidEquipmentServer(equipmentServerGroupMachinery(groupMachinery));

// -------------------------------- Склады --------------------------------------------- //

stockGroupMachinery = ABSTRACT stock (groupMachinery);
nameStockGroupMachinery 'Склад' (groupMachinery) = name(stockGroupMachinery(groupMachinery));

// фильтрация по группам товаров

filterSkuGroupMachinery 'Фильтровать по классификатору' = DATA BOOLEAN (groupMachinery);

TABLE groupMachinerySkuGroup (groupMachinery, skuGroup);
inGroupMachinerySkuGroup 'Вкл' = DATA BOOLEAN (groupMachinery, skuGroup);

FORM filterSkuGroupMachinery 'Фильтрация по классификатору'
    OBJECTS gm = groupMachinery FIXED PANEL
    PROPERTIES(gm) READONLY nameStockGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery

    TREE treeGroups g=skuGroup PARENT parentSkuGroup
    PROPERTIES READONLY name(g)
    ORDER BY name

    OBJECTS cg=skuGroup
    PROPERTIES(cg) READONLY canonicalNameSkuGroup
    PROPERTIES(gm, cg)      inGroupMachinerySkuGroup
    ORDER BY canonicalNameSkuGroup
    FILTERS isParentLeafSkuGroupSkuGroup(cg, g)

    FILTERGROUP filters
        FILTER 'Только выбранные группы' 'F10' inGroupMachinerySkuGroup(gm, cg)
;

DESIGN filterSkuGroupMachinery FROM DEFAULT {
    POSITION treeGroups.tree.box TO THE LEFT cg.box;

    treeGroups.tree {
        fillHorizontal = 0.5;
    }
}

showFilterSkuGroupMachinery 'Выбрать группы' (groupMachinery) = ACTION FORM filterSkuGroupMachinery OBJECTS gm MODAL;

//---------------------------- Модели оборудования ----------------------------------------//
CLASS ABSTRACT model 'Модель' : named;
TABLE model (model);

noteModel 'Примечание' = DATA STRING[200] (model) IN baseGroup;
handlerModel 'Обработчик' = DATA STRING[200] (model) IN baseGroup;

maxProductModel 'MAX допустимое колич. товаров' = DATA INTEGER (model) IN baseGroup;

//---------------------------- типы оборудования  ----------------------------------------//
CLASS ABSTRACT machinery 'Оборудование';
TABLE machinery(machinery);

groupMachineryMachinery = ABSTRACT groupMachinery (machinery) PERSISTENT;
nameGroupMachineryMachinery 'Группа' (machinery) = nameGroupMachinery(groupMachineryMachinery(machinery));

modelMachinery = ABSTRACT model (machinery);
nameModelMachinery 'Модель' (machinery) = name(modelMachinery(machinery)) IN baseGroup;
handlerModelMachinery 'Обработчик' (machinery) = handlerModel(modelMachinery(machinery)) IN baseGroup;

nppMachinery 'Порядковый номер' = DATA INTEGER (machinery) IN baseGroup;
descriptionMachinery 'Описание' = DATA STRING[200] (machinery) IN baseGroup;
portMachinery 'Адрес/порт' = DATA STRING[100] (machinery) IN baseGroup;

//---------------------------- Загрузка в ВУ  ----------------------------------------//
CLASS ABSTRACT priceTransactionDocument 'Документ, требующий загрузки в оборудование';
TABLE priceTransactionDocument (priceTransactionDocument);

isDraftPriceTransactionDocument 'Не проведен' = ABSTRACT BOOLEAN (priceTransactionDocument);
descriptionPriceTransactionDocument 'Название документа загрузки' = ABSTRACT STRING[200] (priceTransactionDocument);

//----------------------------------- Загрузка в ВУ -------------------------------------------------------

CLASS ABSTRACT machineryPriceTransaction 'Загрузка прайса в оборудование' : historyObject;
TABLE machineryPriceTransaction (machineryPriceTransaction);
TABLE machineryPriceTransactionBarcode (machineryPriceTransaction, barcode);

groupMachineryMachineryPriceTransaction (transaction) = ABSTRACT groupMachinery (machineryPriceTransaction);
nameGroupMachineryMachineryPriceTransaction 'Группа оборудования' (transaction) = nameGroupMachinery(groupMachineryMachineryPriceTransaction(transaction));

stockMachineryPriceTransaction (transaction) = stockGroupMachinery(groupMachineryMachineryPriceTransaction(transaction));

equipmentServerMachineryPriceTransaction (transaction) = equipmentServerGroupMachinery(groupMachineryMachineryPriceTransaction(transaction));
sidEquipmentServerMachineryPriceTransaction (transaction) = sidEquipmentServer(equipmentServerMachineryPriceTransaction (transaction));

// Дата/время
dateMachineryPriceTransaction 'Дата' = DATA DATE (machineryPriceTransaction);
dateMachineryPriceTransaction (transaction) <- currentDate() WHEN ASSIGNED(transaction IS machineryPriceTransaction);

timeMachineryPriceTransaction 'Время' = DATA TIME (machineryPriceTransaction);
timeMachineryPriceTransaction (transaction) <- currentTime() WHEN ASSIGNED(transaction IS machineryPriceTransaction);

dateTimeMachineryPriceTransaction 'Дата/время' (transaction) = toDateTime(dateMachineryPriceTransaction(transaction), timeMachineryPriceTransaction(transaction));

orderMachineryPriceTransaction (transaction) = LIST(dateTimeMachineryPriceTransaction(transaction), transaction) PERSISTENT;

// Статус
snapshotMachineryPriceTransaction 'Целиком' = DATA BOOLEAN (machineryPriceTransaction);

succeededMachineryPriceTransaction 'Загружена' = DATA BOOLEAN (machineryPriceTransaction);
canceledMachineryPriceTransaction 'Отменена' = DATA BOOLEAN (machineryPriceTransaction);
processMachineryPriceTransaction 'Требуется загрузка' (machineryPriceTransaction) =
    machineryPriceTransaction IS machineryPriceTransaction AND NOT
    succeededMachineryPriceTransaction(machineryPriceTransaction) AND NOT
    canceledMachineryPriceTransaction(machineryPriceTransaction);

// Основание
commentMachineryPriceTransaction 'Примечание' = DATA STRING[30] (machineryPriceTransaction);

priceTransactionDocumentMachineryPriceTransaction = DATA priceTransactionDocument (machineryPriceTransaction);
descriptionPriceTransactionDocumentMachineryPriceTransaction 'Основание загрузки' (transaction) =
    descriptionPriceTransactionDocument(priceTransactionDocumentMachineryPriceTransaction(transaction));

// todo : persistent почему-то не работает
descriptionMachineryPriceTransaction 'Основание' (document) = UNION OVERRIDE descriptionPriceTransactionDocumentMachineryPriceTransaction(document),
                                                                             commentMachineryPriceTransaction(document);

sentPriceTransactionDocument 'Принят к загрузке в оборудование' = DATA BOOLEAN (priceTransactionDocument);
sentPriceTransactionDocument(document) <- NULL WHEN ASSIGNED(isDraftPriceTransactionDocument(document));

countProcessPriceTransactionDocument 'Кол-во ожидающих транзакций' (document) = GROUP SUM 1 IF processMachineryPriceTransaction(transaction)
                                                                                 BY priceTransactionDocumentMachineryPriceTransaction(transaction) PERSISTENT;

succeededPriceTransactionDocument 'Загружен в оборудование' (document) = sentPriceTransactionDocument (document) AND NOT countProcessPriceTransactionDocument(document);

statusEquipmentPriceTransactionDocument 'Статус загрузки в оборудование' (document) =
                                                        CASE
                                                            WHEN succeededPriceTransactionDocument(document) THEN 'Успешно загружен' IF document IS priceTransactionDocument
                                                            WHEN sentPriceTransactionDocument(document) THEN 'Принят к загрузке' IF document IS priceTransactionDocument
                                                            DEFAULT 'Не загружен' IF document IS priceTransactionDocument
                                                        END;
// Загруженные штрих-коды
inMachineryPriceTransactionBarcode 'Вкл' = DATA BOOLEAN (machineryPriceTransaction, barcode);
nameMachineryPriceTransactionBarcode 'Наименование' = DATA STRING[255] (machineryPriceTransaction, barcode);
priceMachineryPriceTransactionBarcode 'Цена' = DATA NUMERIC[14,2] (machineryPriceTransaction, barcode);

// Текущие загруженные штрих-коды
TABLE barcodeGroupMachinery (barcode, groupMachinery);

lastOrderTransactionBarcodeGroupMachinery (barcode, groupMachinery) = GROUP MAX orderMachineryPriceTransaction(transaction)
                                                                          AND inMachineryPriceTransactionBarcode(transaction, barcode)
                                                                          AND NOT snapshotMachineryPriceTransaction(transaction)
                                                                          AND NOT canceledMachineryPriceTransaction(transaction)
                                                                      BY barcode, groupMachineryMachineryPriceTransaction(transaction);
lastTransactionBarcodeGroupMachinery (barcode, groupMachinery) = lastOrderTransactionBarcodeGroupMachinery(barcode, groupMachinery) [2] PERSISTENT;

transactionNameBarcodeGroupMachinery 'Текущее наименование в оборудовании' (barcode, groupMachinery)  =
    nameMachineryPriceTransactionBarcode(lastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode);
transactionPriceBarcodeGroupMachinery 'Текущая цена в оборудовании' (barcode, groupMachinery)  =
    priceMachineryPriceTransactionBarcode(lastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode);

//--------------------Сообщения об ошибках транзакций--------------------//
CLASS machineryPriceTransactionError 'Ошибка';
TABLE machineryPriceTransactionError (machineryPriceTransactionError);

dataMachineryPriceTransactionError 'Сообщение об ошибке' = DATA STRING[200] (machineryPriceTransactionError) IN baseGroup;
dateMachineryPriceTransactionError 'Время возникновения' = DATA DATETIME (machineryPriceTransactionError) IN baseGroup;
errorTraceMachineryPriceTransactionError 'След исключения' = DATA TEXT (machineryPriceTransactionError) IN baseGroup;
machineryPriceTransactionMachineryPriceTransactionError 'Транзакция (ID)' = DATA machineryPriceTransaction(machineryPriceTransactionError) IN baseGroup;
quantityMachineryPriceTransactionErrorMachineryPriceTransaction 'Количество ошибок' (MachineryPriceTransaction) = GROUP SUM 1 IF machineryPriceTransactionMachineryPriceTransactionError (machineryPriceTransactionError) == MachineryPriceTransaction
    BY machineryPriceTransactionMachineryPriceTransactionError (machineryPriceTransactionError) IN baseGroup;

// Загрузка в конкретные устройства
TABLE machineryPriceTransactionMachinery (machineryPriceTransaction, machinery);
inMachineryPriceTransactionMachinery 'Вкл' = DATA BOOLEAN (machineryPriceTransaction, machinery);
nppsMachineryPriceTransaction 'Номера устройств' = GROUP CONCAT castToString3(nppMachinery(machinery)) IF inMachineryPriceTransactionMachinery(transaction, machinery), ',' BY transaction PERSISTENT;

// перезагрузка прайса целиком
selectedMachinery 'Вкл' = SESSION DATA BOOLEAN (machinery);

GROUP snapshotMachineryPriceGroup 'Перезагрузка прайса' : publicGroup;

FORM groupMachineryInput 'Выбор оборудования для перезагрузки прайса'

    OBJECTS s = stock FIXED PANEL
    PROPERTIES(s) READONLY sname = name

    OBJECTS g = groupMachinery
    PROPERTIES(g) READONLY nameGroupMachinery, nameStockGroupMachinery, nameEquipmentServerGroupMachinery
    FILTERS stockGroupMachinery(g) == s

    OBJECTS m = machinery
    PROPERTIES(m)          selectedMachinery
    PROPERTIES(m) READONLY nppMachinery, descriptionMachinery, portMachinery

    FILTERS groupMachineryMachinery(m) == g
;

DESIGN groupMachineryInput FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
    }
    PROPERTY(sname) {
        focusable = FALSE;
    }
}

// ---------------------------------------- Формы загрузки прайса --------------------------------------- //

FORM machineryPriceTransaction 'Загрузка прайса в оборудование'
    OBJECTS t = machineryPriceTransaction FIXED PANEL
    PROPERTIES(t) nameGroupMachineryMachineryPriceTransaction, dateMachineryPriceTransaction, timeMachineryPriceTransaction,
                  snapshotMachineryPriceTransaction, succeededMachineryPriceTransaction, canceledMachineryPriceTransaction

    OBJECTS b = barcode
    PROPERTIES(b) READONLY idBarcode
    PROPERTIES(t, b)       inMachineryPriceTransactionBarcode, nameMachineryPriceTransactionBarcode, priceMachineryPriceTransactionBarcode FORCE PANEL
    FILTERS inMachineryPriceTransactionBarcode(t, b)

    EDIT machineryPriceTransaction OBJECT t;
;

FORM machineryPriceTransactions 'Загрузки прайса в оборудование'
    OBJECTS s = stock FIXED PANEL
    PROPERTIES name(s) SELECTOR

    OBJECTS t = machineryPriceTransaction
    PROPERTIES(t) READONLY snapshotMachineryPriceTransaction, nameGroupMachineryMachineryPriceTransaction, dateMachineryPriceTransaction, timeMachineryPriceTransaction,
                           descriptionMachineryPriceTransaction, succeededMachineryPriceTransaction, canceledMachineryPriceTransaction,
                           quantityMachineryPriceTransactionErrorMachineryPriceTransaction BACKGROUND quantityMachineryPriceTransactionErrorMachineryPriceTransaction(t),
                           nppsMachineryPriceTransaction FORCE PANEL SHOWIF snapshotMachineryPriceTransaction(t)
    PROPERTIES(t) READONLY nameUserCreated, hostnameComputerCreated
    PROPERTIES(t)          ADDFORM, EDITFORM, delete
    FILTERS stockMachineryPriceTransaction(t) == s

    OBJECTS b = barcode
    PROPERTIES(b)    idBarcode
    PROPERTIES(t, b) nameMachineryPriceTransactionBarcode, priceMachineryPriceTransactionBarcode

    FILTERS inMachineryPriceTransactionBarcode(t, b)

    OBJECTS e = machineryPriceTransactionError
    PROPERTIES(e)    dataMachineryPriceTransactionError, dateMachineryPriceTransactionError
    PROPERTIES(e)  FORCE PANEL  errorTraceMachineryPriceTransactionError
    FILTERS machineryPriceTransactionMachineryPriceTransactionError(e) == t
;

DESIGN machineryPriceTransactions FROM DEFAULT {
    main {
        NEW topContainer {
            type = SPLITV;
            childConstraints = TO THE BOTTOM;

            ADD t.box {
                preferredSize = ( -1, 300);
                minimumSize = ( -1, 300);
                maximumSize = ( -1, 300);
            }

            NEW specContainer{
                type = TABBED;
                ADD b.box;
                NEW errorContainer {
                   title = 'Сообщения об ошибках';
                   ADD e.box;
                   PROPERTY(errorTraceMachineryPriceTransactionError(e)) {
                      fillHorizontal = 1;
                      panelLabelAbove = TRUE;
                   }
                }
            }
        }
        ADD functions.box;
    }
}
