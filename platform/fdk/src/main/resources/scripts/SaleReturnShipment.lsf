MODULE SaleReturnShipment;

REQUIRE Shipment, SaleReturnInvoice
;

NAMESPACE SaleReturn;


//----------------------------------------------- Поставка ---------------------------------------------------//

@defineShipment(' (продажа-возврат)', supplierStock);
@defineShipmentBatch();

@defineShipmentStockDestination(customerStock, supplierStock);

// Берем учетную цену
@deriveDocumentDetailPriceBatchStockPrefix(userInvoice, shipment, supplierStock);
@deriveDocumentDetailPriceBatchStock(userShipment, supplierStock);

// Проводим по регистру
@implementSkuLedgerInLIFO(shipment, sku, supplierStock);
quantityInLIFOSkuLedger (ledger) += quantityShipmentDetail(ledger);
@implementSkuLedgerInLIFOBalance(shipment, sku, supplierStock);
changedDataSkuLedger(ledger) += CHANGED(batchShipmentDetail(ledger));
sumInSkuLedger(ledger) += sumShipmentDetail(ledger);

@implementAccountDocumentLedgerInc(shipment, supplierStock);
sumIncAccountDocumentLedger (ledger) += sumShipmentDetailShipment(ledger);
sumItemIncAccountDocumentLedger (ledger) += sumItemShipmentDetailShipment(ledger);
sumContainerIncAccountDocumentLedger (ledger) += sumContainerShipmentDetailShipment(ledger);

CONSTRAINT supplierUserShipment(userShipment) AND NOT isCompanyLegalEntity(supplierUserShipment(userShipment))
    CHECKED BY supplierUserShipment MESSAGE 'Для поставки выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerUserShipment(userShipment) AND NOT isCustomerLegalEntity(customerUserShipment(userShipment))
    CHECKED BY customerUserShipment MESSAGE 'Для поставки выбрано в качестве покупателя организация, не являющаяся покупателем';