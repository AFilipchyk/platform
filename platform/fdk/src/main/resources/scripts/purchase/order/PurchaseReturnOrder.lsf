MODULE PurchaseReturnOrder;

REQUIRE Order, PurchaseShipment, PurchaseOperation;

NAMESPACE PurchaseReturn;

@defineOrder(' (закупка-возврат)', customer, customerStock, purchasePack, showPurchasePack, 'Отображать упаковку');

@defineOrderStockDestination(customerStock, supplierStock);

@defineNumeratedObjectDefaultPrefix(userOrder, 'Нумератор для заказов (закупка-возврат)', 'ВЗ', purchaseReturn);

CONSTRAINT supplierUserOrder(userOrder) AND NOT isSupplierLegalEntity(supplierUserOrder(userOrder))
    CHECKED BY supplierUserOrder MESSAGE 'Для заказа выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerUserOrder(userOrder) AND NOT isCompanyLegalEntity(customerUserOrder(userOrder))
    CHECKED BY customerUserOrder MESSAGE 'Для заказа выбрано в качестве покупателя организация, не являющаяся компанией';

supplierUserOrder(userOrder) <- defaultSupplierEmployee(currentUser()) IF countIsSupplierEntityEmployee (currentUser()) == 1
    WHEN ASSIGNED(userOrder IS userOrder);
customerUserOrder(userOrder) <- defaultCompanyEmployee(currentUser()) IF countIsCompanyEntityEmployee (currentUser()) == 1
    WHEN ASSIGNED(userOrder IS userOrder);

supplierStockUserOrder(userOrder) <- defaultStockEmployeeLegalEntity(currentUser(), supplierUserOrder(userOrder))
    IF countStocksLegalEntityEmployee (currentUser(), supplierUserOrder(userOrder)) == 1
        WHEN CHANGED(supplierUserOrder(userOrder));
customerStockUserOrder(userOrder) <- defaultStockEmployeeLegalEntity(currentUser(), customerUserOrder(userOrder))
    IF countStocksLegalEntityEmployee (currentUser(), customerUserOrder(userOrder)) == 1
        WHEN CHANGED(customerUserOrder(userOrder));

@defineDocumentPackageSkuStock(userOrder, sku, customerStock, purchasePack);
@extendFormDocumentPackageSkuStockCustom(userOrder, userOrder, o, customerStock, showPurchasePack);

overChangeQuantityValueSkuUserOrderDetail(detail) += ACTION (detail) {
    IF  purchasePackBarcodeSku(skuUserOrderDetail(detail)) THEN {

        SET quantityPackUserOrderDetail(detail) <- quantityUserOrderDetail(detail)/amountPackUserOrderDetail(detail);
    }
}

inAssortmentSkuStockUserOrder (sku, stock, userOrder)= companyLedgerPriceListTypeSkuStockDateTime(priceListTypeUserOrderSku(userOrder, sku), sku, stock, dateTimeUserOrder(userOrder)) == supplierUserOrder(userOrder);
inUserOrderSku (userOrder, sku)= inSupplierSku(supplierUserOrder(userOrder), sku);
EXTEND FORM userOrder

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' currentBalanceSkuStock(s, st) DEFAULT
        FILTER 'В заказе ' 'F9' quantitySkuUserOrderCustomerStock(s, o, st)

   FILTERGROUP filter1
        FILTER 'С поступлением' 'F8' inUserOrderSku(o, s)
        FILTER 'В ассортименте' 'F7' inAssortmentSkuStockUserOrder(s, st, o) DEFAULT
;

//--------------------- Проводим по регистру резерва ------------------//
@implementPurchaseOrderLedger(order, sku, shipmentDateTime, customerStock, supplier);
//--------------------- Расширяем форму Подбор заказа резервами -------//
@extendFormDocumentOrderLedgerStock(userOrder, userOrder, o);

NAVIGATOR {
    purchaseReturnNavigator {
        ADD orders;
    }
}

//----------------------------------------------- Операции -----------------------------------------------------//

@defineOperationObject(purchase, order, o);
@definePriceListTypeConstraintOperationObject(purchase, order);
@defineSupplierCustomerConstraintOperationObject(purchase, order);