MODULE PurchaseOrder;

REQUIRE Order, PurchaseOperation, PurchasePack;

NAMESPACE Purchase;

@defineOrder(' (закупка)', customer, customerStock, Purchase, showPurchasePack, 'Упаковка');

@defineOrderStockDestination(supplierStock, customerStock);

@defineNumeratedObjectDefaultPrefix(UserOrder, 'Нумератор для заказов (закупка)', 'ЗК', purchase);

@deriveDocumentDetailVAT (userOrder, , date,  sku, customerStock); // записываем ставку НДС из товара
@deriveDocumentDetailVATDataSum(userOrder); // записываем сумму НДС
@deriveDocumentDetailVATPrefixSum (userOrder, invoice); // записываем сумму с НДС

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperation(order, o);
Order.operationOrder(order) += operationOrder(order);
@defineDocumentOperationPriceListType(userOrder);
@defineDocumentOperationLegalEntity(userOrder, supplier, 'Поставщик');
@defineDocumentOperationLegalEntity(userOrder, customer, 'Покупатель');
@defineDocumentConstraintOperationRole(userOrder);

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserOrder(userOrder) AND NOT isSupplierLegalEntity(supplierUserOrder(userOrder))
    CHECKED BY supplierUserOrder MESSAGE 'Для заказа выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerUserOrder(userOrder) AND NOT isCompanyLegalEntity(customerUserOrder(userOrder))
    CHECKED BY customerUserOrder MESSAGE 'Для заказа выбрано в качестве покупателя организация, не являющаяся компанией';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserOrder, supplier, company, userOrder);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPackSkuStock(userOrder, sku, customerStock, Purchase);
@extendFormDocumentPackSkuStockCustom(userOrder, userOrder, o, customerStock, showPurchasePack, Purchase);

overChangeQuantityValueSkuUserOrderDetail(detail) += ACTION (detail) {
    IF  packBarcodeSku(skuUserOrderDetail(detail)) THEN {
        SET quantityPackUserOrderDetail(detail) <- quantityUserOrderDetail(detail)/amountPackUserOrderDetail(detail);
    }
}

//------------------------------ Расширение формы -----------------------------//

// Фильтры
inAssortmentSkuStockUserOrder (sku, stock, userOrder) =
    companyLedgerPriceListTypeSkuStockDateTime(ledgerPriceListTypePriceListType(priceListTypeUserOrderSku(userOrder, sku)),
                                               sku, stock, dateTimeUserOrder(userOrder)) == supplierUserOrder(userOrder);

inUserOrderSku (userOrder, sku)= inSupplierSku(supplierUserOrder(userOrder), sku);

EXTEND FORM userOrder

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' currentBalanceSkuStock(s, st)
        FILTER 'В заказе ' 'F9' quantitySkuUserOrderCustomerStock(s, o, st)

    FILTERGROUP filter1
        FILTER 'С поступлением' 'F8' inUserOrderSku(o, s)
        FILTER 'В ассортименте' 'F7' inAssortmentSkuStockUserOrder(s, st, o) DEFAULT
;

// Резервы
@extendFormDocumentOrderLedgerStock(userOrder, userOrder, o);
@extendFormDocumentOrderLedgerStockAll(userOrder, userOrder, o);

//--------------------- Проводим по регистру резерва ------------------//
@implementPurchaseOrderLedger(Order, sku, shipmentDateTime, customerStock, supplier);


NAVIGATOR {
    purchasePurchaseNavigator {
        ADD orders;
    }
}
