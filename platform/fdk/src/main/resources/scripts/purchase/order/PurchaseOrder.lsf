MODULE PurchaseOrder;

REQUIRE Order;

NAMESPACE Purchase;

//-- Для закупки упаковками
purchasePackBarcodeSku 'Штрих-код для закупки' = DATA barcode (sku);
CONSTRAINT skuBarcode(purchasePackBarcodeSku(item)) != item CHECKED BY purchasePackBarcodeSku MESSAGE 'Выбран неверный sku для штрих-кода';
purchasePackBarcode 'Штрих-код для закупки' (barcode)=  purchasePackBarcodeSku(skuBarcode(barcode)) == barcode;
changePurchasePackBarcodeSku = ACTION (barcode, sku) {
    REQUEST BOOLEAN INPUT;
    IF requestedLogical() THEN {
        SET purchasePackBarcodeSku(sku) <- barcode;
    } ELSE
        SET purchasePackBarcodeSku(sku) <- NULL;
}

EXTEND FORM barcodeDialog
    PROPERTIES (b) READONLY purchasePackBarcode
;
//--

@defineOrder(' (закупка)', customer, customerStock, purchasePack, showPurchasePack, 'Отображать упаковку');

@defineOrderStockDestination(supplierStock, customerStock);

@defineNumeratedObjectDefaultPrefix(userOrder, 'Нумератор для заказов (закупка)', 'ЗК', purchase);

CONSTRAINT supplierUserOrder(userOrder) AND NOT isSupplierLegalEntity(supplierUserOrder(userOrder))
    CHECKED BY supplierUserOrder MESSAGE 'Для заказа выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerUserOrder(userOrder) AND NOT isCompanyLegalEntity(customerUserOrder(userOrder))
    CHECKED BY customerUserOrder MESSAGE 'Для заказа выбрано в качестве покупателя организация, не являющаяся компанией';

@defineDocumentPackageSkuStock(userOrder, sku, customerStock, purchasePack);
@extendFormDocumentPackageSkuStockCustom(userOrder, userOrder, o, customerStock, showPurchasePack);

overChangeQuantityValueSkuUserOrderDetail(detail) += ACTION (detail) {
    IF  purchasePackBarcodeSku(skuUserOrderDetail(detail)) THEN {
        SET quantityPackUserOrderDetail(detail) <- quantityUserOrderDetail(detail)/amountPackUserOrderDetail(detail);
    }
}

inAssortmentSkuStockUserOrder (sku, stock, userOrder)= companyLedgerPriceListTypeSkuStockDateTime(priceListTypeUserOrderSku(userOrder, sku), sku, stock, dateTimeUserOrder(userOrder)) == supplierUserOrder(userOrder);
inUserOrderSku (userOrder, sku)= inSupplierSku(supplierUserOrder(userOrder), sku);

toDateUserOrder(userOrder) <- sumDate(shipmentDateUserOrder(userOrder), quantityDaysCloseOrdersLegalEntity(customerUserOrder(userOrder))) WHEN CHANGED(customerUserOrder(userOrder)) OR CHANGED(shipmentDateUserOrder(userOrder));

EXTEND FORM userOrder

    FILTERGROUP filter1
        FILTER 'С поступлением' 'F8' inUserOrderSku(o, s)
        FILTER 'В ассортименте' 'F7' inAssortmentSkuStockUserOrder(s, st, o) DEFAULT
;

//--------------------- Проводим по регистру резерва ------------------//
@implementPurchaseOrderLedger(order, sku, shipmentDateTime, customerStock, supplier);
@extendFormDocumentOrderLedger(userOrder, userOrder, o);

NAVIGATOR {
    purchasePurchaseNavigator {
        ADD orders;
    }
}