MODULE PurchaseInvoiceWholesalePrice;

REQUIRE PurchaseInvoice;

NAMESPACE Purchase;

//------------------------- Оптовая цена-------------------------//
@defineDocumentInterfaceHeaderCreate (invoice, toShowWholesalePrice, 'Оптовая цена');
@defineDocumentInterfaceHeaderPriceListType (invoice, calcPriceListType, wholesale, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (invoice, invoiceDetail, calcPriceListType, wholesale, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (userInvoice, userInvoiceDetail, calcPriceListType, wholesale, ' (надбавка)');

@defineDocumentInterfaceDetailPriceCustomPrefix (invoiceDetail, wholesale, ' (оптовая)');
@defineDocumentInterfaceDetailMarkupCustomPrefix (invoiceDetail, wholesale, ' (оптовая)');

overBasePriceInvoiceDetail = ABSTRACT NUMERIC[14,2] (InvoiceDetail) PERSISTENT;
overBasePriceUserInvoiceDetail = ABSTRACT NUMERIC[14,2] (UserInvoiceDetail) PERSISTENT;
overBasePriceInvoiceDetail (detail) += overBasePriceUserInvoiceDetail(detail);

basePriceInvoiceDetail (detail) = priceInvoiceDetail(detail) OR overBasePriceInvoiceDetail(detail) PERSISTENT;
basePriceUserInvoiceDetail (detail) = priceUserInvoiceDetail(detail) OR overBasePriceUserInvoiceDetail(detail) PERSISTENT;

wholesaleMarkupUserInvoiceDetail(detail) <- markupCalcPriceListTypeSku(wholesaleCalcPriceListTypeUserInvoiceDetail(detail), skuUserInvoiceDetail(detail))
    WHEN CHANGED(wholesaleCalcPriceListTypeUserInvoiceDetail(detail)) OR
         CHANGED(skuUserInvoiceDetail(detail));

wholesalePriceUserInvoiceDetail(detail) <- roundPriceCurrency((basePriceUserInvoiceDetail(detail) * (wholesaleMarkupUserInvoiceDetail(detail) + 100)/ 100), currencyUserInvoiceDetail(detail))
    WHEN CHANGED(basePriceUserInvoiceDetail(detail)) OR
         CHANGED(wholesaleMarkupUserInvoiceDetail(detail)) OR
         CHANGED(currencyUserInvoiceDetail(detail));

calcWholesaleMarkupUserInvoiceDetail(detail)  = [round2((X/Y-1)*100)](
    wholesalePriceUserInvoiceDetail(detail),
    basePriceUserInvoiceDetail(detail));

changeWholesalePriceUserInvoiceDetail = ACTION (detail) {
    REQUEST NUMERIC[14,2] INPUT;
    IF requestedNumeric() THEN {
        SET wholesalePriceUserInvoiceDetail(detail) <- requestedNumeric();
        SET wholesaleMarkupUserInvoiceDetail(detail) <- calcWholesaleMarkupUserInvoiceDetail(detail);
    } ELSE {
        SET wholesalePriceUserInvoiceDetail(detail) <- NULL;
    }
}

calcWholesalePriceUserInvoiceDetail(detail)  = roundPriceCurrency([X*(Y+100)/100](
    basePriceUserInvoiceDetail(detail),
    wholesaleMarkupUserInvoiceDetail(detail)),currencyUserInvoiceDetail(detail));

backgroundWholesaleInvoice 'Цвет' (invoice) = RGB(238, 250, 200) IF invoice IS Invoice;

EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundWholesaleInvoice(i) toShowWholesalePriceUserInvoice, nameWholesaleCalcPriceListTypeUserInvoice SHOWIF toShowWholesalePriceUserInvoice(i)
    PROPERTIES(d) BACKGROUND backgroundWholesaleInvoice(i) SHOWIF toShowWholesalePriceUserInvoice(i) BEFORE delete(d) wholesaleMarkupUserInvoiceDetail,
                  wholesalePriceUserInvoiceDetail ON CHANGE changeWholesalePriceUserInvoiceDetail(d)
;
EXTEND DESIGN userInvoice {
    headerExtraParams {
        NEW headerWholesale {
            title = 'Оптовая цена';
            ADD PROPERTY(toShowWholesalePriceUserInvoice);
            ADD PROPERTY(nameWholesaleCalcPriceListTypeUserInvoice);
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(i) READONLY BACKGROUND backgroundWholesaleInvoice(i) toShowWholesalePriceInvoice
    PROPERTIES(d) READONLY BACKGROUND backgroundWholesaleInvoice(i) SHOWIF toShowWholesalePriceInvoice(i) wholesaleMarkupInvoiceDetail, wholesalePriceInvoiceDetail
;

// Создаем виды цен
EXTEND CLASS SystemLedgerPriceListType { purchaseWholesaleInvoiceStockPriceListType 'Оптовая (последняя по складу)' }
batchLedgerPriceListType(type) += type == SystemLedgerPriceListType.purchaseWholesaleInvoiceStockPriceListType;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += wholesalePriceInvoiceDetail(ledger) WHEN CLASS(wholesalePriceInvoiceDetail(ledger)) AND type == SystemLedgerPriceListType.purchaseWholesaleInvoiceStockPriceListType;

// Создаем вид цен по всем складам компании
EXTEND CLASS SystemLedgerPriceListType { purchaseWholesaleInvoicePriceListType 'Оптовая (последняя по ценовой группе)' }
batchLedgerPriceListType(type) += type == SystemLedgerPriceListType.purchaseWholesaleInvoicePriceListType;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += wholesalePriceInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger)) WHEN CLASS(wholesalePriceInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger))) AND type == SystemLedgerPriceListType.purchaseWholesaleInvoicePriceListType;

//-- Операция
toShowWholesalePriceUserInvoice (invoice) <- toShowWholesalePriceOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));
wholesaleCalcPriceListTypeUserInvoice (invoice) <- wholesaleCalcPriceListTypeOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));