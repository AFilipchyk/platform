MODULE PurchaseInvoiceRRP;

REQUIRE PurchaseInvoice;

NAMESPACE Purchase;

//------------------------- Рекомендуемая розничная цена-------------------------//
@defineDocumentInterfaceDetailPriceListType (invoice, priceListType, RRP, ' (RRP)');
nameCurrencyRRPPriceListTypeUserInvoiceDetail 'Валюта (RRP)' (userInvoiceDetail) = nameCurrencyRRPPriceListTypeAgreement(agreementUserInvoice(userInvoiceUserInvoiceDetail(userInvoiceDetail)));
nameCurrencyRRPPriceListTypeInvoiceDetail 'Валюта (RRP)' (invoiceDetail) = nameCurrencyRRPPriceListTypeAgreement(agreementInvoice(invoiceInvoiceDetail(invoiceDetail)));
toShowRRPPriceInvoice(invoice) = TRUE IF RRPPriceListTypeAgreement(agreementInvoice(invoice));

RRPPriceListTypeUserInvoiceDetail(userInvoiceDetail) <- RRPPriceListTypeAgreement(agreementUserInvoice(userInvoiceUserInvoiceDetail(userInvoiceDetail)))
    WHEN CHANGED (agreementUserInvoice(userInvoiceUserInvoiceDetail(userInvoiceDetail)));

@defineDocumentInterfaceDetailPriceCustomPrefix (invoiceDetail, RRP, ' (RRP)');
RRPPriceUserInvoiceDetail (detail)  <-  prevPricePriceListTypeSkuStockDateTime(RRPPriceListTypeUserInvoiceDetail(detail),
                                                                               skuUserInvoiceDetail(detail),
                                                                               customerStockUserInvoiceDetail(detail),
                                                                               dateTimeUserInvoiceDetail(detail))
                                                    WHEN CHANGED(RRPPriceListTypeUserInvoiceDetail(detail)) OR
                                                         CHANGED(skuUserInvoiceDetail(detail)) OR
                                                         CHANGED(customerStockUserInvoiceDetail(detail)) OR
                                                         CHANGED(dateTimeUserInvoiceDetail(detail));

RRPTypeExchangeAgreementUserInvoiceDetail (userInvoiceDetail)= RRPTypeExchangeAgreement(agreementUserInvoice(userInvoiceUserInvoiceDetail(userInvoiceDetail)));
RRPTypeExchangeAgreementInvoiceDetail (invoiceDetail)= RRPTypeExchangeAgreement(agreementInvoice(invoiceInvoiceDetail(invoiceDetail)));

@defineDocumentInterfaceDetailPriceCustomPrefix (invoiceDetail, RRPExchange, ' (RRP) переведенная');

RRPExchangePriceUserInvoiceDetail (detail)  <-  roundCurrency(           // Какое ставить округление?????
    RRPPriceUserInvoiceDetail (detail)*rateTypeExchangeCurrencyDate(
        RRPTypeExchangeAgreementUserInvoiceDetail(detail), currencyUserInvoiceDetail(detail), dateUserInvoiceDetail(detail)),
            currencyUserInvoiceDetail(detail))

        WHEN CHANGED(RRPTypeExchangeAgreementUserInvoiceDetail(detail)) OR
             CHANGED(currencyUserInvoiceDetail(detail)) OR
             CHANGED(dateUserInvoiceDetail(detail)) OR
             CHANGED(RRPPriceUserInvoiceDetail (detail));

toShowRRPExchangePriceInvoice(invoice) = TRUE AND NOT currencyInvoice(invoice) == currencyPriceListType(RRPPriceListTypeAgreement(agreementInvoice(invoice)));
EXTEND FORM userInvoice
    PROPERTIES(d) SHOWIF toShowRRPPriceInvoice(i) BEFORE delete(d) nameRRPPriceListTypeUserInvoiceDetail, nameCurrencyRRPPriceListTypeUserInvoiceDetail READONLY,
                  RRPPriceUserInvoiceDetail, RRPExchangePriceUserInvoiceDetail SHOWIF toShowRRPExchangePriceInvoice(i);
;
EXTEND FORM invoices
    PROPERTIES(d) SHOWIF toShowRRPPriceInvoice(i) nameRRPPriceListTypeInvoiceDetail, nameCurrencyRRPPriceListTypeInvoiceDetail,
                  RRPPriceInvoiceDetail, RRPExchangePriceInvoiceDetail SHOWIF toShowRRPExchangePriceInvoice(i);
;


