MODULE PurchaseInvoice;

REQUIRE Utils, PurchaseOrder, OrderInvoice, PurchaseOperation, CustomsGroup;

NAMESPACE Purchase;

//----------------------------------------------- Накладная ---------------------------------------------------//
@defineInvoice(' (закупка)', customerStock, showPurchasePack, 'Упаковка', Purchase);

@defineInvoiceBatch(customerStock);

@defineInvoiceDestination(supplier, customer);
@defineInvoiceStockDestination(supplierStock, customerStock);

// вторая валюта
@defineHomeCurrencyInvoice(invoice);

@deriveDocumentDetailVAT (userInvoice, , date,  sku, customerStock); // записываем ставку
@deriveDocumentDetailVATDataSum(userInvoice); // записываем сумму НДС
@deriveDocumentDetailVATPrefixSum(userInvoice, invoice); // записываем сумму с НДС

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperation(invoice, i);
@defineDocumentOperationPriceListType(userInvoice);
@defineDocumentOperationLegalEntity(userInvoice, supplier, 'Поставщик');
@defineDocumentOperationLegalEntity(userInvoice, customer, 'Покупатель');
showPurchasePackUserInvoice (invoice) <- showPurchasePackOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));
isHomeCurrency (invoice) <- isHomeCurrencyOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));

@defineOrderInvoice(' (закупка)', customerStock, showPurchasePack, 'Упаковка', purchasePack);

//isCustomInvoice 'Таможенные платежи' = DATA BOOLEAN(Invoice) IN documentPrmGroup;

//backgroundCustomedInvoice 'Цвет' (invoice) = RGB(255, 224, 224) IF invoice IS Invoice;

//customsGroupUserInvoiceDetail = DATA CustomsGroup(UserInvoiceDetail);
//codeCustomsGroupUserInvoiceDetail 'ТН ВЭД' (userInvoiceDetail) = codeCustomsGroup(customsGroupUserInvoiceDetail(userInvoiceDetail)) MINCHARWIDTH 10;

// --------------------------- Себестоимость ---------------------------------- //

extraCostPriceInvoiceDetail = ABSTRACT NUMERIC[14,2] (InvoiceDetail) PERSISTENT;
extraCostPriceUserInvoiceDetail = ABSTRACT NUMERIC[14,2] (UserInvoiceDetail) PERSISTENT;
extraCostPriceInvoiceDetail (detail) += extraCostPriceUserInvoiceDetail(detail);

customCostPriceInvoiceDetail = ABSTRACT NUMERIC[14,2](InvoiceDetail) PERSISTENT;
customCostPriceUserInvoiceDetail = ABSTRACT NUMERIC[14,2](UserInvoiceDetail) PERSISTENT;
customCostPriceInvoiceDetail(detail) += customCostPriceUserInvoiceDetail(detail);

certificateCostPriceInvoiceDetail 'Цена за сертификацию' = ABSTRACT NUMERIC[14,2](InvoiceDetail) PERSISTENT;
certificateCostPriceUserInvoiceDetail 'Цена за сертификацию' = ABSTRACT NUMERIC[14,2](UserInvoiceDetail) PERSISTENT;
certificateCostPriceInvoiceDetail(detail) += certificateCostPriceUserInvoiceDetail(detail);

priceInvoiceDetailOver (detail) = IF isHomeCurrency(invoiceInvoiceDetail(detail)) THEN
                                     homePriceInvoiceDetail(detail)
                                ELSE priceInvoiceDetail(detail);

priceUserInvoiceDetailOver (detail) = IF isHomeCurrency(userInvoiceUserInvoiceDetail(detail)) THEN
                                         homePriceUserInvoiceDetail(detail)
                                    ELSE priceUserInvoiceDetail(detail);

costPriceInvoiceDetail(detail) = priceInvoiceDetailOver(detail) (+) extraCostPriceInvoiceDetail(detail) (+)
                                 customCostPriceInvoiceDetail(detail) (+) certificateCostPriceInvoiceDetail(detail);

costPriceUserInvoiceDetail(detail) = priceUserInvoiceDetailOver(detail) (+) extraCostPriceUserInvoiceDetail(detail) (+)
                                     customCostPriceUserInvoiceDetail(detail) (+) certificateCostPriceUserInvoiceDetail(detail);

// -------------------------------------- Формирование задолженности ---------------------------------------------------

CONSTRAINT supplierUserInvoice(userInvoice) AND NOT isSupplierLegalEntity(supplierUserInvoice(userInvoice))
    CHECKED BY supplierUserInvoice MESSAGE 'Для накладной выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerUserInvoice(userInvoice) AND NOT isCompanyLegalEntity(customerUserInvoice(userInvoice))
    CHECKED BY customerUserInvoice MESSAGE 'Для накладной выбрано в качестве покупателя организация, не являющаяся компанией';

//------------------------------ Автоматическое проставление свойств -----------------------------//

supplierUserInvoice(userInvoice) <- defaultSupplierEmployee(currentUser()) IF countAccessSupplierEmployee (currentUser()) == 1
    WHEN ASSIGNED(userInvoice IS UserInvoice);
customerUserInvoice(userInvoice) <- defaultCompanyEmployee(currentUser()) IF countAccessCompanyEmployee (currentUser()) == 1
    WHEN ASSIGNED(userInvoice IS UserInvoice);

supplierStockUserInvoice(userInvoice) <- defaultStockEmployeeLegalEntity(currentUser(), supplierUserInvoice(userInvoice))
    IF countAccessStockEmployeeLegalEntity (currentUser(), supplierUserInvoice(userInvoice)) == 1
        WHEN CHANGED(supplierUserInvoice(userInvoice));
customerStockUserInvoice(userInvoice) <- defaultStockEmployeeLegalEntity(currentUser(), customerUserInvoice(userInvoice))
    IF countAccessStockEmployeeLegalEntity (currentUser(), customerUserInvoice(userInvoice)) == 1
        WHEN CHANGED(customerUserInvoice(userInvoice));
        // для импорта

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPackSku(userInvoice, sku, customerStock, Purchase);
@extendFormDocumentPackSkuCustom(userInvoice, userInvoice, i, showPurchasePack, Purchase);

overChangeQuantityValueSkuUserInvoiceDetail(detail) += ACTION (detail) {
    IF  packBarcodeSku(skuUserInvoiceDetail(detail)) THEN {
        SET quantityPackUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
    }
}

//------------------------------ Расширение формы -----------------------------//

// Фильтры
inAssortmentSkuUserInvoice (sku, userInvoice) = companyLedgerPriceListTypeSkuStockDateTime(priceListTypeUserInvoiceSku(userInvoice, sku), sku, customerStockUserInvoice(userInvoice), dateTimeUserInvoice(userInvoice)) == supplierUserInvoice(userInvoice);
inUserInvoiceSku (userInvoice, sku)= inSupplierSku(supplierUserInvoice(userInvoice), sku);

EXTEND FORM userInvoice

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' currentBalanceSkuUserInvoice(s, i)
        FILTER 'В документе ' 'F9' quantityUserInvoiceDetailSkuUserInvoice(s, i)
    FILTERGROUP filter2
        FILTER 'С поступлением ' 'F8' inUserInvoiceSku(i, s)
        FILTER 'В ассортименте ' 'F7' inAssortmentSkuUserInvoice(s, i)
;

// Резервы
@extendFormDocumentOrderLedger(userInvoice, userInvoice, customerStock, i);

// --------------- Проведение по регистру закупок ------------- //

@implementPurchaseLedger(Invoice, sku, customerStock);
supplierPurchaseLedger (ledger) += supplierInvoiceDetail(ledger);
quantityPurchaseLedger (ledger) += quantityInvoiceDetail(ledger);
VATPurchaseLedger (ledger) += VATInvoiceDetail(ledger);
sumPurchaseLedger (ledger) += sumInvoiceDetail(ledger);

// --------------- Проведение по регистру цен ------------- //

EXTEND CLASS InvoiceDetail : PriceListLedger;

fromDateTimePriceListLedger (ledger) += dateTimeInvoiceDetail(ledger);

isPostedPriceListLedger(ledger) += isPostedInvoiceDetail(ledger);

skuPriceListLedger (ledger) += skuInvoiceDetail(ledger);

descriptionPriceListLedger (ledger) += descriptionInvoiceDetail(ledger);

inPriceListLedgerStock (ledger, stock) += customerStockInvoiceDetail(ledger) == stock;

EXTEND CLASS SystemLedgerPriceListType { purchaseInvoiceStockPriceListType 'Закупки (последняя по складу)' }
batchLedgerPriceListType(type) += type == SystemLedgerPriceListType.purchaseInvoiceStockPriceListType;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += priceInvoiceDetail(ledger) WHEN CLASS(priceInvoiceDetail(ledger)) AND type == SystemLedgerPriceListType.purchaseInvoiceStockPriceListType;

// Создаем вид цен по всем складам компании
CLASS InvoicePriceListLedger : PriceListLedger;

@defineAggregation(invoiceDetail, invoicePriceListLedger, isInvoiceDetail);

fromDateTimePriceListLedger (ledger) += dateTimeInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger));

isPostedPriceListLedger(ledger) += isPostedInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger));

skuPriceListLedger (ledger) += skuInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger));

descriptionPriceListLedger (ledger) += descriptionInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger));

inPriceListLedgerStock (ledger, stock) += isCompanyStock(stock) AND priceStockGroupStock(customerStockInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger))) == priceStockGroupStock(stock);

EXTEND CLASS SystemLedgerPriceListType { purchaseInvoicePriceListType 'Закупки (последняя по ценовой группе)' }
batchLedgerPriceListType(type) += type == SystemLedgerPriceListType.purchaseInvoicePriceListType;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += priceInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger)) WHEN CLASS(priceInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger))) AND type == SystemLedgerPriceListType.purchaseInvoicePriceListType;


NAVIGATOR {
    purchasePurchaseNavigator {
        ADD invoices;
    }
}

