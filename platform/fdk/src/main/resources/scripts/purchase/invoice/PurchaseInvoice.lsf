MODULE PurchaseInvoice;

REQUIRE Utils, PurchaseOrder, OrderInvoice;

NAMESPACE Purchase;

//----------------------------------------------- Накладная ---------------------------------------------------//
@defineInvoice(' (закупка)', customerStock, showPurchasePack, 'Отображать упаковку', purchasePack);
@defineOrderInvoice(' (закупка)', customerStock, showPurchasePack, 'Отображать упаковку', purchasePack);
@defineInvoiceBatch(customerStock);

@defineInvoiceDestination(supplier, customer);
@defineInvoiceStockDestination(supplierStock, customerStock);

// вторая валюта
@defineHomeCurrencyInvoice(invoice);

// --------------------------- Себестоимость ---------------------------------- //

extraCostPriceInvoiceDetail = ABSTRACT NUMERIC[14,2] (invoiceDetail) PERSISTENT;
extraCostPriceUserInvoiceDetail = ABSTRACT NUMERIC[14,2] (userInvoiceDetail) PERSISTENT;
extraCostPriceInvoiceDetail (detail) += extraCostPriceUserInvoiceDetail(detail);

priceInvoiceDetailOver (detail) = IF isHomeCurrency(invoiceInvoiceDetail(detail)) THEN
                                     homePriceInvoiceDetail(detail)
                                ELSE priceInvoiceDetail(detail);

priceUserInvoiceDetailOver (detail) = IF isHomeCurrency(invoiceInvoiceDetail(detail)) THEN
                                         homePriceUserInvoiceDetail(detail)
                                    ELSE priceUserInvoiceDetail(detail);

costPriceInvoiceDetail(detail) = priceInvoiceDetailOver(detail) (+) extraCostPriceInvoiceDetail(detail);
costPriceUserInvoiceDetail(detail) = priceUserInvoiceDetailOver(detail) (+) extraCostPriceUserInvoiceDetail(detail);

// -------------------------------------- Формирование задолженности ---------------------------------------------------

@implementContractLedger(a, userInvoice, contractSku);
sumContractALedger(contractALedger) += invoiceSumUserInvoiceDetailUserInvoice(contractALedger);

@implementContractPrepaymentLedger(userInvoice, invoiceSumUserInvoiceDetailUserInvoice, contractSku);

@implementOutContractLedgerInContractLedgerPrefix(in, userInvoice, contractSku);
sumInContractLedger(inContractLedger) += invoiceSumUserInvoiceDetailUserInvoice(inContractLedger);

CONSTRAINT supplierUserInvoice(userInvoice) AND NOT isSupplierLegalEntity(supplierUserInvoice(userInvoice))
    CHECKED BY supplierUserInvoice MESSAGE 'Для накладной выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerUserInvoice(userInvoice) AND NOT isCompanyLegalEntity(customerUserInvoice(userInvoice))
    CHECKED BY customerUserInvoice MESSAGE 'Для накладной выбрано в качестве покупателя организация, не являющаяся компанией';

        // для импорта
numberSeriesToUserInvoice (number, series) = GROUP UNIQUE userInvoice BY numberObject(userInvoice), seriesObject(userInvoice) WHERE userInvoice IS userInvoice;

@defineDocumentPackageSku(userInvoice, sku, customerStock);
@extendFormDocumentPackageSkuCustom(userInvoice, userInvoice, i, showPurchasePack);

overChangeQuantityValueSkuUserInvoiceDetail(detail) += ACTION (detail) {
    IF  purchasePackBarcodeSku(skuUserInvoiceDetail(detail)) THEN {
        SET quantityPackUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
    }
}

inAssortmentSkuUserInvoice (sku, userInvoice)= companyLedgerPriceListTypeSkuStockDateTime(priceListTypeUserInvoiceSku(userInvoice, sku), sku, customerStockUserInvoice(userInvoice), dateTimeUserInvoice(userInvoice)) == supplierUserInvoice(userInvoice);
inUserInvoiceSku (userInvoice, sku)= inSupplierSku(supplierUserInvoice(userInvoice), sku);
EXTEND FORM userInvoice
       FILTERGROUP filter2
            FILTER 'С поступлением ' 'F8' inUserInvoiceSku(i, s)
            FILTER 'В ассортименте ' 'F7' inAssortmentSkuUserInvoice(s, i)
;

// Проводим по регистру закупок
@implementPurchaseLedger(invoice, sku, customerStock);
supplierPurchaseLedger (ledger) += supplierInvoiceDetail(ledger);
quantityPurchaseLedger (ledger) += quantityInvoiceDetail(ledger);
VATPurchaseLedger (ledger) += VATInvoiceDetail(ledger);
sumPurchaseLedger (ledger) += sumInvoiceDetail(ledger);

// Создаем виды цен

EXTEND CLASS invoiceDetail : priceListLedger;

fromDateTimePriceListLedger (ledger) += dateTimeInvoiceDetail(ledger);

isPostedPriceListLedger(ledger) += isPostedInvoiceDetail(ledger);

skuPriceListLedger (ledger) += skuInvoiceDetail(ledger);

descriptionPriceListLedger (ledger) += descriptionInvoiceDetail(ledger);

inPriceListLedgerStock (ledger, stock) += customerStockInvoiceDetail(ledger) == stock;

EXTEND CLASS systemLedgerPriceListType { purchaseInvoiceStockPriceListType 'Закупки (последняя по складу)' }
batchLedgerPriceListType(type) += type == systemLedgerPriceListType.purchaseInvoiceStockPriceListType;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += priceInvoiceDetail(ledger) WHEN CLASS(priceInvoiceDetail(ledger)) AND type == systemLedgerPriceListType.purchaseInvoiceStockPriceListType;

// Создаем вид цен по всем складам компании
CLASS invoicePriceListLedger : priceListLedger;

@defineAggregation(invoiceDetail, invoicePriceListLedger, isInvoiceDetail);

fromDateTimePriceListLedger (ledger) += dateTimeInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger));

isPostedPriceListLedger(ledger) += isPostedInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger));

skuPriceListLedger (ledger) += skuInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger));

descriptionPriceListLedger (ledger) += descriptionInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger));

inPriceListLedgerStock (ledger, stock) += isCompanyStock(stock) AND ledger IS invoicePriceListLedger;

EXTEND CLASS systemLedgerPriceListType { purchaseInvoicePriceListType 'Закупки (последняя)' }
batchLedgerPriceListType(type) += type == systemLedgerPriceListType.purchaseInvoicePriceListType;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += priceInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger)) WHEN CLASS(priceInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger))) AND type == systemLedgerPriceListType.purchaseInvoicePriceListType;

NAVIGATOR {
    purchasePurchaseNavigator {
        ADD invoices;
    }
}