MODULE PurchaseReturnInvoice;

REQUIRE OrderInvoice,PurchaseReturnOrder;

NAMESPACE PurchaseReturn;

//----------------------------------------------- Накладная ---------------------------------------------------//

@defineInvoice(' (закупка-возврат)', customerStock, showPurchasePack, 'Отображать упаковку', purchasePack);
@defineOrderInvoice(' (закупка-возврат)', customerStock, showPurchasePack, 'Отображать упаковку', purchasePack);
@defineInvoiceBatch(customerStock);
@defineInvoiceReturn(Purchase, PurchaseReturn, customerStock);

@defineInvoiceDestination(customer, supplier);
@defineInvoiceStockDestination(customerStock, supplierStock);

// -------------------------------------- Формирование задолженности ---------------------------------------------------

@implementContractLedger(, userInvoice, contractSku);
sumContractLedger(contractLedger) += -invoiceSumUserInvoiceDetailUserInvoice(contractLedger);

@implementContractLedger(a, userInvoice, contractSku);
sumContractALedger(contractALedger) += -invoiceSumUserInvoiceDetailUserInvoice(contractALedger);

@implementOutContractLedgerInContractLedgerPrefix(out, userInvoice, contractSku);
sumOutContractLedger(outContractLedger) += invoiceSumUserInvoiceDetailUserInvoice(outContractLedger);

CONSTRAINT supplierUserInvoice(userInvoice) AND NOT isSupplierLegalEntity(supplierUserInvoice(userInvoice))
    CHECKED BY supplierUserInvoice MESSAGE 'Для накладной выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerUserInvoice(userInvoice) AND NOT isCompanyLegalEntity(customerUserInvoice(userInvoice))
    CHECKED BY customerUserInvoice MESSAGE 'Для накладной выбрано в качестве покупателя организация, не являющаяся компанией';

@defineDocumentPackageSku(userInvoice, sku, customerStock);
@extendFormDocumentPackageSkuCustom(userInvoice, userInvoice, i, showPurchasePack);

overChangeQuantityValueSkuUserInvoiceDetail(detail) += ACTION (detail) {
    IF  purchasePackBarcodeSku(skuUserInvoiceDetail(detail)) THEN {
        SET quantityPackUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
    }
}

inAssortmentSkuUserInvoice (sku, userInvoice)= companyLedgerPriceListTypeSkuStockDateTime(priceListTypeUserInvoiceSku(userInvoice, sku), sku, customerStockUserInvoice(userInvoice), dateTimeUserInvoice(userInvoice)) == supplierUserInvoice(userInvoice);
inUserInvoiceSku (userInvoice, sku)= inSupplierSku(supplierUserInvoice(userInvoice), sku);
EXTEND FORM userInvoice
       FILTERGROUP filter2
            FILTER 'С поступлением ' 'F8' inUserInvoiceSku(i, s)
            FILTER 'В ассортименте ' 'F7' inAssortmentSkuUserInvoice(s, i)
;