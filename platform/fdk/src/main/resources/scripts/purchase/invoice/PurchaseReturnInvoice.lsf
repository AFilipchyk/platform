MODULE PurchaseReturnInvoice;

REQUIRE OrderInvoice,PurchaseReturnOrder, PurchaseOperation;

PRIORITY Purchase, Operation;

NAMESPACE PurchaseReturn;

//----------------------------------------------- Накладная ---------------------------------------------------//

@defineInvoice(' (закупка-возврат)', customerStock, showPurchasePack, 'Упаковка', Purchase);
@defineOrderInvoice(' (закупка-возврат)', customerStock, showPurchasePack, 'Упаковка', purchasePack);
@defineInvoiceBatch(customerStock);
@defineInvoiceReturn(Purchase, PurchaseReturn, customerStock);

@defineInvoiceDestination(customer, supplier);
@defineInvoiceStockDestination(customerStock, supplierStock);

// вторая валюта
@defineHomeCurrencyInvoice(invoice);

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperation(invoice, i);
@defineDocumentOperationPriceListType(userInvoice);
@defineDocumentOperationLegalEntity(userInvoice, supplier, 'Поставщик');
@defineDocumentOperationLegalEntity(userInvoice, customer, 'Покупатель');
@defineDocumentOperationRole(userInvoice);

showPurchasePackUserInvoice (invoice) <- showPurchasePackOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));
isHomeCurrency (invoice) <- isHomeCurrencyOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));
//------------------------------ Ограничение на выбор поставщиков -----------------------------//

CONSTRAINT supplierUserInvoice(userInvoice) AND NOT isSupplierLegalEntity(supplierUserInvoice(userInvoice))
    CHECKED BY supplierUserInvoice MESSAGE 'Для накладной выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerUserInvoice(userInvoice) AND NOT isCompanyLegalEntity(customerUserInvoice(userInvoice))
    CHECKED BY customerUserInvoice MESSAGE 'Для накладной выбрано в качестве покупателя организация, не являющаяся компанией';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserInvoice, supplier, company, userInvoice);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPackSku(userInvoice, sku, customerStock, Purchase);
@extendFormDocumentPackSkuCustom(userInvoice, userInvoice, i, showPurchasePack, Purchase);

overChangeQuantityValueSkuUserInvoiceDetail(detail) += ACTION (detail) {
    IF  packBarcodeSku(skuUserInvoiceDetail(detail)) THEN {
        SET quantityPackUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
    }
}

//------------------------------ Расширение формы -----------------------------//

// Фильтры
inAssortmentSkuUserInvoice (sku, userInvoice)= companyLedgerPriceListTypeSkuStockDateTime(priceListTypeUserInvoiceSku(userInvoice, sku), sku, customerStockUserInvoice(userInvoice), dateTimeUserInvoice(userInvoice)) == supplierUserInvoice(userInvoice);
inUserInvoiceSku (userInvoice, sku)= inSupplierSku(supplierUserInvoice(userInvoice), sku);
EXTEND FORM userInvoice

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' currentBalanceSkuUserInvoice(s, i) DEFAULT
        FILTER 'В документе ' 'F9' quantityUserInvoiceDetailSkuUserInvoice(s, i)
    FILTERGROUP filter2
        FILTER 'С поступлением ' 'F8' inUserInvoiceSku(i, s)
        FILTER 'В ассортименте ' 'F7' inAssortmentSkuUserInvoice(s, i)
;

// Резервы
@extendFormDocumentOrderLedger(userInvoice, userInvoice, customerStock, i);
@extendFormDocumentOrderLedgerAll(userInvoice, userInvoice, i);

NAVIGATOR {
    purchaseReturnNavigator {
        ADD invoices;
    }
}
