MODULE PurchaseReturnInvoice;

REQUIRE OrderInvoice,PurchaseReturnOrder, PurchaseOperation;

PRIORITY Purchase, Operation;

NAMESPACE PurchaseReturn;

//----------------------------------------------- Накладная ---------------------------------------------------//

@defineInvoice(' (закупка-возврат)', customerStock);
@defineOrderInvoice(' (закупка-возврат)', customerStock);

@defineInvoiceBatch(customerStock);
@defineInvoiceReturn(Purchase, PurchaseReturn, customerStock);

@defineInvoiceDestination(customer, supplier);
@defineInvoiceStockDestination(customerStock, supplierStock);

// вторая валюта
@defineInvoiceHomeCurrency(invoice);

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperation(invoice, i);
@defineDocumentOperationPriceListType(userInvoice, 'накладной (закупка-возврат)');
@defineDocumentOperationLegalEntity(userInvoice, supplier, 'Поставщик');
@defineDocumentOperationLegalEntity(userInvoice, customer, 'Покупатель');
@defineDocumentOperationRole(userInvoice);

isHomeCurrency (invoice) <- isHomeCurrencyOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));
//------------------------------ Ограничение на выбор поставщиков -----------------------------//

CONSTRAINT supplierUserInvoice(userInvoice) AND NOT isSupplierLegalEntity(supplierUserInvoice(userInvoice))
    CHECKED BY supplierUserInvoice MESSAGE 'Для накладной выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerUserInvoice(userInvoice) AND NOT isCompanyLegalEntity(customerUserInvoice(userInvoice))
    CHECKED BY customerUserInvoice MESSAGE 'Для накладной выбрано в качестве покупателя организация, не являющаяся компанией';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserInvoice, supplier, company, userInvoice);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(invoice, i);
Invoice.packQuantityInvoiceDetail(detail) += packQuantityInvoiceDetail(detail);
EXTEND DESIGN userInvoice {
    headerExtraParams {
        NEW headerPack {
            title = 'Упаковка';
            ADD PROPERTY(showPackUserInvoice);
        }
    }
}

@defineOrderInvoicePack(showPack);

@defineDocumentPackSku(userInvoice, sku, customerStock);
@extendFormDocumentPackSku(userInvoice, userInvoice, i);

overChangeQuantityValueSkuUserInvoiceDetail(detail) += ACTION (detail) {
    IF packBarcodeSku(skuUserInvoiceDetail(detail)) THEN {
        SET packQuantityUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
    }
}

showPackUserInvoice (invoice) <- showPackOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));

//------------------------------ Расширение формы -----------------------------//

EXTEND FORM userInvoice

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' prevCurrentBalanceSkuUserInvoice(s, i) DEFAULT
        FILTER 'В документе ' 'F9' quantityUserInvoiceDetailSkuUserInvoice(s, i)
    FILTERGROUP filter2
        FILTER 'С поступлением ' 'F8' quantityPurchaseSupplierSku(supplierUserInvoice(i), s)
        FILTER 'В ассортименте ' 'F7' companyLedgerPriceListTypeSkuStockDateTime(priceListTypeUserInvoiceSku(i, s), s, customerStockUserInvoice(i), dateTimeUserInvoice(i)) == supplierUserInvoice(i)
;

// Резервы
@extendFormDocumentOrderLedger(userInvoice, userInvoice, customerStock, i);
@extendFormDocumentOrderLedgerAll(userInvoice, userInvoice, i);

NAVIGATOR {
    purchaseReturnNavigator {
        ADD invoices;
    }
}
