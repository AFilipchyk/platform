MODULE PurchaseReturnCreditNote;

REQUIRE CreditNote, PurchaseReturnShipment;

NAMESPACE PurchaseReturn;

//----------------------------------------------- Акт ---------------------------------------------------//

@defineCreditNote(' (закупка-возврат)', customerStock);

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserCreditNote(userCreditNote) AND NOT isSupplierLegalEntity(supplierUserCreditNote(userCreditNote))
    CHECKED BY supplierUserCreditNote MESSAGE 'Для акта расхождения выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerUserCreditNote(userCreditNote) AND NOT isCompanyLegalEntity(customerUserCreditNote(userCreditNote))
    CHECKED BY customerUserCreditNote MESSAGE 'Для акта расхождения выбрано в качестве покупателя организация, не являющаяся компанией';

//------------------------------ Автоматическое проставление свойств -----------------------------//

supplierUserCreditNote(userCreditNote) <- defaultSupplierEmployee(currentUser()) IF countAccessSupplierEmployee (currentUser()) == 1
    WHEN ASSIGNED(userCreditNote IS UserCreditNote);
customerUserCreditNote(userCreditNote) <- defaultCompanyEmployee(currentUser()) IF countAccessCompanyEmployee (currentUser()) == 1
    WHEN ASSIGNED(userCreditNote IS UserCreditNote);

supplierStockUserCreditNote(userCreditNote) <- defaultStockEmployeeLegalEntity(currentUser(), supplierUserCreditNote(userCreditNote))
    IF countAccessStockEmployeeLegalEntity (currentUser(), supplierUserCreditNote(userCreditNote)) == 1
        WHEN CHANGED(supplierUserCreditNote(userCreditNote));
customerStockUserCreditNote(userCreditNote) <- defaultStockEmployeeLegalEntity(currentUser(), customerUserCreditNote(userCreditNote))
    IF countAccessStockEmployeeLegalEntity (currentUser(), customerUserCreditNote(userCreditNote)) == 1
        WHEN CHANGED(customerUserCreditNote(userCreditNote));

//-- Операция
createCreditNoteUserInvoice (invoice) <- createCreditNoteOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));

NAVIGATOR {
    purchaseReturnNavigator {
        ADD creditNotes;
    }
}
