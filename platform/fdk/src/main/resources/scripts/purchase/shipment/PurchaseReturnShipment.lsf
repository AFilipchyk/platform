MODULE PurchaseReturnShipment;

REQUIRE Shipment, PurchaseReturnInvoice;

NAMESPACE PurchaseReturn;

//----------------------------------------------- Поставка ---------------------------------------------------//
@defineShipment(' (закупка-возврат)', customerStock, showPurchasePack, 'Отображать упаковку', purchasePack);
@defineShipmentBatch(customerStock);

@defineShipmentStockDestination(customerStock, supplierStock);

// Берем учетную цену
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (userShipment, accountPriceListType, , , sku, supplierStock);
shipmentPriceUserInvoiceDetail(detail) <- calcShipmentPriceUserInvoiceDetail(detail) (+) extraShipmentPriceUserInvoiceDetail(detail) WHEN
    (CHANGED(calcShipmentPriceUserInvoiceDetail(detail)) OR CHANGED(extraShipmentPriceUserInvoiceDetail(detail)) OR CHANGED(createShipmentUserInvoiceDetail(detail)))
        AND createShipmentUserInvoiceDetail(detail);

// Проводим по регистру

@implementSkuLedgerOutFIFO(shipmentDetail, sku, customerStock);
quantityOutFIFOSkuLedger (ledger) += quantityShipmentDetail(ledger);
@implementSkuLedgerOutFIFOBatchBalance(shipmentDetail, customerStock);
sumOutSkuLedger (ledger) += sumShipmentDetail(ledger);

@implementStockDocumentLedgerOut(shipment, customerStock);
sumOutStockDocumentLedger (ledger) += sumShipmentDetailShipment(ledger);
sumItemOutStockDocumentLedger (ledger) += sumItemShipmentDetailShipment(ledger);
sumContainerOutStockDocumentLedger (ledger) += sumContainerShipmentDetailShipment(ledger);

CONSTRAINT supplierUserShipment(userShipment) AND NOT isSupplierLegalEntity(supplierUserShipment(userShipment))
    CHECKED BY supplierUserShipment MESSAGE 'Для поставки выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerUserShipment(userShipment) AND NOT isCompanyLegalEntity(customerUserShipment(userShipment))
    CHECKED BY customerUserShipment MESSAGE 'Для поставки выбрано в качестве покупателя организация, не являющаяся компанией';

supplierUserShipment(userShipment) <- defaultSupplierEmployee(currentUser()) IF countIsSupplierEntityEmployee (currentUser()) == 1
    WHEN ASSIGNED(userShipment IS userShipment);
customerUserShipment(userShipment) <- defaultCompanyEmployee(currentUser()) IF countIsCompanyEntityEmployee (currentUser()) == 1
    WHEN ASSIGNED(userShipment IS userShipment);

supplierStockUserShipment(userShipment) <- defaultStockEmployeeLegalEntity(currentUser(), supplierUserShipment(userShipment))
    IF countStocksLegalEntityEmployee (currentUser(), supplierUserShipment(userShipment)) == 1
        WHEN CHANGED(supplierUserShipment(userShipment));
customerStockUserShipment(userShipment) <- defaultStockEmployeeLegalEntity(currentUser(), customerUserShipment(userShipment))
    IF countStocksLegalEntityEmployee (currentUser(), customerUserShipment(userShipment)) == 1
        WHEN CHANGED(customerUserShipment(userShipment));

NAVIGATOR {
    purchaseReturnNavigator {
        ADD shipments;
    }
}


//----------------------------------------------- Операции -----------------------------------------------------//

@defineOperationObject(purchase, shipment, s);
@defineSupplierCustomerConstraintOperationObject(purchase, shipment);

//------------------------------ Создание аггрегированных объектов через операции -----------------------------//

createShipmentUserInvoice(invoice) <- createShipmentPurchaseOperation(purchaseOperationUserInvoice(invoice))
    WHEN CHANGED(purchaseOperationUserInvoice(invoice));