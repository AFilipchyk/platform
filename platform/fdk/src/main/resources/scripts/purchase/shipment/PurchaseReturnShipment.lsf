MODULE PurchaseReturnShipment;

REQUIRE Shipment, PurchaseReturnInvoice, OrderShipment, InvoiceShipment, PriceListLedger;

PRIORITY Purchase, Operation;

NAMESPACE PurchaseReturn;

//----------------------------------------------- Поставка ---------------------------------------------------//
@defineShipment(' (закупка-возврат)', customerStock);
@defineShipmentBatch(customerStock);

@defineShipmentStockDestination(customerStock, supplierStock);

@defineOrderShipment(' (закупка-возврат)', customerStock);
@defineInvoiceShipment(' (закупка-возврат)', customerStock);
@defineInvoiceShipmentAction(' (закупка-возврат)');

@defineInvoiceShipmentBatch();

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperation(shipment, s);
@defineDocumentOperationLegalEntity(userShipment, supplier, 'Поставщик');
@defineDocumentOperationLegalEntity(userShipment, customer, 'Покупатель');
@defineDocumentOperationRole(userShipment);

@deriveDocumentOperationProperty(UserInvoice, createShipment);

overFillInvoiceUserShipmentInvoice(s, i) += ACTION (s, i) {
    SET operationUserShipment(s) <- operationInvoice(i);
}

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserShipment(userShipment) AND NOT isSupplierLegalEntity(supplierUserShipment(userShipment))
    CHECKED BY supplierUserShipment MESSAGE 'Для поставки выбрано в качестве поставщика организация, не являющаяся поставщиком: закупка-возврат';
CONSTRAINT customerUserShipment(userShipment) AND NOT isCompanyLegalEntity(customerUserShipment(userShipment))
    CHECKED BY customerUserShipment MESSAGE 'Для поставки выбрано в качестве покупателя организация, не являющаяся компанией: закупка-возврат';

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(shipment, s);
Shipment.packQuantityShipmentDetail(detail) += packQuantityShipmentDetail(detail);
EXTEND DESIGN userShipment {
    headerExtraParams {
        NEW headerPack {
            title = 'Упаковка';
            ADD PROPERTY(showPackUserShipment);
        }
    }
}

@defineOrderShipmentPack();
@defineInvoiceShipmentPack();

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserShipment, supplier, company, userShipment);

// --------------------------- Расчет учетной цены для поставки --------------------- //

@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (userInvoice, accountPriceListType, shipment, , sku, customerStock);
//shipmentPriceUserInvoiceDetail(detail) <- calcShipmentPriceUserInvoiceDetail(detail) (+) extraShipmentPriceUserInvoiceDetail(detail) WHEN
//    (CHANGED(calcShipmentPriceUserInvoiceDetail(detail)) OR CHANGED(extraShipmentPriceUserInvoiceDetail(detail)) OR CHANGED(createShipmentUserInvoiceDetail(detail)))
//        AND createShipmentUserInvoiceDetail(detail);

// ------------------------------- Проведение по регистру остатков ------------------------ //

@implementSkuLedgerOutFIFO(ShipmentDetail, sku, customerStock);
quantityOutFIFOSkuLedger (ledger) += quantityShipmentDetail(ledger);
@implementSkuLedgerOutFIFOBatchBalance(shipmentDetail, customerStock);
sumOutSkuLedger (ledger) += sumShipmentDetail(ledger);

// ------------------------------- Проведение по товарному отчету ------------------------ //

@implementStockDocumentLedgerOut(Shipment, customerStock);
sumOutStockDocumentLedger (ledger) += sumShipmentDetailShipment(ledger);
sumItemOutStockDocumentLedger (ledger) += sumItemShipmentDetailShipment(ledger);
sumContainerOutStockDocumentLedger (ledger) += sumContainerShipmentDetailShipment(ledger);


NAVIGATOR {
    purchaseReturnNavigator {
        ADD shipments;
    }
}
