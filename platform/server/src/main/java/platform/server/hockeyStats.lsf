MODULE HockeyStats;

REQUIRE System;

CLASS Game 'Game';
CLASS Team 'Team' : named;

CLASS Conference 'Conference' : named;

CLASS City : named;

CLASS STATIC GameResult 'S/O'
{
    win '',
    winOT 'OT',
    winSO 'SO'
};

city 'City' (team) = DATA City (Team);
cityName(team) = name(city(team)) IN base;

teamName 'Team' (team) = name(team) IF team IS Team;

conference(team) = DATA Conference (Team);
conferenceName 'Conference' (team) = name(conference(team)) IN base;

hostTeam(game) = DATA Team (Game);
guestTeam(game) = DATA Team (Game);

gameDate 'Date' (game) = DATA DATE (Game) IN base;

hostTeamName 'Home' = name(hostTeam(game)) IN base;
guestTeamName 'Visitor' = name(guestTeam(game)) IN base;

hostGoals 'H Score' (game) = DATA INTEGER (Game) IN base;
guestGoals 'V Score' (game) = DATA INTEGER (Game) IN base;

gameWinner(game) = UNION EXCLUSIVE hostTeam(game) IF hostGoals(game) > guestGoals(game),
                                   guestTeam(game) IF hostGoals(game) < guestGoals(game) PERSISTENT;

gameLooser(game) = UNION OVERRIDE hostTeam(game), guestTeam(game) IF gameWinner(game) != guestTeam(game) PERSISTENT;

gameResultData(game) = DATA GameResult (Game);

gameResult(game) = UNION OVERRIDE GameResult.win IF game IS Game, gameResultData(game);

pureWin(game) = hostGoals(game) - guestGoals(game) > 1 OR guestGoals(game) - hostGoals(game) > 1;

gameResult(game) <- GameResult.win WHEN ASSIGNED(pureWin(game));

gameResultName 'O/S' (game) = name(gameResult(game)) IN base;

hostGamesPlayed(team) = GROUP SUM 1 BY hostTeam(game);
guestGamesPlayed(team) = GROUP SUM 1 BY guestTeam(game);

gamesPlayed 'GP' (team) = hostGamesPlayed(team) (+) guestGamesPlayed(team);

zeroIfTeamResult(obj1, obj2) = 0 IF obj1 IS Team AND obj2 IS GameResult;

gamesWonByResult(team, type) = UNION OVERRIDE zeroIfTeamResult(team, type), [GROUP SUM 1 BY gameWinner(game), gameResult(game)](team, type);
gamesLostByResult(team, type) = UNION OVERRIDE zeroIfTeamResult(team, type), [GROUP SUM 1 BY gameLooser(game), gameResult(game)](team, type);

gamesWon 'W' (team) = gamesWonByResult(team, GameResult.win);
gamesWonOT 'OTW' (team) = gamesWonByResult(team, GameResult.winOT);
gamesWonSO 'SOW' (team) = gamesWonByResult(team, GameResult.winSO);

gamesLost 'L' (team) = gamesLostByResult(team, GameResult.win);
gamesLostOT 'OTL' (team) = gamesLostByResult(team, GameResult.winOT);
gamesLostSO 'SOL' (team) = gamesLostByResult(team, GameResult.winSO);

points 'PTS' (team) = gamesWon(team) * 3 + (gamesWonSO(team) + gamesWonOT(team)) * 2 + gamesLostOT(team) + gamesLostSO(team);

hostGoalsScored(team) = GROUP SUM hostGoals(game) BY hostTeam(game);
guestGoalsScored(team) = GROUP SUM guestGoals(game) BY guestTeam(game);
goalsScored 'GF' (team) = UNION OVERRIDE 0 IF team IS Team, UNION SUM hostGoalsScored(team), guestGoalsScored(team);

hostGoalsConceded(team) = GROUP SUM guestGoals(game) BY hostTeam(game);
guestGoalsConceded(team) = GROUP SUM hostGoals(game) BY guestTeam(game);
goalsConceded 'GA' (team) = UNION OVERRIDE 0 IF team IS Team, UNION SUM hostGoalsConceded(team), guestGoalsConceded(team);

extendedGame(game) = gameResult(game) != GameResult.win;

place 'PL' (team) = PARTITION SUM 1 ORDER DESC points(team), gamesWon(team), gamesWonOT(team), gamesWonSO(team),
                                               goalsScored(team) - goalsConceded(team), goalsScored(team);

conferencePlace 'Conf. PL' (team) = PARTITION SUM 1 BY conference(team)
                                              ORDER DESC points(team), gamesWon(team), gamesWonOT(team), gamesWonSO(team),
                                                         goalsScored(team) - goalsConceded(team), goalsScored(team);

CONSTRAINT hostTeam(team) == guestTeam(team) CHECKED BY hostTeam, guestTeam MESSAGE 'Home and Visitor teams should be different';
CONSTRAINT extendedGame(game) AND hostGoals(game) > guestGoals(game) + 1 MESSAGE 'Overtime is impossible';
CONSTRAINT extendedGame(game) AND guestGoals(game) > hostGoals(game) + 1 MESSAGE 'Overtime is impossible';
CONSTRAINT hostGoals(game) == guestGoals(game) MESSAGE 'The game cannot end in a draw';


FORM MainForm 'Scoreboard'
OBJECTS game=Game, team=Team
PROPERTIES(game) gameDate, hostTeamName, hostGoals, guestGoals, guestTeamName, gameResultName
PROPERTIES(team) place, conferencePlace, teamName, gamesPlayed, gamesWon, gamesWonOT, gamesWonSO,
                 gamesLostSO, gamesLostOT, gamesLost, goalsScored, goalsConceded, points
PROPERTIES ADDOBJ(game), ADDOBJ(team);

NAVIGATOR
{
    ADD MainForm;
}