MODULE Utils;

REQUIRE System, Time;

// --------------------------------------------- Стандартные группы --------------------------------- //

GROUP print '{utils.group.print}' : public;

// ---------------------------------- Чтение списка файлов по пути ---------------------------------- //
fileName '{utils.file.name.integer}' = DATA LOCAL VARISTRING[500] (INTEGER);
fileIsDirectory '{utils.file.is.directory.integer}' = DATA LOCAL BOOLEAN (INTEGER);
//path, charset, isClient
//todo: во всех использованиях с кастомной кодировкой вписать кодировку в строку подключения, чтобы можно было убрать  charset из параметров
listFiles '{utils.list.files}'  INTERNAL  'lsfusion.utils.utils.ListFilesActionProperty' (VARISTRING[500], VARISTRING[10], BOOLEAN); 
listFiles '{utils.list.files}' (VARISTRING[500] path)  { listFiles(path, 'UTF-8', NULL); }
listFilesClient '{utils.list.files.client}' (VARISTRING[500] path)  { listFiles(path, NULL, TRUE); }

// ------------------------------ Проверка существования файла по пути ------------------------------ //
fileExists = DATA LOCAL BOOLEAN ();
//path, isClient
fileExists '{utils.file.exists}'  INTERNAL  'lsfusion.utils.utils.FileExistsActionProperty' (VARISTRING[500], BOOLEAN); 
fileExists '{utils.file.exists}' (VARISTRING[500] path)  { fileExists(path, NULL); }
fileExistsClient '{utils.file.exists.client}' (VARISTRING[500] path)  { fileExists(path, TRUE); } 

// --------------------------------- STRING -> FILE/LINK/RICHTEXT -> STRING --------------------------------- //
resultFile = DATA LOCAL FILE ();
//value, charset, extension
stringToFile '{utils.string.to.file}'  INTERNAL  'lsfusion.utils.utils.StringToFileActionProperty' (TEXT, VARSTRING[10], VARSTRING[10]);
stringToFile(TEXT str) { stringToFile(str, 'UTF-8', ''); }

resultString = DATA LOCAL TEXT ();
//file, charset
fileToString '{utils.file.to.string}'  INTERNAL  'lsfusion.utils.utils.FileToStringActionProperty' (FILE, VARSTRING[10]);
fileToString(FILE file) { fileToString(file, 'UTF-8'); }
//cast link to string
linkToString '{utils.link.to.string}' INTERNAL 'lsfusion.utils.utils.LinkToStringActionProperty' (LINK);
//cast richtext to string
richTextToString '{utils.rich.text.to.string}' INTERNAL 'lsfusion.utils.utils.RichTextToStringActionProperty' (RICHTEXT);

//path, text, charset
appendToFile '{utils.append.to.file}' INTERNAL 'lsfusion.utils.utils.AppendToFileActionProperty' (VARSTRING[1000], TEXT, VARSTRING[10]);
appendToFile(VARSTRING[1000] path, TEXT text) { appendToFile(path, text, 'UTF-8'); };

setExtension = FORMULA FILE 'cast_to_custom_file(($1),$2)'; // for RAWFILE, PDFFILE...
changeExtension(FILE file, TEXT extension) = setExtension(RAWFILE(file), extension); // for FILE

// --------------------------------- Logging --------------------------------- //

printToLog '{utils.print.to.log}'  INTERNAL  'lsfusion.utils.utils.PrintToLogActionProperty' (TEXT);
logToFile (VARSTRING[1000] file, TEXT message) {
    appendToFile('logs/' + file + '.log', (CONCAT ' - ', currentDateTime(), message, '\n')); 
}
logToFile (VARSTRING[1000] file, FILE message) {
    fileToString(message, 'UTF-8');
    logToFile(file, resultString());
}

// ----------------------------------- Работа с файловой системой ----------------------------------- //
//path, isClient
mkdir '{utils.mkdir}'  INTERNAL  'lsfusion.utils.utils.MkdirActionProperty' (VARISTRING[500], BOOLEAN);
mkdir '{utils.mkdir}' (VARISTRING[500] path)  { mkdir(path, NULL); }
mkdirClient '{utils.mkdir.client}' (VARISTRING[500] path)  { mkdir(path, TRUE); }
//path, isClient
delete '{utils.delete}'  INTERNAL  'lsfusion.utils.utils.DeleteActionProperty' (VARISTRING[500], BOOLEAN);
delete '{utils.delete}' (VARISTRING[500] path)  { delete(path, NULL); }
deleteClient '{utils.delete.client}' (VARISTRING[500] path)  { delete(path, TRUE); }
//sourcePath, destinationPath, isClient
move '{utils.move}'  INTERNAL  'lsfusion.utils.utils.MoveActionProperty' (VARISTRING[500], VARISTRING[500], BOOLEAN);
move '{utils.move}' (VARISTRING[500] source, VARISTRING[500] destination)  { move(source, destination, NULL); }
moveClient '{utils.move.client}' (VARISTRING[500] source, VARISTRING[500] destination)  { move(source, destination, TRUE); }

fileSize = DATA LOCAL LONG ();
getFileSize '{utils.get.file.size}'  INTERNAL  'lsfusion.utils.utils.GetFileSizeActionProperty' (FILE);

//zip files
zipping '{utils.zipping.string}' = DATA LOCAL FILE (VARSTRING[1000]);
zipped '{utils.zipped}' = DATA LOCAL FILE ();
makeZipFile '{utils.make.zip.file}'  INTERNAL  'lsfusion.utils.utils.MakeZipFileActionProperty' ();

//unzip files
unzipping '{utils.unzipping}' = DATA LOCAL FILE ();
unzipped '{utils.unzipped.string}' = DATA LOCAL FILE (VARSTRING[100]);
makeUnzipFile '{utils.make.unzip.file}'  INTERNAL  'lsfusion.utils.utils.MakeUnzipFileActionProperty' ();

// ---------------------------------- Выполнение cmd  ---------------------------------- //
cmd '{utils.cmd}'  INTERNAL  'lsfusion.utils.utils.RunCommandActionProperty' (TEXT, BOOLEAN);
cmd '{utils.cmd}' (TEXT command)  {cmd(command, NULL); }
cmdClient '{utils.cmd.client}' (TEXT command)  {cmd(command, TRUE); }

pingError '{utils.ping.error}' = DATA LOCAL BOOLEAN ();
ping '{utils.ping}'  INTERNAL  'lsfusion.utils.utils.PingActionProperty' (TEXT, BOOLEAN);
ping '{utils.ping}' (TEXT host)  {ping(host, NULL); }
pingClient '{utils.ping.client}' (TEXT host)  {ping(host, TRUE); }

// ---------------------------------- Работа с файлами Excel  ---------------------------------- //
protectedExcel '{utils.protected.excel}' = DATA LOCAL EXCELFILE ();
protectExcel '{utils.protect.excel}'  INTERNAL  'lsfusion.utils.utils.ProtectExcelActionProperty' (EXCELFILE, VARSTRING[100]);

// --------------------------------------------- Работа со строками --------------------------------- //

lower (TEXT p1) = FORMULA 'lower($1)';

stringEqualsAll(STRING[3] string) = string == STRING[3]('Все');

isWordInCSV = FORMULA NULL INTEGER PG 'CASE WHEN CAST($1 AS text)=ANY(string_to_array($2,\',\')) THEN 1 ELSE NULL END', MS 'CASE WHEN CHARINDEX(\' \' + CAST($1 AS nvarchar(max)) + \' \',\' \' + REPLACE($2,\',\',\' \') + \' \') > 0 THEN 1 ELSE NULL END';

getWord (TEXT p1, TEXT p2, INTEGER p3) = FORMULA TEXT '(string_to_array($1,$2))[($3)]';
wordCount (TEXT p1, TEXT p2) = FORMULA INTEGER 'array_length((string_to_array($1,$2)),1)';

istartsWith = FORMULA NULL INTEGER PG 'CASE WHEN (($1) ILIKE (($2)||\'%\')) THEN 1 ELSE NULL END', MS 'CASE WHEN (($1) LIKE (($2)+\'%\')) THEN 1 ELSE NULL END';
startsWith = FORMULA NULL INTEGER PG 'CASE WHEN (($1) LIKE (($2)||\'%\')) THEN 1 ELSE NULL END', MS 'CASE WHEN (($1) LIKE (($2)+\'%\')) THEN 1 ELSE NULL END';
endsWith = FORMULA NULL INTEGER PG 'CASE WHEN (($1) LIKE (\'%\'||($2))) THEN 1 ELSE NULL END', MS 'CASE WHEN (($1) LIKE (\'%\'+($2))) THEN 1 ELSE NULL END';

// todo : для MS SQL пофиксить формулу, чтобы правильно работало, если в подстроке есть %
isISubstring = FORMULA NULL INTEGER PG 'CASE WHEN position(lower($2) in lower($1)) > 0 THEN 1 ELSE NULL END', MS 'CASE WHEN (($1) LIKE (\'%\'+($2)+\'%\')) THEN 1 ELSE NULL END'; 
isSubstring = FORMULA NULL INTEGER PG 'CASE WHEN position(($2) in ($1)) > 0 THEN 1 ELSE NULL END', MS 'CASE WHEN (($1) LIKE (\'%\'+($2)+\'%\')) THEN 1 ELSE NULL END';

replace (TEXT p1, TEXT p2, TEXT p3) = FORMULA TEXT 'replace($1,$2,$3)';

charLength (TEXT p1) = FORMULA INTEGER PG 'char_length($1)', MS 'len($1)';
length = FORMULA LONG 'length($1)';

strpos (TEXT string, TEXT substring) = FORMULA INTEGER PG 'strpos($1, $2)', MS 'charindex($2, $1)'; 

substr (TEXT p1, INTEGER p2, INTEGER p3) = FORMULA TEXT 'substring($1, $2, $3)';
substrFrom (TEXT p1, INTEGER p2) = FORMULA TEXT PG 'substring($1, $2)', MS 'substring($1, $2, len($1) - $2 + 1)'; 

ltrim (TEXT p1) = FORMULA TEXT 'ltrim($1)';
rtrim (TEXT p1) = FORMULA TEXT 'rtrim($1)';

ltrim (TEXT p1, TEXT p2) = FORMULA TEXT PG 'ltrim($1,$2)';
rtrim (TEXT p1, TEXT p2) = FORMULA TEXT PG 'rtrim($1,$2)';

trim (TEXT p1) = FORMULA TEXT PG 'trim($1)', MS 'ltrim(rtrim($1))';

left (TEXT p1, INTEGER p2) = FORMULA TEXT 'left($1,$2)';
right (TEXT p1, INTEGER p2) = FORMULA TEXT 'right($1,$2)';

lpad (TEXT p1, INTEGER p2, TEXT p3) = FORMULA TEXT PG 'lpad($1,$2,$3)';
rpad (TEXT p1, INTEGER p2, TEXT p3) = FORMULA TEXT PG 'rpad($1,$2,$3)';

repeat (TEXT p1, INTEGER p2) = FORMULA TEXT PG 'repeat($1,$2)', MS 'REPLICATE ($1,$2)';

onlyDigits (TEXT p1) = FORMULA NULL INTEGER PG 'CASE WHEN trim($1) ~ \'^[0-9]*$\' THEN 1 ELSE NULL END', MS 'CASE WHEN ltrim($1) NOT LIKE \'%[^0-9]%\' THEN 1 ELSE NULL END';

encode = FORMULA TEXT 'encode(($1),($2))';
decode = FORMULA RAWFILE 'decode(($1),($2))';
decodeText = FORMULA TEXT 'decode(($1),($2))';

encodedBase64 = DATA LOCAL TEXT();
encodeBase64  INTERNAL  'lsfusion.utils.utils.EncodeBase64ActionProperty' (TEXT);

decodedBase64 = DATA LOCAL TEXT();
decodeBase64  INTERNAL  'lsfusion.utils.utils.DecodeBase64ActionProperty' (TEXT);

// --------------------------------------------- Работа с числами --------------------------------- //

floor = FORMULA 'floor($1)';
floor = FORMULA NULL 'floor(($1)/notZero($2))*($2)';
ceil = FORMULA 'ceiling($1)';
ceil = FORMULA NULL 'ceiling(($1)/notZero($2))*($2)';
min = FORMULA '($1+$2-ABS($1-$2))/2';
max = FORMULA '($1+$2+ABS($1-$2))/2';
trunc = FORMULA 'trunc($1,$2)';

sqr = FORMULA '($1)*($1)';
sqrt = FORMULA 'sqrt($1)';
power = FORMULA 'power($1, $2)';
percent = FORMULA '(($1)*($2)/100)';
share = FORMULA '(($1)*100/($2))';
round = FORMULA PG 'round(CAST(($1) as numeric),$2)', MS 'round(CAST(($1) as numeric(38,19)),$2)';
abs = FORMULA 'abs($1)';
delta = FORMULA 'abs(($1)-($2))';

ln = FORMULA 'ln($1)';
exp = FORMULA 'exp($1)';

divideInteger(a,b) = INTEGER(a) / INTEGER(b);
divideIntegerNeg = FORMULA INTEGER 'CASE WHEN CAST(($1) AS integer)<0 THEN -CAST(((-CAST(($1) as integer)-1)/CAST(($2) as integer)) as integer) ELSE CAST(CAST(($1) as integer)/CAST(($2) as integer) as integer) END';
divideIntegerRnd = FORMULA INTEGER 'CAST(round(($1)/($2),0) as integer)';

mod = FORMULA 'mod($1,$2)';

iterate(INTEGER i, INTEGER from, INTEGER to) = RECURSION i==from AND from IS INTEGER AND to IS INTEGER STEP i==$i+1 AND i<=to CYCLES IMPOSSIBLE;
count(INTEGER i, INTEGER count) = iterate(i, 1, count);

toChar (object, format) = FORMULA TEXT 'to_char(($1),($2))'; 
toInteger (i) = FORMULA INTEGER PG 'convert_to_integer($1)', MS 'dbo.convert_to_integer($1)';
toNumeric (i) = FORMULA NUMERIC[38,19] PG 'convert_to_integer($1)', MS 'dbo.convert_to_integer($1)';

// ---------------------------------------Побитовые операции --------------------------------- //
bitwiseAnd = FORMULA INTEGER '$1 & $2';
bitwiseOr = FORMULA INTEGER '$1 | $2';
bitwiseNot = FORMULA INTEGER '~ $1';

// --------------------------------------------- Округления --------------------------------- //
roundM1 (number) = round(number, -1);
round0 (number) = round(number, 0);
round1 (number) = round(number, 1);
round2 (number) = round(number, 2);
round3 (number) = round(number, 3);
round4 (number) = round(number, 4);
round5 (number) = round(number, 5);
round6 (number) = round(number, 6);

// ---------------------------------- Работа с датами  ---------------------------------- //
resultMilliseconds '{utils.result.milliseconds}' = DATA LOCAL LONG();
toMilliseconds '{utils.to.milliseconds}' INTERNAL 'lsfusion.utils.utils.ToMillisecondsActionProperty' (DATETIME);

// -------------------------------------------- Свойства под файлы ---------------------------- //

file = DATA LOCAL FILE ();
wordFile = DATA LOCAL WORDFILE ();
imageFile = DATA LOCAL IMAGEFILE ();
pdfFile = DATA LOCAL PDFFILE ();
rawFile = DATA LOCAL RAWFILE ();
excelFile = DATA LOCAL EXCELFILE();
csvFile = DATA LOCAL CSVFILE();
htmlFile = DATA LOCAL HTMLFILE();
jsonFile = DATA LOCAL JSONFILE();
xmlFile = DATA LOCAL XMLFILE();
tableFile = DATA LOCAL TABLEFILE();

// --------------------------------------------- Yes/No --------------------------------- //
CLASS YesNo '{utils.yes.no}' {
    yes '{utils.yes.no.yes}',
    no '{utils.yes.no.no}'
}
TABLE yesNo(YesNo);

META defineHistorizableYesNo(property, defaultProperty, caption, object1, object1Identity, object2, object2Identity, group)
    @defineHistorizableCustomDefault(property, defaultProperty, caption, YesNo, staticCaption,
        object1, object1Identity, object2, object2Identity, 7, group);
END

META defineHistorizableYesNo(property, defaultProperty, caption, object1, object1Identity, object2, object2Identity, object3, object3Identity, group)
    @defineHistorizableCustomDefault(property, defaultProperty, caption, YesNo, staticCaption,
        object1, object1Identity, object2, object2Identity, object3, object3Identity, 7, group);
END

// --------------------------------------------- Диалоги --------------------------------- //

FORM dialogString '{utils.form.dialog.string}'
    OBJECTS s = VARSTRING[200] PANEL
    PROPERTIES(s) objValue = VALUE
;

DESIGN dialogString {
    NEW string BEFORE TOOLBARBOX {
        fill = 1;
        MOVE PROPERTY (objValue) {
            fill = 1;
            caption = '{utils.caption.enter.string}';
            font = 'bold 64';
            panelCaptionAbove = TRUE;
        }
    }
}

FORM dialogDate '{utils.form.dialog.date}'
    OBJECTS d = DATE PANEL
    PROPERTIES(d) objValue = VALUE
;

DESIGN dialogDate {
    NEW date BEFORE TOOLBARBOX {
        fill = 1;
        MOVE PROPERTY (objValue) {
            fill = 1;
            caption = '{utils.caption.enter.date}';
            font = 'bold 64';
            panelCaptionAbove = TRUE;
        }
    }

}

FORM dialogInteger '{utils.form.dialog.integer}'
    OBJECTS i = INTEGER PANEL
    PROPERTIES(i) objValue = VALUE
;

DESIGN dialogInteger {
    PROPERTY (objValue) {
        caption = '{utils.caption.enter.integer}';
        font = 'bold 64';
        panelCaptionAbove = TRUE;
    }
}

FORM dialogNumeric '{utils.form.dialog.numeric}'
    OBJECTS n = NUMERIC[20,7] PANEL
    PROPERTIES(n) objValue = VALUE
;

DESIGN dialogNumeric {
    PROPERTY (objValue) {
        caption = '{utils.caption.enter.numeric}';
        font = 'bold 64';
        panelCaptionAbove = TRUE;
    }
}

// --------------------------------------------- Печать --------------------------------- //

FORM printBlankPagePortrait;

FORM printBlankPageLandscape;

// --------------------------- Ссылки на файлы через FILELINK --------------------------- //

META defineFileLink (caption, fileType, property, class1)
    fileLink caption (class1 param1) = fileType (webServerUrl() + '/readFile?sid=' + [ REFLECTION CANONICALNAME property[class1]]() + '&p=' + param1) IF property(param1); 
END