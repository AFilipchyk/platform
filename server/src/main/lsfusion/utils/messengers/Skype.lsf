MODULE Skype;

REQUIRE Messenger;

//webHookUrl = host/webHookSkype?botid=name(account)

EXTEND CLASS Messenger { skype 'Skype' }
isSkype(Account a) = messenger(a) == Messenger.skype;

GROUP recipient;
GROUP from;
GROUP conversation;
country = DATA LOCAL STRING(INTEGER);
timezone = DATA LOCAL STRING(INTEGER);
locale = DATA LOCAL STRING(INTEGER);
type = DATA LOCAL STRING(INTEGER);
platform = DATA LOCAL STRING(INTEGER);
serviceUrl = DATA LOCAL STRING();
recipientName = DATA LOCAL STRING();
recipientId = DATA LOCAL STRING();
action = DATA LOCAL STRING();
fromName = DATA LOCAL STRING();
fromId = DATA LOCAL STRING();
id2 = DATA LOCAL STRING();
type1 = DATA LOCAL STRING();
locale1 = DATA LOCAL STRING();
channelId = DATA LOCAL STRING();
conversationId = DATA LOCAL STRING();
timestamp = DATA LOCAL STRING();

FORM webHookSkype
PROPERTIES() serviceUrl, action, id2 EXTID 'id', type1 EXTID 'type', locale1 EXTID 'locale', channelId, timestamp

OBJECTS entities = INTEGER
PROPERTIES(entities) country, timezone, locale, type, platform
PROPERTIES() IN recipient recipientName EXTID 'name', recipientId EXTID 'id'
PROPERTIES() IN from fromName EXTID 'name', fromId EXTID 'id'
PROPERTIES() IN conversation conversationId EXTID 'id';

clientSecretSkype 'Client Secret' = DATA STRING (Account);
baseUrlSkype = DATA STRING (Chat);
webHookSkype(FILE f) {
    fileToString(f,'UTF-8');
    printToLog(resultString());
    printToLog(CONCAT '', 'query ', query());

    IMPORT webHookSkype JSON FROM f;
    
    IF action() == 'add' THEN {
        LOCAL chat = Chat();
        chat() <- chatIdAccount(account(params('botid')), conversationId());
        IF NOT chat() THEN {
            NEW chat = Chat {
                chat() <- chat;
                account(chat) <- account(params('botid'));
                id(chat()) <- conversationId();
            }
        }
        username(chat()) <-fromName();
        baseUrlSkype(chat()) <- serviceUrl();
        chatType(chat()) <- ChatType.private;
    } ELSE IF action() == 'remove' THEN {
        DELETE Chat c WHERE id(c) == conversationId();
    }
 
    APPLY;
} @@noauth;


accessTokenSkype = DATA STRING(Account);
accessTokenDateSkype = DATA DATETIME(Account);
getAccessTokenSkype(Account a) {
    NEWSESSION {
        LOCAL result = FILE();
        EXTERNAL HTTP POST 'https://login.microsoftonline.com/botframework.com/oauth2/v2.0/token' 
            BODYURL 'grant_type=client_credentials&scope=$1&client_id=$2&client_secret=$3' PARAMS 'https://api.botframework.com/.default', token(a), clientSecretSkype(a) TO result;
            
        LOCAL access_token = STRING();
        IMPORT JSON FROM result() TO() access_token;
        accessTokenSkype(a) <- access_token();
        accessTokenDateSkype(a) <- currentDateTime();
        APPLY;
    }
}

sendMessageSkypeResult = DATA LOCAL STRING();
sendMessageSkype(Chat chat, STRING message) {

    IF NOT accessTokenSkype(account(chat)) OR secondsBetweenDates(currentDateTime(), accessTokenDateSkype(account(chat))) > 3600 THEN {
        getAccessTokenSkype(account(chat));
    }

    LOCAL result = FILE();
    
    LOCAL httpHeaders = STRING(STRING);
    httpHeaders('Authorization') <- 'Bearer ' + accessTokenSkype(account(chat));
    
    EXTERNAL HTTP POST baseUrlSkype(chat) + 'v3/conversations/' + id(chat) + '/activities/' HEADERS httpHeaders 
        PARAMS JSONFILE('\{"type": "message","text": "' + message + '"\}') TO result;
}

sendMessage(Chat chat, STRING message) + {
    IF isSkype(account(chat)) THEN {
        sendMessageSkype(chat, message);
        sendMessageResult() <- sendMessageSkypeResult();
    }
}

EXTEND FORM messengers
    PROPERTIES(a) clientSecretSkype PANEL SHOWIF isSkype(a)
;