MODULE Slack;

REQUIRE Messenger;

//webHookUrl = host/webHookSlack
//token starts from 'xoxp'

EXTEND CLASS Messenger { slack 'Slack' }
isSlack(Account a) = messenger(a) == Messenger.slack;

appId 'App Id' = DATA STRING (Account);
slackAccountAppId(STRING appId) = GROUP LAST Account a IF appId(a) == appId AND isSlack(a);

GROUP event;
GROUP channel : event;
api_app_id = DATA LOCAL STRING();
type = DATA LOCAL STRING();
challenge = DATA LOCAL STRING();
eventType = DATA LOCAL STRING();
user = DATA LOCAL STRING();
channel = DATA LOCAL STRING();
channel_type = DATA LOCAL STRING();
id = DATA LOCAL STRING();

FORM webHookSlack
PROPERTIES() api_app_id, type, challenge
PROPERTIES() IN event eventType EXTID 'type', user, channel, channel_type
PROPERTIES() IN channel id;

webHookSlack(FILE f) {
    fileToString(f,'UTF-8');
    printToLog(resultString());

    IMPORT webHookSlack JSON FROM f;
    
    IF type() == 'url_verification' THEN {
        exportJsonFile() <- JSONFILE ('\{"challenge":"' + challenge() + '"\}');
    } ELSE IF type() == 'event_callback' THEN {
    
        LOCAL channelId = STRING();        
        channelId() <- IF eventType() == 'message' THEN channel() ELSE IF type() == 'im_created' THEN id();      
        
        IF channelId() THEN {
            LOCAL chat = Chat();
            chat() <- chatIdAccount(slackAccountAppId(api_app_id()), channelId());
            IF NOT chat() THEN {
                NEW chat = Chat {
                    chat() <- chat;
                    account(chat) <- slackAccountAppId(api_app_id());
                    id(chat()) <- channelId();
                }
            }
            username(chat()) <-user();
            chatType(chat()) <- IF eventType() == 'message' AND channel_type() == 'channel' THEN ChatType.channel ELSE ChatType.private;
            APPLY;
        }
        
    }
} @@noauth;

sendMessageSlackResult = DATA LOCAL STRING();
sendMessageSlack(Chat chat, STRING message) {
    sendMessageSlackResult() <- NULL;
    
    LOCAL result = FILE();
    
    LOCAL httpHeaders = STRING(STRING);
    httpHeaders('Authorization') <- 'Bearer ' + token(account(chat));
    
    EXTERNAL HTTP POST 'https://slack.com/api/chat.postMessage' HEADERS httpHeaders
            PARAMS JSONFILE('\{"channel": "' + id(chat) + '","text": "' + message + '"\}')TO result;
            
    LOCAL ok = BOOLEAN();
    LOCAL error = STRING();
    IMPORT JSON FROM result() TO() ok, error;
    IF NOT ok() THEN {
        sendMessageSlackResult() <- error();
    }        
}

sendMessage(Chat chat, STRING message) + {
    IF isSlack(account(chat)) THEN {
        sendMessageSlack(chat, message);
        sendMessageResult() <- sendMessageSlackResult();
    }
}

EXTEND FORM messengers
    PROPERTIES(a) appId PANEL SHOWIF isSlack(a)
;