MODULE Messenger;

REQUIRE Utils;

CLASS Messenger {
    telegram 'Telegram'
}

CLASS ChatType {
    private 'Private',
    group 'Group',
    channel 'Channel'
}

CLASS Account '{messenger.account}';
TABLE account (Account);

name '{messenger.account.name}' = DATA STRING (Account);
messenger '{messenger.messenger}' = DATA Messenger (Account);
captionMessenger '{messenger.messenger}' (Account a) = staticCaption(messenger(a));
login '{messenger.login}' = DATA STRING (Account);
token '{messenger.token}' = DATA STRING (Account) NONULL;

isTelegram(Account a) = messenger(a) == Messenger.telegram;

CLASS Chat '{messenger.chat}';
TABLE chat (Chat);

account = DATA Account (Chat);
chatType = DATA ChatType (Chat);
captionChatType '{messenger.chat.type}' (Chat c) = staticCaption(chatType(c)) CHARWIDTH 10;
id '{messenger.chat.id}' = DATA LONG (Chat);
chatIdAccount = GROUP AGGR Chat c BY account(c), id(c);
username '{messenger.chat.username}' = DATA STRING (Chat);
title '{messenger.chat.title}' = DATA STRING (Chat);
newMessage '{messenger.chat.new.message}' = DATA LOCAL TEXT (Chat);
exists = DATA LOCAL BOOLEAN (Chat);

//------------------- telegram -------------------//
GROUP message;
GROUP chat : message;
GROUP channelPost EXTID 'channel_post';
GROUP chatChannel EXTID 'chat' : channelPost;

usernameChat = DATA LOCAL STRING(INTEGER);
idChat = DATA LOCAL LONG(INTEGER);
titleChat = DATA LOCAL STRING(INTEGER);
typeChat = DATA LOCAL STRING(INTEGER);
updateId = DATA LOCAL STRING(INTEGER);
idChannel = DATA LOCAL LONG(INTEGER);
titleChannel = DATA LOCAL STRING(INTEGER);
typeChannel = DATA LOCAL STRING(INTEGER);
usernameChannel = DATA LOCAL STRING(INTEGER);

ok = DATA LOCAL STRING();
description = DATA LOCAL STRING();

FORM getUpdatesTelegram
PROPERTIES() ok, description

OBJECTS result = INTEGER
PROPERTIES(result) updateId EXTID 'update_id'

PROPERTIES(result) IN chat usernameChat EXTID 'username', idChat EXTID 'id', titleChat EXTID 'title', typeChat EXTID 'type'
PROPERTIES(result) IN chatChannel idChannel EXTID 'id', titleChannel EXTID 'title', typeChannel EXTID 'type', usernameChannel EXTID 'username';

synchronizeChatsTelegram(Account a) {
    LOCAL result = FILE();
    READ 'https://api.telegram.org/bot' + token(a) + '/getUpdates' TO result;
    IMPORT getUpdatesTelegram JSON FROM result();
    IF ok() THEN {
        FOR updateId(INTEGER result) DO {
        
            LOCAL chatId = LONG();
            chatId() <- CASE WHEN typeChat(result) == 'private' OR typeChat(result) == 'group' THEN idChat(result)
                             WHEN typeChannel(result) == 'channel' THEN idChannel(result);
        
            LOCAL chat = Chat();
            chat() <- chatIdAccount(a, chatId());
            IF NOT chat() THEN {
                NEW chat = Chat {
                    chat() <- chat;
                    account(chat) <- a;
                    id(chat()) <- chatId();
                }
            }
            exists(chat()) <- TRUE;
            IF typeChat(result) == 'private' THEN {
                username(chat()) <-usernameChat(result);
                chatType(chat()) <- ChatType.private;
            } ELSE IF typeChat(result) == 'group' THEN {
                title(chat()) <-titleChat(result);
                chatType(chat()) <- ChatType.group;
            } ELSE IF typeChannel(result) == 'channel' THEN {
                username(chat()) <-usernameChannel(result);
                title(chat()) <-titleChannel(result);
                chatType(chat()) <- ChatType.channel;
            }
        }
        DELETE Chat c WHERE c IS Chat AND account(c) == a AND NOT exists(c);
    } ELSE {
        MESSAGE 'Synchronization failed: ' + description();
    }
    APPLY;
}

sendMessageTelegramResult = DATA LOCAL STRING();
sendMessageTelegram(Chat chat, STRING message) {
    LOCAL result = FILE();
    urlEncode(message);
    EXTERNAL HTTP GET 'https://api.telegram.org/bot' + token(account(chat)) + '/sendMessage?chat_id=' + id(chat) + '&text=' + urlEncoded() TO result;
    
    LOCAL ok = BOOLEAN();
    LOCAL description = STRING();
    IMPORT JSON FROM result() TO() ok, description;
    IF NOT ok() THEN {
        sendMessageTelegramResult() <- description();
    }
}
//------------------- telegram -------------------//

synchronizeChats '{messenger.account.synchronize}' (Account a) {
    IF isTelegram(a) THEN {
        synchronizeChatsTelegram(a);
    }
}

sendMessageResult = DATA LOCAL STRING();
sendMessage '{messenger.chat.send.message}' (Chat chat, STRING message) {
    IF isTelegram(account(chat)) THEN {
        sendMessageTelegram(chat, message);
        sendMessageResult() <- sendMessageTelegramResult();
    }
}

sendMessage '{messenger.chat.send.message}' (Chat chat) {
    sendMessage(chat, newMessage(chat));
    IF sendMessageResult() THEN {
        MESSAGE sendMessageResult();
    }
    newMessage(chat) <- NULL;
}

FORM messengers '{messenger.messengers}'
    OBJECTS a = Account
    PROPERTIES(a) name, captionMessenger, login, token, synchronizeChats PANEL, NEW, DELETE
    
    OBJECTS c = Chat
    PROPERTIES(c) READONLY id, captionChatType, username, title
    PROPERTIES(c) PANEL newMessage, sendMessage
    
    FILTERS account(c) == a;

DESIGN messengers {                   
    MOVE PROPERTY(newMessage(c)) {
        panelCaptionAbove = TRUE;
    }
    MOVE PROPERTY(sendMessage(c));                              
    MOVE TOOLBARBOX; 
}

NAVIGATOR {
    notification {
        NEW messengers;
    }
}