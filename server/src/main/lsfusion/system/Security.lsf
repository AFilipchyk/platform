MODULE Security;

REQUIRE System, Reflection, Email, Utils;

CLASS UserRole '{security.user.role}';
TABLE userRole (UserRole);

name '{security.name.user.role}' = DATA VARISTRING[100](UserRole) CHARWIDTH 20;

sid '{security.sid.user.role}' = DATA VARSTRING[30] (UserRole) CHARWIDTH 10;
userRoleSID = GROUP AGGR UserRole userRole WHERE userRole IS UserRole BY sid (userRole);

// Main role
mainRole = DATA UserRole (User);
mainRole (CustomUser user) = mainRole[User](user) IF user IS CustomUser;
nameMainRole '{security.name.main.role.user}' (User user) = name(mainRole(user));
sidMainRole (CustomUser user) = sid(mainRole(user));

currentUserMainRoleName () = nameMainRole(currentUser());

// Default main role
defaultMainRole = DATA UserRole();
nameDefaultMainRole '{security.name.default.main.role}' = name(defaultMainRole());
mainRole[User](CustomUser u) <- defaultMainRole() WHEN SET(u IS CustomUser);

// Roles
TABLE customUserRole (CustomUser, UserRole);
in 'Вкл.' = DATA BOOLEAN (CustomUser, UserRole);

TABLE userUserRole (User, UserRole);
has 'Вкл.' (User user, UserRole role) = mainRole(user) = role OR in(user, role) MATERIALIZED;

rolesCount(User user) = GROUP SUM 1 IF has(user, UserRole role) MATERIALIZED;

CONSTRAINT DROPPED(UserRole r IS UserRole) AND PREV(has(User user, r))
    MESSAGE '{security.this.role.is.assigned.to.user}';

// Forms
FORM userRolesDialog '{security.user.roles}'
    OBJECTS ur=UserRole
    PROPERTIES(ur) READONLY name, sid
    
    LIST UserRole OBJECT ur
;

EXTEND FORM customUser
    PROPERTIES(u) nameMainRole BEFORE email(u)

    OBJECTS ur=UserRole
    PROPERTIES(ur) READONLY name, sid
    PROPERTIES(u,ur) in
;

DESIGN customUser {
    details {
        NEW roles {
            caption = '{security.user.roles}';
            MOVE PROPERTY(nameMainRole(u));
            MOVE BOX(ur);
        }
    }
}

EXTEND FORM customUsers
    PROPERTIES(u) READONLY nameMainRole BEFORE name(u)
;

// Copy user role
copy ABSTRACT LIST (UserRole, UserRole);

// Transaction timeout
transactTimeout '{security.transact.timeout}' = DATA INTEGER (UserRole);
transactTimeout '{security.transact.timeout}' (User user) = transactTimeout(mainRole(user));
currentUserTransactTimeout () = transactTimeout(currentUser());

copy (UserRole from, UserRole to) +{ transactTimeout(to) <- transactTimeout(from); }

// ------------------- User permissions ------------------ //

// Change password
forbidChangePassword '{security.forbid.change.password}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
dataForbidChangePassword '{security.forbid.change.password}' = DATA BOOLEAN (CustomUser) CHARWIDTH 10;
forbidChangePassword(CustomUser u) += OVERRIDE dataForbidChangePassword(u), forbidChangePassword(mainRole(u));

// Edit profile
forbidEditProfile '{security.forbid.edit.profile}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
dataForbidEditProfile '{security.forbid.edit.profile}' = DATA BOOLEAN (CustomUser) CHARWIDTH 10;
forbidEditProfile(CustomUser u) += OVERRIDE dataForbidEditProfile(u), forbidEditProfile(mainRole(u));

// Setup policies
forbidViewAllSetupPolicies '{security.view.security.policy.properties}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
forbidViewAllSetupPolicies (User user) = forbidViewAllSetupPolicies(mainRole(user));

forbidChangeAllSetupPolicies '{security.change.security.policy.properties}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
forbidChangeAllSetupPolicies (User user) = forbidChangeAllSetupPolicies(mainRole(user));

copy (UserRole from, UserRole to) +{
    forbidChangePassword(to) <- forbidChangePassword(from);

    forbidEditProfile(to) <- forbidEditProfile(from);

    forbidViewAllSetupPolicies(to) <- forbidViewAllSetupPolicies(from);
    forbidChangeAllSetupPolicies(to) <- forbidChangeAllSetupPolicies(from);
}

// ------- Properties ------- //

TABLE userRoleActionOrProperty (UserRole, ActionOrProperty);
TABLE userRolePropertyGroup (UserRole, PropertyGroup);

// ----- View ----- //

// --- Global --- //

// - Permit - //
dataPermitView = DATA BOOLEAN (PropertyGroup);
levelPermitViewParent (PropertyGroup propertyGroup) =
    GROUP MIN level(propertyGroup, PropertyGroup parent) IF dataPermitView(parent) MATERIALIZED;
permitView '{security.permit.view}' (PropertyGroup propertyGroup) = OVERRIDE dataPermitView(propertyGroup), TRUE IF levelPermitViewParent(propertyGroup) CHARWIDTH 10;

dataPermitView = DATA BOOLEAN (ActionOrProperty) CHARWIDTH 10;
permitView '{security.permit.view}' (ActionOrProperty property) = OVERRIDE dataPermitView(property), TRUE IF levelPermitViewParent(parent(property)) MATERIALIZED CHARWIDTH 10;

// - Forbid - //
dataForbidView = DATA BOOLEAN (PropertyGroup) CHARWIDTH 10;
levelForbidViewParent (PropertyGroup propertyGroup) =
    GROUP MIN level(propertyGroup, PropertyGroup parent) IF dataForbidView(parent) MATERIALIZED;
forbidView '{security.forbid.view}' (PropertyGroup propertyGroup) = OVERRIDE dataForbidView(propertyGroup), TRUE IF levelForbidViewParent(propertyGroup) CHARWIDTH 10;

dataForbidView = DATA BOOLEAN (ActionOrProperty) CHARWIDTH 10;
forbidView '{security.forbid.view}' (ActionOrProperty property) = OVERRIDE dataForbidView (property), TRUE IF levelForbidViewParent(parent(property)) MATERIALIZED CHARWIDTH 10;

// --- Roles --- // 

// - Permit - //
permitViewAllProperty '{security.permit.view.all.properties}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
permitViewAllProperty (User user) = permitViewAllProperty(mainRole(user));

dataPermitView = DATA BOOLEAN (UserRole, PropertyGroup);
levelPermitViewParent (UserRole userRole, PropertyGroup propertyGroup) =
    GROUP MIN level(propertyGroup, PropertyGroup parent) IF dataPermitView(userRole, parent) MATERIALIZED;
permitView '{security.permit.view}' (UserRole userRole, PropertyGroup propertyGroup) = 
    OVERRIDE dataPermitView(userRole, propertyGroup), TRUE IF levelPermitViewParent(userRole, propertyGroup) MATERIALIZED CHARWIDTH 10;

dataPermitView = DATA BOOLEAN (UserRole, ActionOrProperty);
permitView '{security.permit.view}' (UserRole userRole, ActionOrProperty property) = 
    OVERRIDE dataPermitView (userRole, property), TRUE IF levelPermitViewParent(userRole, parent(property)) MATERIALIZED CHARWIDTH 10;

// - Forbid - //
forbidViewAllProperty '{security.forbid.view.all.properties}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
forbidViewAllProperty (User user) = forbidViewAllProperty(mainRole(user));

dataForbidView = DATA BOOLEAN (UserRole, PropertyGroup);
levelForbidViewParent (UserRole userRole, PropertyGroup propertyGroup) =
    GROUP MIN level(propertyGroup, PropertyGroup parent) IF dataForbidView(userRole, parent) MATERIALIZED;
forbidView '{security.forbid.view}' (UserRole userRole, PropertyGroup propertyGroup) = 
    OVERRIDE dataForbidView(userRole, propertyGroup), TRUE IF levelForbidViewParent(userRole, propertyGroup) MATERIALIZED CHARWIDTH 10;

dataForbidView = DATA BOOLEAN (UserRole, ActionOrProperty);
forbidView '{security.forbid.view}' (UserRole userRole, ActionOrProperty property) = 
    OVERRIDE dataForbidView(userRole, property), TRUE IF levelForbidViewParent(userRole, parent(property)) MATERIALIZED CHARWIDTH 10;

// --- Global + Roles --- //

permitRolesView (User user, ActionOrProperty property) = GROUP SUM 1 IF has(user, UserRole userRole) AND permitView(userRole, property);
forbidRolesView (User user, ActionOrProperty property) = GROUP SUM 1 IF has(user, UserRole userRole) AND forbidView(userRole, property);

forbidView (User user, ActionOrProperty property) = 
    ((forbidView(property) AND NOT permitView(property) AND user IS User) OR rolesCount(user) = forbidRolesView(user, property)) AND NOT permitRolesView(user, property);

// ----- Change ----- //

// --- Global --- //

// - Permit - //
dataPermitChange = DATA BOOLEAN (PropertyGroup);
levelPermitChangeParent (PropertyGroup propertyGroup) =
    GROUP MIN level(propertyGroup, PropertyGroup parent) IF dataPermitChange(parent) MATERIALIZED;
permitChange '{security.permit.change}' (PropertyGroup propertyGroup) = OVERRIDE dataPermitChange(propertyGroup), TRUE IF levelPermitChangeParent(propertyGroup) CHARWIDTH 10;

dataPermitChange = DATA BOOLEAN (ActionOrProperty) CHARWIDTH 10;
permitChange '{security.permit.change}' (ActionOrProperty property) = OVERRIDE dataPermitChange(property), TRUE IF levelPermitChangeParent(parent(property)) MATERIALIZED CHARWIDTH 10;

// - Forbid - //
dataForbidChange = DATA BOOLEAN (PropertyGroup) CHARWIDTH 10;
levelForbidChangeParent (PropertyGroup propertyGroup) =
    GROUP MIN level(propertyGroup, PropertyGroup parent) IF dataForbidChange(parent) MATERIALIZED;
forbidChange '{security.forbid.change}' (PropertyGroup propertyGroup) = OVERRIDE dataForbidChange(propertyGroup), TRUE IF levelForbidChangeParent(propertyGroup) CHARWIDTH 10;

dataForbidChange = DATA BOOLEAN (ActionOrProperty) CHARWIDTH 10;
forbidChange '{security.forbid.change}' (ActionOrProperty property) = OVERRIDE dataForbidChange(property), TRUE IF levelForbidChangeParent(parent(property)) MATERIALIZED CHARWIDTH 10;

// --- Roles --- // 

// - Permit - //
permitChangeAllProperty '{security.permit.change.all.properties}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
permitChangeAllProperty (User user) = permitChangeAllProperty(mainRole(user));

dataPermitChange = DATA BOOLEAN (UserRole, PropertyGroup);
levelPermitChangeParent (UserRole userRole, PropertyGroup propertyGroup) =
    GROUP MIN level(propertyGroup, PropertyGroup parent) IF dataPermitChange(userRole, parent) MATERIALIZED;
permitChange '{security.permit.change}' (UserRole userRole, PropertyGroup propertyGroup) = 
    OVERRIDE dataPermitChange(userRole, propertyGroup), TRUE IF levelPermitChangeParent(userRole, propertyGroup) MATERIALIZED CHARWIDTH 10;

dataPermitChange = DATA BOOLEAN (UserRole, ActionOrProperty);
permitChange '{security.permit.change}' (UserRole userRole, ActionOrProperty property) = 
    OVERRIDE dataPermitChange (userRole, property), TRUE IF levelPermitChangeParent(userRole, parent(property)) MATERIALIZED CHARWIDTH 10;

// - Forbid - //
forbidChangeAllProperty '{security.forbid.change.all.properties}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
forbidChangeAllProperty (User user) = forbidChangeAllProperty(mainRole(user));
    
dataForbidChange = DATA BOOLEAN (UserRole, PropertyGroup);
levelForbidChangeParent (UserRole userRole, PropertyGroup propertyGroup) =
    GROUP MIN level(propertyGroup, PropertyGroup parent) IF dataForbidChange(userRole, parent) MATERIALIZED;
forbidChange '{security.forbid.change}' (UserRole userRole, PropertyGroup propertyGroup) = 
    OVERRIDE dataForbidChange(userRole, propertyGroup), TRUE IF levelForbidChangeParent(userRole, propertyGroup) MATERIALIZED;

dataForbidChange = DATA BOOLEAN (UserRole, ActionOrProperty);
forbidChange '{security.forbid.change}' (UserRole userRole, ActionOrProperty property) = 
    OVERRIDE dataForbidChange(userRole, property), TRUE IF levelForbidChangeParent(userRole, parent(property)) MATERIALIZED CHARWIDTH 10;

// --- Global + Roles --- //

permitRolesChange (User user, ActionOrProperty property) = GROUP SUM 1 IF has(user, UserRole userRole) AND permitChange(userRole, property);
forbidRolesChange (User user, ActionOrProperty property) = GROUP SUM 1 IF has(user, UserRole userRole) AND forbidChange(userRole, property);

forbidChange (User user, ActionOrProperty property) = 
    (((forbidChange(property) AND NOT permitChange(property)) AND user IS User) OR rolesCount(user) = forbidRolesChange (user, property)) AND NOT permitRolesChange(user, property);

copy (UserRole from, UserRole to) +{
    permitViewAllProperty(to) <- permitViewAllProperty(from);
    dataPermitView(to, PropertyGroup propertyGroup) <- dataPermitView(from, propertyGroup);
    dataPermitView(to, ActionOrProperty property) <- dataPermitView(from, property);

    forbidViewAllProperty(to) <- forbidViewAllProperty(from);
    dataForbidView(to, PropertyGroup propertyGroup) <- dataForbidView(from, propertyGroup);
    dataForbidView(to, ActionOrProperty property) <- dataForbidView(from, property);

    permitChangeAllProperty(to) <- permitChangeAllProperty(from);
    dataPermitChange(to, PropertyGroup propertyGroup) <- dataPermitChange(from, propertyGroup);
    dataPermitChange(to, ActionOrProperty property) <- dataPermitChange(from, property);
    
    forbidChangeAllProperty(to) <- forbidChangeAllProperty(from);
    dataForbidChange(to, PropertyGroup propertyGroup) <- dataForbidChange(from, propertyGroup);
    dataForbidChange(to, ActionOrProperty property) <- dataForbidChange(from, property);
}

// ------ Property policy caches ----------- //

cachePropertyPolicy '{security.cache.property.policy}' = DATA BOOLEAN (User) CHARWIDTH 10;
updatePropertyPolicyCaches  INTERNAL  'lsfusion.server.logics.security.UpdatePropertyPolicyCachesProperty' (User);
WHEN [GROUP SUM 1 IF (CHANGED(forbidView(User user, ActionOrProperty actionOrProperty) AND cachePropertyPolicy(user)) OR 
                      CHANGED(forbidChange(user, actionOrProperty) AND cachePropertyPolicy(user))) BY user](User user) DO
    updatePropertyPolicyCaches(user);
onStarted() + { 
    FOR cachePropertyPolicy(User user) DO 
        updatePropertyPolicyCaches(user);
}

// ------- Navigator ------- //

TABLE userRoleNavigatorElement (UserRole, NavigatorElement);

// - Permit - //
permit '{security.permit}' = DATA BOOLEAN (NavigatorElement) CHARWIDTH 10;

permitAllForms '{security.permit.all.forms}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
permitAllForms (User user) = permitAllForms(mainRole(user));

permit '{security.permit}' = DATA BOOLEAN (UserRole, NavigatorElement) CHARWIDTH 10;
hasChildrenPermit (UserRole role, NavigatorElement parent) = GROUP SUM 1 IF level(NavigatorElement child, parent) AND permit(role, child);  
backgroundPermit (UserRole role, NavigatorElement element)= RGB(203,203,203) IF hasChildrenPermit(role, element) AND NOT permit(role, element);

permit (User user, NavigatorElement navigatorElement) = 
    GROUP MAX permit(UserRole userRole, navigatorElement) IF has(user, userRole);

// - Forbid - //
forbid '{security.forbid}' = DATA BOOLEAN (NavigatorElement) CHARWIDTH 10;

forbidAllForms '{security.forbid.all.forms}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
forbidAllForms (User user) = forbidAllForms(mainRole(user));

forbid '{security.forbid}' = DATA BOOLEAN (UserRole, NavigatorElement) CHARWIDTH 10;
hasChildrenForbid (UserRole role, NavigatorElement parent) = GROUP SUM 1 IF level(NavigatorElement child, parent) AND forbid(role, child);  
backgroundForbid (UserRole role, NavigatorElement element) = RGB(203,203,203) IF hasChildrenForbid(role, element) AND NOT forbid(role, element);

forbid (User user, NavigatorElement navigatorElement) = 
    rolesCount(user) AND NOT (GROUP SUM 1 IF NOT forbid(UserRole userRole, navigatorElement) AND has(user, userRole));

copy (UserRole from, UserRole to) +{
    permitAllForms(to) <- permitAllForms(from);
    permit(to, NavigatorElement navigatorElement) <- permit(from, navigatorElement);

    forbidAllForms(to) <- forbidAllForms(from);
    forbid(to, NavigatorElement navigatorElement) <- forbid(from, navigatorElement);
}

// ----------------- Form policy ---------------------- //

// Duplicate forms
forbidDuplicateForms '{security.forbid.duplicate.forms}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
dataForbidDuplicateForms '{security.forbid.duplicate.forms}' = DATA BOOLEAN (CustomUser) CHARWIDTH 10;
forbidDuplicateForms (CustomUser u) = OVERRIDE dataForbidDuplicateForms(u), forbidDuplicateForms(mainRole(u));

// Default forms
CLASS DefaultForms '{security.default.forms}' {
    none 'None', //'{security.default.forms.none}',
    default 'Default' //'{security.default.forms.default}'
}
TABLE defaultForms (DefaultForms);
name '{security.default.forms.name}' (DefaultForms o) = staticCaption(o) IF o IS DefaultForms CHARWIDTH 15;

FORM dialogDefaultForms '{security.default.forms}'
    OBJECTS o = DefaultForms
    PROPERTIES(o) READONLY name
    
    LIST DefaultForms OBJECT o
;

defaultForms = DATA DefaultForms (UserRole);
nameDefaultForms '{security.default.forms}' (UserRole userRole) = name(defaultForms(userRole));
defaultForms (User user) = defaultForms(mainRole(user));

defaultNumber '{security.default.forms.number}' = DATA INTEGER (UserRole, NavigatorElement);
defaultNumber (User user, NavigatorElement navigatorElement) = 
    GROUP MIN defaultNumber(UserRole userRole, navigatorElement) IF has(user, userRole) AND permit(userRole, navigatorElement);

maximizeForm  INTERNAL 'lsfusion.server.logics.security.MaximizeFormActionProperty' ();

copy (UserRole from, UserRole to) +{
    defaultForms(to) <- defaultForms(from);
    defaultNumber(to, NavigatorElement navigatorElement) <- defaultNumber(from, navigatorElement);
}

// ------------------ Custom policies ---------------- //
CLASS Policy '{security.policy}';
TABLE policy (Policy);

id = DATA VARSTRING[100](Policy);
policy = GROUP AGGR Policy policy BY id(policy);
name '{security.name.policy}' = DATA VARISTRING[100](Policy);
description '{security.description.policy}' = DATA VARSTRING[100] (Policy);

TABLE userRolePolicy (UserRole, Policy);
order '{security.order.policy}' = DATA INTEGER (UserRole, Policy);
order (User user, Policy policy) = order (mainRole(user), policy);

copy (UserRole from, UserRole to) +{
    order(to, Policy userPolicy) <- order(from, userPolicy);
}

// ------------------ Security policy form ----------------------- //

FORM securityPolicy '{security.form.policy}'

    // ----- Global ------ //
    
    // Navigator elements
    TREE navigatorElementsDefault tdf = NavigatorElement PARENT parent
    PROPERTIES(tdf) READONLY caption, canonicalName, number
    PROPERTIES(tdf)          permit, forbid
    ORDER number(tdf)

    OBJECTS df = NavigatorElement
    PROPERTIES(df) READONLY caption, canonicalName
    PROPERTIES(df)          permit, forbid

    // Properties
    TREE propertiesDefault tdprs = PropertyGroup PARENT parent, dprs = ActionOrProperty
    PROPERTIES (tdprs) READONLY caption, SID, number 
    PROPERTIES (dprs)  READONLY caption, canonicalName, number
    PROPERTIES (tdprs)                             permitView, forbidView
    PROPERTIES (tdprs) BACKGROUND RGB(232,232,255) permitChange, forbidChange
    PROPERTIES (dprs)                              permitView, forbidView
    PROPERTIES (dprs)  BACKGROUND RGB(232,232,255) permitChange, forbidChange
    ORDER number(tdprs), number(dprs)
    FILTERS parent(dprs) = tdprs

    OBJECTS dpr = ActionOrProperty
    PROPERTIES(dpr) READONLY caption, canonicalName
    PROPERTIES(dpr)                             permitView, forbidView 
    PROPERTIES(dpr) BACKGROUND RGB(232,232,255) permitChange, forbidChange

    // ----- Roles ------ //
    
    PROPERTIES() nameDefaultMainRole

    OBJECTS ur = UserRole
    PROPERTIES(ur) name, sid
    PROPERTIES(ur) NEW, DELETE
    
    PROPERTIES(ur)                             permitAllForms, forbidAllForms
    PROPERTIES(ur) BACKGROUND RGB(232,232,255) permitViewAllProperty, forbidViewAllProperty
    PROPERTIES(ur)                             permitChangeAllProperty, forbidChangeAllProperty
    PROPERTIES(ur) BACKGROUND RGB(232,232,255) forbidViewAllSetupPolicies, forbidChangeAllSetupPolicies

    PROPERTIES(ur)                             forbidChangePassword, forbidEditProfile

    PROPERTIES(ur)                             nameDefaultForms, forbidDuplicateForms
    PROPERTIES(ur)                             transactTimeout
    // Navigator elements
    TREE navigatorElements te = NavigatorElement PARENT parent
    PROPERTIES(te) READONLY caption, canonicalName, number
    PROPERTIES(ur, te)      permit BACKGROUND backgroundPermit(ur, te), forbid BACKGROUND backgroundForbid(ur, te)
    PROPERTIES(ur, te)      defaultNumber
    ORDER number(te)

    OBJECTS f = NavigatorElement
    PROPERTIES(f) READONLY caption, canonicalName
    PROPERTIES(ur, f)      permit, forbid, defaultNumber

    // Properties
    TREE properties tprs = PropertyGroup PARENT parent, prs = ActionOrProperty 
    PROPERTIES(tprs) READONLY caption, SID, number
    PROPERTIES(prs)  READONLY caption, canonicalName, number
    PROPERTIES(ur, tprs)                             permitView, forbidView
    PROPERTIES(ur, tprs) BACKGROUND RGB(232,232,255) permitChange, forbidChange
    PROPERTIES(ur, prs)                              permitView, forbidView
    PROPERTIES(ur, prs)  BACKGROUND RGB(232,232,255) permitChange, forbidChange
    ORDER number(tprs), number(prs)
    FILTERS parent(prs) = tprs
    
    OBJECTS pr = ActionOrProperty
    PROPERTIES(pr) READONLY caption, canonicalName
    PROPERTIES(ur, pr)                             permitView, forbidView
    PROPERTIES(ur, pr) BACKGROUND RGB(232,232,255) permitChange, forbidChange

    // Custom policy
    OBJECTS p = Policy
    PROPERTIES(p) READONLY name, description
    PROPERTIES(ur, p)      order

    // Users
    OBJECTS u = CustomUser
    PROPERTIES(u) READONLY name, login, nameMainRole
    PROPERTIES(u)          dataForbidDuplicateForms, dataForbidChangePassword, dataForbidEditProfile, cachePropertyPolicy
    FILTERS has(u, ur)
;

DESIGN securityPolicy {
    OBJECTS {
        NEW container {
            fill = 1;
            type = TABBED;
    
            NEW defaultPolicy {
                type = TABBED;
                caption = '{security.form.default.policy}';
    
                NEW defaultElements {
                    type = TABBED;
                    caption = '{security.form.navigator}';
                    MOVE BOX(TREE navigatorElementsDefault) { caption = '{security.form.tree}'; }
                    MOVE BOX(df) { caption = '{security.form.table}'; }
                }
    
                NEW defaultPropertyContainer {
                    type = TABBED;
                    caption = '{security.form.properties}';
                    MOVE BOX(TREE propertiesDefault) { caption = '{security.form.tree}'; }
                    MOVE BOX(dpr) { caption = '{security.form.table}'; }
                }
            }
    
            NEW roles {
                caption = '{security.user.roles}';
                type = SPLITV;
                NEW roleHeader {
                    fill = 1;
                    MOVE PROPERTY(nameDefaultMainRole());
                    MOVE BOX(ur) {
                        GRID(ur) { headerHeight = 60; }
                    }
                }
    
                NEW rolePolicyContainer {
                    fill = 1;
                    type = TABBED;
    
                    NEW elementsContainer {
                        type = TABBED;
                        caption = '{security.form.navigator}';
                        MOVE BOX(TREE navigatorElements) { caption = '{security.form.tree}'; }
                        MOVE BOX(f) { caption = '{security.form.table}'; }
                    }
    
                    NEW propertiesContainer {
                        type = TABBED;
                        caption = '{security.form.properties}';
                        MOVE BOX(TREE properties) { caption = '{security.form.tree}'; }
                        MOVE BOX(pr) { caption = '{security.form.table}'; }
                    }
                    
                    MOVE BOX(p);
                    MOVE BOX(u) {
                        caption = '{authentication.users}';
                        GRID(u) { headerHeight = 60; }
                    }
                    
                    NEW roleApplicationScroll {
                        caption = '{security.form.application.settings}';
                        type = SCROLL;
                        NEW roleApplicationPane {
                            MOVE PANEL(ur);
                            NEW roleApplicationSettings {
                                type = COLUMNS;
                                columns = 3;
                            }
                        }
                    }
                }
            }
        }
    }
}

META addRoleApplicationSetting (name, caption, type)
    name caption = DATA type (UserRole) COMPLEX;
    
    EXTEND FORM securityPolicy PROPERTIES (ur) PANEL name;
    DESIGN securityPolicy { roleApplicationSettings { MOVE PROPERTY(name(ur)); }}
END

copy '{security.copy.role}' (UserRole from)  { 
    NEW to = UserRole {
        copy(from, to);
        SEEK securityPolicy.ur = to;
    }
}

EXTEND FORM securityPolicy
    PROPERTIES(ur) copy TOOLBAR
;

NAVIGATOR {
    security {
        NEW securityPolicy;
    }
}

// ----------------- Property and action policy forms ----------------- //

// - Property - //
FORM propertyPolicy '{security.form.policy}'
    OBJECTS p = Property PANEL
    PROPERTIES(p) READONLY caption, canonicalName
    PROPERTIES(p)                             permitView, forbidView
    PROPERTIES(p) BACKGROUND RGB(232,232,255) permitChange, forbidChange
    PROPERTIES(p)                             userLoggable, isSetNotNull
    
    OBJECTS ur = UserRole
    PROPERTIES(ur) READONLY name, sid
    PROPERTIES(ur, p)                             permitView, forbidView
    PROPERTIES(ur, p) BACKGROUND RGB(232,232,255) permitChange, forbidChange
;

DESIGN propertyPolicy {
    OBJECTS {
        NEW property {
            type = CONTAINERH;
            alignment = STRETCH;
            caption = '{security.form.property}';
            MOVE PROPERTY(caption(p));
            MOVE PROPERTY(canonicalName(p));
        }
        NEW permission {
            type = CONTAINERH;
            alignment = STRETCH;
            caption = '{security.form.access}';
            MOVE PROPERTY(permitView(p));
            MOVE PROPERTY(forbidView(p));
            MOVE PROPERTY(permitChange(p));
            MOVE PROPERTY(forbidChange(p));
            MOVE PROPERTY(userLoggable(p));
            MOVE PROPERTY(isSetNotNull(p));
        }
        MOVE BOX(ur);
    }
}

checkCurrentDateDependsAction  INTERNAL  'lsfusion.server.logics.security.CheckCurrentDateDependsActionProperty' (Property);
WHEN FORMS propertyPolicy, properties SETCHANGED(userLoggable(Property p)) DO checkCurrentDateDependsAction(p);

// - Action - //
FORM actionPolicy '{security.form.policy}'
    OBJECTS p = Action PANEL
    PROPERTIES(p) READONLY caption, canonicalName
    PROPERTIES(p)                             permitView, forbidView
    PROPERTIES(p) BACKGROUND RGB(232,232,255) permitChange, forbidChange
    
    OBJECTS ur = UserRole
    PROPERTIES(ur) READONLY name, sid
    PROPERTIES(ur, p)                             permitView, forbidView
    PROPERTIES(ur, p) BACKGROUND RGB(232,232,255) permitChange, forbidChange
;

DESIGN actionPolicy {
    OBJECTS {
        NEW property {
            type = CONTAINERH;
            alignment = STRETCH;
            caption = '{security.form.action}';
            MOVE PROPERTY(caption(p));
            MOVE PROPERTY(canonicalName(p));
        }
        NEW permission {
            type = CONTAINERH;
            alignment = STRETCH;
            caption = '{security.form.access}';
            MOVE PROPERTY(permitView(p));
            MOVE PROPERTY(forbidView(p));
            MOVE PROPERTY(permitChange(p));
            MOVE PROPERTY(forbidChange(p));
        }
        MOVE BOX(ur);
    }
}

initHeapSize '{security.client.init.heap.size}' = DATA VARSTRING[100]();
maxHeapSize '{security.client.max.heap.size}' = DATA VARSTRING[100]();
minHeapFreeRatio '{security.client.min.heap.free.ratio}' = DATA VARSTRING[100]();
maxHeapFreeRatio '{security.client.max.heap.free.ratio}' = DATA VARSTRING[100]();
vmargs '{security.client.vm.args}' = DATA VARSTRING[100]();

generateJnlp INTERNAL 'lsfusion.server.logics.property.actions.GenerateJNLPActionProperty' (VARSTRING[10], VARSTRING[1000]) NULL @@noauth;

// ------------------ Memory limits ---------------- //
CLASS MemoryLimit '{security.memory.limit}';
TABLE memoryLimit (MemoryLimit);

name '{security.name.memory.limit}' = DATA VARSTRING[100] (MemoryLimit);
maxHeapSize '{security.max.heap.size.memory.limit}' = DATA VARSTRING[10] (MemoryLimit);
vmargs '{security.vm.args.memory.limit}' = DATA VARSTRING[1000] (MemoryLimit);

generateJnlpUrls () {
    FOR MemoryLimit ml IS MemoryLimit DO {
        exportText() <- CONCAT '', exportText(), '<a href="\{contextPath\}/exec?action=Security.generateJnlp%5BVARSTRING%5B10%5D,VARSTRING%5B1000%5D%5D&p=', IF maxHeapSize(ml) THEN maxHeapSize(ml) ELSE '';
        IF vmargs(ml) THEN {
            urlEncode(vmargs(ml), 'UTF-8');
            exportText() <- CONCAT '', exportText(), '&p=', urlEncoded();
        }
        exportText() <- CONCAT '', exportText(), '">{security.run.desktop.client} ', name(ml), '</a><br/>';   
    }
}