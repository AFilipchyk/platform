MODULE Authentication;

REQUIRE System;

// ------------------------- Рабочие места ---------------------- //

CLASS Computer 'Рабочее место';
TABLE computer (Computer);

hostname 'Имя хоста' = DATA VARISTRING[100] (Computer) IN id;

// Сканер
scannerComPort 'Com-port сканнера' = DATA INTEGER (Computer);
scannerSingleRead 'Одно событие на весь штрих-код' = DATA BOOLEAN (Computer);

//Считыватель дисконтных карт
useDiscountCardReader 'Включить считыватель дисконтных карт' = DATA BOOLEAN (Computer);

//Весы
scalesComPort 'Com-port весов' = DATA INTEGER (Computer);

FORM computer 'Рабочее место'
    OBJECTS c = Computer PANEL
    PROPERTIES(c) hostname, scannerComPort, scannerSingleRead, useDiscountCardReader, scalesComPort
    
    EDIT Computer OBJECT c
;

FORM computers 'Рабочие места'
    OBJECTS c = Computer
    PROPERTIES(c) READONLY hostname, scannerComPort, scannerSingleRead, useDiscountCardReader, scalesComPort
    PROPERTIES(c) NEWSESSION NEW, EDIT, DELETE GRID
;

FORM computersDialog 'Рабочие места'
    OBJECTS c = Computer
    
    PROPERTIES(c) READONLY hostname, scannerComPort, scannerSingleRead, useDiscountCardReader, scalesComPort
    PROPERTIES(c) NEWSESSION NEW, EDIT, DELETE 
    
    LIST Computer OBJECT c     
;
DESIGN computersDialog { BOX { size = (1024, 768); }}

// -------------------------- Пользователи ---------------------------- //

CLASS ABSTRACT Contact '{authentication.contact}';
TABLE contact (Contact);

firstName '{authentication.first.name.contact}' = DATA VARISTRING[100] (Contact) CHARWIDTH 10 IN base;
lastName '{authentication.last.name.contact}' = DATA VARISTRING[100] (Contact) CHARWIDTH 15 IN base;
name '{authentication.name.contact}' (Contact contact) = CONCAT ' ', firstName(contact), lastName(contact) IN id CHARWIDTH 20;

phone 'Телефон' = DATA VARSTRING[100] (Contact) CHARWIDTH 10;
postAddress 'Почтовый адрес' = DATA VARSTRING[150] (Contact) CHARWIDTH 20;
birthday 'День рождения' = DATA DATE (Contact);

email '{authentication.email.contact}'= DATA VARSTRING[400] (Contact) CHARWIDTH 20 REGEXP '[-!#-\'*+/-9=?A-Z^-~]+(\\.[-!#-\'*+/-9=?A-Z^-~]+)*@[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)+' '<html>Неверный формат e-mail</html>';
contact (email) = GROUP MAX Contact contact BY email(contact);


CLASS ABSTRACT User '{authentication.user}';
TABLE user (User);

CLASS SystemUser '{authentication.system.user}' : User;

CLASS CustomUser '{authentication.custom.user}' : User, Contact;
TABLE customUser (CustomUser);
TABLE loginSID (STRING[30], STRING[30]);

currentUser = NATIVE User ();
currentUserName 'Имя Тек. Польз.' () = name[Contact](currentUser());

name '{authentication.name.user}' (User user) = IF user IS SystemUser 
                        THEN VARSTRING[100]('{authentication.system.user}')
                        ELSE name[Contact](user) CHARWIDTH 10;
name '{authentication.name.user}' (CustomUser user) = name[User](user AS CustomUser) CHARWIDTH 10;

currentComputer = NATIVE Computer ();
hostnameCurrentComputer 'Текущий компьютер' () = hostname(currentComputer());

isLocked 'Заблокирован' = DATA BOOLEAN (CustomUser);
login '{authentication.login}' = DATA STRING[30] (CustomUser);
currentUserLogin 'Логин Тек. Польз.' () = login[CustomUser](currentUser());
allowExcessAllocatedBytes 'Разрешено превышение allocated bytes' = DATA BOOLEAN (CustomUser);
currentUserAllowExcessAllocatedBytes () = allowExcessAllocatedBytes(currentUser()) OR login[CustomUser](currentUser()) == 'admin';
customUser 'Обычный пользователь' (login) = GROUP AGGR CustomUser customUser WHERE customUser IS CustomUser BY login(customUser);
upcaseLogin 'Логин в верхнем регистре' (CustomUser customUser) = upper(login(customUser));
customUserUpcase 'Обычный пользователь' (login) = GROUP MAX CustomUser customUser BY upcaseLogin(customUser);
sha256Password 'Пароль' = DATA VARSTRING[100] (CustomUser) ECHO;
calculatedHash 'Значение хэш' = DATA LOCAL VARSTRING[100] ();
forbidChangePassword 'Запретить пользователю изменять пароль' = ABSTRACT BOOLEAN (CustomUser);
forbidEditProfile 'Запретить пользователю редактировать профиль' = ABSTRACT BOOLEAN (CustomUser);

lastActivity 'Последняя активность' = DATA DATETIME (CustomUser);
lastComputer 'Рабочее место' = DATA Computer (CustomUser);
hostnameLastComputer 'Рабочее место' (CustomUser user) = hostname(lastComputer(user));
ignorePrintTypeCustom 'Открывать печатные формы в интерактивном режиме' = DATA BOOLEAN (User);
ignorePrintType() += ignorePrintTypeCustom(currentUser());

calculateBase64Hash 'Вычислить Base64 хэш'  INTERNAL  'lsfusion.server.logics.authentication.CalculateBase64HashActionProperty' (STRING[10], STRING[30]);
logOut (restart, reconnect)  INTERNAL  'lsfusion.server.logics.authentication.LogOutActionProperty' (BOOLEAN, BOOLEAN);
shutdown 'Отключить'  { 
    logOut(NULL, NULL);
}
reconnect 'Переподключить'  { 
    logOut(TRUE, TRUE);
}
restart 'Выйти'  { 
    logOut(TRUE, NULL);
}

relogin '{authentication.relogin}'  INTERNAL  'lsfusion.server.logics.authentication.ReloginUserActionProperty' (CustomUser);

generateLoginPassword 'Сгенерировать логин и пароль'  INTERNAL  'lsfusion.server.logics.property.actions.GenerateLoginPasswordActionProperty' (CustomUser);

minHashLength 'Минимальное совпадение хэша пароля (символов)' = DATA INTEGER ();
useLDAP 'Использовать LDAP аутентификацию' = DATA BOOLEAN ();
serverLDAP 'Сервер' = DATA VARSTRING[100] ();
portLDAP 'Порт' = DATA INTEGER ();
baseDNLDAP 'Base DN' = DATA VARSTRING[100] ();
userDNSuffixLDAP 'Суффикс для User DN' = DATA VARSTRING[100] ();

//показ busyDialog конкретному пользователю. В будущем станет не нужным.
useBusyDialogCustom 'Показывать BusyDialog' = DATA BOOLEAN (CustomUser);
useBusyDialog () = useBusyDialogCustom[CustomUser](currentUser());

useRequestTimeout 'Использовать таймаут в запросах' = DATA BOOLEAN(CustomUser); 
useRequestTimeout() = useRequestTimeout[CustomUser](currentUser());

userLanguage 'Язык локали пользователя' = DATA VARSTRING[3] (CustomUser);
userCountry 'Страна локали пользователя' = DATA VARSTRING[3] (CustomUser);
userTimeZone 'Часовой пояс пользователя' = DATA VARSTRING[30] (CustomUser);
userTwoDigitYearStart 'Первый год двумя цифрами пользователя' = DATA INTEGER (CustomUser);

clientLanguage 'Язык локали клиента' = DATA VARSTRING[3] (CustomUser);
clientCountry 'Страна локали клиента' = DATA VARSTRING[3] (CustomUser);
useClientLocale 'Использовать локаль клиента' = DATA BOOLEAN (CustomUser);

defaultUserLanguage 'Язык локали по умолчанию' = DATA VARSTRING[3] ();
defaultUserCountry 'Страна локали по умолчанию' = DATA VARSTRING[3] ();
defaultUserTimeZone 'Часовой пояс по умолчанию' = DATA VARSTRING[30] ();
defaultUserTwoDigitYearStart 'Первый год двумя цифрами по умолчанию' = DATA INTEGER ();

language 'Язык локали' (CustomUser user) = OVERRIDE (clientLanguage(user) IF useClientLocale(user)), userLanguage(user), defaultUserLanguage();
country 'Страна локали' (CustomUser user) = IF useClientLocale(user) AND clientLanguage(user) 
                                                                THEN clientCountry(user)
                                                                ELSE IF userLanguage(user) THEN userCountry(user) ELSE defaultUserCountry();

timeZone 'Часовой пояс' (CustomUser user) = OVERRIDE userTimeZone(user), defaultUserTimeZone();
twoDigitYearStart 'Первый год двумя цифрами' (CustomUser user) = OVERRIDE userTwoDigitYearStart(user), defaultUserTwoDigitYearStart();

fontSize 'Размер шрифта, %' = DATA INTEGER (CustomUser); 

deliveredNotificationAction  ABSTRACT LIST ( CustomUser);

locked = DATA User (Object);
lockResult = DATA LOCAL NESTED BOOLEAN ();

lock(Object object)  { 
	NEWSESSION {    
	    lockResult() <- NULL;
	    APPLY SERIALIZABLE {
	        IF NOT object THEN
	            RETURN;
	        IF locked(object) THEN {
	            cancel();
	        } ELSE {
	            locked(object) <- currentUser();
	            lockResult() <- TRUE;
	        }
	    }
	}
}

unlock(Object object)  { 
	NEWSESSION { 
	    APPLY locked(object) <- NULL;
	}
}

changeSHA256Password(CustomUser customUser)  { 
    INPUT st=STRING[30] DO {
        calculateBase64Hash('SHA-256', st);
        sha256Password(customUser) <- calculatedHash();
    }
}

FORM customUser '{authentication.custom.user}'
    OBJECTS u=CustomUser PANEL
    PROPERTIES(u) firstName, lastName, login,
                  sha256Password ON CHANGE changeSHA256Password(u), email,
                  isLocked, lastActivity, hostnameLastComputer, ignorePrintTypeCustom, useBusyDialogCustom, useRequestTimeout,
                  allowExcessAllocatedBytes, language, country, timeZone, twoDigitYearStart, 
                  clientLanguage, clientCountry, useClientLocale, fontSize

    EDIT CustomUser OBJECT u
;

DESIGN customUser {
    NEW container BEFORE TOOLBARBOX {
        type = SPLITH;
        fill = 1;
        MOVE BOX(u) {
            flex = 0.3;
        };
        GROUP(,u) {
            type = COLUMNS;
            columns = 1;
        }
    }
}

FORM customUsers '{authentication.users}'
    OBJECTS u=CustomUser
    PROPERTIES(u) READONLY name[Contact], login, email
    PROPERTIES(u) NEWSESSION useBusyDialogCustom, useRequestTimeout, allowExcessAllocatedBytes,
                  language, userLanguage, clientLanguage, country, userCountry, clientCountry, useClientLocale, 
                  timeZone, userTimeZone, twoDigitYearStart, userTwoDigitYearStart, fontSize, isLocked READONLY,
                  lastActivity, hostnameLastComputer, NEW, EDIT, DELETE 

    PROPERTIES() useLDAP, serverLDAP, portLDAP, baseDNLDAP, userDNSuffixLDAP, minHashLength, defaultUserLanguage, defaultUserCountry
;

FORM customUsersDialog '{authentication.users}'
    OBJECTS u=CustomUser
    PROPERTIES(u) READONLY name[Contact], login, email

    LIST CustomUser OBJECT u
;

DESIGN customUsersDialog { BOX { size = (1024, 768); } }

FORM editProfile '{navigator.account.edit.profile}' IMAGE '/images/editReport.png'
    OBJECTS u = CustomUser PANEL
    PROPERTIES(u) login READONLY
    PROPERTIES(u) READONLYIF forbidEditProfile(u) firstName, lastName, email, fontSize

    FILTERS u = currentUser()
;

DESIGN editProfile {
    GROUP(,u) {
        type = CONTAINERV;
        PROPERTY(login(u)) { fontSize = 36; }
        PROPERTY(firstName(u)) { fontSize = 36; }
        PROPERTY(lastName(u)) { fontSize = 36; }
        PROPERTY(email(u)) { fontSize = 36; }
        PROPERTY(fontSize(u)) { fontSize = 36; }
    }
}

// ---------------- Relogin ------------------- //

userChanged() = DATA LOCAL BOOLEAN();

// change by login and password
FORM reloginLoginUser '{authentication.relogin}'
    OBJECTS data = (login = STRING[30], password = STRING[30])  PANEL
    PROPERTIES valueLogin = VALUE(login), valuePassword = VALUE(password)
;

DESIGN reloginLoginUser {
    BOX(data) {
        caption = '';
        GROUP(, data) {
            type = CONTAINERV;
            PROPERTY(valueLogin){
                caption = '{authentication.login}';
                fontSize = 36;
            }
            PROPERTY(valuePassword){
                caption = '{authentication.password}';
                echoSymbols = TRUE;
                fontSize = 36;
            }
        }
    }
    REMOVE TOOLBARLEFT;
    REMOVE PROPERTY(formRefresh());
}

reloginLoginUser()  { 
    DIALOG reloginLoginUser OBJECTS login INPUT, password INPUT DO {
        LOCAL user = CustomUser();
        user() <- customUser(login);
        IF user() THEN {
            IF isLocked(user()) THEN {
                MESSAGE '{authentication.relogin.user.locked}';
            } ELSE {
                calculateBase64Hash('SHA-256', password);
                IF sha256Password(user()) == calculatedHash() THEN {
                    relogin(user());
                    IF userChanged() THEN {
                        MESSAGE '{authentication.relogin.user.changed}';
                    }
                } ELSE {
                    MESSAGE '{authentication.relogin.user.incorrect.password}';
                }
            }
        } ELSE {
            MESSAGE '{authentication.relogin.user.not.found}';
        }
    }
    APPLY;
}

// Change by password
FORM reloginPasswordUser '{authentication.relogin}'
    OBJECTS password = STRING[30] PANEL
    PROPERTIES valuePassword = VALUE(password)
;

DESIGN reloginPasswordUser {
    BOX(password) {
        caption = '';
        PROPERTY(valuePassword){
            caption = '{authentication.password}';
            fontSize = 36;
        }
    }
    REMOVE TOOLBARLEFT;
    REMOVE PROPERTY(formRefresh());
}

reloginPassword(CustomUser customUser)  { 
    DIALOG reloginPasswordUser OBJECTS password INPUT DO {
        IF isLocked(customUser) THEN {
            MESSAGE '{authentication.relogin.user.locked}';
        }  ELSE {
                calculateBase64Hash('SHA-256', password);
                IF sha256Password(customUser)==calculatedHash() THEN {
                    relogin(customUser);
                    IF userChanged() THEN {
                        MESSAGE '{authentication.relogin.user.changed}';
                    }
                } ELSE {
                    MESSAGE '{authentication.relogin.user.incorrect.password}';
                }
        }
    }
}

// ---------------- Change password ------------------- //

FORM changePasswordUser '{authentication.change.password}'
    OBJECTS u=CustomUser PANEL
    PROPERTIES(u) READONLY login

    OBJECTS passwords = (old = STRING[30], new1 = STRING[30], new2 = STRING[30]) PANEL
    PROPERTIES valueOld = VALUE(old), valueNew1 = VALUE(new1), valueNew2 = VALUE(new2)

    FILTERS u = currentUser()
;

DESIGN changePasswordUser {
    OBJECTS {
        NEW changePassword {
            MOVE PROPERTY(login(u)) {
                fontSize = 36;
            }
            MOVE PROPERTY(valueOld){
                caption = '{authentication.change.password.old}';
                echoSymbols = TRUE;
                fontSize = 36;
            }
            MOVE PROPERTY(valueNew1){
                caption = '{authentication.change.password.new}';
                echoSymbols = TRUE;
                fontSize = 36;
            }
            MOVE PROPERTY(valueNew2){
                caption = '{authentication.change.password.repeat}';
                echoSymbols = TRUE;
                fontSize = 36;
            }
        }
    }
    REMOVE TOOLBARLEFT;
    REMOVE PROPERTY(formRefresh());
}

changePassword(CustomUser customUser)  { 
    DIALOG changePasswordUser OBJECTS old INPUT, new1 INPUT,new2 INPUT DO {
        calculateBase64Hash('SHA-256', old);
        IF calculatedHash() != sha256Password(customUser) THEN {
            MESSAGE '{authentication.change.password.incorrect.old}';
            BREAK;
        }

        IF new1 != new2 THEN {
            MESSAGE '{authentication.change.password.do.not.match}';
            BREAK;
        }
        calculateBase64Hash('SHA-256', new1);
        sha256Password(customUser) <- calculatedHash();
        APPLY;
        IF NOT canceled() THEN
            MESSAGE '{authentication.change.password.complete}';
    }
}

changePassword () { 
    IF forbidChangePassword(currentUser()) THEN {
        MESSAGE '{authentication.change.password.forbidden}';
    } ELSE {
        changePassword(currentUser());
    }
}

NAVIGATOR {
    system {
        NEW FOLDER security '{navigator.security}' AFTER scheduler {
            NEW customUsers;
            NEW computers;
        }
    }
    NEW FOLDER account '{navigator.account}' WINDOW toolbar IMAGE '/images/lock.png' {
        NEW ACTION reloginLoginUserAction '{navigator.account.relogin}' = reloginLoginUser[] IMAGE '/images/relogin.png';
        NEW editProfile;
        NEW ACTION changePasswordAction '{navigator.account.change.password}' = changePassword[] IMAGE '/images/change_password.png';
        NEW ACTION logOutAction '{navigator.account.logout}' = restart[] IMAGE '/images/logout.png';
    }
}