MODULE Email;

REQUIRE System, Reflection;

GROUP email '{email.group.email}' : public;   //rootGroup

CLASS EncryptedConnectionTypeStatus 'Тип шифрованного подключения' {
    SSL 'SSL',
    TLS 'TLS'
}
TABLE encryptedConnectionTypeStatus(EncryptedConnectionTypeStatus);

FORM encryptedConnectionTypeStatuses
    OBJECTS s = EncryptedConnectionTypeStatus
    PROPERTIES(s) READONLY staticCaption
    LIST EncryptedConnectionTypeStatus OBJECT s
;

CLASS ReceiveAccountType 'Тип учётной записи' {
    POP3 'POP3',
    IMAP 'IMAP'
}
TABLE receiveAccountType(ReceiveAccountType);

FORM receiveAccountTypes
    OBJECTS r = ReceiveAccountType
    PROPERTIES(r) READONLY staticCaption
    LIST ReceiveAccountType OBJECT r
;

CLASS Notification '{email.notification}';
TABLE notification (Notification);
TABLE notificationProperty (Notification, Property);

isEvent '{email.is.event.notification}' = DATA BOOLEAN (Notification);
emailFrom '{email.email.from.notification}' = DATA VARSTRING[50] (Notification);
emailTo '{email.email.to.notification}' = DATA VARSTRING[50] (Notification);
emailToCC '{email.email.to.cc.notification}' = DATA VARSTRING[50] (Notification);
emailToBC '{email.email.to.bc.notification}' = DATA VARSTRING[50] (Notification);
text '{email.text.notification}' = DATA TEXT (Notification);
subject '{email.subject.notification}'= DATA VARSTRING[100] (Notification);
in '{email.in.notification.property}' = DATA BOOLEAN (Notification, Property);

CLASS Account '{email.account}';
TABLE account (Account);

name '{email.name.account}' = DATA VARSTRING[50](Account);
password '{email.password.account}' = DATA VARSTRING[50](Account) ECHO;
fromAddress '{email.from.address.account}' = DATA VARSTRING[50] (Account);
accountFromAddress = GROUP AGGR Account account WHERE account IS Account BY fromAddress (account); 

isDefaultNotification '{email.is.default.account}' = DATA BOOLEAN (Account);
defaultNotificationAccount '{email.default.notification.account}' = GROUP MAX Account account IF isDefaultNotification(account);
fromAddressDefaultNotificationAccount '{email.from.address.default.notification.account}' () = fromAddress(defaultNotificationAccount());

isDefaultInbox '{email.is.default.inbox.account}' = DATA BOOLEAN (Account);
defaultInboxAccount '{email.default.inbox.account}' = GROUP MAX Account account IF isDefaultInbox(account);
inboxAccount (VARSTRING[100] fromAddress) = OVERRIDE accountFromAddress(fromAddress), defaultInboxAccount();

smtpHost '{email.smtp.host.account}' = DATA VARSTRING[50](Account);
smtpPort '{email.smtp.port.account}' = DATA VARSTRING[10](Account);
receiveHost '{email.receive.host.account}' = DATA VARSTRING[50](Account);
receivePort '{email.receive.port.account}' = DATA INTEGER(Account);
receiveAccountType '{email.receive.account.type.account}' = DATA ReceiveAccountType(Account);
nameReceiveAccountType '{email.receive.account.type.account}' (Account account) = staticCaption(receiveAccountType(account));
blindCarbonCopy '{email.blind.carbon.copy.account}'= DATA VARSTRING[50](Account);
deleteMessages '{email.delete.messages.account}' = DATA BOOLEAN(Account);
lastDays '{email.last.days.account}' = DATA INTEGER(Account) CHARWIDTH 10 FIXED;
maxMessages '{email.max.messages.account}' = DATA INTEGER(Account) CHARWIDTH 10 FIXED;
disable '{email.disable.account}' = DATA BOOLEAN(Account);
enable '{email.enable.account}' (Account account) = NOT disable(account) AND account IS Account;
unpack '{email.unpack.account}' = DATA BOOLEAN (Account);
ignoreExceptions '{email.ignore.exceptions.account}' = DATA BOOLEAN (Account);

encryptedConnectionType '{email.encrypted.connection.type.account}' = DATA EncryptedConnectionTypeStatus(Account);
nameEncryptedConnectionType '{email.encrypted.connection.type.account}' (Account account) = staticCaption(encryptedConnectionType(account)) CHARWIDTH 3;

CLASS Email '{email.email}';
TABLE email(Email);

id = DATA VARSTRING[100] (Email);  
emailId = GROUP AGGR Email email WHERE email IS Email BY id (email); 
account = DATA Account (Email);

uid = DATA LONG (Email);  
emailAccountUID = GROUP AGGR Email email BY account(email), uid (email); 

subject '{email.subject.email}' = DATA VARSTRING[100] (Email);
fromAddress '{email.from.address.email}' = DATA VARSTRING[100] (Email);
toAddress '{email.to.address.email}' = DATA VARSTRING[100] (Email);
dateTimeSent '{email.date.time.sent.email}' = DATA DATETIME (Email);
dateSent '{email.date.sent.email}' = DATE(dateTimeSent(Email e));
dateTimeReceived '{email.date.time.received.email}' = DATA DATETIME (Email);
message '{email.message.email}' = DATA RICHTEXT (Email);
emlFile '{email.eml.file.email}' = DATA FILE (Email);
openEMLFile '{email.open.eml.file.email}' (Email email)  { open(emlFile(email)); }

receiveEmailAction '{email.receive.email.action}'  INTERNAL  'lsfusion.server.mail.ReceiveEmailActionProperty' ();
receiveEmailAction '{email.receive.email.action.account}'  INTERNAL  'lsfusion.server.mail.ReceiveEmailAccountActionProperty' (Account);

emailSent '{email.email.sent}' = DATA LOCAL BOOLEAN ();

FORM account '{email.form.account}'
    OBJECTS a = Account PANEL
    PROPERTIES(a) name, password, fromAddress, smtpHost, smtpPort, nameReceiveAccountType, receiveHost,
                  receivePort, nameEncryptedConnectionType, blindCarbonCopy, deleteMessages, lastDays, 
                  maxMessages, isDefaultNotification, isDefaultInbox, disable, unpack, ignoreExceptions
    EDIT Account OBJECT a
;

FORM accounts '{email.form.accounts}'
   
    OBJECTS a = Account
    PROPERTIES(a) READONLY name, password, fromAddress, smtpHost, smtpPort, nameReceiveAccountType, receiveHost,
                  receivePort, nameEncryptedConnectionType, blindCarbonCopy, deleteMessages, lastDays,
                  maxMessages, isDefaultNotification, disable, unpack, ignoreExceptions
    PROPERTIES(a) NEWSESSION NEW, EDIT, DELETE 

    LIST Account OBJECT a
;

CLASS AttachmentEmail '{email.attachment.email}';
TABLE attachmentEmail(AttachmentEmail);

id = DATA VARSTRING[100] (AttachmentEmail);  
imported '{email.imported.attachment.email}' = DATA BOOLEAN (AttachmentEmail);  
markImported '{email.mark.imported.attachment.email}' (AttachmentEmail ae)  { 
    IF NOT imported(ae) THEN imported(ae) <- TRUE;
}
importError '{email.import.error.attachment.email}' = DATA BOOLEAN (AttachmentEmail);  
showError (AttachmentEmail attachmentEmail) = NOT imported (attachmentEmail) OR importError(attachmentEmail)
                                                            AND attachmentEmail IS AttachmentEmail;
notImported (AttachmentEmail attachmentEmail) = NOT imported (attachmentEmail) AND NOT importError(attachmentEmail)
                                                            AND attachmentEmail IS AttachmentEmail;
email = DATA Email (AttachmentEmail) NONULL DELETE;
attachmentEmail (id, email) = GROUP AGGR AttachmentEmail attachment WHERE attachment IS AttachmentEmail BY id (attachment), id(email(attachment)); 
name '{email.name.attachment.email}' = DATA VARSTRING[255] (AttachmentEmail);
file '{email.file.attachment.email}' = DATA FILE (AttachmentEmail);
openFile '{email.open.file.attachment.email}' (AttachmentEmail attachmentEmail)  { open(file(attachmentEmail)); }
saveFile '{email.save.file.attachment.email}' (AttachmentEmail attachmentEmail)  { WRITE CLIENT DIALOG file(attachmentEmail) TO name(attachmentEmail);}
lastError '{email.last.error.attachment.email}' = DATA TEXT (AttachmentEmail);
importErrors '{email.import.errors}' (Email e) = GROUP MAX importError(AttachmentEmail ae) BY email(ae);

receiveEML '{email.receive.eml}'  INTERNAL  'lsfusion.server.mail.ReceiveEMLActionProperty' (Account);
importEML '{email.import.eml}'  INTERNAL  'lsfusion.server.mail.ImportEMLActionProperty' (Account, LONG, FILE);

emlFile '{email.eml.file}' = DATA LOCAL FILE (LONG);

receiveMail '{email.receive.mail}' (Account account) {
    receiveEML(account);
    FOR(emlFile(LONG uid)) DO {
        importEML(account, uid, emlFile(uid));
    }
}

FORM remindUserPass '{email.form.remind.user.pass}'

    OBJECTS u=CustomUser PANEL
    PROPERTIES(u) READONLY login, name[Contact]
;

emailUserPass '{email.form.remind.user.pass}' (Contact user)  { 
    LOCAL bodyFile = FILE (); 
    PRINT remindUserPass OBJECTS u = user HTML TO bodyFile;
    EMAIL SUBJECT '{email.form.remind.user.pass}' IF user IS CustomUser TO email(user) BODY bodyFile(); 
}                         

FORM mail '{email.form.mail}' 

    OBJECTS a=Account

    PROPERTIES(a) name, smtpHost, smtpPort, nameReceiveAccountType, receiveHost, receivePort, nameEncryptedConnectionType,
                  fromAddress, password, blindCarbonCopy, NEW, DELETE               
    PROPERTIES(a) PANEL  deleteMessages, lastDays, maxMessages, isDefaultNotification, isDefaultInbox, disable, unpack, ignoreExceptions 
    
    OBJECTS e=Email LAST
  
    PROPERTIES(e) READONLY subject, fromAddress, toAddress, dateTimeSent, 
                   dateTimeReceived, importErrors, openEMLFile CHANGEABLE GRID, message PANEL
    PROPERTIES(e) NEWSESSION DELETE GRID
    PROPERTIES(a)  receiveEmailAction DRAW e 
    FILTERS account(e)==a
                    
    OBJECTS ae=AttachmentEmail
    
    PROPERTIES(ae) READONLY imported, importError, name, lastError PANEL
    PROPERTIES(ae) GRID openFile, saveFile, markImported
    FILTERS email(ae)==e
    
    OBJECTS n=Notification
    OBJECTS p=Property
        
    PROPERTIES(n, p) in
    PROPERTIES(n) subject, text PANEL, emailFrom, emailTo, emailToCC, emailToBC, isEvent, NEW
    PROPERTIES(p) READONLY caption, canonicalName
    ORDER canonicalName(p)
        
    FILTERGROUP emailFilter
        FILTER '{email.form.mail.filter.in}' in(n, p) 'F9'
;

DESIGN mail {
    BOX {
        NEW specContainer {
            fill = 1;
            MOVE BOX(a);
            NEW mailContainer {
                fill = 3;
                type = TABBED;    
                NEW emailContainer {
                    caption = '{email.form.mail.caption.incoming}';
                    MOVE BOX(e);
                    NEW tabbedContainer {
                        fill = 1;
                        type=TABBED;
                        NEW textContainer {
                            caption = '{email.form.mail.caption.message}';
                            type = CONTAINERV;        
                            MOVE PROPERTY(message(e)) {
                                fill = 1;
                                valueSize = ( -1, 200);
                                panelCaptionAbove = TRUE;
                            }
                        }
                        NEW attachment {
                            fill = 1;
                            caption = '{email.form.mail.caption.attachments}';
                            type = CONTAINERH;
                            MOVE BOX(ae);
                            MOVE PROPERTY (lastError(ae)){ 
                                panelCaptionAbove = TRUE;
                                fill = 0.3;
                            };
                        }
                    }
                }
                NEW notificationContainer {
                    caption = '{email.form.mail.caption.notifications}';
                    MOVE BOX(n);
                    NEW pane {
                        fill = 1;
                        type = CONTAINERH;
                        MOVE BOX(p);
                        MOVE PROPERTY(text(n)) {
                            fill = 1;
                            panelCaptionAbove = TRUE;
                        }
                    }
                }
                NEW settingsContainer {
                    caption = '{email.form.mail.caption.settings}';
                    MOVE PROPERTY(deleteMessages(a));
                    MOVE PROPERTY(lastDays(a));
                    MOVE PROPERTY(maxMessages(a));
                    MOVE PROPERTY(isDefaultNotification(a));
                    MOVE PROPERTY(isDefaultInbox(a));
                    MOVE PROPERTY(disable(a));
                    MOVE PROPERTY(unpack(a)); 
                    MOVE PROPERTY(ignoreExceptions(a));
                }             
            }
            MOVE TOOLBARBOX;
        }
    }
}

NAVIGATOR {
    //NEW remindUserPass;
    scheduler {
        NEW Email.mail;
    }
}