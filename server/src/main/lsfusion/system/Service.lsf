MODULE Service;

REQUIRE System, Reflection, Time, Security;

NAMESPACE Service;

serviceDBAction '{service.db.action}'  INTERNAL  'lsfusion.server.physics.admin.service.ServiceDBActionProperty' ();
checkAggregationsAction '{service.check.aggregations.action}'  INTERNAL  'lsfusion.server.physics.admin.service.CheckAggregationsActionProperty' ();
checkClassesAction '{service.check.classes.action}'   INTERNAL  'lsfusion.server.physics.admin.service.CheckClassesActionProperty' ();
checkIndicesAction '{service.check.indices.action}'  INTERNAL  'lsfusion.server.physics.admin.service.CheckIndicesActionProperty' ();
recalculateClassesAction '{service.recalculate.classes.action}'  INTERNAL  'lsfusion.server.physics.admin.service.RecalculateClassesActionProperty' ();
recalculateAction '{service.recalculate.action}'  INTERNAL  'lsfusion.server.physics.admin.service.RecalculateActionProperty' ();
recalculateFollowsAction '{service.recalculate.follow.action}'  INTERNAL  'lsfusion.server.physics.admin.service.RecalculateFollowsActionProperty' ();
recalculateStatsAction '{service.recalculate.stats.action}'  INTERNAL  'lsfusion.server.physics.admin.service.RecalculateStatsActionProperty' ();
overCalculateStatsAction '{service.over.calculate.stats.action}'  INTERNAL  'lsfusion.server.physics.admin.service.OverCalculateStatsActionProperty' ();
maxQuantityOverCalculate '{service.max.quantity.over.calculate}' = DATA INTEGER ();

makeProcessDumpAction '{service.make.process.dump.action}'  INTERNAL  'lsfusion.server.logics.action.utils.admin.monitor.MakeProcessDumpActionProperty' ();

serviceDBMultiThreadAction '{service.service.db.multi.thread.action}'  INTERNAL  'lsfusion.server.physics.admin.service.ServiceDBMultiThreadActionProperty' (INTEGER, INTEGER) NULL;
checkAggregationsMultiThreadAction '{service.check.aggregations.multi.thread.action}'  INTERNAL  'lsfusion.server.physics.admin.service.CheckAggregationsMultiThreadActionProperty' (INTEGER, INTEGER) NULL;
checkClassesMultiThreadAction '{service.check.classes.multi.thread.action}'  INTERNAL  'lsfusion.server.physics.admin.service.CheckClassesMultiThreadActionProperty' (INTEGER, INTEGER) NULL;
recalculateClassesMultiThreadAction '{service.recalculate.classes.multi.thread.action}'  INTERNAL  'lsfusion.server.physics.admin.service.RecalculateClassesMultiThreadActionProperty' (INTEGER, INTEGER) NULL;
recalculateMultiThreadAction '{service.recalculate.multi.thread.action}'  INTERNAL  'lsfusion.server.physics.admin.service.RecalculateMultiThreadActionProperty' (INTEGER, INTEGER) NULL;
recalculateFollowsMultiThreadAction '{service.recalculate.follows.multi.thread.action}'  INTERNAL  'lsfusion.server.physics.admin.service.RecalculateFollowsMultiThreadActionProperty' (INTEGER, INTEGER) NULL;
recalculateStatsMultiThreadAction '{service.recalculate.stats.thread.action}'  INTERNAL  'lsfusion.server.physics.admin.service.RecalculateStatsMultiThreadActionProperty' (INTEGER, INTEGER) NULL;
overCalculateStatsMultiThreadAction '{service.over.calculate.stats.multi.thread.action}'  INTERNAL  'lsfusion.server.physics.admin.service.OverCalculateStatsMultiThreadActionProperty' (INTEGER, INTEGER) NULL;

serviceDBMultiThreadAction '{service.service.db.multi.thread.action.timeout}' (INTEGER propertyTimeout)  { serviceDBMultiThreadAction (NULL, propertyTimeout); }
checkAggregationsMultiThreadAction '{service.check.aggregations.multi.thread.action.timeout}' (INTEGER propertyTimeout) { checkAggregationsMultiThreadAction (NULL, propertyTimeout); }
checkClassesMultiThreadAction '{service.check.classes.multi.thread.action.timeout}' (INTEGER propertyTimeout) { checkClassesMultiThreadAction (NULL, propertyTimeout); }
recalculateClassesMultiThreadAction '{service.recalculate.classes.multi.thread.action.timeout}' (INTEGER propertyTimeout) { recalculateClassesMultiThreadAction (NULL, propertyTimeout); }
recalculateMultiThreadAction '{service.recalculate.multi.thread.action.timeout}' (INTEGER propertyTimeout) { recalculateMultiThreadAction (NULL, propertyTimeout); }
recalculateFollowsMultiThreadAction '{service.recalculate.follows.multi.thread.action.timeout}' (INTEGER propertyTimeout) { recalculateFollowsMultiThreadAction (NULL, propertyTimeout); }
recalculateStatsMultiThreadAction '{service.recalculate.stats.thread.action.timeout}' (INTEGER propertyTimeout) { recalculateStatsMultiThreadAction (NULL, propertyTimeout); }
overCalculateStatsMultiThreadAction '{service.over.calculate.stats.multi.thread.action.timeout}' (INTEGER propertyTimeout) { overCalculateStatsMultiThreadAction (NULL, propertyTimeout); }

threadCountMultiThread '{service.thread.count.multi.thread}' = DATA LOCAL INTEGER (); 
serviceDBMultiThreadAction '{service.service.db.multi.thread.action.thread.count}'  { serviceDBMultiThreadAction(threadCountMultiThread(), NULL); }
checkAggregationsMultiThreadAction '{service.check.aggregations.multi.thread.action.thread.count}'  { checkAggregationsMultiThreadAction(threadCountMultiThread(), NULL); }
checkClassesMultiThreadAction '{service.check.classes.multi.thread.action.thread.count}'  { checkClassesMultiThreadAction(threadCountMultiThread(), NULL); }
recalculateClassesMultiThreadAction '{service.recalculate.classes.multi.thread.action.thread.count}'  { recalculateClassesMultiThreadAction(threadCountMultiThread(), NULL); }
recalculateMultiThreadAction '{service.recalculate.multi.thread.action.thread.count}'  { recalculateMultiThreadAction(threadCountMultiThread(), NULL); }
recalculateFollowsMultiThreadAction '{service.recalculate.follows.multi.thread.action.thread.count}'  { recalculateFollowsMultiThreadAction (threadCountMultiThread(), NULL); }
recalculateStatsMultiThreadAction '{service.recalculate.stats.thread.action.thread.count}'  { recalculateStatsMultiThreadAction (threadCountMultiThread(), NULL); }
overCalculateStatsMultiThreadAction '{service.over.calculate.stats.multi.thread.action.thread.count}'  { overCalculateStatsMultiThreadAction (threadCountMultiThread(), NULL); }

analyzeDBAction '{service.analyze.db.action}'  INTERNAL  'lsfusion.server.physics.admin.service.AnalyzeDBActionProperty' ();
vacuumDBAction '{service.vacuum.db.action}'  INTERNAL  'lsfusion.server.physics.admin.service.VacuumDBActionProperty' ();
packAction '{service.pack.action}'  INTERNAL  'lsfusion.server.physics.admin.service.PackActionProperty' ();
getVMInfo '{service.get.vm.info}'  INTERNAL  'lsfusion.server.physics.admin.service.GetVMInfoActionProperty' ();

singleTransaction '{service.single.transaction}' = DATA BOOLEAN ();

CLASS DBType {
    POSTGRE 'Postgre',
    MSSQL 'MS SQL'
}
TABLE DBType(DBType);
uploadType '{service.upload.type}' = DATA DBType ();
uploadStaticNameType = staticName(uploadType()); 
uploadStaticCaptionType '{service.upload.type}' = staticCaption(uploadType()); 
uploadHost '{service.upload.host}' = DATA VARSTRING[100] ();
uploadUser '{service.upload.user}' = DATA VARSTRING[100] ();
uploadPassword '{service.upload.password}' = DATA VARSTRING[100] ();
uploadInstance '{service.upload.instance}' = DATA VARSTRING[100] ();
onStarted() + { 
    uploadType() <- DBType.MSSQL;
    uploadHost() <- 'localhost';
    uploadUser() <- 'sa';
    uploadPassword() <- '11111';
    uploadInstance() <- 'SQLEXPRESS';
}
uploadDB '{service.upload.db}' = DATA VARSTRING[100] (); 
uploadToDBAction '{service.upload.to.db.action}'  INTERNAL  'lsfusion.server.physics.admin.service.UploadToDBActionProperty' ();

META defineMode(property, action, type, caption1, caption2)
    setRepeatableRead###property caption1  INTERNAL  action (type);
    refreshRepeatableRead###property caption2()  { 
        setRepeatableRead###property(property());
    }
    WHEN CHANGED(property()) DO {
        refreshRepeatableRead###property();
    }
    onStarted() + { 
        refreshRepeatableRead###property();
    } 
END

disableTILMode '{service.disable.til.mode}' = DATA BOOLEAN ();
serverComputer '{service.server.computer}' = DATA Computer();
hostnameServerComputer '{service.server.computer}' () = hostname(serverComputer());

@defineMode(disableTILMode, 'lsfusion.server.physics.admin.service.SetRepeatableReadDisableTILModeActionProperty', BOOLEAN, '{service.define.mode.set.repeatable.read.disable.til.mode}', '{service.define.mode.refresh.repeatable.read.disable.til.mode}');

@defineMode(hostnameServerComputer, 'lsfusion.server.physics.admin.service.SetHostnameServerComputerActionProperty', VARSTRING[100], '{service.define.mode.set.repeatable.read.hostname.server.computer}', '{service.define.mode.refresh.repeatable.read.hostname.server.computer}');

setExplainAnalyzeMode '{service.set.explain.analyze.mode}'  INTERNAL  'lsfusion.server.physics.admin.service.SetExplainAnalyzeModeUserActionProperty' (BOOLEAN, User);
explainAnalyzeMode '{service.explain.analyze.mode}' = DATA BOOLEAN (User);
refreshExplainAnalyzeMode '{service.refresh.explain.analyze.mode}'(User user)  { 
    setExplainAnalyzeMode(explainAnalyzeMode(user), user);  
}
WHEN CHANGED(explainAnalyzeMode(User user)) DO {
    refreshExplainAnalyzeMode(user);
}

turnExplainAnalizeOnCurrentUser '{service.turn.explain.analyze.on.current.user}' ()  { 
    explainAnalyzeMode(User user) <- TRUE WHERE user == currentUser();     
}

setLoggerDebugEnabled '{service.set.logger.debug.enabled}'  INTERNAL  'lsfusion.server.physics.admin.service.SetLoggerDebugEnabledUserActionProperty' (BOOLEAN, User);
loggerDebugEnabled '{service.logger.debug.enabled}' = DATA BOOLEAN (User);
refreshLoggerDebugEnabled ''(User user)  { 
    setLoggerDebugEnabled(loggerDebugEnabled(user), user);
}
WHEN CHANGED(loggerDebugEnabled(User user)) DO {
    refreshLoggerDebugEnabled(user);
}

setRemoteLoggerDebugEnabled '{service.set.remote.logger.debug.enabled}'  INTERNAL  'lsfusion.server.physics.admin.service.SetRemoteLoggerDebugEnabledUserActionProperty' (BOOLEAN, User);
remoteLoggerDebugEnabled '{service.remote.logger.debug.enabled}' = DATA BOOLEAN (User);
refreshRemoteLoggerDebugEnabled ''(User user)  { 
    setRemoteLoggerDebugEnabled(remoteLoggerDebugEnabled(user), user);
}
WHEN CHANGED(remoteLoggerDebugEnabled(User user)) DO {
    refreshRemoteLoggerDebugEnabled(user);
}

setExLogEnabled '{service.set.ex.log.enabled}'  INTERNAL  'lsfusion.server.physics.admin.service.SetExLogUserActionProperty' (BOOLEAN, User);
remoteExLogEnabled '{service.remote.ex.log.enabled}' = DATA BOOLEAN (User);
refreshExLogEnabled ''(User user)  { 
    setExLogEnabled(remoteExLogEnabled(user), user);
}
WHEN CHANGED(remoteExLogEnabled(User user)) DO {
    refreshExLogEnabled(user);
}

setPausableLogEnabled '{service.set.pausable.log.enabled}'  INTERNAL  'lsfusion.server.physics.admin.service.SetPausableLogUserActionProperty' (BOOLEAN, User);
remotePausableLogEnabled '{service.remote.pausable.log.enabled}' = DATA BOOLEAN (User);
refreshPausableLogEnabled ''(User user)  { 
    setPausableLogEnabled(remotePausableLogEnabled(user), user);
}
WHEN CHANGED(remotePausableLogEnabled(User user)) DO {
    refreshPausableLogEnabled(user);
}

CLASS TypeExecEnv {
    materialize '{service.type.exec.env.materialize}', 
    disablenestloop '{service.type.exec.env.disablenestloop}', 
    none '{service.type.exec.env.none}'
}
TABLE typeExecEnv(TypeExecEnv);

captionExecEnv '{service.caption.exec.env}' (Object type) = staticCaption (type);
id (TypeExecEnv type) = CASE EXCLUSIVE
                        WHEN type == TypeExecEnv.materialize THEN 2
                        WHEN type == TypeExecEnv.disablenestloop THEN 1
                        WHEN type == TypeExecEnv.none THEN 0 IN base;

setExecEnv '{service.set.exec.env}'  INTERNAL  'lsfusion.server.physics.admin.service.SetExecEnvUserActionProperty' (INTEGER, User);
execEnv '{service.exec.env.user}' = DATA TypeExecEnv (User);
refreshExecEnv '{service.refresh.exec.env.user}'(User user)  { 
    setExecEnv(id(execEnv(user)), user);  
}
WHEN CHANGED(execEnv(User user)) DO {
    refreshExecEnv(user);
}
nameExecEnv '{service.exec.env.user}' (User user) = captionExecEnv(execEnv(user)) IN base;

// --------------- Удаление прикладных логов ------------------------ //

clearApplicationLog '{service.clear.application.log}'  ABSTRACT LIST ( ) ;

META defineLog (object, caption, container)
    countDaysClear##object '{service.define.log.count.days.clear.object} '##caption = DATA INTEGER (); 
    
    EXTEND FORM options PROPERTIES countDaysClear##object();
    DESIGN options { container { MOVE PROPERTY(countDaysClear##object());} }    
END
META defineLog (object, dateProp)
    clearApplicationLog () + { 
	NEWSESSION {
	        IF countDaysClear##object() THEN {
	            DELETE object d WHERE d IS object AND dateProp(d)<= subtract(currentDate(), countDaysClear##object());
	        }
	        apply();
	    }
}   
END
META defineLog (object, caption, container, dateProp)
    @defineLog (object, caption, container);
    @defineLog (object, dateProp);    
END

DESIGN options {
    pane {
        NEW log {
            caption = '{service.form.options.caption.logging}';
        }
    }
}

@defineLog (Email, '{service.define.log.of.incoming.email}', log, dateSent);

countDaysClearFusionTempFiles '{service.count.days.clear.fusion.temp.files}' = DATA INTEGER (); 
clearFusionTempFiles  INTERNAL  'lsfusion.server.physics.admin.service.ClearFusionTempFilesActionProperty' ();
EXTEND FORM options PROPERTIES countDaysClearFusionTempFiles();
    DESIGN options { log { MOVE PROPERTY(countDaysClearFusionTempFiles());} }    

setVolatileStatsEnabled '{service.set.volatile.stats.enabled}'  INTERNAL  'lsfusion.server.physics.admin.service.SetVolatileStatsEnabledUserActionProperty' (BOOLEAN, User);
volatileStatsEnabled '{service.volatile.stats.enabled}' = DATA BOOLEAN (User);
refreshVolatileStatsEnabled ''(User user)  { 
    setVolatileStatsEnabled(volatileStatsEnabled(user), user);
}
WHEN CHANGED(volatileStatsEnabled(User user)) DO {
    refreshVolatileStatsEnabled(user);
}

onStarted() + { 
    FOR explainAnalyzeMode(User u) DO 
        refreshExplainAnalyzeMode(u);
    FOR loggerDebugEnabled(User u) DO 
        refreshLoggerDebugEnabled(u);
    FOR volatileStatsEnabled(User u) DO 
        refreshVolatileStatsEnabled(u);
    FOR remoteLoggerDebugEnabled(User u) DO 
        refreshRemoteLoggerDebugEnabled(u);
    FOR remoteExLogEnabled(User u) DO 
        refreshExLogEnabled(u);
    FOR remotePausableLogEnabled(User u) DO 
        refreshPausableLogEnabled(u);
    FOR execEnv(User u) DO 
        refreshExecEnv(u);
} 

setReupdateMode '{service.set.reupdate.mode}'  INTERNAL  'lsfusion.server.physics.admin.service.SetReupdateModeActionProperty' (BOOLEAN);
reupdateMode '{service.reupdate.mode}' = DATA BOOLEAN ();
refreshReupdateMode '{service.refresh.reupdate.mode}'()  { 
    setReupdateMode(reupdateMode());
}
WHEN CHANGED(reupdateMode()) DO {
    refreshReupdateMode();
}
onStarted() + { 
    refreshReupdateMode();
} 

restartPushed = DATA BOOLEAN ();
notRestartPushed = NOT restartPushed();

scheduledRestart '{service.scheduled.restart}' = DATA BOOLEAN ();
restartServerAction '{service.restart.server.action}'  INTERNAL  'lsfusion.server.physics.admin.service.RestartActionProperty' ();
cancelRestartServerAction '{service.cancel.restart.server.action}'  INTERNAL  'lsfusion.server.physics.admin.service.CancelRestartActionProperty' ();

forbidLogin '{service.forbid.login}' = DATA BOOLEAN ();
setPendingRestartAction '{service.set.pending.restart.action}'  INTERNAL  <{ context.getRestartManager().setPendingRestart(true); }>;
resetPendingRestartAction '{service.reset.pending.restart.action}'  INTERNAL  <{ context.getRestartManager().setPendingRestart(false); }>;


restartServer '{service.restart.server}'  ABSTRACT LIST ( );
restartServer() + { 
    IF scheduledRestart() THEN restartServerAction();
    IF forbidLogin() THEN setPendingRestartAction();
    restartPushed() <- TRUE;
    apply();
}

cancelRestartServer '{service.cancel.restart.server}'  ABSTRACT LIST ( );
cancelRestartServer() + {  
    cancelRestartServerAction();
    resetPendingRestartAction();
    restartPushed() <- NULL;
    apply();
}

onStarted() + { 
    restartPushed() <- NULL;
} 

runGarbageCollector '{service.run.garbage.collector}'  INTERNAL  'lsfusion.server.physics.admin.service.GarbageCollectorActionProperty' ();
dropLRUPercent '{service.drop.lru.percent}' = DATA DOUBLE ();
randomDropLRU '{service.random.drop.lru}' = DATA BOOLEAN ();
dropLRUCustom '{service.drop.lru}'  INTERNAL  'lsfusion.server.physics.admin.service.DropLRUActionProperty' (DOUBLE, BOOLEAN);
dropLRU '{service.drop.lru}' ()  { dropLRUCustom(dropLRUPercent(), randomDropLRU()); }
turnCacheStatsOff '{service.turn.cache.stats.off}'  INTERNAL  'lsfusion.server.physics.admin.service.TurnCacheStatsOff' ();
makeHeapDump '{service.make.heap.dump}'  INTERNAL  'lsfusion.server.physics.admin.service.MakeHeapDumpActionProperty' ();
isServerRestarting = NATIVE BOOLEAN ();
isNotServerRestarting () = NOT isServerRestarting();

CLASS Setting '{service.setting}';
TABLE setting (Setting);

name '{service.name.setting}' = DATA VARISTRING[100] (Setting);
setting (name) = GROUP AGGR Setting setting BY name(setting);
baseValue '{service.base.value.setting}' = DATA VARSTRING[100] (Setting);

TABLE settingUserRole(Setting, UserRole);
baseValue '{service.base.value.setting.user.role}' = DATA VARSTRING[100] (Setting, UserRole);
overBaseValue '{service.over.base.value.setting.user}' (Setting p, UserRole ur) = OVERRIDE baseValue(p, ur), baseValue(p);
defaultValue '{service.default.value.setting}' = DATA VARSTRING[100] (Setting);
value '{service.value.setting.user.role}' (Setting p, UserRole ur) = OVERRIDE baseValue(p, ur), baseValue(p), defaultValue(p);
value (Setting p) = OVERRIDE baseValue(p), defaultValue(p);
valueSetting (VARISTRING[100] name) = value(setting(name)); 

pushSetting '{service.push.setting}'  INTERNAL  'lsfusion.server.physics.admin.service.PushSettingActionProperty' (VARSTRING[100], VARSTRING[100]);
popSetting '{service.pop.setting}'  INTERNAL  'lsfusion.server.physics.admin.service.PopSettingActionProperty' (VARSTRING[100]);

writeDefaultSettings '{service.write.default.settings}'  INTERNAL  'lsfusion.server.physics.admin.service.WriteDefaultSettingsActionProperty' ();
updateSetting '{service.update.setting}'  INTERNAL  'lsfusion.server.physics.admin.service.UpdateSettingActionProperty' (Setting, UserRole, BOOLEAN);

updateGlobalSetting(Setting r) {
    updateSetting(r, NULL, TRUE); // system user and users without role
    FOR UserRole ur IS UserRole DO // need this even in onStarted, because onStarted is executed after initializing RMI Manager, that's why roleSettings can be already clone, and we need to update it too
        updateSetting(r, ur, NULL);    
}

onStarted() + {  
    writeDefaultSettings();

    FOR baseValue(Setting r) DO 
        updateGlobalSetting(r);

    FOR baseValue(Setting r, UserRole ur) DO 
        updateSetting(r, ur, TRUE); 
}

WHEN CHANGED (baseValue(Setting r)) DO
    updateGlobalSetting(r);
    
WHEN CHANGED (baseValue(Setting r, UserRole ur)) 
    DO updateSetting(r, ur, TRUE);

getServerSettings() {
    generateJnlpUrls();
    EXPORT FROM logicsName(), displayName(), logicsLogo(), logicsIcon(), platformVersion(), apiVersion(),
                anonymousUI=(valueSetting('enableUI')='2'), jnlpUrls=exportText();
} @@noauth;

selectedRowBackgroundColor '{service.selected.row.background.color}' = DATA COLOR (User);
overrideSelectedRowBackgroundColor '{service.selected.row.background.color}' = OVERRIDE selectedRowBackgroundColor(currentUser()), selectedRowBackgroundColor(), RGB(249, 249, 255);
selectedRowBorderColor '{service.selected.row.border.color}' = DATA COLOR (User);
overrideSelectedRowBorderColor '{service.selected.row.border.color}' = OVERRIDE selectedRowBorderColor(currentUser()), selectedRowBorderColor(), RGB(175, 175, 255);
selectedCellBackgroundColor '{service.selected.cell.background.color}' = DATA COLOR (User);
overrideSelectedCellBackgroundColor '{service.selected.cell.background.color}' = OVERRIDE selectedCellBackgroundColor(currentUser()), selectedCellBackgroundColor(), RGB(237, 238, 244);
focusedCellBackgroundColor '{service.focused.cell.background.color}' = DATA COLOR (User);
overrideFocusedCellBackgroundColor '{service.focused.cell.background.color}' = OVERRIDE focusedCellBackgroundColor(currentUser()), focusedCellBackgroundColor(), RGB(237, 238, 244);
focusedCellBorderColor '{service.focused.cell.border.color}' = DATA COLOR (User);
overrideFocusedCellBorderColor '{service.focused.cell.border.color}' = OVERRIDE focusedCellBorderColor(currentUser()), focusedCellBorderColor(), RGB(98, 98, 255);

FORM settings '{service.form.settings}'
    PROPERTIES() currentDate, defaultBackgroundColor, defaultForegroundColor, 
                 selectedRowBackgroundColor, selectedRowBorderColor, selectedCellBackgroundColor, focusedCellBackgroundColor, focusedCellBorderColor,
                 reportCharWidth, reportRowHeight, reportNotToStretch, hostnameServerComputer, 
                 dataLogicsName, displayName, loadLogicsLogo, openLogicsLogo, resetLogicsLogo, loadLogicsIcon, openLogicsIcon, resetLogicsIcon,
                 initHeapSize, maxHeapSize, minHeapFreeRatio, maxHeapFreeRatio, vmargs
    OBJECTS u=User
    PROPERTIES(u) READONLY name, login, nameMainRole
    PROPERTIES(u) explainAnalyzeMode, loggerDebugEnabled, remoteLoggerDebugEnabled, remoteExLogEnabled, remotePausableLogEnabled, nameExecEnv, volatileStatsEnabled
    
    OBJECTS uc=User
    PROPERTIES(uc) READONLY name, login
    PROPERTIES(uc) selectedRowBackgroundColor, selectedRowBorderColor, selectedCellBackgroundColor, focusedCellBackgroundColor, focusedCellBorderColor
    
    OBJECTS r = Setting
    PROPERTIES(r) READONLY name, defaultValue, baseValue CHANGEABLE
    OBJECTS ur = UserRole
    PROPERTIES(ur) READONLY name, sid 
    PROPERTIES(r,ur) value READONLY, baseValue
    FILTERGROUP override FILTER '{service.form.settings.only.override}' baseValue(r) OR baseValue(r, ur) 'F9'
    
    OBJECTS m = MemoryLimit
    PROPERTIES(m) name, maxHeapSize, vmargs
    PROPERTIES(m) TOOLBAR NEW, DELETE 
;

DESIGN settings {
    NEW tabs {
        type = TABBED;
        fill = 1;
        NEW pane {
            caption = '{service.form.settings.caption.general}';
            type = COLUMNS;
            columns = 3;
            NEW leftColumn {
                NEW current {
                    caption = '{service.form.settings.caption.current}';
                    MOVE PROPERTY(currentDate());
                    MOVE PROPERTY(hostnameServerComputer());
                }
                NEW report {
                    caption = '{service.form.settings.caption.reports}';
                    MOVE PROPERTY(reportCharWidth());
                    MOVE PROPERTY(reportRowHeight());
                    MOVE PROPERTY(reportNotToStretch());
                }        
                NEW logoContainer {
                    caption = '{system.logics.gui.preferences}';
                    MOVE PROPERTY(dataLogicsName());
                    MOVE PROPERTY(displayName());
                    MOVE PROPERTY(loadLogicsLogo());
                    MOVE PROPERTY(openLogicsLogo());
                    MOVE PROPERTY(resetLogicsLogo());
                    MOVE PROPERTY(loadLogicsIcon());
                    MOVE PROPERTY(openLogicsIcon());
                    MOVE PROPERTY(resetLogicsIcon());
                }                                       
            }
            NEW rightColumn {                 
                NEW virtualMachine {
                    caption = '{service.form.settings.caption.virtual.machine}';
                }                      
            }
        }
        
        MOVE BOX(u);
        NEW colorsPane {
            caption = '{service.form.settings.caption.colors}';
            MOVE BOX(uc);
            NEW bottomPane {
                type = CONTAINERH;
                NEW defaultColors {
                   caption = '{service.form.settings.caption.default.colors}';
                   MOVE PROPERTY(selectedRowBackgroundColor());
                   MOVE PROPERTY(selectedRowBorderColor());
                   MOVE PROPERTY(selectedCellBackgroundColor());
                   MOVE PROPERTY(focusedCellBackgroundColor());
                   MOVE PROPERTY(focusedCellBorderColor());
               } 
               NEW generalColors {
                   caption = '{service.form.settings.caption.general.colors}';
                   MOVE PROPERTY(defaultBackgroundColor());
                   MOVE PROPERTY(defaultForegroundColor());
               }
            }
            
        }
        
        NEW parameters {
            caption = '{service.form.settings.caption.parameters}';
            MOVE BOX(r);
            MOVE BOX(ur);
        }
        NEW clientVMOptions {
            caption = '{service.form.settings.caption.client.vm.options}';
            MOVE PROPERTY(initHeapSize());
            MOVE PROPERTY(maxHeapSize());
            MOVE PROPERTY(minHeapFreeRatio());
            MOVE PROPERTY(maxHeapFreeRatio());
            MOVE PROPERTY(vmargs());
            
            MOVE BOX(m);
        }
    }
    MOVE TOOLBARBOX;
}

FORM maintenance '{service.form.maintenance}'
    PROPERTIES() scheduledRestart, forbidLogin, restartServer SHOWIF notRestartPushed(), cancelRestartServer SHOWIF restartPushed(),
                 uploadStaticCaptionType, uploadHost, uploadUser, uploadPassword, uploadInstance, uploadDB, uploadToDBAction,
                 turnExplainAnalizeOnCurrentUser, clearApplicationLog, serviceDBAction, recalculateClassesAction, recalculateAction, recalculateFollowsAction, 
                 recalculateStatsAction, overCalculateStatsAction, maxQuantityOverCalculate, checkClassesAction, checkAggregationsAction, checkIndicesAction,
                 packAction, analyzeDBAction, vacuumDBAction, disableTILMode, reupdateMode, singleTransaction, threadCountMultiThread, serviceDBMultiThreadAction,
                 recalculateClassesMultiThreadAction, recalculateMultiThreadAction, recalculateFollowsMultiThreadAction,
                 recalculateStatsMultiThreadAction, overCalculateStatsMultiThreadAction, checkClassesMultiThreadAction, checkAggregationsMultiThreadAction,      
                 runGarbageCollector, getVMInfo, dropLRUPercent, randomDropLRU, dropLRU, turnCacheStatsOff, makeHeapDump           
;

DESIGN maintenance {        
    NEW pane {
        fill = 1;
        type = COLUMNS;
        columns = 3;
        NEW leftColumn {               
            NEW administration {
                caption = '{service.form.maintenance.caption.administration}';
                MOVE PROPERTY(scheduledRestart());
                MOVE PROPERTY(forbidLogin()); 
                MOVE PROPERTY(restartServer());
                MOVE PROPERTY(cancelRestartServer());
            }    
            NEW upload {
                caption = '{service.form.maintenance.caption.upload}';
                MOVE PROPERTY(uploadStaticCaptionType());
                MOVE PROPERTY(uploadHost());
                MOVE PROPERTY(uploadUser());
                MOVE PROPERTY(uploadPassword());
                MOVE PROPERTY(uploadInstance());
                MOVE PROPERTY(uploadDB());
                MOVE PROPERTY(uploadToDBAction());
            }
            NEW log {
                caption = '{service.form.maintenance.caption.logging}';
                MOVE PROPERTY(turnExplainAnalizeOnCurrentUser());
                MOVE PROPERTY(clearApplicationLog());
            }                                                          
        }
        NEW centralColumn {
            NEW oneThread {
                caption = '{service.form.maintenance.caption.one.thread}';
                MOVE PROPERTY(serviceDBAction());
                NEW recalculateOneThread {
                    caption = '{service.form.maintenance.caption.recalculate.one.thread}';
                    MOVE PROPERTY(recalculateClassesAction());
                    MOVE PROPERTY(recalculateAction());
                    MOVE PROPERTY(recalculateFollowsAction());
                    MOVE PROPERTY(recalculateStatsAction());
                    MOVE PROPERTY(overCalculateStatsAction());             
                    MOVE PROPERTY(maxQuantityOverCalculate());
                }
                NEW checkOneThread {
                    caption = '{service.form.maintenance.caption.check.one.thread}';
                    MOVE PROPERTY(checkClassesAction());
                    MOVE PROPERTY(checkAggregationsAction());
                    MOVE PROPERTY(checkIndicesAction());
                }
            NEW database {
                caption = '{service.form.maintenance.caption.database}';
                MOVE PROPERTY(packAction());
                MOVE PROPERTY(analyzeDBAction());
                MOVE PROPERTY(vacuumDBAction());
                MOVE PROPERTY(disableTILMode());
                MOVE PROPERTY(reupdateMode());
                MOVE PROPERTY(singleTransaction());
            }                            
            }        
        }
        NEW rightColumn {
             NEW multiThread {
                 caption = '{service.form.maintenance.caption.multi.thread}';
                 MOVE PROPERTY(threadCountMultiThread());
                 MOVE PROPERTY(serviceDBMultiThreadAction());
                 NEW recalculateMultiThread {
                     caption = '{service.form.maintenance.caption.recalculate.multi.thread}';
                     MOVE PROPERTY(recalculateClassesMultiThreadAction());
                     MOVE PROPERTY(recalculateMultiThreadAction());
                     MOVE PROPERTY(recalculateFollowsMultiThreadAction());
                     MOVE PROPERTY(recalculateStatsMultiThreadAction());  
                     MOVE PROPERTY(overCalculateStatsMultiThreadAction());
                 }
                 NEW checkMultiThread {
                     caption = '{service.form.maintenance.caption.check.multi.thread}';
                     MOVE PROPERTY(checkClassesMultiThreadAction());
                     MOVE PROPERTY(checkAggregationsMultiThreadAction());
                 }                  
             }  
            NEW virtualMachine {
                caption = '{service.form.maintenance.caption.virtual.machine}';
                MOVE PROPERTY(runGarbageCollector());
                MOVE PROPERTY(getVMInfo());
                MOVE PROPERTY(dropLRUPercent());
                MOVE PROPERTY(randomDropLRU());
                MOVE PROPERTY(dropLRU());
                MOVE PROPERTY(turnCacheStatsOff());
                MOVE PROPERTY(makeHeapDump());
            }                      
        }
    }       
    MOVE TOOLBARBOX; 
}

NAVIGATOR { 
    system {
        NEW Service.settings FIRST;
        NEW maintenance AFTER performance;
    }
}

