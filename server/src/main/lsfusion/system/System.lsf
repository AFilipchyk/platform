MODULE System;

NAMESPACE System;

CLASS NATIVE Object;

GROUP NATIVE root '{system.group.root}';
GROUP NATIVE public '{system.group.public}' : root;
GROUP NATIVE private '{system.group.private}' : root;

CLASS NATIVE StaticObject;
TABLE staticObject (StaticObject) NODEFAULT;

CLASS NATIVE CustomObjectClass : StaticObject;
TABLE customObjectClass (CustomObjectClass);
objectClass = NATIVE CustomObjectClass (Object);

random = NATIVE DOUBLE ();
//watch = NATIVE (); 

stat '{system.stat.class}' = DATA INTEGER (CustomObjectClass);

GROUP NATIVE base '{system.group.base}' : public;
GROUP NATIVE id '{system.group.id}' : base;

GROUP drillDown '{system.group.drill.down}' : root;
GROUP propertyPolicy '{system.group.property.policy}' : root;

canceled = DATA LOCAL BOOLEAN ();
applyMessage = DATA LOCAL TEXT ();
empty()  { };
empty(Object o)  { };

apply  { APPLY; }
cancel  { CANCEL; }
onStarted  ABSTRACT LIST ( );

statusHttp = DATA LOCAL INTEGER();
failedHttp = statusHttp() < 200 OR statusHttp() >= 300;

headers = DATA LOCAL TEXT(TEXT);    
cookies = DATA LOCAL TEXT(TEXT);    
headersTo = DATA LOCAL TEXT(TEXT);
cookiesTo = DATA LOCAL TEXT(TEXT);
url = DATA LOCAL TEXT();
query = DATA LOCAL TEXT();
host = DATA LOCAL TEXT();
port = DATA LOCAL INTEGER();
exportName = DATA LOCAL TEXT();

messageCaughtException = DATA LOCAL TEXT();
javaStackTraceCaughtException = DATA LOCAL TEXT();
lsfStackTraceCaughtException = DATA LOCAL TEXT();

upper = FORMULA 'upper($1)';    
subtractSeconds(DATETIME dateTimeFrom, DATETIME dateTimeTo) = [ FORMULA INTEGER PG 'extract (\'epoch\' from (($1)-($2)))', MS 'DATEDIFF(s, $2, $1)'](dateTimeTo AS DATETIME, dateTimeFrom AS DATETIME);

formApply '{action.form.save}'  INTERNAL  'lsfusion.server.logics.form.interactive.action.lifecycle.FormApplyActionProperty' ();
formCancel '{action.form.cancel}'  INTERNAL  'lsfusion.server.logics.form.interactive.action.lifecycle.FormCancelActionProperty' ();
formEditReport '{action.form.edit}'  INTERNAL  'lsfusion.server.logics.form.interactive.action.lifecycle.EditReportActionProperty' ();
formDrop '{action.form.drop}'  INTERNAL  'lsfusion.server.logics.form.interactive.action.lifecycle.DropActionProperty' ();
formRefresh '{action.form.refresh}'  INTERNAL  'lsfusion.server.logics.form.interactive.action.lifecycle.RefreshActionProperty' ();
formOk '{action.form.ok}'  INTERNAL  'lsfusion.server.logics.form.interactive.action.lifecycle.OkActionProperty' ();
formClose '{action.form.close}'  INTERNAL  'lsfusion.server.logics.form.interactive.action.lifecycle.CloseActionProperty' ();

seek '{system.seek}'  INTERNAL  'lsfusion.server.logics.form.interactive.action.seek.SeekScriptingActionProperty' (Object);

sleep '{system.sleep}'  INTERNAL  'lsfusion.server.logics.action.flow.SleepActionProperty' (LONG);

sessionOwners = DATA LOCAL NESTED MANAGESESSION INTEGER ();
manageSession = NOT sessionOwners() > 1;

applyOnlyWithoutRecalc  INTERNAL  'lsfusion.server.logics.action.session.ApplyOnlyWithoutRecalcActionProperty' ();
applyOnlyCalc  INTERNAL  'lsfusion.server.logics.action.session.ApplyOnlyCalcActionProperty' ();
applyOnlyCheck  INTERNAL  'lsfusion.server.logics.action.session.ApplyOnlyCheckActionProperty' ();
applyOnlyData  INTERNAL  'lsfusion.server.logics.action.session.ApplyOnlyDataActionProperty' ();
applyAll  INTERNAL  'lsfusion.server.logics.action.session.ApplyAllActionProperty' ();

throwException  INTERNAL  'lsfusion.server.logics.action.flow.ThrowExceptionActionProperty' (TEXT);

setNoCancelInTransaction()  INTERNAL  <{ context.getSession().setNoCancelInTransaction(true); }>;
dropNoCancelInTransaction()  INTERNAL  <{ context.getSession().setNoCancelInTransaction(false); }>;

setNoEventsInTransaction()  INTERNAL  <{ context.getSession().setNoEventsInTransaction(true); }>;
dropNoEventsInTransaction()  INTERNAL  <{ context.getSession().setNoEventsInTransaction(false); }>;

check()  { 
    applyOnlyCheck();
    
    TRY { 
        apply();
    } FINALLY {
        applyAll();
    }    
}

executeLocalEvents  INTERNAL  'lsfusion.server.logics.event.ExecuteLocalEventsActionProperty' (TEXT);
executeLocalEvents()  { executeLocalEvents(NULL); }

staticName '{system.static.name.object}' = DATA STRING[250] (Object); // temporary for migration
staticName '{system.static.name.object}' (StaticObject object) = staticName[Object](object) MATERIALIZED TABLE staticObject;
nameStatic (name) = GROUP MAX StaticObject object BY staticName(object);

staticCaption '{system.static.caption.object}' = DATA ISTRING[100] (Object); // temporary for migration
staticCaption '{system.static.caption.object}' (StaticObject object) = staticCaption[Object](object) MATERIALIZED TABLE staticObject IN id;

objectClassName '{system.object.class.name.object}' (Object o) = staticCaption(objectClass(o));
prevObjectClassName '{system.object.class.name.object}' (Object o) = staticCaption(PREV(objectClass(o)));

defaultBackgroundColor '{system.default.background.color}' = DATA COLOR ();
defaultOverrideBackgroundColor '{system.default.background.color}' = OVERRIDE defaultBackgroundColor(), RGB(255, 255, 0) MATERIALIZED;
defaultForegroundColor '{system.default.foreground.color}' = DATA COLOR ();
defaultOverrideForegroundColor '{system.default.foreground.color}' = OVERRIDE defaultForegroundColor(), RGB(255, 0, 0) MATERIALIZED;

selectedRowBackgroundColor '{system.selected.row.background.color}' = DATA COLOR ();
selectedRowBorderColor '{system.selected.row.border.color}' = DATA COLOR ();
selectedCellBackgroundColor '{system.selected.cell.background.color}' = DATA COLOR ();
focusedCellBackgroundColor '{system.focused.cell.background.color}' = DATA COLOR ();
focusedCellBorderColor '{system.focused.cell.border.color}' = DATA COLOR ();
  
customReportCharWidth '{system.report.char.width}' = DATA INTEGER ();
customReportRowHeight '{system.report.row.height}' = DATA INTEGER ();
   
defaultReportCharWidth = 8;
defaultReportRowHeight = 18;    
   
reportCharWidth '{system.report.char.width}' = OVERRIDE customReportCharWidth(), defaultReportCharWidth();      
reportRowHeight '{system.report.row.height}' = OVERRIDE customReportRowHeight(), defaultReportRowHeight();
reportNotToStretch '{system.report.not.to.stretch}' = DATA BOOLEAN (); 
reportToStretch '{system.report.to.stretch}' = NOT reportNotToStretch();

hashModules '{system.hash.modules}' = DATA VARSTRING[200] ();

checkIsServer INTERNAL 'lsfusion.server.physics.admin.authentication.action.CheckIsServerActionProperty' ();
isServer = DATA LOCAL BOOLEAN ();

// ----------------------------------- open files ----------------------------------- //

//source path, name
open '{system.open.file}'  INTERNAL  'lsfusion.server.physics.dev.integration.external.to.file.open.OpenPathActionProperty' (VARISTRING[255], VARISTRING[255]);
open '{system.open.file}' (VARSTRING[255] source)  { open(source, NULL); }
//source file, name
open '{system.open.file}'  INTERNAL  'lsfusion.server.physics.dev.integration.external.to.file.open.OpenFileActionProperty' (FILE, VARISTRING[255]);
open '{system.open.file}' (FILE source)  { open(source, NULL); }
//source rawFile, name
open '{system.open.file}'  INTERNAL  'lsfusion.server.physics.dev.integration.external.to.file.open.OpenRawFileActionProperty' (RAWFILE, VARISTRING[255]);
open '{system.open.file}' (RAWFILE source)  { open(source, NULL); }
//source link
open '{system.open.link}'  INTERNAL  'lsfusion.server.physics.dev.integration.external.to.file.open.OpenLinkActionProperty' (LINK);
//source rawLink
open '{system.open.link}'  INTERNAL  'lsfusion.server.physics.dev.integration.external.to.file.open.OpenRawLinkActionProperty' (RAWLINK);
  
addedObject() = DATA LOCAL Object ();
formPageCount() = DATA LOCAL INTEGER ();

exportObject = DATA LOCAL Object ();
exportString = DATA LOCAL STRING[4000] ();
exportVarString = DATA LOCAL VARSTRING[4000] ();
exportText = DATA LOCAL TEXT ();
exportInteger = DATA LOCAL INTEGER ();
exportLong = DATA LOCAL LONG ();
exportDouble = DATA LOCAL DOUBLE ();
exportNumeric = DATA LOCAL NUMERIC[20,7] ();
exportYear = DATA LOCAL YEAR ();
exportDateTime = DATA LOCAL DATETIME ();
exportBoolean = DATA LOCAL BOOLEAN ();
exportDate = DATA LOCAL DATE ();
exportTime = DATA LOCAL TIME ();
exportColor = DATA LOCAL COLOR ();
exportWordFile = DATA LOCAL WORDFILE ();
exportImageFile = DATA LOCAL IMAGEFILE ();
exportPdfFile = DATA LOCAL PDFFILE ();
exportRawFile = DATA LOCAL RAWFILE ();
exportFile = DATA LOCAL FILE ();
exportExcelFile = DATA LOCAL EXCELFILE ();
exportCsvFile = DATA LOCAL CSVFILE ();
exportHtmlFile = DATA LOCAL HTMLFILE ();
exportJsonFile = DATA LOCAL JSONFILE ();
exportXmlFile = DATA LOCAL XMLFILE ();
exportTableFile = DATA LOCAL TABLEFILE ();
exportWordLink = DATA LOCAL WORDLINK ();
exportImageLink = DATA LOCAL IMAGELINK ();
exportPdfLink = DATA LOCAL PDFLINK ();
exportRawLink = DATA LOCAL RAWLINK ();
exportLink = DATA LOCAL LINK ();
exportExcelLink = DATA LOCAL EXCELLINK ();    
exportCsvLink = DATA LOCAL CSVLINK ();    
exportHtmlLink = DATA LOCAL HTMLLINK ();    
exportJsonLink = DATA LOCAL JSONLINK ();    
exportXmlLink = DATA LOCAL XMLLINK ();    
exportTableLink = DATA LOCAL TABLELINK ();    

importFile() = DATA LOCAL FILE ();
imported = DATA LOCAL BOOLEAN (INTEGER);
importedString = DATA LOCAL BOOLEAN (VARSTRING[10]);

readFile = DATA LOCAL FILE ();

getFileExtension(FILE file) = FORMULA TEXT 'get_extension($1)';
getExtension = getFileExtension(FILE(file));

downloadFile '{system.download.file}'  INTERNAL  'lsfusion.server.physics.dev.integration.external.to.file.action.DownloadFileActionProperty' (VARSTRING[100]); 

loadDownloadedLibrary '{system.load.downloaded.library}'  INTERNAL  'lsfusion.server.physics.dev.integration.external.to.file.action.LoadDownloadedLibraryActionProperty' (VARSTRING[100]);
loadDownloadedFont '{system.load.downloaded.font}'  INTERNAL  'lsfusion.server.physics.dev.integration.external.to.file.action.LoadDownloadedFontActionProperty' (VARSTRING[100]);

loadLibrary '{system.load.library}' (path)   { 
    downloadFile(path);
    loadDownloadedLibrary(path);
}

loadFont '{system.load.font}' (path)   { 
    downloadFile(path);
    loadDownloadedFont(path);
}

applyCanceled() = DATA LOCAL NESTED BOOLEAN ();
requestCanceled() = DATA LOCAL NESTED BOOLEAN ();
requestPushed() = DATA LOCAL NESTED BOOLEAN ();

requestedObject = DATA LOCAL NESTED Object ();
requestedString = DATA LOCAL NESTED STRING[4000] ();
requestedVarString = DATA LOCAL NESTED VARSTRING[4000] ();
requestedText = DATA LOCAL NESTED TEXT ();
requestedInteger = DATA LOCAL NESTED INTEGER ();
requestedLong = DATA LOCAL NESTED LONG ();
requestedDouble = DATA LOCAL NESTED DOUBLE ();
requestedNumeric = DATA LOCAL NESTED NUMERIC[20,7] ();
requestedYear = DATA LOCAL NESTED YEAR ();
requestedDateTime = DATA LOCAL NESTED DATETIME ();
requestedBoolean = DATA LOCAL NESTED BOOLEAN ();
requestedDate = DATA LOCAL NESTED DATE ();
requestedTime = DATA LOCAL NESTED TIME ();
requestedColor = DATA LOCAL NESTED COLOR ();
requestedWordFile = DATA LOCAL NESTED WORDFILE ();
requestedImageFile = DATA LOCAL NESTED IMAGEFILE ();
requestedPdfFile = DATA LOCAL NESTED PDFFILE ();
requestedRawFile = DATA LOCAL NESTED RAWFILE ();
requestedFile = DATA LOCAL NESTED FILE ();
requestedExcelFile = DATA LOCAL NESTED EXCELFILE ();
requestedCsvFile = DATA LOCAL NESTED CSVFILE ();
requestedHtmlFile = DATA LOCAL NESTED HTMLFILE ();
requestedJsonFile = DATA LOCAL NESTED JSONFILE ();
requestedXmlFile = DATA LOCAL NESTED XMLFILE ();
requestedTableFile = DATA LOCAL NESTED TABLEFILE ();
requestedWordLink = DATA LOCAL NESTED WORDLINK ();
requestedImageLink = DATA LOCAL NESTED IMAGELINK ();
requestedPdfLink = DATA LOCAL NESTED PDFLINK ();
requestedRawLink = DATA LOCAL NESTED RAWLINK ();
requestedLink = DATA LOCAL NESTED LINK ();
requestedExcelLink = DATA LOCAL NESTED EXCELLINK ();    
requestedCsvLink = DATA LOCAL NESTED CSVLINK ();    
requestedHtmlLink = DATA LOCAL NESTED HTMLLINK ();    
requestedJsonLink = DATA LOCAL NESTED JSONLINK ();    
requestedXmlLink = DATA LOCAL NESTED XMLLINK ();    
requestedTableLink = DATA LOCAL NESTED TABLELINK ();    

isActiveForm = DATA LOCAL BOOLEAN ();

edit '{logics.edit}'  ABSTRACT MULTI OVERRIDE FIRST ( Object) IMAGE 'edit.png' CHANGEKEY 'BACK_SPACE' HIDE TOOLBAR;
edit(Object o) + {  DIALOG EDIT Object =o DOCKED; }
formEdit(Object o)  { edit(o); }

// private, only for interactive usage (for other purposes use operator DELETE)
delete '{logics.delete}'  ABSTRACT MULTI OVERRIDE FIRST ( Object) IMAGE 'delete.png' CHANGEKEY 'DELETE' HIDE TOOLBAR;
delete(Object o) + {  DELETE o; } 
formDelete(Object o)  { 
    IF sessionOwners() THEN
        delete(o);
    ELSE 
        ASK '{form.instance.do.you.really.want.to.take.action} \'{logics.delete}\'' DO {
            delete(o);
            APPLY;
        }
}

// ------------------ GUI Preferences ---------------- //
dataLogicsName '{system.logics.name}' = DATA VARSTRING[100]();
logicsName = OVERRIDE dataLogicsName(), 'default';
displayName '{system.logics.display.name}' = DATA VARSTRING[100]();

logicsLogo = DATA IMAGEFILE ();
loadLogicsLogo '{system.logics.logo.load}'()  { INPUT=logicsLogo() CHANGE; }
openLogicsLogo '{system.logics.logo.open}'()  { open(logicsLogo()); }
resetLogicsLogo '{system.logics.logo.reset}'()  { logicsLogo() <- NULL; }

logicsIcon = DATA IMAGEFILE ();
loadLogicsIcon '{system.logics.icon.load}'()  { INPUT=logicsIcon() CHANGE; }
openLogicsIcon '{system.logics.icon.open}'()  { open(logicsIcon()); }
resetLogicsIcon '{system.logics.icon.reset}'()  { logicsIcon() <- NULL; }

platformVersion = DATA TEXT();
apiVersion = DATA INTEGER();
synchronizeVersions ()  INTERNAL  'lsfusion.server.logics.SynchronizeVersionsActionProperty' ();    
onStarted() + { synchronizeVersions(); }

META applicationForm(sid, name)
    FORM sid name;
    
    DESIGN sid {
        BOX {
            NEW pane BEFORE TOOLBARBOX {
                type = TABBED;
                flex = 1;
                align = STRETCH;
                NEW commons {
                    caption = '{system.form.sid.name.caption.commons}';
                }
            }
        }
    }
END

@applicationForm(options, '{navigator.options}');
@applicationForm(integrationData, '{navigator.integration}');
@applicationForm(migrationData, '{navigator.migration}');

networkPath '{system.network.path}' = DATA LOCAL NESTED VARSTRING[500] ();
loadNetworkPath '{system.load.network.path}'  INTERNAL  'lsfusion.server.logics.form.interactive.action.input.LoadLinkActionProperty' ();
FORM networkPathForm '{system.form.network.path.form}'
    PROPERTIES() networkPath, loadNetworkPath;

META defineLinkDialog (object, class)
    dialog###object(class o)  { 
        networkPath() <- VARSTRING[500] (object(o));
        DIALOG networkPathForm DO {
            object(o) <- IMAGELINK (networkPath()); 
        }
    } ASON CHANGE object[class];
END

META defineLinkDialog (object)
    dialog###object()  { 
        networkPath() <- VARSTRING[500] (object());
        DIALOG networkPathForm DO {
            object() <- LINK (networkPath()); 
        }
    } ASON CHANGE object;
END

WINDOW root '{window.root}' TOOLBAR HORIZONTAL POSITION(0, 0, 100, 6) VALIGN (CENTER) HIDETITLE HIDESCROLLBARS;
WINDOW toolbar '{window.toolbar}' TOOLBAR VERTICAL POSITION(0, 6, 20, 64) HIDETITLE;
WINDOW tree '{window.tree}' TOOLBAR POSITION(0, 6, 20, 64) HIDETITLE;

NAVIGATOR {
    NEW FOLDER root '{navigator.forms}' WINDOW root {
        NEW FOLDER administration '{navigator.administration}' WINDOW toolbar IMAGE '/images/tools.png' {
            NEW FOLDER application '{navigator.application}' {
                NEW options;
                NEW integrationData;
                NEW migrationData;
            }
            
            NEW FOLDER system '{navigator.system}' {
                NEW FOLDER performance '{navigator.performance}';
                NEW FOLDER scheduler '{navigator.scheduler}';    
                NEW FOLDER logs '{navigator.logs}';            
            }
            
            NEW FOLDER objects '{navigator.objects}' WINDOW tree; 
        }
    }
}

// Tests

randInt(INTEGER max) = INTEGER(random() * ((max AS INTEGER) - 1)) + 1;  

META defineRandom1(cls, name, fnc)
     randNumber###name###cls (prm1) = PARTITION SUM 1 IF fnc(prm1) ORDER prm1;
     cls###name###fromRandNumber (number) = GROUP NAGGR prm1 BY randNumber###name###cls(prm1);
     maxRand###name###cls = GROUP SUM 1 IF fnc(prm1);
     random###name###cls(max) = cls###name###fromRandNumber(MIN maxRand###name###cls(), max AS INTEGER);     
END;

META defineRandom2(cls1, cls2, name, fnc)
     randNumber (###cls1 prm1, ###cls2 prm2) = PARTITION SUM 1 IF prevCurrentBalance(prm1, prm2) ORDER prm1 BY prm2;
     cls1##FromRand (number, ###cls2 prm2) = GROUP NAGGR ###cls1 prm1 BY randNumber(prm1, prm2);
     maxRand###cls1(###cls2 prm2) = GROUP SUM 1 IF prevCurrentBalance(###cls1 prm1, prm2);
     random###cls1(INTEGER max, ###cls2 prm2) = cls1##FromRand((MIN maxRand###cls1(prm2), max AS INTEGER), prm2);     
END;

// Options
META defineOption(property, caption, container)
    @defineOption(property, caption, BOOLEAN, container);
END

META defineOption(property, caption, type, container)
    property caption = DATA type () COMPLEX;
    
    EXTEND FORM options PROPERTIES() property;
    DESIGN options { container { MOVE PROPERTY(property()); } }
END

// --------------------------- Form editable --------------------------------- //

isEditable '{system.is.editable}' = DATA LOCAL NESTED BOOLEAN();

isReadonly = NOT isEditable();

META extendFormEditable (form)
    EXTEND FORM form
        PROPERTIES() isEditable
    ;
    DESIGN form {
        TOOLBARBOX {
            MOVE PROPERTY(isEditable()) BEFORE TOOLBARRIGHT;
        }
    }
END