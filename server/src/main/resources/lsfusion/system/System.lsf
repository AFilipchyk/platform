MODULE System;

NAMESPACE System;

CLASS FormResult 'Результат вызова формы' {
    drop 'Сбросить',
    ok 'Принять',
    close 'Закрыть'
}

CLASS NATIVE Object;
CLASS NATIVE CustomObjectClass;
objectClass = NATIVE CustomObjectClass (Object);
random = NATIVE DOUBLE ();
//watch = ACTION NATIVE (); 

stat 'Статистика' = DATA INTEGER (CustomObjectClass);

GROUP root 'Корневая группа';
GROUP public 'Пользовательские свойства' : root;
GROUP private 'Внутренние свойства' : root;

GROUP base 'Атрибуты' : public;
GROUP recognize 'Идентифицирующие свойства' : base;
GROUP drillDown 'Действия детализации' : root;
GROUP propertyPolicy 'Свойства политики безопасности' : root;

canceled 'Canceled' = DATA LOCAL BOOLEAN ();

apply = ACTION APPLY {};
cancel = ACTION CANCEL;
onStarted = ACTION ABSTRACT LIST ();
empty() = ACTION {};

upper = FORMULA 'upper($1)';    
subtractSeconds(DATETIME dateTimeFrom, DATETIME dateTimeTo) = [= FORMULA INTEGER PG 'extract (\'epoch\' from (($1)-($2)))', MS 'DATEDIFF(s, $2, $1)'](dateTimeTo AS DATETIME, dateTimeFrom AS DATETIME);

formApply '{action.form.save}' = ACTION CUSTOM 'lsfusion.server.logics.property.actions.form.FormApplyActionProperty' ();
formCancel '{action.form.cancel}' = ACTION CUSTOM 'lsfusion.server.logics.property.actions.form.FormCancelActionProperty' ();
formPrint '{action.form.print}' = ACTION CUSTOM 'lsfusion.server.logics.property.actions.form.RunReportPrintActionProperty' ();
formEdit '{action.form.edit}' = ACTION CUSTOM 'lsfusion.server.logics.property.actions.form.EditReportActionProperty' ();
formXls '{action.form.xlsExport}' = ACTION CUSTOM 'lsfusion.server.logics.property.actions.form.RunReportXlsActionProperty' ();
formDrop '{action.form.drop}' = ACTION CUSTOM 'lsfusion.server.logics.property.actions.form.DropActionProperty' ();
formRefresh '{action.form.refresh}' = ACTION CUSTOM 'lsfusion.server.logics.property.actions.form.RefreshActionProperty' ();
formOk '{action.form.ok}' = ACTION CUSTOM 'lsfusion.server.logics.property.actions.form.OkActionProperty' ();
formClose '{action.form.close}' = ACTION CUSTOM 'lsfusion.server.logics.property.actions.form.CloseActionProperty' ();

seek 'Найти объект' = ACTION CUSTOM 'lsfusion.server.logics.SeekScriptingActionProperty' (Object);

sleep 'Sleep' = ACTION CUSTOM 'lsfusion.server.logics.property.actions.SleepActionProperty' (LONG);

sessionOwners = DATA LOCAL NESTED MANAGESESSION INTEGER ();
manageSession = NOT sessionOwners() > 1;

applyOnlyWithoutRecalc = ACTION CUSTOM 'lsfusion.server.logics.property.actions.ApplyOnlyWithoutRecalcActionProperty' ();
applyOnlyCalc = ACTION CUSTOM 'lsfusion.server.logics.property.actions.ApplyOnlyCalcActionProperty' ();
applyOnlyCheck = ACTION CUSTOM 'lsfusion.server.logics.property.actions.ApplyOnlyCheckActionProperty' ();
applyOnlyData = ACTION CUSTOM 'lsfusion.server.logics.property.actions.ApplyOnlyDataActionProperty' ();
applyAll = ACTION CUSTOM 'lsfusion.server.logics.property.actions.ApplyAllActionProperty' ();

setNoCancelInTransaction() = ACTION CUSTOM <{ context.getSession().setNoCancelInTransaction(true); }>;
dropNoCancelInTransaction() = ACTION CUSTOM <{ context.getSession().setNoCancelInTransaction(false); }>;

setNoEventsInTransaction() = ACTION CUSTOM <{ context.getSession().setNoEventsInTransaction(true); }>;
dropNoEventsInTransaction() = ACTION CUSTOM <{ context.getSession().setNoEventsInTransaction(false); }>;

check() = ACTION {
    applyOnlyCheck();
    
    TRY { 
        apply();
    } FINALLY {
        applyAll();
    }    
}

executeLocalEvents = ACTION CUSTOM 'lsfusion.server.logics.property.actions.ExecuteLocalEventsActionProperty' ();

staticName 'Статическое имя' = DATA STRING[250] (Object);
nameStatic (name) = GROUP MAX Object object BY staticName(object);

staticCaption 'Статический заголовок' = DATA ISTRING[100] (Object);

objectClassName 'Класс объекта' (Object o) = staticCaption(objectClass(o));
prevObjectClassName 'Класс объекта' (Object o) = staticCaption(PREV(objectClass(o)));

defaultBackgroundColor 'Цвет фона по умолчанию при выделении' = DATA COLOR ();
defaultOverrideBackgroundColor 'Цвет фона по умолчанию при выделении' = OVERRIDE RGB(255, 255, 0), defaultBackgroundColor() PERSISTENT;
defaultForegroundColor 'Цвет шрифта по умолчанию при выделении' = DATA COLOR ();
defaultOverrideForegroundColor 'Цвет шрифта по умолчанию при выделении' = OVERRIDE RGB(255, 0, 0), defaultForegroundColor() PERSISTENT;

selectedRowBackgroundColor 'Цвет фона ряда при выделении' = DATA COLOR ();
overrideSelectedRowBackgroundColor 'Цвет фона ряда при выделении' = OVERRIDE RGB(249, 249, 255), selectedRowBackgroundColor();
selectedRowBorderColor 'Цвет границы ряда при выделении' = DATA COLOR ();
overrideSelectedRowBorderColor 'Цвет границы ряда при выделении' = OVERRIDE RGB(175, 175, 255), selectedRowBorderColor();
selectedCellBackgroundColor 'Цвет фона ячейки при выделении' = DATA COLOR ();
overrideSelectedCellBackgroundColor 'Цвет фона ячейки при выделении' = OVERRIDE RGB(237, 238, 244), selectedCellBackgroundColor();
focusedCellBackgroundColor 'Цвет фона ячейки при фокусировании' = DATA COLOR ();
overrideFocusedCellBackgroundColor 'Цвет фона ячейки при фокусировании' = OVERRIDE RGB(237, 238, 244), focusedCellBackgroundColor();
focusedCellBorderColor 'Цвет границы ячейки при фокусировании' = DATA COLOR ();
overrideFocusedCellBorderColor 'Цвет границы ячейки при фокусировании' = OVERRIDE RGB(98, 98, 255), focusedCellBorderColor();
  
customReportCharWidth 'Ширина символа в пикселах в отчетах' = DATA INTEGER ();
customReportRowHeight 'Высота поля в пикселах в отчетах' = DATA INTEGER ();
   
defaultReportCharWidth = 8;
defaultReportRowHeight = 18;    
   
reportCharWidth 'Ширина символа в пикселах в отчетах' = OVERRIDE defaultReportCharWidth(), customReportCharWidth();      
reportRowHeight 'Высота поля в пикселах в отчетах' = OVERRIDE defaultReportRowHeight(), customReportRowHeight();
reportNotToStretch 'Не растягивать поле по вертикали' = DATA BOOLEAN (); 
reportToStretch 'Растягивать поле по вертикали' = NOT reportNotToStretch();

hashModules 'Хэш модулей' = DATA VARSTRING[200] ();
  
addedObject() = DATA LOCAL Object ();
confirmed() = DATA LOCAL BOOLEAN ();
requestCanceled() = DATA LOCAL BOOLEAN ();
requestPushed() = DATA LOCAL BOOLEAN ();
formResult() = DATA LOCAL FormResult ();
formPageCount() = DATA LOCAL INTEGER ();
formExportFile() = DATA LOCAL CUSTOMFILE ();
formExportFiles = DATA LOCAL CUSTOMFILE (VARSTRING[100]);

prevImported = DATA LOCAL INTEGER ();
imported = DATA LOCAL BOOLEAN (INTEGER);
importedString = DATA LOCAL BOOLEAN (VARSTRING[10]);

ignorePrintType 'Игнорировать опции PRINT' = ABSTRACT BOOLEAN ();

downloadFile 'Скопировать файл на клиент' = ACTION CUSTOM 'lsfusion.server.lib.DownloadFileActionProperty' (VARSTRING[100]); 

loadDownloadedLibrary 'Загрузить скачанную библиотеку' = ACTION CUSTOM 'lsfusion.server.lib.LoadDownloadedLibraryActionProperty' (VARSTRING[100]);
loadDownloadedFont 'Загрузить шрифт' = ACTION CUSTOM 'lsfusion.server.lib.LoadDownloadedFontActionProperty' (VARSTRING[100]);

loadLibrary 'Загрузить библиотеку' (path)  = ACTION {
    downloadFile(path);
    loadDownloadedLibrary(path);
}

loadFont 'Загрузить шрифт' (path)  = ACTION {
    downloadFile(path);
    loadDownloadedFont(path);
}

META defineAnyValue(name, param) 
    name##Object = DATA LOCAL Object (param);
    name##String = DATA LOCAL STRING[2000] (param);
    name##Text = DATA LOCAL TEXT (param);
    name##Integer = DATA LOCAL INTEGER (param);
    name##Long = DATA LOCAL LONG (param);
    name##Double = DATA LOCAL DOUBLE (param);
    name##Numeric = DATA LOCAL NUMERIC[20,7] (param);
    name##Year = DATA LOCAL YEAR (param);
    name##DateTime = DATA LOCAL DATETIME (param);
    name##Logical = DATA LOCAL BOOLEAN (param);
    name##Date = DATA LOCAL DATE (param);
    name##Time = DATA LOCAL TIME (param);
    name##Color = DATA LOCAL COLOR (param);
    name##WordFile = DATA LOCAL WORDFILE (param);
    name##ImageFile = DATA LOCAL IMAGEFILE (param);
    name##PdfFile = DATA LOCAL PDFFILE (param);
    name##CustomFile = DATA LOCAL CUSTOMFILE (param);
    name##ExcelFile = DATA LOCAL EXCELFILE (param);
    name##WordLink = DATA LOCAL WORDLINK (param);
    name##ImageLink = DATA LOCAL IMAGELINK (param);
    name##PdfLink = DATA LOCAL PDFLINK (param);
    name##CustomLink = DATA LOCAL CUSTOMLINK (param);
    name##ExcelLink = DATA LOCAL EXCELLINK (param);    
END

@defineAnyValue(requested, );
@defineAnyValue(chosen, STRING[100]);

isActiveForm = DATA LOCAL BOOLEAN ();

META applicationForm(sid, name)
    FORM sid name;
    
    DESIGN sid {
        main {
            NEW pane BEFORE functions.box {
                type = TABBED;
                flex = 1;
                align = STRETCH;
                NEW commons {
                    caption = 'Общие';
                }
            }
        }
    }
END

@applicationForm(options, '{navigator.options}');
@applicationForm(integrationData, '{navigator.integration}');
@applicationForm(migrationData, '{navigator.migration}');

networkPath 'Сетевой путь' = DATA LOCAL VARSTRING[255] ();
loadNetworkPath 'Загрузить' = ACTION CUSTOM 'lsfusion.server.logics.property.actions.LoadLinkActionProperty' ();
FORM networkPathForm 'Выбор сетевого пути'
    PROPERTIES() networkPath, loadNetworkPath;

META defineLinkDialog (object, class)
    dialog###object(class o) = ACTION {
        networkPath() <- VARSTRING[255] (object(o));
        FORM networkPathForm MODAL;
        IF formResult() == FormResult.ok THEN {
            object(o) <- IMAGELINK (networkPath()); 
        }
    } ASON CHANGE object[class];
END

WINDOW root '{window.root}' TOOLBAR HORIZONTAL POSITION(0, 0, 100, 6) VALIGN (CENTER) HIDETITLE HIDESCROLLBARS;
WINDOW toolbar '{window.toolbar}' TOOLBAR VERTICAL POSITION(0, 6, 20, 64) HIDETITLE;
WINDOW tree '{window.tree}' TOOLBAR POSITION(0, 6, 20, 64) HIDETITLE;

NAVIGATOR {
    NEW root '{navigator.forms}' WINDOW root {
        NEW administration '{navigator.administration}' WINDOW toolbar IMAGE '/images/tools.png' {
            NEW application '{navigator.application}' {
                ADD options;
                ADD integrationData;
                ADD migrationData;
            }
            NEW configuration '{navigator.system}';
            NEW systemEvents '{navigator.systemEvents}';
            NEW objects '{navigator.objects}' WINDOW tree; 
        }
    }
}

// Tests

randInt(INTEGER max) = INTEGER(random() * ((max AS INTEGER) - 1)) + 1;  

META defineRandom1(cls, name, fnc)
     randNumber###name###cls (prm1) = PARTITION SUM 1 IF fnc(prm1) ORDER prm1;
     cls###name###fromRandNumber (number) = GROUP NAGGR prm1 BY randNumber###name###cls(prm1);
     maxRand###name###cls = GROUP SUM 1 IF fnc(prm1);
     random###name###cls(max) = cls###name###fromRandNumber(MIN maxRand###name###cls(), max AS INTEGER);     
END;

META defineRandom2(cls1, cls2, name, fnc)
     randNumber (###cls1 prm1, ###cls2 prm2) = PARTITION SUM 1 IF prevCurrentBalance(prm1, prm2) BY prm2 ORDER prm1;
     cls1##FromRand (number, prm2) = GROUP NAGGR (###cls1 prm1) BY randNumber(prm1, ###cls2 prm2), prm2;
     maxRand###cls1 = GROUP SUM 1 IF prevCurrentBalance(###cls1 prm1, ###cls2 prm2) BY prm2;
     random###cls1(INTEGER max, ###cls2 prm2) = cls1##FromRand((MIN maxRand###cls1(prm2), max AS INTEGER), prm2);     
END;

// Options
META defineOption(property, caption, container)
    @defineOption(property, caption, BOOLEAN, container);
END

META defineOption(property, caption, type, container)
    property caption = DATA type () COMPLEX;
    
    EXTEND FORM options PROPERTIES() property;
    DESIGN options { container { MOVE PROPERTY(property()); } }
END