MODULE System;

NAMESPACE System;

CLASS NATIVE Object;
CLASS NATIVE CustomObjectClass;
objectClass = NATIVE CustomObjectClass (Object);
random = NATIVE DOUBLE ();
//watch = NATIVE (); 

stat 'Статистика' = DATA INTEGER (CustomObjectClass);

GROUP root 'Корневая группа';
GROUP public 'Пользовательские свойства' : root;
GROUP private 'Внутренние свойства' : root;

GROUP base 'Атрибуты' : public;
GROUP recognize 'Идентифицирующие свойства' : base;
GROUP drillDown 'Действия детализации' : root;
GROUP propertyPolicy 'Свойства политики безопасности' : root;

canceled 'Canceled' = DATA LOCAL BOOLEAN ();
empty() = {};
empty(Object o) = {};

apply = { APPLY; }
cancel = { CANCEL; }
onStarted = ABSTRACT LIST ();

upper = FORMULA 'upper($1)';    
subtractSeconds(DATETIME dateTimeFrom, DATETIME dateTimeTo) = [= FORMULA INTEGER PG 'extract (\'epoch\' from (($1)-($2)))', MS 'DATEDIFF(s, $2, $1)'](dateTimeTo AS DATETIME, dateTimeFrom AS DATETIME);

formApply '{action.form.save}' = CUSTOM 'lsfusion.server.logics.property.actions.form.FormApplyActionProperty' ();
formCancel '{action.form.cancel}' = CUSTOM 'lsfusion.server.logics.property.actions.form.FormCancelActionProperty' ();
formEditReport '{action.form.edit}' = CUSTOM 'lsfusion.server.logics.property.actions.form.EditReportActionProperty' ();
formDrop '{action.form.drop}' = CUSTOM 'lsfusion.server.logics.property.actions.form.DropActionProperty' ();
formRefresh '{action.form.refresh}' = CUSTOM 'lsfusion.server.logics.property.actions.form.RefreshActionProperty' ();
formOk '{action.form.ok}' = CUSTOM 'lsfusion.server.logics.property.actions.form.OkActionProperty' ();
formClose '{action.form.close}' = CUSTOM 'lsfusion.server.logics.property.actions.form.CloseActionProperty' ();

seek 'Найти объект' = CUSTOM 'lsfusion.server.logics.SeekScriptingActionProperty' (Object);

sleep 'Sleep' = CUSTOM 'lsfusion.server.logics.property.actions.SleepActionProperty' (LONG);

sessionOwners = DATA LOCAL NESTED MANAGESESSION INTEGER ();
manageSession = NOT sessionOwners() > 1;

applyOnlyWithoutRecalc = CUSTOM 'lsfusion.server.logics.property.actions.ApplyOnlyWithoutRecalcActionProperty' ();
applyOnlyCalc = CUSTOM 'lsfusion.server.logics.property.actions.ApplyOnlyCalcActionProperty' ();
applyOnlyCheck = CUSTOM 'lsfusion.server.logics.property.actions.ApplyOnlyCheckActionProperty' ();
applyOnlyData = CUSTOM 'lsfusion.server.logics.property.actions.ApplyOnlyDataActionProperty' ();
applyAll = CUSTOM 'lsfusion.server.logics.property.actions.ApplyAllActionProperty' ();

setNoCancelInTransaction() = CUSTOM <{ context.getSession().setNoCancelInTransaction(true); }>;
dropNoCancelInTransaction() = CUSTOM <{ context.getSession().setNoCancelInTransaction(false); }>;

setNoEventsInTransaction() = CUSTOM <{ context.getSession().setNoEventsInTransaction(true); }>;
dropNoEventsInTransaction() = CUSTOM <{ context.getSession().setNoEventsInTransaction(false); }>;

check() = {
    applyOnlyCheck();
    
    TRY { 
        apply();
    } FINALLY {
        applyAll();
    }    
}

executeLocalEvents = CUSTOM 'lsfusion.server.logics.property.actions.ExecuteLocalEventsActionProperty' (TEXT);
executeLocalEvents() = { executeLocalEvents(NULL); }

staticName 'Статическое имя' = DATA STRING[250] (Object);
nameStatic (name) = GROUP BY staticName(Object object) MAX object;

staticCaption 'Статический заголовок' = DATA ISTRING[100] (Object);

objectClassName 'Класс объекта' (Object o) = staticCaption(objectClass(o));
prevObjectClassName 'Класс объекта' (Object o) = staticCaption(PREV(objectClass(o)));

defaultBackgroundColor 'Цвет фона по умолчанию при выделении' = DATA COLOR ();
defaultOverrideBackgroundColor 'Цвет фона по умолчанию при выделении' = OVERRIDE defaultBackgroundColor(), RGB(255, 255, 0) MATERIALIZED;
defaultForegroundColor 'Цвет шрифта по умолчанию при выделении' = DATA COLOR ();
defaultOverrideForegroundColor 'Цвет шрифта по умолчанию при выделении' = OVERRIDE defaultForegroundColor(), RGB(255, 0, 0) MATERIALIZED;

selectedRowBackgroundColor 'Цвет фона ряда при выделении' = DATA COLOR ();
selectedRowBorderColor 'Цвет границы ряда при выделении' = DATA COLOR ();
selectedCellBackgroundColor 'Цвет фона ячейки при выделении' = DATA COLOR ();
focusedCellBackgroundColor 'Цвет фона ячейки при фокусировании' = DATA COLOR ();
focusedCellBorderColor 'Цвет границы ячейки при фокусировании' = DATA COLOR ();
  
customReportCharWidth 'Ширина символа в пикселах в отчетах' = DATA INTEGER ();
customReportRowHeight 'Высота поля в пикселах в отчетах' = DATA INTEGER ();
   
defaultReportCharWidth = 8;
defaultReportRowHeight = 18;    
   
reportCharWidth 'Ширина символа в пикселах в отчетах' = OVERRIDE customReportCharWidth(), defaultReportCharWidth();      
reportRowHeight 'Высота поля в пикселах в отчетах' = OVERRIDE customReportRowHeight(), defaultReportRowHeight();
reportNotToStretch 'Не растягивать поле по вертикали' = DATA BOOLEAN (); 
reportToStretch 'Растягивать поле по вертикали' = NOT reportNotToStretch();

hashModules 'Хэш модулей' = DATA VARSTRING[200] ();
  
addedObject() = DATA LOCAL Object ();
formPageCount() = DATA LOCAL INTEGER ();
exportFile() = DATA LOCAL CUSTOMFILE ();
exportFiles = DATA LOCAL CUSTOMFILE (VARSTRING[100]);

importFile() = DATA LOCAL CUSTOMFILE ();
importFiles(id) = DATA LOCAL CUSTOMFILE (VARSTRING[100]);

imported = DATA LOCAL BOOLEAN (INTEGER);
importedString = DATA LOCAL BOOLEAN (VARSTRING[10]);

ignorePrintType 'Игнорировать опции PRINT' = ABSTRACT BOOLEAN ();

downloadFile 'Скопировать файл на клиент' = CUSTOM 'lsfusion.server.lib.DownloadFileActionProperty' (VARSTRING[100]); 

loadDownloadedLibrary 'Загрузить скачанную библиотеку' = CUSTOM 'lsfusion.server.lib.LoadDownloadedLibraryActionProperty' (VARSTRING[100]);
loadDownloadedFont 'Загрузить шрифт' = CUSTOM 'lsfusion.server.lib.LoadDownloadedFontActionProperty' (VARSTRING[100]);

loadLibrary 'Загрузить библиотеку' (path)  = {
    downloadFile(path);
    loadDownloadedLibrary(path);
}

loadFont 'Загрузить шрифт' (path)  = {
    downloadFile(path);
    loadDownloadedFont(path);
}

requestCanceled() = DATA LOCAL NESTED BOOLEAN ();
requestPushed() = DATA LOCAL NESTED BOOLEAN ();

requestedObject = DATA LOCAL NESTED Object ();
requestedString = DATA LOCAL NESTED STRING[4000] ();
requestedText = DATA LOCAL NESTED TEXT ();
requestedInteger = DATA LOCAL NESTED INTEGER ();
requestedLong = DATA LOCAL NESTED LONG ();
requestedDouble = DATA LOCAL NESTED DOUBLE ();
requestedNumeric = DATA LOCAL NESTED NUMERIC[20,7] ();
requestedYear = DATA LOCAL NESTED YEAR ();
requestedDateTime = DATA LOCAL NESTED DATETIME ();
requestedLogical = DATA LOCAL NESTED BOOLEAN ();
requestedDate = DATA LOCAL NESTED DATE ();
requestedTime = DATA LOCAL NESTED TIME ();
requestedColor = DATA LOCAL NESTED COLOR ();
requestedWordFile = DATA LOCAL NESTED WORDFILE ();
requestedImageFile = DATA LOCAL NESTED IMAGEFILE ();
requestedPdfFile = DATA LOCAL NESTED PDFFILE ();
requestedCustomFile = DATA LOCAL NESTED CUSTOMFILE ();
requestedExcelFile = DATA LOCAL NESTED EXCELFILE ();
requestedWordLink = DATA LOCAL NESTED WORDLINK ();
requestedImageLink = DATA LOCAL NESTED IMAGELINK ();
requestedPdfLink = DATA LOCAL NESTED PDFLINK ();
requestedCustomLink = DATA LOCAL NESTED CUSTOMLINK ();
requestedExcelLink = DATA LOCAL NESTED EXCELLINK ();    

isActiveForm = DATA LOCAL BOOLEAN ();

edit 'Редактировать' = ABSTRACT MULTI OVERRIDE FIRST (Object) IMAGE 'edit.png' CHANGEKEY 'BACK_SPACE' HIDE TOOLBAR;
edit(Object o) += { DIALOG EDIT Object =o DOCKED; }
formEdit(Object o) = { edit(o); }

// private, only for interactive usage (for other purposes use operator DELETE)
delete 'Удалить' = ABSTRACT MULTI OVERRIDE FIRST (Object) IMAGE 'delete.png' CHANGEKEY 'DELETE' HIDE TOOLBAR;
delete(Object o) += { DELETE o; } 
formDelete(Object o) = {
    IF sessionOwners() THEN
        delete(o);
    ELSE 
        ASK '{form.instance.do.you.really.want.to.take.action} \'{logics.delete}\'' DO {
            delete(o);
            APPLY;
        }
}

META applicationForm(sid, name)
    FORM sid name;
    
    DESIGN sid {
        BOX {
            NEW pane BEFORE TOOLBARBOX {
                type = TABBED;
                flex = 1;
                align = STRETCH;
                NEW commons {
                    caption = 'Общие';
                }
            }
        }
    }
END

@applicationForm(options, '{navigator.options}');
@applicationForm(integrationData, '{navigator.integration}');
@applicationForm(migrationData, '{navigator.migration}');

networkPath 'Сетевой путь' = DATA LOCAL VARSTRING[255] ();
loadNetworkPath 'Загрузить' = CUSTOM 'lsfusion.server.logics.property.actions.LoadLinkActionProperty' ();
FORM networkPathForm 'Выбор сетевого пути'
    PROPERTIES() networkPath, loadNetworkPath;

META defineLinkDialog (object, class)
    dialog###object(class o) = {
        networkPath() <- VARSTRING[255] (object(o));
        DIALOG networkPathForm DO {
            object(o) <- IMAGELINK (networkPath()); 
        }
    } ASON CHANGE object[class];
END

WINDOW root '{window.root}' TOOLBAR HORIZONTAL POSITION(0, 0, 100, 6) VALIGN (CENTER) HIDETITLE HIDESCROLLBARS;
WINDOW toolbar '{window.toolbar}' TOOLBAR VERTICAL POSITION(0, 6, 20, 64) HIDETITLE;
WINDOW tree '{window.tree}' TOOLBAR POSITION(0, 6, 20, 64) HIDETITLE;

NAVIGATOR {
    NEW FOLDER root '{navigator.forms}' WINDOW root {
        NEW FOLDER administration '{navigator.administration}' WINDOW toolbar IMAGE '/images/tools.png' {
            NEW FOLDER application '{navigator.application}' {
                NEW options;
                NEW integrationData;
                NEW migrationData;
            }
            NEW FOLDER configuration '{navigator.system}';
            NEW FOLDER systemEvents '{navigator.systemEvents}';
            NEW FOLDER objects '{navigator.objects}' WINDOW tree; 
        }
    }
}

// Tests

randInt(INTEGER max) = INTEGER(random() * ((max AS INTEGER) - 1)) + 1;  

META defineRandom1(cls, name, fnc)
     randNumber###name###cls (prm1) = PARTITION SUM 1 IF fnc(prm1) ORDER prm1;
     cls###name###fromRandNumber (number) = GROUP NAGGR prm1 BY randNumber###name###cls(prm1);
     maxRand###name###cls = GROUP SUM 1 IF fnc(prm1);
     random###name###cls(max) = cls###name###fromRandNumber(MIN maxRand###name###cls(), max AS INTEGER);     
END;

META defineRandom2(cls1, cls2, name, fnc)
     randNumber (###cls1 prm1, ###cls2 prm2) = PARTITION BY prm2 SUM 1 IF prevCurrentBalance(prm1, prm2) ORDER prm1;
     cls1##FromRand (number, prm2) = GROUP BY randNumber(###cls1 prm1, ###cls2 prm2), prm2 NAGGR (prm1);
     maxRand###cls1(###cls2 prm2) = GROUP SUM 1 IF prevCurrentBalance(###cls1 prm1, prm2);
     random###cls1(INTEGER max, ###cls2 prm2) = cls1##FromRand((MIN maxRand###cls1(prm2), max AS INTEGER), prm2);     
END;

// Options
META defineOption(property, caption, container)
    @defineOption(property, caption, BOOLEAN, container);
END

META defineOption(property, caption, type, container)
    property caption = DATA type () COMPLEX;
    
    EXTEND FORM options PROPERTIES() property;
    DESIGN options { container { MOVE PROPERTY(property()); } }
END