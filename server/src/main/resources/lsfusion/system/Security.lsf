MODULE Security;

REQUIRE System, Reflection, Email;

CLASS UserRole 'Роль';
TABLE userRole (UserRole);
TABLE customUserRole (CustomUser, UserRole);
TABLE userRoleProperty (UserRole, Property);
TABLE userRolePropertyGroup (UserRole, PropertyGroup);
TABLE userProperty (User, Property);
TABLE userRoleNavigatorElement (UserRole, NavigatorElement);

name 'Наименование' = DATA VARISTRING[100](UserRole);

sid 'Идентификатор' = DATA VARSTRING[30] (UserRole);
userRoleSID (sid) = GROUP AGGR UserRole userRole BY sid (userRole) WHERE userRole IS UserRole;

mainRole = DATA UserRole (User);
mainRole (CustomUser user) = mainRole[User] (user) IF user IS CustomUser;
sidMainRole 'Идентификатор главной роли' (CustomUser user) = sid (mainRole(user));
nameMainRole 'Главная роль' (User user) = name (mainRole(user));

defaultMainRole 'Роль по умолчанию' = DATA UserRole ();
nameDefaultMainRole 'Роль по умолчанию' = name(defaultMainRole());
EXTEND FORM customUsers
    PROPERTIES() nameDefaultMainRole
;
mainRole[User](CustomUser u) <- defaultMainRole() WHEN SET(u IS CustomUser);

in 'Вкл.' = DATA BOOLEAN (CustomUser, UserRole);
overIn 'Вкл.' (User user, UserRole role) = mainRole(user) == role OR in(user, role);
hasUserRoleCustom(user) = GROUP MAX overIn(User user, UserRole role) BY user;

inMainRole(CustomUser customUser, UserRole userRole) = mainRole(customUser) == userRole OR in(customUser, userRole);

forbidDuplicateForms 'Запретить открытие второй формы' = DATA BOOLEAN (UserRole);
forbidDuplicateFormsCurrentUser 'Запретить открытие второй формы' () = forbidDuplicateForms (mainRole(currentUser()));

permitViewAllProperty 'Разрешить просмотр всех свойств' = DATA BOOLEAN (UserRole);
permitViewAllProperty 'Разрешить просмотр всех свойств' (User user) = permitViewAllProperty (mainRole(user));
forbidViewAllProperty 'Запретить просмотр всех свойств' = DATA BOOLEAN (UserRole);
forbidViewAllProperty 'Запретить просмотр всех свойств' (User user) = forbidViewAllProperty (mainRole(user));

transactTimeout 'Таймаут для транз. (сек.)' = DATA INTEGER (UserRole);
transactTimeout 'Таймаут для транз. (сек.)' (User user) = transactTimeout (mainRole(user));

permitChangeAllProperty 'Разрешить изменение всех свойств' = DATA BOOLEAN (UserRole);
permitChangeAllProperty 'Разрешить изменение всех свойств' (User user) = permitChangeAllProperty(mainRole(user));
forbidChangeAllProperty 'Запретить изменение всех свойств' = DATA BOOLEAN (UserRole);
forbidChangeAllPropertyRole 'Запретить изменение всех свойств' (User user) = forbidChangeAllProperty(mainRole(user));

dataPermitView 'Разрешить просмотр группы свойств' = DATA BOOLEAN (PropertyGroup);

levelPermitViewParent (propertyGroup) =
    GROUP MIN level(PropertyGroup propertyGroup, PropertyGroup parent) IF dataPermitView(parent)
          BY propertyGroup PERSISTENT;

levelPermitView = TRUE IF levelPermitViewParent (PropertyGroup propertyGroup);
permitView 'Разрешить просмотр группы свойств' (PropertyGroup propertyGroup) = OVERRIDE levelPermitView (propertyGroup), dataPermitView (propertyGroup);

dataPermitView 'Разрешить просмотр свойства' = DATA BOOLEAN (Property);
permitView 'Разрешить просмотр свойства' (Property property) = OVERRIDE levelPermitView (parent(property)), dataPermitView (property) PERSISTENT;

dataForbidView 'Запретить просмотр группы свойств' = DATA BOOLEAN (PropertyGroup);

levelForbidViewParent (propertyGroup) =
    GROUP MIN level(PropertyGroup propertyGroup, PropertyGroup parent) IF dataForbidView(parent)
          BY propertyGroup PERSISTENT;

levelForbidView = TRUE IF levelForbidViewParent (PropertyGroup propertyGroup);
forbidView 'Запретить просмотр группы свойств' (PropertyGroup propertyGroup) = OVERRIDE levelForbidView (propertyGroup), dataForbidView (propertyGroup);

dataForbidView 'Запретить просмотр свойства' = DATA BOOLEAN (Property);
forbidView 'Запретить просмотр свойства' (Property property) = OVERRIDE levelForbidView (parent(property)), dataForbidView (property) PERSISTENT;

dataPermitChange 'Разрешить изменение группы свойств' = DATA BOOLEAN (PropertyGroup);

levelPermitChangeParent (propertyGroup) =
    GROUP MIN level(PropertyGroup propertyGroup, PropertyGroup parent) IF dataPermitChange(parent)
          BY propertyGroup PERSISTENT;

levelPermitChange = TRUE IF levelPermitChangeParent (PropertyGroup propertyGroup);
permitChange 'Разрешить изменение группы свойств' (PropertyGroup propertyGroup) = OVERRIDE levelPermitChange (propertyGroup), dataPermitChange (propertyGroup);

dataPermitChange 'Разрешить изменение свойства' = DATA BOOLEAN (Property);
permitChange 'Разрешить изменение свойства' (Property property) = OVERRIDE levelPermitChange (parent(property)), dataPermitChange (property) PERSISTENT;

dataForbidChange 'Запретить изменение группы свойств' = DATA BOOLEAN (PropertyGroup);

levelForbidChangeParent (propertyGroup) =
    GROUP MIN level(PropertyGroup propertyGroup, PropertyGroup parent) IF dataForbidChange(parent)
          BY propertyGroup PERSISTENT;

levelForbidChange = TRUE IF levelForbidChangeParent (PropertyGroup propertyGroup);
forbidChange 'Запретить изменение группы свойств' (PropertyGroup propertyGroup) = OVERRIDE levelForbidChange (propertyGroup), dataForbidChange (propertyGroup);

dataForbidChange 'Запретить изменение свойства' = DATA BOOLEAN (Property);
forbidChange 'Запретить изменение свойства' (Property property) = OVERRIDE levelForbidChange (parent(property)), dataForbidChange (property) PERSISTENT;

notNullPermission (Property property) = OVERRIDE permitView(property), forbidView(property), permitChange(property), forbidChange(property) PERSISTENT INDEXED;

dataPermitView 'Разрешить просмотр группы свойств' = DATA BOOLEAN (UserRole, PropertyGroup);

levelPermitViewParent (userRole, propertyGroup) =
    GROUP MIN level(PropertyGroup propertyGroup, PropertyGroup parent) IF dataPermitView(UserRole userRole, parent)
          BY userRole, propertyGroup PERSISTENT;

levelPermitView = TRUE IF levelPermitViewParent (UserRole userRole, PropertyGroup propertyGroup);
permitView 'Разрешить просмотр группы свойств' (UserRole userRole, PropertyGroup propertyGroup) = OVERRIDE levelPermitView (userRole, propertyGroup), dataPermitView (userRole, propertyGroup) PERSISTENT;

dataPermitView 'Разрешить просмотр свойства' = DATA BOOLEAN (UserRole, Property);
permitView 'Разрешить просмотр свойства' (UserRole userRole, Property property) = OVERRIDE levelPermitView (userRole, parent(property)), dataPermitView (userRole, property) PERSISTENT;
permitView 'Разрешить просмотр свойства' (User user, Property property) = permitView(mainRole(user), property) PERSISTENT;
overPermitView 'Разрешить просмотр свойства' (user, property) = 
    GROUP MAX permitView(UserRole userRole, Property property) IF overIn(User user, userRole) BY user, property;

dataForbidView 'Запретить просмотр группы свойств' = DATA BOOLEAN (UserRole, PropertyGroup);

levelForbidViewParent (userRole, propertyGroup) =
    GROUP MIN level(PropertyGroup propertyGroup, PropertyGroup parent) IF dataForbidView(UserRole userRole, parent)
          BY userRole, propertyGroup PERSISTENT;

levelForbidView = TRUE IF levelForbidViewParent (UserRole userRole, PropertyGroup propertyGroup);
forbidView 'Запретить просмотр группы свойств' (UserRole userRole, PropertyGroup propertyGroup) = OVERRIDE levelForbidView (userRole, propertyGroup), dataForbidView (userRole, propertyGroup) PERSISTENT;

dataForbidView 'Запретить просмотр свойства' = DATA BOOLEAN (UserRole, Property);
forbidView 'Запретить просмотр свойства' (UserRole userRole, Property property) = OVERRIDE levelForbidView (userRole, parent(property)), dataForbidView (userRole, property) PERSISTENT;
forbidView 'Запретить просмотр свойства' (User user, Property property) = forbidView(mainRole(user), property) PERSISTENT;

fullForbidView (UserRole userRole, Property property) = (OVERRIDE 
    forbidView(property) AND NOT permitView(property),
    forbidView(userRole, property)) AND NOT permitView(userRole, property);

fullForbidView (User user, Property property) = 
    IF hasUserRoleCustom(user)
       THEN TRUE IF NOT [=GROUP SUM 1 IF NOT fullForbidView(UserRole userRole, property) AND overIn(User user, userRole) BY user, property] (user, property)
       ELSE forbidView(property) AND NOT permitView(property);
         
dataPermitChange 'Разрешить изменение группы свойств' = DATA BOOLEAN (UserRole, PropertyGroup);

levelPermitChangeParent (userRole, propertyGroup) =
    GROUP MIN level(PropertyGroup propertyGroup, PropertyGroup parent) IF dataPermitChange(UserRole userRole, parent)
          BY userRole, propertyGroup PERSISTENT;

levelPermitChange = TRUE IF levelPermitChangeParent (UserRole userRole, PropertyGroup propertyGroup);
permitChange 'Разрешить изменение группы свойств' (UserRole userRole, PropertyGroup propertyGroup) = OVERRIDE levelPermitChange (userRole, propertyGroup), dataPermitChange (userRole, propertyGroup) PERSISTENT;

dataPermitChange 'Разрешить изменение свойства' = DATA BOOLEAN (UserRole, Property);
permitChange 'Разрешить изменение свойства' (UserRole userRole, Property property) = OVERRIDE levelPermitChange (userRole, parent(property)), dataPermitChange (userRole, property) PERSISTENT;
permitChange 'Разрешить изменение свойства' (User user, Property property) = permitChange (mainRole(user), property) PERSISTENT;
overPermitChange 'Разрешить изменение свойства' (user, property) = 
    GROUP MAX permitChange(UserRole userRole, Property property) IF overIn(User user, userRole) BY user, property;
    
dataForbidChange 'Запретить изменение группы свойств' = DATA BOOLEAN (UserRole, PropertyGroup);

levelForbidChangeParent (userRole, propertyGroup) =
    GROUP MIN level(PropertyGroup propertyGroup, PropertyGroup parent) IF dataForbidChange(UserRole userRole, parent)
          BY userRole, propertyGroup PERSISTENT;

levelForbidChange = TRUE IF levelForbidChangeParent (UserRole userRole, PropertyGroup propertyGroup);
forbidChange 'Запретить изменение группы свойств' (UserRole userRole, PropertyGroup propertyGroup) = OVERRIDE levelForbidChange (userRole, propertyGroup), dataForbidChange (userRole, propertyGroup) PERSISTENT;

dataForbidChange 'Запретить изменение свойства' = DATA BOOLEAN (UserRole, Property);
forbidChange 'Запретить изменение свойства' (UserRole userRole, Property property) = OVERRIDE levelForbidChange (userRole, parent(property)), dataForbidChange (userRole, property) PERSISTENT;
forbidChange 'Запретить изменение свойства' (User user, Property property) = forbidChange (mainRole(user), property) PERSISTENT;

fullForbidChange (UserRole userRole, Property property) = (OVERRIDE 
    forbidChange(property) AND NOT permitChange(property),
    forbidChange(userRole, property)) AND NOT permitChange(userRole, property);

fullForbidChange (User user, Property property) = 
    IF hasUserRoleCustom(user)
       THEN TRUE IF NOT [=GROUP SUM 1 IF NOT fullForbidChange(UserRole userRole, property) AND overIn(User user, userRole) BY user, property] (user, property)
       ELSE forbidChange(property) AND NOT permitChange(property);
    
CLASS DefaultForms 'Отображение форм при запуске' {
    none 'Не восстанавливать формы',
    restore 'Отображать сохранённые формы',
    default 'Отображать формы по умолчанию'
}
FORM defaultForms 'Отображение форм при запуске'
    OBJECTS df = DefaultForms
    PROPERTIES(df) READONLY staticCaption
    DIALOG DefaultForms OBJECT df
;

defaultForms 'Отображение форм при запуске' = DATA DefaultForms (UserRole);
nameDefaultForms 'Отображение форм при запуске' (UserRole userRole) = staticCaption(defaultForms(userRole));
defaultForms 'Отображение форм при запуске' (User user) = defaultForms(mainRole(user));

defaultNumber 'Номер по умолчанию' = DATA INTEGER (UserRole, NavigatorElement);
defaultNumber 'Номер по умолчанию' (User user, NavigatorElement navigatorElement) = defaultNumber(mainRole(user), navigatorElement);

permit 'Разрешить форму' = DATA BOOLEAN (NavigatorElement);
forbid 'Запретить форму' = DATA BOOLEAN (NavigatorElement);
permitExport 'Разрешить экспорт формы' = DATA BOOLEAN (NavigatorElement);

permitAllForms 'Разрешить отображение всех форм' = DATA BOOLEAN (UserRole);
permitAllForms 'Разрешить отображение всех форм' (User user) = permitAllForms(mainRole(user));
forbidAllForms 'Запретить отображение всех форм' = DATA BOOLEAN (UserRole);
forbidAllForms 'Запретить отображение всех форм' (User user) = forbidAllForms(mainRole(user));

permit 'Разрешить форму' = DATA BOOLEAN (UserRole, NavigatorElement);
permit 'Разрешить форму' = permit(mainRole(User user), NavigatorElement navigatorElement);
forbid 'Запретить форму' = DATA BOOLEAN (UserRole, NavigatorElement);
forbid 'Запретить форму' = forbid(mainRole(User user), NavigatorElement navigatorElement);

overDefaultNumber 'Номер по умолчанию' (user, navigatorElement) = 
    GROUP MIN defaultNumber(UserRole userRole, NavigatorElement navigatorElement) IF overIn(User user, userRole) AND permit(userRole, navigatorElement) BY user, navigatorElement;
overPermit 'Разрешить форму' (user, navigatorElement) = 
    GROUP MAX permit(UserRole userRole, NavigatorElement navigatorElement) IF overIn(User user, userRole) BY user, navigatorElement;
overForbid 'Запретить форму' (User user, navigatorElement) = 
    TRUE IF hasUserRoleCustom(user) AND NOT [=GROUP SUM 1 IF NOT forbid(UserRole userRole, navigatorElement) AND overIn(User user, userRole) BY user, navigatorElement] (user, navigatorElement);

level 'Уровень' (NavigatorElement child, NavigatorElement parent) = RECURSION 1l IF child IS NavigatorElement AND parent == child
                                                              STEP 2l IF parent == parent($parent) PERSISTENT;

isParent 'Является потомком' (NavigatorElement child, NavigatorElement parent) = TRUE IF level(child, parent);

hasChildrenPermit = GROUP SUM 1 IF isParent(NavigatorElement child, NavigatorElement parent) AND permit(UserRole role, child) BY role, parent;  
hasChildrenForbid = GROUP SUM 1 IF isParent(NavigatorElement child, NavigatorElement parent) AND forbid(UserRole role, child) BY role, parent;  
backgroundPermit (UserRole role, NavigatorElement element)= RGB(203,203,203) IF hasChildrenPermit(role, element) AND NOT permit(role, element);
backgroundForbid (UserRole role, NavigatorElement element) = RGB(203,203,203) IF hasChildrenForbid(role, element) AND NOT forbid(role, element);

CLASS Policy 'Политика безопасности';
TABLE policy (Policy);
TABLE userRolePolicy (UserRole, Policy);

name 'Наименование' = DATA VARISTRING[100](Policy);

policy 'Политика' (name) = GROUP AGGR Policy policy BY name(policy) WHERE policy IS Policy;
description 'Описание' = DATA VARSTRING[100] (Policy);
order 'Порядок политики' = DATA INTEGER (UserRole, Policy);
order 'Порядок политики' (User user, Policy policy) = order (mainRole(user), policy);

EXTEND FORM customUser
    PROPERTIES(u) nameMainRole BEFORE email(u)

    OBJECTS ur=UserRole
    PROPERTIES(ur) READONLY name, sid
    PROPERTIES(u,ur) in
;

DESIGN customUser {
    container {
        MOVE ur.box {
            flex = 1.0;
        }
    }
}

EXTEND FORM customUsers
    PROPERTIES(u) READONLY nameMainRole BEFORE name(u)
;

FORM userRole 'Роль'
    OBJECTS ur = UserRole FIXED PANEL
    PROPERTIES(ur) name, sid
    EDIT UserRole OBJECT ur
;

// ---------------------------------------- Копирование роли ----------------------- //
overCopy = ABSTRACT ACTION LIST (UserRole, UserRole);

copyData = ACTION (UserRole userRole, UserRole ur) {
    ASSIGN name(ur) <- name(userRole);
    ASSIGN permitViewAllProperty(ur) <- permitViewAllProperty(userRole);
    ASSIGN forbidViewAllProperty(ur) <- forbidViewAllProperty(userRole);
    ASSIGN permitChangeAllProperty(ur) <- permitChangeAllProperty(userRole);
    ASSIGN forbidChangeAllProperty(ur) <- forbidChangeAllProperty(userRole);
    ASSIGN defaultForms(ur) <- defaultForms(userRole);
    ASSIGN permitAllForms(ur) <- permitAllForms(userRole);
    ASSIGN forbidAllForms(ur) <- forbidAllForms(userRole);

    ASSIGN dataPermitView(ur, Property property) <- dataPermitView(userRole, property);
    ASSIGN dataForbidView(ur, Property property) <- dataForbidView(userRole, property);
    ASSIGN dataPermitChange(ur, Property property) <- dataPermitChange(userRole, property);
    ASSIGN dataForbidChange(ur, Property property) <- dataForbidChange(userRole, property);
    
    ASSIGN dataPermitView(ur, PropertyGroup propertyGroup) <- dataPermitView(userRole, propertyGroup);
    ASSIGN dataForbidView(ur, PropertyGroup propertyGroup) <- dataForbidView(userRole, propertyGroup);
    ASSIGN dataPermitChange(ur, PropertyGroup propertyGroup) <- dataPermitChange(userRole, propertyGroup);
    ASSIGN dataForbidChange(ur, PropertyGroup propertyGroup) <- dataForbidChange(userRole, propertyGroup);
    
    ASSIGN defaultNumber(ur, NavigatorElement navigatorElement) <- defaultNumber(userRole, navigatorElement);
    ASSIGN permit(ur, NavigatorElement navigatorElement) <- permit(userRole, navigatorElement);
    ASSIGN forbid(ur, NavigatorElement navigatorElement) <- forbid(userRole, navigatorElement);
    
    ASSIGN order(ur, Policy userPolicy) <- order(userRole, userPolicy);
            
    EXEC overCopy(userRole, ur);
}

copy 'Копировать' = ACTION (UserRole userRole) NEWSESSION {
    FOR ADDOBJ ur = UserRole DO {
        EXEC copyData(userRole, ur);
        FORM userRole OBJECTS ur = ur MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

FORM securityPolicy 'Политика безопасности'

    OBJECTS ur=UserRole
    PROPERTIES(ur) READONLY name, sid
    PROPERTIES(ur) transactTimeout, forbidDuplicateForms, permitViewAllProperty, forbidViewAllProperty, permitChangeAllProperty,
                   forbidChangeAllProperty, nameDefaultForms, permitAllForms, forbidAllForms

    OBJECTS p=Policy
    PROPERTIES(p)  name, description

    OBJECTS f=NavigatorElement
    PROPERTIES(f) READONLY caption, canonicalName
    PROPERTIES(f) number
    PROPERTIES(ur, f) permit, forbid, defaultNumber

    OBJECTS pr=Property
    PROPERTIES(pr) caption, canonicalName
    PROPERTIES(ur, pr) permitView, forbidView, permitChange, forbidChange
    ORDER BY canonicalName(pr)

    OBJECTS df=NavigatorElement
    PROPERTIES(df) READONLY caption, canonicalName
    PROPERTIES(df) number, permit, forbid, permitExport
    ORDER BY canonicalName(pr)

    OBJECTS dpr=Property
    PROPERTIES(dpr) caption, canonicalName, permitView, forbidView, permitChange, forbidChange

    TREE treeFormObject tf = NavigatorElement PARENT parent
    PROPERTIES(tf) READONLY caption, canonicalName
    PROPERTIES(tf) number
    PROPERTIES(ur, tf) permit BACKGROUND backgroundPermit(ur, tf), forbid BACKGROUND backgroundForbid(ur, tf), defaultNumber
    ORDER BY number(tf)

    TREE treePropertyObject tprs = PropertyGroup PARENT parent, prs = Property
    PROPERTIES(tprs) caption, SID, number
    ORDER BY number(tprs)
    PROPERTIES(prs) caption, canonicalName, number
    PROPERTIES(ur, prs) permitView, forbidView, permitChange, forbidChange
    PROPERTIES(ur, tprs) permitView, forbidView, permitChange, forbidChange
    ORDER BY number(prs)

    TREE treeDefaultForm tdf = NavigatorElement PARENT parent
    PROPERTIES(tdf) READONLY caption, canonicalName
    PROPERTIES(tdf) number, permit, forbid, permitExport
    ORDER BY number(tdf)

    TREE treeDefaultProperty tdprs = PropertyGroup PARENT parent, dprs = Property
    PROPERTIES (tdprs) caption, SID, number, permitView, forbidView, permitChange, forbidChange
    ORDER BY number(tdprs)

    PROPERTIES (dprs)  caption, canonicalName,      number,      permitView,          forbidView,          permitChange,          forbidChange
    ORDER BY number(dprs)

    PROPERTIES(ur, p) order COLUMNS (ur) HEADER sid(ur)

    FILTERS parent(prs)==tprs, parent(dprs)==tdprs
;

DESIGN securityPolicy {
    NEW container {
        fill = 1;
        type = TABBED;

        NEW defaultPolicy {
            type = TABBED;
            caption = 'Политика по умолчанию';

            NEW defaultForms {
                type = TABBED;
                caption = 'Формы';
                MOVE treeDefaultForm.tree.box;
                MOVE df.box {
                    caption = 'Таблица';
                }
            }

            NEW defaultPropertyContainer {
                type = TABBED;
                caption = 'Свойства';
                MOVE treeDefaultProperty.tree.box;
                MOVE dpr.box {
                    caption = 'Таблица';
                };
            }
        }

        NEW roles {
            caption = 'Роли';
            type = SPLITV;
            MOVE ur.box;

            NEW rolePolicyContainer {
                fill = 2;
                type = TABBED;

                NEW formsContainer {
                    type = TABBED;
                    caption = 'Формы';
                    MOVE treeFormObject.tree.box;
                    MOVE f.box {
                        caption = 'Таблица';
                    }
                }

                NEW propertiesContainer {
                    type = TABBED;
                    caption = 'Свойства';
                    MOVE treePropertyObject.tree.box;
                    MOVE pr.box {
                        caption = 'Таблица';
                    }
                }
            }
        }

        MOVE p.box {
            caption = 'Дополнительные политики';
        }
    }
    
    MOVE functions.box;
}

FORM userRoles 'Роли'
    OBJECTS ur=UserRole
    PROPERTIES(ur) READONLY name, sid
    PROPERTIES(ur) copy FORCE PANEL
    PROPERTIES(ur) ADDFORM, EDITFORM, DELETE
    DIALOG UserRole OBJECT ur
;

FORM propertyPolicy 'Политика безопасности для свойства'
    OBJECTS p=Property FIXED PANEL, ur=UserRole
    PROPERTIES(p) READONLY caption, canonicalName
    PROPERTIES(ur) READONLY name, sid
    PROPERTIES(p) permitView, forbidView, permitChange, forbidChange, userLoggable, isSetNotNull
    PROPERTIES(ur, p) permitView, forbidView, permitChange, forbidChange
;

checkCurrentDateDependsAction = ACTION CUSTOM 'lsfusion.server.logics.security.CheckCurrentDateDependsActionProperty' (Property);
WHEN FORMS propertyPolicy, properties SETCHANGED(userLoggable(Property p)) DO checkCurrentDateDependsAction(p);

DESIGN propertyPolicy {
    NEW property {
        type = CONTAINERH;
        caption = 'Свойства';
        MOVE PROPERTY(caption(p));
        MOVE PROPERTY(canonicalName(p));
    }
    NEW permission {
        type = CONTAINERH;
        caption = 'Доступ';
        MOVE PROPERTY(permitView(p));
        MOVE PROPERTY(forbidView(p));
        MOVE PROPERTY(permitChange(p));
        MOVE PROPERTY(forbidChange(p));
        MOVE PROPERTY(userLoggable(p));
        MOVE PROPERTY(isSetNotNull(p));
    }
    MOVE ur.box;
    MOVE functions.box;
}

NAVIGATOR {
    security {
        ADD Security.userRoles;
        ADD Security.securityPolicy;
    }
}
