MODULE Service;

REQUIRE System, Reflection, Time;

NAMESPACE Service;

checkAggregationsAction 'Проверить аггрегации' = ACTION CUSTOM 'lsfusion.server.logics.service.CheckAggregationsActionProperty';
checkClassesAction 'Проверить классы' = ACTION CUSTOM 'lsfusion.server.logics.service.CheckClassesActionProperty';
recalculateClassesAction 'Пересчитать классы' = ACTION CUSTOM 'lsfusion.server.logics.service.RecalculateClassesActionProperty';
recalculateAction 'Пересчитать аггрегации' = ACTION CUSTOM 'lsfusion.server.logics.service.RecalculateActionProperty';
recalculateFollowsAction 'Пересчитать следствия и ограничения' = ACTION CUSTOM 'lsfusion.server.logics.service.RecalculateFollowsActionProperty';
analyzeDBAction 'Анализ БД' = ACTION CUSTOM 'lsfusion.server.logics.service.AnalyzeDBActionProperty';
vacuumDBAction 'Упаковать БД' = ACTION CUSTOM 'lsfusion.server.logics.service.VacuumDBActionProperty';
packAction 'Упаковать таблицы' = ACTION CUSTOM 'lsfusion.server.logics.service.PackActionProperty';
serviceDBAction 'Обслуживание БД' = ACTION CUSTOM 'lsfusion.server.logics.service.ServiceDBActionProperty';
getVMInfo 'Данные виртуальной машины' = ACTION CUSTOM 'lsfusion.server.logics.service.GetVMInfoActionProperty';
toggleExplainAnalyzeMode 'Выводить в лог EXPLAIN ANALYZE запросов' = ACTION CUSTOM 'lsfusion.server.logics.service.ToggleExplainAnalyzeModeActionProperty';
toggleExplainMode 'Выводить в лог EXPLAIN запросов' = ACTION CUSTOM 'lsfusion.server.logics.service.ToggleExplainModeActionProperty';
toggleVolatileStats 'Не использовать nested loop' = ACTION CUSTOM 'lsfusion.server.logics.service.ToggleVolatileStatsActionProperty';
toggleSQLLoggerDebugMode 'Выводить в лог SQL запросы' = ACTION CUSTOM 'lsfusion.server.logics.service.ToggleSQLLoggerDebugModeActionProperty';
toggleRemoteLoggerDebugMode 'Выводить в лог действия пользователей' = ACTION CUSTOM 'lsfusion.server.logics.service.ToggleRemoteLoggerDebugModeActionProperty';

singleTransaction 'Перерасчет одной транзакцией' = DATA BOOLEAN ();

CLASS DBType {
    POSTGRE 'Postgre',
    MSSQL 'MS SQL'
}
uploadType 'Тип базы' = DATA DBType ();
uploadStaticNameType = staticName(uploadType()); 
uploadStaticCaptionType 'Тип базы' = staticCaption(uploadType()); 
uploadHost 'Имя сервера' = DATA VARSTRING[100] ();
uploadUser 'Пользователь' = DATA VARSTRING[100] ();
uploadPassword 'Пароль' = DATA VARSTRING[100] ();
uploadInstance 'Имя сервера БД' = DATA VARSTRING[100] ();
onStarted() += ACTION {
    uploadType() <- DBType.MSSQL;
    uploadHost() <- 'localhost';
    uploadUser() <- 'sa';
    uploadPassword() <- '11111';
    uploadInstance() <- 'SQLEXPRESS';
}
uploadDB 'Имя базы' = DATA VARSTRING[100] (); 
uploadToDBAction 'Загрузить' = ACTION CUSTOM 'lsfusion.server.logics.service.UploadToDBActionProperty';

setRepeatableReadTILMode 'Включить SERIALIZABLE' = ACTION CUSTOM 'lsfusion.server.logics.service.SetRepeatableReadTILModeActionProperty' (BOOLEAN);
TILMode 'Включен SERIALIZABLE' = DATA BOOLEAN ();
refreshRepeatableReadTILMode 'Обновить SERIALIZABLE в VM'() = ACTION {
    setRepeatableReadTILMode(TILMode());
}
WHEN CHANGED(TILMode()) DO {
    refreshRepeatableReadTILMode();
}
onStarted() += ACTION {
    refreshRepeatableReadTILMode();
} 

setReupdateMode 'Включить REUPDATE' = ACTION CUSTOM 'lsfusion.server.logics.service.SetReupdateModeActionProperty' (BOOLEAN);
reupdateMode 'Включен REUPDATE' = DATA BOOLEAN ();
refreshReupdateMode 'Обновить REUPDATE в VM'() = ACTION {
    setReupdateMode(reupdateMode());
}
WHEN CHANGED(reupdateMode()) DO {
    refreshReupdateMode();
}
onStarted() += ACTION {
    refreshReupdateMode();
} 

restartServerAction 'Остановить сервер' = ACTION CUSTOM 'lsfusion.server.logics.service.RestartActionProperty';
runGarbageCollector 'Запустить сборщик мусора' = ACTION CUSTOM 'lsfusion.server.logics.service.GarbageCollectorActionProperty';
cancelRestartServerAction 'Отменить остановку сервера' = ACTION CUSTOM 'lsfusion.server.logics.service.CancelRestartActionProperty';
dropLRU 'Очистить LRU' = ACTION CUSTOM 'lsfusion.server.logics.service.DropLRUActionProperty';
makeHeapDump 'Сделать Heap Dump' = ACTION CUSTOM 'lsfusion.server.logics.service.MakeHeapDumpActionProperty';
isServerRestarting = NATIVE BOOLEAN ();
isNotServerRestarting () = NOT isServerRestarting();

nameReflectionSetting 'Имя настройки' = DATA SESSION VARSTRING[100] ();
valueReflectionSetting 'Значение настройки' = DATA SESSION VARSTRING[100] ();

readValueReflectionSetting = ACTION CUSTOM 'lsfusion.server.logics.service.ReadValueReflectionSettingActionProperty';
saveValueReflectionSetting = ACTION CUSTOM 'lsfusion.server.logics.service.SaveValueReflectionSettingActionProperty';

WHEN SESSION CHANGED(nameReflectionSetting()) DO readValueReflectionSetting(); 
WHEN SESSION CHANGED(valueReflectionSetting()) DO saveValueReflectionSetting(); 

FORM admin 'Администрирование'
    PROPERTIES() currentDate, defaultBackgroundColor, defaultForegroundColor, 
                 reportCharWidth, reportRowHeight, reportNotToStretch, 
                 restartServerAction SHOWIF isNotServerRestarting(), cancelRestartServerAction SHOWIF isServerRestarting(), checkAggregationsAction, checkClassesAction, 
                 recalculateClassesAction, recalculateAction, recalculateFollowsAction, packAction, analyzeDBAction, uploadToDBAction, uploadStaticCaptionType, uploadHost, uploadUser, uploadPassword, uploadInstance, uploadDB,    
                 vacuumDBAction, serviceDBAction, runGarbageCollector, getVMInfo, dropLRU, makeHeapDump, 
                 toggleExplainAnalyzeMode, toggleExplainMode, toggleVolatileStats,
                 toggleSQLLoggerDebugMode, toggleRemoteLoggerDebugMode, TILMode, reupdateMode, singleTransaction,
                 nameReflectionSetting, valueReflectionSetting SHOWIF nameReflectionSetting()
;

DESIGN admin FROM DEFAULT {
    NEW pane {
        type = COLUMNS;
        columns = 3;
        NEW current {
            caption = 'Текущие значения';
            ADD PROPERTY(currentDate());
        }
        NEW colors {
            caption = 'Цвета';
            ADD PROPERTY(defaultBackgroundColor());
            ADD PROPERTY(defaultForegroundColor());
        }
        NEW report {
            caption = 'Отчеты';
            ADD PROPERTY(reportCharWidth());
            ADD PROPERTY(reportRowHeight());
            ADD PROPERTY(reportNotToStretch());
        }
        NEW administration {
            caption = 'Запуск';
            
            ADD PROPERTY(restartServerAction());
            ADD PROPERTY(cancelRestartServerAction());
            ADD PROPERTY(serviceDBAction());
        }
        NEW recalculate {
            caption = 'Исправление целостности базы данных';
            ADD PROPERTY(recalculateClassesAction());
            ADD PROPERTY(recalculateAction());
            ADD PROPERTY(recalculateFollowsAction());
        }
        NEW check {
            caption = 'Проверка целостности базы данных';
            ADD PROPERTY(checkClassesAction());
            ADD PROPERTY(checkAggregationsAction());
        }
        NEW upload {
            caption = 'Загрузить в другую базу';
            ADD PROPERTY(uploadStaticCaptionType());
            ADD PROPERTY(uploadHost());
            ADD PROPERTY(uploadUser());
            ADD PROPERTY(uploadPassword());
            ADD PROPERTY(uploadInstance());
            ADD PROPERTY(uploadDB());
            ADD PROPERTY(uploadToDBAction());
        }
        NEW database {
            caption = 'База данных';
            ADD PROPERTY(packAction());
            ADD PROPERTY(analyzeDBAction());
            ADD PROPERTY(vacuumDBAction());
            ADD PROPERTY(toggleVolatileStats());
            ADD PROPERTY(TILMode());
            ADD PROPERTY(reupdateMode());
            ADD PROPERTY(singleTransaction());
        }
        NEW virtualMachine {
            caption = 'Виртуальная машина';
            ADD PROPERTY(runGarbageCollector());
            ADD PROPERTY(getVMInfo());
            ADD PROPERTY(dropLRU());
            ADD PROPERTY(makeHeapDump());
        }
        NEW log {
            caption = 'Логирование';
            ADD PROPERTY(toggleExplainAnalyzeMode());
            ADD PROPERTY(toggleExplainMode());
            ADD PROPERTY(toggleSQLLoggerDebugMode());
            ADD PROPERTY(toggleRemoteLoggerDebugMode());
        }
        NEW settings {
            caption = 'Настройка свойств';
            ADD PROPERTY(nameReflectionSetting());
            ADD PROPERTY(valueReflectionSetting());
        }        
    }
    ADD functions.box;
}

NAVIGATOR { 
    configuration {
        ADD Service.admin;
    }
}

