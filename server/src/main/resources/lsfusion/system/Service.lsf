MODULE Service;

REQUIRE System, Reflection, Time, Security;

NAMESPACE Service;

serviceDBAction 'Обслуживание БД' = ACTION CUSTOM 'lsfusion.server.logics.service.ServiceDBActionProperty' ();
checkAggregationsAction 'Проверить агрегации' = ACTION CUSTOM 'lsfusion.server.logics.service.CheckAggregationsActionProperty' ();
checkClassesAction 'Проверить классы' = ACTION CUSTOM 'lsfusion.server.logics.service.CheckClassesActionProperty' ();
checkIndicesAction 'Проверить индексы' = ACTION CUSTOM 'lsfusion.server.logics.service.CheckIndicesActionProperty' ();
recalculateClassesAction 'Пересчитать классы' = ACTION CUSTOM 'lsfusion.server.logics.service.RecalculateClassesActionProperty' ();
recalculateAction 'Пересчитать агрегации' = ACTION CUSTOM 'lsfusion.server.logics.service.RecalculateActionProperty' ();
recalculateFollowsAction 'Пересчитать следствия и ограничения' = ACTION CUSTOM 'lsfusion.server.logics.service.RecalculateFollowsActionProperty' ();
recalculateStatsAction 'Пересчитать статистику' = ACTION CUSTOM 'lsfusion.server.logics.service.RecalculateStatsActionProperty' ();
overCalculateStatsAction 'Дорасчитать статистику' = ACTION CUSTOM 'lsfusion.server.logics.service.OverCalculateStatsActionProperty' ();
maxQuantityOverCalculate 'Пороговое кол-во дорасчёта' = DATA INTEGER ();

serviceDBMultiThreadAction 'Обслуживание БД (многопоточно, threadCount, timeout)' = ACTION CUSTOM 'lsfusion.server.logics.service.ServiceDBMultiThreadActionProperty' (INTEGER, INTEGER) NULL;
checkAggregationsMultiThreadAction 'Проверить агрегации (многопоточно, threadCount, timeout)' = ACTION CUSTOM 'lsfusion.server.logics.service.CheckAggregationsMultiThreadActionProperty' (INTEGER, INTEGER) NULL;
checkClassesMultiThreadAction 'Проверить классы (многопоточно, threadCount, timeout)' = ACTION CUSTOM 'lsfusion.server.logics.service.CheckClassesMultiThreadActionProperty' (INTEGER, INTEGER) NULL;
recalculateClassesMultiThreadAction 'Пересчитать классы (многопоточно, threadCount, timeout)' = ACTION CUSTOM 'lsfusion.server.logics.service.RecalculateClassesMultiThreadActionProperty' (INTEGER, INTEGER) NULL;
recalculateMultiThreadAction 'Пересчитать агрегации (многопоточно, threadCount, timeout)' = ACTION CUSTOM 'lsfusion.server.logics.service.RecalculateMultiThreadActionProperty' (INTEGER, INTEGER) NULL;
recalculateFollowsMultiThreadAction 'Пересчитать следствия и ограничения (многопоточно, threadCount, timeout)' = ACTION CUSTOM 'lsfusion.server.logics.service.RecalculateFollowsMultiThreadActionProperty' (INTEGER, INTEGER) NULL;
recalculateStatsMultiThreadAction 'Пересчитать статистику (многопоточно, threadCount, timeout)' = ACTION CUSTOM 'lsfusion.server.logics.service.RecalculateStatsMultiThreadActionProperty' (INTEGER, INTEGER) NULL;
overCalculateStatsMultiThreadAction 'Дорасчитать статистику (многопоточно, threadCount, timeout)' = ACTION CUSTOM 'lsfusion.server.logics.service.OverCalculateStatsMultiThreadActionProperty' (INTEGER, INTEGER) NULL;

serviceDBMultiThreadAction 'Обслуживание БД (многопоточно, timeout)' (INTEGER propertyTimeout) = ACTION serviceDBMultiThreadAction (NULL, propertyTimeout);
checkAggregationsMultiThreadAction 'Проверить агрегации (многопоточно, timeout)' (INTEGER propertyTimeout)= ACTION checkAggregationsMultiThreadAction (NULL, propertyTimeout);
checkClassesMultiThreadAction 'Проверить классы (многопоточно, timeout)' (INTEGER propertyTimeout)= ACTION checkClassesMultiThreadAction (NULL, propertyTimeout);
recalculateClassesMultiThreadAction 'Пересчитать классы (многопоточно, timeout)' (INTEGER propertyTimeout)= ACTION recalculateClassesMultiThreadAction (NULL, propertyTimeout);
recalculateMultiThreadAction 'Пересчитать агрегации (многопоточно, timeout)' (INTEGER propertyTimeout)= ACTION recalculateMultiThreadAction (NULL, propertyTimeout);
recalculateFollowsMultiThreadAction 'Пересчитать следствия и ограничения (многопоточно, timeout)' (INTEGER propertyTimeout)= ACTION recalculateFollowsMultiThreadAction (NULL, propertyTimeout);
recalculateStatsMultiThreadAction 'Пересчитать статистику (многопоточно, timeout)' (INTEGER propertyTimeout)= ACTION recalculateStatsMultiThreadAction (NULL, propertyTimeout);
overCalculateStatsMultiThreadAction 'Дорасчитать статистику (многопоточно, timeout)' (INTEGER propertyTimeout)= ACTION overCalculateStatsMultiThreadAction (NULL, propertyTimeout);

threadCountMultiThread 'Количество потоков' = DATA LOCAL INTEGER (); 
serviceDBMultiThreadAction 'Обслуживание БД (многопоточно)' = ACTION serviceDBMultiThreadAction(threadCountMultiThread(), NULL);
checkAggregationsMultiThreadAction 'Проверить агрегации (многопоточно)' = ACTION checkAggregationsMultiThreadAction(threadCountMultiThread(), NULL);
checkClassesMultiThreadAction 'Проверить классы (многопоточно)' = ACTION checkClassesMultiThreadAction(threadCountMultiThread(), NULL);
recalculateClassesMultiThreadAction 'Пересчитать классы (многопоточно)' = ACTION recalculateClassesMultiThreadAction(threadCountMultiThread(), NULL);
recalculateMultiThreadAction 'Пересчитать агрегации (многопоточно)' = ACTION recalculateMultiThreadAction(threadCountMultiThread(), NULL);
recalculateFollowsMultiThreadAction 'Пересчитать следствия и ограничения (многопоточно)' = ACTION recalculateFollowsMultiThreadAction (threadCountMultiThread(), NULL);
recalculateStatsMultiThreadAction 'Пересчитать статистику (многопоточно)' = ACTION recalculateStatsMultiThreadAction (threadCountMultiThread(), NULL);
overCalculateStatsMultiThreadAction 'Дорасчитать статистику (многопоточно)' = ACTION overCalculateStatsMultiThreadAction (threadCountMultiThread(), NULL);

analyzeDBAction 'Анализ БД' = ACTION CUSTOM 'lsfusion.server.logics.service.AnalyzeDBActionProperty' ();
vacuumDBAction 'Упаковать БД' = ACTION CUSTOM 'lsfusion.server.logics.service.VacuumDBActionProperty' ();
packAction 'Упаковать таблицы' = ACTION CUSTOM 'lsfusion.server.logics.service.PackActionProperty' ();
getVMInfo 'Данные виртуальной машины' = ACTION CUSTOM 'lsfusion.server.logics.service.GetVMInfoActionProperty' ();

singleTransaction 'Перерасчет одной транзакцией' = DATA BOOLEAN ();

CLASS DBType {
    POSTGRE 'Postgre',
    MSSQL 'MS SQL'
}
uploadType 'Тип базы' = DATA DBType ();
uploadStaticNameType = staticName(uploadType()); 
uploadStaticCaptionType 'Тип базы' = staticCaption(uploadType()); 
uploadHost 'Имя сервера' = DATA VARSTRING[100] ();
uploadUser 'Пользователь' = DATA VARSTRING[100] ();
uploadPassword 'Пароль' = DATA VARSTRING[100] ();
uploadInstance 'Имя сервера БД' = DATA VARSTRING[100] ();
onStarted() += ACTION {
    uploadType() <- DBType.MSSQL;
    uploadHost() <- 'localhost';
    uploadUser() <- 'sa';
    uploadPassword() <- '11111';
    uploadInstance() <- 'SQLEXPRESS';
}
uploadDB 'Имя базы' = DATA VARSTRING[100] (); 
uploadToDBAction 'Загрузить' = ACTION CUSTOM 'lsfusion.server.logics.service.UploadToDBActionProperty' ();

META defineMode(property, action, type, caption1, caption2)
    setRepeatableRead###property caption1 = ACTION CUSTOM action (type);
    refreshRepeatableRead###property caption2() = ACTION {
        setRepeatableRead###property(property());
    }
    WHEN CHANGED(property()) DO {
        refreshRepeatableRead###property();
    }
    onStarted() += ACTION {
        refreshRepeatableRead###property();
    } 
END

TILMode 'Включен SERIALIZABLE' = DATA BOOLEAN ();
serverComputer 'Сервер' = DATA Computer();
hostnameServerComputer 'Сервер' () = hostname(serverComputer());

@defineMode(TILMode, 'lsfusion.server.logics.service.SetRepeatableReadTILModeActionProperty', BOOLEAN, 'Включить SERIALIZABLE', 'Обновить SERIALIZABLE в VM');

@defineMode(hostnameServerComputer, 'lsfusion.server.logics.service.SetHostnameServerComputerActionProperty', VARSTRING[100], 'Записать Hostname Server', 'Обновить Hostname Server');

setExplainAnalyzeMode 'Выводить в лог EXPLAIN ANALYZE запросов' = ACTION CUSTOM 'lsfusion.server.logics.service.SetExplainAnalyzeModeUserActionProperty' (BOOLEAN, User);
explainAnalyzeMode 'Включён Explain Analyze' = DATA BOOLEAN (User);
refreshExplainAnalyzeMode 'Обновить Explain Analyze'(User user) = ACTION {
    setExplainAnalyzeMode(explainAnalyzeMode(user), user);  
}
WHEN CHANGED(explainAnalyzeMode(User user)) DO {
    refreshExplainAnalyzeMode(user);
}

turnExplainAnalizeOnCurrentUser 'Включить EXPLAIN ANALYZE' () = ACTION {
    explainAnalyzeMode(User user) <- TRUE WHERE user == currentUser();     
}

setExplainMode 'Выводить в лог EXPLAIN запросов' = ACTION CUSTOM 'lsfusion.server.logics.service.SetExplainModeUserActionProperty' (BOOLEAN, User);
explainMode 'Включён Explain' = DATA BOOLEAN (User);
refreshExplainMode 'Обновить Explain'(User user) = ACTION {
    setExplainMode(explainMode(user), user);  
}
WHEN CHANGED(explainMode(User user)) DO {
    refreshExplainMode(user);
}

setLoggerDebugEnabled 'Включить вывод в лог SQL запросов' = ACTION CUSTOM 'lsfusion.server.logics.service.SetLoggerDebugEnabledUserActionProperty' (BOOLEAN, User);
loggerDebugEnabled 'Выводить в лог SQL запросы' = DATA BOOLEAN (User);
refreshLoggerDebugEnabled ''(User user) = ACTION {
    setLoggerDebugEnabled(loggerDebugEnabled(user), user);
}
WHEN CHANGED(loggerDebugEnabled(User user)) DO {
    refreshLoggerDebugEnabled(user);
}

setRemoteLoggerDebugEnabled 'Включить вывод в лог действий пользователей' = ACTION CUSTOM 'lsfusion.server.logics.service.SetRemoteLoggerDebugEnabledUserActionProperty' (BOOLEAN, User);
remoteLoggerDebugEnabled 'Выводить в лог действия пользователей' = DATA BOOLEAN (User);
refreshRemoteLoggerDebugEnabled ''(User user) = ACTION {
    setRemoteLoggerDebugEnabled(remoteLoggerDebugEnabled(user), user);
}
WHEN CHANGED(remoteLoggerDebugEnabled(User user)) DO {
    refreshRemoteLoggerDebugEnabled(user);
}

setExLogEnabled 'Включить вывод в лог сист. инфо (debug)' = ACTION CUSTOM 'lsfusion.server.logics.service.SetExLogUserActionProperty' (BOOLEAN, User);
remoteExLogEnabled 'Выводить в лог сист. инфо (debug)' = DATA BOOLEAN (User);
refreshExLogEnabled ''(User user) = ACTION {
    setExLogEnabled(remoteExLogEnabled(user), user);
}
WHEN CHANGED(remoteExLogEnabled(User user)) DO {
    refreshExLogEnabled(user);
}

CLASS TypeExecEnv {
    materialize 'Материализация подзапросов', 
    disablenestloop 'Отключение nested loop', 
    none 'Нет'
}

captionExecEnv 'Название' (Object type) = staticCaption (type);
id (TypeExecEnv type) = CASE EXCLUSIVE
                        WHEN type == TypeExecEnv.materialize THEN 2
                        WHEN type == TypeExecEnv.disablenestloop THEN 1
                        WHEN type == TypeExecEnv.none THEN 0 IN base;

setExecEnv 'Выводить в лог EXPLAIN запросов' = ACTION CUSTOM 'lsfusion.server.logics.service.SetExecEnvUserActionProperty' (INTEGER, User);
execEnv 'Тип адаптивного выполнения' = DATA TypeExecEnv (User);
refreshExecEnv 'Обновить Explain'(User user) = ACTION {
    setExecEnv(id(execEnv(user)), user);  
}
WHEN CHANGED(execEnv(User user)) DO {
    refreshExecEnv(user);
}
nameExecEnv 'Тип адаптивного выполнения' (User user) = captionExecEnv(execEnv(user)) IN base;

// --------------- Удаление прикладных логов ------------------------ //

clearApplicationLog 'Очистить прикладные логи' = ACTION ABSTRACT LIST () ;

META defineLog (object, caption, container)
    countDaysClear##object 'За сколько дней хранить лог '##caption = DATA INTEGER (); 
    
    EXTEND FORM options PROPERTIES countDaysClear##object();
    DESIGN options { container { MOVE PROPERTY(countDaysClear##object());} }    
END
META defineLog (object, dateProp)
    clearApplicationLog () += ACTION NEWSESSION {
        IF countDaysClear##object() THEN {
            DELETE object d WHERE d IS object AND dateProp(d)<= subtract(currentDate(), countDaysClear##object());
        }
        apply();
    }   
END
META defineLog (object, caption, container, dateProp)
    @defineLog (object, caption, container);
    @defineLog (object, dateProp);    
END

DESIGN options {
    pane {
        NEW log {
            caption = 'Логирование';
        }
    }
}

setVolatileStatsEnabled 'Установить использование nested loop' = ACTION CUSTOM 'lsfusion.server.logics.service.SetVolatileStatsEnabledUserActionProperty' (BOOLEAN, User);
volatileStatsEnabled 'Не использовать nested loop' = DATA BOOLEAN (User);
refreshVolatileStatsEnabled ''(User user) = ACTION {
    setVolatileStatsEnabled(volatileStatsEnabled(user), user);
}
WHEN CHANGED(volatileStatsEnabled(User user)) DO {
    refreshVolatileStatsEnabled(user);
}

onStarted() += ACTION {
    FOR User u IS User DO {
        refreshExplainAnalyzeMode(u);
        refreshExplainMode(u);
        refreshLoggerDebugEnabled(u);
        refreshVolatileStatsEnabled(u);
        refreshRemoteLoggerDebugEnabled(u);
        refreshExLogEnabled(u);
        refreshExecEnv(u);
    }
} 

setReupdateMode 'Включить REUPDATE' = ACTION CUSTOM 'lsfusion.server.logics.service.SetReupdateModeActionProperty' (BOOLEAN);
reupdateMode 'Включен REUPDATE' = DATA BOOLEAN ();
refreshReupdateMode 'Обновить REUPDATE в VM'() = ACTION {
    setReupdateMode(reupdateMode());
}
WHEN CHANGED(reupdateMode()) DO {
    refreshReupdateMode();
}
onStarted() += ACTION {
    refreshReupdateMode();
} 

restartServerAction 'Остановить сервер' = ACTION CUSTOM 'lsfusion.server.logics.service.RestartActionProperty' ();
runGarbageCollector 'Запустить сборщик мусора' = ACTION CUSTOM 'lsfusion.server.logics.service.GarbageCollectorActionProperty' ();
cancelRestartServerAction 'Отменить остановку сервера' = ACTION CUSTOM 'lsfusion.server.logics.service.CancelRestartActionProperty' ();
dropLRUPercent 'Процент очистки LRU' = DATA DOUBLE ();
randomDropLRU 'Случ. очистка LRU' = DATA BOOLEAN ();
dropLRUCustom 'Очистить LRU' = ACTION CUSTOM 'lsfusion.server.logics.service.DropLRUActionProperty' (DOUBLE, BOOLEAN);
dropLRU 'Очистить LRU' () = ACTION dropLRUCustom(dropLRUPercent(), randomDropLRU());
turnCacheStatsOff 'Отключить статистику кэшей' = ACTION CUSTOM 'lsfusion.server.logics.service.TurnCacheStatsOff' ();
makeHeapDump 'Сделать Heap Dump' = ACTION CUSTOM 'lsfusion.server.logics.service.MakeHeapDumpActionProperty' ();
isServerRestarting = NATIVE BOOLEAN ();
isNotServerRestarting () = NOT isServerRestarting();

CLASS ReflectionProperty 'Настройки';
TABLE reflectionProperty (ReflectionProperty);

name 'Имя настройки' = DATA VARSTRING[100] (ReflectionProperty);
reflectionProperty (name) = GROUP AGGR ReflectionProperty reflectionProperty BY name(reflectionProperty);
baseValue 'Сохранённое значение' = DATA VARSTRING[100] (ReflectionProperty);
defaultValue 'Значение по умолчанию' = DATA VARSTRING[100] (ReflectionProperty);
value 'Значение' (ReflectionProperty reflectionProperty) = OVERRIDE defaultValue(reflectionProperty), baseValue(reflectionProperty);

readReflectionPropertiesAction 'Прочитать настройки свойств' = ACTION CUSTOM 'lsfusion.server.logics.service.reflection.ReadReflectionPropertiesActionProperty' ();
onStarted() += ACTION readReflectionPropertiesAction();
saveAction 'Сохранить настройку свойства' = ACTION CUSTOM 'lsfusion.server.logics.service.reflection.SaveReflectionPropertyActionProperty' (ReflectionProperty);
WHEN CHANGED (baseValue(ReflectionProperty r)) DO saveAction(r);

FORM reflectionProperties 'Настройки свойств'
    OBJECTS r = ReflectionProperty
    PROPERTIES (r) name READONLY, value READONLY, defaultValue READONLY, baseValue
;

FORM admin 'Администрирование'
    PROPERTIES() currentDate, defaultBackgroundColor, defaultForegroundColor, 
                 selectedRowBackgroundColor, selectedRowBorderColor, selectedCellBackgroundColor, focusedCellBackgroundColor, focusedCellBorderColor,
                 reportCharWidth, reportRowHeight, reportNotToStretch, 
                 restartServerAction SHOWIF isNotServerRestarting(), cancelRestartServerAction SHOWIF isServerRestarting(), 
                 checkAggregationsAction, checkClassesAction, checkIndicesAction, checkAggregationsMultiThreadAction, checkClassesMultiThreadAction,
                 recalculateClassesAction, recalculateAction, recalculateFollowsAction, recalculateStatsAction, overCalculateStatsAction, maxQuantityOverCalculate,
                 threadCountMultiThread, recalculateClassesMultiThreadAction, recalculateMultiThreadAction, recalculateFollowsMultiThreadAction,
                 recalculateStatsMultiThreadAction, overCalculateStatsMultiThreadAction,
                 packAction, analyzeDBAction, uploadToDBAction, uploadStaticCaptionType, uploadHost, uploadUser, uploadPassword, uploadInstance, uploadDB,    
                 vacuumDBAction, serviceDBAction, serviceDBMultiThreadAction, runGarbageCollector, getVMInfo, dropLRUPercent, randomDropLRU, dropLRU, turnCacheStatsOff, makeHeapDump, 
                 TILMode, hostnameServerComputer, reupdateMode, singleTransaction,
                 turnExplainAnalizeOnCurrentUser, clearApplicationLog
    OBJECTS u=User
    PROPERTIES(u) name READONLY, nameMainRole, explainAnalyzeMode, explainMode, loggerDebugEnabled, remoteLoggerDebugEnabled, remoteExLogEnabled, nameExecEnv, volatileStatsEnabled;
;

DESIGN admin {
    NEW pane {
        type = COLUMNS;
        columns = 3;
        NEW leftColumn {
            NEW current {
                caption = 'Текущие значения';
                MOVE PROPERTY(currentDate());
            }
            NEW administration {
                caption = 'Запуск';
                MOVE PROPERTY(restartServerAction());
                MOVE PROPERTY(cancelRestartServerAction());
                MOVE PROPERTY(hostnameServerComputer());
            }    
            NEW upload {
                caption = 'Загрузить в другую базу';
                MOVE PROPERTY(uploadStaticCaptionType());
                MOVE PROPERTY(uploadHost());
                MOVE PROPERTY(uploadUser());
                MOVE PROPERTY(uploadPassword());
                MOVE PROPERTY(uploadInstance());
                MOVE PROPERTY(uploadDB());
                MOVE PROPERTY(uploadToDBAction());
            }
            NEW log {
                caption = 'Логирование';
                MOVE PROPERTY(turnExplainAnalizeOnCurrentUser());
                MOVE PROPERTY(clearApplicationLog());
            }
            NEW report {
                caption = 'Отчеты';
                MOVE PROPERTY(reportCharWidth());
                MOVE PROPERTY(reportRowHeight());
                MOVE PROPERTY(reportNotToStretch());
            }        
            NEW colors {
                caption = 'Цвета';
                MOVE PROPERTY(defaultBackgroundColor());
                MOVE PROPERTY(defaultForegroundColor());
                MOVE PROPERTY(selectedRowBackgroundColor());
                MOVE PROPERTY(selectedRowBorderColor());
                MOVE PROPERTY(selectedCellBackgroundColor());
                MOVE PROPERTY(focusedCellBackgroundColor());
                MOVE PROPERTY(focusedCellBorderColor());
            }                                        
        }
        NEW centralColumn {
            NEW oneThread {
                caption = 'Однопоточные действия';
                MOVE PROPERTY(serviceDBAction());
                NEW recalculateOneThread {
                    caption = 'Исправление целостности базы данных';
                    MOVE PROPERTY(recalculateClassesAction());
                    MOVE PROPERTY(recalculateAction());
                    MOVE PROPERTY(recalculateFollowsAction());
                    MOVE PROPERTY(recalculateStatsAction());
                    MOVE PROPERTY(overCalculateStatsAction());             
                    MOVE PROPERTY(maxQuantityOverCalculate());
                }
                NEW checkOneThread {
                    caption = 'Проверка целостности базы данных';
                    MOVE PROPERTY(checkClassesAction());
                    MOVE PROPERTY(checkAggregationsAction());
                    MOVE PROPERTY(checkIndicesAction());
                }
            NEW database {
                caption = 'База данных';
                MOVE PROPERTY(packAction());
                MOVE PROPERTY(analyzeDBAction());
                MOVE PROPERTY(vacuumDBAction());
                MOVE PROPERTY(TILMode());
                MOVE PROPERTY(reupdateMode());
                MOVE PROPERTY(singleTransaction());
            }                            
            }        
        }
        NEW rightColumn {
             NEW multiThread {
                 caption = 'Многопоточные действия';
                 MOVE PROPERTY(threadCountMultiThread());
                 MOVE PROPERTY(serviceDBMultiThreadAction());
                 NEW recalculateMultiThread {
                     caption = 'Исправление целостности базы данных';
                     MOVE PROPERTY(recalculateClassesMultiThreadAction());
                     MOVE PROPERTY(recalculateMultiThreadAction());
                     MOVE PROPERTY(recalculateFollowsMultiThreadAction());
                     MOVE PROPERTY(recalculateStatsMultiThreadAction());  
                     MOVE PROPERTY(overCalculateStatsMultiThreadAction());
                 }
                 NEW checkMultiThread {
                     caption = 'Проверка целостности базы данных';
                     MOVE PROPERTY(checkClassesMultiThreadAction());
                     MOVE PROPERTY(checkAggregationsMultiThreadAction());
                 }                  
             }  
            NEW virtualMachine {
                caption = 'Виртуальная машина';
                MOVE PROPERTY(runGarbageCollector());
                MOVE PROPERTY(getVMInfo());
                MOVE PROPERTY(dropLRUPercent());
                MOVE PROPERTY(randomDropLRU());
                MOVE PROPERTY(dropLRU());
                MOVE PROPERTY(turnCacheStatsOff());
                MOVE PROPERTY(makeHeapDump());
            }                      
        }
    }
    MOVE u.box;
    MOVE functions.box;
}

NAVIGATOR { 
    configuration {
        ADD Service.admin;
        ADD Service.reflectionProperties;
    }
}

