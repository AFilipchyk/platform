MODULE Service;

REQUIRE System, Reflection, Time;

NAMESPACE Service;

serviceDBAction 'Обслуживание БД' = ACTION CUSTOM 'lsfusion.server.logics.service.ServiceDBActionProperty' ();
checkAggregationsAction 'Проверить агрегации' = ACTION CUSTOM 'lsfusion.server.logics.service.CheckAggregationsActionProperty' ();
checkClassesAction 'Проверить классы' = ACTION CUSTOM 'lsfusion.server.logics.service.CheckClassesActionProperty' ();
recalculateClassesAction 'Пересчитать классы' = ACTION CUSTOM 'lsfusion.server.logics.service.RecalculateClassesActionProperty' ();
recalculateAction 'Пересчитать агрегации' = ACTION CUSTOM 'lsfusion.server.logics.service.RecalculateActionProperty' ();
recalculateFollowsAction 'Пересчитать следствия и ограничения' = ACTION CUSTOM 'lsfusion.server.logics.service.RecalculateFollowsActionProperty' ();
recalculateStatsAction 'Пересчитать статистику' = ACTION CUSTOM 'lsfusion.server.logics.service.RecalculateStatsActionProperty' ();

serviceDBCustomThreadAction 'Обслуживание БД (многопоточно)' = ACTION CUSTOM 'lsfusion.server.logics.service.ServiceDBMultiThreadActionProperty' (INTEGER) NULL;
checkAggregationsCustomThreadAction 'Проверить агрегации (многопоточно)' = ACTION CUSTOM 'lsfusion.server.logics.service.CheckAggregationsMultiThreadActionProperty' (INTEGER) NULL;
checkClassesCustomThreadAction 'Проверить классы (многопоточно)' = ACTION CUSTOM 'lsfusion.server.logics.service.CheckClassesMultiThreadActionProperty' (INTEGER) NULL;
recalculateClassesCustomThreadAction 'Пересчитать классы (многопоточно)' = ACTION CUSTOM 'lsfusion.server.logics.service.RecalculateClassesMultiThreadActionProperty' (INTEGER) NULL;
recalculateCustomThreadAction 'Пересчитать агрегации (многопоточно)' = ACTION CUSTOM 'lsfusion.server.logics.service.RecalculateMultiThreadActionProperty' (INTEGER) NULL;
recalculateFollowsCustomThreadAction 'Пересчитать следствия и ограничения (многопоточно)' = ACTION CUSTOM 'lsfusion.server.logics.service.RecalculateFollowsMultiThreadActionProperty' (INTEGER) NULL;
recalculateStatsCustomThreadAction 'Пересчитать статистику (многопоточно)' = ACTION CUSTOM 'lsfusion.server.logics.service.RecalculateStatsMultiThreadActionProperty' (INTEGER) NULL;

threadCountMultiThread 'Количество потоков' = DATA LOCAL INTEGER (); 
serviceDBMultiThreadAction 'Обслуживание БД (многопоточно)' = ACTION serviceDBCustomThreadAction(threadCountMultiThread());
checkAggregationsMultiThreadAction 'Проверить агрегации (многопоточно)' = ACTION checkAggregationsCustomThreadAction(threadCountMultiThread());
checkClassesMultiThreadAction 'Проверить классы (многопоточно)' = ACTION checkClassesCustomThreadAction(threadCountMultiThread());
recalculateClassesMultiThreadAction 'Пересчитать классы (многопоточно)' = ACTION recalculateClassesCustomThreadAction(threadCountMultiThread());
recalculateMultiThreadAction 'Пересчитать агрегации (многопоточно)' = ACTION recalculateCustomThreadAction(threadCountMultiThread());
recalculateFollowsMultiThreadAction 'Пересчитать следствия и ограничения (многопоточно)' = ACTION recalculateFollowsCustomThreadAction (threadCountMultiThread());
recalculateStatsMultiThreadAction 'Пересчитать статистику (многопоточно)' = ACTION recalculateStatsCustomThreadAction (threadCountMultiThread());

analyzeDBAction 'Анализ БД' = ACTION CUSTOM 'lsfusion.server.logics.service.AnalyzeDBActionProperty' ();
vacuumDBAction 'Упаковать БД' = ACTION CUSTOM 'lsfusion.server.logics.service.VacuumDBActionProperty' ();
packAction 'Упаковать таблицы' = ACTION CUSTOM 'lsfusion.server.logics.service.PackActionProperty' ();
getVMInfo 'Данные виртуальной машины' = ACTION CUSTOM 'lsfusion.server.logics.service.GetVMInfoActionProperty' ();

singleTransaction 'Перерасчет одной транзакцией' = DATA BOOLEAN ();

CLASS DBType {
    POSTGRE 'Postgre',
    MSSQL 'MS SQL'
}
uploadType 'Тип базы' = DATA DBType ();
uploadStaticNameType = staticName(uploadType()); 
uploadStaticCaptionType 'Тип базы' = staticCaption(uploadType()); 
uploadHost 'Имя сервера' = DATA VARSTRING[100] ();
uploadUser 'Пользователь' = DATA VARSTRING[100] ();
uploadPassword 'Пароль' = DATA VARSTRING[100] ();
uploadInstance 'Имя сервера БД' = DATA VARSTRING[100] ();
onStarted() += ACTION {
    uploadType() <- DBType.MSSQL;
    uploadHost() <- 'localhost';
    uploadUser() <- 'sa';
    uploadPassword() <- '11111';
    uploadInstance() <- 'SQLEXPRESS';
}
uploadDB 'Имя базы' = DATA VARSTRING[100] (); 
uploadToDBAction 'Загрузить' = ACTION CUSTOM 'lsfusion.server.logics.service.UploadToDBActionProperty' ();

META defineMode(property, action, type, caption1, caption2)
    setRepeatableRead###property caption1 = ACTION CUSTOM action (type);
    refreshRepeatableRead###property caption2() = ACTION {
        setRepeatableRead###property(property());
    }
    WHEN CHANGED(property()) DO {
        refreshRepeatableRead###property();
    }
    onStarted() += ACTION {
        refreshRepeatableRead###property();
    } 
END

TILMode 'Включен SERIALIZABLE' = DATA BOOLEAN ();
serverComputer 'Сервер' = DATA Computer();
hostnameServerComputer 'Сервер' () = hostnameComputer(serverComputer());

@defineMode(TILMode, 'lsfusion.server.logics.service.SetRepeatableReadTILModeActionProperty', BOOLEAN, 'Включить SERIALIZABLE', 'Обновить SERIALIZABLE в VM');

@defineMode(hostnameServerComputer, 'lsfusion.server.logics.service.SetHostnameServerComputerActionProperty', VARSTRING[100], 'Записать Hostname Server', 'Обновить Hostname Server');

setExplainAnalyzeModeUser 'Выводить в лог EXPLAIN ANALYZE запросов' = ACTION CUSTOM 'lsfusion.server.logics.service.SetExplainAnalyzeModeUserActionProperty' (BOOLEAN, User);
explainAnalyzeModeUser 'Включён Explain Analyze' = DATA BOOLEAN (User);
refreshExplainAnalyzeModeUser 'Обновить Explain Analyze' = ACTION (user) {
    setExplainAnalyzeModeUser(explainAnalyzeModeUser(user), user);  
}
WHEN CHANGED(explainAnalyzeModeUser(user)) DO {
    refreshExplainAnalyzeModeUser(user);
}

turnExplainAnalizeOnCurrentUser 'Включить EXPLAIN ANALYZE' () = ACTION {
    explainAnalyzeModeUser(user) <- TRUE WHERE user == currentUser();     
}

setExplainModeUser 'Выводить в лог EXPLAIN запросов' = ACTION CUSTOM 'lsfusion.server.logics.service.SetExplainModeUserActionProperty' (BOOLEAN, User);
explainModeUser 'Включён Explain' = DATA BOOLEAN (User);
refreshExplainModeUser 'Обновить Explain' = ACTION (user) {
    setExplainModeUser(explainModeUser(user), user);  
}
WHEN CHANGED(explainModeUser(user)) DO {
    refreshExplainModeUser(user);
}

setLoggerDebugEnabledUser 'Включить вывод в лог SQL запросов' = ACTION CUSTOM 'lsfusion.server.logics.service.SetLoggerDebugEnabledUserActionProperty' (BOOLEAN, User);
loggerDebugEnabledUser 'Выводить в лог SQL запросы' = DATA BOOLEAN (User);
refreshLoggerDebugEnabledUser '' = ACTION (user) {
    setLoggerDebugEnabledUser(loggerDebugEnabledUser(user), user);
}
WHEN CHANGED(loggerDebugEnabledUser(user)) DO {
    refreshLoggerDebugEnabledUser(user);
}

setRemoteLoggerDebugEnabledUser 'Включить вывод в лог действий пользователей' = ACTION CUSTOM 'lsfusion.server.logics.service.SetRemoteLoggerDebugEnabledUserActionProperty' (BOOLEAN, User);
remoteLoggerDebugEnabledUser 'Выводить в лог действия пользователей' = DATA BOOLEAN (User);
refreshRemoteLoggerDebugEnabledUser '' = ACTION (user) {
    setRemoteLoggerDebugEnabledUser(remoteLoggerDebugEnabledUser(user), user);
}
WHEN CHANGED(remoteLoggerDebugEnabledUser(user)) DO {
    refreshRemoteLoggerDebugEnabledUser(user);
}

setExLogEnabledUser 'Включить вывод в лог сист. инфо (debug)' = ACTION CUSTOM 'lsfusion.server.logics.service.SetExLogUserActionProperty' (BOOLEAN, User);
remoteExLogEnabledUser 'Выводить в лог сист. инфо (debug)' = DATA BOOLEAN (User);
refreshExLogEnabledUser '' = ACTION (user) {
    setExLogEnabledUser(remoteExLogEnabledUser(user), user);
}
WHEN CHANGED(remoteExLogEnabledUser(user)) DO {
    refreshExLogEnabledUser(user);
}

CLASS TypeExecEnv {
    materialize 'Материализация подзапросов', 
    disablenestloop 'Отключение nested loop', 
    none 'Нет'
}

captionTypeExecEnv 'Название' (type) = staticCaption (type) IN base;
idTypeExecEnv (type) = CASE EXCLUSIVE
                        WHEN type == TypeExecEnv.materialize THEN 2
                        WHEN type == TypeExecEnv.disablenestloop THEN 1
                        WHEN type == TypeExecEnv.none THEN 0 IN base;

setExecEnvUser 'Выводить в лог EXPLAIN запросов' = ACTION CUSTOM 'lsfusion.server.logics.service.SetExecEnvUserActionProperty' (INTEGER, User);
execEnvUser 'Тип адаптивного выполнения' = DATA TypeExecEnv (User);
refreshExecEnvUser 'Обновить Explain' = ACTION (user) {
    setExecEnvUser(idTypeExecEnv(execEnvUser(user)), user);  
}
WHEN CHANGED(execEnvUser(user)) DO {
    refreshExecEnvUser(user);
}
nameExecEnvUser 'Тип адаптивного выполнения' (user) = captionTypeExecEnv(execEnvUser(user));

// --------------- Удаление прикладных логов ------------------------ //

clearApplicationLog 'Очистить прикладные логи' = ABSTRACT ACTION LIST () ;

META defineLog (object, caption, container)
    countDaysClear##object 'За сколько дней хранить лог '##caption = DATA INTEGER (); 
    
    EXTEND FORM options PROPERTIES countDaysClear##object();
    DESIGN options { container { MOVE PROPERTY(countDaysClear##object());} }    
END
META defineLog (object, dateProp)
    clearApplicationLog () += ACTION () NEWSESSION {
        IF countDaysClear##object() THEN {
            DELETE d WHERE d IS object AND dateProp##object(d)<= subtractDate(currentDate(), countDaysClear##object());
        }
        apply();
    }   
END
META defineLog (object, caption, container, dateProp)
    @defineLog (object, caption, container);
    @defineLog (object, dateProp);    
END

DESIGN options {
    pane {
        NEW log {
            caption = 'Логирование';
        }
    }
}

setVolatileStatsEnabledUser 'Установить использование nested loop' = ACTION CUSTOM 'lsfusion.server.logics.service.SetVolatileStatsEnabledUserActionProperty' (BOOLEAN, User);
volatileStatsEnabledUser 'Не использовать nested loop' = DATA BOOLEAN (User);
refreshVolatileStatsEnabledUser '' = ACTION (user) {
    setVolatileStatsEnabledUser(volatileStatsEnabledUser(user), user);
}
WHEN CHANGED(volatileStatsEnabledUser(user)) DO {
    refreshVolatileStatsEnabledUser(user);
}

onStarted() += ACTION {
    FOR u IS User DO {
        refreshExplainAnalyzeModeUser(u);
        refreshExplainModeUser(u);
        refreshLoggerDebugEnabledUser(u);
        refreshVolatileStatsEnabledUser(u);
        refreshRemoteLoggerDebugEnabledUser(u);
        refreshExLogEnabledUser(u);
        refreshExecEnvUser(u);
    }
} 

setReupdateMode 'Включить REUPDATE' = ACTION CUSTOM 'lsfusion.server.logics.service.SetReupdateModeActionProperty' (BOOLEAN);
reupdateMode 'Включен REUPDATE' = DATA BOOLEAN ();
refreshReupdateMode 'Обновить REUPDATE в VM'() = ACTION {
    setReupdateMode(reupdateMode());
}
WHEN CHANGED(reupdateMode()) DO {
    refreshReupdateMode();
}
onStarted() += ACTION {
    refreshReupdateMode();
} 

restartServerAction 'Остановить сервер' = ACTION CUSTOM 'lsfusion.server.logics.service.RestartActionProperty' ();
runGarbageCollector 'Запустить сборщик мусора' = ACTION CUSTOM 'lsfusion.server.logics.service.GarbageCollectorActionProperty' ();
cancelRestartServerAction 'Отменить остановку сервера' = ACTION CUSTOM 'lsfusion.server.logics.service.CancelRestartActionProperty' ();
dropLRU 'Очистить LRU' = ACTION CUSTOM 'lsfusion.server.logics.service.DropLRUActionProperty' ();
makeHeapDump 'Сделать Heap Dump' = ACTION CUSTOM 'lsfusion.server.logics.service.MakeHeapDumpActionProperty' ();
isServerRestarting = NATIVE BOOLEAN ();
isNotServerRestarting () = NOT isServerRestarting();

CLASS ReflectionProperty 'Настройки';
TABLE reflectionProperty (ReflectionProperty);

nameReflectionProperty 'Имя настройки' = DATA VARSTRING[100] (ReflectionProperty);
reflectionPropertyName (name) = GROUP AGGR reflectionProperty BY nameReflectionProperty(reflectionProperty);
baseValueReflectionProperty 'Сохранённое значение' = DATA VARSTRING[100] (ReflectionProperty);
defaultValueReflectionProperty 'Значение по умолчанию' = DATA VARSTRING[100] (ReflectionProperty);
valueReflectionProperty 'Значение' (reflectionProperty) = OVERRIDE defaultValueReflectionProperty(reflectionProperty), baseValueReflectionProperty(reflectionProperty);

readReflectionPropertiesAction 'Прочитать настройки свойств' = ACTION CUSTOM 'lsfusion.server.logics.service.reflection.ReadReflectionPropertiesActionProperty' ();
onStarted() += ACTION readReflectionPropertiesAction();
saveReflectionPropertyAction 'Сохранить настройку свойства' = ACTION CUSTOM 'lsfusion.server.logics.service.reflection.SaveReflectionPropertyActionProperty' (ReflectionProperty);
WHEN CHANGED (baseValueReflectionProperty(r)) DO saveReflectionPropertyAction(r);

FORM reflectionProperties 'Настройки свойств'
    OBJECTS r = ReflectionProperty
    PROPERTIES (r) nameReflectionProperty READONLY, valueReflectionProperty READONLY, defaultValueReflectionProperty READONLY, baseValueReflectionProperty
;

FORM admin 'Администрирование'
    PROPERTIES() currentDate, defaultBackgroundColor, defaultForegroundColor, 
                 selectedRowBackgroundColor, selectedRowBorderColor, selectedCellBackgroundColor, focusedCellBackgroundColor, focusedCellBorderColor,
                 reportCharWidth, reportRowHeight, reportNotToStretch, 
                 restartServerAction SHOWIF isNotServerRestarting(), cancelRestartServerAction SHOWIF isServerRestarting(), 
                 checkAggregationsAction, checkClassesAction, checkAggregationsMultiThreadAction, checkClassesMultiThreadAction,
                 recalculateClassesAction, recalculateAction, recalculateFollowsAction, recalculateStatsAction,
                 threadCountMultiThread, recalculateClassesMultiThreadAction, recalculateMultiThreadAction, recalculateFollowsMultiThreadAction,
                 recalculateStatsMultiThreadAction,
                 packAction, analyzeDBAction, uploadToDBAction, uploadStaticCaptionType, uploadHost, uploadUser, uploadPassword, uploadInstance, uploadDB,    
                 vacuumDBAction, serviceDBAction, serviceDBMultiThreadAction, runGarbageCollector, getVMInfo, dropLRU, makeHeapDump, 
                 TILMode, hostnameServerComputer, reupdateMode, singleTransaction,
                 turnExplainAnalizeOnCurrentUser, clearApplicationLog
    OBJECTS u=User
    PROPERTIES(u) nameUser READONLY, explainAnalyzeModeUser, explainModeUser, loggerDebugEnabledUser, remoteLoggerDebugEnabledUser, remoteExLogEnabledUser, nameExecEnvUser, volatileStatsEnabledUser;
;

DESIGN admin {
    NEW pane {
        type = COLUMNS;
        columns = 3;
        NEW current {
            caption = 'Текущие значения';
            MOVE PROPERTY(currentDate());
        }
        NEW colors {
            caption = 'Цвета';
            MOVE PROPERTY(defaultBackgroundColor());
            MOVE PROPERTY(defaultForegroundColor());
            MOVE PROPERTY(selectedRowBackgroundColor());
            MOVE PROPERTY(selectedRowBorderColor());
            MOVE PROPERTY(selectedCellBackgroundColor());
            MOVE PROPERTY(focusedCellBackgroundColor());
            MOVE PROPERTY(focusedCellBorderColor());
        }
        NEW report {
            caption = 'Отчеты';
            MOVE PROPERTY(reportCharWidth());
            MOVE PROPERTY(reportRowHeight());
            MOVE PROPERTY(reportNotToStretch());
        }
        NEW administration {
            caption = 'Запуск';
            
            MOVE PROPERTY(restartServerAction());
            MOVE PROPERTY(cancelRestartServerAction());
            MOVE PROPERTY(hostnameServerComputer());
        }
        NEW oneThread {
            caption = 'Однопоточные действия';
            MOVE PROPERTY(serviceDBAction());
            NEW recalculateOneThread {
                caption = 'Исправление целостности базы данных';
                MOVE PROPERTY(recalculateClassesAction());
                MOVE PROPERTY(recalculateAction());
                MOVE PROPERTY(recalculateFollowsAction());
                MOVE PROPERTY(recalculateStatsAction());               
            }
            NEW checkOneThread {
                caption = 'Проверка целостности базы данных';
                MOVE PROPERTY(checkClassesAction());
                MOVE PROPERTY(checkAggregationsAction());
            }            
        }
        NEW multiThread {
            caption = 'Многопоточные действия';
            MOVE PROPERTY(threadCountMultiThread());
            MOVE PROPERTY(serviceDBMultiThreadAction());
            NEW recalculateMultiThread {
                caption = 'Исправление целостности базы данных';
                MOVE PROPERTY(recalculateClassesMultiThreadAction());
                MOVE PROPERTY(recalculateMultiThreadAction());
                MOVE PROPERTY(recalculateFollowsMultiThreadAction());
                MOVE PROPERTY(recalculateStatsMultiThreadAction());                   
            }
            NEW checkMultiThread {
                caption = 'Проверка целостности базы данных';
                MOVE PROPERTY(checkClassesMultiThreadAction());
                MOVE PROPERTY(checkAggregationsMultiThreadAction());
            }                  
        }
        NEW upload {
            caption = 'Загрузить в другую базу';
            MOVE PROPERTY(uploadStaticCaptionType());
            MOVE PROPERTY(uploadHost());
            MOVE PROPERTY(uploadUser());
            MOVE PROPERTY(uploadPassword());
            MOVE PROPERTY(uploadInstance());
            MOVE PROPERTY(uploadDB());
            MOVE PROPERTY(uploadToDBAction());
        }
        NEW database {
            caption = 'База данных';
            MOVE PROPERTY(packAction());
            MOVE PROPERTY(analyzeDBAction());
            MOVE PROPERTY(vacuumDBAction());
            MOVE PROPERTY(TILMode());
            MOVE PROPERTY(reupdateMode());
            MOVE PROPERTY(singleTransaction());
        }
        NEW virtualMachine {
            caption = 'Виртуальная машина';
            MOVE PROPERTY(runGarbageCollector());
            MOVE PROPERTY(getVMInfo());
            MOVE PROPERTY(dropLRU());
            MOVE PROPERTY(makeHeapDump());
        }
        NEW log {
            caption = 'Логирование';
            MOVE PROPERTY(turnExplainAnalizeOnCurrentUser());
            MOVE PROPERTY(clearApplicationLog());
        }
    }
    MOVE u.box;
    MOVE functions.box;
}

NAVIGATOR { 
    configuration {
        ADD Service.admin;
        ADD Service.reflectionProperties;
    }
}

