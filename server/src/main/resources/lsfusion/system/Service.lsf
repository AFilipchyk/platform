MODULE Service;

REQUIRE System, Reflection, Time;

NAMESPACE Service;

checkAggregationsAction 'Проверить агрегации' = ACTION CUSTOM 'lsfusion.server.logics.service.CheckAggregationsActionProperty';
checkClassesAction 'Проверить классы' = ACTION CUSTOM 'lsfusion.server.logics.service.CheckClassesActionProperty';
recalculateClassesAction 'Пересчитать классы' = ACTION CUSTOM 'lsfusion.server.logics.service.RecalculateClassesActionProperty';
recalculateAction 'Пересчитать агрегации' = ACTION CUSTOM 'lsfusion.server.logics.service.RecalculateActionProperty';
recalculateFollowsAction 'Пересчитать следствия и ограничения' = ACTION CUSTOM 'lsfusion.server.logics.service.RecalculateFollowsActionProperty';
analyzeDBAction 'Анализ БД' = ACTION CUSTOM 'lsfusion.server.logics.service.AnalyzeDBActionProperty';
vacuumDBAction 'Упаковать БД' = ACTION CUSTOM 'lsfusion.server.logics.service.VacuumDBActionProperty';
packAction 'Упаковать таблицы' = ACTION CUSTOM 'lsfusion.server.logics.service.PackActionProperty';
serviceDBAction 'Обслуживание БД' = ACTION CUSTOM 'lsfusion.server.logics.service.ServiceDBActionProperty';
getVMInfo 'Данные виртуальной машины' = ACTION CUSTOM 'lsfusion.server.logics.service.GetVMInfoActionProperty';

singleTransaction 'Перерасчет одной транзакцией' = DATA BOOLEAN ();

CLASS DBType {
    POSTGRE 'Postgre',
    MSSQL 'MS SQL'
}
uploadType 'Тип базы' = DATA DBType ();
uploadStaticNameType = staticName(uploadType()); 
uploadStaticCaptionType 'Тип базы' = staticCaption(uploadType()); 
uploadHost 'Имя сервера' = DATA VARSTRING[100] ();
uploadUser 'Пользователь' = DATA VARSTRING[100] ();
uploadPassword 'Пароль' = DATA VARSTRING[100] ();
uploadInstance 'Имя сервера БД' = DATA VARSTRING[100] ();
onStarted() += ACTION {
    uploadType() <- DBType.MSSQL;
    uploadHost() <- 'localhost';
    uploadUser() <- 'sa';
    uploadPassword() <- '11111';
    uploadInstance() <- 'SQLEXPRESS';
}
uploadDB 'Имя базы' = DATA VARSTRING[100] (); 
uploadToDBAction 'Загрузить' = ACTION CUSTOM 'lsfusion.server.logics.service.UploadToDBActionProperty';

setRepeatableReadTILMode 'Включить SERIALIZABLE' = ACTION CUSTOM 'lsfusion.server.logics.service.SetRepeatableReadTILModeActionProperty' (BOOLEAN);
TILMode 'Включен SERIALIZABLE' = DATA BOOLEAN ();
refreshRepeatableReadTILMode 'Обновить SERIALIZABLE в VM'() = ACTION {
    setRepeatableReadTILMode(TILMode());
}
WHEN CHANGED(TILMode()) DO {
    refreshRepeatableReadTILMode();
}
onStarted() += ACTION {
    refreshRepeatableReadTILMode();
} 

setExplainAnalyzeModeUser 'Выводить в лог EXPLAIN ANALYZE запросов' = ACTION CUSTOM 'lsfusion.server.logics.service.SetExplainAnalyzeModeUserActionProperty' (BOOLEAN, User);
explainAnalyzeModeUser 'Включён Explain Analyze' = DATA BOOLEAN (User);
refreshExplainAnalyzeModeUser 'Обновить Explain Analyze'(user) = ACTION {
    setExplainAnalyzeModeUser(explainAnalyzeModeUser(user), user);  
}
WHEN CHANGED(explainAnalyzeModeUser(user)) DO {
    refreshExplainAnalyzeModeUser(user);
}

turnExplainAnalizeOnCurrentUser 'Включить EXPLAIN ANALYZE' () = ACTION {
    explainAnalyzeModeUser(user) <- TRUE WHERE user == currentUser();     
}

setExplainModeUser 'Выводить в лог EXPLAIN запросов' = ACTION CUSTOM 'lsfusion.server.logics.service.SetExplainModeUserActionProperty' (BOOLEAN, User);
explainModeUser 'Включён Explain' = DATA BOOLEAN (User);
refreshExplainModeUser 'Обновить Explain' = ACTION (user) {
    setExplainModeUser(explainModeUser(user), user);  
}
WHEN CHANGED(explainModeUser(user)) DO {
    refreshExplainModeUser(user);
}

setLoggerDebugEnabledUser 'Включить вывод в лог SQL запросов' = ACTION CUSTOM 'lsfusion.server.logics.service.SetLoggerDebugEnabledUserActionProperty' (BOOLEAN, User);
loggerDebugEnabledUser 'Выводить в лог SQL запросы' = DATA BOOLEAN (User);
refreshLoggerDebugEnabledUser '' = ACTION (user) {
    setLoggerDebugEnabledUser(loggerDebugEnabledUser(user), user);
}
WHEN CHANGED(loggerDebugEnabledUser(user)) DO {
    refreshLoggerDebugEnabledUser(user);
}

setRemoteLoggerDebugEnabledUser 'Включить вывод в лог действий пользователей' = ACTION CUSTOM 'lsfusion.server.logics.service.SetRemoteLoggerDebugEnabledUserActionProperty' (BOOLEAN, User);
remoteLoggerDebugEnabledUser 'Выводить в лог действия пользователей' = DATA BOOLEAN (User);
refreshRemoteLoggerDebugEnabledUser '' = ACTION (user) {
    setRemoteLoggerDebugEnabledUser(remoteLoggerDebugEnabledUser(user), user);
}
WHEN CHANGED(remoteLoggerDebugEnabledUser(user)) DO {
    refreshRemoteLoggerDebugEnabledUser(user);
}

// --------------- Удаление прикладных логов ------------------------ //

clearApplicationLog 'Очистить прикладные логи' = ABSTRACT ACTION LIST () ;

META defineLog (object, caption, container)
    countDaysClear##object 'За сколько дней хранить лог '##caption = DATA INTEGER (); 
    
    EXTEND FORM options PROPERTIES countDaysClear##object();
    EXTEND DESIGN options { container { ADD PROPERTY(countDaysClear##object());} }    
END
META defineLog (object, dateProp)
    clearApplicationLog () += ACTION () NEWSESSION AUTOAPPLY {
        IF countDaysClear##object() THEN {
            DELETE d WHERE d IS object AND dateProp##object(d)<= subtractDate(currentDate(), countDaysClear##object());
        }
    }   
END
META defineLog (object, caption, container, dateProp)
    @defineLog (object, caption, container);
    @defineLog (object, dateProp);    
END

EXTEND DESIGN options {
    pane {
        NEW log {
            caption = 'Логирование';
        }
    }
}

setVolatileStatsEnabledUser 'Установить использование nested loop' = ACTION CUSTOM 'lsfusion.server.logics.service.SetVolatileStatsEnabledUserActionProperty' (BOOLEAN, User);
volatileStatsEnabledUser 'Не использовать nested loop' = DATA BOOLEAN (User);
refreshVolatileStatsEnabledUser '' = ACTION (user) {
    setVolatileStatsEnabledUser(volatileStatsEnabledUser(user), user);
}
WHEN CHANGED(volatileStatsEnabledUser(user)) DO {
    refreshVolatileStatsEnabledUser(user);
}

onStarted() += ACTION {
    FOR u IS User DO {
        refreshExplainAnalyzeModeUser(u);
        refreshExplainModeUser(u);
        refreshLoggerDebugEnabledUser(u);
        refreshVolatileStatsEnabledUser(u);
        refreshRemoteLoggerDebugEnabledUser(u);
    }
} 

setReupdateMode 'Включить REUPDATE' = ACTION CUSTOM 'lsfusion.server.logics.service.SetReupdateModeActionProperty' (BOOLEAN);
reupdateMode 'Включен REUPDATE' = DATA BOOLEAN ();
refreshReupdateMode 'Обновить REUPDATE в VM'() = ACTION {
    setReupdateMode(reupdateMode());
}
WHEN CHANGED(reupdateMode()) DO {
    refreshReupdateMode();
}
onStarted() += ACTION {
    refreshReupdateMode();
} 

restartServerAction 'Остановить сервер' = ACTION CUSTOM 'lsfusion.server.logics.service.RestartActionProperty';
runGarbageCollector 'Запустить сборщик мусора' = ACTION CUSTOM 'lsfusion.server.logics.service.GarbageCollectorActionProperty';
cancelRestartServerAction 'Отменить остановку сервера' = ACTION CUSTOM 'lsfusion.server.logics.service.CancelRestartActionProperty';
dropLRU 'Очистить LRU' = ACTION CUSTOM 'lsfusion.server.logics.service.DropLRUActionProperty';
makeHeapDump 'Сделать Heap Dump' = ACTION CUSTOM 'lsfusion.server.logics.service.MakeHeapDumpActionProperty';
isServerRestarting = NATIVE BOOLEAN ();
isNotServerRestarting () = NOT isServerRestarting();

nameReflectionSetting 'Имя настройки' = DATA SESSION VARSTRING[100] ();
valueReflectionSetting 'Значение настройки' = DATA SESSION VARSTRING[100] ();

readValueReflectionSetting = ACTION CUSTOM 'lsfusion.server.logics.service.ReadValueReflectionSettingActionProperty';
saveValueReflectionSetting = ACTION CUSTOM 'lsfusion.server.logics.service.SaveValueReflectionSettingActionProperty';

WHEN SESSION CHANGED(nameReflectionSetting()) DO readValueReflectionSetting(); 
WHEN SESSION CHANGED(valueReflectionSetting()) DO saveValueReflectionSetting(); 

FORM admin 'Администрирование'
    PROPERTIES() currentDate, defaultBackgroundColor, defaultForegroundColor, 
                 selectedRowBackgroundColor, selectedRowBorderColor, selectedCellBackgroundColor, focusedCellBackgroundColor, focusedCellBorderColor,
                 reportCharWidth, reportRowHeight, reportNotToStretch, 
                 restartServerAction SHOWIF isNotServerRestarting(), cancelRestartServerAction SHOWIF isServerRestarting(), checkAggregationsAction, checkClassesAction, 
                 recalculateClassesAction, recalculateAction, recalculateFollowsAction, packAction, analyzeDBAction, uploadToDBAction, uploadStaticCaptionType, uploadHost, uploadUser, uploadPassword, uploadInstance, uploadDB,    
                 vacuumDBAction, serviceDBAction, runGarbageCollector, getVMInfo, dropLRU, makeHeapDump, 
                 TILMode, reupdateMode, singleTransaction,
                 nameReflectionSetting, turnExplainAnalizeOnCurrentUser, clearApplicationLog,
                 valueReflectionSetting SHOWIF nameReflectionSetting()
    OBJECTS u=User
    PROPERTIES(u) nameUser READONLY, explainAnalyzeModeUser, explainModeUser, loggerDebugEnabledUser, remoteLoggerDebugEnabledUser, volatileStatsEnabledUser;
;

DESIGN admin FROM DEFAULT {
    NEW pane {
        type = COLUMNS;
        columns = 3;
        NEW current {
            caption = 'Текущие значения';
            ADD PROPERTY(currentDate());
        }
        NEW colors {
            caption = 'Цвета';
            ADD PROPERTY(defaultBackgroundColor());
            ADD PROPERTY(defaultForegroundColor());
            ADD PROPERTY(selectedRowBackgroundColor());
            ADD PROPERTY(selectedRowBorderColor());
            ADD PROPERTY(selectedCellBackgroundColor());
            ADD PROPERTY(focusedCellBackgroundColor());
            ADD PROPERTY(focusedCellBorderColor());
        }
        NEW report {
            caption = 'Отчеты';
            ADD PROPERTY(reportCharWidth());
            ADD PROPERTY(reportRowHeight());
            ADD PROPERTY(reportNotToStretch());
        }
        NEW administration {
            caption = 'Запуск';
            
            ADD PROPERTY(restartServerAction());
            ADD PROPERTY(cancelRestartServerAction());
            ADD PROPERTY(serviceDBAction());
        }
        NEW recalculate {
            caption = 'Исправление целостности базы данных';
            ADD PROPERTY(recalculateClassesAction());
            ADD PROPERTY(recalculateAction());
            ADD PROPERTY(recalculateFollowsAction());
        }
        NEW check {
            caption = 'Проверка целостности базы данных';
            ADD PROPERTY(checkClassesAction());
            ADD PROPERTY(checkAggregationsAction());
        }
        NEW upload {
            caption = 'Загрузить в другую базу';
            ADD PROPERTY(uploadStaticCaptionType());
            ADD PROPERTY(uploadHost());
            ADD PROPERTY(uploadUser());
            ADD PROPERTY(uploadPassword());
            ADD PROPERTY(uploadInstance());
            ADD PROPERTY(uploadDB());
            ADD PROPERTY(uploadToDBAction());
        }
        NEW database {
            caption = 'База данных';
            ADD PROPERTY(packAction());
            ADD PROPERTY(analyzeDBAction());
            ADD PROPERTY(vacuumDBAction());
            ADD PROPERTY(TILMode());
            ADD PROPERTY(reupdateMode());
            ADD PROPERTY(singleTransaction());
        }
        NEW virtualMachine {
            caption = 'Виртуальная машина';
            ADD PROPERTY(runGarbageCollector());
            ADD PROPERTY(getVMInfo());
            ADD PROPERTY(dropLRU());
            ADD PROPERTY(makeHeapDump());
        }
        NEW log {
            caption = 'Логирование';
            ADD PROPERTY(turnExplainAnalizeOnCurrentUser());
            ADD PROPERTY(clearApplicationLog());
        }
        NEW settings {
            caption = 'Настройка свойств';
            ADD PROPERTY(nameReflectionSetting());
            ADD PROPERTY(valueReflectionSetting());
        }        
    }
    ADD u.box;
    ADD functions.box;
}

NAVIGATOR { 
    configuration {
        ADD Service.admin;
    }
}

