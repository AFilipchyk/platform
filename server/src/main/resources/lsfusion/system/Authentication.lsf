MODULE Authentication;

REQUIRE System, Contact;

// ------------------------- Рабочие места ---------------------- //

CLASS Computer 'Рабочее место';
TABLE computer (Computer);

hostname 'Имя хоста' = DATA VARISTRING[100] (Computer) IN recognize;

// Сканер
scannerComPort 'Com-port' = DATA INTEGER (Computer);
scannerSingleRead 'Одно событие на весь штрих-код' = DATA BOOLEAN (Computer);

//Считыватель дисконтных карт
useDiscountCardReader 'Включить считыватель дисконтных карт' = DATA BOOLEAN (Computer);

FORM computer 'Рабочее место'
    OBJECTS c = Computer FIXED PANEL
    PROPERTIES(c) hostname, scannerComPort, scannerSingleRead, useDiscountCardReader
    
    EDIT Computer OBJECT c
;

FORM computers 'Рабочие места'
    OBJECTS c = Computer
    PROPERTIES(c) READONLY hostname, scannerComPort, scannerSingleRead, useDiscountCardReader
    PROPERTIES(c) ADDFORM, EDITFORM, DELETE
;

FORM computersDialog 'Рабочие места'
    OBJECTS c = Computer
    
    PROPERTIES(c) READONLY hostname, scannerComPort, scannerSingleRead, useDiscountCardReader
    PROPERTIES(c) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    
    DIALOG Computer OBJECT c     
;
DESIGN computersDialog { main{ preferredSize = (1024, 768); }}

// -------------------------- Пользователи ---------------------------- //
CLASS ABSTRACT User 'Пользователь';
TABLE user (User);

CLASS SystemUser 'Системный пользователь' : User;

CLASS CustomUser 'Обычный пользователь' : User, Contact;
TABLE customUser (CustomUser);
TABLE loginSID (STRING[30], STRING[30]);

currentUser = NATIVE User ();
currentUserName 'Имя Тек. Польз.' () = name[Contact](currentUser());

name 'Имя пользователя' (User user) = IF user IS SystemUser 
                        THEN 'Системный пользователь'
                        ELSE name[Contact](user);
name (CustomUser user) = name[User](user AS CustomUser);

currentComputer = NATIVE Computer ();
hostnameCurrentComputer 'Текущий компьютер' () = hostname(currentComputer());

isLocked 'Заблокирован' = DATA BOOLEAN (CustomUser);
login 'Логин' = DATA STRING[30] (CustomUser);
customUser 'Обычный пользователь' (login) = GROUP AGGR CustomUser customUser BY login(customUser) WHERE customUser IS CustomUser;
upcaseLogin 'Логин в верхнем регистре' (CustomUser customUser) = upper(login(customUser));
customUserUpcase 'Обычный пользователь' (login) = GROUP MAX CustomUser customUser BY upcaseLogin(customUser);
sha256Password 'Пароль' = DATA VARSTRING[100] (CustomUser) ECHO;
calculatedHash 'Значение хэш' = DATA LOCAL VARSTRING[100] ();
forbidChangePassword 'Запретить пользователю изменять пароль' = DATA BOOLEAN (CustomUser);
forbidEditProfile 'Запретить пользователю редактировать профиль' = DATA BOOLEAN (CustomUser);

lastActivity 'Последняя активность' = DATA DATETIME (CustomUser);
ignorePrintTypeCustom 'Открывать печатные формы в интерактивном режиме' = DATA BOOLEAN (User);
ignorePrintType() += ignorePrintTypeCustom(currentUser());

calculateBase64Hash 'Вычислить Base64 хэш' = ACTION CUSTOM 'lsfusion.server.logics.authentication.CalculateBase64HashActionProperty' (STRING[10], STRING[30]);
logOut 'Выйти' = ACTION CUSTOM 'lsfusion.server.logics.authentication.LogOutActionProperty' ();
relogin 'Сменить пользователя' = ACTION CUSTOM 'lsfusion.server.logics.authentication.ReloginUserActionProperty' (CustomUser);

generateLoginPassword 'Сгенерировать логин и пароль' = ACTION CUSTOM 'lsfusion.server.logics.property.actions.GenerateLoginPasswordActionProperty' (CustomUser);

restart 'Переподключить' = ACTION CUSTOM 'lsfusion.server.logics.authentication.RestartCustomUserActionProperty' (CustomUser) CONFIRM;
shutdown 'Отключить' = ACTION CUSTOM 'lsfusion.server.logics.authentication.ShutdownCustomUserActionProperty' (CustomUser) CONFIRM;

minHashLength 'Минимальное совпадение хэша пароля (символов)' = DATA INTEGER ();
useLDAP 'Использовать LDAP аутентификацию' = DATA BOOLEAN ();
serverLDAP 'Сервер' = DATA VARSTRING[100] ();
portLDAP 'Порт' = DATA INTEGER ();
baseDNLDAP 'Base DN' = DATA VARSTRING[100] ();
userDNSuffixLDAP 'Суффикс для User DN' = DATA VARSTRING[100] ();

//показ busyDialog конкретному пользователю. В будущем станет не нужным.
useBusyDialogCustom 'Показывать BusyDialog' = DATA BOOLEAN (CustomUser);
useBusyDialog () = useBusyDialogCustom[CustomUser](currentUser());

locked = DATA User (Object);
lockResult = DATA LOCAL NESTED BOOLEAN ();

lock(Object object) = ACTION NEWSESSION {    
    lockResult() <- NULL;
    APPLY SERIALIZABLE {
        IF NOT object THEN
            RETURN;
        IF locked(object) THEN {
            cancel();
        } ELSE {
            locked(object) <- currentUser();
            lockResult() <- TRUE;
        }
    }
}

unlock(Object object) = ACTION NEWSESSION { 
    APPLY locked(object) <- NULL;
}

changeSHA256Password(CustomUser customUser) = ACTION {
    REQUEST STRING[30] INPUT;
    EXEC calculateBase64Hash('SHA-256', requestedString());
    ASSIGN sha256Password(customUser) <- calculatedHash();
}

FORM customUser 'Пользователь'
    OBJECTS u=CustomUser FIXED PANEL
    PROPERTIES(u) firstName, lastName, login,
    sha256Password ON CHANGE changeSHA256Password(u), email,
    forbidChangePassword, forbidEditProfile, isLocked, lastActivity, ignorePrintTypeCustom, useBusyDialogCustom

    EDIT CustomUser OBJECT u
;

DESIGN customUser {
    NEW container BEFORE functions.box {
        type = SPLITH;
        fill = 1;
        MOVE u.box {
            flex = 0.3;
        };
        u.panel.props {
            type = COLUMNS;
            columns = 1;
        }
    }
}

FORM customUsers 'Пользователи'
    OBJECTS u=CustomUser
    PROPERTIES(u) READONLY name[Contact], login, email
    PROPERTIES(u) forbidChangePassword, forbidEditProfile, useBusyDialogCustom, isLocked READONLY,
                  lastActivity, restart, shutdown, ADDFORM, EDITFORM FORCE PANEL, DELETE FORCE PANEL TOOLBAR

    PROPERTIES() useLDAP, serverLDAP, portLDAP, baseDNLDAP, userDNSuffixLDAP, minHashLength
;

FORM customUsersDialog 'Пользователи'
    OBJECTS u=CustomUser
    PROPERTIES(u) READONLY name[Contact], login, email

    DIALOG CustomUser OBJECT u
;

DESIGN customUsersDialog { main{ preferredSize = (1024, 768); }}

FORM editProfile 'Редактировать профиль' IMAGE '/images/editReport.png'
    OBJECTS u=CustomUser FIXED PANEL
    PROPERTIES(u) login READONLY
    PROPERTIES(u) READONLYIF forbidEditProfile(u) firstName, lastName, email, useBusyDialogCustom

    FILTERS u==currentUser()
;

DESIGN editProfile {
    main{
        type = CONTAINERH;
    }
}

// ---------------- Действия по изменению пользователя ------------------- //

userChanged() = DATA LOCAL BOOLEAN();

// Смена пользователя по логину и паролю
FORM reloginLoginUser 'Сменить пользователя'
    OBJECTS data = (login = STRING[30], password = STRING[30]) FIXED PANEL
    PROPERTIES valueLogin = OBJVALUE(login), valuePassword = OBJVALUE(password)
;

DESIGN reloginLoginUser {
    main{
        data.box {
            caption = 'Смена пользователя';
            PROPERTY(valueLogin){
                caption = 'Логин';
                font = 'Tahoma 36';
            }
            PROPERTY(valuePassword){
                caption = 'Пароль';
                echoSymbols = TRUE;
                font = 'Tahoma 36';
            }
        }
        REMOVE leftControls;
        REMOVE PROPERTY(formRefresh());
    }
}

reloginLoginUser() = ACTION {
    FORM reloginLoginUser MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL user = CustomUser();
        ASSIGN user() <- customUser(chosenString('login'));
        IF user() THEN {
            IF isLocked(user()) THEN {
                MESSAGE 'Данный пользователь заблокирован';
            } ELSE {
                EXEC calculateBase64Hash('SHA-256', chosenString('password'));
                IF sha256Password(user()) == calculatedHash() THEN {
                    EXEC relogin(user());
                    IF userChanged() THEN {
                        MESSAGE 'Пользователь изменён';
                    }
                } ELSE {
                    MESSAGE 'Неверный пароль (хэш)';
                }
            }
        } ELSE {
            MESSAGE 'Пользователь не найден';
        }
    }
}

// Смена пользователя по паролю
FORM reloginPasswordUser 'Сменить пользователя'
    OBJECTS password = STRING[30] FIXED PANEL
    PROPERTIES valuePassword = OBJVALUE(password)
;

DESIGN reloginPasswordUser {
    main{
        password.box {
            caption = 'Смена пользователя';
            PROPERTY(valuePassword){
                caption = 'Пароль';
                font = 'Tahoma 36';
            }
        }
        REMOVE leftControls;
        REMOVE PROPERTY(formRefresh());
    }
}

reloginPassword(CustomUser customUser) = ACTION {
    FORM reloginPasswordUser MODAL;
    IF formResult() == FormResult.ok THEN {
        IF isLocked(customUser) THEN {
            MESSAGE 'Данный пользователь заблокирован';
        }  ELSE {
                EXEC calculateBase64Hash('SHA-256', chosenString('password'));
                IF sha256Password(customUser)==calculatedHash() THEN {
                    EXEC relogin(customUser);
                    IF userChanged() THEN {
                        MESSAGE 'Пользователь изменён';
                    }
                } ELSE {
                    MESSAGE 'Неверный пароль (хэш)';
                }
        }
    }
}

// ---------------- Действия по изменению даннных пользователя ------------------- //

FORM changePasswordUser 'Сменить пароль'
    OBJECTS u=CustomUser FIXED PANEL
    PROPERTIES(u) READONLY login

    OBJECTS passwords = (old = STRING[30], new1 = STRING[30], new2 = STRING[30]) FIXED PANEL
    PROPERTIES valueOld = OBJVALUE(old), valueNew1 = OBJVALUE(new1), valueNew2 = OBJVALUE(new2)

    FILTERS u==currentUser()
;

DESIGN changePasswordUser {
    main{
        passwords.box {
            MOVE PROPERTY(login(u)) FIRST {
               font = 'Tahoma 36';
            };
            PROPERTY(valueOld){
                caption = 'Старый пароль';
                echoSymbols = TRUE;
                font = 'Tahoma 36';
            }
            PROPERTY(valueNew1){
                caption = 'Новый пароль';
                echoSymbols = TRUE;
                font = 'Tahoma 36';
            }
            PROPERTY(valueNew2){
                caption = 'Повторите новый пароль';
                echoSymbols = TRUE;
                font = 'Tahoma 36';
            }
        }
        REMOVE leftControls;
        REMOVE PROPERTY(formRefresh());
    }
}

changePassword(CustomUser customUser) = ACTION {
    FORM changePasswordUser MODAL;
    IF formResult() == FormResult.ok THEN {
            EXEC calculateBase64Hash('SHA-256', chosenString('old'));
            IF  calculatedHash() != sha256Password(customUser) THEN {
                MESSAGE 'Неверный старый пароль (хэш)';
                BREAK;
            }

        IF chosenString('new1') != chosenString('new2') THEN {
            MESSAGE 'Введённые пароли не совпадают';
            BREAK;
        }
        //ASSIGN passwordCustomUser(customUser) <- chosenString('new1');
        EXEC calculateBase64Hash('SHA-256', chosenString('new1'));
        ASSIGN sha256Password(customUser) <- calculatedHash();
        MESSAGE 'Пароль изменён';
        }
}

changePassword() = ACTION {
      IF forbidChangePassword(currentUser()) THEN {
        MESSAGE 'Вы не можете изменить свой пароль';
      }
      ELSE {
            EXEC changePassword(currentUser());
      }
}

NAVIGATOR {
    administration {
        NEW security 'Управление доступом' AFTER application {
            ADD customUsers;
            ADD computers;
        }
    }
    NEW account 'Учётная запись' WINDOW toolbar IMAGE '/images/lock.png' {
        NEW reloginLoginUserAction 'Сменить пользователя' ACTION reloginLoginUser[] IMAGE '/images/relogin.png';
        ADD editProfile;
        NEW changePasswordAction 'Сменить пароль' ACTION changePassword[] IMAGE '/images/change_password.png';
        NEW logOutAction 'Выйти' ACTION logOut[] IMAGE '/images/logout.png';
    }
}