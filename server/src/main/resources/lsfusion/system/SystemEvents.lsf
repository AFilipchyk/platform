MODULE SystemEvents;

REQUIRE System, Reflection, Time, Service;

CLASS ABSTRACT Exception 'Исключение';
CLASS ClientException 'Исключение на клиенте' : Exception;
CLASS RemoteServerException 'Исключение на сервере (от клиента)' : ClientException;
CLASS ABSTRACT RemoteClientException 'Исключение связи' : ClientException;
CLASS UnhandledException 'Необработанное исключение связи' : RemoteClientException;
CLASS ABSTRACT HandledException 'Обработанное исключение связи' : RemoteClientException;
CLASS FatalHandledException 'Постоянное исключение связи' : HandledException;
CLASS NonFatalHandledException 'Временное исключение связи' : HandledException;
CLASS ServerException 'Исключение на сервере' : Exception;
TABLE exception (Exception);

messageException 'Сообщение исключения' = DATA VARSTRING[250] (Exception);
dateException 'Время возникновения' = DATA DATETIME (Exception);
fromDateException 'Дата возникновения' (d)= DATE(dateException(d));
erTraceException 'След исключения'= DATA TEXT (Exception) PREFCHARWIDTH 500;
typeException 'Тип исключения' = DATA VARSTRING[250] (Exception);

clientClientException 'Клиент' = DATA VARSTRING[100] (ClientException);
loginClientException 'Логин' = DATA VARSTRING[100] (ClientException);

reqIdHandledException 'ИД запроса' = DATA LONG (HandledException);
countNonFatalHandledException 'Кол-во запросов' = DATA INTEGER (NonFatalHandledException);
abandonedNonFatalHandledException 'Перест.' = DATA BOOLEAN (NonFatalHandledException);

foregroundNonFatalException(e) = IF e IS NonFatalHandledException AND NOT abandonedNonFatalHandledException(e) THEN RGB(192,192,192);

backgroundNonFatalException(e) = CASE 
            WHEN e IS RemoteClientException THEN RGB(240, 255, 255)
            WHEN e IS RemoteServerException THEN RGB(255, 240, 255)
            WHEN e IS ClientException THEN RGB(255, 255, 240);            

@defineLog (Exception, 'ошибок', log, fromDate);

CLASS Launch 'Запуск';
TABLE launch (Launch);

computerLaunch 'Компьютер' = DATA Computer (Launch);
hostnameLaunch 'Имя компьютера' (launch) = hostnameComputer(computerLaunch(launch));
timeLaunch 'Время запуска'= DATA DATETIME (Launch);
dateLaunch 'Дата' (l) = DATE(timeLaunch(l));
revisionLaunch 'Версия'= DATA VARSTRING[10] (Launch);

@defineLog (Launch, 'запусков', log, date);

CLASS Connection 'Подключение';

CLASS ConnectionStatus 'Статус подключения' {
    connectedConnection 'Подключён',
    disconnectedConnection 'Отключён'
}
FORM connectionStatuses
    OBJECTS s = ConnectionStatus
    PROPERTIES(s) READONLY staticCaption
    DIALOG ConnectionStatus OBJECT s
;

TABLE connection (Connection);
TABLE connectionNavigatorElement (Connection, NavigatorElement);

computerConnection 'Компьютер' = DATA Computer (Connection);
hostnameComputerConnection 'Имя компьютера'(connection) = hostnameComputer(computerConnection(connection));

remoteAddressConnection 'IP пользователя' = DATA VARSTRING[40] (Connection);

userConnection 'Пользователь' = DATA CustomUser (Connection);
userLoginConnection 'Логин пользователя' (connection) = loginCustomUser(userConnection(connection));

countConnectionUser 'Кол-во подключений' = GROUP SUM 1 BY userConnection(connection) PERSISTENT; 
CONSTRAINT DROPPED(u IS CustomUser) AND PREV(countConnectionUser(u))
    MESSAGE 'Запрещено удалять пользователей, которые подключались к системе';

connectionStatusConnection 'Статус подключения' =  DATA ConnectionStatus (Connection);
nameConnectionStatusConnection 'Статус подключения' (connection) = staticCaption(connectionStatusConnection(connection));

connectTimeConnection 'Время подключения' = DATA DATETIME (Connection);
connectDateConnection 'Дата подключения' (c) = DATE(connectTimeConnection(c));
disconnectTimeConnection 'Время отключения' = DATA DATETIME (Connection);
disconnectTimeConnection (connection) <- currentDateTime() WHEN SET(connectionStatusConnection(connection) == ConnectionStatus.disconnectedConnection);

disconnectConnection 'Отключить' = ACTION CUSTOM 'lsfusion.server.logics.property.actions.DisconnectActionProperty' (Connection); 

@defineLog (Connection, 'подключений', log, connectDate);

//заменили user на customUser
userSession 'Пользователь сессии' = DATA CustomUser (Session);
nameUserSession 'Пользователь сессии' (session) = nameContact(userSession(session));
userSession (session) <- currentUser() WHEN SET(session IS Session);

connectionFormCount 'Количество открытых форм' = DATA INTEGER (Connection, NavigatorElement);

CLASS Session 'Сессия';
TABLE session(Session);
TABLE sessionObject(Session, Object);

currentSession = DATA SESSION Session();

quantityAddedClassesSession 'Количество добавленных классов' = DATA INTEGER (Session);
quantityRemovedClassesSession 'Количество удалённых классов' = DATA INTEGER (Session);
quantityChangedClassesSession 'Количество изменённых классов' = DATA INTEGER (Session);
changesSession 'Изменения' = DATA TEXT (Session);

dateTimeSession 'Время' = DATA DATETIME (Session) IN recognize;
dateSession 'Дата' (s) = DATE(dateTimeSession(s));
dateTimeSession(session) <- currentDateTime() WHEN SET (session IS Session);

navigatorElementSession 'Элемент навигатора сессии' = DATA NavigatorElement (Session);
captionNavigatorElementSession 'Название формы' (session) = captionNavigatorElement(navigatorElementSession(session));

connectionSession 'Подключение сессии' = DATA Connection(Session);
hostnameComputerConnectionSession 'Имя компьютера' = hostnameComputerConnection(connectionSession(session))IN recognize;
userLoginConnectionSession 'Логин пользователя' = userLoginConnection(connectionSession(session)) IN recognize;

@defineLog (Session, 'изменений', log, date);

FORM connections 'Журнал подключений'

    OBJECTS c=Connection
    PROPERTIES (c) READONLY hostnameComputerConnection, remoteAddressConnection, userLoginConnection, nameConnectionStatusConnection,
                            connectTimeConnection, disconnectTimeConnection

    OBJECTS n=NavigatorElement
    PROPERTIES (n) READONLY captionNavigatorElement, canonicalNameNavigatorElement

    PROPERTIES (c, n) READONLY connectionFormCount

    OBJECTS s=Session
    PROPERTIES (s) READONLY captionNavigatorElementSession, nameUserSession, dateTimeSession

    FILTERS connectionFormCount(c, n)>0
    FILTERS connectionSession(s)==c
    FILTERGROUP filtersConnection
                FILTER 'Активные подключения' connectionStatusConnection(c) == ConnectionStatus.connectedConnection 'F8'
    FILTERGROUP filtersNavigatorElement
                FILTER 'Только выбранной формы' navigatorElementSession(s)==n 'F9'
;

EXTEND DESIGN connections{
    NEW boxes BEFORE functions.box {
        fill = 1;
        type = CONTAINERH;

        ADD n.box;
        ADD s.box;
    }
}

FORM  exceptions 'Журнал ошибок'

    OBJECTS e=Exception LAST
    PROPERTIES(e) FOREGROUND foregroundNonFatalException(e) BACKGROUND backgroundNonFatalException(e) READONLY messageException, clientClientException FORCE GRID, loginClientException FORCE GRID, typeException, dateException, reqIdHandledException, countNonFatalHandledException, abandonedNonFatalHandledException
    PROPERTIES(e) READONLY erTraceException FORCE PANEL
;

EXTEND DESIGN exceptions {
    main {
        NEW specContainer {
            fill = 1;
            ADD e.box;
            NEW textContainer {
                type = CONTAINERV;
                fill = 1;

                ADD PROPERTY(erTraceException(e)) {
                    fill = 0.5;
                    preferredSize = ( -1, 200);
                    panelLabelAbove = TRUE;
                }
            }
            ADD functions.box;
        }
    }
}

FORM launches 'Журнал запусков'

   OBJECTS l=Launch
   PROPERTIES(l) READONLY hostnameLaunch, timeLaunch, revisionLaunch
;

FORM changes 'Журнал изменений'

    OBJECTS s=Session
    PROPERTIES (s) READONLY captionNavigatorElementSession, hostnameComputerConnectionSession,
                            userLoginConnectionSession, quantityAddedClassesSession, quantityRemovedClassesSession,
                            quantityChangedClassesSession, gChanges = changesSession, dateTimeSession, pChanges = changesSession FORCE PANEL
    FILTERGROUP filtersChange
                    FILTER 'Только изменения пользователей' userLoginConnectionSession(s) 'F8' DEFAULT
;

EXTEND DESIGN changes {
    main {
        NEW specContainer {
            fill = 1;
            ADD s.box;
            NEW textContainer {
                type = CONTAINERV;
                fill = 1;

                ADD PROPERTY(pChanges) {
                    fill = 0.5;
                    preferredSize = ( -1, 200);
                    panelLabelAbove = TRUE;
                }
            }
            ADD functions.box;
        }
    }
}

NAVIGATOR {
    systemEvents {
        ADD SystemEvents.exceptions;
        ADD SystemEvents.connections;
        ADD SystemEvents.launches;
        ADD SystemEvents.changes;
    }
}
