MODULE SystemEvents;

REQUIRE System, Reflection, Time, Service;

CLASS ABSTRACT Exception 'Исключение';
CLASS ClientException 'Исключение на клиенте' : Exception;
CLASS WebClientException 'Исключение на web-клиенте' : ClientException;
CLASS RemoteServerException 'Исключение на сервере (от клиента)' : ClientException;
CLASS ABSTRACT RemoteClientException 'Исключение связи' : ClientException;
CLASS UnhandledException 'Необработанное исключение связи' : RemoteClientException;
CLASS ABSTRACT HandledException 'Обработанное исключение связи' : RemoteClientException;
CLASS FatalHandledException 'Постоянное исключение связи' : HandledException;
CLASS NonFatalHandledException 'Временное исключение связи' : HandledException;
CLASS ServerException 'Исключение на сервере' : Exception;
TABLE exception (Exception);

message 'Сообщение исключения' = DATA VARISTRING[250] (Exception);
date 'Время возникновения' = DATA DATETIME (Exception);
fromDate 'Дата возникновения' (Exception d)= DATE(date(d));
erTrace 'След исключения'= DATA TEXT (Exception) PREFCHARWIDTH 500;
lsfStackTrace 'LSF след исключения'= DATA TEXT (Exception) PREFCHARWIDTH 500;
type 'Тип исключения' = DATA VARSTRING[250] (Exception);

client 'Клиент' = DATA VARSTRING[100] (ClientException);
login 'Логин' = DATA VARSTRING[100] (ClientException);

reqId 'ИД запроса' = DATA LONG (HandledException);
count 'Кол-во запросов' = DATA INTEGER (NonFatalHandledException);
abandoned 'Перест.' = DATA BOOLEAN (NonFatalHandledException);

foregroundNonFatal(NonFatalHandledException e) = IF e IS NonFatalHandledException AND NOT abandoned(e) THEN RGB(192,192,192);

backgroundNonFatal(ClientException e) = CASE 
            WHEN e IS RemoteClientException THEN RGB(240, 255, 255)
            WHEN e IS RemoteServerException THEN RGB(255, 240, 255)
            WHEN e IS WebClientException THEN RGB(255, 255, 210)            
            WHEN e IS ClientException THEN RGB(255, 255, 240);            

@defineLog (Exception, 'ошибок', log, fromDate);

CLASS Launch 'Запуск';
TABLE launch (Launch);

computer 'Компьютер' = DATA Computer (Launch);
hostname 'Имя компьютера' (Launch launch) = hostname(computer(launch));
time 'Время запуска'= DATA DATETIME (Launch);
date 'Дата' (Launch l) = DATE(time(l));
revision 'Версия'= DATA VARSTRING[10] (Launch);

@defineLog (Launch, 'запусков', log, date);

CLASS Connection 'Подключение';

CLASS ConnectionStatus 'Статус подключения' {
    connectedConnection 'Подключён',
    disconnectedConnection 'Отключён'
}
FORM connectionStatuses
    OBJECTS s = ConnectionStatus
    PROPERTIES(s) READONLY staticCaption
    LIST ConnectionStatus OBJECT s
;

TABLE connection (Connection);
TABLE connectionNavigatorElement (Connection, NavigatorElement);

computer 'Компьютер' = DATA Computer (Connection);
hostnameComputer 'Имя компьютера'(Connection connection) = hostname(computer(connection));

remoteAddress 'IP пользователя' = DATA VARSTRING[40] (Connection);

user 'Пользователь' = DATA CustomUser (Connection);
userLogin 'Логин пользователя' (Connection connection) = login(user(connection));

osVersion 'Операционная система' = DATA VARSTRING[100] (Connection);
processor 'Процессор' = DATA VARSTRING[100] (Connection);
architecture 'Архитектура' = DATA VARSTRING[10] (Connection);
cores 'Количество ядер' = DATA INTEGER (Connection);
physicalMemory 'Физическая память, МБ' = DATA INTEGER (Connection);
totalMemory 'Всего память для JVM, МБ' = DATA INTEGER (Connection);
maximumMemory 'Максимально доступная память для JVM, МБ' = DATA INTEGER (Connection);
freeMemory 'Свободная память для JVM, МБ' = DATA INTEGER (Connection);
javaVersion 'Версия java' = DATA VARSTRING[100] (Connection);
is64Java '64-битная java' = DATA BOOLEAN (Connection);
screenSize 'Разрешение экрана' = DATA VARSTRING[20] (Connection);

countConnection 'Кол-во подключений' = GROUP SUM 1 BY user(Connection connection) MATERIALIZED; 
CONSTRAINT DROPPED(CustomUser u IS CustomUser) AND PREV(countConnection(u))
    MESSAGE 'Запрещено удалять пользователей, которые подключались к системе';

connectionStatus 'Статус подключения' =  DATA ConnectionStatus (Connection) INDEXED;
INDEX user(Connection c), connectionStatus(c);
nameConnectionStatus 'Статус подключения' (Connection connection) = staticCaption(connectionStatus(connection));

connectTime 'Время подключения' = DATA DATETIME (Connection);
connectDate 'Дата подключения' (Connection c) = DATE(connectTime(c));
disconnectTime 'Время отключения' = DATA DATETIME (Connection);
disconnectTime (Connection connection) <- currentDateTime() WHEN SET(connectionStatus(connection) == ConnectionStatus.disconnectedConnection);

currentLaunch = DATA Launch();
launch = DATA Launch(Connection);

onStarted() += {
    connectionStatus(connection) <- ConnectionStatus.disconnectedConnection 
        WHERE connectionStatus(connection) == ConnectionStatus.connectedConnection AND currentLaunch() != launch(connection);
}

reconnect 'Переподключить' (CustomUser user) = {
    FOR user(Connection conn) == user AND connectionStatus(conn) == ConnectionStatus.connectedConnection DO {
            NEWSESSION { NEWTHREAD reconnect(); CONNECTION conn; }
        }
} CONFIRM;

shutdown 'Отключить' (CustomUser user) = {
    FOR user(Connection conn) == user AND connectionStatus(conn) == ConnectionStatus.connectedConnection DO {
            NEWSESSION { NEWTHREAD shutdown(); CONNECTION conn; }
        }
} CONFIRM;

hasConnectedConnections (CustomUser user) = GROUP SUM 1 IF user(Connection conn) == CustomUser user AND connectionStatus(conn) == ConnectionStatus.connectedConnection BY user;

fileUserLogs = DATA CUSTOMFILE (Connection);
userLogs () = CUSTOM 'lsfusion.server.logics.systemevents.UserLogsActionProperty' ();
requestUserLogs 'Запросить логи' (CustomUser user) = {
    FOR user(Connection conn) == user AND connectionStatus(conn) == ConnectionStatus.connectedConnection DO {
        NEWSESSION { fileUserLogs(conn) <- NULL; apply(); } 
        NEWSESSION NEWTHREAD userLogs(); CONNECTION conn;
    }
}
openUserLogs 'Открыть логи' (CustomUser user) = {
    IF hasConnectedConnections(user) THEN {
        FOR user(Connection conn) == user AND connectionStatus(conn) == ConnectionStatus.connectedConnection AND fileUserLogs(conn) DO {
            OPEN fileUserLogs(conn) NAME userLogin(conn) + '-log';
        } ELSE {
            MESSAGE 'Логи ещё не получены. Ожидайте';
        }
    }
}

fileThreadDump = DATA CUSTOMFILE (Connection);
threadDump () = CUSTOM 'lsfusion.server.logics.systemevents.ThreadDumpActionProperty' ();
requestThreadDump 'Запросить ThreadDump' (CustomUser user) = {
    FOR user(Connection conn) == user AND connectionStatus(conn) == ConnectionStatus.connectedConnection DO {
        NEWSESSION { fileThreadDump(conn) <- NULL; apply(); } 
        NEWSESSION NEWTHREAD threadDump(); CONNECTION conn;
    }
}
openThreadDump 'Открыть ThreadDump' (CustomUser user) = {
    IF hasConnectedConnections(user) THEN {
        FOR user(Connection conn) == user AND connectionStatus(conn) == ConnectionStatus.connectedConnection AND fileThreadDump(conn) DO {
            OPEN fileThreadDump(conn) NAME userLogin(conn) + '-dump';
        } ELSE {
            MESSAGE 'ThreadDump ещё не получен. Ожидайте';
        }
    }
}

EXTEND FORM customUsers PROPERTIES(u) GRID reconnect, shutdown, 
                                      requestUserLogs, openUserLogs, requestThreadDump, openThreadDump;

@defineLog (Connection, 'подключений', log, connectDate);

currentConnection = NATIVE Connection();

//заменили user на customUser
user 'Пользователь сессии' = DATA User (Session);
nameUser 'Пользователь сессии' (Session session) = name(user(session));
nameContact 'Пользователь сессии' (Session session) = name[Contact](user(session));
user (Session session) <- currentUser() WHEN SET(session IS Session);

connectionFormCount 'Количество открытых форм' = DATA INTEGER (Connection, Form);

CLASS Session 'Сессия';
TABLE session(Session);
TABLE sessionObject(Session, Object);

currentSession = DATA LOCAL Session();

quantityAddedClasses 'Количество добавленных классов' = DATA INTEGER (Session);
quantityRemovedClasses 'Количество удалённых классов' = DATA INTEGER (Session);
quantityChangedClasses 'Количество изменённых классов' = DATA INTEGER (Session);
changes 'Изменения' = DATA TEXT (Session);

dateTime 'Время' = DATA DATETIME (Session) IN recognize;
date 'Дата' (Session s) = DATE(dateTime(s));
dateTime(Session session) <- currentDateTime() WHEN SET (session IS Session);

form 'Форма сессии' = DATA Form (Session);
captionForm 'Название формы' (Session session) = caption(form(session));

connection 'Подключение сессии' = DATA Connection(Session) INDEXED;
hostnameComputerConnection 'Имя компьютера' = hostnameComputer(connection(Session session))IN recognize;
userLoginConnection 'Логин пользователя' = userLogin(connection(Session session)) IN recognize;

@defineLog (Session, 'изменений', log, date);

TABLE pingTable(Computer, DATETIME, DATETIME);
pingFromTo 'Пинг (мс)' = DATA INTEGER (Computer, DATETIME, DATETIME);
minTotalMemoryFromTo 'Минимум памяти' = DATA INTEGER (Computer, DATETIME, DATETIME);
maxTotalMemoryFromTo 'Максимум памяти' = DATA INTEGER (Computer, DATETIME, DATETIME);
minUsedMemoryFromTo 'Минимум использованной памяти' = DATA INTEGER (Computer, DATETIME, DATETIME);
maxUsedMemoryFromTo 'Максимум использованной памяти' = DATA INTEGER (Computer, DATETIME, DATETIME);

lastConnection(computer) = GROUP LAST Connection connection BY computer(connection) ORDER connection;
remoteAddress 'IP пользователя' (Computer computer) = remoteAddress(lastConnection(computer));
osVersion 'Операционная система' (Computer computer) = osVersion(lastConnection(computer));
processor 'Процессор' (Computer computer) = processor(lastConnection(computer));
architecture 'Архитектура' (Computer computer) = architecture(lastConnection(computer));
cores 'Количество ядер' (Computer computer) = cores(lastConnection(computer));
physicalMemory 'Физическая память, МБ' (Computer computer) = physicalMemory(lastConnection(computer));
totalMemory 'Всего память для JVM, МБ' (Computer computer) = totalMemory(lastConnection(computer));
maximumMemory 'Максимально доступная память для JVM, МБ' (Computer computer) = maximumMemory(lastConnection(computer));
freeMemory 'Свободная память для JVM, МБ' (Computer computer) = freeMemory(lastConnection(computer));
javaVersion 'Версия java' (Computer computer) = javaVersion(lastConnection(computer));
is64Java '64-битная java' (Computer computer) = is64Java(lastConnection(computer));

countDaysClearPings 'За сколько дней хранить статистику пингов и памяти' = DATA INTEGER (); 

onClientStarted = ABSTRACT LIST ();

onWebClientStarted = ABSTRACT LIST ();
    
EXTEND FORM options PROPERTIES countDaysClearPings();
DESIGN options { log { MOVE PROPERTY(countDaysClearPings());} }    
    
clearApplicationLog () += {
	NEWSESSION {
	    IF countDaysClearPings() THEN {
	        pingFromTo(Computer c, DATETIME dFrom, DATETIME dTo) <- NULL WHERE dTo <= subtractDay(currentDateTime(), countDaysClearPings());
	        minTotalMemoryFromTo(Computer c, DATETIME dFrom, DATETIME dTo) <- NULL WHERE dTo <= subtractDay(currentDateTime(), countDaysClearPings());
	        maxTotalMemoryFromTo(Computer c, DATETIME dFrom, DATETIME dTo) <- NULL WHERE dTo <= subtractDay(currentDateTime(), countDaysClearPings());
	        minUsedMemoryFromTo(Computer c, DATETIME dFrom, DATETIME dTo) <- NULL WHERE dTo <= subtractDay(currentDateTime(), countDaysClearPings());
	        maxUsedMemoryFromTo(Computer c, DATETIME dFrom, DATETIME dTo) <- NULL WHERE dTo <= subtractDay(currentDateTime(), countDaysClearPings());
	    }
	    apply();
	}
}   

FORM connections 'Журнал подключений'

    OBJECTS c=Connection
    PROPERTIES (c) READONLY hostnameComputer, remoteAddress, userLogin, osVersion,
                            javaVersion, is64Java, screenSize, processor, architecture, cores, physicalMemory,
                            totalMemory, maximumMemory, freeMemory, nameConnectionStatus, connectTime,
                            disconnectTime

    OBJECTS n=Form
    PROPERTIES (n) READONLY caption, canonicalName

    PROPERTIES (c, n) READONLY connectionFormCount

    OBJECTS s=Session
    PROPERTIES (s) READONLY captionForm, nameUser, dateTime

    FILTERS connectionFormCount(c, n)>0
    FILTERS connection(s)==c
    FILTERGROUP filtersConnection
                FILTER 'Активные подключения' connectionStatus(c) == ConnectionStatus.connectedConnection 'F8'
    FILTERGROUP filtersNavigatorElement
                FILTER 'Только выбранной формы' form(s)==n 'F9'
;

DESIGN connections{
    NEW boxes BEFORE TOOLBARBOX {
        fill = 1;
        type = CONTAINERH;

        MOVE BOX(n);
        MOVE BOX(s);
    }
}

FORM  exceptions 'Журнал ошибок'

    OBJECTS e=Exception LAST
    PROPERTIES(e) FOREGROUND foregroundNonFatal(e) BACKGROUND backgroundNonFatal(e) READONLY objectClassName, message, client , login , type, date, reqId PANEL, count PANEL, abandoned PANEL
    PROPERTIES(e) READONLY PANEL erTrace, lsfStackTrace
;

DESIGN exceptions {
    BOX {
        NEW specContainer {
            fill = 1;
            MOVE BOX(e);
            NEW textContainer {
                type = CONTAINERH;
                fill = 1;

                MOVE PROPERTY(erTrace(e)) {
                    fill = 0.5;
                    preferredValueSize = ( -1, 200);
                    panelCaptionAbove = TRUE;
                }
                MOVE PROPERTY(lsfStackTrace(e)) {
                    fill = 0.5;
                    preferredValueSize = ( -1, 200);
                    panelCaptionAbove = TRUE;
                }
            }
            MOVE TOOLBARBOX;
        }
    }
}

FORM launches 'Журнал запусков'

   OBJECTS l=Launch
   PROPERTIES(l) READONLY hostname, time, revision
;

FORM changes 'Журнал изменений'

    OBJECTS s=Session
    PROPERTIES (s) READONLY captionForm, hostnameComputerConnection,
                            userLoginConnection, quantityAddedClasses, quantityRemovedClasses,
                            quantityChangedClasses, gChanges = changes, dateTime, pChanges = changes PANEL
    FILTERGROUP filtersChange
                    FILTER 'Только изменения пользователей' userLoginConnection(s) 'F8' DEFAULT
;

DESIGN changes {
    BOX {
        NEW specContainer {
            fill = 1;
            MOVE BOX(s);
            NEW textContainer {
                type = CONTAINERV;
                fill = 1;

                MOVE PROPERTY(pChanges) {
                    fill = 0.5;
                    preferredValueSize = ( -1, 200);
                    panelCaptionAbove = TRUE;
                }
            }
            MOVE TOOLBARBOX;
        }
    }
}

limitPing 'Пороговый пинг (мс)' = DATA INTEGER ();
limitPingSum 'Суммарное время выше порога, секунд' (computer, limitDFrom, limitDTo) = GROUP SUM subtractSeconds(DATETIME dFrom, DATETIME dTo) BY Computer computer, DATETIME limitDFrom, DATETIME limitDTo
    IF pingFromTo(computer, dFrom, dTo) > limitPing() AND limitDFrom < dFrom AND limitDTo > dTo;
averagePingDateFrom 'Средний пинг (мс)' (Computer computer, DATETIME limitDFrom, DATETIME limitDTo) = 
    [=GROUP SUM pingFromTo(Computer computer, DATETIME dFrom, DATETIME dTo) * subtractSeconds(dFrom, dTo) BY computer, DATETIME limitDFrom, DATETIME limitDTo IF limitDFrom < dFrom AND limitDTo > dTo] (computer, limitDFrom, limitDTo) / 
    [=GROUP SUM subtractSeconds(DATETIME dFrom, DATETIME dTo) BY Computer computer, DATETIME limitDFrom, DATETIME limitDTo IF pingFromTo(computer, dFrom, dTo) AND limitDFrom < dFrom AND limitDTo > dTo] (computer, limitDFrom, limitDTo);
    
limitMaxTotalMemory 'Пороговая память' = DATA INTEGER();
limitMaxTotalMemorySum 'Суммарное время выше порога памяти, секунд' (computer, limitDFrom, limitDTo) = GROUP SUM subtractSeconds(DATETIME dFrom, DATETIME dTo) BY Computer computer, DATETIME limitDFrom, DATETIME limitDTo
    IF maxTotalMemoryFromTo(computer, dFrom, dTo) > limitMaxTotalMemory() AND limitDFrom < dFrom AND limitDTo > dTo;
averageMaxTotalMemoryDateFrom 'Средняя память, МБ' (Computer computer, DATETIME limitDFrom, DATETIME limitDTo) = 
    [=GROUP SUM maxTotalMemoryFromTo(Computer computer, DATETIME dFrom, DATETIME dTo) * subtractSeconds(dFrom, dTo) BY computer, DATETIME limitDFrom, DATETIME limitDTo IF limitDFrom < dFrom AND limitDTo > dTo] (computer, limitDFrom, limitDTo) / 
    [=GROUP SUM subtractSeconds(DATETIME dFrom, DATETIME dTo) BY Computer computer, DATETIME limitDFrom, DATETIME limitDTo IF maxTotalMemoryFromTo(computer, dFrom, dTo) AND limitDFrom < dFrom AND limitDTo > dTo] (computer, limitDFrom, limitDTo);        

limitMaxUsedMemory 'Пороговая использованная память' = DATA INTEGER();   
limitMaxUsedMemorySum 'Суммарное время выше порога использованной памяти, секунд' (computer, limitDFrom, limitDTo) = GROUP SUM subtractSeconds(DATETIME dFrom, DATETIME dTo) BY Computer computer, DATETIME limitDFrom, DATETIME limitDTo
    IF maxUsedMemoryFromTo(computer, dFrom, dTo) > limitMaxUsedMemory() AND limitDFrom < dFrom AND limitDTo > dTo;
averageMaxUsedMemoryDateFrom 'Средняя использованная память, МБ' (Computer computer, DATETIME limitDFrom, DATETIME limitDTo) = 
    [=GROUP SUM maxUsedMemoryFromTo(Computer computer, DATETIME dFrom, DATETIME dTo) * subtractSeconds(dFrom, dTo) BY computer, DATETIME limitDFrom, DATETIME limitDTo IF limitDFrom < dFrom AND limitDTo > dTo] (computer, limitDFrom, limitDTo) / 
    [=GROUP SUM subtractSeconds(DATETIME dFrom, DATETIME dTo) BY Computer computer, DATETIME limitDFrom, DATETIME limitDTo IF maxUsedMemoryFromTo(computer, dFrom, dTo) AND limitDFrom < dFrom AND limitDTo > dTo] (computer, limitDFrom, limitDTo);        

FORM pings 'Журнал клиентских приложений'
    OBJECTS limits = (limitDFrom = DATETIME, limitDTo = DATETIME) PANEL, c = Computer, dates = (dFrom = DATETIME, dTo = DATETIME)
    PROPERTIES(c) READONLY hostname, remoteAddress, osVersion, processor, architecture, cores, 
                           physicalMemory, totalMemory, maximumMemory, freeMemory,
                           javaVersion, is64Java                                       
    PROPERTIES dFromObj = VALUE(dFrom), dToObj = VALUE(dTo), limitDFromObj = VALUE(limitDFrom), limitDToObj = VALUE(limitDTo),
               limitPing() TODRAW limits, limitMaxTotalMemory() TODRAW limits, limitMaxUsedMemory() TODRAW limits, subtractSeconds(dFrom, dTo)
    PROPERTIES(c, limitDFrom, limitDTo) TODRAW c averagePingDateFrom, averageMaxTotalMemoryDateFrom, averageMaxUsedMemoryDateFrom, 
                                                 limitPingSum, limitMaxTotalMemorySum, limitMaxUsedMemorySum
    PROPERTIES(c,dFrom,dTo) READONLY pingFromTo, 
                            minTotalMemoryFromTo, maxTotalMemoryFromTo,
                            minUsedMemoryFromTo, maxUsedMemoryFromTo
    FILTERS pingFromTo(c,dFrom,dTo)
    
    OBJECTS cn = Connection
    PROPERTIES (cn) READONLY hostnameComputer, remoteAddress, userLogin, osVersion,
                             javaVersion, is64Java, screenSize, processor, architecture, cores, physicalMemory,
                             totalMemory, maximumMemory, freeMemory, nameConnectionStatus, connectTime,
                             disconnectTime
    FILTERS computer(cn) == c
    FILTERGROUP filtersConnection
                    FILTER 'Активные подключения' connectionStatus(cn) == ConnectionStatus.connectedConnection 'F8'
;

DESIGN pings {
    NEW computer {
        fill = 1;
        MOVE BOX(c);
    }
    NEW options {
        fill = 1;
        type = TABBED;
        NEW data {
            caption = 'Данные';
            MOVE BOX(dates);
            PROPERTY(dFromObj) { caption = 'Время (с)'; }
            PROPERTY(dToObj) { caption = 'Время (по)'; }
            PROPERTY(subtractSeconds(dFrom, dTo)) { caption = 'Промежуток в секундах'; }
        }
        NEW connections {
            caption = 'Подключения';
            MOVE BOX(cn);
        }
    }
    MOVE TOOLBARBOX;
    PROPERTY(limitDFromObj) { caption = 'Время (с)'; }
    PROPERTY(limitDToObj) { caption = 'Время (по)'; }    
}

NAVIGATOR {
    systemEvents {
        NEW SystemEvents.exceptions;
        NEW SystemEvents.connections;
        NEW SystemEvents.launches;
        NEW SystemEvents.changes;
        NEW SystemEvents.pings;
    }
}
