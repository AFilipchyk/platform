MODULE Reflection;

REQUIRE System, Authentication;

CLASS PropertyGroup 'Родит. группа';
TABLE propertyGroup (PropertyGroup);

TABLE propertyGroupPropertyGroup (PropertyGroup, PropertyGroup);
parentPropertyGroup 'Родит. группа' = DATA PropertyGroup (PropertyGroup);
levelPropertyGroupPropertyGroup 'Уровень' (child, parent) = RECURSION 1l IF child IS PropertyGroup AND parent == child
                                                                      STEP 2l IF parent == parentPropertyGroup($parent) PERSISTENT;

captionPropertyGroup 'Имя' = DATA VARSTRING[250] (PropertyGroup);
numberPropertyGroup 'Номер' = DATA INTEGER (PropertyGroup);
SIDPropertyGroup 'Код свойства' = DATA VARSTRING[100] (PropertyGroup);
propertyGroupSID 'Свойство' (sID) = GROUP AGGR propertyGroup BY SIDPropertyGroup(propertyGroup) WHERE propertyGroup IS PropertyGroup;

CLASS NavigatorElement 'Элемент навигатора';
CLASS NavigatorAction 'Действие' : NavigatorElement;
CLASS Form 'Форма' : NavigatorElement;
TABLE navigatorElement (NavigatorElement);

captionNavigatorElement 'Название формы' = DATA VARSTRING[250] (NavigatorElement);
sidNavigatorElement 'Код формы' = DATA VARSTRING[50] (NavigatorElement);
canonicalNameNavigatorElement 'Каноническое имя формы' = DATA VARSTRING[100] (NavigatorElement);
numberNavigatorElement 'Номер' = DATA INTEGER (NavigatorElement);
navigatorElementSID 'Форма' (sID) = GROUP AGGR navigatorElement BY sidNavigatorElement(navigatorElement) WHERE navigatorElement IS NavigatorElement;
navigatorElementCanonicalName 'Форма' (sid) = GROUP AGGR navigatorElement BY canonicalNameNavigatorElement(navigatorElement) WHERE navigatorElement IS NavigatorElement;
parentNavigatorElement 'Родит. форма' = DATA NavigatorElement (NavigatorElement);
isNavigatorElement (navigatorElement) = navigatorElement IS NavigatorElement AND NOT navigatorElement IS Form AND NOT navigatorElement IS NavigatorAction;
isForm (form) = form IS Form;
isNavigatorAction (navigatorAction) = navigatorAction IS NavigatorAction;

CLASS Property 'Свойство';
TABLE property (Property);

parentProperty 'Родит. группа' = DATA PropertyGroup (Property);
numberProperty 'Номер' = DATA INTEGER (Property);
dbNameProperty 'Код свойства' = DATA VARSTRING[100] (Property) IN base;
canonicalNameProperty 'Имя свойства' = DATA VARSTRING[512] (Property) IN recognize;
shortNameProperty 'Имя свойства' (Property p) = leftTo(canonicalNameProperty(p), '[');
loggableProperty 'Логируется' = DATA BOOLEAN (Property);
userLoggableProperty 'Логируется пользователем' = DATA BOOLEAN (Property);
storedProperty 'Постоянно хранимое' = DATA BOOLEAN (Property);
isSetNotNullProperty 'Не может быть null' = DATA BOOLEAN (Property);
signatureProperty 'Сигнатура' = DATA VARSTRING[100] (Property);
returnProperty 'Возвращаемый класс' = DATA VARSTRING[100] (Property);
classProperty 'Класс свойства' = DATA VARSTRING[100] (Property);
complexityProperty 'Сложность свойства' = DATA LONG (Property);
captionProperty 'Заголовок' = DATA VARSTRING[250] (Property) IN base;
tableSIDProperty 'Таблица' = DATA VARSTRING[100] (Property);

propertySID 'Свойство' (sID) = GROUP NAGGR property BY dbNameProperty(property) WHERE property IS Property; // todo [dale]: временно, нужно для миграции на 15 версию БД
propertyCanonicalName 'Свойство' (cn) = GROUP AGGR property BY canonicalNameProperty(property) WHERE property IS Property;
propertyTableSID 'Свойство' (string, sID) = GROUP AGGR property BY tableSIDProperty(property), dbNameProperty(property) WHERE storedProperty(property);

CLASS PropertyDraw 'Свойство на форме';

CLASS PropertyDrawShowStatus 'Показ свойства' {
    Show 'Показать',
    Hide 'Спрятать'
}
FORM propertyDrawShowStatuses
    OBJECTS s = PropertyDrawShowStatus
    PROPERTIES(s) staticCaption
    DIALOG PropertyDrawShowStatus OBJECT s
;

TABLE formPropertyDraw (Form, PropertyDraw);
TABLE propertyDraw (PropertyDraw);
TABLE propertyDrawCustomUser (PropertyDraw, CustomUser);

sidPropertyDraw 'Код свойства на форме' = DATA VARSTRING[100] (PropertyDraw);
captionPropertyDraw 'Название свойства на форме' = DATA VARSTRING[250] (PropertyDraw);
formPropertyDraw 'Форма' = DATA Form (PropertyDraw) INDEXED;
groupObjectPropertyDraw 'Группа объектов' = DATA GroupObject (PropertyDraw);
propertyDrawFormSID 'Свойство на форме' (form, sID) = GROUP AGGR propertyDraw BY formPropertyDraw (propertyDraw), sidPropertyDraw (propertyDraw) WHERE propertyDraw IS PropertyDraw;
propertyDrawSIDNavigatorElementNamePropertyDraw 'Код формы' (str1, str2) = propertyDrawFormSID (navigatorElementCanonicalName(str1), str2);

showPropertyDraw 'Показ свойства' = DATA PropertyDrawShowStatus (PropertyDraw);
showPropertyDrawCustomUser 'Показ свойства для пользователя' = DATA PropertyDrawShowStatus (PropertyDraw, CustomUser);

nameShowPropertyDraw 'Показ свойства' (propertyDraw) = staticName(showPropertyDraw (propertyDraw)) PREFCHARWIDTH 50;
nameShowPropertyDrawCustomUser 'Показ свойства для пользователя' (propertyDraw, customUser) = staticName(showPropertyDrawCustomUser(propertyDraw, customUser)) PREFCHARWIDTH 50;

captionShowPropertyDraw 'Показ свойства' (propertyDraw) = staticCaption(showPropertyDraw (propertyDraw)) PREFCHARWIDTH 20;
captionShowPropertyDrawCustomUser 'Показ свойства для пользователя' (propertyDraw, customUser) = staticCaption(showPropertyDrawCustomUser(propertyDraw, customUser)) PREFCHARWIDTH 20;

columnCaptionPropertyDrawCustomUser 'Заголовок свойства для пользователя' = DATA VARSTRING[100] (PropertyDraw, CustomUser);
columnCaptionPropertyDraw 'Заголовок свойства' = DATA VARSTRING[100] (PropertyDraw);

columnWidthPropertyDrawCustomUser 'Ширина для пользователя' = DATA INTEGER (PropertyDraw, CustomUser);
columnWidthPropertyDraw 'Ширина' = DATA INTEGER (PropertyDraw);

columnOrderPropertyDrawCustomUser 'Порядок для пользователя' = DATA INTEGER (PropertyDraw, CustomUser);
columnOrderPropertyDraw 'Порядок' = DATA INTEGER (PropertyDraw);

columnSortPropertyDrawCustomUser 'Сортировка для пользователя' = DATA INTEGER (PropertyDraw, CustomUser);
columnSortPropertyDraw 'Сортировка' = DATA INTEGER (PropertyDraw);

columnAscendingSortPropertyDrawCustomUser 'Восходящая сортировка для пользователя' = DATA BOOLEAN (PropertyDraw, CustomUser);
columnAscendingSortPropertyDraw 'Восходящая сортировка' = DATA BOOLEAN (PropertyDraw);

hasUserPreferencesGroupObjectCustomUser 'Настройки сохранены для пользователя'= DATA BOOLEAN (GroupObject, CustomUser);
countShowPropertyDrawGroupObjectCustomUser(g, u) = GROUP SUM 1 IF showPropertyDrawCustomUser(property, user) == PropertyDrawShowStatus.Show BY groupObjectPropertyDraw(property), user;
CONSTRAINT hasUserPreferencesGroupObjectCustomUser(g, u) AND NOT countShowPropertyDrawGroupObjectCustomUser(g, u) MESSAGE 'Настройки не сохранены: спрятаны все колонки';
hasUserPreferencesGroupObject 'Настройки сохранены' = DATA BOOLEAN (GroupObject);
countShowPropertyDrawGroupObject(g) = GROUP SUM 1 IF showPropertyDraw(property) == PropertyDrawShowStatus.Show BY groupObjectPropertyDraw(property);
CONSTRAINT hasUserPreferencesGroupObject(g) AND NOT countShowPropertyDrawGroupObject(g) MESSAGE 'Настройки не сохранены: спрятаны все колонки';
hasUserPreferencesOverrideGroupObjectCustomUser 'Настройки сохранены' (groupObject, customUser) = OVERRIDE hasUserPreferencesGroupObject(groupObject) IF customUser IS CustomUser, hasUserPreferencesGroupObjectCustomUser(groupObject, customUser);

fontSizeGroupObjectCustomUser 'Размер шрифта для пользователя'= DATA INTEGER (GroupObject, CustomUser);
fontSizeGroupObject 'Размер шрифта' = DATA INTEGER (GroupObject);

isFontBoldGroupObjectCustomUser 'Полужирный шрифт для пользователя'= DATA BOOLEAN (GroupObject, CustomUser);
isFontBoldGroupObject 'Полужирный шрифт' = DATA BOOLEAN (GroupObject);

isFontItalicGroupObjectCustomUser 'Курсивный шрифт для пользователя'= DATA BOOLEAN (GroupObject, CustomUser);
isFontItalicGroupObject 'Курсивный шрифт' = DATA BOOLEAN (GroupObject);

pageSizeGroupObjectCustomUser 'Размер страницы для пользователя'= DATA INTEGER (GroupObject, CustomUser);
pageSizeGroupObject 'Размер шрифта' = DATA INTEGER (GroupObject);

CLASS Table 'Таблица';
TABLE tables (Table);

sidTable 'Имя таблицы' = DATA VARSTRING[100] (Table);
tableSID 'Имя таблицы' (sID) = GROUP AGGR table BY sidTable (table) WHERE table IS Table;
rowsTable 'Количество записей' = DATA INTEGER (Table);
tableTableKey 'Таблица' = DATA Table (TableKey);

CLASS TableKey 'Ключ';
TABLE tableKey (TableKey);

sidTableKey 'Код ключа' = DATA VARSTRING[100] (TableKey);
tableKeySID 'Ключ' (sID) = GROUP AGGR tableKey BY sidTableKey (tableKey) WHERE tableKey IS TableKey;
classTableKey 'Класс ключа' = DATA VARSTRING[40] (TableKey);
nameTableKey 'Имя ключа' = DATA VARSTRING[20] (TableKey);
quantityTableKey 'Количество разновидностей' = DATA INTEGER (TableKey);

CLASS TableColumn 'Колонка';
TABLE tableColumn (TableColumn);

tableTableColumn 'Таблица' = DATA Table(TableColumn);
sidTableColumn 'Имя колонки' = DATA VARSTRING[100] (TableColumn);

longSIDTableColumn(tableColumn) = sidTable(tableTableColumn(tableColumn)) + '.' + sidTableColumn(tableColumn);
tableColumnSID 'Колонка' (sID) = GROUP AGGR tableColumn BY longSIDTableColumn(tableColumn) WHERE tableColumn IS TableColumn; 
propertyTableColumn 'Свойство' (tableColumn) = propertyTableSID(sidTable(tableTableColumn(tableColumn)), sidTableColumn(tableColumn));
captionTableColumn 'Заголовок свойства' (tableColumn) = captionProperty(propertyTableColumn(tableColumn));
canonicalNameTableColumn 'Каноническое имя свойства' (tableColumn) = canonicalNameProperty(propertyTableColumn(tableColumn));
quantityTableColumn 'Количество разновидностей' = DATA INTEGER (TableColumn);
notNullQuantityTableColumn 'Количество не null значений' = DATA INTEGER (TableColumn);
toNumeric15p2(w) = NUMERIC[15,2](w);

percentNotNullTableColumn 'Не null, %' (tableColumn) = IF rowsTable (tableTableColumn(tableColumn)) == 0
                                                          THEN 100.00
                                                          ELSE toNumeric15p2(notNullQuantityTableColumn(tableColumn)) / rowsTable (tableTableColumn(tableColumn)) * 100;
sparseColumnsTable 'Количество разреженных колонок' (table) = GROUP SUM 1 BY tableTableColumn(tableColumn) IF percentNotNullTableColumn(tableColumn) < 50;

recalculateAggregationTableColumn 'Пересчитать агрегации' = ACTION CUSTOM 'lsfusion.server.logics.reflection.RecalculateTableColumnActionProperty' (TableColumn);
recalculateAggregationWithDependenciesTableColumn 'Пересчитать агрегации (+зависимости)' = ACTION CUSTOM 'lsfusion.server.logics.reflection.RecalculateTableColumnWithDependenciesActionProperty' (TableColumn);
recalculateAggregationWithDependentsTableColumn 'Пересчитать агрегации (+зависимые)' = ACTION CUSTOM 'lsfusion.server.logics.reflection.RecalculateTableColumnWithDependentsActionProperty' (TableColumn);
checkAggregationTableColumn 'Проверить агрегации' = ACTION CUSTOM 'lsfusion.server.logics.reflection.CheckTableColumnActionProperty' (TableColumn);
dropDropColumn 'Окончательно удалить колонку' = ACTION CUSTOM 'lsfusion.server.logics.reflection.DropColumnActionProperty' (DropColumn);

recalculateStats 'Пересчитать статистику' = ACTION CUSTOM 'lsfusion.server.logics.reflection.RecalculateStatsActionProperty' ();

recalculateColumnsAggregationsTable 'Пересчитать агрегации колонок' (table) = ACTION {
    FOR table == tableTableColumn(tableColumn) AND tableColumn IS TableColumn DO {
        recalculateAggregationTableColumn(tableColumn);    
    }
}
checkClassesTable 'Проверить классы таблицы' = ACTION CUSTOM 'lsfusion.server.logics.reflection.CheckTableClassesActionProperty' (Table);
recalculateClassesTable 'Пересчитать классы таблицы' = ACTION CUSTOM 'lsfusion.server.logics.reflection.RecalculateTableClassesActionProperty' (Table);

CLASS DropColumn 'Удалённая колонка';
TABLE dropColumn (DropColumn);

sidDropColumn 'Имя колонки' = DATA VARSTRING[100] (DropColumn);
dropColumnSID 'Удалённая колонка' (sID) = GROUP NAGGR dropColumn BY sidDropColumn (dropColumn) WHERE dropColumn IS DropColumn;
sidTableDropColumn 'Имя таблицы' = DATA VARSTRING[100] (DropColumn);
timeDropColumn 'Время удаления' = DATA DATETIME (DropColumn);
revisionDropColumn 'Версия' = DATA VARSTRING[10] (DropColumn);

CLASS GroupObject 'Группа объектов';
TABLE groupObjectCustomUser (GroupObject, CustomUser);
TABLE groupObject (GroupObject);

sidGroupObject 'Код группы объектов' = DATA VARSTRING[100] (GroupObject) IN recognize;
navigatorElementGroupObject 'Элемент навигатора' = DATA NavigatorElement (GroupObject);
canonicalNameNavigatorElementGroupObject (groupObject) = canonicalNameNavigatorElement (navigatorElementGroupObject(groupObject)) IN recognize;
captionNavigatorElementGroupObject (groupObject) = captionNavigatorElement (navigatorElementGroupObject(groupObject)) IN recognize; 
groupObjectSIDNavigatorElementNameGroupObject 'Группа объектов' (sidGroupObject, canonicalNameNavigatorElement) = GROUP AGGR groupObject BY sidGroupObject (groupObject), canonicalNameNavigatorElementGroupObject (groupObject) WHERE groupObject IS GroupObject;

CLASS FormGrouping 'Группировка';
TABLE formGrouping (FormGrouping); 

nameFormGrouping 'Имя группировки' = DATA VARSTRING[100] (FormGrouping);
groupObjectFormGrouping = DATA GroupObject (FormGrouping);
itemQuantityFormGrouping 'Количество записей' = DATA BOOLEAN (FormGrouping);
formGroupingNameFormGroupingGroupObject 'Группировка' (nameFormGrouping, groupObject) = GROUP AGGR formGrouping BY nameFormGrouping(formGrouping), groupObjectFormGrouping(formGrouping) WHERE formGrouping IS FormGrouping;

TABLE formGroupingPropertyDraw (FormGrouping, PropertyDraw);
groupOrderFormGroupingPropertyDraw 'Порядок группировки' = DATA INTEGER (FormGrouping, PropertyDraw);
sumFormGroupingPropertyDraw 'Суммировать' = DATA BOOLEAN (FormGrouping, PropertyDraw);
maxFormGroupingPropertyDraw 'Максимум' = DATA BOOLEAN (FormGrouping, PropertyDraw);
pivotFormGroupingPropertyDraw 'Pivot' = DATA BOOLEAN (FormGrouping, PropertyDraw);

FORM physicalModel 'Таблицы'
    OBJECTS t=Table
    PROPERTIES(t) READONLY sidTable, rowsTable, sparseColumnsTable
    PROPERTIES(t) recalculateColumnsAggregationsTable, checkClassesTable, recalculateClassesTable

    OBJECTS tk=TableKey
    PROPERTIES(tk) READONLY classTableKey, nameTableKey, quantityTableKey

    OBJECTS tc=TableColumn
    PROPERTIES(tc) READONLY sidTableColumn, captionTableColumn, canonicalNameTableColumn, propertyTableColumn, quantityTableColumn, notNullQuantityTableColumn,
                   percentNotNullTableColumn
    PROPERTIES(tc) recalculateAggregationTableColumn, recalculateAggregationWithDependenciesTableColumn, 
            recalculateAggregationWithDependentsTableColumn, checkAggregationTableColumn

    OBJECTS dc=DropColumn
    PROPERTIES(dc) READONLY sidTableDropColumn, sidDropColumn, timeDropColumn, revisionDropColumn
    PROPERTIES(dc) dropDropColumn

    PROPERTIES() recalculateStats

    FILTERS
        tableTableKey(tk)==t,
        tableTableColumn(tc)==t
;

DESIGN physicalModel {
    main{
        NEW container BEFORE functions.box{
            fill = 1;
            type = TABBED;
            NEW modelContainer {
                fill = 1;
                caption = 'Таблицы';
                MOVE t.box {
                    caption = 'Таблицы';
                };
                MOVE tk.box {
                    caption = 'Ключи';
                }
                MOVE tc.box {
                    caption = 'Колонки';
                }
                MOVE PROPERTY(recalculateStats());
            }

            NEW dropColumnsContainer {
                fill = 1;
                caption = 'Удалённые колонки';
                MOVE dc.box;
            }
        }
    }
}

FORM forms 'Формы'

    TREE treeFormObject tf=NavigatorElement PARENT parentNavigatorElement
    PROPERTIES(tf) READONLY canonicalNameNavigatorElement, captionNavigatorElement

    OBJECTS u=CustomUser FIXED PANEL
    PROPERTIES(u) SELECTOR firstNameContact, lastNameContact, loginCustomUser

    OBJECTS g=GroupObject
    PROPERTIES(g) sidGroupObject READONLY, fontSizeGroupObject, isFontBoldGroupObject, isFontItalicGroupObject, pageSizeGroupObject, hasUserPreferencesGroupObject
    PROPERTIES(g,u) fontSizeGroupObjectCustomUser, isFontBoldGroupObjectCustomUser, isFontItalicGroupObjectCustomUser, pageSizeGroupObjectCustomUser, hasUserPreferencesGroupObjectCustomUser
    
    OBJECTS fg=FormGrouping
    PROPERTIES(fg) nameFormGrouping, itemQuantityFormGrouping

    OBJECTS p=PropertyDraw
    PROPERTIES(p) READONLY sidPropertyDraw, captionPropertyDraw

    PROPERTIES(p) captionShowPropertyDraw
    PROPERTIES(p,u) captionShowPropertyDrawCustomUser
    PROPERTIES(p) columnCaptionPropertyDraw
    PROPERTIES(p,u) columnCaptionPropertyDrawCustomUser
    PROPERTIES(p) columnWidthPropertyDraw
    PROPERTIES(p,u) columnWidthPropertyDrawCustomUser
    PROPERTIES(p) columnOrderPropertyDraw
    PROPERTIES(p,u) columnOrderPropertyDrawCustomUser
    PROPERTIES(p) columnSortPropertyDraw
    PROPERTIES(p) columnAscendingSortPropertyDraw
    PROPERTIES(p,u) columnSortPropertyDrawCustomUser
    PROPERTIES(p,u) columnAscendingSortPropertyDrawCustomUser
    PROPERTIES(fg,p) groupOrderFormGroupingPropertyDraw, sumFormGroupingPropertyDraw, maxFormGroupingPropertyDraw, pivotFormGroupingPropertyDraw 

    FILTERS
        navigatorElementGroupObject(g)==tf,
        formPropertyDraw(p)==tf,
        groupObjectFormGrouping(fg)==g 

    FILTERGROUP filtersForm
        FILTER 'Свойства только текущей группы объектов' groupObjectPropertyDraw(p)==g 'F8'
;

DESIGN forms {
    main {
        NEW groupingContainer BEFORE p.box {
            type = CONTAINERH;
            fill = 1;
            MOVE g.box {
                fill = 2;
            }
            MOVE fg.box {
                fill = 1;
            }
        }
    }
}

dumbPropertyGroup (pg) = ' ' IF pg IS PropertyGroup;

FORM properties 'Свойства'
    OBJECTS p=Property
    PROPERTIES(p) READONLY captionProperty, canonicalNameProperty, dbNameProperty, tableSIDProperty, signatureProperty, returnProperty, classProperty, complexityProperty, parentProperty, numberProperty, userLoggableProperty EDITABLE, loggableProperty, storedProperty EDITABLE, isSetNotNullProperty EDITABLE

    TREE treePropertiesObject tps=PropertyGroup PARENT parentPropertyGroup, ps=Property
    PROPERTIES(tps) READONLY captionPropertyGroup, SIDPropertyGroup, dumbPropertyGroup, dumbPropertyGroup, dumbPropertyGroup, dumbPropertyGroup, dumbPropertyGroup, parentPropertyGroup, numberPropertyGroup, dumbPropertyGroup, dumbPropertyGroup, dumbPropertyGroup, dumbPropertyGroup
    PROPERTIES(ps) READONLY captionProperty, canonicalNameProperty, dbNameProperty, signatureProperty, returnProperty, classProperty, complexityProperty, parentProperty, numberProperty, userLoggableProperty EDITABLE, loggableProperty, storedProperty EDITABLE, isSetNotNullProperty EDITABLE

    ORDER BY numberProperty(p)
    ORDER BY numberPropertyGroup(tps)

    FILTERS
        parentProperty(ps)==tps
;

DESIGN properties {
    main {
        NEW container BEFORE functions.box {
            fill = 1;
            type = TABBED;

            NEW treeContainer {
                fill = 1;
                caption = 'Дерево';
                MOVE treePropertiesObject.tree.box;
            }

            NEW tableContainer {
                fill = 1;
                caption = 'Таблица';
                MOVE p.box;
            }
        }
    }
}

NAVIGATOR {
    configuration {
        ADD Reflection.physicalModel;
        ADD Reflection.forms;
        ADD Reflection.properties;
    }
}
