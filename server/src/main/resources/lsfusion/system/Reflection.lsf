MODULE Reflection;

REQUIRE System, Authentication;

CLASS PropertyGroup 'Родит. группа';
TABLE propertyGroup (PropertyGroup);

TABLE propertyGroupPropertyGroup (PropertyGroup, PropertyGroup);
parent 'Родит. группа' = DATA PropertyGroup (PropertyGroup);
level 'Уровень' (PropertyGroup child, PropertyGroup parent) = RECURSION 1l IF child IS PropertyGroup AND parent == child
                                                                      STEP 2l IF parent == parent($parent) MATERIALIZED;

caption 'Имя' = DATA VARSTRING[250] (PropertyGroup);
number 'Номер' = DATA INTEGER (PropertyGroup);
SID 'Код свойства' = DATA VARSTRING[100] (PropertyGroup);
propertyGroup 'Свойство' (sID) = GROUP AGGR PropertyGroup propertyGroup WHERE propertyGroup IS PropertyGroup BY SID(propertyGroup);


CLASS NavigatorElement 'Элемент навигатора';
CLASS NavigatorAction 'Действие' : NavigatorElement;
CLASS NavigatorForm 'Форма' : NavigatorElement;
CLASS NavigatorFolder 'Папка' : NavigatorElement;    


TABLE navigatorElement (NavigatorElement);
TABLE navigatorElementNavigatorElement(NavigatorElement, NavigatorElement);

caption 'Название элемента навигатора' = DATA VARSTRING[250] (NavigatorElement);
canonicalName 'Каноническое имя элемента навигатора' = DATA VARSTRING[100] (NavigatorElement);
number 'Номер' = DATA INTEGER (NavigatorElement);
navigatorElementCanonicalName 'Элемент навигатора' (sid) = GROUP AGGR NavigatorElement navigatorElement WHERE navigatorElement IS NavigatorElement BY canonicalName(navigatorElement);
parent 'Родительский элемент' = DATA NavigatorElement (NavigatorElement);

isNavigatorFolder (NavigatorElement element) = element IS NavigatorFolder;
isNavigatorAction (NavigatorElement element) = element IS NavigatorAction;
isNavigatorForm (NavigatorElement element) = element IS NavigatorForm;

CLASS Form 'Форма' {
    noForm 'NoForm'
};

TABLE form (Form);
TABLE formNames (VARSTRING[100]);

caption 'Название формы' = DATA VARSTRING[250] (Form);
canonicalName 'Каноническое имя формы' = DATA VARSTRING[100] (Form);
form 'Форма' (sid) = GROUP AGGR Form form WHERE form IS Form BY canonicalName(form) MATERIALIZED TABLE formNames; // для profiler'а
is (Form form) = form IS Form;

currentForm = NATIVE Form ();

CLASS ABSTRACT ActionOrProperty 'Свойство или действие';

CLASS Property 'Свойство' : ActionOrProperty;
TABLE property (Property);

CLASS Action 'Действие' : ActionOrProperty;
TABLE action (Action);

parent 'Родит. группа' = DATA PropertyGroup (ActionOrProperty);
number 'Номер' = DATA INTEGER (ActionOrProperty);
canonicalName 'Имя свойства' = DATA STRING[512] (Property) IN recognize;
canonicalName 'Имя свойства' = DATA STRING[512] (Action) IN recognize;
canonicalName 'Имя свойства' (ActionOrProperty p) = MULTI canonicalName[Property](p), canonicalName[Action](p);
caption 'Заголовок' = DATA VARISTRING[250] (ActionOrProperty) IN base;
annotation 'Аннотация' = DATA VARSTRING[100] (ActionOrProperty);
class 'Класс свойства' = DATA VARSTRING[100] (ActionOrProperty);

dbName 'Код свойства' = DATA VARSTRING[100] (Property) IN base;
leftTo = FORMULA PG 'left($1, strpos($1, $2) - 1)', MS 'LEFT($1, CHARINDEX($2, $1) - 1)';
loggable 'Логируется' = DATA BOOLEAN (Property);
userLoggable 'Логируется пользователем' = DATA BOOLEAN (Property);
stored 'Постоянно хранимое' = DATA BOOLEAN (Property);
isSetNotNull 'Не может быть null' = DATA BOOLEAN (Property);
return 'Возвращаемый класс' = DATA VARSTRING[100] (Property);
complexity 'Сложность свойства' = DATA LONG (Property);
tableSID 'Таблица' = DATA VARSTRING[100] (Property);

stats 'Кол-во записей' = DATA INTEGER (Property);
maxStatsProperty 'Максимальное кол-во записей для логируемого свойства' = DATA INTEGER ();
CONSTRAINT SET (userLoggable(Property p)) AND maxStatsProperty() AND stats(p) > maxStatsProperty() 
           MESSAGE 'Количество записей логируемого свойства не может превышать ' + maxStatsProperty();
           
webServerUrl 'Web Server URL' = DATA STRING[100]();

form 'Имя формы' = DATA Form (NavigatorElement);
action 'Имя действия' = DATA Action (NavigatorAction);

EXTEND FORM options PROPERTIES maxStatsProperty(), webServerUrl();
DESIGN options { 
    commons { 
        MOVE PROPERTY(maxStatsProperty());
        MOVE PROPERTY(webServerUrl());   
    } 
}

propertyCanonicalName 'Свойство' (cn) = GROUP AGGR Property property WHERE property IS Property BY canonicalName(property);
actionCanonicalName 'Действие' (cn) = GROUP AGGR Action property WHERE property IS Action BY canonicalName(property);
propertyTable 'Свойство' (string, sID) = GROUP AGGR Property property WHERE stored(property) BY tableSID(property), dbName(property);

quantity 'Количество разновидностей' = DATA INTEGER (Property);
quantityTop 'Количество разновидностей (Top)' = DATA INTEGER (Property);
notNullQuantity 'Количество не null значений' = DATA INTEGER (Property);
overStats 'Кол-во записей' (Property property) = OVERRIDE notNullQuantity(property), stats(property);

hasNotNullQuantity() = GROUP SUM 1 IF notNullQuantity(Property property);

lastRecalculate 'Последний пересчёт аггрегаций' = DATA DATETIME (Property);

CLASS PropertyDraw 'Свойство на форме';

CLASS PropertyDrawShowStatus 'Показ свойства' {
    Show 'Показать',
    Hide 'Спрятать'
}
FORM propertyDrawShowStatuses
    OBJECTS s = PropertyDrawShowStatus
    PROPERTIES(s) staticCaption
    LIST PropertyDrawShowStatus OBJECT s
;

TABLE formPropertyDraw (Form, PropertyDraw);
TABLE propertyDraw (PropertyDraw);
TABLE propertyDrawCustomUser (PropertyDraw, CustomUser);

sid 'Код свойства на форме' = DATA VARSTRING[100] (PropertyDraw) IN recognize;
caption 'Название свойства на форме' = DATA VARSTRING[250] (PropertyDraw);
form 'Форма' = DATA Form (PropertyDraw) INDEXED;
nameForm 'Форма' (PropertyDraw pd) = canonicalName(form(pd)) IN recognize;
groupObject 'Группа объектов' = DATA GroupObject (PropertyDraw);
propertyDraw 'Свойство на форме' (form, sID) = GROUP AGGR PropertyDraw propertyDraw WHERE propertyDraw IS PropertyDraw BY form (propertyDraw), sid (propertyDraw);
propertyDrawByFormNameAndPropertyDrawSid 'Код формы' (VARSTRING[100] str1, VARSTRING[100] str2) = propertyDraw (form(str1), str2);

show 'Показ свойства' = DATA PropertyDrawShowStatus (PropertyDraw);
show 'Показ свойства для пользователя' = DATA PropertyDrawShowStatus (PropertyDraw, CustomUser);

nameShow 'Показ свойства' (PropertyDraw propertyDraw) = staticName(show (propertyDraw)) CHARWIDTH 50;
nameShow 'Показ свойства для пользователя' (PropertyDraw propertyDraw, CustomUser customUser) = staticName(show(propertyDraw, customUser)) CHARWIDTH 50;

captionShow 'Показ свойства' (PropertyDraw propertyDraw) = staticCaption(show (propertyDraw)) CHARWIDTH 20;
captionShow 'Показ свойства для пользователя' (PropertyDraw propertyDraw, CustomUser customUser) = staticCaption(show(propertyDraw, customUser)) CHARWIDTH 20;

columnCaption 'Заголовок свойства для пользователя' = DATA VARSTRING[100] (PropertyDraw, CustomUser);
columnCaption 'Заголовок свойства' = DATA VARSTRING[100] (PropertyDraw);

columnPattern 'Маска свойства для пользователя' = DATA VARSTRING[100] (PropertyDraw, CustomUser);
columnPattern 'Маска свойства' = DATA VARSTRING[100] (PropertyDraw);

columnWidth 'Ширина для пользователя' = DATA INTEGER (PropertyDraw, CustomUser);
columnWidth 'Ширина' = DATA INTEGER (PropertyDraw);

columnOrder 'Порядок для пользователя' = DATA INTEGER (PropertyDraw, CustomUser);
columnOrder 'Порядок' = DATA INTEGER (PropertyDraw);

columnSort 'Сортировка для пользователя' = DATA INTEGER (PropertyDraw, CustomUser);
columnSort 'Сортировка' = DATA INTEGER (PropertyDraw);

columnAscendingSort 'Восходящая сортировка для пользователя' = DATA BOOLEAN (PropertyDraw, CustomUser);
columnAscendingSort 'Восходящая сортировка' = DATA BOOLEAN (PropertyDraw);

hasUserPreferences 'Настройки сохранены для пользователя'= DATA BOOLEAN (GroupObject, CustomUser);
countShowPropertyDraw(g, CustomUser u) = GROUP SUM 1 IF show(PropertyDraw property, u) == PropertyDrawShowStatus.Show BY groupObject(property);
CONSTRAINT hasUserPreferences(GroupObject g, CustomUser u) AND NOT countShowPropertyDraw(g, u) MESSAGE 'Настройки не сохранены: спрятаны все колонки';
hasUserPreferences 'Настройки сохранены' = DATA BOOLEAN (GroupObject);
countShowPropertyDraw(g) = GROUP SUM 1 IF show(PropertyDraw property) == PropertyDrawShowStatus.Show BY groupObject(property);
CONSTRAINT hasUserPreferences(GroupObject g) AND NOT countShowPropertyDraw(g) MESSAGE 'Настройки не сохранены: спрятаны все колонки';
hasUserPreferencesOverride 'Настройки сохранены' (GroupObject groupObject, CustomUser customUser) = OVERRIDE hasUserPreferences(groupObject, customUser), hasUserPreferences(groupObject) IF customUser IS CustomUser;

fontSize 'Размер шрифта для пользователя'= DATA INTEGER (GroupObject, CustomUser);
fontSize 'Размер шрифта' = DATA INTEGER (GroupObject);

isFontBold 'Полужирный шрифт для пользователя'= DATA BOOLEAN (GroupObject, CustomUser);
isFontBold 'Полужирный шрифт' = DATA BOOLEAN (GroupObject);

isFontItalic 'Курсивный шрифт для пользователя'= DATA BOOLEAN (GroupObject, CustomUser);
isFontItalic 'Курсивный шрифт' = DATA BOOLEAN (GroupObject);

pageSize 'Размер страницы для пользователя'= DATA INTEGER (GroupObject, CustomUser);
pageSize 'Размер страницы' = DATA INTEGER (GroupObject);

headerHeight 'Высота заголовков для пользователя'= DATA INTEGER (GroupObject, CustomUser);
headerHeight 'Высота заголовков' = DATA INTEGER (GroupObject);

CLASS Table 'Таблица';
TABLE tables (Table);

sid 'Имя таблицы' = DATA VARISTRING[100] (Table);
table 'Имя таблицы' (sID) = GROUP AGGR Table table WHERE table IS Table BY sid (table);
rows 'Количество записей' = DATA INTEGER (Table);
skipVacuum 'Не упаковывать' = DATA BOOLEAN (Table);
table 'Таблица' = DATA Table (TableKey);
sidTable (TableKey tableKey) = sid(table(tableKey));

CLASS TableKey 'Ключ';
TABLE tableKey (TableKey);

sid 'Код ключа' = DATA VARISTRING[100] (TableKey);
tableKey 'Ключ' (sID) = GROUP AGGR TableKey tableKey WHERE tableKey IS TableKey BY sid (tableKey);
class 'Класс ключа' = DATA VARISTRING[40] (TableKey);
classSID 'SID класса ключа' = DATA VARSTRING[100] (TableKey);
name 'Имя ключа' = DATA VARISTRING[20] (TableKey);
quantity 'Количество разновидностей' = DATA INTEGER (TableKey);
quantityTop 'Количество разновидностей (Top)' = DATA INTEGER (TableKey);
overQuantity 'Количество разновидностей' (TableKey tableKey) = OVERRIDE quantityTop(tableKey), quantity(tableKey);

CLASS TableColumn 'Колонка';
TABLE tableColumn (TableColumn);

table 'Таблица' = DATA Table(TableColumn);
sid 'Имя колонки' = DATA VARISTRING[100] (TableColumn);
tableSID (sid) = GROUP MAX Table table BY sid(table);

longSID(TableColumn tableColumn) = sid(table(tableColumn)) + '.' + sid(tableColumn);
tableColumnLong 'Колонка' (sID) = GROUP AGGR TableColumn tableColumn WHERE tableColumn IS TableColumn BY longSID(tableColumn); 
tableColumnSID (sid) = GROUP MAX TableColumn tableColumn BY sid(tableColumn);
property 'Свойство' (TableColumn tableColumn) = propertyTable(sid(table(tableColumn)), sid(tableColumn));
lastRecalculateProperty 'Последний пересчёт аггрегаций' (TableColumn tableColumn) = lastRecalculate(property(tableColumn));
caption 'Заголовок свойства' (TableColumn tableColumn) = caption(property(tableColumn));
canonicalName 'Каноническое имя свойства' (TableColumn tableColumn) = canonicalName(property(tableColumn));
quantity 'Количество разновидностей' (TableColumn tableColumn) = quantity(property(tableColumn));
quantityTop 'Количество разновидностей (Top)' (TableColumn tableColumn) = quantityTop(property(tableColumn));
overQuantity 'Количество разновидностей' (TableColumn tableColumn) = OVERRIDE quantityTop(tableColumn), quantity(tableColumn);
notNullQuantity 'Количество не null значений' (TableColumn tableColumn) = notNullQuantity(property(tableColumn));
tableColumn(Property property) = tableColumnLong(tableSID(property) + '.' + dbName(property));
annotation 'Аннотация' (TableColumn tableColumn) = annotation(property(tableColumn));
return 'Возвращаемый класс свойства ' (TableColumn tableColumn) = return(property(tableColumn));

percentNotNull 'Не null, %' (TableColumn tableColumn) = IF rows (table(tableColumn)) == 0
                                                          THEN 100.00
                                                          ELSE NUMERIC[15,2](notNullQuantity(tableColumn)) / rows (table(tableColumn)) * 100;
sparseColumns 'Количество разреженных колонок' (table) = GROUP SUM 1 BY table(TableColumn tableColumn) IF percentNotNull(tableColumn) < 50;

notRecalculate 'Не пересчитывать аггрегации' = DATA BOOLEAN (TableColumn);
notRecalculate 'Не пересчитывать аггрегации' (VARISTRING[100] sid) = notRecalculate(tableColumnSID(sid));

recalculateAggregation 'Пересчитать агрегации' = CUSTOM 'lsfusion.server.logics.reflection.RecalculateTableColumnActionProperty' (TableColumn);
recalculateAggregationWithDependencies 'Пересчитать агрегации (+зависимости)' = CUSTOM 'lsfusion.server.logics.reflection.RecalculateTableColumnWithDependenciesActionProperty' (TableColumn);
recalculateAggregationWithDependents 'Пересчитать агрегации (+зависимые)' = CUSTOM 'lsfusion.server.logics.reflection.RecalculateTableColumnWithDependentsActionProperty' (TableColumn);
checkAggregation 'Проверить агрегации' = CUSTOM 'lsfusion.server.logics.reflection.CheckTableColumnActionProperty' (TableColumn);
checkAggregation(VARISTRING[100] string) = { checkAggregation(tableColumnSID(string)); }
dropDB = CUSTOM 'lsfusion.server.logics.reflection.DropColumnActionProperty' (DropColumn);
drop 'Окончательно удалить колонку' (DropColumn cl) = {
    dropDB(cl);
    DELETE cl;
}

recalculateColumnsAggregations 'Пересчитать агрегации колонок' (Table table) = {
    FOR table == table(TableColumn tableColumn) AND tableColumn IS TableColumn DO {
        recalculateAggregation(tableColumn);    
    }
}
checkClasses 'Проверить классы таблицы' = CUSTOM 'lsfusion.server.logics.reflection.CheckTableClassesActionProperty' (Table);
checkClasses(VARISTRING[100] string) = { checkClasses(table(string)); }
recalculateClasses 'Пересчитать классы таблицы' = CUSTOM 'lsfusion.server.logics.reflection.RecalculateTableClassesActionProperty' (Table);
notRecalculateStats 'Не пересчитывать статистику таблицы' = DATA BOOLEAN (Table);
notRecalculateStats 'Не пересчитывать статистику таблицы' (VARISTRING[100] sid) = notRecalculateStats(tableSID(sid));
recalculateStats 'Пересчитать статистику таблицы' = CUSTOM 'lsfusion.server.logics.reflection.RecalculateTableStatsActionProperty' (Table);

CLASS DropColumn 'Удалённая колонка';
TABLE dropColumn (DropColumn);

sid 'Имя колонки' = DATA VARSTRING[100] (DropColumn);
dropColumn 'Удалённая колонка' (sID) = GROUP NAGGR DropColumn dropColumn WHERE dropColumn IS DropColumn BY sid (dropColumn);
sidTable 'Имя таблицы' = DATA VARSTRING[100] (DropColumn);
time 'Время удаления' = DATA DATETIME (DropColumn);
revision 'Версия' = DATA VARSTRING[10] (DropColumn);

CLASS GroupObject 'Группа объектов';
TABLE groupObjectCustomUser (GroupObject, CustomUser);
TABLE groupObject (GroupObject);

sid 'Код группы объектов' = DATA VARSTRING[100] (GroupObject) IN recognize;
form 'Форма' = DATA Form (GroupObject);
canonicalNameForm (GroupObject groupObject) = canonicalName (form(groupObject)) IN recognize;
captionForm (GroupObject groupObject) = caption (form(groupObject)) IN recognize; 
groupSIDFormGroupObject 'Группа объектов' (sidGroupObject, canonicalNameNavigatorElement) = GROUP AGGR GroupObject groupObject WHERE groupObject IS GroupObject BY sid (groupObject), canonicalNameForm (groupObject);

CLASS FormGrouping 'Группировка';
TABLE formGrouping (FormGrouping); 

name 'Имя группировки' = DATA VARSTRING[100] (FormGrouping);
groupObject = DATA GroupObject (FormGrouping);
itemQuantity 'Количество записей' = DATA BOOLEAN (FormGrouping);
formGrouping 'Группировка' (nameFormGrouping, groupObject) = GROUP AGGR FormGrouping formGrouping WHERE formGrouping IS FormGrouping BY name(formGrouping), groupObject(formGrouping);

TABLE formGroupingPropertyDraw (FormGrouping, PropertyDraw);
groupOrder 'Порядок группировки' = DATA INTEGER (FormGrouping, PropertyDraw);
sum 'Суммировать' = DATA BOOLEAN (FormGrouping, PropertyDraw);
max 'Максимум' = DATA BOOLEAN (FormGrouping, PropertyDraw);
pivot 'Pivot' = DATA BOOLEAN (FormGrouping, PropertyDraw);

changeQuantity(Property p, INTEGER q) = {
    quantity(p) <- q;
}

changeQuantity(TableColumn tc) = {
    INPUT int = INTEGER DO
        IF int THEN {
            changeQuantity(property(tc), int);
        }      
}

changeNotNullQuantity(Property p, INTEGER q) = {
    notNullQuantity(p) <- q;
}

changeNotNullQuantity(TableColumn tc) = {
    INPUT int = INTEGER DO
        IF int THEN {
            changeNotNullQuantity(property(tc), int);
        }      
}

FORM physicalModel 'Таблицы'
    OBJECTS t=Table
    PROPERTIES(t) READONLY sid, rows, sparseColumns
    PROPERTIES(t) GRID recalculateColumnsAggregations, checkClasses, recalculateClasses, notRecalculateStats, recalculateStats, skipVacuum

    OBJECTS tk=TableKey
    PROPERTIES(tk) READONLY class, classSID, name, quantity CHANGEABLE, quantityTop

    OBJECTS tc=TableColumn
    PROPERTIES(tc) READONLY sid, caption, canonicalName, annotation, property, return, quantity CHANGEABLE ON CHANGE changeQuantity(tc), quantityTop,
                   notNullQuantity CHANGEABLE ON CHANGE changeNotNullQuantity(tc), percentNotNull, lastRecalculateProperty
    PROPERTIES(tc) GRID notRecalculate, recalculateAggregation, recalculateAggregationWithDependencies, 
            recalculateAggregationWithDependents, checkAggregation

    OBJECTS dc=DropColumn
    PROPERTIES(dc) READONLY sidTable, sid, time, revision
    PROPERTIES(dc) drop GRID

    FILTERGROUP filtersForm
        FILTER 'Фильтр по таблице' table(tc)==t 'F8' DEFAULT

    FILTERS
        table(tk)==t
;

DESIGN physicalModel {
    BOX {
        NEW container BEFORE TOOLBARBOX{
            fill = 1;
            type = TABBED;
            NEW modelContainer {
                fill = 1;
                caption = 'Таблицы';
                MOVE BOX(t) {
                    caption = 'Таблицы';
                    fill = 1;
                };
                MOVE BOX(tk) {
                    caption = 'Ключи';
                    fill = 0.5;
                }
                MOVE BOX(tc) {
                    caption = 'Колонки';
                    fill = 1;
                }
            }

            NEW dropColumnsContainer {
                fill = 1;
                caption = 'Удалённые колонки';
                MOVE BOX(dc);
            }
        }
    }
}

FORM forms 'Формы'

    OBJECTS tf=Form
    PROPERTIES(tf) READONLY canonicalName, caption

    OBJECTS u=CustomUser PANEL
    PROPERTIES(u) SELECTOR firstName, lastName, login

    OBJECTS g=GroupObject
    PROPERTIES(g) sid READONLY, fontSize, isFontBold, isFontItalic, pageSize, headerHeight, hasUserPreferences
    PROPERTIES(g,u) fontSize, isFontBold, isFontItalic, pageSize, headerHeight, hasUserPreferences
    
    OBJECTS fg=FormGrouping
    PROPERTIES(fg) name, itemQuantity

    OBJECTS p=PropertyDraw
    PROPERTIES(p) READONLY sid, caption

    PROPERTIES(p) captionShow
    PROPERTIES(p,u) captionShow
    PROPERTIES(p) columnCaption
    PROPERTIES(p,u) columnCaption
    PROPERTIES(p) columnPattern
    PROPERTIES(p,u) columnPattern
    PROPERTIES(p) columnWidth
    PROPERTIES(p,u) columnWidth
    PROPERTIES(p) columnOrder
    PROPERTIES(p,u) columnOrder
    PROPERTIES(p) columnSort
    PROPERTIES(p) columnAscendingSort
    PROPERTIES(p,u) columnSort
    PROPERTIES(p,u) columnAscendingSort
    PROPERTIES(fg,p) groupOrder, sum, max, pivot 

    FILTERS
        form(g) == tf,
        form(p) == tf,
        groupObject(fg)==g 

    FILTERGROUP filtersForm
        FILTER 'Свойства только текущей группы объектов' groupObject(p)==g 'F8'
;

DESIGN forms {
    OBJECTS {
        NEW groupingContainer BEFORE BOX(p) {
            type = CONTAINERH;
            fill = 1;
            MOVE BOX(g) {
                fill = 2;
            }
            MOVE BOX(fg) {
                fill = 1;
            }
        }
    }
}

dumb (PropertyGroup pg) = ' ' IF pg IS PropertyGroup;

FORM properties 'Свойства'
    OBJECTS p=Property
    PROPERTIES(p) READONLY caption, canonicalName, dbName, annotation, tableSID, return, class, complexity, parent, number,
     quantity, notNullQuantity, userLoggable CHANGEABLE, loggable, stored CHANGEABLE, isSetNotNull CHANGEABLE, lastRecalculate

    TREE treePropertiesObject tps=PropertyGroup PARENT parent, ps=Property
    PROPERTIES(tps) READONLY caption, SID, d1=dumb, d2=dumb, d3=dumb, d4=dumb, d5=dumb, parent, number, d6=dumb, d7=dumb, d8=dumb, d9=dumb
    PROPERTIES(ps) READONLY caption, canonicalName, dbName, return, class, complexity, parent, number, quantity, notNullQuantity, userLoggable CHANGEABLE, loggable, stored CHANGEABLE, isSetNotNull CHANGEABLE

    ORDER number(p)
    ORDER number(tps)

    FILTERS
        parent(ps)==tps
;

DESIGN properties {
    BOX {
        NEW container BEFORE TOOLBARBOX {
            fill = 1;
            type = TABBED;

            NEW treeContainer {
                fill = 1;
                caption = 'Дерево';
                MOVE BOX(TREE treePropertiesObject);
            }

            NEW tableContainer {
                fill = 1;
                caption = 'Таблица';
                MOVE BOX(p);
            }
        }
    }
}

FORM actions 'Действия'
    OBJECTS p=Action
    PROPERTIES(p) GRID READONLY caption, canonicalName, annotation, class, parent, number

    TREE treeActionsObject tps=PropertyGroup PARENT parent, ps=Action
    PROPERTIES(tps) READONLY caption, SID, d1=dumb, d2=dumb, number
    PROPERTIES(ps) GRID READONLY caption, canonicalName, class, parent, number

    ORDER number(p)
    ORDER number(tps)

    FILTERS
        parent(ps)==tps
;

DESIGN actions {
    BOX {
        NEW container BEFORE TOOLBARBOX {
            fill = 1;
            type = TABBED;

            NEW treeContainer {
                fill = 1;
                caption = 'Дерево';
                MOVE BOX(TREE treeActionsObject);
            }

            NEW tableContainer {
                fill = 1;
                caption = 'Таблица';
                MOVE BOX(p);
            }
        }
    }
}

NAVIGATOR {
    configuration {
        NEW Reflection.physicalModel;
        NEW Reflection.forms;
        NEW Reflection.properties;
        NEW Reflection.actions;
    }
}
