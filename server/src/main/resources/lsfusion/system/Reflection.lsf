MODULE Reflection;

REQUIRE System, Authentication;

CLASS PropertyGroup 'Родит. группа';
TABLE propertyGroup (PropertyGroup);

TABLE propertyGroupPropertyGroup (PropertyGroup, PropertyGroup);
parent 'Родит. группа' = DATA PropertyGroup (PropertyGroup);
level 'Уровень' (PropertyGroup child, PropertyGroup parent) = RECURSION 1l IF child IS PropertyGroup AND parent == child
                                                                      STEP 2l IF parent == parent($parent) PERSISTENT;

caption 'Имя' = DATA VARSTRING[250] (PropertyGroup);
number 'Номер' = DATA INTEGER (PropertyGroup);
SID 'Код свойства' = DATA VARSTRING[100] (PropertyGroup);
propertyGroup 'Свойство' (sID) = GROUP AGGR PropertyGroup propertyGroup BY SID(propertyGroup) WHERE propertyGroup IS PropertyGroup;

CLASS NavigatorElement 'Элемент навигатора';
CLASS NavigatorAction 'Действие' : NavigatorElement;
CLASS Form 'Форма' : NavigatorElement;
TABLE navigatorElement (NavigatorElement);
TABLE navigatorElementNavigatorElement(NavigatorElement, NavigatorElement);

caption 'Название формы' = DATA VARSTRING[250] (NavigatorElement);
sid 'Код формы' = DATA VARSTRING[50] (NavigatorElement);
canonicalName 'Каноническое имя формы' = DATA VARSTRING[100] (NavigatorElement);
number 'Номер' = DATA INTEGER (NavigatorElement);
navigatorElement 'Форма' (sID) = GROUP AGGR NavigatorElement navigatorElement BY sid(navigatorElement) WHERE navigatorElement IS NavigatorElement;
navigatorElementCanonicalName 'Форма' (sid) = GROUP AGGR NavigatorElement navigatorElement BY canonicalName(navigatorElement) WHERE navigatorElement IS NavigatorElement;
parent 'Родит. форма' = DATA NavigatorElement (NavigatorElement);
is (NavigatorElement navigatorElement) = navigatorElement IS NavigatorElement AND NOT navigatorElement IS Form AND NOT navigatorElement IS NavigatorAction;
is (Form form) = form IS Form;
is (NavigatorAction navigatorAction) = navigatorAction IS NavigatorAction;

CLASS Property 'Свойство';
TABLE property (Property);

parent 'Родит. группа' = DATA PropertyGroup (Property);
number 'Номер' = DATA INTEGER (Property);
dbName 'Код свойства' = DATA VARSTRING[100] (Property) IN base;
canonicalName 'Имя свойства' = DATA VARSTRING[512] (Property) IN recognize;
shortName 'Имя свойства' (Property p) = leftTo(canonicalName(p), '[');
loggable 'Логируется' = DATA BOOLEAN (Property);
userLoggable 'Логируется пользователем' = DATA BOOLEAN (Property);
stored 'Постоянно хранимое' = DATA BOOLEAN (Property);
isSetNotNull 'Не может быть null' = DATA BOOLEAN (Property);
return 'Возвращаемый класс' = DATA VARSTRING[100] (Property);
class 'Класс свойства' = DATA VARSTRING[100] (Property);
complexity 'Сложность свойства' = DATA LONG (Property);
caption 'Заголовок' = DATA VARSTRING[250] (Property) IN base;
tableSID 'Таблица' = DATA VARSTRING[100] (Property);

stats 'Кол-во записей' = DATA INTEGER (Property);
maxStatsProperty 'Максимальное кол-во записей для логируемого свойства' = DATA INTEGER ();
CONSTRAINT SET (userLoggable(Property p)) AND maxStatsProperty() AND stats(p) > maxStatsProperty() 
           MESSAGE 'Количество записей логируемого свойства не может превышать ' + maxStatsProperty();

EXTEND FORM options PROPERTIES maxStatsProperty();
DESIGN options { commons { MOVE PROPERTY(maxStatsProperty()); } }

property 'Свойство' (sID) = GROUP NAGGR Property property BY dbName(property) WHERE property IS Property; // todo [dale]: временно, нужно для миграции на 15 версию БД
propertyCanonicalName 'Свойство' (cn) = GROUP AGGR Property property BY canonicalName(property) WHERE property IS Property;
propertyTable 'Свойство' (string, sID) = GROUP AGGR Property property BY tableSID(property), dbName(property) WHERE stored(property);

quantity 'Количество разновидностей' = DATA INTEGER (Property);
notNullQuantity 'Количество не null значений' = DATA INTEGER (Property);
overStats 'Кол-во записей' (Property property) = OVERRIDE stats(property), notNullQuantity(property);

CLASS PropertyDraw 'Свойство на форме';

CLASS PropertyDrawShowStatus 'Показ свойства' {
    Show 'Показать',
    Hide 'Спрятать'
}
FORM propertyDrawShowStatuses
    OBJECTS s = PropertyDrawShowStatus
    PROPERTIES(s) staticCaption
    DIALOG PropertyDrawShowStatus OBJECT s
;

TABLE formPropertyDraw (Form, PropertyDraw);
TABLE propertyDraw (PropertyDraw);
TABLE propertyDrawCustomUser (PropertyDraw, CustomUser);

sid 'Код свойства на форме' = DATA VARSTRING[100] (PropertyDraw) IN recognize;
caption 'Название свойства на форме' = DATA VARSTRING[250] (PropertyDraw);
form 'Форма' = DATA Form (PropertyDraw) INDEXED;
nameForm 'Форма' (PropertyDraw pd) = sid(form(pd)) IN recognize;
groupObject 'Группа объектов' = DATA GroupObject (PropertyDraw);
propertyDraw 'Свойство на форме' (form, sID) = GROUP AGGR PropertyDraw propertyDraw BY form (propertyDraw), sid (propertyDraw) WHERE propertyDraw IS PropertyDraw;
propertyDrawSIDNavigatorElementNamePropertyDraw 'Код формы' (VARSTRING[100] str1, VARSTRING[100] str2) = propertyDraw (navigatorElementCanonicalName(str1), str2);

show 'Показ свойства' = DATA PropertyDrawShowStatus (PropertyDraw);
show 'Показ свойства для пользователя' = DATA PropertyDrawShowStatus (PropertyDraw, CustomUser);

nameShow 'Показ свойства' (PropertyDraw propertyDraw) = staticName(show (propertyDraw)) PREFCHARWIDTH 50;
nameShow 'Показ свойства для пользователя' (PropertyDraw propertyDraw, CustomUser customUser) = staticName(show(propertyDraw, customUser)) PREFCHARWIDTH 50;

captionShow 'Показ свойства' (PropertyDraw propertyDraw) = staticCaption(show (propertyDraw)) PREFCHARWIDTH 20;
captionShow 'Показ свойства для пользователя' (PropertyDraw propertyDraw, CustomUser customUser) = staticCaption(show(propertyDraw, customUser)) PREFCHARWIDTH 20;

columnCaption 'Заголовок свойства для пользователя' = DATA VARSTRING[100] (PropertyDraw, CustomUser);
columnCaption 'Заголовок свойства' = DATA VARSTRING[100] (PropertyDraw);

columnWidth 'Ширина для пользователя' = DATA INTEGER (PropertyDraw, CustomUser);
columnWidth 'Ширина' = DATA INTEGER (PropertyDraw);

columnOrder 'Порядок для пользователя' = DATA INTEGER (PropertyDraw, CustomUser);
columnOrder 'Порядок' = DATA INTEGER (PropertyDraw);

columnSort 'Сортировка для пользователя' = DATA INTEGER (PropertyDraw, CustomUser);
columnSort 'Сортировка' = DATA INTEGER (PropertyDraw);

columnAscendingSort 'Восходящая сортировка для пользователя' = DATA BOOLEAN (PropertyDraw, CustomUser);
columnAscendingSort 'Восходящая сортировка' = DATA BOOLEAN (PropertyDraw);

hasUserPreferences 'Настройки сохранены для пользователя'= DATA BOOLEAN (GroupObject, CustomUser);
countShowPropertyDraw(g, u) = GROUP SUM 1 IF show(PropertyDraw property, CustomUser user) == PropertyDrawShowStatus.Show BY groupObject(property), user;
CONSTRAINT hasUserPreferences(GroupObject g, CustomUser u) AND NOT countShowPropertyDraw(g, u) MESSAGE 'Настройки не сохранены: спрятаны все колонки';
hasUserPreferences 'Настройки сохранены' = DATA BOOLEAN (GroupObject);
countShowPropertyDraw(g) = GROUP SUM 1 IF show(PropertyDraw property) == PropertyDrawShowStatus.Show BY groupObject(property);
CONSTRAINT hasUserPreferences(GroupObject g) AND NOT countShowPropertyDraw(g) MESSAGE 'Настройки не сохранены: спрятаны все колонки';
hasUserPreferencesOverride 'Настройки сохранены' (GroupObject groupObject, CustomUser customUser) = OVERRIDE hasUserPreferences(groupObject) IF customUser IS CustomUser, hasUserPreferences(groupObject, customUser);

fontSize 'Размер шрифта для пользователя'= DATA INTEGER (GroupObject, CustomUser);
fontSize 'Размер шрифта' = DATA INTEGER (GroupObject);

isFontBold 'Полужирный шрифт для пользователя'= DATA BOOLEAN (GroupObject, CustomUser);
isFontBold 'Полужирный шрифт' = DATA BOOLEAN (GroupObject);

isFontItalic 'Курсивный шрифт для пользователя'= DATA BOOLEAN (GroupObject, CustomUser);
isFontItalic 'Курсивный шрифт' = DATA BOOLEAN (GroupObject);

pageSize 'Размер страницы для пользователя'= DATA INTEGER (GroupObject, CustomUser);
pageSize 'Размер шрифта' = DATA INTEGER (GroupObject);

CLASS Table 'Таблица';
TABLE tables (Table);

sid 'Имя таблицы' = DATA VARISTRING[100] (Table);
table 'Имя таблицы' (sID) = GROUP AGGR Table table BY sid (table) WHERE table IS Table;
rows 'Количество записей' = DATA INTEGER (Table);
table 'Таблица' = DATA Table (TableKey);

CLASS TableKey 'Ключ';
TABLE tableKey (TableKey);

sid 'Код ключа' = DATA VARISTRING[100] (TableKey);
tableKey 'Ключ' (sID) = GROUP AGGR TableKey tableKey BY sid (tableKey) WHERE tableKey IS TableKey;
class 'Класс ключа' = DATA VARISTRING[40] (TableKey);
classSID 'SID класса ключа' = DATA VARSTRING[100] (TableKey);
name 'Имя ключа' = DATA VARISTRING[20] (TableKey);
quantity 'Количество разновидностей' = DATA INTEGER (TableKey);

CLASS TableColumn 'Колонка';
TABLE tableColumn (TableColumn);

table 'Таблица' = DATA Table(TableColumn);
sid 'Имя колонки' = DATA VARISTRING[100] (TableColumn);

longSID(TableColumn tableColumn) = sid(table(tableColumn)) + '.' + sid(tableColumn);
tableColumnLong 'Колонка' (sID) = GROUP AGGR TableColumn tableColumn BY longSID(tableColumn) WHERE tableColumn IS TableColumn; 
tableColumnSID (sid) = GROUP MAX TableColumn tableColumn BY sid(tableColumn);
property 'Свойство' (TableColumn tableColumn) = propertyTable(sid(table(tableColumn)), sid(tableColumn));
caption 'Заголовок свойства' (TableColumn tableColumn) = caption(property(tableColumn));
canonicalName 'Каноническое имя свойства' (TableColumn tableColumn) = canonicalName(property(tableColumn));
quantity 'Количество разновидностей' (TableColumn tableColumn) = quantity(property(tableColumn));
notNullQuantity 'Количество не null значений' (TableColumn tableColumn) = notNullQuantity(property(tableColumn));
tableColumn(Property property) = tableColumnLong(tableSID(property) + '.' + dbName(property));

toNumeric15p2(w) = NUMERIC[15,2](w);

percentNotNull 'Не null, %' (TableColumn tableColumn) = IF rows (table(tableColumn)) == 0
                                                          THEN 100.00
                                                          ELSE toNumeric15p2(notNullQuantity(tableColumn)) / rows (table(tableColumn)) * 100;
sparseColumns 'Количество разреженных колонок' (table) = GROUP SUM 1 BY table(TableColumn tableColumn) IF percentNotNull(tableColumn) < 50;

notRecalculate 'Не пересчитывать аггрегации' = DATA BOOLEAN (TableColumn);

recalculateAggregation 'Пересчитать агрегации' = ACTION CUSTOM 'lsfusion.server.logics.reflection.RecalculateTableColumnActionProperty' (TableColumn);
recalculateAggregationWithDependencies 'Пересчитать агрегации (+зависимости)' = ACTION CUSTOM 'lsfusion.server.logics.reflection.RecalculateTableColumnWithDependenciesActionProperty' (TableColumn);
recalculateAggregationWithDependents 'Пересчитать агрегации (+зависимые)' = ACTION CUSTOM 'lsfusion.server.logics.reflection.RecalculateTableColumnWithDependentsActionProperty' (TableColumn);
checkAggregation 'Проверить агрегации' = ACTION CUSTOM 'lsfusion.server.logics.reflection.CheckTableColumnActionProperty' (TableColumn);
checkAggregation(VARISTRING[100] string) = ACTION checkAggregation(tableColumnSID(string));
drop 'Окончательно удалить колонку' = ACTION CUSTOM 'lsfusion.server.logics.reflection.DropColumnActionProperty' (DropColumn);

recalculateColumnsAggregations 'Пересчитать агрегации колонок' (Table table) = ACTION {
    FOR table == table(TableColumn tableColumn) AND tableColumn IS TableColumn DO {
        recalculateAggregation(tableColumn);    
    }
}
checkClasses 'Проверить классы таблицы' = ACTION CUSTOM 'lsfusion.server.logics.reflection.CheckTableClassesActionProperty' (Table);
checkClasses(VARISTRING[100] string) = ACTION checkClasses(table(string));
recalculateClasses 'Пересчитать классы таблицы' = ACTION CUSTOM 'lsfusion.server.logics.reflection.RecalculateTableClassesActionProperty' (Table);
recalculateStats 'Пересчитать статистику таблицы' = ACTION CUSTOM 'lsfusion.server.logics.reflection.RecalculateTableStatsActionProperty' (Table);

CLASS DropColumn 'Удалённая колонка';
TABLE dropColumn (DropColumn);

sid 'Имя колонки' = DATA VARSTRING[100] (DropColumn);
dropColumn 'Удалённая колонка' (sID) = GROUP NAGGR DropColumn dropColumn BY sid (dropColumn) WHERE dropColumn IS DropColumn;
sidTable 'Имя таблицы' = DATA VARSTRING[100] (DropColumn);
time 'Время удаления' = DATA DATETIME (DropColumn);
revision 'Версия' = DATA VARSTRING[10] (DropColumn);

CLASS GroupObject 'Группа объектов';
TABLE groupObjectCustomUser (GroupObject, CustomUser);
TABLE groupObject (GroupObject);

sid 'Код группы объектов' = DATA VARSTRING[100] (GroupObject) IN recognize;
navigatorElement 'Элемент навигатора' = DATA NavigatorElement (GroupObject);
canonicalNameNavigatorElement (GroupObject groupObject) = canonicalName (navigatorElement(groupObject)) IN recognize;
captionNavigatorElement (GroupObject groupObject) = caption (navigatorElement(groupObject)) IN recognize; 
groupSIDNavigatorElementGroupObject 'Группа объектов' (sidGroupObject, canonicalNameNavigatorElement) = GROUP AGGR GroupObject groupObject BY sid (groupObject), canonicalNameNavigatorElement (groupObject) WHERE groupObject IS GroupObject;

CLASS FormGrouping 'Группировка';
TABLE formGrouping (FormGrouping); 

name 'Имя группировки' = DATA VARSTRING[100] (FormGrouping);
groupObject = DATA GroupObject (FormGrouping);
itemQuantity 'Количество записей' = DATA BOOLEAN (FormGrouping);
formGrouping 'Группировка' (nameFormGrouping, groupObject) = GROUP AGGR FormGrouping formGrouping BY name(formGrouping), groupObject(formGrouping) WHERE formGrouping IS FormGrouping;

TABLE formGroupingPropertyDraw (FormGrouping, PropertyDraw);
groupOrder 'Порядок группировки' = DATA INTEGER (FormGrouping, PropertyDraw);
sum 'Суммировать' = DATA BOOLEAN (FormGrouping, PropertyDraw);
max 'Максимум' = DATA BOOLEAN (FormGrouping, PropertyDraw);
pivot 'Pivot' = DATA BOOLEAN (FormGrouping, PropertyDraw);

FORM physicalModel 'Таблицы'
    OBJECTS t=Table
    PROPERTIES(t) READONLY sid, rows, sparseColumns
    PROPERTIES(t) recalculateColumnsAggregations, checkClasses, recalculateClasses, recalculateStats

    OBJECTS tk=TableKey
    PROPERTIES(tk) READONLY class, classSID, name, quantity

    OBJECTS tc=TableColumn
    PROPERTIES(tc) READONLY sid, caption, canonicalName, property, quantity, notNullQuantity,
                   percentNotNull
    PROPERTIES(tc) notRecalculate, recalculateAggregation, recalculateAggregationWithDependencies, 
            recalculateAggregationWithDependents, checkAggregation

    OBJECTS dc=DropColumn
    PROPERTIES(dc) READONLY sidTable, sid, time, revision
    PROPERTIES(dc) drop

    FILTERS
        table(tk)==t,
        table(tc)==t
;

DESIGN physicalModel {
    main{
        NEW container BEFORE functions.box{
            fill = 1;
            type = TABBED;
            NEW modelContainer {
                fill = 1;
                caption = 'Таблицы';
                MOVE t.box {
                    caption = 'Таблицы';
                };
                MOVE tk.box {
                    caption = 'Ключи';
                }
                MOVE tc.box {
                    caption = 'Колонки';
                }
            }

            NEW dropColumnsContainer {
                fill = 1;
                caption = 'Удалённые колонки';
                MOVE dc.box;
            }
        }
    }
}

FORM forms 'Формы'

    TREE treeFormObject tf=NavigatorElement PARENT parent
    PROPERTIES(tf) READONLY canonicalName, caption

    OBJECTS u=CustomUser FIXED PANEL
    PROPERTIES(u) SELECTOR firstName, lastName, login

    OBJECTS g=GroupObject
    PROPERTIES(g) sid READONLY, fontSize, isFontBold, isFontItalic, pageSize, hasUserPreferences
    PROPERTIES(g,u) fontSize, isFontBold, isFontItalic, pageSize, hasUserPreferences
    
    OBJECTS fg=FormGrouping
    PROPERTIES(fg) name, itemQuantity

    OBJECTS p=PropertyDraw
    PROPERTIES(p) READONLY sid, caption

    PROPERTIES(p) captionShow
    PROPERTIES(p,u) captionShow
    PROPERTIES(p) columnCaption
    PROPERTIES(p,u) columnCaption
    PROPERTIES(p) columnWidth
    PROPERTIES(p,u) columnWidth
    PROPERTIES(p) columnOrder
    PROPERTIES(p,u) columnOrder
    PROPERTIES(p) columnSort
    PROPERTIES(p) columnAscendingSort
    PROPERTIES(p,u) columnSort
    PROPERTIES(p,u) columnAscendingSort
    PROPERTIES(fg,p) groupOrder, sum, max, pivot 

    FILTERS
        navigatorElement(g)==tf,
        form(p)==tf,
        groupObject(fg)==g 

    FILTERGROUP filtersForm
        FILTER 'Свойства только текущей группы объектов' groupObject(p)==g 'F8'
;

DESIGN forms {
    main {
        NEW groupingContainer BEFORE p.box {
            type = CONTAINERH;
            fill = 1;
            MOVE g.box {
                fill = 2;
            }
            MOVE fg.box {
                fill = 1;
            }
        }
    }
}

dumb (PropertyGroup pg) = ' ' IF pg IS PropertyGroup;

FORM properties 'Свойства'
    OBJECTS p=Property
    PROPERTIES(p) READONLY caption, canonicalName, dbName, tableSID, return, class, complexity, parent, number, quantity, notNullQuantity, userLoggable EDITABLE, loggable, stored EDITABLE, isSetNotNull EDITABLE

    TREE treePropertiesObject tps=PropertyGroup PARENT parent, ps=Property
    PROPERTIES(tps) READONLY caption, SID, dumb, dumb, dumb, dumb, dumb, parent, number, dumb, dumb, dumb, dumb
    PROPERTIES(ps) READONLY caption, canonicalName, dbName, return, class, complexity, parent, number, quantity, notNullQuantity, userLoggable EDITABLE, loggable, stored EDITABLE, isSetNotNull EDITABLE

    ORDER BY number(p)
    ORDER BY number(tps)

    FILTERS
        parent(ps)==tps
;

DESIGN properties {
    main {
        NEW container BEFORE functions.box {
            fill = 1;
            type = TABBED;

            NEW treeContainer {
                fill = 1;
                caption = 'Дерево';
                MOVE treePropertiesObject.tree.box;
            }

            NEW tableContainer {
                fill = 1;
                caption = 'Таблица';
                MOVE p.box;
            }
        }
    }
}

NAVIGATOR {
    configuration {
        ADD Reflection.physicalModel;
        ADD Reflection.forms;
        ADD Reflection.properties;
    }
}
